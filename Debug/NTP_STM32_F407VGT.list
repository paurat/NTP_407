
NTP_STM32_F407VGT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ce0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f04  08017e70  08017e70  00027e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ad74  0801ad74  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801ad74  0801ad74  0002ad74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ad7c  0801ad7c  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ad7c  0801ad7c  0002ad7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ad80  0801ad80  0002ad80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0801ad84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c810  200001f4  0801af78  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ca04  0801af78  0003ca04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000502a3  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000991f  00000000  00000000  000804c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002900  00000000  00000000  00089de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002700  00000000  00000000  0008c6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035aa4  00000000  00000000  0008ede8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f2d5  00000000  00000000  000c488c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbf41  00000000  00000000  00103b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ffaa2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b220  00000000  00000000  001ffaf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017e58 	.word	0x08017e58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	08017e58 	.word	0x08017e58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	4a07      	ldr	r2, [pc, #28]	; (8000594 <vApplicationGetIdleTaskMemory+0x2c>)
 8000578:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <vApplicationGetIdleTaskMemory+0x30>)
 800057e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000210 	.word	0x20000210
 8000598:	20000264 	.word	0x20000264

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b0c0      	sub	sp, #256	; 0x100
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	memset(&gps,0,sizeof(gps));
 80005a2:	221b      	movs	r2, #27
 80005a4:	2100      	movs	r1, #0
 80005a6:	489f      	ldr	r0, [pc, #636]	; (8000824 <main+0x288>)
 80005a8:	f016 fc34 	bl	8016e14 <memset>
		// ZDA-38;RMC-68



		 //включение ZDA
		 char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x0B, 0x6B};
 80005ac:	4b9e      	ldr	r3, [pc, #632]	; (8000828 <main+0x28c>)
 80005ae:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 80005b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};
 80005b8:	4a9c      	ldr	r2, [pc, #624]	; (800082c <main+0x290>)
 80005ba:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80005be:	ca07      	ldmia	r2, {r0, r1, r2}
 80005c0:	c303      	stmia	r3!, {r0, r1}
 80005c2:	801a      	strh	r2, [r3, #0]
		 //отключение ZDA
		 //char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5B};
		 //char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};

		 //отключение остального
		 char MESGGA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x23};
 80005c4:	4b9a      	ldr	r3, [pc, #616]	; (8000830 <main+0x294>)
 80005c6:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 80005ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONGGA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x00, 0xF9, 0x11};
 80005d0:	4a98      	ldr	r2, [pc, #608]	; (8000834 <main+0x298>)
 80005d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80005d8:	c303      	stmia	r3!, {r0, r1}
 80005da:	801a      	strh	r2, [r3, #0]

		 char MESGLL[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A};
 80005dc:	4b96      	ldr	r3, [pc, #600]	; (8000838 <main+0x29c>)
 80005de:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 80005e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONGLL[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x01, 0xFA, 0x12};
 80005e8:	4a94      	ldr	r2, [pc, #592]	; (800083c <main+0x2a0>)
 80005ea:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80005ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80005f0:	c303      	stmia	r3!, {r0, r1}
 80005f2:	801a      	strh	r2, [r3, #0]

		 char MESGSA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31};
 80005f4:	4b92      	ldr	r3, [pc, #584]	; (8000840 <main+0x2a4>)
 80005f6:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80005fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONGSA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x02, 0xFB, 0x13};
 8000600:	4a90      	ldr	r2, [pc, #576]	; (8000844 <main+0x2a8>)
 8000602:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000606:	ca07      	ldmia	r2, {r0, r1, r2}
 8000608:	c303      	stmia	r3!, {r0, r1}
 800060a:	801a      	strh	r2, [r3, #0]

		 char MESGSV[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38};
 800060c:	4b8e      	ldr	r3, [pc, #568]	; (8000848 <main+0x2ac>)
 800060e:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8000612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000614:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONGSV[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x03, 0xFC, 0x14};
 8000618:	4a8c      	ldr	r2, [pc, #560]	; (800084c <main+0x2b0>)
 800061a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800061e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000620:	c303      	stmia	r3!, {r0, r1}
 8000622:	801a      	strh	r2, [r3, #0]

		 char MESVTG[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x46};
 8000624:	4b8a      	ldr	r3, [pc, #552]	; (8000850 <main+0x2b4>)
 8000626:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800062a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800062c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONVTG[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x05, 0xFE, 0x16};
 8000630:	4a88      	ldr	r2, [pc, #544]	; (8000854 <main+0x2b8>)
 8000632:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000636:	ca07      	ldmia	r2, {r0, r1, r2}
 8000638:	c303      	stmia	r3!, {r0, r1}
 800063a:	801a      	strh	r2, [r3, #0]
		 //отключение RMC на всякий
		 //char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3F};
		 //char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};

		 //включение RMC
		 char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x07, 0x4F};
 800063c:	4b86      	ldr	r3, [pc, #536]	; (8000858 <main+0x2bc>)
 800063e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000642:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000644:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};
 8000648:	4a84      	ldr	r2, [pc, #528]	; (800085c <main+0x2c0>)
 800064a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800064e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000650:	c303      	stmia	r3!, {r0, r1}
 8000652:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 fee0 	bl	8001418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f910 	bl	800087c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f000 fac0 	bl	8000be0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000660:	f000 f98e 	bl	8000980 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000664:	f000 fa68 	bl	8000b38 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000668:	f000 fa90 	bl	8000b8c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800066c:	f000 fa18 	bl	8000aa0 <MX_TIM2_Init>
  MX_SPI3_Init();
 8000670:	f000 f9e0 	bl	8000a34 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  //TIM1
    HAL_TIM_Base_Start_IT(&htim2);
 8000674:	487a      	ldr	r0, [pc, #488]	; (8000860 <main+0x2c4>)
 8000676:	f004 fc17 	bl	8004ea8 <HAL_TIM_Base_Start_IT>

    HAL_Delay(5000);
 800067a:	f241 3088 	movw	r0, #5000	; 0x1388
 800067e:	f000 ff0d 	bl	800149c <HAL_Delay>

   //ON ZDA
    HAL_UART_Transmit(&huart2,(uint8_t*) MESZDA, 16, 1000);
 8000682:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8000686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068a:	2210      	movs	r2, #16
 800068c:	4875      	ldr	r0, [pc, #468]	; (8000864 <main+0x2c8>)
 800068e:	f005 f88a 	bl	80057a6 <HAL_UART_Transmit>
    HAL_Delay(100);
 8000692:	2064      	movs	r0, #100	; 0x64
 8000694:	f000 ff02 	bl	800149c <HAL_Delay>
    HAL_UART_Transmit(&huart2,(uint8_t*) CONZDA, 10, 1000);
 8000698:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800069c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a0:	220a      	movs	r2, #10
 80006a2:	4870      	ldr	r0, [pc, #448]	; (8000864 <main+0x2c8>)
 80006a4:	f005 f87f 	bl	80057a6 <HAL_UART_Transmit>
    HAL_Delay(100);
 80006a8:	2064      	movs	r0, #100	; 0x64
 80006aa:	f000 fef7 	bl	800149c <HAL_Delay>

    // OFF protokol
    HAL_UART_Transmit(&huart2,(uint8_t*) MESGGA, 16, 1000);
 80006ae:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80006b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b6:	2210      	movs	r2, #16
 80006b8:	486a      	ldr	r0, [pc, #424]	; (8000864 <main+0x2c8>)
 80006ba:	f005 f874 	bl	80057a6 <HAL_UART_Transmit>
    HAL_Delay(100);
 80006be:	2064      	movs	r0, #100	; 0x64
 80006c0:	f000 feec 	bl	800149c <HAL_Delay>
    HAL_UART_Transmit(&huart2,(uint8_t*) CONGGA, 10, 1000);
 80006c4:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80006c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006cc:	220a      	movs	r2, #10
 80006ce:	4865      	ldr	r0, [pc, #404]	; (8000864 <main+0x2c8>)
 80006d0:	f005 f869 	bl	80057a6 <HAL_UART_Transmit>
    HAL_Delay(100);
 80006d4:	2064      	movs	r0, #100	; 0x64
 80006d6:	f000 fee1 	bl	800149c <HAL_Delay>

    HAL_UART_Transmit(&huart2,(uint8_t*) MESGLL, 16, 1000);
 80006da:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80006de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e2:	2210      	movs	r2, #16
 80006e4:	485f      	ldr	r0, [pc, #380]	; (8000864 <main+0x2c8>)
 80006e6:	f005 f85e 	bl	80057a6 <HAL_UART_Transmit>
    HAL_Delay(100);
 80006ea:	2064      	movs	r0, #100	; 0x64
 80006ec:	f000 fed6 	bl	800149c <HAL_Delay>
    HAL_UART_Transmit(&huart2,(uint8_t*) CONGLL, 10, 1000);
 80006f0:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80006f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f8:	220a      	movs	r2, #10
 80006fa:	485a      	ldr	r0, [pc, #360]	; (8000864 <main+0x2c8>)
 80006fc:	f005 f853 	bl	80057a6 <HAL_UART_Transmit>
    HAL_Delay(100);
 8000700:	2064      	movs	r0, #100	; 0x64
 8000702:	f000 fecb 	bl	800149c <HAL_Delay>

    HAL_UART_Transmit(&huart2,(uint8_t*) MESGSA, 16, 1000);
 8000706:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800070a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070e:	2210      	movs	r2, #16
 8000710:	4854      	ldr	r0, [pc, #336]	; (8000864 <main+0x2c8>)
 8000712:	f005 f848 	bl	80057a6 <HAL_UART_Transmit>
    HAL_Delay(100);
 8000716:	2064      	movs	r0, #100	; 0x64
 8000718:	f000 fec0 	bl	800149c <HAL_Delay>
    HAL_UART_Transmit(&huart2,(uint8_t*) CONGSA, 10, 1000);
 800071c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000724:	220a      	movs	r2, #10
 8000726:	484f      	ldr	r0, [pc, #316]	; (8000864 <main+0x2c8>)
 8000728:	f005 f83d 	bl	80057a6 <HAL_UART_Transmit>
    HAL_Delay(100);
 800072c:	2064      	movs	r0, #100	; 0x64
 800072e:	f000 feb5 	bl	800149c <HAL_Delay>

    HAL_UART_Transmit(&huart2,(uint8_t*) MESGSV, 16, 1000);
 8000732:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073a:	2210      	movs	r2, #16
 800073c:	4849      	ldr	r0, [pc, #292]	; (8000864 <main+0x2c8>)
 800073e:	f005 f832 	bl	80057a6 <HAL_UART_Transmit>
    HAL_Delay(100);
 8000742:	2064      	movs	r0, #100	; 0x64
 8000744:	f000 feaa 	bl	800149c <HAL_Delay>
    HAL_UART_Transmit(&huart2,(uint8_t*) CONGSV, 10, 1000);
 8000748:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800074c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000750:	220a      	movs	r2, #10
 8000752:	4844      	ldr	r0, [pc, #272]	; (8000864 <main+0x2c8>)
 8000754:	f005 f827 	bl	80057a6 <HAL_UART_Transmit>
    HAL_Delay(100);
 8000758:	2064      	movs	r0, #100	; 0x64
 800075a:	f000 fe9f 	bl	800149c <HAL_Delay>

    HAL_UART_Transmit(&huart2,(uint8_t*) MESVTG, 16, 1000);
 800075e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000766:	2210      	movs	r2, #16
 8000768:	483e      	ldr	r0, [pc, #248]	; (8000864 <main+0x2c8>)
 800076a:	f005 f81c 	bl	80057a6 <HAL_UART_Transmit>
    HAL_Delay(100);
 800076e:	2064      	movs	r0, #100	; 0x64
 8000770:	f000 fe94 	bl	800149c <HAL_Delay>
    HAL_UART_Transmit(&huart2,(uint8_t*) CONVTG, 10, 1000);
 8000774:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000778:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077c:	220a      	movs	r2, #10
 800077e:	4839      	ldr	r0, [pc, #228]	; (8000864 <main+0x2c8>)
 8000780:	f005 f811 	bl	80057a6 <HAL_UART_Transmit>
    HAL_Delay(100);
 8000784:	2064      	movs	r0, #100	; 0x64
 8000786:	f000 fe89 	bl	800149c <HAL_Delay>

    //отключение и включение RMC на всякий
    HAL_UART_Transmit(&huart2,(uint8_t*) MESRMC, 16, 1000);
 800078a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800078e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000792:	2210      	movs	r2, #16
 8000794:	4833      	ldr	r0, [pc, #204]	; (8000864 <main+0x2c8>)
 8000796:	f005 f806 	bl	80057a6 <HAL_UART_Transmit>
    HAL_Delay(100);
 800079a:	2064      	movs	r0, #100	; 0x64
 800079c:	f000 fe7e 	bl	800149c <HAL_Delay>
    HAL_UART_Transmit(&huart2,(uint8_t*) CONRMC, 10, 1000);
 80007a0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80007a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a8:	220a      	movs	r2, #10
 80007aa:	482e      	ldr	r0, [pc, #184]	; (8000864 <main+0x2c8>)
 80007ac:	f004 fffb 	bl	80057a6 <HAL_UART_Transmit>
    HAL_Delay(100);
 80007b0:	2064      	movs	r0, #100	; 0x64
 80007b2:	f000 fe73 	bl	800149c <HAL_Delay>

    //start the web server
    int offset =0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
   //ReadDeviceAddressOffset((char*) &user_info, sizeof(user_info), offset);
   offset+=sizeof(user_info);
 80007bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80007c0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80007c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
   //Обнуление PPS
   PPS_count=0;
 80007c8:	4b27      	ldr	r3, [pc, #156]	; (8000868 <main+0x2cc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
   gps.year[0]='V';
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <main+0x288>)
 80007d0:	2256      	movs	r2, #86	; 0x56
 80007d2:	719a      	strb	r2, [r3, #6]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007d4:	4b25      	ldr	r3, [pc, #148]	; (800086c <main+0x2d0>)
 80007d6:	f107 041c 	add.w	r4, r7, #28
 80007da:	461d      	mov	r5, r3
 80007dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f008 ff36 	bl	8009660 <osThreadCreate>
 80007f4:	4603      	mov	r3, r0
 80007f6:	4a1e      	ldr	r2, [pc, #120]	; (8000870 <main+0x2d4>)
 80007f8:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, tcpecho_thread, osPriorityIdle, 0, 128);
 80007fa:	463b      	mov	r3, r7
 80007fc:	4a1d      	ldr	r2, [pc, #116]	; (8000874 <main+0x2d8>)
 80007fe:	461c      	mov	r4, r3
 8000800:	4615      	mov	r5, r2
 8000802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000806:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800080a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800080e:	463b      	mov	r3, r7
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f008 ff24 	bl	8009660 <osThreadCreate>
 8000818:	4603      	mov	r3, r0
 800081a:	4a17      	ldr	r2, [pc, #92]	; (8000878 <main+0x2dc>)
 800081c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800081e:	f008 ff08 	bl	8009632 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000822:	e7fe      	b.n	8000822 <main+0x286>
 8000824:	200045a8 	.word	0x200045a8
 8000828:	08017e88 	.word	0x08017e88
 800082c:	08017e98 	.word	0x08017e98
 8000830:	08017ea4 	.word	0x08017ea4
 8000834:	08017eb4 	.word	0x08017eb4
 8000838:	08017ec0 	.word	0x08017ec0
 800083c:	08017ed0 	.word	0x08017ed0
 8000840:	08017edc 	.word	0x08017edc
 8000844:	08017eec 	.word	0x08017eec
 8000848:	08017ef8 	.word	0x08017ef8
 800084c:	08017f08 	.word	0x08017f08
 8000850:	08017f14 	.word	0x08017f14
 8000854:	08017f24 	.word	0x08017f24
 8000858:	08017f30 	.word	0x08017f30
 800085c:	08017f40 	.word	0x08017f40
 8000860:	200047b4 	.word	0x200047b4
 8000864:	200047fc 	.word	0x200047fc
 8000868:	20000464 	.word	0x20000464
 800086c:	08017f4c 	.word	0x08017f4c
 8000870:	200045c4 	.word	0x200045c4
 8000874:	08017f68 	.word	0x08017f68
 8000878:	2000478c 	.word	0x2000478c

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b098      	sub	sp, #96	; 0x60
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000886:	2230      	movs	r2, #48	; 0x30
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f016 fac2 	bl	8016e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b31      	ldr	r3, [pc, #196]	; (8000978 <SystemClock_Config+0xfc>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a30      	ldr	r2, [pc, #192]	; (8000978 <SystemClock_Config+0xfc>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
 80008be:	4b2e      	ldr	r3, [pc, #184]	; (8000978 <SystemClock_Config+0xfc>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b2b      	ldr	r3, [pc, #172]	; (800097c <SystemClock_Config+0x100>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a2a      	ldr	r2, [pc, #168]	; (800097c <SystemClock_Config+0x100>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	4b28      	ldr	r3, [pc, #160]	; (800097c <SystemClock_Config+0x100>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80008e6:	2309      	movs	r3, #9
 80008e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008f0:	2301      	movs	r3, #1
 80008f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f4:	2302      	movs	r3, #2
 80008f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008fe:	2319      	movs	r3, #25
 8000900:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000902:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000906:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000908:	2302      	movs	r3, #2
 800090a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800090c:	2307      	movs	r3, #7
 800090e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000910:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000914:	4618      	mov	r0, r3
 8000916:	f003 fa2b 	bl	8003d70 <HAL_RCC_OscConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000920:	f000 fab0 	bl	8000e84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000924:	230f      	movs	r3, #15
 8000926:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000928:	2302      	movs	r3, #2
 800092a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000930:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	2105      	movs	r1, #5
 8000942:	4618      	mov	r0, r3
 8000944:	f003 fc8c 	bl	8004260 <HAL_RCC_ClockConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800094e:	f000 fa99 	bl	8000e84 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000952:	2302      	movs	r3, #2
 8000954:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800095a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4618      	mov	r0, r3
 8000962:	f003 fe7f 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800096c:	f000 fa8a 	bl	8000e84 <Error_Handler>
  }
}
 8000970:	bf00      	nop
 8000972:	3760      	adds	r7, #96	; 0x60
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800
 800097c:	40007000 	.word	0x40007000

08000980 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000994:	2300      	movs	r3, #0
 8000996:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000998:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <MX_RTC_Init+0xac>)
 800099a:	4a25      	ldr	r2, [pc, #148]	; (8000a30 <MX_RTC_Init+0xb0>)
 800099c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <MX_RTC_Init+0xac>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MX_RTC_Init+0xac>)
 80009a6:	227f      	movs	r2, #127	; 0x7f
 80009a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <MX_RTC_Init+0xac>)
 80009ac:	22ff      	movs	r2, #255	; 0xff
 80009ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_RTC_Init+0xac>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_RTC_Init+0xac>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_RTC_Init+0xac>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009c2:	481a      	ldr	r0, [pc, #104]	; (8000a2c <MX_RTC_Init+0xac>)
 80009c4:	f003 ff30 	bl	8004828 <HAL_RTC_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80009ce:	f000 fa59 	bl	8000e84 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 23;
 80009d2:	2317      	movs	r3, #23
 80009d4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 59;
 80009d6:	233b      	movs	r3, #59	; 0x3b
 80009d8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2200      	movs	r2, #0
 80009ea:	4619      	mov	r1, r3
 80009ec:	480f      	ldr	r0, [pc, #60]	; (8000a2c <MX_RTC_Init+0xac>)
 80009ee:	f003 ffac 	bl	800494a <HAL_RTC_SetTime>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80009f8:	f000 fa44 	bl	8000e84 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80009fc:	2307      	movs	r3, #7
 80009fe:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8000a00:	2312      	movs	r3, #18
 8000a02:	707b      	strb	r3, [r7, #1]
  sDate.Date = 31;
 8000a04:	231f      	movs	r3, #31
 8000a06:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	2200      	movs	r2, #0
 8000a10:	4619      	mov	r1, r3
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <MX_RTC_Init+0xac>)
 8000a14:	f004 f856 	bl	8004ac4 <HAL_RTC_SetDate>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000a1e:	f000 fa31 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20004790 	.word	0x20004790
 8000a30:	40002800 	.word	0x40002800

08000a34 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a3a:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <MX_SPI3_Init+0x68>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a44:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a64:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a80:	220a      	movs	r2, #10
 8000a82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a86:	f004 f936 	bl	8004cf6 <HAL_SPI_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000a90:	f000 f9f8 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200046ec 	.word	0x200046ec
 8000a9c:	40003c00 	.word	0x40003c00

08000aa0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_TIM2_Init+0x94>)
 8000abe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <MX_TIM2_Init+0x94>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_TIM2_Init+0x94>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_TIM2_Init+0x94>)
 8000ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <MX_TIM2_Init+0x94>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_TIM2_Init+0x94>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <MX_TIM2_Init+0x94>)
 8000ae6:	f004 f98f 	bl	8004e08 <HAL_TIM_Base_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000af0:	f000 f9c8 	bl	8000e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	4619      	mov	r1, r3
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <MX_TIM2_Init+0x94>)
 8000b02:	f004 fb49 	bl	8005198 <HAL_TIM_ConfigClockSource>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b0c:	f000 f9ba 	bl	8000e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b10:	2300      	movs	r3, #0
 8000b12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_TIM2_Init+0x94>)
 8000b1e:	f004 fd65 	bl	80055ec <HAL_TIMEx_MasterConfigSynchronization>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b28:	f000 f9ac 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200047b4 	.word	0x200047b4

08000b38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_USART1_UART_Init+0x4c>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <MX_USART1_UART_Init+0x50>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <MX_USART1_UART_Init+0x4c>)
 8000b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_USART1_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_USART1_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_USART1_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_USART1_UART_Init+0x4c>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_USART1_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_USART1_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_USART1_UART_Init+0x4c>)
 8000b70:	f004 fdcc 	bl	800570c <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b7a:	f000 f983 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20004744 	.word	0x20004744
 8000b88:	40011000 	.word	0x40011000

08000b8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <MX_USART2_UART_Init+0x50>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000bc4:	f004 fda2 	bl	800570c <HAL_UART_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bce:	f000 f959 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200047fc 	.word	0x200047fc
 8000bdc:	40004400 	.word	0x40004400

08000be0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	; 0x30
 8000be4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61bb      	str	r3, [r7, #24]
 8000bfa:	4b58      	ldr	r3, [pc, #352]	; (8000d5c <MX_GPIO_Init+0x17c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a57      	ldr	r2, [pc, #348]	; (8000d5c <MX_GPIO_Init+0x17c>)
 8000c00:	f043 0310 	orr.w	r3, r3, #16
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b55      	ldr	r3, [pc, #340]	; (8000d5c <MX_GPIO_Init+0x17c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0310 	and.w	r3, r3, #16
 8000c0e:	61bb      	str	r3, [r7, #24]
 8000c10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	4b51      	ldr	r3, [pc, #324]	; (8000d5c <MX_GPIO_Init+0x17c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a50      	ldr	r2, [pc, #320]	; (8000d5c <MX_GPIO_Init+0x17c>)
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b4e      	ldr	r3, [pc, #312]	; (8000d5c <MX_GPIO_Init+0x17c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b4a      	ldr	r3, [pc, #296]	; (8000d5c <MX_GPIO_Init+0x17c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a49      	ldr	r2, [pc, #292]	; (8000d5c <MX_GPIO_Init+0x17c>)
 8000c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b47      	ldr	r3, [pc, #284]	; (8000d5c <MX_GPIO_Init+0x17c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <MX_GPIO_Init+0x17c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a42      	ldr	r2, [pc, #264]	; (8000d5c <MX_GPIO_Init+0x17c>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b40      	ldr	r3, [pc, #256]	; (8000d5c <MX_GPIO_Init+0x17c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <MX_GPIO_Init+0x17c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a3b      	ldr	r2, [pc, #236]	; (8000d5c <MX_GPIO_Init+0x17c>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b39      	ldr	r3, [pc, #228]	; (8000d5c <MX_GPIO_Init+0x17c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b35      	ldr	r3, [pc, #212]	; (8000d5c <MX_GPIO_Init+0x17c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a34      	ldr	r2, [pc, #208]	; (8000d5c <MX_GPIO_Init+0x17c>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b32      	ldr	r3, [pc, #200]	; (8000d5c <MX_GPIO_Init+0x17c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0308 	and.w	r3, r3, #8
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	21c0      	movs	r1, #192	; 0xc0
 8000ca2:	482f      	ldr	r0, [pc, #188]	; (8000d60 <MX_GPIO_Init+0x180>)
 8000ca4:	f001 feae 	bl	8002a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000ca8:	2318      	movs	r3, #24
 8000caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	482a      	ldr	r0, [pc, #168]	; (8000d64 <MX_GPIO_Init+0x184>)
 8000cbc:	f001 fd06 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000cc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4824      	ldr	r0, [pc, #144]	; (8000d68 <MX_GPIO_Init+0x188>)
 8000cd6:	f001 fcf9 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PPS_Pin */
  GPIO_InitStruct.Pin = PPS_Pin;
 8000cda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PPS_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	481e      	ldr	r0, [pc, #120]	; (8000d6c <MX_GPIO_Init+0x18c>)
 8000cf2:	f001 fceb 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cf6:	23c0      	movs	r3, #192	; 0xc0
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4814      	ldr	r0, [pc, #80]	; (8000d60 <MX_GPIO_Init+0x180>)
 8000d0e:	f001 fcdd 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	4812      	ldr	r0, [pc, #72]	; (8000d70 <MX_GPIO_Init+0x190>)
 8000d28:	f001 fcd0 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d2c:	2310      	movs	r3, #16
 8000d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480b      	ldr	r0, [pc, #44]	; (8000d6c <MX_GPIO_Init+0x18c>)
 8000d40:	f001 fcc4 	bl	80026cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2105      	movs	r1, #5
 8000d48:	2028      	movs	r0, #40	; 0x28
 8000d4a:	f000 fc83 	bl	8001654 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d4e:	2028      	movs	r0, #40	; 0x28
 8000d50:	f000 fc9c 	bl	800168c <HAL_NVIC_EnableIRQ>

}
 8000d54:	bf00      	nop
 8000d56:	3730      	adds	r7, #48	; 0x30
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020800 	.word	0x40020800
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	40020c00 	.word	0x40020c00
 8000d70:	40020000 	.word	0x40020000

08000d74 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	80fb      	strh	r3, [r7, #6]
	int PPS_Counter_period=0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
	//int PPS_count=0;//вынес для проверки
	//int PPS_mass[10]={0};//вынес для проверки
	if(GPIO_Pin == PPS_Pin) {
 8000d82:	88fb      	ldrh	r3, [r7, #6]
 8000d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d88:	d13d      	bne.n	8000e06 <HAL_GPIO_EXTI_Callback+0x92>
		if(PPS_count>2&&PPS_count<12){
 8000d8a:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <HAL_GPIO_EXTI_Callback+0xb8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	dd0d      	ble.n	8000dae <HAL_GPIO_EXTI_Callback+0x3a>
 8000d92:	4b26      	ldr	r3, [pc, #152]	; (8000e2c <HAL_GPIO_EXTI_Callback+0xb8>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b0b      	cmp	r3, #11
 8000d98:	dc09      	bgt.n	8000dae <HAL_GPIO_EXTI_Callback+0x3a>
		PPS_mass[PPS_count-2] = TIM2->CNT;
 8000d9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000da0:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <HAL_GPIO_EXTI_Callback+0xb8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3b02      	subs	r3, #2
 8000da6:	4611      	mov	r1, r2
 8000da8:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000daa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if(PPS_count==12){
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <HAL_GPIO_EXTI_Callback+0xb8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b0c      	cmp	r3, #12
 8000db4:	d127      	bne.n	8000e06 <HAL_GPIO_EXTI_Callback+0x92>
			//HAL_GPIO_TogglePin(Timled_GPIO_Port, Timled_Pin);
			PPS_Counter_period=(PPS_mass[0]+PPS_mass[1]+PPS_mass[2]+PPS_mass[3]+PPS_mass[4]+PPS_mass[5]+PPS_mass[6]+PPS_mass[7]+PPS_mass[8]+PPS_mass[9])/9;
 8000db6:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	441a      	add	r2, r3
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	441a      	add	r2, r3
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	441a      	add	r2, r3
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	441a      	add	r2, r3
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	441a      	add	r2, r3
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	441a      	add	r2, r3
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	441a      	add	r2, r3
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	441a      	add	r2, r3
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dee:	4413      	add	r3, r2
 8000df0:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000df2:	fb82 1203 	smull	r1, r2, r2, r3
 8000df6:	1052      	asrs	r2, r2, #1
 8000df8:	17db      	asrs	r3, r3, #31
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	60fb      	str	r3, [r7, #12]
			TIM2->ARR=PPS_Counter_period;
 8000dfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	if(PPS_count<13){
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_GPIO_EXTI_Callback+0xb8>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b0c      	cmp	r3, #12
 8000e0c:	dc08      	bgt.n	8000e20 <HAL_GPIO_EXTI_Callback+0xac>
		PPS_count=PPS_count+1;
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <HAL_GPIO_EXTI_Callback+0xb8>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	3301      	adds	r3, #1
 8000e14:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <HAL_GPIO_EXTI_Callback+0xb8>)
 8000e16:	6013      	str	r3, [r2, #0]
		TIM2->CNT = 0;//обнуление счетчика
 8000e18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	625a      	str	r2, [r3, #36]	; 0x24
		}


		}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	20000464 	.word	0x20000464
 8000e30:	20000468 	.word	0x20000468
 8000e34:	38e38e39 	.word	0x38e38e39

08000e38 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000e40:	f006 faf4 	bl	800742c <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000e44:	f015 faa4 	bl	8016390 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f008 fc55 	bl	80096f8 <osDelay>
 8000e4e:	e7fb      	b.n	8000e48 <StartDefaultTask+0x10>

08000e50 <tcpecho_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tcpecho_thread */
void tcpecho_thread(void const * argument)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tcpecho_thread */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f008 fc4d 	bl	80096f8 <osDelay>
 8000e5e:	e7fb      	b.n	8000e58 <tcpecho_thread+0x8>

08000e60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d101      	bne.n	8000e76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e72:	f000 faf3 	bl	800145c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40010000 	.word	0x40010000

08000e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e88:	b672      	cpsid	i
}
 8000e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <Error_Handler+0x8>
	...

08000e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_MspInit+0x54>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a11      	ldr	r2, [pc, #68]	; (8000ee4 <HAL_MspInit+0x54>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_MspInit+0x54>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_MspInit+0x54>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <HAL_MspInit+0x54>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_MspInit+0x54>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	210f      	movs	r1, #15
 8000ed2:	f06f 0001 	mvn.w	r0, #1
 8000ed6:	f000 fbbd 	bl	8001654 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800

08000ee8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <HAL_RTC_MspInit+0x24>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d102      	bne.n	8000f00 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_RTC_MspInit+0x28>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	40002800 	.word	0x40002800
 8000f10:	42470e3c 	.word	0x42470e3c

08000f14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a19      	ldr	r2, [pc, #100]	; (8000f98 <HAL_SPI_MspInit+0x84>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d12c      	bne.n	8000f90 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <HAL_SPI_MspInit+0x88>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a17      	ldr	r2, [pc, #92]	; (8000f9c <HAL_SPI_MspInit+0x88>)
 8000f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <HAL_SPI_MspInit+0x88>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_SPI_MspInit+0x88>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <HAL_SPI_MspInit+0x88>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_SPI_MspInit+0x88>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000f6e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f80:	2306      	movs	r3, #6
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <HAL_SPI_MspInit+0x8c>)
 8000f8c:	f001 fb9e 	bl	80026cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	; 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40003c00 	.word	0x40003c00
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020800 	.word	0x40020800

08000fa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb4:	d10d      	bne.n	8000fd2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <HAL_TIM_Base_MspInit+0x3c>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <HAL_TIM_Base_MspInit+0x3c>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_TIM_Base_MspInit+0x3c>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08c      	sub	sp, #48	; 0x30
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a32      	ldr	r2, [pc, #200]	; (80010cc <HAL_UART_MspInit+0xe8>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d12c      	bne.n	8001060 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
 800100a:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <HAL_UART_MspInit+0xec>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	4a30      	ldr	r2, [pc, #192]	; (80010d0 <HAL_UART_MspInit+0xec>)
 8001010:	f043 0310 	orr.w	r3, r3, #16
 8001014:	6453      	str	r3, [r2, #68]	; 0x44
 8001016:	4b2e      	ldr	r3, [pc, #184]	; (80010d0 <HAL_UART_MspInit+0xec>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <HAL_UART_MspInit+0xec>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a29      	ldr	r2, [pc, #164]	; (80010d0 <HAL_UART_MspInit+0xec>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <HAL_UART_MspInit+0xec>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800103e:	23c0      	movs	r3, #192	; 0xc0
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800104e:	2307      	movs	r3, #7
 8001050:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	4619      	mov	r1, r3
 8001058:	481e      	ldr	r0, [pc, #120]	; (80010d4 <HAL_UART_MspInit+0xf0>)
 800105a:	f001 fb37 	bl	80026cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800105e:	e030      	b.n	80010c2 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <HAL_UART_MspInit+0xf4>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d12b      	bne.n	80010c2 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <HAL_UART_MspInit+0xec>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <HAL_UART_MspInit+0xec>)
 8001074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001078:	6413      	str	r3, [r2, #64]	; 0x40
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <HAL_UART_MspInit+0xec>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_UART_MspInit+0xec>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <HAL_UART_MspInit+0xec>)
 8001090:	f043 0308 	orr.w	r3, r3, #8
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_UART_MspInit+0xec>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80010a2:	2360      	movs	r3, #96	; 0x60
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010b2:	2307      	movs	r3, #7
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4619      	mov	r1, r3
 80010bc:	4807      	ldr	r0, [pc, #28]	; (80010dc <HAL_UART_MspInit+0xf8>)
 80010be:	f001 fb05 	bl	80026cc <HAL_GPIO_Init>
}
 80010c2:	bf00      	nop
 80010c4:	3730      	adds	r7, #48	; 0x30
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40011000 	.word	0x40011000
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020400 	.word	0x40020400
 80010d8:	40004400 	.word	0x40004400
 80010dc:	40020c00 	.word	0x40020c00

080010e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08c      	sub	sp, #48	; 0x30
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	2019      	movs	r0, #25
 80010f6:	f000 faad 	bl	8001654 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010fa:	2019      	movs	r0, #25
 80010fc:	f000 fac6 	bl	800168c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <HAL_InitTick+0xa4>)
 8001106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001108:	4a1e      	ldr	r2, [pc, #120]	; (8001184 <HAL_InitTick+0xa4>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6453      	str	r3, [r2, #68]	; 0x44
 8001110:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <HAL_InitTick+0xa4>)
 8001112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800111c:	f107 0210 	add.w	r2, r7, #16
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4611      	mov	r1, r2
 8001126:	4618      	mov	r0, r3
 8001128:	f003 fa6a 	bl	8004600 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800112c:	f003 fa54 	bl	80045d8 <HAL_RCC_GetPCLK2Freq>
 8001130:	4603      	mov	r3, r0
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001138:	4a13      	ldr	r2, [pc, #76]	; (8001188 <HAL_InitTick+0xa8>)
 800113a:	fba2 2303 	umull	r2, r3, r2, r3
 800113e:	0c9b      	lsrs	r3, r3, #18
 8001140:	3b01      	subs	r3, #1
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_InitTick+0xac>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <HAL_InitTick+0xb0>)
 8001148:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <HAL_InitTick+0xac>)
 800114c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001150:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001152:	4a0e      	ldr	r2, [pc, #56]	; (800118c <HAL_InitTick+0xac>)
 8001154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001156:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <HAL_InitTick+0xac>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <HAL_InitTick+0xac>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001164:	4809      	ldr	r0, [pc, #36]	; (800118c <HAL_InitTick+0xac>)
 8001166:	f003 fe4f 	bl	8004e08 <HAL_TIM_Base_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d104      	bne.n	800117a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001170:	4806      	ldr	r0, [pc, #24]	; (800118c <HAL_InitTick+0xac>)
 8001172:	f003 fe99 	bl	8004ea8 <HAL_TIM_Base_Start_IT>
 8001176:	4603      	mov	r3, r0
 8001178:	e000      	b.n	800117c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	3730      	adds	r7, #48	; 0x30
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40023800 	.word	0x40023800
 8001188:	431bde83 	.word	0x431bde83
 800118c:	20004868 	.word	0x20004868
 8001190:	40010000 	.word	0x40010000

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <NMI_Handler+0x4>

0800119a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <HardFault_Handler+0x4>

080011a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <MemManage_Handler+0x4>

080011a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <BusFault_Handler+0x4>

080011ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <UsageFault_Handler+0x4>

080011b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80011c6:	f003 fedf 	bl	8004f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20004868 	.word	0x20004868

080011d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80011d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80011dc:	f001 fc2c 	bl	8002a38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <ETH_IRQHandler+0x10>)
 80011ea:	f000 fe41 	bl	8001e70 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200061cc 	.word	0x200061cc

080011f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <OTG_FS_IRQHandler+0x10>)
 80011fe:	f001 fd83 	bl	8002d08 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000c5f0 	.word	0x2000c5f0

0800120c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	return 1;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <_kill>:

int _kill(int pid, int sig)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <_kill+0x20>)
 8001228:	2216      	movs	r2, #22
 800122a:	601a      	str	r2, [r3, #0]
	return -1;
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	2000b118 	.word	0x2000b118

08001240 <_exit>:

void _exit (int status)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ffe5 	bl	800121c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001252:	e7fe      	b.n	8001252 <_exit+0x12>

08001254 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	e00a      	b.n	800127c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001266:	f3af 8000 	nop.w
 800126a:	4601      	mov	r1, r0
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	60ba      	str	r2, [r7, #8]
 8001272:	b2ca      	uxtb	r2, r1
 8001274:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	dbf0      	blt.n	8001266 <_read+0x12>
	}

return len;
 8001284:	687b      	ldr	r3, [r7, #4]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	e009      	b.n	80012b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	60ba      	str	r2, [r7, #8]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbf1      	blt.n	80012a0 <_write+0x12>
	}
	return len;
 80012bc:	687b      	ldr	r3, [r7, #4]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_close>:

int _close(int file)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
	return -1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ee:	605a      	str	r2, [r3, #4]
	return 0;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <_isatty>:

int _isatty(int file)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
	return 1;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
	return 0;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001338:	4a14      	ldr	r2, [pc, #80]	; (800138c <_sbrk+0x5c>)
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <_sbrk+0x60>)
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <_sbrk+0x64>)
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <_sbrk+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	429a      	cmp	r2, r3
 800135e:	d205      	bcs.n	800136c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <_sbrk+0x6c>)
 8001362:	220c      	movs	r2, #12
 8001364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e009      	b.n	8001380 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	4a06      	ldr	r2, [pc, #24]	; (8001394 <_sbrk+0x64>)
 800137c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	4618      	mov	r0, r3
 8001382:	371c      	adds	r7, #28
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	20020000 	.word	0x20020000
 8001390:	00000400 	.word	0x00000400
 8001394:	20000490 	.word	0x20000490
 8001398:	2000ca08 	.word	0x2000ca08
 800139c:	2000b118 	.word	0x2000b118

080013a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <SystemInit+0x20>)
 80013a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <SystemInit+0x20>)
 80013ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c8:	480d      	ldr	r0, [pc, #52]	; (8001400 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ca:	490e      	ldr	r1, [pc, #56]	; (8001404 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013cc:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d0:	e002      	b.n	80013d8 <LoopCopyDataInit>

080013d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d6:	3304      	adds	r3, #4

080013d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013dc:	d3f9      	bcc.n	80013d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013e0:	4c0b      	ldr	r4, [pc, #44]	; (8001410 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e4:	e001      	b.n	80013ea <LoopFillZerobss>

080013e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e8:	3204      	adds	r2, #4

080013ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ec:	d3fb      	bcc.n	80013e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013ee:	f7ff ffd7 	bl	80013a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013f2:	f015 fccf 	bl	8016d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013f6:	f7ff f8d1 	bl	800059c <main>
  bx  lr    
 80013fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001404:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001408:	0801ad84 	.word	0x0801ad84
  ldr r2, =_sbss
 800140c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001410:	2000ca04 	.word	0x2000ca04

08001414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001414:	e7fe      	b.n	8001414 <ADC_IRQHandler>
	...

08001418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <HAL_Init+0x40>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <HAL_Init+0x40>)
 8001422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001426:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_Init+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <HAL_Init+0x40>)
 800142e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001432:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_Init+0x40>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_Init+0x40>)
 800143a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001440:	2003      	movs	r0, #3
 8001442:	f000 f8fc 	bl	800163e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff fe4a 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800144c:	f7ff fd20 	bl	8000e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023c00 	.word	0x40023c00

0800145c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_IncTick+0x20>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x24>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a04      	ldr	r2, [pc, #16]	; (8001480 <HAL_IncTick+0x24>)
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000008 	.word	0x20000008
 8001480:	200048b0 	.word	0x200048b0

08001484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <HAL_GetTick+0x14>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	200048b0 	.word	0x200048b0

0800149c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff ffee 	bl	8001484 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d005      	beq.n	80014c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_Delay+0x44>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014c2:	bf00      	nop
 80014c4:	f7ff ffde 	bl	8001484 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f7      	bhi.n	80014c4 <HAL_Delay+0x28>
  {
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000008 	.word	0x20000008

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4907      	ldr	r1, [pc, #28]	; (8001580 <__NVIC_EnableIRQ+0x38>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	; (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	; (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	; 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ff4c 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001666:	f7ff ff61 	bl	800152c <__NVIC_GetPriorityGrouping>
 800166a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	68b9      	ldr	r1, [r7, #8]
 8001670:	6978      	ldr	r0, [r7, #20]
 8001672:	f7ff ffb1 	bl	80015d8 <NVIC_EncodePriority>
 8001676:	4602      	mov	r2, r0
 8001678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167c:	4611      	mov	r1, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ff80 	bl	8001584 <__NVIC_SetPriority>
}
 8001684:	bf00      	nop
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff54 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80016b8:	4baa      	ldr	r3, [pc, #680]	; (8001964 <HAL_ETH_Init+0x2bc>)
 80016ba:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e183      	b.n	80019d6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d106      	bne.n	80016e8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f005 ffd0 	bl	8007688 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	4b9e      	ldr	r3, [pc, #632]	; (8001968 <HAL_ETH_Init+0x2c0>)
 80016ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f0:	4a9d      	ldr	r2, [pc, #628]	; (8001968 <HAL_ETH_Init+0x2c0>)
 80016f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f6:	6453      	str	r3, [r2, #68]	; 0x44
 80016f8:	4b9b      	ldr	r3, [pc, #620]	; (8001968 <HAL_ETH_Init+0x2c0>)
 80016fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001704:	4b99      	ldr	r3, [pc, #612]	; (800196c <HAL_ETH_Init+0x2c4>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	4a98      	ldr	r2, [pc, #608]	; (800196c <HAL_ETH_Init+0x2c4>)
 800170a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800170e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001710:	4b96      	ldr	r3, [pc, #600]	; (800196c <HAL_ETH_Init+0x2c4>)
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4994      	ldr	r1, [pc, #592]	; (800196c <HAL_ETH_Init+0x2c4>)
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f042 0201 	orr.w	r2, r2, #1
 8001730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001734:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001736:	f7ff fea5 	bl	8001484 <HAL_GetTick>
 800173a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800173c:	e011      	b.n	8001762 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800173e:	f7ff fea1 	bl	8001484 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800174c:	d909      	bls.n	8001762 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2203      	movs	r2, #3
 8001752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e139      	b.n	80019d6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1e4      	bne.n	800173e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f023 031c 	bic.w	r3, r3, #28
 8001782:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001784:	f002 ff08 	bl	8004598 <HAL_RCC_GetHCLKFreq>
 8001788:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	4a78      	ldr	r2, [pc, #480]	; (8001970 <HAL_ETH_Init+0x2c8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d908      	bls.n	80017a4 <HAL_ETH_Init+0xfc>
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	4a77      	ldr	r2, [pc, #476]	; (8001974 <HAL_ETH_Init+0x2cc>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d804      	bhi.n	80017a4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f043 0308 	orr.w	r3, r3, #8
 80017a0:	61fb      	str	r3, [r7, #28]
 80017a2:	e027      	b.n	80017f4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	4a73      	ldr	r2, [pc, #460]	; (8001974 <HAL_ETH_Init+0x2cc>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d908      	bls.n	80017be <HAL_ETH_Init+0x116>
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	4a6d      	ldr	r2, [pc, #436]	; (8001964 <HAL_ETH_Init+0x2bc>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d204      	bcs.n	80017be <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f043 030c 	orr.w	r3, r3, #12
 80017ba:	61fb      	str	r3, [r7, #28]
 80017bc:	e01a      	b.n	80017f4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	4a68      	ldr	r2, [pc, #416]	; (8001964 <HAL_ETH_Init+0x2bc>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d303      	bcc.n	80017ce <HAL_ETH_Init+0x126>
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	4a6b      	ldr	r2, [pc, #428]	; (8001978 <HAL_ETH_Init+0x2d0>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d911      	bls.n	80017f2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	4a69      	ldr	r2, [pc, #420]	; (8001978 <HAL_ETH_Init+0x2d0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d908      	bls.n	80017e8 <HAL_ETH_Init+0x140>
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	4a68      	ldr	r2, [pc, #416]	; (800197c <HAL_ETH_Init+0x2d4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d804      	bhi.n	80017e8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	e005      	b.n	80017f4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f043 0310 	orr.w	r3, r3, #16
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	e000      	b.n	80017f4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80017f2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80017fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001800:	2100      	movs	r1, #0
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 fc17 	bl	8002036 <HAL_ETH_WritePHYRegister>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00b      	beq.n	8001826 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001812:	6939      	ldr	r1, [r7, #16]
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 fca3 	bl	8002160 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e0d7      	b.n	80019d6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001826:	20ff      	movs	r0, #255	; 0xff
 8001828:	f7ff fe38 	bl	800149c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 80a5 	beq.w	8001980 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001836:	f7ff fe25 	bl	8001484 <HAL_GetTick>
 800183a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	461a      	mov	r2, r3
 8001842:	2101      	movs	r1, #1
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 fb8e 	bl	8001f66 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800184a:	f7ff fe1b 	bl	8001484 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	f241 3288 	movw	r2, #5000	; 0x1388
 8001858:	4293      	cmp	r3, r2
 800185a:	d90f      	bls.n	800187c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001860:	6939      	ldr	r1, [r7, #16]
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 fc7c 	bl	8002160 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e0ac      	b.n	80019d6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0da      	beq.n	800183c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001886:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800188a:	2100      	movs	r1, #0
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 fbd2 	bl	8002036 <HAL_ETH_WritePHYRegister>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00b      	beq.n	80018b0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800189c:	6939      	ldr	r1, [r7, #16]
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 fc5e 	bl	8002160 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80018ac:	2301      	movs	r3, #1
 80018ae:	e092      	b.n	80019d6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80018b0:	f7ff fde8 	bl	8001484 <HAL_GetTick>
 80018b4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	461a      	mov	r2, r3
 80018bc:	2101      	movs	r1, #1
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 fb51 	bl	8001f66 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80018c4:	f7ff fdde 	bl	8001484 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d90f      	bls.n	80018f6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80018da:	6939      	ldr	r1, [r7, #16]
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 fc3f 	bl	8002160 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e06f      	b.n	80019d6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f003 0320 	and.w	r3, r3, #32
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0da      	beq.n	80018b6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	461a      	mov	r2, r3
 8001906:	2110      	movs	r1, #16
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 fb2c 	bl	8001f66 <HAL_ETH_ReadPHYRegister>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00b      	beq.n	800192c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001918:	6939      	ldr	r1, [r7, #16]
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 fc20 	bl	8002160 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001928:	2301      	movs	r3, #1
 800192a:	e054      	b.n	80019d6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	2b00      	cmp	r3, #0
 8001934:	d004      	beq.n	8001940 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	e002      	b.n	8001946 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	e035      	b.n	80019c4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	e030      	b.n	80019c4 <HAL_ETH_Init+0x31c>
 8001962:	bf00      	nop
 8001964:	03938700 	.word	0x03938700
 8001968:	40023800 	.word	0x40023800
 800196c:	40013800 	.word	0x40013800
 8001970:	01312cff 	.word	0x01312cff
 8001974:	02160ebf 	.word	0x02160ebf
 8001978:	05f5e0ff 	.word	0x05f5e0ff
 800197c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	08db      	lsrs	r3, r3, #3
 8001986:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	085b      	lsrs	r3, r3, #1
 800198e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001990:	4313      	orrs	r3, r2
 8001992:	b29b      	uxth	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	2100      	movs	r1, #0
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 fb4c 	bl	8002036 <HAL_ETH_WritePHYRegister>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00b      	beq.n	80019bc <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80019a8:	6939      	ldr	r1, [r7, #16]
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 fbd8 	bl	8002160 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e00c      	b.n	80019d6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80019bc:	f640 70ff 	movw	r0, #4095	; 0xfff
 80019c0:	f7ff fd6c 	bl	800149c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80019c4:	6939      	ldr	r1, [r7, #16]
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 fbca 	bl	8002160 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3720      	adds	r7, #32
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop

080019e0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_ETH_DMATxDescListInit+0x20>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e052      	b.n	8001aa6 <HAL_ETH_DMATxDescListInit+0xc6>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	e030      	b.n	8001a7e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	015b      	lsls	r3, r3, #5
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	4413      	add	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a2c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a34:	fb02 f303 	mul.w	r3, r2, r3
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d105      	bne.n	8001a56 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d208      	bcs.n	8001a72 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	015b      	lsls	r3, r3, #5
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	4413      	add	r3, r2
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	e002      	b.n	8001a78 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d3ca      	bcc.n	8001a1c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a90:	3310      	adds	r3, #16
 8001a92:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	371c      	adds	r7, #28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b087      	sub	sp, #28
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_ETH_DMARxDescListInit+0x20>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e056      	b.n	8001b80 <HAL_ETH_DMARxDescListInit+0xce>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2202      	movs	r2, #2
 8001ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	e034      	b.n	8001b58 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	015b      	lsls	r3, r3, #5
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	4413      	add	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001afe:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001b06:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b0e:	fb02 f303 	mul.w	r3, r2, r3
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	461a      	mov	r2, r3
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d105      	bne.n	8001b30 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d208      	bcs.n	8001b4c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	015b      	lsls	r3, r3, #5
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	4413      	add	r3, r2
 8001b44:	461a      	mov	r2, r3
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	e002      	b.n	8001b52 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3301      	adds	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d3c6      	bcc.n	8001aee <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b6a:	330c      	adds	r3, #12
 8001b6c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	371c      	adds	r7, #28
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_ETH_TransmitFrame+0x24>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e0cd      	b.n	8001d4c <HAL_ETH_TransmitFrame+0x1c0>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d109      	bne.n	8001bda <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e0b8      	b.n	8001d4c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	da09      	bge.n	8001bf8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2212      	movs	r2, #18
 8001be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0a9      	b.n	8001d4c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d915      	bls.n	8001c2e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	4a54      	ldr	r2, [pc, #336]	; (8001d58 <HAL_ETH_TransmitFrame+0x1cc>)
 8001c06:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0a:	0a9b      	lsrs	r3, r3, #10
 8001c0c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	4b51      	ldr	r3, [pc, #324]	; (8001d58 <HAL_ETH_TransmitFrame+0x1cc>)
 8001c12:	fba3 1302 	umull	r1, r3, r3, r2
 8001c16:	0a9b      	lsrs	r3, r3, #10
 8001c18:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d005      	beq.n	8001c32 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	e001      	b.n	8001c32 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d11c      	bne.n	8001c72 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001c46:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001c52:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c62:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c70:	e04b      	b.n	8001d0a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	e044      	b.n	8001d02 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c86:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d107      	bne.n	8001c9e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c9c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001ca6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d116      	bne.n	8001ce0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001cc0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	4a25      	ldr	r2, [pc, #148]	; (8001d5c <HAL_ETH_TransmitFrame+0x1d0>)
 8001cc6:	fb02 f203 	mul.w	r2, r2, r3
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001cd2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001cde:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cee:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d3b6      	bcc.n	8001c78 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d12:	3314      	adds	r3, #20
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00d      	beq.n	8001d3a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d26:	3314      	adds	r3, #20
 8001d28:	2204      	movs	r2, #4
 8001d2a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d34:	3304      	adds	r3, #4
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	371c      	adds	r7, #28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	ac02b00b 	.word	0xac02b00b
 8001d5c:	fffffa0c 	.word	0xfffffa0c

08001d60 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e074      	b.n	8001e64 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2202      	movs	r2, #2
 8001d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001d8a:	e05a      	b.n	8001e42 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da0:	d10d      	bne.n	8001dbe <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	461a      	mov	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
 8001dbc:	e041      	b.n	8001e42 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10b      	bne.n	8001de4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	629a      	str	r2, [r3, #40]	; 0x28
 8001de2:	e02e      	b.n	8001e42 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d103      	bne.n	8001e06 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0c1b      	lsrs	r3, r3, #16
 8001e0e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001e12:	1f1a      	subs	r2, r3, #4
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e010      	b.n	8001e64 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	db02      	blt.n	8001e52 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d99c      	bls.n	8001d8c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e80:	3314      	adds	r3, #20
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e88:	2b40      	cmp	r3, #64	; 0x40
 8001e8a:	d112      	bne.n	8001eb2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f005 fca9 	bl	80077e4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e9a:	3314      	adds	r3, #20
 8001e9c:	2240      	movs	r2, #64	; 0x40
 8001e9e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001eb0:	e01b      	b.n	8001eea <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eba:	3314      	adds	r3, #20
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d111      	bne.n	8001eea <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f839 	bl	8001f3e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed4:	3314      	adds	r3, #20
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef2:	3314      	adds	r3, #20
 8001ef4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ef8:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f02:	3314      	adds	r3, #20
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f0e:	d112      	bne.n	8001f36 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f81e 	bl	8001f52 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f1e:	3314      	adds	r3, #20
 8001f20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f24:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b82      	cmp	r3, #130	; 0x82
 8001f86:	d101      	bne.n	8001f8c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e050      	b.n	800202e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2282      	movs	r2, #130	; 0x82
 8001f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f003 031c 	and.w	r3, r3, #28
 8001fa2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8a1b      	ldrh	r3, [r3, #16]
 8001fa8:	02db      	lsls	r3, r3, #11
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001fb2:	897b      	ldrh	r3, [r7, #10]
 8001fb4:	019b      	lsls	r3, r3, #6
 8001fb6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f023 0302 	bic.w	r3, r3, #2
 8001fc6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001fd8:	f7ff fa54 	bl	8001484 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fde:	e015      	b.n	800200c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001fe0:	f7ff fa50 	bl	8001484 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fee:	d309      	bcc.n	8002004 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e014      	b.n	800202e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1e4      	bne.n	8001fe0 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	b29b      	uxth	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	460b      	mov	r3, r1
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b42      	cmp	r3, #66	; 0x42
 8002056:	d101      	bne.n	800205c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002058:	2302      	movs	r3, #2
 800205a:	e04e      	b.n	80020fa <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2242      	movs	r2, #66	; 0x42
 8002060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f003 031c 	and.w	r3, r3, #28
 8002072:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8a1b      	ldrh	r3, [r3, #16]
 8002078:	02db      	lsls	r3, r3, #11
 800207a:	b29b      	uxth	r3, r3
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	4313      	orrs	r3, r2
 8002080:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002082:	897b      	ldrh	r3, [r7, #10]
 8002084:	019b      	lsls	r3, r3, #6
 8002086:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	4313      	orrs	r3, r2
 800208e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f043 0302 	orr.w	r3, r3, #2
 8002096:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80020b2:	f7ff f9e7 	bl	8001484 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020b8:	e015      	b.n	80020e6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80020ba:	f7ff f9e3 	bl	8001484 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c8:	d309      	bcc.n	80020de <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e00d      	b.n	80020fa <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1e4      	bne.n	80020ba <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_ETH_Start+0x16>
 8002114:	2302      	movs	r3, #2
 8002116:	e01f      	b.n	8002158 <HAL_ETH_Start+0x56>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 fa1b 	bl	8002564 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 fa35 	bl	800259e <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 fa7f 	bl	8002638 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fa4c 	bl	80025d8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 fa61 	bl	8002608 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b0b0      	sub	sp, #192	; 0xc0
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800217c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002184:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800218a:	2300      	movs	r3, #0
 800218c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800218e:	2300      	movs	r3, #0
 8002190:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d103      	bne.n	80021ae <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80021a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021aa:	663b      	str	r3, [r7, #96]	; 0x60
 80021ac:	e001      	b.n	80021b2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80021b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80021bc:	2300      	movs	r3, #0
 80021be:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80021cc:	2340      	movs	r3, #64	; 0x40
 80021ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002206:	2300      	movs	r3, #0
 8002208:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002212:	2300      	movs	r3, #0
 8002214:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800221e:	2300      	movs	r3, #0
 8002220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002234:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002238:	4bac      	ldr	r3, [pc, #688]	; (80024ec <ETH_MACDMAConfig+0x38c>)
 800223a:	4013      	ands	r3, r2
 800223c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002240:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002244:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002248:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800224a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800224c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002252:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002254:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002256:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800225a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002260:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002262:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002264:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002266:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002268:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800226a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800226c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800226e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002270:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002272:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002274:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002276:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002288:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002294:	2001      	movs	r0, #1
 8002296:	f7ff f901 	bl	800149c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022a2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80022a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022a8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80022aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80022ac:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80022ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80022b2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80022b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80022b8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80022ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80022be:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80022c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80022c4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80022c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80022d0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022d2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80022de:	2001      	movs	r0, #1
 80022e0:	f7ff f8dc 	bl	800149c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ec:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022f6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002300:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800230c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002310:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002314:	4013      	ands	r3, r2
 8002316:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800231a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800231e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002320:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002324:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002326:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800232a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800232c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002330:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002336:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002338:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800233c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800233e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002350:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800235c:	2001      	movs	r0, #1
 800235e:	f7ff f89d 	bl	800149c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800236a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800236c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002370:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002386:	2001      	movs	r0, #1
 8002388:	f7ff f888 	bl	800149c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002394:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800239a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800239e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80023a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023a8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80023b6:	2300      	movs	r3, #0
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80023ba:	2304      	movs	r3, #4
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80023be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80023c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023ce:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80023de:	2300      	movs	r3, #0
 80023e0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ea:	3318      	adds	r3, #24
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80023f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023f6:	4b3e      	ldr	r3, [pc, #248]	; (80024f0 <ETH_MACDMAConfig+0x390>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023fe:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002400:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002402:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002404:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002406:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002408:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800240a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800240c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800240e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002410:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002412:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002414:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002416:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800241a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800241e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002420:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002432:	3318      	adds	r3, #24
 8002434:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002438:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002442:	3318      	adds	r3, #24
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800244a:	2001      	movs	r0, #1
 800244c:	f7ff f826 	bl	800149c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002458:	3318      	adds	r3, #24
 800245a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800245e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002464:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002468:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800246a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800246c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800246e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002470:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002474:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002476:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800247a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002488:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002498:	2001      	movs	r0, #1
 800249a:	f7fe ffff 	bl	800149c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024aa:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d10f      	bne.n	80024d4 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024bc:	331c      	adds	r3, #28
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d0:	331c      	adds	r3, #28
 80024d2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	461a      	mov	r2, r3
 80024da:	2100      	movs	r1, #0
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f809 	bl	80024f4 <ETH_MACAddressConfig>
}
 80024e2:	bf00      	nop
 80024e4:	37c0      	adds	r7, #192	; 0xc0
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	ff20810f 	.word	0xff20810f
 80024f0:	f8de3f23 	.word	0xf8de3f23

080024f4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3305      	adds	r3, #5
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	021b      	lsls	r3, r3, #8
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	3204      	adds	r2, #4
 800250c:	7812      	ldrb	r2, [r2, #0]
 800250e:	4313      	orrs	r3, r2
 8002510:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <ETH_MACAddressConfig+0x68>)
 8002516:	4413      	add	r3, r2
 8002518:	461a      	mov	r2, r3
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3303      	adds	r3, #3
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	061a      	lsls	r2, r3, #24
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3302      	adds	r3, #2
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	041b      	lsls	r3, r3, #16
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3301      	adds	r3, #1
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	4313      	orrs	r3, r2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	7812      	ldrb	r2, [r2, #0]
 800253e:	4313      	orrs	r3, r2
 8002540:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <ETH_MACAddressConfig+0x6c>)
 8002546:	4413      	add	r3, r2
 8002548:	461a      	mov	r2, r3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	6013      	str	r3, [r2, #0]
}
 800254e:	bf00      	nop
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40028040 	.word	0x40028040
 8002560:	40028044 	.word	0x40028044

08002564 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0208 	orr.w	r2, r2, #8
 800257e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002588:	2001      	movs	r0, #1
 800258a:	f000 f87f 	bl	800268c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	601a      	str	r2, [r3, #0]
}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0204 	orr.w	r2, r2, #4
 80025b8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025c2:	2001      	movs	r0, #1
 80025c4:	f000 f862 	bl	800268c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	601a      	str	r2, [r3, #0]
}
 80025d0:	bf00      	nop
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e8:	3318      	adds	r3, #24
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f8:	3318      	adds	r3, #24
 80025fa:	601a      	str	r2, [r3, #0]
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002618:	3318      	adds	r3, #24
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0202 	orr.w	r2, r2, #2
 8002624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002628:	3318      	adds	r3, #24
 800262a:	601a      	str	r2, [r3, #0]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800264c:	3318      	adds	r3, #24
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800265c:	3318      	adds	r3, #24
 800265e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002668:	3318      	adds	r3, #24
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800266e:	2001      	movs	r0, #1
 8002670:	f000 f80c 	bl	800268c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800267e:	3318      	adds	r3, #24
 8002680:	601a      	str	r2, [r3, #0]
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <ETH_Delay+0x38>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0b      	ldr	r2, [pc, #44]	; (80026c8 <ETH_Delay+0x3c>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	0a5b      	lsrs	r3, r3, #9
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80026a8:	bf00      	nop
  } 
  while (Delay --);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1e5a      	subs	r2, r3, #1
 80026ae:	60fa      	str	r2, [r7, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f9      	bne.n	80026a8 <ETH_Delay+0x1c>
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000000 	.word	0x20000000
 80026c8:	10624dd3 	.word	0x10624dd3

080026cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	; 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026de:	2300      	movs	r3, #0
 80026e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	e16b      	b.n	80029c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026e8:	2201      	movs	r2, #1
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	429a      	cmp	r2, r3
 8002702:	f040 815a 	bne.w	80029ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d005      	beq.n	800271e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271a:	2b02      	cmp	r3, #2
 800271c:	d130      	bne.n	8002780 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	2203      	movs	r2, #3
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002754:	2201      	movs	r2, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 0201 	and.w	r2, r3, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b03      	cmp	r3, #3
 800278a:	d017      	beq.n	80027bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2203      	movs	r2, #3
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d123      	bne.n	8002810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	08da      	lsrs	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3208      	adds	r2, #8
 80027d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	220f      	movs	r2, #15
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	08da      	lsrs	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3208      	adds	r2, #8
 800280a:	69b9      	ldr	r1, [r7, #24]
 800280c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	2203      	movs	r2, #3
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0203 	and.w	r2, r3, #3
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80b4 	beq.w	80029ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	4b60      	ldr	r3, [pc, #384]	; (80029d8 <HAL_GPIO_Init+0x30c>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	4a5f      	ldr	r2, [pc, #380]	; (80029d8 <HAL_GPIO_Init+0x30c>)
 800285c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002860:	6453      	str	r3, [r2, #68]	; 0x44
 8002862:	4b5d      	ldr	r3, [pc, #372]	; (80029d8 <HAL_GPIO_Init+0x30c>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800286e:	4a5b      	ldr	r2, [pc, #364]	; (80029dc <HAL_GPIO_Init+0x310>)
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	3302      	adds	r3, #2
 8002876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	220f      	movs	r2, #15
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a52      	ldr	r2, [pc, #328]	; (80029e0 <HAL_GPIO_Init+0x314>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d02b      	beq.n	80028f2 <HAL_GPIO_Init+0x226>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a51      	ldr	r2, [pc, #324]	; (80029e4 <HAL_GPIO_Init+0x318>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d025      	beq.n	80028ee <HAL_GPIO_Init+0x222>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a50      	ldr	r2, [pc, #320]	; (80029e8 <HAL_GPIO_Init+0x31c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d01f      	beq.n	80028ea <HAL_GPIO_Init+0x21e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a4f      	ldr	r2, [pc, #316]	; (80029ec <HAL_GPIO_Init+0x320>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d019      	beq.n	80028e6 <HAL_GPIO_Init+0x21a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a4e      	ldr	r2, [pc, #312]	; (80029f0 <HAL_GPIO_Init+0x324>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d013      	beq.n	80028e2 <HAL_GPIO_Init+0x216>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a4d      	ldr	r2, [pc, #308]	; (80029f4 <HAL_GPIO_Init+0x328>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00d      	beq.n	80028de <HAL_GPIO_Init+0x212>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a4c      	ldr	r2, [pc, #304]	; (80029f8 <HAL_GPIO_Init+0x32c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d007      	beq.n	80028da <HAL_GPIO_Init+0x20e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a4b      	ldr	r2, [pc, #300]	; (80029fc <HAL_GPIO_Init+0x330>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d101      	bne.n	80028d6 <HAL_GPIO_Init+0x20a>
 80028d2:	2307      	movs	r3, #7
 80028d4:	e00e      	b.n	80028f4 <HAL_GPIO_Init+0x228>
 80028d6:	2308      	movs	r3, #8
 80028d8:	e00c      	b.n	80028f4 <HAL_GPIO_Init+0x228>
 80028da:	2306      	movs	r3, #6
 80028dc:	e00a      	b.n	80028f4 <HAL_GPIO_Init+0x228>
 80028de:	2305      	movs	r3, #5
 80028e0:	e008      	b.n	80028f4 <HAL_GPIO_Init+0x228>
 80028e2:	2304      	movs	r3, #4
 80028e4:	e006      	b.n	80028f4 <HAL_GPIO_Init+0x228>
 80028e6:	2303      	movs	r3, #3
 80028e8:	e004      	b.n	80028f4 <HAL_GPIO_Init+0x228>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e002      	b.n	80028f4 <HAL_GPIO_Init+0x228>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <HAL_GPIO_Init+0x228>
 80028f2:	2300      	movs	r3, #0
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	f002 0203 	and.w	r2, r2, #3
 80028fa:	0092      	lsls	r2, r2, #2
 80028fc:	4093      	lsls	r3, r2
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002904:	4935      	ldr	r1, [pc, #212]	; (80029dc <HAL_GPIO_Init+0x310>)
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	089b      	lsrs	r3, r3, #2
 800290a:	3302      	adds	r3, #2
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002912:	4b3b      	ldr	r3, [pc, #236]	; (8002a00 <HAL_GPIO_Init+0x334>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	43db      	mvns	r3, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002936:	4a32      	ldr	r2, [pc, #200]	; (8002a00 <HAL_GPIO_Init+0x334>)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800293c:	4b30      	ldr	r3, [pc, #192]	; (8002a00 <HAL_GPIO_Init+0x334>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002960:	4a27      	ldr	r2, [pc, #156]	; (8002a00 <HAL_GPIO_Init+0x334>)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002966:	4b26      	ldr	r3, [pc, #152]	; (8002a00 <HAL_GPIO_Init+0x334>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800298a:	4a1d      	ldr	r2, [pc, #116]	; (8002a00 <HAL_GPIO_Init+0x334>)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <HAL_GPIO_Init+0x334>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029b4:	4a12      	ldr	r2, [pc, #72]	; (8002a00 <HAL_GPIO_Init+0x334>)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3301      	adds	r3, #1
 80029be:	61fb      	str	r3, [r7, #28]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	2b0f      	cmp	r3, #15
 80029c4:	f67f ae90 	bls.w	80026e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029c8:	bf00      	nop
 80029ca:	bf00      	nop
 80029cc:	3724      	adds	r7, #36	; 0x24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40013800 	.word	0x40013800
 80029e0:	40020000 	.word	0x40020000
 80029e4:	40020400 	.word	0x40020400
 80029e8:	40020800 	.word	0x40020800
 80029ec:	40020c00 	.word	0x40020c00
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40021400 	.word	0x40021400
 80029f8:	40021800 	.word	0x40021800
 80029fc:	40021c00 	.word	0x40021c00
 8002a00:	40013c00 	.word	0x40013c00

08002a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	807b      	strh	r3, [r7, #2]
 8002a10:	4613      	mov	r3, r2
 8002a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a14:	787b      	ldrb	r3, [r7, #1]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a1a:	887a      	ldrh	r2, [r7, #2]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a20:	e003      	b.n	8002a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a22:	887b      	ldrh	r3, [r7, #2]
 8002a24:	041a      	lsls	r2, r3, #16
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	619a      	str	r2, [r3, #24]
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a42:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a44:	695a      	ldr	r2, [r3, #20]
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d006      	beq.n	8002a5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a4e:	4a05      	ldr	r2, [pc, #20]	; (8002a64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe f98c 	bl	8000d74 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40013c00 	.word	0x40013c00

08002a68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6a:	b08f      	sub	sp, #60	; 0x3c
 8002a6c:	af0a      	add	r7, sp, #40	; 0x28
 8002a6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e10f      	b.n	8002c9a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d106      	bne.n	8002a9a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f013 fe5b 	bl	8016750 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d102      	bne.n	8002ab4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f003 fa52 	bl	8005f62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	687e      	ldr	r6, [r7, #4]
 8002ac6:	466d      	mov	r5, sp
 8002ac8:	f106 0410 	add.w	r4, r6, #16
 8002acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ad8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002adc:	1d33      	adds	r3, r6, #4
 8002ade:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ae0:	6838      	ldr	r0, [r7, #0]
 8002ae2:	f003 f929 	bl	8005d38 <USB_CoreInit>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0d0      	b.n	8002c9a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2100      	movs	r1, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f003 fa40 	bl	8005f84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]
 8002b08:	e04a      	b.n	8002ba0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	333d      	adds	r3, #61	; 0x3d
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b1e:	7bfa      	ldrb	r2, [r7, #15]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	333c      	adds	r3, #60	; 0x3c
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b32:	7bfa      	ldrb	r2, [r7, #15]
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	b298      	uxth	r0, r3
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	1a9b      	subs	r3, r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	3342      	adds	r3, #66	; 0x42
 8002b46:	4602      	mov	r2, r0
 8002b48:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	1a9b      	subs	r3, r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	333f      	adds	r3, #63	; 0x3f
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	3344      	adds	r3, #68	; 0x44
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	3348      	adds	r3, #72	; 0x48
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	3350      	adds	r3, #80	; 0x50
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d3af      	bcc.n	8002b0a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	73fb      	strb	r3, [r7, #15]
 8002bae:	e044      	b.n	8002c3a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c1e:	7bfa      	ldrb	r2, [r7, #15]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	3301      	adds	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
 8002c3a:	7bfa      	ldrb	r2, [r7, #15]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d3b5      	bcc.n	8002bb0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	687e      	ldr	r6, [r7, #4]
 8002c4c:	466d      	mov	r5, sp
 8002c4e:	f106 0410 	add.w	r4, r6, #16
 8002c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c62:	1d33      	adds	r3, r6, #4
 8002c64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c66:	6838      	ldr	r0, [r7, #0]
 8002c68:	f003 f9d8 	bl	800601c <USB_DevInit>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d005      	beq.n	8002c7e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2202      	movs	r2, #2
 8002c76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00d      	b.n	8002c9a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f004 fa54 	bl	8007140 <USB_DevDisconnect>

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ca2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_PCD_Start+0x1c>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e020      	b.n	8002d00 <HAL_PCD_Start+0x5e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d109      	bne.n	8002ce2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d005      	beq.n	8002ce2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f003 f92a 	bl	8005f40 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f004 fa04 	bl	80070fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d08:	b590      	push	{r4, r7, lr}
 8002d0a:	b08d      	sub	sp, #52	; 0x34
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f004 fac2 	bl	80072a8 <USB_GetMode>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f040 839d 	bne.w	8003466 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f004 fa26 	bl	8007182 <USB_ReadInterrupts>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8393 	beq.w	8003464 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f004 fa1d 	bl	8007182 <USB_ReadInterrupts>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d107      	bne.n	8002d62 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f002 0202 	and.w	r2, r2, #2
 8002d60:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f004 fa0b 	bl	8007182 <USB_ReadInterrupts>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	2b10      	cmp	r3, #16
 8002d74:	d161      	bne.n	8002e3a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699a      	ldr	r2, [r3, #24]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0210 	bic.w	r2, r2, #16
 8002d84:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	f003 020f 	and.w	r2, r3, #15
 8002d92:	4613      	mov	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	1a9b      	subs	r3, r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	4413      	add	r3, r2
 8002da2:	3304      	adds	r3, #4
 8002da4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	0c5b      	lsrs	r3, r3, #17
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d124      	bne.n	8002dfc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d035      	beq.n	8002e2a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	091b      	lsrs	r3, r3, #4
 8002dc6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	6a38      	ldr	r0, [r7, #32]
 8002dd2:	f004 f842 	bl	8006e5a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002de2:	441a      	add	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	699a      	ldr	r2, [r3, #24]
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	091b      	lsrs	r3, r3, #4
 8002df0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002df4:	441a      	add	r2, r3
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	619a      	str	r2, [r3, #24]
 8002dfa:	e016      	b.n	8002e2a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	0c5b      	lsrs	r3, r3, #17
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	2b06      	cmp	r3, #6
 8002e06:	d110      	bne.n	8002e2a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e0e:	2208      	movs	r2, #8
 8002e10:	4619      	mov	r1, r3
 8002e12:	6a38      	ldr	r0, [r7, #32]
 8002e14:	f004 f821 	bl	8006e5a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	699a      	ldr	r2, [r3, #24]
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	091b      	lsrs	r3, r3, #4
 8002e20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e24:	441a      	add	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699a      	ldr	r2, [r3, #24]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0210 	orr.w	r2, r2, #16
 8002e38:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f004 f99f 	bl	8007182 <USB_ReadInterrupts>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e4e:	d16e      	bne.n	8002f2e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f004 f9a5 	bl	80071a8 <USB_ReadDevAllOutEpInterrupt>
 8002e5e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e60:	e062      	b.n	8002f28 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d057      	beq.n	8002f1c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f004 f9ca 	bl	8007210 <USB_ReadDevOutEPInterrupt>
 8002e7c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00c      	beq.n	8002ea2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e94:	461a      	mov	r2, r3
 8002e96:	2301      	movs	r3, #1
 8002e98:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 fdb1 	bl	8003a04 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00c      	beq.n	8002ec6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2308      	movs	r3, #8
 8002ebc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ebe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 feab 	bl	8003c1c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002edc:	461a      	mov	r2, r3
 8002ede:	2310      	movs	r3, #16
 8002ee0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f003 0320 	and.w	r3, r3, #32
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2320      	movs	r3, #32
 8002efc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d009      	beq.n	8002f1c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	015a      	lsls	r2, r3, #5
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f14:	461a      	mov	r2, r3
 8002f16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f1a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	3301      	adds	r3, #1
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d199      	bne.n	8002e62 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f004 f925 	bl	8007182 <USB_ReadInterrupts>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f42:	f040 80c0 	bne.w	80030c6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f004 f946 	bl	80071dc <USB_ReadDevAllInEpInterrupt>
 8002f50:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f56:	e0b2      	b.n	80030be <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 80a7 	beq.w	80030b2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f004 f96c 	bl	800724c <USB_ReadDevInEPInterrupt>
 8002f74:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d057      	beq.n	8003030 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	2201      	movs	r2, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69f9      	ldr	r1, [r7, #28]
 8002f9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d132      	bne.n	8003024 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	3348      	adds	r3, #72	; 0x48
 8002fce:	6819      	ldr	r1, [r3, #0]
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4403      	add	r3, r0
 8002fde:	3344      	adds	r3, #68	; 0x44
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4419      	add	r1, r3
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4403      	add	r3, r0
 8002ff2:	3348      	adds	r3, #72	; 0x48
 8002ff4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d113      	bne.n	8003024 <HAL_PCD_IRQHandler+0x31c>
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	3350      	adds	r3, #80	; 0x50
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d108      	bne.n	8003024 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800301c:	461a      	mov	r2, r3
 800301e:	2101      	movs	r1, #1
 8003020:	f004 f974 	bl	800730c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	b2db      	uxtb	r3, r3
 8003028:	4619      	mov	r1, r3
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f013 fc1f 	bl	801686e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d008      	beq.n	800304c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	4413      	add	r3, r2
 8003042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003046:	461a      	mov	r2, r3
 8003048:	2308      	movs	r3, #8
 800304a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b00      	cmp	r3, #0
 8003054:	d008      	beq.n	8003068 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	4413      	add	r3, r2
 800305e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003062:	461a      	mov	r2, r3
 8003064:	2310      	movs	r3, #16
 8003066:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306e:	2b00      	cmp	r3, #0
 8003070:	d008      	beq.n	8003084 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800307e:	461a      	mov	r2, r3
 8003080:	2340      	movs	r3, #64	; 0x40
 8003082:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d008      	beq.n	80030a0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	4413      	add	r3, r2
 8003096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800309a:	461a      	mov	r2, r3
 800309c:	2302      	movs	r3, #2
 800309e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80030aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fc1b 	bl	80038e8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	3301      	adds	r3, #1
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f47f af49 	bne.w	8002f58 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f004 f859 	bl	8007182 <USB_ReadInterrupts>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030da:	d122      	bne.n	8003122 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ea:	f023 0301 	bic.w	r3, r3, #1
 80030ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d108      	bne.n	800310c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003102:	2100      	movs	r1, #0
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 fe27 	bl	8003d58 <HAL_PCDEx_LPM_Callback>
 800310a:	e002      	b.n	8003112 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f013 fc25 	bl	801695c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003120:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f004 f82b 	bl	8007182 <USB_ReadInterrupts>
 800312c:	4603      	mov	r3, r0
 800312e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003136:	d112      	bne.n	800315e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b01      	cmp	r3, #1
 8003146:	d102      	bne.n	800314e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f013 fbe1 	bl	8016910 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800315c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f004 f80d 	bl	8007182 <USB_ReadInterrupts>
 8003168:	4603      	mov	r3, r0
 800316a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800316e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003172:	f040 80c7 	bne.w	8003304 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2110      	movs	r1, #16
 8003190:	4618      	mov	r0, r3
 8003192:	f003 f8a7 	bl	80062e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003196:	2300      	movs	r3, #0
 8003198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800319a:	e056      	b.n	800324a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a8:	461a      	mov	r2, r3
 80031aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031ae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80031b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031c0:	0151      	lsls	r1, r2, #5
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	440a      	add	r2, r1
 80031c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031ce:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80031d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031e0:	0151      	lsls	r1, r2, #5
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	440a      	add	r2, r1
 80031e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80031f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031fc:	461a      	mov	r2, r3
 80031fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003202:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	4413      	add	r3, r2
 800320c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003214:	0151      	lsls	r1, r2, #5
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	440a      	add	r2, r1
 800321a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800321e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003222:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	4413      	add	r3, r2
 800322c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003234:	0151      	lsls	r1, r2, #5
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	440a      	add	r2, r1
 800323a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800323e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003242:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003246:	3301      	adds	r3, #1
 8003248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003250:	429a      	cmp	r2, r3
 8003252:	d3a3      	bcc.n	800319c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	69fa      	ldr	r2, [r7, #28]
 800325e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003262:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003266:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	2b00      	cmp	r3, #0
 800326e:	d016      	beq.n	800329e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003280:	f043 030b 	orr.w	r3, r3, #11
 8003284:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	69fa      	ldr	r2, [r7, #28]
 8003292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003296:	f043 030b 	orr.w	r3, r3, #11
 800329a:	6453      	str	r3, [r2, #68]	; 0x44
 800329c:	e015      	b.n	80032ca <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032b0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80032b4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032c4:	f043 030b 	orr.w	r3, r3, #11
 80032c8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80032dc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032ee:	461a      	mov	r2, r3
 80032f0:	f004 f80c 	bl	800730c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003302:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f003 ff3a 	bl	8007182 <USB_ReadInterrupts>
 800330e:	4603      	mov	r3, r0
 8003310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003318:	d124      	bne.n	8003364 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f003 ffd0 	bl	80072c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f003 f838 	bl	800639e <USB_GetDevSpeed>
 800332e:	4603      	mov	r3, r0
 8003330:	461a      	mov	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681c      	ldr	r4, [r3, #0]
 800333a:	f001 f92d 	bl	8004598 <HAL_RCC_GetHCLKFreq>
 800333e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	4620      	mov	r0, r4
 800334a:	f002 fd57 	bl	8005dfc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f013 fab5 	bl	80168be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695a      	ldr	r2, [r3, #20]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003362:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f003 ff0a 	bl	8007182 <USB_ReadInterrupts>
 800336e:	4603      	mov	r3, r0
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b08      	cmp	r3, #8
 8003376:	d10a      	bne.n	800338e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f013 fa92 	bl	80168a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695a      	ldr	r2, [r3, #20]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f002 0208 	and.w	r2, r2, #8
 800338c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f003 fef5 	bl	8007182 <USB_ReadInterrupts>
 8003398:	4603      	mov	r3, r0
 800339a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800339e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033a2:	d10f      	bne.n	80033c4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	4619      	mov	r1, r3
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f013 faf4 	bl	801699c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695a      	ldr	r2, [r3, #20]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80033c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f003 feda 	bl	8007182 <USB_ReadInterrupts>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033d8:	d10f      	bne.n	80033fa <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	4619      	mov	r1, r3
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f013 fac7 	bl	8016978 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695a      	ldr	r2, [r3, #20]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80033f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f003 febf 	bl	8007182 <USB_ReadInterrupts>
 8003404:	4603      	mov	r3, r0
 8003406:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800340a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800340e:	d10a      	bne.n	8003426 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f013 fad5 	bl	80169c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003424:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f003 fea9 	bl	8007182 <USB_ReadInterrupts>
 8003430:	4603      	mov	r3, r0
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b04      	cmp	r3, #4
 8003438:	d115      	bne.n	8003466 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f013 fac5 	bl	80169dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	e000      	b.n	8003466 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003464:	bf00      	nop
    }
  }
}
 8003466:	3734      	adds	r7, #52	; 0x34
 8003468:	46bd      	mov	sp, r7
 800346a:	bd90      	pop	{r4, r7, pc}

0800346c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_PCD_SetAddress+0x1a>
 8003482:	2302      	movs	r3, #2
 8003484:	e013      	b.n	80034ae <HAL_PCD_SetAddress+0x42>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f003 fe07 	bl	80070b2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	4608      	mov	r0, r1
 80034c0:	4611      	mov	r1, r2
 80034c2:	461a      	mov	r2, r3
 80034c4:	4603      	mov	r3, r0
 80034c6:	70fb      	strb	r3, [r7, #3]
 80034c8:	460b      	mov	r3, r1
 80034ca:	803b      	strh	r3, [r7, #0]
 80034cc:	4613      	mov	r3, r2
 80034ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	da0f      	bge.n	80034fc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	f003 020f 	and.w	r2, r3, #15
 80034e2:	4613      	mov	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	3338      	adds	r3, #56	; 0x38
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4413      	add	r3, r2
 80034f0:	3304      	adds	r3, #4
 80034f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	705a      	strb	r2, [r3, #1]
 80034fa:	e00f      	b.n	800351c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	f003 020f 	and.w	r2, r3, #15
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	4413      	add	r3, r2
 8003512:	3304      	adds	r3, #4
 8003514:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	b2da      	uxtb	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003528:	883a      	ldrh	r2, [r7, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	78ba      	ldrb	r2, [r7, #2]
 8003532:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	785b      	ldrb	r3, [r3, #1]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d004      	beq.n	8003546 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003546:	78bb      	ldrb	r3, [r7, #2]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d102      	bne.n	8003552 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_PCD_EP_Open+0xaa>
 800355c:	2302      	movs	r3, #2
 800355e:	e00e      	b.n	800357e <HAL_PCD_EP_Open+0xc8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68f9      	ldr	r1, [r7, #12]
 800356e:	4618      	mov	r0, r3
 8003570:	f002 ff3a 	bl	80063e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800357c:	7afb      	ldrb	r3, [r7, #11]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	460b      	mov	r3, r1
 8003590:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003592:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003596:	2b00      	cmp	r3, #0
 8003598:	da0f      	bge.n	80035ba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	f003 020f 	and.w	r2, r3, #15
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	3338      	adds	r3, #56	; 0x38
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4413      	add	r3, r2
 80035ae:	3304      	adds	r3, #4
 80035b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	705a      	strb	r2, [r3, #1]
 80035b8:	e00f      	b.n	80035da <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ba:	78fb      	ldrb	r3, [r7, #3]
 80035bc:	f003 020f 	and.w	r2, r3, #15
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	4413      	add	r3, r2
 80035d0:	3304      	adds	r3, #4
 80035d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80035da:	78fb      	ldrb	r3, [r7, #3]
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_PCD_EP_Close+0x6e>
 80035f0:	2302      	movs	r3, #2
 80035f2:	e00e      	b.n	8003612 <HAL_PCD_EP_Close+0x8c>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68f9      	ldr	r1, [r7, #12]
 8003602:	4618      	mov	r0, r3
 8003604:	f002 ff78 	bl	80064f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b086      	sub	sp, #24
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	460b      	mov	r3, r1
 8003628:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800362a:	7afb      	ldrb	r3, [r7, #11]
 800362c:	f003 020f 	and.w	r2, r3, #15
 8003630:	4613      	mov	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4413      	add	r3, r2
 8003640:	3304      	adds	r3, #4
 8003642:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2200      	movs	r2, #0
 8003654:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2200      	movs	r2, #0
 800365a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800365c:	7afb      	ldrb	r3, [r7, #11]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	b2da      	uxtb	r2, r3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d102      	bne.n	8003676 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003676:	7afb      	ldrb	r3, [r7, #11]
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	2b00      	cmp	r3, #0
 800367e:	d109      	bne.n	8003694 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	461a      	mov	r2, r3
 800368c:	6979      	ldr	r1, [r7, #20]
 800368e:	f003 fa53 	bl	8006b38 <USB_EP0StartXfer>
 8003692:	e008      	b.n	80036a6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6818      	ldr	r0, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	6979      	ldr	r1, [r7, #20]
 80036a2:	f003 f805 	bl	80066b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	f003 020f 	and.w	r2, r3, #15
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80036d2:	681b      	ldr	r3, [r3, #0]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	460b      	mov	r3, r1
 80036ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036f0:	7afb      	ldrb	r3, [r7, #11]
 80036f2:	f003 020f 	and.w	r2, r3, #15
 80036f6:	4613      	mov	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	3338      	adds	r3, #56	; 0x38
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4413      	add	r3, r2
 8003704:	3304      	adds	r3, #4
 8003706:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2200      	movs	r2, #0
 8003718:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2201      	movs	r2, #1
 800371e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003720:	7afb      	ldrb	r3, [r7, #11]
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	b2da      	uxtb	r2, r3
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d102      	bne.n	800373a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800373a:	7afb      	ldrb	r3, [r7, #11]
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	2b00      	cmp	r3, #0
 8003742:	d109      	bne.n	8003758 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6818      	ldr	r0, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	6979      	ldr	r1, [r7, #20]
 8003752:	f003 f9f1 	bl	8006b38 <USB_EP0StartXfer>
 8003756:	e008      	b.n	800376a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	6979      	ldr	r1, [r7, #20]
 8003766:	f002 ffa3 	bl	80066b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	f003 020f 	and.w	r2, r3, #15
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	429a      	cmp	r2, r3
 800378c:	d901      	bls.n	8003792 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e050      	b.n	8003834 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003792:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003796:	2b00      	cmp	r3, #0
 8003798:	da0f      	bge.n	80037ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800379a:	78fb      	ldrb	r3, [r7, #3]
 800379c:	f003 020f 	and.w	r2, r3, #15
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	3338      	adds	r3, #56	; 0x38
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	4413      	add	r3, r2
 80037ae:	3304      	adds	r3, #4
 80037b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	705a      	strb	r2, [r3, #1]
 80037b8:	e00d      	b.n	80037d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037ba:	78fa      	ldrb	r2, [r7, #3]
 80037bc:	4613      	mov	r3, r2
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	4413      	add	r3, r2
 80037cc:	3304      	adds	r3, #4
 80037ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_PCD_EP_SetStall+0x82>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e01e      	b.n	8003834 <HAL_PCD_EP_SetStall+0xc0>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68f9      	ldr	r1, [r7, #12]
 8003804:	4618      	mov	r0, r3
 8003806:	f003 fb80 	bl	8006f0a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	f003 030f 	and.w	r3, r3, #15
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10a      	bne.n	800382a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	b2d9      	uxtb	r1, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003824:	461a      	mov	r2, r3
 8003826:	f003 fd71 	bl	800730c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	f003 020f 	and.w	r2, r3, #15
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	429a      	cmp	r2, r3
 8003854:	d901      	bls.n	800385a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e042      	b.n	80038e0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800385a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800385e:	2b00      	cmp	r3, #0
 8003860:	da0f      	bge.n	8003882 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	f003 020f 	and.w	r2, r3, #15
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	3338      	adds	r3, #56	; 0x38
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	3304      	adds	r3, #4
 8003878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	705a      	strb	r2, [r3, #1]
 8003880:	e00f      	b.n	80038a2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	f003 020f 	and.w	r2, r3, #15
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	4413      	add	r3, r2
 8003898:	3304      	adds	r3, #4
 800389a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038a8:	78fb      	ldrb	r3, [r7, #3]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <HAL_PCD_EP_ClrStall+0x86>
 80038be:	2302      	movs	r3, #2
 80038c0:	e00e      	b.n	80038e0 <HAL_PCD_EP_ClrStall+0xa4>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68f9      	ldr	r1, [r7, #12]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f003 fb88 	bl	8006fe6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	; 0x28
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	4613      	mov	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	1a9b      	subs	r3, r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	3338      	adds	r3, #56	; 0x38
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	4413      	add	r3, r2
 800390c:	3304      	adds	r3, #4
 800390e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	699a      	ldr	r2, [r3, #24]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	429a      	cmp	r2, r3
 800391a:	d901      	bls.n	8003920 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e06c      	b.n	80039fa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	69fa      	ldr	r2, [r7, #28]
 8003932:	429a      	cmp	r2, r3
 8003934:	d902      	bls.n	800393c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	3303      	adds	r3, #3
 8003940:	089b      	lsrs	r3, r3, #2
 8003942:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003944:	e02b      	b.n	800399e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	429a      	cmp	r2, r3
 800395a:	d902      	bls.n	8003962 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	3303      	adds	r3, #3
 8003966:	089b      	lsrs	r3, r3, #2
 8003968:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	68d9      	ldr	r1, [r3, #12]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	b2da      	uxtb	r2, r3
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800397a:	b2db      	uxtb	r3, r3
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	4603      	mov	r3, r0
 8003980:	6978      	ldr	r0, [r7, #20]
 8003982:	f003 fa2c 	bl	8006dde <USB_WritePacket>

    ep->xfer_buff  += len;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	441a      	add	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	441a      	add	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d809      	bhi.n	80039c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	699a      	ldr	r2, [r3, #24]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039bc:	429a      	cmp	r2, r3
 80039be:	d203      	bcs.n	80039c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1be      	bne.n	8003946 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	695a      	ldr	r2, [r3, #20]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d811      	bhi.n	80039f8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	2201      	movs	r2, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	6939      	ldr	r1, [r7, #16]
 80039f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039f4:	4013      	ands	r3, r2
 80039f6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3720      	adds	r7, #32
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	333c      	adds	r3, #60	; 0x3c
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	f040 80a0 	bne.w	8003b7c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d015      	beq.n	8003a72 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4a72      	ldr	r2, [pc, #456]	; (8003c14 <PCD_EP_OutXfrComplete_int+0x210>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	f240 80dd 	bls.w	8003c0a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 80d7 	beq.w	8003c0a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a6e:	6093      	str	r3, [r2, #8]
 8003a70:	e0cb      	b.n	8003c0a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d009      	beq.n	8003a90 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a88:	461a      	mov	r2, r3
 8003a8a:	2320      	movs	r3, #32
 8003a8c:	6093      	str	r3, [r2, #8]
 8003a8e:	e0bc      	b.n	8003c0a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f040 80b7 	bne.w	8003c0a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4a5d      	ldr	r2, [pc, #372]	; (8003c14 <PCD_EP_OutXfrComplete_int+0x210>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d90f      	bls.n	8003ac4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aba:	461a      	mov	r2, r3
 8003abc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ac0:	6093      	str	r3, [r2, #8]
 8003ac2:	e0a2      	b.n	8003c0a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ad6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	0159      	lsls	r1, r3, #5
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	440b      	add	r3, r1
 8003ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003aea:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	4613      	mov	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4403      	add	r3, r0
 8003afa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003afe:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	4613      	mov	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b12:	6819      	ldr	r1, [r3, #0]
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4403      	add	r3, r0
 8003b22:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4419      	add	r1, r3
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4403      	add	r3, r0
 8003b38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b3c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d114      	bne.n	8003b6e <PCD_EP_OutXfrComplete_int+0x16a>
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	1a9b      	subs	r3, r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d108      	bne.n	8003b6e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b66:	461a      	mov	r2, r3
 8003b68:	2101      	movs	r1, #1
 8003b6a:	f003 fbcf 	bl	800730c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	4619      	mov	r1, r3
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f012 fe5f 	bl	8016838 <HAL_PCD_DataOutStageCallback>
 8003b7a:	e046      	b.n	8003c0a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4a26      	ldr	r2, [pc, #152]	; (8003c18 <PCD_EP_OutXfrComplete_int+0x214>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d124      	bne.n	8003bce <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ba0:	6093      	str	r3, [r2, #8]
 8003ba2:	e032      	b.n	8003c0a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d008      	beq.n	8003bc0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bba:	461a      	mov	r2, r3
 8003bbc:	2320      	movs	r3, #32
 8003bbe:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f012 fe36 	bl	8016838 <HAL_PCD_DataOutStageCallback>
 8003bcc:	e01d      	b.n	8003c0a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d114      	bne.n	8003bfe <PCD_EP_OutXfrComplete_int+0x1fa>
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d108      	bne.n	8003bfe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	f003 fb87 	bl	800730c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	4619      	mov	r1, r3
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f012 fe17 	bl	8016838 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	4f54300a 	.word	0x4f54300a
 8003c18:	4f54310a 	.word	0x4f54310a

08003c1c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	333c      	adds	r3, #60	; 0x3c
 8003c34:	3304      	adds	r3, #4
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4a15      	ldr	r2, [pc, #84]	; (8003ca4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d90e      	bls.n	8003c70 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d009      	beq.n	8003c70 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c68:	461a      	mov	r2, r3
 8003c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c6e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f012 fdcf 	bl	8016814 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4a0a      	ldr	r2, [pc, #40]	; (8003ca4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d90c      	bls.n	8003c98 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d108      	bne.n	8003c98 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c90:	461a      	mov	r2, r3
 8003c92:	2101      	movs	r1, #1
 8003c94:	f003 fb3a 	bl	800730c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	4f54300a 	.word	0x4f54300a

08003ca8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	70fb      	strb	r3, [r7, #3]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003cc0:	78fb      	ldrb	r3, [r7, #3]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d107      	bne.n	8003cd6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003cc6:	883b      	ldrh	r3, [r7, #0]
 8003cc8:	0419      	lsls	r1, r3, #16
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	629a      	str	r2, [r3, #40]	; 0x28
 8003cd4:	e028      	b.n	8003d28 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cdc:	0c1b      	lsrs	r3, r3, #16
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	73fb      	strb	r3, [r7, #15]
 8003ce8:	e00d      	b.n	8003d06 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	3340      	adds	r3, #64	; 0x40
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	0c1b      	lsrs	r3, r3, #16
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
 8003d02:	3301      	adds	r3, #1
 8003d04:	73fb      	strb	r3, [r7, #15]
 8003d06:	7bfa      	ldrb	r2, [r7, #15]
 8003d08:	78fb      	ldrb	r3, [r7, #3]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d3ec      	bcc.n	8003cea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d10:	883b      	ldrh	r3, [r7, #0]
 8003d12:	0418      	lsls	r0, r3, #16
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6819      	ldr	r1, [r3, #0]
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	4302      	orrs	r2, r0
 8003d20:	3340      	adds	r3, #64	; 0x40
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e264      	b.n	800424c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d075      	beq.n	8003e7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d8e:	4ba3      	ldr	r3, [pc, #652]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 030c 	and.w	r3, r3, #12
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d00c      	beq.n	8003db4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d9a:	4ba0      	ldr	r3, [pc, #640]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d112      	bne.n	8003dcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003da6:	4b9d      	ldr	r3, [pc, #628]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003db2:	d10b      	bne.n	8003dcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db4:	4b99      	ldr	r3, [pc, #612]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d05b      	beq.n	8003e78 <HAL_RCC_OscConfig+0x108>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d157      	bne.n	8003e78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e23f      	b.n	800424c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd4:	d106      	bne.n	8003de4 <HAL_RCC_OscConfig+0x74>
 8003dd6:	4b91      	ldr	r3, [pc, #580]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a90      	ldr	r2, [pc, #576]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	e01d      	b.n	8003e20 <HAL_RCC_OscConfig+0xb0>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x98>
 8003dee:	4b8b      	ldr	r3, [pc, #556]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a8a      	ldr	r2, [pc, #552]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4b88      	ldr	r3, [pc, #544]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a87      	ldr	r2, [pc, #540]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e00b      	b.n	8003e20 <HAL_RCC_OscConfig+0xb0>
 8003e08:	4b84      	ldr	r3, [pc, #528]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a83      	ldr	r2, [pc, #524]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	4b81      	ldr	r3, [pc, #516]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a80      	ldr	r2, [pc, #512]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d013      	beq.n	8003e50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e28:	f7fd fb2c 	bl	8001484 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e30:	f7fd fb28 	bl	8001484 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b64      	cmp	r3, #100	; 0x64
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e204      	b.n	800424c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e42:	4b76      	ldr	r3, [pc, #472]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0xc0>
 8003e4e:	e014      	b.n	8003e7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e50:	f7fd fb18 	bl	8001484 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e58:	f7fd fb14 	bl	8001484 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b64      	cmp	r3, #100	; 0x64
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e1f0      	b.n	800424c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6a:	4b6c      	ldr	r3, [pc, #432]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0xe8>
 8003e76:	e000      	b.n	8003e7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d063      	beq.n	8003f4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e86:	4b65      	ldr	r3, [pc, #404]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00b      	beq.n	8003eaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e92:	4b62      	ldr	r3, [pc, #392]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d11c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e9e:	4b5f      	ldr	r3, [pc, #380]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d116      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eaa:	4b5c      	ldr	r3, [pc, #368]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x152>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d001      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e1c4      	b.n	800424c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec2:	4b56      	ldr	r3, [pc, #344]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	4952      	ldr	r1, [pc, #328]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed6:	e03a      	b.n	8003f4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d020      	beq.n	8003f22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ee0:	4b4f      	ldr	r3, [pc, #316]	; (8004020 <HAL_RCC_OscConfig+0x2b0>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee6:	f7fd facd 	bl	8001484 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eee:	f7fd fac9 	bl	8001484 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e1a5      	b.n	800424c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f00:	4b46      	ldr	r3, [pc, #280]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0f0      	beq.n	8003eee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0c:	4b43      	ldr	r3, [pc, #268]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4940      	ldr	r1, [pc, #256]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	600b      	str	r3, [r1, #0]
 8003f20:	e015      	b.n	8003f4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f22:	4b3f      	ldr	r3, [pc, #252]	; (8004020 <HAL_RCC_OscConfig+0x2b0>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fd faac 	bl	8001484 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f30:	f7fd faa8 	bl	8001484 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e184      	b.n	800424c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f42:	4b36      	ldr	r3, [pc, #216]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f0      	bne.n	8003f30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d030      	beq.n	8003fbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d016      	beq.n	8003f90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f62:	4b30      	ldr	r3, [pc, #192]	; (8004024 <HAL_RCC_OscConfig+0x2b4>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f68:	f7fd fa8c 	bl	8001484 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f70:	f7fd fa88 	bl	8001484 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e164      	b.n	800424c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f82:	4b26      	ldr	r3, [pc, #152]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0x200>
 8003f8e:	e015      	b.n	8003fbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f90:	4b24      	ldr	r3, [pc, #144]	; (8004024 <HAL_RCC_OscConfig+0x2b4>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f96:	f7fd fa75 	bl	8001484 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f9e:	f7fd fa71 	bl	8001484 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e14d      	b.n	800424c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb0:	4b1a      	ldr	r3, [pc, #104]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1f0      	bne.n	8003f9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 80a0 	beq.w	800410a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fce:	4b13      	ldr	r3, [pc, #76]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10f      	bne.n	8003ffa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	4b0f      	ldr	r3, [pc, #60]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	4a0e      	ldr	r2, [pc, #56]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fea:	4b0c      	ldr	r3, [pc, #48]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_RCC_OscConfig+0x2b8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d121      	bne.n	800404a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004006:	4b08      	ldr	r3, [pc, #32]	; (8004028 <HAL_RCC_OscConfig+0x2b8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a07      	ldr	r2, [pc, #28]	; (8004028 <HAL_RCC_OscConfig+0x2b8>)
 800400c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004012:	f7fd fa37 	bl	8001484 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004018:	e011      	b.n	800403e <HAL_RCC_OscConfig+0x2ce>
 800401a:	bf00      	nop
 800401c:	40023800 	.word	0x40023800
 8004020:	42470000 	.word	0x42470000
 8004024:	42470e80 	.word	0x42470e80
 8004028:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800402c:	f7fd fa2a 	bl	8001484 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e106      	b.n	800424c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403e:	4b85      	ldr	r3, [pc, #532]	; (8004254 <HAL_RCC_OscConfig+0x4e4>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d106      	bne.n	8004060 <HAL_RCC_OscConfig+0x2f0>
 8004052:	4b81      	ldr	r3, [pc, #516]	; (8004258 <HAL_RCC_OscConfig+0x4e8>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	4a80      	ldr	r2, [pc, #512]	; (8004258 <HAL_RCC_OscConfig+0x4e8>)
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	6713      	str	r3, [r2, #112]	; 0x70
 800405e:	e01c      	b.n	800409a <HAL_RCC_OscConfig+0x32a>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b05      	cmp	r3, #5
 8004066:	d10c      	bne.n	8004082 <HAL_RCC_OscConfig+0x312>
 8004068:	4b7b      	ldr	r3, [pc, #492]	; (8004258 <HAL_RCC_OscConfig+0x4e8>)
 800406a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406c:	4a7a      	ldr	r2, [pc, #488]	; (8004258 <HAL_RCC_OscConfig+0x4e8>)
 800406e:	f043 0304 	orr.w	r3, r3, #4
 8004072:	6713      	str	r3, [r2, #112]	; 0x70
 8004074:	4b78      	ldr	r3, [pc, #480]	; (8004258 <HAL_RCC_OscConfig+0x4e8>)
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	4a77      	ldr	r2, [pc, #476]	; (8004258 <HAL_RCC_OscConfig+0x4e8>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	6713      	str	r3, [r2, #112]	; 0x70
 8004080:	e00b      	b.n	800409a <HAL_RCC_OscConfig+0x32a>
 8004082:	4b75      	ldr	r3, [pc, #468]	; (8004258 <HAL_RCC_OscConfig+0x4e8>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004086:	4a74      	ldr	r2, [pc, #464]	; (8004258 <HAL_RCC_OscConfig+0x4e8>)
 8004088:	f023 0301 	bic.w	r3, r3, #1
 800408c:	6713      	str	r3, [r2, #112]	; 0x70
 800408e:	4b72      	ldr	r3, [pc, #456]	; (8004258 <HAL_RCC_OscConfig+0x4e8>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	4a71      	ldr	r2, [pc, #452]	; (8004258 <HAL_RCC_OscConfig+0x4e8>)
 8004094:	f023 0304 	bic.w	r3, r3, #4
 8004098:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d015      	beq.n	80040ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a2:	f7fd f9ef 	bl	8001484 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a8:	e00a      	b.n	80040c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040aa:	f7fd f9eb 	bl	8001484 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e0c5      	b.n	800424c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c0:	4b65      	ldr	r3, [pc, #404]	; (8004258 <HAL_RCC_OscConfig+0x4e8>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0ee      	beq.n	80040aa <HAL_RCC_OscConfig+0x33a>
 80040cc:	e014      	b.n	80040f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ce:	f7fd f9d9 	bl	8001484 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d4:	e00a      	b.n	80040ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040d6:	f7fd f9d5 	bl	8001484 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e0af      	b.n	800424c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ec:	4b5a      	ldr	r3, [pc, #360]	; (8004258 <HAL_RCC_OscConfig+0x4e8>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1ee      	bne.n	80040d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040f8:	7dfb      	ldrb	r3, [r7, #23]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d105      	bne.n	800410a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040fe:	4b56      	ldr	r3, [pc, #344]	; (8004258 <HAL_RCC_OscConfig+0x4e8>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	4a55      	ldr	r2, [pc, #340]	; (8004258 <HAL_RCC_OscConfig+0x4e8>)
 8004104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004108:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 809b 	beq.w	800424a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004114:	4b50      	ldr	r3, [pc, #320]	; (8004258 <HAL_RCC_OscConfig+0x4e8>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 030c 	and.w	r3, r3, #12
 800411c:	2b08      	cmp	r3, #8
 800411e:	d05c      	beq.n	80041da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d141      	bne.n	80041ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004128:	4b4c      	ldr	r3, [pc, #304]	; (800425c <HAL_RCC_OscConfig+0x4ec>)
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412e:	f7fd f9a9 	bl	8001484 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004136:	f7fd f9a5 	bl	8001484 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e081      	b.n	800424c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004148:	4b43      	ldr	r3, [pc, #268]	; (8004258 <HAL_RCC_OscConfig+0x4e8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1f0      	bne.n	8004136 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69da      	ldr	r2, [r3, #28]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	019b      	lsls	r3, r3, #6
 8004164:	431a      	orrs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416a:	085b      	lsrs	r3, r3, #1
 800416c:	3b01      	subs	r3, #1
 800416e:	041b      	lsls	r3, r3, #16
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	061b      	lsls	r3, r3, #24
 8004178:	4937      	ldr	r1, [pc, #220]	; (8004258 <HAL_RCC_OscConfig+0x4e8>)
 800417a:	4313      	orrs	r3, r2
 800417c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800417e:	4b37      	ldr	r3, [pc, #220]	; (800425c <HAL_RCC_OscConfig+0x4ec>)
 8004180:	2201      	movs	r2, #1
 8004182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fd f97e 	bl	8001484 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800418c:	f7fd f97a 	bl	8001484 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e056      	b.n	800424c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800419e:	4b2e      	ldr	r3, [pc, #184]	; (8004258 <HAL_RCC_OscConfig+0x4e8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0x41c>
 80041aa:	e04e      	b.n	800424a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ac:	4b2b      	ldr	r3, [pc, #172]	; (800425c <HAL_RCC_OscConfig+0x4ec>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b2:	f7fd f967 	bl	8001484 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ba:	f7fd f963 	bl	8001484 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e03f      	b.n	800424c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041cc:	4b22      	ldr	r3, [pc, #136]	; (8004258 <HAL_RCC_OscConfig+0x4e8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1f0      	bne.n	80041ba <HAL_RCC_OscConfig+0x44a>
 80041d8:	e037      	b.n	800424a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e032      	b.n	800424c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041e6:	4b1c      	ldr	r3, [pc, #112]	; (8004258 <HAL_RCC_OscConfig+0x4e8>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d028      	beq.n	8004246 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041fe:	429a      	cmp	r2, r3
 8004200:	d121      	bne.n	8004246 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d11a      	bne.n	8004246 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004216:	4013      	ands	r3, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800421c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800421e:	4293      	cmp	r3, r2
 8004220:	d111      	bne.n	8004246 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	085b      	lsrs	r3, r3, #1
 800422e:	3b01      	subs	r3, #1
 8004230:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004232:	429a      	cmp	r2, r3
 8004234:	d107      	bne.n	8004246 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004242:	429a      	cmp	r2, r3
 8004244:	d001      	beq.n	800424a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40007000 	.word	0x40007000
 8004258:	40023800 	.word	0x40023800
 800425c:	42470060 	.word	0x42470060

08004260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0cc      	b.n	800440e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004274:	4b68      	ldr	r3, [pc, #416]	; (8004418 <HAL_RCC_ClockConfig+0x1b8>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d90c      	bls.n	800429c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004282:	4b65      	ldr	r3, [pc, #404]	; (8004418 <HAL_RCC_ClockConfig+0x1b8>)
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800428a:	4b63      	ldr	r3, [pc, #396]	; (8004418 <HAL_RCC_ClockConfig+0x1b8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d001      	beq.n	800429c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0b8      	b.n	800440e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d020      	beq.n	80042ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042b4:	4b59      	ldr	r3, [pc, #356]	; (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	4a58      	ldr	r2, [pc, #352]	; (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042cc:	4b53      	ldr	r3, [pc, #332]	; (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	4a52      	ldr	r2, [pc, #328]	; (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d8:	4b50      	ldr	r3, [pc, #320]	; (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	494d      	ldr	r1, [pc, #308]	; (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d044      	beq.n	8004380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d107      	bne.n	800430e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fe:	4b47      	ldr	r3, [pc, #284]	; (800441c <HAL_RCC_ClockConfig+0x1bc>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d119      	bne.n	800433e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e07f      	b.n	800440e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d003      	beq.n	800431e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800431a:	2b03      	cmp	r3, #3
 800431c:	d107      	bne.n	800432e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431e:	4b3f      	ldr	r3, [pc, #252]	; (800441c <HAL_RCC_ClockConfig+0x1bc>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e06f      	b.n	800440e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432e:	4b3b      	ldr	r3, [pc, #236]	; (800441c <HAL_RCC_ClockConfig+0x1bc>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e067      	b.n	800440e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800433e:	4b37      	ldr	r3, [pc, #220]	; (800441c <HAL_RCC_ClockConfig+0x1bc>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f023 0203 	bic.w	r2, r3, #3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	4934      	ldr	r1, [pc, #208]	; (800441c <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	4313      	orrs	r3, r2
 800434e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004350:	f7fd f898 	bl	8001484 <HAL_GetTick>
 8004354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004356:	e00a      	b.n	800436e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004358:	f7fd f894 	bl	8001484 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	f241 3288 	movw	r2, #5000	; 0x1388
 8004366:	4293      	cmp	r3, r2
 8004368:	d901      	bls.n	800436e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e04f      	b.n	800440e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436e:	4b2b      	ldr	r3, [pc, #172]	; (800441c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 020c 	and.w	r2, r3, #12
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	429a      	cmp	r2, r3
 800437e:	d1eb      	bne.n	8004358 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004380:	4b25      	ldr	r3, [pc, #148]	; (8004418 <HAL_RCC_ClockConfig+0x1b8>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d20c      	bcs.n	80043a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438e:	4b22      	ldr	r3, [pc, #136]	; (8004418 <HAL_RCC_ClockConfig+0x1b8>)
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004396:	4b20      	ldr	r3, [pc, #128]	; (8004418 <HAL_RCC_ClockConfig+0x1b8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d001      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e032      	b.n	800440e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b4:	4b19      	ldr	r3, [pc, #100]	; (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4916      	ldr	r1, [pc, #88]	; (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d009      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043d2:	4b12      	ldr	r3, [pc, #72]	; (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	490e      	ldr	r1, [pc, #56]	; (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043e6:	f000 f821 	bl	800442c <HAL_RCC_GetSysClockFreq>
 80043ea:	4602      	mov	r2, r0
 80043ec:	4b0b      	ldr	r3, [pc, #44]	; (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	091b      	lsrs	r3, r3, #4
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	490a      	ldr	r1, [pc, #40]	; (8004420 <HAL_RCC_ClockConfig+0x1c0>)
 80043f8:	5ccb      	ldrb	r3, [r1, r3]
 80043fa:	fa22 f303 	lsr.w	r3, r2, r3
 80043fe:	4a09      	ldr	r2, [pc, #36]	; (8004424 <HAL_RCC_ClockConfig+0x1c4>)
 8004400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004402:	4b09      	ldr	r3, [pc, #36]	; (8004428 <HAL_RCC_ClockConfig+0x1c8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7fc fe6a 	bl	80010e0 <HAL_InitTick>

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40023c00 	.word	0x40023c00
 800441c:	40023800 	.word	0x40023800
 8004420:	0801aae4 	.word	0x0801aae4
 8004424:	20000000 	.word	0x20000000
 8004428:	20000004 	.word	0x20000004

0800442c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800442c:	b5b0      	push	{r4, r5, r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004432:	2100      	movs	r1, #0
 8004434:	6079      	str	r1, [r7, #4]
 8004436:	2100      	movs	r1, #0
 8004438:	60f9      	str	r1, [r7, #12]
 800443a:	2100      	movs	r1, #0
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800443e:	2100      	movs	r1, #0
 8004440:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004442:	4952      	ldr	r1, [pc, #328]	; (800458c <HAL_RCC_GetSysClockFreq+0x160>)
 8004444:	6889      	ldr	r1, [r1, #8]
 8004446:	f001 010c 	and.w	r1, r1, #12
 800444a:	2908      	cmp	r1, #8
 800444c:	d00d      	beq.n	800446a <HAL_RCC_GetSysClockFreq+0x3e>
 800444e:	2908      	cmp	r1, #8
 8004450:	f200 8094 	bhi.w	800457c <HAL_RCC_GetSysClockFreq+0x150>
 8004454:	2900      	cmp	r1, #0
 8004456:	d002      	beq.n	800445e <HAL_RCC_GetSysClockFreq+0x32>
 8004458:	2904      	cmp	r1, #4
 800445a:	d003      	beq.n	8004464 <HAL_RCC_GetSysClockFreq+0x38>
 800445c:	e08e      	b.n	800457c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800445e:	4b4c      	ldr	r3, [pc, #304]	; (8004590 <HAL_RCC_GetSysClockFreq+0x164>)
 8004460:	60bb      	str	r3, [r7, #8]
       break;
 8004462:	e08e      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004464:	4b4b      	ldr	r3, [pc, #300]	; (8004594 <HAL_RCC_GetSysClockFreq+0x168>)
 8004466:	60bb      	str	r3, [r7, #8]
      break;
 8004468:	e08b      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800446a:	4948      	ldr	r1, [pc, #288]	; (800458c <HAL_RCC_GetSysClockFreq+0x160>)
 800446c:	6849      	ldr	r1, [r1, #4]
 800446e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004472:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004474:	4945      	ldr	r1, [pc, #276]	; (800458c <HAL_RCC_GetSysClockFreq+0x160>)
 8004476:	6849      	ldr	r1, [r1, #4]
 8004478:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800447c:	2900      	cmp	r1, #0
 800447e:	d024      	beq.n	80044ca <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004480:	4942      	ldr	r1, [pc, #264]	; (800458c <HAL_RCC_GetSysClockFreq+0x160>)
 8004482:	6849      	ldr	r1, [r1, #4]
 8004484:	0989      	lsrs	r1, r1, #6
 8004486:	4608      	mov	r0, r1
 8004488:	f04f 0100 	mov.w	r1, #0
 800448c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004490:	f04f 0500 	mov.w	r5, #0
 8004494:	ea00 0204 	and.w	r2, r0, r4
 8004498:	ea01 0305 	and.w	r3, r1, r5
 800449c:	493d      	ldr	r1, [pc, #244]	; (8004594 <HAL_RCC_GetSysClockFreq+0x168>)
 800449e:	fb01 f003 	mul.w	r0, r1, r3
 80044a2:	2100      	movs	r1, #0
 80044a4:	fb01 f102 	mul.w	r1, r1, r2
 80044a8:	1844      	adds	r4, r0, r1
 80044aa:	493a      	ldr	r1, [pc, #232]	; (8004594 <HAL_RCC_GetSysClockFreq+0x168>)
 80044ac:	fba2 0101 	umull	r0, r1, r2, r1
 80044b0:	1863      	adds	r3, r4, r1
 80044b2:	4619      	mov	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	461a      	mov	r2, r3
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	f7fb fed8 	bl	8000270 <__aeabi_uldivmod>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4613      	mov	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	e04a      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ca:	4b30      	ldr	r3, [pc, #192]	; (800458c <HAL_RCC_GetSysClockFreq+0x160>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	099b      	lsrs	r3, r3, #6
 80044d0:	461a      	mov	r2, r3
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044da:	f04f 0100 	mov.w	r1, #0
 80044de:	ea02 0400 	and.w	r4, r2, r0
 80044e2:	ea03 0501 	and.w	r5, r3, r1
 80044e6:	4620      	mov	r0, r4
 80044e8:	4629      	mov	r1, r5
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	014b      	lsls	r3, r1, #5
 80044f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044f8:	0142      	lsls	r2, r0, #5
 80044fa:	4610      	mov	r0, r2
 80044fc:	4619      	mov	r1, r3
 80044fe:	1b00      	subs	r0, r0, r4
 8004500:	eb61 0105 	sbc.w	r1, r1, r5
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	018b      	lsls	r3, r1, #6
 800450e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004512:	0182      	lsls	r2, r0, #6
 8004514:	1a12      	subs	r2, r2, r0
 8004516:	eb63 0301 	sbc.w	r3, r3, r1
 800451a:	f04f 0000 	mov.w	r0, #0
 800451e:	f04f 0100 	mov.w	r1, #0
 8004522:	00d9      	lsls	r1, r3, #3
 8004524:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004528:	00d0      	lsls	r0, r2, #3
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	1912      	adds	r2, r2, r4
 8004530:	eb45 0303 	adc.w	r3, r5, r3
 8004534:	f04f 0000 	mov.w	r0, #0
 8004538:	f04f 0100 	mov.w	r1, #0
 800453c:	0299      	lsls	r1, r3, #10
 800453e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004542:	0290      	lsls	r0, r2, #10
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4610      	mov	r0, r2
 800454a:	4619      	mov	r1, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	461a      	mov	r2, r3
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	f7fb fe8c 	bl	8000270 <__aeabi_uldivmod>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4613      	mov	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004560:	4b0a      	ldr	r3, [pc, #40]	; (800458c <HAL_RCC_GetSysClockFreq+0x160>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	0c1b      	lsrs	r3, r3, #16
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	3301      	adds	r3, #1
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	fbb2 f3f3 	udiv	r3, r2, r3
 8004578:	60bb      	str	r3, [r7, #8]
      break;
 800457a:	e002      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800457c:	4b04      	ldr	r3, [pc, #16]	; (8004590 <HAL_RCC_GetSysClockFreq+0x164>)
 800457e:	60bb      	str	r3, [r7, #8]
      break;
 8004580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004582:	68bb      	ldr	r3, [r7, #8]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bdb0      	pop	{r4, r5, r7, pc}
 800458c:	40023800 	.word	0x40023800
 8004590:	00f42400 	.word	0x00f42400
 8004594:	017d7840 	.word	0x017d7840

08004598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800459c:	4b03      	ldr	r3, [pc, #12]	; (80045ac <HAL_RCC_GetHCLKFreq+0x14>)
 800459e:	681b      	ldr	r3, [r3, #0]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	20000000 	.word	0x20000000

080045b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045b4:	f7ff fff0 	bl	8004598 <HAL_RCC_GetHCLKFreq>
 80045b8:	4602      	mov	r2, r0
 80045ba:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	0a9b      	lsrs	r3, r3, #10
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	4903      	ldr	r1, [pc, #12]	; (80045d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045c6:	5ccb      	ldrb	r3, [r1, r3]
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40023800 	.word	0x40023800
 80045d4:	0801aaf4 	.word	0x0801aaf4

080045d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045dc:	f7ff ffdc 	bl	8004598 <HAL_RCC_GetHCLKFreq>
 80045e0:	4602      	mov	r2, r0
 80045e2:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	0b5b      	lsrs	r3, r3, #13
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	4903      	ldr	r1, [pc, #12]	; (80045fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80045ee:	5ccb      	ldrb	r3, [r1, r3]
 80045f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40023800 	.word	0x40023800
 80045fc:	0801aaf4 	.word	0x0801aaf4

08004600 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	220f      	movs	r2, #15
 800460e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004610:	4b12      	ldr	r3, [pc, #72]	; (800465c <HAL_RCC_GetClockConfig+0x5c>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 0203 	and.w	r2, r3, #3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800461c:	4b0f      	ldr	r3, [pc, #60]	; (800465c <HAL_RCC_GetClockConfig+0x5c>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004628:	4b0c      	ldr	r3, [pc, #48]	; (800465c <HAL_RCC_GetClockConfig+0x5c>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004634:	4b09      	ldr	r3, [pc, #36]	; (800465c <HAL_RCC_GetClockConfig+0x5c>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	08db      	lsrs	r3, r3, #3
 800463a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004642:	4b07      	ldr	r3, [pc, #28]	; (8004660 <HAL_RCC_GetClockConfig+0x60>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0207 	and.w	r2, r3, #7
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	601a      	str	r2, [r3, #0]
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40023800 	.word	0x40023800
 8004660:	40023c00 	.word	0x40023c00

08004664 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d105      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004688:	2b00      	cmp	r3, #0
 800468a:	d035      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800468c:	4b62      	ldr	r3, [pc, #392]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004692:	f7fc fef7 	bl	8001484 <HAL_GetTick>
 8004696:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004698:	e008      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800469a:	f7fc fef3 	bl	8001484 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e0b0      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046ac:	4b5b      	ldr	r3, [pc, #364]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1f0      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	019a      	lsls	r2, r3, #6
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	071b      	lsls	r3, r3, #28
 80046c4:	4955      	ldr	r1, [pc, #340]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046cc:	4b52      	ldr	r3, [pc, #328]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80046ce:	2201      	movs	r2, #1
 80046d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046d2:	f7fc fed7 	bl	8001484 <HAL_GetTick>
 80046d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046d8:	e008      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046da:	f7fc fed3 	bl	8001484 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e090      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046ec:	4b4b      	ldr	r3, [pc, #300]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0f0      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 8083 	beq.w	800480c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	4b44      	ldr	r3, [pc, #272]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	4a43      	ldr	r2, [pc, #268]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004714:	6413      	str	r3, [r2, #64]	; 0x40
 8004716:	4b41      	ldr	r3, [pc, #260]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004722:	4b3f      	ldr	r3, [pc, #252]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a3e      	ldr	r2, [pc, #248]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800472c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800472e:	f7fc fea9 	bl	8001484 <HAL_GetTick>
 8004732:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004734:	e008      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004736:	f7fc fea5 	bl	8001484 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e062      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004748:	4b35      	ldr	r3, [pc, #212]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0f0      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004754:	4b31      	ldr	r3, [pc, #196]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004758:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800475c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d02f      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	429a      	cmp	r2, r3
 8004770:	d028      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004772:	4b2a      	ldr	r3, [pc, #168]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800477c:	4b29      	ldr	r3, [pc, #164]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800477e:	2201      	movs	r2, #1
 8004780:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004782:	4b28      	ldr	r3, [pc, #160]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004788:	4a24      	ldr	r2, [pc, #144]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800478e:	4b23      	ldr	r3, [pc, #140]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b01      	cmp	r3, #1
 8004798:	d114      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800479a:	f7fc fe73 	bl	8001484 <HAL_GetTick>
 800479e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a0:	e00a      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a2:	f7fc fe6f 	bl	8001484 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e02a      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b8:	4b18      	ldr	r3, [pc, #96]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0ee      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047d0:	d10d      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80047d2:	4b12      	ldr	r3, [pc, #72]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e6:	490d      	ldr	r1, [pc, #52]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	608b      	str	r3, [r1, #8]
 80047ec:	e005      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047ee:	4b0b      	ldr	r3, [pc, #44]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	4a0a      	ldr	r2, [pc, #40]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047f8:	6093      	str	r3, [r2, #8]
 80047fa:	4b08      	ldr	r3, [pc, #32]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004806:	4905      	ldr	r1, [pc, #20]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004808:	4313      	orrs	r3, r2
 800480a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	42470068 	.word	0x42470068
 800481c:	40023800 	.word	0x40023800
 8004820:	40007000 	.word	0x40007000
 8004824:	42470e40 	.word	0x42470e40

08004828 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e083      	b.n	8004942 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	7f5b      	ldrb	r3, [r3, #29]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d105      	bne.n	8004850 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fc fb4c 	bl	8000ee8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	22ca      	movs	r2, #202	; 0xca
 800485c:	625a      	str	r2, [r3, #36]	; 0x24
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2253      	movs	r2, #83	; 0x53
 8004864:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f9fb 	bl	8004c62 <RTC_EnterInitMode>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d008      	beq.n	8004884 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	22ff      	movs	r2, #255	; 0xff
 8004878:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2204      	movs	r2, #4
 800487e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e05e      	b.n	8004942 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6812      	ldr	r2, [r2, #0]
 800488e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004896:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6899      	ldr	r1, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	68d2      	ldr	r2, [r2, #12]
 80048be:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6919      	ldr	r1, [r3, #16]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	041a      	lsls	r2, r3, #16
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048e2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10e      	bne.n	8004910 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f98d 	bl	8004c12 <HAL_RTC_WaitForSynchro>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d008      	beq.n	8004910 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	22ff      	movs	r2, #255	; 0xff
 8004904:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2204      	movs	r2, #4
 800490a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e018      	b.n	8004942 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800491e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699a      	ldr	r2, [r3, #24]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	22ff      	movs	r2, #255	; 0xff
 8004938:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004940:	2300      	movs	r3, #0
  }
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800494a:	b590      	push	{r4, r7, lr}
 800494c:	b087      	sub	sp, #28
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	7f1b      	ldrb	r3, [r3, #28]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_RTC_SetTime+0x1c>
 8004962:	2302      	movs	r3, #2
 8004964:	e0aa      	b.n	8004abc <HAL_RTC_SetTime+0x172>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2202      	movs	r2, #2
 8004970:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d126      	bne.n	80049c6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004982:	2b00      	cmp	r3, #0
 8004984:	d102      	bne.n	800498c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2200      	movs	r2, #0
 800498a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	4618      	mov	r0, r3
 8004992:	f000 f992 	bl	8004cba <RTC_ByteToBcd2>
 8004996:	4603      	mov	r3, r0
 8004998:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	785b      	ldrb	r3, [r3, #1]
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 f98b 	bl	8004cba <RTC_ByteToBcd2>
 80049a4:	4603      	mov	r3, r0
 80049a6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80049a8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	789b      	ldrb	r3, [r3, #2]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 f983 	bl	8004cba <RTC_ByteToBcd2>
 80049b4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80049b6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	78db      	ldrb	r3, [r3, #3]
 80049be:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	e018      	b.n	80049f8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d102      	bne.n	80049da <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2200      	movs	r2, #0
 80049d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	785b      	ldrb	r3, [r3, #1]
 80049e4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80049e6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80049ec:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	78db      	ldrb	r3, [r3, #3]
 80049f2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	22ca      	movs	r2, #202	; 0xca
 80049fe:	625a      	str	r2, [r3, #36]	; 0x24
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2253      	movs	r2, #83	; 0x53
 8004a06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 f92a 	bl	8004c62 <RTC_EnterInitMode>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00b      	beq.n	8004a2c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	22ff      	movs	r2, #255	; 0xff
 8004a1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2204      	movs	r2, #4
 8004a20:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e047      	b.n	8004abc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004a36:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004a3a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a4a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6899      	ldr	r1, [r3, #8]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a72:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d111      	bne.n	8004aa6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f8c5 	bl	8004c12 <HAL_RTC_WaitForSynchro>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00b      	beq.n	8004aa6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	22ff      	movs	r2, #255	; 0xff
 8004a94:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2204      	movs	r2, #4
 8004a9a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e00a      	b.n	8004abc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	22ff      	movs	r2, #255	; 0xff
 8004aac:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004aba:	2300      	movs	r3, #0
  }
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	371c      	adds	r7, #28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd90      	pop	{r4, r7, pc}

08004ac4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	7f1b      	ldrb	r3, [r3, #28]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_RTC_SetDate+0x1c>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e094      	b.n	8004c0a <HAL_RTC_SetDate+0x146>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10e      	bne.n	8004b10 <HAL_RTC_SetDate+0x4c>
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	785b      	ldrb	r3, [r3, #1]
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d008      	beq.n	8004b10 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	785b      	ldrb	r3, [r3, #1]
 8004b02:	f023 0310 	bic.w	r3, r3, #16
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	330a      	adds	r3, #10
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d11c      	bne.n	8004b50 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	78db      	ldrb	r3, [r3, #3]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 f8cd 	bl	8004cba <RTC_ByteToBcd2>
 8004b20:	4603      	mov	r3, r0
 8004b22:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	785b      	ldrb	r3, [r3, #1]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 f8c6 	bl	8004cba <RTC_ByteToBcd2>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004b32:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	789b      	ldrb	r3, [r3, #2]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 f8be 	bl	8004cba <RTC_ByteToBcd2>
 8004b3e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004b40:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	e00e      	b.n	8004b6e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	78db      	ldrb	r3, [r3, #3]
 8004b54:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	785b      	ldrb	r3, [r3, #1]
 8004b5a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004b5c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004b62:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	22ca      	movs	r2, #202	; 0xca
 8004b74:	625a      	str	r2, [r3, #36]	; 0x24
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2253      	movs	r2, #83	; 0x53
 8004b7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 f86f 	bl	8004c62 <RTC_EnterInitMode>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00b      	beq.n	8004ba2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	22ff      	movs	r2, #255	; 0xff
 8004b90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2204      	movs	r2, #4
 8004b96:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e033      	b.n	8004c0a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004bac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004bb0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bc0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d111      	bne.n	8004bf4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f81e 	bl	8004c12 <HAL_RTC_WaitForSynchro>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00b      	beq.n	8004bf4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	22ff      	movs	r2, #255	; 0xff
 8004be2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2204      	movs	r2, #4
 8004be8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e00a      	b.n	8004c0a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	22ff      	movs	r2, #255	; 0xff
 8004bfa:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004c08:	2300      	movs	r3, #0
  }
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd90      	pop	{r4, r7, pc}

08004c12 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c2c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c2e:	f7fc fc29 	bl	8001484 <HAL_GetTick>
 8004c32:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004c34:	e009      	b.n	8004c4a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c36:	f7fc fc25 	bl	8001484 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c44:	d901      	bls.n	8004c4a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e007      	b.n	8004c5a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0ee      	beq.n	8004c36 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b084      	sub	sp, #16
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d119      	bne.n	8004cb0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f04f 32ff 	mov.w	r2, #4294967295
 8004c84:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c86:	f7fc fbfd 	bl	8001484 <HAL_GetTick>
 8004c8a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004c8c:	e009      	b.n	8004ca2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c8e:	f7fc fbf9 	bl	8001484 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c9c:	d901      	bls.n	8004ca2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e007      	b.n	8004cb2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0ee      	beq.n	8004c8e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b085      	sub	sp, #20
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8004cc8:	e005      	b.n	8004cd6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004cd0:	79fb      	ldrb	r3, [r7, #7]
 8004cd2:	3b0a      	subs	r3, #10
 8004cd4:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
 8004cd8:	2b09      	cmp	r3, #9
 8004cda:	d8f6      	bhi.n	8004cca <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	79fb      	ldrb	r3, [r7, #7]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	b2db      	uxtb	r3, r3
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e07b      	b.n	8004e00 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d108      	bne.n	8004d22 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d18:	d009      	beq.n	8004d2e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	61da      	str	r2, [r3, #28]
 8004d20:	e005      	b.n	8004d2e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d106      	bne.n	8004d4e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7fc f8e3 	bl	8000f14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2202      	movs	r2, #2
 8004d52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d64:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	431a      	orrs	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004da8:	431a      	orrs	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db2:	ea42 0103 	orr.w	r1, r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	0c1b      	lsrs	r3, r3, #16
 8004dcc:	f003 0104 	and.w	r1, r3, #4
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	f003 0210 	and.w	r2, r3, #16
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	69da      	ldr	r2, [r3, #28]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e041      	b.n	8004e9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7fc f8b8 	bl	8000fa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3304      	adds	r3, #4
 8004e44:	4619      	mov	r1, r3
 8004e46:	4610      	mov	r0, r2
 8004e48:	f000 fa96 	bl	8005378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d001      	beq.n	8004ec0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e04e      	b.n	8004f5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0201 	orr.w	r2, r2, #1
 8004ed6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a23      	ldr	r2, [pc, #140]	; (8004f6c <HAL_TIM_Base_Start_IT+0xc4>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d022      	beq.n	8004f28 <HAL_TIM_Base_Start_IT+0x80>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eea:	d01d      	beq.n	8004f28 <HAL_TIM_Base_Start_IT+0x80>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a1f      	ldr	r2, [pc, #124]	; (8004f70 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d018      	beq.n	8004f28 <HAL_TIM_Base_Start_IT+0x80>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a1e      	ldr	r2, [pc, #120]	; (8004f74 <HAL_TIM_Base_Start_IT+0xcc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d013      	beq.n	8004f28 <HAL_TIM_Base_Start_IT+0x80>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a1c      	ldr	r2, [pc, #112]	; (8004f78 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00e      	beq.n	8004f28 <HAL_TIM_Base_Start_IT+0x80>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a1b      	ldr	r2, [pc, #108]	; (8004f7c <HAL_TIM_Base_Start_IT+0xd4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d009      	beq.n	8004f28 <HAL_TIM_Base_Start_IT+0x80>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a19      	ldr	r2, [pc, #100]	; (8004f80 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d004      	beq.n	8004f28 <HAL_TIM_Base_Start_IT+0x80>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a18      	ldr	r2, [pc, #96]	; (8004f84 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d111      	bne.n	8004f4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b06      	cmp	r3, #6
 8004f38:	d010      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 0201 	orr.w	r2, r2, #1
 8004f48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4a:	e007      	b.n	8004f5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0201 	orr.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40010000 	.word	0x40010000
 8004f70:	40000400 	.word	0x40000400
 8004f74:	40000800 	.word	0x40000800
 8004f78:	40000c00 	.word	0x40000c00
 8004f7c:	40010400 	.word	0x40010400
 8004f80:	40014000 	.word	0x40014000
 8004f84:	40001800 	.word	0x40001800

08004f88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d122      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d11b      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f06f 0202 	mvn.w	r2, #2
 8004fb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f9b5 	bl	800533a <HAL_TIM_IC_CaptureCallback>
 8004fd0:	e005      	b.n	8004fde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f9a7 	bl	8005326 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f9b8 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d122      	bne.n	8005038 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d11b      	bne.n	8005038 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f06f 0204 	mvn.w	r2, #4
 8005008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2202      	movs	r2, #2
 800500e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f98b 	bl	800533a <HAL_TIM_IC_CaptureCallback>
 8005024:	e005      	b.n	8005032 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f97d 	bl	8005326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 f98e 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b08      	cmp	r3, #8
 8005044:	d122      	bne.n	800508c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b08      	cmp	r3, #8
 8005052:	d11b      	bne.n	800508c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f06f 0208 	mvn.w	r2, #8
 800505c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2204      	movs	r2, #4
 8005062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f961 	bl	800533a <HAL_TIM_IC_CaptureCallback>
 8005078:	e005      	b.n	8005086 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f953 	bl	8005326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f964 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f003 0310 	and.w	r3, r3, #16
 8005096:	2b10      	cmp	r3, #16
 8005098:	d122      	bne.n	80050e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f003 0310 	and.w	r3, r3, #16
 80050a4:	2b10      	cmp	r3, #16
 80050a6:	d11b      	bne.n	80050e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f06f 0210 	mvn.w	r2, #16
 80050b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2208      	movs	r2, #8
 80050b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f937 	bl	800533a <HAL_TIM_IC_CaptureCallback>
 80050cc:	e005      	b.n	80050da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f929 	bl	8005326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f93a 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d10e      	bne.n	800510c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d107      	bne.n	800510c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0201 	mvn.w	r2, #1
 8005104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fb feaa 	bl	8000e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005116:	2b80      	cmp	r3, #128	; 0x80
 8005118:	d10e      	bne.n	8005138 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005124:	2b80      	cmp	r3, #128	; 0x80
 8005126:	d107      	bne.n	8005138 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fae0 	bl	80056f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	d10e      	bne.n	8005164 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005150:	2b40      	cmp	r3, #64	; 0x40
 8005152:	d107      	bne.n	8005164 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800515c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f8ff 	bl	8005362 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b20      	cmp	r3, #32
 8005170:	d10e      	bne.n	8005190 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	2b20      	cmp	r3, #32
 800517e:	d107      	bne.n	8005190 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f06f 0220 	mvn.w	r2, #32
 8005188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 faaa 	bl	80056e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005190:	bf00      	nop
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_TIM_ConfigClockSource+0x1c>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e0b4      	b.n	800531e <HAL_TIM_ConfigClockSource+0x186>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ec:	d03e      	beq.n	800526c <HAL_TIM_ConfigClockSource+0xd4>
 80051ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f2:	f200 8087 	bhi.w	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 80051f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fa:	f000 8086 	beq.w	800530a <HAL_TIM_ConfigClockSource+0x172>
 80051fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005202:	d87f      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 8005204:	2b70      	cmp	r3, #112	; 0x70
 8005206:	d01a      	beq.n	800523e <HAL_TIM_ConfigClockSource+0xa6>
 8005208:	2b70      	cmp	r3, #112	; 0x70
 800520a:	d87b      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 800520c:	2b60      	cmp	r3, #96	; 0x60
 800520e:	d050      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x11a>
 8005210:	2b60      	cmp	r3, #96	; 0x60
 8005212:	d877      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 8005214:	2b50      	cmp	r3, #80	; 0x50
 8005216:	d03c      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0xfa>
 8005218:	2b50      	cmp	r3, #80	; 0x50
 800521a:	d873      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 800521c:	2b40      	cmp	r3, #64	; 0x40
 800521e:	d058      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0x13a>
 8005220:	2b40      	cmp	r3, #64	; 0x40
 8005222:	d86f      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 8005224:	2b30      	cmp	r3, #48	; 0x30
 8005226:	d064      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005228:	2b30      	cmp	r3, #48	; 0x30
 800522a:	d86b      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 800522c:	2b20      	cmp	r3, #32
 800522e:	d060      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005230:	2b20      	cmp	r3, #32
 8005232:	d867      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d05c      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005238:	2b10      	cmp	r3, #16
 800523a:	d05a      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15a>
 800523c:	e062      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6899      	ldr	r1, [r3, #8]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f000 f9ad 	bl	80055ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005260:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	609a      	str	r2, [r3, #8]
      break;
 800526a:	e04f      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	6899      	ldr	r1, [r3, #8]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f000 f996 	bl	80055ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800528e:	609a      	str	r2, [r3, #8]
      break;
 8005290:	e03c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6859      	ldr	r1, [r3, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	461a      	mov	r2, r3
 80052a0:	f000 f90a 	bl	80054b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2150      	movs	r1, #80	; 0x50
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 f963 	bl	8005576 <TIM_ITRx_SetConfig>
      break;
 80052b0:	e02c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	6859      	ldr	r1, [r3, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	461a      	mov	r2, r3
 80052c0:	f000 f929 	bl	8005516 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2160      	movs	r1, #96	; 0x60
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 f953 	bl	8005576 <TIM_ITRx_SetConfig>
      break;
 80052d0:	e01c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6859      	ldr	r1, [r3, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	461a      	mov	r2, r3
 80052e0:	f000 f8ea 	bl	80054b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2140      	movs	r1, #64	; 0x40
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 f943 	bl	8005576 <TIM_ITRx_SetConfig>
      break;
 80052f0:	e00c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4619      	mov	r1, r3
 80052fc:	4610      	mov	r0, r2
 80052fe:	f000 f93a 	bl	8005576 <TIM_ITRx_SetConfig>
      break;
 8005302:	e003      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
      break;
 8005308:	e000      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800530a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800531c:	7bfb      	ldrb	r3, [r7, #15]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a40      	ldr	r2, [pc, #256]	; (800548c <TIM_Base_SetConfig+0x114>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d013      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005396:	d00f      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a3d      	ldr	r2, [pc, #244]	; (8005490 <TIM_Base_SetConfig+0x118>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00b      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a3c      	ldr	r2, [pc, #240]	; (8005494 <TIM_Base_SetConfig+0x11c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d007      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a3b      	ldr	r2, [pc, #236]	; (8005498 <TIM_Base_SetConfig+0x120>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d003      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a3a      	ldr	r2, [pc, #232]	; (800549c <TIM_Base_SetConfig+0x124>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d108      	bne.n	80053ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a2f      	ldr	r2, [pc, #188]	; (800548c <TIM_Base_SetConfig+0x114>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d02b      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d8:	d027      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a2c      	ldr	r2, [pc, #176]	; (8005490 <TIM_Base_SetConfig+0x118>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d023      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a2b      	ldr	r2, [pc, #172]	; (8005494 <TIM_Base_SetConfig+0x11c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d01f      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a2a      	ldr	r2, [pc, #168]	; (8005498 <TIM_Base_SetConfig+0x120>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d01b      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a29      	ldr	r2, [pc, #164]	; (800549c <TIM_Base_SetConfig+0x124>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d017      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a28      	ldr	r2, [pc, #160]	; (80054a0 <TIM_Base_SetConfig+0x128>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d013      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a27      	ldr	r2, [pc, #156]	; (80054a4 <TIM_Base_SetConfig+0x12c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00f      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a26      	ldr	r2, [pc, #152]	; (80054a8 <TIM_Base_SetConfig+0x130>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00b      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a25      	ldr	r2, [pc, #148]	; (80054ac <TIM_Base_SetConfig+0x134>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d007      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a24      	ldr	r2, [pc, #144]	; (80054b0 <TIM_Base_SetConfig+0x138>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d003      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a23      	ldr	r2, [pc, #140]	; (80054b4 <TIM_Base_SetConfig+0x13c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d108      	bne.n	800543c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a0a      	ldr	r2, [pc, #40]	; (800548c <TIM_Base_SetConfig+0x114>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d003      	beq.n	8005470 <TIM_Base_SetConfig+0xf8>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a0c      	ldr	r2, [pc, #48]	; (800549c <TIM_Base_SetConfig+0x124>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d103      	bne.n	8005478 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	691a      	ldr	r2, [r3, #16]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	615a      	str	r2, [r3, #20]
}
 800547e:	bf00      	nop
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40010000 	.word	0x40010000
 8005490:	40000400 	.word	0x40000400
 8005494:	40000800 	.word	0x40000800
 8005498:	40000c00 	.word	0x40000c00
 800549c:	40010400 	.word	0x40010400
 80054a0:	40014000 	.word	0x40014000
 80054a4:	40014400 	.word	0x40014400
 80054a8:	40014800 	.word	0x40014800
 80054ac:	40001800 	.word	0x40001800
 80054b0:	40001c00 	.word	0x40001c00
 80054b4:	40002000 	.word	0x40002000

080054b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	f023 0201 	bic.w	r2, r3, #1
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f023 030a 	bic.w	r3, r3, #10
 80054f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	621a      	str	r2, [r3, #32]
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005516:	b480      	push	{r7}
 8005518:	b087      	sub	sp, #28
 800551a:	af00      	add	r7, sp, #0
 800551c:	60f8      	str	r0, [r7, #12]
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f023 0210 	bic.w	r2, r3, #16
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005540:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	031b      	lsls	r3, r3, #12
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005552:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	621a      	str	r2, [r3, #32]
}
 800556a:	bf00      	nop
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005576:	b480      	push	{r7}
 8005578:	b085      	sub	sp, #20
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4313      	orrs	r3, r2
 8005594:	f043 0307 	orr.w	r3, r3, #7
 8005598:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	609a      	str	r2, [r3, #8]
}
 80055a0:	bf00      	nop
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	021a      	lsls	r2, r3, #8
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	431a      	orrs	r2, r3
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	609a      	str	r2, [r3, #8]
}
 80055e0:	bf00      	nop
 80055e2:	371c      	adds	r7, #28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d101      	bne.n	8005604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005600:	2302      	movs	r3, #2
 8005602:	e05a      	b.n	80056ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a21      	ldr	r2, [pc, #132]	; (80056c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d022      	beq.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005650:	d01d      	beq.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a1d      	ldr	r2, [pc, #116]	; (80056cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d018      	beq.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a1b      	ldr	r2, [pc, #108]	; (80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d013      	beq.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a1a      	ldr	r2, [pc, #104]	; (80056d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00e      	beq.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a18      	ldr	r2, [pc, #96]	; (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d009      	beq.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a17      	ldr	r2, [pc, #92]	; (80056dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d004      	beq.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a15      	ldr	r2, [pc, #84]	; (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d10c      	bne.n	80056a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	4313      	orrs	r3, r2
 800569e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40010000 	.word	0x40010000
 80056cc:	40000400 	.word	0x40000400
 80056d0:	40000800 	.word	0x40000800
 80056d4:	40000c00 	.word	0x40000c00
 80056d8:	40010400 	.word	0x40010400
 80056dc:	40014000 	.word	0x40014000
 80056e0:	40001800 	.word	0x40001800

080056e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e03f      	b.n	800579e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d106      	bne.n	8005738 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fb fc56 	bl	8000fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2224      	movs	r2, #36	; 0x24
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800574e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f929 	bl	80059a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	695a      	ldr	r2, [r3, #20]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005774:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005784:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2220      	movs	r2, #32
 8005798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b08a      	sub	sp, #40	; 0x28
 80057aa:	af02      	add	r7, sp, #8
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	603b      	str	r3, [r7, #0]
 80057b2:	4613      	mov	r3, r2
 80057b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d17c      	bne.n	80058c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <HAL_UART_Transmit+0x2c>
 80057cc:	88fb      	ldrh	r3, [r7, #6]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e075      	b.n	80058c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_UART_Transmit+0x3e>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e06e      	b.n	80058c2 <HAL_UART_Transmit+0x11c>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2221      	movs	r2, #33	; 0x21
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057fa:	f7fb fe43 	bl	8001484 <HAL_GetTick>
 80057fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	88fa      	ldrh	r2, [r7, #6]
 8005804:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	88fa      	ldrh	r2, [r7, #6]
 800580a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005814:	d108      	bne.n	8005828 <HAL_UART_Transmit+0x82>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d104      	bne.n	8005828 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800581e:	2300      	movs	r3, #0
 8005820:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	61bb      	str	r3, [r7, #24]
 8005826:	e003      	b.n	8005830 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800582c:	2300      	movs	r3, #0
 800582e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005838:	e02a      	b.n	8005890 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2200      	movs	r2, #0
 8005842:	2180      	movs	r1, #128	; 0x80
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 f840 	bl	80058ca <UART_WaitOnFlagUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e036      	b.n	80058c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10b      	bne.n	8005872 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005868:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	3302      	adds	r3, #2
 800586e:	61bb      	str	r3, [r7, #24]
 8005870:	e007      	b.n	8005882 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	781a      	ldrb	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	3301      	adds	r3, #1
 8005880:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005886:	b29b      	uxth	r3, r3
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1cf      	bne.n	800583a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2200      	movs	r2, #0
 80058a2:	2140      	movs	r1, #64	; 0x40
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 f810 	bl	80058ca <UART_WaitOnFlagUntilTimeout>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e006      	b.n	80058c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	e000      	b.n	80058c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80058c0:	2302      	movs	r3, #2
  }
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3720      	adds	r7, #32
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b090      	sub	sp, #64	; 0x40
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	603b      	str	r3, [r7, #0]
 80058d6:	4613      	mov	r3, r2
 80058d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058da:	e050      	b.n	800597e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e2:	d04c      	beq.n	800597e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d007      	beq.n	80058fa <UART_WaitOnFlagUntilTimeout+0x30>
 80058ea:	f7fb fdcb 	bl	8001484 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d241      	bcs.n	800597e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	330c      	adds	r3, #12
 8005900:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005904:	e853 3f00 	ldrex	r3, [r3]
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	330c      	adds	r3, #12
 8005918:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800591a:	637a      	str	r2, [r7, #52]	; 0x34
 800591c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005922:	e841 2300 	strex	r3, r2, [r1]
 8005926:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1e5      	bne.n	80058fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3314      	adds	r3, #20
 8005934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	e853 3f00 	ldrex	r3, [r3]
 800593c:	613b      	str	r3, [r7, #16]
   return(result);
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f023 0301 	bic.w	r3, r3, #1
 8005944:	63bb      	str	r3, [r7, #56]	; 0x38
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3314      	adds	r3, #20
 800594c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800594e:	623a      	str	r2, [r7, #32]
 8005950:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	69f9      	ldr	r1, [r7, #28]
 8005954:	6a3a      	ldr	r2, [r7, #32]
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	61bb      	str	r3, [r7, #24]
   return(result);
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e5      	bne.n	800592e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2220      	movs	r2, #32
 8005966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2220      	movs	r2, #32
 800596e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e00f      	b.n	800599e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	4013      	ands	r3, r2
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	429a      	cmp	r2, r3
 800598c:	bf0c      	ite	eq
 800598e:	2301      	moveq	r3, #1
 8005990:	2300      	movne	r3, #0
 8005992:	b2db      	uxtb	r3, r3
 8005994:	461a      	mov	r2, r3
 8005996:	79fb      	ldrb	r3, [r7, #7]
 8005998:	429a      	cmp	r2, r3
 800599a:	d09f      	beq.n	80058dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3740      	adds	r7, #64	; 0x40
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
	...

080059a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ac:	b09f      	sub	sp, #124	; 0x7c
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059be:	68d9      	ldr	r1, [r3, #12]
 80059c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	ea40 0301 	orr.w	r3, r0, r1
 80059c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	431a      	orrs	r2, r3
 80059da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	4313      	orrs	r3, r2
 80059e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80059e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059ec:	f021 010c 	bic.w	r1, r1, #12
 80059f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059f6:	430b      	orrs	r3, r1
 80059f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a06:	6999      	ldr	r1, [r3, #24]
 8005a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	ea40 0301 	orr.w	r3, r0, r1
 8005a10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	4bc5      	ldr	r3, [pc, #788]	; (8005d2c <UART_SetConfig+0x384>)
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d004      	beq.n	8005a26 <UART_SetConfig+0x7e>
 8005a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	4bc3      	ldr	r3, [pc, #780]	; (8005d30 <UART_SetConfig+0x388>)
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d103      	bne.n	8005a2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a26:	f7fe fdd7 	bl	80045d8 <HAL_RCC_GetPCLK2Freq>
 8005a2a:	6778      	str	r0, [r7, #116]	; 0x74
 8005a2c:	e002      	b.n	8005a34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a2e:	f7fe fdbf 	bl	80045b0 <HAL_RCC_GetPCLK1Freq>
 8005a32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a3c:	f040 80b6 	bne.w	8005bac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a42:	461c      	mov	r4, r3
 8005a44:	f04f 0500 	mov.w	r5, #0
 8005a48:	4622      	mov	r2, r4
 8005a4a:	462b      	mov	r3, r5
 8005a4c:	1891      	adds	r1, r2, r2
 8005a4e:	6439      	str	r1, [r7, #64]	; 0x40
 8005a50:	415b      	adcs	r3, r3
 8005a52:	647b      	str	r3, [r7, #68]	; 0x44
 8005a54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a58:	1912      	adds	r2, r2, r4
 8005a5a:	eb45 0303 	adc.w	r3, r5, r3
 8005a5e:	f04f 0000 	mov.w	r0, #0
 8005a62:	f04f 0100 	mov.w	r1, #0
 8005a66:	00d9      	lsls	r1, r3, #3
 8005a68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a6c:	00d0      	lsls	r0, r2, #3
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	1911      	adds	r1, r2, r4
 8005a74:	6639      	str	r1, [r7, #96]	; 0x60
 8005a76:	416b      	adcs	r3, r5
 8005a78:	667b      	str	r3, [r7, #100]	; 0x64
 8005a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f04f 0300 	mov.w	r3, #0
 8005a84:	1891      	adds	r1, r2, r2
 8005a86:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a88:	415b      	adcs	r3, r3
 8005a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005a94:	f7fa fbec 	bl	8000270 <__aeabi_uldivmod>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4ba5      	ldr	r3, [pc, #660]	; (8005d34 <UART_SetConfig+0x38c>)
 8005a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	011e      	lsls	r6, r3, #4
 8005aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aa8:	461c      	mov	r4, r3
 8005aaa:	f04f 0500 	mov.w	r5, #0
 8005aae:	4622      	mov	r2, r4
 8005ab0:	462b      	mov	r3, r5
 8005ab2:	1891      	adds	r1, r2, r2
 8005ab4:	6339      	str	r1, [r7, #48]	; 0x30
 8005ab6:	415b      	adcs	r3, r3
 8005ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005abe:	1912      	adds	r2, r2, r4
 8005ac0:	eb45 0303 	adc.w	r3, r5, r3
 8005ac4:	f04f 0000 	mov.w	r0, #0
 8005ac8:	f04f 0100 	mov.w	r1, #0
 8005acc:	00d9      	lsls	r1, r3, #3
 8005ace:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ad2:	00d0      	lsls	r0, r2, #3
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	1911      	adds	r1, r2, r4
 8005ada:	65b9      	str	r1, [r7, #88]	; 0x58
 8005adc:	416b      	adcs	r3, r5
 8005ade:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	f04f 0300 	mov.w	r3, #0
 8005aea:	1891      	adds	r1, r2, r2
 8005aec:	62b9      	str	r1, [r7, #40]	; 0x28
 8005aee:	415b      	adcs	r3, r3
 8005af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005af2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005af6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005afa:	f7fa fbb9 	bl	8000270 <__aeabi_uldivmod>
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	4b8c      	ldr	r3, [pc, #560]	; (8005d34 <UART_SetConfig+0x38c>)
 8005b04:	fba3 1302 	umull	r1, r3, r3, r2
 8005b08:	095b      	lsrs	r3, r3, #5
 8005b0a:	2164      	movs	r1, #100	; 0x64
 8005b0c:	fb01 f303 	mul.w	r3, r1, r3
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	3332      	adds	r3, #50	; 0x32
 8005b16:	4a87      	ldr	r2, [pc, #540]	; (8005d34 <UART_SetConfig+0x38c>)
 8005b18:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1c:	095b      	lsrs	r3, r3, #5
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b24:	441e      	add	r6, r3
 8005b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f04f 0100 	mov.w	r1, #0
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	1894      	adds	r4, r2, r2
 8005b34:	623c      	str	r4, [r7, #32]
 8005b36:	415b      	adcs	r3, r3
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24
 8005b3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b3e:	1812      	adds	r2, r2, r0
 8005b40:	eb41 0303 	adc.w	r3, r1, r3
 8005b44:	f04f 0400 	mov.w	r4, #0
 8005b48:	f04f 0500 	mov.w	r5, #0
 8005b4c:	00dd      	lsls	r5, r3, #3
 8005b4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b52:	00d4      	lsls	r4, r2, #3
 8005b54:	4622      	mov	r2, r4
 8005b56:	462b      	mov	r3, r5
 8005b58:	1814      	adds	r4, r2, r0
 8005b5a:	653c      	str	r4, [r7, #80]	; 0x50
 8005b5c:	414b      	adcs	r3, r1
 8005b5e:	657b      	str	r3, [r7, #84]	; 0x54
 8005b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	461a      	mov	r2, r3
 8005b66:	f04f 0300 	mov.w	r3, #0
 8005b6a:	1891      	adds	r1, r2, r2
 8005b6c:	61b9      	str	r1, [r7, #24]
 8005b6e:	415b      	adcs	r3, r3
 8005b70:	61fb      	str	r3, [r7, #28]
 8005b72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005b7a:	f7fa fb79 	bl	8000270 <__aeabi_uldivmod>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4b6c      	ldr	r3, [pc, #432]	; (8005d34 <UART_SetConfig+0x38c>)
 8005b84:	fba3 1302 	umull	r1, r3, r3, r2
 8005b88:	095b      	lsrs	r3, r3, #5
 8005b8a:	2164      	movs	r1, #100	; 0x64
 8005b8c:	fb01 f303 	mul.w	r3, r1, r3
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	3332      	adds	r3, #50	; 0x32
 8005b96:	4a67      	ldr	r2, [pc, #412]	; (8005d34 <UART_SetConfig+0x38c>)
 8005b98:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9c:	095b      	lsrs	r3, r3, #5
 8005b9e:	f003 0207 	and.w	r2, r3, #7
 8005ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4432      	add	r2, r6
 8005ba8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005baa:	e0b9      	b.n	8005d20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bae:	461c      	mov	r4, r3
 8005bb0:	f04f 0500 	mov.w	r5, #0
 8005bb4:	4622      	mov	r2, r4
 8005bb6:	462b      	mov	r3, r5
 8005bb8:	1891      	adds	r1, r2, r2
 8005bba:	6139      	str	r1, [r7, #16]
 8005bbc:	415b      	adcs	r3, r3
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005bc4:	1912      	adds	r2, r2, r4
 8005bc6:	eb45 0303 	adc.w	r3, r5, r3
 8005bca:	f04f 0000 	mov.w	r0, #0
 8005bce:	f04f 0100 	mov.w	r1, #0
 8005bd2:	00d9      	lsls	r1, r3, #3
 8005bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bd8:	00d0      	lsls	r0, r2, #3
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	eb12 0804 	adds.w	r8, r2, r4
 8005be2:	eb43 0905 	adc.w	r9, r3, r5
 8005be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f04f 0100 	mov.w	r1, #0
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	f04f 0300 	mov.w	r3, #0
 8005bf8:	008b      	lsls	r3, r1, #2
 8005bfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005bfe:	0082      	lsls	r2, r0, #2
 8005c00:	4640      	mov	r0, r8
 8005c02:	4649      	mov	r1, r9
 8005c04:	f7fa fb34 	bl	8000270 <__aeabi_uldivmod>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	4b49      	ldr	r3, [pc, #292]	; (8005d34 <UART_SetConfig+0x38c>)
 8005c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c12:	095b      	lsrs	r3, r3, #5
 8005c14:	011e      	lsls	r6, r3, #4
 8005c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f04f 0100 	mov.w	r1, #0
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	1894      	adds	r4, r2, r2
 8005c24:	60bc      	str	r4, [r7, #8]
 8005c26:	415b      	adcs	r3, r3
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c2e:	1812      	adds	r2, r2, r0
 8005c30:	eb41 0303 	adc.w	r3, r1, r3
 8005c34:	f04f 0400 	mov.w	r4, #0
 8005c38:	f04f 0500 	mov.w	r5, #0
 8005c3c:	00dd      	lsls	r5, r3, #3
 8005c3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c42:	00d4      	lsls	r4, r2, #3
 8005c44:	4622      	mov	r2, r4
 8005c46:	462b      	mov	r3, r5
 8005c48:	1814      	adds	r4, r2, r0
 8005c4a:	64bc      	str	r4, [r7, #72]	; 0x48
 8005c4c:	414b      	adcs	r3, r1
 8005c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f04f 0100 	mov.w	r1, #0
 8005c5a:	f04f 0200 	mov.w	r2, #0
 8005c5e:	f04f 0300 	mov.w	r3, #0
 8005c62:	008b      	lsls	r3, r1, #2
 8005c64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c68:	0082      	lsls	r2, r0, #2
 8005c6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005c6e:	f7fa faff 	bl	8000270 <__aeabi_uldivmod>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4b2f      	ldr	r3, [pc, #188]	; (8005d34 <UART_SetConfig+0x38c>)
 8005c78:	fba3 1302 	umull	r1, r3, r3, r2
 8005c7c:	095b      	lsrs	r3, r3, #5
 8005c7e:	2164      	movs	r1, #100	; 0x64
 8005c80:	fb01 f303 	mul.w	r3, r1, r3
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	3332      	adds	r3, #50	; 0x32
 8005c8a:	4a2a      	ldr	r2, [pc, #168]	; (8005d34 <UART_SetConfig+0x38c>)
 8005c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c90:	095b      	lsrs	r3, r3, #5
 8005c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c96:	441e      	add	r6, r3
 8005c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f04f 0100 	mov.w	r1, #0
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	1894      	adds	r4, r2, r2
 8005ca6:	603c      	str	r4, [r7, #0]
 8005ca8:	415b      	adcs	r3, r3
 8005caa:	607b      	str	r3, [r7, #4]
 8005cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cb0:	1812      	adds	r2, r2, r0
 8005cb2:	eb41 0303 	adc.w	r3, r1, r3
 8005cb6:	f04f 0400 	mov.w	r4, #0
 8005cba:	f04f 0500 	mov.w	r5, #0
 8005cbe:	00dd      	lsls	r5, r3, #3
 8005cc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005cc4:	00d4      	lsls	r4, r2, #3
 8005cc6:	4622      	mov	r2, r4
 8005cc8:	462b      	mov	r3, r5
 8005cca:	eb12 0a00 	adds.w	sl, r2, r0
 8005cce:	eb43 0b01 	adc.w	fp, r3, r1
 8005cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f04f 0100 	mov.w	r1, #0
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	f04f 0300 	mov.w	r3, #0
 8005ce4:	008b      	lsls	r3, r1, #2
 8005ce6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005cea:	0082      	lsls	r2, r0, #2
 8005cec:	4650      	mov	r0, sl
 8005cee:	4659      	mov	r1, fp
 8005cf0:	f7fa fabe 	bl	8000270 <__aeabi_uldivmod>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4b0e      	ldr	r3, [pc, #56]	; (8005d34 <UART_SetConfig+0x38c>)
 8005cfa:	fba3 1302 	umull	r1, r3, r3, r2
 8005cfe:	095b      	lsrs	r3, r3, #5
 8005d00:	2164      	movs	r1, #100	; 0x64
 8005d02:	fb01 f303 	mul.w	r3, r1, r3
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	3332      	adds	r3, #50	; 0x32
 8005d0c:	4a09      	ldr	r2, [pc, #36]	; (8005d34 <UART_SetConfig+0x38c>)
 8005d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d12:	095b      	lsrs	r3, r3, #5
 8005d14:	f003 020f 	and.w	r2, r3, #15
 8005d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4432      	add	r2, r6
 8005d1e:	609a      	str	r2, [r3, #8]
}
 8005d20:	bf00      	nop
 8005d22:	377c      	adds	r7, #124	; 0x7c
 8005d24:	46bd      	mov	sp, r7
 8005d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d2a:	bf00      	nop
 8005d2c:	40011000 	.word	0x40011000
 8005d30:	40011400 	.word	0x40011400
 8005d34:	51eb851f 	.word	0x51eb851f

08005d38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d38:	b084      	sub	sp, #16
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b084      	sub	sp, #16
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	f107 001c 	add.w	r0, r7, #28
 8005d46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d122      	bne.n	8005d96 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d105      	bne.n	8005d8a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f001 fb1c 	bl	80073c8 <USB_CoreReset>
 8005d90:	4603      	mov	r3, r0
 8005d92:	73fb      	strb	r3, [r7, #15]
 8005d94:	e01a      	b.n	8005dcc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f001 fb10 	bl	80073c8 <USB_CoreReset>
 8005da8:	4603      	mov	r3, r0
 8005daa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d106      	bne.n	8005dc0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	639a      	str	r2, [r3, #56]	; 0x38
 8005dbe:	e005      	b.n	8005dcc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d10b      	bne.n	8005dea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f043 0206 	orr.w	r2, r3, #6
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f043 0220 	orr.w	r2, r3, #32
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005df6:	b004      	add	sp, #16
 8005df8:	4770      	bx	lr
	...

08005dfc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	4613      	mov	r3, r2
 8005e08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e0a:	79fb      	ldrb	r3, [r7, #7]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d165      	bne.n	8005edc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	4a41      	ldr	r2, [pc, #260]	; (8005f18 <USB_SetTurnaroundTime+0x11c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d906      	bls.n	8005e26 <USB_SetTurnaroundTime+0x2a>
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	4a40      	ldr	r2, [pc, #256]	; (8005f1c <USB_SetTurnaroundTime+0x120>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d202      	bcs.n	8005e26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e20:	230f      	movs	r3, #15
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	e062      	b.n	8005eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	4a3c      	ldr	r2, [pc, #240]	; (8005f1c <USB_SetTurnaroundTime+0x120>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d306      	bcc.n	8005e3c <USB_SetTurnaroundTime+0x40>
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	4a3b      	ldr	r2, [pc, #236]	; (8005f20 <USB_SetTurnaroundTime+0x124>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d202      	bcs.n	8005e3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e36:	230e      	movs	r3, #14
 8005e38:	617b      	str	r3, [r7, #20]
 8005e3a:	e057      	b.n	8005eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4a38      	ldr	r2, [pc, #224]	; (8005f20 <USB_SetTurnaroundTime+0x124>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d306      	bcc.n	8005e52 <USB_SetTurnaroundTime+0x56>
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4a37      	ldr	r2, [pc, #220]	; (8005f24 <USB_SetTurnaroundTime+0x128>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d202      	bcs.n	8005e52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005e4c:	230d      	movs	r3, #13
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	e04c      	b.n	8005eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	4a33      	ldr	r2, [pc, #204]	; (8005f24 <USB_SetTurnaroundTime+0x128>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d306      	bcc.n	8005e68 <USB_SetTurnaroundTime+0x6c>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	4a32      	ldr	r2, [pc, #200]	; (8005f28 <USB_SetTurnaroundTime+0x12c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d802      	bhi.n	8005e68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005e62:	230c      	movs	r3, #12
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	e041      	b.n	8005eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	4a2f      	ldr	r2, [pc, #188]	; (8005f28 <USB_SetTurnaroundTime+0x12c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d906      	bls.n	8005e7e <USB_SetTurnaroundTime+0x82>
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4a2e      	ldr	r2, [pc, #184]	; (8005f2c <USB_SetTurnaroundTime+0x130>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d802      	bhi.n	8005e7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005e78:	230b      	movs	r3, #11
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	e036      	b.n	8005eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	4a2a      	ldr	r2, [pc, #168]	; (8005f2c <USB_SetTurnaroundTime+0x130>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d906      	bls.n	8005e94 <USB_SetTurnaroundTime+0x98>
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	4a29      	ldr	r2, [pc, #164]	; (8005f30 <USB_SetTurnaroundTime+0x134>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d802      	bhi.n	8005e94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005e8e:	230a      	movs	r3, #10
 8005e90:	617b      	str	r3, [r7, #20]
 8005e92:	e02b      	b.n	8005eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4a26      	ldr	r2, [pc, #152]	; (8005f30 <USB_SetTurnaroundTime+0x134>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d906      	bls.n	8005eaa <USB_SetTurnaroundTime+0xae>
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4a25      	ldr	r2, [pc, #148]	; (8005f34 <USB_SetTurnaroundTime+0x138>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d202      	bcs.n	8005eaa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005ea4:	2309      	movs	r3, #9
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	e020      	b.n	8005eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	4a21      	ldr	r2, [pc, #132]	; (8005f34 <USB_SetTurnaroundTime+0x138>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d306      	bcc.n	8005ec0 <USB_SetTurnaroundTime+0xc4>
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	4a20      	ldr	r2, [pc, #128]	; (8005f38 <USB_SetTurnaroundTime+0x13c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d802      	bhi.n	8005ec0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005eba:	2308      	movs	r3, #8
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	e015      	b.n	8005eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	4a1d      	ldr	r2, [pc, #116]	; (8005f38 <USB_SetTurnaroundTime+0x13c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d906      	bls.n	8005ed6 <USB_SetTurnaroundTime+0xda>
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	4a1c      	ldr	r2, [pc, #112]	; (8005f3c <USB_SetTurnaroundTime+0x140>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d202      	bcs.n	8005ed6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005ed0:	2307      	movs	r3, #7
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	e00a      	b.n	8005eec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005ed6:	2306      	movs	r3, #6
 8005ed8:	617b      	str	r3, [r7, #20]
 8005eda:	e007      	b.n	8005eec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005edc:	79fb      	ldrb	r3, [r7, #7]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d102      	bne.n	8005ee8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005ee2:	2309      	movs	r3, #9
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	e001      	b.n	8005eec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ee8:	2309      	movs	r3, #9
 8005eea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	029b      	lsls	r3, r3, #10
 8005f00:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005f04:	431a      	orrs	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	371c      	adds	r7, #28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	00d8acbf 	.word	0x00d8acbf
 8005f1c:	00e4e1c0 	.word	0x00e4e1c0
 8005f20:	00f42400 	.word	0x00f42400
 8005f24:	01067380 	.word	0x01067380
 8005f28:	011a499f 	.word	0x011a499f
 8005f2c:	01312cff 	.word	0x01312cff
 8005f30:	014ca43f 	.word	0x014ca43f
 8005f34:	016e3600 	.word	0x016e3600
 8005f38:	01a6ab1f 	.word	0x01a6ab1f
 8005f3c:	01e84800 	.word	0x01e84800

08005f40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f043 0201 	orr.w	r2, r3, #1
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f023 0201 	bic.w	r2, r3, #1
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d115      	bne.n	8005fd2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005fb2:	2001      	movs	r0, #1
 8005fb4:	f7fb fa72 	bl	800149c <HAL_Delay>
      ms++;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f001 f972 	bl	80072a8 <USB_GetMode>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d01e      	beq.n	8006008 <USB_SetCurrentMode+0x84>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b31      	cmp	r3, #49	; 0x31
 8005fce:	d9f0      	bls.n	8005fb2 <USB_SetCurrentMode+0x2e>
 8005fd0:	e01a      	b.n	8006008 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fd2:	78fb      	ldrb	r3, [r7, #3]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d115      	bne.n	8006004 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005fe4:	2001      	movs	r0, #1
 8005fe6:	f7fb fa59 	bl	800149c <HAL_Delay>
      ms++;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3301      	adds	r3, #1
 8005fee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f001 f959 	bl	80072a8 <USB_GetMode>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d005      	beq.n	8006008 <USB_SetCurrentMode+0x84>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b31      	cmp	r3, #49	; 0x31
 8006000:	d9f0      	bls.n	8005fe4 <USB_SetCurrentMode+0x60>
 8006002:	e001      	b.n	8006008 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e005      	b.n	8006014 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2b32      	cmp	r3, #50	; 0x32
 800600c:	d101      	bne.n	8006012 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e000      	b.n	8006014 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800601c:	b084      	sub	sp, #16
 800601e:	b580      	push	{r7, lr}
 8006020:	b086      	sub	sp, #24
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800602a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006036:	2300      	movs	r3, #0
 8006038:	613b      	str	r3, [r7, #16]
 800603a:	e009      	b.n	8006050 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	3340      	adds	r3, #64	; 0x40
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	2200      	movs	r2, #0
 8006048:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	3301      	adds	r3, #1
 800604e:	613b      	str	r3, [r7, #16]
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	2b0e      	cmp	r3, #14
 8006054:	d9f2      	bls.n	800603c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006058:	2b00      	cmp	r3, #0
 800605a:	d11c      	bne.n	8006096 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800606a:	f043 0302 	orr.w	r3, r3, #2
 800606e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006074:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006080:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	639a      	str	r2, [r3, #56]	; 0x38
 8006094:	e00b      	b.n	80060ae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060b4:	461a      	mov	r2, r3
 80060b6:	2300      	movs	r3, #0
 80060b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c0:	4619      	mov	r1, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c8:	461a      	mov	r2, r3
 80060ca:	680b      	ldr	r3, [r1, #0]
 80060cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d10c      	bne.n	80060ee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d104      	bne.n	80060e4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060da:	2100      	movs	r1, #0
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f945 	bl	800636c <USB_SetDevSpeed>
 80060e2:	e008      	b.n	80060f6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060e4:	2101      	movs	r1, #1
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f940 	bl	800636c <USB_SetDevSpeed>
 80060ec:	e003      	b.n	80060f6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060ee:	2103      	movs	r1, #3
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f93b 	bl	800636c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060f6:	2110      	movs	r1, #16
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f8f3 	bl	80062e4 <USB_FlushTxFifo>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f90f 	bl	800632c <USB_FlushRxFifo>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800611e:	461a      	mov	r2, r3
 8006120:	2300      	movs	r3, #0
 8006122:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612a:	461a      	mov	r2, r3
 800612c:	2300      	movs	r3, #0
 800612e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006136:	461a      	mov	r2, r3
 8006138:	2300      	movs	r3, #0
 800613a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800613c:	2300      	movs	r3, #0
 800613e:	613b      	str	r3, [r7, #16]
 8006140:	e043      	b.n	80061ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006154:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006158:	d118      	bne.n	800618c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616c:	461a      	mov	r2, r3
 800616e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	e013      	b.n	800619e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006182:	461a      	mov	r2, r3
 8006184:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006188:	6013      	str	r3, [r2, #0]
 800618a:	e008      	b.n	800619e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006198:	461a      	mov	r2, r3
 800619a:	2300      	movs	r3, #0
 800619c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061aa:	461a      	mov	r2, r3
 80061ac:	2300      	movs	r3, #0
 80061ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061bc:	461a      	mov	r2, r3
 80061be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	3301      	adds	r3, #1
 80061c8:	613b      	str	r3, [r7, #16]
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d3b7      	bcc.n	8006142 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061d2:	2300      	movs	r3, #0
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	e043      	b.n	8006260 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061ee:	d118      	bne.n	8006222 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10a      	bne.n	800620c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006202:	461a      	mov	r2, r3
 8006204:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	e013      	b.n	8006234 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006218:	461a      	mov	r2, r3
 800621a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	e008      	b.n	8006234 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622e:	461a      	mov	r2, r3
 8006230:	2300      	movs	r3, #0
 8006232:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006240:	461a      	mov	r2, r3
 8006242:	2300      	movs	r3, #0
 8006244:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4413      	add	r3, r2
 800624e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006252:	461a      	mov	r2, r3
 8006254:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006258:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	3301      	adds	r3, #1
 800625e:	613b      	str	r3, [r7, #16]
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	429a      	cmp	r2, r3
 8006266:	d3b7      	bcc.n	80061d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006276:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800627a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006288:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628c:	2b00      	cmp	r3, #0
 800628e:	d105      	bne.n	800629c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	f043 0210 	orr.w	r2, r3, #16
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	699a      	ldr	r2, [r3, #24]
 80062a0:	4b0f      	ldr	r3, [pc, #60]	; (80062e0 <USB_DevInit+0x2c4>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80062a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d005      	beq.n	80062ba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	f043 0208 	orr.w	r2, r3, #8
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80062ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d107      	bne.n	80062d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062c8:	f043 0304 	orr.w	r3, r3, #4
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3718      	adds	r7, #24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062dc:	b004      	add	sp, #16
 80062de:	4770      	bx	lr
 80062e0:	803c3800 	.word	0x803c3800

080062e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	019b      	lsls	r3, r3, #6
 80062f6:	f043 0220 	orr.w	r2, r3, #32
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	3301      	adds	r3, #1
 8006302:	60fb      	str	r3, [r7, #12]
 8006304:	4a08      	ldr	r2, [pc, #32]	; (8006328 <USB_FlushTxFifo+0x44>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d901      	bls.n	800630e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e006      	b.n	800631c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f003 0320 	and.w	r3, r3, #32
 8006316:	2b20      	cmp	r3, #32
 8006318:	d0f1      	beq.n	80062fe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3714      	adds	r7, #20
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr
 8006328:	00030d40 	.word	0x00030d40

0800632c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2210      	movs	r2, #16
 800633c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	3301      	adds	r3, #1
 8006342:	60fb      	str	r3, [r7, #12]
 8006344:	4a08      	ldr	r2, [pc, #32]	; (8006368 <USB_FlushRxFifo+0x3c>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d901      	bls.n	800634e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e006      	b.n	800635c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f003 0310 	and.w	r3, r3, #16
 8006356:	2b10      	cmp	r3, #16
 8006358:	d0f1      	beq.n	800633e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	00030d40 	.word	0x00030d40

0800636c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	68f9      	ldr	r1, [r7, #12]
 8006388:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800638c:	4313      	orrs	r3, r2
 800638e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800639e:	b480      	push	{r7}
 80063a0:	b087      	sub	sp, #28
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 0306 	and.w	r3, r3, #6
 80063b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d102      	bne.n	80063c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80063be:	2300      	movs	r3, #0
 80063c0:	75fb      	strb	r3, [r7, #23]
 80063c2:	e00a      	b.n	80063da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d002      	beq.n	80063d0 <USB_GetDevSpeed+0x32>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2b06      	cmp	r3, #6
 80063ce:	d102      	bne.n	80063d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80063d0:	2302      	movs	r3, #2
 80063d2:	75fb      	strb	r3, [r7, #23]
 80063d4:	e001      	b.n	80063da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80063d6:	230f      	movs	r3, #15
 80063d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80063da:	7dfb      	ldrb	r3, [r7, #23]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	371c      	adds	r7, #28
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	785b      	ldrb	r3, [r3, #1]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d13a      	bne.n	800647a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640a:	69da      	ldr	r2, [r3, #28]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	f003 030f 	and.w	r3, r3, #15
 8006414:	2101      	movs	r1, #1
 8006416:	fa01 f303 	lsl.w	r3, r1, r3
 800641a:	b29b      	uxth	r3, r3
 800641c:	68f9      	ldr	r1, [r7, #12]
 800641e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006422:	4313      	orrs	r3, r2
 8006424:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4413      	add	r3, r2
 800642e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d155      	bne.n	80064e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	78db      	ldrb	r3, [r3, #3]
 8006456:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006458:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	059b      	lsls	r3, r3, #22
 800645e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006460:	4313      	orrs	r3, r2
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	0151      	lsls	r1, r2, #5
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	440a      	add	r2, r1
 800646a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800646e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	e036      	b.n	80064e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006480:	69da      	ldr	r2, [r3, #28]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	f003 030f 	and.w	r3, r3, #15
 800648a:	2101      	movs	r1, #1
 800648c:	fa01 f303 	lsl.w	r3, r1, r3
 8006490:	041b      	lsls	r3, r3, #16
 8006492:	68f9      	ldr	r1, [r7, #12]
 8006494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006498:	4313      	orrs	r3, r2
 800649a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d11a      	bne.n	80064e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	78db      	ldrb	r3, [r3, #3]
 80064cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064ce:	430b      	orrs	r3, r1
 80064d0:	4313      	orrs	r3, r2
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	0151      	lsls	r1, r2, #5
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	440a      	add	r2, r1
 80064da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
	...

080064f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	785b      	ldrb	r3, [r3, #1]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d161      	bne.n	80065d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006526:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800652a:	d11f      	bne.n	800656c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	0151      	lsls	r1, r2, #5
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	440a      	add	r2, r1
 8006542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006546:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800654a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	0151      	lsls	r1, r2, #5
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	440a      	add	r2, r1
 8006562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006566:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800656a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	f003 030f 	and.w	r3, r3, #15
 800657c:	2101      	movs	r1, #1
 800657e:	fa01 f303 	lsl.w	r3, r1, r3
 8006582:	b29b      	uxth	r3, r3
 8006584:	43db      	mvns	r3, r3
 8006586:	68f9      	ldr	r1, [r7, #12]
 8006588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800658c:	4013      	ands	r3, r2
 800658e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006596:	69da      	ldr	r2, [r3, #28]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	f003 030f 	and.w	r3, r3, #15
 80065a0:	2101      	movs	r1, #1
 80065a2:	fa01 f303 	lsl.w	r3, r1, r3
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	43db      	mvns	r3, r3
 80065aa:	68f9      	ldr	r1, [r7, #12]
 80065ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065b0:	4013      	ands	r3, r2
 80065b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	0159      	lsls	r1, r3, #5
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	440b      	add	r3, r1
 80065ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ce:	4619      	mov	r1, r3
 80065d0:	4b35      	ldr	r3, [pc, #212]	; (80066a8 <USB_DeactivateEndpoint+0x1b0>)
 80065d2:	4013      	ands	r3, r2
 80065d4:	600b      	str	r3, [r1, #0]
 80065d6:	e060      	b.n	800669a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065ee:	d11f      	bne.n	8006630 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	0151      	lsls	r1, r2, #5
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	440a      	add	r2, r1
 8006606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800660a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800660e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	0151      	lsls	r1, r2, #5
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	440a      	add	r2, r1
 8006626:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800662a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800662e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	f003 030f 	and.w	r3, r3, #15
 8006640:	2101      	movs	r1, #1
 8006642:	fa01 f303 	lsl.w	r3, r1, r3
 8006646:	041b      	lsls	r3, r3, #16
 8006648:	43db      	mvns	r3, r3
 800664a:	68f9      	ldr	r1, [r7, #12]
 800664c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006650:	4013      	ands	r3, r2
 8006652:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665a:	69da      	ldr	r2, [r3, #28]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	f003 030f 	and.w	r3, r3, #15
 8006664:	2101      	movs	r1, #1
 8006666:	fa01 f303 	lsl.w	r3, r1, r3
 800666a:	041b      	lsls	r3, r3, #16
 800666c:	43db      	mvns	r3, r3
 800666e:	68f9      	ldr	r1, [r7, #12]
 8006670:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006674:	4013      	ands	r3, r2
 8006676:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4413      	add	r3, r2
 8006680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	0159      	lsls	r1, r3, #5
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	440b      	add	r3, r1
 800668e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006692:	4619      	mov	r1, r3
 8006694:	4b05      	ldr	r3, [pc, #20]	; (80066ac <USB_DeactivateEndpoint+0x1b4>)
 8006696:	4013      	ands	r3, r2
 8006698:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	ec337800 	.word	0xec337800
 80066ac:	eff37800 	.word	0xeff37800

080066b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08a      	sub	sp, #40	; 0x28
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	4613      	mov	r3, r2
 80066bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	785b      	ldrb	r3, [r3, #1]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	f040 815c 	bne.w	800698a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d132      	bne.n	8006740 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	0151      	lsls	r1, r2, #5
 80066ec:	69fa      	ldr	r2, [r7, #28]
 80066ee:	440a      	add	r2, r1
 80066f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	4413      	add	r3, r2
 8006706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	0151      	lsls	r1, r2, #5
 8006710:	69fa      	ldr	r2, [r7, #28]
 8006712:	440a      	add	r2, r1
 8006714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006718:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800671c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	0151      	lsls	r1, r2, #5
 8006730:	69fa      	ldr	r2, [r7, #28]
 8006732:	440a      	add	r2, r1
 8006734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006738:	0cdb      	lsrs	r3, r3, #19
 800673a:	04db      	lsls	r3, r3, #19
 800673c:	6113      	str	r3, [r2, #16]
 800673e:	e074      	b.n	800682a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	69ba      	ldr	r2, [r7, #24]
 8006750:	0151      	lsls	r1, r2, #5
 8006752:	69fa      	ldr	r2, [r7, #28]
 8006754:	440a      	add	r2, r1
 8006756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800675a:	0cdb      	lsrs	r3, r3, #19
 800675c:	04db      	lsls	r3, r3, #19
 800675e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	4413      	add	r3, r2
 8006768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	0151      	lsls	r1, r2, #5
 8006772:	69fa      	ldr	r2, [r7, #28]
 8006774:	440a      	add	r2, r1
 8006776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800677a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800677e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006782:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006790:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	6959      	ldr	r1, [r3, #20]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	440b      	add	r3, r1
 800679c:	1e59      	subs	r1, r3, #1
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80067a6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80067a8:	4b9d      	ldr	r3, [pc, #628]	; (8006a20 <USB_EPStartXfer+0x370>)
 80067aa:	400b      	ands	r3, r1
 80067ac:	69b9      	ldr	r1, [r7, #24]
 80067ae:	0148      	lsls	r0, r1, #5
 80067b0:	69f9      	ldr	r1, [r7, #28]
 80067b2:	4401      	add	r1, r0
 80067b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067b8:	4313      	orrs	r3, r2
 80067ba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c8:	691a      	ldr	r2, [r3, #16]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067d2:	69b9      	ldr	r1, [r7, #24]
 80067d4:	0148      	lsls	r0, r1, #5
 80067d6:	69f9      	ldr	r1, [r7, #28]
 80067d8:	4401      	add	r1, r0
 80067da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067de:	4313      	orrs	r3, r2
 80067e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	78db      	ldrb	r3, [r3, #3]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d11f      	bne.n	800682a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	0151      	lsls	r1, r2, #5
 80067fc:	69fa      	ldr	r2, [r7, #28]
 80067fe:	440a      	add	r2, r1
 8006800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006804:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006808:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	0151      	lsls	r1, r2, #5
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	440a      	add	r2, r1
 8006820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006824:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006828:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800682a:	79fb      	ldrb	r3, [r7, #7]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d14b      	bne.n	80068c8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d009      	beq.n	800684c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006844:	461a      	mov	r2, r3
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	78db      	ldrb	r3, [r3, #3]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d128      	bne.n	80068a6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006860:	2b00      	cmp	r3, #0
 8006862:	d110      	bne.n	8006886 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	0151      	lsls	r1, r2, #5
 8006876:	69fa      	ldr	r2, [r7, #28]
 8006878:	440a      	add	r2, r1
 800687a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800687e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	e00f      	b.n	80068a6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	0151      	lsls	r1, r2, #5
 8006898:	69fa      	ldr	r2, [r7, #28]
 800689a:	440a      	add	r2, r1
 800689c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	69ba      	ldr	r2, [r7, #24]
 80068b6:	0151      	lsls	r1, r2, #5
 80068b8:	69fa      	ldr	r2, [r7, #28]
 80068ba:	440a      	add	r2, r1
 80068bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	e12f      	b.n	8006b28 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	0151      	lsls	r1, r2, #5
 80068da:	69fa      	ldr	r2, [r7, #28]
 80068dc:	440a      	add	r2, r1
 80068de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	78db      	ldrb	r3, [r3, #3]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d015      	beq.n	800691c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 8117 	beq.w	8006b28 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	f003 030f 	and.w	r3, r3, #15
 800690a:	2101      	movs	r1, #1
 800690c:	fa01 f303 	lsl.w	r3, r1, r3
 8006910:	69f9      	ldr	r1, [r7, #28]
 8006912:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006916:	4313      	orrs	r3, r2
 8006918:	634b      	str	r3, [r1, #52]	; 0x34
 800691a:	e105      	b.n	8006b28 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006928:	2b00      	cmp	r3, #0
 800692a:	d110      	bne.n	800694e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	0151      	lsls	r1, r2, #5
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	440a      	add	r2, r1
 8006942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006946:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800694a:	6013      	str	r3, [r2, #0]
 800694c:	e00f      	b.n	800696e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	4413      	add	r3, r2
 8006956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	0151      	lsls	r1, r2, #5
 8006960:	69fa      	ldr	r2, [r7, #28]
 8006962:	440a      	add	r2, r1
 8006964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800696c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	68d9      	ldr	r1, [r3, #12]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	781a      	ldrb	r2, [r3, #0]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	b298      	uxth	r0, r3
 800697c:	79fb      	ldrb	r3, [r7, #7]
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	4603      	mov	r3, r0
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 fa2b 	bl	8006dde <USB_WritePacket>
 8006988:	e0ce      	b.n	8006b28 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	4413      	add	r3, r2
 8006992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	0151      	lsls	r1, r2, #5
 800699c:	69fa      	ldr	r2, [r7, #28]
 800699e:	440a      	add	r2, r1
 80069a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069a4:	0cdb      	lsrs	r3, r3, #19
 80069a6:	04db      	lsls	r3, r3, #19
 80069a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	0151      	lsls	r1, r2, #5
 80069bc:	69fa      	ldr	r2, [r7, #28]
 80069be:	440a      	add	r2, r1
 80069c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d126      	bne.n	8006a24 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e2:	691a      	ldr	r2, [r3, #16]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ec:	69b9      	ldr	r1, [r7, #24]
 80069ee:	0148      	lsls	r0, r1, #5
 80069f0:	69f9      	ldr	r1, [r7, #28]
 80069f2:	4401      	add	r1, r0
 80069f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069f8:	4313      	orrs	r3, r2
 80069fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	0151      	lsls	r1, r2, #5
 8006a0e:	69fa      	ldr	r2, [r7, #28]
 8006a10:	440a      	add	r2, r1
 8006a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a1a:	6113      	str	r3, [r2, #16]
 8006a1c:	e036      	b.n	8006a8c <USB_EPStartXfer+0x3dc>
 8006a1e:	bf00      	nop
 8006a20:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	695a      	ldr	r2, [r3, #20]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	1e5a      	subs	r2, r3, #1
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a38:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a46:	691a      	ldr	r2, [r3, #16]
 8006a48:	8afb      	ldrh	r3, [r7, #22]
 8006a4a:	04d9      	lsls	r1, r3, #19
 8006a4c:	4b39      	ldr	r3, [pc, #228]	; (8006b34 <USB_EPStartXfer+0x484>)
 8006a4e:	400b      	ands	r3, r1
 8006a50:	69b9      	ldr	r1, [r7, #24]
 8006a52:	0148      	lsls	r0, r1, #5
 8006a54:	69f9      	ldr	r1, [r7, #28]
 8006a56:	4401      	add	r1, r0
 8006a58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6c:	691a      	ldr	r2, [r3, #16]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	8af9      	ldrh	r1, [r7, #22]
 8006a74:	fb01 f303 	mul.w	r3, r1, r3
 8006a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a7c:	69b9      	ldr	r1, [r7, #24]
 8006a7e:	0148      	lsls	r0, r1, #5
 8006a80:	69f9      	ldr	r1, [r7, #28]
 8006a82:	4401      	add	r1, r0
 8006a84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a8c:	79fb      	ldrb	r3, [r7, #7]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d10d      	bne.n	8006aae <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d009      	beq.n	8006aae <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	68d9      	ldr	r1, [r3, #12]
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	015a      	lsls	r2, r3, #5
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aaa:	460a      	mov	r2, r1
 8006aac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	78db      	ldrb	r3, [r3, #3]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d128      	bne.n	8006b08 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d110      	bne.n	8006ae8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	0151      	lsls	r1, r2, #5
 8006ad8:	69fa      	ldr	r2, [r7, #28]
 8006ada:	440a      	add	r2, r1
 8006adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ae0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	e00f      	b.n	8006b08 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	015a      	lsls	r2, r3, #5
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	69ba      	ldr	r2, [r7, #24]
 8006af8:	0151      	lsls	r1, r2, #5
 8006afa:	69fa      	ldr	r2, [r7, #28]
 8006afc:	440a      	add	r2, r1
 8006afe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b06:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	0151      	lsls	r1, r2, #5
 8006b1a:	69fa      	ldr	r2, [r7, #28]
 8006b1c:	440a      	add	r2, r1
 8006b1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3720      	adds	r7, #32
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	1ff80000 	.word	0x1ff80000

08006b38 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	4613      	mov	r3, r2
 8006b44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	785b      	ldrb	r3, [r3, #1]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	f040 80cd 	bne.w	8006cf4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d132      	bne.n	8006bc8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	015a      	lsls	r2, r3, #5
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	0151      	lsls	r1, r2, #5
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	440a      	add	r2, r1
 8006b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	015a      	lsls	r2, r3, #5
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	0151      	lsls	r1, r2, #5
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	440a      	add	r2, r1
 8006b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ba4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	015a      	lsls	r2, r3, #5
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	4413      	add	r3, r2
 8006bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	0151      	lsls	r1, r2, #5
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	440a      	add	r2, r1
 8006bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bc0:	0cdb      	lsrs	r3, r3, #19
 8006bc2:	04db      	lsls	r3, r3, #19
 8006bc4:	6113      	str	r3, [r2, #16]
 8006bc6:	e04e      	b.n	8006c66 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	015a      	lsls	r2, r3, #5
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	4413      	add	r3, r2
 8006bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	0151      	lsls	r1, r2, #5
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	440a      	add	r2, r1
 8006bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be2:	0cdb      	lsrs	r3, r3, #19
 8006be4:	04db      	lsls	r3, r3, #19
 8006be6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	0151      	lsls	r1, r2, #5
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	440a      	add	r2, r1
 8006bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c0a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	695a      	ldr	r2, [r3, #20]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d903      	bls.n	8006c20 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	0151      	lsls	r1, r2, #5
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	440a      	add	r2, r1
 8006c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4c:	691a      	ldr	r2, [r3, #16]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c56:	6939      	ldr	r1, [r7, #16]
 8006c58:	0148      	lsls	r0, r1, #5
 8006c5a:	6979      	ldr	r1, [r7, #20]
 8006c5c:	4401      	add	r1, r0
 8006c5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c62:	4313      	orrs	r3, r2
 8006c64:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c66:	79fb      	ldrb	r3, [r7, #7]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d11e      	bne.n	8006caa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d009      	beq.n	8006c88 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c80:	461a      	mov	r2, r3
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	0151      	lsls	r1, r2, #5
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ca2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ca6:	6013      	str	r3, [r2, #0]
 8006ca8:	e092      	b.n	8006dd0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	0151      	lsls	r1, r2, #5
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	440a      	add	r2, r1
 8006cc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cc8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d07e      	beq.n	8006dd0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	f003 030f 	and.w	r3, r3, #15
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce8:	6979      	ldr	r1, [r7, #20]
 8006cea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	634b      	str	r3, [r1, #52]	; 0x34
 8006cf2:	e06d      	b.n	8006dd0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	0151      	lsls	r1, r2, #5
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	440a      	add	r2, r1
 8006d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d0e:	0cdb      	lsrs	r3, r3, #19
 8006d10:	04db      	lsls	r3, r3, #19
 8006d12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	0151      	lsls	r1, r2, #5
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	440a      	add	r2, r1
 8006d2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d36:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	0151      	lsls	r1, r2, #5
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	440a      	add	r2, r1
 8006d5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d74:	691a      	ldr	r2, [r3, #16]
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d7e:	6939      	ldr	r1, [r7, #16]
 8006d80:	0148      	lsls	r0, r1, #5
 8006d82:	6979      	ldr	r1, [r7, #20]
 8006d84:	4401      	add	r1, r0
 8006d86:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006d8e:	79fb      	ldrb	r3, [r7, #7]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d10d      	bne.n	8006db0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d009      	beq.n	8006db0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	68d9      	ldr	r1, [r3, #12]
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dac:	460a      	mov	r2, r1
 8006dae:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	0151      	lsls	r1, r2, #5
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	440a      	add	r2, r1
 8006dc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	371c      	adds	r7, #28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b089      	sub	sp, #36	; 0x24
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	60f8      	str	r0, [r7, #12]
 8006de6:	60b9      	str	r1, [r7, #8]
 8006de8:	4611      	mov	r1, r2
 8006dea:	461a      	mov	r2, r3
 8006dec:	460b      	mov	r3, r1
 8006dee:	71fb      	strb	r3, [r7, #7]
 8006df0:	4613      	mov	r3, r2
 8006df2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006dfc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d123      	bne.n	8006e4c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e04:	88bb      	ldrh	r3, [r7, #4]
 8006e06:	3303      	adds	r3, #3
 8006e08:	089b      	lsrs	r3, r3, #2
 8006e0a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	61bb      	str	r3, [r7, #24]
 8006e10:	e018      	b.n	8006e44 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e12:	79fb      	ldrb	r3, [r7, #7]
 8006e14:	031a      	lsls	r2, r3, #12
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e1e:	461a      	mov	r2, r3
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	3301      	adds	r3, #1
 8006e36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	3301      	adds	r3, #1
 8006e42:	61bb      	str	r3, [r7, #24]
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d3e2      	bcc.n	8006e12 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3724      	adds	r7, #36	; 0x24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b08b      	sub	sp, #44	; 0x2c
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	60f8      	str	r0, [r7, #12]
 8006e62:	60b9      	str	r1, [r7, #8]
 8006e64:	4613      	mov	r3, r2
 8006e66:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e70:	88fb      	ldrh	r3, [r7, #6]
 8006e72:	089b      	lsrs	r3, r3, #2
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e78:	88fb      	ldrh	r3, [r7, #6]
 8006e7a:	f003 0303 	and.w	r3, r3, #3
 8006e7e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e80:	2300      	movs	r3, #0
 8006e82:	623b      	str	r3, [r7, #32]
 8006e84:	e014      	b.n	8006eb0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	3301      	adds	r3, #1
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	3301      	adds	r3, #1
 8006eae:	623b      	str	r3, [r7, #32]
 8006eb0:	6a3a      	ldr	r2, [r7, #32]
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d3e6      	bcc.n	8006e86 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006eb8:	8bfb      	ldrh	r3, [r7, #30]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d01e      	beq.n	8006efc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ec8:	461a      	mov	r2, r3
 8006eca:	f107 0310 	add.w	r3, r7, #16
 8006ece:	6812      	ldr	r2, [r2, #0]
 8006ed0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	fa22 f303 	lsr.w	r3, r2, r3
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	701a      	strb	r2, [r3, #0]
      i++;
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	623b      	str	r3, [r7, #32]
      pDest++;
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	3301      	adds	r3, #1
 8006eee:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006ef0:	8bfb      	ldrh	r3, [r7, #30]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ef6:	8bfb      	ldrh	r3, [r7, #30]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1ea      	bne.n	8006ed2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	372c      	adds	r7, #44	; 0x2c
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b085      	sub	sp, #20
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	785b      	ldrb	r3, [r3, #1]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d12c      	bne.n	8006f80 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	db12      	blt.n	8006f5e <USB_EPSetStall+0x54>
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00f      	beq.n	8006f5e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	0151      	lsls	r1, r2, #5
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	440a      	add	r2, r1
 8006f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f5c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	0151      	lsls	r1, r2, #5
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	440a      	add	r2, r1
 8006f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	e02b      	b.n	8006fd8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	db12      	blt.n	8006fb8 <USB_EPSetStall+0xae>
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00f      	beq.n	8006fb8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	015a      	lsls	r2, r3, #5
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	0151      	lsls	r1, r2, #5
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	440a      	add	r2, r1
 8006fae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fb6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	0151      	lsls	r1, r2, #5
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	440a      	add	r2, r1
 8006fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006fd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b085      	sub	sp, #20
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	785b      	ldrb	r3, [r3, #1]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d128      	bne.n	8007054 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	0151      	lsls	r1, r2, #5
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	440a      	add	r2, r1
 8007018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800701c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007020:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	78db      	ldrb	r3, [r3, #3]
 8007026:	2b03      	cmp	r3, #3
 8007028:	d003      	beq.n	8007032 <USB_EPClearStall+0x4c>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	78db      	ldrb	r3, [r3, #3]
 800702e:	2b02      	cmp	r3, #2
 8007030:	d138      	bne.n	80070a4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	0151      	lsls	r1, r2, #5
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	440a      	add	r2, r1
 8007048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800704c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	e027      	b.n	80070a4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	0151      	lsls	r1, r2, #5
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	440a      	add	r2, r1
 800706a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800706e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007072:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	78db      	ldrb	r3, [r3, #3]
 8007078:	2b03      	cmp	r3, #3
 800707a:	d003      	beq.n	8007084 <USB_EPClearStall+0x9e>
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	78db      	ldrb	r3, [r3, #3]
 8007080:	2b02      	cmp	r3, #2
 8007082:	d10f      	bne.n	80070a4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4413      	add	r3, r2
 800708c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	0151      	lsls	r1, r2, #5
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	440a      	add	r2, r1
 800709a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800709e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070a2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b085      	sub	sp, #20
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	460b      	mov	r3, r1
 80070bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80070d4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	78fb      	ldrb	r3, [r7, #3]
 80070e0:	011b      	lsls	r3, r3, #4
 80070e2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80070e6:	68f9      	ldr	r1, [r7, #12]
 80070e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070ec:	4313      	orrs	r3, r2
 80070ee:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070fe:	b480      	push	{r7}
 8007100:	b085      	sub	sp, #20
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007118:	f023 0303 	bic.w	r3, r3, #3
 800711c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800712c:	f023 0302 	bic.w	r3, r3, #2
 8007130:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800715a:	f023 0303 	bic.w	r3, r3, #3
 800715e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800716e:	f043 0302 	orr.w	r3, r3, #2
 8007172:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007182:	b480      	push	{r7}
 8007184:	b085      	sub	sp, #20
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	4013      	ands	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800719a:	68fb      	ldr	r3, [r7, #12]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	4013      	ands	r3, r2
 80071ca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	0c1b      	lsrs	r3, r3, #16
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	4013      	ands	r3, r2
 80071fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	b29b      	uxth	r3, r3
}
 8007204:	4618      	mov	r0, r3
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	460b      	mov	r3, r1
 800721a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007220:	78fb      	ldrb	r3, [r7, #3]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	4013      	ands	r3, r2
 800723c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800723e:	68bb      	ldr	r3, [r7, #8]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800726c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800726e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	f003 030f 	and.w	r3, r3, #15
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	fa22 f303 	lsr.w	r3, r2, r3
 800727c:	01db      	lsls	r3, r3, #7
 800727e:	b2db      	uxtb	r3, r3
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	4313      	orrs	r3, r2
 8007284:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007286:	78fb      	ldrb	r3, [r7, #3]
 8007288:	015a      	lsls	r2, r3, #5
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	4413      	add	r3, r2
 800728e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4013      	ands	r3, r2
 8007298:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800729a:	68bb      	ldr	r3, [r7, #8]
}
 800729c:	4618      	mov	r0, r3
 800729e:	371c      	adds	r7, #28
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	f003 0301 	and.w	r3, r3, #1
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80072e2:	f023 0307 	bic.w	r3, r3, #7
 80072e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3714      	adds	r7, #20
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
	...

0800730c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800730c:	b480      	push	{r7}
 800730e:	b087      	sub	sp, #28
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	460b      	mov	r3, r1
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	333c      	adds	r3, #60	; 0x3c
 8007322:	3304      	adds	r3, #4
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	4a26      	ldr	r2, [pc, #152]	; (80073c4 <USB_EP0_OutStart+0xb8>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d90a      	bls.n	8007346 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800733c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007340:	d101      	bne.n	8007346 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	e037      	b.n	80073b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734c:	461a      	mov	r2, r3
 800734e:	2300      	movs	r3, #0
 8007350:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007360:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007364:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007374:	f043 0318 	orr.w	r3, r3, #24
 8007378:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007388:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800738c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800738e:	7afb      	ldrb	r3, [r7, #11]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d10f      	bne.n	80073b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800739a:	461a      	mov	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80073b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	371c      	adds	r7, #28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	4f54300a 	.word	0x4f54300a

080073c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073d0:	2300      	movs	r3, #0
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	3301      	adds	r3, #1
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	4a13      	ldr	r2, [pc, #76]	; (8007428 <USB_CoreReset+0x60>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d901      	bls.n	80073e4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e01a      	b.n	800741a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	daf3      	bge.n	80073d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80073ec:	2300      	movs	r3, #0
 80073ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	f043 0201 	orr.w	r2, r3, #1
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3301      	adds	r3, #1
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	4a09      	ldr	r2, [pc, #36]	; (8007428 <USB_CoreReset+0x60>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d901      	bls.n	800740c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e006      	b.n	800741a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	2b01      	cmp	r3, #1
 8007416:	d0f1      	beq.n	80073fc <USB_CoreReset+0x34>

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	00030d40 	.word	0x00030d40

0800742c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007432:	4b8c      	ldr	r3, [pc, #560]	; (8007664 <MX_LWIP_Init+0x238>)
 8007434:	22c0      	movs	r2, #192	; 0xc0
 8007436:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007438:	4b8a      	ldr	r3, [pc, #552]	; (8007664 <MX_LWIP_Init+0x238>)
 800743a:	22a8      	movs	r2, #168	; 0xa8
 800743c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800743e:	4b89      	ldr	r3, [pc, #548]	; (8007664 <MX_LWIP_Init+0x238>)
 8007440:	2200      	movs	r2, #0
 8007442:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 68;
 8007444:	4b87      	ldr	r3, [pc, #540]	; (8007664 <MX_LWIP_Init+0x238>)
 8007446:	2244      	movs	r2, #68	; 0x44
 8007448:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800744a:	4b87      	ldr	r3, [pc, #540]	; (8007668 <MX_LWIP_Init+0x23c>)
 800744c:	22ff      	movs	r2, #255	; 0xff
 800744e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007450:	4b85      	ldr	r3, [pc, #532]	; (8007668 <MX_LWIP_Init+0x23c>)
 8007452:	22ff      	movs	r2, #255	; 0xff
 8007454:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007456:	4b84      	ldr	r3, [pc, #528]	; (8007668 <MX_LWIP_Init+0x23c>)
 8007458:	22ff      	movs	r2, #255	; 0xff
 800745a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800745c:	4b82      	ldr	r3, [pc, #520]	; (8007668 <MX_LWIP_Init+0x23c>)
 800745e:	2200      	movs	r2, #0
 8007460:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007462:	4b82      	ldr	r3, [pc, #520]	; (800766c <MX_LWIP_Init+0x240>)
 8007464:	22c0      	movs	r2, #192	; 0xc0
 8007466:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007468:	4b80      	ldr	r3, [pc, #512]	; (800766c <MX_LWIP_Init+0x240>)
 800746a:	22a8      	movs	r2, #168	; 0xa8
 800746c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800746e:	4b7f      	ldr	r3, [pc, #508]	; (800766c <MX_LWIP_Init+0x240>)
 8007470:	2200      	movs	r2, #0
 8007472:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007474:	4b7d      	ldr	r3, [pc, #500]	; (800766c <MX_LWIP_Init+0x240>)
 8007476:	2201      	movs	r2, #1
 8007478:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800747a:	2100      	movs	r1, #0
 800747c:	2000      	movs	r0, #0
 800747e:	f005 f90d 	bl	800c69c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007482:	4b78      	ldr	r3, [pc, #480]	; (8007664 <MX_LWIP_Init+0x238>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	061a      	lsls	r2, r3, #24
 8007488:	4b76      	ldr	r3, [pc, #472]	; (8007664 <MX_LWIP_Init+0x238>)
 800748a:	785b      	ldrb	r3, [r3, #1]
 800748c:	041b      	lsls	r3, r3, #16
 800748e:	431a      	orrs	r2, r3
 8007490:	4b74      	ldr	r3, [pc, #464]	; (8007664 <MX_LWIP_Init+0x238>)
 8007492:	789b      	ldrb	r3, [r3, #2]
 8007494:	021b      	lsls	r3, r3, #8
 8007496:	4313      	orrs	r3, r2
 8007498:	4a72      	ldr	r2, [pc, #456]	; (8007664 <MX_LWIP_Init+0x238>)
 800749a:	78d2      	ldrb	r2, [r2, #3]
 800749c:	4313      	orrs	r3, r2
 800749e:	061a      	lsls	r2, r3, #24
 80074a0:	4b70      	ldr	r3, [pc, #448]	; (8007664 <MX_LWIP_Init+0x238>)
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	0619      	lsls	r1, r3, #24
 80074a6:	4b6f      	ldr	r3, [pc, #444]	; (8007664 <MX_LWIP_Init+0x238>)
 80074a8:	785b      	ldrb	r3, [r3, #1]
 80074aa:	041b      	lsls	r3, r3, #16
 80074ac:	4319      	orrs	r1, r3
 80074ae:	4b6d      	ldr	r3, [pc, #436]	; (8007664 <MX_LWIP_Init+0x238>)
 80074b0:	789b      	ldrb	r3, [r3, #2]
 80074b2:	021b      	lsls	r3, r3, #8
 80074b4:	430b      	orrs	r3, r1
 80074b6:	496b      	ldr	r1, [pc, #428]	; (8007664 <MX_LWIP_Init+0x238>)
 80074b8:	78c9      	ldrb	r1, [r1, #3]
 80074ba:	430b      	orrs	r3, r1
 80074bc:	021b      	lsls	r3, r3, #8
 80074be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074c2:	431a      	orrs	r2, r3
 80074c4:	4b67      	ldr	r3, [pc, #412]	; (8007664 <MX_LWIP_Init+0x238>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	0619      	lsls	r1, r3, #24
 80074ca:	4b66      	ldr	r3, [pc, #408]	; (8007664 <MX_LWIP_Init+0x238>)
 80074cc:	785b      	ldrb	r3, [r3, #1]
 80074ce:	041b      	lsls	r3, r3, #16
 80074d0:	4319      	orrs	r1, r3
 80074d2:	4b64      	ldr	r3, [pc, #400]	; (8007664 <MX_LWIP_Init+0x238>)
 80074d4:	789b      	ldrb	r3, [r3, #2]
 80074d6:	021b      	lsls	r3, r3, #8
 80074d8:	430b      	orrs	r3, r1
 80074da:	4962      	ldr	r1, [pc, #392]	; (8007664 <MX_LWIP_Init+0x238>)
 80074dc:	78c9      	ldrb	r1, [r1, #3]
 80074de:	430b      	orrs	r3, r1
 80074e0:	0a1b      	lsrs	r3, r3, #8
 80074e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80074e6:	431a      	orrs	r2, r3
 80074e8:	4b5e      	ldr	r3, [pc, #376]	; (8007664 <MX_LWIP_Init+0x238>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	0619      	lsls	r1, r3, #24
 80074ee:	4b5d      	ldr	r3, [pc, #372]	; (8007664 <MX_LWIP_Init+0x238>)
 80074f0:	785b      	ldrb	r3, [r3, #1]
 80074f2:	041b      	lsls	r3, r3, #16
 80074f4:	4319      	orrs	r1, r3
 80074f6:	4b5b      	ldr	r3, [pc, #364]	; (8007664 <MX_LWIP_Init+0x238>)
 80074f8:	789b      	ldrb	r3, [r3, #2]
 80074fa:	021b      	lsls	r3, r3, #8
 80074fc:	430b      	orrs	r3, r1
 80074fe:	4959      	ldr	r1, [pc, #356]	; (8007664 <MX_LWIP_Init+0x238>)
 8007500:	78c9      	ldrb	r1, [r1, #3]
 8007502:	430b      	orrs	r3, r1
 8007504:	0e1b      	lsrs	r3, r3, #24
 8007506:	4313      	orrs	r3, r2
 8007508:	4a59      	ldr	r2, [pc, #356]	; (8007670 <MX_LWIP_Init+0x244>)
 800750a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800750c:	4b56      	ldr	r3, [pc, #344]	; (8007668 <MX_LWIP_Init+0x23c>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	061a      	lsls	r2, r3, #24
 8007512:	4b55      	ldr	r3, [pc, #340]	; (8007668 <MX_LWIP_Init+0x23c>)
 8007514:	785b      	ldrb	r3, [r3, #1]
 8007516:	041b      	lsls	r3, r3, #16
 8007518:	431a      	orrs	r2, r3
 800751a:	4b53      	ldr	r3, [pc, #332]	; (8007668 <MX_LWIP_Init+0x23c>)
 800751c:	789b      	ldrb	r3, [r3, #2]
 800751e:	021b      	lsls	r3, r3, #8
 8007520:	4313      	orrs	r3, r2
 8007522:	4a51      	ldr	r2, [pc, #324]	; (8007668 <MX_LWIP_Init+0x23c>)
 8007524:	78d2      	ldrb	r2, [r2, #3]
 8007526:	4313      	orrs	r3, r2
 8007528:	061a      	lsls	r2, r3, #24
 800752a:	4b4f      	ldr	r3, [pc, #316]	; (8007668 <MX_LWIP_Init+0x23c>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	0619      	lsls	r1, r3, #24
 8007530:	4b4d      	ldr	r3, [pc, #308]	; (8007668 <MX_LWIP_Init+0x23c>)
 8007532:	785b      	ldrb	r3, [r3, #1]
 8007534:	041b      	lsls	r3, r3, #16
 8007536:	4319      	orrs	r1, r3
 8007538:	4b4b      	ldr	r3, [pc, #300]	; (8007668 <MX_LWIP_Init+0x23c>)
 800753a:	789b      	ldrb	r3, [r3, #2]
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	430b      	orrs	r3, r1
 8007540:	4949      	ldr	r1, [pc, #292]	; (8007668 <MX_LWIP_Init+0x23c>)
 8007542:	78c9      	ldrb	r1, [r1, #3]
 8007544:	430b      	orrs	r3, r1
 8007546:	021b      	lsls	r3, r3, #8
 8007548:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800754c:	431a      	orrs	r2, r3
 800754e:	4b46      	ldr	r3, [pc, #280]	; (8007668 <MX_LWIP_Init+0x23c>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	0619      	lsls	r1, r3, #24
 8007554:	4b44      	ldr	r3, [pc, #272]	; (8007668 <MX_LWIP_Init+0x23c>)
 8007556:	785b      	ldrb	r3, [r3, #1]
 8007558:	041b      	lsls	r3, r3, #16
 800755a:	4319      	orrs	r1, r3
 800755c:	4b42      	ldr	r3, [pc, #264]	; (8007668 <MX_LWIP_Init+0x23c>)
 800755e:	789b      	ldrb	r3, [r3, #2]
 8007560:	021b      	lsls	r3, r3, #8
 8007562:	430b      	orrs	r3, r1
 8007564:	4940      	ldr	r1, [pc, #256]	; (8007668 <MX_LWIP_Init+0x23c>)
 8007566:	78c9      	ldrb	r1, [r1, #3]
 8007568:	430b      	orrs	r3, r1
 800756a:	0a1b      	lsrs	r3, r3, #8
 800756c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007570:	431a      	orrs	r2, r3
 8007572:	4b3d      	ldr	r3, [pc, #244]	; (8007668 <MX_LWIP_Init+0x23c>)
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	0619      	lsls	r1, r3, #24
 8007578:	4b3b      	ldr	r3, [pc, #236]	; (8007668 <MX_LWIP_Init+0x23c>)
 800757a:	785b      	ldrb	r3, [r3, #1]
 800757c:	041b      	lsls	r3, r3, #16
 800757e:	4319      	orrs	r1, r3
 8007580:	4b39      	ldr	r3, [pc, #228]	; (8007668 <MX_LWIP_Init+0x23c>)
 8007582:	789b      	ldrb	r3, [r3, #2]
 8007584:	021b      	lsls	r3, r3, #8
 8007586:	430b      	orrs	r3, r1
 8007588:	4937      	ldr	r1, [pc, #220]	; (8007668 <MX_LWIP_Init+0x23c>)
 800758a:	78c9      	ldrb	r1, [r1, #3]
 800758c:	430b      	orrs	r3, r1
 800758e:	0e1b      	lsrs	r3, r3, #24
 8007590:	4313      	orrs	r3, r2
 8007592:	4a38      	ldr	r2, [pc, #224]	; (8007674 <MX_LWIP_Init+0x248>)
 8007594:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007596:	4b35      	ldr	r3, [pc, #212]	; (800766c <MX_LWIP_Init+0x240>)
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	061a      	lsls	r2, r3, #24
 800759c:	4b33      	ldr	r3, [pc, #204]	; (800766c <MX_LWIP_Init+0x240>)
 800759e:	785b      	ldrb	r3, [r3, #1]
 80075a0:	041b      	lsls	r3, r3, #16
 80075a2:	431a      	orrs	r2, r3
 80075a4:	4b31      	ldr	r3, [pc, #196]	; (800766c <MX_LWIP_Init+0x240>)
 80075a6:	789b      	ldrb	r3, [r3, #2]
 80075a8:	021b      	lsls	r3, r3, #8
 80075aa:	4313      	orrs	r3, r2
 80075ac:	4a2f      	ldr	r2, [pc, #188]	; (800766c <MX_LWIP_Init+0x240>)
 80075ae:	78d2      	ldrb	r2, [r2, #3]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	061a      	lsls	r2, r3, #24
 80075b4:	4b2d      	ldr	r3, [pc, #180]	; (800766c <MX_LWIP_Init+0x240>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	0619      	lsls	r1, r3, #24
 80075ba:	4b2c      	ldr	r3, [pc, #176]	; (800766c <MX_LWIP_Init+0x240>)
 80075bc:	785b      	ldrb	r3, [r3, #1]
 80075be:	041b      	lsls	r3, r3, #16
 80075c0:	4319      	orrs	r1, r3
 80075c2:	4b2a      	ldr	r3, [pc, #168]	; (800766c <MX_LWIP_Init+0x240>)
 80075c4:	789b      	ldrb	r3, [r3, #2]
 80075c6:	021b      	lsls	r3, r3, #8
 80075c8:	430b      	orrs	r3, r1
 80075ca:	4928      	ldr	r1, [pc, #160]	; (800766c <MX_LWIP_Init+0x240>)
 80075cc:	78c9      	ldrb	r1, [r1, #3]
 80075ce:	430b      	orrs	r3, r1
 80075d0:	021b      	lsls	r3, r3, #8
 80075d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075d6:	431a      	orrs	r2, r3
 80075d8:	4b24      	ldr	r3, [pc, #144]	; (800766c <MX_LWIP_Init+0x240>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	0619      	lsls	r1, r3, #24
 80075de:	4b23      	ldr	r3, [pc, #140]	; (800766c <MX_LWIP_Init+0x240>)
 80075e0:	785b      	ldrb	r3, [r3, #1]
 80075e2:	041b      	lsls	r3, r3, #16
 80075e4:	4319      	orrs	r1, r3
 80075e6:	4b21      	ldr	r3, [pc, #132]	; (800766c <MX_LWIP_Init+0x240>)
 80075e8:	789b      	ldrb	r3, [r3, #2]
 80075ea:	021b      	lsls	r3, r3, #8
 80075ec:	430b      	orrs	r3, r1
 80075ee:	491f      	ldr	r1, [pc, #124]	; (800766c <MX_LWIP_Init+0x240>)
 80075f0:	78c9      	ldrb	r1, [r1, #3]
 80075f2:	430b      	orrs	r3, r1
 80075f4:	0a1b      	lsrs	r3, r3, #8
 80075f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80075fa:	431a      	orrs	r2, r3
 80075fc:	4b1b      	ldr	r3, [pc, #108]	; (800766c <MX_LWIP_Init+0x240>)
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	0619      	lsls	r1, r3, #24
 8007602:	4b1a      	ldr	r3, [pc, #104]	; (800766c <MX_LWIP_Init+0x240>)
 8007604:	785b      	ldrb	r3, [r3, #1]
 8007606:	041b      	lsls	r3, r3, #16
 8007608:	4319      	orrs	r1, r3
 800760a:	4b18      	ldr	r3, [pc, #96]	; (800766c <MX_LWIP_Init+0x240>)
 800760c:	789b      	ldrb	r3, [r3, #2]
 800760e:	021b      	lsls	r3, r3, #8
 8007610:	430b      	orrs	r3, r1
 8007612:	4916      	ldr	r1, [pc, #88]	; (800766c <MX_LWIP_Init+0x240>)
 8007614:	78c9      	ldrb	r1, [r1, #3]
 8007616:	430b      	orrs	r3, r1
 8007618:	0e1b      	lsrs	r3, r3, #24
 800761a:	4313      	orrs	r3, r2
 800761c:	4a16      	ldr	r2, [pc, #88]	; (8007678 <MX_LWIP_Init+0x24c>)
 800761e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007620:	4b16      	ldr	r3, [pc, #88]	; (800767c <MX_LWIP_Init+0x250>)
 8007622:	9302      	str	r3, [sp, #8]
 8007624:	4b16      	ldr	r3, [pc, #88]	; (8007680 <MX_LWIP_Init+0x254>)
 8007626:	9301      	str	r3, [sp, #4]
 8007628:	2300      	movs	r3, #0
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	4b12      	ldr	r3, [pc, #72]	; (8007678 <MX_LWIP_Init+0x24c>)
 800762e:	4a11      	ldr	r2, [pc, #68]	; (8007674 <MX_LWIP_Init+0x248>)
 8007630:	490f      	ldr	r1, [pc, #60]	; (8007670 <MX_LWIP_Init+0x244>)
 8007632:	4814      	ldr	r0, [pc, #80]	; (8007684 <MX_LWIP_Init+0x258>)
 8007634:	f005 fdb6 	bl	800d1a4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007638:	4812      	ldr	r0, [pc, #72]	; (8007684 <MX_LWIP_Init+0x258>)
 800763a:	f005 ff63 	bl	800d504 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800763e:	4b11      	ldr	r3, [pc, #68]	; (8007684 <MX_LWIP_Init+0x258>)
 8007640:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007644:	089b      	lsrs	r3, r3, #2
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007650:	480c      	ldr	r0, [pc, #48]	; (8007684 <MX_LWIP_Init+0x258>)
 8007652:	f005 ff67 	bl	800d524 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007656:	e002      	b.n	800765e <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 8007658:	480a      	ldr	r0, [pc, #40]	; (8007684 <MX_LWIP_Init+0x258>)
 800765a:	f005 ffcf 	bl	800d5fc <netif_set_down>
}
 800765e:	bf00      	nop
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	200048f0 	.word	0x200048f0
 8007668:	200048ec 	.word	0x200048ec
 800766c:	200048b4 	.word	0x200048b4
 8007670:	200048e8 	.word	0x200048e8
 8007674:	200048f4 	.word	0x200048f4
 8007678:	200048f8 	.word	0x200048f8
 800767c:	0800c5d9 	.word	0x0800c5d9
 8007680:	08007cb9 	.word	0x08007cb9
 8007684:	200048b8 	.word	0x200048b8

08007688 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b08e      	sub	sp, #56	; 0x38
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	605a      	str	r2, [r3, #4]
 800769a:	609a      	str	r2, [r3, #8]
 800769c:	60da      	str	r2, [r3, #12]
 800769e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a4a      	ldr	r2, [pc, #296]	; (80077d0 <HAL_ETH_MspInit+0x148>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	f040 808d 	bne.w	80077c6 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80076ac:	2300      	movs	r3, #0
 80076ae:	623b      	str	r3, [r7, #32]
 80076b0:	4b48      	ldr	r3, [pc, #288]	; (80077d4 <HAL_ETH_MspInit+0x14c>)
 80076b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b4:	4a47      	ldr	r2, [pc, #284]	; (80077d4 <HAL_ETH_MspInit+0x14c>)
 80076b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80076ba:	6313      	str	r3, [r2, #48]	; 0x30
 80076bc:	4b45      	ldr	r3, [pc, #276]	; (80077d4 <HAL_ETH_MspInit+0x14c>)
 80076be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076c4:	623b      	str	r3, [r7, #32]
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	2300      	movs	r3, #0
 80076ca:	61fb      	str	r3, [r7, #28]
 80076cc:	4b41      	ldr	r3, [pc, #260]	; (80077d4 <HAL_ETH_MspInit+0x14c>)
 80076ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d0:	4a40      	ldr	r2, [pc, #256]	; (80077d4 <HAL_ETH_MspInit+0x14c>)
 80076d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076d6:	6313      	str	r3, [r2, #48]	; 0x30
 80076d8:	4b3e      	ldr	r3, [pc, #248]	; (80077d4 <HAL_ETH_MspInit+0x14c>)
 80076da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076e0:	61fb      	str	r3, [r7, #28]
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	2300      	movs	r3, #0
 80076e6:	61bb      	str	r3, [r7, #24]
 80076e8:	4b3a      	ldr	r3, [pc, #232]	; (80077d4 <HAL_ETH_MspInit+0x14c>)
 80076ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ec:	4a39      	ldr	r2, [pc, #228]	; (80077d4 <HAL_ETH_MspInit+0x14c>)
 80076ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076f2:	6313      	str	r3, [r2, #48]	; 0x30
 80076f4:	4b37      	ldr	r3, [pc, #220]	; (80077d4 <HAL_ETH_MspInit+0x14c>)
 80076f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076fc:	61bb      	str	r3, [r7, #24]
 80076fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007700:	2300      	movs	r3, #0
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	4b33      	ldr	r3, [pc, #204]	; (80077d4 <HAL_ETH_MspInit+0x14c>)
 8007706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007708:	4a32      	ldr	r2, [pc, #200]	; (80077d4 <HAL_ETH_MspInit+0x14c>)
 800770a:	f043 0304 	orr.w	r3, r3, #4
 800770e:	6313      	str	r3, [r2, #48]	; 0x30
 8007710:	4b30      	ldr	r3, [pc, #192]	; (80077d4 <HAL_ETH_MspInit+0x14c>)
 8007712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007714:	f003 0304 	and.w	r3, r3, #4
 8007718:	617b      	str	r3, [r7, #20]
 800771a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800771c:	2300      	movs	r3, #0
 800771e:	613b      	str	r3, [r7, #16]
 8007720:	4b2c      	ldr	r3, [pc, #176]	; (80077d4 <HAL_ETH_MspInit+0x14c>)
 8007722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007724:	4a2b      	ldr	r2, [pc, #172]	; (80077d4 <HAL_ETH_MspInit+0x14c>)
 8007726:	f043 0301 	orr.w	r3, r3, #1
 800772a:	6313      	str	r3, [r2, #48]	; 0x30
 800772c:	4b29      	ldr	r3, [pc, #164]	; (80077d4 <HAL_ETH_MspInit+0x14c>)
 800772e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	613b      	str	r3, [r7, #16]
 8007736:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007738:	2300      	movs	r3, #0
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	4b25      	ldr	r3, [pc, #148]	; (80077d4 <HAL_ETH_MspInit+0x14c>)
 800773e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007740:	4a24      	ldr	r2, [pc, #144]	; (80077d4 <HAL_ETH_MspInit+0x14c>)
 8007742:	f043 0302 	orr.w	r3, r3, #2
 8007746:	6313      	str	r3, [r2, #48]	; 0x30
 8007748:	4b22      	ldr	r3, [pc, #136]	; (80077d4 <HAL_ETH_MspInit+0x14c>)
 800774a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774c:	f003 0302 	and.w	r3, r3, #2
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8007754:	2332      	movs	r3, #50	; 0x32
 8007756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007758:	2302      	movs	r3, #2
 800775a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800775c:	2300      	movs	r3, #0
 800775e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007760:	2303      	movs	r3, #3
 8007762:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007764:	230b      	movs	r3, #11
 8007766:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800776c:	4619      	mov	r1, r3
 800776e:	481a      	ldr	r0, [pc, #104]	; (80077d8 <HAL_ETH_MspInit+0x150>)
 8007770:	f7fa ffac 	bl	80026cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8007774:	2386      	movs	r3, #134	; 0x86
 8007776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007778:	2302      	movs	r3, #2
 800777a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800777c:	2300      	movs	r3, #0
 800777e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007780:	2303      	movs	r3, #3
 8007782:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007784:	230b      	movs	r3, #11
 8007786:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800778c:	4619      	mov	r1, r3
 800778e:	4813      	ldr	r0, [pc, #76]	; (80077dc <HAL_ETH_MspInit+0x154>)
 8007790:	f7fa ff9c 	bl	80026cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8007794:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800779a:	2302      	movs	r3, #2
 800779c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800779e:	2300      	movs	r3, #0
 80077a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077a2:	2303      	movs	r3, #3
 80077a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80077a6:	230b      	movs	r3, #11
 80077a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077ae:	4619      	mov	r1, r3
 80077b0:	480b      	ldr	r0, [pc, #44]	; (80077e0 <HAL_ETH_MspInit+0x158>)
 80077b2:	f7fa ff8b 	bl	80026cc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80077b6:	2200      	movs	r2, #0
 80077b8:	2105      	movs	r1, #5
 80077ba:	203d      	movs	r0, #61	; 0x3d
 80077bc:	f7f9 ff4a 	bl	8001654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80077c0:	203d      	movs	r0, #61	; 0x3d
 80077c2:	f7f9 ff63 	bl	800168c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80077c6:	bf00      	nop
 80077c8:	3738      	adds	r7, #56	; 0x38
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	40028000 	.word	0x40028000
 80077d4:	40023800 	.word	0x40023800
 80077d8:	40020800 	.word	0x40020800
 80077dc:	40020000 	.word	0x40020000
 80077e0:	40020400 	.word	0x40020400

080077e4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80077ec:	4b04      	ldr	r3, [pc, #16]	; (8007800 <HAL_ETH_RxCpltCallback+0x1c>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f002 f8b1 	bl	8009958 <osSemaphoreRelease>
}
 80077f6:	bf00      	nop
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	20000494 	.word	0x20000494

08007804 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007804:	b5b0      	push	{r4, r5, r7, lr}
 8007806:	b090      	sub	sp, #64	; 0x40
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800780c:	2300      	movs	r3, #0
 800780e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007810:	4b60      	ldr	r3, [pc, #384]	; (8007994 <low_level_init+0x190>)
 8007812:	4a61      	ldr	r2, [pc, #388]	; (8007998 <low_level_init+0x194>)
 8007814:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007816:	4b5f      	ldr	r3, [pc, #380]	; (8007994 <low_level_init+0x190>)
 8007818:	2201      	movs	r2, #1
 800781a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800781c:	4b5d      	ldr	r3, [pc, #372]	; (8007994 <low_level_init+0x190>)
 800781e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007822:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007824:	4b5b      	ldr	r3, [pc, #364]	; (8007994 <low_level_init+0x190>)
 8007826:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800782a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800782c:	4b59      	ldr	r3, [pc, #356]	; (8007994 <low_level_init+0x190>)
 800782e:	2201      	movs	r2, #1
 8007830:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007832:	2300      	movs	r3, #0
 8007834:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8007838:	2380      	movs	r3, #128	; 0x80
 800783a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800783e:	23e1      	movs	r3, #225	; 0xe1
 8007840:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8007844:	2300      	movs	r3, #0
 8007846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800784a:	2300      	movs	r3, #0
 800784c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8007850:	2300      	movs	r3, #0
 8007852:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8007856:	4a4f      	ldr	r2, [pc, #316]	; (8007994 <low_level_init+0x190>)
 8007858:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800785c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800785e:	4b4d      	ldr	r3, [pc, #308]	; (8007994 <low_level_init+0x190>)
 8007860:	2201      	movs	r2, #1
 8007862:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007864:	4b4b      	ldr	r3, [pc, #300]	; (8007994 <low_level_init+0x190>)
 8007866:	2200      	movs	r2, #0
 8007868:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800786a:	4b4a      	ldr	r3, [pc, #296]	; (8007994 <low_level_init+0x190>)
 800786c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007870:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007872:	4848      	ldr	r0, [pc, #288]	; (8007994 <low_level_init+0x190>)
 8007874:	f7f9 ff18 	bl	80016a8 <HAL_ETH_Init>
 8007878:	4603      	mov	r3, r0
 800787a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800787e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007882:	2b00      	cmp	r3, #0
 8007884:	d108      	bne.n	8007898 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800788c:	f043 0304 	orr.w	r3, r3, #4
 8007890:	b2da      	uxtb	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8007898:	2304      	movs	r3, #4
 800789a:	4a40      	ldr	r2, [pc, #256]	; (800799c <low_level_init+0x198>)
 800789c:	4940      	ldr	r1, [pc, #256]	; (80079a0 <low_level_init+0x19c>)
 800789e:	483d      	ldr	r0, [pc, #244]	; (8007994 <low_level_init+0x190>)
 80078a0:	f7fa f89e 	bl	80019e0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80078a4:	2304      	movs	r3, #4
 80078a6:	4a3f      	ldr	r2, [pc, #252]	; (80079a4 <low_level_init+0x1a0>)
 80078a8:	493f      	ldr	r1, [pc, #252]	; (80079a8 <low_level_init+0x1a4>)
 80078aa:	483a      	ldr	r0, [pc, #232]	; (8007994 <low_level_init+0x190>)
 80078ac:	f7fa f901 	bl	8001ab2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2206      	movs	r2, #6
 80078b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80078b8:	4b36      	ldr	r3, [pc, #216]	; (8007994 <low_level_init+0x190>)
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	781a      	ldrb	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80078c4:	4b33      	ldr	r3, [pc, #204]	; (8007994 <low_level_init+0x190>)
 80078c6:	695b      	ldr	r3, [r3, #20]
 80078c8:	785a      	ldrb	r2, [r3, #1]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80078d0:	4b30      	ldr	r3, [pc, #192]	; (8007994 <low_level_init+0x190>)
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	789a      	ldrb	r2, [r3, #2]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80078dc:	4b2d      	ldr	r3, [pc, #180]	; (8007994 <low_level_init+0x190>)
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	78da      	ldrb	r2, [r3, #3]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80078e8:	4b2a      	ldr	r3, [pc, #168]	; (8007994 <low_level_init+0x190>)
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	791a      	ldrb	r2, [r3, #4]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80078f4:	4b27      	ldr	r3, [pc, #156]	; (8007994 <low_level_init+0x190>)
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	795a      	ldrb	r2, [r3, #5]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  /* maximum transfer unit */
  netif->mtu = 1500;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007906:	841a      	strh	r2, [r3, #32]

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800790e:	f043 030a 	orr.w	r3, r3, #10
 8007912:	b2da      	uxtb	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800791a:	2300      	movs	r3, #0
 800791c:	62bb      	str	r3, [r7, #40]	; 0x28
 800791e:	2300      	movs	r3, #0
 8007920:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8007922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007926:	2101      	movs	r1, #1
 8007928:	4618      	mov	r0, r3
 800792a:	f001 ff95 	bl	8009858 <osSemaphoreCreate>
 800792e:	4603      	mov	r3, r0
 8007930:	4a1e      	ldr	r2, [pc, #120]	; (80079ac <low_level_init+0x1a8>)
 8007932:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8007934:	4b1e      	ldr	r3, [pc, #120]	; (80079b0 <low_level_init+0x1ac>)
 8007936:	f107 040c 	add.w	r4, r7, #12
 800793a:	461d      	mov	r5, r3
 800793c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800793e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007940:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007944:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8007948:	f107 030c 	add.w	r3, r7, #12
 800794c:	6879      	ldr	r1, [r7, #4]
 800794e:	4618      	mov	r0, r3
 8007950:	f001 fe86 	bl	8009660 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8007954:	480f      	ldr	r0, [pc, #60]	; (8007994 <low_level_init+0x190>)
 8007956:	f7fa fbd4 	bl	8002102 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800795a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800795e:	461a      	mov	r2, r3
 8007960:	211d      	movs	r1, #29
 8007962:	480c      	ldr	r0, [pc, #48]	; (8007994 <low_level_init+0x190>)
 8007964:	f7fa faff 	bl	8001f66 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8007968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796a:	f043 030b 	orr.w	r3, r3, #11
 800796e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8007970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007972:	461a      	mov	r2, r3
 8007974:	211d      	movs	r1, #29
 8007976:	4807      	ldr	r0, [pc, #28]	; (8007994 <low_level_init+0x190>)
 8007978:	f7fa fb5d 	bl	8002036 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800797c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007980:	461a      	mov	r2, r3
 8007982:	211d      	movs	r1, #29
 8007984:	4803      	ldr	r0, [pc, #12]	; (8007994 <low_level_init+0x190>)
 8007986:	f7fa faee 	bl	8001f66 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800798a:	bf00      	nop
 800798c:	3740      	adds	r7, #64	; 0x40
 800798e:	46bd      	mov	sp, r7
 8007990:	bdb0      	pop	{r4, r5, r7, pc}
 8007992:	bf00      	nop
 8007994:	200061cc 	.word	0x200061cc
 8007998:	40028000 	.word	0x40028000
 800799c:	20006214 	.word	0x20006214
 80079a0:	200048fc 	.word	0x200048fc
 80079a4:	2000497c 	.word	0x2000497c
 80079a8:	2000614c 	.word	0x2000614c
 80079ac:	20000494 	.word	0x20000494
 80079b0:	08017f9c 	.word	0x08017f9c

080079b4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b08a      	sub	sp, #40	; 0x28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80079be:	4b4b      	ldr	r3, [pc, #300]	; (8007aec <low_level_output+0x138>)
 80079c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80079c6:	2300      	movs	r3, #0
 80079c8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80079ca:	2300      	movs	r3, #0
 80079cc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80079ce:	2300      	movs	r3, #0
 80079d0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80079d2:	2300      	movs	r3, #0
 80079d4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80079d6:	4b45      	ldr	r3, [pc, #276]	; (8007aec <low_level_output+0x138>)
 80079d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079da:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	623b      	str	r3, [r7, #32]
 80079e4:	e05a      	b.n	8007a9c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	da03      	bge.n	80079f6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80079ee:	23f8      	movs	r3, #248	; 0xf8
 80079f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80079f4:	e05c      	b.n	8007ab0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	895b      	ldrh	r3, [r3, #10]
 80079fa:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80079fc:	2300      	movs	r3, #0
 80079fe:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007a00:	e02f      	b.n	8007a62 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8007a02:	69fa      	ldr	r2, [r7, #28]
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	18d0      	adds	r0, r2, r3
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	18d1      	adds	r1, r2, r3
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007a16:	3304      	adds	r3, #4
 8007a18:	461a      	mov	r2, r3
 8007a1a:	f00f f9ed 	bl	8016df8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	da03      	bge.n	8007a34 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007a2c:	23f8      	movs	r3, #248	; 0xf8
 8007a2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007a32:	e03d      	b.n	8007ab0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007a44:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007a50:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007a5c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	4413      	add	r3, r2
 8007a68:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d8c8      	bhi.n	8007a02 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8007a70:	69fa      	ldr	r2, [r7, #28]
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	18d0      	adds	r0, r2, r3
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	4619      	mov	r1, r3
 8007a82:	f00f f9b9 	bl	8016df8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	623b      	str	r3, [r7, #32]
 8007a9c:	6a3b      	ldr	r3, [r7, #32]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1a1      	bne.n	80079e6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007aa2:	6979      	ldr	r1, [r7, #20]
 8007aa4:	4811      	ldr	r0, [pc, #68]	; (8007aec <low_level_output+0x138>)
 8007aa6:	f7fa f871 	bl	8001b8c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007ab0:	4b0e      	ldr	r3, [pc, #56]	; (8007aec <low_level_output+0x138>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ab8:	3314      	adds	r3, #20
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0320 	and.w	r3, r3, #32
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00d      	beq.n	8007ae0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8007ac4:	4b09      	ldr	r3, [pc, #36]	; (8007aec <low_level_output+0x138>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007acc:	3314      	adds	r3, #20
 8007ace:	2220      	movs	r2, #32
 8007ad0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8007ad2:	4b06      	ldr	r3, [pc, #24]	; (8007aec <low_level_output+0x138>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ada:	3304      	adds	r3, #4
 8007adc:	2200      	movs	r2, #0
 8007ade:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8007ae0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3728      	adds	r7, #40	; 0x28
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	200061cc 	.word	0x200061cc

08007af0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b08c      	sub	sp, #48	; 0x30
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007af8:	2300      	movs	r3, #0
 8007afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8007afc:	2300      	movs	r3, #0
 8007afe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8007b00:	2300      	movs	r3, #0
 8007b02:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007b04:	2300      	movs	r3, #0
 8007b06:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8007b10:	2300      	movs	r3, #0
 8007b12:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8007b14:	484f      	ldr	r0, [pc, #316]	; (8007c54 <low_level_input+0x164>)
 8007b16:	f7fa f923 	bl	8001d60 <HAL_ETH_GetReceivedFrame_IT>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <low_level_input+0x34>

    return NULL;
 8007b20:	2300      	movs	r3, #0
 8007b22:	e092      	b.n	8007c4a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007b24:	4b4b      	ldr	r3, [pc, #300]	; (8007c54 <low_level_input+0x164>)
 8007b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b28:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8007b2a:	4b4a      	ldr	r3, [pc, #296]	; (8007c54 <low_level_input+0x164>)
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8007b30:	89fb      	ldrh	r3, [r7, #14]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d007      	beq.n	8007b46 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8007b36:	89fb      	ldrh	r3, [r7, #14]
 8007b38:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	2000      	movs	r0, #0
 8007b40:	f005 fe46 	bl	800d7d0 <pbuf_alloc>
 8007b44:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8007b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d04b      	beq.n	8007be4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007b4c:	4b41      	ldr	r3, [pc, #260]	; (8007c54 <low_level_input+0x164>)
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b50:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8007b52:	2300      	movs	r3, #0
 8007b54:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b5a:	e040      	b.n	8007bde <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8007b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5e:	895b      	ldrh	r3, [r3, #10]
 8007b60:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007b66:	e021      	b.n	8007bac <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	18d0      	adds	r0, r2, r3
 8007b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	18d1      	adds	r1, r2, r3
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	461a      	mov	r2, r3
 8007b80:	f00f f93a 	bl	8016df8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007b84:	6a3b      	ldr	r3, [r7, #32]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8007b8a:	6a3b      	ldr	r3, [r7, #32]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8007b90:	69fa      	ldr	r2, [r7, #28]
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	4413      	add	r3, r2
 8007b96:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007b9a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007b9c:	69ba      	ldr	r2, [r7, #24]
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007ba6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d8d6      	bhi.n	8007b68 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8007bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	18d0      	adds	r0, r2, r3
 8007bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	4619      	mov	r1, r3
 8007bcc:	f00f f914 	bl	8016df8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007bd0:	69fa      	ldr	r2, [r7, #28]
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1bb      	bne.n	8007b5c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007be4:	4b1b      	ldr	r3, [pc, #108]	; (8007c54 <low_level_input+0x164>)
 8007be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007bea:	2300      	movs	r3, #0
 8007bec:	613b      	str	r3, [r7, #16]
 8007bee:	e00b      	b.n	8007c08 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007bfc:	6a3b      	ldr	r3, [r7, #32]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	3301      	adds	r3, #1
 8007c06:	613b      	str	r3, [r7, #16]
 8007c08:	4b12      	ldr	r3, [pc, #72]	; (8007c54 <low_level_input+0x164>)
 8007c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d3ee      	bcc.n	8007bf0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8007c12:	4b10      	ldr	r3, [pc, #64]	; (8007c54 <low_level_input+0x164>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8007c18:	4b0e      	ldr	r3, [pc, #56]	; (8007c54 <low_level_input+0x164>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c20:	3314      	adds	r3, #20
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00d      	beq.n	8007c48 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007c2c:	4b09      	ldr	r3, [pc, #36]	; (8007c54 <low_level_input+0x164>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c34:	3314      	adds	r3, #20
 8007c36:	2280      	movs	r2, #128	; 0x80
 8007c38:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8007c3a:	4b06      	ldr	r3, [pc, #24]	; (8007c54 <low_level_input+0x164>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c42:	3308      	adds	r3, #8
 8007c44:	2200      	movs	r2, #0
 8007c46:	601a      	str	r2, [r3, #0]
  }
  return p;
 8007c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3730      	adds	r7, #48	; 0x30
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	200061cc 	.word	0x200061cc

08007c58 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007c64:	4b12      	ldr	r3, [pc, #72]	; (8007cb0 <ethernetif_input+0x58>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f04f 31ff 	mov.w	r1, #4294967295
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f001 fe25 	bl	80098bc <osSemaphoreWait>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1f5      	bne.n	8007c64 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8007c78:	480e      	ldr	r0, [pc, #56]	; (8007cb4 <ethernetif_input+0x5c>)
 8007c7a:	f00e fb29 	bl	80162d0 <sys_mutex_lock>
        p = low_level_input( netif );
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f7ff ff36 	bl	8007af0 <low_level_input>
 8007c84:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00a      	beq.n	8007ca2 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	68f9      	ldr	r1, [r7, #12]
 8007c92:	68b8      	ldr	r0, [r7, #8]
 8007c94:	4798      	blx	r3
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8007c9c:	68b8      	ldr	r0, [r7, #8]
 8007c9e:	f006 f87b 	bl	800dd98 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8007ca2:	4804      	ldr	r0, [pc, #16]	; (8007cb4 <ethernetif_input+0x5c>)
 8007ca4:	f00e fb23 	bl	80162ee <sys_mutex_unlock>
      } while(p!=NULL);
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1e4      	bne.n	8007c78 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007cae:	e7d9      	b.n	8007c64 <ethernetif_input+0xc>
 8007cb0:	20000494 	.word	0x20000494
 8007cb4:	200079e4 	.word	0x200079e4

08007cb8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d106      	bne.n	8007cd4 <ethernetif_init+0x1c>
 8007cc6:	4b0e      	ldr	r3, [pc, #56]	; (8007d00 <ethernetif_init+0x48>)
 8007cc8:	f240 222b 	movw	r2, #555	; 0x22b
 8007ccc:	490d      	ldr	r1, [pc, #52]	; (8007d04 <ethernetif_init+0x4c>)
 8007cce:	480e      	ldr	r0, [pc, #56]	; (8007d08 <ethernetif_init+0x50>)
 8007cd0:	f00f f8a8 	bl	8016e24 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2273      	movs	r2, #115	; 0x73
 8007cd8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2274      	movs	r2, #116	; 0x74
 8007ce0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a09      	ldr	r2, [pc, #36]	; (8007d0c <ethernetif_init+0x54>)
 8007ce8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a08      	ldr	r2, [pc, #32]	; (8007d10 <ethernetif_init+0x58>)
 8007cee:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7ff fd87 	bl	8007804 <low_level_init>

  return ERR_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	08017fb8 	.word	0x08017fb8
 8007d04:	08017fd4 	.word	0x08017fd4
 8007d08:	08017fe4 	.word	0x08017fe4
 8007d0c:	0801447d 	.word	0x0801447d
 8007d10:	080079b5 	.word	0x080079b5

08007d14 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007d18:	f7f9 fbb4 	bl	8001484 <HAL_GetTick>
 8007d1c:	4603      	mov	r3, r0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b084      	sub	sp, #16
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007d2e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007d32:	f00e ffeb 	bl	8016d0c <USBD_static_malloc>
 8007d36:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d105      	bne.n	8007d4a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007d46:	2302      	movs	r3, #2
 8007d48:	e066      	b.n	8007e18 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	7c1b      	ldrb	r3, [r3, #16]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d119      	bne.n	8007d8e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d5e:	2202      	movs	r2, #2
 8007d60:	2181      	movs	r1, #129	; 0x81
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f00e feaf 	bl	8016ac6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d72:	2202      	movs	r2, #2
 8007d74:	2101      	movs	r1, #1
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f00e fea5 	bl	8016ac6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2210      	movs	r2, #16
 8007d88:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007d8c:	e016      	b.n	8007dbc <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d8e:	2340      	movs	r3, #64	; 0x40
 8007d90:	2202      	movs	r2, #2
 8007d92:	2181      	movs	r1, #129	; 0x81
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f00e fe96 	bl	8016ac6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007da0:	2340      	movs	r3, #64	; 0x40
 8007da2:	2202      	movs	r2, #2
 8007da4:	2101      	movs	r1, #1
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f00e fe8d 	bl	8016ac6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2210      	movs	r2, #16
 8007db8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007dbc:	2308      	movs	r3, #8
 8007dbe:	2203      	movs	r2, #3
 8007dc0:	2182      	movs	r1, #130	; 0x82
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f00e fe7f 	bl	8016ac6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	7c1b      	ldrb	r3, [r3, #16]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d109      	bne.n	8007e06 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f00e ff50 	bl	8016ca4 <USBD_LL_PrepareReceive>
 8007e04:	e007      	b.n	8007e16 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e0c:	2340      	movs	r3, #64	; 0x40
 8007e0e:	2101      	movs	r1, #1
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f00e ff47 	bl	8016ca4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007e2c:	2181      	movs	r1, #129	; 0x81
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f00e fe6f 	bl	8016b12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f00e fe68 	bl	8016b12 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007e4a:	2182      	movs	r1, #130	; 0x82
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f00e fe60 	bl	8016b12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00e      	beq.n	8007e8a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f00e ff53 	bl	8016d28 <USBD_static_free>
    pdev->pClassData = NULL;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ea4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e0af      	b.n	800801c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d03f      	beq.n	8007f48 <USBD_CDC_Setup+0xb4>
 8007ec8:	2b20      	cmp	r3, #32
 8007eca:	f040 809f 	bne.w	800800c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	88db      	ldrh	r3, [r3, #6]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d02e      	beq.n	8007f34 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	b25b      	sxtb	r3, r3
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	da16      	bge.n	8007f0e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007eec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	88d2      	ldrh	r2, [r2, #6]
 8007ef2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	88db      	ldrh	r3, [r3, #6]
 8007ef8:	2b07      	cmp	r3, #7
 8007efa:	bf28      	it	cs
 8007efc:	2307      	movcs	r3, #7
 8007efe:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	89fa      	ldrh	r2, [r7, #14]
 8007f04:	4619      	mov	r1, r3
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f001 fae9 	bl	80094de <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007f0c:	e085      	b.n	800801a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	785a      	ldrb	r2, [r3, #1]
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	88db      	ldrh	r3, [r3, #6]
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007f24:	6939      	ldr	r1, [r7, #16]
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	88db      	ldrh	r3, [r3, #6]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f001 fb02 	bl	8009536 <USBD_CtlPrepareRx>
      break;
 8007f32:	e072      	b.n	800801a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	7850      	ldrb	r0, [r2, #1]
 8007f40:	2200      	movs	r2, #0
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	4798      	blx	r3
      break;
 8007f46:	e068      	b.n	800801a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	785b      	ldrb	r3, [r3, #1]
 8007f4c:	2b0b      	cmp	r3, #11
 8007f4e:	d852      	bhi.n	8007ff6 <USBD_CDC_Setup+0x162>
 8007f50:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <USBD_CDC_Setup+0xc4>)
 8007f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f56:	bf00      	nop
 8007f58:	08007f89 	.word	0x08007f89
 8007f5c:	08008005 	.word	0x08008005
 8007f60:	08007ff7 	.word	0x08007ff7
 8007f64:	08007ff7 	.word	0x08007ff7
 8007f68:	08007ff7 	.word	0x08007ff7
 8007f6c:	08007ff7 	.word	0x08007ff7
 8007f70:	08007ff7 	.word	0x08007ff7
 8007f74:	08007ff7 	.word	0x08007ff7
 8007f78:	08007ff7 	.word	0x08007ff7
 8007f7c:	08007ff7 	.word	0x08007ff7
 8007f80:	08007fb3 	.word	0x08007fb3
 8007f84:	08007fdd 	.word	0x08007fdd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b03      	cmp	r3, #3
 8007f92:	d107      	bne.n	8007fa4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f94:	f107 030a 	add.w	r3, r7, #10
 8007f98:	2202      	movs	r2, #2
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 fa9e 	bl	80094de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fa2:	e032      	b.n	800800a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007fa4:	6839      	ldr	r1, [r7, #0]
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f001 fa28 	bl	80093fc <USBD_CtlError>
            ret = USBD_FAIL;
 8007fac:	2303      	movs	r3, #3
 8007fae:	75fb      	strb	r3, [r7, #23]
          break;
 8007fb0:	e02b      	b.n	800800a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d107      	bne.n	8007fce <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007fbe:	f107 030d 	add.w	r3, r7, #13
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f001 fa89 	bl	80094de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fcc:	e01d      	b.n	800800a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007fce:	6839      	ldr	r1, [r7, #0]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 fa13 	bl	80093fc <USBD_CtlError>
            ret = USBD_FAIL;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	75fb      	strb	r3, [r7, #23]
          break;
 8007fda:	e016      	b.n	800800a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	2b03      	cmp	r3, #3
 8007fe6:	d00f      	beq.n	8008008 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f001 fa06 	bl	80093fc <USBD_CtlError>
            ret = USBD_FAIL;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ff4:	e008      	b.n	8008008 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f001 f9ff 	bl	80093fc <USBD_CtlError>
          ret = USBD_FAIL;
 8007ffe:	2303      	movs	r3, #3
 8008000:	75fb      	strb	r3, [r7, #23]
          break;
 8008002:	e002      	b.n	800800a <USBD_CDC_Setup+0x176>
          break;
 8008004:	bf00      	nop
 8008006:	e008      	b.n	800801a <USBD_CDC_Setup+0x186>
          break;
 8008008:	bf00      	nop
      }
      break;
 800800a:	e006      	b.n	800801a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f001 f9f4 	bl	80093fc <USBD_CtlError>
      ret = USBD_FAIL;
 8008014:	2303      	movs	r3, #3
 8008016:	75fb      	strb	r3, [r7, #23]
      break;
 8008018:	bf00      	nop
  }

  return (uint8_t)ret;
 800801a:	7dfb      	ldrb	r3, [r7, #23]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3718      	adds	r7, #24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	460b      	mov	r3, r1
 800802e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008036:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008042:	2303      	movs	r3, #3
 8008044:	e04f      	b.n	80080e6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800804c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800804e:	78fa      	ldrb	r2, [r7, #3]
 8008050:	6879      	ldr	r1, [r7, #4]
 8008052:	4613      	mov	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4413      	add	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	440b      	add	r3, r1
 800805c:	3318      	adds	r3, #24
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d029      	beq.n	80080b8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008064:	78fa      	ldrb	r2, [r7, #3]
 8008066:	6879      	ldr	r1, [r7, #4]
 8008068:	4613      	mov	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	440b      	add	r3, r1
 8008072:	3318      	adds	r3, #24
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	78f9      	ldrb	r1, [r7, #3]
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	460b      	mov	r3, r1
 800807c:	00db      	lsls	r3, r3, #3
 800807e:	1a5b      	subs	r3, r3, r1
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4403      	add	r3, r0
 8008084:	3344      	adds	r3, #68	; 0x44
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	fbb2 f1f3 	udiv	r1, r2, r3
 800808c:	fb03 f301 	mul.w	r3, r3, r1
 8008090:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008092:	2b00      	cmp	r3, #0
 8008094:	d110      	bne.n	80080b8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008096:	78fa      	ldrb	r2, [r7, #3]
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	4613      	mov	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4413      	add	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	440b      	add	r3, r1
 80080a4:	3318      	adds	r3, #24
 80080a6:	2200      	movs	r2, #0
 80080a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80080aa:	78f9      	ldrb	r1, [r7, #3]
 80080ac:	2300      	movs	r3, #0
 80080ae:	2200      	movs	r2, #0
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f00e fdd6 	bl	8016c62 <USBD_LL_Transmit>
 80080b6:	e015      	b.n	80080e4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00b      	beq.n	80080e4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80080e0:	78fa      	ldrb	r2, [r7, #3]
 80080e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	460b      	mov	r3, r1
 80080f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008100:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800810c:	2303      	movs	r3, #3
 800810e:	e015      	b.n	800813c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008110:	78fb      	ldrb	r3, [r7, #3]
 8008112:	4619      	mov	r1, r3
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f00e fde6 	bl	8016ce6 <USBD_LL_GetRxDataSize>
 800811a:	4602      	mov	r2, r0
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008136:	4611      	mov	r1, r2
 8008138:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008152:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800815a:	2303      	movs	r3, #3
 800815c:	e01b      	b.n	8008196 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d015      	beq.n	8008194 <USBD_CDC_EP0_RxReady+0x50>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800816e:	2bff      	cmp	r3, #255	; 0xff
 8008170:	d010      	beq.n	8008194 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008180:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008188:	b292      	uxth	r2, r2
 800818a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	22ff      	movs	r2, #255	; 0xff
 8008190:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
	...

080081a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2243      	movs	r2, #67	; 0x43
 80081ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80081ae:	4b03      	ldr	r3, [pc, #12]	; (80081bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	20000094 	.word	0x20000094

080081c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2243      	movs	r2, #67	; 0x43
 80081cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80081ce:	4b03      	ldr	r3, [pc, #12]	; (80081dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	20000050 	.word	0x20000050

080081e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2243      	movs	r2, #67	; 0x43
 80081ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80081ee:	4b03      	ldr	r3, [pc, #12]	; (80081fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	200000d8 	.word	0x200000d8

08008200 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	220a      	movs	r2, #10
 800820c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800820e:	4b03      	ldr	r3, [pc, #12]	; (800821c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008210:	4618      	mov	r0, r3
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	2000000c 	.word	0x2000000c

08008220 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d101      	bne.n	8008234 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008230:	2303      	movs	r3, #3
 8008232:	e004      	b.n	800823e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800824a:	b480      	push	{r7}
 800824c:	b087      	sub	sp, #28
 800824e:	af00      	add	r7, sp, #0
 8008250:	60f8      	str	r0, [r7, #12]
 8008252:	60b9      	str	r1, [r7, #8]
 8008254:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800825c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008264:	2303      	movs	r3, #3
 8008266:	e008      	b.n	800827a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	371c      	adds	r7, #28
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008286:	b480      	push	{r7}
 8008288:	b085      	sub	sp, #20
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008296:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800829e:	2303      	movs	r3, #3
 80082a0:	e004      	b.n	80082ac <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	683a      	ldr	r2, [r7, #0]
 80082a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d101      	bne.n	80082d6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e016      	b.n	8008304 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	7c1b      	ldrb	r3, [r3, #16]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d109      	bne.n	80082f2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80082e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082e8:	2101      	movs	r1, #1
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f00e fcda 	bl	8016ca4 <USBD_LL_PrepareReceive>
 80082f0:	e007      	b.n	8008302 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80082f8:	2340      	movs	r3, #64	; 0x40
 80082fa:	2101      	movs	r1, #1
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f00e fcd1 	bl	8016ca4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	4613      	mov	r3, r2
 8008318:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d101      	bne.n	8008324 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008320:	2303      	movs	r3, #3
 8008322:	e01f      	b.n	8008364 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	79fa      	ldrb	r2, [r7, #7]
 8008356:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f00e fb4d 	bl	80169f8 <USBD_LL_Init>
 800835e:	4603      	mov	r3, r0
 8008360:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008362:	7dfb      	ldrb	r3, [r7, #23]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3718      	adds	r7, #24
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008380:	2303      	movs	r3, #3
 8008382:	e016      	b.n	80083b2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00b      	beq.n	80083b0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a0:	f107 020e 	add.w	r2, r7, #14
 80083a4:	4610      	mov	r0, r2
 80083a6:	4798      	blx	r3
 80083a8:	4602      	mov	r2, r0
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b082      	sub	sp, #8
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f00e fb64 	bl	8016a90 <USBD_LL_Start>
 80083c8:	4603      	mov	r3, r0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b083      	sub	sp, #12
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	460b      	mov	r3, r1
 80083f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80083f4:	2303      	movs	r3, #3
 80083f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d009      	beq.n	8008416 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	78fa      	ldrb	r2, [r7, #3]
 800840c:	4611      	mov	r1, r2
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	4798      	blx	r3
 8008412:	4603      	mov	r3, r0
 8008414:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008416:	7bfb      	ldrb	r3, [r7, #15]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	460b      	mov	r3, r1
 800842a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008432:	2b00      	cmp	r3, #0
 8008434:	d007      	beq.n	8008446 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	78fa      	ldrb	r2, [r7, #3]
 8008440:	4611      	mov	r1, r2
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	4798      	blx	r3
  }

  return USBD_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	4618      	mov	r0, r3
 8008464:	f000 ff90 	bl	8009388 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008476:	461a      	mov	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008484:	f003 031f 	and.w	r3, r3, #31
 8008488:	2b02      	cmp	r3, #2
 800848a:	d01a      	beq.n	80084c2 <USBD_LL_SetupStage+0x72>
 800848c:	2b02      	cmp	r3, #2
 800848e:	d822      	bhi.n	80084d6 <USBD_LL_SetupStage+0x86>
 8008490:	2b00      	cmp	r3, #0
 8008492:	d002      	beq.n	800849a <USBD_LL_SetupStage+0x4a>
 8008494:	2b01      	cmp	r3, #1
 8008496:	d00a      	beq.n	80084ae <USBD_LL_SetupStage+0x5e>
 8008498:	e01d      	b.n	80084d6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084a0:	4619      	mov	r1, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fa62 	bl	800896c <USBD_StdDevReq>
 80084a8:	4603      	mov	r3, r0
 80084aa:	73fb      	strb	r3, [r7, #15]
      break;
 80084ac:	e020      	b.n	80084f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fac6 	bl	8008a48 <USBD_StdItfReq>
 80084bc:	4603      	mov	r3, r0
 80084be:	73fb      	strb	r3, [r7, #15]
      break;
 80084c0:	e016      	b.n	80084f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084c8:	4619      	mov	r1, r3
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fb05 	bl	8008ada <USBD_StdEPReq>
 80084d0:	4603      	mov	r3, r0
 80084d2:	73fb      	strb	r3, [r7, #15]
      break;
 80084d4:	e00c      	b.n	80084f0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80084dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	4619      	mov	r1, r3
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f00e fb33 	bl	8016b50 <USBD_LL_StallEP>
 80084ea:	4603      	mov	r3, r0
 80084ec:	73fb      	strb	r3, [r7, #15]
      break;
 80084ee:	bf00      	nop
  }

  return ret;
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b086      	sub	sp, #24
 80084fe:	af00      	add	r7, sp, #0
 8008500:	60f8      	str	r0, [r7, #12]
 8008502:	460b      	mov	r3, r1
 8008504:	607a      	str	r2, [r7, #4]
 8008506:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008508:	7afb      	ldrb	r3, [r7, #11]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d138      	bne.n	8008580 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008514:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800851c:	2b03      	cmp	r3, #3
 800851e:	d14a      	bne.n	80085b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	689a      	ldr	r2, [r3, #8]
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	429a      	cmp	r2, r3
 800852a:	d913      	bls.n	8008554 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	689a      	ldr	r2, [r3, #8]
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	1ad2      	subs	r2, r2, r3
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	68da      	ldr	r2, [r3, #12]
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	4293      	cmp	r3, r2
 8008544:	bf28      	it	cs
 8008546:	4613      	movcs	r3, r2
 8008548:	461a      	mov	r2, r3
 800854a:	6879      	ldr	r1, [r7, #4]
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f001 f80f 	bl	8009570 <USBD_CtlContinueRx>
 8008552:	e030      	b.n	80085b6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800855a:	b2db      	uxtb	r3, r3
 800855c:	2b03      	cmp	r3, #3
 800855e:	d10b      	bne.n	8008578 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d005      	beq.n	8008578 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f001 f80a 	bl	8009592 <USBD_CtlSendStatus>
 800857e:	e01a      	b.n	80085b6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008586:	b2db      	uxtb	r3, r3
 8008588:	2b03      	cmp	r3, #3
 800858a:	d114      	bne.n	80085b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00e      	beq.n	80085b6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	7afa      	ldrb	r2, [r7, #11]
 80085a2:	4611      	mov	r1, r2
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	4798      	blx	r3
 80085a8:	4603      	mov	r3, r0
 80085aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80085ac:	7dfb      	ldrb	r3, [r7, #23]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80085b2:	7dfb      	ldrb	r3, [r7, #23]
 80085b4:	e000      	b.n	80085b8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3718      	adds	r7, #24
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	460b      	mov	r3, r1
 80085ca:	607a      	str	r2, [r7, #4]
 80085cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80085ce:	7afb      	ldrb	r3, [r7, #11]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d16b      	bne.n	80086ac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	3314      	adds	r3, #20
 80085d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d156      	bne.n	8008692 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	689a      	ldr	r2, [r3, #8]
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d914      	bls.n	800861a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	689a      	ldr	r2, [r3, #8]
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	1ad2      	subs	r2, r2, r3
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	461a      	mov	r2, r3
 8008604:	6879      	ldr	r1, [r7, #4]
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f000 ff84 	bl	8009514 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800860c:	2300      	movs	r3, #0
 800860e:	2200      	movs	r2, #0
 8008610:	2100      	movs	r1, #0
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f00e fb46 	bl	8016ca4 <USBD_LL_PrepareReceive>
 8008618:	e03b      	b.n	8008692 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	68da      	ldr	r2, [r3, #12]
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	429a      	cmp	r2, r3
 8008624:	d11c      	bne.n	8008660 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	685a      	ldr	r2, [r3, #4]
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800862e:	429a      	cmp	r2, r3
 8008630:	d316      	bcc.n	8008660 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800863c:	429a      	cmp	r2, r3
 800863e:	d20f      	bcs.n	8008660 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008640:	2200      	movs	r2, #0
 8008642:	2100      	movs	r1, #0
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f000 ff65 	bl	8009514 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008652:	2300      	movs	r3, #0
 8008654:	2200      	movs	r2, #0
 8008656:	2100      	movs	r1, #0
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f00e fb23 	bl	8016ca4 <USBD_LL_PrepareReceive>
 800865e:	e018      	b.n	8008692 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b03      	cmp	r3, #3
 800866a:	d10b      	bne.n	8008684 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d005      	beq.n	8008684 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008684:	2180      	movs	r1, #128	; 0x80
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f00e fa62 	bl	8016b50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f000 ff93 	bl	80095b8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008698:	2b01      	cmp	r3, #1
 800869a:	d122      	bne.n	80086e2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f7ff fe98 	bl	80083d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80086aa:	e01a      	b.n	80086e2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	2b03      	cmp	r3, #3
 80086b6:	d114      	bne.n	80086e2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086be:	695b      	ldr	r3, [r3, #20]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00e      	beq.n	80086e2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	7afa      	ldrb	r2, [r7, #11]
 80086ce:	4611      	mov	r1, r2
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	4798      	blx	r3
 80086d4:	4603      	mov	r3, r0
 80086d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80086d8:	7dfb      	ldrb	r3, [r7, #23]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80086de:	7dfb      	ldrb	r3, [r7, #23]
 80086e0:	e000      	b.n	80086e4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3718      	adds	r7, #24
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008718:	2b00      	cmp	r3, #0
 800871a:	d101      	bne.n	8008720 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800871c:	2303      	movs	r3, #3
 800871e:	e02f      	b.n	8008780 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00f      	beq.n	800874a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d009      	beq.n	800874a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	6852      	ldr	r2, [r2, #4]
 8008742:	b2d2      	uxtb	r2, r2
 8008744:	4611      	mov	r1, r2
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800874a:	2340      	movs	r3, #64	; 0x40
 800874c:	2200      	movs	r2, #0
 800874e:	2100      	movs	r1, #0
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f00e f9b8 	bl	8016ac6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2240      	movs	r2, #64	; 0x40
 8008762:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008766:	2340      	movs	r3, #64	; 0x40
 8008768:	2200      	movs	r2, #0
 800876a:	2180      	movs	r1, #128	; 0x80
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f00e f9aa 	bl	8016ac6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2240      	movs	r2, #64	; 0x40
 800877c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	78fa      	ldrb	r2, [r7, #3]
 8008798:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087b6:	b2da      	uxtb	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2204      	movs	r2, #4
 80087c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	2b04      	cmp	r3, #4
 80087e6:	d106      	bne.n	80087f6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80087ee:	b2da      	uxtb	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008812:	2b00      	cmp	r3, #0
 8008814:	d101      	bne.n	800881a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008816:	2303      	movs	r3, #3
 8008818:	e012      	b.n	8008840 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b03      	cmp	r3, #3
 8008824:	d10b      	bne.n	800883e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800882c:	69db      	ldr	r3, [r3, #28]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d005      	beq.n	800883e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008838:	69db      	ldr	r3, [r3, #28]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	460b      	mov	r3, r1
 8008852:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800885a:	2b00      	cmp	r3, #0
 800885c:	d101      	bne.n	8008862 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800885e:	2303      	movs	r3, #3
 8008860:	e014      	b.n	800888c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b03      	cmp	r3, #3
 800886c:	d10d      	bne.n	800888a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d007      	beq.n	800888a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	78fa      	ldrb	r2, [r7, #3]
 8008884:	4611      	mov	r1, r2
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	460b      	mov	r3, r1
 800889e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e014      	b.n	80088d8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	d10d      	bne.n	80088d6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d007      	beq.n	80088d6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ce:	78fa      	ldrb	r2, [r7, #3]
 80088d0:	4611      	mov	r1, r2
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b082      	sub	sp, #8
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800890c:	2b00      	cmp	r3, #0
 800890e:	d009      	beq.n	8008924 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	6852      	ldr	r2, [r2, #4]
 800891c:	b2d2      	uxtb	r2, r2
 800891e:	4611      	mov	r1, r2
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	4798      	blx	r3
  }

  return USBD_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800892e:	b480      	push	{r7}
 8008930:	b087      	sub	sp, #28
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	3301      	adds	r3, #1
 8008944:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800894c:	8a3b      	ldrh	r3, [r7, #16]
 800894e:	021b      	lsls	r3, r3, #8
 8008950:	b21a      	sxth	r2, r3
 8008952:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008956:	4313      	orrs	r3, r2
 8008958:	b21b      	sxth	r3, r3
 800895a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800895c:	89fb      	ldrh	r3, [r7, #14]
}
 800895e:	4618      	mov	r0, r3
 8008960:	371c      	adds	r7, #28
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
	...

0800896c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008982:	2b40      	cmp	r3, #64	; 0x40
 8008984:	d005      	beq.n	8008992 <USBD_StdDevReq+0x26>
 8008986:	2b40      	cmp	r3, #64	; 0x40
 8008988:	d853      	bhi.n	8008a32 <USBD_StdDevReq+0xc6>
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00b      	beq.n	80089a6 <USBD_StdDevReq+0x3a>
 800898e:	2b20      	cmp	r3, #32
 8008990:	d14f      	bne.n	8008a32 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	4798      	blx	r3
 80089a0:	4603      	mov	r3, r0
 80089a2:	73fb      	strb	r3, [r7, #15]
      break;
 80089a4:	e04a      	b.n	8008a3c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	785b      	ldrb	r3, [r3, #1]
 80089aa:	2b09      	cmp	r3, #9
 80089ac:	d83b      	bhi.n	8008a26 <USBD_StdDevReq+0xba>
 80089ae:	a201      	add	r2, pc, #4	; (adr r2, 80089b4 <USBD_StdDevReq+0x48>)
 80089b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b4:	08008a09 	.word	0x08008a09
 80089b8:	08008a1d 	.word	0x08008a1d
 80089bc:	08008a27 	.word	0x08008a27
 80089c0:	08008a13 	.word	0x08008a13
 80089c4:	08008a27 	.word	0x08008a27
 80089c8:	080089e7 	.word	0x080089e7
 80089cc:	080089dd 	.word	0x080089dd
 80089d0:	08008a27 	.word	0x08008a27
 80089d4:	080089ff 	.word	0x080089ff
 80089d8:	080089f1 	.word	0x080089f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f9de 	bl	8008da0 <USBD_GetDescriptor>
          break;
 80089e4:	e024      	b.n	8008a30 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fb43 	bl	8009074 <USBD_SetAddress>
          break;
 80089ee:	e01f      	b.n	8008a30 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fb82 	bl	80090fc <USBD_SetConfig>
 80089f8:	4603      	mov	r3, r0
 80089fa:	73fb      	strb	r3, [r7, #15]
          break;
 80089fc:	e018      	b.n	8008a30 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fc21 	bl	8009248 <USBD_GetConfig>
          break;
 8008a06:	e013      	b.n	8008a30 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fc52 	bl	80092b4 <USBD_GetStatus>
          break;
 8008a10:	e00e      	b.n	8008a30 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fc81 	bl	800931c <USBD_SetFeature>
          break;
 8008a1a:	e009      	b.n	8008a30 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fc90 	bl	8009344 <USBD_ClrFeature>
          break;
 8008a24:	e004      	b.n	8008a30 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fce7 	bl	80093fc <USBD_CtlError>
          break;
 8008a2e:	bf00      	nop
      }
      break;
 8008a30:	e004      	b.n	8008a3c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008a32:	6839      	ldr	r1, [r7, #0]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fce1 	bl	80093fc <USBD_CtlError>
      break;
 8008a3a:	bf00      	nop
  }

  return ret;
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop

08008a48 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a5e:	2b40      	cmp	r3, #64	; 0x40
 8008a60:	d005      	beq.n	8008a6e <USBD_StdItfReq+0x26>
 8008a62:	2b40      	cmp	r3, #64	; 0x40
 8008a64:	d82f      	bhi.n	8008ac6 <USBD_StdItfReq+0x7e>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d001      	beq.n	8008a6e <USBD_StdItfReq+0x26>
 8008a6a:	2b20      	cmp	r3, #32
 8008a6c:	d12b      	bne.n	8008ac6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	3b01      	subs	r3, #1
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d81d      	bhi.n	8008ab8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	889b      	ldrh	r3, [r3, #4]
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d813      	bhi.n	8008aae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	4798      	blx	r3
 8008a94:	4603      	mov	r3, r0
 8008a96:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	88db      	ldrh	r3, [r3, #6]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d110      	bne.n	8008ac2 <USBD_StdItfReq+0x7a>
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10d      	bne.n	8008ac2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fd73 	bl	8009592 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008aac:	e009      	b.n	8008ac2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fca3 	bl	80093fc <USBD_CtlError>
          break;
 8008ab6:	e004      	b.n	8008ac2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fc9e 	bl	80093fc <USBD_CtlError>
          break;
 8008ac0:	e000      	b.n	8008ac4 <USBD_StdItfReq+0x7c>
          break;
 8008ac2:	bf00      	nop
      }
      break;
 8008ac4:	e004      	b.n	8008ad0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008ac6:	6839      	ldr	r1, [r7, #0]
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fc97 	bl	80093fc <USBD_CtlError>
      break;
 8008ace:	bf00      	nop
  }

  return ret;
 8008ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b084      	sub	sp, #16
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	889b      	ldrh	r3, [r3, #4]
 8008aec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008af6:	2b40      	cmp	r3, #64	; 0x40
 8008af8:	d007      	beq.n	8008b0a <USBD_StdEPReq+0x30>
 8008afa:	2b40      	cmp	r3, #64	; 0x40
 8008afc:	f200 8145 	bhi.w	8008d8a <USBD_StdEPReq+0x2b0>
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00c      	beq.n	8008b1e <USBD_StdEPReq+0x44>
 8008b04:	2b20      	cmp	r3, #32
 8008b06:	f040 8140 	bne.w	8008d8a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	4798      	blx	r3
 8008b18:	4603      	mov	r3, r0
 8008b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b1c:	e13a      	b.n	8008d94 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	785b      	ldrb	r3, [r3, #1]
 8008b22:	2b03      	cmp	r3, #3
 8008b24:	d007      	beq.n	8008b36 <USBD_StdEPReq+0x5c>
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	f300 8129 	bgt.w	8008d7e <USBD_StdEPReq+0x2a4>
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d07f      	beq.n	8008c30 <USBD_StdEPReq+0x156>
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d03c      	beq.n	8008bae <USBD_StdEPReq+0xd4>
 8008b34:	e123      	b.n	8008d7e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d002      	beq.n	8008b48 <USBD_StdEPReq+0x6e>
 8008b42:	2b03      	cmp	r3, #3
 8008b44:	d016      	beq.n	8008b74 <USBD_StdEPReq+0x9a>
 8008b46:	e02c      	b.n	8008ba2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b48:	7bbb      	ldrb	r3, [r7, #14]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00d      	beq.n	8008b6a <USBD_StdEPReq+0x90>
 8008b4e:	7bbb      	ldrb	r3, [r7, #14]
 8008b50:	2b80      	cmp	r3, #128	; 0x80
 8008b52:	d00a      	beq.n	8008b6a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b54:	7bbb      	ldrb	r3, [r7, #14]
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f00d fff9 	bl	8016b50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b5e:	2180      	movs	r1, #128	; 0x80
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f00d fff5 	bl	8016b50 <USBD_LL_StallEP>
 8008b66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b68:	e020      	b.n	8008bac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fc45 	bl	80093fc <USBD_CtlError>
              break;
 8008b72:	e01b      	b.n	8008bac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	885b      	ldrh	r3, [r3, #2]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10e      	bne.n	8008b9a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b7c:	7bbb      	ldrb	r3, [r7, #14]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00b      	beq.n	8008b9a <USBD_StdEPReq+0xc0>
 8008b82:	7bbb      	ldrb	r3, [r7, #14]
 8008b84:	2b80      	cmp	r3, #128	; 0x80
 8008b86:	d008      	beq.n	8008b9a <USBD_StdEPReq+0xc0>
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	88db      	ldrh	r3, [r3, #6]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d104      	bne.n	8008b9a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
 8008b92:	4619      	mov	r1, r3
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f00d ffdb 	bl	8016b50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fcf9 	bl	8009592 <USBD_CtlSendStatus>

              break;
 8008ba0:	e004      	b.n	8008bac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fc29 	bl	80093fc <USBD_CtlError>
              break;
 8008baa:	bf00      	nop
          }
          break;
 8008bac:	e0ec      	b.n	8008d88 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d002      	beq.n	8008bc0 <USBD_StdEPReq+0xe6>
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	d016      	beq.n	8008bec <USBD_StdEPReq+0x112>
 8008bbe:	e030      	b.n	8008c22 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00d      	beq.n	8008be2 <USBD_StdEPReq+0x108>
 8008bc6:	7bbb      	ldrb	r3, [r7, #14]
 8008bc8:	2b80      	cmp	r3, #128	; 0x80
 8008bca:	d00a      	beq.n	8008be2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f00d ffbd 	bl	8016b50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bd6:	2180      	movs	r1, #128	; 0x80
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f00d ffb9 	bl	8016b50 <USBD_LL_StallEP>
 8008bde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008be0:	e025      	b.n	8008c2e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008be2:	6839      	ldr	r1, [r7, #0]
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fc09 	bl	80093fc <USBD_CtlError>
              break;
 8008bea:	e020      	b.n	8008c2e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	885b      	ldrh	r3, [r3, #2]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d11b      	bne.n	8008c2c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008bf4:	7bbb      	ldrb	r3, [r7, #14]
 8008bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d004      	beq.n	8008c08 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008bfe:	7bbb      	ldrb	r3, [r7, #14]
 8008c00:	4619      	mov	r1, r3
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f00d ffc3 	bl	8016b8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fcc2 	bl	8009592 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	4798      	blx	r3
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008c20:	e004      	b.n	8008c2c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008c22:	6839      	ldr	r1, [r7, #0]
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 fbe9 	bl	80093fc <USBD_CtlError>
              break;
 8008c2a:	e000      	b.n	8008c2e <USBD_StdEPReq+0x154>
              break;
 8008c2c:	bf00      	nop
          }
          break;
 8008c2e:	e0ab      	b.n	8008d88 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b02      	cmp	r3, #2
 8008c3a:	d002      	beq.n	8008c42 <USBD_StdEPReq+0x168>
 8008c3c:	2b03      	cmp	r3, #3
 8008c3e:	d032      	beq.n	8008ca6 <USBD_StdEPReq+0x1cc>
 8008c40:	e097      	b.n	8008d72 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c42:	7bbb      	ldrb	r3, [r7, #14]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d007      	beq.n	8008c58 <USBD_StdEPReq+0x17e>
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
 8008c4a:	2b80      	cmp	r3, #128	; 0x80
 8008c4c:	d004      	beq.n	8008c58 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fbd3 	bl	80093fc <USBD_CtlError>
                break;
 8008c56:	e091      	b.n	8008d7c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	da0b      	bge.n	8008c78 <USBD_StdEPReq+0x19e>
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
 8008c62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c66:	4613      	mov	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	3310      	adds	r3, #16
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	4413      	add	r3, r2
 8008c74:	3304      	adds	r3, #4
 8008c76:	e00b      	b.n	8008c90 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
 8008c7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c7e:	4613      	mov	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	3304      	adds	r3, #4
 8008c90:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2200      	movs	r2, #0
 8008c96:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fc1d 	bl	80094de <USBD_CtlSendData>
              break;
 8008ca4:	e06a      	b.n	8008d7c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ca6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	da11      	bge.n	8008cd2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008cae:	7bbb      	ldrb	r3, [r7, #14]
 8008cb0:	f003 020f 	and.w	r2, r3, #15
 8008cb4:	6879      	ldr	r1, [r7, #4]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4413      	add	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	440b      	add	r3, r1
 8008cc0:	3324      	adds	r3, #36	; 0x24
 8008cc2:	881b      	ldrh	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d117      	bne.n	8008cf8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fb96 	bl	80093fc <USBD_CtlError>
                  break;
 8008cd0:	e054      	b.n	8008d7c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008cd2:	7bbb      	ldrb	r3, [r7, #14]
 8008cd4:	f003 020f 	and.w	r2, r3, #15
 8008cd8:	6879      	ldr	r1, [r7, #4]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	440b      	add	r3, r1
 8008ce4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ce8:	881b      	ldrh	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d104      	bne.n	8008cf8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fb83 	bl	80093fc <USBD_CtlError>
                  break;
 8008cf6:	e041      	b.n	8008d7c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	da0b      	bge.n	8008d18 <USBD_StdEPReq+0x23e>
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
 8008d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d06:	4613      	mov	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	3310      	adds	r3, #16
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	4413      	add	r3, r2
 8008d14:	3304      	adds	r3, #4
 8008d16:	e00b      	b.n	8008d30 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d18:	7bbb      	ldrb	r3, [r7, #14]
 8008d1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d1e:	4613      	mov	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4413      	add	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	3304      	adds	r3, #4
 8008d30:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d002      	beq.n	8008d3e <USBD_StdEPReq+0x264>
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	2b80      	cmp	r3, #128	; 0x80
 8008d3c:	d103      	bne.n	8008d46 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	2200      	movs	r2, #0
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	e00e      	b.n	8008d64 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008d46:	7bbb      	ldrb	r3, [r7, #14]
 8008d48:	4619      	mov	r1, r3
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f00d ff3e 	bl	8016bcc <USBD_LL_IsStallEP>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d003      	beq.n	8008d5e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	601a      	str	r2, [r3, #0]
 8008d5c:	e002      	b.n	8008d64 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	2200      	movs	r2, #0
 8008d62:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	2202      	movs	r2, #2
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fbb7 	bl	80094de <USBD_CtlSendData>
              break;
 8008d70:	e004      	b.n	8008d7c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fb41 	bl	80093fc <USBD_CtlError>
              break;
 8008d7a:	bf00      	nop
          }
          break;
 8008d7c:	e004      	b.n	8008d88 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008d7e:	6839      	ldr	r1, [r7, #0]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 fb3b 	bl	80093fc <USBD_CtlError>
          break;
 8008d86:	bf00      	nop
      }
      break;
 8008d88:	e004      	b.n	8008d94 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fb35 	bl	80093fc <USBD_CtlError>
      break;
 8008d92:	bf00      	nop
  }

  return ret;
 8008d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
	...

08008da0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008daa:	2300      	movs	r3, #0
 8008dac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008dae:	2300      	movs	r3, #0
 8008db0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008db2:	2300      	movs	r3, #0
 8008db4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	885b      	ldrh	r3, [r3, #2]
 8008dba:	0a1b      	lsrs	r3, r3, #8
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	2b06      	cmp	r3, #6
 8008dc2:	f200 8128 	bhi.w	8009016 <USBD_GetDescriptor+0x276>
 8008dc6:	a201      	add	r2, pc, #4	; (adr r2, 8008dcc <USBD_GetDescriptor+0x2c>)
 8008dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dcc:	08008de9 	.word	0x08008de9
 8008dd0:	08008e01 	.word	0x08008e01
 8008dd4:	08008e41 	.word	0x08008e41
 8008dd8:	08009017 	.word	0x08009017
 8008ddc:	08009017 	.word	0x08009017
 8008de0:	08008fb7 	.word	0x08008fb7
 8008de4:	08008fe3 	.word	0x08008fe3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	7c12      	ldrb	r2, [r2, #16]
 8008df4:	f107 0108 	add.w	r1, r7, #8
 8008df8:	4610      	mov	r0, r2
 8008dfa:	4798      	blx	r3
 8008dfc:	60f8      	str	r0, [r7, #12]
      break;
 8008dfe:	e112      	b.n	8009026 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	7c1b      	ldrb	r3, [r3, #16]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10d      	bne.n	8008e24 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e10:	f107 0208 	add.w	r2, r7, #8
 8008e14:	4610      	mov	r0, r2
 8008e16:	4798      	blx	r3
 8008e18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	2202      	movs	r2, #2
 8008e20:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e22:	e100      	b.n	8009026 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2c:	f107 0208 	add.w	r2, r7, #8
 8008e30:	4610      	mov	r0, r2
 8008e32:	4798      	blx	r3
 8008e34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	2202      	movs	r2, #2
 8008e3c:	701a      	strb	r2, [r3, #0]
      break;
 8008e3e:	e0f2      	b.n	8009026 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	885b      	ldrh	r3, [r3, #2]
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b05      	cmp	r3, #5
 8008e48:	f200 80ac 	bhi.w	8008fa4 <USBD_GetDescriptor+0x204>
 8008e4c:	a201      	add	r2, pc, #4	; (adr r2, 8008e54 <USBD_GetDescriptor+0xb4>)
 8008e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e52:	bf00      	nop
 8008e54:	08008e6d 	.word	0x08008e6d
 8008e58:	08008ea1 	.word	0x08008ea1
 8008e5c:	08008ed5 	.word	0x08008ed5
 8008e60:	08008f09 	.word	0x08008f09
 8008e64:	08008f3d 	.word	0x08008f3d
 8008e68:	08008f71 	.word	0x08008f71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00b      	beq.n	8008e90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	7c12      	ldrb	r2, [r2, #16]
 8008e84:	f107 0108 	add.w	r1, r7, #8
 8008e88:	4610      	mov	r0, r2
 8008e8a:	4798      	blx	r3
 8008e8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e8e:	e091      	b.n	8008fb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fab2 	bl	80093fc <USBD_CtlError>
            err++;
 8008e98:	7afb      	ldrb	r3, [r7, #11]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e9e:	e089      	b.n	8008fb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00b      	beq.n	8008ec4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	7c12      	ldrb	r2, [r2, #16]
 8008eb8:	f107 0108 	add.w	r1, r7, #8
 8008ebc:	4610      	mov	r0, r2
 8008ebe:	4798      	blx	r3
 8008ec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ec2:	e077      	b.n	8008fb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ec4:	6839      	ldr	r1, [r7, #0]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fa98 	bl	80093fc <USBD_CtlError>
            err++;
 8008ecc:	7afb      	ldrb	r3, [r7, #11]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ed2:	e06f      	b.n	8008fb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00b      	beq.n	8008ef8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	7c12      	ldrb	r2, [r2, #16]
 8008eec:	f107 0108 	add.w	r1, r7, #8
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	4798      	blx	r3
 8008ef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ef6:	e05d      	b.n	8008fb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ef8:	6839      	ldr	r1, [r7, #0]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fa7e 	bl	80093fc <USBD_CtlError>
            err++;
 8008f00:	7afb      	ldrb	r3, [r7, #11]
 8008f02:	3301      	adds	r3, #1
 8008f04:	72fb      	strb	r3, [r7, #11]
          break;
 8008f06:	e055      	b.n	8008fb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00b      	beq.n	8008f2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f1a:	691b      	ldr	r3, [r3, #16]
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	7c12      	ldrb	r2, [r2, #16]
 8008f20:	f107 0108 	add.w	r1, r7, #8
 8008f24:	4610      	mov	r0, r2
 8008f26:	4798      	blx	r3
 8008f28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f2a:	e043      	b.n	8008fb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f2c:	6839      	ldr	r1, [r7, #0]
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fa64 	bl	80093fc <USBD_CtlError>
            err++;
 8008f34:	7afb      	ldrb	r3, [r7, #11]
 8008f36:	3301      	adds	r3, #1
 8008f38:	72fb      	strb	r3, [r7, #11]
          break;
 8008f3a:	e03b      	b.n	8008fb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f42:	695b      	ldr	r3, [r3, #20]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00b      	beq.n	8008f60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f4e:	695b      	ldr	r3, [r3, #20]
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	7c12      	ldrb	r2, [r2, #16]
 8008f54:	f107 0108 	add.w	r1, r7, #8
 8008f58:	4610      	mov	r0, r2
 8008f5a:	4798      	blx	r3
 8008f5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f5e:	e029      	b.n	8008fb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f60:	6839      	ldr	r1, [r7, #0]
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fa4a 	bl	80093fc <USBD_CtlError>
            err++;
 8008f68:	7afb      	ldrb	r3, [r7, #11]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f6e:	e021      	b.n	8008fb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f76:	699b      	ldr	r3, [r3, #24]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00b      	beq.n	8008f94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	7c12      	ldrb	r2, [r2, #16]
 8008f88:	f107 0108 	add.w	r1, r7, #8
 8008f8c:	4610      	mov	r0, r2
 8008f8e:	4798      	blx	r3
 8008f90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f92:	e00f      	b.n	8008fb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f94:	6839      	ldr	r1, [r7, #0]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fa30 	bl	80093fc <USBD_CtlError>
            err++;
 8008f9c:	7afb      	ldrb	r3, [r7, #11]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	72fb      	strb	r3, [r7, #11]
          break;
 8008fa2:	e007      	b.n	8008fb4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008fa4:	6839      	ldr	r1, [r7, #0]
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fa28 	bl	80093fc <USBD_CtlError>
          err++;
 8008fac:	7afb      	ldrb	r3, [r7, #11]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008fb2:	bf00      	nop
      }
      break;
 8008fb4:	e037      	b.n	8009026 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	7c1b      	ldrb	r3, [r3, #16]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d109      	bne.n	8008fd2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc6:	f107 0208 	add.w	r2, r7, #8
 8008fca:	4610      	mov	r0, r2
 8008fcc:	4798      	blx	r3
 8008fce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fd0:	e029      	b.n	8009026 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fa11 	bl	80093fc <USBD_CtlError>
        err++;
 8008fda:	7afb      	ldrb	r3, [r7, #11]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	72fb      	strb	r3, [r7, #11]
      break;
 8008fe0:	e021      	b.n	8009026 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	7c1b      	ldrb	r3, [r3, #16]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d10d      	bne.n	8009006 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff2:	f107 0208 	add.w	r2, r7, #8
 8008ff6:	4610      	mov	r0, r2
 8008ff8:	4798      	blx	r3
 8008ffa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	3301      	adds	r3, #1
 8009000:	2207      	movs	r2, #7
 8009002:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009004:	e00f      	b.n	8009026 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009006:	6839      	ldr	r1, [r7, #0]
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 f9f7 	bl	80093fc <USBD_CtlError>
        err++;
 800900e:	7afb      	ldrb	r3, [r7, #11]
 8009010:	3301      	adds	r3, #1
 8009012:	72fb      	strb	r3, [r7, #11]
      break;
 8009014:	e007      	b.n	8009026 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009016:	6839      	ldr	r1, [r7, #0]
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f9ef 	bl	80093fc <USBD_CtlError>
      err++;
 800901e:	7afb      	ldrb	r3, [r7, #11]
 8009020:	3301      	adds	r3, #1
 8009022:	72fb      	strb	r3, [r7, #11]
      break;
 8009024:	bf00      	nop
  }

  if (err != 0U)
 8009026:	7afb      	ldrb	r3, [r7, #11]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d11e      	bne.n	800906a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	88db      	ldrh	r3, [r3, #6]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d016      	beq.n	8009062 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009034:	893b      	ldrh	r3, [r7, #8]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00e      	beq.n	8009058 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	88da      	ldrh	r2, [r3, #6]
 800903e:	893b      	ldrh	r3, [r7, #8]
 8009040:	4293      	cmp	r3, r2
 8009042:	bf28      	it	cs
 8009044:	4613      	movcs	r3, r2
 8009046:	b29b      	uxth	r3, r3
 8009048:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800904a:	893b      	ldrh	r3, [r7, #8]
 800904c:	461a      	mov	r2, r3
 800904e:	68f9      	ldr	r1, [r7, #12]
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 fa44 	bl	80094de <USBD_CtlSendData>
 8009056:	e009      	b.n	800906c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009058:	6839      	ldr	r1, [r7, #0]
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f9ce 	bl	80093fc <USBD_CtlError>
 8009060:	e004      	b.n	800906c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fa95 	bl	8009592 <USBD_CtlSendStatus>
 8009068:	e000      	b.n	800906c <USBD_GetDescriptor+0x2cc>
    return;
 800906a:	bf00      	nop
  }
}
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop

08009074 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	889b      	ldrh	r3, [r3, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d131      	bne.n	80090ea <USBD_SetAddress+0x76>
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	88db      	ldrh	r3, [r3, #6]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d12d      	bne.n	80090ea <USBD_SetAddress+0x76>
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	885b      	ldrh	r3, [r3, #2]
 8009092:	2b7f      	cmp	r3, #127	; 0x7f
 8009094:	d829      	bhi.n	80090ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	885b      	ldrh	r3, [r3, #2]
 800909a:	b2db      	uxtb	r3, r3
 800909c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d104      	bne.n	80090b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80090ae:	6839      	ldr	r1, [r7, #0]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f9a3 	bl	80093fc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090b6:	e01d      	b.n	80090f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	7bfa      	ldrb	r2, [r7, #15]
 80090bc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80090c0:	7bfb      	ldrb	r3, [r7, #15]
 80090c2:	4619      	mov	r1, r3
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f00d fdad 	bl	8016c24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fa61 	bl	8009592 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d004      	beq.n	80090e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2202      	movs	r2, #2
 80090da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090de:	e009      	b.n	80090f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090e8:	e004      	b.n	80090f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80090ea:	6839      	ldr	r1, [r7, #0]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f985 	bl	80093fc <USBD_CtlError>
  }
}
 80090f2:	bf00      	nop
 80090f4:	bf00      	nop
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	885b      	ldrh	r3, [r3, #2]
 800910e:	b2da      	uxtb	r2, r3
 8009110:	4b4c      	ldr	r3, [pc, #304]	; (8009244 <USBD_SetConfig+0x148>)
 8009112:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009114:	4b4b      	ldr	r3, [pc, #300]	; (8009244 <USBD_SetConfig+0x148>)
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d905      	bls.n	8009128 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800911c:	6839      	ldr	r1, [r7, #0]
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f96c 	bl	80093fc <USBD_CtlError>
    return USBD_FAIL;
 8009124:	2303      	movs	r3, #3
 8009126:	e088      	b.n	800923a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b02      	cmp	r3, #2
 8009132:	d002      	beq.n	800913a <USBD_SetConfig+0x3e>
 8009134:	2b03      	cmp	r3, #3
 8009136:	d025      	beq.n	8009184 <USBD_SetConfig+0x88>
 8009138:	e071      	b.n	800921e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800913a:	4b42      	ldr	r3, [pc, #264]	; (8009244 <USBD_SetConfig+0x148>)
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d01c      	beq.n	800917c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009142:	4b40      	ldr	r3, [pc, #256]	; (8009244 <USBD_SetConfig+0x148>)
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	461a      	mov	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800914c:	4b3d      	ldr	r3, [pc, #244]	; (8009244 <USBD_SetConfig+0x148>)
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7ff f948 	bl	80083e8 <USBD_SetClassConfig>
 8009158:	4603      	mov	r3, r0
 800915a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800915c:	7bfb      	ldrb	r3, [r7, #15]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d004      	beq.n	800916c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f949 	bl	80093fc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800916a:	e065      	b.n	8009238 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fa10 	bl	8009592 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2203      	movs	r2, #3
 8009176:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800917a:	e05d      	b.n	8009238 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fa08 	bl	8009592 <USBD_CtlSendStatus>
      break;
 8009182:	e059      	b.n	8009238 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009184:	4b2f      	ldr	r3, [pc, #188]	; (8009244 <USBD_SetConfig+0x148>)
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d112      	bne.n	80091b2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2202      	movs	r2, #2
 8009190:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009194:	4b2b      	ldr	r3, [pc, #172]	; (8009244 <USBD_SetConfig+0x148>)
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	461a      	mov	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800919e:	4b29      	ldr	r3, [pc, #164]	; (8009244 <USBD_SetConfig+0x148>)
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7ff f93b 	bl	8008420 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f9f1 	bl	8009592 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80091b0:	e042      	b.n	8009238 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80091b2:	4b24      	ldr	r3, [pc, #144]	; (8009244 <USBD_SetConfig+0x148>)
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	461a      	mov	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d02a      	beq.n	8009216 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	4619      	mov	r1, r3
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7ff f929 	bl	8008420 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80091ce:	4b1d      	ldr	r3, [pc, #116]	; (8009244 <USBD_SetConfig+0x148>)
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	461a      	mov	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80091d8:	4b1a      	ldr	r3, [pc, #104]	; (8009244 <USBD_SetConfig+0x148>)
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	4619      	mov	r1, r3
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f7ff f902 	bl	80083e8 <USBD_SetClassConfig>
 80091e4:	4603      	mov	r3, r0
 80091e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00f      	beq.n	800920e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80091ee:	6839      	ldr	r1, [r7, #0]
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f903 	bl	80093fc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	4619      	mov	r1, r3
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7ff f90e 	bl	8008420 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2202      	movs	r2, #2
 8009208:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800920c:	e014      	b.n	8009238 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f9bf 	bl	8009592 <USBD_CtlSendStatus>
      break;
 8009214:	e010      	b.n	8009238 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f9bb 	bl	8009592 <USBD_CtlSendStatus>
      break;
 800921c:	e00c      	b.n	8009238 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800921e:	6839      	ldr	r1, [r7, #0]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f8eb 	bl	80093fc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009226:	4b07      	ldr	r3, [pc, #28]	; (8009244 <USBD_SetConfig+0x148>)
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7ff f8f7 	bl	8008420 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009232:	2303      	movs	r3, #3
 8009234:	73fb      	strb	r3, [r7, #15]
      break;
 8009236:	bf00      	nop
  }

  return ret;
 8009238:	7bfb      	ldrb	r3, [r7, #15]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	20000498 	.word	0x20000498

08009248 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	88db      	ldrh	r3, [r3, #6]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d004      	beq.n	8009264 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f8cd 	bl	80093fc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009262:	e023      	b.n	80092ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800926a:	b2db      	uxtb	r3, r3
 800926c:	2b02      	cmp	r3, #2
 800926e:	dc02      	bgt.n	8009276 <USBD_GetConfig+0x2e>
 8009270:	2b00      	cmp	r3, #0
 8009272:	dc03      	bgt.n	800927c <USBD_GetConfig+0x34>
 8009274:	e015      	b.n	80092a2 <USBD_GetConfig+0x5a>
 8009276:	2b03      	cmp	r3, #3
 8009278:	d00b      	beq.n	8009292 <USBD_GetConfig+0x4a>
 800927a:	e012      	b.n	80092a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	3308      	adds	r3, #8
 8009286:	2201      	movs	r2, #1
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f927 	bl	80094de <USBD_CtlSendData>
        break;
 8009290:	e00c      	b.n	80092ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	3304      	adds	r3, #4
 8009296:	2201      	movs	r2, #1
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f91f 	bl	80094de <USBD_CtlSendData>
        break;
 80092a0:	e004      	b.n	80092ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80092a2:	6839      	ldr	r1, [r7, #0]
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 f8a9 	bl	80093fc <USBD_CtlError>
        break;
 80092aa:	bf00      	nop
}
 80092ac:	bf00      	nop
 80092ae:	3708      	adds	r7, #8
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	3b01      	subs	r3, #1
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d81e      	bhi.n	800930a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	88db      	ldrh	r3, [r3, #6]
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d004      	beq.n	80092de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f890 	bl	80093fc <USBD_CtlError>
        break;
 80092dc:	e01a      	b.n	8009314 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2201      	movs	r2, #1
 80092e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d005      	beq.n	80092fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	f043 0202 	orr.w	r2, r3, #2
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	330c      	adds	r3, #12
 80092fe:	2202      	movs	r2, #2
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f8eb 	bl	80094de <USBD_CtlSendData>
      break;
 8009308:	e004      	b.n	8009314 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800930a:	6839      	ldr	r1, [r7, #0]
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f875 	bl	80093fc <USBD_CtlError>
      break;
 8009312:	bf00      	nop
  }
}
 8009314:	bf00      	nop
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	885b      	ldrh	r3, [r3, #2]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d106      	bne.n	800933c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2201      	movs	r2, #1
 8009332:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f92b 	bl	8009592 <USBD_CtlSendStatus>
  }
}
 800933c:	bf00      	nop
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009354:	b2db      	uxtb	r3, r3
 8009356:	3b01      	subs	r3, #1
 8009358:	2b02      	cmp	r3, #2
 800935a:	d80b      	bhi.n	8009374 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	885b      	ldrh	r3, [r3, #2]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d10c      	bne.n	800937e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 f910 	bl	8009592 <USBD_CtlSendStatus>
      }
      break;
 8009372:	e004      	b.n	800937e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f840 	bl	80093fc <USBD_CtlError>
      break;
 800937c:	e000      	b.n	8009380 <USBD_ClrFeature+0x3c>
      break;
 800937e:	bf00      	nop
  }
}
 8009380:	bf00      	nop
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	781a      	ldrb	r2, [r3, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3301      	adds	r3, #1
 80093a2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	781a      	ldrb	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	3301      	adds	r3, #1
 80093b0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f7ff fabb 	bl	800892e <SWAPBYTE>
 80093b8:	4603      	mov	r3, r0
 80093ba:	461a      	mov	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	3301      	adds	r3, #1
 80093c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	3301      	adds	r3, #1
 80093ca:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f7ff faae 	bl	800892e <SWAPBYTE>
 80093d2:	4603      	mov	r3, r0
 80093d4:	461a      	mov	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	3301      	adds	r3, #1
 80093de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	3301      	adds	r3, #1
 80093e4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f7ff faa1 	bl	800892e <SWAPBYTE>
 80093ec:	4603      	mov	r3, r0
 80093ee:	461a      	mov	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	80da      	strh	r2, [r3, #6]
}
 80093f4:	bf00      	nop
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009406:	2180      	movs	r1, #128	; 0x80
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f00d fba1 	bl	8016b50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800940e:	2100      	movs	r1, #0
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f00d fb9d 	bl	8016b50 <USBD_LL_StallEP>
}
 8009416:	bf00      	nop
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b086      	sub	sp, #24
 8009422:	af00      	add	r7, sp, #0
 8009424:	60f8      	str	r0, [r7, #12]
 8009426:	60b9      	str	r1, [r7, #8]
 8009428:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800942a:	2300      	movs	r3, #0
 800942c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d036      	beq.n	80094a2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009438:	6938      	ldr	r0, [r7, #16]
 800943a:	f000 f836 	bl	80094aa <USBD_GetLen>
 800943e:	4603      	mov	r3, r0
 8009440:	3301      	adds	r3, #1
 8009442:	b29b      	uxth	r3, r3
 8009444:	005b      	lsls	r3, r3, #1
 8009446:	b29a      	uxth	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800944c:	7dfb      	ldrb	r3, [r7, #23]
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	4413      	add	r3, r2
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	7812      	ldrb	r2, [r2, #0]
 8009456:	701a      	strb	r2, [r3, #0]
  idx++;
 8009458:	7dfb      	ldrb	r3, [r7, #23]
 800945a:	3301      	adds	r3, #1
 800945c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800945e:	7dfb      	ldrb	r3, [r7, #23]
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	4413      	add	r3, r2
 8009464:	2203      	movs	r2, #3
 8009466:	701a      	strb	r2, [r3, #0]
  idx++;
 8009468:	7dfb      	ldrb	r3, [r7, #23]
 800946a:	3301      	adds	r3, #1
 800946c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800946e:	e013      	b.n	8009498 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009470:	7dfb      	ldrb	r3, [r7, #23]
 8009472:	68ba      	ldr	r2, [r7, #8]
 8009474:	4413      	add	r3, r2
 8009476:	693a      	ldr	r2, [r7, #16]
 8009478:	7812      	ldrb	r2, [r2, #0]
 800947a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	3301      	adds	r3, #1
 8009480:	613b      	str	r3, [r7, #16]
    idx++;
 8009482:	7dfb      	ldrb	r3, [r7, #23]
 8009484:	3301      	adds	r3, #1
 8009486:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009488:	7dfb      	ldrb	r3, [r7, #23]
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	4413      	add	r3, r2
 800948e:	2200      	movs	r2, #0
 8009490:	701a      	strb	r2, [r3, #0]
    idx++;
 8009492:	7dfb      	ldrb	r3, [r7, #23]
 8009494:	3301      	adds	r3, #1
 8009496:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1e7      	bne.n	8009470 <USBD_GetString+0x52>
 80094a0:	e000      	b.n	80094a4 <USBD_GetString+0x86>
    return;
 80094a2:	bf00      	nop
  }
}
 80094a4:	3718      	adds	r7, #24
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b085      	sub	sp, #20
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80094b2:	2300      	movs	r3, #0
 80094b4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80094ba:	e005      	b.n	80094c8 <USBD_GetLen+0x1e>
  {
    len++;
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
 80094be:	3301      	adds	r3, #1
 80094c0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	3301      	adds	r3, #1
 80094c6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1f5      	bne.n	80094bc <USBD_GetLen+0x12>
  }

  return len;
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3714      	adds	r7, #20
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr

080094de <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b084      	sub	sp, #16
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	60f8      	str	r0, [r7, #12]
 80094e6:	60b9      	str	r1, [r7, #8]
 80094e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2202      	movs	r2, #2
 80094ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	68ba      	ldr	r2, [r7, #8]
 8009502:	2100      	movs	r1, #0
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f00d fbac 	bl	8016c62 <USBD_LL_Transmit>

  return USBD_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	2100      	movs	r1, #0
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f00d fb9b 	bl	8016c62 <USBD_LL_Transmit>

  return USBD_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b084      	sub	sp, #16
 800953a:	af00      	add	r7, sp, #0
 800953c:	60f8      	str	r0, [r7, #12]
 800953e:	60b9      	str	r1, [r7, #8]
 8009540:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2203      	movs	r2, #3
 8009546:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	2100      	movs	r1, #0
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f00d fb9f 	bl	8016ca4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3710      	adds	r7, #16
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	2100      	movs	r1, #0
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	f00d fb8e 	bl	8016ca4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b082      	sub	sp, #8
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2204      	movs	r2, #4
 800959e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095a2:	2300      	movs	r3, #0
 80095a4:	2200      	movs	r2, #0
 80095a6:	2100      	movs	r1, #0
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f00d fb5a 	bl	8016c62 <USBD_LL_Transmit>

  return USBD_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2205      	movs	r2, #5
 80095c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095c8:	2300      	movs	r3, #0
 80095ca:	2200      	movs	r2, #0
 80095cc:	2100      	movs	r1, #0
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f00d fb68 	bl	8016ca4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80095de:	b480      	push	{r7}
 80095e0:	b085      	sub	sp, #20
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	4603      	mov	r3, r0
 80095e6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80095e8:	2300      	movs	r3, #0
 80095ea:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80095ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80095f0:	2b84      	cmp	r3, #132	; 0x84
 80095f2:	d005      	beq.n	8009600 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80095f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	4413      	add	r3, r2
 80095fc:	3303      	adds	r3, #3
 80095fe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009600:	68fb      	ldr	r3, [r7, #12]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3714      	adds	r7, #20
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800960e:	b480      	push	{r7}
 8009610:	b083      	sub	sp, #12
 8009612:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009614:	f3ef 8305 	mrs	r3, IPSR
 8009618:	607b      	str	r3, [r7, #4]
  return(result);
 800961a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800961c:	2b00      	cmp	r3, #0
 800961e:	bf14      	ite	ne
 8009620:	2301      	movne	r3, #1
 8009622:	2300      	moveq	r3, #0
 8009624:	b2db      	uxtb	r3, r3
}
 8009626:	4618      	mov	r0, r3
 8009628:	370c      	adds	r7, #12
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr

08009632 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009636:	f001 fc5d 	bl	800aef4 <vTaskStartScheduler>
  
  return osOK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	bd80      	pop	{r7, pc}

08009640 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009644:	f7ff ffe3 	bl	800960e <inHandlerMode>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d003      	beq.n	8009656 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800964e:	f001 fd6b 	bl	800b128 <xTaskGetTickCountFromISR>
 8009652:	4603      	mov	r3, r0
 8009654:	e002      	b.n	800965c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009656:	f001 fd57 	bl	800b108 <xTaskGetTickCount>
 800965a:	4603      	mov	r3, r0
  }
}
 800965c:	4618      	mov	r0, r3
 800965e:	bd80      	pop	{r7, pc}

08009660 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009662:	b089      	sub	sp, #36	; 0x24
 8009664:	af04      	add	r7, sp, #16
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d020      	beq.n	80096b4 <osThreadCreate+0x54>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d01c      	beq.n	80096b4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	685c      	ldr	r4, [r3, #4]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681d      	ldr	r5, [r3, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	691e      	ldr	r6, [r3, #16]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800968c:	4618      	mov	r0, r3
 800968e:	f7ff ffa6 	bl	80095de <makeFreeRtosPriority>
 8009692:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	695b      	ldr	r3, [r3, #20]
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800969c:	9202      	str	r2, [sp, #8]
 800969e:	9301      	str	r3, [sp, #4]
 80096a0:	9100      	str	r1, [sp, #0]
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	4632      	mov	r2, r6
 80096a6:	4629      	mov	r1, r5
 80096a8:	4620      	mov	r0, r4
 80096aa:	f001 fa5b 	bl	800ab64 <xTaskCreateStatic>
 80096ae:	4603      	mov	r3, r0
 80096b0:	60fb      	str	r3, [r7, #12]
 80096b2:	e01c      	b.n	80096ee <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685c      	ldr	r4, [r3, #4]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80096c0:	b29e      	uxth	r6, r3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7ff ff88 	bl	80095de <makeFreeRtosPriority>
 80096ce:	4602      	mov	r2, r0
 80096d0:	f107 030c 	add.w	r3, r7, #12
 80096d4:	9301      	str	r3, [sp, #4]
 80096d6:	9200      	str	r2, [sp, #0]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	4632      	mov	r2, r6
 80096dc:	4629      	mov	r1, r5
 80096de:	4620      	mov	r0, r4
 80096e0:	f001 fa9d 	bl	800ac1e <xTaskCreate>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d001      	beq.n	80096ee <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80096ea:	2300      	movs	r3, #0
 80096ec:	e000      	b.n	80096f0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80096ee:	68fb      	ldr	r3, [r7, #12]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3714      	adds	r7, #20
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096f8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d001      	beq.n	800970e <osDelay+0x16>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	e000      	b.n	8009710 <osDelay+0x18>
 800970e:	2301      	movs	r3, #1
 8009710:	4618      	mov	r0, r3
 8009712:	f001 fbbb 	bl	800ae8c <vTaskDelay>
  
  return osOK;
 8009716:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d007      	beq.n	8009740 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	4619      	mov	r1, r3
 8009736:	2001      	movs	r0, #1
 8009738:	f000 fc3f 	bl	8009fba <xQueueCreateMutexStatic>
 800973c:	4603      	mov	r3, r0
 800973e:	e003      	b.n	8009748 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009740:	2001      	movs	r0, #1
 8009742:	f000 fc22 	bl	8009f8a <xQueueCreateMutex>
 8009746:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009748:	4618      	mov	r0, r3
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800975a:	2300      	movs	r3, #0
 800975c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d101      	bne.n	8009768 <osMutexWait+0x18>
    return osErrorParameter;
 8009764:	2380      	movs	r3, #128	; 0x80
 8009766:	e03a      	b.n	80097de <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009768:	2300      	movs	r3, #0
 800976a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009772:	d103      	bne.n	800977c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009774:	f04f 33ff 	mov.w	r3, #4294967295
 8009778:	60fb      	str	r3, [r7, #12]
 800977a:	e009      	b.n	8009790 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d006      	beq.n	8009790 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d101      	bne.n	8009790 <osMutexWait+0x40>
      ticks = 1;
 800978c:	2301      	movs	r3, #1
 800978e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009790:	f7ff ff3d 	bl	800960e <inHandlerMode>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d017      	beq.n	80097ca <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800979a:	f107 0308 	add.w	r3, r7, #8
 800979e:	461a      	mov	r2, r3
 80097a0:	2100      	movs	r1, #0
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f001 f836 	bl	800a814 <xQueueReceiveFromISR>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d001      	beq.n	80097b2 <osMutexWait+0x62>
      return osErrorOS;
 80097ae:	23ff      	movs	r3, #255	; 0xff
 80097b0:	e015      	b.n	80097de <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d011      	beq.n	80097dc <osMutexWait+0x8c>
 80097b8:	4b0b      	ldr	r3, [pc, #44]	; (80097e8 <osMutexWait+0x98>)
 80097ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	e008      	b.n	80097dc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80097ca:	68f9      	ldr	r1, [r7, #12]
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 ff15 	bl	800a5fc <xQueueSemaphoreTake>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d001      	beq.n	80097dc <osMutexWait+0x8c>
    return osErrorOS;
 80097d8:	23ff      	movs	r3, #255	; 0xff
 80097da:	e000      	b.n	80097de <osMutexWait+0x8e>
  }
  
  return osOK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	e000ed04 	.word	0xe000ed04

080097ec <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80097f8:	2300      	movs	r3, #0
 80097fa:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80097fc:	f7ff ff07 	bl	800960e <inHandlerMode>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d016      	beq.n	8009834 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009806:	f107 0308 	add.w	r3, r7, #8
 800980a:	4619      	mov	r1, r3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fd88 	bl	800a322 <xQueueGiveFromISR>
 8009812:	4603      	mov	r3, r0
 8009814:	2b01      	cmp	r3, #1
 8009816:	d001      	beq.n	800981c <osMutexRelease+0x30>
      return osErrorOS;
 8009818:	23ff      	movs	r3, #255	; 0xff
 800981a:	e017      	b.n	800984c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d013      	beq.n	800984a <osMutexRelease+0x5e>
 8009822:	4b0c      	ldr	r3, [pc, #48]	; (8009854 <osMutexRelease+0x68>)
 8009824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	f3bf 8f6f 	isb	sy
 8009832:	e00a      	b.n	800984a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009834:	2300      	movs	r3, #0
 8009836:	2200      	movs	r2, #0
 8009838:	2100      	movs	r1, #0
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fbd8 	bl	8009ff0 <xQueueGenericSend>
 8009840:	4603      	mov	r3, r0
 8009842:	2b01      	cmp	r3, #1
 8009844:	d001      	beq.n	800984a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009846:	23ff      	movs	r3, #255	; 0xff
 8009848:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800984a:	68fb      	ldr	r3, [r7, #12]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	e000ed04 	.word	0xe000ed04

08009858 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af02      	add	r7, sp, #8
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00f      	beq.n	800988a <osSemaphoreCreate+0x32>
    if (count == 1) {
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d10a      	bne.n	8009886 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	2203      	movs	r2, #3
 8009876:	9200      	str	r2, [sp, #0]
 8009878:	2200      	movs	r2, #0
 800987a:	2100      	movs	r1, #0
 800987c:	2001      	movs	r0, #1
 800987e:	f000 fa99 	bl	8009db4 <xQueueGenericCreateStatic>
 8009882:	4603      	mov	r3, r0
 8009884:	e016      	b.n	80098b4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009886:	2300      	movs	r3, #0
 8009888:	e014      	b.n	80098b4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d110      	bne.n	80098b2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009890:	2203      	movs	r2, #3
 8009892:	2100      	movs	r1, #0
 8009894:	2001      	movs	r0, #1
 8009896:	f000 fb05 	bl	8009ea4 <xQueueGenericCreate>
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d005      	beq.n	80098ae <osSemaphoreCreate+0x56>
 80098a2:	2300      	movs	r3, #0
 80098a4:	2200      	movs	r2, #0
 80098a6:	2100      	movs	r1, #0
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f000 fba1 	bl	8009ff0 <xQueueGenericSend>
      return sema;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	e000      	b.n	80098b4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80098b2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80098c6:	2300      	movs	r3, #0
 80098c8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80098d0:	2380      	movs	r3, #128	; 0x80
 80098d2:	e03a      	b.n	800994a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80098d4:	2300      	movs	r3, #0
 80098d6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098de:	d103      	bne.n	80098e8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80098e0:	f04f 33ff 	mov.w	r3, #4294967295
 80098e4:	60fb      	str	r3, [r7, #12]
 80098e6:	e009      	b.n	80098fc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d006      	beq.n	80098fc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d101      	bne.n	80098fc <osSemaphoreWait+0x40>
      ticks = 1;
 80098f8:	2301      	movs	r3, #1
 80098fa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80098fc:	f7ff fe87 	bl	800960e <inHandlerMode>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d017      	beq.n	8009936 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009906:	f107 0308 	add.w	r3, r7, #8
 800990a:	461a      	mov	r2, r3
 800990c:	2100      	movs	r1, #0
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 ff80 	bl	800a814 <xQueueReceiveFromISR>
 8009914:	4603      	mov	r3, r0
 8009916:	2b01      	cmp	r3, #1
 8009918:	d001      	beq.n	800991e <osSemaphoreWait+0x62>
      return osErrorOS;
 800991a:	23ff      	movs	r3, #255	; 0xff
 800991c:	e015      	b.n	800994a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d011      	beq.n	8009948 <osSemaphoreWait+0x8c>
 8009924:	4b0b      	ldr	r3, [pc, #44]	; (8009954 <osSemaphoreWait+0x98>)
 8009926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800992a:	601a      	str	r2, [r3, #0]
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	e008      	b.n	8009948 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009936:	68f9      	ldr	r1, [r7, #12]
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fe5f 	bl	800a5fc <xQueueSemaphoreTake>
 800993e:	4603      	mov	r3, r0
 8009940:	2b01      	cmp	r3, #1
 8009942:	d001      	beq.n	8009948 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009944:	23ff      	movs	r3, #255	; 0xff
 8009946:	e000      	b.n	800994a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	e000ed04 	.word	0xe000ed04

08009958 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009960:	2300      	movs	r3, #0
 8009962:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009964:	2300      	movs	r3, #0
 8009966:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009968:	f7ff fe51 	bl	800960e <inHandlerMode>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d016      	beq.n	80099a0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009972:	f107 0308 	add.w	r3, r7, #8
 8009976:	4619      	mov	r1, r3
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fcd2 	bl	800a322 <xQueueGiveFromISR>
 800997e:	4603      	mov	r3, r0
 8009980:	2b01      	cmp	r3, #1
 8009982:	d001      	beq.n	8009988 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009984:	23ff      	movs	r3, #255	; 0xff
 8009986:	e017      	b.n	80099b8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d013      	beq.n	80099b6 <osSemaphoreRelease+0x5e>
 800998e:	4b0c      	ldr	r3, [pc, #48]	; (80099c0 <osSemaphoreRelease+0x68>)
 8009990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009994:	601a      	str	r2, [r3, #0]
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	e00a      	b.n	80099b6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80099a0:	2300      	movs	r3, #0
 80099a2:	2200      	movs	r2, #0
 80099a4:	2100      	movs	r1, #0
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fb22 	bl	8009ff0 <xQueueGenericSend>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d001      	beq.n	80099b6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80099b2:	23ff      	movs	r3, #255	; 0xff
 80099b4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80099b6:	68fb      	ldr	r3, [r7, #12]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	e000ed04 	.word	0xe000ed04

080099c4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80099c4:	b590      	push	{r4, r7, lr}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af02      	add	r7, sp, #8
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d011      	beq.n	80099fa <osMessageCreate+0x36>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00d      	beq.n	80099fa <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6818      	ldr	r0, [r3, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6859      	ldr	r1, [r3, #4]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	689a      	ldr	r2, [r3, #8]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	2400      	movs	r4, #0
 80099f0:	9400      	str	r4, [sp, #0]
 80099f2:	f000 f9df 	bl	8009db4 <xQueueGenericCreateStatic>
 80099f6:	4603      	mov	r3, r0
 80099f8:	e008      	b.n	8009a0c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6818      	ldr	r0, [r3, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	4619      	mov	r1, r3
 8009a06:	f000 fa4d 	bl	8009ea4 <xQueueGenericCreate>
 8009a0a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd90      	pop	{r4, r7, pc}

08009a14 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b086      	sub	sp, #24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009a20:	2300      	movs	r3, #0
 8009a22:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d101      	bne.n	8009a32 <osMessagePut+0x1e>
    ticks = 1;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009a32:	f7ff fdec 	bl	800960e <inHandlerMode>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d018      	beq.n	8009a6e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009a3c:	f107 0210 	add.w	r2, r7, #16
 8009a40:	f107 0108 	add.w	r1, r7, #8
 8009a44:	2300      	movs	r3, #0
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f000 fbd0 	bl	800a1ec <xQueueGenericSendFromISR>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d001      	beq.n	8009a56 <osMessagePut+0x42>
      return osErrorOS;
 8009a52:	23ff      	movs	r3, #255	; 0xff
 8009a54:	e018      	b.n	8009a88 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d014      	beq.n	8009a86 <osMessagePut+0x72>
 8009a5c:	4b0c      	ldr	r3, [pc, #48]	; (8009a90 <osMessagePut+0x7c>)
 8009a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a62:	601a      	str	r2, [r3, #0]
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	f3bf 8f6f 	isb	sy
 8009a6c:	e00b      	b.n	8009a86 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009a6e:	f107 0108 	add.w	r1, r7, #8
 8009a72:	2300      	movs	r3, #0
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f000 faba 	bl	8009ff0 <xQueueGenericSend>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d001      	beq.n	8009a86 <osMessagePut+0x72>
      return osErrorOS;
 8009a82:	23ff      	movs	r3, #255	; 0xff
 8009a84:	e000      	b.n	8009a88 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3718      	adds	r7, #24
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	e000ed04 	.word	0xe000ed04

08009a94 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009a94:	b590      	push	{r4, r7, lr}
 8009a96:	b08b      	sub	sp, #44	; 0x2c
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10a      	bne.n	8009ac4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009aae:	2380      	movs	r3, #128	; 0x80
 8009ab0:	617b      	str	r3, [r7, #20]
    return event;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	461c      	mov	r4, r3
 8009ab6:	f107 0314 	add.w	r3, r7, #20
 8009aba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009abe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009ac2:	e054      	b.n	8009b6e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad2:	d103      	bne.n	8009adc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8009ada:	e009      	b.n	8009af0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d006      	beq.n	8009af0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d101      	bne.n	8009af0 <osMessageGet+0x5c>
      ticks = 1;
 8009aec:	2301      	movs	r3, #1
 8009aee:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009af0:	f7ff fd8d 	bl	800960e <inHandlerMode>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d01c      	beq.n	8009b34 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009afa:	f107 0220 	add.w	r2, r7, #32
 8009afe:	f107 0314 	add.w	r3, r7, #20
 8009b02:	3304      	adds	r3, #4
 8009b04:	4619      	mov	r1, r3
 8009b06:	68b8      	ldr	r0, [r7, #8]
 8009b08:	f000 fe84 	bl	800a814 <xQueueReceiveFromISR>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d102      	bne.n	8009b18 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009b12:	2310      	movs	r3, #16
 8009b14:	617b      	str	r3, [r7, #20]
 8009b16:	e001      	b.n	8009b1c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009b1c:	6a3b      	ldr	r3, [r7, #32]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d01d      	beq.n	8009b5e <osMessageGet+0xca>
 8009b22:	4b15      	ldr	r3, [pc, #84]	; (8009b78 <osMessageGet+0xe4>)
 8009b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b28:	601a      	str	r2, [r3, #0]
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	f3bf 8f6f 	isb	sy
 8009b32:	e014      	b.n	8009b5e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009b34:	f107 0314 	add.w	r3, r7, #20
 8009b38:	3304      	adds	r3, #4
 8009b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	68b8      	ldr	r0, [r7, #8]
 8009b40:	f000 fc7c 	bl	800a43c <xQueueReceive>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d102      	bne.n	8009b50 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009b4a:	2310      	movs	r3, #16
 8009b4c:	617b      	str	r3, [r7, #20]
 8009b4e:	e006      	b.n	8009b5e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d101      	bne.n	8009b5a <osMessageGet+0xc6>
 8009b56:	2300      	movs	r3, #0
 8009b58:	e000      	b.n	8009b5c <osMessageGet+0xc8>
 8009b5a:	2340      	movs	r3, #64	; 0x40
 8009b5c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	461c      	mov	r4, r3
 8009b62:	f107 0314 	add.w	r3, r7, #20
 8009b66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	372c      	adds	r7, #44	; 0x2c
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd90      	pop	{r4, r7, pc}
 8009b76:	bf00      	nop
 8009b78:	e000ed04 	.word	0xe000ed04

08009b7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f103 0208 	add.w	r2, r3, #8
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f04f 32ff 	mov.w	r2, #4294967295
 8009b94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f103 0208 	add.w	r2, r3, #8
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f103 0208 	add.w	r2, r3, #8
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009bca:	bf00      	nop
 8009bcc:	370c      	adds	r7, #12
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr

08009bd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b085      	sub	sp, #20
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
 8009bde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	689a      	ldr	r2, [r3, #8]
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	683a      	ldr	r2, [r7, #0]
 8009bfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	1c5a      	adds	r2, r3, #1
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	601a      	str	r2, [r3, #0]
}
 8009c12:	bf00      	nop
 8009c14:	3714      	adds	r7, #20
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr

08009c1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c1e:	b480      	push	{r7}
 8009c20:	b085      	sub	sp, #20
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
 8009c26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c34:	d103      	bne.n	8009c3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	691b      	ldr	r3, [r3, #16]
 8009c3a:	60fb      	str	r3, [r7, #12]
 8009c3c:	e00c      	b.n	8009c58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	3308      	adds	r3, #8
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	e002      	b.n	8009c4c <vListInsert+0x2e>
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68ba      	ldr	r2, [r7, #8]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d2f6      	bcs.n	8009c46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	685a      	ldr	r2, [r3, #4]
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	683a      	ldr	r2, [r7, #0]
 8009c66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	683a      	ldr	r2, [r7, #0]
 8009c72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	1c5a      	adds	r2, r3, #1
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	601a      	str	r2, [r3, #0]
}
 8009c84:	bf00      	nop
 8009c86:	3714      	adds	r7, #20
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	6892      	ldr	r2, [r2, #8]
 8009ca6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	6852      	ldr	r2, [r2, #4]
 8009cb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d103      	bne.n	8009cc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	689a      	ldr	r2, [r3, #8]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	1e5a      	subs	r2, r3, #1
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3714      	adds	r7, #20
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10a      	bne.n	8009d0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfc:	f383 8811 	msr	BASEPRI, r3
 8009d00:	f3bf 8f6f 	isb	sy
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009d0a:	bf00      	nop
 8009d0c:	e7fe      	b.n	8009d0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d0e:	f002 f861 	bl	800bdd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d1a:	68f9      	ldr	r1, [r7, #12]
 8009d1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d1e:	fb01 f303 	mul.w	r3, r1, r3
 8009d22:	441a      	add	r2, r3
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	68f9      	ldr	r1, [r7, #12]
 8009d42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d44:	fb01 f303 	mul.w	r3, r1, r3
 8009d48:	441a      	add	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	22ff      	movs	r2, #255	; 0xff
 8009d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	22ff      	movs	r2, #255	; 0xff
 8009d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d114      	bne.n	8009d8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d01a      	beq.n	8009da2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	3310      	adds	r3, #16
 8009d70:	4618      	mov	r0, r3
 8009d72:	f001 fb23 	bl	800b3bc <xTaskRemoveFromEventList>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d012      	beq.n	8009da2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d7c:	4b0c      	ldr	r3, [pc, #48]	; (8009db0 <xQueueGenericReset+0xcc>)
 8009d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d82:	601a      	str	r2, [r3, #0]
 8009d84:	f3bf 8f4f 	dsb	sy
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	e009      	b.n	8009da2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	3310      	adds	r3, #16
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7ff fef2 	bl	8009b7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	3324      	adds	r3, #36	; 0x24
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7ff feed 	bl	8009b7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009da2:	f002 f847 	bl	800be34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009da6:	2301      	movs	r3, #1
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	e000ed04 	.word	0xe000ed04

08009db4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b08e      	sub	sp, #56	; 0x38
 8009db8:	af02      	add	r7, sp, #8
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
 8009dc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10a      	bne.n	8009dde <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009dda:	bf00      	nop
 8009ddc:	e7fe      	b.n	8009ddc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10a      	bne.n	8009dfa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009df6:	bf00      	nop
 8009df8:	e7fe      	b.n	8009df8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d002      	beq.n	8009e06 <xQueueGenericCreateStatic+0x52>
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d001      	beq.n	8009e0a <xQueueGenericCreateStatic+0x56>
 8009e06:	2301      	movs	r3, #1
 8009e08:	e000      	b.n	8009e0c <xQueueGenericCreateStatic+0x58>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10a      	bne.n	8009e26 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e14:	f383 8811 	msr	BASEPRI, r3
 8009e18:	f3bf 8f6f 	isb	sy
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	623b      	str	r3, [r7, #32]
}
 8009e22:	bf00      	nop
 8009e24:	e7fe      	b.n	8009e24 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d102      	bne.n	8009e32 <xQueueGenericCreateStatic+0x7e>
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d101      	bne.n	8009e36 <xQueueGenericCreateStatic+0x82>
 8009e32:	2301      	movs	r3, #1
 8009e34:	e000      	b.n	8009e38 <xQueueGenericCreateStatic+0x84>
 8009e36:	2300      	movs	r3, #0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10a      	bne.n	8009e52 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	61fb      	str	r3, [r7, #28]
}
 8009e4e:	bf00      	nop
 8009e50:	e7fe      	b.n	8009e50 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e52:	2348      	movs	r3, #72	; 0x48
 8009e54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	2b48      	cmp	r3, #72	; 0x48
 8009e5a:	d00a      	beq.n	8009e72 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	61bb      	str	r3, [r7, #24]
}
 8009e6e:	bf00      	nop
 8009e70:	e7fe      	b.n	8009e70 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009e72:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00d      	beq.n	8009e9a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e80:	2201      	movs	r2, #1
 8009e82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8c:	9300      	str	r3, [sp, #0]
 8009e8e:	4613      	mov	r3, r2
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	68b9      	ldr	r1, [r7, #8]
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f000 f83f 	bl	8009f18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3730      	adds	r7, #48	; 0x30
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b08a      	sub	sp, #40	; 0x28
 8009ea8:	af02      	add	r7, sp, #8
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10a      	bne.n	8009ece <xQueueGenericCreate+0x2a>
	__asm volatile
 8009eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebc:	f383 8811 	msr	BASEPRI, r3
 8009ec0:	f3bf 8f6f 	isb	sy
 8009ec4:	f3bf 8f4f 	dsb	sy
 8009ec8:	613b      	str	r3, [r7, #16]
}
 8009eca:	bf00      	nop
 8009ecc:	e7fe      	b.n	8009ecc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	fb02 f303 	mul.w	r3, r2, r3
 8009ed6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	3348      	adds	r3, #72	; 0x48
 8009edc:	4618      	mov	r0, r3
 8009ede:	f002 f89b 	bl	800c018 <pvPortMalloc>
 8009ee2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009ee4:	69bb      	ldr	r3, [r7, #24]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d011      	beq.n	8009f0e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	3348      	adds	r3, #72	; 0x48
 8009ef2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009efc:	79fa      	ldrb	r2, [r7, #7]
 8009efe:	69bb      	ldr	r3, [r7, #24]
 8009f00:	9300      	str	r3, [sp, #0]
 8009f02:	4613      	mov	r3, r2
 8009f04:	697a      	ldr	r2, [r7, #20]
 8009f06:	68b9      	ldr	r1, [r7, #8]
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f000 f805 	bl	8009f18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f0e:	69bb      	ldr	r3, [r7, #24]
	}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3720      	adds	r7, #32
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]
 8009f24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d103      	bne.n	8009f34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	69ba      	ldr	r2, [r7, #24]
 8009f30:	601a      	str	r2, [r3, #0]
 8009f32:	e002      	b.n	8009f3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f46:	2101      	movs	r1, #1
 8009f48:	69b8      	ldr	r0, [r7, #24]
 8009f4a:	f7ff fecb 	bl	8009ce4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f4e:	bf00      	nop
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b082      	sub	sp, #8
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00e      	beq.n	8009f82 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009f76:	2300      	movs	r3, #0
 8009f78:	2200      	movs	r2, #0
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 f837 	bl	8009ff0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009f82:	bf00      	nop
 8009f84:	3708      	adds	r7, #8
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b086      	sub	sp, #24
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	4603      	mov	r3, r0
 8009f92:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009f94:	2301      	movs	r3, #1
 8009f96:	617b      	str	r3, [r7, #20]
 8009f98:	2300      	movs	r3, #0
 8009f9a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009f9c:	79fb      	ldrb	r3, [r7, #7]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	6939      	ldr	r1, [r7, #16]
 8009fa2:	6978      	ldr	r0, [r7, #20]
 8009fa4:	f7ff ff7e 	bl	8009ea4 <xQueueGenericCreate>
 8009fa8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f7ff ffd3 	bl	8009f56 <prvInitialiseMutex>

		return xNewQueue;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
	}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3718      	adds	r7, #24
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b088      	sub	sp, #32
 8009fbe:	af02      	add	r7, sp, #8
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	6039      	str	r1, [r7, #0]
 8009fc4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	617b      	str	r3, [r7, #20]
 8009fca:	2300      	movs	r3, #0
 8009fcc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009fce:	79fb      	ldrb	r3, [r7, #7]
 8009fd0:	9300      	str	r3, [sp, #0]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	6939      	ldr	r1, [r7, #16]
 8009fd8:	6978      	ldr	r0, [r7, #20]
 8009fda:	f7ff feeb 	bl	8009db4 <xQueueGenericCreateStatic>
 8009fde:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f7ff ffb8 	bl	8009f56 <prvInitialiseMutex>

		return xNewQueue;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
	}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3718      	adds	r7, #24
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08e      	sub	sp, #56	; 0x38
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
 8009ffc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009ffe:	2300      	movs	r3, #0
 800a000:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10a      	bne.n	800a022 <xQueueGenericSend+0x32>
	__asm volatile
 800a00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a01e:	bf00      	nop
 800a020:	e7fe      	b.n	800a020 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d103      	bne.n	800a030 <xQueueGenericSend+0x40>
 800a028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d101      	bne.n	800a034 <xQueueGenericSend+0x44>
 800a030:	2301      	movs	r3, #1
 800a032:	e000      	b.n	800a036 <xQueueGenericSend+0x46>
 800a034:	2300      	movs	r3, #0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10a      	bne.n	800a050 <xQueueGenericSend+0x60>
	__asm volatile
 800a03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03e:	f383 8811 	msr	BASEPRI, r3
 800a042:	f3bf 8f6f 	isb	sy
 800a046:	f3bf 8f4f 	dsb	sy
 800a04a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a04c:	bf00      	nop
 800a04e:	e7fe      	b.n	800a04e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	2b02      	cmp	r3, #2
 800a054:	d103      	bne.n	800a05e <xQueueGenericSend+0x6e>
 800a056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d101      	bne.n	800a062 <xQueueGenericSend+0x72>
 800a05e:	2301      	movs	r3, #1
 800a060:	e000      	b.n	800a064 <xQueueGenericSend+0x74>
 800a062:	2300      	movs	r3, #0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10a      	bne.n	800a07e <xQueueGenericSend+0x8e>
	__asm volatile
 800a068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06c:	f383 8811 	msr	BASEPRI, r3
 800a070:	f3bf 8f6f 	isb	sy
 800a074:	f3bf 8f4f 	dsb	sy
 800a078:	623b      	str	r3, [r7, #32]
}
 800a07a:	bf00      	nop
 800a07c:	e7fe      	b.n	800a07c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a07e:	f001 fb59 	bl	800b734 <xTaskGetSchedulerState>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d102      	bne.n	800a08e <xQueueGenericSend+0x9e>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <xQueueGenericSend+0xa2>
 800a08e:	2301      	movs	r3, #1
 800a090:	e000      	b.n	800a094 <xQueueGenericSend+0xa4>
 800a092:	2300      	movs	r3, #0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10a      	bne.n	800a0ae <xQueueGenericSend+0xbe>
	__asm volatile
 800a098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09c:	f383 8811 	msr	BASEPRI, r3
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	f3bf 8f4f 	dsb	sy
 800a0a8:	61fb      	str	r3, [r7, #28]
}
 800a0aa:	bf00      	nop
 800a0ac:	e7fe      	b.n	800a0ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0ae:	f001 fe91 	bl	800bdd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d302      	bcc.n	800a0c4 <xQueueGenericSend+0xd4>
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d129      	bne.n	800a118 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0c4:	683a      	ldr	r2, [r7, #0]
 800a0c6:	68b9      	ldr	r1, [r7, #8]
 800a0c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0ca:	f000 fc3b 	bl	800a944 <prvCopyDataToQueue>
 800a0ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d010      	beq.n	800a0fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0da:	3324      	adds	r3, #36	; 0x24
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f001 f96d 	bl	800b3bc <xTaskRemoveFromEventList>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d013      	beq.n	800a110 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a0e8:	4b3f      	ldr	r3, [pc, #252]	; (800a1e8 <xQueueGenericSend+0x1f8>)
 800a0ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ee:	601a      	str	r2, [r3, #0]
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	e00a      	b.n	800a110 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d007      	beq.n	800a110 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a100:	4b39      	ldr	r3, [pc, #228]	; (800a1e8 <xQueueGenericSend+0x1f8>)
 800a102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a106:	601a      	str	r2, [r3, #0]
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a110:	f001 fe90 	bl	800be34 <vPortExitCritical>
				return pdPASS;
 800a114:	2301      	movs	r3, #1
 800a116:	e063      	b.n	800a1e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d103      	bne.n	800a126 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a11e:	f001 fe89 	bl	800be34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a122:	2300      	movs	r3, #0
 800a124:	e05c      	b.n	800a1e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d106      	bne.n	800a13a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a12c:	f107 0314 	add.w	r3, r7, #20
 800a130:	4618      	mov	r0, r3
 800a132:	f001 f9a5 	bl	800b480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a136:	2301      	movs	r3, #1
 800a138:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a13a:	f001 fe7b 	bl	800be34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a13e:	f000 ff39 	bl	800afb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a142:	f001 fe47 	bl	800bdd4 <vPortEnterCritical>
 800a146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a148:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a14c:	b25b      	sxtb	r3, r3
 800a14e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a152:	d103      	bne.n	800a15c <xQueueGenericSend+0x16c>
 800a154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a156:	2200      	movs	r2, #0
 800a158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a162:	b25b      	sxtb	r3, r3
 800a164:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a168:	d103      	bne.n	800a172 <xQueueGenericSend+0x182>
 800a16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16c:	2200      	movs	r2, #0
 800a16e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a172:	f001 fe5f 	bl	800be34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a176:	1d3a      	adds	r2, r7, #4
 800a178:	f107 0314 	add.w	r3, r7, #20
 800a17c:	4611      	mov	r1, r2
 800a17e:	4618      	mov	r0, r3
 800a180:	f001 f994 	bl	800b4ac <xTaskCheckForTimeOut>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d124      	bne.n	800a1d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a18a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a18c:	f000 fcd2 	bl	800ab34 <prvIsQueueFull>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d018      	beq.n	800a1c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a198:	3310      	adds	r3, #16
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	4611      	mov	r1, r2
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f001 f8e8 	bl	800b374 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a1a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1a6:	f000 fc5d 	bl	800aa64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a1aa:	f000 ff11 	bl	800afd0 <xTaskResumeAll>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f47f af7c 	bne.w	800a0ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a1b6:	4b0c      	ldr	r3, [pc, #48]	; (800a1e8 <xQueueGenericSend+0x1f8>)
 800a1b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1bc:	601a      	str	r2, [r3, #0]
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	e772      	b.n	800a0ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a1c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1ca:	f000 fc4b 	bl	800aa64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1ce:	f000 feff 	bl	800afd0 <xTaskResumeAll>
 800a1d2:	e76c      	b.n	800a0ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a1d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1d6:	f000 fc45 	bl	800aa64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1da:	f000 fef9 	bl	800afd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a1de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3738      	adds	r7, #56	; 0x38
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	e000ed04 	.word	0xe000ed04

0800a1ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b090      	sub	sp, #64	; 0x40
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
 800a1f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a200:	2b00      	cmp	r3, #0
 800a202:	d10a      	bne.n	800a21a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a208:	f383 8811 	msr	BASEPRI, r3
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a216:	bf00      	nop
 800a218:	e7fe      	b.n	800a218 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d103      	bne.n	800a228 <xQueueGenericSendFromISR+0x3c>
 800a220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a224:	2b00      	cmp	r3, #0
 800a226:	d101      	bne.n	800a22c <xQueueGenericSendFromISR+0x40>
 800a228:	2301      	movs	r3, #1
 800a22a:	e000      	b.n	800a22e <xQueueGenericSendFromISR+0x42>
 800a22c:	2300      	movs	r3, #0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d10a      	bne.n	800a248 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a236:	f383 8811 	msr	BASEPRI, r3
 800a23a:	f3bf 8f6f 	isb	sy
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a244:	bf00      	nop
 800a246:	e7fe      	b.n	800a246 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d103      	bne.n	800a256 <xQueueGenericSendFromISR+0x6a>
 800a24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a252:	2b01      	cmp	r3, #1
 800a254:	d101      	bne.n	800a25a <xQueueGenericSendFromISR+0x6e>
 800a256:	2301      	movs	r3, #1
 800a258:	e000      	b.n	800a25c <xQueueGenericSendFromISR+0x70>
 800a25a:	2300      	movs	r3, #0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d10a      	bne.n	800a276 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	623b      	str	r3, [r7, #32]
}
 800a272:	bf00      	nop
 800a274:	e7fe      	b.n	800a274 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a276:	f001 fe8f 	bl	800bf98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a27a:	f3ef 8211 	mrs	r2, BASEPRI
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	61fa      	str	r2, [r7, #28]
 800a290:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a292:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a294:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d302      	bcc.n	800a2a8 <xQueueGenericSendFromISR+0xbc>
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d12f      	bne.n	800a308 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	68b9      	ldr	r1, [r7, #8]
 800a2bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2be:	f000 fb41 	bl	800a944 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a2c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ca:	d112      	bne.n	800a2f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d016      	beq.n	800a302 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d6:	3324      	adds	r3, #36	; 0x24
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f001 f86f 	bl	800b3bc <xTaskRemoveFromEventList>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00e      	beq.n	800a302 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00b      	beq.n	800a302 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	601a      	str	r2, [r3, #0]
 800a2f0:	e007      	b.n	800a302 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a2f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	b25a      	sxtb	r2, r3
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a302:	2301      	movs	r3, #1
 800a304:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a306:	e001      	b.n	800a30c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a308:	2300      	movs	r3, #0
 800a30a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a30e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a316:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3740      	adds	r7, #64	; 0x40
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b08e      	sub	sp, #56	; 0x38
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10a      	bne.n	800a34c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33a:	f383 8811 	msr	BASEPRI, r3
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	f3bf 8f4f 	dsb	sy
 800a346:	623b      	str	r3, [r7, #32]
}
 800a348:	bf00      	nop
 800a34a:	e7fe      	b.n	800a34a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a350:	2b00      	cmp	r3, #0
 800a352:	d00a      	beq.n	800a36a <xQueueGiveFromISR+0x48>
	__asm volatile
 800a354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	61fb      	str	r3, [r7, #28]
}
 800a366:	bf00      	nop
 800a368:	e7fe      	b.n	800a368 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d103      	bne.n	800a37a <xQueueGiveFromISR+0x58>
 800a372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d101      	bne.n	800a37e <xQueueGiveFromISR+0x5c>
 800a37a:	2301      	movs	r3, #1
 800a37c:	e000      	b.n	800a380 <xQueueGiveFromISR+0x5e>
 800a37e:	2300      	movs	r3, #0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10a      	bne.n	800a39a <xQueueGiveFromISR+0x78>
	__asm volatile
 800a384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	61bb      	str	r3, [r7, #24]
}
 800a396:	bf00      	nop
 800a398:	e7fe      	b.n	800a398 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a39a:	f001 fdfd 	bl	800bf98 <vPortValidateInterruptPriority>
	__asm volatile
 800a39e:	f3ef 8211 	mrs	r2, BASEPRI
 800a3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	617a      	str	r2, [r7, #20]
 800a3b4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a3b6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d22b      	bcs.n	800a422 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d6:	1c5a      	adds	r2, r3, #1
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3da:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e4:	d112      	bne.n	800a40c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d016      	beq.n	800a41c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f0:	3324      	adds	r3, #36	; 0x24
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f000 ffe2 	bl	800b3bc <xTaskRemoveFromEventList>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00e      	beq.n	800a41c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00b      	beq.n	800a41c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	2201      	movs	r2, #1
 800a408:	601a      	str	r2, [r3, #0]
 800a40a:	e007      	b.n	800a41c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a40c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a410:	3301      	adds	r3, #1
 800a412:	b2db      	uxtb	r3, r3
 800a414:	b25a      	sxtb	r2, r3
 800a416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a41c:	2301      	movs	r3, #1
 800a41e:	637b      	str	r3, [r7, #52]	; 0x34
 800a420:	e001      	b.n	800a426 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a422:	2300      	movs	r3, #0
 800a424:	637b      	str	r3, [r7, #52]	; 0x34
 800a426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a428:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f383 8811 	msr	BASEPRI, r3
}
 800a430:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a434:	4618      	mov	r0, r3
 800a436:	3738      	adds	r7, #56	; 0x38
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b08c      	sub	sp, #48	; 0x30
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a448:	2300      	movs	r3, #0
 800a44a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a452:	2b00      	cmp	r3, #0
 800a454:	d10a      	bne.n	800a46c <xQueueReceive+0x30>
	__asm volatile
 800a456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	623b      	str	r3, [r7, #32]
}
 800a468:	bf00      	nop
 800a46a:	e7fe      	b.n	800a46a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d103      	bne.n	800a47a <xQueueReceive+0x3e>
 800a472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a476:	2b00      	cmp	r3, #0
 800a478:	d101      	bne.n	800a47e <xQueueReceive+0x42>
 800a47a:	2301      	movs	r3, #1
 800a47c:	e000      	b.n	800a480 <xQueueReceive+0x44>
 800a47e:	2300      	movs	r3, #0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d10a      	bne.n	800a49a <xQueueReceive+0x5e>
	__asm volatile
 800a484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a488:	f383 8811 	msr	BASEPRI, r3
 800a48c:	f3bf 8f6f 	isb	sy
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	61fb      	str	r3, [r7, #28]
}
 800a496:	bf00      	nop
 800a498:	e7fe      	b.n	800a498 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a49a:	f001 f94b 	bl	800b734 <xTaskGetSchedulerState>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d102      	bne.n	800a4aa <xQueueReceive+0x6e>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d101      	bne.n	800a4ae <xQueueReceive+0x72>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e000      	b.n	800a4b0 <xQueueReceive+0x74>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10a      	bne.n	800a4ca <xQueueReceive+0x8e>
	__asm volatile
 800a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	61bb      	str	r3, [r7, #24]
}
 800a4c6:	bf00      	nop
 800a4c8:	e7fe      	b.n	800a4c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4ca:	f001 fc83 	bl	800bdd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d01f      	beq.n	800a51a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4da:	68b9      	ldr	r1, [r7, #8]
 800a4dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4de:	f000 fa9b 	bl	800aa18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e4:	1e5a      	subs	r2, r3, #1
 800a4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00f      	beq.n	800a512 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f4:	3310      	adds	r3, #16
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f000 ff60 	bl	800b3bc <xTaskRemoveFromEventList>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d007      	beq.n	800a512 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a502:	4b3d      	ldr	r3, [pc, #244]	; (800a5f8 <xQueueReceive+0x1bc>)
 800a504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a508:	601a      	str	r2, [r3, #0]
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a512:	f001 fc8f 	bl	800be34 <vPortExitCritical>
				return pdPASS;
 800a516:	2301      	movs	r3, #1
 800a518:	e069      	b.n	800a5ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d103      	bne.n	800a528 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a520:	f001 fc88 	bl	800be34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a524:	2300      	movs	r3, #0
 800a526:	e062      	b.n	800a5ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d106      	bne.n	800a53c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a52e:	f107 0310 	add.w	r3, r7, #16
 800a532:	4618      	mov	r0, r3
 800a534:	f000 ffa4 	bl	800b480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a538:	2301      	movs	r3, #1
 800a53a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a53c:	f001 fc7a 	bl	800be34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a540:	f000 fd38 	bl	800afb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a544:	f001 fc46 	bl	800bdd4 <vPortEnterCritical>
 800a548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a54e:	b25b      	sxtb	r3, r3
 800a550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a554:	d103      	bne.n	800a55e <xQueueReceive+0x122>
 800a556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a560:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a564:	b25b      	sxtb	r3, r3
 800a566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a56a:	d103      	bne.n	800a574 <xQueueReceive+0x138>
 800a56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56e:	2200      	movs	r2, #0
 800a570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a574:	f001 fc5e 	bl	800be34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a578:	1d3a      	adds	r2, r7, #4
 800a57a:	f107 0310 	add.w	r3, r7, #16
 800a57e:	4611      	mov	r1, r2
 800a580:	4618      	mov	r0, r3
 800a582:	f000 ff93 	bl	800b4ac <xTaskCheckForTimeOut>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d123      	bne.n	800a5d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a58c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a58e:	f000 fabb 	bl	800ab08 <prvIsQueueEmpty>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d017      	beq.n	800a5c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59a:	3324      	adds	r3, #36	; 0x24
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	4611      	mov	r1, r2
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f000 fee7 	bl	800b374 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5a8:	f000 fa5c 	bl	800aa64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5ac:	f000 fd10 	bl	800afd0 <xTaskResumeAll>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d189      	bne.n	800a4ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a5b6:	4b10      	ldr	r3, [pc, #64]	; (800a5f8 <xQueueReceive+0x1bc>)
 800a5b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5bc:	601a      	str	r2, [r3, #0]
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	e780      	b.n	800a4ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a5c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5ca:	f000 fa4b 	bl	800aa64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5ce:	f000 fcff 	bl	800afd0 <xTaskResumeAll>
 800a5d2:	e77a      	b.n	800a4ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a5d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5d6:	f000 fa45 	bl	800aa64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5da:	f000 fcf9 	bl	800afd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5e0:	f000 fa92 	bl	800ab08 <prvIsQueueEmpty>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f43f af6f 	beq.w	800a4ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a5ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3730      	adds	r7, #48	; 0x30
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	e000ed04 	.word	0xe000ed04

0800a5fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b08e      	sub	sp, #56	; 0x38
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a606:	2300      	movs	r3, #0
 800a608:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a60e:	2300      	movs	r3, #0
 800a610:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a614:	2b00      	cmp	r3, #0
 800a616:	d10a      	bne.n	800a62e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	623b      	str	r3, [r7, #32]
}
 800a62a:	bf00      	nop
 800a62c:	e7fe      	b.n	800a62c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00a      	beq.n	800a64c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63a:	f383 8811 	msr	BASEPRI, r3
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	61fb      	str	r3, [r7, #28]
}
 800a648:	bf00      	nop
 800a64a:	e7fe      	b.n	800a64a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a64c:	f001 f872 	bl	800b734 <xTaskGetSchedulerState>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d102      	bne.n	800a65c <xQueueSemaphoreTake+0x60>
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d101      	bne.n	800a660 <xQueueSemaphoreTake+0x64>
 800a65c:	2301      	movs	r3, #1
 800a65e:	e000      	b.n	800a662 <xQueueSemaphoreTake+0x66>
 800a660:	2300      	movs	r3, #0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d10a      	bne.n	800a67c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66a:	f383 8811 	msr	BASEPRI, r3
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	61bb      	str	r3, [r7, #24]
}
 800a678:	bf00      	nop
 800a67a:	e7fe      	b.n	800a67a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a67c:	f001 fbaa 	bl	800bdd4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a684:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d024      	beq.n	800a6d6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68e:	1e5a      	subs	r2, r3, #1
 800a690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a692:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d104      	bne.n	800a6a6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a69c:	f001 f9f2 	bl	800ba84 <pvTaskIncrementMutexHeldCount>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00f      	beq.n	800a6ce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b0:	3310      	adds	r3, #16
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f000 fe82 	bl	800b3bc <xTaskRemoveFromEventList>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d007      	beq.n	800a6ce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6be:	4b54      	ldr	r3, [pc, #336]	; (800a810 <xQueueSemaphoreTake+0x214>)
 800a6c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6c4:	601a      	str	r2, [r3, #0]
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6ce:	f001 fbb1 	bl	800be34 <vPortExitCritical>
				return pdPASS;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e097      	b.n	800a806 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d111      	bne.n	800a700 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00a      	beq.n	800a6f8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	617b      	str	r3, [r7, #20]
}
 800a6f4:	bf00      	nop
 800a6f6:	e7fe      	b.n	800a6f6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a6f8:	f001 fb9c 	bl	800be34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	e082      	b.n	800a806 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a702:	2b00      	cmp	r3, #0
 800a704:	d106      	bne.n	800a714 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a706:	f107 030c 	add.w	r3, r7, #12
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 feb8 	bl	800b480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a710:	2301      	movs	r3, #1
 800a712:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a714:	f001 fb8e 	bl	800be34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a718:	f000 fc4c 	bl	800afb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a71c:	f001 fb5a 	bl	800bdd4 <vPortEnterCritical>
 800a720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a722:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a726:	b25b      	sxtb	r3, r3
 800a728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72c:	d103      	bne.n	800a736 <xQueueSemaphoreTake+0x13a>
 800a72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a730:	2200      	movs	r2, #0
 800a732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a738:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a73c:	b25b      	sxtb	r3, r3
 800a73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a742:	d103      	bne.n	800a74c <xQueueSemaphoreTake+0x150>
 800a744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a746:	2200      	movs	r2, #0
 800a748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a74c:	f001 fb72 	bl	800be34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a750:	463a      	mov	r2, r7
 800a752:	f107 030c 	add.w	r3, r7, #12
 800a756:	4611      	mov	r1, r2
 800a758:	4618      	mov	r0, r3
 800a75a:	f000 fea7 	bl	800b4ac <xTaskCheckForTimeOut>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d132      	bne.n	800a7ca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a764:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a766:	f000 f9cf 	bl	800ab08 <prvIsQueueEmpty>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d026      	beq.n	800a7be <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d109      	bne.n	800a78c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a778:	f001 fb2c 	bl	800bdd4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	4618      	mov	r0, r3
 800a782:	f000 fff5 	bl	800b770 <xTaskPriorityInherit>
 800a786:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a788:	f001 fb54 	bl	800be34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a78e:	3324      	adds	r3, #36	; 0x24
 800a790:	683a      	ldr	r2, [r7, #0]
 800a792:	4611      	mov	r1, r2
 800a794:	4618      	mov	r0, r3
 800a796:	f000 fded 	bl	800b374 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a79a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a79c:	f000 f962 	bl	800aa64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a7a0:	f000 fc16 	bl	800afd0 <xTaskResumeAll>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f47f af68 	bne.w	800a67c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a7ac:	4b18      	ldr	r3, [pc, #96]	; (800a810 <xQueueSemaphoreTake+0x214>)
 800a7ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7b2:	601a      	str	r2, [r3, #0]
 800a7b4:	f3bf 8f4f 	dsb	sy
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	e75e      	b.n	800a67c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a7be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7c0:	f000 f950 	bl	800aa64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7c4:	f000 fc04 	bl	800afd0 <xTaskResumeAll>
 800a7c8:	e758      	b.n	800a67c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a7ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7cc:	f000 f94a 	bl	800aa64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7d0:	f000 fbfe 	bl	800afd0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7d6:	f000 f997 	bl	800ab08 <prvIsQueueEmpty>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f43f af4d 	beq.w	800a67c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00d      	beq.n	800a804 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a7e8:	f001 faf4 	bl	800bdd4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a7ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7ee:	f000 f891 	bl	800a914 <prvGetDisinheritPriorityAfterTimeout>
 800a7f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f001 f8b4 	bl	800b968 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a800:	f001 fb18 	bl	800be34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a804:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a806:	4618      	mov	r0, r3
 800a808:	3738      	adds	r7, #56	; 0x38
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	e000ed04 	.word	0xe000ed04

0800a814 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b08e      	sub	sp, #56	; 0x38
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10a      	bne.n	800a840 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82e:	f383 8811 	msr	BASEPRI, r3
 800a832:	f3bf 8f6f 	isb	sy
 800a836:	f3bf 8f4f 	dsb	sy
 800a83a:	623b      	str	r3, [r7, #32]
}
 800a83c:	bf00      	nop
 800a83e:	e7fe      	b.n	800a83e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d103      	bne.n	800a84e <xQueueReceiveFromISR+0x3a>
 800a846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <xQueueReceiveFromISR+0x3e>
 800a84e:	2301      	movs	r3, #1
 800a850:	e000      	b.n	800a854 <xQueueReceiveFromISR+0x40>
 800a852:	2300      	movs	r3, #0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10a      	bne.n	800a86e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85c:	f383 8811 	msr	BASEPRI, r3
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	61fb      	str	r3, [r7, #28]
}
 800a86a:	bf00      	nop
 800a86c:	e7fe      	b.n	800a86c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a86e:	f001 fb93 	bl	800bf98 <vPortValidateInterruptPriority>
	__asm volatile
 800a872:	f3ef 8211 	mrs	r2, BASEPRI
 800a876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87a:	f383 8811 	msr	BASEPRI, r3
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	61ba      	str	r2, [r7, #24]
 800a888:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a88a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a88c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a892:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a896:	2b00      	cmp	r3, #0
 800a898:	d02f      	beq.n	800a8fa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a8a4:	68b9      	ldr	r1, [r7, #8]
 800a8a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8a8:	f000 f8b6 	bl	800aa18 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ae:	1e5a      	subs	r2, r3, #1
 800a8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a8b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8bc:	d112      	bne.n	800a8e4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d016      	beq.n	800a8f4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c8:	3310      	adds	r3, #16
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f000 fd76 	bl	800b3bc <xTaskRemoveFromEventList>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00e      	beq.n	800a8f4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d00b      	beq.n	800a8f4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	601a      	str	r2, [r3, #0]
 800a8e2:	e007      	b.n	800a8f4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a8e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	b25a      	sxtb	r2, r3
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	637b      	str	r3, [r7, #52]	; 0x34
 800a8f8:	e001      	b.n	800a8fe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	637b      	str	r3, [r7, #52]	; 0x34
 800a8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a900:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	f383 8811 	msr	BASEPRI, r3
}
 800a908:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3738      	adds	r7, #56	; 0x38
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a914:	b480      	push	{r7}
 800a916:	b085      	sub	sp, #20
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a920:	2b00      	cmp	r3, #0
 800a922:	d006      	beq.n	800a932 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f1c3 0307 	rsb	r3, r3, #7
 800a92e:	60fb      	str	r3, [r7, #12]
 800a930:	e001      	b.n	800a936 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a932:	2300      	movs	r3, #0
 800a934:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a936:	68fb      	ldr	r3, [r7, #12]
	}
 800a938:	4618      	mov	r0, r3
 800a93a:	3714      	adds	r7, #20
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b086      	sub	sp, #24
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a950:	2300      	movs	r3, #0
 800a952:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a958:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d10d      	bne.n	800a97e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d14d      	bne.n	800aa06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	4618      	mov	r0, r3
 800a970:	f000 ff74 	bl	800b85c <xTaskPriorityDisinherit>
 800a974:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2200      	movs	r2, #0
 800a97a:	609a      	str	r2, [r3, #8]
 800a97c:	e043      	b.n	800aa06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d119      	bne.n	800a9b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	6858      	ldr	r0, [r3, #4]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98c:	461a      	mov	r2, r3
 800a98e:	68b9      	ldr	r1, [r7, #8]
 800a990:	f00c fa32 	bl	8016df8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	685a      	ldr	r2, [r3, #4]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99c:	441a      	add	r2, r3
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	685a      	ldr	r2, [r3, #4]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d32b      	bcc.n	800aa06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	605a      	str	r2, [r3, #4]
 800a9b6:	e026      	b.n	800aa06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	68d8      	ldr	r0, [r3, #12]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	68b9      	ldr	r1, [r7, #8]
 800a9c4:	f00c fa18 	bl	8016df8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	68da      	ldr	r2, [r3, #12]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d0:	425b      	negs	r3, r3
 800a9d2:	441a      	add	r2, r3
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	68da      	ldr	r2, [r3, #12]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d207      	bcs.n	800a9f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	689a      	ldr	r2, [r3, #8]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ec:	425b      	negs	r3, r3
 800a9ee:	441a      	add	r2, r3
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b02      	cmp	r3, #2
 800a9f8:	d105      	bne.n	800aa06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d002      	beq.n	800aa06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	3b01      	subs	r3, #1
 800aa04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	1c5a      	adds	r2, r3, #1
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aa0e:	697b      	ldr	r3, [r7, #20]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3718      	adds	r7, #24
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d018      	beq.n	800aa5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	68da      	ldr	r2, [r3, #12]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa32:	441a      	add	r2, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	68da      	ldr	r2, [r3, #12]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d303      	bcc.n	800aa4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	68d9      	ldr	r1, [r3, #12]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa54:	461a      	mov	r2, r3
 800aa56:	6838      	ldr	r0, [r7, #0]
 800aa58:	f00c f9ce 	bl	8016df8 <memcpy>
	}
}
 800aa5c:	bf00      	nop
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aa6c:	f001 f9b2 	bl	800bdd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa78:	e011      	b.n	800aa9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d012      	beq.n	800aaa8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	3324      	adds	r3, #36	; 0x24
 800aa86:	4618      	mov	r0, r3
 800aa88:	f000 fc98 	bl	800b3bc <xTaskRemoveFromEventList>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa92:	f000 fd6d 	bl	800b570 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa96:	7bfb      	ldrb	r3, [r7, #15]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	dce9      	bgt.n	800aa7a <prvUnlockQueue+0x16>
 800aaa6:	e000      	b.n	800aaaa <prvUnlockQueue+0x46>
					break;
 800aaa8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	22ff      	movs	r2, #255	; 0xff
 800aaae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aab2:	f001 f9bf 	bl	800be34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aab6:	f001 f98d 	bl	800bdd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aac0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aac2:	e011      	b.n	800aae8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d012      	beq.n	800aaf2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	3310      	adds	r3, #16
 800aad0:	4618      	mov	r0, r3
 800aad2:	f000 fc73 	bl	800b3bc <xTaskRemoveFromEventList>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d001      	beq.n	800aae0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aadc:	f000 fd48 	bl	800b570 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aae0:	7bbb      	ldrb	r3, [r7, #14]
 800aae2:	3b01      	subs	r3, #1
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aae8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	dce9      	bgt.n	800aac4 <prvUnlockQueue+0x60>
 800aaf0:	e000      	b.n	800aaf4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aaf2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	22ff      	movs	r2, #255	; 0xff
 800aaf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aafc:	f001 f99a 	bl	800be34 <vPortExitCritical>
}
 800ab00:	bf00      	nop
 800ab02:	3710      	adds	r7, #16
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab10:	f001 f960 	bl	800bdd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d102      	bne.n	800ab22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	60fb      	str	r3, [r7, #12]
 800ab20:	e001      	b.n	800ab26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ab22:	2300      	movs	r3, #0
 800ab24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab26:	f001 f985 	bl	800be34 <vPortExitCritical>

	return xReturn;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3710      	adds	r7, #16
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab3c:	f001 f94a 	bl	800bdd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d102      	bne.n	800ab52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	60fb      	str	r3, [r7, #12]
 800ab50:	e001      	b.n	800ab56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ab52:	2300      	movs	r3, #0
 800ab54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab56:	f001 f96d 	bl	800be34 <vPortExitCritical>

	return xReturn;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b08e      	sub	sp, #56	; 0x38
 800ab68:	af04      	add	r7, sp, #16
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	607a      	str	r2, [r7, #4]
 800ab70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ab72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d10a      	bne.n	800ab8e <xTaskCreateStatic+0x2a>
	__asm volatile
 800ab78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7c:	f383 8811 	msr	BASEPRI, r3
 800ab80:	f3bf 8f6f 	isb	sy
 800ab84:	f3bf 8f4f 	dsb	sy
 800ab88:	623b      	str	r3, [r7, #32]
}
 800ab8a:	bf00      	nop
 800ab8c:	e7fe      	b.n	800ab8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ab8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d10a      	bne.n	800abaa <xTaskCreateStatic+0x46>
	__asm volatile
 800ab94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab98:	f383 8811 	msr	BASEPRI, r3
 800ab9c:	f3bf 8f6f 	isb	sy
 800aba0:	f3bf 8f4f 	dsb	sy
 800aba4:	61fb      	str	r3, [r7, #28]
}
 800aba6:	bf00      	nop
 800aba8:	e7fe      	b.n	800aba8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800abaa:	2354      	movs	r3, #84	; 0x54
 800abac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	2b54      	cmp	r3, #84	; 0x54
 800abb2:	d00a      	beq.n	800abca <xTaskCreateStatic+0x66>
	__asm volatile
 800abb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	61bb      	str	r3, [r7, #24]
}
 800abc6:	bf00      	nop
 800abc8:	e7fe      	b.n	800abc8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800abca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800abcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d01e      	beq.n	800ac10 <xTaskCreateStatic+0xac>
 800abd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d01b      	beq.n	800ac10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800abdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abe0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800abe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe4:	2202      	movs	r2, #2
 800abe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800abea:	2300      	movs	r3, #0
 800abec:	9303      	str	r3, [sp, #12]
 800abee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf0:	9302      	str	r3, [sp, #8]
 800abf2:	f107 0314 	add.w	r3, r7, #20
 800abf6:	9301      	str	r3, [sp, #4]
 800abf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	68b9      	ldr	r1, [r7, #8]
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f000 f850 	bl	800aca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac0a:	f000 f8d5 	bl	800adb8 <prvAddNewTaskToReadyList>
 800ac0e:	e001      	b.n	800ac14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ac10:	2300      	movs	r3, #0
 800ac12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ac14:	697b      	ldr	r3, [r7, #20]
	}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3728      	adds	r7, #40	; 0x28
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b08c      	sub	sp, #48	; 0x30
 800ac22:	af04      	add	r7, sp, #16
 800ac24:	60f8      	str	r0, [r7, #12]
 800ac26:	60b9      	str	r1, [r7, #8]
 800ac28:	603b      	str	r3, [r7, #0]
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac2e:	88fb      	ldrh	r3, [r7, #6]
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4618      	mov	r0, r3
 800ac34:	f001 f9f0 	bl	800c018 <pvPortMalloc>
 800ac38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00e      	beq.n	800ac5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac40:	2054      	movs	r0, #84	; 0x54
 800ac42:	f001 f9e9 	bl	800c018 <pvPortMalloc>
 800ac46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d003      	beq.n	800ac56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	697a      	ldr	r2, [r7, #20]
 800ac52:	631a      	str	r2, [r3, #48]	; 0x30
 800ac54:	e005      	b.n	800ac62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ac56:	6978      	ldr	r0, [r7, #20]
 800ac58:	f001 faaa 	bl	800c1b0 <vPortFree>
 800ac5c:	e001      	b.n	800ac62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d017      	beq.n	800ac98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac70:	88fa      	ldrh	r2, [r7, #6]
 800ac72:	2300      	movs	r3, #0
 800ac74:	9303      	str	r3, [sp, #12]
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	9302      	str	r3, [sp, #8]
 800ac7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7c:	9301      	str	r3, [sp, #4]
 800ac7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	68b9      	ldr	r1, [r7, #8]
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	f000 f80e 	bl	800aca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac8c:	69f8      	ldr	r0, [r7, #28]
 800ac8e:	f000 f893 	bl	800adb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac92:	2301      	movs	r3, #1
 800ac94:	61bb      	str	r3, [r7, #24]
 800ac96:	e002      	b.n	800ac9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac98:	f04f 33ff 	mov.w	r3, #4294967295
 800ac9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac9e:	69bb      	ldr	r3, [r7, #24]
	}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3720      	adds	r7, #32
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b088      	sub	sp, #32
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	60b9      	str	r1, [r7, #8]
 800acb2:	607a      	str	r2, [r7, #4]
 800acb4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800acb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800acc0:	3b01      	subs	r3, #1
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	4413      	add	r3, r2
 800acc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	f023 0307 	bic.w	r3, r3, #7
 800acce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	f003 0307 	and.w	r3, r3, #7
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00a      	beq.n	800acf0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800acda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acde:	f383 8811 	msr	BASEPRI, r3
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	617b      	str	r3, [r7, #20]
}
 800acec:	bf00      	nop
 800acee:	e7fe      	b.n	800acee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d01f      	beq.n	800ad36 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800acf6:	2300      	movs	r3, #0
 800acf8:	61fb      	str	r3, [r7, #28]
 800acfa:	e012      	b.n	800ad22 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	4413      	add	r3, r2
 800ad02:	7819      	ldrb	r1, [r3, #0]
 800ad04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad06:	69fb      	ldr	r3, [r7, #28]
 800ad08:	4413      	add	r3, r2
 800ad0a:	3334      	adds	r3, #52	; 0x34
 800ad0c:	460a      	mov	r2, r1
 800ad0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ad10:	68ba      	ldr	r2, [r7, #8]
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	4413      	add	r3, r2
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d006      	beq.n	800ad2a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	61fb      	str	r3, [r7, #28]
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	2b0f      	cmp	r3, #15
 800ad26:	d9e9      	bls.n	800acfc <prvInitialiseNewTask+0x54>
 800ad28:	e000      	b.n	800ad2c <prvInitialiseNewTask+0x84>
			{
				break;
 800ad2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad34:	e003      	b.n	800ad3e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad40:	2b06      	cmp	r3, #6
 800ad42:	d901      	bls.n	800ad48 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad44:	2306      	movs	r3, #6
 800ad46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad52:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ad54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad56:	2200      	movs	r2, #0
 800ad58:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ad5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5c:	3304      	adds	r3, #4
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7fe ff2c 	bl	8009bbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad66:	3318      	adds	r3, #24
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7fe ff27 	bl	8009bbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ad6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad76:	f1c3 0207 	rsb	r2, r3, #7
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad86:	2200      	movs	r2, #0
 800ad88:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad92:	683a      	ldr	r2, [r7, #0]
 800ad94:	68f9      	ldr	r1, [r7, #12]
 800ad96:	69b8      	ldr	r0, [r7, #24]
 800ad98:	f000 feee 	bl	800bb78 <pxPortInitialiseStack>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ada2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d002      	beq.n	800adae <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ada8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adae:	bf00      	nop
 800adb0:	3720      	adds	r7, #32
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
	...

0800adb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800adc0:	f001 f808 	bl	800bdd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800adc4:	4b2a      	ldr	r3, [pc, #168]	; (800ae70 <prvAddNewTaskToReadyList+0xb8>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	3301      	adds	r3, #1
 800adca:	4a29      	ldr	r2, [pc, #164]	; (800ae70 <prvAddNewTaskToReadyList+0xb8>)
 800adcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800adce:	4b29      	ldr	r3, [pc, #164]	; (800ae74 <prvAddNewTaskToReadyList+0xbc>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d109      	bne.n	800adea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800add6:	4a27      	ldr	r2, [pc, #156]	; (800ae74 <prvAddNewTaskToReadyList+0xbc>)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800addc:	4b24      	ldr	r3, [pc, #144]	; (800ae70 <prvAddNewTaskToReadyList+0xb8>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d110      	bne.n	800ae06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ade4:	f000 fbe8 	bl	800b5b8 <prvInitialiseTaskLists>
 800ade8:	e00d      	b.n	800ae06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800adea:	4b23      	ldr	r3, [pc, #140]	; (800ae78 <prvAddNewTaskToReadyList+0xc0>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d109      	bne.n	800ae06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800adf2:	4b20      	ldr	r3, [pc, #128]	; (800ae74 <prvAddNewTaskToReadyList+0xbc>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d802      	bhi.n	800ae06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae00:	4a1c      	ldr	r2, [pc, #112]	; (800ae74 <prvAddNewTaskToReadyList+0xbc>)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae06:	4b1d      	ldr	r3, [pc, #116]	; (800ae7c <prvAddNewTaskToReadyList+0xc4>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	4a1b      	ldr	r2, [pc, #108]	; (800ae7c <prvAddNewTaskToReadyList+0xc4>)
 800ae0e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae14:	2201      	movs	r2, #1
 800ae16:	409a      	lsls	r2, r3
 800ae18:	4b19      	ldr	r3, [pc, #100]	; (800ae80 <prvAddNewTaskToReadyList+0xc8>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	4a18      	ldr	r2, [pc, #96]	; (800ae80 <prvAddNewTaskToReadyList+0xc8>)
 800ae20:	6013      	str	r3, [r2, #0]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae26:	4613      	mov	r3, r2
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	4413      	add	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4a15      	ldr	r2, [pc, #84]	; (800ae84 <prvAddNewTaskToReadyList+0xcc>)
 800ae30:	441a      	add	r2, r3
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	3304      	adds	r3, #4
 800ae36:	4619      	mov	r1, r3
 800ae38:	4610      	mov	r0, r2
 800ae3a:	f7fe fecc 	bl	8009bd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ae3e:	f000 fff9 	bl	800be34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ae42:	4b0d      	ldr	r3, [pc, #52]	; (800ae78 <prvAddNewTaskToReadyList+0xc0>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d00e      	beq.n	800ae68 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ae4a:	4b0a      	ldr	r3, [pc, #40]	; (800ae74 <prvAddNewTaskToReadyList+0xbc>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d207      	bcs.n	800ae68 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ae58:	4b0b      	ldr	r3, [pc, #44]	; (800ae88 <prvAddNewTaskToReadyList+0xd0>)
 800ae5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae5e:	601a      	str	r2, [r3, #0]
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae68:	bf00      	nop
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	2000059c 	.word	0x2000059c
 800ae74:	2000049c 	.word	0x2000049c
 800ae78:	200005a8 	.word	0x200005a8
 800ae7c:	200005b8 	.word	0x200005b8
 800ae80:	200005a4 	.word	0x200005a4
 800ae84:	200004a0 	.word	0x200004a0
 800ae88:	e000ed04 	.word	0xe000ed04

0800ae8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae94:	2300      	movs	r3, #0
 800ae96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d017      	beq.n	800aece <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae9e:	4b13      	ldr	r3, [pc, #76]	; (800aeec <vTaskDelay+0x60>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00a      	beq.n	800aebc <vTaskDelay+0x30>
	__asm volatile
 800aea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeaa:	f383 8811 	msr	BASEPRI, r3
 800aeae:	f3bf 8f6f 	isb	sy
 800aeb2:	f3bf 8f4f 	dsb	sy
 800aeb6:	60bb      	str	r3, [r7, #8]
}
 800aeb8:	bf00      	nop
 800aeba:	e7fe      	b.n	800aeba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aebc:	f000 f87a 	bl	800afb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aec0:	2100      	movs	r1, #0
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 fdf2 	bl	800baac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aec8:	f000 f882 	bl	800afd0 <xTaskResumeAll>
 800aecc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d107      	bne.n	800aee4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aed4:	4b06      	ldr	r3, [pc, #24]	; (800aef0 <vTaskDelay+0x64>)
 800aed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeda:	601a      	str	r2, [r3, #0]
 800aedc:	f3bf 8f4f 	dsb	sy
 800aee0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aee4:	bf00      	nop
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	200005c4 	.word	0x200005c4
 800aef0:	e000ed04 	.word	0xe000ed04

0800aef4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b08a      	sub	sp, #40	; 0x28
 800aef8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aefa:	2300      	movs	r3, #0
 800aefc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aefe:	2300      	movs	r3, #0
 800af00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af02:	463a      	mov	r2, r7
 800af04:	1d39      	adds	r1, r7, #4
 800af06:	f107 0308 	add.w	r3, r7, #8
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7f5 fb2c 	bl	8000568 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af10:	6839      	ldr	r1, [r7, #0]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	68ba      	ldr	r2, [r7, #8]
 800af16:	9202      	str	r2, [sp, #8]
 800af18:	9301      	str	r3, [sp, #4]
 800af1a:	2300      	movs	r3, #0
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	2300      	movs	r3, #0
 800af20:	460a      	mov	r2, r1
 800af22:	491e      	ldr	r1, [pc, #120]	; (800af9c <vTaskStartScheduler+0xa8>)
 800af24:	481e      	ldr	r0, [pc, #120]	; (800afa0 <vTaskStartScheduler+0xac>)
 800af26:	f7ff fe1d 	bl	800ab64 <xTaskCreateStatic>
 800af2a:	4603      	mov	r3, r0
 800af2c:	4a1d      	ldr	r2, [pc, #116]	; (800afa4 <vTaskStartScheduler+0xb0>)
 800af2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af30:	4b1c      	ldr	r3, [pc, #112]	; (800afa4 <vTaskStartScheduler+0xb0>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d002      	beq.n	800af3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af38:	2301      	movs	r3, #1
 800af3a:	617b      	str	r3, [r7, #20]
 800af3c:	e001      	b.n	800af42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af3e:	2300      	movs	r3, #0
 800af40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d116      	bne.n	800af76 <vTaskStartScheduler+0x82>
	__asm volatile
 800af48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4c:	f383 8811 	msr	BASEPRI, r3
 800af50:	f3bf 8f6f 	isb	sy
 800af54:	f3bf 8f4f 	dsb	sy
 800af58:	613b      	str	r3, [r7, #16]
}
 800af5a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800af5c:	4b12      	ldr	r3, [pc, #72]	; (800afa8 <vTaskStartScheduler+0xb4>)
 800af5e:	f04f 32ff 	mov.w	r2, #4294967295
 800af62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af64:	4b11      	ldr	r3, [pc, #68]	; (800afac <vTaskStartScheduler+0xb8>)
 800af66:	2201      	movs	r2, #1
 800af68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800af6a:	4b11      	ldr	r3, [pc, #68]	; (800afb0 <vTaskStartScheduler+0xbc>)
 800af6c:	2200      	movs	r2, #0
 800af6e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af70:	f000 fe8e 	bl	800bc90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af74:	e00e      	b.n	800af94 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af7c:	d10a      	bne.n	800af94 <vTaskStartScheduler+0xa0>
	__asm volatile
 800af7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af82:	f383 8811 	msr	BASEPRI, r3
 800af86:	f3bf 8f6f 	isb	sy
 800af8a:	f3bf 8f4f 	dsb	sy
 800af8e:	60fb      	str	r3, [r7, #12]
}
 800af90:	bf00      	nop
 800af92:	e7fe      	b.n	800af92 <vTaskStartScheduler+0x9e>
}
 800af94:	bf00      	nop
 800af96:	3718      	adds	r7, #24
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	0801800c 	.word	0x0801800c
 800afa0:	0800b589 	.word	0x0800b589
 800afa4:	200005c0 	.word	0x200005c0
 800afa8:	200005bc 	.word	0x200005bc
 800afac:	200005a8 	.word	0x200005a8
 800afb0:	200005a0 	.word	0x200005a0

0800afb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800afb4:	b480      	push	{r7}
 800afb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800afb8:	4b04      	ldr	r3, [pc, #16]	; (800afcc <vTaskSuspendAll+0x18>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	3301      	adds	r3, #1
 800afbe:	4a03      	ldr	r2, [pc, #12]	; (800afcc <vTaskSuspendAll+0x18>)
 800afc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800afc2:	bf00      	nop
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr
 800afcc:	200005c4 	.word	0x200005c4

0800afd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800afd6:	2300      	movs	r3, #0
 800afd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800afda:	2300      	movs	r3, #0
 800afdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800afde:	4b41      	ldr	r3, [pc, #260]	; (800b0e4 <xTaskResumeAll+0x114>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d10a      	bne.n	800affc <xTaskResumeAll+0x2c>
	__asm volatile
 800afe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afea:	f383 8811 	msr	BASEPRI, r3
 800afee:	f3bf 8f6f 	isb	sy
 800aff2:	f3bf 8f4f 	dsb	sy
 800aff6:	603b      	str	r3, [r7, #0]
}
 800aff8:	bf00      	nop
 800affa:	e7fe      	b.n	800affa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800affc:	f000 feea 	bl	800bdd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b000:	4b38      	ldr	r3, [pc, #224]	; (800b0e4 <xTaskResumeAll+0x114>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	3b01      	subs	r3, #1
 800b006:	4a37      	ldr	r2, [pc, #220]	; (800b0e4 <xTaskResumeAll+0x114>)
 800b008:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b00a:	4b36      	ldr	r3, [pc, #216]	; (800b0e4 <xTaskResumeAll+0x114>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d161      	bne.n	800b0d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b012:	4b35      	ldr	r3, [pc, #212]	; (800b0e8 <xTaskResumeAll+0x118>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d05d      	beq.n	800b0d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b01a:	e02e      	b.n	800b07a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b01c:	4b33      	ldr	r3, [pc, #204]	; (800b0ec <xTaskResumeAll+0x11c>)
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	3318      	adds	r3, #24
 800b028:	4618      	mov	r0, r3
 800b02a:	f7fe fe31 	bl	8009c90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	3304      	adds	r3, #4
 800b032:	4618      	mov	r0, r3
 800b034:	f7fe fe2c 	bl	8009c90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b03c:	2201      	movs	r2, #1
 800b03e:	409a      	lsls	r2, r3
 800b040:	4b2b      	ldr	r3, [pc, #172]	; (800b0f0 <xTaskResumeAll+0x120>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4313      	orrs	r3, r2
 800b046:	4a2a      	ldr	r2, [pc, #168]	; (800b0f0 <xTaskResumeAll+0x120>)
 800b048:	6013      	str	r3, [r2, #0]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b04e:	4613      	mov	r3, r2
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4413      	add	r3, r2
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	4a27      	ldr	r2, [pc, #156]	; (800b0f4 <xTaskResumeAll+0x124>)
 800b058:	441a      	add	r2, r3
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	3304      	adds	r3, #4
 800b05e:	4619      	mov	r1, r3
 800b060:	4610      	mov	r0, r2
 800b062:	f7fe fdb8 	bl	8009bd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b06a:	4b23      	ldr	r3, [pc, #140]	; (800b0f8 <xTaskResumeAll+0x128>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b070:	429a      	cmp	r2, r3
 800b072:	d302      	bcc.n	800b07a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b074:	4b21      	ldr	r3, [pc, #132]	; (800b0fc <xTaskResumeAll+0x12c>)
 800b076:	2201      	movs	r2, #1
 800b078:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b07a:	4b1c      	ldr	r3, [pc, #112]	; (800b0ec <xTaskResumeAll+0x11c>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d1cc      	bne.n	800b01c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d001      	beq.n	800b08c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b088:	f000 fb34 	bl	800b6f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b08c:	4b1c      	ldr	r3, [pc, #112]	; (800b100 <xTaskResumeAll+0x130>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d010      	beq.n	800b0ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b098:	f000 f858 	bl	800b14c <xTaskIncrementTick>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d002      	beq.n	800b0a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b0a2:	4b16      	ldr	r3, [pc, #88]	; (800b0fc <xTaskResumeAll+0x12c>)
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d1f1      	bne.n	800b098 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b0b4:	4b12      	ldr	r3, [pc, #72]	; (800b100 <xTaskResumeAll+0x130>)
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b0ba:	4b10      	ldr	r3, [pc, #64]	; (800b0fc <xTaskResumeAll+0x12c>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d009      	beq.n	800b0d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b0c6:	4b0f      	ldr	r3, [pc, #60]	; (800b104 <xTaskResumeAll+0x134>)
 800b0c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0cc:	601a      	str	r2, [r3, #0]
 800b0ce:	f3bf 8f4f 	dsb	sy
 800b0d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0d6:	f000 fead 	bl	800be34 <vPortExitCritical>

	return xAlreadyYielded;
 800b0da:	68bb      	ldr	r3, [r7, #8]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	200005c4 	.word	0x200005c4
 800b0e8:	2000059c 	.word	0x2000059c
 800b0ec:	2000055c 	.word	0x2000055c
 800b0f0:	200005a4 	.word	0x200005a4
 800b0f4:	200004a0 	.word	0x200004a0
 800b0f8:	2000049c 	.word	0x2000049c
 800b0fc:	200005b0 	.word	0x200005b0
 800b100:	200005ac 	.word	0x200005ac
 800b104:	e000ed04 	.word	0xe000ed04

0800b108 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b10e:	4b05      	ldr	r3, [pc, #20]	; (800b124 <xTaskGetTickCount+0x1c>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b114:	687b      	ldr	r3, [r7, #4]
}
 800b116:	4618      	mov	r0, r3
 800b118:	370c      	adds	r7, #12
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop
 800b124:	200005a0 	.word	0x200005a0

0800b128 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b12e:	f000 ff33 	bl	800bf98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b132:	2300      	movs	r3, #0
 800b134:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b136:	4b04      	ldr	r3, [pc, #16]	; (800b148 <xTaskGetTickCountFromISR+0x20>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b13c:	683b      	ldr	r3, [r7, #0]
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3708      	adds	r7, #8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	200005a0 	.word	0x200005a0

0800b14c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b086      	sub	sp, #24
 800b150:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b152:	2300      	movs	r3, #0
 800b154:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b156:	4b4e      	ldr	r3, [pc, #312]	; (800b290 <xTaskIncrementTick+0x144>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f040 808e 	bne.w	800b27c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b160:	4b4c      	ldr	r3, [pc, #304]	; (800b294 <xTaskIncrementTick+0x148>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	3301      	adds	r3, #1
 800b166:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b168:	4a4a      	ldr	r2, [pc, #296]	; (800b294 <xTaskIncrementTick+0x148>)
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d120      	bne.n	800b1b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b174:	4b48      	ldr	r3, [pc, #288]	; (800b298 <xTaskIncrementTick+0x14c>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00a      	beq.n	800b194 <xTaskIncrementTick+0x48>
	__asm volatile
 800b17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	603b      	str	r3, [r7, #0]
}
 800b190:	bf00      	nop
 800b192:	e7fe      	b.n	800b192 <xTaskIncrementTick+0x46>
 800b194:	4b40      	ldr	r3, [pc, #256]	; (800b298 <xTaskIncrementTick+0x14c>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	60fb      	str	r3, [r7, #12]
 800b19a:	4b40      	ldr	r3, [pc, #256]	; (800b29c <xTaskIncrementTick+0x150>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a3e      	ldr	r2, [pc, #248]	; (800b298 <xTaskIncrementTick+0x14c>)
 800b1a0:	6013      	str	r3, [r2, #0]
 800b1a2:	4a3e      	ldr	r2, [pc, #248]	; (800b29c <xTaskIncrementTick+0x150>)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6013      	str	r3, [r2, #0]
 800b1a8:	4b3d      	ldr	r3, [pc, #244]	; (800b2a0 <xTaskIncrementTick+0x154>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	4a3c      	ldr	r2, [pc, #240]	; (800b2a0 <xTaskIncrementTick+0x154>)
 800b1b0:	6013      	str	r3, [r2, #0]
 800b1b2:	f000 fa9f 	bl	800b6f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b1b6:	4b3b      	ldr	r3, [pc, #236]	; (800b2a4 <xTaskIncrementTick+0x158>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	693a      	ldr	r2, [r7, #16]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d348      	bcc.n	800b252 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1c0:	4b35      	ldr	r3, [pc, #212]	; (800b298 <xTaskIncrementTick+0x14c>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d104      	bne.n	800b1d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1ca:	4b36      	ldr	r3, [pc, #216]	; (800b2a4 <xTaskIncrementTick+0x158>)
 800b1cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b1d0:	601a      	str	r2, [r3, #0]
					break;
 800b1d2:	e03e      	b.n	800b252 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1d4:	4b30      	ldr	r3, [pc, #192]	; (800b298 <xTaskIncrementTick+0x14c>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b1e4:	693a      	ldr	r2, [r7, #16]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d203      	bcs.n	800b1f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b1ec:	4a2d      	ldr	r2, [pc, #180]	; (800b2a4 <xTaskIncrementTick+0x158>)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b1f2:	e02e      	b.n	800b252 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	3304      	adds	r3, #4
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7fe fd49 	bl	8009c90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b202:	2b00      	cmp	r3, #0
 800b204:	d004      	beq.n	800b210 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	3318      	adds	r3, #24
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7fe fd40 	bl	8009c90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b214:	2201      	movs	r2, #1
 800b216:	409a      	lsls	r2, r3
 800b218:	4b23      	ldr	r3, [pc, #140]	; (800b2a8 <xTaskIncrementTick+0x15c>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4313      	orrs	r3, r2
 800b21e:	4a22      	ldr	r2, [pc, #136]	; (800b2a8 <xTaskIncrementTick+0x15c>)
 800b220:	6013      	str	r3, [r2, #0]
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b226:	4613      	mov	r3, r2
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	4413      	add	r3, r2
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	4a1f      	ldr	r2, [pc, #124]	; (800b2ac <xTaskIncrementTick+0x160>)
 800b230:	441a      	add	r2, r3
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	3304      	adds	r3, #4
 800b236:	4619      	mov	r1, r3
 800b238:	4610      	mov	r0, r2
 800b23a:	f7fe fccc 	bl	8009bd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b242:	4b1b      	ldr	r3, [pc, #108]	; (800b2b0 <xTaskIncrementTick+0x164>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b248:	429a      	cmp	r2, r3
 800b24a:	d3b9      	bcc.n	800b1c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b24c:	2301      	movs	r3, #1
 800b24e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b250:	e7b6      	b.n	800b1c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b252:	4b17      	ldr	r3, [pc, #92]	; (800b2b0 <xTaskIncrementTick+0x164>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b258:	4914      	ldr	r1, [pc, #80]	; (800b2ac <xTaskIncrementTick+0x160>)
 800b25a:	4613      	mov	r3, r2
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	4413      	add	r3, r2
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	440b      	add	r3, r1
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b01      	cmp	r3, #1
 800b268:	d901      	bls.n	800b26e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b26a:	2301      	movs	r3, #1
 800b26c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b26e:	4b11      	ldr	r3, [pc, #68]	; (800b2b4 <xTaskIncrementTick+0x168>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d007      	beq.n	800b286 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b276:	2301      	movs	r3, #1
 800b278:	617b      	str	r3, [r7, #20]
 800b27a:	e004      	b.n	800b286 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b27c:	4b0e      	ldr	r3, [pc, #56]	; (800b2b8 <xTaskIncrementTick+0x16c>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	3301      	adds	r3, #1
 800b282:	4a0d      	ldr	r2, [pc, #52]	; (800b2b8 <xTaskIncrementTick+0x16c>)
 800b284:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b286:	697b      	ldr	r3, [r7, #20]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3718      	adds	r7, #24
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	200005c4 	.word	0x200005c4
 800b294:	200005a0 	.word	0x200005a0
 800b298:	20000554 	.word	0x20000554
 800b29c:	20000558 	.word	0x20000558
 800b2a0:	200005b4 	.word	0x200005b4
 800b2a4:	200005bc 	.word	0x200005bc
 800b2a8:	200005a4 	.word	0x200005a4
 800b2ac:	200004a0 	.word	0x200004a0
 800b2b0:	2000049c 	.word	0x2000049c
 800b2b4:	200005b0 	.word	0x200005b0
 800b2b8:	200005ac 	.word	0x200005ac

0800b2bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b087      	sub	sp, #28
 800b2c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b2c2:	4b27      	ldr	r3, [pc, #156]	; (800b360 <vTaskSwitchContext+0xa4>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d003      	beq.n	800b2d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b2ca:	4b26      	ldr	r3, [pc, #152]	; (800b364 <vTaskSwitchContext+0xa8>)
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b2d0:	e03f      	b.n	800b352 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b2d2:	4b24      	ldr	r3, [pc, #144]	; (800b364 <vTaskSwitchContext+0xa8>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2d8:	4b23      	ldr	r3, [pc, #140]	; (800b368 <vTaskSwitchContext+0xac>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	fab3 f383 	clz	r3, r3
 800b2e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b2e6:	7afb      	ldrb	r3, [r7, #11]
 800b2e8:	f1c3 031f 	rsb	r3, r3, #31
 800b2ec:	617b      	str	r3, [r7, #20]
 800b2ee:	491f      	ldr	r1, [pc, #124]	; (800b36c <vTaskSwitchContext+0xb0>)
 800b2f0:	697a      	ldr	r2, [r7, #20]
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	4413      	add	r3, r2
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	440b      	add	r3, r1
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d10a      	bne.n	800b318 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b306:	f383 8811 	msr	BASEPRI, r3
 800b30a:	f3bf 8f6f 	isb	sy
 800b30e:	f3bf 8f4f 	dsb	sy
 800b312:	607b      	str	r3, [r7, #4]
}
 800b314:	bf00      	nop
 800b316:	e7fe      	b.n	800b316 <vTaskSwitchContext+0x5a>
 800b318:	697a      	ldr	r2, [r7, #20]
 800b31a:	4613      	mov	r3, r2
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	4413      	add	r3, r2
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	4a12      	ldr	r2, [pc, #72]	; (800b36c <vTaskSwitchContext+0xb0>)
 800b324:	4413      	add	r3, r2
 800b326:	613b      	str	r3, [r7, #16]
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	685a      	ldr	r2, [r3, #4]
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	605a      	str	r2, [r3, #4]
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	685a      	ldr	r2, [r3, #4]
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	3308      	adds	r3, #8
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d104      	bne.n	800b348 <vTaskSwitchContext+0x8c>
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	685a      	ldr	r2, [r3, #4]
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	605a      	str	r2, [r3, #4]
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	4a08      	ldr	r2, [pc, #32]	; (800b370 <vTaskSwitchContext+0xb4>)
 800b350:	6013      	str	r3, [r2, #0]
}
 800b352:	bf00      	nop
 800b354:	371c      	adds	r7, #28
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	200005c4 	.word	0x200005c4
 800b364:	200005b0 	.word	0x200005b0
 800b368:	200005a4 	.word	0x200005a4
 800b36c:	200004a0 	.word	0x200004a0
 800b370:	2000049c 	.word	0x2000049c

0800b374 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d10a      	bne.n	800b39a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b388:	f383 8811 	msr	BASEPRI, r3
 800b38c:	f3bf 8f6f 	isb	sy
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	60fb      	str	r3, [r7, #12]
}
 800b396:	bf00      	nop
 800b398:	e7fe      	b.n	800b398 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b39a:	4b07      	ldr	r3, [pc, #28]	; (800b3b8 <vTaskPlaceOnEventList+0x44>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	3318      	adds	r3, #24
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f7fe fc3b 	bl	8009c1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b3a8:	2101      	movs	r1, #1
 800b3aa:	6838      	ldr	r0, [r7, #0]
 800b3ac:	f000 fb7e 	bl	800baac <prvAddCurrentTaskToDelayedList>
}
 800b3b0:	bf00      	nop
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	2000049c 	.word	0x2000049c

0800b3bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b086      	sub	sp, #24
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d10a      	bne.n	800b3e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d6:	f383 8811 	msr	BASEPRI, r3
 800b3da:	f3bf 8f6f 	isb	sy
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	60fb      	str	r3, [r7, #12]
}
 800b3e4:	bf00      	nop
 800b3e6:	e7fe      	b.n	800b3e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	3318      	adds	r3, #24
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7fe fc4f 	bl	8009c90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3f2:	4b1d      	ldr	r3, [pc, #116]	; (800b468 <xTaskRemoveFromEventList+0xac>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d11c      	bne.n	800b434 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	3304      	adds	r3, #4
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7fe fc46 	bl	8009c90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b408:	2201      	movs	r2, #1
 800b40a:	409a      	lsls	r2, r3
 800b40c:	4b17      	ldr	r3, [pc, #92]	; (800b46c <xTaskRemoveFromEventList+0xb0>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4313      	orrs	r3, r2
 800b412:	4a16      	ldr	r2, [pc, #88]	; (800b46c <xTaskRemoveFromEventList+0xb0>)
 800b414:	6013      	str	r3, [r2, #0]
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b41a:	4613      	mov	r3, r2
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	4413      	add	r3, r2
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	4a13      	ldr	r2, [pc, #76]	; (800b470 <xTaskRemoveFromEventList+0xb4>)
 800b424:	441a      	add	r2, r3
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	3304      	adds	r3, #4
 800b42a:	4619      	mov	r1, r3
 800b42c:	4610      	mov	r0, r2
 800b42e:	f7fe fbd2 	bl	8009bd6 <vListInsertEnd>
 800b432:	e005      	b.n	800b440 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	3318      	adds	r3, #24
 800b438:	4619      	mov	r1, r3
 800b43a:	480e      	ldr	r0, [pc, #56]	; (800b474 <xTaskRemoveFromEventList+0xb8>)
 800b43c:	f7fe fbcb 	bl	8009bd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b444:	4b0c      	ldr	r3, [pc, #48]	; (800b478 <xTaskRemoveFromEventList+0xbc>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d905      	bls.n	800b45a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b44e:	2301      	movs	r3, #1
 800b450:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b452:	4b0a      	ldr	r3, [pc, #40]	; (800b47c <xTaskRemoveFromEventList+0xc0>)
 800b454:	2201      	movs	r2, #1
 800b456:	601a      	str	r2, [r3, #0]
 800b458:	e001      	b.n	800b45e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b45a:	2300      	movs	r3, #0
 800b45c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b45e:	697b      	ldr	r3, [r7, #20]
}
 800b460:	4618      	mov	r0, r3
 800b462:	3718      	adds	r7, #24
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	200005c4 	.word	0x200005c4
 800b46c:	200005a4 	.word	0x200005a4
 800b470:	200004a0 	.word	0x200004a0
 800b474:	2000055c 	.word	0x2000055c
 800b478:	2000049c 	.word	0x2000049c
 800b47c:	200005b0 	.word	0x200005b0

0800b480 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b488:	4b06      	ldr	r3, [pc, #24]	; (800b4a4 <vTaskInternalSetTimeOutState+0x24>)
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b490:	4b05      	ldr	r3, [pc, #20]	; (800b4a8 <vTaskInternalSetTimeOutState+0x28>)
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	605a      	str	r2, [r3, #4]
}
 800b498:	bf00      	nop
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr
 800b4a4:	200005b4 	.word	0x200005b4
 800b4a8:	200005a0 	.word	0x200005a0

0800b4ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b088      	sub	sp, #32
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d10a      	bne.n	800b4d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c0:	f383 8811 	msr	BASEPRI, r3
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	613b      	str	r3, [r7, #16]
}
 800b4ce:	bf00      	nop
 800b4d0:	e7fe      	b.n	800b4d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10a      	bne.n	800b4ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	60fb      	str	r3, [r7, #12]
}
 800b4ea:	bf00      	nop
 800b4ec:	e7fe      	b.n	800b4ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b4ee:	f000 fc71 	bl	800bdd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b4f2:	4b1d      	ldr	r3, [pc, #116]	; (800b568 <xTaskCheckForTimeOut+0xbc>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	69ba      	ldr	r2, [r7, #24]
 800b4fe:	1ad3      	subs	r3, r2, r3
 800b500:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b50a:	d102      	bne.n	800b512 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b50c:	2300      	movs	r3, #0
 800b50e:	61fb      	str	r3, [r7, #28]
 800b510:	e023      	b.n	800b55a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	4b15      	ldr	r3, [pc, #84]	; (800b56c <xTaskCheckForTimeOut+0xc0>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d007      	beq.n	800b52e <xTaskCheckForTimeOut+0x82>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	69ba      	ldr	r2, [r7, #24]
 800b524:	429a      	cmp	r2, r3
 800b526:	d302      	bcc.n	800b52e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b528:	2301      	movs	r3, #1
 800b52a:	61fb      	str	r3, [r7, #28]
 800b52c:	e015      	b.n	800b55a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	697a      	ldr	r2, [r7, #20]
 800b534:	429a      	cmp	r2, r3
 800b536:	d20b      	bcs.n	800b550 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	1ad2      	subs	r2, r2, r3
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f7ff ff9b 	bl	800b480 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b54a:	2300      	movs	r3, #0
 800b54c:	61fb      	str	r3, [r7, #28]
 800b54e:	e004      	b.n	800b55a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	2200      	movs	r2, #0
 800b554:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b556:	2301      	movs	r3, #1
 800b558:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b55a:	f000 fc6b 	bl	800be34 <vPortExitCritical>

	return xReturn;
 800b55e:	69fb      	ldr	r3, [r7, #28]
}
 800b560:	4618      	mov	r0, r3
 800b562:	3720      	adds	r7, #32
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	200005a0 	.word	0x200005a0
 800b56c:	200005b4 	.word	0x200005b4

0800b570 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b570:	b480      	push	{r7}
 800b572:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b574:	4b03      	ldr	r3, [pc, #12]	; (800b584 <vTaskMissedYield+0x14>)
 800b576:	2201      	movs	r2, #1
 800b578:	601a      	str	r2, [r3, #0]
}
 800b57a:	bf00      	nop
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr
 800b584:	200005b0 	.word	0x200005b0

0800b588 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b590:	f000 f852 	bl	800b638 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b594:	4b06      	ldr	r3, [pc, #24]	; (800b5b0 <prvIdleTask+0x28>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d9f9      	bls.n	800b590 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b59c:	4b05      	ldr	r3, [pc, #20]	; (800b5b4 <prvIdleTask+0x2c>)
 800b59e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5a2:	601a      	str	r2, [r3, #0]
 800b5a4:	f3bf 8f4f 	dsb	sy
 800b5a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b5ac:	e7f0      	b.n	800b590 <prvIdleTask+0x8>
 800b5ae:	bf00      	nop
 800b5b0:	200004a0 	.word	0x200004a0
 800b5b4:	e000ed04 	.word	0xe000ed04

0800b5b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5be:	2300      	movs	r3, #0
 800b5c0:	607b      	str	r3, [r7, #4]
 800b5c2:	e00c      	b.n	800b5de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	4413      	add	r3, r2
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	4a12      	ldr	r2, [pc, #72]	; (800b618 <prvInitialiseTaskLists+0x60>)
 800b5d0:	4413      	add	r3, r2
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7fe fad2 	bl	8009b7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	3301      	adds	r3, #1
 800b5dc:	607b      	str	r3, [r7, #4]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2b06      	cmp	r3, #6
 800b5e2:	d9ef      	bls.n	800b5c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b5e4:	480d      	ldr	r0, [pc, #52]	; (800b61c <prvInitialiseTaskLists+0x64>)
 800b5e6:	f7fe fac9 	bl	8009b7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b5ea:	480d      	ldr	r0, [pc, #52]	; (800b620 <prvInitialiseTaskLists+0x68>)
 800b5ec:	f7fe fac6 	bl	8009b7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b5f0:	480c      	ldr	r0, [pc, #48]	; (800b624 <prvInitialiseTaskLists+0x6c>)
 800b5f2:	f7fe fac3 	bl	8009b7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b5f6:	480c      	ldr	r0, [pc, #48]	; (800b628 <prvInitialiseTaskLists+0x70>)
 800b5f8:	f7fe fac0 	bl	8009b7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b5fc:	480b      	ldr	r0, [pc, #44]	; (800b62c <prvInitialiseTaskLists+0x74>)
 800b5fe:	f7fe fabd 	bl	8009b7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b602:	4b0b      	ldr	r3, [pc, #44]	; (800b630 <prvInitialiseTaskLists+0x78>)
 800b604:	4a05      	ldr	r2, [pc, #20]	; (800b61c <prvInitialiseTaskLists+0x64>)
 800b606:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b608:	4b0a      	ldr	r3, [pc, #40]	; (800b634 <prvInitialiseTaskLists+0x7c>)
 800b60a:	4a05      	ldr	r2, [pc, #20]	; (800b620 <prvInitialiseTaskLists+0x68>)
 800b60c:	601a      	str	r2, [r3, #0]
}
 800b60e:	bf00      	nop
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	200004a0 	.word	0x200004a0
 800b61c:	2000052c 	.word	0x2000052c
 800b620:	20000540 	.word	0x20000540
 800b624:	2000055c 	.word	0x2000055c
 800b628:	20000570 	.word	0x20000570
 800b62c:	20000588 	.word	0x20000588
 800b630:	20000554 	.word	0x20000554
 800b634:	20000558 	.word	0x20000558

0800b638 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b63e:	e019      	b.n	800b674 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b640:	f000 fbc8 	bl	800bdd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b644:	4b10      	ldr	r3, [pc, #64]	; (800b688 <prvCheckTasksWaitingTermination+0x50>)
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	68db      	ldr	r3, [r3, #12]
 800b64a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	3304      	adds	r3, #4
 800b650:	4618      	mov	r0, r3
 800b652:	f7fe fb1d 	bl	8009c90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b656:	4b0d      	ldr	r3, [pc, #52]	; (800b68c <prvCheckTasksWaitingTermination+0x54>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	3b01      	subs	r3, #1
 800b65c:	4a0b      	ldr	r2, [pc, #44]	; (800b68c <prvCheckTasksWaitingTermination+0x54>)
 800b65e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b660:	4b0b      	ldr	r3, [pc, #44]	; (800b690 <prvCheckTasksWaitingTermination+0x58>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	3b01      	subs	r3, #1
 800b666:	4a0a      	ldr	r2, [pc, #40]	; (800b690 <prvCheckTasksWaitingTermination+0x58>)
 800b668:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b66a:	f000 fbe3 	bl	800be34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 f810 	bl	800b694 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b674:	4b06      	ldr	r3, [pc, #24]	; (800b690 <prvCheckTasksWaitingTermination+0x58>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d1e1      	bne.n	800b640 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b67c:	bf00      	nop
 800b67e:	bf00      	nop
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	20000570 	.word	0x20000570
 800b68c:	2000059c 	.word	0x2000059c
 800b690:	20000584 	.word	0x20000584

0800b694 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d108      	bne.n	800b6b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f000 fd80 	bl	800c1b0 <vPortFree>
				vPortFree( pxTCB );
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 fd7d 	bl	800c1b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b6b6:	e018      	b.n	800b6ea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	d103      	bne.n	800b6ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 fd74 	bl	800c1b0 <vPortFree>
	}
 800b6c8:	e00f      	b.n	800b6ea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	d00a      	beq.n	800b6ea <prvDeleteTCB+0x56>
	__asm volatile
 800b6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d8:	f383 8811 	msr	BASEPRI, r3
 800b6dc:	f3bf 8f6f 	isb	sy
 800b6e0:	f3bf 8f4f 	dsb	sy
 800b6e4:	60fb      	str	r3, [r7, #12]
}
 800b6e6:	bf00      	nop
 800b6e8:	e7fe      	b.n	800b6e8 <prvDeleteTCB+0x54>
	}
 800b6ea:	bf00      	nop
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
	...

0800b6f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6fa:	4b0c      	ldr	r3, [pc, #48]	; (800b72c <prvResetNextTaskUnblockTime+0x38>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d104      	bne.n	800b70e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b704:	4b0a      	ldr	r3, [pc, #40]	; (800b730 <prvResetNextTaskUnblockTime+0x3c>)
 800b706:	f04f 32ff 	mov.w	r2, #4294967295
 800b70a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b70c:	e008      	b.n	800b720 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b70e:	4b07      	ldr	r3, [pc, #28]	; (800b72c <prvResetNextTaskUnblockTime+0x38>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	685b      	ldr	r3, [r3, #4]
 800b71c:	4a04      	ldr	r2, [pc, #16]	; (800b730 <prvResetNextTaskUnblockTime+0x3c>)
 800b71e:	6013      	str	r3, [r2, #0]
}
 800b720:	bf00      	nop
 800b722:	370c      	adds	r7, #12
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr
 800b72c:	20000554 	.word	0x20000554
 800b730:	200005bc 	.word	0x200005bc

0800b734 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b734:	b480      	push	{r7}
 800b736:	b083      	sub	sp, #12
 800b738:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b73a:	4b0b      	ldr	r3, [pc, #44]	; (800b768 <xTaskGetSchedulerState+0x34>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d102      	bne.n	800b748 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b742:	2301      	movs	r3, #1
 800b744:	607b      	str	r3, [r7, #4]
 800b746:	e008      	b.n	800b75a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b748:	4b08      	ldr	r3, [pc, #32]	; (800b76c <xTaskGetSchedulerState+0x38>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d102      	bne.n	800b756 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b750:	2302      	movs	r3, #2
 800b752:	607b      	str	r3, [r7, #4]
 800b754:	e001      	b.n	800b75a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b756:	2300      	movs	r3, #0
 800b758:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b75a:	687b      	ldr	r3, [r7, #4]
	}
 800b75c:	4618      	mov	r0, r3
 800b75e:	370c      	adds	r7, #12
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr
 800b768:	200005a8 	.word	0x200005a8
 800b76c:	200005c4 	.word	0x200005c4

0800b770 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b77c:	2300      	movs	r3, #0
 800b77e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d05e      	beq.n	800b844 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b78a:	4b31      	ldr	r3, [pc, #196]	; (800b850 <xTaskPriorityInherit+0xe0>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b790:	429a      	cmp	r2, r3
 800b792:	d24e      	bcs.n	800b832 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	699b      	ldr	r3, [r3, #24]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	db06      	blt.n	800b7aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b79c:	4b2c      	ldr	r3, [pc, #176]	; (800b850 <xTaskPriorityInherit+0xe0>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a2:	f1c3 0207 	rsb	r2, r3, #7
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	6959      	ldr	r1, [r3, #20]
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	4413      	add	r3, r2
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	4a26      	ldr	r2, [pc, #152]	; (800b854 <xTaskPriorityInherit+0xe4>)
 800b7bc:	4413      	add	r3, r2
 800b7be:	4299      	cmp	r1, r3
 800b7c0:	d12f      	bne.n	800b822 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	3304      	adds	r3, #4
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7fe fa62 	bl	8009c90 <uxListRemove>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d10a      	bne.n	800b7e8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b7dc:	43da      	mvns	r2, r3
 800b7de:	4b1e      	ldr	r3, [pc, #120]	; (800b858 <xTaskPriorityInherit+0xe8>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4013      	ands	r3, r2
 800b7e4:	4a1c      	ldr	r2, [pc, #112]	; (800b858 <xTaskPriorityInherit+0xe8>)
 800b7e6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b7e8:	4b19      	ldr	r3, [pc, #100]	; (800b850 <xTaskPriorityInherit+0xe0>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	409a      	lsls	r2, r3
 800b7fa:	4b17      	ldr	r3, [pc, #92]	; (800b858 <xTaskPriorityInherit+0xe8>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4313      	orrs	r3, r2
 800b800:	4a15      	ldr	r2, [pc, #84]	; (800b858 <xTaskPriorityInherit+0xe8>)
 800b802:	6013      	str	r3, [r2, #0]
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b808:	4613      	mov	r3, r2
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	4413      	add	r3, r2
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	4a10      	ldr	r2, [pc, #64]	; (800b854 <xTaskPriorityInherit+0xe4>)
 800b812:	441a      	add	r2, r3
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	3304      	adds	r3, #4
 800b818:	4619      	mov	r1, r3
 800b81a:	4610      	mov	r0, r2
 800b81c:	f7fe f9db 	bl	8009bd6 <vListInsertEnd>
 800b820:	e004      	b.n	800b82c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b822:	4b0b      	ldr	r3, [pc, #44]	; (800b850 <xTaskPriorityInherit+0xe0>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b82c:	2301      	movs	r3, #1
 800b82e:	60fb      	str	r3, [r7, #12]
 800b830:	e008      	b.n	800b844 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b836:	4b06      	ldr	r3, [pc, #24]	; (800b850 <xTaskPriorityInherit+0xe0>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d201      	bcs.n	800b844 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b840:	2301      	movs	r3, #1
 800b842:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b844:	68fb      	ldr	r3, [r7, #12]
	}
 800b846:	4618      	mov	r0, r3
 800b848:	3710      	adds	r7, #16
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop
 800b850:	2000049c 	.word	0x2000049c
 800b854:	200004a0 	.word	0x200004a0
 800b858:	200005a4 	.word	0x200005a4

0800b85c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b868:	2300      	movs	r3, #0
 800b86a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d06e      	beq.n	800b950 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b872:	4b3a      	ldr	r3, [pc, #232]	; (800b95c <xTaskPriorityDisinherit+0x100>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	693a      	ldr	r2, [r7, #16]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d00a      	beq.n	800b892 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b880:	f383 8811 	msr	BASEPRI, r3
 800b884:	f3bf 8f6f 	isb	sy
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	60fb      	str	r3, [r7, #12]
}
 800b88e:	bf00      	nop
 800b890:	e7fe      	b.n	800b890 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b896:	2b00      	cmp	r3, #0
 800b898:	d10a      	bne.n	800b8b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89e:	f383 8811 	msr	BASEPRI, r3
 800b8a2:	f3bf 8f6f 	isb	sy
 800b8a6:	f3bf 8f4f 	dsb	sy
 800b8aa:	60bb      	str	r3, [r7, #8]
}
 800b8ac:	bf00      	nop
 800b8ae:	e7fe      	b.n	800b8ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8b4:	1e5a      	subs	r2, r3, #1
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d044      	beq.n	800b950 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d140      	bne.n	800b950 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	3304      	adds	r3, #4
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7fe f9dc 	bl	8009c90 <uxListRemove>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d115      	bne.n	800b90a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8e2:	491f      	ldr	r1, [pc, #124]	; (800b960 <xTaskPriorityDisinherit+0x104>)
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	4413      	add	r3, r2
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	440b      	add	r3, r1
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10a      	bne.n	800b90a <xTaskPriorityDisinherit+0xae>
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b8fe:	43da      	mvns	r2, r3
 800b900:	4b18      	ldr	r3, [pc, #96]	; (800b964 <xTaskPriorityDisinherit+0x108>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4013      	ands	r3, r2
 800b906:	4a17      	ldr	r2, [pc, #92]	; (800b964 <xTaskPriorityDisinherit+0x108>)
 800b908:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b916:	f1c3 0207 	rsb	r2, r3, #7
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b922:	2201      	movs	r2, #1
 800b924:	409a      	lsls	r2, r3
 800b926:	4b0f      	ldr	r3, [pc, #60]	; (800b964 <xTaskPriorityDisinherit+0x108>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4313      	orrs	r3, r2
 800b92c:	4a0d      	ldr	r2, [pc, #52]	; (800b964 <xTaskPriorityDisinherit+0x108>)
 800b92e:	6013      	str	r3, [r2, #0]
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b934:	4613      	mov	r3, r2
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	4413      	add	r3, r2
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	4a08      	ldr	r2, [pc, #32]	; (800b960 <xTaskPriorityDisinherit+0x104>)
 800b93e:	441a      	add	r2, r3
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	3304      	adds	r3, #4
 800b944:	4619      	mov	r1, r3
 800b946:	4610      	mov	r0, r2
 800b948:	f7fe f945 	bl	8009bd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b94c:	2301      	movs	r3, #1
 800b94e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b950:	697b      	ldr	r3, [r7, #20]
	}
 800b952:	4618      	mov	r0, r3
 800b954:	3718      	adds	r7, #24
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	2000049c 	.word	0x2000049c
 800b960:	200004a0 	.word	0x200004a0
 800b964:	200005a4 	.word	0x200005a4

0800b968 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b088      	sub	sp, #32
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b976:	2301      	movs	r3, #1
 800b978:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d077      	beq.n	800ba70 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10a      	bne.n	800b99e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98c:	f383 8811 	msr	BASEPRI, r3
 800b990:	f3bf 8f6f 	isb	sy
 800b994:	f3bf 8f4f 	dsb	sy
 800b998:	60fb      	str	r3, [r7, #12]
}
 800b99a:	bf00      	nop
 800b99c:	e7fe      	b.n	800b99c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d902      	bls.n	800b9ae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	61fb      	str	r3, [r7, #28]
 800b9ac:	e002      	b.n	800b9b4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9b2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b8:	69fa      	ldr	r2, [r7, #28]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d058      	beq.n	800ba70 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9c2:	697a      	ldr	r2, [r7, #20]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d153      	bne.n	800ba70 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b9c8:	4b2b      	ldr	r3, [pc, #172]	; (800ba78 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	69ba      	ldr	r2, [r7, #24]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d10a      	bne.n	800b9e8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d6:	f383 8811 	msr	BASEPRI, r3
 800b9da:	f3bf 8f6f 	isb	sy
 800b9de:	f3bf 8f4f 	dsb	sy
 800b9e2:	60bb      	str	r3, [r7, #8]
}
 800b9e4:	bf00      	nop
 800b9e6:	e7fe      	b.n	800b9e6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	69fa      	ldr	r2, [r7, #28]
 800b9f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	699b      	ldr	r3, [r3, #24]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	db04      	blt.n	800ba06 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	f1c3 0207 	rsb	r2, r3, #7
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	6959      	ldr	r1, [r3, #20]
 800ba0a:	693a      	ldr	r2, [r7, #16]
 800ba0c:	4613      	mov	r3, r2
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	4413      	add	r3, r2
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	4a19      	ldr	r2, [pc, #100]	; (800ba7c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ba16:	4413      	add	r3, r2
 800ba18:	4299      	cmp	r1, r3
 800ba1a:	d129      	bne.n	800ba70 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	3304      	adds	r3, #4
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7fe f935 	bl	8009c90 <uxListRemove>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d10a      	bne.n	800ba42 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ba2c:	69bb      	ldr	r3, [r7, #24]
 800ba2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba30:	2201      	movs	r2, #1
 800ba32:	fa02 f303 	lsl.w	r3, r2, r3
 800ba36:	43da      	mvns	r2, r3
 800ba38:	4b11      	ldr	r3, [pc, #68]	; (800ba80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4013      	ands	r3, r2
 800ba3e:	4a10      	ldr	r2, [pc, #64]	; (800ba80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ba40:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba46:	2201      	movs	r2, #1
 800ba48:	409a      	lsls	r2, r3
 800ba4a:	4b0d      	ldr	r3, [pc, #52]	; (800ba80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	4a0b      	ldr	r2, [pc, #44]	; (800ba80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ba52:	6013      	str	r3, [r2, #0]
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba58:	4613      	mov	r3, r2
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	4413      	add	r3, r2
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	4a06      	ldr	r2, [pc, #24]	; (800ba7c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ba62:	441a      	add	r2, r3
 800ba64:	69bb      	ldr	r3, [r7, #24]
 800ba66:	3304      	adds	r3, #4
 800ba68:	4619      	mov	r1, r3
 800ba6a:	4610      	mov	r0, r2
 800ba6c:	f7fe f8b3 	bl	8009bd6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba70:	bf00      	nop
 800ba72:	3720      	adds	r7, #32
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	2000049c 	.word	0x2000049c
 800ba7c:	200004a0 	.word	0x200004a0
 800ba80:	200005a4 	.word	0x200005a4

0800ba84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ba84:	b480      	push	{r7}
 800ba86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ba88:	4b07      	ldr	r3, [pc, #28]	; (800baa8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d004      	beq.n	800ba9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ba90:	4b05      	ldr	r3, [pc, #20]	; (800baa8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba96:	3201      	adds	r2, #1
 800ba98:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ba9a:	4b03      	ldr	r3, [pc, #12]	; (800baa8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
	}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr
 800baa8:	2000049c 	.word	0x2000049c

0800baac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bab6:	4b29      	ldr	r3, [pc, #164]	; (800bb5c <prvAddCurrentTaskToDelayedList+0xb0>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800babc:	4b28      	ldr	r3, [pc, #160]	; (800bb60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	3304      	adds	r3, #4
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7fe f8e4 	bl	8009c90 <uxListRemove>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d10b      	bne.n	800bae6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bace:	4b24      	ldr	r3, [pc, #144]	; (800bb60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad4:	2201      	movs	r2, #1
 800bad6:	fa02 f303 	lsl.w	r3, r2, r3
 800bada:	43da      	mvns	r2, r3
 800badc:	4b21      	ldr	r3, [pc, #132]	; (800bb64 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4013      	ands	r3, r2
 800bae2:	4a20      	ldr	r2, [pc, #128]	; (800bb64 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bae4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baec:	d10a      	bne.n	800bb04 <prvAddCurrentTaskToDelayedList+0x58>
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d007      	beq.n	800bb04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800baf4:	4b1a      	ldr	r3, [pc, #104]	; (800bb60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	3304      	adds	r3, #4
 800bafa:	4619      	mov	r1, r3
 800bafc:	481a      	ldr	r0, [pc, #104]	; (800bb68 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bafe:	f7fe f86a 	bl	8009bd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bb02:	e026      	b.n	800bb52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4413      	add	r3, r2
 800bb0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb0c:	4b14      	ldr	r3, [pc, #80]	; (800bb60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	68ba      	ldr	r2, [r7, #8]
 800bb12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bb14:	68ba      	ldr	r2, [r7, #8]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d209      	bcs.n	800bb30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb1c:	4b13      	ldr	r3, [pc, #76]	; (800bb6c <prvAddCurrentTaskToDelayedList+0xc0>)
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	4b0f      	ldr	r3, [pc, #60]	; (800bb60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	3304      	adds	r3, #4
 800bb26:	4619      	mov	r1, r3
 800bb28:	4610      	mov	r0, r2
 800bb2a:	f7fe f878 	bl	8009c1e <vListInsert>
}
 800bb2e:	e010      	b.n	800bb52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb30:	4b0f      	ldr	r3, [pc, #60]	; (800bb70 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	4b0a      	ldr	r3, [pc, #40]	; (800bb60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	3304      	adds	r3, #4
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	4610      	mov	r0, r2
 800bb3e:	f7fe f86e 	bl	8009c1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bb42:	4b0c      	ldr	r3, [pc, #48]	; (800bb74 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68ba      	ldr	r2, [r7, #8]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d202      	bcs.n	800bb52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bb4c:	4a09      	ldr	r2, [pc, #36]	; (800bb74 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	6013      	str	r3, [r2, #0]
}
 800bb52:	bf00      	nop
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	200005a0 	.word	0x200005a0
 800bb60:	2000049c 	.word	0x2000049c
 800bb64:	200005a4 	.word	0x200005a4
 800bb68:	20000588 	.word	0x20000588
 800bb6c:	20000558 	.word	0x20000558
 800bb70:	20000554 	.word	0x20000554
 800bb74:	200005bc 	.word	0x200005bc

0800bb78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	3b04      	subs	r3, #4
 800bb88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bb90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	3b04      	subs	r3, #4
 800bb96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	f023 0201 	bic.w	r2, r3, #1
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	3b04      	subs	r3, #4
 800bba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bba8:	4a0c      	ldr	r2, [pc, #48]	; (800bbdc <pxPortInitialiseStack+0x64>)
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	3b14      	subs	r3, #20
 800bbb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	3b04      	subs	r3, #4
 800bbbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f06f 0202 	mvn.w	r2, #2
 800bbc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	3b20      	subs	r3, #32
 800bbcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bbce:	68fb      	ldr	r3, [r7, #12]
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3714      	adds	r7, #20
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr
 800bbdc:	0800bbe1 	.word	0x0800bbe1

0800bbe0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b085      	sub	sp, #20
 800bbe4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bbea:	4b12      	ldr	r3, [pc, #72]	; (800bc34 <prvTaskExitError+0x54>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbf2:	d00a      	beq.n	800bc0a <prvTaskExitError+0x2a>
	__asm volatile
 800bbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf8:	f383 8811 	msr	BASEPRI, r3
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	60fb      	str	r3, [r7, #12]
}
 800bc06:	bf00      	nop
 800bc08:	e7fe      	b.n	800bc08 <prvTaskExitError+0x28>
	__asm volatile
 800bc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc0e:	f383 8811 	msr	BASEPRI, r3
 800bc12:	f3bf 8f6f 	isb	sy
 800bc16:	f3bf 8f4f 	dsb	sy
 800bc1a:	60bb      	str	r3, [r7, #8]
}
 800bc1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc1e:	bf00      	nop
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d0fc      	beq.n	800bc20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc26:	bf00      	nop
 800bc28:	bf00      	nop
 800bc2a:	3714      	adds	r7, #20
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr
 800bc34:	2000011c 	.word	0x2000011c
	...

0800bc40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc40:	4b07      	ldr	r3, [pc, #28]	; (800bc60 <pxCurrentTCBConst2>)
 800bc42:	6819      	ldr	r1, [r3, #0]
 800bc44:	6808      	ldr	r0, [r1, #0]
 800bc46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc4a:	f380 8809 	msr	PSP, r0
 800bc4e:	f3bf 8f6f 	isb	sy
 800bc52:	f04f 0000 	mov.w	r0, #0
 800bc56:	f380 8811 	msr	BASEPRI, r0
 800bc5a:	4770      	bx	lr
 800bc5c:	f3af 8000 	nop.w

0800bc60 <pxCurrentTCBConst2>:
 800bc60:	2000049c 	.word	0x2000049c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bc64:	bf00      	nop
 800bc66:	bf00      	nop

0800bc68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bc68:	4808      	ldr	r0, [pc, #32]	; (800bc8c <prvPortStartFirstTask+0x24>)
 800bc6a:	6800      	ldr	r0, [r0, #0]
 800bc6c:	6800      	ldr	r0, [r0, #0]
 800bc6e:	f380 8808 	msr	MSP, r0
 800bc72:	f04f 0000 	mov.w	r0, #0
 800bc76:	f380 8814 	msr	CONTROL, r0
 800bc7a:	b662      	cpsie	i
 800bc7c:	b661      	cpsie	f
 800bc7e:	f3bf 8f4f 	dsb	sy
 800bc82:	f3bf 8f6f 	isb	sy
 800bc86:	df00      	svc	0
 800bc88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bc8a:	bf00      	nop
 800bc8c:	e000ed08 	.word	0xe000ed08

0800bc90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bc96:	4b46      	ldr	r3, [pc, #280]	; (800bdb0 <xPortStartScheduler+0x120>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4a46      	ldr	r2, [pc, #280]	; (800bdb4 <xPortStartScheduler+0x124>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d10a      	bne.n	800bcb6 <xPortStartScheduler+0x26>
	__asm volatile
 800bca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca4:	f383 8811 	msr	BASEPRI, r3
 800bca8:	f3bf 8f6f 	isb	sy
 800bcac:	f3bf 8f4f 	dsb	sy
 800bcb0:	613b      	str	r3, [r7, #16]
}
 800bcb2:	bf00      	nop
 800bcb4:	e7fe      	b.n	800bcb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bcb6:	4b3e      	ldr	r3, [pc, #248]	; (800bdb0 <xPortStartScheduler+0x120>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a3f      	ldr	r2, [pc, #252]	; (800bdb8 <xPortStartScheduler+0x128>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d10a      	bne.n	800bcd6 <xPortStartScheduler+0x46>
	__asm volatile
 800bcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc4:	f383 8811 	msr	BASEPRI, r3
 800bcc8:	f3bf 8f6f 	isb	sy
 800bccc:	f3bf 8f4f 	dsb	sy
 800bcd0:	60fb      	str	r3, [r7, #12]
}
 800bcd2:	bf00      	nop
 800bcd4:	e7fe      	b.n	800bcd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bcd6:	4b39      	ldr	r3, [pc, #228]	; (800bdbc <xPortStartScheduler+0x12c>)
 800bcd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	22ff      	movs	r2, #255	; 0xff
 800bce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bcf0:	78fb      	ldrb	r3, [r7, #3]
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bcf8:	b2da      	uxtb	r2, r3
 800bcfa:	4b31      	ldr	r3, [pc, #196]	; (800bdc0 <xPortStartScheduler+0x130>)
 800bcfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bcfe:	4b31      	ldr	r3, [pc, #196]	; (800bdc4 <xPortStartScheduler+0x134>)
 800bd00:	2207      	movs	r2, #7
 800bd02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd04:	e009      	b.n	800bd1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bd06:	4b2f      	ldr	r3, [pc, #188]	; (800bdc4 <xPortStartScheduler+0x134>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	4a2d      	ldr	r2, [pc, #180]	; (800bdc4 <xPortStartScheduler+0x134>)
 800bd0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd10:	78fb      	ldrb	r3, [r7, #3]
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	005b      	lsls	r3, r3, #1
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd1a:	78fb      	ldrb	r3, [r7, #3]
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd22:	2b80      	cmp	r3, #128	; 0x80
 800bd24:	d0ef      	beq.n	800bd06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd26:	4b27      	ldr	r3, [pc, #156]	; (800bdc4 <xPortStartScheduler+0x134>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f1c3 0307 	rsb	r3, r3, #7
 800bd2e:	2b04      	cmp	r3, #4
 800bd30:	d00a      	beq.n	800bd48 <xPortStartScheduler+0xb8>
	__asm volatile
 800bd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd36:	f383 8811 	msr	BASEPRI, r3
 800bd3a:	f3bf 8f6f 	isb	sy
 800bd3e:	f3bf 8f4f 	dsb	sy
 800bd42:	60bb      	str	r3, [r7, #8]
}
 800bd44:	bf00      	nop
 800bd46:	e7fe      	b.n	800bd46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd48:	4b1e      	ldr	r3, [pc, #120]	; (800bdc4 <xPortStartScheduler+0x134>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	021b      	lsls	r3, r3, #8
 800bd4e:	4a1d      	ldr	r2, [pc, #116]	; (800bdc4 <xPortStartScheduler+0x134>)
 800bd50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd52:	4b1c      	ldr	r3, [pc, #112]	; (800bdc4 <xPortStartScheduler+0x134>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd5a:	4a1a      	ldr	r2, [pc, #104]	; (800bdc4 <xPortStartScheduler+0x134>)
 800bd5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	b2da      	uxtb	r2, r3
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd66:	4b18      	ldr	r3, [pc, #96]	; (800bdc8 <xPortStartScheduler+0x138>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4a17      	ldr	r2, [pc, #92]	; (800bdc8 <xPortStartScheduler+0x138>)
 800bd6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bd70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd72:	4b15      	ldr	r3, [pc, #84]	; (800bdc8 <xPortStartScheduler+0x138>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a14      	ldr	r2, [pc, #80]	; (800bdc8 <xPortStartScheduler+0x138>)
 800bd78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bd7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bd7e:	f000 f8dd 	bl	800bf3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd82:	4b12      	ldr	r3, [pc, #72]	; (800bdcc <xPortStartScheduler+0x13c>)
 800bd84:	2200      	movs	r2, #0
 800bd86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bd88:	f000 f8fc 	bl	800bf84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd8c:	4b10      	ldr	r3, [pc, #64]	; (800bdd0 <xPortStartScheduler+0x140>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a0f      	ldr	r2, [pc, #60]	; (800bdd0 <xPortStartScheduler+0x140>)
 800bd92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bd96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd98:	f7ff ff66 	bl	800bc68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bd9c:	f7ff fa8e 	bl	800b2bc <vTaskSwitchContext>
	prvTaskExitError();
 800bda0:	f7ff ff1e 	bl	800bbe0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bda4:	2300      	movs	r3, #0
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3718      	adds	r7, #24
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	e000ed00 	.word	0xe000ed00
 800bdb4:	410fc271 	.word	0x410fc271
 800bdb8:	410fc270 	.word	0x410fc270
 800bdbc:	e000e400 	.word	0xe000e400
 800bdc0:	200005c8 	.word	0x200005c8
 800bdc4:	200005cc 	.word	0x200005cc
 800bdc8:	e000ed20 	.word	0xe000ed20
 800bdcc:	2000011c 	.word	0x2000011c
 800bdd0:	e000ef34 	.word	0xe000ef34

0800bdd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
	__asm volatile
 800bdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	607b      	str	r3, [r7, #4]
}
 800bdec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bdee:	4b0f      	ldr	r3, [pc, #60]	; (800be2c <vPortEnterCritical+0x58>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	4a0d      	ldr	r2, [pc, #52]	; (800be2c <vPortEnterCritical+0x58>)
 800bdf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bdf8:	4b0c      	ldr	r3, [pc, #48]	; (800be2c <vPortEnterCritical+0x58>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d10f      	bne.n	800be20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be00:	4b0b      	ldr	r3, [pc, #44]	; (800be30 <vPortEnterCritical+0x5c>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	b2db      	uxtb	r3, r3
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00a      	beq.n	800be20 <vPortEnterCritical+0x4c>
	__asm volatile
 800be0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0e:	f383 8811 	msr	BASEPRI, r3
 800be12:	f3bf 8f6f 	isb	sy
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	603b      	str	r3, [r7, #0]
}
 800be1c:	bf00      	nop
 800be1e:	e7fe      	b.n	800be1e <vPortEnterCritical+0x4a>
	}
}
 800be20:	bf00      	nop
 800be22:	370c      	adds	r7, #12
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr
 800be2c:	2000011c 	.word	0x2000011c
 800be30:	e000ed04 	.word	0xe000ed04

0800be34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be3a:	4b12      	ldr	r3, [pc, #72]	; (800be84 <vPortExitCritical+0x50>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d10a      	bne.n	800be58 <vPortExitCritical+0x24>
	__asm volatile
 800be42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be46:	f383 8811 	msr	BASEPRI, r3
 800be4a:	f3bf 8f6f 	isb	sy
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	607b      	str	r3, [r7, #4]
}
 800be54:	bf00      	nop
 800be56:	e7fe      	b.n	800be56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800be58:	4b0a      	ldr	r3, [pc, #40]	; (800be84 <vPortExitCritical+0x50>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	3b01      	subs	r3, #1
 800be5e:	4a09      	ldr	r2, [pc, #36]	; (800be84 <vPortExitCritical+0x50>)
 800be60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be62:	4b08      	ldr	r3, [pc, #32]	; (800be84 <vPortExitCritical+0x50>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d105      	bne.n	800be76 <vPortExitCritical+0x42>
 800be6a:	2300      	movs	r3, #0
 800be6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	f383 8811 	msr	BASEPRI, r3
}
 800be74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800be76:	bf00      	nop
 800be78:	370c      	adds	r7, #12
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr
 800be82:	bf00      	nop
 800be84:	2000011c 	.word	0x2000011c
	...

0800be90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be90:	f3ef 8009 	mrs	r0, PSP
 800be94:	f3bf 8f6f 	isb	sy
 800be98:	4b15      	ldr	r3, [pc, #84]	; (800bef0 <pxCurrentTCBConst>)
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	f01e 0f10 	tst.w	lr, #16
 800bea0:	bf08      	it	eq
 800bea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beaa:	6010      	str	r0, [r2, #0]
 800beac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800beb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800beb4:	f380 8811 	msr	BASEPRI, r0
 800beb8:	f3bf 8f4f 	dsb	sy
 800bebc:	f3bf 8f6f 	isb	sy
 800bec0:	f7ff f9fc 	bl	800b2bc <vTaskSwitchContext>
 800bec4:	f04f 0000 	mov.w	r0, #0
 800bec8:	f380 8811 	msr	BASEPRI, r0
 800becc:	bc09      	pop	{r0, r3}
 800bece:	6819      	ldr	r1, [r3, #0]
 800bed0:	6808      	ldr	r0, [r1, #0]
 800bed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed6:	f01e 0f10 	tst.w	lr, #16
 800beda:	bf08      	it	eq
 800bedc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bee0:	f380 8809 	msr	PSP, r0
 800bee4:	f3bf 8f6f 	isb	sy
 800bee8:	4770      	bx	lr
 800beea:	bf00      	nop
 800beec:	f3af 8000 	nop.w

0800bef0 <pxCurrentTCBConst>:
 800bef0:	2000049c 	.word	0x2000049c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bef4:	bf00      	nop
 800bef6:	bf00      	nop

0800bef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
	__asm volatile
 800befe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf02:	f383 8811 	msr	BASEPRI, r3
 800bf06:	f3bf 8f6f 	isb	sy
 800bf0a:	f3bf 8f4f 	dsb	sy
 800bf0e:	607b      	str	r3, [r7, #4]
}
 800bf10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf12:	f7ff f91b 	bl	800b14c <xTaskIncrementTick>
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d003      	beq.n	800bf24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf1c:	4b06      	ldr	r3, [pc, #24]	; (800bf38 <SysTick_Handler+0x40>)
 800bf1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf22:	601a      	str	r2, [r3, #0]
 800bf24:	2300      	movs	r3, #0
 800bf26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	f383 8811 	msr	BASEPRI, r3
}
 800bf2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf30:	bf00      	nop
 800bf32:	3708      	adds	r7, #8
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	e000ed04 	.word	0xe000ed04

0800bf3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf40:	4b0b      	ldr	r3, [pc, #44]	; (800bf70 <vPortSetupTimerInterrupt+0x34>)
 800bf42:	2200      	movs	r2, #0
 800bf44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf46:	4b0b      	ldr	r3, [pc, #44]	; (800bf74 <vPortSetupTimerInterrupt+0x38>)
 800bf48:	2200      	movs	r2, #0
 800bf4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf4c:	4b0a      	ldr	r3, [pc, #40]	; (800bf78 <vPortSetupTimerInterrupt+0x3c>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a0a      	ldr	r2, [pc, #40]	; (800bf7c <vPortSetupTimerInterrupt+0x40>)
 800bf52:	fba2 2303 	umull	r2, r3, r2, r3
 800bf56:	099b      	lsrs	r3, r3, #6
 800bf58:	4a09      	ldr	r2, [pc, #36]	; (800bf80 <vPortSetupTimerInterrupt+0x44>)
 800bf5a:	3b01      	subs	r3, #1
 800bf5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf5e:	4b04      	ldr	r3, [pc, #16]	; (800bf70 <vPortSetupTimerInterrupt+0x34>)
 800bf60:	2207      	movs	r2, #7
 800bf62:	601a      	str	r2, [r3, #0]
}
 800bf64:	bf00      	nop
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop
 800bf70:	e000e010 	.word	0xe000e010
 800bf74:	e000e018 	.word	0xe000e018
 800bf78:	20000000 	.word	0x20000000
 800bf7c:	10624dd3 	.word	0x10624dd3
 800bf80:	e000e014 	.word	0xe000e014

0800bf84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bf94 <vPortEnableVFP+0x10>
 800bf88:	6801      	ldr	r1, [r0, #0]
 800bf8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bf8e:	6001      	str	r1, [r0, #0]
 800bf90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf92:	bf00      	nop
 800bf94:	e000ed88 	.word	0xe000ed88

0800bf98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bf98:	b480      	push	{r7}
 800bf9a:	b085      	sub	sp, #20
 800bf9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bf9e:	f3ef 8305 	mrs	r3, IPSR
 800bfa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2b0f      	cmp	r3, #15
 800bfa8:	d914      	bls.n	800bfd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bfaa:	4a17      	ldr	r2, [pc, #92]	; (800c008 <vPortValidateInterruptPriority+0x70>)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	4413      	add	r3, r2
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bfb4:	4b15      	ldr	r3, [pc, #84]	; (800c00c <vPortValidateInterruptPriority+0x74>)
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	7afa      	ldrb	r2, [r7, #11]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d20a      	bcs.n	800bfd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	607b      	str	r3, [r7, #4]
}
 800bfd0:	bf00      	nop
 800bfd2:	e7fe      	b.n	800bfd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bfd4:	4b0e      	ldr	r3, [pc, #56]	; (800c010 <vPortValidateInterruptPriority+0x78>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bfdc:	4b0d      	ldr	r3, [pc, #52]	; (800c014 <vPortValidateInterruptPriority+0x7c>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d90a      	bls.n	800bffa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe8:	f383 8811 	msr	BASEPRI, r3
 800bfec:	f3bf 8f6f 	isb	sy
 800bff0:	f3bf 8f4f 	dsb	sy
 800bff4:	603b      	str	r3, [r7, #0]
}
 800bff6:	bf00      	nop
 800bff8:	e7fe      	b.n	800bff8 <vPortValidateInterruptPriority+0x60>
	}
 800bffa:	bf00      	nop
 800bffc:	3714      	adds	r7, #20
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	e000e3f0 	.word	0xe000e3f0
 800c00c:	200005c8 	.word	0x200005c8
 800c010:	e000ed0c 	.word	0xe000ed0c
 800c014:	200005cc 	.word	0x200005cc

0800c018 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b08a      	sub	sp, #40	; 0x28
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c020:	2300      	movs	r3, #0
 800c022:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c024:	f7fe ffc6 	bl	800afb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c028:	4b5b      	ldr	r3, [pc, #364]	; (800c198 <pvPortMalloc+0x180>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d101      	bne.n	800c034 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c030:	f000 f920 	bl	800c274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c034:	4b59      	ldr	r3, [pc, #356]	; (800c19c <pvPortMalloc+0x184>)
 800c036:	681a      	ldr	r2, [r3, #0]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	4013      	ands	r3, r2
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	f040 8093 	bne.w	800c168 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d01d      	beq.n	800c084 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c048:	2208      	movs	r2, #8
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	4413      	add	r3, r2
 800c04e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f003 0307 	and.w	r3, r3, #7
 800c056:	2b00      	cmp	r3, #0
 800c058:	d014      	beq.n	800c084 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f023 0307 	bic.w	r3, r3, #7
 800c060:	3308      	adds	r3, #8
 800c062:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f003 0307 	and.w	r3, r3, #7
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00a      	beq.n	800c084 <pvPortMalloc+0x6c>
	__asm volatile
 800c06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c072:	f383 8811 	msr	BASEPRI, r3
 800c076:	f3bf 8f6f 	isb	sy
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	617b      	str	r3, [r7, #20]
}
 800c080:	bf00      	nop
 800c082:	e7fe      	b.n	800c082 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d06e      	beq.n	800c168 <pvPortMalloc+0x150>
 800c08a:	4b45      	ldr	r3, [pc, #276]	; (800c1a0 <pvPortMalloc+0x188>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	429a      	cmp	r2, r3
 800c092:	d869      	bhi.n	800c168 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c094:	4b43      	ldr	r3, [pc, #268]	; (800c1a4 <pvPortMalloc+0x18c>)
 800c096:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c098:	4b42      	ldr	r3, [pc, #264]	; (800c1a4 <pvPortMalloc+0x18c>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c09e:	e004      	b.n	800c0aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d903      	bls.n	800c0bc <pvPortMalloc+0xa4>
 800c0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d1f1      	bne.n	800c0a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c0bc:	4b36      	ldr	r3, [pc, #216]	; (800c198 <pvPortMalloc+0x180>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d050      	beq.n	800c168 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c0c6:	6a3b      	ldr	r3, [r7, #32]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	2208      	movs	r2, #8
 800c0cc:	4413      	add	r3, r2
 800c0ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	6a3b      	ldr	r3, [r7, #32]
 800c0d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0da:	685a      	ldr	r2, [r3, #4]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	1ad2      	subs	r2, r2, r3
 800c0e0:	2308      	movs	r3, #8
 800c0e2:	005b      	lsls	r3, r3, #1
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d91f      	bls.n	800c128 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c0e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	f003 0307 	and.w	r3, r3, #7
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d00a      	beq.n	800c110 <pvPortMalloc+0xf8>
	__asm volatile
 800c0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fe:	f383 8811 	msr	BASEPRI, r3
 800c102:	f3bf 8f6f 	isb	sy
 800c106:	f3bf 8f4f 	dsb	sy
 800c10a:	613b      	str	r3, [r7, #16]
}
 800c10c:	bf00      	nop
 800c10e:	e7fe      	b.n	800c10e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c112:	685a      	ldr	r2, [r3, #4]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	1ad2      	subs	r2, r2, r3
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c122:	69b8      	ldr	r0, [r7, #24]
 800c124:	f000 f908 	bl	800c338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c128:	4b1d      	ldr	r3, [pc, #116]	; (800c1a0 <pvPortMalloc+0x188>)
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	1ad3      	subs	r3, r2, r3
 800c132:	4a1b      	ldr	r2, [pc, #108]	; (800c1a0 <pvPortMalloc+0x188>)
 800c134:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c136:	4b1a      	ldr	r3, [pc, #104]	; (800c1a0 <pvPortMalloc+0x188>)
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	4b1b      	ldr	r3, [pc, #108]	; (800c1a8 <pvPortMalloc+0x190>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d203      	bcs.n	800c14a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c142:	4b17      	ldr	r3, [pc, #92]	; (800c1a0 <pvPortMalloc+0x188>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4a18      	ldr	r2, [pc, #96]	; (800c1a8 <pvPortMalloc+0x190>)
 800c148:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14c:	685a      	ldr	r2, [r3, #4]
 800c14e:	4b13      	ldr	r3, [pc, #76]	; (800c19c <pvPortMalloc+0x184>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	431a      	orrs	r2, r3
 800c154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c156:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15a:	2200      	movs	r2, #0
 800c15c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c15e:	4b13      	ldr	r3, [pc, #76]	; (800c1ac <pvPortMalloc+0x194>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	3301      	adds	r3, #1
 800c164:	4a11      	ldr	r2, [pc, #68]	; (800c1ac <pvPortMalloc+0x194>)
 800c166:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c168:	f7fe ff32 	bl	800afd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c16c:	69fb      	ldr	r3, [r7, #28]
 800c16e:	f003 0307 	and.w	r3, r3, #7
 800c172:	2b00      	cmp	r3, #0
 800c174:	d00a      	beq.n	800c18c <pvPortMalloc+0x174>
	__asm volatile
 800c176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17a:	f383 8811 	msr	BASEPRI, r3
 800c17e:	f3bf 8f6f 	isb	sy
 800c182:	f3bf 8f4f 	dsb	sy
 800c186:	60fb      	str	r3, [r7, #12]
}
 800c188:	bf00      	nop
 800c18a:	e7fe      	b.n	800c18a <pvPortMalloc+0x172>
	return pvReturn;
 800c18c:	69fb      	ldr	r3, [r7, #28]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3728      	adds	r7, #40	; 0x28
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	200041d8 	.word	0x200041d8
 800c19c:	200041ec 	.word	0x200041ec
 800c1a0:	200041dc 	.word	0x200041dc
 800c1a4:	200041d0 	.word	0x200041d0
 800c1a8:	200041e0 	.word	0x200041e0
 800c1ac:	200041e4 	.word	0x200041e4

0800c1b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b086      	sub	sp, #24
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d04d      	beq.n	800c25e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c1c2:	2308      	movs	r3, #8
 800c1c4:	425b      	negs	r3, r3
 800c1c6:	697a      	ldr	r2, [r7, #20]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	685a      	ldr	r2, [r3, #4]
 800c1d4:	4b24      	ldr	r3, [pc, #144]	; (800c268 <vPortFree+0xb8>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4013      	ands	r3, r2
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d10a      	bne.n	800c1f4 <vPortFree+0x44>
	__asm volatile
 800c1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e2:	f383 8811 	msr	BASEPRI, r3
 800c1e6:	f3bf 8f6f 	isb	sy
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	60fb      	str	r3, [r7, #12]
}
 800c1f0:	bf00      	nop
 800c1f2:	e7fe      	b.n	800c1f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d00a      	beq.n	800c212 <vPortFree+0x62>
	__asm volatile
 800c1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c200:	f383 8811 	msr	BASEPRI, r3
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	60bb      	str	r3, [r7, #8]
}
 800c20e:	bf00      	nop
 800c210:	e7fe      	b.n	800c210 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	685a      	ldr	r2, [r3, #4]
 800c216:	4b14      	ldr	r3, [pc, #80]	; (800c268 <vPortFree+0xb8>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4013      	ands	r3, r2
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d01e      	beq.n	800c25e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d11a      	bne.n	800c25e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	685a      	ldr	r2, [r3, #4]
 800c22c:	4b0e      	ldr	r3, [pc, #56]	; (800c268 <vPortFree+0xb8>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	43db      	mvns	r3, r3
 800c232:	401a      	ands	r2, r3
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c238:	f7fe febc 	bl	800afb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	685a      	ldr	r2, [r3, #4]
 800c240:	4b0a      	ldr	r3, [pc, #40]	; (800c26c <vPortFree+0xbc>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4413      	add	r3, r2
 800c246:	4a09      	ldr	r2, [pc, #36]	; (800c26c <vPortFree+0xbc>)
 800c248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c24a:	6938      	ldr	r0, [r7, #16]
 800c24c:	f000 f874 	bl	800c338 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c250:	4b07      	ldr	r3, [pc, #28]	; (800c270 <vPortFree+0xc0>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	3301      	adds	r3, #1
 800c256:	4a06      	ldr	r2, [pc, #24]	; (800c270 <vPortFree+0xc0>)
 800c258:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c25a:	f7fe feb9 	bl	800afd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c25e:	bf00      	nop
 800c260:	3718      	adds	r7, #24
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	200041ec 	.word	0x200041ec
 800c26c:	200041dc 	.word	0x200041dc
 800c270:	200041e8 	.word	0x200041e8

0800c274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c274:	b480      	push	{r7}
 800c276:	b085      	sub	sp, #20
 800c278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c27a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c27e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c280:	4b27      	ldr	r3, [pc, #156]	; (800c320 <prvHeapInit+0xac>)
 800c282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f003 0307 	and.w	r3, r3, #7
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d00c      	beq.n	800c2a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	3307      	adds	r3, #7
 800c292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f023 0307 	bic.w	r3, r3, #7
 800c29a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c29c:	68ba      	ldr	r2, [r7, #8]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	1ad3      	subs	r3, r2, r3
 800c2a2:	4a1f      	ldr	r2, [pc, #124]	; (800c320 <prvHeapInit+0xac>)
 800c2a4:	4413      	add	r3, r2
 800c2a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c2ac:	4a1d      	ldr	r2, [pc, #116]	; (800c324 <prvHeapInit+0xb0>)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c2b2:	4b1c      	ldr	r3, [pc, #112]	; (800c324 <prvHeapInit+0xb0>)
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	68ba      	ldr	r2, [r7, #8]
 800c2bc:	4413      	add	r3, r2
 800c2be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c2c0:	2208      	movs	r2, #8
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	1a9b      	subs	r3, r3, r2
 800c2c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f023 0307 	bic.w	r3, r3, #7
 800c2ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	4a15      	ldr	r2, [pc, #84]	; (800c328 <prvHeapInit+0xb4>)
 800c2d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c2d6:	4b14      	ldr	r3, [pc, #80]	; (800c328 <prvHeapInit+0xb4>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c2de:	4b12      	ldr	r3, [pc, #72]	; (800c328 <prvHeapInit+0xb4>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	68fa      	ldr	r2, [r7, #12]
 800c2ee:	1ad2      	subs	r2, r2, r3
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c2f4:	4b0c      	ldr	r3, [pc, #48]	; (800c328 <prvHeapInit+0xb4>)
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	4a0a      	ldr	r2, [pc, #40]	; (800c32c <prvHeapInit+0xb8>)
 800c302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	4a09      	ldr	r2, [pc, #36]	; (800c330 <prvHeapInit+0xbc>)
 800c30a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c30c:	4b09      	ldr	r3, [pc, #36]	; (800c334 <prvHeapInit+0xc0>)
 800c30e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c312:	601a      	str	r2, [r3, #0]
}
 800c314:	bf00      	nop
 800c316:	3714      	adds	r7, #20
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr
 800c320:	200005d0 	.word	0x200005d0
 800c324:	200041d0 	.word	0x200041d0
 800c328:	200041d8 	.word	0x200041d8
 800c32c:	200041e0 	.word	0x200041e0
 800c330:	200041dc 	.word	0x200041dc
 800c334:	200041ec 	.word	0x200041ec

0800c338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c340:	4b28      	ldr	r3, [pc, #160]	; (800c3e4 <prvInsertBlockIntoFreeList+0xac>)
 800c342:	60fb      	str	r3, [r7, #12]
 800c344:	e002      	b.n	800c34c <prvInsertBlockIntoFreeList+0x14>
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	60fb      	str	r3, [r7, #12]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	429a      	cmp	r2, r3
 800c354:	d8f7      	bhi.n	800c346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	68ba      	ldr	r2, [r7, #8]
 800c360:	4413      	add	r3, r2
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	429a      	cmp	r2, r3
 800c366:	d108      	bne.n	800c37a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	685a      	ldr	r2, [r3, #4]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	441a      	add	r2, r3
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	68ba      	ldr	r2, [r7, #8]
 800c384:	441a      	add	r2, r3
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d118      	bne.n	800c3c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	4b15      	ldr	r3, [pc, #84]	; (800c3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	429a      	cmp	r2, r3
 800c398:	d00d      	beq.n	800c3b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	685a      	ldr	r2, [r3, #4]
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	441a      	add	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	681a      	ldr	r2, [r3, #0]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	601a      	str	r2, [r3, #0]
 800c3b4:	e008      	b.n	800c3c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c3b6:	4b0c      	ldr	r3, [pc, #48]	; (800c3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c3b8:	681a      	ldr	r2, [r3, #0]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	601a      	str	r2, [r3, #0]
 800c3be:	e003      	b.n	800c3c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c3c8:	68fa      	ldr	r2, [r7, #12]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d002      	beq.n	800c3d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3d6:	bf00      	nop
 800c3d8:	3714      	adds	r7, #20
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	200041d0 	.word	0x200041d0
 800c3e8:	200041d8 	.word	0x200041d8

0800c3ec <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c3f6:	f007 fa03 	bl	8013800 <sys_timeouts_sleeptime>
 800c3fa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c402:	d10b      	bne.n	800c41c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c404:	4813      	ldr	r0, [pc, #76]	; (800c454 <tcpip_timeouts_mbox_fetch+0x68>)
 800c406:	f009 ff72 	bl	80162ee <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c40a:	2200      	movs	r2, #0
 800c40c:	6839      	ldr	r1, [r7, #0]
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f009 fee4 	bl	80161dc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c414:	480f      	ldr	r0, [pc, #60]	; (800c454 <tcpip_timeouts_mbox_fetch+0x68>)
 800c416:	f009 ff5b 	bl	80162d0 <sys_mutex_lock>
    return;
 800c41a:	e018      	b.n	800c44e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d102      	bne.n	800c428 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c422:	f007 f9b3 	bl	801378c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c426:	e7e6      	b.n	800c3f6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c428:	480a      	ldr	r0, [pc, #40]	; (800c454 <tcpip_timeouts_mbox_fetch+0x68>)
 800c42a:	f009 ff60 	bl	80162ee <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c42e:	68fa      	ldr	r2, [r7, #12]
 800c430:	6839      	ldr	r1, [r7, #0]
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f009 fed2 	bl	80161dc <sys_arch_mbox_fetch>
 800c438:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c43a:	4806      	ldr	r0, [pc, #24]	; (800c454 <tcpip_timeouts_mbox_fetch+0x68>)
 800c43c:	f009 ff48 	bl	80162d0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c446:	d102      	bne.n	800c44e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c448:	f007 f9a0 	bl	801378c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c44c:	e7d3      	b.n	800c3f6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c44e:	3710      	adds	r7, #16
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	200079e4 	.word	0x200079e4

0800c458 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c460:	4810      	ldr	r0, [pc, #64]	; (800c4a4 <tcpip_thread+0x4c>)
 800c462:	f009 ff35 	bl	80162d0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c466:	4b10      	ldr	r3, [pc, #64]	; (800c4a8 <tcpip_thread+0x50>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d005      	beq.n	800c47a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c46e:	4b0e      	ldr	r3, [pc, #56]	; (800c4a8 <tcpip_thread+0x50>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4a0e      	ldr	r2, [pc, #56]	; (800c4ac <tcpip_thread+0x54>)
 800c474:	6812      	ldr	r2, [r2, #0]
 800c476:	4610      	mov	r0, r2
 800c478:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c47a:	f107 030c 	add.w	r3, r7, #12
 800c47e:	4619      	mov	r1, r3
 800c480:	480b      	ldr	r0, [pc, #44]	; (800c4b0 <tcpip_thread+0x58>)
 800c482:	f7ff ffb3 	bl	800c3ec <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d106      	bne.n	800c49a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c48c:	4b09      	ldr	r3, [pc, #36]	; (800c4b4 <tcpip_thread+0x5c>)
 800c48e:	2291      	movs	r2, #145	; 0x91
 800c490:	4909      	ldr	r1, [pc, #36]	; (800c4b8 <tcpip_thread+0x60>)
 800c492:	480a      	ldr	r0, [pc, #40]	; (800c4bc <tcpip_thread+0x64>)
 800c494:	f00a fcc6 	bl	8016e24 <iprintf>
      continue;
 800c498:	e003      	b.n	800c4a2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	4618      	mov	r0, r3
 800c49e:	f000 f80f 	bl	800c4c0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c4a2:	e7ea      	b.n	800c47a <tcpip_thread+0x22>
 800c4a4:	200079e4 	.word	0x200079e4
 800c4a8:	200041f0 	.word	0x200041f0
 800c4ac:	200041f4 	.word	0x200041f4
 800c4b0:	200041f8 	.word	0x200041f8
 800c4b4:	08018014 	.word	0x08018014
 800c4b8:	08018044 	.word	0x08018044
 800c4bc:	08018064 	.word	0x08018064

0800c4c0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	2b02      	cmp	r3, #2
 800c4ce:	d026      	beq.n	800c51e <tcpip_thread_handle_msg+0x5e>
 800c4d0:	2b02      	cmp	r3, #2
 800c4d2:	dc2b      	bgt.n	800c52c <tcpip_thread_handle_msg+0x6c>
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d002      	beq.n	800c4de <tcpip_thread_handle_msg+0x1e>
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d015      	beq.n	800c508 <tcpip_thread_handle_msg+0x48>
 800c4dc:	e026      	b.n	800c52c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	68db      	ldr	r3, [r3, #12]
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	6850      	ldr	r0, [r2, #4]
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	6892      	ldr	r2, [r2, #8]
 800c4ea:	4611      	mov	r1, r2
 800c4ec:	4798      	blx	r3
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d004      	beq.n	800c4fe <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f001 fc4d 	bl	800dd98 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c4fe:	6879      	ldr	r1, [r7, #4]
 800c500:	2009      	movs	r0, #9
 800c502:	f000 fe1d 	bl	800d140 <memp_free>
      break;
 800c506:	e018      	b.n	800c53a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	6892      	ldr	r2, [r2, #8]
 800c510:	4610      	mov	r0, r2
 800c512:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c514:	6879      	ldr	r1, [r7, #4]
 800c516:	2008      	movs	r0, #8
 800c518:	f000 fe12 	bl	800d140 <memp_free>
      break;
 800c51c:	e00d      	b.n	800c53a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	6892      	ldr	r2, [r2, #8]
 800c526:	4610      	mov	r0, r2
 800c528:	4798      	blx	r3
      break;
 800c52a:	e006      	b.n	800c53a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c52c:	4b05      	ldr	r3, [pc, #20]	; (800c544 <tcpip_thread_handle_msg+0x84>)
 800c52e:	22cf      	movs	r2, #207	; 0xcf
 800c530:	4905      	ldr	r1, [pc, #20]	; (800c548 <tcpip_thread_handle_msg+0x88>)
 800c532:	4806      	ldr	r0, [pc, #24]	; (800c54c <tcpip_thread_handle_msg+0x8c>)
 800c534:	f00a fc76 	bl	8016e24 <iprintf>
      break;
 800c538:	bf00      	nop
  }
}
 800c53a:	bf00      	nop
 800c53c:	3708      	adds	r7, #8
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	08018014 	.word	0x08018014
 800c548:	08018044 	.word	0x08018044
 800c54c:	08018064 	.word	0x08018064

0800c550 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b086      	sub	sp, #24
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c55c:	481a      	ldr	r0, [pc, #104]	; (800c5c8 <tcpip_inpkt+0x78>)
 800c55e:	f009 fe7c 	bl	801625a <sys_mbox_valid>
 800c562:	4603      	mov	r3, r0
 800c564:	2b00      	cmp	r3, #0
 800c566:	d105      	bne.n	800c574 <tcpip_inpkt+0x24>
 800c568:	4b18      	ldr	r3, [pc, #96]	; (800c5cc <tcpip_inpkt+0x7c>)
 800c56a:	22fc      	movs	r2, #252	; 0xfc
 800c56c:	4918      	ldr	r1, [pc, #96]	; (800c5d0 <tcpip_inpkt+0x80>)
 800c56e:	4819      	ldr	r0, [pc, #100]	; (800c5d4 <tcpip_inpkt+0x84>)
 800c570:	f00a fc58 	bl	8016e24 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c574:	2009      	movs	r0, #9
 800c576:	f000 fd91 	bl	800d09c <memp_malloc>
 800c57a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d102      	bne.n	800c588 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c582:	f04f 33ff 	mov.w	r3, #4294967295
 800c586:	e01a      	b.n	800c5be <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	2200      	movs	r2, #0
 800c58c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	68fa      	ldr	r2, [r7, #12]
 800c592:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	68ba      	ldr	r2, [r7, #8]
 800c598:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c5a0:	6979      	ldr	r1, [r7, #20]
 800c5a2:	4809      	ldr	r0, [pc, #36]	; (800c5c8 <tcpip_inpkt+0x78>)
 800c5a4:	f009 fe00 	bl	80161a8 <sys_mbox_trypost>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d006      	beq.n	800c5bc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c5ae:	6979      	ldr	r1, [r7, #20]
 800c5b0:	2009      	movs	r0, #9
 800c5b2:	f000 fdc5 	bl	800d140 <memp_free>
    return ERR_MEM;
 800c5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ba:	e000      	b.n	800c5be <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c5bc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3718      	adds	r7, #24
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	200041f8 	.word	0x200041f8
 800c5cc:	08018014 	.word	0x08018014
 800c5d0:	0801808c 	.word	0x0801808c
 800c5d4:	08018064 	.word	0x08018064

0800c5d8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c5e8:	f003 0318 	and.w	r3, r3, #24
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d006      	beq.n	800c5fe <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c5f0:	4a08      	ldr	r2, [pc, #32]	; (800c614 <tcpip_input+0x3c>)
 800c5f2:	6839      	ldr	r1, [r7, #0]
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f7ff ffab 	bl	800c550 <tcpip_inpkt>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	e005      	b.n	800c60a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c5fe:	4a06      	ldr	r2, [pc, #24]	; (800c618 <tcpip_input+0x40>)
 800c600:	6839      	ldr	r1, [r7, #0]
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7ff ffa4 	bl	800c550 <tcpip_inpkt>
 800c608:	4603      	mov	r3, r0
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3708      	adds	r7, #8
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	08015fb9 	.word	0x08015fb9
 800c618:	08014ecd 	.word	0x08014ecd

0800c61c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c626:	4819      	ldr	r0, [pc, #100]	; (800c68c <tcpip_try_callback+0x70>)
 800c628:	f009 fe17 	bl	801625a <sys_mbox_valid>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d106      	bne.n	800c640 <tcpip_try_callback+0x24>
 800c632:	4b17      	ldr	r3, [pc, #92]	; (800c690 <tcpip_try_callback+0x74>)
 800c634:	f240 125d 	movw	r2, #349	; 0x15d
 800c638:	4916      	ldr	r1, [pc, #88]	; (800c694 <tcpip_try_callback+0x78>)
 800c63a:	4817      	ldr	r0, [pc, #92]	; (800c698 <tcpip_try_callback+0x7c>)
 800c63c:	f00a fbf2 	bl	8016e24 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c640:	2008      	movs	r0, #8
 800c642:	f000 fd2b 	bl	800d09c <memp_malloc>
 800c646:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d102      	bne.n	800c654 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c64e:	f04f 33ff 	mov.w	r3, #4294967295
 800c652:	e017      	b.n	800c684 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2201      	movs	r2, #1
 800c658:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	683a      	ldr	r2, [r7, #0]
 800c664:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c666:	68f9      	ldr	r1, [r7, #12]
 800c668:	4808      	ldr	r0, [pc, #32]	; (800c68c <tcpip_try_callback+0x70>)
 800c66a:	f009 fd9d 	bl	80161a8 <sys_mbox_trypost>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d006      	beq.n	800c682 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c674:	68f9      	ldr	r1, [r7, #12]
 800c676:	2008      	movs	r0, #8
 800c678:	f000 fd62 	bl	800d140 <memp_free>
    return ERR_MEM;
 800c67c:	f04f 33ff 	mov.w	r3, #4294967295
 800c680:	e000      	b.n	800c684 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c682:	2300      	movs	r3, #0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3710      	adds	r7, #16
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	200041f8 	.word	0x200041f8
 800c690:	08018014 	.word	0x08018014
 800c694:	0801808c 	.word	0x0801808c
 800c698:	08018064 	.word	0x08018064

0800c69c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af02      	add	r7, sp, #8
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c6a6:	f000 f871 	bl	800c78c <lwip_init>

  tcpip_init_done = initfunc;
 800c6aa:	4a17      	ldr	r2, [pc, #92]	; (800c708 <tcpip_init+0x6c>)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c6b0:	4a16      	ldr	r2, [pc, #88]	; (800c70c <tcpip_init+0x70>)
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c6b6:	2106      	movs	r1, #6
 800c6b8:	4815      	ldr	r0, [pc, #84]	; (800c710 <tcpip_init+0x74>)
 800c6ba:	f009 fd53 	bl	8016164 <sys_mbox_new>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d006      	beq.n	800c6d2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c6c4:	4b13      	ldr	r3, [pc, #76]	; (800c714 <tcpip_init+0x78>)
 800c6c6:	f240 2261 	movw	r2, #609	; 0x261
 800c6ca:	4913      	ldr	r1, [pc, #76]	; (800c718 <tcpip_init+0x7c>)
 800c6cc:	4813      	ldr	r0, [pc, #76]	; (800c71c <tcpip_init+0x80>)
 800c6ce:	f00a fba9 	bl	8016e24 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c6d2:	4813      	ldr	r0, [pc, #76]	; (800c720 <tcpip_init+0x84>)
 800c6d4:	f009 fde0 	bl	8016298 <sys_mutex_new>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d006      	beq.n	800c6ec <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c6de:	4b0d      	ldr	r3, [pc, #52]	; (800c714 <tcpip_init+0x78>)
 800c6e0:	f240 2265 	movw	r2, #613	; 0x265
 800c6e4:	490f      	ldr	r1, [pc, #60]	; (800c724 <tcpip_init+0x88>)
 800c6e6:	480d      	ldr	r0, [pc, #52]	; (800c71c <tcpip_init+0x80>)
 800c6e8:	f00a fb9c 	bl	8016e24 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	9300      	str	r3, [sp, #0]
 800c6f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	490c      	ldr	r1, [pc, #48]	; (800c728 <tcpip_init+0x8c>)
 800c6f8:	480c      	ldr	r0, [pc, #48]	; (800c72c <tcpip_init+0x90>)
 800c6fa:	f009 fe05 	bl	8016308 <sys_thread_new>
}
 800c6fe:	bf00      	nop
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	200041f0 	.word	0x200041f0
 800c70c:	200041f4 	.word	0x200041f4
 800c710:	200041f8 	.word	0x200041f8
 800c714:	08018014 	.word	0x08018014
 800c718:	0801809c 	.word	0x0801809c
 800c71c:	08018064 	.word	0x08018064
 800c720:	200079e4 	.word	0x200079e4
 800c724:	080180c0 	.word	0x080180c0
 800c728:	0800c459 	.word	0x0800c459
 800c72c:	080180e4 	.word	0x080180e4

0800c730 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	4603      	mov	r3, r0
 800c738:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c73a:	88fb      	ldrh	r3, [r7, #6]
 800c73c:	021b      	lsls	r3, r3, #8
 800c73e:	b21a      	sxth	r2, r3
 800c740:	88fb      	ldrh	r3, [r7, #6]
 800c742:	0a1b      	lsrs	r3, r3, #8
 800c744:	b29b      	uxth	r3, r3
 800c746:	b21b      	sxth	r3, r3
 800c748:	4313      	orrs	r3, r2
 800c74a:	b21b      	sxth	r3, r3
 800c74c:	b29b      	uxth	r3, r3
}
 800c74e:	4618      	mov	r0, r3
 800c750:	370c      	adds	r7, #12
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr

0800c75a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c75a:	b480      	push	{r7}
 800c75c:	b083      	sub	sp, #12
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	061a      	lsls	r2, r3, #24
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	021b      	lsls	r3, r3, #8
 800c76a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c76e:	431a      	orrs	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	0a1b      	lsrs	r3, r3, #8
 800c774:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c778:	431a      	orrs	r2, r3
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	0e1b      	lsrs	r3, r3, #24
 800c77e:	4313      	orrs	r3, r2
}
 800c780:	4618      	mov	r0, r3
 800c782:	370c      	adds	r7, #12
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr

0800c78c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c792:	2300      	movs	r3, #0
 800c794:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c796:	f009 fd71 	bl	801627c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c79a:	f000 f8d5 	bl	800c948 <mem_init>
  memp_init();
 800c79e:	f000 fc31 	bl	800d004 <memp_init>
  pbuf_init();
  netif_init();
 800c7a2:	f000 fcf7 	bl	800d194 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c7a6:	f007 f863 	bl	8013870 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c7aa:	f001 fd8f 	bl	800e2cc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c7ae:	f006 ffa5 	bl	80136fc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c7b2:	bf00      	nop
 800c7b4:	3708      	adds	r7, #8
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
	...

0800c7bc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b083      	sub	sp, #12
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c7c6:	4b05      	ldr	r3, [pc, #20]	; (800c7dc <ptr_to_mem+0x20>)
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	88fb      	ldrh	r3, [r7, #6]
 800c7cc:	4413      	add	r3, r2
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	370c      	adds	r7, #12
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop
 800c7dc:	200041fc 	.word	0x200041fc

0800c7e0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c7e8:	4b05      	ldr	r3, [pc, #20]	; (800c800 <mem_to_ptr+0x20>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	1ad3      	subs	r3, r2, r3
 800c7f0:	b29b      	uxth	r3, r3
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	370c      	adds	r7, #12
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr
 800c7fe:	bf00      	nop
 800c800:	200041fc 	.word	0x200041fc

0800c804 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c804:	b590      	push	{r4, r7, lr}
 800c806:	b085      	sub	sp, #20
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c80c:	4b45      	ldr	r3, [pc, #276]	; (800c924 <plug_holes+0x120>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	687a      	ldr	r2, [r7, #4]
 800c812:	429a      	cmp	r2, r3
 800c814:	d206      	bcs.n	800c824 <plug_holes+0x20>
 800c816:	4b44      	ldr	r3, [pc, #272]	; (800c928 <plug_holes+0x124>)
 800c818:	f240 12df 	movw	r2, #479	; 0x1df
 800c81c:	4943      	ldr	r1, [pc, #268]	; (800c92c <plug_holes+0x128>)
 800c81e:	4844      	ldr	r0, [pc, #272]	; (800c930 <plug_holes+0x12c>)
 800c820:	f00a fb00 	bl	8016e24 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c824:	4b43      	ldr	r3, [pc, #268]	; (800c934 <plug_holes+0x130>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d306      	bcc.n	800c83c <plug_holes+0x38>
 800c82e:	4b3e      	ldr	r3, [pc, #248]	; (800c928 <plug_holes+0x124>)
 800c830:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c834:	4940      	ldr	r1, [pc, #256]	; (800c938 <plug_holes+0x134>)
 800c836:	483e      	ldr	r0, [pc, #248]	; (800c930 <plug_holes+0x12c>)
 800c838:	f00a faf4 	bl	8016e24 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	791b      	ldrb	r3, [r3, #4]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d006      	beq.n	800c852 <plug_holes+0x4e>
 800c844:	4b38      	ldr	r3, [pc, #224]	; (800c928 <plug_holes+0x124>)
 800c846:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c84a:	493c      	ldr	r1, [pc, #240]	; (800c93c <plug_holes+0x138>)
 800c84c:	4838      	ldr	r0, [pc, #224]	; (800c930 <plug_holes+0x12c>)
 800c84e:	f00a fae9 	bl	8016e24 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	881b      	ldrh	r3, [r3, #0]
 800c856:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c85a:	d906      	bls.n	800c86a <plug_holes+0x66>
 800c85c:	4b32      	ldr	r3, [pc, #200]	; (800c928 <plug_holes+0x124>)
 800c85e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c862:	4937      	ldr	r1, [pc, #220]	; (800c940 <plug_holes+0x13c>)
 800c864:	4832      	ldr	r0, [pc, #200]	; (800c930 <plug_holes+0x12c>)
 800c866:	f00a fadd 	bl	8016e24 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	881b      	ldrh	r3, [r3, #0]
 800c86e:	4618      	mov	r0, r3
 800c870:	f7ff ffa4 	bl	800c7bc <ptr_to_mem>
 800c874:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d024      	beq.n	800c8c8 <plug_holes+0xc4>
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	791b      	ldrb	r3, [r3, #4]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d120      	bne.n	800c8c8 <plug_holes+0xc4>
 800c886:	4b2b      	ldr	r3, [pc, #172]	; (800c934 <plug_holes+0x130>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	68fa      	ldr	r2, [r7, #12]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d01b      	beq.n	800c8c8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c890:	4b2c      	ldr	r3, [pc, #176]	; (800c944 <plug_holes+0x140>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	68fa      	ldr	r2, [r7, #12]
 800c896:	429a      	cmp	r2, r3
 800c898:	d102      	bne.n	800c8a0 <plug_holes+0x9c>
      lfree = mem;
 800c89a:	4a2a      	ldr	r2, [pc, #168]	; (800c944 <plug_holes+0x140>)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	881a      	ldrh	r2, [r3, #0]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	881b      	ldrh	r3, [r3, #0]
 800c8ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c8b0:	d00a      	beq.n	800c8c8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	881b      	ldrh	r3, [r3, #0]
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7ff ff80 	bl	800c7bc <ptr_to_mem>
 800c8bc:	4604      	mov	r4, r0
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f7ff ff8e 	bl	800c7e0 <mem_to_ptr>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	885b      	ldrh	r3, [r3, #2]
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7ff ff75 	bl	800c7bc <ptr_to_mem>
 800c8d2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c8d4:	68ba      	ldr	r2, [r7, #8]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d01f      	beq.n	800c91c <plug_holes+0x118>
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	791b      	ldrb	r3, [r3, #4]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d11b      	bne.n	800c91c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c8e4:	4b17      	ldr	r3, [pc, #92]	; (800c944 <plug_holes+0x140>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d102      	bne.n	800c8f4 <plug_holes+0xf0>
      lfree = pmem;
 800c8ee:	4a15      	ldr	r2, [pc, #84]	; (800c944 <plug_holes+0x140>)
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	881a      	ldrh	r2, [r3, #0]
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	881b      	ldrh	r3, [r3, #0]
 800c900:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c904:	d00a      	beq.n	800c91c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	881b      	ldrh	r3, [r3, #0]
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7ff ff56 	bl	800c7bc <ptr_to_mem>
 800c910:	4604      	mov	r4, r0
 800c912:	68b8      	ldr	r0, [r7, #8]
 800c914:	f7ff ff64 	bl	800c7e0 <mem_to_ptr>
 800c918:	4603      	mov	r3, r0
 800c91a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c91c:	bf00      	nop
 800c91e:	3714      	adds	r7, #20
 800c920:	46bd      	mov	sp, r7
 800c922:	bd90      	pop	{r4, r7, pc}
 800c924:	200041fc 	.word	0x200041fc
 800c928:	080180f4 	.word	0x080180f4
 800c92c:	08018124 	.word	0x08018124
 800c930:	0801813c 	.word	0x0801813c
 800c934:	20004200 	.word	0x20004200
 800c938:	08018164 	.word	0x08018164
 800c93c:	08018180 	.word	0x08018180
 800c940:	0801819c 	.word	0x0801819c
 800c944:	20004208 	.word	0x20004208

0800c948 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c94e:	4b1f      	ldr	r3, [pc, #124]	; (800c9cc <mem_init+0x84>)
 800c950:	3303      	adds	r3, #3
 800c952:	f023 0303 	bic.w	r3, r3, #3
 800c956:	461a      	mov	r2, r3
 800c958:	4b1d      	ldr	r3, [pc, #116]	; (800c9d0 <mem_init+0x88>)
 800c95a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c95c:	4b1c      	ldr	r3, [pc, #112]	; (800c9d0 <mem_init+0x88>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c968:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2200      	movs	r2, #0
 800c96e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2200      	movs	r2, #0
 800c974:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c976:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c97a:	f7ff ff1f 	bl	800c7bc <ptr_to_mem>
 800c97e:	4603      	mov	r3, r0
 800c980:	4a14      	ldr	r2, [pc, #80]	; (800c9d4 <mem_init+0x8c>)
 800c982:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c984:	4b13      	ldr	r3, [pc, #76]	; (800c9d4 <mem_init+0x8c>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	2201      	movs	r2, #1
 800c98a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c98c:	4b11      	ldr	r3, [pc, #68]	; (800c9d4 <mem_init+0x8c>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c994:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c996:	4b0f      	ldr	r3, [pc, #60]	; (800c9d4 <mem_init+0x8c>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c99e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c9a0:	4b0b      	ldr	r3, [pc, #44]	; (800c9d0 <mem_init+0x88>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a0c      	ldr	r2, [pc, #48]	; (800c9d8 <mem_init+0x90>)
 800c9a6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c9a8:	480c      	ldr	r0, [pc, #48]	; (800c9dc <mem_init+0x94>)
 800c9aa:	f009 fc75 	bl	8016298 <sys_mutex_new>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d006      	beq.n	800c9c2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c9b4:	4b0a      	ldr	r3, [pc, #40]	; (800c9e0 <mem_init+0x98>)
 800c9b6:	f240 221f 	movw	r2, #543	; 0x21f
 800c9ba:	490a      	ldr	r1, [pc, #40]	; (800c9e4 <mem_init+0x9c>)
 800c9bc:	480a      	ldr	r0, [pc, #40]	; (800c9e8 <mem_init+0xa0>)
 800c9be:	f00a fa31 	bl	8016e24 <iprintf>
  }
}
 800c9c2:	bf00      	nop
 800c9c4:	3708      	adds	r7, #8
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
 800c9ca:	bf00      	nop
 800c9cc:	20007a00 	.word	0x20007a00
 800c9d0:	200041fc 	.word	0x200041fc
 800c9d4:	20004200 	.word	0x20004200
 800c9d8:	20004208 	.word	0x20004208
 800c9dc:	20004204 	.word	0x20004204
 800c9e0:	080180f4 	.word	0x080180f4
 800c9e4:	080181c8 	.word	0x080181c8
 800c9e8:	0801813c 	.word	0x0801813c

0800c9ec <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b086      	sub	sp, #24
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f7ff fef3 	bl	800c7e0 <mem_to_ptr>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	881b      	ldrh	r3, [r3, #0]
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7ff feda 	bl	800c7bc <ptr_to_mem>
 800ca08:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	885b      	ldrh	r3, [r3, #2]
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7ff fed4 	bl	800c7bc <ptr_to_mem>
 800ca14:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	881b      	ldrh	r3, [r3, #0]
 800ca1a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ca1e:	d818      	bhi.n	800ca52 <mem_link_valid+0x66>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	885b      	ldrh	r3, [r3, #2]
 800ca24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ca28:	d813      	bhi.n	800ca52 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ca2e:	8afa      	ldrh	r2, [r7, #22]
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d004      	beq.n	800ca3e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	881b      	ldrh	r3, [r3, #0]
 800ca38:	8afa      	ldrh	r2, [r7, #22]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d109      	bne.n	800ca52 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ca3e:	4b08      	ldr	r3, [pc, #32]	; (800ca60 <mem_link_valid+0x74>)
 800ca40:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ca42:	693a      	ldr	r2, [r7, #16]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d006      	beq.n	800ca56 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	885b      	ldrh	r3, [r3, #2]
 800ca4c:	8afa      	ldrh	r2, [r7, #22]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d001      	beq.n	800ca56 <mem_link_valid+0x6a>
    return 0;
 800ca52:	2300      	movs	r3, #0
 800ca54:	e000      	b.n	800ca58 <mem_link_valid+0x6c>
  }
  return 1;
 800ca56:	2301      	movs	r3, #1
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3718      	adds	r7, #24
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	20004200 	.word	0x20004200

0800ca64 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b088      	sub	sp, #32
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d070      	beq.n	800cb54 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f003 0303 	and.w	r3, r3, #3
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d00d      	beq.n	800ca98 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ca7c:	4b37      	ldr	r3, [pc, #220]	; (800cb5c <mem_free+0xf8>)
 800ca7e:	f240 2273 	movw	r2, #627	; 0x273
 800ca82:	4937      	ldr	r1, [pc, #220]	; (800cb60 <mem_free+0xfc>)
 800ca84:	4837      	ldr	r0, [pc, #220]	; (800cb64 <mem_free+0x100>)
 800ca86:	f00a f9cd 	bl	8016e24 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca8a:	f009 fc63 	bl	8016354 <sys_arch_protect>
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	f009 fc6d 	bl	8016370 <sys_arch_unprotect>
    return;
 800ca96:	e05e      	b.n	800cb56 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	3b08      	subs	r3, #8
 800ca9c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ca9e:	4b32      	ldr	r3, [pc, #200]	; (800cb68 <mem_free+0x104>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	69fa      	ldr	r2, [r7, #28]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d306      	bcc.n	800cab6 <mem_free+0x52>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f103 020c 	add.w	r2, r3, #12
 800caae:	4b2f      	ldr	r3, [pc, #188]	; (800cb6c <mem_free+0x108>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d90d      	bls.n	800cad2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800cab6:	4b29      	ldr	r3, [pc, #164]	; (800cb5c <mem_free+0xf8>)
 800cab8:	f240 227f 	movw	r2, #639	; 0x27f
 800cabc:	492c      	ldr	r1, [pc, #176]	; (800cb70 <mem_free+0x10c>)
 800cabe:	4829      	ldr	r0, [pc, #164]	; (800cb64 <mem_free+0x100>)
 800cac0:	f00a f9b0 	bl	8016e24 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cac4:	f009 fc46 	bl	8016354 <sys_arch_protect>
 800cac8:	6138      	str	r0, [r7, #16]
 800caca:	6938      	ldr	r0, [r7, #16]
 800cacc:	f009 fc50 	bl	8016370 <sys_arch_unprotect>
    return;
 800cad0:	e041      	b.n	800cb56 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cad2:	4828      	ldr	r0, [pc, #160]	; (800cb74 <mem_free+0x110>)
 800cad4:	f009 fbfc 	bl	80162d0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	791b      	ldrb	r3, [r3, #4]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d110      	bne.n	800cb02 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800cae0:	4b1e      	ldr	r3, [pc, #120]	; (800cb5c <mem_free+0xf8>)
 800cae2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800cae6:	4924      	ldr	r1, [pc, #144]	; (800cb78 <mem_free+0x114>)
 800cae8:	481e      	ldr	r0, [pc, #120]	; (800cb64 <mem_free+0x100>)
 800caea:	f00a f99b 	bl	8016e24 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800caee:	4821      	ldr	r0, [pc, #132]	; (800cb74 <mem_free+0x110>)
 800caf0:	f009 fbfd 	bl	80162ee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800caf4:	f009 fc2e 	bl	8016354 <sys_arch_protect>
 800caf8:	6178      	str	r0, [r7, #20]
 800cafa:	6978      	ldr	r0, [r7, #20]
 800cafc:	f009 fc38 	bl	8016370 <sys_arch_unprotect>
    return;
 800cb00:	e029      	b.n	800cb56 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800cb02:	69f8      	ldr	r0, [r7, #28]
 800cb04:	f7ff ff72 	bl	800c9ec <mem_link_valid>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d110      	bne.n	800cb30 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cb0e:	4b13      	ldr	r3, [pc, #76]	; (800cb5c <mem_free+0xf8>)
 800cb10:	f240 2295 	movw	r2, #661	; 0x295
 800cb14:	4919      	ldr	r1, [pc, #100]	; (800cb7c <mem_free+0x118>)
 800cb16:	4813      	ldr	r0, [pc, #76]	; (800cb64 <mem_free+0x100>)
 800cb18:	f00a f984 	bl	8016e24 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cb1c:	4815      	ldr	r0, [pc, #84]	; (800cb74 <mem_free+0x110>)
 800cb1e:	f009 fbe6 	bl	80162ee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cb22:	f009 fc17 	bl	8016354 <sys_arch_protect>
 800cb26:	61b8      	str	r0, [r7, #24]
 800cb28:	69b8      	ldr	r0, [r7, #24]
 800cb2a:	f009 fc21 	bl	8016370 <sys_arch_unprotect>
    return;
 800cb2e:	e012      	b.n	800cb56 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	2200      	movs	r2, #0
 800cb34:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cb36:	4b12      	ldr	r3, [pc, #72]	; (800cb80 <mem_free+0x11c>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	69fa      	ldr	r2, [r7, #28]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d202      	bcs.n	800cb46 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cb40:	4a0f      	ldr	r2, [pc, #60]	; (800cb80 <mem_free+0x11c>)
 800cb42:	69fb      	ldr	r3, [r7, #28]
 800cb44:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cb46:	69f8      	ldr	r0, [r7, #28]
 800cb48:	f7ff fe5c 	bl	800c804 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cb4c:	4809      	ldr	r0, [pc, #36]	; (800cb74 <mem_free+0x110>)
 800cb4e:	f009 fbce 	bl	80162ee <sys_mutex_unlock>
 800cb52:	e000      	b.n	800cb56 <mem_free+0xf2>
    return;
 800cb54:	bf00      	nop
}
 800cb56:	3720      	adds	r7, #32
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	080180f4 	.word	0x080180f4
 800cb60:	080181e4 	.word	0x080181e4
 800cb64:	0801813c 	.word	0x0801813c
 800cb68:	200041fc 	.word	0x200041fc
 800cb6c:	20004200 	.word	0x20004200
 800cb70:	08018208 	.word	0x08018208
 800cb74:	20004204 	.word	0x20004204
 800cb78:	08018224 	.word	0x08018224
 800cb7c:	0801824c 	.word	0x0801824c
 800cb80:	20004208 	.word	0x20004208

0800cb84 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b088      	sub	sp, #32
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cb90:	887b      	ldrh	r3, [r7, #2]
 800cb92:	3303      	adds	r3, #3
 800cb94:	b29b      	uxth	r3, r3
 800cb96:	f023 0303 	bic.w	r3, r3, #3
 800cb9a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cb9c:	8bfb      	ldrh	r3, [r7, #30]
 800cb9e:	2b0b      	cmp	r3, #11
 800cba0:	d801      	bhi.n	800cba6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cba2:	230c      	movs	r3, #12
 800cba4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cba6:	8bfb      	ldrh	r3, [r7, #30]
 800cba8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cbac:	d803      	bhi.n	800cbb6 <mem_trim+0x32>
 800cbae:	8bfa      	ldrh	r2, [r7, #30]
 800cbb0:	887b      	ldrh	r3, [r7, #2]
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d201      	bcs.n	800cbba <mem_trim+0x36>
    return NULL;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	e0d8      	b.n	800cd6c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cbba:	4b6e      	ldr	r3, [pc, #440]	; (800cd74 <mem_trim+0x1f0>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d304      	bcc.n	800cbce <mem_trim+0x4a>
 800cbc4:	4b6c      	ldr	r3, [pc, #432]	; (800cd78 <mem_trim+0x1f4>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d306      	bcc.n	800cbdc <mem_trim+0x58>
 800cbce:	4b6b      	ldr	r3, [pc, #428]	; (800cd7c <mem_trim+0x1f8>)
 800cbd0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cbd4:	496a      	ldr	r1, [pc, #424]	; (800cd80 <mem_trim+0x1fc>)
 800cbd6:	486b      	ldr	r0, [pc, #428]	; (800cd84 <mem_trim+0x200>)
 800cbd8:	f00a f924 	bl	8016e24 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cbdc:	4b65      	ldr	r3, [pc, #404]	; (800cd74 <mem_trim+0x1f0>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d304      	bcc.n	800cbf0 <mem_trim+0x6c>
 800cbe6:	4b64      	ldr	r3, [pc, #400]	; (800cd78 <mem_trim+0x1f4>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d307      	bcc.n	800cc00 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cbf0:	f009 fbb0 	bl	8016354 <sys_arch_protect>
 800cbf4:	60b8      	str	r0, [r7, #8]
 800cbf6:	68b8      	ldr	r0, [r7, #8]
 800cbf8:	f009 fbba 	bl	8016370 <sys_arch_unprotect>
    return rmem;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	e0b5      	b.n	800cd6c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	3b08      	subs	r3, #8
 800cc04:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800cc06:	69b8      	ldr	r0, [r7, #24]
 800cc08:	f7ff fdea 	bl	800c7e0 <mem_to_ptr>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800cc10:	69bb      	ldr	r3, [r7, #24]
 800cc12:	881a      	ldrh	r2, [r3, #0]
 800cc14:	8afb      	ldrh	r3, [r7, #22]
 800cc16:	1ad3      	subs	r3, r2, r3
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	3b08      	subs	r3, #8
 800cc1c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cc1e:	8bfa      	ldrh	r2, [r7, #30]
 800cc20:	8abb      	ldrh	r3, [r7, #20]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d906      	bls.n	800cc34 <mem_trim+0xb0>
 800cc26:	4b55      	ldr	r3, [pc, #340]	; (800cd7c <mem_trim+0x1f8>)
 800cc28:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800cc2c:	4956      	ldr	r1, [pc, #344]	; (800cd88 <mem_trim+0x204>)
 800cc2e:	4855      	ldr	r0, [pc, #340]	; (800cd84 <mem_trim+0x200>)
 800cc30:	f00a f8f8 	bl	8016e24 <iprintf>
  if (newsize > size) {
 800cc34:	8bfa      	ldrh	r2, [r7, #30]
 800cc36:	8abb      	ldrh	r3, [r7, #20]
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d901      	bls.n	800cc40 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	e095      	b.n	800cd6c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800cc40:	8bfa      	ldrh	r2, [r7, #30]
 800cc42:	8abb      	ldrh	r3, [r7, #20]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d101      	bne.n	800cc4c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	e08f      	b.n	800cd6c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cc4c:	484f      	ldr	r0, [pc, #316]	; (800cd8c <mem_trim+0x208>)
 800cc4e:	f009 fb3f 	bl	80162d0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800cc52:	69bb      	ldr	r3, [r7, #24]
 800cc54:	881b      	ldrh	r3, [r3, #0]
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7ff fdb0 	bl	800c7bc <ptr_to_mem>
 800cc5c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	791b      	ldrb	r3, [r3, #4]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d13f      	bne.n	800cce6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cc66:	69bb      	ldr	r3, [r7, #24]
 800cc68:	881b      	ldrh	r3, [r3, #0]
 800cc6a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc6e:	d106      	bne.n	800cc7e <mem_trim+0xfa>
 800cc70:	4b42      	ldr	r3, [pc, #264]	; (800cd7c <mem_trim+0x1f8>)
 800cc72:	f240 22f5 	movw	r2, #757	; 0x2f5
 800cc76:	4946      	ldr	r1, [pc, #280]	; (800cd90 <mem_trim+0x20c>)
 800cc78:	4842      	ldr	r0, [pc, #264]	; (800cd84 <mem_trim+0x200>)
 800cc7a:	f00a f8d3 	bl	8016e24 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	881b      	ldrh	r3, [r3, #0]
 800cc82:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cc84:	8afa      	ldrh	r2, [r7, #22]
 800cc86:	8bfb      	ldrh	r3, [r7, #30]
 800cc88:	4413      	add	r3, r2
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	3308      	adds	r3, #8
 800cc8e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cc90:	4b40      	ldr	r3, [pc, #256]	; (800cd94 <mem_trim+0x210>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	693a      	ldr	r2, [r7, #16]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d106      	bne.n	800cca8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800cc9a:	89fb      	ldrh	r3, [r7, #14]
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7ff fd8d 	bl	800c7bc <ptr_to_mem>
 800cca2:	4603      	mov	r3, r0
 800cca4:	4a3b      	ldr	r2, [pc, #236]	; (800cd94 <mem_trim+0x210>)
 800cca6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cca8:	89fb      	ldrh	r3, [r7, #14]
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f7ff fd86 	bl	800c7bc <ptr_to_mem>
 800ccb0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	89ba      	ldrh	r2, [r7, #12]
 800ccbc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	8afa      	ldrh	r2, [r7, #22]
 800ccc2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ccc4:	69bb      	ldr	r3, [r7, #24]
 800ccc6:	89fa      	ldrh	r2, [r7, #14]
 800ccc8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	881b      	ldrh	r3, [r3, #0]
 800ccce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ccd2:	d047      	beq.n	800cd64 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	881b      	ldrh	r3, [r3, #0]
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f7ff fd6f 	bl	800c7bc <ptr_to_mem>
 800ccde:	4602      	mov	r2, r0
 800cce0:	89fb      	ldrh	r3, [r7, #14]
 800cce2:	8053      	strh	r3, [r2, #2]
 800cce4:	e03e      	b.n	800cd64 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cce6:	8bfb      	ldrh	r3, [r7, #30]
 800cce8:	f103 0214 	add.w	r2, r3, #20
 800ccec:	8abb      	ldrh	r3, [r7, #20]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d838      	bhi.n	800cd64 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ccf2:	8afa      	ldrh	r2, [r7, #22]
 800ccf4:	8bfb      	ldrh	r3, [r7, #30]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	3308      	adds	r3, #8
 800ccfc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ccfe:	69bb      	ldr	r3, [r7, #24]
 800cd00:	881b      	ldrh	r3, [r3, #0]
 800cd02:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cd06:	d106      	bne.n	800cd16 <mem_trim+0x192>
 800cd08:	4b1c      	ldr	r3, [pc, #112]	; (800cd7c <mem_trim+0x1f8>)
 800cd0a:	f240 3216 	movw	r2, #790	; 0x316
 800cd0e:	4920      	ldr	r1, [pc, #128]	; (800cd90 <mem_trim+0x20c>)
 800cd10:	481c      	ldr	r0, [pc, #112]	; (800cd84 <mem_trim+0x200>)
 800cd12:	f00a f887 	bl	8016e24 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cd16:	89fb      	ldrh	r3, [r7, #14]
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7ff fd4f 	bl	800c7bc <ptr_to_mem>
 800cd1e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cd20:	4b1c      	ldr	r3, [pc, #112]	; (800cd94 <mem_trim+0x210>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	693a      	ldr	r2, [r7, #16]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d202      	bcs.n	800cd30 <mem_trim+0x1ac>
      lfree = mem2;
 800cd2a:	4a1a      	ldr	r2, [pc, #104]	; (800cd94 <mem_trim+0x210>)
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	2200      	movs	r2, #0
 800cd34:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	881a      	ldrh	r2, [r3, #0]
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	8afa      	ldrh	r2, [r7, #22]
 800cd42:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cd44:	69bb      	ldr	r3, [r7, #24]
 800cd46:	89fa      	ldrh	r2, [r7, #14]
 800cd48:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	881b      	ldrh	r3, [r3, #0]
 800cd4e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cd52:	d007      	beq.n	800cd64 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	881b      	ldrh	r3, [r3, #0]
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f7ff fd2f 	bl	800c7bc <ptr_to_mem>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	89fb      	ldrh	r3, [r7, #14]
 800cd62:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cd64:	4809      	ldr	r0, [pc, #36]	; (800cd8c <mem_trim+0x208>)
 800cd66:	f009 fac2 	bl	80162ee <sys_mutex_unlock>
  return rmem;
 800cd6a:	687b      	ldr	r3, [r7, #4]
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3720      	adds	r7, #32
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	200041fc 	.word	0x200041fc
 800cd78:	20004200 	.word	0x20004200
 800cd7c:	080180f4 	.word	0x080180f4
 800cd80:	08018280 	.word	0x08018280
 800cd84:	0801813c 	.word	0x0801813c
 800cd88:	08018298 	.word	0x08018298
 800cd8c:	20004204 	.word	0x20004204
 800cd90:	080182b8 	.word	0x080182b8
 800cd94:	20004208 	.word	0x20004208

0800cd98 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b088      	sub	sp, #32
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	4603      	mov	r3, r0
 800cda0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800cda2:	88fb      	ldrh	r3, [r7, #6]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d101      	bne.n	800cdac <mem_malloc+0x14>
    return NULL;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	e0e2      	b.n	800cf72 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800cdac:	88fb      	ldrh	r3, [r7, #6]
 800cdae:	3303      	adds	r3, #3
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	f023 0303 	bic.w	r3, r3, #3
 800cdb6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800cdb8:	8bbb      	ldrh	r3, [r7, #28]
 800cdba:	2b0b      	cmp	r3, #11
 800cdbc:	d801      	bhi.n	800cdc2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cdbe:	230c      	movs	r3, #12
 800cdc0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800cdc2:	8bbb      	ldrh	r3, [r7, #28]
 800cdc4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cdc8:	d803      	bhi.n	800cdd2 <mem_malloc+0x3a>
 800cdca:	8bba      	ldrh	r2, [r7, #28]
 800cdcc:	88fb      	ldrh	r3, [r7, #6]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d201      	bcs.n	800cdd6 <mem_malloc+0x3e>
    return NULL;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	e0cd      	b.n	800cf72 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800cdd6:	4869      	ldr	r0, [pc, #420]	; (800cf7c <mem_malloc+0x1e4>)
 800cdd8:	f009 fa7a 	bl	80162d0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cddc:	4b68      	ldr	r3, [pc, #416]	; (800cf80 <mem_malloc+0x1e8>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7ff fcfd 	bl	800c7e0 <mem_to_ptr>
 800cde6:	4603      	mov	r3, r0
 800cde8:	83fb      	strh	r3, [r7, #30]
 800cdea:	e0b7      	b.n	800cf5c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cdec:	8bfb      	ldrh	r3, [r7, #30]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7ff fce4 	bl	800c7bc <ptr_to_mem>
 800cdf4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	791b      	ldrb	r3, [r3, #4]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	f040 80a7 	bne.w	800cf4e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	881b      	ldrh	r3, [r3, #0]
 800ce04:	461a      	mov	r2, r3
 800ce06:	8bfb      	ldrh	r3, [r7, #30]
 800ce08:	1ad3      	subs	r3, r2, r3
 800ce0a:	f1a3 0208 	sub.w	r2, r3, #8
 800ce0e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ce10:	429a      	cmp	r2, r3
 800ce12:	f0c0 809c 	bcc.w	800cf4e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	881b      	ldrh	r3, [r3, #0]
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	8bfb      	ldrh	r3, [r7, #30]
 800ce1e:	1ad3      	subs	r3, r2, r3
 800ce20:	f1a3 0208 	sub.w	r2, r3, #8
 800ce24:	8bbb      	ldrh	r3, [r7, #28]
 800ce26:	3314      	adds	r3, #20
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d333      	bcc.n	800ce94 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ce2c:	8bfa      	ldrh	r2, [r7, #30]
 800ce2e:	8bbb      	ldrh	r3, [r7, #28]
 800ce30:	4413      	add	r3, r2
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	3308      	adds	r3, #8
 800ce36:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ce38:	8a7b      	ldrh	r3, [r7, #18]
 800ce3a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce3e:	d106      	bne.n	800ce4e <mem_malloc+0xb6>
 800ce40:	4b50      	ldr	r3, [pc, #320]	; (800cf84 <mem_malloc+0x1ec>)
 800ce42:	f240 3287 	movw	r2, #903	; 0x387
 800ce46:	4950      	ldr	r1, [pc, #320]	; (800cf88 <mem_malloc+0x1f0>)
 800ce48:	4850      	ldr	r0, [pc, #320]	; (800cf8c <mem_malloc+0x1f4>)
 800ce4a:	f009 ffeb 	bl	8016e24 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ce4e:	8a7b      	ldrh	r3, [r7, #18]
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7ff fcb3 	bl	800c7bc <ptr_to_mem>
 800ce56:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	881a      	ldrh	r2, [r3, #0]
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	8bfa      	ldrh	r2, [r7, #30]
 800ce6a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	8a7a      	ldrh	r2, [r7, #18]
 800ce70:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	2201      	movs	r2, #1
 800ce76:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	881b      	ldrh	r3, [r3, #0]
 800ce7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce80:	d00b      	beq.n	800ce9a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	881b      	ldrh	r3, [r3, #0]
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7ff fc98 	bl	800c7bc <ptr_to_mem>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	8a7b      	ldrh	r3, [r7, #18]
 800ce90:	8053      	strh	r3, [r2, #2]
 800ce92:	e002      	b.n	800ce9a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	2201      	movs	r2, #1
 800ce98:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ce9a:	4b39      	ldr	r3, [pc, #228]	; (800cf80 <mem_malloc+0x1e8>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	697a      	ldr	r2, [r7, #20]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d127      	bne.n	800cef4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800cea4:	4b36      	ldr	r3, [pc, #216]	; (800cf80 <mem_malloc+0x1e8>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ceaa:	e005      	b.n	800ceb8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ceac:	69bb      	ldr	r3, [r7, #24]
 800ceae:	881b      	ldrh	r3, [r3, #0]
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7ff fc83 	bl	800c7bc <ptr_to_mem>
 800ceb6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ceb8:	69bb      	ldr	r3, [r7, #24]
 800ceba:	791b      	ldrb	r3, [r3, #4]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d004      	beq.n	800ceca <mem_malloc+0x132>
 800cec0:	4b33      	ldr	r3, [pc, #204]	; (800cf90 <mem_malloc+0x1f8>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	69ba      	ldr	r2, [r7, #24]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d1f0      	bne.n	800ceac <mem_malloc+0x114>
          }
          lfree = cur;
 800ceca:	4a2d      	ldr	r2, [pc, #180]	; (800cf80 <mem_malloc+0x1e8>)
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ced0:	4b2b      	ldr	r3, [pc, #172]	; (800cf80 <mem_malloc+0x1e8>)
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	4b2e      	ldr	r3, [pc, #184]	; (800cf90 <mem_malloc+0x1f8>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d00b      	beq.n	800cef4 <mem_malloc+0x15c>
 800cedc:	4b28      	ldr	r3, [pc, #160]	; (800cf80 <mem_malloc+0x1e8>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	791b      	ldrb	r3, [r3, #4]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d006      	beq.n	800cef4 <mem_malloc+0x15c>
 800cee6:	4b27      	ldr	r3, [pc, #156]	; (800cf84 <mem_malloc+0x1ec>)
 800cee8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ceec:	4929      	ldr	r1, [pc, #164]	; (800cf94 <mem_malloc+0x1fc>)
 800ceee:	4827      	ldr	r0, [pc, #156]	; (800cf8c <mem_malloc+0x1f4>)
 800cef0:	f009 ff98 	bl	8016e24 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800cef4:	4821      	ldr	r0, [pc, #132]	; (800cf7c <mem_malloc+0x1e4>)
 800cef6:	f009 f9fa 	bl	80162ee <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800cefa:	8bba      	ldrh	r2, [r7, #28]
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	4413      	add	r3, r2
 800cf00:	3308      	adds	r3, #8
 800cf02:	4a23      	ldr	r2, [pc, #140]	; (800cf90 <mem_malloc+0x1f8>)
 800cf04:	6812      	ldr	r2, [r2, #0]
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d906      	bls.n	800cf18 <mem_malloc+0x180>
 800cf0a:	4b1e      	ldr	r3, [pc, #120]	; (800cf84 <mem_malloc+0x1ec>)
 800cf0c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800cf10:	4921      	ldr	r1, [pc, #132]	; (800cf98 <mem_malloc+0x200>)
 800cf12:	481e      	ldr	r0, [pc, #120]	; (800cf8c <mem_malloc+0x1f4>)
 800cf14:	f009 ff86 	bl	8016e24 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	f003 0303 	and.w	r3, r3, #3
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d006      	beq.n	800cf30 <mem_malloc+0x198>
 800cf22:	4b18      	ldr	r3, [pc, #96]	; (800cf84 <mem_malloc+0x1ec>)
 800cf24:	f240 32bb 	movw	r2, #955	; 0x3bb
 800cf28:	491c      	ldr	r1, [pc, #112]	; (800cf9c <mem_malloc+0x204>)
 800cf2a:	4818      	ldr	r0, [pc, #96]	; (800cf8c <mem_malloc+0x1f4>)
 800cf2c:	f009 ff7a 	bl	8016e24 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	f003 0303 	and.w	r3, r3, #3
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d006      	beq.n	800cf48 <mem_malloc+0x1b0>
 800cf3a:	4b12      	ldr	r3, [pc, #72]	; (800cf84 <mem_malloc+0x1ec>)
 800cf3c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800cf40:	4917      	ldr	r1, [pc, #92]	; (800cfa0 <mem_malloc+0x208>)
 800cf42:	4812      	ldr	r0, [pc, #72]	; (800cf8c <mem_malloc+0x1f4>)
 800cf44:	f009 ff6e 	bl	8016e24 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	3308      	adds	r3, #8
 800cf4c:	e011      	b.n	800cf72 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800cf4e:	8bfb      	ldrh	r3, [r7, #30]
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7ff fc33 	bl	800c7bc <ptr_to_mem>
 800cf56:	4603      	mov	r3, r0
 800cf58:	881b      	ldrh	r3, [r3, #0]
 800cf5a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cf5c:	8bfa      	ldrh	r2, [r7, #30]
 800cf5e:	8bbb      	ldrh	r3, [r7, #28]
 800cf60:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800cf64:	429a      	cmp	r2, r3
 800cf66:	f4ff af41 	bcc.w	800cdec <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800cf6a:	4804      	ldr	r0, [pc, #16]	; (800cf7c <mem_malloc+0x1e4>)
 800cf6c:	f009 f9bf 	bl	80162ee <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800cf70:	2300      	movs	r3, #0
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3720      	adds	r7, #32
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	20004204 	.word	0x20004204
 800cf80:	20004208 	.word	0x20004208
 800cf84:	080180f4 	.word	0x080180f4
 800cf88:	080182b8 	.word	0x080182b8
 800cf8c:	0801813c 	.word	0x0801813c
 800cf90:	20004200 	.word	0x20004200
 800cf94:	080182cc 	.word	0x080182cc
 800cf98:	080182e8 	.word	0x080182e8
 800cf9c:	08018318 	.word	0x08018318
 800cfa0:	08018348 	.word	0x08018348

0800cfa4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b085      	sub	sp, #20
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	689b      	ldr	r3, [r3, #8]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	3303      	adds	r3, #3
 800cfba:	f023 0303 	bic.w	r3, r3, #3
 800cfbe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	60fb      	str	r3, [r7, #12]
 800cfc4:	e011      	b.n	800cfea <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	689b      	ldr	r3, [r3, #8]
 800cfd4:	68ba      	ldr	r2, [r7, #8]
 800cfd6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	881b      	ldrh	r3, [r3, #0]
 800cfdc:	461a      	mov	r2, r3
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	4413      	add	r3, r2
 800cfe2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	60fb      	str	r3, [r7, #12]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	885b      	ldrh	r3, [r3, #2]
 800cfee:	461a      	mov	r2, r3
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	4293      	cmp	r3, r2
 800cff4:	dbe7      	blt.n	800cfc6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cff6:	bf00      	nop
 800cff8:	bf00      	nop
 800cffa:	3714      	adds	r7, #20
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b082      	sub	sp, #8
 800d008:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d00a:	2300      	movs	r3, #0
 800d00c:	80fb      	strh	r3, [r7, #6]
 800d00e:	e009      	b.n	800d024 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d010:	88fb      	ldrh	r3, [r7, #6]
 800d012:	4a08      	ldr	r2, [pc, #32]	; (800d034 <memp_init+0x30>)
 800d014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d018:	4618      	mov	r0, r3
 800d01a:	f7ff ffc3 	bl	800cfa4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d01e:	88fb      	ldrh	r3, [r7, #6]
 800d020:	3301      	adds	r3, #1
 800d022:	80fb      	strh	r3, [r7, #6]
 800d024:	88fb      	ldrh	r3, [r7, #6]
 800d026:	2b0c      	cmp	r3, #12
 800d028:	d9f2      	bls.n	800d010 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d02a:	bf00      	nop
 800d02c:	bf00      	nop
 800d02e:	3708      	adds	r7, #8
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}
 800d034:	0801ab98 	.word	0x0801ab98

0800d038 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b084      	sub	sp, #16
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d040:	f009 f988 	bl	8016354 <sys_arch_protect>
 800d044:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	689b      	ldr	r3, [r3, #8]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d015      	beq.n	800d080 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	689b      	ldr	r3, [r3, #8]
 800d058:	68ba      	ldr	r2, [r7, #8]
 800d05a:	6812      	ldr	r2, [r2, #0]
 800d05c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	f003 0303 	and.w	r3, r3, #3
 800d064:	2b00      	cmp	r3, #0
 800d066:	d006      	beq.n	800d076 <do_memp_malloc_pool+0x3e>
 800d068:	4b09      	ldr	r3, [pc, #36]	; (800d090 <do_memp_malloc_pool+0x58>)
 800d06a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d06e:	4909      	ldr	r1, [pc, #36]	; (800d094 <do_memp_malloc_pool+0x5c>)
 800d070:	4809      	ldr	r0, [pc, #36]	; (800d098 <do_memp_malloc_pool+0x60>)
 800d072:	f009 fed7 	bl	8016e24 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d076:	68f8      	ldr	r0, [r7, #12]
 800d078:	f009 f97a 	bl	8016370 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	e003      	b.n	800d088 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d080:	68f8      	ldr	r0, [r7, #12]
 800d082:	f009 f975 	bl	8016370 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d086:	2300      	movs	r3, #0
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3710      	adds	r7, #16
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	0801836c 	.word	0x0801836c
 800d094:	0801839c 	.word	0x0801839c
 800d098:	080183c0 	.word	0x080183c0

0800d09c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d0a6:	79fb      	ldrb	r3, [r7, #7]
 800d0a8:	2b0c      	cmp	r3, #12
 800d0aa:	d908      	bls.n	800d0be <memp_malloc+0x22>
 800d0ac:	4b0a      	ldr	r3, [pc, #40]	; (800d0d8 <memp_malloc+0x3c>)
 800d0ae:	f240 1257 	movw	r2, #343	; 0x157
 800d0b2:	490a      	ldr	r1, [pc, #40]	; (800d0dc <memp_malloc+0x40>)
 800d0b4:	480a      	ldr	r0, [pc, #40]	; (800d0e0 <memp_malloc+0x44>)
 800d0b6:	f009 feb5 	bl	8016e24 <iprintf>
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	e008      	b.n	800d0d0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d0be:	79fb      	ldrb	r3, [r7, #7]
 800d0c0:	4a08      	ldr	r2, [pc, #32]	; (800d0e4 <memp_malloc+0x48>)
 800d0c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7ff ffb6 	bl	800d038 <do_memp_malloc_pool>
 800d0cc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3710      	adds	r7, #16
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	0801836c 	.word	0x0801836c
 800d0dc:	080183fc 	.word	0x080183fc
 800d0e0:	080183c0 	.word	0x080183c0
 800d0e4:	0801ab98 	.word	0x0801ab98

0800d0e8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	f003 0303 	and.w	r3, r3, #3
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d006      	beq.n	800d10a <do_memp_free_pool+0x22>
 800d0fc:	4b0d      	ldr	r3, [pc, #52]	; (800d134 <do_memp_free_pool+0x4c>)
 800d0fe:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d102:	490d      	ldr	r1, [pc, #52]	; (800d138 <do_memp_free_pool+0x50>)
 800d104:	480d      	ldr	r0, [pc, #52]	; (800d13c <do_memp_free_pool+0x54>)
 800d106:	f009 fe8d 	bl	8016e24 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d10e:	f009 f921 	bl	8016354 <sys_arch_protect>
 800d112:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	689b      	ldr	r3, [r3, #8]
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	689b      	ldr	r3, [r3, #8]
 800d122:	68fa      	ldr	r2, [r7, #12]
 800d124:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d126:	68b8      	ldr	r0, [r7, #8]
 800d128:	f009 f922 	bl	8016370 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d12c:	bf00      	nop
 800d12e:	3710      	adds	r7, #16
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}
 800d134:	0801836c 	.word	0x0801836c
 800d138:	0801841c 	.word	0x0801841c
 800d13c:	080183c0 	.word	0x080183c0

0800d140 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	4603      	mov	r3, r0
 800d148:	6039      	str	r1, [r7, #0]
 800d14a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d14c:	79fb      	ldrb	r3, [r7, #7]
 800d14e:	2b0c      	cmp	r3, #12
 800d150:	d907      	bls.n	800d162 <memp_free+0x22>
 800d152:	4b0c      	ldr	r3, [pc, #48]	; (800d184 <memp_free+0x44>)
 800d154:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d158:	490b      	ldr	r1, [pc, #44]	; (800d188 <memp_free+0x48>)
 800d15a:	480c      	ldr	r0, [pc, #48]	; (800d18c <memp_free+0x4c>)
 800d15c:	f009 fe62 	bl	8016e24 <iprintf>
 800d160:	e00c      	b.n	800d17c <memp_free+0x3c>

  if (mem == NULL) {
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d008      	beq.n	800d17a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d168:	79fb      	ldrb	r3, [r7, #7]
 800d16a:	4a09      	ldr	r2, [pc, #36]	; (800d190 <memp_free+0x50>)
 800d16c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d170:	6839      	ldr	r1, [r7, #0]
 800d172:	4618      	mov	r0, r3
 800d174:	f7ff ffb8 	bl	800d0e8 <do_memp_free_pool>
 800d178:	e000      	b.n	800d17c <memp_free+0x3c>
    return;
 800d17a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d17c:	3708      	adds	r7, #8
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	0801836c 	.word	0x0801836c
 800d188:	0801843c 	.word	0x0801843c
 800d18c:	080183c0 	.word	0x080183c0
 800d190:	0801ab98 	.word	0x0801ab98

0800d194 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d194:	b480      	push	{r7}
 800d196:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d198:	bf00      	nop
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr
	...

0800d1a4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b086      	sub	sp, #24
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	60f8      	str	r0, [r7, #12]
 800d1ac:	60b9      	str	r1, [r7, #8]
 800d1ae:	607a      	str	r2, [r7, #4]
 800d1b0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d108      	bne.n	800d1ca <netif_add+0x26>
 800d1b8:	4b56      	ldr	r3, [pc, #344]	; (800d314 <netif_add+0x170>)
 800d1ba:	f240 1227 	movw	r2, #295	; 0x127
 800d1be:	4956      	ldr	r1, [pc, #344]	; (800d318 <netif_add+0x174>)
 800d1c0:	4856      	ldr	r0, [pc, #344]	; (800d31c <netif_add+0x178>)
 800d1c2:	f009 fe2f 	bl	8016e24 <iprintf>
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	e09f      	b.n	800d30a <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d108      	bne.n	800d1e2 <netif_add+0x3e>
 800d1d0:	4b50      	ldr	r3, [pc, #320]	; (800d314 <netif_add+0x170>)
 800d1d2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d1d6:	4952      	ldr	r1, [pc, #328]	; (800d320 <netif_add+0x17c>)
 800d1d8:	4850      	ldr	r0, [pc, #320]	; (800d31c <netif_add+0x178>)
 800d1da:	f009 fe23 	bl	8016e24 <iprintf>
 800d1de:	2300      	movs	r3, #0
 800d1e0:	e093      	b.n	800d30a <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d101      	bne.n	800d1ec <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d1e8:	4b4e      	ldr	r3, [pc, #312]	; (800d324 <netif_add+0x180>)
 800d1ea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d101      	bne.n	800d1f6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d1f2:	4b4c      	ldr	r3, [pc, #304]	; (800d324 <netif_add+0x180>)
 800d1f4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d101      	bne.n	800d200 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d1fc:	4b49      	ldr	r3, [pc, #292]	; (800d324 <netif_add+0x180>)
 800d1fe:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2200      	movs	r2, #0
 800d204:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2200      	movs	r2, #0
 800d20a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2200      	movs	r2, #0
 800d210:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	4a44      	ldr	r2, [pc, #272]	; (800d328 <netif_add+0x184>)
 800d216:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2200      	movs	r2, #0
 800d21c:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2200      	movs	r2, #0
 800d222:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	6a3a      	ldr	r2, [r7, #32]
 800d22a:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800d22c:	4b3f      	ldr	r3, [pc, #252]	; (800d32c <netif_add+0x188>)
 800d22e:	781a      	ldrb	r2, [r3, #0]
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d23a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	687a      	ldr	r2, [r7, #4]
 800d240:	68b9      	ldr	r1, [r7, #8]
 800d242:	68f8      	ldr	r0, [r7, #12]
 800d244:	f000 f914 	bl	800d470 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24a:	68f8      	ldr	r0, [r7, #12]
 800d24c:	4798      	blx	r3
 800d24e:	4603      	mov	r3, r0
 800d250:	2b00      	cmp	r3, #0
 800d252:	d001      	beq.n	800d258 <netif_add+0xb4>
    return NULL;
 800d254:	2300      	movs	r3, #0
 800d256:	e058      	b.n	800d30a <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d25e:	2bff      	cmp	r3, #255	; 0xff
 800d260:	d103      	bne.n	800d26a <netif_add+0xc6>
        netif->num = 0;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2200      	movs	r2, #0
 800d266:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 800d26a:	2300      	movs	r3, #0
 800d26c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d26e:	4b30      	ldr	r3, [pc, #192]	; (800d330 <netif_add+0x18c>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	617b      	str	r3, [r7, #20]
 800d274:	e02b      	b.n	800d2ce <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d276:	697a      	ldr	r2, [r7, #20]
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d106      	bne.n	800d28c <netif_add+0xe8>
 800d27e:	4b25      	ldr	r3, [pc, #148]	; (800d314 <netif_add+0x170>)
 800d280:	f240 128b 	movw	r2, #395	; 0x18b
 800d284:	492b      	ldr	r1, [pc, #172]	; (800d334 <netif_add+0x190>)
 800d286:	4825      	ldr	r0, [pc, #148]	; (800d31c <netif_add+0x178>)
 800d288:	f009 fdcc 	bl	8016e24 <iprintf>
        num_netifs++;
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	3301      	adds	r3, #1
 800d290:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	2bff      	cmp	r3, #255	; 0xff
 800d296:	dd06      	ble.n	800d2a6 <netif_add+0x102>
 800d298:	4b1e      	ldr	r3, [pc, #120]	; (800d314 <netif_add+0x170>)
 800d29a:	f240 128d 	movw	r2, #397	; 0x18d
 800d29e:	4926      	ldr	r1, [pc, #152]	; (800d338 <netif_add+0x194>)
 800d2a0:	481e      	ldr	r0, [pc, #120]	; (800d31c <netif_add+0x178>)
 800d2a2:	f009 fdbf 	bl	8016e24 <iprintf>
        if (netif2->num == netif->num) {
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d108      	bne.n	800d2c8 <netif_add+0x124>
          netif->num++;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d2bc:	3301      	adds	r3, #1
 800d2be:	b2da      	uxtb	r2, r3
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 800d2c6:	e005      	b.n	800d2d4 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	617b      	str	r3, [r7, #20]
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d1d0      	bne.n	800d276 <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d1be      	bne.n	800d258 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d2e0:	2bfe      	cmp	r3, #254	; 0xfe
 800d2e2:	d103      	bne.n	800d2ec <netif_add+0x148>
    netif_num = 0;
 800d2e4:	4b11      	ldr	r3, [pc, #68]	; (800d32c <netif_add+0x188>)
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	701a      	strb	r2, [r3, #0]
 800d2ea:	e006      	b.n	800d2fa <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	b2da      	uxtb	r2, r3
 800d2f6:	4b0d      	ldr	r3, [pc, #52]	; (800d32c <netif_add+0x188>)
 800d2f8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d2fa:	4b0d      	ldr	r3, [pc, #52]	; (800d330 <netif_add+0x18c>)
 800d2fc:	681a      	ldr	r2, [r3, #0]
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d302:	4a0b      	ldr	r2, [pc, #44]	; (800d330 <netif_add+0x18c>)
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d308:	68fb      	ldr	r3, [r7, #12]
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3718      	adds	r7, #24
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	08018458 	.word	0x08018458
 800d318:	080184ec 	.word	0x080184ec
 800d31c:	080184a8 	.word	0x080184a8
 800d320:	08018508 	.word	0x08018508
 800d324:	0801ac0c 	.word	0x0801ac0c
 800d328:	0800d661 	.word	0x0800d661
 800d32c:	20004240 	.word	0x20004240
 800d330:	2000b0ec 	.word	0x2000b0ec
 800d334:	0801852c 	.word	0x0801852c
 800d338:	08018540 	.word	0x08018540

0800d33c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d346:	6839      	ldr	r1, [r7, #0]
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f002 fb07 	bl	800f95c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d34e:	6839      	ldr	r1, [r7, #0]
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f006 fc17 	bl	8013b84 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d356:	bf00      	nop
 800d358:	3708      	adds	r7, #8
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
	...

0800d360 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b086      	sub	sp, #24
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	60b9      	str	r1, [r7, #8]
 800d36a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d106      	bne.n	800d380 <netif_do_set_ipaddr+0x20>
 800d372:	4b1d      	ldr	r3, [pc, #116]	; (800d3e8 <netif_do_set_ipaddr+0x88>)
 800d374:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d378:	491c      	ldr	r1, [pc, #112]	; (800d3ec <netif_do_set_ipaddr+0x8c>)
 800d37a:	481d      	ldr	r0, [pc, #116]	; (800d3f0 <netif_do_set_ipaddr+0x90>)
 800d37c:	f009 fd52 	bl	8016e24 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d106      	bne.n	800d394 <netif_do_set_ipaddr+0x34>
 800d386:	4b18      	ldr	r3, [pc, #96]	; (800d3e8 <netif_do_set_ipaddr+0x88>)
 800d388:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d38c:	4917      	ldr	r1, [pc, #92]	; (800d3ec <netif_do_set_ipaddr+0x8c>)
 800d38e:	4818      	ldr	r0, [pc, #96]	; (800d3f0 <netif_do_set_ipaddr+0x90>)
 800d390:	f009 fd48 	bl	8016e24 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	3304      	adds	r3, #4
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d01c      	beq.n	800d3dc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	3304      	adds	r3, #4
 800d3ac:	681a      	ldr	r2, [r3, #0]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d3b2:	f107 0314 	add.w	r3, r7, #20
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f7ff ffbf 	bl	800d33c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d002      	beq.n	800d3ca <netif_do_set_ipaddr+0x6a>
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	e000      	b.n	800d3cc <netif_do_set_ipaddr+0x6c>
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	68fa      	ldr	r2, [r7, #12]
 800d3ce:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d3d0:	2101      	movs	r1, #1
 800d3d2:	68f8      	ldr	r0, [r7, #12]
 800d3d4:	f000 f8d2 	bl	800d57c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d3d8:	2301      	movs	r3, #1
 800d3da:	e000      	b.n	800d3de <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d3dc:	2300      	movs	r3, #0
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3718      	adds	r7, #24
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	08018458 	.word	0x08018458
 800d3ec:	08018570 	.word	0x08018570
 800d3f0:	080184a8 	.word	0x080184a8

0800d3f4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b085      	sub	sp, #20
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	60f8      	str	r0, [r7, #12]
 800d3fc:	60b9      	str	r1, [r7, #8]
 800d3fe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	681a      	ldr	r2, [r3, #0]
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	3308      	adds	r3, #8
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d00a      	beq.n	800d424 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d002      	beq.n	800d41a <netif_do_set_netmask+0x26>
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	e000      	b.n	800d41c <netif_do_set_netmask+0x28>
 800d41a:	2300      	movs	r3, #0
 800d41c:	68fa      	ldr	r2, [r7, #12]
 800d41e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d420:	2301      	movs	r3, #1
 800d422:	e000      	b.n	800d426 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d424:	2300      	movs	r3, #0
}
 800d426:	4618      	mov	r0, r3
 800d428:	3714      	adds	r7, #20
 800d42a:	46bd      	mov	sp, r7
 800d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d430:	4770      	bx	lr

0800d432 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d432:	b480      	push	{r7}
 800d434:	b085      	sub	sp, #20
 800d436:	af00      	add	r7, sp, #0
 800d438:	60f8      	str	r0, [r7, #12]
 800d43a:	60b9      	str	r1, [r7, #8]
 800d43c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	330c      	adds	r3, #12
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	429a      	cmp	r2, r3
 800d44a:	d00a      	beq.n	800d462 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d002      	beq.n	800d458 <netif_do_set_gw+0x26>
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	e000      	b.n	800d45a <netif_do_set_gw+0x28>
 800d458:	2300      	movs	r3, #0
 800d45a:	68fa      	ldr	r2, [r7, #12]
 800d45c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d45e:	2301      	movs	r3, #1
 800d460:	e000      	b.n	800d464 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d462:	2300      	movs	r3, #0
}
 800d464:	4618      	mov	r0, r3
 800d466:	3714      	adds	r7, #20
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b088      	sub	sp, #32
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	607a      	str	r2, [r7, #4]
 800d47c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d47e:	2300      	movs	r3, #0
 800d480:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d482:	2300      	movs	r3, #0
 800d484:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d101      	bne.n	800d490 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d48c:	4b1c      	ldr	r3, [pc, #112]	; (800d500 <netif_set_addr+0x90>)
 800d48e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d101      	bne.n	800d49a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d496:	4b1a      	ldr	r3, [pc, #104]	; (800d500 <netif_set_addr+0x90>)
 800d498:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d101      	bne.n	800d4a4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d4a0:	4b17      	ldr	r3, [pc, #92]	; (800d500 <netif_set_addr+0x90>)
 800d4a2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d003      	beq.n	800d4b2 <netif_set_addr+0x42>
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d101      	bne.n	800d4b6 <netif_set_addr+0x46>
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	e000      	b.n	800d4b8 <netif_set_addr+0x48>
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d006      	beq.n	800d4ce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d4c0:	f107 0310 	add.w	r3, r7, #16
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	68b9      	ldr	r1, [r7, #8]
 800d4c8:	68f8      	ldr	r0, [r7, #12]
 800d4ca:	f7ff ff49 	bl	800d360 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d4ce:	69fa      	ldr	r2, [r7, #28]
 800d4d0:	6879      	ldr	r1, [r7, #4]
 800d4d2:	68f8      	ldr	r0, [r7, #12]
 800d4d4:	f7ff ff8e 	bl	800d3f4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d4d8:	69ba      	ldr	r2, [r7, #24]
 800d4da:	6839      	ldr	r1, [r7, #0]
 800d4dc:	68f8      	ldr	r0, [r7, #12]
 800d4de:	f7ff ffa8 	bl	800d432 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d106      	bne.n	800d4f6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d4e8:	f107 0310 	add.w	r3, r7, #16
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	68b9      	ldr	r1, [r7, #8]
 800d4f0:	68f8      	ldr	r0, [r7, #12]
 800d4f2:	f7ff ff35 	bl	800d360 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d4f6:	bf00      	nop
 800d4f8:	3720      	adds	r7, #32
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop
 800d500:	0801ac0c 	.word	0x0801ac0c

0800d504 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d50c:	4a04      	ldr	r2, [pc, #16]	; (800d520 <netif_set_default+0x1c>)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d512:	bf00      	nop
 800d514:	370c      	adds	r7, #12
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr
 800d51e:	bf00      	nop
 800d520:	2000b0f0 	.word	0x2000b0f0

0800d524 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d107      	bne.n	800d542 <netif_set_up+0x1e>
 800d532:	4b0f      	ldr	r3, [pc, #60]	; (800d570 <netif_set_up+0x4c>)
 800d534:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d538:	490e      	ldr	r1, [pc, #56]	; (800d574 <netif_set_up+0x50>)
 800d53a:	480f      	ldr	r0, [pc, #60]	; (800d578 <netif_set_up+0x54>)
 800d53c:	f009 fc72 	bl	8016e24 <iprintf>
 800d540:	e013      	b.n	800d56a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d548:	f003 0301 	and.w	r3, r3, #1
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d10c      	bne.n	800d56a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d556:	f043 0301 	orr.w	r3, r3, #1
 800d55a:	b2da      	uxtb	r2, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d562:	2103      	movs	r1, #3
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 f809 	bl	800d57c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d56a:	3708      	adds	r7, #8
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}
 800d570:	08018458 	.word	0x08018458
 800d574:	080185e0 	.word	0x080185e0
 800d578:	080184a8 	.word	0x080184a8

0800d57c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	460b      	mov	r3, r1
 800d586:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d106      	bne.n	800d59c <netif_issue_reports+0x20>
 800d58e:	4b18      	ldr	r3, [pc, #96]	; (800d5f0 <netif_issue_reports+0x74>)
 800d590:	f240 326d 	movw	r2, #877	; 0x36d
 800d594:	4917      	ldr	r1, [pc, #92]	; (800d5f4 <netif_issue_reports+0x78>)
 800d596:	4818      	ldr	r0, [pc, #96]	; (800d5f8 <netif_issue_reports+0x7c>)
 800d598:	f009 fc44 	bl	8016e24 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d5a2:	f003 0304 	and.w	r3, r3, #4
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d01e      	beq.n	800d5e8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d5b0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d017      	beq.n	800d5e8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d5b8:	78fb      	ldrb	r3, [r7, #3]
 800d5ba:	f003 0301 	and.w	r3, r3, #1
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d013      	beq.n	800d5ea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	3304      	adds	r3, #4
 800d5c6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00e      	beq.n	800d5ea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d5d2:	f003 0308 	and.w	r3, r3, #8
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d007      	beq.n	800d5ea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	3304      	adds	r3, #4
 800d5de:	4619      	mov	r1, r3
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f007 fa39 	bl	8014a58 <etharp_request>
 800d5e6:	e000      	b.n	800d5ea <netif_issue_reports+0x6e>
    return;
 800d5e8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d5ea:	3708      	adds	r7, #8
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	08018458 	.word	0x08018458
 800d5f4:	080185fc 	.word	0x080185fc
 800d5f8:	080184a8 	.word	0x080184a8

0800d5fc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d107      	bne.n	800d61a <netif_set_down+0x1e>
 800d60a:	4b12      	ldr	r3, [pc, #72]	; (800d654 <netif_set_down+0x58>)
 800d60c:	f240 329b 	movw	r2, #923	; 0x39b
 800d610:	4911      	ldr	r1, [pc, #68]	; (800d658 <netif_set_down+0x5c>)
 800d612:	4812      	ldr	r0, [pc, #72]	; (800d65c <netif_set_down+0x60>)
 800d614:	f009 fc06 	bl	8016e24 <iprintf>
 800d618:	e019      	b.n	800d64e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d620:	f003 0301 	and.w	r3, r3, #1
 800d624:	2b00      	cmp	r3, #0
 800d626:	d012      	beq.n	800d64e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d62e:	f023 0301 	bic.w	r3, r3, #1
 800d632:	b2da      	uxtb	r2, r3
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d640:	f003 0308 	and.w	r3, r3, #8
 800d644:	2b00      	cmp	r3, #0
 800d646:	d002      	beq.n	800d64e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f006 fdc3 	bl	80141d4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d64e:	3708      	adds	r7, #8
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}
 800d654:	08018458 	.word	0x08018458
 800d658:	08018620 	.word	0x08018620
 800d65c:	080184a8 	.word	0x080184a8

0800d660 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d660:	b480      	push	{r7}
 800d662:	b085      	sub	sp, #20
 800d664:	af00      	add	r7, sp, #0
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d66c:	f06f 030b 	mvn.w	r3, #11
}
 800d670:	4618      	mov	r0, r3
 800d672:	3714      	adds	r7, #20
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b085      	sub	sp, #20
 800d680:	af00      	add	r7, sp, #0
 800d682:	4603      	mov	r3, r0
 800d684:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d686:	79fb      	ldrb	r3, [r7, #7]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d013      	beq.n	800d6b4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d68c:	4b0d      	ldr	r3, [pc, #52]	; (800d6c4 <netif_get_by_index+0x48>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	60fb      	str	r3, [r7, #12]
 800d692:	e00c      	b.n	800d6ae <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d69a:	3301      	adds	r3, #1
 800d69c:	b2db      	uxtb	r3, r3
 800d69e:	79fa      	ldrb	r2, [r7, #7]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d101      	bne.n	800d6a8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	e006      	b.n	800d6b6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	60fb      	str	r3, [r7, #12]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d1ef      	bne.n	800d694 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d6b4:	2300      	movs	r3, #0
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3714      	adds	r7, #20
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c0:	4770      	bx	lr
 800d6c2:	bf00      	nop
 800d6c4:	2000b0ec 	.word	0x2000b0ec

0800d6c8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d6ce:	f008 fe41 	bl	8016354 <sys_arch_protect>
 800d6d2:	6038      	str	r0, [r7, #0]
 800d6d4:	4b0d      	ldr	r3, [pc, #52]	; (800d70c <pbuf_free_ooseq+0x44>)
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	701a      	strb	r2, [r3, #0]
 800d6da:	6838      	ldr	r0, [r7, #0]
 800d6dc:	f008 fe48 	bl	8016370 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d6e0:	4b0b      	ldr	r3, [pc, #44]	; (800d710 <pbuf_free_ooseq+0x48>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	607b      	str	r3, [r7, #4]
 800d6e6:	e00a      	b.n	800d6fe <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d003      	beq.n	800d6f8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f002 f971 	bl	800f9d8 <tcp_free_ooseq>
      return;
 800d6f6:	e005      	b.n	800d704 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	607b      	str	r3, [r7, #4]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d1f1      	bne.n	800d6e8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d704:	3708      	adds	r7, #8
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop
 800d70c:	2000b0f4 	.word	0x2000b0f4
 800d710:	2000b0fc 	.word	0x2000b0fc

0800d714 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d71c:	f7ff ffd4 	bl	800d6c8 <pbuf_free_ooseq>
}
 800d720:	bf00      	nop
 800d722:	3708      	adds	r7, #8
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d72e:	f008 fe11 	bl	8016354 <sys_arch_protect>
 800d732:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d734:	4b0f      	ldr	r3, [pc, #60]	; (800d774 <pbuf_pool_is_empty+0x4c>)
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d73a:	4b0e      	ldr	r3, [pc, #56]	; (800d774 <pbuf_pool_is_empty+0x4c>)
 800d73c:	2201      	movs	r2, #1
 800d73e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f008 fe15 	bl	8016370 <sys_arch_unprotect>

  if (!queued) {
 800d746:	78fb      	ldrb	r3, [r7, #3]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10f      	bne.n	800d76c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d74c:	2100      	movs	r1, #0
 800d74e:	480a      	ldr	r0, [pc, #40]	; (800d778 <pbuf_pool_is_empty+0x50>)
 800d750:	f7fe ff64 	bl	800c61c <tcpip_try_callback>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d008      	beq.n	800d76c <pbuf_pool_is_empty+0x44>
 800d75a:	f008 fdfb 	bl	8016354 <sys_arch_protect>
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	4b04      	ldr	r3, [pc, #16]	; (800d774 <pbuf_pool_is_empty+0x4c>)
 800d762:	2200      	movs	r2, #0
 800d764:	701a      	strb	r2, [r3, #0]
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f008 fe02 	bl	8016370 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d76c:	bf00      	nop
 800d76e:	3708      	adds	r7, #8
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}
 800d774:	2000b0f4 	.word	0x2000b0f4
 800d778:	0800d715 	.word	0x0800d715

0800d77c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b085      	sub	sp, #20
 800d780:	af00      	add	r7, sp, #0
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	60b9      	str	r1, [r7, #8]
 800d786:	4611      	mov	r1, r2
 800d788:	461a      	mov	r2, r3
 800d78a:	460b      	mov	r3, r1
 800d78c:	80fb      	strh	r3, [r7, #6]
 800d78e:	4613      	mov	r3, r2
 800d790:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2200      	movs	r2, #0
 800d796:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	68ba      	ldr	r2, [r7, #8]
 800d79c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	88fa      	ldrh	r2, [r7, #6]
 800d7a2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	88ba      	ldrh	r2, [r7, #4]
 800d7a8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d7aa:	8b3b      	ldrh	r3, [r7, #24]
 800d7ac:	b2da      	uxtb	r2, r3
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	7f3a      	ldrb	r2, [r7, #28]
 800d7b6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	73da      	strb	r2, [r3, #15]
}
 800d7c4:	bf00      	nop
 800d7c6:	3714      	adds	r7, #20
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ce:	4770      	bx	lr

0800d7d0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b08c      	sub	sp, #48	; 0x30
 800d7d4:	af02      	add	r7, sp, #8
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	71fb      	strb	r3, [r7, #7]
 800d7da:	460b      	mov	r3, r1
 800d7dc:	80bb      	strh	r3, [r7, #4]
 800d7de:	4613      	mov	r3, r2
 800d7e0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d7e2:	79fb      	ldrb	r3, [r7, #7]
 800d7e4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d7e6:	887b      	ldrh	r3, [r7, #2]
 800d7e8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d7ec:	d07f      	beq.n	800d8ee <pbuf_alloc+0x11e>
 800d7ee:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d7f2:	f300 80c8 	bgt.w	800d986 <pbuf_alloc+0x1b6>
 800d7f6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d7fa:	d010      	beq.n	800d81e <pbuf_alloc+0x4e>
 800d7fc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d800:	f300 80c1 	bgt.w	800d986 <pbuf_alloc+0x1b6>
 800d804:	2b01      	cmp	r3, #1
 800d806:	d002      	beq.n	800d80e <pbuf_alloc+0x3e>
 800d808:	2b41      	cmp	r3, #65	; 0x41
 800d80a:	f040 80bc 	bne.w	800d986 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d80e:	887a      	ldrh	r2, [r7, #2]
 800d810:	88bb      	ldrh	r3, [r7, #4]
 800d812:	4619      	mov	r1, r3
 800d814:	2000      	movs	r0, #0
 800d816:	f000 f8d1 	bl	800d9bc <pbuf_alloc_reference>
 800d81a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d81c:	e0bd      	b.n	800d99a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d81e:	2300      	movs	r3, #0
 800d820:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d822:	2300      	movs	r3, #0
 800d824:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d826:	88bb      	ldrh	r3, [r7, #4]
 800d828:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d82a:	200c      	movs	r0, #12
 800d82c:	f7ff fc36 	bl	800d09c <memp_malloc>
 800d830:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d109      	bne.n	800d84c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d838:	f7ff ff76 	bl	800d728 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d002      	beq.n	800d848 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d842:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d844:	f000 faa8 	bl	800dd98 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d848:	2300      	movs	r3, #0
 800d84a:	e0a7      	b.n	800d99c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d84c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d84e:	3303      	adds	r3, #3
 800d850:	b29b      	uxth	r3, r3
 800d852:	f023 0303 	bic.w	r3, r3, #3
 800d856:	b29b      	uxth	r3, r3
 800d858:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d85c:	b29b      	uxth	r3, r3
 800d85e:	8b7a      	ldrh	r2, [r7, #26]
 800d860:	4293      	cmp	r3, r2
 800d862:	bf28      	it	cs
 800d864:	4613      	movcs	r3, r2
 800d866:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d868:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d86a:	3310      	adds	r3, #16
 800d86c:	693a      	ldr	r2, [r7, #16]
 800d86e:	4413      	add	r3, r2
 800d870:	3303      	adds	r3, #3
 800d872:	f023 0303 	bic.w	r3, r3, #3
 800d876:	4618      	mov	r0, r3
 800d878:	89f9      	ldrh	r1, [r7, #14]
 800d87a:	8b7a      	ldrh	r2, [r7, #26]
 800d87c:	2300      	movs	r3, #0
 800d87e:	9301      	str	r3, [sp, #4]
 800d880:	887b      	ldrh	r3, [r7, #2]
 800d882:	9300      	str	r3, [sp, #0]
 800d884:	460b      	mov	r3, r1
 800d886:	4601      	mov	r1, r0
 800d888:	6938      	ldr	r0, [r7, #16]
 800d88a:	f7ff ff77 	bl	800d77c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	f003 0303 	and.w	r3, r3, #3
 800d896:	2b00      	cmp	r3, #0
 800d898:	d006      	beq.n	800d8a8 <pbuf_alloc+0xd8>
 800d89a:	4b42      	ldr	r3, [pc, #264]	; (800d9a4 <pbuf_alloc+0x1d4>)
 800d89c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d8a0:	4941      	ldr	r1, [pc, #260]	; (800d9a8 <pbuf_alloc+0x1d8>)
 800d8a2:	4842      	ldr	r0, [pc, #264]	; (800d9ac <pbuf_alloc+0x1dc>)
 800d8a4:	f009 fabe 	bl	8016e24 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d8a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8aa:	3303      	adds	r3, #3
 800d8ac:	f023 0303 	bic.w	r3, r3, #3
 800d8b0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d8b4:	d106      	bne.n	800d8c4 <pbuf_alloc+0xf4>
 800d8b6:	4b3b      	ldr	r3, [pc, #236]	; (800d9a4 <pbuf_alloc+0x1d4>)
 800d8b8:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d8bc:	493c      	ldr	r1, [pc, #240]	; (800d9b0 <pbuf_alloc+0x1e0>)
 800d8be:	483b      	ldr	r0, [pc, #236]	; (800d9ac <pbuf_alloc+0x1dc>)
 800d8c0:	f009 fab0 	bl	8016e24 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d102      	bne.n	800d8d0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	627b      	str	r3, [r7, #36]	; 0x24
 800d8ce:	e002      	b.n	800d8d6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	693a      	ldr	r2, [r7, #16]
 800d8d4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d8da:	8b7a      	ldrh	r2, [r7, #26]
 800d8dc:	89fb      	ldrh	r3, [r7, #14]
 800d8de:	1ad3      	subs	r3, r2, r3
 800d8e0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d8e6:	8b7b      	ldrh	r3, [r7, #26]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d19e      	bne.n	800d82a <pbuf_alloc+0x5a>
      break;
 800d8ec:	e055      	b.n	800d99a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d8ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8f0:	3303      	adds	r3, #3
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	f023 0303 	bic.w	r3, r3, #3
 800d8f8:	b29a      	uxth	r2, r3
 800d8fa:	88bb      	ldrh	r3, [r7, #4]
 800d8fc:	3303      	adds	r3, #3
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	f023 0303 	bic.w	r3, r3, #3
 800d904:	b29b      	uxth	r3, r3
 800d906:	4413      	add	r3, r2
 800d908:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d90a:	8b3b      	ldrh	r3, [r7, #24]
 800d90c:	3310      	adds	r3, #16
 800d90e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d910:	8b3a      	ldrh	r2, [r7, #24]
 800d912:	88bb      	ldrh	r3, [r7, #4]
 800d914:	3303      	adds	r3, #3
 800d916:	f023 0303 	bic.w	r3, r3, #3
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d306      	bcc.n	800d92c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d91e:	8afa      	ldrh	r2, [r7, #22]
 800d920:	88bb      	ldrh	r3, [r7, #4]
 800d922:	3303      	adds	r3, #3
 800d924:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d928:	429a      	cmp	r2, r3
 800d92a:	d201      	bcs.n	800d930 <pbuf_alloc+0x160>
        return NULL;
 800d92c:	2300      	movs	r3, #0
 800d92e:	e035      	b.n	800d99c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d930:	8afb      	ldrh	r3, [r7, #22]
 800d932:	4618      	mov	r0, r3
 800d934:	f7ff fa30 	bl	800cd98 <mem_malloc>
 800d938:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d101      	bne.n	800d944 <pbuf_alloc+0x174>
        return NULL;
 800d940:	2300      	movs	r3, #0
 800d942:	e02b      	b.n	800d99c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d944:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d946:	3310      	adds	r3, #16
 800d948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d94a:	4413      	add	r3, r2
 800d94c:	3303      	adds	r3, #3
 800d94e:	f023 0303 	bic.w	r3, r3, #3
 800d952:	4618      	mov	r0, r3
 800d954:	88b9      	ldrh	r1, [r7, #4]
 800d956:	88ba      	ldrh	r2, [r7, #4]
 800d958:	2300      	movs	r3, #0
 800d95a:	9301      	str	r3, [sp, #4]
 800d95c:	887b      	ldrh	r3, [r7, #2]
 800d95e:	9300      	str	r3, [sp, #0]
 800d960:	460b      	mov	r3, r1
 800d962:	4601      	mov	r1, r0
 800d964:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d966:	f7ff ff09 	bl	800d77c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	f003 0303 	and.w	r3, r3, #3
 800d972:	2b00      	cmp	r3, #0
 800d974:	d010      	beq.n	800d998 <pbuf_alloc+0x1c8>
 800d976:	4b0b      	ldr	r3, [pc, #44]	; (800d9a4 <pbuf_alloc+0x1d4>)
 800d978:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d97c:	490d      	ldr	r1, [pc, #52]	; (800d9b4 <pbuf_alloc+0x1e4>)
 800d97e:	480b      	ldr	r0, [pc, #44]	; (800d9ac <pbuf_alloc+0x1dc>)
 800d980:	f009 fa50 	bl	8016e24 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d984:	e008      	b.n	800d998 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d986:	4b07      	ldr	r3, [pc, #28]	; (800d9a4 <pbuf_alloc+0x1d4>)
 800d988:	f240 1227 	movw	r2, #295	; 0x127
 800d98c:	490a      	ldr	r1, [pc, #40]	; (800d9b8 <pbuf_alloc+0x1e8>)
 800d98e:	4807      	ldr	r0, [pc, #28]	; (800d9ac <pbuf_alloc+0x1dc>)
 800d990:	f009 fa48 	bl	8016e24 <iprintf>
      return NULL;
 800d994:	2300      	movs	r3, #0
 800d996:	e001      	b.n	800d99c <pbuf_alloc+0x1cc>
      break;
 800d998:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3728      	adds	r7, #40	; 0x28
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}
 800d9a4:	08018688 	.word	0x08018688
 800d9a8:	080186b8 	.word	0x080186b8
 800d9ac:	080186e8 	.word	0x080186e8
 800d9b0:	08018710 	.word	0x08018710
 800d9b4:	08018744 	.word	0x08018744
 800d9b8:	08018770 	.word	0x08018770

0800d9bc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b086      	sub	sp, #24
 800d9c0:	af02      	add	r7, sp, #8
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	807b      	strh	r3, [r7, #2]
 800d9c8:	4613      	mov	r3, r2
 800d9ca:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d9cc:	883b      	ldrh	r3, [r7, #0]
 800d9ce:	2b41      	cmp	r3, #65	; 0x41
 800d9d0:	d009      	beq.n	800d9e6 <pbuf_alloc_reference+0x2a>
 800d9d2:	883b      	ldrh	r3, [r7, #0]
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d006      	beq.n	800d9e6 <pbuf_alloc_reference+0x2a>
 800d9d8:	4b0f      	ldr	r3, [pc, #60]	; (800da18 <pbuf_alloc_reference+0x5c>)
 800d9da:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d9de:	490f      	ldr	r1, [pc, #60]	; (800da1c <pbuf_alloc_reference+0x60>)
 800d9e0:	480f      	ldr	r0, [pc, #60]	; (800da20 <pbuf_alloc_reference+0x64>)
 800d9e2:	f009 fa1f 	bl	8016e24 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d9e6:	200b      	movs	r0, #11
 800d9e8:	f7ff fb58 	bl	800d09c <memp_malloc>
 800d9ec:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d101      	bne.n	800d9f8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	e00b      	b.n	800da10 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d9f8:	8879      	ldrh	r1, [r7, #2]
 800d9fa:	887a      	ldrh	r2, [r7, #2]
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	9301      	str	r3, [sp, #4]
 800da00:	883b      	ldrh	r3, [r7, #0]
 800da02:	9300      	str	r3, [sp, #0]
 800da04:	460b      	mov	r3, r1
 800da06:	6879      	ldr	r1, [r7, #4]
 800da08:	68f8      	ldr	r0, [r7, #12]
 800da0a:	f7ff feb7 	bl	800d77c <pbuf_init_alloced_pbuf>
  return p;
 800da0e:	68fb      	ldr	r3, [r7, #12]
}
 800da10:	4618      	mov	r0, r3
 800da12:	3710      	adds	r7, #16
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	08018688 	.word	0x08018688
 800da1c:	0801878c 	.word	0x0801878c
 800da20:	080186e8 	.word	0x080186e8

0800da24 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b088      	sub	sp, #32
 800da28:	af02      	add	r7, sp, #8
 800da2a:	607b      	str	r3, [r7, #4]
 800da2c:	4603      	mov	r3, r0
 800da2e:	73fb      	strb	r3, [r7, #15]
 800da30:	460b      	mov	r3, r1
 800da32:	81bb      	strh	r3, [r7, #12]
 800da34:	4613      	mov	r3, r2
 800da36:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800da38:	7bfb      	ldrb	r3, [r7, #15]
 800da3a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800da3c:	8a7b      	ldrh	r3, [r7, #18]
 800da3e:	3303      	adds	r3, #3
 800da40:	f023 0203 	bic.w	r2, r3, #3
 800da44:	89bb      	ldrh	r3, [r7, #12]
 800da46:	441a      	add	r2, r3
 800da48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d901      	bls.n	800da52 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800da4e:	2300      	movs	r3, #0
 800da50:	e018      	b.n	800da84 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800da52:	6a3b      	ldr	r3, [r7, #32]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d007      	beq.n	800da68 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800da58:	8a7b      	ldrh	r3, [r7, #18]
 800da5a:	3303      	adds	r3, #3
 800da5c:	f023 0303 	bic.w	r3, r3, #3
 800da60:	6a3a      	ldr	r2, [r7, #32]
 800da62:	4413      	add	r3, r2
 800da64:	617b      	str	r3, [r7, #20]
 800da66:	e001      	b.n	800da6c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800da68:	2300      	movs	r3, #0
 800da6a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	89b9      	ldrh	r1, [r7, #12]
 800da70:	89ba      	ldrh	r2, [r7, #12]
 800da72:	2302      	movs	r3, #2
 800da74:	9301      	str	r3, [sp, #4]
 800da76:	897b      	ldrh	r3, [r7, #10]
 800da78:	9300      	str	r3, [sp, #0]
 800da7a:	460b      	mov	r3, r1
 800da7c:	6979      	ldr	r1, [r7, #20]
 800da7e:	f7ff fe7d 	bl	800d77c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800da82:	687b      	ldr	r3, [r7, #4]
}
 800da84:	4618      	mov	r0, r3
 800da86:	3718      	adds	r7, #24
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	460b      	mov	r3, r1
 800da96:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d106      	bne.n	800daac <pbuf_realloc+0x20>
 800da9e:	4b3a      	ldr	r3, [pc, #232]	; (800db88 <pbuf_realloc+0xfc>)
 800daa0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800daa4:	4939      	ldr	r1, [pc, #228]	; (800db8c <pbuf_realloc+0x100>)
 800daa6:	483a      	ldr	r0, [pc, #232]	; (800db90 <pbuf_realloc+0x104>)
 800daa8:	f009 f9bc 	bl	8016e24 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	891b      	ldrh	r3, [r3, #8]
 800dab0:	887a      	ldrh	r2, [r7, #2]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d263      	bcs.n	800db7e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	891a      	ldrh	r2, [r3, #8]
 800daba:	887b      	ldrh	r3, [r7, #2]
 800dabc:	1ad3      	subs	r3, r2, r3
 800dabe:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800dac0:	887b      	ldrh	r3, [r7, #2]
 800dac2:	817b      	strh	r3, [r7, #10]
  q = p;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800dac8:	e018      	b.n	800dafc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	895b      	ldrh	r3, [r3, #10]
 800dace:	897a      	ldrh	r2, [r7, #10]
 800dad0:	1ad3      	subs	r3, r2, r3
 800dad2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	891a      	ldrh	r2, [r3, #8]
 800dad8:	893b      	ldrh	r3, [r7, #8]
 800dada:	1ad3      	subs	r3, r2, r3
 800dadc:	b29a      	uxth	r2, r3
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d106      	bne.n	800dafc <pbuf_realloc+0x70>
 800daee:	4b26      	ldr	r3, [pc, #152]	; (800db88 <pbuf_realloc+0xfc>)
 800daf0:	f240 12af 	movw	r2, #431	; 0x1af
 800daf4:	4927      	ldr	r1, [pc, #156]	; (800db94 <pbuf_realloc+0x108>)
 800daf6:	4826      	ldr	r0, [pc, #152]	; (800db90 <pbuf_realloc+0x104>)
 800daf8:	f009 f994 	bl	8016e24 <iprintf>
  while (rem_len > q->len) {
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	895b      	ldrh	r3, [r3, #10]
 800db00:	897a      	ldrh	r2, [r7, #10]
 800db02:	429a      	cmp	r2, r3
 800db04:	d8e1      	bhi.n	800daca <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	7b1b      	ldrb	r3, [r3, #12]
 800db0a:	f003 030f 	and.w	r3, r3, #15
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d121      	bne.n	800db56 <pbuf_realloc+0xca>
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	895b      	ldrh	r3, [r3, #10]
 800db16:	897a      	ldrh	r2, [r7, #10]
 800db18:	429a      	cmp	r2, r3
 800db1a:	d01c      	beq.n	800db56 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	7b5b      	ldrb	r3, [r3, #13]
 800db20:	f003 0302 	and.w	r3, r3, #2
 800db24:	2b00      	cmp	r3, #0
 800db26:	d116      	bne.n	800db56 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	685a      	ldr	r2, [r3, #4]
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	1ad3      	subs	r3, r2, r3
 800db30:	b29a      	uxth	r2, r3
 800db32:	897b      	ldrh	r3, [r7, #10]
 800db34:	4413      	add	r3, r2
 800db36:	b29b      	uxth	r3, r3
 800db38:	4619      	mov	r1, r3
 800db3a:	68f8      	ldr	r0, [r7, #12]
 800db3c:	f7ff f822 	bl	800cb84 <mem_trim>
 800db40:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d106      	bne.n	800db56 <pbuf_realloc+0xca>
 800db48:	4b0f      	ldr	r3, [pc, #60]	; (800db88 <pbuf_realloc+0xfc>)
 800db4a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800db4e:	4912      	ldr	r1, [pc, #72]	; (800db98 <pbuf_realloc+0x10c>)
 800db50:	480f      	ldr	r0, [pc, #60]	; (800db90 <pbuf_realloc+0x104>)
 800db52:	f009 f967 	bl	8016e24 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	897a      	ldrh	r2, [r7, #10]
 800db5a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	895a      	ldrh	r2, [r3, #10]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d004      	beq.n	800db76 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	4618      	mov	r0, r3
 800db72:	f000 f911 	bl	800dd98 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2200      	movs	r2, #0
 800db7a:	601a      	str	r2, [r3, #0]
 800db7c:	e000      	b.n	800db80 <pbuf_realloc+0xf4>
    return;
 800db7e:	bf00      	nop

}
 800db80:	3710      	adds	r7, #16
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	08018688 	.word	0x08018688
 800db8c:	080187a0 	.word	0x080187a0
 800db90:	080186e8 	.word	0x080186e8
 800db94:	080187b8 	.word	0x080187b8
 800db98:	080187d0 	.word	0x080187d0

0800db9c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b086      	sub	sp, #24
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	60f8      	str	r0, [r7, #12]
 800dba4:	60b9      	str	r1, [r7, #8]
 800dba6:	4613      	mov	r3, r2
 800dba8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d106      	bne.n	800dbbe <pbuf_add_header_impl+0x22>
 800dbb0:	4b2b      	ldr	r3, [pc, #172]	; (800dc60 <pbuf_add_header_impl+0xc4>)
 800dbb2:	f240 12df 	movw	r2, #479	; 0x1df
 800dbb6:	492b      	ldr	r1, [pc, #172]	; (800dc64 <pbuf_add_header_impl+0xc8>)
 800dbb8:	482b      	ldr	r0, [pc, #172]	; (800dc68 <pbuf_add_header_impl+0xcc>)
 800dbba:	f009 f933 	bl	8016e24 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d003      	beq.n	800dbcc <pbuf_add_header_impl+0x30>
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbca:	d301      	bcc.n	800dbd0 <pbuf_add_header_impl+0x34>
    return 1;
 800dbcc:	2301      	movs	r3, #1
 800dbce:	e043      	b.n	800dc58 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d101      	bne.n	800dbda <pbuf_add_header_impl+0x3e>
    return 0;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	e03e      	b.n	800dc58 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	891a      	ldrh	r2, [r3, #8]
 800dbe2:	8a7b      	ldrh	r3, [r7, #18]
 800dbe4:	4413      	add	r3, r2
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	8a7a      	ldrh	r2, [r7, #18]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d901      	bls.n	800dbf2 <pbuf_add_header_impl+0x56>
    return 1;
 800dbee:	2301      	movs	r3, #1
 800dbf0:	e032      	b.n	800dc58 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	7b1b      	ldrb	r3, [r3, #12]
 800dbf6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800dbf8:	8a3b      	ldrh	r3, [r7, #16]
 800dbfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d00c      	beq.n	800dc1c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	685a      	ldr	r2, [r3, #4]
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	425b      	negs	r3, r3
 800dc0a:	4413      	add	r3, r2
 800dc0c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	3310      	adds	r3, #16
 800dc12:	697a      	ldr	r2, [r7, #20]
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d20d      	bcs.n	800dc34 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800dc18:	2301      	movs	r3, #1
 800dc1a:	e01d      	b.n	800dc58 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800dc1c:	79fb      	ldrb	r3, [r7, #7]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d006      	beq.n	800dc30 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	685a      	ldr	r2, [r3, #4]
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	425b      	negs	r3, r3
 800dc2a:	4413      	add	r3, r2
 800dc2c:	617b      	str	r3, [r7, #20]
 800dc2e:	e001      	b.n	800dc34 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800dc30:	2301      	movs	r3, #1
 800dc32:	e011      	b.n	800dc58 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	697a      	ldr	r2, [r7, #20]
 800dc38:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	895a      	ldrh	r2, [r3, #10]
 800dc3e:	8a7b      	ldrh	r3, [r7, #18]
 800dc40:	4413      	add	r3, r2
 800dc42:	b29a      	uxth	r2, r3
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	891a      	ldrh	r2, [r3, #8]
 800dc4c:	8a7b      	ldrh	r3, [r7, #18]
 800dc4e:	4413      	add	r3, r2
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	811a      	strh	r2, [r3, #8]


  return 0;
 800dc56:	2300      	movs	r3, #0
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3718      	adds	r7, #24
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}
 800dc60:	08018688 	.word	0x08018688
 800dc64:	080187ec 	.word	0x080187ec
 800dc68:	080186e8 	.word	0x080186e8

0800dc6c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dc76:	2200      	movs	r2, #0
 800dc78:	6839      	ldr	r1, [r7, #0]
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f7ff ff8e 	bl	800db9c <pbuf_add_header_impl>
 800dc80:	4603      	mov	r3, r0
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3708      	adds	r7, #8
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
	...

0800dc8c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d106      	bne.n	800dcaa <pbuf_remove_header+0x1e>
 800dc9c:	4b20      	ldr	r3, [pc, #128]	; (800dd20 <pbuf_remove_header+0x94>)
 800dc9e:	f240 224b 	movw	r2, #587	; 0x24b
 800dca2:	4920      	ldr	r1, [pc, #128]	; (800dd24 <pbuf_remove_header+0x98>)
 800dca4:	4820      	ldr	r0, [pc, #128]	; (800dd28 <pbuf_remove_header+0x9c>)
 800dca6:	f009 f8bd 	bl	8016e24 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d003      	beq.n	800dcb8 <pbuf_remove_header+0x2c>
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcb6:	d301      	bcc.n	800dcbc <pbuf_remove_header+0x30>
    return 1;
 800dcb8:	2301      	movs	r3, #1
 800dcba:	e02c      	b.n	800dd16 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d101      	bne.n	800dcc6 <pbuf_remove_header+0x3a>
    return 0;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	e027      	b.n	800dd16 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	895b      	ldrh	r3, [r3, #10]
 800dcce:	89fa      	ldrh	r2, [r7, #14]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d908      	bls.n	800dce6 <pbuf_remove_header+0x5a>
 800dcd4:	4b12      	ldr	r3, [pc, #72]	; (800dd20 <pbuf_remove_header+0x94>)
 800dcd6:	f240 2255 	movw	r2, #597	; 0x255
 800dcda:	4914      	ldr	r1, [pc, #80]	; (800dd2c <pbuf_remove_header+0xa0>)
 800dcdc:	4812      	ldr	r0, [pc, #72]	; (800dd28 <pbuf_remove_header+0x9c>)
 800dcde:	f009 f8a1 	bl	8016e24 <iprintf>
 800dce2:	2301      	movs	r3, #1
 800dce4:	e017      	b.n	800dd16 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	685a      	ldr	r2, [r3, #4]
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	441a      	add	r2, r3
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	895a      	ldrh	r2, [r3, #10]
 800dcfc:	89fb      	ldrh	r3, [r7, #14]
 800dcfe:	1ad3      	subs	r3, r2, r3
 800dd00:	b29a      	uxth	r2, r3
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	891a      	ldrh	r2, [r3, #8]
 800dd0a:	89fb      	ldrh	r3, [r7, #14]
 800dd0c:	1ad3      	subs	r3, r2, r3
 800dd0e:	b29a      	uxth	r2, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dd14:	2300      	movs	r3, #0
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3710      	adds	r7, #16
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	08018688 	.word	0x08018688
 800dd24:	080187ec 	.word	0x080187ec
 800dd28:	080186e8 	.word	0x080186e8
 800dd2c:	080187f8 	.word	0x080187f8

0800dd30 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b082      	sub	sp, #8
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	460b      	mov	r3, r1
 800dd3a:	807b      	strh	r3, [r7, #2]
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800dd40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	da08      	bge.n	800dd5a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800dd48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd4c:	425b      	negs	r3, r3
 800dd4e:	4619      	mov	r1, r3
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f7ff ff9b 	bl	800dc8c <pbuf_remove_header>
 800dd56:	4603      	mov	r3, r0
 800dd58:	e007      	b.n	800dd6a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800dd5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd5e:	787a      	ldrb	r2, [r7, #1]
 800dd60:	4619      	mov	r1, r3
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f7ff ff1a 	bl	800db9c <pbuf_add_header_impl>
 800dd68:	4603      	mov	r3, r0
  }
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3708      	adds	r7, #8
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b082      	sub	sp, #8
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
 800dd7a:	460b      	mov	r3, r1
 800dd7c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800dd7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd82:	2201      	movs	r2, #1
 800dd84:	4619      	mov	r1, r3
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f7ff ffd2 	bl	800dd30 <pbuf_header_impl>
 800dd8c:	4603      	mov	r3, r0
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3708      	adds	r7, #8
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
	...

0800dd98 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b088      	sub	sp, #32
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d10b      	bne.n	800ddbe <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d106      	bne.n	800ddba <pbuf_free+0x22>
 800ddac:	4b3b      	ldr	r3, [pc, #236]	; (800de9c <pbuf_free+0x104>)
 800ddae:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ddb2:	493b      	ldr	r1, [pc, #236]	; (800dea0 <pbuf_free+0x108>)
 800ddb4:	483b      	ldr	r0, [pc, #236]	; (800dea4 <pbuf_free+0x10c>)
 800ddb6:	f009 f835 	bl	8016e24 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	e069      	b.n	800de92 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ddc2:	e062      	b.n	800de8a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ddc4:	f008 fac6 	bl	8016354 <sys_arch_protect>
 800ddc8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	7b9b      	ldrb	r3, [r3, #14]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d106      	bne.n	800dde0 <pbuf_free+0x48>
 800ddd2:	4b32      	ldr	r3, [pc, #200]	; (800de9c <pbuf_free+0x104>)
 800ddd4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ddd8:	4933      	ldr	r1, [pc, #204]	; (800dea8 <pbuf_free+0x110>)
 800ddda:	4832      	ldr	r0, [pc, #200]	; (800dea4 <pbuf_free+0x10c>)
 800dddc:	f009 f822 	bl	8016e24 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	7b9b      	ldrb	r3, [r3, #14]
 800dde4:	3b01      	subs	r3, #1
 800dde6:	b2da      	uxtb	r2, r3
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	739a      	strb	r2, [r3, #14]
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	7b9b      	ldrb	r3, [r3, #14]
 800ddf0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ddf2:	69b8      	ldr	r0, [r7, #24]
 800ddf4:	f008 fabc 	bl	8016370 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ddf8:	7dfb      	ldrb	r3, [r7, #23]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d143      	bne.n	800de86 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	7b1b      	ldrb	r3, [r3, #12]
 800de08:	f003 030f 	and.w	r3, r3, #15
 800de0c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	7b5b      	ldrb	r3, [r3, #13]
 800de12:	f003 0302 	and.w	r3, r3, #2
 800de16:	2b00      	cmp	r3, #0
 800de18:	d011      	beq.n	800de3e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	691b      	ldr	r3, [r3, #16]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d106      	bne.n	800de34 <pbuf_free+0x9c>
 800de26:	4b1d      	ldr	r3, [pc, #116]	; (800de9c <pbuf_free+0x104>)
 800de28:	f240 22ff 	movw	r2, #767	; 0x2ff
 800de2c:	491f      	ldr	r1, [pc, #124]	; (800deac <pbuf_free+0x114>)
 800de2e:	481d      	ldr	r0, [pc, #116]	; (800dea4 <pbuf_free+0x10c>)
 800de30:	f008 fff8 	bl	8016e24 <iprintf>
        pc->custom_free_function(p);
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	691b      	ldr	r3, [r3, #16]
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	4798      	blx	r3
 800de3c:	e01d      	b.n	800de7a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800de3e:	7bfb      	ldrb	r3, [r7, #15]
 800de40:	2b02      	cmp	r3, #2
 800de42:	d104      	bne.n	800de4e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800de44:	6879      	ldr	r1, [r7, #4]
 800de46:	200c      	movs	r0, #12
 800de48:	f7ff f97a 	bl	800d140 <memp_free>
 800de4c:	e015      	b.n	800de7a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800de4e:	7bfb      	ldrb	r3, [r7, #15]
 800de50:	2b01      	cmp	r3, #1
 800de52:	d104      	bne.n	800de5e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800de54:	6879      	ldr	r1, [r7, #4]
 800de56:	200b      	movs	r0, #11
 800de58:	f7ff f972 	bl	800d140 <memp_free>
 800de5c:	e00d      	b.n	800de7a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800de5e:	7bfb      	ldrb	r3, [r7, #15]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d103      	bne.n	800de6c <pbuf_free+0xd4>
          mem_free(p);
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f7fe fdfd 	bl	800ca64 <mem_free>
 800de6a:	e006      	b.n	800de7a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800de6c:	4b0b      	ldr	r3, [pc, #44]	; (800de9c <pbuf_free+0x104>)
 800de6e:	f240 320f 	movw	r2, #783	; 0x30f
 800de72:	490f      	ldr	r1, [pc, #60]	; (800deb0 <pbuf_free+0x118>)
 800de74:	480b      	ldr	r0, [pc, #44]	; (800dea4 <pbuf_free+0x10c>)
 800de76:	f008 ffd5 	bl	8016e24 <iprintf>
        }
      }
      count++;
 800de7a:	7ffb      	ldrb	r3, [r7, #31]
 800de7c:	3301      	adds	r3, #1
 800de7e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800de80:	693b      	ldr	r3, [r7, #16]
 800de82:	607b      	str	r3, [r7, #4]
 800de84:	e001      	b.n	800de8a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800de86:	2300      	movs	r3, #0
 800de88:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d199      	bne.n	800ddc4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800de90:	7ffb      	ldrb	r3, [r7, #31]
}
 800de92:	4618      	mov	r0, r3
 800de94:	3720      	adds	r7, #32
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	08018688 	.word	0x08018688
 800dea0:	080187ec 	.word	0x080187ec
 800dea4:	080186e8 	.word	0x080186e8
 800dea8:	08018818 	.word	0x08018818
 800deac:	08018830 	.word	0x08018830
 800deb0:	08018854 	.word	0x08018854

0800deb4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800deb4:	b480      	push	{r7}
 800deb6:	b085      	sub	sp, #20
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800debc:	2300      	movs	r3, #0
 800debe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800dec0:	e005      	b.n	800dece <pbuf_clen+0x1a>
    ++len;
 800dec2:	89fb      	ldrh	r3, [r7, #14]
 800dec4:	3301      	adds	r3, #1
 800dec6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d1f6      	bne.n	800dec2 <pbuf_clen+0xe>
  }
  return len;
 800ded4:	89fb      	ldrh	r3, [r7, #14]
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3714      	adds	r7, #20
 800deda:	46bd      	mov	sp, r7
 800dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee0:	4770      	bx	lr
	...

0800dee4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d016      	beq.n	800df20 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800def2:	f008 fa2f 	bl	8016354 <sys_arch_protect>
 800def6:	60f8      	str	r0, [r7, #12]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	7b9b      	ldrb	r3, [r3, #14]
 800defc:	3301      	adds	r3, #1
 800defe:	b2da      	uxtb	r2, r3
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	739a      	strb	r2, [r3, #14]
 800df04:	68f8      	ldr	r0, [r7, #12]
 800df06:	f008 fa33 	bl	8016370 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	7b9b      	ldrb	r3, [r3, #14]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d106      	bne.n	800df20 <pbuf_ref+0x3c>
 800df12:	4b05      	ldr	r3, [pc, #20]	; (800df28 <pbuf_ref+0x44>)
 800df14:	f240 3242 	movw	r2, #834	; 0x342
 800df18:	4904      	ldr	r1, [pc, #16]	; (800df2c <pbuf_ref+0x48>)
 800df1a:	4805      	ldr	r0, [pc, #20]	; (800df30 <pbuf_ref+0x4c>)
 800df1c:	f008 ff82 	bl	8016e24 <iprintf>
  }
}
 800df20:	bf00      	nop
 800df22:	3710      	adds	r7, #16
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}
 800df28:	08018688 	.word	0x08018688
 800df2c:	08018868 	.word	0x08018868
 800df30:	080186e8 	.word	0x080186e8

0800df34 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d002      	beq.n	800df4a <pbuf_cat+0x16>
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d107      	bne.n	800df5a <pbuf_cat+0x26>
 800df4a:	4b20      	ldr	r3, [pc, #128]	; (800dfcc <pbuf_cat+0x98>)
 800df4c:	f240 3259 	movw	r2, #857	; 0x359
 800df50:	491f      	ldr	r1, [pc, #124]	; (800dfd0 <pbuf_cat+0x9c>)
 800df52:	4820      	ldr	r0, [pc, #128]	; (800dfd4 <pbuf_cat+0xa0>)
 800df54:	f008 ff66 	bl	8016e24 <iprintf>
 800df58:	e034      	b.n	800dfc4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	60fb      	str	r3, [r7, #12]
 800df5e:	e00a      	b.n	800df76 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	891a      	ldrh	r2, [r3, #8]
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	891b      	ldrh	r3, [r3, #8]
 800df68:	4413      	add	r3, r2
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	60fb      	str	r3, [r7, #12]
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d1f0      	bne.n	800df60 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	891a      	ldrh	r2, [r3, #8]
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	895b      	ldrh	r3, [r3, #10]
 800df86:	429a      	cmp	r2, r3
 800df88:	d006      	beq.n	800df98 <pbuf_cat+0x64>
 800df8a:	4b10      	ldr	r3, [pc, #64]	; (800dfcc <pbuf_cat+0x98>)
 800df8c:	f240 3262 	movw	r2, #866	; 0x362
 800df90:	4911      	ldr	r1, [pc, #68]	; (800dfd8 <pbuf_cat+0xa4>)
 800df92:	4810      	ldr	r0, [pc, #64]	; (800dfd4 <pbuf_cat+0xa0>)
 800df94:	f008 ff46 	bl	8016e24 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d006      	beq.n	800dfae <pbuf_cat+0x7a>
 800dfa0:	4b0a      	ldr	r3, [pc, #40]	; (800dfcc <pbuf_cat+0x98>)
 800dfa2:	f240 3263 	movw	r2, #867	; 0x363
 800dfa6:	490d      	ldr	r1, [pc, #52]	; (800dfdc <pbuf_cat+0xa8>)
 800dfa8:	480a      	ldr	r0, [pc, #40]	; (800dfd4 <pbuf_cat+0xa0>)
 800dfaa:	f008 ff3b 	bl	8016e24 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	891a      	ldrh	r2, [r3, #8]
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	891b      	ldrh	r3, [r3, #8]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	b29a      	uxth	r2, r3
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	683a      	ldr	r2, [r7, #0]
 800dfc2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800dfc4:	3710      	adds	r7, #16
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}
 800dfca:	bf00      	nop
 800dfcc:	08018688 	.word	0x08018688
 800dfd0:	0801887c 	.word	0x0801887c
 800dfd4:	080186e8 	.word	0x080186e8
 800dfd8:	080188b4 	.word	0x080188b4
 800dfdc:	080188e4 	.word	0x080188e4

0800dfe0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b086      	sub	sp, #24
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800dfea:	2300      	movs	r3, #0
 800dfec:	617b      	str	r3, [r7, #20]
 800dfee:	2300      	movs	r3, #0
 800dff0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d008      	beq.n	800e00a <pbuf_copy+0x2a>
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d005      	beq.n	800e00a <pbuf_copy+0x2a>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	891a      	ldrh	r2, [r3, #8]
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	891b      	ldrh	r3, [r3, #8]
 800e006:	429a      	cmp	r2, r3
 800e008:	d209      	bcs.n	800e01e <pbuf_copy+0x3e>
 800e00a:	4b57      	ldr	r3, [pc, #348]	; (800e168 <pbuf_copy+0x188>)
 800e00c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e010:	4956      	ldr	r1, [pc, #344]	; (800e16c <pbuf_copy+0x18c>)
 800e012:	4857      	ldr	r0, [pc, #348]	; (800e170 <pbuf_copy+0x190>)
 800e014:	f008 ff06 	bl	8016e24 <iprintf>
 800e018:	f06f 030f 	mvn.w	r3, #15
 800e01c:	e09f      	b.n	800e15e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	895b      	ldrh	r3, [r3, #10]
 800e022:	461a      	mov	r2, r3
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	1ad2      	subs	r2, r2, r3
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	895b      	ldrh	r3, [r3, #10]
 800e02c:	4619      	mov	r1, r3
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	1acb      	subs	r3, r1, r3
 800e032:	429a      	cmp	r2, r3
 800e034:	d306      	bcc.n	800e044 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	895b      	ldrh	r3, [r3, #10]
 800e03a:	461a      	mov	r2, r3
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	1ad3      	subs	r3, r2, r3
 800e040:	60fb      	str	r3, [r7, #12]
 800e042:	e005      	b.n	800e050 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	895b      	ldrh	r3, [r3, #10]
 800e048:	461a      	mov	r2, r3
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	1ad3      	subs	r3, r2, r3
 800e04e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	685a      	ldr	r2, [r3, #4]
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	18d0      	adds	r0, r2, r3
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	685a      	ldr	r2, [r3, #4]
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	4413      	add	r3, r2
 800e060:	68fa      	ldr	r2, [r7, #12]
 800e062:	4619      	mov	r1, r3
 800e064:	f008 fec8 	bl	8016df8 <memcpy>
    offset_to += len;
 800e068:	697a      	ldr	r2, [r7, #20]
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	4413      	add	r3, r2
 800e06e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e070:	693a      	ldr	r2, [r7, #16]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	4413      	add	r3, r2
 800e076:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	895b      	ldrh	r3, [r3, #10]
 800e07c:	461a      	mov	r2, r3
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	4293      	cmp	r3, r2
 800e082:	d906      	bls.n	800e092 <pbuf_copy+0xb2>
 800e084:	4b38      	ldr	r3, [pc, #224]	; (800e168 <pbuf_copy+0x188>)
 800e086:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e08a:	493a      	ldr	r1, [pc, #232]	; (800e174 <pbuf_copy+0x194>)
 800e08c:	4838      	ldr	r0, [pc, #224]	; (800e170 <pbuf_copy+0x190>)
 800e08e:	f008 fec9 	bl	8016e24 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	895b      	ldrh	r3, [r3, #10]
 800e096:	461a      	mov	r2, r3
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d906      	bls.n	800e0ac <pbuf_copy+0xcc>
 800e09e:	4b32      	ldr	r3, [pc, #200]	; (800e168 <pbuf_copy+0x188>)
 800e0a0:	f240 32da 	movw	r2, #986	; 0x3da
 800e0a4:	4934      	ldr	r1, [pc, #208]	; (800e178 <pbuf_copy+0x198>)
 800e0a6:	4832      	ldr	r0, [pc, #200]	; (800e170 <pbuf_copy+0x190>)
 800e0a8:	f008 febc 	bl	8016e24 <iprintf>
    if (offset_from >= p_from->len) {
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	895b      	ldrh	r3, [r3, #10]
 800e0b0:	461a      	mov	r2, r3
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d304      	bcc.n	800e0c2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	895b      	ldrh	r3, [r3, #10]
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d114      	bne.n	800e0f8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d10c      	bne.n	800e0f8 <pbuf_copy+0x118>
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d009      	beq.n	800e0f8 <pbuf_copy+0x118>
 800e0e4:	4b20      	ldr	r3, [pc, #128]	; (800e168 <pbuf_copy+0x188>)
 800e0e6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e0ea:	4924      	ldr	r1, [pc, #144]	; (800e17c <pbuf_copy+0x19c>)
 800e0ec:	4820      	ldr	r0, [pc, #128]	; (800e170 <pbuf_copy+0x190>)
 800e0ee:	f008 fe99 	bl	8016e24 <iprintf>
 800e0f2:	f06f 030f 	mvn.w	r3, #15
 800e0f6:	e032      	b.n	800e15e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d013      	beq.n	800e126 <pbuf_copy+0x146>
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	895a      	ldrh	r2, [r3, #10]
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	891b      	ldrh	r3, [r3, #8]
 800e106:	429a      	cmp	r2, r3
 800e108:	d10d      	bne.n	800e126 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d009      	beq.n	800e126 <pbuf_copy+0x146>
 800e112:	4b15      	ldr	r3, [pc, #84]	; (800e168 <pbuf_copy+0x188>)
 800e114:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e118:	4919      	ldr	r1, [pc, #100]	; (800e180 <pbuf_copy+0x1a0>)
 800e11a:	4815      	ldr	r0, [pc, #84]	; (800e170 <pbuf_copy+0x190>)
 800e11c:	f008 fe82 	bl	8016e24 <iprintf>
 800e120:	f06f 0305 	mvn.w	r3, #5
 800e124:	e01b      	b.n	800e15e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d013      	beq.n	800e154 <pbuf_copy+0x174>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	895a      	ldrh	r2, [r3, #10]
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	891b      	ldrh	r3, [r3, #8]
 800e134:	429a      	cmp	r2, r3
 800e136:	d10d      	bne.n	800e154 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d009      	beq.n	800e154 <pbuf_copy+0x174>
 800e140:	4b09      	ldr	r3, [pc, #36]	; (800e168 <pbuf_copy+0x188>)
 800e142:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e146:	490e      	ldr	r1, [pc, #56]	; (800e180 <pbuf_copy+0x1a0>)
 800e148:	4809      	ldr	r0, [pc, #36]	; (800e170 <pbuf_copy+0x190>)
 800e14a:	f008 fe6b 	bl	8016e24 <iprintf>
 800e14e:	f06f 0305 	mvn.w	r3, #5
 800e152:	e004      	b.n	800e15e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	f47f af61 	bne.w	800e01e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e15c:	2300      	movs	r3, #0
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3718      	adds	r7, #24
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	08018688 	.word	0x08018688
 800e16c:	08018930 	.word	0x08018930
 800e170:	080186e8 	.word	0x080186e8
 800e174:	08018960 	.word	0x08018960
 800e178:	08018978 	.word	0x08018978
 800e17c:	08018994 	.word	0x08018994
 800e180:	080189a4 	.word	0x080189a4

0800e184 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b088      	sub	sp, #32
 800e188:	af00      	add	r7, sp, #0
 800e18a:	60f8      	str	r0, [r7, #12]
 800e18c:	60b9      	str	r1, [r7, #8]
 800e18e:	4611      	mov	r1, r2
 800e190:	461a      	mov	r2, r3
 800e192:	460b      	mov	r3, r1
 800e194:	80fb      	strh	r3, [r7, #6]
 800e196:	4613      	mov	r3, r2
 800e198:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e19a:	2300      	movs	r3, #0
 800e19c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d108      	bne.n	800e1ba <pbuf_copy_partial+0x36>
 800e1a8:	4b2b      	ldr	r3, [pc, #172]	; (800e258 <pbuf_copy_partial+0xd4>)
 800e1aa:	f240 420a 	movw	r2, #1034	; 0x40a
 800e1ae:	492b      	ldr	r1, [pc, #172]	; (800e25c <pbuf_copy_partial+0xd8>)
 800e1b0:	482b      	ldr	r0, [pc, #172]	; (800e260 <pbuf_copy_partial+0xdc>)
 800e1b2:	f008 fe37 	bl	8016e24 <iprintf>
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	e04a      	b.n	800e250 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d108      	bne.n	800e1d2 <pbuf_copy_partial+0x4e>
 800e1c0:	4b25      	ldr	r3, [pc, #148]	; (800e258 <pbuf_copy_partial+0xd4>)
 800e1c2:	f240 420b 	movw	r2, #1035	; 0x40b
 800e1c6:	4927      	ldr	r1, [pc, #156]	; (800e264 <pbuf_copy_partial+0xe0>)
 800e1c8:	4825      	ldr	r0, [pc, #148]	; (800e260 <pbuf_copy_partial+0xdc>)
 800e1ca:	f008 fe2b 	bl	8016e24 <iprintf>
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	e03e      	b.n	800e250 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	61fb      	str	r3, [r7, #28]
 800e1d6:	e034      	b.n	800e242 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e1d8:	88bb      	ldrh	r3, [r7, #4]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d00a      	beq.n	800e1f4 <pbuf_copy_partial+0x70>
 800e1de:	69fb      	ldr	r3, [r7, #28]
 800e1e0:	895b      	ldrh	r3, [r3, #10]
 800e1e2:	88ba      	ldrh	r2, [r7, #4]
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d305      	bcc.n	800e1f4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e1e8:	69fb      	ldr	r3, [r7, #28]
 800e1ea:	895b      	ldrh	r3, [r3, #10]
 800e1ec:	88ba      	ldrh	r2, [r7, #4]
 800e1ee:	1ad3      	subs	r3, r2, r3
 800e1f0:	80bb      	strh	r3, [r7, #4]
 800e1f2:	e023      	b.n	800e23c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e1f4:	69fb      	ldr	r3, [r7, #28]
 800e1f6:	895a      	ldrh	r2, [r3, #10]
 800e1f8:	88bb      	ldrh	r3, [r7, #4]
 800e1fa:	1ad3      	subs	r3, r2, r3
 800e1fc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e1fe:	8b3a      	ldrh	r2, [r7, #24]
 800e200:	88fb      	ldrh	r3, [r7, #6]
 800e202:	429a      	cmp	r2, r3
 800e204:	d901      	bls.n	800e20a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e206:	88fb      	ldrh	r3, [r7, #6]
 800e208:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e20a:	8b7b      	ldrh	r3, [r7, #26]
 800e20c:	68ba      	ldr	r2, [r7, #8]
 800e20e:	18d0      	adds	r0, r2, r3
 800e210:	69fb      	ldr	r3, [r7, #28]
 800e212:	685a      	ldr	r2, [r3, #4]
 800e214:	88bb      	ldrh	r3, [r7, #4]
 800e216:	4413      	add	r3, r2
 800e218:	8b3a      	ldrh	r2, [r7, #24]
 800e21a:	4619      	mov	r1, r3
 800e21c:	f008 fdec 	bl	8016df8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e220:	8afa      	ldrh	r2, [r7, #22]
 800e222:	8b3b      	ldrh	r3, [r7, #24]
 800e224:	4413      	add	r3, r2
 800e226:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e228:	8b7a      	ldrh	r2, [r7, #26]
 800e22a:	8b3b      	ldrh	r3, [r7, #24]
 800e22c:	4413      	add	r3, r2
 800e22e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e230:	88fa      	ldrh	r2, [r7, #6]
 800e232:	8b3b      	ldrh	r3, [r7, #24]
 800e234:	1ad3      	subs	r3, r2, r3
 800e236:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e238:	2300      	movs	r3, #0
 800e23a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e23c:	69fb      	ldr	r3, [r7, #28]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	61fb      	str	r3, [r7, #28]
 800e242:	88fb      	ldrh	r3, [r7, #6]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d002      	beq.n	800e24e <pbuf_copy_partial+0xca>
 800e248:	69fb      	ldr	r3, [r7, #28]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d1c4      	bne.n	800e1d8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e24e:	8afb      	ldrh	r3, [r7, #22]
}
 800e250:	4618      	mov	r0, r3
 800e252:	3720      	adds	r7, #32
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}
 800e258:	08018688 	.word	0x08018688
 800e25c:	080189d0 	.word	0x080189d0
 800e260:	080186e8 	.word	0x080186e8
 800e264:	080189f0 	.word	0x080189f0

0800e268 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b084      	sub	sp, #16
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	4603      	mov	r3, r0
 800e270:	603a      	str	r2, [r7, #0]
 800e272:	71fb      	strb	r3, [r7, #7]
 800e274:	460b      	mov	r3, r1
 800e276:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	8919      	ldrh	r1, [r3, #8]
 800e27c:	88ba      	ldrh	r2, [r7, #4]
 800e27e:	79fb      	ldrb	r3, [r7, #7]
 800e280:	4618      	mov	r0, r3
 800e282:	f7ff faa5 	bl	800d7d0 <pbuf_alloc>
 800e286:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d101      	bne.n	800e292 <pbuf_clone+0x2a>
    return NULL;
 800e28e:	2300      	movs	r3, #0
 800e290:	e011      	b.n	800e2b6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e292:	6839      	ldr	r1, [r7, #0]
 800e294:	68f8      	ldr	r0, [r7, #12]
 800e296:	f7ff fea3 	bl	800dfe0 <pbuf_copy>
 800e29a:	4603      	mov	r3, r0
 800e29c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e29e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d006      	beq.n	800e2b4 <pbuf_clone+0x4c>
 800e2a6:	4b06      	ldr	r3, [pc, #24]	; (800e2c0 <pbuf_clone+0x58>)
 800e2a8:	f240 5224 	movw	r2, #1316	; 0x524
 800e2ac:	4905      	ldr	r1, [pc, #20]	; (800e2c4 <pbuf_clone+0x5c>)
 800e2ae:	4806      	ldr	r0, [pc, #24]	; (800e2c8 <pbuf_clone+0x60>)
 800e2b0:	f008 fdb8 	bl	8016e24 <iprintf>
  return q;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3710      	adds	r7, #16
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	08018688 	.word	0x08018688
 800e2c4:	08018afc 	.word	0x08018afc
 800e2c8:	080186e8 	.word	0x080186e8

0800e2cc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e2d0:	f008 fdc0 	bl	8016e54 <rand>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e2e2:	b29a      	uxth	r2, r3
 800e2e4:	4b01      	ldr	r3, [pc, #4]	; (800e2ec <tcp_init+0x20>)
 800e2e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e2e8:	bf00      	nop
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	20000120 	.word	0x20000120

0800e2f0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b082      	sub	sp, #8
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	7d1b      	ldrb	r3, [r3, #20]
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d105      	bne.n	800e30c <tcp_free+0x1c>
 800e300:	4b06      	ldr	r3, [pc, #24]	; (800e31c <tcp_free+0x2c>)
 800e302:	22d4      	movs	r2, #212	; 0xd4
 800e304:	4906      	ldr	r1, [pc, #24]	; (800e320 <tcp_free+0x30>)
 800e306:	4807      	ldr	r0, [pc, #28]	; (800e324 <tcp_free+0x34>)
 800e308:	f008 fd8c 	bl	8016e24 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e30c:	6879      	ldr	r1, [r7, #4]
 800e30e:	2001      	movs	r0, #1
 800e310:	f7fe ff16 	bl	800d140 <memp_free>
}
 800e314:	bf00      	nop
 800e316:	3708      	adds	r7, #8
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}
 800e31c:	08018b88 	.word	0x08018b88
 800e320:	08018bb8 	.word	0x08018bb8
 800e324:	08018bcc 	.word	0x08018bcc

0800e328 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b082      	sub	sp, #8
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	7d1b      	ldrb	r3, [r3, #20]
 800e334:	2b01      	cmp	r3, #1
 800e336:	d105      	bne.n	800e344 <tcp_free_listen+0x1c>
 800e338:	4b06      	ldr	r3, [pc, #24]	; (800e354 <tcp_free_listen+0x2c>)
 800e33a:	22df      	movs	r2, #223	; 0xdf
 800e33c:	4906      	ldr	r1, [pc, #24]	; (800e358 <tcp_free_listen+0x30>)
 800e33e:	4807      	ldr	r0, [pc, #28]	; (800e35c <tcp_free_listen+0x34>)
 800e340:	f008 fd70 	bl	8016e24 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e344:	6879      	ldr	r1, [r7, #4]
 800e346:	2002      	movs	r0, #2
 800e348:	f7fe fefa 	bl	800d140 <memp_free>
}
 800e34c:	bf00      	nop
 800e34e:	3708      	adds	r7, #8
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}
 800e354:	08018b88 	.word	0x08018b88
 800e358:	08018bf4 	.word	0x08018bf4
 800e35c:	08018bcc 	.word	0x08018bcc

0800e360 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e364:	f000 fea2 	bl	800f0ac <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e368:	4b07      	ldr	r3, [pc, #28]	; (800e388 <tcp_tmr+0x28>)
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	3301      	adds	r3, #1
 800e36e:	b2da      	uxtb	r2, r3
 800e370:	4b05      	ldr	r3, [pc, #20]	; (800e388 <tcp_tmr+0x28>)
 800e372:	701a      	strb	r2, [r3, #0]
 800e374:	4b04      	ldr	r3, [pc, #16]	; (800e388 <tcp_tmr+0x28>)
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	f003 0301 	and.w	r3, r3, #1
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d001      	beq.n	800e384 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e380:	f000 fb54 	bl	800ea2c <tcp_slowtmr>
  }
}
 800e384:	bf00      	nop
 800e386:	bd80      	pop	{r7, pc}
 800e388:	20004241 	.word	0x20004241

0800e38c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d105      	bne.n	800e3a8 <tcp_remove_listener+0x1c>
 800e39c:	4b0d      	ldr	r3, [pc, #52]	; (800e3d4 <tcp_remove_listener+0x48>)
 800e39e:	22ff      	movs	r2, #255	; 0xff
 800e3a0:	490d      	ldr	r1, [pc, #52]	; (800e3d8 <tcp_remove_listener+0x4c>)
 800e3a2:	480e      	ldr	r0, [pc, #56]	; (800e3dc <tcp_remove_listener+0x50>)
 800e3a4:	f008 fd3e 	bl	8016e24 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	60fb      	str	r3, [r7, #12]
 800e3ac:	e00a      	b.n	800e3c4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3b2:	683a      	ldr	r2, [r7, #0]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d102      	bne.n	800e3be <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	68db      	ldr	r3, [r3, #12]
 800e3c2:	60fb      	str	r3, [r7, #12]
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d1f1      	bne.n	800e3ae <tcp_remove_listener+0x22>
    }
  }
}
 800e3ca:	bf00      	nop
 800e3cc:	bf00      	nop
 800e3ce:	3710      	adds	r7, #16
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	08018b88 	.word	0x08018b88
 800e3d8:	08018c10 	.word	0x08018c10
 800e3dc:	08018bcc 	.word	0x08018bcc

0800e3e0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d106      	bne.n	800e3fc <tcp_listen_closed+0x1c>
 800e3ee:	4b14      	ldr	r3, [pc, #80]	; (800e440 <tcp_listen_closed+0x60>)
 800e3f0:	f240 1211 	movw	r2, #273	; 0x111
 800e3f4:	4913      	ldr	r1, [pc, #76]	; (800e444 <tcp_listen_closed+0x64>)
 800e3f6:	4814      	ldr	r0, [pc, #80]	; (800e448 <tcp_listen_closed+0x68>)
 800e3f8:	f008 fd14 	bl	8016e24 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	7d1b      	ldrb	r3, [r3, #20]
 800e400:	2b01      	cmp	r3, #1
 800e402:	d006      	beq.n	800e412 <tcp_listen_closed+0x32>
 800e404:	4b0e      	ldr	r3, [pc, #56]	; (800e440 <tcp_listen_closed+0x60>)
 800e406:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e40a:	4910      	ldr	r1, [pc, #64]	; (800e44c <tcp_listen_closed+0x6c>)
 800e40c:	480e      	ldr	r0, [pc, #56]	; (800e448 <tcp_listen_closed+0x68>)
 800e40e:	f008 fd09 	bl	8016e24 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e412:	2301      	movs	r3, #1
 800e414:	60fb      	str	r3, [r7, #12]
 800e416:	e00b      	b.n	800e430 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e418:	4a0d      	ldr	r2, [pc, #52]	; (800e450 <tcp_listen_closed+0x70>)
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	6879      	ldr	r1, [r7, #4]
 800e424:	4618      	mov	r0, r3
 800e426:	f7ff ffb1 	bl	800e38c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	3301      	adds	r3, #1
 800e42e:	60fb      	str	r3, [r7, #12]
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2b03      	cmp	r3, #3
 800e434:	d9f0      	bls.n	800e418 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e436:	bf00      	nop
 800e438:	bf00      	nop
 800e43a:	3710      	adds	r7, #16
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	08018b88 	.word	0x08018b88
 800e444:	08018c38 	.word	0x08018c38
 800e448:	08018bcc 	.word	0x08018bcc
 800e44c:	08018c44 	.word	0x08018c44
 800e450:	0801abe4 	.word	0x0801abe4

0800e454 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e454:	b5b0      	push	{r4, r5, r7, lr}
 800e456:	b088      	sub	sp, #32
 800e458:	af04      	add	r7, sp, #16
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	460b      	mov	r3, r1
 800e45e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d106      	bne.n	800e474 <tcp_close_shutdown+0x20>
 800e466:	4b63      	ldr	r3, [pc, #396]	; (800e5f4 <tcp_close_shutdown+0x1a0>)
 800e468:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e46c:	4962      	ldr	r1, [pc, #392]	; (800e5f8 <tcp_close_shutdown+0x1a4>)
 800e46e:	4863      	ldr	r0, [pc, #396]	; (800e5fc <tcp_close_shutdown+0x1a8>)
 800e470:	f008 fcd8 	bl	8016e24 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e474:	78fb      	ldrb	r3, [r7, #3]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d066      	beq.n	800e548 <tcp_close_shutdown+0xf4>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	7d1b      	ldrb	r3, [r3, #20]
 800e47e:	2b04      	cmp	r3, #4
 800e480:	d003      	beq.n	800e48a <tcp_close_shutdown+0x36>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	7d1b      	ldrb	r3, [r3, #20]
 800e486:	2b07      	cmp	r3, #7
 800e488:	d15e      	bne.n	800e548 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d104      	bne.n	800e49c <tcp_close_shutdown+0x48>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e496:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e49a:	d055      	beq.n	800e548 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	8b5b      	ldrh	r3, [r3, #26]
 800e4a0:	f003 0310 	and.w	r3, r3, #16
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d106      	bne.n	800e4b6 <tcp_close_shutdown+0x62>
 800e4a8:	4b52      	ldr	r3, [pc, #328]	; (800e5f4 <tcp_close_shutdown+0x1a0>)
 800e4aa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e4ae:	4954      	ldr	r1, [pc, #336]	; (800e600 <tcp_close_shutdown+0x1ac>)
 800e4b0:	4852      	ldr	r0, [pc, #328]	; (800e5fc <tcp_close_shutdown+0x1a8>)
 800e4b2:	f008 fcb7 	bl	8016e24 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e4be:	687d      	ldr	r5, [r7, #4]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	3304      	adds	r3, #4
 800e4c4:	687a      	ldr	r2, [r7, #4]
 800e4c6:	8ad2      	ldrh	r2, [r2, #22]
 800e4c8:	6879      	ldr	r1, [r7, #4]
 800e4ca:	8b09      	ldrh	r1, [r1, #24]
 800e4cc:	9102      	str	r1, [sp, #8]
 800e4ce:	9201      	str	r2, [sp, #4]
 800e4d0:	9300      	str	r3, [sp, #0]
 800e4d2:	462b      	mov	r3, r5
 800e4d4:	4622      	mov	r2, r4
 800e4d6:	4601      	mov	r1, r0
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f004 fe8d 	bl	80131f8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f001 f8c6 	bl	800f670 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e4e4:	4b47      	ldr	r3, [pc, #284]	; (800e604 <tcp_close_shutdown+0x1b0>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d105      	bne.n	800e4fa <tcp_close_shutdown+0xa6>
 800e4ee:	4b45      	ldr	r3, [pc, #276]	; (800e604 <tcp_close_shutdown+0x1b0>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	68db      	ldr	r3, [r3, #12]
 800e4f4:	4a43      	ldr	r2, [pc, #268]	; (800e604 <tcp_close_shutdown+0x1b0>)
 800e4f6:	6013      	str	r3, [r2, #0]
 800e4f8:	e013      	b.n	800e522 <tcp_close_shutdown+0xce>
 800e4fa:	4b42      	ldr	r3, [pc, #264]	; (800e604 <tcp_close_shutdown+0x1b0>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	60fb      	str	r3, [r7, #12]
 800e500:	e00c      	b.n	800e51c <tcp_close_shutdown+0xc8>
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	68db      	ldr	r3, [r3, #12]
 800e506:	687a      	ldr	r2, [r7, #4]
 800e508:	429a      	cmp	r2, r3
 800e50a:	d104      	bne.n	800e516 <tcp_close_shutdown+0xc2>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	68da      	ldr	r2, [r3, #12]
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	60da      	str	r2, [r3, #12]
 800e514:	e005      	b.n	800e522 <tcp_close_shutdown+0xce>
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	68db      	ldr	r3, [r3, #12]
 800e51a:	60fb      	str	r3, [r7, #12]
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d1ef      	bne.n	800e502 <tcp_close_shutdown+0xae>
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2200      	movs	r2, #0
 800e526:	60da      	str	r2, [r3, #12]
 800e528:	4b37      	ldr	r3, [pc, #220]	; (800e608 <tcp_close_shutdown+0x1b4>)
 800e52a:	2201      	movs	r2, #1
 800e52c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e52e:	4b37      	ldr	r3, [pc, #220]	; (800e60c <tcp_close_shutdown+0x1b8>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	687a      	ldr	r2, [r7, #4]
 800e534:	429a      	cmp	r2, r3
 800e536:	d102      	bne.n	800e53e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e538:	f003 fd5a 	bl	8011ff0 <tcp_trigger_input_pcb_close>
 800e53c:	e002      	b.n	800e544 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f7ff fed6 	bl	800e2f0 <tcp_free>
      }
      return ERR_OK;
 800e544:	2300      	movs	r3, #0
 800e546:	e050      	b.n	800e5ea <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	7d1b      	ldrb	r3, [r3, #20]
 800e54c:	2b02      	cmp	r3, #2
 800e54e:	d03b      	beq.n	800e5c8 <tcp_close_shutdown+0x174>
 800e550:	2b02      	cmp	r3, #2
 800e552:	dc44      	bgt.n	800e5de <tcp_close_shutdown+0x18a>
 800e554:	2b00      	cmp	r3, #0
 800e556:	d002      	beq.n	800e55e <tcp_close_shutdown+0x10a>
 800e558:	2b01      	cmp	r3, #1
 800e55a:	d02a      	beq.n	800e5b2 <tcp_close_shutdown+0x15e>
 800e55c:	e03f      	b.n	800e5de <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	8adb      	ldrh	r3, [r3, #22]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d021      	beq.n	800e5aa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e566:	4b2a      	ldr	r3, [pc, #168]	; (800e610 <tcp_close_shutdown+0x1bc>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d105      	bne.n	800e57c <tcp_close_shutdown+0x128>
 800e570:	4b27      	ldr	r3, [pc, #156]	; (800e610 <tcp_close_shutdown+0x1bc>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	68db      	ldr	r3, [r3, #12]
 800e576:	4a26      	ldr	r2, [pc, #152]	; (800e610 <tcp_close_shutdown+0x1bc>)
 800e578:	6013      	str	r3, [r2, #0]
 800e57a:	e013      	b.n	800e5a4 <tcp_close_shutdown+0x150>
 800e57c:	4b24      	ldr	r3, [pc, #144]	; (800e610 <tcp_close_shutdown+0x1bc>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	60bb      	str	r3, [r7, #8]
 800e582:	e00c      	b.n	800e59e <tcp_close_shutdown+0x14a>
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	68db      	ldr	r3, [r3, #12]
 800e588:	687a      	ldr	r2, [r7, #4]
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d104      	bne.n	800e598 <tcp_close_shutdown+0x144>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	68da      	ldr	r2, [r3, #12]
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	60da      	str	r2, [r3, #12]
 800e596:	e005      	b.n	800e5a4 <tcp_close_shutdown+0x150>
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	68db      	ldr	r3, [r3, #12]
 800e59c:	60bb      	str	r3, [r7, #8]
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d1ef      	bne.n	800e584 <tcp_close_shutdown+0x130>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f7ff fea0 	bl	800e2f0 <tcp_free>
      break;
 800e5b0:	e01a      	b.n	800e5e8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f7ff ff14 	bl	800e3e0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e5b8:	6879      	ldr	r1, [r7, #4]
 800e5ba:	4816      	ldr	r0, [pc, #88]	; (800e614 <tcp_close_shutdown+0x1c0>)
 800e5bc:	f001 f8a8 	bl	800f710 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f7ff feb1 	bl	800e328 <tcp_free_listen>
      break;
 800e5c6:	e00f      	b.n	800e5e8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e5c8:	6879      	ldr	r1, [r7, #4]
 800e5ca:	480e      	ldr	r0, [pc, #56]	; (800e604 <tcp_close_shutdown+0x1b0>)
 800e5cc:	f001 f8a0 	bl	800f710 <tcp_pcb_remove>
 800e5d0:	4b0d      	ldr	r3, [pc, #52]	; (800e608 <tcp_close_shutdown+0x1b4>)
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f7ff fe8a 	bl	800e2f0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e5dc:	e004      	b.n	800e5e8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f000 f81a 	bl	800e618 <tcp_close_shutdown_fin>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	e000      	b.n	800e5ea <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e5e8:	2300      	movs	r3, #0
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bdb0      	pop	{r4, r5, r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	08018b88 	.word	0x08018b88
 800e5f8:	08018c5c 	.word	0x08018c5c
 800e5fc:	08018bcc 	.word	0x08018bcc
 800e600:	08018c7c 	.word	0x08018c7c
 800e604:	2000b0fc 	.word	0x2000b0fc
 800e608:	2000b0f8 	.word	0x2000b0f8
 800e60c:	2000b110 	.word	0x2000b110
 800e610:	2000b108 	.word	0x2000b108
 800e614:	2000b104 	.word	0x2000b104

0800e618 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b084      	sub	sp, #16
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d106      	bne.n	800e634 <tcp_close_shutdown_fin+0x1c>
 800e626:	4b2e      	ldr	r3, [pc, #184]	; (800e6e0 <tcp_close_shutdown_fin+0xc8>)
 800e628:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e62c:	492d      	ldr	r1, [pc, #180]	; (800e6e4 <tcp_close_shutdown_fin+0xcc>)
 800e62e:	482e      	ldr	r0, [pc, #184]	; (800e6e8 <tcp_close_shutdown_fin+0xd0>)
 800e630:	f008 fbf8 	bl	8016e24 <iprintf>

  switch (pcb->state) {
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	7d1b      	ldrb	r3, [r3, #20]
 800e638:	2b07      	cmp	r3, #7
 800e63a:	d020      	beq.n	800e67e <tcp_close_shutdown_fin+0x66>
 800e63c:	2b07      	cmp	r3, #7
 800e63e:	dc2b      	bgt.n	800e698 <tcp_close_shutdown_fin+0x80>
 800e640:	2b03      	cmp	r3, #3
 800e642:	d002      	beq.n	800e64a <tcp_close_shutdown_fin+0x32>
 800e644:	2b04      	cmp	r3, #4
 800e646:	d00d      	beq.n	800e664 <tcp_close_shutdown_fin+0x4c>
 800e648:	e026      	b.n	800e698 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f003 fee2 	bl	8012414 <tcp_send_fin>
 800e650:	4603      	mov	r3, r0
 800e652:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d11f      	bne.n	800e69c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2205      	movs	r2, #5
 800e660:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e662:	e01b      	b.n	800e69c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f003 fed5 	bl	8012414 <tcp_send_fin>
 800e66a:	4603      	mov	r3, r0
 800e66c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e66e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d114      	bne.n	800e6a0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2205      	movs	r2, #5
 800e67a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e67c:	e010      	b.n	800e6a0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f003 fec8 	bl	8012414 <tcp_send_fin>
 800e684:	4603      	mov	r3, r0
 800e686:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d109      	bne.n	800e6a4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2209      	movs	r2, #9
 800e694:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e696:	e005      	b.n	800e6a4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e698:	2300      	movs	r3, #0
 800e69a:	e01c      	b.n	800e6d6 <tcp_close_shutdown_fin+0xbe>
      break;
 800e69c:	bf00      	nop
 800e69e:	e002      	b.n	800e6a6 <tcp_close_shutdown_fin+0x8e>
      break;
 800e6a0:	bf00      	nop
 800e6a2:	e000      	b.n	800e6a6 <tcp_close_shutdown_fin+0x8e>
      break;
 800e6a4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e6a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d103      	bne.n	800e6b6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f003 ffee 	bl	8012690 <tcp_output>
 800e6b4:	e00d      	b.n	800e6d2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e6b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6be:	d108      	bne.n	800e6d2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	8b5b      	ldrh	r3, [r3, #26]
 800e6c4:	f043 0308 	orr.w	r3, r3, #8
 800e6c8:	b29a      	uxth	r2, r3
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	e001      	b.n	800e6d6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e6d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3710      	adds	r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	08018b88 	.word	0x08018b88
 800e6e4:	08018c38 	.word	0x08018c38
 800e6e8:	08018bcc 	.word	0x08018bcc

0800e6ec <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d109      	bne.n	800e70e <tcp_close+0x22>
 800e6fa:	4b0f      	ldr	r3, [pc, #60]	; (800e738 <tcp_close+0x4c>)
 800e6fc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e700:	490e      	ldr	r1, [pc, #56]	; (800e73c <tcp_close+0x50>)
 800e702:	480f      	ldr	r0, [pc, #60]	; (800e740 <tcp_close+0x54>)
 800e704:	f008 fb8e 	bl	8016e24 <iprintf>
 800e708:	f06f 030f 	mvn.w	r3, #15
 800e70c:	e00f      	b.n	800e72e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	7d1b      	ldrb	r3, [r3, #20]
 800e712:	2b01      	cmp	r3, #1
 800e714:	d006      	beq.n	800e724 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	8b5b      	ldrh	r3, [r3, #26]
 800e71a:	f043 0310 	orr.w	r3, r3, #16
 800e71e:	b29a      	uxth	r2, r3
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e724:	2101      	movs	r1, #1
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f7ff fe94 	bl	800e454 <tcp_close_shutdown>
 800e72c:	4603      	mov	r3, r0
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3708      	adds	r7, #8
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
 800e736:	bf00      	nop
 800e738:	08018b88 	.word	0x08018b88
 800e73c:	08018c98 	.word	0x08018c98
 800e740:	08018bcc 	.word	0x08018bcc

0800e744 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b08e      	sub	sp, #56	; 0x38
 800e748:	af04      	add	r7, sp, #16
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d107      	bne.n	800e764 <tcp_abandon+0x20>
 800e754:	4b52      	ldr	r3, [pc, #328]	; (800e8a0 <tcp_abandon+0x15c>)
 800e756:	f240 223d 	movw	r2, #573	; 0x23d
 800e75a:	4952      	ldr	r1, [pc, #328]	; (800e8a4 <tcp_abandon+0x160>)
 800e75c:	4852      	ldr	r0, [pc, #328]	; (800e8a8 <tcp_abandon+0x164>)
 800e75e:	f008 fb61 	bl	8016e24 <iprintf>
 800e762:	e099      	b.n	800e898 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	7d1b      	ldrb	r3, [r3, #20]
 800e768:	2b01      	cmp	r3, #1
 800e76a:	d106      	bne.n	800e77a <tcp_abandon+0x36>
 800e76c:	4b4c      	ldr	r3, [pc, #304]	; (800e8a0 <tcp_abandon+0x15c>)
 800e76e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e772:	494e      	ldr	r1, [pc, #312]	; (800e8ac <tcp_abandon+0x168>)
 800e774:	484c      	ldr	r0, [pc, #304]	; (800e8a8 <tcp_abandon+0x164>)
 800e776:	f008 fb55 	bl	8016e24 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	7d1b      	ldrb	r3, [r3, #20]
 800e77e:	2b0a      	cmp	r3, #10
 800e780:	d107      	bne.n	800e792 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e782:	6879      	ldr	r1, [r7, #4]
 800e784:	484a      	ldr	r0, [pc, #296]	; (800e8b0 <tcp_abandon+0x16c>)
 800e786:	f000 ffc3 	bl	800f710 <tcp_pcb_remove>
    tcp_free(pcb);
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f7ff fdb0 	bl	800e2f0 <tcp_free>
 800e790:	e082      	b.n	800e898 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e792:	2300      	movs	r3, #0
 800e794:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e796:	2300      	movs	r3, #0
 800e798:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e79e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7a4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7ac:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	691b      	ldr	r3, [r3, #16]
 800e7b2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	7d1b      	ldrb	r3, [r3, #20]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d126      	bne.n	800e80a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	8adb      	ldrh	r3, [r3, #22]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d02e      	beq.n	800e822 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e7c4:	4b3b      	ldr	r3, [pc, #236]	; (800e8b4 <tcp_abandon+0x170>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d105      	bne.n	800e7da <tcp_abandon+0x96>
 800e7ce:	4b39      	ldr	r3, [pc, #228]	; (800e8b4 <tcp_abandon+0x170>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	68db      	ldr	r3, [r3, #12]
 800e7d4:	4a37      	ldr	r2, [pc, #220]	; (800e8b4 <tcp_abandon+0x170>)
 800e7d6:	6013      	str	r3, [r2, #0]
 800e7d8:	e013      	b.n	800e802 <tcp_abandon+0xbe>
 800e7da:	4b36      	ldr	r3, [pc, #216]	; (800e8b4 <tcp_abandon+0x170>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	61fb      	str	r3, [r7, #28]
 800e7e0:	e00c      	b.n	800e7fc <tcp_abandon+0xb8>
 800e7e2:	69fb      	ldr	r3, [r7, #28]
 800e7e4:	68db      	ldr	r3, [r3, #12]
 800e7e6:	687a      	ldr	r2, [r7, #4]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d104      	bne.n	800e7f6 <tcp_abandon+0xb2>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	68da      	ldr	r2, [r3, #12]
 800e7f0:	69fb      	ldr	r3, [r7, #28]
 800e7f2:	60da      	str	r2, [r3, #12]
 800e7f4:	e005      	b.n	800e802 <tcp_abandon+0xbe>
 800e7f6:	69fb      	ldr	r3, [r7, #28]
 800e7f8:	68db      	ldr	r3, [r3, #12]
 800e7fa:	61fb      	str	r3, [r7, #28]
 800e7fc:	69fb      	ldr	r3, [r7, #28]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d1ef      	bne.n	800e7e2 <tcp_abandon+0x9e>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2200      	movs	r2, #0
 800e806:	60da      	str	r2, [r3, #12]
 800e808:	e00b      	b.n	800e822 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	8adb      	ldrh	r3, [r3, #22]
 800e812:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e814:	6879      	ldr	r1, [r7, #4]
 800e816:	4828      	ldr	r0, [pc, #160]	; (800e8b8 <tcp_abandon+0x174>)
 800e818:	f000 ff7a 	bl	800f710 <tcp_pcb_remove>
 800e81c:	4b27      	ldr	r3, [pc, #156]	; (800e8bc <tcp_abandon+0x178>)
 800e81e:	2201      	movs	r2, #1
 800e820:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e826:	2b00      	cmp	r3, #0
 800e828:	d004      	beq.n	800e834 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e82e:	4618      	mov	r0, r3
 800e830:	f000 fd1c 	bl	800f26c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d004      	beq.n	800e846 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e840:	4618      	mov	r0, r3
 800e842:	f000 fd13 	bl	800f26c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d004      	beq.n	800e858 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e852:	4618      	mov	r0, r3
 800e854:	f000 fd0a 	bl	800f26c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d00e      	beq.n	800e87c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e85e:	6879      	ldr	r1, [r7, #4]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	3304      	adds	r3, #4
 800e864:	687a      	ldr	r2, [r7, #4]
 800e866:	8b12      	ldrh	r2, [r2, #24]
 800e868:	9202      	str	r2, [sp, #8]
 800e86a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e86c:	9201      	str	r2, [sp, #4]
 800e86e:	9300      	str	r3, [sp, #0]
 800e870:	460b      	mov	r3, r1
 800e872:	697a      	ldr	r2, [r7, #20]
 800e874:	69b9      	ldr	r1, [r7, #24]
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f004 fcbe 	bl	80131f8 <tcp_rst>
    }
    last_state = pcb->state;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	7d1b      	ldrb	r3, [r3, #20]
 800e880:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f7ff fd34 	bl	800e2f0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d004      	beq.n	800e898 <tcp_abandon+0x154>
 800e88e:	693b      	ldr	r3, [r7, #16]
 800e890:	f06f 010c 	mvn.w	r1, #12
 800e894:	68f8      	ldr	r0, [r7, #12]
 800e896:	4798      	blx	r3
  }
}
 800e898:	3728      	adds	r7, #40	; 0x28
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	08018b88 	.word	0x08018b88
 800e8a4:	08018ccc 	.word	0x08018ccc
 800e8a8:	08018bcc 	.word	0x08018bcc
 800e8ac:	08018ce8 	.word	0x08018ce8
 800e8b0:	2000b10c 	.word	0x2000b10c
 800e8b4:	2000b108 	.word	0x2000b108
 800e8b8:	2000b0fc 	.word	0x2000b0fc
 800e8bc:	2000b0f8 	.word	0x2000b0f8

0800e8c0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e8c8:	2101      	movs	r1, #1
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f7ff ff3a 	bl	800e744 <tcp_abandon>
}
 800e8d0:	bf00      	nop
 800e8d2:	3708      	adds	r7, #8
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}

0800e8d8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b084      	sub	sp, #16
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d106      	bne.n	800e8f4 <tcp_update_rcv_ann_wnd+0x1c>
 800e8e6:	4b25      	ldr	r3, [pc, #148]	; (800e97c <tcp_update_rcv_ann_wnd+0xa4>)
 800e8e8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e8ec:	4924      	ldr	r1, [pc, #144]	; (800e980 <tcp_update_rcv_ann_wnd+0xa8>)
 800e8ee:	4825      	ldr	r0, [pc, #148]	; (800e984 <tcp_update_rcv_ann_wnd+0xac>)
 800e8f0:	f008 fa98 	bl	8016e24 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e8fc:	4413      	add	r3, r2
 800e8fe:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e904:	687a      	ldr	r2, [r7, #4]
 800e906:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e908:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e90c:	bf28      	it	cs
 800e90e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e912:	b292      	uxth	r2, r2
 800e914:	4413      	add	r3, r2
 800e916:	68fa      	ldr	r2, [r7, #12]
 800e918:	1ad3      	subs	r3, r2, r3
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	db08      	blt.n	800e930 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e92a:	68fa      	ldr	r2, [r7, #12]
 800e92c:	1ad3      	subs	r3, r2, r3
 800e92e:	e020      	b.n	800e972 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e938:	1ad3      	subs	r3, r2, r3
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	dd03      	ble.n	800e946 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2200      	movs	r2, #0
 800e942:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e944:	e014      	b.n	800e970 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e94e:	1ad3      	subs	r3, r2, r3
 800e950:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e958:	d306      	bcc.n	800e968 <tcp_update_rcv_ann_wnd+0x90>
 800e95a:	4b08      	ldr	r3, [pc, #32]	; (800e97c <tcp_update_rcv_ann_wnd+0xa4>)
 800e95c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e960:	4909      	ldr	r1, [pc, #36]	; (800e988 <tcp_update_rcv_ann_wnd+0xb0>)
 800e962:	4808      	ldr	r0, [pc, #32]	; (800e984 <tcp_update_rcv_ann_wnd+0xac>)
 800e964:	f008 fa5e 	bl	8016e24 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	b29a      	uxth	r2, r3
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e970:	2300      	movs	r3, #0
  }
}
 800e972:	4618      	mov	r0, r3
 800e974:	3710      	adds	r7, #16
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
 800e97a:	bf00      	nop
 800e97c:	08018b88 	.word	0x08018b88
 800e980:	08018de4 	.word	0x08018de4
 800e984:	08018bcc 	.word	0x08018bcc
 800e988:	08018e08 	.word	0x08018e08

0800e98c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	460b      	mov	r3, r1
 800e996:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d107      	bne.n	800e9ae <tcp_recved+0x22>
 800e99e:	4b1f      	ldr	r3, [pc, #124]	; (800ea1c <tcp_recved+0x90>)
 800e9a0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e9a4:	491e      	ldr	r1, [pc, #120]	; (800ea20 <tcp_recved+0x94>)
 800e9a6:	481f      	ldr	r0, [pc, #124]	; (800ea24 <tcp_recved+0x98>)
 800e9a8:	f008 fa3c 	bl	8016e24 <iprintf>
 800e9ac:	e032      	b.n	800ea14 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	7d1b      	ldrb	r3, [r3, #20]
 800e9b2:	2b01      	cmp	r3, #1
 800e9b4:	d106      	bne.n	800e9c4 <tcp_recved+0x38>
 800e9b6:	4b19      	ldr	r3, [pc, #100]	; (800ea1c <tcp_recved+0x90>)
 800e9b8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e9bc:	491a      	ldr	r1, [pc, #104]	; (800ea28 <tcp_recved+0x9c>)
 800e9be:	4819      	ldr	r0, [pc, #100]	; (800ea24 <tcp_recved+0x98>)
 800e9c0:	f008 fa30 	bl	8016e24 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e9c8:	887b      	ldrh	r3, [r7, #2]
 800e9ca:	4413      	add	r3, r2
 800e9cc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e9ce:	89fb      	ldrh	r3, [r7, #14]
 800e9d0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e9d4:	d804      	bhi.n	800e9e0 <tcp_recved+0x54>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9da:	89fa      	ldrh	r2, [r7, #14]
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d204      	bcs.n	800e9ea <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e9e6:	851a      	strh	r2, [r3, #40]	; 0x28
 800e9e8:	e002      	b.n	800e9f0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	89fa      	ldrh	r2, [r7, #14]
 800e9ee:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f7ff ff71 	bl	800e8d8 <tcp_update_rcv_ann_wnd>
 800e9f6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e9fe:	d309      	bcc.n	800ea14 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	8b5b      	ldrh	r3, [r3, #26]
 800ea04:	f043 0302 	orr.w	r3, r3, #2
 800ea08:	b29a      	uxth	r2, r3
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f003 fe3e 	bl	8012690 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ea14:	3710      	adds	r7, #16
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
 800ea1a:	bf00      	nop
 800ea1c:	08018b88 	.word	0x08018b88
 800ea20:	08018e24 	.word	0x08018e24
 800ea24:	08018bcc 	.word	0x08018bcc
 800ea28:	08018e3c 	.word	0x08018e3c

0800ea2c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ea2c:	b5b0      	push	{r4, r5, r7, lr}
 800ea2e:	b090      	sub	sp, #64	; 0x40
 800ea30:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ea32:	2300      	movs	r3, #0
 800ea34:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ea38:	4b94      	ldr	r3, [pc, #592]	; (800ec8c <tcp_slowtmr+0x260>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	3301      	adds	r3, #1
 800ea3e:	4a93      	ldr	r2, [pc, #588]	; (800ec8c <tcp_slowtmr+0x260>)
 800ea40:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ea42:	4b93      	ldr	r3, [pc, #588]	; (800ec90 <tcp_slowtmr+0x264>)
 800ea44:	781b      	ldrb	r3, [r3, #0]
 800ea46:	3301      	adds	r3, #1
 800ea48:	b2da      	uxtb	r2, r3
 800ea4a:	4b91      	ldr	r3, [pc, #580]	; (800ec90 <tcp_slowtmr+0x264>)
 800ea4c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ea52:	4b90      	ldr	r3, [pc, #576]	; (800ec94 <tcp_slowtmr+0x268>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ea58:	e29f      	b.n	800ef9a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ea5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5c:	7d1b      	ldrb	r3, [r3, #20]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d106      	bne.n	800ea70 <tcp_slowtmr+0x44>
 800ea62:	4b8d      	ldr	r3, [pc, #564]	; (800ec98 <tcp_slowtmr+0x26c>)
 800ea64:	f240 42be 	movw	r2, #1214	; 0x4be
 800ea68:	498c      	ldr	r1, [pc, #560]	; (800ec9c <tcp_slowtmr+0x270>)
 800ea6a:	488d      	ldr	r0, [pc, #564]	; (800eca0 <tcp_slowtmr+0x274>)
 800ea6c:	f008 f9da 	bl	8016e24 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ea70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea72:	7d1b      	ldrb	r3, [r3, #20]
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	d106      	bne.n	800ea86 <tcp_slowtmr+0x5a>
 800ea78:	4b87      	ldr	r3, [pc, #540]	; (800ec98 <tcp_slowtmr+0x26c>)
 800ea7a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ea7e:	4989      	ldr	r1, [pc, #548]	; (800eca4 <tcp_slowtmr+0x278>)
 800ea80:	4887      	ldr	r0, [pc, #540]	; (800eca0 <tcp_slowtmr+0x274>)
 800ea82:	f008 f9cf 	bl	8016e24 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ea86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea88:	7d1b      	ldrb	r3, [r3, #20]
 800ea8a:	2b0a      	cmp	r3, #10
 800ea8c:	d106      	bne.n	800ea9c <tcp_slowtmr+0x70>
 800ea8e:	4b82      	ldr	r3, [pc, #520]	; (800ec98 <tcp_slowtmr+0x26c>)
 800ea90:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ea94:	4984      	ldr	r1, [pc, #528]	; (800eca8 <tcp_slowtmr+0x27c>)
 800ea96:	4882      	ldr	r0, [pc, #520]	; (800eca0 <tcp_slowtmr+0x274>)
 800ea98:	f008 f9c4 	bl	8016e24 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ea9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9e:	7f9a      	ldrb	r2, [r3, #30]
 800eaa0:	4b7b      	ldr	r3, [pc, #492]	; (800ec90 <tcp_slowtmr+0x264>)
 800eaa2:	781b      	ldrb	r3, [r3, #0]
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	d105      	bne.n	800eab4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800eaa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaaa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800eaac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaae:	68db      	ldr	r3, [r3, #12]
 800eab0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800eab2:	e272      	b.n	800ef9a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800eab4:	4b76      	ldr	r3, [pc, #472]	; (800ec90 <tcp_slowtmr+0x264>)
 800eab6:	781a      	ldrb	r2, [r3, #0]
 800eab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaba:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800eabc:	2300      	movs	r3, #0
 800eabe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800eac2:	2300      	movs	r3, #0
 800eac4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800eac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaca:	7d1b      	ldrb	r3, [r3, #20]
 800eacc:	2b02      	cmp	r3, #2
 800eace:	d10a      	bne.n	800eae6 <tcp_slowtmr+0xba>
 800ead0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ead6:	2b05      	cmp	r3, #5
 800ead8:	d905      	bls.n	800eae6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800eada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eade:	3301      	adds	r3, #1
 800eae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eae4:	e11e      	b.n	800ed24 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800eae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eaec:	2b0b      	cmp	r3, #11
 800eaee:	d905      	bls.n	800eafc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800eaf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaf4:	3301      	adds	r3, #1
 800eaf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eafa:	e113      	b.n	800ed24 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800eafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eafe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d075      	beq.n	800ebf2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800eb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d006      	beq.n	800eb1c <tcp_slowtmr+0xf0>
 800eb0e:	4b62      	ldr	r3, [pc, #392]	; (800ec98 <tcp_slowtmr+0x26c>)
 800eb10:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800eb14:	4965      	ldr	r1, [pc, #404]	; (800ecac <tcp_slowtmr+0x280>)
 800eb16:	4862      	ldr	r0, [pc, #392]	; (800eca0 <tcp_slowtmr+0x274>)
 800eb18:	f008 f984 	bl	8016e24 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800eb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d106      	bne.n	800eb32 <tcp_slowtmr+0x106>
 800eb24:	4b5c      	ldr	r3, [pc, #368]	; (800ec98 <tcp_slowtmr+0x26c>)
 800eb26:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800eb2a:	4961      	ldr	r1, [pc, #388]	; (800ecb0 <tcp_slowtmr+0x284>)
 800eb2c:	485c      	ldr	r0, [pc, #368]	; (800eca0 <tcp_slowtmr+0x274>)
 800eb2e:	f008 f979 	bl	8016e24 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800eb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb34:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800eb38:	2b0b      	cmp	r3, #11
 800eb3a:	d905      	bls.n	800eb48 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800eb3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb40:	3301      	adds	r3, #1
 800eb42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb46:	e0ed      	b.n	800ed24 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800eb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb4a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800eb4e:	3b01      	subs	r3, #1
 800eb50:	4a58      	ldr	r2, [pc, #352]	; (800ecb4 <tcp_slowtmr+0x288>)
 800eb52:	5cd3      	ldrb	r3, [r2, r3]
 800eb54:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800eb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb58:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800eb5c:	7c7a      	ldrb	r2, [r7, #17]
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	d907      	bls.n	800eb72 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800eb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800eb68:	3301      	adds	r3, #1
 800eb6a:	b2da      	uxtb	r2, r3
 800eb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb6e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800eb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800eb78:	7c7a      	ldrb	r2, [r7, #17]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	f200 80d2 	bhi.w	800ed24 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800eb80:	2301      	movs	r3, #1
 800eb82:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800eb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d108      	bne.n	800eba0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800eb8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb90:	f004 fc26 	bl	80133e0 <tcp_zero_window_probe>
 800eb94:	4603      	mov	r3, r0
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d014      	beq.n	800ebc4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	623b      	str	r3, [r7, #32]
 800eb9e:	e011      	b.n	800ebc4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800eba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eba6:	4619      	mov	r1, r3
 800eba8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebaa:	f003 faeb 	bl	8012184 <tcp_split_unsent_seg>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d107      	bne.n	800ebc4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ebb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebb6:	f003 fd6b 	bl	8012690 <tcp_output>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d101      	bne.n	800ebc4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ebc4:	6a3b      	ldr	r3, [r7, #32]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	f000 80ac 	beq.w	800ed24 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ebcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebce:	2200      	movs	r2, #0
 800ebd0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ebd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ebda:	2b06      	cmp	r3, #6
 800ebdc:	f200 80a2 	bhi.w	800ed24 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ebe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	b2da      	uxtb	r2, r3
 800ebea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ebf0:	e098      	b.n	800ed24 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ebf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	db0f      	blt.n	800ec1c <tcp_slowtmr+0x1f0>
 800ebfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebfe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ec02:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d008      	beq.n	800ec1c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ec0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	3301      	adds	r3, #1
 800ec14:	b29b      	uxth	r3, r3
 800ec16:	b21a      	sxth	r2, r3
 800ec18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ec1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ec22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec24:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	db7b      	blt.n	800ed24 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ec2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec2e:	f004 f821 	bl	8012c74 <tcp_rexmit_rto_prepare>
 800ec32:	4603      	mov	r3, r0
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d007      	beq.n	800ec48 <tcp_slowtmr+0x21c>
 800ec38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d171      	bne.n	800ed24 <tcp_slowtmr+0x2f8>
 800ec40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d06d      	beq.n	800ed24 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ec48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec4a:	7d1b      	ldrb	r3, [r3, #20]
 800ec4c:	2b02      	cmp	r3, #2
 800ec4e:	d03a      	beq.n	800ecc6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ec50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec56:	2b0c      	cmp	r3, #12
 800ec58:	bf28      	it	cs
 800ec5a:	230c      	movcs	r3, #12
 800ec5c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ec5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec60:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ec64:	10db      	asrs	r3, r3, #3
 800ec66:	b21b      	sxth	r3, r3
 800ec68:	461a      	mov	r2, r3
 800ec6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ec70:	4413      	add	r3, r2
 800ec72:	7efa      	ldrb	r2, [r7, #27]
 800ec74:	4910      	ldr	r1, [pc, #64]	; (800ecb8 <tcp_slowtmr+0x28c>)
 800ec76:	5c8a      	ldrb	r2, [r1, r2]
 800ec78:	4093      	lsls	r3, r2
 800ec7a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ec82:	4293      	cmp	r3, r2
 800ec84:	dc1a      	bgt.n	800ecbc <tcp_slowtmr+0x290>
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	b21a      	sxth	r2, r3
 800ec8a:	e019      	b.n	800ecc0 <tcp_slowtmr+0x294>
 800ec8c:	2000b100 	.word	0x2000b100
 800ec90:	20004242 	.word	0x20004242
 800ec94:	2000b0fc 	.word	0x2000b0fc
 800ec98:	08018b88 	.word	0x08018b88
 800ec9c:	08018ecc 	.word	0x08018ecc
 800eca0:	08018bcc 	.word	0x08018bcc
 800eca4:	08018ef8 	.word	0x08018ef8
 800eca8:	08018f24 	.word	0x08018f24
 800ecac:	08018f54 	.word	0x08018f54
 800ecb0:	08018f88 	.word	0x08018f88
 800ecb4:	0801abdc 	.word	0x0801abdc
 800ecb8:	0801abcc 	.word	0x0801abcc
 800ecbc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ecc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ecc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc8:	2200      	movs	r2, #0
 800ecca:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800eccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ecd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	bf28      	it	cs
 800ecdc:	4613      	movcs	r3, r2
 800ecde:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ece0:	8a7b      	ldrh	r3, [r7, #18]
 800ece2:	085b      	lsrs	r3, r3, #1
 800ece4:	b29a      	uxth	r2, r3
 800ece6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ecec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ecf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecf6:	005b      	lsls	r3, r3, #1
 800ecf8:	b29b      	uxth	r3, r3
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d206      	bcs.n	800ed0c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ecfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed02:	005b      	lsls	r3, r3, #1
 800ed04:	b29a      	uxth	r2, r3
 800ed06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed08:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ed0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed0e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ed10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ed16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed18:	2200      	movs	r2, #0
 800ed1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ed1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed20:	f004 f818 	bl	8012d54 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ed24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed26:	7d1b      	ldrb	r3, [r3, #20]
 800ed28:	2b06      	cmp	r3, #6
 800ed2a:	d111      	bne.n	800ed50 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ed2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed2e:	8b5b      	ldrh	r3, [r3, #26]
 800ed30:	f003 0310 	and.w	r3, r3, #16
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d00b      	beq.n	800ed50 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed38:	4b9d      	ldr	r3, [pc, #628]	; (800efb0 <tcp_slowtmr+0x584>)
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed3e:	6a1b      	ldr	r3, [r3, #32]
 800ed40:	1ad3      	subs	r3, r2, r3
 800ed42:	2b28      	cmp	r3, #40	; 0x28
 800ed44:	d904      	bls.n	800ed50 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ed46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ed50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed52:	7a5b      	ldrb	r3, [r3, #9]
 800ed54:	f003 0308 	and.w	r3, r3, #8
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d04c      	beq.n	800edf6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800ed5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ed60:	2b04      	cmp	r3, #4
 800ed62:	d003      	beq.n	800ed6c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ed64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed66:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ed68:	2b07      	cmp	r3, #7
 800ed6a:	d144      	bne.n	800edf6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed6c:	4b90      	ldr	r3, [pc, #576]	; (800efb0 <tcp_slowtmr+0x584>)
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed72:	6a1b      	ldr	r3, [r3, #32]
 800ed74:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ed76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ed7c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800ed80:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800ed84:	498b      	ldr	r1, [pc, #556]	; (800efb4 <tcp_slowtmr+0x588>)
 800ed86:	fba1 1303 	umull	r1, r3, r1, r3
 800ed8a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d90a      	bls.n	800eda6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ed90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed94:	3301      	adds	r3, #1
 800ed96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ed9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ed9e:	3301      	adds	r3, #1
 800eda0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eda4:	e027      	b.n	800edf6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eda6:	4b82      	ldr	r3, [pc, #520]	; (800efb0 <tcp_slowtmr+0x584>)
 800eda8:	681a      	ldr	r2, [r3, #0]
 800edaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edac:	6a1b      	ldr	r3, [r3, #32]
 800edae:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800edb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800edb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800edbc:	4618      	mov	r0, r3
 800edbe:	4b7e      	ldr	r3, [pc, #504]	; (800efb8 <tcp_slowtmr+0x58c>)
 800edc0:	fb03 f300 	mul.w	r3, r3, r0
 800edc4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800edc6:	497b      	ldr	r1, [pc, #492]	; (800efb4 <tcp_slowtmr+0x588>)
 800edc8:	fba1 1303 	umull	r1, r3, r1, r3
 800edcc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800edce:	429a      	cmp	r2, r3
 800edd0:	d911      	bls.n	800edf6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800edd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edd4:	f004 fac4 	bl	8013360 <tcp_keepalive>
 800edd8:	4603      	mov	r3, r0
 800edda:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800edde:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d107      	bne.n	800edf6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800ede6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800edec:	3301      	adds	r3, #1
 800edee:	b2da      	uxtb	r2, r3
 800edf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edf2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800edf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d011      	beq.n	800ee22 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800edfe:	4b6c      	ldr	r3, [pc, #432]	; (800efb0 <tcp_slowtmr+0x584>)
 800ee00:	681a      	ldr	r2, [r3, #0]
 800ee02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee04:	6a1b      	ldr	r3, [r3, #32]
 800ee06:	1ad2      	subs	r2, r2, r3
 800ee08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ee0e:	4619      	mov	r1, r3
 800ee10:	460b      	mov	r3, r1
 800ee12:	005b      	lsls	r3, r3, #1
 800ee14:	440b      	add	r3, r1
 800ee16:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d302      	bcc.n	800ee22 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ee1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee1e:	f000 fddb 	bl	800f9d8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ee22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee24:	7d1b      	ldrb	r3, [r3, #20]
 800ee26:	2b03      	cmp	r3, #3
 800ee28:	d10b      	bne.n	800ee42 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ee2a:	4b61      	ldr	r3, [pc, #388]	; (800efb0 <tcp_slowtmr+0x584>)
 800ee2c:	681a      	ldr	r2, [r3, #0]
 800ee2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee30:	6a1b      	ldr	r3, [r3, #32]
 800ee32:	1ad3      	subs	r3, r2, r3
 800ee34:	2b28      	cmp	r3, #40	; 0x28
 800ee36:	d904      	bls.n	800ee42 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ee38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ee42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee44:	7d1b      	ldrb	r3, [r3, #20]
 800ee46:	2b09      	cmp	r3, #9
 800ee48:	d10b      	bne.n	800ee62 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ee4a:	4b59      	ldr	r3, [pc, #356]	; (800efb0 <tcp_slowtmr+0x584>)
 800ee4c:	681a      	ldr	r2, [r3, #0]
 800ee4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee50:	6a1b      	ldr	r3, [r3, #32]
 800ee52:	1ad3      	subs	r3, r2, r3
 800ee54:	2bf0      	cmp	r3, #240	; 0xf0
 800ee56:	d904      	bls.n	800ee62 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800ee58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee5c:	3301      	adds	r3, #1
 800ee5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ee62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d060      	beq.n	800ef2c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ee6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee70:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ee72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee74:	f000 fbfc 	bl	800f670 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ee78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d010      	beq.n	800eea0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ee7e:	4b4f      	ldr	r3, [pc, #316]	; (800efbc <tcp_slowtmr+0x590>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d106      	bne.n	800ee96 <tcp_slowtmr+0x46a>
 800ee88:	4b4d      	ldr	r3, [pc, #308]	; (800efc0 <tcp_slowtmr+0x594>)
 800ee8a:	f240 526d 	movw	r2, #1389	; 0x56d
 800ee8e:	494d      	ldr	r1, [pc, #308]	; (800efc4 <tcp_slowtmr+0x598>)
 800ee90:	484d      	ldr	r0, [pc, #308]	; (800efc8 <tcp_slowtmr+0x59c>)
 800ee92:	f007 ffc7 	bl	8016e24 <iprintf>
        prev->next = pcb->next;
 800ee96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee98:	68da      	ldr	r2, [r3, #12]
 800ee9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9c:	60da      	str	r2, [r3, #12]
 800ee9e:	e00f      	b.n	800eec0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800eea0:	4b46      	ldr	r3, [pc, #280]	; (800efbc <tcp_slowtmr+0x590>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d006      	beq.n	800eeb8 <tcp_slowtmr+0x48c>
 800eeaa:	4b45      	ldr	r3, [pc, #276]	; (800efc0 <tcp_slowtmr+0x594>)
 800eeac:	f240 5271 	movw	r2, #1393	; 0x571
 800eeb0:	4946      	ldr	r1, [pc, #280]	; (800efcc <tcp_slowtmr+0x5a0>)
 800eeb2:	4845      	ldr	r0, [pc, #276]	; (800efc8 <tcp_slowtmr+0x59c>)
 800eeb4:	f007 ffb6 	bl	8016e24 <iprintf>
        tcp_active_pcbs = pcb->next;
 800eeb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeba:	68db      	ldr	r3, [r3, #12]
 800eebc:	4a3f      	ldr	r2, [pc, #252]	; (800efbc <tcp_slowtmr+0x590>)
 800eebe:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800eec0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d013      	beq.n	800eef0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800eec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeca:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800eecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eece:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800eed0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800eed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed4:	3304      	adds	r3, #4
 800eed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eed8:	8ad2      	ldrh	r2, [r2, #22]
 800eeda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eedc:	8b09      	ldrh	r1, [r1, #24]
 800eede:	9102      	str	r1, [sp, #8]
 800eee0:	9201      	str	r2, [sp, #4]
 800eee2:	9300      	str	r3, [sp, #0]
 800eee4:	462b      	mov	r3, r5
 800eee6:	4622      	mov	r2, r4
 800eee8:	4601      	mov	r1, r0
 800eeea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eeec:	f004 f984 	bl	80131f8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800eef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef2:	691b      	ldr	r3, [r3, #16]
 800eef4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800eef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef8:	7d1b      	ldrb	r3, [r3, #20]
 800eefa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800eefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eefe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ef00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef02:	68db      	ldr	r3, [r3, #12]
 800ef04:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ef06:	6838      	ldr	r0, [r7, #0]
 800ef08:	f7ff f9f2 	bl	800e2f0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ef0c:	4b30      	ldr	r3, [pc, #192]	; (800efd0 <tcp_slowtmr+0x5a4>)
 800ef0e:	2200      	movs	r2, #0
 800ef10:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d004      	beq.n	800ef22 <tcp_slowtmr+0x4f6>
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f06f 010c 	mvn.w	r1, #12
 800ef1e:	68b8      	ldr	r0, [r7, #8]
 800ef20:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ef22:	4b2b      	ldr	r3, [pc, #172]	; (800efd0 <tcp_slowtmr+0x5a4>)
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d037      	beq.n	800ef9a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ef2a:	e590      	b.n	800ea4e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ef2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef2e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ef30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef32:	68db      	ldr	r3, [r3, #12]
 800ef34:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ef36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef38:	7f1b      	ldrb	r3, [r3, #28]
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	b2da      	uxtb	r2, r3
 800ef3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef40:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ef42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef44:	7f1a      	ldrb	r2, [r3, #28]
 800ef46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef48:	7f5b      	ldrb	r3, [r3, #29]
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d325      	bcc.n	800ef9a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ef4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef50:	2200      	movs	r2, #0
 800ef52:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ef54:	4b1e      	ldr	r3, [pc, #120]	; (800efd0 <tcp_slowtmr+0x5a4>)
 800ef56:	2200      	movs	r2, #0
 800ef58:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ef5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d00b      	beq.n	800ef7c <tcp_slowtmr+0x550>
 800ef64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef6c:	6912      	ldr	r2, [r2, #16]
 800ef6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef70:	4610      	mov	r0, r2
 800ef72:	4798      	blx	r3
 800ef74:	4603      	mov	r3, r0
 800ef76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ef7a:	e002      	b.n	800ef82 <tcp_slowtmr+0x556>
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ef82:	4b13      	ldr	r3, [pc, #76]	; (800efd0 <tcp_slowtmr+0x5a4>)
 800ef84:	781b      	ldrb	r3, [r3, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d000      	beq.n	800ef8c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800ef8a:	e560      	b.n	800ea4e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ef8c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d102      	bne.n	800ef9a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ef94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef96:	f003 fb7b 	bl	8012690 <tcp_output>
  while (pcb != NULL) {
 800ef9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	f47f ad5c 	bne.w	800ea5a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800efa2:	2300      	movs	r3, #0
 800efa4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800efa6:	4b0b      	ldr	r3, [pc, #44]	; (800efd4 <tcp_slowtmr+0x5a8>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800efac:	e067      	b.n	800f07e <tcp_slowtmr+0x652>
 800efae:	bf00      	nop
 800efb0:	2000b100 	.word	0x2000b100
 800efb4:	10624dd3 	.word	0x10624dd3
 800efb8:	000124f8 	.word	0x000124f8
 800efbc:	2000b0fc 	.word	0x2000b0fc
 800efc0:	08018b88 	.word	0x08018b88
 800efc4:	08018fc0 	.word	0x08018fc0
 800efc8:	08018bcc 	.word	0x08018bcc
 800efcc:	08018fec 	.word	0x08018fec
 800efd0:	2000b0f8 	.word	0x2000b0f8
 800efd4:	2000b10c 	.word	0x2000b10c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800efd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efda:	7d1b      	ldrb	r3, [r3, #20]
 800efdc:	2b0a      	cmp	r3, #10
 800efde:	d006      	beq.n	800efee <tcp_slowtmr+0x5c2>
 800efe0:	4b2b      	ldr	r3, [pc, #172]	; (800f090 <tcp_slowtmr+0x664>)
 800efe2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800efe6:	492b      	ldr	r1, [pc, #172]	; (800f094 <tcp_slowtmr+0x668>)
 800efe8:	482b      	ldr	r0, [pc, #172]	; (800f098 <tcp_slowtmr+0x66c>)
 800efea:	f007 ff1b 	bl	8016e24 <iprintf>
    pcb_remove = 0;
 800efee:	2300      	movs	r3, #0
 800eff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800eff4:	4b29      	ldr	r3, [pc, #164]	; (800f09c <tcp_slowtmr+0x670>)
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effa:	6a1b      	ldr	r3, [r3, #32]
 800effc:	1ad3      	subs	r3, r2, r3
 800effe:	2bf0      	cmp	r3, #240	; 0xf0
 800f000:	d904      	bls.n	800f00c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f006:	3301      	adds	r3, #1
 800f008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f00c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f010:	2b00      	cmp	r3, #0
 800f012:	d02f      	beq.n	800f074 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f016:	f000 fb2b 	bl	800f670 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d010      	beq.n	800f042 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f020:	4b1f      	ldr	r3, [pc, #124]	; (800f0a0 <tcp_slowtmr+0x674>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f026:	429a      	cmp	r2, r3
 800f028:	d106      	bne.n	800f038 <tcp_slowtmr+0x60c>
 800f02a:	4b19      	ldr	r3, [pc, #100]	; (800f090 <tcp_slowtmr+0x664>)
 800f02c:	f240 52af 	movw	r2, #1455	; 0x5af
 800f030:	491c      	ldr	r1, [pc, #112]	; (800f0a4 <tcp_slowtmr+0x678>)
 800f032:	4819      	ldr	r0, [pc, #100]	; (800f098 <tcp_slowtmr+0x66c>)
 800f034:	f007 fef6 	bl	8016e24 <iprintf>
        prev->next = pcb->next;
 800f038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03a:	68da      	ldr	r2, [r3, #12]
 800f03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f03e:	60da      	str	r2, [r3, #12]
 800f040:	e00f      	b.n	800f062 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f042:	4b17      	ldr	r3, [pc, #92]	; (800f0a0 <tcp_slowtmr+0x674>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f048:	429a      	cmp	r2, r3
 800f04a:	d006      	beq.n	800f05a <tcp_slowtmr+0x62e>
 800f04c:	4b10      	ldr	r3, [pc, #64]	; (800f090 <tcp_slowtmr+0x664>)
 800f04e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f052:	4915      	ldr	r1, [pc, #84]	; (800f0a8 <tcp_slowtmr+0x67c>)
 800f054:	4810      	ldr	r0, [pc, #64]	; (800f098 <tcp_slowtmr+0x66c>)
 800f056:	f007 fee5 	bl	8016e24 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05c:	68db      	ldr	r3, [r3, #12]
 800f05e:	4a10      	ldr	r2, [pc, #64]	; (800f0a0 <tcp_slowtmr+0x674>)
 800f060:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f064:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f068:	68db      	ldr	r3, [r3, #12]
 800f06a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f06c:	69f8      	ldr	r0, [r7, #28]
 800f06e:	f7ff f93f 	bl	800e2f0 <tcp_free>
 800f072:	e004      	b.n	800f07e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f076:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f07a:	68db      	ldr	r3, [r3, #12]
 800f07c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f080:	2b00      	cmp	r3, #0
 800f082:	d1a9      	bne.n	800efd8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f084:	bf00      	nop
 800f086:	bf00      	nop
 800f088:	3730      	adds	r7, #48	; 0x30
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bdb0      	pop	{r4, r5, r7, pc}
 800f08e:	bf00      	nop
 800f090:	08018b88 	.word	0x08018b88
 800f094:	08019018 	.word	0x08019018
 800f098:	08018bcc 	.word	0x08018bcc
 800f09c:	2000b100 	.word	0x2000b100
 800f0a0:	2000b10c 	.word	0x2000b10c
 800f0a4:	08019048 	.word	0x08019048
 800f0a8:	08019070 	.word	0x08019070

0800f0ac <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b082      	sub	sp, #8
 800f0b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f0b2:	4b2d      	ldr	r3, [pc, #180]	; (800f168 <tcp_fasttmr+0xbc>)
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	3301      	adds	r3, #1
 800f0b8:	b2da      	uxtb	r2, r3
 800f0ba:	4b2b      	ldr	r3, [pc, #172]	; (800f168 <tcp_fasttmr+0xbc>)
 800f0bc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f0be:	4b2b      	ldr	r3, [pc, #172]	; (800f16c <tcp_fasttmr+0xc0>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f0c4:	e048      	b.n	800f158 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	7f9a      	ldrb	r2, [r3, #30]
 800f0ca:	4b27      	ldr	r3, [pc, #156]	; (800f168 <tcp_fasttmr+0xbc>)
 800f0cc:	781b      	ldrb	r3, [r3, #0]
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d03f      	beq.n	800f152 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f0d2:	4b25      	ldr	r3, [pc, #148]	; (800f168 <tcp_fasttmr+0xbc>)
 800f0d4:	781a      	ldrb	r2, [r3, #0]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	8b5b      	ldrh	r3, [r3, #26]
 800f0de:	f003 0301 	and.w	r3, r3, #1
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d010      	beq.n	800f108 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	8b5b      	ldrh	r3, [r3, #26]
 800f0ea:	f043 0302 	orr.w	r3, r3, #2
 800f0ee:	b29a      	uxth	r2, r3
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f003 facb 	bl	8012690 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	8b5b      	ldrh	r3, [r3, #26]
 800f0fe:	f023 0303 	bic.w	r3, r3, #3
 800f102:	b29a      	uxth	r2, r3
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	8b5b      	ldrh	r3, [r3, #26]
 800f10c:	f003 0308 	and.w	r3, r3, #8
 800f110:	2b00      	cmp	r3, #0
 800f112:	d009      	beq.n	800f128 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	8b5b      	ldrh	r3, [r3, #26]
 800f118:	f023 0308 	bic.w	r3, r3, #8
 800f11c:	b29a      	uxth	r2, r3
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f7ff fa78 	bl	800e618 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	68db      	ldr	r3, [r3, #12]
 800f12c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f132:	2b00      	cmp	r3, #0
 800f134:	d00a      	beq.n	800f14c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f136:	4b0e      	ldr	r3, [pc, #56]	; (800f170 <tcp_fasttmr+0xc4>)
 800f138:	2200      	movs	r2, #0
 800f13a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f000 f819 	bl	800f174 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f142:	4b0b      	ldr	r3, [pc, #44]	; (800f170 <tcp_fasttmr+0xc4>)
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d000      	beq.n	800f14c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f14a:	e7b8      	b.n	800f0be <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	607b      	str	r3, [r7, #4]
 800f150:	e002      	b.n	800f158 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	68db      	ldr	r3, [r3, #12]
 800f156:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d1b3      	bne.n	800f0c6 <tcp_fasttmr+0x1a>
    }
  }
}
 800f15e:	bf00      	nop
 800f160:	bf00      	nop
 800f162:	3708      	adds	r7, #8
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}
 800f168:	20004242 	.word	0x20004242
 800f16c:	2000b0fc 	.word	0x2000b0fc
 800f170:	2000b0f8 	.word	0x2000b0f8

0800f174 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f174:	b590      	push	{r4, r7, lr}
 800f176:	b085      	sub	sp, #20
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d109      	bne.n	800f196 <tcp_process_refused_data+0x22>
 800f182:	4b37      	ldr	r3, [pc, #220]	; (800f260 <tcp_process_refused_data+0xec>)
 800f184:	f240 6209 	movw	r2, #1545	; 0x609
 800f188:	4936      	ldr	r1, [pc, #216]	; (800f264 <tcp_process_refused_data+0xf0>)
 800f18a:	4837      	ldr	r0, [pc, #220]	; (800f268 <tcp_process_refused_data+0xf4>)
 800f18c:	f007 fe4a 	bl	8016e24 <iprintf>
 800f190:	f06f 030f 	mvn.w	r3, #15
 800f194:	e060      	b.n	800f258 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f19a:	7b5b      	ldrb	r3, [r3, #13]
 800f19c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1a2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d00b      	beq.n	800f1cc <tcp_process_refused_data+0x58>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	6918      	ldr	r0, [r3, #16]
 800f1be:	2300      	movs	r3, #0
 800f1c0:	68ba      	ldr	r2, [r7, #8]
 800f1c2:	6879      	ldr	r1, [r7, #4]
 800f1c4:	47a0      	blx	r4
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	73fb      	strb	r3, [r7, #15]
 800f1ca:	e007      	b.n	800f1dc <tcp_process_refused_data+0x68>
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	68ba      	ldr	r2, [r7, #8]
 800f1d0:	6879      	ldr	r1, [r7, #4]
 800f1d2:	2000      	movs	r0, #0
 800f1d4:	f000 f8a4 	bl	800f320 <tcp_recv_null>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f1dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d12a      	bne.n	800f23a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f1e4:	7bbb      	ldrb	r3, [r7, #14]
 800f1e6:	f003 0320 	and.w	r3, r3, #32
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d033      	beq.n	800f256 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f1f2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f1f6:	d005      	beq.n	800f204 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	b29a      	uxth	r2, r3
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d00b      	beq.n	800f226 <tcp_process_refused_data+0xb2>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6918      	ldr	r0, [r3, #16]
 800f218:	2300      	movs	r3, #0
 800f21a:	2200      	movs	r2, #0
 800f21c:	6879      	ldr	r1, [r7, #4]
 800f21e:	47a0      	blx	r4
 800f220:	4603      	mov	r3, r0
 800f222:	73fb      	strb	r3, [r7, #15]
 800f224:	e001      	b.n	800f22a <tcp_process_refused_data+0xb6>
 800f226:	2300      	movs	r3, #0
 800f228:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f22a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f22e:	f113 0f0d 	cmn.w	r3, #13
 800f232:	d110      	bne.n	800f256 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f234:	f06f 030c 	mvn.w	r3, #12
 800f238:	e00e      	b.n	800f258 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f23a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f23e:	f113 0f0d 	cmn.w	r3, #13
 800f242:	d102      	bne.n	800f24a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f244:	f06f 030c 	mvn.w	r3, #12
 800f248:	e006      	b.n	800f258 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	68ba      	ldr	r2, [r7, #8]
 800f24e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f250:	f06f 0304 	mvn.w	r3, #4
 800f254:	e000      	b.n	800f258 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f256:	2300      	movs	r3, #0
}
 800f258:	4618      	mov	r0, r3
 800f25a:	3714      	adds	r7, #20
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd90      	pop	{r4, r7, pc}
 800f260:	08018b88 	.word	0x08018b88
 800f264:	08019098 	.word	0x08019098
 800f268:	08018bcc 	.word	0x08018bcc

0800f26c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b084      	sub	sp, #16
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f274:	e007      	b.n	800f286 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f000 f80a 	bl	800f296 <tcp_seg_free>
    seg = next;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d1f4      	bne.n	800f276 <tcp_segs_free+0xa>
  }
}
 800f28c:	bf00      	nop
 800f28e:	bf00      	nop
 800f290:	3710      	adds	r7, #16
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}

0800f296 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f296:	b580      	push	{r7, lr}
 800f298:	b082      	sub	sp, #8
 800f29a:	af00      	add	r7, sp, #0
 800f29c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d00c      	beq.n	800f2be <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d004      	beq.n	800f2b6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	685b      	ldr	r3, [r3, #4]
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7fe fd71 	bl	800dd98 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f2b6:	6879      	ldr	r1, [r7, #4]
 800f2b8:	2003      	movs	r0, #3
 800f2ba:	f7fd ff41 	bl	800d140 <memp_free>
  }
}
 800f2be:	bf00      	nop
 800f2c0:	3708      	adds	r7, #8
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}
	...

0800f2c8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b084      	sub	sp, #16
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d106      	bne.n	800f2e4 <tcp_seg_copy+0x1c>
 800f2d6:	4b0f      	ldr	r3, [pc, #60]	; (800f314 <tcp_seg_copy+0x4c>)
 800f2d8:	f240 6282 	movw	r2, #1666	; 0x682
 800f2dc:	490e      	ldr	r1, [pc, #56]	; (800f318 <tcp_seg_copy+0x50>)
 800f2de:	480f      	ldr	r0, [pc, #60]	; (800f31c <tcp_seg_copy+0x54>)
 800f2e0:	f007 fda0 	bl	8016e24 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f2e4:	2003      	movs	r0, #3
 800f2e6:	f7fd fed9 	bl	800d09c <memp_malloc>
 800f2ea:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d101      	bne.n	800f2f6 <tcp_seg_copy+0x2e>
    return NULL;
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	e00a      	b.n	800f30c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f2f6:	2210      	movs	r2, #16
 800f2f8:	6879      	ldr	r1, [r7, #4]
 800f2fa:	68f8      	ldr	r0, [r7, #12]
 800f2fc:	f007 fd7c 	bl	8016df8 <memcpy>
  pbuf_ref(cseg->p);
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	685b      	ldr	r3, [r3, #4]
 800f304:	4618      	mov	r0, r3
 800f306:	f7fe fded 	bl	800dee4 <pbuf_ref>
  return cseg;
 800f30a:	68fb      	ldr	r3, [r7, #12]
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3710      	adds	r7, #16
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}
 800f314:	08018b88 	.word	0x08018b88
 800f318:	080190dc 	.word	0x080190dc
 800f31c:	08018bcc 	.word	0x08018bcc

0800f320 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af00      	add	r7, sp, #0
 800f326:	60f8      	str	r0, [r7, #12]
 800f328:	60b9      	str	r1, [r7, #8]
 800f32a:	607a      	str	r2, [r7, #4]
 800f32c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d109      	bne.n	800f348 <tcp_recv_null+0x28>
 800f334:	4b12      	ldr	r3, [pc, #72]	; (800f380 <tcp_recv_null+0x60>)
 800f336:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f33a:	4912      	ldr	r1, [pc, #72]	; (800f384 <tcp_recv_null+0x64>)
 800f33c:	4812      	ldr	r0, [pc, #72]	; (800f388 <tcp_recv_null+0x68>)
 800f33e:	f007 fd71 	bl	8016e24 <iprintf>
 800f342:	f06f 030f 	mvn.w	r3, #15
 800f346:	e016      	b.n	800f376 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d009      	beq.n	800f362 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	891b      	ldrh	r3, [r3, #8]
 800f352:	4619      	mov	r1, r3
 800f354:	68b8      	ldr	r0, [r7, #8]
 800f356:	f7ff fb19 	bl	800e98c <tcp_recved>
    pbuf_free(p);
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f7fe fd1c 	bl	800dd98 <pbuf_free>
 800f360:	e008      	b.n	800f374 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f362:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d104      	bne.n	800f374 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f36a:	68b8      	ldr	r0, [r7, #8]
 800f36c:	f7ff f9be 	bl	800e6ec <tcp_close>
 800f370:	4603      	mov	r3, r0
 800f372:	e000      	b.n	800f376 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f374:	2300      	movs	r3, #0
}
 800f376:	4618      	mov	r0, r3
 800f378:	3710      	adds	r7, #16
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}
 800f37e:	bf00      	nop
 800f380:	08018b88 	.word	0x08018b88
 800f384:	080190f8 	.word	0x080190f8
 800f388:	08018bcc 	.word	0x08018bcc

0800f38c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b086      	sub	sp, #24
 800f390:	af00      	add	r7, sp, #0
 800f392:	4603      	mov	r3, r0
 800f394:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	db01      	blt.n	800f3a2 <tcp_kill_prio+0x16>
 800f39e:	79fb      	ldrb	r3, [r7, #7]
 800f3a0:	e000      	b.n	800f3a4 <tcp_kill_prio+0x18>
 800f3a2:	237f      	movs	r3, #127	; 0x7f
 800f3a4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f3a6:	7afb      	ldrb	r3, [r7, #11]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d034      	beq.n	800f416 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f3ac:	7afb      	ldrb	r3, [r7, #11]
 800f3ae:	3b01      	subs	r3, #1
 800f3b0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3ba:	4b19      	ldr	r3, [pc, #100]	; (800f420 <tcp_kill_prio+0x94>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	617b      	str	r3, [r7, #20]
 800f3c0:	e01f      	b.n	800f402 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	7d5b      	ldrb	r3, [r3, #21]
 800f3c6:	7afa      	ldrb	r2, [r7, #11]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d80c      	bhi.n	800f3e6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f3d0:	7afa      	ldrb	r2, [r7, #11]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d112      	bne.n	800f3fc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f3d6:	4b13      	ldr	r3, [pc, #76]	; (800f424 <tcp_kill_prio+0x98>)
 800f3d8:	681a      	ldr	r2, [r3, #0]
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	6a1b      	ldr	r3, [r3, #32]
 800f3de:	1ad3      	subs	r3, r2, r3
 800f3e0:	68fa      	ldr	r2, [r7, #12]
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d80a      	bhi.n	800f3fc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f3e6:	4b0f      	ldr	r3, [pc, #60]	; (800f424 <tcp_kill_prio+0x98>)
 800f3e8:	681a      	ldr	r2, [r3, #0]
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	6a1b      	ldr	r3, [r3, #32]
 800f3ee:	1ad3      	subs	r3, r2, r3
 800f3f0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	7d5b      	ldrb	r3, [r3, #21]
 800f3fa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	68db      	ldr	r3, [r3, #12]
 800f400:	617b      	str	r3, [r7, #20]
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d1dc      	bne.n	800f3c2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d004      	beq.n	800f418 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f40e:	6938      	ldr	r0, [r7, #16]
 800f410:	f7ff fa56 	bl	800e8c0 <tcp_abort>
 800f414:	e000      	b.n	800f418 <tcp_kill_prio+0x8c>
    return;
 800f416:	bf00      	nop
  }
}
 800f418:	3718      	adds	r7, #24
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}
 800f41e:	bf00      	nop
 800f420:	2000b0fc 	.word	0x2000b0fc
 800f424:	2000b100 	.word	0x2000b100

0800f428 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b086      	sub	sp, #24
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	4603      	mov	r3, r0
 800f430:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f432:	79fb      	ldrb	r3, [r7, #7]
 800f434:	2b08      	cmp	r3, #8
 800f436:	d009      	beq.n	800f44c <tcp_kill_state+0x24>
 800f438:	79fb      	ldrb	r3, [r7, #7]
 800f43a:	2b09      	cmp	r3, #9
 800f43c:	d006      	beq.n	800f44c <tcp_kill_state+0x24>
 800f43e:	4b1a      	ldr	r3, [pc, #104]	; (800f4a8 <tcp_kill_state+0x80>)
 800f440:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f444:	4919      	ldr	r1, [pc, #100]	; (800f4ac <tcp_kill_state+0x84>)
 800f446:	481a      	ldr	r0, [pc, #104]	; (800f4b0 <tcp_kill_state+0x88>)
 800f448:	f007 fcec 	bl	8016e24 <iprintf>

  inactivity = 0;
 800f44c:	2300      	movs	r3, #0
 800f44e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f450:	2300      	movs	r3, #0
 800f452:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f454:	4b17      	ldr	r3, [pc, #92]	; (800f4b4 <tcp_kill_state+0x8c>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	617b      	str	r3, [r7, #20]
 800f45a:	e017      	b.n	800f48c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f45c:	697b      	ldr	r3, [r7, #20]
 800f45e:	7d1b      	ldrb	r3, [r3, #20]
 800f460:	79fa      	ldrb	r2, [r7, #7]
 800f462:	429a      	cmp	r2, r3
 800f464:	d10f      	bne.n	800f486 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f466:	4b14      	ldr	r3, [pc, #80]	; (800f4b8 <tcp_kill_state+0x90>)
 800f468:	681a      	ldr	r2, [r3, #0]
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	6a1b      	ldr	r3, [r3, #32]
 800f46e:	1ad3      	subs	r3, r2, r3
 800f470:	68fa      	ldr	r2, [r7, #12]
 800f472:	429a      	cmp	r2, r3
 800f474:	d807      	bhi.n	800f486 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f476:	4b10      	ldr	r3, [pc, #64]	; (800f4b8 <tcp_kill_state+0x90>)
 800f478:	681a      	ldr	r2, [r3, #0]
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	6a1b      	ldr	r3, [r3, #32]
 800f47e:	1ad3      	subs	r3, r2, r3
 800f480:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	68db      	ldr	r3, [r3, #12]
 800f48a:	617b      	str	r3, [r7, #20]
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d1e4      	bne.n	800f45c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f492:	693b      	ldr	r3, [r7, #16]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d003      	beq.n	800f4a0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f498:	2100      	movs	r1, #0
 800f49a:	6938      	ldr	r0, [r7, #16]
 800f49c:	f7ff f952 	bl	800e744 <tcp_abandon>
  }
}
 800f4a0:	bf00      	nop
 800f4a2:	3718      	adds	r7, #24
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}
 800f4a8:	08018b88 	.word	0x08018b88
 800f4ac:	08019114 	.word	0x08019114
 800f4b0:	08018bcc 	.word	0x08018bcc
 800f4b4:	2000b0fc 	.word	0x2000b0fc
 800f4b8:	2000b100 	.word	0x2000b100

0800f4bc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b084      	sub	sp, #16
 800f4c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4ca:	4b12      	ldr	r3, [pc, #72]	; (800f514 <tcp_kill_timewait+0x58>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	60fb      	str	r3, [r7, #12]
 800f4d0:	e012      	b.n	800f4f8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f4d2:	4b11      	ldr	r3, [pc, #68]	; (800f518 <tcp_kill_timewait+0x5c>)
 800f4d4:	681a      	ldr	r2, [r3, #0]
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	6a1b      	ldr	r3, [r3, #32]
 800f4da:	1ad3      	subs	r3, r2, r3
 800f4dc:	687a      	ldr	r2, [r7, #4]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d807      	bhi.n	800f4f2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f4e2:	4b0d      	ldr	r3, [pc, #52]	; (800f518 <tcp_kill_timewait+0x5c>)
 800f4e4:	681a      	ldr	r2, [r3, #0]
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	6a1b      	ldr	r3, [r3, #32]
 800f4ea:	1ad3      	subs	r3, r2, r3
 800f4ec:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	68db      	ldr	r3, [r3, #12]
 800f4f6:	60fb      	str	r3, [r7, #12]
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d1e9      	bne.n	800f4d2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d002      	beq.n	800f50a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f504:	68b8      	ldr	r0, [r7, #8]
 800f506:	f7ff f9db 	bl	800e8c0 <tcp_abort>
  }
}
 800f50a:	bf00      	nop
 800f50c:	3710      	adds	r7, #16
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}
 800f512:	bf00      	nop
 800f514:	2000b10c 	.word	0x2000b10c
 800f518:	2000b100 	.word	0x2000b100

0800f51c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b082      	sub	sp, #8
 800f520:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f522:	4b10      	ldr	r3, [pc, #64]	; (800f564 <tcp_handle_closepend+0x48>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f528:	e014      	b.n	800f554 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	68db      	ldr	r3, [r3, #12]
 800f52e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	8b5b      	ldrh	r3, [r3, #26]
 800f534:	f003 0308 	and.w	r3, r3, #8
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d009      	beq.n	800f550 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	8b5b      	ldrh	r3, [r3, #26]
 800f540:	f023 0308 	bic.w	r3, r3, #8
 800f544:	b29a      	uxth	r2, r3
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f7ff f864 	bl	800e618 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d1e7      	bne.n	800f52a <tcp_handle_closepend+0xe>
  }
}
 800f55a:	bf00      	nop
 800f55c:	bf00      	nop
 800f55e:	3708      	adds	r7, #8
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}
 800f564:	2000b0fc 	.word	0x2000b0fc

0800f568 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b084      	sub	sp, #16
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	4603      	mov	r3, r0
 800f570:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f572:	2001      	movs	r0, #1
 800f574:	f7fd fd92 	bl	800d09c <memp_malloc>
 800f578:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d126      	bne.n	800f5ce <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f580:	f7ff ffcc 	bl	800f51c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f584:	f7ff ff9a 	bl	800f4bc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f588:	2001      	movs	r0, #1
 800f58a:	f7fd fd87 	bl	800d09c <memp_malloc>
 800f58e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d11b      	bne.n	800f5ce <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f596:	2009      	movs	r0, #9
 800f598:	f7ff ff46 	bl	800f428 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f59c:	2001      	movs	r0, #1
 800f59e:	f7fd fd7d 	bl	800d09c <memp_malloc>
 800f5a2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d111      	bne.n	800f5ce <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f5aa:	2008      	movs	r0, #8
 800f5ac:	f7ff ff3c 	bl	800f428 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f5b0:	2001      	movs	r0, #1
 800f5b2:	f7fd fd73 	bl	800d09c <memp_malloc>
 800f5b6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d107      	bne.n	800f5ce <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f5be:	79fb      	ldrb	r3, [r7, #7]
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7ff fee3 	bl	800f38c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f5c6:	2001      	movs	r0, #1
 800f5c8:	f7fd fd68 	bl	800d09c <memp_malloc>
 800f5cc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d03f      	beq.n	800f654 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f5d4:	229c      	movs	r2, #156	; 0x9c
 800f5d6:	2100      	movs	r1, #0
 800f5d8:	68f8      	ldr	r0, [r7, #12]
 800f5da:	f007 fc1b 	bl	8016e14 <memset>
    pcb->prio = prio;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	79fa      	ldrb	r2, [r7, #7]
 800f5e2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f5ea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f5f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	22ff      	movs	r2, #255	; 0xff
 800f602:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f60a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	2206      	movs	r2, #6
 800f610:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	2206      	movs	r2, #6
 800f618:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f620:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	2201      	movs	r2, #1
 800f626:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f62a:	4b0d      	ldr	r3, [pc, #52]	; (800f660 <tcp_alloc+0xf8>)
 800f62c:	681a      	ldr	r2, [r3, #0]
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f632:	4b0c      	ldr	r3, [pc, #48]	; (800f664 <tcp_alloc+0xfc>)
 800f634:	781a      	ldrb	r2, [r3, #0]
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f640:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	4a08      	ldr	r2, [pc, #32]	; (800f668 <tcp_alloc+0x100>)
 800f648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	4a07      	ldr	r2, [pc, #28]	; (800f66c <tcp_alloc+0x104>)
 800f650:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f654:	68fb      	ldr	r3, [r7, #12]
}
 800f656:	4618      	mov	r0, r3
 800f658:	3710      	adds	r7, #16
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
 800f65e:	bf00      	nop
 800f660:	2000b100 	.word	0x2000b100
 800f664:	20004242 	.word	0x20004242
 800f668:	0800f321 	.word	0x0800f321
 800f66c:	006ddd00 	.word	0x006ddd00

0800f670 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b082      	sub	sp, #8
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d107      	bne.n	800f68e <tcp_pcb_purge+0x1e>
 800f67e:	4b21      	ldr	r3, [pc, #132]	; (800f704 <tcp_pcb_purge+0x94>)
 800f680:	f640 0251 	movw	r2, #2129	; 0x851
 800f684:	4920      	ldr	r1, [pc, #128]	; (800f708 <tcp_pcb_purge+0x98>)
 800f686:	4821      	ldr	r0, [pc, #132]	; (800f70c <tcp_pcb_purge+0x9c>)
 800f688:	f007 fbcc 	bl	8016e24 <iprintf>
 800f68c:	e037      	b.n	800f6fe <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	7d1b      	ldrb	r3, [r3, #20]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d033      	beq.n	800f6fe <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f69a:	2b0a      	cmp	r3, #10
 800f69c:	d02f      	beq.n	800f6fe <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f6a2:	2b01      	cmp	r3, #1
 800f6a4:	d02b      	beq.n	800f6fe <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d007      	beq.n	800f6be <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f7fe fb70 	bl	800dd98 <pbuf_free>
      pcb->refused_data = NULL;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d002      	beq.n	800f6cc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f000 f986 	bl	800f9d8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6d2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7ff fdc7 	bl	800f26c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7ff fdc2 	bl	800f26c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	66da      	str	r2, [r3, #108]	; 0x6c
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f6fe:	3708      	adds	r7, #8
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}
 800f704:	08018b88 	.word	0x08018b88
 800f708:	080191d4 	.word	0x080191d4
 800f70c:	08018bcc 	.word	0x08018bcc

0800f710 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b084      	sub	sp, #16
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
 800f718:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d106      	bne.n	800f72e <tcp_pcb_remove+0x1e>
 800f720:	4b3e      	ldr	r3, [pc, #248]	; (800f81c <tcp_pcb_remove+0x10c>)
 800f722:	f640 0283 	movw	r2, #2179	; 0x883
 800f726:	493e      	ldr	r1, [pc, #248]	; (800f820 <tcp_pcb_remove+0x110>)
 800f728:	483e      	ldr	r0, [pc, #248]	; (800f824 <tcp_pcb_remove+0x114>)
 800f72a:	f007 fb7b 	bl	8016e24 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d106      	bne.n	800f742 <tcp_pcb_remove+0x32>
 800f734:	4b39      	ldr	r3, [pc, #228]	; (800f81c <tcp_pcb_remove+0x10c>)
 800f736:	f640 0284 	movw	r2, #2180	; 0x884
 800f73a:	493b      	ldr	r1, [pc, #236]	; (800f828 <tcp_pcb_remove+0x118>)
 800f73c:	4839      	ldr	r0, [pc, #228]	; (800f824 <tcp_pcb_remove+0x114>)
 800f73e:	f007 fb71 	bl	8016e24 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	683a      	ldr	r2, [r7, #0]
 800f748:	429a      	cmp	r2, r3
 800f74a:	d105      	bne.n	800f758 <tcp_pcb_remove+0x48>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	68da      	ldr	r2, [r3, #12]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	601a      	str	r2, [r3, #0]
 800f756:	e013      	b.n	800f780 <tcp_pcb_remove+0x70>
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	60fb      	str	r3, [r7, #12]
 800f75e:	e00c      	b.n	800f77a <tcp_pcb_remove+0x6a>
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	68db      	ldr	r3, [r3, #12]
 800f764:	683a      	ldr	r2, [r7, #0]
 800f766:	429a      	cmp	r2, r3
 800f768:	d104      	bne.n	800f774 <tcp_pcb_remove+0x64>
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	68da      	ldr	r2, [r3, #12]
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	60da      	str	r2, [r3, #12]
 800f772:	e005      	b.n	800f780 <tcp_pcb_remove+0x70>
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	68db      	ldr	r3, [r3, #12]
 800f778:	60fb      	str	r3, [r7, #12]
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d1ef      	bne.n	800f760 <tcp_pcb_remove+0x50>
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	2200      	movs	r2, #0
 800f784:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f786:	6838      	ldr	r0, [r7, #0]
 800f788:	f7ff ff72 	bl	800f670 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	7d1b      	ldrb	r3, [r3, #20]
 800f790:	2b0a      	cmp	r3, #10
 800f792:	d013      	beq.n	800f7bc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f798:	2b01      	cmp	r3, #1
 800f79a:	d00f      	beq.n	800f7bc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	8b5b      	ldrh	r3, [r3, #26]
 800f7a0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d009      	beq.n	800f7bc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	8b5b      	ldrh	r3, [r3, #26]
 800f7ac:	f043 0302 	orr.w	r3, r3, #2
 800f7b0:	b29a      	uxth	r2, r3
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f7b6:	6838      	ldr	r0, [r7, #0]
 800f7b8:	f002 ff6a 	bl	8012690 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	7d1b      	ldrb	r3, [r3, #20]
 800f7c0:	2b01      	cmp	r3, #1
 800f7c2:	d020      	beq.n	800f806 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d006      	beq.n	800f7da <tcp_pcb_remove+0xca>
 800f7cc:	4b13      	ldr	r3, [pc, #76]	; (800f81c <tcp_pcb_remove+0x10c>)
 800f7ce:	f640 0293 	movw	r2, #2195	; 0x893
 800f7d2:	4916      	ldr	r1, [pc, #88]	; (800f82c <tcp_pcb_remove+0x11c>)
 800f7d4:	4813      	ldr	r0, [pc, #76]	; (800f824 <tcp_pcb_remove+0x114>)
 800f7d6:	f007 fb25 	bl	8016e24 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d006      	beq.n	800f7f0 <tcp_pcb_remove+0xe0>
 800f7e2:	4b0e      	ldr	r3, [pc, #56]	; (800f81c <tcp_pcb_remove+0x10c>)
 800f7e4:	f640 0294 	movw	r2, #2196	; 0x894
 800f7e8:	4911      	ldr	r1, [pc, #68]	; (800f830 <tcp_pcb_remove+0x120>)
 800f7ea:	480e      	ldr	r0, [pc, #56]	; (800f824 <tcp_pcb_remove+0x114>)
 800f7ec:	f007 fb1a 	bl	8016e24 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d006      	beq.n	800f806 <tcp_pcb_remove+0xf6>
 800f7f8:	4b08      	ldr	r3, [pc, #32]	; (800f81c <tcp_pcb_remove+0x10c>)
 800f7fa:	f640 0296 	movw	r2, #2198	; 0x896
 800f7fe:	490d      	ldr	r1, [pc, #52]	; (800f834 <tcp_pcb_remove+0x124>)
 800f800:	4808      	ldr	r0, [pc, #32]	; (800f824 <tcp_pcb_remove+0x114>)
 800f802:	f007 fb0f 	bl	8016e24 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	2200      	movs	r2, #0
 800f80a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	2200      	movs	r2, #0
 800f810:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f812:	bf00      	nop
 800f814:	3710      	adds	r7, #16
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}
 800f81a:	bf00      	nop
 800f81c:	08018b88 	.word	0x08018b88
 800f820:	080191f0 	.word	0x080191f0
 800f824:	08018bcc 	.word	0x08018bcc
 800f828:	0801920c 	.word	0x0801920c
 800f82c:	0801922c 	.word	0x0801922c
 800f830:	08019244 	.word	0x08019244
 800f834:	08019260 	.word	0x08019260

0800f838 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d106      	bne.n	800f854 <tcp_next_iss+0x1c>
 800f846:	4b0a      	ldr	r3, [pc, #40]	; (800f870 <tcp_next_iss+0x38>)
 800f848:	f640 02af 	movw	r2, #2223	; 0x8af
 800f84c:	4909      	ldr	r1, [pc, #36]	; (800f874 <tcp_next_iss+0x3c>)
 800f84e:	480a      	ldr	r0, [pc, #40]	; (800f878 <tcp_next_iss+0x40>)
 800f850:	f007 fae8 	bl	8016e24 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f854:	4b09      	ldr	r3, [pc, #36]	; (800f87c <tcp_next_iss+0x44>)
 800f856:	681a      	ldr	r2, [r3, #0]
 800f858:	4b09      	ldr	r3, [pc, #36]	; (800f880 <tcp_next_iss+0x48>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	4413      	add	r3, r2
 800f85e:	4a07      	ldr	r2, [pc, #28]	; (800f87c <tcp_next_iss+0x44>)
 800f860:	6013      	str	r3, [r2, #0]
  return iss;
 800f862:	4b06      	ldr	r3, [pc, #24]	; (800f87c <tcp_next_iss+0x44>)
 800f864:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f866:	4618      	mov	r0, r3
 800f868:	3708      	adds	r7, #8
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}
 800f86e:	bf00      	nop
 800f870:	08018b88 	.word	0x08018b88
 800f874:	08019278 	.word	0x08019278
 800f878:	08018bcc 	.word	0x08018bcc
 800f87c:	20000124 	.word	0x20000124
 800f880:	2000b100 	.word	0x2000b100

0800f884 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b086      	sub	sp, #24
 800f888:	af00      	add	r7, sp, #0
 800f88a:	4603      	mov	r3, r0
 800f88c:	60b9      	str	r1, [r7, #8]
 800f88e:	607a      	str	r2, [r7, #4]
 800f890:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d106      	bne.n	800f8a6 <tcp_eff_send_mss_netif+0x22>
 800f898:	4b14      	ldr	r3, [pc, #80]	; (800f8ec <tcp_eff_send_mss_netif+0x68>)
 800f89a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f89e:	4914      	ldr	r1, [pc, #80]	; (800f8f0 <tcp_eff_send_mss_netif+0x6c>)
 800f8a0:	4814      	ldr	r0, [pc, #80]	; (800f8f4 <tcp_eff_send_mss_netif+0x70>)
 800f8a2:	f007 fabf 	bl	8016e24 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f8a6:	68bb      	ldr	r3, [r7, #8]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d101      	bne.n	800f8b0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f8ac:	89fb      	ldrh	r3, [r7, #14]
 800f8ae:	e019      	b.n	800f8e4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	8c1b      	ldrh	r3, [r3, #32]
 800f8b4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f8b6:	8afb      	ldrh	r3, [r7, #22]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d012      	beq.n	800f8e2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f8bc:	2328      	movs	r3, #40	; 0x28
 800f8be:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f8c0:	8afa      	ldrh	r2, [r7, #22]
 800f8c2:	8abb      	ldrh	r3, [r7, #20]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d904      	bls.n	800f8d2 <tcp_eff_send_mss_netif+0x4e>
 800f8c8:	8afa      	ldrh	r2, [r7, #22]
 800f8ca:	8abb      	ldrh	r3, [r7, #20]
 800f8cc:	1ad3      	subs	r3, r2, r3
 800f8ce:	b29b      	uxth	r3, r3
 800f8d0:	e000      	b.n	800f8d4 <tcp_eff_send_mss_netif+0x50>
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f8d6:	8a7a      	ldrh	r2, [r7, #18]
 800f8d8:	89fb      	ldrh	r3, [r7, #14]
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	bf28      	it	cs
 800f8de:	4613      	movcs	r3, r2
 800f8e0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f8e2:	89fb      	ldrh	r3, [r7, #14]
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3718      	adds	r7, #24
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}
 800f8ec:	08018b88 	.word	0x08018b88
 800f8f0:	08019294 	.word	0x08019294
 800f8f4:	08018bcc 	.word	0x08018bcc

0800f8f8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b084      	sub	sp, #16
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d119      	bne.n	800f940 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f90c:	4b10      	ldr	r3, [pc, #64]	; (800f950 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f90e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f912:	4910      	ldr	r1, [pc, #64]	; (800f954 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f914:	4810      	ldr	r0, [pc, #64]	; (800f958 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f916:	f007 fa85 	bl	8016e24 <iprintf>

  while (pcb != NULL) {
 800f91a:	e011      	b.n	800f940 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	681a      	ldr	r2, [r3, #0]
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	429a      	cmp	r2, r3
 800f926:	d108      	bne.n	800f93a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	68db      	ldr	r3, [r3, #12]
 800f92c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f92e:	68f8      	ldr	r0, [r7, #12]
 800f930:	f7fe ffc6 	bl	800e8c0 <tcp_abort>
      pcb = next;
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	60fb      	str	r3, [r7, #12]
 800f938:	e002      	b.n	800f940 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	68db      	ldr	r3, [r3, #12]
 800f93e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d1ea      	bne.n	800f91c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f946:	bf00      	nop
 800f948:	bf00      	nop
 800f94a:	3710      	adds	r7, #16
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}
 800f950:	08018b88 	.word	0x08018b88
 800f954:	080192bc 	.word	0x080192bc
 800f958:	08018bcc 	.word	0x08018bcc

0800f95c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d02a      	beq.n	800f9c2 <tcp_netif_ip_addr_changed+0x66>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d026      	beq.n	800f9c2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f974:	4b15      	ldr	r3, [pc, #84]	; (800f9cc <tcp_netif_ip_addr_changed+0x70>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	4619      	mov	r1, r3
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f7ff ffbc 	bl	800f8f8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f980:	4b13      	ldr	r3, [pc, #76]	; (800f9d0 <tcp_netif_ip_addr_changed+0x74>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	4619      	mov	r1, r3
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f7ff ffb6 	bl	800f8f8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d017      	beq.n	800f9c2 <tcp_netif_ip_addr_changed+0x66>
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d013      	beq.n	800f9c2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f99a:	4b0e      	ldr	r3, [pc, #56]	; (800f9d4 <tcp_netif_ip_addr_changed+0x78>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	60fb      	str	r3, [r7, #12]
 800f9a0:	e00c      	b.n	800f9bc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	681a      	ldr	r2, [r3, #0]
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	d103      	bne.n	800f9b6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	681a      	ldr	r2, [r3, #0]
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	68db      	ldr	r3, [r3, #12]
 800f9ba:	60fb      	str	r3, [r7, #12]
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d1ef      	bne.n	800f9a2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f9c2:	bf00      	nop
 800f9c4:	3710      	adds	r7, #16
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}
 800f9ca:	bf00      	nop
 800f9cc:	2000b0fc 	.word	0x2000b0fc
 800f9d0:	2000b108 	.word	0x2000b108
 800f9d4:	2000b104 	.word	0x2000b104

0800f9d8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b082      	sub	sp, #8
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d007      	beq.n	800f9f8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f7ff fc3d 	bl	800f26c <tcp_segs_free>
    pcb->ooseq = NULL;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f9f8:	bf00      	nop
 800f9fa:	3708      	adds	r7, #8
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800fa00:	b590      	push	{r4, r7, lr}
 800fa02:	b08d      	sub	sp, #52	; 0x34
 800fa04:	af04      	add	r7, sp, #16
 800fa06:	6078      	str	r0, [r7, #4]
 800fa08:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d105      	bne.n	800fa1c <tcp_input+0x1c>
 800fa10:	4b9b      	ldr	r3, [pc, #620]	; (800fc80 <tcp_input+0x280>)
 800fa12:	2283      	movs	r2, #131	; 0x83
 800fa14:	499b      	ldr	r1, [pc, #620]	; (800fc84 <tcp_input+0x284>)
 800fa16:	489c      	ldr	r0, [pc, #624]	; (800fc88 <tcp_input+0x288>)
 800fa18:	f007 fa04 	bl	8016e24 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	685b      	ldr	r3, [r3, #4]
 800fa20:	4a9a      	ldr	r2, [pc, #616]	; (800fc8c <tcp_input+0x28c>)
 800fa22:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	895b      	ldrh	r3, [r3, #10]
 800fa28:	2b13      	cmp	r3, #19
 800fa2a:	f240 83c4 	bls.w	80101b6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fa2e:	4b98      	ldr	r3, [pc, #608]	; (800fc90 <tcp_input+0x290>)
 800fa30:	695b      	ldr	r3, [r3, #20]
 800fa32:	4a97      	ldr	r2, [pc, #604]	; (800fc90 <tcp_input+0x290>)
 800fa34:	6812      	ldr	r2, [r2, #0]
 800fa36:	4611      	mov	r1, r2
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f005 fc43 	bl	80152c4 <ip4_addr_isbroadcast_u32>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	f040 83ba 	bne.w	80101ba <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fa46:	4b92      	ldr	r3, [pc, #584]	; (800fc90 <tcp_input+0x290>)
 800fa48:	695b      	ldr	r3, [r3, #20]
 800fa4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fa4e:	2be0      	cmp	r3, #224	; 0xe0
 800fa50:	f000 83b3 	beq.w	80101ba <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fa54:	4b8d      	ldr	r3, [pc, #564]	; (800fc8c <tcp_input+0x28c>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	899b      	ldrh	r3, [r3, #12]
 800fa5a:	b29b      	uxth	r3, r3
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f7fc fe67 	bl	800c730 <lwip_htons>
 800fa62:	4603      	mov	r3, r0
 800fa64:	0b1b      	lsrs	r3, r3, #12
 800fa66:	b29b      	uxth	r3, r3
 800fa68:	b2db      	uxtb	r3, r3
 800fa6a:	009b      	lsls	r3, r3, #2
 800fa6c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fa6e:	7cbb      	ldrb	r3, [r7, #18]
 800fa70:	2b13      	cmp	r3, #19
 800fa72:	f240 83a4 	bls.w	80101be <tcp_input+0x7be>
 800fa76:	7cbb      	ldrb	r3, [r7, #18]
 800fa78:	b29a      	uxth	r2, r3
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	891b      	ldrh	r3, [r3, #8]
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	f200 839d 	bhi.w	80101be <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fa84:	7cbb      	ldrb	r3, [r7, #18]
 800fa86:	b29b      	uxth	r3, r3
 800fa88:	3b14      	subs	r3, #20
 800fa8a:	b29a      	uxth	r2, r3
 800fa8c:	4b81      	ldr	r3, [pc, #516]	; (800fc94 <tcp_input+0x294>)
 800fa8e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800fa90:	4b81      	ldr	r3, [pc, #516]	; (800fc98 <tcp_input+0x298>)
 800fa92:	2200      	movs	r2, #0
 800fa94:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	895a      	ldrh	r2, [r3, #10]
 800fa9a:	7cbb      	ldrb	r3, [r7, #18]
 800fa9c:	b29b      	uxth	r3, r3
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d309      	bcc.n	800fab6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800faa2:	4b7c      	ldr	r3, [pc, #496]	; (800fc94 <tcp_input+0x294>)
 800faa4:	881a      	ldrh	r2, [r3, #0]
 800faa6:	4b7d      	ldr	r3, [pc, #500]	; (800fc9c <tcp_input+0x29c>)
 800faa8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800faaa:	7cbb      	ldrb	r3, [r7, #18]
 800faac:	4619      	mov	r1, r3
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f7fe f8ec 	bl	800dc8c <pbuf_remove_header>
 800fab4:	e04e      	b.n	800fb54 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d105      	bne.n	800faca <tcp_input+0xca>
 800fabe:	4b70      	ldr	r3, [pc, #448]	; (800fc80 <tcp_input+0x280>)
 800fac0:	22c2      	movs	r2, #194	; 0xc2
 800fac2:	4977      	ldr	r1, [pc, #476]	; (800fca0 <tcp_input+0x2a0>)
 800fac4:	4870      	ldr	r0, [pc, #448]	; (800fc88 <tcp_input+0x288>)
 800fac6:	f007 f9ad 	bl	8016e24 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800faca:	2114      	movs	r1, #20
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f7fe f8dd 	bl	800dc8c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	895a      	ldrh	r2, [r3, #10]
 800fad6:	4b71      	ldr	r3, [pc, #452]	; (800fc9c <tcp_input+0x29c>)
 800fad8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fada:	4b6e      	ldr	r3, [pc, #440]	; (800fc94 <tcp_input+0x294>)
 800fadc:	881a      	ldrh	r2, [r3, #0]
 800fade:	4b6f      	ldr	r3, [pc, #444]	; (800fc9c <tcp_input+0x29c>)
 800fae0:	881b      	ldrh	r3, [r3, #0]
 800fae2:	1ad3      	subs	r3, r2, r3
 800fae4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800fae6:	4b6d      	ldr	r3, [pc, #436]	; (800fc9c <tcp_input+0x29c>)
 800fae8:	881b      	ldrh	r3, [r3, #0]
 800faea:	4619      	mov	r1, r3
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f7fe f8cd 	bl	800dc8c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	895b      	ldrh	r3, [r3, #10]
 800faf8:	8a3a      	ldrh	r2, [r7, #16]
 800fafa:	429a      	cmp	r2, r3
 800fafc:	f200 8361 	bhi.w	80101c2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	4a64      	ldr	r2, [pc, #400]	; (800fc98 <tcp_input+0x298>)
 800fb08:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	8a3a      	ldrh	r2, [r7, #16]
 800fb10:	4611      	mov	r1, r2
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7fe f8ba 	bl	800dc8c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	891a      	ldrh	r2, [r3, #8]
 800fb1c:	8a3b      	ldrh	r3, [r7, #16]
 800fb1e:	1ad3      	subs	r3, r2, r3
 800fb20:	b29a      	uxth	r2, r3
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	895b      	ldrh	r3, [r3, #10]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d005      	beq.n	800fb3a <tcp_input+0x13a>
 800fb2e:	4b54      	ldr	r3, [pc, #336]	; (800fc80 <tcp_input+0x280>)
 800fb30:	22df      	movs	r2, #223	; 0xdf
 800fb32:	495c      	ldr	r1, [pc, #368]	; (800fca4 <tcp_input+0x2a4>)
 800fb34:	4854      	ldr	r0, [pc, #336]	; (800fc88 <tcp_input+0x288>)
 800fb36:	f007 f975 	bl	8016e24 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	891a      	ldrh	r2, [r3, #8]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	891b      	ldrh	r3, [r3, #8]
 800fb44:	429a      	cmp	r2, r3
 800fb46:	d005      	beq.n	800fb54 <tcp_input+0x154>
 800fb48:	4b4d      	ldr	r3, [pc, #308]	; (800fc80 <tcp_input+0x280>)
 800fb4a:	22e0      	movs	r2, #224	; 0xe0
 800fb4c:	4956      	ldr	r1, [pc, #344]	; (800fca8 <tcp_input+0x2a8>)
 800fb4e:	484e      	ldr	r0, [pc, #312]	; (800fc88 <tcp_input+0x288>)
 800fb50:	f007 f968 	bl	8016e24 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fb54:	4b4d      	ldr	r3, [pc, #308]	; (800fc8c <tcp_input+0x28c>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	881b      	ldrh	r3, [r3, #0]
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	4a4b      	ldr	r2, [pc, #300]	; (800fc8c <tcp_input+0x28c>)
 800fb5e:	6814      	ldr	r4, [r2, #0]
 800fb60:	4618      	mov	r0, r3
 800fb62:	f7fc fde5 	bl	800c730 <lwip_htons>
 800fb66:	4603      	mov	r3, r0
 800fb68:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800fb6a:	4b48      	ldr	r3, [pc, #288]	; (800fc8c <tcp_input+0x28c>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	885b      	ldrh	r3, [r3, #2]
 800fb70:	b29b      	uxth	r3, r3
 800fb72:	4a46      	ldr	r2, [pc, #280]	; (800fc8c <tcp_input+0x28c>)
 800fb74:	6814      	ldr	r4, [r2, #0]
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7fc fdda 	bl	800c730 <lwip_htons>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fb80:	4b42      	ldr	r3, [pc, #264]	; (800fc8c <tcp_input+0x28c>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	685b      	ldr	r3, [r3, #4]
 800fb86:	4a41      	ldr	r2, [pc, #260]	; (800fc8c <tcp_input+0x28c>)
 800fb88:	6814      	ldr	r4, [r2, #0]
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7fc fde5 	bl	800c75a <lwip_htonl>
 800fb90:	4603      	mov	r3, r0
 800fb92:	6063      	str	r3, [r4, #4]
 800fb94:	6863      	ldr	r3, [r4, #4]
 800fb96:	4a45      	ldr	r2, [pc, #276]	; (800fcac <tcp_input+0x2ac>)
 800fb98:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fb9a:	4b3c      	ldr	r3, [pc, #240]	; (800fc8c <tcp_input+0x28c>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	689b      	ldr	r3, [r3, #8]
 800fba0:	4a3a      	ldr	r2, [pc, #232]	; (800fc8c <tcp_input+0x28c>)
 800fba2:	6814      	ldr	r4, [r2, #0]
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7fc fdd8 	bl	800c75a <lwip_htonl>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	60a3      	str	r3, [r4, #8]
 800fbae:	68a3      	ldr	r3, [r4, #8]
 800fbb0:	4a3f      	ldr	r2, [pc, #252]	; (800fcb0 <tcp_input+0x2b0>)
 800fbb2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fbb4:	4b35      	ldr	r3, [pc, #212]	; (800fc8c <tcp_input+0x28c>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	89db      	ldrh	r3, [r3, #14]
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	4a33      	ldr	r2, [pc, #204]	; (800fc8c <tcp_input+0x28c>)
 800fbbe:	6814      	ldr	r4, [r2, #0]
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7fc fdb5 	bl	800c730 <lwip_htons>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800fbca:	4b30      	ldr	r3, [pc, #192]	; (800fc8c <tcp_input+0x28c>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	899b      	ldrh	r3, [r3, #12]
 800fbd0:	b29b      	uxth	r3, r3
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7fc fdac 	bl	800c730 <lwip_htons>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	b2db      	uxtb	r3, r3
 800fbdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fbe0:	b2da      	uxtb	r2, r3
 800fbe2:	4b34      	ldr	r3, [pc, #208]	; (800fcb4 <tcp_input+0x2b4>)
 800fbe4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	891a      	ldrh	r2, [r3, #8]
 800fbea:	4b33      	ldr	r3, [pc, #204]	; (800fcb8 <tcp_input+0x2b8>)
 800fbec:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800fbee:	4b31      	ldr	r3, [pc, #196]	; (800fcb4 <tcp_input+0x2b4>)
 800fbf0:	781b      	ldrb	r3, [r3, #0]
 800fbf2:	f003 0303 	and.w	r3, r3, #3
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d00c      	beq.n	800fc14 <tcp_input+0x214>
    tcplen++;
 800fbfa:	4b2f      	ldr	r3, [pc, #188]	; (800fcb8 <tcp_input+0x2b8>)
 800fbfc:	881b      	ldrh	r3, [r3, #0]
 800fbfe:	3301      	adds	r3, #1
 800fc00:	b29a      	uxth	r2, r3
 800fc02:	4b2d      	ldr	r3, [pc, #180]	; (800fcb8 <tcp_input+0x2b8>)
 800fc04:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	891a      	ldrh	r2, [r3, #8]
 800fc0a:	4b2b      	ldr	r3, [pc, #172]	; (800fcb8 <tcp_input+0x2b8>)
 800fc0c:	881b      	ldrh	r3, [r3, #0]
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	f200 82d9 	bhi.w	80101c6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800fc14:	2300      	movs	r3, #0
 800fc16:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc18:	4b28      	ldr	r3, [pc, #160]	; (800fcbc <tcp_input+0x2bc>)
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	61fb      	str	r3, [r7, #28]
 800fc1e:	e09d      	b.n	800fd5c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fc20:	69fb      	ldr	r3, [r7, #28]
 800fc22:	7d1b      	ldrb	r3, [r3, #20]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d105      	bne.n	800fc34 <tcp_input+0x234>
 800fc28:	4b15      	ldr	r3, [pc, #84]	; (800fc80 <tcp_input+0x280>)
 800fc2a:	22fb      	movs	r2, #251	; 0xfb
 800fc2c:	4924      	ldr	r1, [pc, #144]	; (800fcc0 <tcp_input+0x2c0>)
 800fc2e:	4816      	ldr	r0, [pc, #88]	; (800fc88 <tcp_input+0x288>)
 800fc30:	f007 f8f8 	bl	8016e24 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800fc34:	69fb      	ldr	r3, [r7, #28]
 800fc36:	7d1b      	ldrb	r3, [r3, #20]
 800fc38:	2b0a      	cmp	r3, #10
 800fc3a:	d105      	bne.n	800fc48 <tcp_input+0x248>
 800fc3c:	4b10      	ldr	r3, [pc, #64]	; (800fc80 <tcp_input+0x280>)
 800fc3e:	22fc      	movs	r2, #252	; 0xfc
 800fc40:	4920      	ldr	r1, [pc, #128]	; (800fcc4 <tcp_input+0x2c4>)
 800fc42:	4811      	ldr	r0, [pc, #68]	; (800fc88 <tcp_input+0x288>)
 800fc44:	f007 f8ee 	bl	8016e24 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fc48:	69fb      	ldr	r3, [r7, #28]
 800fc4a:	7d1b      	ldrb	r3, [r3, #20]
 800fc4c:	2b01      	cmp	r3, #1
 800fc4e:	d105      	bne.n	800fc5c <tcp_input+0x25c>
 800fc50:	4b0b      	ldr	r3, [pc, #44]	; (800fc80 <tcp_input+0x280>)
 800fc52:	22fd      	movs	r2, #253	; 0xfd
 800fc54:	491c      	ldr	r1, [pc, #112]	; (800fcc8 <tcp_input+0x2c8>)
 800fc56:	480c      	ldr	r0, [pc, #48]	; (800fc88 <tcp_input+0x288>)
 800fc58:	f007 f8e4 	bl	8016e24 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fc5c:	69fb      	ldr	r3, [r7, #28]
 800fc5e:	7a1b      	ldrb	r3, [r3, #8]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d033      	beq.n	800fccc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fc64:	69fb      	ldr	r3, [r7, #28]
 800fc66:	7a1a      	ldrb	r2, [r3, #8]
 800fc68:	4b09      	ldr	r3, [pc, #36]	; (800fc90 <tcp_input+0x290>)
 800fc6a:	685b      	ldr	r3, [r3, #4]
 800fc6c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fc70:	3301      	adds	r3, #1
 800fc72:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fc74:	429a      	cmp	r2, r3
 800fc76:	d029      	beq.n	800fccc <tcp_input+0x2cc>
      prev = pcb;
 800fc78:	69fb      	ldr	r3, [r7, #28]
 800fc7a:	61bb      	str	r3, [r7, #24]
      continue;
 800fc7c:	e06b      	b.n	800fd56 <tcp_input+0x356>
 800fc7e:	bf00      	nop
 800fc80:	080192f0 	.word	0x080192f0
 800fc84:	08019324 	.word	0x08019324
 800fc88:	0801933c 	.word	0x0801933c
 800fc8c:	20004254 	.word	0x20004254
 800fc90:	200079e8 	.word	0x200079e8
 800fc94:	20004258 	.word	0x20004258
 800fc98:	2000425c 	.word	0x2000425c
 800fc9c:	2000425a 	.word	0x2000425a
 800fca0:	08019364 	.word	0x08019364
 800fca4:	08019374 	.word	0x08019374
 800fca8:	08019380 	.word	0x08019380
 800fcac:	20004264 	.word	0x20004264
 800fcb0:	20004268 	.word	0x20004268
 800fcb4:	20004270 	.word	0x20004270
 800fcb8:	2000426e 	.word	0x2000426e
 800fcbc:	2000b0fc 	.word	0x2000b0fc
 800fcc0:	080193a0 	.word	0x080193a0
 800fcc4:	080193c8 	.word	0x080193c8
 800fcc8:	080193f4 	.word	0x080193f4
    }

    if (pcb->remote_port == tcphdr->src &&
 800fccc:	69fb      	ldr	r3, [r7, #28]
 800fcce:	8b1a      	ldrh	r2, [r3, #24]
 800fcd0:	4b94      	ldr	r3, [pc, #592]	; (800ff24 <tcp_input+0x524>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	881b      	ldrh	r3, [r3, #0]
 800fcd6:	b29b      	uxth	r3, r3
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	d13a      	bne.n	800fd52 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800fcdc:	69fb      	ldr	r3, [r7, #28]
 800fcde:	8ada      	ldrh	r2, [r3, #22]
 800fce0:	4b90      	ldr	r3, [pc, #576]	; (800ff24 <tcp_input+0x524>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	885b      	ldrh	r3, [r3, #2]
 800fce6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d132      	bne.n	800fd52 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	685a      	ldr	r2, [r3, #4]
 800fcf0:	4b8d      	ldr	r3, [pc, #564]	; (800ff28 <tcp_input+0x528>)
 800fcf2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d12c      	bne.n	800fd52 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fcf8:	69fb      	ldr	r3, [r7, #28]
 800fcfa:	681a      	ldr	r2, [r3, #0]
 800fcfc:	4b8a      	ldr	r3, [pc, #552]	; (800ff28 <tcp_input+0x528>)
 800fcfe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d126      	bne.n	800fd52 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fd04:	69fb      	ldr	r3, [r7, #28]
 800fd06:	68db      	ldr	r3, [r3, #12]
 800fd08:	69fa      	ldr	r2, [r7, #28]
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d106      	bne.n	800fd1c <tcp_input+0x31c>
 800fd0e:	4b87      	ldr	r3, [pc, #540]	; (800ff2c <tcp_input+0x52c>)
 800fd10:	f240 120d 	movw	r2, #269	; 0x10d
 800fd14:	4986      	ldr	r1, [pc, #536]	; (800ff30 <tcp_input+0x530>)
 800fd16:	4887      	ldr	r0, [pc, #540]	; (800ff34 <tcp_input+0x534>)
 800fd18:	f007 f884 	bl	8016e24 <iprintf>
      if (prev != NULL) {
 800fd1c:	69bb      	ldr	r3, [r7, #24]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d00a      	beq.n	800fd38 <tcp_input+0x338>
        prev->next = pcb->next;
 800fd22:	69fb      	ldr	r3, [r7, #28]
 800fd24:	68da      	ldr	r2, [r3, #12]
 800fd26:	69bb      	ldr	r3, [r7, #24]
 800fd28:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800fd2a:	4b83      	ldr	r3, [pc, #524]	; (800ff38 <tcp_input+0x538>)
 800fd2c:	681a      	ldr	r2, [r3, #0]
 800fd2e:	69fb      	ldr	r3, [r7, #28]
 800fd30:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800fd32:	4a81      	ldr	r2, [pc, #516]	; (800ff38 <tcp_input+0x538>)
 800fd34:	69fb      	ldr	r3, [r7, #28]
 800fd36:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fd38:	69fb      	ldr	r3, [r7, #28]
 800fd3a:	68db      	ldr	r3, [r3, #12]
 800fd3c:	69fa      	ldr	r2, [r7, #28]
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	d111      	bne.n	800fd66 <tcp_input+0x366>
 800fd42:	4b7a      	ldr	r3, [pc, #488]	; (800ff2c <tcp_input+0x52c>)
 800fd44:	f240 1215 	movw	r2, #277	; 0x115
 800fd48:	497c      	ldr	r1, [pc, #496]	; (800ff3c <tcp_input+0x53c>)
 800fd4a:	487a      	ldr	r0, [pc, #488]	; (800ff34 <tcp_input+0x534>)
 800fd4c:	f007 f86a 	bl	8016e24 <iprintf>
      break;
 800fd50:	e009      	b.n	800fd66 <tcp_input+0x366>
    }
    prev = pcb;
 800fd52:	69fb      	ldr	r3, [r7, #28]
 800fd54:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd56:	69fb      	ldr	r3, [r7, #28]
 800fd58:	68db      	ldr	r3, [r3, #12]
 800fd5a:	61fb      	str	r3, [r7, #28]
 800fd5c:	69fb      	ldr	r3, [r7, #28]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	f47f af5e 	bne.w	800fc20 <tcp_input+0x220>
 800fd64:	e000      	b.n	800fd68 <tcp_input+0x368>
      break;
 800fd66:	bf00      	nop
  }

  if (pcb == NULL) {
 800fd68:	69fb      	ldr	r3, [r7, #28]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	f040 8095 	bne.w	800fe9a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd70:	4b73      	ldr	r3, [pc, #460]	; (800ff40 <tcp_input+0x540>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	61fb      	str	r3, [r7, #28]
 800fd76:	e03f      	b.n	800fdf8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fd78:	69fb      	ldr	r3, [r7, #28]
 800fd7a:	7d1b      	ldrb	r3, [r3, #20]
 800fd7c:	2b0a      	cmp	r3, #10
 800fd7e:	d006      	beq.n	800fd8e <tcp_input+0x38e>
 800fd80:	4b6a      	ldr	r3, [pc, #424]	; (800ff2c <tcp_input+0x52c>)
 800fd82:	f240 121f 	movw	r2, #287	; 0x11f
 800fd86:	496f      	ldr	r1, [pc, #444]	; (800ff44 <tcp_input+0x544>)
 800fd88:	486a      	ldr	r0, [pc, #424]	; (800ff34 <tcp_input+0x534>)
 800fd8a:	f007 f84b 	bl	8016e24 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fd8e:	69fb      	ldr	r3, [r7, #28]
 800fd90:	7a1b      	ldrb	r3, [r3, #8]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d009      	beq.n	800fdaa <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fd96:	69fb      	ldr	r3, [r7, #28]
 800fd98:	7a1a      	ldrb	r2, [r3, #8]
 800fd9a:	4b63      	ldr	r3, [pc, #396]	; (800ff28 <tcp_input+0x528>)
 800fd9c:	685b      	ldr	r3, [r3, #4]
 800fd9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fda2:	3301      	adds	r3, #1
 800fda4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d122      	bne.n	800fdf0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800fdaa:	69fb      	ldr	r3, [r7, #28]
 800fdac:	8b1a      	ldrh	r2, [r3, #24]
 800fdae:	4b5d      	ldr	r3, [pc, #372]	; (800ff24 <tcp_input+0x524>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	881b      	ldrh	r3, [r3, #0]
 800fdb4:	b29b      	uxth	r3, r3
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	d11b      	bne.n	800fdf2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800fdba:	69fb      	ldr	r3, [r7, #28]
 800fdbc:	8ada      	ldrh	r2, [r3, #22]
 800fdbe:	4b59      	ldr	r3, [pc, #356]	; (800ff24 <tcp_input+0x524>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	885b      	ldrh	r3, [r3, #2]
 800fdc4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d113      	bne.n	800fdf2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fdca:	69fb      	ldr	r3, [r7, #28]
 800fdcc:	685a      	ldr	r2, [r3, #4]
 800fdce:	4b56      	ldr	r3, [pc, #344]	; (800ff28 <tcp_input+0x528>)
 800fdd0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800fdd2:	429a      	cmp	r2, r3
 800fdd4:	d10d      	bne.n	800fdf2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fdd6:	69fb      	ldr	r3, [r7, #28]
 800fdd8:	681a      	ldr	r2, [r3, #0]
 800fdda:	4b53      	ldr	r3, [pc, #332]	; (800ff28 <tcp_input+0x528>)
 800fddc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fdde:	429a      	cmp	r2, r3
 800fde0:	d107      	bne.n	800fdf2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800fde2:	69f8      	ldr	r0, [r7, #28]
 800fde4:	f000 fb54 	bl	8010490 <tcp_timewait_input>
        }
        pbuf_free(p);
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f7fd ffd5 	bl	800dd98 <pbuf_free>
        return;
 800fdee:	e1f0      	b.n	80101d2 <tcp_input+0x7d2>
        continue;
 800fdf0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fdf2:	69fb      	ldr	r3, [r7, #28]
 800fdf4:	68db      	ldr	r3, [r3, #12]
 800fdf6:	61fb      	str	r3, [r7, #28]
 800fdf8:	69fb      	ldr	r3, [r7, #28]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d1bc      	bne.n	800fd78 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fe02:	4b51      	ldr	r3, [pc, #324]	; (800ff48 <tcp_input+0x548>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	617b      	str	r3, [r7, #20]
 800fe08:	e02a      	b.n	800fe60 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	7a1b      	ldrb	r3, [r3, #8]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d00c      	beq.n	800fe2c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	7a1a      	ldrb	r2, [r3, #8]
 800fe16:	4b44      	ldr	r3, [pc, #272]	; (800ff28 <tcp_input+0x528>)
 800fe18:	685b      	ldr	r3, [r3, #4]
 800fe1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fe1e:	3301      	adds	r3, #1
 800fe20:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fe22:	429a      	cmp	r2, r3
 800fe24:	d002      	beq.n	800fe2c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	61bb      	str	r3, [r7, #24]
        continue;
 800fe2a:	e016      	b.n	800fe5a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	8ada      	ldrh	r2, [r3, #22]
 800fe30:	4b3c      	ldr	r3, [pc, #240]	; (800ff24 <tcp_input+0x524>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	885b      	ldrh	r3, [r3, #2]
 800fe36:	b29b      	uxth	r3, r3
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d10c      	bne.n	800fe56 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	681a      	ldr	r2, [r3, #0]
 800fe40:	4b39      	ldr	r3, [pc, #228]	; (800ff28 <tcp_input+0x528>)
 800fe42:	695b      	ldr	r3, [r3, #20]
 800fe44:	429a      	cmp	r2, r3
 800fe46:	d00f      	beq.n	800fe68 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fe48:	697b      	ldr	r3, [r7, #20]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d00d      	beq.n	800fe6a <tcp_input+0x46a>
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d009      	beq.n	800fe6a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fe5a:	697b      	ldr	r3, [r7, #20]
 800fe5c:	68db      	ldr	r3, [r3, #12]
 800fe5e:	617b      	str	r3, [r7, #20]
 800fe60:	697b      	ldr	r3, [r7, #20]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d1d1      	bne.n	800fe0a <tcp_input+0x40a>
 800fe66:	e000      	b.n	800fe6a <tcp_input+0x46a>
            break;
 800fe68:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d014      	beq.n	800fe9a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fe70:	69bb      	ldr	r3, [r7, #24]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d00a      	beq.n	800fe8c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	68da      	ldr	r2, [r3, #12]
 800fe7a:	69bb      	ldr	r3, [r7, #24]
 800fe7c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fe7e:	4b32      	ldr	r3, [pc, #200]	; (800ff48 <tcp_input+0x548>)
 800fe80:	681a      	ldr	r2, [r3, #0]
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fe86:	4a30      	ldr	r2, [pc, #192]	; (800ff48 <tcp_input+0x548>)
 800fe88:	697b      	ldr	r3, [r7, #20]
 800fe8a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fe8c:	6978      	ldr	r0, [r7, #20]
 800fe8e:	f000 fa01 	bl	8010294 <tcp_listen_input>
      }
      pbuf_free(p);
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f7fd ff80 	bl	800dd98 <pbuf_free>
      return;
 800fe98:	e19b      	b.n	80101d2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fe9a:	69fb      	ldr	r3, [r7, #28]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	f000 8160 	beq.w	8010162 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fea2:	4b2a      	ldr	r3, [pc, #168]	; (800ff4c <tcp_input+0x54c>)
 800fea4:	2200      	movs	r2, #0
 800fea6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	891a      	ldrh	r2, [r3, #8]
 800feac:	4b27      	ldr	r3, [pc, #156]	; (800ff4c <tcp_input+0x54c>)
 800feae:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800feb0:	4a26      	ldr	r2, [pc, #152]	; (800ff4c <tcp_input+0x54c>)
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800feb6:	4b1b      	ldr	r3, [pc, #108]	; (800ff24 <tcp_input+0x524>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	4a24      	ldr	r2, [pc, #144]	; (800ff4c <tcp_input+0x54c>)
 800febc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800febe:	4b24      	ldr	r3, [pc, #144]	; (800ff50 <tcp_input+0x550>)
 800fec0:	2200      	movs	r2, #0
 800fec2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fec4:	4b23      	ldr	r3, [pc, #140]	; (800ff54 <tcp_input+0x554>)
 800fec6:	2200      	movs	r2, #0
 800fec8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800feca:	4b23      	ldr	r3, [pc, #140]	; (800ff58 <tcp_input+0x558>)
 800fecc:	2200      	movs	r2, #0
 800fece:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fed0:	4b22      	ldr	r3, [pc, #136]	; (800ff5c <tcp_input+0x55c>)
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	f003 0308 	and.w	r3, r3, #8
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d006      	beq.n	800feea <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	7b5b      	ldrb	r3, [r3, #13]
 800fee0:	f043 0301 	orr.w	r3, r3, #1
 800fee4:	b2da      	uxtb	r2, r3
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800feea:	69fb      	ldr	r3, [r7, #28]
 800feec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d038      	beq.n	800ff64 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fef2:	69f8      	ldr	r0, [r7, #28]
 800fef4:	f7ff f93e 	bl	800f174 <tcp_process_refused_data>
 800fef8:	4603      	mov	r3, r0
 800fefa:	f113 0f0d 	cmn.w	r3, #13
 800fefe:	d007      	beq.n	800ff10 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ff00:	69fb      	ldr	r3, [r7, #28]
 800ff02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d02d      	beq.n	800ff64 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ff08:	4b15      	ldr	r3, [pc, #84]	; (800ff60 <tcp_input+0x560>)
 800ff0a:	881b      	ldrh	r3, [r3, #0]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d029      	beq.n	800ff64 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ff10:	69fb      	ldr	r3, [r7, #28]
 800ff12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	f040 8104 	bne.w	8010122 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ff1a:	69f8      	ldr	r0, [r7, #28]
 800ff1c:	f003 f9be 	bl	801329c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ff20:	e0ff      	b.n	8010122 <tcp_input+0x722>
 800ff22:	bf00      	nop
 800ff24:	20004254 	.word	0x20004254
 800ff28:	200079e8 	.word	0x200079e8
 800ff2c:	080192f0 	.word	0x080192f0
 800ff30:	0801941c 	.word	0x0801941c
 800ff34:	0801933c 	.word	0x0801933c
 800ff38:	2000b0fc 	.word	0x2000b0fc
 800ff3c:	08019448 	.word	0x08019448
 800ff40:	2000b10c 	.word	0x2000b10c
 800ff44:	08019474 	.word	0x08019474
 800ff48:	2000b104 	.word	0x2000b104
 800ff4c:	20004244 	.word	0x20004244
 800ff50:	20004274 	.word	0x20004274
 800ff54:	20004271 	.word	0x20004271
 800ff58:	2000426c 	.word	0x2000426c
 800ff5c:	20004270 	.word	0x20004270
 800ff60:	2000426e 	.word	0x2000426e
      }
    }
    tcp_input_pcb = pcb;
 800ff64:	4a9c      	ldr	r2, [pc, #624]	; (80101d8 <tcp_input+0x7d8>)
 800ff66:	69fb      	ldr	r3, [r7, #28]
 800ff68:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ff6a:	69f8      	ldr	r0, [r7, #28]
 800ff6c:	f000 fb0a 	bl	8010584 <tcp_process>
 800ff70:	4603      	mov	r3, r0
 800ff72:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ff74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff78:	f113 0f0d 	cmn.w	r3, #13
 800ff7c:	f000 80d3 	beq.w	8010126 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800ff80:	4b96      	ldr	r3, [pc, #600]	; (80101dc <tcp_input+0x7dc>)
 800ff82:	781b      	ldrb	r3, [r3, #0]
 800ff84:	f003 0308 	and.w	r3, r3, #8
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d015      	beq.n	800ffb8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ff8c:	69fb      	ldr	r3, [r7, #28]
 800ff8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d008      	beq.n	800ffa8 <tcp_input+0x5a8>
 800ff96:	69fb      	ldr	r3, [r7, #28]
 800ff98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff9c:	69fa      	ldr	r2, [r7, #28]
 800ff9e:	6912      	ldr	r2, [r2, #16]
 800ffa0:	f06f 010d 	mvn.w	r1, #13
 800ffa4:	4610      	mov	r0, r2
 800ffa6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ffa8:	69f9      	ldr	r1, [r7, #28]
 800ffaa:	488d      	ldr	r0, [pc, #564]	; (80101e0 <tcp_input+0x7e0>)
 800ffac:	f7ff fbb0 	bl	800f710 <tcp_pcb_remove>
        tcp_free(pcb);
 800ffb0:	69f8      	ldr	r0, [r7, #28]
 800ffb2:	f7fe f99d 	bl	800e2f0 <tcp_free>
 800ffb6:	e0c1      	b.n	801013c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800ffb8:	2300      	movs	r3, #0
 800ffba:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ffbc:	4b89      	ldr	r3, [pc, #548]	; (80101e4 <tcp_input+0x7e4>)
 800ffbe:	881b      	ldrh	r3, [r3, #0]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d01d      	beq.n	8010000 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ffc4:	4b87      	ldr	r3, [pc, #540]	; (80101e4 <tcp_input+0x7e4>)
 800ffc6:	881b      	ldrh	r3, [r3, #0]
 800ffc8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ffca:	69fb      	ldr	r3, [r7, #28]
 800ffcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d00a      	beq.n	800ffea <tcp_input+0x5ea>
 800ffd4:	69fb      	ldr	r3, [r7, #28]
 800ffd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffda:	69fa      	ldr	r2, [r7, #28]
 800ffdc:	6910      	ldr	r0, [r2, #16]
 800ffde:	89fa      	ldrh	r2, [r7, #14]
 800ffe0:	69f9      	ldr	r1, [r7, #28]
 800ffe2:	4798      	blx	r3
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	74fb      	strb	r3, [r7, #19]
 800ffe8:	e001      	b.n	800ffee <tcp_input+0x5ee>
 800ffea:	2300      	movs	r3, #0
 800ffec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ffee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fff2:	f113 0f0d 	cmn.w	r3, #13
 800fff6:	f000 8098 	beq.w	801012a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fffa:	4b7a      	ldr	r3, [pc, #488]	; (80101e4 <tcp_input+0x7e4>)
 800fffc:	2200      	movs	r2, #0
 800fffe:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010000:	69f8      	ldr	r0, [r7, #28]
 8010002:	f000 f907 	bl	8010214 <tcp_input_delayed_close>
 8010006:	4603      	mov	r3, r0
 8010008:	2b00      	cmp	r3, #0
 801000a:	f040 8090 	bne.w	801012e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801000e:	4b76      	ldr	r3, [pc, #472]	; (80101e8 <tcp_input+0x7e8>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d041      	beq.n	801009a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010016:	69fb      	ldr	r3, [r7, #28]
 8010018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801001a:	2b00      	cmp	r3, #0
 801001c:	d006      	beq.n	801002c <tcp_input+0x62c>
 801001e:	4b73      	ldr	r3, [pc, #460]	; (80101ec <tcp_input+0x7ec>)
 8010020:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010024:	4972      	ldr	r1, [pc, #456]	; (80101f0 <tcp_input+0x7f0>)
 8010026:	4873      	ldr	r0, [pc, #460]	; (80101f4 <tcp_input+0x7f4>)
 8010028:	f006 fefc 	bl	8016e24 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801002c:	69fb      	ldr	r3, [r7, #28]
 801002e:	8b5b      	ldrh	r3, [r3, #26]
 8010030:	f003 0310 	and.w	r3, r3, #16
 8010034:	2b00      	cmp	r3, #0
 8010036:	d008      	beq.n	801004a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010038:	4b6b      	ldr	r3, [pc, #428]	; (80101e8 <tcp_input+0x7e8>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	4618      	mov	r0, r3
 801003e:	f7fd feab 	bl	800dd98 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010042:	69f8      	ldr	r0, [r7, #28]
 8010044:	f7fe fc3c 	bl	800e8c0 <tcp_abort>
            goto aborted;
 8010048:	e078      	b.n	801013c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801004a:	69fb      	ldr	r3, [r7, #28]
 801004c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010050:	2b00      	cmp	r3, #0
 8010052:	d00c      	beq.n	801006e <tcp_input+0x66e>
 8010054:	69fb      	ldr	r3, [r7, #28]
 8010056:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801005a:	69fb      	ldr	r3, [r7, #28]
 801005c:	6918      	ldr	r0, [r3, #16]
 801005e:	4b62      	ldr	r3, [pc, #392]	; (80101e8 <tcp_input+0x7e8>)
 8010060:	681a      	ldr	r2, [r3, #0]
 8010062:	2300      	movs	r3, #0
 8010064:	69f9      	ldr	r1, [r7, #28]
 8010066:	47a0      	blx	r4
 8010068:	4603      	mov	r3, r0
 801006a:	74fb      	strb	r3, [r7, #19]
 801006c:	e008      	b.n	8010080 <tcp_input+0x680>
 801006e:	4b5e      	ldr	r3, [pc, #376]	; (80101e8 <tcp_input+0x7e8>)
 8010070:	681a      	ldr	r2, [r3, #0]
 8010072:	2300      	movs	r3, #0
 8010074:	69f9      	ldr	r1, [r7, #28]
 8010076:	2000      	movs	r0, #0
 8010078:	f7ff f952 	bl	800f320 <tcp_recv_null>
 801007c:	4603      	mov	r3, r0
 801007e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010080:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010084:	f113 0f0d 	cmn.w	r3, #13
 8010088:	d053      	beq.n	8010132 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801008a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d003      	beq.n	801009a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010092:	4b55      	ldr	r3, [pc, #340]	; (80101e8 <tcp_input+0x7e8>)
 8010094:	681a      	ldr	r2, [r3, #0]
 8010096:	69fb      	ldr	r3, [r7, #28]
 8010098:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801009a:	4b50      	ldr	r3, [pc, #320]	; (80101dc <tcp_input+0x7dc>)
 801009c:	781b      	ldrb	r3, [r3, #0]
 801009e:	f003 0320 	and.w	r3, r3, #32
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d030      	beq.n	8010108 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80100a6:	69fb      	ldr	r3, [r7, #28]
 80100a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d009      	beq.n	80100c2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80100ae:	69fb      	ldr	r3, [r7, #28]
 80100b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100b2:	7b5a      	ldrb	r2, [r3, #13]
 80100b4:	69fb      	ldr	r3, [r7, #28]
 80100b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100b8:	f042 0220 	orr.w	r2, r2, #32
 80100bc:	b2d2      	uxtb	r2, r2
 80100be:	735a      	strb	r2, [r3, #13]
 80100c0:	e022      	b.n	8010108 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80100c2:	69fb      	ldr	r3, [r7, #28]
 80100c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100c6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80100ca:	d005      	beq.n	80100d8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80100cc:	69fb      	ldr	r3, [r7, #28]
 80100ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100d0:	3301      	adds	r3, #1
 80100d2:	b29a      	uxth	r2, r3
 80100d4:	69fb      	ldr	r3, [r7, #28]
 80100d6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80100d8:	69fb      	ldr	r3, [r7, #28]
 80100da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d00b      	beq.n	80100fa <tcp_input+0x6fa>
 80100e2:	69fb      	ldr	r3, [r7, #28]
 80100e4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	6918      	ldr	r0, [r3, #16]
 80100ec:	2300      	movs	r3, #0
 80100ee:	2200      	movs	r2, #0
 80100f0:	69f9      	ldr	r1, [r7, #28]
 80100f2:	47a0      	blx	r4
 80100f4:	4603      	mov	r3, r0
 80100f6:	74fb      	strb	r3, [r7, #19]
 80100f8:	e001      	b.n	80100fe <tcp_input+0x6fe>
 80100fa:	2300      	movs	r3, #0
 80100fc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80100fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010102:	f113 0f0d 	cmn.w	r3, #13
 8010106:	d016      	beq.n	8010136 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010108:	4b33      	ldr	r3, [pc, #204]	; (80101d8 <tcp_input+0x7d8>)
 801010a:	2200      	movs	r2, #0
 801010c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801010e:	69f8      	ldr	r0, [r7, #28]
 8010110:	f000 f880 	bl	8010214 <tcp_input_delayed_close>
 8010114:	4603      	mov	r3, r0
 8010116:	2b00      	cmp	r3, #0
 8010118:	d10f      	bne.n	801013a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801011a:	69f8      	ldr	r0, [r7, #28]
 801011c:	f002 fab8 	bl	8012690 <tcp_output>
 8010120:	e00c      	b.n	801013c <tcp_input+0x73c>
        goto aborted;
 8010122:	bf00      	nop
 8010124:	e00a      	b.n	801013c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010126:	bf00      	nop
 8010128:	e008      	b.n	801013c <tcp_input+0x73c>
              goto aborted;
 801012a:	bf00      	nop
 801012c:	e006      	b.n	801013c <tcp_input+0x73c>
          goto aborted;
 801012e:	bf00      	nop
 8010130:	e004      	b.n	801013c <tcp_input+0x73c>
            goto aborted;
 8010132:	bf00      	nop
 8010134:	e002      	b.n	801013c <tcp_input+0x73c>
              goto aborted;
 8010136:	bf00      	nop
 8010138:	e000      	b.n	801013c <tcp_input+0x73c>
          goto aborted;
 801013a:	bf00      	nop
    tcp_input_pcb = NULL;
 801013c:	4b26      	ldr	r3, [pc, #152]	; (80101d8 <tcp_input+0x7d8>)
 801013e:	2200      	movs	r2, #0
 8010140:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010142:	4b29      	ldr	r3, [pc, #164]	; (80101e8 <tcp_input+0x7e8>)
 8010144:	2200      	movs	r2, #0
 8010146:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010148:	4b2b      	ldr	r3, [pc, #172]	; (80101f8 <tcp_input+0x7f8>)
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d03f      	beq.n	80101d0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8010150:	4b29      	ldr	r3, [pc, #164]	; (80101f8 <tcp_input+0x7f8>)
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	4618      	mov	r0, r3
 8010156:	f7fd fe1f 	bl	800dd98 <pbuf_free>
      inseg.p = NULL;
 801015a:	4b27      	ldr	r3, [pc, #156]	; (80101f8 <tcp_input+0x7f8>)
 801015c:	2200      	movs	r2, #0
 801015e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010160:	e036      	b.n	80101d0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010162:	4b26      	ldr	r3, [pc, #152]	; (80101fc <tcp_input+0x7fc>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	899b      	ldrh	r3, [r3, #12]
 8010168:	b29b      	uxth	r3, r3
 801016a:	4618      	mov	r0, r3
 801016c:	f7fc fae0 	bl	800c730 <lwip_htons>
 8010170:	4603      	mov	r3, r0
 8010172:	b2db      	uxtb	r3, r3
 8010174:	f003 0304 	and.w	r3, r3, #4
 8010178:	2b00      	cmp	r3, #0
 801017a:	d118      	bne.n	80101ae <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801017c:	4b20      	ldr	r3, [pc, #128]	; (8010200 <tcp_input+0x800>)
 801017e:	6819      	ldr	r1, [r3, #0]
 8010180:	4b20      	ldr	r3, [pc, #128]	; (8010204 <tcp_input+0x804>)
 8010182:	881b      	ldrh	r3, [r3, #0]
 8010184:	461a      	mov	r2, r3
 8010186:	4b20      	ldr	r3, [pc, #128]	; (8010208 <tcp_input+0x808>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801018c:	4b1b      	ldr	r3, [pc, #108]	; (80101fc <tcp_input+0x7fc>)
 801018e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010190:	885b      	ldrh	r3, [r3, #2]
 8010192:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010194:	4a19      	ldr	r2, [pc, #100]	; (80101fc <tcp_input+0x7fc>)
 8010196:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010198:	8812      	ldrh	r2, [r2, #0]
 801019a:	b292      	uxth	r2, r2
 801019c:	9202      	str	r2, [sp, #8]
 801019e:	9301      	str	r3, [sp, #4]
 80101a0:	4b1a      	ldr	r3, [pc, #104]	; (801020c <tcp_input+0x80c>)
 80101a2:	9300      	str	r3, [sp, #0]
 80101a4:	4b1a      	ldr	r3, [pc, #104]	; (8010210 <tcp_input+0x810>)
 80101a6:	4602      	mov	r2, r0
 80101a8:	2000      	movs	r0, #0
 80101aa:	f003 f825 	bl	80131f8 <tcp_rst>
    pbuf_free(p);
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f7fd fdf2 	bl	800dd98 <pbuf_free>
  return;
 80101b4:	e00c      	b.n	80101d0 <tcp_input+0x7d0>
    goto dropped;
 80101b6:	bf00      	nop
 80101b8:	e006      	b.n	80101c8 <tcp_input+0x7c8>
    goto dropped;
 80101ba:	bf00      	nop
 80101bc:	e004      	b.n	80101c8 <tcp_input+0x7c8>
    goto dropped;
 80101be:	bf00      	nop
 80101c0:	e002      	b.n	80101c8 <tcp_input+0x7c8>
      goto dropped;
 80101c2:	bf00      	nop
 80101c4:	e000      	b.n	80101c8 <tcp_input+0x7c8>
      goto dropped;
 80101c6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f7fd fde5 	bl	800dd98 <pbuf_free>
 80101ce:	e000      	b.n	80101d2 <tcp_input+0x7d2>
  return;
 80101d0:	bf00      	nop
}
 80101d2:	3724      	adds	r7, #36	; 0x24
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd90      	pop	{r4, r7, pc}
 80101d8:	2000b110 	.word	0x2000b110
 80101dc:	20004271 	.word	0x20004271
 80101e0:	2000b0fc 	.word	0x2000b0fc
 80101e4:	2000426c 	.word	0x2000426c
 80101e8:	20004274 	.word	0x20004274
 80101ec:	080192f0 	.word	0x080192f0
 80101f0:	080194a4 	.word	0x080194a4
 80101f4:	0801933c 	.word	0x0801933c
 80101f8:	20004244 	.word	0x20004244
 80101fc:	20004254 	.word	0x20004254
 8010200:	20004268 	.word	0x20004268
 8010204:	2000426e 	.word	0x2000426e
 8010208:	20004264 	.word	0x20004264
 801020c:	200079f8 	.word	0x200079f8
 8010210:	200079fc 	.word	0x200079fc

08010214 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d106      	bne.n	8010230 <tcp_input_delayed_close+0x1c>
 8010222:	4b17      	ldr	r3, [pc, #92]	; (8010280 <tcp_input_delayed_close+0x6c>)
 8010224:	f240 225a 	movw	r2, #602	; 0x25a
 8010228:	4916      	ldr	r1, [pc, #88]	; (8010284 <tcp_input_delayed_close+0x70>)
 801022a:	4817      	ldr	r0, [pc, #92]	; (8010288 <tcp_input_delayed_close+0x74>)
 801022c:	f006 fdfa 	bl	8016e24 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010230:	4b16      	ldr	r3, [pc, #88]	; (801028c <tcp_input_delayed_close+0x78>)
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	f003 0310 	and.w	r3, r3, #16
 8010238:	2b00      	cmp	r3, #0
 801023a:	d01c      	beq.n	8010276 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	8b5b      	ldrh	r3, [r3, #26]
 8010240:	f003 0310 	and.w	r3, r3, #16
 8010244:	2b00      	cmp	r3, #0
 8010246:	d10d      	bne.n	8010264 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801024e:	2b00      	cmp	r3, #0
 8010250:	d008      	beq.n	8010264 <tcp_input_delayed_close+0x50>
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010258:	687a      	ldr	r2, [r7, #4]
 801025a:	6912      	ldr	r2, [r2, #16]
 801025c:	f06f 010e 	mvn.w	r1, #14
 8010260:	4610      	mov	r0, r2
 8010262:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010264:	6879      	ldr	r1, [r7, #4]
 8010266:	480a      	ldr	r0, [pc, #40]	; (8010290 <tcp_input_delayed_close+0x7c>)
 8010268:	f7ff fa52 	bl	800f710 <tcp_pcb_remove>
    tcp_free(pcb);
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f7fe f83f 	bl	800e2f0 <tcp_free>
    return 1;
 8010272:	2301      	movs	r3, #1
 8010274:	e000      	b.n	8010278 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010276:	2300      	movs	r3, #0
}
 8010278:	4618      	mov	r0, r3
 801027a:	3708      	adds	r7, #8
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}
 8010280:	080192f0 	.word	0x080192f0
 8010284:	080194c0 	.word	0x080194c0
 8010288:	0801933c 	.word	0x0801933c
 801028c:	20004271 	.word	0x20004271
 8010290:	2000b0fc 	.word	0x2000b0fc

08010294 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010294:	b590      	push	{r4, r7, lr}
 8010296:	b08b      	sub	sp, #44	; 0x2c
 8010298:	af04      	add	r7, sp, #16
 801029a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801029c:	4b6f      	ldr	r3, [pc, #444]	; (801045c <tcp_listen_input+0x1c8>)
 801029e:	781b      	ldrb	r3, [r3, #0]
 80102a0:	f003 0304 	and.w	r3, r3, #4
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	f040 80d2 	bne.w	801044e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d106      	bne.n	80102be <tcp_listen_input+0x2a>
 80102b0:	4b6b      	ldr	r3, [pc, #428]	; (8010460 <tcp_listen_input+0x1cc>)
 80102b2:	f240 2281 	movw	r2, #641	; 0x281
 80102b6:	496b      	ldr	r1, [pc, #428]	; (8010464 <tcp_listen_input+0x1d0>)
 80102b8:	486b      	ldr	r0, [pc, #428]	; (8010468 <tcp_listen_input+0x1d4>)
 80102ba:	f006 fdb3 	bl	8016e24 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80102be:	4b67      	ldr	r3, [pc, #412]	; (801045c <tcp_listen_input+0x1c8>)
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	f003 0310 	and.w	r3, r3, #16
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d019      	beq.n	80102fe <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102ca:	4b68      	ldr	r3, [pc, #416]	; (801046c <tcp_listen_input+0x1d8>)
 80102cc:	6819      	ldr	r1, [r3, #0]
 80102ce:	4b68      	ldr	r3, [pc, #416]	; (8010470 <tcp_listen_input+0x1dc>)
 80102d0:	881b      	ldrh	r3, [r3, #0]
 80102d2:	461a      	mov	r2, r3
 80102d4:	4b67      	ldr	r3, [pc, #412]	; (8010474 <tcp_listen_input+0x1e0>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102da:	4b67      	ldr	r3, [pc, #412]	; (8010478 <tcp_listen_input+0x1e4>)
 80102dc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102de:	885b      	ldrh	r3, [r3, #2]
 80102e0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102e2:	4a65      	ldr	r2, [pc, #404]	; (8010478 <tcp_listen_input+0x1e4>)
 80102e4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102e6:	8812      	ldrh	r2, [r2, #0]
 80102e8:	b292      	uxth	r2, r2
 80102ea:	9202      	str	r2, [sp, #8]
 80102ec:	9301      	str	r3, [sp, #4]
 80102ee:	4b63      	ldr	r3, [pc, #396]	; (801047c <tcp_listen_input+0x1e8>)
 80102f0:	9300      	str	r3, [sp, #0]
 80102f2:	4b63      	ldr	r3, [pc, #396]	; (8010480 <tcp_listen_input+0x1ec>)
 80102f4:	4602      	mov	r2, r0
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f002 ff7e 	bl	80131f8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80102fc:	e0a9      	b.n	8010452 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80102fe:	4b57      	ldr	r3, [pc, #348]	; (801045c <tcp_listen_input+0x1c8>)
 8010300:	781b      	ldrb	r3, [r3, #0]
 8010302:	f003 0302 	and.w	r3, r3, #2
 8010306:	2b00      	cmp	r3, #0
 8010308:	f000 80a3 	beq.w	8010452 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	7d5b      	ldrb	r3, [r3, #21]
 8010310:	4618      	mov	r0, r3
 8010312:	f7ff f929 	bl	800f568 <tcp_alloc>
 8010316:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d111      	bne.n	8010342 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	699b      	ldr	r3, [r3, #24]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d00a      	beq.n	801033c <tcp_listen_input+0xa8>
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	699b      	ldr	r3, [r3, #24]
 801032a:	687a      	ldr	r2, [r7, #4]
 801032c:	6910      	ldr	r0, [r2, #16]
 801032e:	f04f 32ff 	mov.w	r2, #4294967295
 8010332:	2100      	movs	r1, #0
 8010334:	4798      	blx	r3
 8010336:	4603      	mov	r3, r0
 8010338:	73bb      	strb	r3, [r7, #14]
      return;
 801033a:	e08b      	b.n	8010454 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801033c:	23f0      	movs	r3, #240	; 0xf0
 801033e:	73bb      	strb	r3, [r7, #14]
      return;
 8010340:	e088      	b.n	8010454 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010342:	4b50      	ldr	r3, [pc, #320]	; (8010484 <tcp_listen_input+0x1f0>)
 8010344:	695a      	ldr	r2, [r3, #20]
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801034a:	4b4e      	ldr	r3, [pc, #312]	; (8010484 <tcp_listen_input+0x1f0>)
 801034c:	691a      	ldr	r2, [r3, #16]
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	8ada      	ldrh	r2, [r3, #22]
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801035a:	4b47      	ldr	r3, [pc, #284]	; (8010478 <tcp_listen_input+0x1e4>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	881b      	ldrh	r3, [r3, #0]
 8010360:	b29a      	uxth	r2, r3
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	2203      	movs	r2, #3
 801036a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801036c:	4b41      	ldr	r3, [pc, #260]	; (8010474 <tcp_listen_input+0x1e0>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	1c5a      	adds	r2, r3, #1
 8010372:	697b      	ldr	r3, [r7, #20]
 8010374:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801037e:	6978      	ldr	r0, [r7, #20]
 8010380:	f7ff fa5a 	bl	800f838 <tcp_next_iss>
 8010384:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	693a      	ldr	r2, [r7, #16]
 801038a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	693a      	ldr	r2, [r7, #16]
 8010390:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010392:	697b      	ldr	r3, [r7, #20]
 8010394:	693a      	ldr	r2, [r7, #16]
 8010396:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	693a      	ldr	r2, [r7, #16]
 801039c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801039e:	4b35      	ldr	r3, [pc, #212]	; (8010474 <tcp_listen_input+0x1e0>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	1e5a      	subs	r2, r3, #1
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	691a      	ldr	r2, [r3, #16]
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	687a      	ldr	r2, [r7, #4]
 80103b4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	7a5b      	ldrb	r3, [r3, #9]
 80103ba:	f003 030c 	and.w	r3, r3, #12
 80103be:	b2da      	uxtb	r2, r3
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	7a1a      	ldrb	r2, [r3, #8]
 80103c8:	697b      	ldr	r3, [r7, #20]
 80103ca:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80103cc:	4b2e      	ldr	r3, [pc, #184]	; (8010488 <tcp_listen_input+0x1f4>)
 80103ce:	681a      	ldr	r2, [r3, #0]
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	60da      	str	r2, [r3, #12]
 80103d4:	4a2c      	ldr	r2, [pc, #176]	; (8010488 <tcp_listen_input+0x1f4>)
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	6013      	str	r3, [r2, #0]
 80103da:	f003 f8cf 	bl	801357c <tcp_timer_needed>
 80103de:	4b2b      	ldr	r3, [pc, #172]	; (801048c <tcp_listen_input+0x1f8>)
 80103e0:	2201      	movs	r2, #1
 80103e2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80103e4:	6978      	ldr	r0, [r7, #20]
 80103e6:	f001 fd8d 	bl	8011f04 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80103ea:	4b23      	ldr	r3, [pc, #140]	; (8010478 <tcp_listen_input+0x1e4>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	89db      	ldrh	r3, [r3, #14]
 80103f0:	b29a      	uxth	r2, r3
 80103f2:	697b      	ldr	r3, [r7, #20]
 80103f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80103fe:	697b      	ldr	r3, [r7, #20]
 8010400:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010404:	697b      	ldr	r3, [r7, #20]
 8010406:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010408:	697b      	ldr	r3, [r7, #20]
 801040a:	3304      	adds	r3, #4
 801040c:	4618      	mov	r0, r3
 801040e:	f004 fcc3 	bl	8014d98 <ip4_route>
 8010412:	4601      	mov	r1, r0
 8010414:	697b      	ldr	r3, [r7, #20]
 8010416:	3304      	adds	r3, #4
 8010418:	461a      	mov	r2, r3
 801041a:	4620      	mov	r0, r4
 801041c:	f7ff fa32 	bl	800f884 <tcp_eff_send_mss_netif>
 8010420:	4603      	mov	r3, r0
 8010422:	461a      	mov	r2, r3
 8010424:	697b      	ldr	r3, [r7, #20]
 8010426:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010428:	2112      	movs	r1, #18
 801042a:	6978      	ldr	r0, [r7, #20]
 801042c:	f002 f842 	bl	80124b4 <tcp_enqueue_flags>
 8010430:	4603      	mov	r3, r0
 8010432:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d004      	beq.n	8010446 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801043c:	2100      	movs	r1, #0
 801043e:	6978      	ldr	r0, [r7, #20]
 8010440:	f7fe f980 	bl	800e744 <tcp_abandon>
      return;
 8010444:	e006      	b.n	8010454 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010446:	6978      	ldr	r0, [r7, #20]
 8010448:	f002 f922 	bl	8012690 <tcp_output>
  return;
 801044c:	e001      	b.n	8010452 <tcp_listen_input+0x1be>
    return;
 801044e:	bf00      	nop
 8010450:	e000      	b.n	8010454 <tcp_listen_input+0x1c0>
  return;
 8010452:	bf00      	nop
}
 8010454:	371c      	adds	r7, #28
 8010456:	46bd      	mov	sp, r7
 8010458:	bd90      	pop	{r4, r7, pc}
 801045a:	bf00      	nop
 801045c:	20004270 	.word	0x20004270
 8010460:	080192f0 	.word	0x080192f0
 8010464:	080194e8 	.word	0x080194e8
 8010468:	0801933c 	.word	0x0801933c
 801046c:	20004268 	.word	0x20004268
 8010470:	2000426e 	.word	0x2000426e
 8010474:	20004264 	.word	0x20004264
 8010478:	20004254 	.word	0x20004254
 801047c:	200079f8 	.word	0x200079f8
 8010480:	200079fc 	.word	0x200079fc
 8010484:	200079e8 	.word	0x200079e8
 8010488:	2000b0fc 	.word	0x2000b0fc
 801048c:	2000b0f8 	.word	0x2000b0f8

08010490 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b086      	sub	sp, #24
 8010494:	af04      	add	r7, sp, #16
 8010496:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010498:	4b2f      	ldr	r3, [pc, #188]	; (8010558 <tcp_timewait_input+0xc8>)
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	f003 0304 	and.w	r3, r3, #4
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d153      	bne.n	801054c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d106      	bne.n	80104b8 <tcp_timewait_input+0x28>
 80104aa:	4b2c      	ldr	r3, [pc, #176]	; (801055c <tcp_timewait_input+0xcc>)
 80104ac:	f240 22ee 	movw	r2, #750	; 0x2ee
 80104b0:	492b      	ldr	r1, [pc, #172]	; (8010560 <tcp_timewait_input+0xd0>)
 80104b2:	482c      	ldr	r0, [pc, #176]	; (8010564 <tcp_timewait_input+0xd4>)
 80104b4:	f006 fcb6 	bl	8016e24 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80104b8:	4b27      	ldr	r3, [pc, #156]	; (8010558 <tcp_timewait_input+0xc8>)
 80104ba:	781b      	ldrb	r3, [r3, #0]
 80104bc:	f003 0302 	and.w	r3, r3, #2
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d02a      	beq.n	801051a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80104c4:	4b28      	ldr	r3, [pc, #160]	; (8010568 <tcp_timewait_input+0xd8>)
 80104c6:	681a      	ldr	r2, [r3, #0]
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104cc:	1ad3      	subs	r3, r2, r3
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	db2d      	blt.n	801052e <tcp_timewait_input+0x9e>
 80104d2:	4b25      	ldr	r3, [pc, #148]	; (8010568 <tcp_timewait_input+0xd8>)
 80104d4:	681a      	ldr	r2, [r3, #0]
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104da:	6879      	ldr	r1, [r7, #4]
 80104dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80104de:	440b      	add	r3, r1
 80104e0:	1ad3      	subs	r3, r2, r3
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	dc23      	bgt.n	801052e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104e6:	4b21      	ldr	r3, [pc, #132]	; (801056c <tcp_timewait_input+0xdc>)
 80104e8:	6819      	ldr	r1, [r3, #0]
 80104ea:	4b21      	ldr	r3, [pc, #132]	; (8010570 <tcp_timewait_input+0xe0>)
 80104ec:	881b      	ldrh	r3, [r3, #0]
 80104ee:	461a      	mov	r2, r3
 80104f0:	4b1d      	ldr	r3, [pc, #116]	; (8010568 <tcp_timewait_input+0xd8>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104f6:	4b1f      	ldr	r3, [pc, #124]	; (8010574 <tcp_timewait_input+0xe4>)
 80104f8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104fa:	885b      	ldrh	r3, [r3, #2]
 80104fc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104fe:	4a1d      	ldr	r2, [pc, #116]	; (8010574 <tcp_timewait_input+0xe4>)
 8010500:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010502:	8812      	ldrh	r2, [r2, #0]
 8010504:	b292      	uxth	r2, r2
 8010506:	9202      	str	r2, [sp, #8]
 8010508:	9301      	str	r3, [sp, #4]
 801050a:	4b1b      	ldr	r3, [pc, #108]	; (8010578 <tcp_timewait_input+0xe8>)
 801050c:	9300      	str	r3, [sp, #0]
 801050e:	4b1b      	ldr	r3, [pc, #108]	; (801057c <tcp_timewait_input+0xec>)
 8010510:	4602      	mov	r2, r0
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f002 fe70 	bl	80131f8 <tcp_rst>
      return;
 8010518:	e01b      	b.n	8010552 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801051a:	4b0f      	ldr	r3, [pc, #60]	; (8010558 <tcp_timewait_input+0xc8>)
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	f003 0301 	and.w	r3, r3, #1
 8010522:	2b00      	cmp	r3, #0
 8010524:	d003      	beq.n	801052e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010526:	4b16      	ldr	r3, [pc, #88]	; (8010580 <tcp_timewait_input+0xf0>)
 8010528:	681a      	ldr	r2, [r3, #0]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801052e:	4b10      	ldr	r3, [pc, #64]	; (8010570 <tcp_timewait_input+0xe0>)
 8010530:	881b      	ldrh	r3, [r3, #0]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d00c      	beq.n	8010550 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	8b5b      	ldrh	r3, [r3, #26]
 801053a:	f043 0302 	orr.w	r3, r3, #2
 801053e:	b29a      	uxth	r2, r3
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f002 f8a3 	bl	8012690 <tcp_output>
  }
  return;
 801054a:	e001      	b.n	8010550 <tcp_timewait_input+0xc0>
    return;
 801054c:	bf00      	nop
 801054e:	e000      	b.n	8010552 <tcp_timewait_input+0xc2>
  return;
 8010550:	bf00      	nop
}
 8010552:	3708      	adds	r7, #8
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}
 8010558:	20004270 	.word	0x20004270
 801055c:	080192f0 	.word	0x080192f0
 8010560:	08019508 	.word	0x08019508
 8010564:	0801933c 	.word	0x0801933c
 8010568:	20004264 	.word	0x20004264
 801056c:	20004268 	.word	0x20004268
 8010570:	2000426e 	.word	0x2000426e
 8010574:	20004254 	.word	0x20004254
 8010578:	200079f8 	.word	0x200079f8
 801057c:	200079fc 	.word	0x200079fc
 8010580:	2000b100 	.word	0x2000b100

08010584 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010584:	b590      	push	{r4, r7, lr}
 8010586:	b08d      	sub	sp, #52	; 0x34
 8010588:	af04      	add	r7, sp, #16
 801058a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801058c:	2300      	movs	r3, #0
 801058e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010590:	2300      	movs	r3, #0
 8010592:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d106      	bne.n	80105a8 <tcp_process+0x24>
 801059a:	4ba5      	ldr	r3, [pc, #660]	; (8010830 <tcp_process+0x2ac>)
 801059c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80105a0:	49a4      	ldr	r1, [pc, #656]	; (8010834 <tcp_process+0x2b0>)
 80105a2:	48a5      	ldr	r0, [pc, #660]	; (8010838 <tcp_process+0x2b4>)
 80105a4:	f006 fc3e 	bl	8016e24 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80105a8:	4ba4      	ldr	r3, [pc, #656]	; (801083c <tcp_process+0x2b8>)
 80105aa:	781b      	ldrb	r3, [r3, #0]
 80105ac:	f003 0304 	and.w	r3, r3, #4
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d04e      	beq.n	8010652 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	7d1b      	ldrb	r3, [r3, #20]
 80105b8:	2b02      	cmp	r3, #2
 80105ba:	d108      	bne.n	80105ce <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105c0:	4b9f      	ldr	r3, [pc, #636]	; (8010840 <tcp_process+0x2bc>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d123      	bne.n	8010610 <tcp_process+0x8c>
        acceptable = 1;
 80105c8:	2301      	movs	r3, #1
 80105ca:	76fb      	strb	r3, [r7, #27]
 80105cc:	e020      	b.n	8010610 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105d2:	4b9c      	ldr	r3, [pc, #624]	; (8010844 <tcp_process+0x2c0>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	429a      	cmp	r2, r3
 80105d8:	d102      	bne.n	80105e0 <tcp_process+0x5c>
        acceptable = 1;
 80105da:	2301      	movs	r3, #1
 80105dc:	76fb      	strb	r3, [r7, #27]
 80105de:	e017      	b.n	8010610 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80105e0:	4b98      	ldr	r3, [pc, #608]	; (8010844 <tcp_process+0x2c0>)
 80105e2:	681a      	ldr	r2, [r3, #0]
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105e8:	1ad3      	subs	r3, r2, r3
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	db10      	blt.n	8010610 <tcp_process+0x8c>
 80105ee:	4b95      	ldr	r3, [pc, #596]	; (8010844 <tcp_process+0x2c0>)
 80105f0:	681a      	ldr	r2, [r3, #0]
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105f6:	6879      	ldr	r1, [r7, #4]
 80105f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80105fa:	440b      	add	r3, r1
 80105fc:	1ad3      	subs	r3, r2, r3
 80105fe:	2b00      	cmp	r3, #0
 8010600:	dc06      	bgt.n	8010610 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	8b5b      	ldrh	r3, [r3, #26]
 8010606:	f043 0302 	orr.w	r3, r3, #2
 801060a:	b29a      	uxth	r2, r3
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010610:	7efb      	ldrb	r3, [r7, #27]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d01b      	beq.n	801064e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	7d1b      	ldrb	r3, [r3, #20]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d106      	bne.n	801062c <tcp_process+0xa8>
 801061e:	4b84      	ldr	r3, [pc, #528]	; (8010830 <tcp_process+0x2ac>)
 8010620:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010624:	4988      	ldr	r1, [pc, #544]	; (8010848 <tcp_process+0x2c4>)
 8010626:	4884      	ldr	r0, [pc, #528]	; (8010838 <tcp_process+0x2b4>)
 8010628:	f006 fbfc 	bl	8016e24 <iprintf>
      recv_flags |= TF_RESET;
 801062c:	4b87      	ldr	r3, [pc, #540]	; (801084c <tcp_process+0x2c8>)
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	f043 0308 	orr.w	r3, r3, #8
 8010634:	b2da      	uxtb	r2, r3
 8010636:	4b85      	ldr	r3, [pc, #532]	; (801084c <tcp_process+0x2c8>)
 8010638:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	8b5b      	ldrh	r3, [r3, #26]
 801063e:	f023 0301 	bic.w	r3, r3, #1
 8010642:	b29a      	uxth	r2, r3
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010648:	f06f 030d 	mvn.w	r3, #13
 801064c:	e37a      	b.n	8010d44 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801064e:	2300      	movs	r3, #0
 8010650:	e378      	b.n	8010d44 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010652:	4b7a      	ldr	r3, [pc, #488]	; (801083c <tcp_process+0x2b8>)
 8010654:	781b      	ldrb	r3, [r3, #0]
 8010656:	f003 0302 	and.w	r3, r3, #2
 801065a:	2b00      	cmp	r3, #0
 801065c:	d010      	beq.n	8010680 <tcp_process+0xfc>
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	7d1b      	ldrb	r3, [r3, #20]
 8010662:	2b02      	cmp	r3, #2
 8010664:	d00c      	beq.n	8010680 <tcp_process+0xfc>
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	7d1b      	ldrb	r3, [r3, #20]
 801066a:	2b03      	cmp	r3, #3
 801066c:	d008      	beq.n	8010680 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	8b5b      	ldrh	r3, [r3, #26]
 8010672:	f043 0302 	orr.w	r3, r3, #2
 8010676:	b29a      	uxth	r2, r3
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801067c:	2300      	movs	r3, #0
 801067e:	e361      	b.n	8010d44 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	8b5b      	ldrh	r3, [r3, #26]
 8010684:	f003 0310 	and.w	r3, r3, #16
 8010688:	2b00      	cmp	r3, #0
 801068a:	d103      	bne.n	8010694 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801068c:	4b70      	ldr	r3, [pc, #448]	; (8010850 <tcp_process+0x2cc>)
 801068e:	681a      	ldr	r2, [r3, #0]
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2200      	movs	r2, #0
 8010698:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2200      	movs	r2, #0
 80106a0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f001 fc2d 	bl	8011f04 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	7d1b      	ldrb	r3, [r3, #20]
 80106ae:	3b02      	subs	r3, #2
 80106b0:	2b07      	cmp	r3, #7
 80106b2:	f200 8337 	bhi.w	8010d24 <tcp_process+0x7a0>
 80106b6:	a201      	add	r2, pc, #4	; (adr r2, 80106bc <tcp_process+0x138>)
 80106b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106bc:	080106dd 	.word	0x080106dd
 80106c0:	0801090d 	.word	0x0801090d
 80106c4:	08010a85 	.word	0x08010a85
 80106c8:	08010aaf 	.word	0x08010aaf
 80106cc:	08010bd3 	.word	0x08010bd3
 80106d0:	08010a85 	.word	0x08010a85
 80106d4:	08010c5f 	.word	0x08010c5f
 80106d8:	08010cef 	.word	0x08010cef
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80106dc:	4b57      	ldr	r3, [pc, #348]	; (801083c <tcp_process+0x2b8>)
 80106de:	781b      	ldrb	r3, [r3, #0]
 80106e0:	f003 0310 	and.w	r3, r3, #16
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	f000 80e4 	beq.w	80108b2 <tcp_process+0x32e>
 80106ea:	4b54      	ldr	r3, [pc, #336]	; (801083c <tcp_process+0x2b8>)
 80106ec:	781b      	ldrb	r3, [r3, #0]
 80106ee:	f003 0302 	and.w	r3, r3, #2
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	f000 80dd 	beq.w	80108b2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106fc:	1c5a      	adds	r2, r3, #1
 80106fe:	4b50      	ldr	r3, [pc, #320]	; (8010840 <tcp_process+0x2bc>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	429a      	cmp	r2, r3
 8010704:	f040 80d5 	bne.w	80108b2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010708:	4b4e      	ldr	r3, [pc, #312]	; (8010844 <tcp_process+0x2c0>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	1c5a      	adds	r2, r3, #1
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801071a:	4b49      	ldr	r3, [pc, #292]	; (8010840 <tcp_process+0x2bc>)
 801071c:	681a      	ldr	r2, [r3, #0]
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010722:	4b4c      	ldr	r3, [pc, #304]	; (8010854 <tcp_process+0x2d0>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	89db      	ldrh	r3, [r3, #14]
 8010728:	b29a      	uxth	r2, r3
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801073c:	4b41      	ldr	r3, [pc, #260]	; (8010844 <tcp_process+0x2c0>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	1e5a      	subs	r2, r3, #1
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2204      	movs	r2, #4
 801074a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	3304      	adds	r3, #4
 8010754:	4618      	mov	r0, r3
 8010756:	f004 fb1f 	bl	8014d98 <ip4_route>
 801075a:	4601      	mov	r1, r0
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	3304      	adds	r3, #4
 8010760:	461a      	mov	r2, r3
 8010762:	4620      	mov	r0, r4
 8010764:	f7ff f88e 	bl	800f884 <tcp_eff_send_mss_netif>
 8010768:	4603      	mov	r3, r0
 801076a:	461a      	mov	r2, r3
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010774:	009a      	lsls	r2, r3, #2
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801077a:	005b      	lsls	r3, r3, #1
 801077c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010780:	428b      	cmp	r3, r1
 8010782:	bf38      	it	cc
 8010784:	460b      	movcc	r3, r1
 8010786:	429a      	cmp	r2, r3
 8010788:	d204      	bcs.n	8010794 <tcp_process+0x210>
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801078e:	009b      	lsls	r3, r3, #2
 8010790:	b29b      	uxth	r3, r3
 8010792:	e00d      	b.n	80107b0 <tcp_process+0x22c>
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010798:	005b      	lsls	r3, r3, #1
 801079a:	f241 121c 	movw	r2, #4380	; 0x111c
 801079e:	4293      	cmp	r3, r2
 80107a0:	d904      	bls.n	80107ac <tcp_process+0x228>
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107a6:	005b      	lsls	r3, r3, #1
 80107a8:	b29b      	uxth	r3, r3
 80107aa:	e001      	b.n	80107b0 <tcp_process+0x22c>
 80107ac:	f241 131c 	movw	r3, #4380	; 0x111c
 80107b0:	687a      	ldr	r2, [r7, #4]
 80107b2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d106      	bne.n	80107ce <tcp_process+0x24a>
 80107c0:	4b1b      	ldr	r3, [pc, #108]	; (8010830 <tcp_process+0x2ac>)
 80107c2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80107c6:	4924      	ldr	r1, [pc, #144]	; (8010858 <tcp_process+0x2d4>)
 80107c8:	481b      	ldr	r0, [pc, #108]	; (8010838 <tcp_process+0x2b4>)
 80107ca:	f006 fb2b 	bl	8016e24 <iprintf>
        --pcb->snd_queuelen;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80107d4:	3b01      	subs	r3, #1
 80107d6:	b29a      	uxth	r2, r3
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107e2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80107e4:	69fb      	ldr	r3, [r7, #28]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d111      	bne.n	801080e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107ee:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80107f0:	69fb      	ldr	r3, [r7, #28]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d106      	bne.n	8010804 <tcp_process+0x280>
 80107f6:	4b0e      	ldr	r3, [pc, #56]	; (8010830 <tcp_process+0x2ac>)
 80107f8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80107fc:	4917      	ldr	r1, [pc, #92]	; (801085c <tcp_process+0x2d8>)
 80107fe:	480e      	ldr	r0, [pc, #56]	; (8010838 <tcp_process+0x2b4>)
 8010800:	f006 fb10 	bl	8016e24 <iprintf>
          pcb->unsent = rseg->next;
 8010804:	69fb      	ldr	r3, [r7, #28]
 8010806:	681a      	ldr	r2, [r3, #0]
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	66da      	str	r2, [r3, #108]	; 0x6c
 801080c:	e003      	b.n	8010816 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801080e:	69fb      	ldr	r3, [r7, #28]
 8010810:	681a      	ldr	r2, [r3, #0]
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010816:	69f8      	ldr	r0, [r7, #28]
 8010818:	f7fe fd3d 	bl	800f296 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010820:	2b00      	cmp	r3, #0
 8010822:	d11d      	bne.n	8010860 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801082a:	861a      	strh	r2, [r3, #48]	; 0x30
 801082c:	e01f      	b.n	801086e <tcp_process+0x2ea>
 801082e:	bf00      	nop
 8010830:	080192f0 	.word	0x080192f0
 8010834:	08019528 	.word	0x08019528
 8010838:	0801933c 	.word	0x0801933c
 801083c:	20004270 	.word	0x20004270
 8010840:	20004268 	.word	0x20004268
 8010844:	20004264 	.word	0x20004264
 8010848:	08019544 	.word	0x08019544
 801084c:	20004271 	.word	0x20004271
 8010850:	2000b100 	.word	0x2000b100
 8010854:	20004254 	.word	0x20004254
 8010858:	08019564 	.word	0x08019564
 801085c:	0801957c 	.word	0x0801957c
        } else {
          pcb->rtime = 0;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2200      	movs	r2, #0
 8010864:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2200      	movs	r2, #0
 801086a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010874:	2b00      	cmp	r3, #0
 8010876:	d00a      	beq.n	801088e <tcp_process+0x30a>
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801087e:	687a      	ldr	r2, [r7, #4]
 8010880:	6910      	ldr	r0, [r2, #16]
 8010882:	2200      	movs	r2, #0
 8010884:	6879      	ldr	r1, [r7, #4]
 8010886:	4798      	blx	r3
 8010888:	4603      	mov	r3, r0
 801088a:	76bb      	strb	r3, [r7, #26]
 801088c:	e001      	b.n	8010892 <tcp_process+0x30e>
 801088e:	2300      	movs	r3, #0
 8010890:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010892:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010896:	f113 0f0d 	cmn.w	r3, #13
 801089a:	d102      	bne.n	80108a2 <tcp_process+0x31e>
          return ERR_ABRT;
 801089c:	f06f 030c 	mvn.w	r3, #12
 80108a0:	e250      	b.n	8010d44 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	8b5b      	ldrh	r3, [r3, #26]
 80108a6:	f043 0302 	orr.w	r3, r3, #2
 80108aa:	b29a      	uxth	r2, r3
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80108b0:	e23a      	b.n	8010d28 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80108b2:	4b9d      	ldr	r3, [pc, #628]	; (8010b28 <tcp_process+0x5a4>)
 80108b4:	781b      	ldrb	r3, [r3, #0]
 80108b6:	f003 0310 	and.w	r3, r3, #16
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	f000 8234 	beq.w	8010d28 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108c0:	4b9a      	ldr	r3, [pc, #616]	; (8010b2c <tcp_process+0x5a8>)
 80108c2:	6819      	ldr	r1, [r3, #0]
 80108c4:	4b9a      	ldr	r3, [pc, #616]	; (8010b30 <tcp_process+0x5ac>)
 80108c6:	881b      	ldrh	r3, [r3, #0]
 80108c8:	461a      	mov	r2, r3
 80108ca:	4b9a      	ldr	r3, [pc, #616]	; (8010b34 <tcp_process+0x5b0>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108d0:	4b99      	ldr	r3, [pc, #612]	; (8010b38 <tcp_process+0x5b4>)
 80108d2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108d4:	885b      	ldrh	r3, [r3, #2]
 80108d6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108d8:	4a97      	ldr	r2, [pc, #604]	; (8010b38 <tcp_process+0x5b4>)
 80108da:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108dc:	8812      	ldrh	r2, [r2, #0]
 80108de:	b292      	uxth	r2, r2
 80108e0:	9202      	str	r2, [sp, #8]
 80108e2:	9301      	str	r3, [sp, #4]
 80108e4:	4b95      	ldr	r3, [pc, #596]	; (8010b3c <tcp_process+0x5b8>)
 80108e6:	9300      	str	r3, [sp, #0]
 80108e8:	4b95      	ldr	r3, [pc, #596]	; (8010b40 <tcp_process+0x5bc>)
 80108ea:	4602      	mov	r2, r0
 80108ec:	6878      	ldr	r0, [r7, #4]
 80108ee:	f002 fc83 	bl	80131f8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80108f8:	2b05      	cmp	r3, #5
 80108fa:	f200 8215 	bhi.w	8010d28 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2200      	movs	r2, #0
 8010902:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f002 fa4d 	bl	8012da4 <tcp_rexmit_rto>
      break;
 801090a:	e20d      	b.n	8010d28 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801090c:	4b86      	ldr	r3, [pc, #536]	; (8010b28 <tcp_process+0x5a4>)
 801090e:	781b      	ldrb	r3, [r3, #0]
 8010910:	f003 0310 	and.w	r3, r3, #16
 8010914:	2b00      	cmp	r3, #0
 8010916:	f000 80a1 	beq.w	8010a5c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801091a:	4b84      	ldr	r3, [pc, #528]	; (8010b2c <tcp_process+0x5a8>)
 801091c:	681a      	ldr	r2, [r3, #0]
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010922:	1ad3      	subs	r3, r2, r3
 8010924:	3b01      	subs	r3, #1
 8010926:	2b00      	cmp	r3, #0
 8010928:	db7e      	blt.n	8010a28 <tcp_process+0x4a4>
 801092a:	4b80      	ldr	r3, [pc, #512]	; (8010b2c <tcp_process+0x5a8>)
 801092c:	681a      	ldr	r2, [r3, #0]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010932:	1ad3      	subs	r3, r2, r3
 8010934:	2b00      	cmp	r3, #0
 8010936:	dc77      	bgt.n	8010a28 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2204      	movs	r2, #4
 801093c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010942:	2b00      	cmp	r3, #0
 8010944:	d102      	bne.n	801094c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010946:	23fa      	movs	r3, #250	; 0xfa
 8010948:	76bb      	strb	r3, [r7, #26]
 801094a:	e01d      	b.n	8010988 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010950:	699b      	ldr	r3, [r3, #24]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d106      	bne.n	8010964 <tcp_process+0x3e0>
 8010956:	4b7b      	ldr	r3, [pc, #492]	; (8010b44 <tcp_process+0x5c0>)
 8010958:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801095c:	497a      	ldr	r1, [pc, #488]	; (8010b48 <tcp_process+0x5c4>)
 801095e:	487b      	ldr	r0, [pc, #492]	; (8010b4c <tcp_process+0x5c8>)
 8010960:	f006 fa60 	bl	8016e24 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010968:	699b      	ldr	r3, [r3, #24]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d00a      	beq.n	8010984 <tcp_process+0x400>
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010972:	699b      	ldr	r3, [r3, #24]
 8010974:	687a      	ldr	r2, [r7, #4]
 8010976:	6910      	ldr	r0, [r2, #16]
 8010978:	2200      	movs	r2, #0
 801097a:	6879      	ldr	r1, [r7, #4]
 801097c:	4798      	blx	r3
 801097e:	4603      	mov	r3, r0
 8010980:	76bb      	strb	r3, [r7, #26]
 8010982:	e001      	b.n	8010988 <tcp_process+0x404>
 8010984:	23f0      	movs	r3, #240	; 0xf0
 8010986:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010988:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d00a      	beq.n	80109a6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010990:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010994:	f113 0f0d 	cmn.w	r3, #13
 8010998:	d002      	beq.n	80109a0 <tcp_process+0x41c>
              tcp_abort(pcb);
 801099a:	6878      	ldr	r0, [r7, #4]
 801099c:	f7fd ff90 	bl	800e8c0 <tcp_abort>
            }
            return ERR_ABRT;
 80109a0:	f06f 030c 	mvn.w	r3, #12
 80109a4:	e1ce      	b.n	8010d44 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80109a6:	6878      	ldr	r0, [r7, #4]
 80109a8:	f000 fae0 	bl	8010f6c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80109ac:	4b68      	ldr	r3, [pc, #416]	; (8010b50 <tcp_process+0x5cc>)
 80109ae:	881b      	ldrh	r3, [r3, #0]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d005      	beq.n	80109c0 <tcp_process+0x43c>
            recv_acked--;
 80109b4:	4b66      	ldr	r3, [pc, #408]	; (8010b50 <tcp_process+0x5cc>)
 80109b6:	881b      	ldrh	r3, [r3, #0]
 80109b8:	3b01      	subs	r3, #1
 80109ba:	b29a      	uxth	r2, r3
 80109bc:	4b64      	ldr	r3, [pc, #400]	; (8010b50 <tcp_process+0x5cc>)
 80109be:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109c4:	009a      	lsls	r2, r3, #2
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109ca:	005b      	lsls	r3, r3, #1
 80109cc:	f241 111c 	movw	r1, #4380	; 0x111c
 80109d0:	428b      	cmp	r3, r1
 80109d2:	bf38      	it	cc
 80109d4:	460b      	movcc	r3, r1
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d204      	bcs.n	80109e4 <tcp_process+0x460>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109de:	009b      	lsls	r3, r3, #2
 80109e0:	b29b      	uxth	r3, r3
 80109e2:	e00d      	b.n	8010a00 <tcp_process+0x47c>
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109e8:	005b      	lsls	r3, r3, #1
 80109ea:	f241 121c 	movw	r2, #4380	; 0x111c
 80109ee:	4293      	cmp	r3, r2
 80109f0:	d904      	bls.n	80109fc <tcp_process+0x478>
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109f6:	005b      	lsls	r3, r3, #1
 80109f8:	b29b      	uxth	r3, r3
 80109fa:	e001      	b.n	8010a00 <tcp_process+0x47c>
 80109fc:	f241 131c 	movw	r3, #4380	; 0x111c
 8010a00:	687a      	ldr	r2, [r7, #4]
 8010a02:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010a06:	4b53      	ldr	r3, [pc, #332]	; (8010b54 <tcp_process+0x5d0>)
 8010a08:	781b      	ldrb	r3, [r3, #0]
 8010a0a:	f003 0320 	and.w	r3, r3, #32
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d037      	beq.n	8010a82 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	8b5b      	ldrh	r3, [r3, #26]
 8010a16:	f043 0302 	orr.w	r3, r3, #2
 8010a1a:	b29a      	uxth	r2, r3
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2207      	movs	r2, #7
 8010a24:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010a26:	e02c      	b.n	8010a82 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a28:	4b40      	ldr	r3, [pc, #256]	; (8010b2c <tcp_process+0x5a8>)
 8010a2a:	6819      	ldr	r1, [r3, #0]
 8010a2c:	4b40      	ldr	r3, [pc, #256]	; (8010b30 <tcp_process+0x5ac>)
 8010a2e:	881b      	ldrh	r3, [r3, #0]
 8010a30:	461a      	mov	r2, r3
 8010a32:	4b40      	ldr	r3, [pc, #256]	; (8010b34 <tcp_process+0x5b0>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a38:	4b3f      	ldr	r3, [pc, #252]	; (8010b38 <tcp_process+0x5b4>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a3c:	885b      	ldrh	r3, [r3, #2]
 8010a3e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a40:	4a3d      	ldr	r2, [pc, #244]	; (8010b38 <tcp_process+0x5b4>)
 8010a42:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a44:	8812      	ldrh	r2, [r2, #0]
 8010a46:	b292      	uxth	r2, r2
 8010a48:	9202      	str	r2, [sp, #8]
 8010a4a:	9301      	str	r3, [sp, #4]
 8010a4c:	4b3b      	ldr	r3, [pc, #236]	; (8010b3c <tcp_process+0x5b8>)
 8010a4e:	9300      	str	r3, [sp, #0]
 8010a50:	4b3b      	ldr	r3, [pc, #236]	; (8010b40 <tcp_process+0x5bc>)
 8010a52:	4602      	mov	r2, r0
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	f002 fbcf 	bl	80131f8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010a5a:	e167      	b.n	8010d2c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010a5c:	4b32      	ldr	r3, [pc, #200]	; (8010b28 <tcp_process+0x5a4>)
 8010a5e:	781b      	ldrb	r3, [r3, #0]
 8010a60:	f003 0302 	and.w	r3, r3, #2
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	f000 8161 	beq.w	8010d2c <tcp_process+0x7a8>
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a6e:	1e5a      	subs	r2, r3, #1
 8010a70:	4b30      	ldr	r3, [pc, #192]	; (8010b34 <tcp_process+0x5b0>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	429a      	cmp	r2, r3
 8010a76:	f040 8159 	bne.w	8010d2c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f002 f9b4 	bl	8012de8 <tcp_rexmit>
      break;
 8010a80:	e154      	b.n	8010d2c <tcp_process+0x7a8>
 8010a82:	e153      	b.n	8010d2c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f000 fa71 	bl	8010f6c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010a8a:	4b32      	ldr	r3, [pc, #200]	; (8010b54 <tcp_process+0x5d0>)
 8010a8c:	781b      	ldrb	r3, [r3, #0]
 8010a8e:	f003 0320 	and.w	r3, r3, #32
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	f000 814c 	beq.w	8010d30 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	8b5b      	ldrh	r3, [r3, #26]
 8010a9c:	f043 0302 	orr.w	r3, r3, #2
 8010aa0:	b29a      	uxth	r2, r3
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2207      	movs	r2, #7
 8010aaa:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010aac:	e140      	b.n	8010d30 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	f000 fa5c 	bl	8010f6c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010ab4:	4b27      	ldr	r3, [pc, #156]	; (8010b54 <tcp_process+0x5d0>)
 8010ab6:	781b      	ldrb	r3, [r3, #0]
 8010ab8:	f003 0320 	and.w	r3, r3, #32
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d071      	beq.n	8010ba4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010ac0:	4b19      	ldr	r3, [pc, #100]	; (8010b28 <tcp_process+0x5a4>)
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	f003 0310 	and.w	r3, r3, #16
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d060      	beq.n	8010b8e <tcp_process+0x60a>
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ad0:	4b16      	ldr	r3, [pc, #88]	; (8010b2c <tcp_process+0x5a8>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	d15a      	bne.n	8010b8e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d156      	bne.n	8010b8e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	8b5b      	ldrh	r3, [r3, #26]
 8010ae4:	f043 0302 	orr.w	r3, r3, #2
 8010ae8:	b29a      	uxth	r2, r3
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f7fe fdbe 	bl	800f670 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010af4:	4b18      	ldr	r3, [pc, #96]	; (8010b58 <tcp_process+0x5d4>)
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	687a      	ldr	r2, [r7, #4]
 8010afa:	429a      	cmp	r2, r3
 8010afc:	d105      	bne.n	8010b0a <tcp_process+0x586>
 8010afe:	4b16      	ldr	r3, [pc, #88]	; (8010b58 <tcp_process+0x5d4>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	68db      	ldr	r3, [r3, #12]
 8010b04:	4a14      	ldr	r2, [pc, #80]	; (8010b58 <tcp_process+0x5d4>)
 8010b06:	6013      	str	r3, [r2, #0]
 8010b08:	e02e      	b.n	8010b68 <tcp_process+0x5e4>
 8010b0a:	4b13      	ldr	r3, [pc, #76]	; (8010b58 <tcp_process+0x5d4>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	617b      	str	r3, [r7, #20]
 8010b10:	e027      	b.n	8010b62 <tcp_process+0x5de>
 8010b12:	697b      	ldr	r3, [r7, #20]
 8010b14:	68db      	ldr	r3, [r3, #12]
 8010b16:	687a      	ldr	r2, [r7, #4]
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	d11f      	bne.n	8010b5c <tcp_process+0x5d8>
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	68da      	ldr	r2, [r3, #12]
 8010b20:	697b      	ldr	r3, [r7, #20]
 8010b22:	60da      	str	r2, [r3, #12]
 8010b24:	e020      	b.n	8010b68 <tcp_process+0x5e4>
 8010b26:	bf00      	nop
 8010b28:	20004270 	.word	0x20004270
 8010b2c:	20004268 	.word	0x20004268
 8010b30:	2000426e 	.word	0x2000426e
 8010b34:	20004264 	.word	0x20004264
 8010b38:	20004254 	.word	0x20004254
 8010b3c:	200079f8 	.word	0x200079f8
 8010b40:	200079fc 	.word	0x200079fc
 8010b44:	080192f0 	.word	0x080192f0
 8010b48:	08019590 	.word	0x08019590
 8010b4c:	0801933c 	.word	0x0801933c
 8010b50:	2000426c 	.word	0x2000426c
 8010b54:	20004271 	.word	0x20004271
 8010b58:	2000b0fc 	.word	0x2000b0fc
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	68db      	ldr	r3, [r3, #12]
 8010b60:	617b      	str	r3, [r7, #20]
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d1d4      	bne.n	8010b12 <tcp_process+0x58e>
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	60da      	str	r2, [r3, #12]
 8010b6e:	4b77      	ldr	r3, [pc, #476]	; (8010d4c <tcp_process+0x7c8>)
 8010b70:	2201      	movs	r2, #1
 8010b72:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	220a      	movs	r2, #10
 8010b78:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010b7a:	4b75      	ldr	r3, [pc, #468]	; (8010d50 <tcp_process+0x7cc>)
 8010b7c:	681a      	ldr	r2, [r3, #0]
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	60da      	str	r2, [r3, #12]
 8010b82:	4a73      	ldr	r2, [pc, #460]	; (8010d50 <tcp_process+0x7cc>)
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	6013      	str	r3, [r2, #0]
 8010b88:	f002 fcf8 	bl	801357c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010b8c:	e0d2      	b.n	8010d34 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	8b5b      	ldrh	r3, [r3, #26]
 8010b92:	f043 0302 	orr.w	r3, r3, #2
 8010b96:	b29a      	uxth	r2, r3
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2208      	movs	r2, #8
 8010ba0:	751a      	strb	r2, [r3, #20]
      break;
 8010ba2:	e0c7      	b.n	8010d34 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010ba4:	4b6b      	ldr	r3, [pc, #428]	; (8010d54 <tcp_process+0x7d0>)
 8010ba6:	781b      	ldrb	r3, [r3, #0]
 8010ba8:	f003 0310 	and.w	r3, r3, #16
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	f000 80c1 	beq.w	8010d34 <tcp_process+0x7b0>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010bb6:	4b68      	ldr	r3, [pc, #416]	; (8010d58 <tcp_process+0x7d4>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	f040 80ba 	bne.w	8010d34 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	f040 80b5 	bne.w	8010d34 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2206      	movs	r2, #6
 8010bce:	751a      	strb	r2, [r3, #20]
      break;
 8010bd0:	e0b0      	b.n	8010d34 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f000 f9ca 	bl	8010f6c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010bd8:	4b60      	ldr	r3, [pc, #384]	; (8010d5c <tcp_process+0x7d8>)
 8010bda:	781b      	ldrb	r3, [r3, #0]
 8010bdc:	f003 0320 	and.w	r3, r3, #32
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	f000 80a9 	beq.w	8010d38 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	8b5b      	ldrh	r3, [r3, #26]
 8010bea:	f043 0302 	orr.w	r3, r3, #2
 8010bee:	b29a      	uxth	r2, r3
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f7fe fd3b 	bl	800f670 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010bfa:	4b59      	ldr	r3, [pc, #356]	; (8010d60 <tcp_process+0x7dc>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	687a      	ldr	r2, [r7, #4]
 8010c00:	429a      	cmp	r2, r3
 8010c02:	d105      	bne.n	8010c10 <tcp_process+0x68c>
 8010c04:	4b56      	ldr	r3, [pc, #344]	; (8010d60 <tcp_process+0x7dc>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	68db      	ldr	r3, [r3, #12]
 8010c0a:	4a55      	ldr	r2, [pc, #340]	; (8010d60 <tcp_process+0x7dc>)
 8010c0c:	6013      	str	r3, [r2, #0]
 8010c0e:	e013      	b.n	8010c38 <tcp_process+0x6b4>
 8010c10:	4b53      	ldr	r3, [pc, #332]	; (8010d60 <tcp_process+0x7dc>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	613b      	str	r3, [r7, #16]
 8010c16:	e00c      	b.n	8010c32 <tcp_process+0x6ae>
 8010c18:	693b      	ldr	r3, [r7, #16]
 8010c1a:	68db      	ldr	r3, [r3, #12]
 8010c1c:	687a      	ldr	r2, [r7, #4]
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d104      	bne.n	8010c2c <tcp_process+0x6a8>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	68da      	ldr	r2, [r3, #12]
 8010c26:	693b      	ldr	r3, [r7, #16]
 8010c28:	60da      	str	r2, [r3, #12]
 8010c2a:	e005      	b.n	8010c38 <tcp_process+0x6b4>
 8010c2c:	693b      	ldr	r3, [r7, #16]
 8010c2e:	68db      	ldr	r3, [r3, #12]
 8010c30:	613b      	str	r3, [r7, #16]
 8010c32:	693b      	ldr	r3, [r7, #16]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d1ef      	bne.n	8010c18 <tcp_process+0x694>
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	60da      	str	r2, [r3, #12]
 8010c3e:	4b43      	ldr	r3, [pc, #268]	; (8010d4c <tcp_process+0x7c8>)
 8010c40:	2201      	movs	r2, #1
 8010c42:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	220a      	movs	r2, #10
 8010c48:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010c4a:	4b41      	ldr	r3, [pc, #260]	; (8010d50 <tcp_process+0x7cc>)
 8010c4c:	681a      	ldr	r2, [r3, #0]
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	60da      	str	r2, [r3, #12]
 8010c52:	4a3f      	ldr	r2, [pc, #252]	; (8010d50 <tcp_process+0x7cc>)
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6013      	str	r3, [r2, #0]
 8010c58:	f002 fc90 	bl	801357c <tcp_timer_needed>
      }
      break;
 8010c5c:	e06c      	b.n	8010d38 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f000 f984 	bl	8010f6c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010c64:	4b3b      	ldr	r3, [pc, #236]	; (8010d54 <tcp_process+0x7d0>)
 8010c66:	781b      	ldrb	r3, [r3, #0]
 8010c68:	f003 0310 	and.w	r3, r3, #16
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d065      	beq.n	8010d3c <tcp_process+0x7b8>
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010c74:	4b38      	ldr	r3, [pc, #224]	; (8010d58 <tcp_process+0x7d4>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	d15f      	bne.n	8010d3c <tcp_process+0x7b8>
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d15b      	bne.n	8010d3c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f7fe fcf3 	bl	800f670 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010c8a:	4b35      	ldr	r3, [pc, #212]	; (8010d60 <tcp_process+0x7dc>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	687a      	ldr	r2, [r7, #4]
 8010c90:	429a      	cmp	r2, r3
 8010c92:	d105      	bne.n	8010ca0 <tcp_process+0x71c>
 8010c94:	4b32      	ldr	r3, [pc, #200]	; (8010d60 <tcp_process+0x7dc>)
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	68db      	ldr	r3, [r3, #12]
 8010c9a:	4a31      	ldr	r2, [pc, #196]	; (8010d60 <tcp_process+0x7dc>)
 8010c9c:	6013      	str	r3, [r2, #0]
 8010c9e:	e013      	b.n	8010cc8 <tcp_process+0x744>
 8010ca0:	4b2f      	ldr	r3, [pc, #188]	; (8010d60 <tcp_process+0x7dc>)
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	60fb      	str	r3, [r7, #12]
 8010ca6:	e00c      	b.n	8010cc2 <tcp_process+0x73e>
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	68db      	ldr	r3, [r3, #12]
 8010cac:	687a      	ldr	r2, [r7, #4]
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	d104      	bne.n	8010cbc <tcp_process+0x738>
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	68da      	ldr	r2, [r3, #12]
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	60da      	str	r2, [r3, #12]
 8010cba:	e005      	b.n	8010cc8 <tcp_process+0x744>
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	68db      	ldr	r3, [r3, #12]
 8010cc0:	60fb      	str	r3, [r7, #12]
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d1ef      	bne.n	8010ca8 <tcp_process+0x724>
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2200      	movs	r2, #0
 8010ccc:	60da      	str	r2, [r3, #12]
 8010cce:	4b1f      	ldr	r3, [pc, #124]	; (8010d4c <tcp_process+0x7c8>)
 8010cd0:	2201      	movs	r2, #1
 8010cd2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	220a      	movs	r2, #10
 8010cd8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010cda:	4b1d      	ldr	r3, [pc, #116]	; (8010d50 <tcp_process+0x7cc>)
 8010cdc:	681a      	ldr	r2, [r3, #0]
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	60da      	str	r2, [r3, #12]
 8010ce2:	4a1b      	ldr	r2, [pc, #108]	; (8010d50 <tcp_process+0x7cc>)
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6013      	str	r3, [r2, #0]
 8010ce8:	f002 fc48 	bl	801357c <tcp_timer_needed>
      }
      break;
 8010cec:	e026      	b.n	8010d3c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010cee:	6878      	ldr	r0, [r7, #4]
 8010cf0:	f000 f93c 	bl	8010f6c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010cf4:	4b17      	ldr	r3, [pc, #92]	; (8010d54 <tcp_process+0x7d0>)
 8010cf6:	781b      	ldrb	r3, [r3, #0]
 8010cf8:	f003 0310 	and.w	r3, r3, #16
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d01f      	beq.n	8010d40 <tcp_process+0x7bc>
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010d04:	4b14      	ldr	r3, [pc, #80]	; (8010d58 <tcp_process+0x7d4>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	d119      	bne.n	8010d40 <tcp_process+0x7bc>
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d115      	bne.n	8010d40 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010d14:	4b11      	ldr	r3, [pc, #68]	; (8010d5c <tcp_process+0x7d8>)
 8010d16:	781b      	ldrb	r3, [r3, #0]
 8010d18:	f043 0310 	orr.w	r3, r3, #16
 8010d1c:	b2da      	uxtb	r2, r3
 8010d1e:	4b0f      	ldr	r3, [pc, #60]	; (8010d5c <tcp_process+0x7d8>)
 8010d20:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010d22:	e00d      	b.n	8010d40 <tcp_process+0x7bc>
    default:
      break;
 8010d24:	bf00      	nop
 8010d26:	e00c      	b.n	8010d42 <tcp_process+0x7be>
      break;
 8010d28:	bf00      	nop
 8010d2a:	e00a      	b.n	8010d42 <tcp_process+0x7be>
      break;
 8010d2c:	bf00      	nop
 8010d2e:	e008      	b.n	8010d42 <tcp_process+0x7be>
      break;
 8010d30:	bf00      	nop
 8010d32:	e006      	b.n	8010d42 <tcp_process+0x7be>
      break;
 8010d34:	bf00      	nop
 8010d36:	e004      	b.n	8010d42 <tcp_process+0x7be>
      break;
 8010d38:	bf00      	nop
 8010d3a:	e002      	b.n	8010d42 <tcp_process+0x7be>
      break;
 8010d3c:	bf00      	nop
 8010d3e:	e000      	b.n	8010d42 <tcp_process+0x7be>
      break;
 8010d40:	bf00      	nop
  }
  return ERR_OK;
 8010d42:	2300      	movs	r3, #0
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	3724      	adds	r7, #36	; 0x24
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd90      	pop	{r4, r7, pc}
 8010d4c:	2000b0f8 	.word	0x2000b0f8
 8010d50:	2000b10c 	.word	0x2000b10c
 8010d54:	20004270 	.word	0x20004270
 8010d58:	20004268 	.word	0x20004268
 8010d5c:	20004271 	.word	0x20004271
 8010d60:	2000b0fc 	.word	0x2000b0fc

08010d64 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010d64:	b590      	push	{r4, r7, lr}
 8010d66:	b085      	sub	sp, #20
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d106      	bne.n	8010d82 <tcp_oos_insert_segment+0x1e>
 8010d74:	4b3b      	ldr	r3, [pc, #236]	; (8010e64 <tcp_oos_insert_segment+0x100>)
 8010d76:	f240 421f 	movw	r2, #1055	; 0x41f
 8010d7a:	493b      	ldr	r1, [pc, #236]	; (8010e68 <tcp_oos_insert_segment+0x104>)
 8010d7c:	483b      	ldr	r0, [pc, #236]	; (8010e6c <tcp_oos_insert_segment+0x108>)
 8010d7e:	f006 f851 	bl	8016e24 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	68db      	ldr	r3, [r3, #12]
 8010d86:	899b      	ldrh	r3, [r3, #12]
 8010d88:	b29b      	uxth	r3, r3
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7fb fcd0 	bl	800c730 <lwip_htons>
 8010d90:	4603      	mov	r3, r0
 8010d92:	b2db      	uxtb	r3, r3
 8010d94:	f003 0301 	and.w	r3, r3, #1
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d028      	beq.n	8010dee <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010d9c:	6838      	ldr	r0, [r7, #0]
 8010d9e:	f7fe fa65 	bl	800f26c <tcp_segs_free>
    next = NULL;
 8010da2:	2300      	movs	r3, #0
 8010da4:	603b      	str	r3, [r7, #0]
 8010da6:	e056      	b.n	8010e56 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	68db      	ldr	r3, [r3, #12]
 8010dac:	899b      	ldrh	r3, [r3, #12]
 8010dae:	b29b      	uxth	r3, r3
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7fb fcbd 	bl	800c730 <lwip_htons>
 8010db6:	4603      	mov	r3, r0
 8010db8:	b2db      	uxtb	r3, r3
 8010dba:	f003 0301 	and.w	r3, r3, #1
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d00d      	beq.n	8010dde <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	68db      	ldr	r3, [r3, #12]
 8010dc6:	899b      	ldrh	r3, [r3, #12]
 8010dc8:	b29c      	uxth	r4, r3
 8010dca:	2001      	movs	r0, #1
 8010dcc:	f7fb fcb0 	bl	800c730 <lwip_htons>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	68db      	ldr	r3, [r3, #12]
 8010dd8:	4322      	orrs	r2, r4
 8010dda:	b292      	uxth	r2, r2
 8010ddc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010de8:	68f8      	ldr	r0, [r7, #12]
 8010dea:	f7fe fa54 	bl	800f296 <tcp_seg_free>
    while (next &&
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d00e      	beq.n	8010e12 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	891b      	ldrh	r3, [r3, #8]
 8010df8:	461a      	mov	r2, r3
 8010dfa:	4b1d      	ldr	r3, [pc, #116]	; (8010e70 <tcp_oos_insert_segment+0x10c>)
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	441a      	add	r2, r3
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	68db      	ldr	r3, [r3, #12]
 8010e04:	685b      	ldr	r3, [r3, #4]
 8010e06:	6839      	ldr	r1, [r7, #0]
 8010e08:	8909      	ldrh	r1, [r1, #8]
 8010e0a:	440b      	add	r3, r1
 8010e0c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	daca      	bge.n	8010da8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d01e      	beq.n	8010e56 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	891b      	ldrh	r3, [r3, #8]
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	4b14      	ldr	r3, [pc, #80]	; (8010e70 <tcp_oos_insert_segment+0x10c>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	441a      	add	r2, r3
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	68db      	ldr	r3, [r3, #12]
 8010e28:	685b      	ldr	r3, [r3, #4]
 8010e2a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	dd12      	ble.n	8010e56 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	68db      	ldr	r3, [r3, #12]
 8010e34:	685b      	ldr	r3, [r3, #4]
 8010e36:	b29a      	uxth	r2, r3
 8010e38:	4b0d      	ldr	r3, [pc, #52]	; (8010e70 <tcp_oos_insert_segment+0x10c>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	b29b      	uxth	r3, r3
 8010e3e:	1ad3      	subs	r3, r2, r3
 8010e40:	b29a      	uxth	r2, r3
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	685a      	ldr	r2, [r3, #4]
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	891b      	ldrh	r3, [r3, #8]
 8010e4e:	4619      	mov	r1, r3
 8010e50:	4610      	mov	r0, r2
 8010e52:	f7fc fe1b 	bl	800da8c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	683a      	ldr	r2, [r7, #0]
 8010e5a:	601a      	str	r2, [r3, #0]
}
 8010e5c:	bf00      	nop
 8010e5e:	3714      	adds	r7, #20
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd90      	pop	{r4, r7, pc}
 8010e64:	080192f0 	.word	0x080192f0
 8010e68:	080195b0 	.word	0x080195b0
 8010e6c:	0801933c 	.word	0x0801933c
 8010e70:	20004264 	.word	0x20004264

08010e74 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010e74:	b5b0      	push	{r4, r5, r7, lr}
 8010e76:	b086      	sub	sp, #24
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	60f8      	str	r0, [r7, #12]
 8010e7c:	60b9      	str	r1, [r7, #8]
 8010e7e:	607a      	str	r2, [r7, #4]
 8010e80:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010e82:	e03e      	b.n	8010f02 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010e8e:	697b      	ldr	r3, [r7, #20]
 8010e90:	685b      	ldr	r3, [r3, #4]
 8010e92:	4618      	mov	r0, r3
 8010e94:	f7fd f80e 	bl	800deb4 <pbuf_clen>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ea2:	8a7a      	ldrh	r2, [r7, #18]
 8010ea4:	429a      	cmp	r2, r3
 8010ea6:	d906      	bls.n	8010eb6 <tcp_free_acked_segments+0x42>
 8010ea8:	4b2a      	ldr	r3, [pc, #168]	; (8010f54 <tcp_free_acked_segments+0xe0>)
 8010eaa:	f240 4257 	movw	r2, #1111	; 0x457
 8010eae:	492a      	ldr	r1, [pc, #168]	; (8010f58 <tcp_free_acked_segments+0xe4>)
 8010eb0:	482a      	ldr	r0, [pc, #168]	; (8010f5c <tcp_free_acked_segments+0xe8>)
 8010eb2:	f005 ffb7 	bl	8016e24 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010ebc:	8a7b      	ldrh	r3, [r7, #18]
 8010ebe:	1ad3      	subs	r3, r2, r3
 8010ec0:	b29a      	uxth	r2, r3
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	891a      	ldrh	r2, [r3, #8]
 8010ecc:	4b24      	ldr	r3, [pc, #144]	; (8010f60 <tcp_free_acked_segments+0xec>)
 8010ece:	881b      	ldrh	r3, [r3, #0]
 8010ed0:	4413      	add	r3, r2
 8010ed2:	b29a      	uxth	r2, r3
 8010ed4:	4b22      	ldr	r3, [pc, #136]	; (8010f60 <tcp_free_acked_segments+0xec>)
 8010ed6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010ed8:	6978      	ldr	r0, [r7, #20]
 8010eda:	f7fe f9dc 	bl	800f296 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d00c      	beq.n	8010f02 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d109      	bne.n	8010f02 <tcp_free_acked_segments+0x8e>
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d106      	bne.n	8010f02 <tcp_free_acked_segments+0x8e>
 8010ef4:	4b17      	ldr	r3, [pc, #92]	; (8010f54 <tcp_free_acked_segments+0xe0>)
 8010ef6:	f240 4261 	movw	r2, #1121	; 0x461
 8010efa:	491a      	ldr	r1, [pc, #104]	; (8010f64 <tcp_free_acked_segments+0xf0>)
 8010efc:	4817      	ldr	r0, [pc, #92]	; (8010f5c <tcp_free_acked_segments+0xe8>)
 8010efe:	f005 ff91 	bl	8016e24 <iprintf>
  while (seg_list != NULL &&
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d020      	beq.n	8010f4a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	68db      	ldr	r3, [r3, #12]
 8010f0c:	685b      	ldr	r3, [r3, #4]
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7fb fc23 	bl	800c75a <lwip_htonl>
 8010f14:	4604      	mov	r4, r0
 8010f16:	68bb      	ldr	r3, [r7, #8]
 8010f18:	891b      	ldrh	r3, [r3, #8]
 8010f1a:	461d      	mov	r5, r3
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	68db      	ldr	r3, [r3, #12]
 8010f20:	899b      	ldrh	r3, [r3, #12]
 8010f22:	b29b      	uxth	r3, r3
 8010f24:	4618      	mov	r0, r3
 8010f26:	f7fb fc03 	bl	800c730 <lwip_htons>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	b2db      	uxtb	r3, r3
 8010f2e:	f003 0303 	and.w	r3, r3, #3
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d001      	beq.n	8010f3a <tcp_free_acked_segments+0xc6>
 8010f36:	2301      	movs	r3, #1
 8010f38:	e000      	b.n	8010f3c <tcp_free_acked_segments+0xc8>
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	442b      	add	r3, r5
 8010f3e:	18e2      	adds	r2, r4, r3
 8010f40:	4b09      	ldr	r3, [pc, #36]	; (8010f68 <tcp_free_acked_segments+0xf4>)
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	dd9c      	ble.n	8010e84 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010f4a:	68bb      	ldr	r3, [r7, #8]
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3718      	adds	r7, #24
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bdb0      	pop	{r4, r5, r7, pc}
 8010f54:	080192f0 	.word	0x080192f0
 8010f58:	080195d8 	.word	0x080195d8
 8010f5c:	0801933c 	.word	0x0801933c
 8010f60:	2000426c 	.word	0x2000426c
 8010f64:	08019600 	.word	0x08019600
 8010f68:	20004268 	.word	0x20004268

08010f6c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010f6c:	b5b0      	push	{r4, r5, r7, lr}
 8010f6e:	b094      	sub	sp, #80	; 0x50
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010f74:	2300      	movs	r3, #0
 8010f76:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d106      	bne.n	8010f8c <tcp_receive+0x20>
 8010f7e:	4ba6      	ldr	r3, [pc, #664]	; (8011218 <tcp_receive+0x2ac>)
 8010f80:	f240 427b 	movw	r2, #1147	; 0x47b
 8010f84:	49a5      	ldr	r1, [pc, #660]	; (801121c <tcp_receive+0x2b0>)
 8010f86:	48a6      	ldr	r0, [pc, #664]	; (8011220 <tcp_receive+0x2b4>)
 8010f88:	f005 ff4c 	bl	8016e24 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	7d1b      	ldrb	r3, [r3, #20]
 8010f90:	2b03      	cmp	r3, #3
 8010f92:	d806      	bhi.n	8010fa2 <tcp_receive+0x36>
 8010f94:	4ba0      	ldr	r3, [pc, #640]	; (8011218 <tcp_receive+0x2ac>)
 8010f96:	f240 427c 	movw	r2, #1148	; 0x47c
 8010f9a:	49a2      	ldr	r1, [pc, #648]	; (8011224 <tcp_receive+0x2b8>)
 8010f9c:	48a0      	ldr	r0, [pc, #640]	; (8011220 <tcp_receive+0x2b4>)
 8010f9e:	f005 ff41 	bl	8016e24 <iprintf>

  if (flags & TCP_ACK) {
 8010fa2:	4ba1      	ldr	r3, [pc, #644]	; (8011228 <tcp_receive+0x2bc>)
 8010fa4:	781b      	ldrb	r3, [r3, #0]
 8010fa6:	f003 0310 	and.w	r3, r3, #16
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	f000 8263 	beq.w	8011476 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010fb6:	461a      	mov	r2, r3
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fbc:	4413      	add	r3, r2
 8010fbe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010fc4:	4b99      	ldr	r3, [pc, #612]	; (801122c <tcp_receive+0x2c0>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	1ad3      	subs	r3, r2, r3
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	db1b      	blt.n	8011006 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010fd2:	4b96      	ldr	r3, [pc, #600]	; (801122c <tcp_receive+0x2c0>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d106      	bne.n	8010fe8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010fde:	4b94      	ldr	r3, [pc, #592]	; (8011230 <tcp_receive+0x2c4>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	1ad3      	subs	r3, r2, r3
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	db0e      	blt.n	8011006 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010fec:	4b90      	ldr	r3, [pc, #576]	; (8011230 <tcp_receive+0x2c4>)
 8010fee:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	d125      	bne.n	8011040 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010ff4:	4b8f      	ldr	r3, [pc, #572]	; (8011234 <tcp_receive+0x2c8>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	89db      	ldrh	r3, [r3, #14]
 8010ffa:	b29a      	uxth	r2, r3
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011002:	429a      	cmp	r2, r3
 8011004:	d91c      	bls.n	8011040 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011006:	4b8b      	ldr	r3, [pc, #556]	; (8011234 <tcp_receive+0x2c8>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	89db      	ldrh	r3, [r3, #14]
 801100c:	b29a      	uxth	r2, r3
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011020:	429a      	cmp	r2, r3
 8011022:	d205      	bcs.n	8011030 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011030:	4b7e      	ldr	r3, [pc, #504]	; (801122c <tcp_receive+0x2c0>)
 8011032:	681a      	ldr	r2, [r3, #0]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011038:	4b7d      	ldr	r3, [pc, #500]	; (8011230 <tcp_receive+0x2c4>)
 801103a:	681a      	ldr	r2, [r3, #0]
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011040:	4b7b      	ldr	r3, [pc, #492]	; (8011230 <tcp_receive+0x2c4>)
 8011042:	681a      	ldr	r2, [r3, #0]
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011048:	1ad3      	subs	r3, r2, r3
 801104a:	2b00      	cmp	r3, #0
 801104c:	dc58      	bgt.n	8011100 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801104e:	4b7a      	ldr	r3, [pc, #488]	; (8011238 <tcp_receive+0x2cc>)
 8011050:	881b      	ldrh	r3, [r3, #0]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d14b      	bne.n	80110ee <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801105a:	687a      	ldr	r2, [r7, #4]
 801105c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011060:	4413      	add	r3, r2
 8011062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011064:	429a      	cmp	r2, r3
 8011066:	d142      	bne.n	80110ee <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801106e:	2b00      	cmp	r3, #0
 8011070:	db3d      	blt.n	80110ee <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011076:	4b6e      	ldr	r3, [pc, #440]	; (8011230 <tcp_receive+0x2c4>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	429a      	cmp	r2, r3
 801107c:	d137      	bne.n	80110ee <tcp_receive+0x182>
              found_dupack = 1;
 801107e:	2301      	movs	r3, #1
 8011080:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011088:	2bff      	cmp	r3, #255	; 0xff
 801108a:	d007      	beq.n	801109c <tcp_receive+0x130>
                ++pcb->dupacks;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011092:	3301      	adds	r3, #1
 8011094:	b2da      	uxtb	r2, r3
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80110a2:	2b03      	cmp	r3, #3
 80110a4:	d91b      	bls.n	80110de <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110b0:	4413      	add	r3, r2
 80110b2:	b29a      	uxth	r2, r3
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d30a      	bcc.n	80110d4 <tcp_receive+0x168>
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110c8:	4413      	add	r3, r2
 80110ca:	b29a      	uxth	r2, r3
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80110d2:	e004      	b.n	80110de <tcp_receive+0x172>
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80110e4:	2b02      	cmp	r3, #2
 80110e6:	d902      	bls.n	80110ee <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f001 fee9 	bl	8012ec0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80110ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	f040 8160 	bne.w	80113b6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	2200      	movs	r2, #0
 80110fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80110fe:	e15a      	b.n	80113b6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011100:	4b4b      	ldr	r3, [pc, #300]	; (8011230 <tcp_receive+0x2c4>)
 8011102:	681a      	ldr	r2, [r3, #0]
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011108:	1ad3      	subs	r3, r2, r3
 801110a:	3b01      	subs	r3, #1
 801110c:	2b00      	cmp	r3, #0
 801110e:	f2c0 814d 	blt.w	80113ac <tcp_receive+0x440>
 8011112:	4b47      	ldr	r3, [pc, #284]	; (8011230 <tcp_receive+0x2c4>)
 8011114:	681a      	ldr	r2, [r3, #0]
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801111a:	1ad3      	subs	r3, r2, r3
 801111c:	2b00      	cmp	r3, #0
 801111e:	f300 8145 	bgt.w	80113ac <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	8b5b      	ldrh	r3, [r3, #26]
 8011126:	f003 0304 	and.w	r3, r3, #4
 801112a:	2b00      	cmp	r3, #0
 801112c:	d010      	beq.n	8011150 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	8b5b      	ldrh	r3, [r3, #26]
 8011132:	f023 0304 	bic.w	r3, r3, #4
 8011136:	b29a      	uxth	r2, r3
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2200      	movs	r2, #0
 801114c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	2200      	movs	r2, #0
 8011154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801115e:	10db      	asrs	r3, r3, #3
 8011160:	b21b      	sxth	r3, r3
 8011162:	b29a      	uxth	r2, r3
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801116a:	b29b      	uxth	r3, r3
 801116c:	4413      	add	r3, r2
 801116e:	b29b      	uxth	r3, r3
 8011170:	b21a      	sxth	r2, r3
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011178:	4b2d      	ldr	r3, [pc, #180]	; (8011230 <tcp_receive+0x2c4>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	b29a      	uxth	r2, r3
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011182:	b29b      	uxth	r3, r3
 8011184:	1ad3      	subs	r3, r2, r3
 8011186:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2200      	movs	r2, #0
 801118c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011190:	4b27      	ldr	r3, [pc, #156]	; (8011230 <tcp_receive+0x2c4>)
 8011192:	681a      	ldr	r2, [r3, #0]
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	7d1b      	ldrb	r3, [r3, #20]
 801119c:	2b03      	cmp	r3, #3
 801119e:	f240 8096 	bls.w	80112ce <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80111ae:	429a      	cmp	r2, r3
 80111b0:	d244      	bcs.n	801123c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	8b5b      	ldrh	r3, [r3, #26]
 80111b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d001      	beq.n	80111c2 <tcp_receive+0x256>
 80111be:	2301      	movs	r3, #1
 80111c0:	e000      	b.n	80111c4 <tcp_receive+0x258>
 80111c2:	2302      	movs	r3, #2
 80111c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80111c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80111cc:	b29a      	uxth	r2, r3
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111d2:	fb12 f303 	smulbb	r3, r2, r3
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80111da:	4293      	cmp	r3, r2
 80111dc:	bf28      	it	cs
 80111de:	4613      	movcs	r3, r2
 80111e0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80111e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80111ea:	4413      	add	r3, r2
 80111ec:	b29a      	uxth	r2, r3
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80111f4:	429a      	cmp	r2, r3
 80111f6:	d309      	bcc.n	801120c <tcp_receive+0x2a0>
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80111fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011200:	4413      	add	r3, r2
 8011202:	b29a      	uxth	r2, r3
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801120a:	e060      	b.n	80112ce <tcp_receive+0x362>
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011212:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011216:	e05a      	b.n	80112ce <tcp_receive+0x362>
 8011218:	080192f0 	.word	0x080192f0
 801121c:	08019620 	.word	0x08019620
 8011220:	0801933c 	.word	0x0801933c
 8011224:	0801963c 	.word	0x0801963c
 8011228:	20004270 	.word	0x20004270
 801122c:	20004264 	.word	0x20004264
 8011230:	20004268 	.word	0x20004268
 8011234:	20004254 	.word	0x20004254
 8011238:	2000426e 	.word	0x2000426e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011242:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011244:	4413      	add	r3, r2
 8011246:	b29a      	uxth	r2, r3
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801124e:	429a      	cmp	r2, r3
 8011250:	d309      	bcc.n	8011266 <tcp_receive+0x2fa>
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011258:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801125a:	4413      	add	r3, r2
 801125c:	b29a      	uxth	r2, r3
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011264:	e004      	b.n	8011270 <tcp_receive+0x304>
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801126c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801127c:	429a      	cmp	r2, r3
 801127e:	d326      	bcc.n	80112ce <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801128c:	1ad3      	subs	r3, r2, r3
 801128e:	b29a      	uxth	r2, r3
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112a0:	4413      	add	r3, r2
 80112a2:	b29a      	uxth	r2, r3
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d30a      	bcc.n	80112c4 <tcp_receive+0x358>
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112b8:	4413      	add	r3, r2
 80112ba:	b29a      	uxth	r2, r3
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80112c2:	e004      	b.n	80112ce <tcp_receive+0x362>
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112d6:	4a98      	ldr	r2, [pc, #608]	; (8011538 <tcp_receive+0x5cc>)
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f7ff fdcb 	bl	8010e74 <tcp_free_acked_segments>
 80112de:	4602      	mov	r2, r0
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112ec:	4a93      	ldr	r2, [pc, #588]	; (801153c <tcp_receive+0x5d0>)
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f7ff fdc0 	bl	8010e74 <tcp_free_acked_segments>
 80112f4:	4602      	mov	r2, r0
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d104      	bne.n	801130c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011308:	861a      	strh	r2, [r3, #48]	; 0x30
 801130a:	e002      	b.n	8011312 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2200      	movs	r2, #0
 8011310:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2200      	movs	r2, #0
 8011316:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801131c:	2b00      	cmp	r3, #0
 801131e:	d103      	bne.n	8011328 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2200      	movs	r2, #0
 8011324:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801132e:	4b84      	ldr	r3, [pc, #528]	; (8011540 <tcp_receive+0x5d4>)
 8011330:	881b      	ldrh	r3, [r3, #0]
 8011332:	4413      	add	r3, r2
 8011334:	b29a      	uxth	r2, r3
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	8b5b      	ldrh	r3, [r3, #26]
 8011340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011344:	2b00      	cmp	r3, #0
 8011346:	d035      	beq.n	80113b4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801134c:	2b00      	cmp	r3, #0
 801134e:	d118      	bne.n	8011382 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011354:	2b00      	cmp	r3, #0
 8011356:	d00c      	beq.n	8011372 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011360:	68db      	ldr	r3, [r3, #12]
 8011362:	685b      	ldr	r3, [r3, #4]
 8011364:	4618      	mov	r0, r3
 8011366:	f7fb f9f8 	bl	800c75a <lwip_htonl>
 801136a:	4603      	mov	r3, r0
 801136c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801136e:	2b00      	cmp	r3, #0
 8011370:	dc20      	bgt.n	80113b4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	8b5b      	ldrh	r3, [r3, #26]
 8011376:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801137a:	b29a      	uxth	r2, r3
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011380:	e018      	b.n	80113b4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801138a:	68db      	ldr	r3, [r3, #12]
 801138c:	685b      	ldr	r3, [r3, #4]
 801138e:	4618      	mov	r0, r3
 8011390:	f7fb f9e3 	bl	800c75a <lwip_htonl>
 8011394:	4603      	mov	r3, r0
 8011396:	1ae3      	subs	r3, r4, r3
 8011398:	2b00      	cmp	r3, #0
 801139a:	dc0b      	bgt.n	80113b4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	8b5b      	ldrh	r3, [r3, #26]
 80113a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80113a4:	b29a      	uxth	r2, r3
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80113aa:	e003      	b.n	80113b4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80113ac:	6878      	ldr	r0, [r7, #4]
 80113ae:	f001 ff75 	bl	801329c <tcp_send_empty_ack>
 80113b2:	e000      	b.n	80113b6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80113b4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d05b      	beq.n	8011476 <tcp_receive+0x50a>
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80113c2:	4b60      	ldr	r3, [pc, #384]	; (8011544 <tcp_receive+0x5d8>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	1ad3      	subs	r3, r2, r3
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	da54      	bge.n	8011476 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80113cc:	4b5e      	ldr	r3, [pc, #376]	; (8011548 <tcp_receive+0x5dc>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	b29a      	uxth	r2, r3
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113d6:	b29b      	uxth	r3, r3
 80113d8:	1ad3      	subs	r3, r2, r3
 80113da:	b29b      	uxth	r3, r3
 80113dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80113e0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80113ea:	10db      	asrs	r3, r3, #3
 80113ec:	b21b      	sxth	r3, r3
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	1ad3      	subs	r3, r2, r3
 80113f2:	b29b      	uxth	r3, r3
 80113f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80113fe:	b29a      	uxth	r2, r3
 8011400:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011404:	4413      	add	r3, r2
 8011406:	b29b      	uxth	r3, r3
 8011408:	b21a      	sxth	r2, r3
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801140e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011412:	2b00      	cmp	r3, #0
 8011414:	da05      	bge.n	8011422 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8011416:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801141a:	425b      	negs	r3, r3
 801141c:	b29b      	uxth	r3, r3
 801141e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011422:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801142c:	109b      	asrs	r3, r3, #2
 801142e:	b21b      	sxth	r3, r3
 8011430:	b29b      	uxth	r3, r3
 8011432:	1ad3      	subs	r3, r2, r3
 8011434:	b29b      	uxth	r3, r3
 8011436:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011440:	b29a      	uxth	r2, r3
 8011442:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011446:	4413      	add	r3, r2
 8011448:	b29b      	uxth	r3, r3
 801144a:	b21a      	sxth	r2, r3
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011456:	10db      	asrs	r3, r3, #3
 8011458:	b21b      	sxth	r3, r3
 801145a:	b29a      	uxth	r2, r3
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011462:	b29b      	uxth	r3, r3
 8011464:	4413      	add	r3, r2
 8011466:	b29b      	uxth	r3, r3
 8011468:	b21a      	sxth	r2, r3
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2200      	movs	r2, #0
 8011474:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011476:	4b35      	ldr	r3, [pc, #212]	; (801154c <tcp_receive+0x5e0>)
 8011478:	881b      	ldrh	r3, [r3, #0]
 801147a:	2b00      	cmp	r3, #0
 801147c:	f000 84e1 	beq.w	8011e42 <tcp_receive+0xed6>
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	7d1b      	ldrb	r3, [r3, #20]
 8011484:	2b06      	cmp	r3, #6
 8011486:	f200 84dc 	bhi.w	8011e42 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801148e:	4b30      	ldr	r3, [pc, #192]	; (8011550 <tcp_receive+0x5e4>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	1ad3      	subs	r3, r2, r3
 8011494:	3b01      	subs	r3, #1
 8011496:	2b00      	cmp	r3, #0
 8011498:	f2c0 808e 	blt.w	80115b8 <tcp_receive+0x64c>
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114a0:	4b2a      	ldr	r3, [pc, #168]	; (801154c <tcp_receive+0x5e0>)
 80114a2:	881b      	ldrh	r3, [r3, #0]
 80114a4:	4619      	mov	r1, r3
 80114a6:	4b2a      	ldr	r3, [pc, #168]	; (8011550 <tcp_receive+0x5e4>)
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	440b      	add	r3, r1
 80114ac:	1ad3      	subs	r3, r2, r3
 80114ae:	3301      	adds	r3, #1
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	f300 8081 	bgt.w	80115b8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80114b6:	4b27      	ldr	r3, [pc, #156]	; (8011554 <tcp_receive+0x5e8>)
 80114b8:	685b      	ldr	r3, [r3, #4]
 80114ba:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114c0:	4b23      	ldr	r3, [pc, #140]	; (8011550 <tcp_receive+0x5e4>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	1ad3      	subs	r3, r2, r3
 80114c6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80114c8:	4b22      	ldr	r3, [pc, #136]	; (8011554 <tcp_receive+0x5e8>)
 80114ca:	685b      	ldr	r3, [r3, #4]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d106      	bne.n	80114de <tcp_receive+0x572>
 80114d0:	4b21      	ldr	r3, [pc, #132]	; (8011558 <tcp_receive+0x5ec>)
 80114d2:	f240 5294 	movw	r2, #1428	; 0x594
 80114d6:	4921      	ldr	r1, [pc, #132]	; (801155c <tcp_receive+0x5f0>)
 80114d8:	4821      	ldr	r0, [pc, #132]	; (8011560 <tcp_receive+0x5f4>)
 80114da:	f005 fca3 	bl	8016e24 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80114de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80114e4:	4293      	cmp	r3, r2
 80114e6:	d906      	bls.n	80114f6 <tcp_receive+0x58a>
 80114e8:	4b1b      	ldr	r3, [pc, #108]	; (8011558 <tcp_receive+0x5ec>)
 80114ea:	f240 5295 	movw	r2, #1429	; 0x595
 80114ee:	491d      	ldr	r1, [pc, #116]	; (8011564 <tcp_receive+0x5f8>)
 80114f0:	481b      	ldr	r0, [pc, #108]	; (8011560 <tcp_receive+0x5f4>)
 80114f2:	f005 fc97 	bl	8016e24 <iprintf>
      off = (u16_t)off32;
 80114f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80114fc:	4b15      	ldr	r3, [pc, #84]	; (8011554 <tcp_receive+0x5e8>)
 80114fe:	685b      	ldr	r3, [r3, #4]
 8011500:	891b      	ldrh	r3, [r3, #8]
 8011502:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011506:	429a      	cmp	r2, r3
 8011508:	d906      	bls.n	8011518 <tcp_receive+0x5ac>
 801150a:	4b13      	ldr	r3, [pc, #76]	; (8011558 <tcp_receive+0x5ec>)
 801150c:	f240 5297 	movw	r2, #1431	; 0x597
 8011510:	4915      	ldr	r1, [pc, #84]	; (8011568 <tcp_receive+0x5fc>)
 8011512:	4813      	ldr	r0, [pc, #76]	; (8011560 <tcp_receive+0x5f4>)
 8011514:	f005 fc86 	bl	8016e24 <iprintf>
      inseg.len -= off;
 8011518:	4b0e      	ldr	r3, [pc, #56]	; (8011554 <tcp_receive+0x5e8>)
 801151a:	891a      	ldrh	r2, [r3, #8]
 801151c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011520:	1ad3      	subs	r3, r2, r3
 8011522:	b29a      	uxth	r2, r3
 8011524:	4b0b      	ldr	r3, [pc, #44]	; (8011554 <tcp_receive+0x5e8>)
 8011526:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011528:	4b0a      	ldr	r3, [pc, #40]	; (8011554 <tcp_receive+0x5e8>)
 801152a:	685b      	ldr	r3, [r3, #4]
 801152c:	891a      	ldrh	r2, [r3, #8]
 801152e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011532:	1ad3      	subs	r3, r2, r3
 8011534:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011536:	e029      	b.n	801158c <tcp_receive+0x620>
 8011538:	08019658 	.word	0x08019658
 801153c:	08019660 	.word	0x08019660
 8011540:	2000426c 	.word	0x2000426c
 8011544:	20004268 	.word	0x20004268
 8011548:	2000b100 	.word	0x2000b100
 801154c:	2000426e 	.word	0x2000426e
 8011550:	20004264 	.word	0x20004264
 8011554:	20004244 	.word	0x20004244
 8011558:	080192f0 	.word	0x080192f0
 801155c:	08019668 	.word	0x08019668
 8011560:	0801933c 	.word	0x0801933c
 8011564:	08019678 	.word	0x08019678
 8011568:	08019688 	.word	0x08019688
        off -= p->len;
 801156c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801156e:	895b      	ldrh	r3, [r3, #10]
 8011570:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011574:	1ad3      	subs	r3, r2, r3
 8011576:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801157a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801157c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801157e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011582:	2200      	movs	r2, #0
 8011584:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801158c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801158e:	895b      	ldrh	r3, [r3, #10]
 8011590:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011594:	429a      	cmp	r2, r3
 8011596:	d8e9      	bhi.n	801156c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011598:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801159c:	4619      	mov	r1, r3
 801159e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80115a0:	f7fc fb74 	bl	800dc8c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115a8:	4a91      	ldr	r2, [pc, #580]	; (80117f0 <tcp_receive+0x884>)
 80115aa:	6013      	str	r3, [r2, #0]
 80115ac:	4b91      	ldr	r3, [pc, #580]	; (80117f4 <tcp_receive+0x888>)
 80115ae:	68db      	ldr	r3, [r3, #12]
 80115b0:	4a8f      	ldr	r2, [pc, #572]	; (80117f0 <tcp_receive+0x884>)
 80115b2:	6812      	ldr	r2, [r2, #0]
 80115b4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80115b6:	e00d      	b.n	80115d4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80115b8:	4b8d      	ldr	r3, [pc, #564]	; (80117f0 <tcp_receive+0x884>)
 80115ba:	681a      	ldr	r2, [r3, #0]
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115c0:	1ad3      	subs	r3, r2, r3
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	da06      	bge.n	80115d4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	8b5b      	ldrh	r3, [r3, #26]
 80115ca:	f043 0302 	orr.w	r3, r3, #2
 80115ce:	b29a      	uxth	r2, r3
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80115d4:	4b86      	ldr	r3, [pc, #536]	; (80117f0 <tcp_receive+0x884>)
 80115d6:	681a      	ldr	r2, [r3, #0]
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115dc:	1ad3      	subs	r3, r2, r3
 80115de:	2b00      	cmp	r3, #0
 80115e0:	f2c0 842a 	blt.w	8011e38 <tcp_receive+0xecc>
 80115e4:	4b82      	ldr	r3, [pc, #520]	; (80117f0 <tcp_receive+0x884>)
 80115e6:	681a      	ldr	r2, [r3, #0]
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115ec:	6879      	ldr	r1, [r7, #4]
 80115ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80115f0:	440b      	add	r3, r1
 80115f2:	1ad3      	subs	r3, r2, r3
 80115f4:	3301      	adds	r3, #1
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	f300 841e 	bgt.w	8011e38 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011600:	4b7b      	ldr	r3, [pc, #492]	; (80117f0 <tcp_receive+0x884>)
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	429a      	cmp	r2, r3
 8011606:	f040 829a 	bne.w	8011b3e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801160a:	4b7a      	ldr	r3, [pc, #488]	; (80117f4 <tcp_receive+0x888>)
 801160c:	891c      	ldrh	r4, [r3, #8]
 801160e:	4b79      	ldr	r3, [pc, #484]	; (80117f4 <tcp_receive+0x888>)
 8011610:	68db      	ldr	r3, [r3, #12]
 8011612:	899b      	ldrh	r3, [r3, #12]
 8011614:	b29b      	uxth	r3, r3
 8011616:	4618      	mov	r0, r3
 8011618:	f7fb f88a 	bl	800c730 <lwip_htons>
 801161c:	4603      	mov	r3, r0
 801161e:	b2db      	uxtb	r3, r3
 8011620:	f003 0303 	and.w	r3, r3, #3
 8011624:	2b00      	cmp	r3, #0
 8011626:	d001      	beq.n	801162c <tcp_receive+0x6c0>
 8011628:	2301      	movs	r3, #1
 801162a:	e000      	b.n	801162e <tcp_receive+0x6c2>
 801162c:	2300      	movs	r3, #0
 801162e:	4423      	add	r3, r4
 8011630:	b29a      	uxth	r2, r3
 8011632:	4b71      	ldr	r3, [pc, #452]	; (80117f8 <tcp_receive+0x88c>)
 8011634:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801163a:	4b6f      	ldr	r3, [pc, #444]	; (80117f8 <tcp_receive+0x88c>)
 801163c:	881b      	ldrh	r3, [r3, #0]
 801163e:	429a      	cmp	r2, r3
 8011640:	d275      	bcs.n	801172e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011642:	4b6c      	ldr	r3, [pc, #432]	; (80117f4 <tcp_receive+0x888>)
 8011644:	68db      	ldr	r3, [r3, #12]
 8011646:	899b      	ldrh	r3, [r3, #12]
 8011648:	b29b      	uxth	r3, r3
 801164a:	4618      	mov	r0, r3
 801164c:	f7fb f870 	bl	800c730 <lwip_htons>
 8011650:	4603      	mov	r3, r0
 8011652:	b2db      	uxtb	r3, r3
 8011654:	f003 0301 	and.w	r3, r3, #1
 8011658:	2b00      	cmp	r3, #0
 801165a:	d01f      	beq.n	801169c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801165c:	4b65      	ldr	r3, [pc, #404]	; (80117f4 <tcp_receive+0x888>)
 801165e:	68db      	ldr	r3, [r3, #12]
 8011660:	899b      	ldrh	r3, [r3, #12]
 8011662:	b29b      	uxth	r3, r3
 8011664:	b21b      	sxth	r3, r3
 8011666:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801166a:	b21c      	sxth	r4, r3
 801166c:	4b61      	ldr	r3, [pc, #388]	; (80117f4 <tcp_receive+0x888>)
 801166e:	68db      	ldr	r3, [r3, #12]
 8011670:	899b      	ldrh	r3, [r3, #12]
 8011672:	b29b      	uxth	r3, r3
 8011674:	4618      	mov	r0, r3
 8011676:	f7fb f85b 	bl	800c730 <lwip_htons>
 801167a:	4603      	mov	r3, r0
 801167c:	b2db      	uxtb	r3, r3
 801167e:	b29b      	uxth	r3, r3
 8011680:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011684:	b29b      	uxth	r3, r3
 8011686:	4618      	mov	r0, r3
 8011688:	f7fb f852 	bl	800c730 <lwip_htons>
 801168c:	4603      	mov	r3, r0
 801168e:	b21b      	sxth	r3, r3
 8011690:	4323      	orrs	r3, r4
 8011692:	b21a      	sxth	r2, r3
 8011694:	4b57      	ldr	r3, [pc, #348]	; (80117f4 <tcp_receive+0x888>)
 8011696:	68db      	ldr	r3, [r3, #12]
 8011698:	b292      	uxth	r2, r2
 801169a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80116a0:	4b54      	ldr	r3, [pc, #336]	; (80117f4 <tcp_receive+0x888>)
 80116a2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80116a4:	4b53      	ldr	r3, [pc, #332]	; (80117f4 <tcp_receive+0x888>)
 80116a6:	68db      	ldr	r3, [r3, #12]
 80116a8:	899b      	ldrh	r3, [r3, #12]
 80116aa:	b29b      	uxth	r3, r3
 80116ac:	4618      	mov	r0, r3
 80116ae:	f7fb f83f 	bl	800c730 <lwip_htons>
 80116b2:	4603      	mov	r3, r0
 80116b4:	b2db      	uxtb	r3, r3
 80116b6:	f003 0302 	and.w	r3, r3, #2
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d005      	beq.n	80116ca <tcp_receive+0x75e>
            inseg.len -= 1;
 80116be:	4b4d      	ldr	r3, [pc, #308]	; (80117f4 <tcp_receive+0x888>)
 80116c0:	891b      	ldrh	r3, [r3, #8]
 80116c2:	3b01      	subs	r3, #1
 80116c4:	b29a      	uxth	r2, r3
 80116c6:	4b4b      	ldr	r3, [pc, #300]	; (80117f4 <tcp_receive+0x888>)
 80116c8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80116ca:	4b4a      	ldr	r3, [pc, #296]	; (80117f4 <tcp_receive+0x888>)
 80116cc:	685b      	ldr	r3, [r3, #4]
 80116ce:	4a49      	ldr	r2, [pc, #292]	; (80117f4 <tcp_receive+0x888>)
 80116d0:	8912      	ldrh	r2, [r2, #8]
 80116d2:	4611      	mov	r1, r2
 80116d4:	4618      	mov	r0, r3
 80116d6:	f7fc f9d9 	bl	800da8c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80116da:	4b46      	ldr	r3, [pc, #280]	; (80117f4 <tcp_receive+0x888>)
 80116dc:	891c      	ldrh	r4, [r3, #8]
 80116de:	4b45      	ldr	r3, [pc, #276]	; (80117f4 <tcp_receive+0x888>)
 80116e0:	68db      	ldr	r3, [r3, #12]
 80116e2:	899b      	ldrh	r3, [r3, #12]
 80116e4:	b29b      	uxth	r3, r3
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7fb f822 	bl	800c730 <lwip_htons>
 80116ec:	4603      	mov	r3, r0
 80116ee:	b2db      	uxtb	r3, r3
 80116f0:	f003 0303 	and.w	r3, r3, #3
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d001      	beq.n	80116fc <tcp_receive+0x790>
 80116f8:	2301      	movs	r3, #1
 80116fa:	e000      	b.n	80116fe <tcp_receive+0x792>
 80116fc:	2300      	movs	r3, #0
 80116fe:	4423      	add	r3, r4
 8011700:	b29a      	uxth	r2, r3
 8011702:	4b3d      	ldr	r3, [pc, #244]	; (80117f8 <tcp_receive+0x88c>)
 8011704:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011706:	4b3c      	ldr	r3, [pc, #240]	; (80117f8 <tcp_receive+0x88c>)
 8011708:	881b      	ldrh	r3, [r3, #0]
 801170a:	461a      	mov	r2, r3
 801170c:	4b38      	ldr	r3, [pc, #224]	; (80117f0 <tcp_receive+0x884>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	441a      	add	r2, r3
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011716:	6879      	ldr	r1, [r7, #4]
 8011718:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801171a:	440b      	add	r3, r1
 801171c:	429a      	cmp	r2, r3
 801171e:	d006      	beq.n	801172e <tcp_receive+0x7c2>
 8011720:	4b36      	ldr	r3, [pc, #216]	; (80117fc <tcp_receive+0x890>)
 8011722:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011726:	4936      	ldr	r1, [pc, #216]	; (8011800 <tcp_receive+0x894>)
 8011728:	4836      	ldr	r0, [pc, #216]	; (8011804 <tcp_receive+0x898>)
 801172a:	f005 fb7b 	bl	8016e24 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011732:	2b00      	cmp	r3, #0
 8011734:	f000 80e7 	beq.w	8011906 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011738:	4b2e      	ldr	r3, [pc, #184]	; (80117f4 <tcp_receive+0x888>)
 801173a:	68db      	ldr	r3, [r3, #12]
 801173c:	899b      	ldrh	r3, [r3, #12]
 801173e:	b29b      	uxth	r3, r3
 8011740:	4618      	mov	r0, r3
 8011742:	f7fa fff5 	bl	800c730 <lwip_htons>
 8011746:	4603      	mov	r3, r0
 8011748:	b2db      	uxtb	r3, r3
 801174a:	f003 0301 	and.w	r3, r3, #1
 801174e:	2b00      	cmp	r3, #0
 8011750:	d010      	beq.n	8011774 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011752:	e00a      	b.n	801176a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011758:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801175e:	681a      	ldr	r2, [r3, #0]
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011764:	68f8      	ldr	r0, [r7, #12]
 8011766:	f7fd fd96 	bl	800f296 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801176e:	2b00      	cmp	r3, #0
 8011770:	d1f0      	bne.n	8011754 <tcp_receive+0x7e8>
 8011772:	e0c8      	b.n	8011906 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011778:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801177a:	e052      	b.n	8011822 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801177c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801177e:	68db      	ldr	r3, [r3, #12]
 8011780:	899b      	ldrh	r3, [r3, #12]
 8011782:	b29b      	uxth	r3, r3
 8011784:	4618      	mov	r0, r3
 8011786:	f7fa ffd3 	bl	800c730 <lwip_htons>
 801178a:	4603      	mov	r3, r0
 801178c:	b2db      	uxtb	r3, r3
 801178e:	f003 0301 	and.w	r3, r3, #1
 8011792:	2b00      	cmp	r3, #0
 8011794:	d03d      	beq.n	8011812 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011796:	4b17      	ldr	r3, [pc, #92]	; (80117f4 <tcp_receive+0x888>)
 8011798:	68db      	ldr	r3, [r3, #12]
 801179a:	899b      	ldrh	r3, [r3, #12]
 801179c:	b29b      	uxth	r3, r3
 801179e:	4618      	mov	r0, r3
 80117a0:	f7fa ffc6 	bl	800c730 <lwip_htons>
 80117a4:	4603      	mov	r3, r0
 80117a6:	b2db      	uxtb	r3, r3
 80117a8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d130      	bne.n	8011812 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80117b0:	4b10      	ldr	r3, [pc, #64]	; (80117f4 <tcp_receive+0x888>)
 80117b2:	68db      	ldr	r3, [r3, #12]
 80117b4:	899b      	ldrh	r3, [r3, #12]
 80117b6:	b29c      	uxth	r4, r3
 80117b8:	2001      	movs	r0, #1
 80117ba:	f7fa ffb9 	bl	800c730 <lwip_htons>
 80117be:	4603      	mov	r3, r0
 80117c0:	461a      	mov	r2, r3
 80117c2:	4b0c      	ldr	r3, [pc, #48]	; (80117f4 <tcp_receive+0x888>)
 80117c4:	68db      	ldr	r3, [r3, #12]
 80117c6:	4322      	orrs	r2, r4
 80117c8:	b292      	uxth	r2, r2
 80117ca:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80117cc:	4b09      	ldr	r3, [pc, #36]	; (80117f4 <tcp_receive+0x888>)
 80117ce:	891c      	ldrh	r4, [r3, #8]
 80117d0:	4b08      	ldr	r3, [pc, #32]	; (80117f4 <tcp_receive+0x888>)
 80117d2:	68db      	ldr	r3, [r3, #12]
 80117d4:	899b      	ldrh	r3, [r3, #12]
 80117d6:	b29b      	uxth	r3, r3
 80117d8:	4618      	mov	r0, r3
 80117da:	f7fa ffa9 	bl	800c730 <lwip_htons>
 80117de:	4603      	mov	r3, r0
 80117e0:	b2db      	uxtb	r3, r3
 80117e2:	f003 0303 	and.w	r3, r3, #3
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d00e      	beq.n	8011808 <tcp_receive+0x89c>
 80117ea:	2301      	movs	r3, #1
 80117ec:	e00d      	b.n	801180a <tcp_receive+0x89e>
 80117ee:	bf00      	nop
 80117f0:	20004264 	.word	0x20004264
 80117f4:	20004244 	.word	0x20004244
 80117f8:	2000426e 	.word	0x2000426e
 80117fc:	080192f0 	.word	0x080192f0
 8011800:	08019698 	.word	0x08019698
 8011804:	0801933c 	.word	0x0801933c
 8011808:	2300      	movs	r3, #0
 801180a:	4423      	add	r3, r4
 801180c:	b29a      	uxth	r2, r3
 801180e:	4b98      	ldr	r3, [pc, #608]	; (8011a70 <tcp_receive+0xb04>)
 8011810:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011814:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801181c:	6938      	ldr	r0, [r7, #16]
 801181e:	f7fd fd3a 	bl	800f296 <tcp_seg_free>
            while (next &&
 8011822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011824:	2b00      	cmp	r3, #0
 8011826:	d00e      	beq.n	8011846 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011828:	4b91      	ldr	r3, [pc, #580]	; (8011a70 <tcp_receive+0xb04>)
 801182a:	881b      	ldrh	r3, [r3, #0]
 801182c:	461a      	mov	r2, r3
 801182e:	4b91      	ldr	r3, [pc, #580]	; (8011a74 <tcp_receive+0xb08>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	441a      	add	r2, r3
 8011834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011836:	68db      	ldr	r3, [r3, #12]
 8011838:	685b      	ldr	r3, [r3, #4]
 801183a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801183c:	8909      	ldrh	r1, [r1, #8]
 801183e:	440b      	add	r3, r1
 8011840:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011842:	2b00      	cmp	r3, #0
 8011844:	da9a      	bge.n	801177c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011848:	2b00      	cmp	r3, #0
 801184a:	d059      	beq.n	8011900 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801184c:	4b88      	ldr	r3, [pc, #544]	; (8011a70 <tcp_receive+0xb04>)
 801184e:	881b      	ldrh	r3, [r3, #0]
 8011850:	461a      	mov	r2, r3
 8011852:	4b88      	ldr	r3, [pc, #544]	; (8011a74 <tcp_receive+0xb08>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	441a      	add	r2, r3
 8011858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801185a:	68db      	ldr	r3, [r3, #12]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011860:	2b00      	cmp	r3, #0
 8011862:	dd4d      	ble.n	8011900 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011866:	68db      	ldr	r3, [r3, #12]
 8011868:	685b      	ldr	r3, [r3, #4]
 801186a:	b29a      	uxth	r2, r3
 801186c:	4b81      	ldr	r3, [pc, #516]	; (8011a74 <tcp_receive+0xb08>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	b29b      	uxth	r3, r3
 8011872:	1ad3      	subs	r3, r2, r3
 8011874:	b29a      	uxth	r2, r3
 8011876:	4b80      	ldr	r3, [pc, #512]	; (8011a78 <tcp_receive+0xb0c>)
 8011878:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801187a:	4b7f      	ldr	r3, [pc, #508]	; (8011a78 <tcp_receive+0xb0c>)
 801187c:	68db      	ldr	r3, [r3, #12]
 801187e:	899b      	ldrh	r3, [r3, #12]
 8011880:	b29b      	uxth	r3, r3
 8011882:	4618      	mov	r0, r3
 8011884:	f7fa ff54 	bl	800c730 <lwip_htons>
 8011888:	4603      	mov	r3, r0
 801188a:	b2db      	uxtb	r3, r3
 801188c:	f003 0302 	and.w	r3, r3, #2
 8011890:	2b00      	cmp	r3, #0
 8011892:	d005      	beq.n	80118a0 <tcp_receive+0x934>
                inseg.len -= 1;
 8011894:	4b78      	ldr	r3, [pc, #480]	; (8011a78 <tcp_receive+0xb0c>)
 8011896:	891b      	ldrh	r3, [r3, #8]
 8011898:	3b01      	subs	r3, #1
 801189a:	b29a      	uxth	r2, r3
 801189c:	4b76      	ldr	r3, [pc, #472]	; (8011a78 <tcp_receive+0xb0c>)
 801189e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80118a0:	4b75      	ldr	r3, [pc, #468]	; (8011a78 <tcp_receive+0xb0c>)
 80118a2:	685b      	ldr	r3, [r3, #4]
 80118a4:	4a74      	ldr	r2, [pc, #464]	; (8011a78 <tcp_receive+0xb0c>)
 80118a6:	8912      	ldrh	r2, [r2, #8]
 80118a8:	4611      	mov	r1, r2
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7fc f8ee 	bl	800da8c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80118b0:	4b71      	ldr	r3, [pc, #452]	; (8011a78 <tcp_receive+0xb0c>)
 80118b2:	891c      	ldrh	r4, [r3, #8]
 80118b4:	4b70      	ldr	r3, [pc, #448]	; (8011a78 <tcp_receive+0xb0c>)
 80118b6:	68db      	ldr	r3, [r3, #12]
 80118b8:	899b      	ldrh	r3, [r3, #12]
 80118ba:	b29b      	uxth	r3, r3
 80118bc:	4618      	mov	r0, r3
 80118be:	f7fa ff37 	bl	800c730 <lwip_htons>
 80118c2:	4603      	mov	r3, r0
 80118c4:	b2db      	uxtb	r3, r3
 80118c6:	f003 0303 	and.w	r3, r3, #3
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d001      	beq.n	80118d2 <tcp_receive+0x966>
 80118ce:	2301      	movs	r3, #1
 80118d0:	e000      	b.n	80118d4 <tcp_receive+0x968>
 80118d2:	2300      	movs	r3, #0
 80118d4:	4423      	add	r3, r4
 80118d6:	b29a      	uxth	r2, r3
 80118d8:	4b65      	ldr	r3, [pc, #404]	; (8011a70 <tcp_receive+0xb04>)
 80118da:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80118dc:	4b64      	ldr	r3, [pc, #400]	; (8011a70 <tcp_receive+0xb04>)
 80118de:	881b      	ldrh	r3, [r3, #0]
 80118e0:	461a      	mov	r2, r3
 80118e2:	4b64      	ldr	r3, [pc, #400]	; (8011a74 <tcp_receive+0xb08>)
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	441a      	add	r2, r3
 80118e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118ea:	68db      	ldr	r3, [r3, #12]
 80118ec:	685b      	ldr	r3, [r3, #4]
 80118ee:	429a      	cmp	r2, r3
 80118f0:	d006      	beq.n	8011900 <tcp_receive+0x994>
 80118f2:	4b62      	ldr	r3, [pc, #392]	; (8011a7c <tcp_receive+0xb10>)
 80118f4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80118f8:	4961      	ldr	r1, [pc, #388]	; (8011a80 <tcp_receive+0xb14>)
 80118fa:	4862      	ldr	r0, [pc, #392]	; (8011a84 <tcp_receive+0xb18>)
 80118fc:	f005 fa92 	bl	8016e24 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011904:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011906:	4b5a      	ldr	r3, [pc, #360]	; (8011a70 <tcp_receive+0xb04>)
 8011908:	881b      	ldrh	r3, [r3, #0]
 801190a:	461a      	mov	r2, r3
 801190c:	4b59      	ldr	r3, [pc, #356]	; (8011a74 <tcp_receive+0xb08>)
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	441a      	add	r2, r3
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801191a:	4b55      	ldr	r3, [pc, #340]	; (8011a70 <tcp_receive+0xb04>)
 801191c:	881b      	ldrh	r3, [r3, #0]
 801191e:	429a      	cmp	r2, r3
 8011920:	d206      	bcs.n	8011930 <tcp_receive+0x9c4>
 8011922:	4b56      	ldr	r3, [pc, #344]	; (8011a7c <tcp_receive+0xb10>)
 8011924:	f240 6207 	movw	r2, #1543	; 0x607
 8011928:	4957      	ldr	r1, [pc, #348]	; (8011a88 <tcp_receive+0xb1c>)
 801192a:	4856      	ldr	r0, [pc, #344]	; (8011a84 <tcp_receive+0xb18>)
 801192c:	f005 fa7a 	bl	8016e24 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011934:	4b4e      	ldr	r3, [pc, #312]	; (8011a70 <tcp_receive+0xb04>)
 8011936:	881b      	ldrh	r3, [r3, #0]
 8011938:	1ad3      	subs	r3, r2, r3
 801193a:	b29a      	uxth	r2, r3
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011940:	6878      	ldr	r0, [r7, #4]
 8011942:	f7fc ffc9 	bl	800e8d8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011946:	4b4c      	ldr	r3, [pc, #304]	; (8011a78 <tcp_receive+0xb0c>)
 8011948:	685b      	ldr	r3, [r3, #4]
 801194a:	891b      	ldrh	r3, [r3, #8]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d006      	beq.n	801195e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011950:	4b49      	ldr	r3, [pc, #292]	; (8011a78 <tcp_receive+0xb0c>)
 8011952:	685b      	ldr	r3, [r3, #4]
 8011954:	4a4d      	ldr	r2, [pc, #308]	; (8011a8c <tcp_receive+0xb20>)
 8011956:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011958:	4b47      	ldr	r3, [pc, #284]	; (8011a78 <tcp_receive+0xb0c>)
 801195a:	2200      	movs	r2, #0
 801195c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801195e:	4b46      	ldr	r3, [pc, #280]	; (8011a78 <tcp_receive+0xb0c>)
 8011960:	68db      	ldr	r3, [r3, #12]
 8011962:	899b      	ldrh	r3, [r3, #12]
 8011964:	b29b      	uxth	r3, r3
 8011966:	4618      	mov	r0, r3
 8011968:	f7fa fee2 	bl	800c730 <lwip_htons>
 801196c:	4603      	mov	r3, r0
 801196e:	b2db      	uxtb	r3, r3
 8011970:	f003 0301 	and.w	r3, r3, #1
 8011974:	2b00      	cmp	r3, #0
 8011976:	f000 80b8 	beq.w	8011aea <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801197a:	4b45      	ldr	r3, [pc, #276]	; (8011a90 <tcp_receive+0xb24>)
 801197c:	781b      	ldrb	r3, [r3, #0]
 801197e:	f043 0320 	orr.w	r3, r3, #32
 8011982:	b2da      	uxtb	r2, r3
 8011984:	4b42      	ldr	r3, [pc, #264]	; (8011a90 <tcp_receive+0xb24>)
 8011986:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011988:	e0af      	b.n	8011aea <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801198e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011994:	68db      	ldr	r3, [r3, #12]
 8011996:	685b      	ldr	r3, [r3, #4]
 8011998:	4a36      	ldr	r2, [pc, #216]	; (8011a74 <tcp_receive+0xb08>)
 801199a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801199c:	68bb      	ldr	r3, [r7, #8]
 801199e:	891b      	ldrh	r3, [r3, #8]
 80119a0:	461c      	mov	r4, r3
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	68db      	ldr	r3, [r3, #12]
 80119a6:	899b      	ldrh	r3, [r3, #12]
 80119a8:	b29b      	uxth	r3, r3
 80119aa:	4618      	mov	r0, r3
 80119ac:	f7fa fec0 	bl	800c730 <lwip_htons>
 80119b0:	4603      	mov	r3, r0
 80119b2:	b2db      	uxtb	r3, r3
 80119b4:	f003 0303 	and.w	r3, r3, #3
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d001      	beq.n	80119c0 <tcp_receive+0xa54>
 80119bc:	2301      	movs	r3, #1
 80119be:	e000      	b.n	80119c2 <tcp_receive+0xa56>
 80119c0:	2300      	movs	r3, #0
 80119c2:	191a      	adds	r2, r3, r4
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119c8:	441a      	add	r2, r3
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80119d2:	461c      	mov	r4, r3
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	891b      	ldrh	r3, [r3, #8]
 80119d8:	461d      	mov	r5, r3
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	68db      	ldr	r3, [r3, #12]
 80119de:	899b      	ldrh	r3, [r3, #12]
 80119e0:	b29b      	uxth	r3, r3
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7fa fea4 	bl	800c730 <lwip_htons>
 80119e8:	4603      	mov	r3, r0
 80119ea:	b2db      	uxtb	r3, r3
 80119ec:	f003 0303 	and.w	r3, r3, #3
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d001      	beq.n	80119f8 <tcp_receive+0xa8c>
 80119f4:	2301      	movs	r3, #1
 80119f6:	e000      	b.n	80119fa <tcp_receive+0xa8e>
 80119f8:	2300      	movs	r3, #0
 80119fa:	442b      	add	r3, r5
 80119fc:	429c      	cmp	r4, r3
 80119fe:	d206      	bcs.n	8011a0e <tcp_receive+0xaa2>
 8011a00:	4b1e      	ldr	r3, [pc, #120]	; (8011a7c <tcp_receive+0xb10>)
 8011a02:	f240 622b 	movw	r2, #1579	; 0x62b
 8011a06:	4923      	ldr	r1, [pc, #140]	; (8011a94 <tcp_receive+0xb28>)
 8011a08:	481e      	ldr	r0, [pc, #120]	; (8011a84 <tcp_receive+0xb18>)
 8011a0a:	f005 fa0b 	bl	8016e24 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011a0e:	68bb      	ldr	r3, [r7, #8]
 8011a10:	891b      	ldrh	r3, [r3, #8]
 8011a12:	461c      	mov	r4, r3
 8011a14:	68bb      	ldr	r3, [r7, #8]
 8011a16:	68db      	ldr	r3, [r3, #12]
 8011a18:	899b      	ldrh	r3, [r3, #12]
 8011a1a:	b29b      	uxth	r3, r3
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f7fa fe87 	bl	800c730 <lwip_htons>
 8011a22:	4603      	mov	r3, r0
 8011a24:	b2db      	uxtb	r3, r3
 8011a26:	f003 0303 	and.w	r3, r3, #3
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d001      	beq.n	8011a32 <tcp_receive+0xac6>
 8011a2e:	2301      	movs	r3, #1
 8011a30:	e000      	b.n	8011a34 <tcp_receive+0xac8>
 8011a32:	2300      	movs	r3, #0
 8011a34:	1919      	adds	r1, r3, r4
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011a3a:	b28b      	uxth	r3, r1
 8011a3c:	1ad3      	subs	r3, r2, r3
 8011a3e:	b29a      	uxth	r2, r3
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f7fc ff47 	bl	800e8d8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	685b      	ldr	r3, [r3, #4]
 8011a4e:	891b      	ldrh	r3, [r3, #8]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d028      	beq.n	8011aa6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011a54:	4b0d      	ldr	r3, [pc, #52]	; (8011a8c <tcp_receive+0xb20>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d01d      	beq.n	8011a98 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011a5c:	4b0b      	ldr	r3, [pc, #44]	; (8011a8c <tcp_receive+0xb20>)
 8011a5e:	681a      	ldr	r2, [r3, #0]
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	685b      	ldr	r3, [r3, #4]
 8011a64:	4619      	mov	r1, r3
 8011a66:	4610      	mov	r0, r2
 8011a68:	f7fc fa64 	bl	800df34 <pbuf_cat>
 8011a6c:	e018      	b.n	8011aa0 <tcp_receive+0xb34>
 8011a6e:	bf00      	nop
 8011a70:	2000426e 	.word	0x2000426e
 8011a74:	20004264 	.word	0x20004264
 8011a78:	20004244 	.word	0x20004244
 8011a7c:	080192f0 	.word	0x080192f0
 8011a80:	080196d0 	.word	0x080196d0
 8011a84:	0801933c 	.word	0x0801933c
 8011a88:	0801970c 	.word	0x0801970c
 8011a8c:	20004274 	.word	0x20004274
 8011a90:	20004271 	.word	0x20004271
 8011a94:	0801972c 	.word	0x0801972c
            } else {
              recv_data = cseg->p;
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	685b      	ldr	r3, [r3, #4]
 8011a9c:	4a70      	ldr	r2, [pc, #448]	; (8011c60 <tcp_receive+0xcf4>)
 8011a9e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011aa6:	68bb      	ldr	r3, [r7, #8]
 8011aa8:	68db      	ldr	r3, [r3, #12]
 8011aaa:	899b      	ldrh	r3, [r3, #12]
 8011aac:	b29b      	uxth	r3, r3
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7fa fe3e 	bl	800c730 <lwip_htons>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	b2db      	uxtb	r3, r3
 8011ab8:	f003 0301 	and.w	r3, r3, #1
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d00d      	beq.n	8011adc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011ac0:	4b68      	ldr	r3, [pc, #416]	; (8011c64 <tcp_receive+0xcf8>)
 8011ac2:	781b      	ldrb	r3, [r3, #0]
 8011ac4:	f043 0320 	orr.w	r3, r3, #32
 8011ac8:	b2da      	uxtb	r2, r3
 8011aca:	4b66      	ldr	r3, [pc, #408]	; (8011c64 <tcp_receive+0xcf8>)
 8011acc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	7d1b      	ldrb	r3, [r3, #20]
 8011ad2:	2b04      	cmp	r3, #4
 8011ad4:	d102      	bne.n	8011adc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	2207      	movs	r2, #7
 8011ada:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011adc:	68bb      	ldr	r3, [r7, #8]
 8011ade:	681a      	ldr	r2, [r3, #0]
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011ae4:	68b8      	ldr	r0, [r7, #8]
 8011ae6:	f7fd fbd6 	bl	800f296 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d008      	beq.n	8011b04 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011af6:	68db      	ldr	r3, [r3, #12]
 8011af8:	685a      	ldr	r2, [r3, #4]
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011afe:	429a      	cmp	r2, r3
 8011b00:	f43f af43 	beq.w	801198a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	8b5b      	ldrh	r3, [r3, #26]
 8011b08:	f003 0301 	and.w	r3, r3, #1
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d00e      	beq.n	8011b2e <tcp_receive+0xbc2>
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	8b5b      	ldrh	r3, [r3, #26]
 8011b14:	f023 0301 	bic.w	r3, r3, #1
 8011b18:	b29a      	uxth	r2, r3
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	835a      	strh	r2, [r3, #26]
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	8b5b      	ldrh	r3, [r3, #26]
 8011b22:	f043 0302 	orr.w	r3, r3, #2
 8011b26:	b29a      	uxth	r2, r3
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011b2c:	e188      	b.n	8011e40 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	8b5b      	ldrh	r3, [r3, #26]
 8011b32:	f043 0301 	orr.w	r3, r3, #1
 8011b36:	b29a      	uxth	r2, r3
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011b3c:	e180      	b.n	8011e40 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d106      	bne.n	8011b54 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011b46:	4848      	ldr	r0, [pc, #288]	; (8011c68 <tcp_receive+0xcfc>)
 8011b48:	f7fd fbbe 	bl	800f2c8 <tcp_seg_copy>
 8011b4c:	4602      	mov	r2, r0
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	675a      	str	r2, [r3, #116]	; 0x74
 8011b52:	e16d      	b.n	8011e30 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011b54:	2300      	movs	r3, #0
 8011b56:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8011b5e:	e157      	b.n	8011e10 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8011b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b62:	68db      	ldr	r3, [r3, #12]
 8011b64:	685a      	ldr	r2, [r3, #4]
 8011b66:	4b41      	ldr	r3, [pc, #260]	; (8011c6c <tcp_receive+0xd00>)
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	d11d      	bne.n	8011baa <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011b6e:	4b3e      	ldr	r3, [pc, #248]	; (8011c68 <tcp_receive+0xcfc>)
 8011b70:	891a      	ldrh	r2, [r3, #8]
 8011b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b74:	891b      	ldrh	r3, [r3, #8]
 8011b76:	429a      	cmp	r2, r3
 8011b78:	f240 814f 	bls.w	8011e1a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011b7c:	483a      	ldr	r0, [pc, #232]	; (8011c68 <tcp_receive+0xcfc>)
 8011b7e:	f7fd fba3 	bl	800f2c8 <tcp_seg_copy>
 8011b82:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011b84:	697b      	ldr	r3, [r7, #20]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	f000 8149 	beq.w	8011e1e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8011b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d003      	beq.n	8011b9a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b94:	697a      	ldr	r2, [r7, #20]
 8011b96:	601a      	str	r2, [r3, #0]
 8011b98:	e002      	b.n	8011ba0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	697a      	ldr	r2, [r7, #20]
 8011b9e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011ba0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011ba2:	6978      	ldr	r0, [r7, #20]
 8011ba4:	f7ff f8de 	bl	8010d64 <tcp_oos_insert_segment>
                }
                break;
 8011ba8:	e139      	b.n	8011e1e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d117      	bne.n	8011be0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011bb0:	4b2e      	ldr	r3, [pc, #184]	; (8011c6c <tcp_receive+0xd00>)
 8011bb2:	681a      	ldr	r2, [r3, #0]
 8011bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bb6:	68db      	ldr	r3, [r3, #12]
 8011bb8:	685b      	ldr	r3, [r3, #4]
 8011bba:	1ad3      	subs	r3, r2, r3
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	da57      	bge.n	8011c70 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011bc0:	4829      	ldr	r0, [pc, #164]	; (8011c68 <tcp_receive+0xcfc>)
 8011bc2:	f7fd fb81 	bl	800f2c8 <tcp_seg_copy>
 8011bc6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011bc8:	69bb      	ldr	r3, [r7, #24]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	f000 8129 	beq.w	8011e22 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	69ba      	ldr	r2, [r7, #24]
 8011bd4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011bd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011bd8:	69b8      	ldr	r0, [r7, #24]
 8011bda:	f7ff f8c3 	bl	8010d64 <tcp_oos_insert_segment>
                  }
                  break;
 8011bde:	e120      	b.n	8011e22 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011be0:	4b22      	ldr	r3, [pc, #136]	; (8011c6c <tcp_receive+0xd00>)
 8011be2:	681a      	ldr	r2, [r3, #0]
 8011be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011be6:	68db      	ldr	r3, [r3, #12]
 8011be8:	685b      	ldr	r3, [r3, #4]
 8011bea:	1ad3      	subs	r3, r2, r3
 8011bec:	3b01      	subs	r3, #1
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	db3e      	blt.n	8011c70 <tcp_receive+0xd04>
 8011bf2:	4b1e      	ldr	r3, [pc, #120]	; (8011c6c <tcp_receive+0xd00>)
 8011bf4:	681a      	ldr	r2, [r3, #0]
 8011bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bf8:	68db      	ldr	r3, [r3, #12]
 8011bfa:	685b      	ldr	r3, [r3, #4]
 8011bfc:	1ad3      	subs	r3, r2, r3
 8011bfe:	3301      	adds	r3, #1
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	dc35      	bgt.n	8011c70 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011c04:	4818      	ldr	r0, [pc, #96]	; (8011c68 <tcp_receive+0xcfc>)
 8011c06:	f7fd fb5f 	bl	800f2c8 <tcp_seg_copy>
 8011c0a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011c0c:	69fb      	ldr	r3, [r7, #28]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	f000 8109 	beq.w	8011e26 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c16:	68db      	ldr	r3, [r3, #12]
 8011c18:	685b      	ldr	r3, [r3, #4]
 8011c1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c1c:	8912      	ldrh	r2, [r2, #8]
 8011c1e:	441a      	add	r2, r3
 8011c20:	4b12      	ldr	r3, [pc, #72]	; (8011c6c <tcp_receive+0xd00>)
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	1ad3      	subs	r3, r2, r3
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	dd12      	ble.n	8011c50 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011c2a:	4b10      	ldr	r3, [pc, #64]	; (8011c6c <tcp_receive+0xd00>)
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	b29a      	uxth	r2, r3
 8011c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c32:	68db      	ldr	r3, [r3, #12]
 8011c34:	685b      	ldr	r3, [r3, #4]
 8011c36:	b29b      	uxth	r3, r3
 8011c38:	1ad3      	subs	r3, r2, r3
 8011c3a:	b29a      	uxth	r2, r3
 8011c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c3e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c42:	685a      	ldr	r2, [r3, #4]
 8011c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c46:	891b      	ldrh	r3, [r3, #8]
 8011c48:	4619      	mov	r1, r3
 8011c4a:	4610      	mov	r0, r2
 8011c4c:	f7fb ff1e 	bl	800da8c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c52:	69fa      	ldr	r2, [r7, #28]
 8011c54:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011c56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011c58:	69f8      	ldr	r0, [r7, #28]
 8011c5a:	f7ff f883 	bl	8010d64 <tcp_oos_insert_segment>
                  }
                  break;
 8011c5e:	e0e2      	b.n	8011e26 <tcp_receive+0xeba>
 8011c60:	20004274 	.word	0x20004274
 8011c64:	20004271 	.word	0x20004271
 8011c68:	20004244 	.word	0x20004244
 8011c6c:	20004264 	.word	0x20004264
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c72:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	f040 80c6 	bne.w	8011e0a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011c7e:	4b80      	ldr	r3, [pc, #512]	; (8011e80 <tcp_receive+0xf14>)
 8011c80:	681a      	ldr	r2, [r3, #0]
 8011c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c84:	68db      	ldr	r3, [r3, #12]
 8011c86:	685b      	ldr	r3, [r3, #4]
 8011c88:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	f340 80bd 	ble.w	8011e0a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c92:	68db      	ldr	r3, [r3, #12]
 8011c94:	899b      	ldrh	r3, [r3, #12]
 8011c96:	b29b      	uxth	r3, r3
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f7fa fd49 	bl	800c730 <lwip_htons>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	b2db      	uxtb	r3, r3
 8011ca2:	f003 0301 	and.w	r3, r3, #1
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	f040 80bf 	bne.w	8011e2a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011cac:	4875      	ldr	r0, [pc, #468]	; (8011e84 <tcp_receive+0xf18>)
 8011cae:	f7fd fb0b 	bl	800f2c8 <tcp_seg_copy>
 8011cb2:	4602      	mov	r2, r0
 8011cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cb6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	f000 80b6 	beq.w	8011e2e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cc4:	68db      	ldr	r3, [r3, #12]
 8011cc6:	685b      	ldr	r3, [r3, #4]
 8011cc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011cca:	8912      	ldrh	r2, [r2, #8]
 8011ccc:	441a      	add	r2, r3
 8011cce:	4b6c      	ldr	r3, [pc, #432]	; (8011e80 <tcp_receive+0xf14>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	1ad3      	subs	r3, r2, r3
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	dd12      	ble.n	8011cfe <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011cd8:	4b69      	ldr	r3, [pc, #420]	; (8011e80 <tcp_receive+0xf14>)
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	b29a      	uxth	r2, r3
 8011cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce0:	68db      	ldr	r3, [r3, #12]
 8011ce2:	685b      	ldr	r3, [r3, #4]
 8011ce4:	b29b      	uxth	r3, r3
 8011ce6:	1ad3      	subs	r3, r2, r3
 8011ce8:	b29a      	uxth	r2, r3
 8011cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cec:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf0:	685a      	ldr	r2, [r3, #4]
 8011cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf4:	891b      	ldrh	r3, [r3, #8]
 8011cf6:	4619      	mov	r1, r3
 8011cf8:	4610      	mov	r0, r2
 8011cfa:	f7fb fec7 	bl	800da8c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011cfe:	4b62      	ldr	r3, [pc, #392]	; (8011e88 <tcp_receive+0xf1c>)
 8011d00:	881b      	ldrh	r3, [r3, #0]
 8011d02:	461a      	mov	r2, r3
 8011d04:	4b5e      	ldr	r3, [pc, #376]	; (8011e80 <tcp_receive+0xf14>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	441a      	add	r2, r3
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d0e:	6879      	ldr	r1, [r7, #4]
 8011d10:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011d12:	440b      	add	r3, r1
 8011d14:	1ad3      	subs	r3, r2, r3
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	f340 8089 	ble.w	8011e2e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	68db      	ldr	r3, [r3, #12]
 8011d22:	899b      	ldrh	r3, [r3, #12]
 8011d24:	b29b      	uxth	r3, r3
 8011d26:	4618      	mov	r0, r3
 8011d28:	f7fa fd02 	bl	800c730 <lwip_htons>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	b2db      	uxtb	r3, r3
 8011d30:	f003 0301 	and.w	r3, r3, #1
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d022      	beq.n	8011d7e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	68db      	ldr	r3, [r3, #12]
 8011d3e:	899b      	ldrh	r3, [r3, #12]
 8011d40:	b29b      	uxth	r3, r3
 8011d42:	b21b      	sxth	r3, r3
 8011d44:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011d48:	b21c      	sxth	r4, r3
 8011d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	68db      	ldr	r3, [r3, #12]
 8011d50:	899b      	ldrh	r3, [r3, #12]
 8011d52:	b29b      	uxth	r3, r3
 8011d54:	4618      	mov	r0, r3
 8011d56:	f7fa fceb 	bl	800c730 <lwip_htons>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	b2db      	uxtb	r3, r3
 8011d5e:	b29b      	uxth	r3, r3
 8011d60:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011d64:	b29b      	uxth	r3, r3
 8011d66:	4618      	mov	r0, r3
 8011d68:	f7fa fce2 	bl	800c730 <lwip_htons>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	b21b      	sxth	r3, r3
 8011d70:	4323      	orrs	r3, r4
 8011d72:	b21a      	sxth	r2, r3
 8011d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	68db      	ldr	r3, [r3, #12]
 8011d7a:	b292      	uxth	r2, r2
 8011d7c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d82:	b29a      	uxth	r2, r3
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011d88:	4413      	add	r3, r2
 8011d8a:	b299      	uxth	r1, r3
 8011d8c:	4b3c      	ldr	r3, [pc, #240]	; (8011e80 <tcp_receive+0xf14>)
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	b29a      	uxth	r2, r3
 8011d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	1a8a      	subs	r2, r1, r2
 8011d98:	b292      	uxth	r2, r2
 8011d9a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	685a      	ldr	r2, [r3, #4]
 8011da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	891b      	ldrh	r3, [r3, #8]
 8011da8:	4619      	mov	r1, r3
 8011daa:	4610      	mov	r0, r2
 8011dac:	f7fb fe6e 	bl	800da8c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	891c      	ldrh	r4, [r3, #8]
 8011db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	68db      	ldr	r3, [r3, #12]
 8011dbc:	899b      	ldrh	r3, [r3, #12]
 8011dbe:	b29b      	uxth	r3, r3
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7fa fcb5 	bl	800c730 <lwip_htons>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	b2db      	uxtb	r3, r3
 8011dca:	f003 0303 	and.w	r3, r3, #3
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d001      	beq.n	8011dd6 <tcp_receive+0xe6a>
 8011dd2:	2301      	movs	r3, #1
 8011dd4:	e000      	b.n	8011dd8 <tcp_receive+0xe6c>
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	4423      	add	r3, r4
 8011dda:	b29a      	uxth	r2, r3
 8011ddc:	4b2a      	ldr	r3, [pc, #168]	; (8011e88 <tcp_receive+0xf1c>)
 8011dde:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011de0:	4b29      	ldr	r3, [pc, #164]	; (8011e88 <tcp_receive+0xf1c>)
 8011de2:	881b      	ldrh	r3, [r3, #0]
 8011de4:	461a      	mov	r2, r3
 8011de6:	4b26      	ldr	r3, [pc, #152]	; (8011e80 <tcp_receive+0xf14>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	441a      	add	r2, r3
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011df0:	6879      	ldr	r1, [r7, #4]
 8011df2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011df4:	440b      	add	r3, r1
 8011df6:	429a      	cmp	r2, r3
 8011df8:	d019      	beq.n	8011e2e <tcp_receive+0xec2>
 8011dfa:	4b24      	ldr	r3, [pc, #144]	; (8011e8c <tcp_receive+0xf20>)
 8011dfc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011e00:	4923      	ldr	r1, [pc, #140]	; (8011e90 <tcp_receive+0xf24>)
 8011e02:	4824      	ldr	r0, [pc, #144]	; (8011e94 <tcp_receive+0xf28>)
 8011e04:	f005 f80e 	bl	8016e24 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011e08:	e011      	b.n	8011e2e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	f47f aea4 	bne.w	8011b60 <tcp_receive+0xbf4>
 8011e18:	e00a      	b.n	8011e30 <tcp_receive+0xec4>
                break;
 8011e1a:	bf00      	nop
 8011e1c:	e008      	b.n	8011e30 <tcp_receive+0xec4>
                break;
 8011e1e:	bf00      	nop
 8011e20:	e006      	b.n	8011e30 <tcp_receive+0xec4>
                  break;
 8011e22:	bf00      	nop
 8011e24:	e004      	b.n	8011e30 <tcp_receive+0xec4>
                  break;
 8011e26:	bf00      	nop
 8011e28:	e002      	b.n	8011e30 <tcp_receive+0xec4>
                  break;
 8011e2a:	bf00      	nop
 8011e2c:	e000      	b.n	8011e30 <tcp_receive+0xec4>
                break;
 8011e2e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	f001 fa33 	bl	801329c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011e36:	e003      	b.n	8011e40 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011e38:	6878      	ldr	r0, [r7, #4]
 8011e3a:	f001 fa2f 	bl	801329c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011e3e:	e01a      	b.n	8011e76 <tcp_receive+0xf0a>
 8011e40:	e019      	b.n	8011e76 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011e42:	4b0f      	ldr	r3, [pc, #60]	; (8011e80 <tcp_receive+0xf14>)
 8011e44:	681a      	ldr	r2, [r3, #0]
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e4a:	1ad3      	subs	r3, r2, r3
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	db0a      	blt.n	8011e66 <tcp_receive+0xefa>
 8011e50:	4b0b      	ldr	r3, [pc, #44]	; (8011e80 <tcp_receive+0xf14>)
 8011e52:	681a      	ldr	r2, [r3, #0]
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e58:	6879      	ldr	r1, [r7, #4]
 8011e5a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011e5c:	440b      	add	r3, r1
 8011e5e:	1ad3      	subs	r3, r2, r3
 8011e60:	3301      	adds	r3, #1
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	dd07      	ble.n	8011e76 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	8b5b      	ldrh	r3, [r3, #26]
 8011e6a:	f043 0302 	orr.w	r3, r3, #2
 8011e6e:	b29a      	uxth	r2, r3
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011e74:	e7ff      	b.n	8011e76 <tcp_receive+0xf0a>
 8011e76:	bf00      	nop
 8011e78:	3750      	adds	r7, #80	; 0x50
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8011e7e:	bf00      	nop
 8011e80:	20004264 	.word	0x20004264
 8011e84:	20004244 	.word	0x20004244
 8011e88:	2000426e 	.word	0x2000426e
 8011e8c:	080192f0 	.word	0x080192f0
 8011e90:	08019698 	.word	0x08019698
 8011e94:	0801933c 	.word	0x0801933c

08011e98 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011e98:	b480      	push	{r7}
 8011e9a:	b083      	sub	sp, #12
 8011e9c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011e9e:	4b15      	ldr	r3, [pc, #84]	; (8011ef4 <tcp_get_next_optbyte+0x5c>)
 8011ea0:	881b      	ldrh	r3, [r3, #0]
 8011ea2:	1c5a      	adds	r2, r3, #1
 8011ea4:	b291      	uxth	r1, r2
 8011ea6:	4a13      	ldr	r2, [pc, #76]	; (8011ef4 <tcp_get_next_optbyte+0x5c>)
 8011ea8:	8011      	strh	r1, [r2, #0]
 8011eaa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011eac:	4b12      	ldr	r3, [pc, #72]	; (8011ef8 <tcp_get_next_optbyte+0x60>)
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d004      	beq.n	8011ebe <tcp_get_next_optbyte+0x26>
 8011eb4:	4b11      	ldr	r3, [pc, #68]	; (8011efc <tcp_get_next_optbyte+0x64>)
 8011eb6:	881b      	ldrh	r3, [r3, #0]
 8011eb8:	88fa      	ldrh	r2, [r7, #6]
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	d208      	bcs.n	8011ed0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011ebe:	4b10      	ldr	r3, [pc, #64]	; (8011f00 <tcp_get_next_optbyte+0x68>)
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	3314      	adds	r3, #20
 8011ec4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011ec6:	88fb      	ldrh	r3, [r7, #6]
 8011ec8:	683a      	ldr	r2, [r7, #0]
 8011eca:	4413      	add	r3, r2
 8011ecc:	781b      	ldrb	r3, [r3, #0]
 8011ece:	e00b      	b.n	8011ee8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011ed0:	88fb      	ldrh	r3, [r7, #6]
 8011ed2:	b2da      	uxtb	r2, r3
 8011ed4:	4b09      	ldr	r3, [pc, #36]	; (8011efc <tcp_get_next_optbyte+0x64>)
 8011ed6:	881b      	ldrh	r3, [r3, #0]
 8011ed8:	b2db      	uxtb	r3, r3
 8011eda:	1ad3      	subs	r3, r2, r3
 8011edc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011ede:	4b06      	ldr	r3, [pc, #24]	; (8011ef8 <tcp_get_next_optbyte+0x60>)
 8011ee0:	681a      	ldr	r2, [r3, #0]
 8011ee2:	797b      	ldrb	r3, [r7, #5]
 8011ee4:	4413      	add	r3, r2
 8011ee6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011ee8:	4618      	mov	r0, r3
 8011eea:	370c      	adds	r7, #12
 8011eec:	46bd      	mov	sp, r7
 8011eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef2:	4770      	bx	lr
 8011ef4:	20004260 	.word	0x20004260
 8011ef8:	2000425c 	.word	0x2000425c
 8011efc:	2000425a 	.word	0x2000425a
 8011f00:	20004254 	.word	0x20004254

08011f04 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b084      	sub	sp, #16
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d106      	bne.n	8011f20 <tcp_parseopt+0x1c>
 8011f12:	4b32      	ldr	r3, [pc, #200]	; (8011fdc <tcp_parseopt+0xd8>)
 8011f14:	f240 727d 	movw	r2, #1917	; 0x77d
 8011f18:	4931      	ldr	r1, [pc, #196]	; (8011fe0 <tcp_parseopt+0xdc>)
 8011f1a:	4832      	ldr	r0, [pc, #200]	; (8011fe4 <tcp_parseopt+0xe0>)
 8011f1c:	f004 ff82 	bl	8016e24 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011f20:	4b31      	ldr	r3, [pc, #196]	; (8011fe8 <tcp_parseopt+0xe4>)
 8011f22:	881b      	ldrh	r3, [r3, #0]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d055      	beq.n	8011fd4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011f28:	4b30      	ldr	r3, [pc, #192]	; (8011fec <tcp_parseopt+0xe8>)
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	801a      	strh	r2, [r3, #0]
 8011f2e:	e045      	b.n	8011fbc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011f30:	f7ff ffb2 	bl	8011e98 <tcp_get_next_optbyte>
 8011f34:	4603      	mov	r3, r0
 8011f36:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011f38:	7bfb      	ldrb	r3, [r7, #15]
 8011f3a:	2b02      	cmp	r3, #2
 8011f3c:	d006      	beq.n	8011f4c <tcp_parseopt+0x48>
 8011f3e:	2b02      	cmp	r3, #2
 8011f40:	dc2b      	bgt.n	8011f9a <tcp_parseopt+0x96>
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d041      	beq.n	8011fca <tcp_parseopt+0xc6>
 8011f46:	2b01      	cmp	r3, #1
 8011f48:	d127      	bne.n	8011f9a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011f4a:	e037      	b.n	8011fbc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011f4c:	f7ff ffa4 	bl	8011e98 <tcp_get_next_optbyte>
 8011f50:	4603      	mov	r3, r0
 8011f52:	2b04      	cmp	r3, #4
 8011f54:	d13b      	bne.n	8011fce <tcp_parseopt+0xca>
 8011f56:	4b25      	ldr	r3, [pc, #148]	; (8011fec <tcp_parseopt+0xe8>)
 8011f58:	881b      	ldrh	r3, [r3, #0]
 8011f5a:	3301      	adds	r3, #1
 8011f5c:	4a22      	ldr	r2, [pc, #136]	; (8011fe8 <tcp_parseopt+0xe4>)
 8011f5e:	8812      	ldrh	r2, [r2, #0]
 8011f60:	4293      	cmp	r3, r2
 8011f62:	da34      	bge.n	8011fce <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011f64:	f7ff ff98 	bl	8011e98 <tcp_get_next_optbyte>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	b29b      	uxth	r3, r3
 8011f6c:	021b      	lsls	r3, r3, #8
 8011f6e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011f70:	f7ff ff92 	bl	8011e98 <tcp_get_next_optbyte>
 8011f74:	4603      	mov	r3, r0
 8011f76:	b29a      	uxth	r2, r3
 8011f78:	89bb      	ldrh	r3, [r7, #12]
 8011f7a:	4313      	orrs	r3, r2
 8011f7c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011f7e:	89bb      	ldrh	r3, [r7, #12]
 8011f80:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011f84:	d804      	bhi.n	8011f90 <tcp_parseopt+0x8c>
 8011f86:	89bb      	ldrh	r3, [r7, #12]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d001      	beq.n	8011f90 <tcp_parseopt+0x8c>
 8011f8c:	89ba      	ldrh	r2, [r7, #12]
 8011f8e:	e001      	b.n	8011f94 <tcp_parseopt+0x90>
 8011f90:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011f98:	e010      	b.n	8011fbc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011f9a:	f7ff ff7d 	bl	8011e98 <tcp_get_next_optbyte>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011fa2:	7afb      	ldrb	r3, [r7, #11]
 8011fa4:	2b01      	cmp	r3, #1
 8011fa6:	d914      	bls.n	8011fd2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011fa8:	7afb      	ldrb	r3, [r7, #11]
 8011faa:	b29a      	uxth	r2, r3
 8011fac:	4b0f      	ldr	r3, [pc, #60]	; (8011fec <tcp_parseopt+0xe8>)
 8011fae:	881b      	ldrh	r3, [r3, #0]
 8011fb0:	4413      	add	r3, r2
 8011fb2:	b29b      	uxth	r3, r3
 8011fb4:	3b02      	subs	r3, #2
 8011fb6:	b29a      	uxth	r2, r3
 8011fb8:	4b0c      	ldr	r3, [pc, #48]	; (8011fec <tcp_parseopt+0xe8>)
 8011fba:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011fbc:	4b0b      	ldr	r3, [pc, #44]	; (8011fec <tcp_parseopt+0xe8>)
 8011fbe:	881a      	ldrh	r2, [r3, #0]
 8011fc0:	4b09      	ldr	r3, [pc, #36]	; (8011fe8 <tcp_parseopt+0xe4>)
 8011fc2:	881b      	ldrh	r3, [r3, #0]
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	d3b3      	bcc.n	8011f30 <tcp_parseopt+0x2c>
 8011fc8:	e004      	b.n	8011fd4 <tcp_parseopt+0xd0>
          return;
 8011fca:	bf00      	nop
 8011fcc:	e002      	b.n	8011fd4 <tcp_parseopt+0xd0>
            return;
 8011fce:	bf00      	nop
 8011fd0:	e000      	b.n	8011fd4 <tcp_parseopt+0xd0>
            return;
 8011fd2:	bf00      	nop
      }
    }
  }
}
 8011fd4:	3710      	adds	r7, #16
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}
 8011fda:	bf00      	nop
 8011fdc:	080192f0 	.word	0x080192f0
 8011fe0:	08019754 	.word	0x08019754
 8011fe4:	0801933c 	.word	0x0801933c
 8011fe8:	20004258 	.word	0x20004258
 8011fec:	20004260 	.word	0x20004260

08011ff0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011ff0:	b480      	push	{r7}
 8011ff2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011ff4:	4b05      	ldr	r3, [pc, #20]	; (801200c <tcp_trigger_input_pcb_close+0x1c>)
 8011ff6:	781b      	ldrb	r3, [r3, #0]
 8011ff8:	f043 0310 	orr.w	r3, r3, #16
 8011ffc:	b2da      	uxtb	r2, r3
 8011ffe:	4b03      	ldr	r3, [pc, #12]	; (801200c <tcp_trigger_input_pcb_close+0x1c>)
 8012000:	701a      	strb	r2, [r3, #0]
}
 8012002:	bf00      	nop
 8012004:	46bd      	mov	sp, r7
 8012006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200a:	4770      	bx	lr
 801200c:	20004271 	.word	0x20004271

08012010 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b084      	sub	sp, #16
 8012014:	af00      	add	r7, sp, #0
 8012016:	60f8      	str	r0, [r7, #12]
 8012018:	60b9      	str	r1, [r7, #8]
 801201a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d00a      	beq.n	8012038 <tcp_route+0x28>
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	7a1b      	ldrb	r3, [r3, #8]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d006      	beq.n	8012038 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	7a1b      	ldrb	r3, [r3, #8]
 801202e:	4618      	mov	r0, r3
 8012030:	f7fb fb24 	bl	800d67c <netif_get_by_index>
 8012034:	4603      	mov	r3, r0
 8012036:	e003      	b.n	8012040 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012038:	6878      	ldr	r0, [r7, #4]
 801203a:	f002 fead 	bl	8014d98 <ip4_route>
 801203e:	4603      	mov	r3, r0
  }
}
 8012040:	4618      	mov	r0, r3
 8012042:	3710      	adds	r7, #16
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}

08012048 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012048:	b590      	push	{r4, r7, lr}
 801204a:	b087      	sub	sp, #28
 801204c:	af00      	add	r7, sp, #0
 801204e:	60f8      	str	r0, [r7, #12]
 8012050:	60b9      	str	r1, [r7, #8]
 8012052:	603b      	str	r3, [r7, #0]
 8012054:	4613      	mov	r3, r2
 8012056:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d105      	bne.n	801206a <tcp_create_segment+0x22>
 801205e:	4b44      	ldr	r3, [pc, #272]	; (8012170 <tcp_create_segment+0x128>)
 8012060:	22a3      	movs	r2, #163	; 0xa3
 8012062:	4944      	ldr	r1, [pc, #272]	; (8012174 <tcp_create_segment+0x12c>)
 8012064:	4844      	ldr	r0, [pc, #272]	; (8012178 <tcp_create_segment+0x130>)
 8012066:	f004 fedd 	bl	8016e24 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801206a:	68bb      	ldr	r3, [r7, #8]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d105      	bne.n	801207c <tcp_create_segment+0x34>
 8012070:	4b3f      	ldr	r3, [pc, #252]	; (8012170 <tcp_create_segment+0x128>)
 8012072:	22a4      	movs	r2, #164	; 0xa4
 8012074:	4941      	ldr	r1, [pc, #260]	; (801217c <tcp_create_segment+0x134>)
 8012076:	4840      	ldr	r0, [pc, #256]	; (8012178 <tcp_create_segment+0x130>)
 8012078:	f004 fed4 	bl	8016e24 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801207c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012080:	009b      	lsls	r3, r3, #2
 8012082:	b2db      	uxtb	r3, r3
 8012084:	f003 0304 	and.w	r3, r3, #4
 8012088:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801208a:	2003      	movs	r0, #3
 801208c:	f7fb f806 	bl	800d09c <memp_malloc>
 8012090:	6138      	str	r0, [r7, #16]
 8012092:	693b      	ldr	r3, [r7, #16]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d104      	bne.n	80120a2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012098:	68b8      	ldr	r0, [r7, #8]
 801209a:	f7fb fe7d 	bl	800dd98 <pbuf_free>
    return NULL;
 801209e:	2300      	movs	r3, #0
 80120a0:	e061      	b.n	8012166 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80120a2:	693b      	ldr	r3, [r7, #16]
 80120a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80120a8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80120aa:	693b      	ldr	r3, [r7, #16]
 80120ac:	2200      	movs	r2, #0
 80120ae:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80120b0:	693b      	ldr	r3, [r7, #16]
 80120b2:	68ba      	ldr	r2, [r7, #8]
 80120b4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80120b6:	68bb      	ldr	r3, [r7, #8]
 80120b8:	891a      	ldrh	r2, [r3, #8]
 80120ba:	7dfb      	ldrb	r3, [r7, #23]
 80120bc:	b29b      	uxth	r3, r3
 80120be:	429a      	cmp	r2, r3
 80120c0:	d205      	bcs.n	80120ce <tcp_create_segment+0x86>
 80120c2:	4b2b      	ldr	r3, [pc, #172]	; (8012170 <tcp_create_segment+0x128>)
 80120c4:	22b0      	movs	r2, #176	; 0xb0
 80120c6:	492e      	ldr	r1, [pc, #184]	; (8012180 <tcp_create_segment+0x138>)
 80120c8:	482b      	ldr	r0, [pc, #172]	; (8012178 <tcp_create_segment+0x130>)
 80120ca:	f004 feab 	bl	8016e24 <iprintf>
  seg->len = p->tot_len - optlen;
 80120ce:	68bb      	ldr	r3, [r7, #8]
 80120d0:	891a      	ldrh	r2, [r3, #8]
 80120d2:	7dfb      	ldrb	r3, [r7, #23]
 80120d4:	b29b      	uxth	r3, r3
 80120d6:	1ad3      	subs	r3, r2, r3
 80120d8:	b29a      	uxth	r2, r3
 80120da:	693b      	ldr	r3, [r7, #16]
 80120dc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80120de:	2114      	movs	r1, #20
 80120e0:	68b8      	ldr	r0, [r7, #8]
 80120e2:	f7fb fdc3 	bl	800dc6c <pbuf_add_header>
 80120e6:	4603      	mov	r3, r0
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d004      	beq.n	80120f6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80120ec:	6938      	ldr	r0, [r7, #16]
 80120ee:	f7fd f8d2 	bl	800f296 <tcp_seg_free>
    return NULL;
 80120f2:	2300      	movs	r3, #0
 80120f4:	e037      	b.n	8012166 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80120f6:	693b      	ldr	r3, [r7, #16]
 80120f8:	685b      	ldr	r3, [r3, #4]
 80120fa:	685a      	ldr	r2, [r3, #4]
 80120fc:	693b      	ldr	r3, [r7, #16]
 80120fe:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	8ada      	ldrh	r2, [r3, #22]
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	68dc      	ldr	r4, [r3, #12]
 8012108:	4610      	mov	r0, r2
 801210a:	f7fa fb11 	bl	800c730 <lwip_htons>
 801210e:	4603      	mov	r3, r0
 8012110:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	8b1a      	ldrh	r2, [r3, #24]
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	68dc      	ldr	r4, [r3, #12]
 801211a:	4610      	mov	r0, r2
 801211c:	f7fa fb08 	bl	800c730 <lwip_htons>
 8012120:	4603      	mov	r3, r0
 8012122:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012124:	693b      	ldr	r3, [r7, #16]
 8012126:	68dc      	ldr	r4, [r3, #12]
 8012128:	6838      	ldr	r0, [r7, #0]
 801212a:	f7fa fb16 	bl	800c75a <lwip_htonl>
 801212e:	4603      	mov	r3, r0
 8012130:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012132:	7dfb      	ldrb	r3, [r7, #23]
 8012134:	089b      	lsrs	r3, r3, #2
 8012136:	b2db      	uxtb	r3, r3
 8012138:	b29b      	uxth	r3, r3
 801213a:	3305      	adds	r3, #5
 801213c:	b29b      	uxth	r3, r3
 801213e:	031b      	lsls	r3, r3, #12
 8012140:	b29a      	uxth	r2, r3
 8012142:	79fb      	ldrb	r3, [r7, #7]
 8012144:	b29b      	uxth	r3, r3
 8012146:	4313      	orrs	r3, r2
 8012148:	b29a      	uxth	r2, r3
 801214a:	693b      	ldr	r3, [r7, #16]
 801214c:	68dc      	ldr	r4, [r3, #12]
 801214e:	4610      	mov	r0, r2
 8012150:	f7fa faee 	bl	800c730 <lwip_htons>
 8012154:	4603      	mov	r3, r0
 8012156:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	68db      	ldr	r3, [r3, #12]
 801215c:	2200      	movs	r2, #0
 801215e:	749a      	strb	r2, [r3, #18]
 8012160:	2200      	movs	r2, #0
 8012162:	74da      	strb	r2, [r3, #19]
  return seg;
 8012164:	693b      	ldr	r3, [r7, #16]
}
 8012166:	4618      	mov	r0, r3
 8012168:	371c      	adds	r7, #28
 801216a:	46bd      	mov	sp, r7
 801216c:	bd90      	pop	{r4, r7, pc}
 801216e:	bf00      	nop
 8012170:	08019770 	.word	0x08019770
 8012174:	080197a4 	.word	0x080197a4
 8012178:	080197c4 	.word	0x080197c4
 801217c:	080197ec 	.word	0x080197ec
 8012180:	08019810 	.word	0x08019810

08012184 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012184:	b590      	push	{r4, r7, lr}
 8012186:	b08b      	sub	sp, #44	; 0x2c
 8012188:	af02      	add	r7, sp, #8
 801218a:	6078      	str	r0, [r7, #4]
 801218c:	460b      	mov	r3, r1
 801218e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012190:	2300      	movs	r3, #0
 8012192:	61fb      	str	r3, [r7, #28]
 8012194:	2300      	movs	r3, #0
 8012196:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012198:	2300      	movs	r3, #0
 801219a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d106      	bne.n	80121b0 <tcp_split_unsent_seg+0x2c>
 80121a2:	4b95      	ldr	r3, [pc, #596]	; (80123f8 <tcp_split_unsent_seg+0x274>)
 80121a4:	f240 324b 	movw	r2, #843	; 0x34b
 80121a8:	4994      	ldr	r1, [pc, #592]	; (80123fc <tcp_split_unsent_seg+0x278>)
 80121aa:	4895      	ldr	r0, [pc, #596]	; (8012400 <tcp_split_unsent_seg+0x27c>)
 80121ac:	f004 fe3a 	bl	8016e24 <iprintf>

  useg = pcb->unsent;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121b4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d102      	bne.n	80121c2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80121bc:	f04f 33ff 	mov.w	r3, #4294967295
 80121c0:	e116      	b.n	80123f0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80121c2:	887b      	ldrh	r3, [r7, #2]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d109      	bne.n	80121dc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80121c8:	4b8b      	ldr	r3, [pc, #556]	; (80123f8 <tcp_split_unsent_seg+0x274>)
 80121ca:	f240 3253 	movw	r2, #851	; 0x353
 80121ce:	498d      	ldr	r1, [pc, #564]	; (8012404 <tcp_split_unsent_seg+0x280>)
 80121d0:	488b      	ldr	r0, [pc, #556]	; (8012400 <tcp_split_unsent_seg+0x27c>)
 80121d2:	f004 fe27 	bl	8016e24 <iprintf>
    return ERR_VAL;
 80121d6:	f06f 0305 	mvn.w	r3, #5
 80121da:	e109      	b.n	80123f0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80121dc:	697b      	ldr	r3, [r7, #20]
 80121de:	891b      	ldrh	r3, [r3, #8]
 80121e0:	887a      	ldrh	r2, [r7, #2]
 80121e2:	429a      	cmp	r2, r3
 80121e4:	d301      	bcc.n	80121ea <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80121e6:	2300      	movs	r3, #0
 80121e8:	e102      	b.n	80123f0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121ee:	887a      	ldrh	r2, [r7, #2]
 80121f0:	429a      	cmp	r2, r3
 80121f2:	d906      	bls.n	8012202 <tcp_split_unsent_seg+0x7e>
 80121f4:	4b80      	ldr	r3, [pc, #512]	; (80123f8 <tcp_split_unsent_seg+0x274>)
 80121f6:	f240 325b 	movw	r2, #859	; 0x35b
 80121fa:	4983      	ldr	r1, [pc, #524]	; (8012408 <tcp_split_unsent_seg+0x284>)
 80121fc:	4880      	ldr	r0, [pc, #512]	; (8012400 <tcp_split_unsent_seg+0x27c>)
 80121fe:	f004 fe11 	bl	8016e24 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012202:	697b      	ldr	r3, [r7, #20]
 8012204:	891b      	ldrh	r3, [r3, #8]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d106      	bne.n	8012218 <tcp_split_unsent_seg+0x94>
 801220a:	4b7b      	ldr	r3, [pc, #492]	; (80123f8 <tcp_split_unsent_seg+0x274>)
 801220c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012210:	497e      	ldr	r1, [pc, #504]	; (801240c <tcp_split_unsent_seg+0x288>)
 8012212:	487b      	ldr	r0, [pc, #492]	; (8012400 <tcp_split_unsent_seg+0x27c>)
 8012214:	f004 fe06 	bl	8016e24 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	7a9b      	ldrb	r3, [r3, #10]
 801221c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801221e:	7bfb      	ldrb	r3, [r7, #15]
 8012220:	009b      	lsls	r3, r3, #2
 8012222:	b2db      	uxtb	r3, r3
 8012224:	f003 0304 	and.w	r3, r3, #4
 8012228:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801222a:	697b      	ldr	r3, [r7, #20]
 801222c:	891a      	ldrh	r2, [r3, #8]
 801222e:	887b      	ldrh	r3, [r7, #2]
 8012230:	1ad3      	subs	r3, r2, r3
 8012232:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012234:	7bbb      	ldrb	r3, [r7, #14]
 8012236:	b29a      	uxth	r2, r3
 8012238:	89bb      	ldrh	r3, [r7, #12]
 801223a:	4413      	add	r3, r2
 801223c:	b29b      	uxth	r3, r3
 801223e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012242:	4619      	mov	r1, r3
 8012244:	2036      	movs	r0, #54	; 0x36
 8012246:	f7fb fac3 	bl	800d7d0 <pbuf_alloc>
 801224a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801224c:	693b      	ldr	r3, [r7, #16]
 801224e:	2b00      	cmp	r3, #0
 8012250:	f000 80b7 	beq.w	80123c2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012254:	697b      	ldr	r3, [r7, #20]
 8012256:	685b      	ldr	r3, [r3, #4]
 8012258:	891a      	ldrh	r2, [r3, #8]
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	891b      	ldrh	r3, [r3, #8]
 801225e:	1ad3      	subs	r3, r2, r3
 8012260:	b29a      	uxth	r2, r3
 8012262:	887b      	ldrh	r3, [r7, #2]
 8012264:	4413      	add	r3, r2
 8012266:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012268:	697b      	ldr	r3, [r7, #20]
 801226a:	6858      	ldr	r0, [r3, #4]
 801226c:	693b      	ldr	r3, [r7, #16]
 801226e:	685a      	ldr	r2, [r3, #4]
 8012270:	7bbb      	ldrb	r3, [r7, #14]
 8012272:	18d1      	adds	r1, r2, r3
 8012274:	897b      	ldrh	r3, [r7, #10]
 8012276:	89ba      	ldrh	r2, [r7, #12]
 8012278:	f7fb ff84 	bl	800e184 <pbuf_copy_partial>
 801227c:	4603      	mov	r3, r0
 801227e:	461a      	mov	r2, r3
 8012280:	89bb      	ldrh	r3, [r7, #12]
 8012282:	4293      	cmp	r3, r2
 8012284:	f040 809f 	bne.w	80123c6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012288:	697b      	ldr	r3, [r7, #20]
 801228a:	68db      	ldr	r3, [r3, #12]
 801228c:	899b      	ldrh	r3, [r3, #12]
 801228e:	b29b      	uxth	r3, r3
 8012290:	4618      	mov	r0, r3
 8012292:	f7fa fa4d 	bl	800c730 <lwip_htons>
 8012296:	4603      	mov	r3, r0
 8012298:	b2db      	uxtb	r3, r3
 801229a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801229e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80122a0:	2300      	movs	r3, #0
 80122a2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80122a4:	7efb      	ldrb	r3, [r7, #27]
 80122a6:	f003 0308 	and.w	r3, r3, #8
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d007      	beq.n	80122be <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80122ae:	7efb      	ldrb	r3, [r7, #27]
 80122b0:	f023 0308 	bic.w	r3, r3, #8
 80122b4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80122b6:	7ebb      	ldrb	r3, [r7, #26]
 80122b8:	f043 0308 	orr.w	r3, r3, #8
 80122bc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80122be:	7efb      	ldrb	r3, [r7, #27]
 80122c0:	f003 0301 	and.w	r3, r3, #1
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d007      	beq.n	80122d8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80122c8:	7efb      	ldrb	r3, [r7, #27]
 80122ca:	f023 0301 	bic.w	r3, r3, #1
 80122ce:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80122d0:	7ebb      	ldrb	r3, [r7, #26]
 80122d2:	f043 0301 	orr.w	r3, r3, #1
 80122d6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	68db      	ldr	r3, [r3, #12]
 80122dc:	685b      	ldr	r3, [r3, #4]
 80122de:	4618      	mov	r0, r3
 80122e0:	f7fa fa3b 	bl	800c75a <lwip_htonl>
 80122e4:	4602      	mov	r2, r0
 80122e6:	887b      	ldrh	r3, [r7, #2]
 80122e8:	18d1      	adds	r1, r2, r3
 80122ea:	7eba      	ldrb	r2, [r7, #26]
 80122ec:	7bfb      	ldrb	r3, [r7, #15]
 80122ee:	9300      	str	r3, [sp, #0]
 80122f0:	460b      	mov	r3, r1
 80122f2:	6939      	ldr	r1, [r7, #16]
 80122f4:	6878      	ldr	r0, [r7, #4]
 80122f6:	f7ff fea7 	bl	8012048 <tcp_create_segment>
 80122fa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80122fc:	69fb      	ldr	r3, [r7, #28]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d063      	beq.n	80123ca <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	685b      	ldr	r3, [r3, #4]
 8012306:	4618      	mov	r0, r3
 8012308:	f7fb fdd4 	bl	800deb4 <pbuf_clen>
 801230c:	4603      	mov	r3, r0
 801230e:	461a      	mov	r2, r3
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012316:	1a9b      	subs	r3, r3, r2
 8012318:	b29a      	uxth	r2, r3
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012320:	697b      	ldr	r3, [r7, #20]
 8012322:	6858      	ldr	r0, [r3, #4]
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	685b      	ldr	r3, [r3, #4]
 8012328:	891a      	ldrh	r2, [r3, #8]
 801232a:	89bb      	ldrh	r3, [r7, #12]
 801232c:	1ad3      	subs	r3, r2, r3
 801232e:	b29b      	uxth	r3, r3
 8012330:	4619      	mov	r1, r3
 8012332:	f7fb fbab 	bl	800da8c <pbuf_realloc>
  useg->len -= remainder;
 8012336:	697b      	ldr	r3, [r7, #20]
 8012338:	891a      	ldrh	r2, [r3, #8]
 801233a:	89bb      	ldrh	r3, [r7, #12]
 801233c:	1ad3      	subs	r3, r2, r3
 801233e:	b29a      	uxth	r2, r3
 8012340:	697b      	ldr	r3, [r7, #20]
 8012342:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012344:	697b      	ldr	r3, [r7, #20]
 8012346:	68db      	ldr	r3, [r3, #12]
 8012348:	899b      	ldrh	r3, [r3, #12]
 801234a:	b29c      	uxth	r4, r3
 801234c:	7efb      	ldrb	r3, [r7, #27]
 801234e:	b29b      	uxth	r3, r3
 8012350:	4618      	mov	r0, r3
 8012352:	f7fa f9ed 	bl	800c730 <lwip_htons>
 8012356:	4603      	mov	r3, r0
 8012358:	461a      	mov	r2, r3
 801235a:	697b      	ldr	r3, [r7, #20]
 801235c:	68db      	ldr	r3, [r3, #12]
 801235e:	4322      	orrs	r2, r4
 8012360:	b292      	uxth	r2, r2
 8012362:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012364:	697b      	ldr	r3, [r7, #20]
 8012366:	685b      	ldr	r3, [r3, #4]
 8012368:	4618      	mov	r0, r3
 801236a:	f7fb fda3 	bl	800deb4 <pbuf_clen>
 801236e:	4603      	mov	r3, r0
 8012370:	461a      	mov	r2, r3
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012378:	4413      	add	r3, r2
 801237a:	b29a      	uxth	r2, r3
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012382:	69fb      	ldr	r3, [r7, #28]
 8012384:	685b      	ldr	r3, [r3, #4]
 8012386:	4618      	mov	r0, r3
 8012388:	f7fb fd94 	bl	800deb4 <pbuf_clen>
 801238c:	4603      	mov	r3, r0
 801238e:	461a      	mov	r2, r3
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012396:	4413      	add	r3, r2
 8012398:	b29a      	uxth	r2, r3
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80123a0:	697b      	ldr	r3, [r7, #20]
 80123a2:	681a      	ldr	r2, [r3, #0]
 80123a4:	69fb      	ldr	r3, [r7, #28]
 80123a6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80123a8:	697b      	ldr	r3, [r7, #20]
 80123aa:	69fa      	ldr	r2, [r7, #28]
 80123ac:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80123ae:	69fb      	ldr	r3, [r7, #28]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d103      	bne.n	80123be <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	2200      	movs	r2, #0
 80123ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80123be:	2300      	movs	r3, #0
 80123c0:	e016      	b.n	80123f0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80123c2:	bf00      	nop
 80123c4:	e002      	b.n	80123cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80123c6:	bf00      	nop
 80123c8:	e000      	b.n	80123cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80123ca:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80123cc:	69fb      	ldr	r3, [r7, #28]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d006      	beq.n	80123e0 <tcp_split_unsent_seg+0x25c>
 80123d2:	4b09      	ldr	r3, [pc, #36]	; (80123f8 <tcp_split_unsent_seg+0x274>)
 80123d4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80123d8:	490d      	ldr	r1, [pc, #52]	; (8012410 <tcp_split_unsent_seg+0x28c>)
 80123da:	4809      	ldr	r0, [pc, #36]	; (8012400 <tcp_split_unsent_seg+0x27c>)
 80123dc:	f004 fd22 	bl	8016e24 <iprintf>
  if (p != NULL) {
 80123e0:	693b      	ldr	r3, [r7, #16]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d002      	beq.n	80123ec <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80123e6:	6938      	ldr	r0, [r7, #16]
 80123e8:	f7fb fcd6 	bl	800dd98 <pbuf_free>
  }

  return ERR_MEM;
 80123ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80123f0:	4618      	mov	r0, r3
 80123f2:	3724      	adds	r7, #36	; 0x24
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bd90      	pop	{r4, r7, pc}
 80123f8:	08019770 	.word	0x08019770
 80123fc:	08019b04 	.word	0x08019b04
 8012400:	080197c4 	.word	0x080197c4
 8012404:	08019b28 	.word	0x08019b28
 8012408:	08019b4c 	.word	0x08019b4c
 801240c:	08019b5c 	.word	0x08019b5c
 8012410:	08019b6c 	.word	0x08019b6c

08012414 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012414:	b590      	push	{r4, r7, lr}
 8012416:	b085      	sub	sp, #20
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d106      	bne.n	8012430 <tcp_send_fin+0x1c>
 8012422:	4b21      	ldr	r3, [pc, #132]	; (80124a8 <tcp_send_fin+0x94>)
 8012424:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012428:	4920      	ldr	r1, [pc, #128]	; (80124ac <tcp_send_fin+0x98>)
 801242a:	4821      	ldr	r0, [pc, #132]	; (80124b0 <tcp_send_fin+0x9c>)
 801242c:	f004 fcfa 	bl	8016e24 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012434:	2b00      	cmp	r3, #0
 8012436:	d02e      	beq.n	8012496 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801243c:	60fb      	str	r3, [r7, #12]
 801243e:	e002      	b.n	8012446 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d1f8      	bne.n	8012440 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	68db      	ldr	r3, [r3, #12]
 8012452:	899b      	ldrh	r3, [r3, #12]
 8012454:	b29b      	uxth	r3, r3
 8012456:	4618      	mov	r0, r3
 8012458:	f7fa f96a 	bl	800c730 <lwip_htons>
 801245c:	4603      	mov	r3, r0
 801245e:	b2db      	uxtb	r3, r3
 8012460:	f003 0307 	and.w	r3, r3, #7
 8012464:	2b00      	cmp	r3, #0
 8012466:	d116      	bne.n	8012496 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	68db      	ldr	r3, [r3, #12]
 801246c:	899b      	ldrh	r3, [r3, #12]
 801246e:	b29c      	uxth	r4, r3
 8012470:	2001      	movs	r0, #1
 8012472:	f7fa f95d 	bl	800c730 <lwip_htons>
 8012476:	4603      	mov	r3, r0
 8012478:	461a      	mov	r2, r3
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	68db      	ldr	r3, [r3, #12]
 801247e:	4322      	orrs	r2, r4
 8012480:	b292      	uxth	r2, r2
 8012482:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	8b5b      	ldrh	r3, [r3, #26]
 8012488:	f043 0320 	orr.w	r3, r3, #32
 801248c:	b29a      	uxth	r2, r3
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012492:	2300      	movs	r3, #0
 8012494:	e004      	b.n	80124a0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012496:	2101      	movs	r1, #1
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f000 f80b 	bl	80124b4 <tcp_enqueue_flags>
 801249e:	4603      	mov	r3, r0
}
 80124a0:	4618      	mov	r0, r3
 80124a2:	3714      	adds	r7, #20
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bd90      	pop	{r4, r7, pc}
 80124a8:	08019770 	.word	0x08019770
 80124ac:	08019b78 	.word	0x08019b78
 80124b0:	080197c4 	.word	0x080197c4

080124b4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b08a      	sub	sp, #40	; 0x28
 80124b8:	af02      	add	r7, sp, #8
 80124ba:	6078      	str	r0, [r7, #4]
 80124bc:	460b      	mov	r3, r1
 80124be:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80124c0:	2300      	movs	r3, #0
 80124c2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80124c4:	2300      	movs	r3, #0
 80124c6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80124c8:	78fb      	ldrb	r3, [r7, #3]
 80124ca:	f003 0303 	and.w	r3, r3, #3
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d106      	bne.n	80124e0 <tcp_enqueue_flags+0x2c>
 80124d2:	4b67      	ldr	r3, [pc, #412]	; (8012670 <tcp_enqueue_flags+0x1bc>)
 80124d4:	f240 4211 	movw	r2, #1041	; 0x411
 80124d8:	4966      	ldr	r1, [pc, #408]	; (8012674 <tcp_enqueue_flags+0x1c0>)
 80124da:	4867      	ldr	r0, [pc, #412]	; (8012678 <tcp_enqueue_flags+0x1c4>)
 80124dc:	f004 fca2 	bl	8016e24 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d106      	bne.n	80124f4 <tcp_enqueue_flags+0x40>
 80124e6:	4b62      	ldr	r3, [pc, #392]	; (8012670 <tcp_enqueue_flags+0x1bc>)
 80124e8:	f240 4213 	movw	r2, #1043	; 0x413
 80124ec:	4963      	ldr	r1, [pc, #396]	; (801267c <tcp_enqueue_flags+0x1c8>)
 80124ee:	4862      	ldr	r0, [pc, #392]	; (8012678 <tcp_enqueue_flags+0x1c4>)
 80124f0:	f004 fc98 	bl	8016e24 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80124f4:	78fb      	ldrb	r3, [r7, #3]
 80124f6:	f003 0302 	and.w	r3, r3, #2
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d001      	beq.n	8012502 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80124fe:	2301      	movs	r3, #1
 8012500:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012502:	7ffb      	ldrb	r3, [r7, #31]
 8012504:	009b      	lsls	r3, r3, #2
 8012506:	b2db      	uxtb	r3, r3
 8012508:	f003 0304 	and.w	r3, r3, #4
 801250c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801250e:	7dfb      	ldrb	r3, [r7, #23]
 8012510:	b29b      	uxth	r3, r3
 8012512:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012516:	4619      	mov	r1, r3
 8012518:	2036      	movs	r0, #54	; 0x36
 801251a:	f7fb f959 	bl	800d7d0 <pbuf_alloc>
 801251e:	6138      	str	r0, [r7, #16]
 8012520:	693b      	ldr	r3, [r7, #16]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d109      	bne.n	801253a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	8b5b      	ldrh	r3, [r3, #26]
 801252a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801252e:	b29a      	uxth	r2, r3
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012534:	f04f 33ff 	mov.w	r3, #4294967295
 8012538:	e095      	b.n	8012666 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801253a:	693b      	ldr	r3, [r7, #16]
 801253c:	895a      	ldrh	r2, [r3, #10]
 801253e:	7dfb      	ldrb	r3, [r7, #23]
 8012540:	b29b      	uxth	r3, r3
 8012542:	429a      	cmp	r2, r3
 8012544:	d206      	bcs.n	8012554 <tcp_enqueue_flags+0xa0>
 8012546:	4b4a      	ldr	r3, [pc, #296]	; (8012670 <tcp_enqueue_flags+0x1bc>)
 8012548:	f240 4239 	movw	r2, #1081	; 0x439
 801254c:	494c      	ldr	r1, [pc, #304]	; (8012680 <tcp_enqueue_flags+0x1cc>)
 801254e:	484a      	ldr	r0, [pc, #296]	; (8012678 <tcp_enqueue_flags+0x1c4>)
 8012550:	f004 fc68 	bl	8016e24 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012558:	78fa      	ldrb	r2, [r7, #3]
 801255a:	7ffb      	ldrb	r3, [r7, #31]
 801255c:	9300      	str	r3, [sp, #0]
 801255e:	460b      	mov	r3, r1
 8012560:	6939      	ldr	r1, [r7, #16]
 8012562:	6878      	ldr	r0, [r7, #4]
 8012564:	f7ff fd70 	bl	8012048 <tcp_create_segment>
 8012568:	60f8      	str	r0, [r7, #12]
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d109      	bne.n	8012584 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	8b5b      	ldrh	r3, [r3, #26]
 8012574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012578:	b29a      	uxth	r2, r3
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801257e:	f04f 33ff 	mov.w	r3, #4294967295
 8012582:	e070      	b.n	8012666 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	68db      	ldr	r3, [r3, #12]
 8012588:	f003 0303 	and.w	r3, r3, #3
 801258c:	2b00      	cmp	r3, #0
 801258e:	d006      	beq.n	801259e <tcp_enqueue_flags+0xea>
 8012590:	4b37      	ldr	r3, [pc, #220]	; (8012670 <tcp_enqueue_flags+0x1bc>)
 8012592:	f240 4242 	movw	r2, #1090	; 0x442
 8012596:	493b      	ldr	r1, [pc, #236]	; (8012684 <tcp_enqueue_flags+0x1d0>)
 8012598:	4837      	ldr	r0, [pc, #220]	; (8012678 <tcp_enqueue_flags+0x1c4>)
 801259a:	f004 fc43 	bl	8016e24 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	891b      	ldrh	r3, [r3, #8]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d006      	beq.n	80125b4 <tcp_enqueue_flags+0x100>
 80125a6:	4b32      	ldr	r3, [pc, #200]	; (8012670 <tcp_enqueue_flags+0x1bc>)
 80125a8:	f240 4243 	movw	r2, #1091	; 0x443
 80125ac:	4936      	ldr	r1, [pc, #216]	; (8012688 <tcp_enqueue_flags+0x1d4>)
 80125ae:	4832      	ldr	r0, [pc, #200]	; (8012678 <tcp_enqueue_flags+0x1c4>)
 80125b0:	f004 fc38 	bl	8016e24 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d103      	bne.n	80125c4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	68fa      	ldr	r2, [r7, #12]
 80125c0:	66da      	str	r2, [r3, #108]	; 0x6c
 80125c2:	e00d      	b.n	80125e0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125c8:	61bb      	str	r3, [r7, #24]
 80125ca:	e002      	b.n	80125d2 <tcp_enqueue_flags+0x11e>
 80125cc:	69bb      	ldr	r3, [r7, #24]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	61bb      	str	r3, [r7, #24]
 80125d2:	69bb      	ldr	r3, [r7, #24]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d1f8      	bne.n	80125cc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80125da:	69bb      	ldr	r3, [r7, #24]
 80125dc:	68fa      	ldr	r2, [r7, #12]
 80125de:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	2200      	movs	r2, #0
 80125e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80125e8:	78fb      	ldrb	r3, [r7, #3]
 80125ea:	f003 0302 	and.w	r3, r3, #2
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d104      	bne.n	80125fc <tcp_enqueue_flags+0x148>
 80125f2:	78fb      	ldrb	r3, [r7, #3]
 80125f4:	f003 0301 	and.w	r3, r3, #1
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d004      	beq.n	8012606 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012600:	1c5a      	adds	r2, r3, #1
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012606:	78fb      	ldrb	r3, [r7, #3]
 8012608:	f003 0301 	and.w	r3, r3, #1
 801260c:	2b00      	cmp	r3, #0
 801260e:	d006      	beq.n	801261e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	8b5b      	ldrh	r3, [r3, #26]
 8012614:	f043 0320 	orr.w	r3, r3, #32
 8012618:	b29a      	uxth	r2, r3
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	685b      	ldr	r3, [r3, #4]
 8012622:	4618      	mov	r0, r3
 8012624:	f7fb fc46 	bl	800deb4 <pbuf_clen>
 8012628:	4603      	mov	r3, r0
 801262a:	461a      	mov	r2, r3
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012632:	4413      	add	r3, r2
 8012634:	b29a      	uxth	r2, r3
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012642:	2b00      	cmp	r3, #0
 8012644:	d00e      	beq.n	8012664 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801264a:	2b00      	cmp	r3, #0
 801264c:	d10a      	bne.n	8012664 <tcp_enqueue_flags+0x1b0>
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012652:	2b00      	cmp	r3, #0
 8012654:	d106      	bne.n	8012664 <tcp_enqueue_flags+0x1b0>
 8012656:	4b06      	ldr	r3, [pc, #24]	; (8012670 <tcp_enqueue_flags+0x1bc>)
 8012658:	f240 4265 	movw	r2, #1125	; 0x465
 801265c:	490b      	ldr	r1, [pc, #44]	; (801268c <tcp_enqueue_flags+0x1d8>)
 801265e:	4806      	ldr	r0, [pc, #24]	; (8012678 <tcp_enqueue_flags+0x1c4>)
 8012660:	f004 fbe0 	bl	8016e24 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012664:	2300      	movs	r3, #0
}
 8012666:	4618      	mov	r0, r3
 8012668:	3720      	adds	r7, #32
 801266a:	46bd      	mov	sp, r7
 801266c:	bd80      	pop	{r7, pc}
 801266e:	bf00      	nop
 8012670:	08019770 	.word	0x08019770
 8012674:	08019b94 	.word	0x08019b94
 8012678:	080197c4 	.word	0x080197c4
 801267c:	08019bec 	.word	0x08019bec
 8012680:	08019c0c 	.word	0x08019c0c
 8012684:	08019c48 	.word	0x08019c48
 8012688:	08019c60 	.word	0x08019c60
 801268c:	08019c8c 	.word	0x08019c8c

08012690 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012690:	b5b0      	push	{r4, r5, r7, lr}
 8012692:	b08a      	sub	sp, #40	; 0x28
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d106      	bne.n	80126ac <tcp_output+0x1c>
 801269e:	4b9e      	ldr	r3, [pc, #632]	; (8012918 <tcp_output+0x288>)
 80126a0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80126a4:	499d      	ldr	r1, [pc, #628]	; (801291c <tcp_output+0x28c>)
 80126a6:	489e      	ldr	r0, [pc, #632]	; (8012920 <tcp_output+0x290>)
 80126a8:	f004 fbbc 	bl	8016e24 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	7d1b      	ldrb	r3, [r3, #20]
 80126b0:	2b01      	cmp	r3, #1
 80126b2:	d106      	bne.n	80126c2 <tcp_output+0x32>
 80126b4:	4b98      	ldr	r3, [pc, #608]	; (8012918 <tcp_output+0x288>)
 80126b6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80126ba:	499a      	ldr	r1, [pc, #616]	; (8012924 <tcp_output+0x294>)
 80126bc:	4898      	ldr	r0, [pc, #608]	; (8012920 <tcp_output+0x290>)
 80126be:	f004 fbb1 	bl	8016e24 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80126c2:	4b99      	ldr	r3, [pc, #612]	; (8012928 <tcp_output+0x298>)
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	687a      	ldr	r2, [r7, #4]
 80126c8:	429a      	cmp	r2, r3
 80126ca:	d101      	bne.n	80126d0 <tcp_output+0x40>
    return ERR_OK;
 80126cc:	2300      	movs	r3, #0
 80126ce:	e1ce      	b.n	8012a6e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80126dc:	4293      	cmp	r3, r2
 80126de:	bf28      	it	cs
 80126e0:	4613      	movcs	r3, r2
 80126e2:	b29b      	uxth	r3, r3
 80126e4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80126ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d10b      	bne.n	801270a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	8b5b      	ldrh	r3, [r3, #26]
 80126f6:	f003 0302 	and.w	r3, r3, #2
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	f000 81aa 	beq.w	8012a54 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f000 fdcb 	bl	801329c <tcp_send_empty_ack>
 8012706:	4603      	mov	r3, r0
 8012708:	e1b1      	b.n	8012a6e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801270a:	6879      	ldr	r1, [r7, #4]
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	3304      	adds	r3, #4
 8012710:	461a      	mov	r2, r3
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f7ff fc7c 	bl	8012010 <tcp_route>
 8012718:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801271a:	697b      	ldr	r3, [r7, #20]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d102      	bne.n	8012726 <tcp_output+0x96>
    return ERR_RTE;
 8012720:	f06f 0303 	mvn.w	r3, #3
 8012724:	e1a3      	b.n	8012a6e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d003      	beq.n	8012734 <tcp_output+0xa4>
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d111      	bne.n	8012758 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012734:	697b      	ldr	r3, [r7, #20]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d002      	beq.n	8012740 <tcp_output+0xb0>
 801273a:	697b      	ldr	r3, [r7, #20]
 801273c:	3304      	adds	r3, #4
 801273e:	e000      	b.n	8012742 <tcp_output+0xb2>
 8012740:	2300      	movs	r3, #0
 8012742:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012744:	693b      	ldr	r3, [r7, #16]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d102      	bne.n	8012750 <tcp_output+0xc0>
      return ERR_RTE;
 801274a:	f06f 0303 	mvn.w	r3, #3
 801274e:	e18e      	b.n	8012a6e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012750:	693b      	ldr	r3, [r7, #16]
 8012752:	681a      	ldr	r2, [r3, #0]
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801275a:	68db      	ldr	r3, [r3, #12]
 801275c:	685b      	ldr	r3, [r3, #4]
 801275e:	4618      	mov	r0, r3
 8012760:	f7f9 fffb 	bl	800c75a <lwip_htonl>
 8012764:	4602      	mov	r2, r0
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801276a:	1ad3      	subs	r3, r2, r3
 801276c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801276e:	8912      	ldrh	r2, [r2, #8]
 8012770:	4413      	add	r3, r2
 8012772:	69ba      	ldr	r2, [r7, #24]
 8012774:	429a      	cmp	r2, r3
 8012776:	d227      	bcs.n	80127c8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801277e:	461a      	mov	r2, r3
 8012780:	69bb      	ldr	r3, [r7, #24]
 8012782:	4293      	cmp	r3, r2
 8012784:	d114      	bne.n	80127b0 <tcp_output+0x120>
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801278a:	2b00      	cmp	r3, #0
 801278c:	d110      	bne.n	80127b0 <tcp_output+0x120>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012794:	2b00      	cmp	r3, #0
 8012796:	d10b      	bne.n	80127b0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	2200      	movs	r2, #0
 801279c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2201      	movs	r2, #1
 80127a4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2200      	movs	r2, #0
 80127ac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	8b5b      	ldrh	r3, [r3, #26]
 80127b4:	f003 0302 	and.w	r3, r3, #2
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	f000 814d 	beq.w	8012a58 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80127be:	6878      	ldr	r0, [r7, #4]
 80127c0:	f000 fd6c 	bl	801329c <tcp_send_empty_ack>
 80127c4:	4603      	mov	r3, r0
 80127c6:	e152      	b.n	8012a6e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	2200      	movs	r2, #0
 80127cc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127d4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80127d6:	6a3b      	ldr	r3, [r7, #32]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	f000 811c 	beq.w	8012a16 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80127de:	e002      	b.n	80127e6 <tcp_output+0x156>
 80127e0:	6a3b      	ldr	r3, [r7, #32]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	623b      	str	r3, [r7, #32]
 80127e6:	6a3b      	ldr	r3, [r7, #32]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d1f8      	bne.n	80127e0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80127ee:	e112      	b.n	8012a16 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80127f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f2:	68db      	ldr	r3, [r3, #12]
 80127f4:	899b      	ldrh	r3, [r3, #12]
 80127f6:	b29b      	uxth	r3, r3
 80127f8:	4618      	mov	r0, r3
 80127fa:	f7f9 ff99 	bl	800c730 <lwip_htons>
 80127fe:	4603      	mov	r3, r0
 8012800:	b2db      	uxtb	r3, r3
 8012802:	f003 0304 	and.w	r3, r3, #4
 8012806:	2b00      	cmp	r3, #0
 8012808:	d006      	beq.n	8012818 <tcp_output+0x188>
 801280a:	4b43      	ldr	r3, [pc, #268]	; (8012918 <tcp_output+0x288>)
 801280c:	f240 5236 	movw	r2, #1334	; 0x536
 8012810:	4946      	ldr	r1, [pc, #280]	; (801292c <tcp_output+0x29c>)
 8012812:	4843      	ldr	r0, [pc, #268]	; (8012920 <tcp_output+0x290>)
 8012814:	f004 fb06 	bl	8016e24 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801281c:	2b00      	cmp	r3, #0
 801281e:	d01f      	beq.n	8012860 <tcp_output+0x1d0>
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	8b5b      	ldrh	r3, [r3, #26]
 8012824:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012828:	2b00      	cmp	r3, #0
 801282a:	d119      	bne.n	8012860 <tcp_output+0x1d0>
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012830:	2b00      	cmp	r3, #0
 8012832:	d00b      	beq.n	801284c <tcp_output+0x1bc>
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d110      	bne.n	8012860 <tcp_output+0x1d0>
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012842:	891a      	ldrh	r2, [r3, #8]
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012848:	429a      	cmp	r2, r3
 801284a:	d209      	bcs.n	8012860 <tcp_output+0x1d0>
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012852:	2b00      	cmp	r3, #0
 8012854:	d004      	beq.n	8012860 <tcp_output+0x1d0>
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801285c:	2b08      	cmp	r3, #8
 801285e:	d901      	bls.n	8012864 <tcp_output+0x1d4>
 8012860:	2301      	movs	r3, #1
 8012862:	e000      	b.n	8012866 <tcp_output+0x1d6>
 8012864:	2300      	movs	r3, #0
 8012866:	2b00      	cmp	r3, #0
 8012868:	d106      	bne.n	8012878 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	8b5b      	ldrh	r3, [r3, #26]
 801286e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012872:	2b00      	cmp	r3, #0
 8012874:	f000 80e4 	beq.w	8012a40 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	7d1b      	ldrb	r3, [r3, #20]
 801287c:	2b02      	cmp	r3, #2
 801287e:	d00d      	beq.n	801289c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012882:	68db      	ldr	r3, [r3, #12]
 8012884:	899b      	ldrh	r3, [r3, #12]
 8012886:	b29c      	uxth	r4, r3
 8012888:	2010      	movs	r0, #16
 801288a:	f7f9 ff51 	bl	800c730 <lwip_htons>
 801288e:	4603      	mov	r3, r0
 8012890:	461a      	mov	r2, r3
 8012892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012894:	68db      	ldr	r3, [r3, #12]
 8012896:	4322      	orrs	r2, r4
 8012898:	b292      	uxth	r2, r2
 801289a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801289c:	697a      	ldr	r2, [r7, #20]
 801289e:	6879      	ldr	r1, [r7, #4]
 80128a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80128a2:	f000 f909 	bl	8012ab8 <tcp_output_segment>
 80128a6:	4603      	mov	r3, r0
 80128a8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80128aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d009      	beq.n	80128c6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	8b5b      	ldrh	r3, [r3, #26]
 80128b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128ba:	b29a      	uxth	r2, r3
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	835a      	strh	r2, [r3, #26]
      return err;
 80128c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128c4:	e0d3      	b.n	8012a6e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80128c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128c8:	681a      	ldr	r2, [r3, #0]
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	7d1b      	ldrb	r3, [r3, #20]
 80128d2:	2b02      	cmp	r3, #2
 80128d4:	d006      	beq.n	80128e4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	8b5b      	ldrh	r3, [r3, #26]
 80128da:	f023 0303 	bic.w	r3, r3, #3
 80128de:	b29a      	uxth	r2, r3
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80128e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128e6:	68db      	ldr	r3, [r3, #12]
 80128e8:	685b      	ldr	r3, [r3, #4]
 80128ea:	4618      	mov	r0, r3
 80128ec:	f7f9 ff35 	bl	800c75a <lwip_htonl>
 80128f0:	4604      	mov	r4, r0
 80128f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128f4:	891b      	ldrh	r3, [r3, #8]
 80128f6:	461d      	mov	r5, r3
 80128f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128fa:	68db      	ldr	r3, [r3, #12]
 80128fc:	899b      	ldrh	r3, [r3, #12]
 80128fe:	b29b      	uxth	r3, r3
 8012900:	4618      	mov	r0, r3
 8012902:	f7f9 ff15 	bl	800c730 <lwip_htons>
 8012906:	4603      	mov	r3, r0
 8012908:	b2db      	uxtb	r3, r3
 801290a:	f003 0303 	and.w	r3, r3, #3
 801290e:	2b00      	cmp	r3, #0
 8012910:	d00e      	beq.n	8012930 <tcp_output+0x2a0>
 8012912:	2301      	movs	r3, #1
 8012914:	e00d      	b.n	8012932 <tcp_output+0x2a2>
 8012916:	bf00      	nop
 8012918:	08019770 	.word	0x08019770
 801291c:	08019cb4 	.word	0x08019cb4
 8012920:	080197c4 	.word	0x080197c4
 8012924:	08019ccc 	.word	0x08019ccc
 8012928:	2000b110 	.word	0x2000b110
 801292c:	08019cf4 	.word	0x08019cf4
 8012930:	2300      	movs	r3, #0
 8012932:	442b      	add	r3, r5
 8012934:	4423      	add	r3, r4
 8012936:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	1ad3      	subs	r3, r2, r3
 8012940:	2b00      	cmp	r3, #0
 8012942:	da02      	bge.n	801294a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	68ba      	ldr	r2, [r7, #8]
 8012948:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801294c:	891b      	ldrh	r3, [r3, #8]
 801294e:	461c      	mov	r4, r3
 8012950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012952:	68db      	ldr	r3, [r3, #12]
 8012954:	899b      	ldrh	r3, [r3, #12]
 8012956:	b29b      	uxth	r3, r3
 8012958:	4618      	mov	r0, r3
 801295a:	f7f9 fee9 	bl	800c730 <lwip_htons>
 801295e:	4603      	mov	r3, r0
 8012960:	b2db      	uxtb	r3, r3
 8012962:	f003 0303 	and.w	r3, r3, #3
 8012966:	2b00      	cmp	r3, #0
 8012968:	d001      	beq.n	801296e <tcp_output+0x2de>
 801296a:	2301      	movs	r3, #1
 801296c:	e000      	b.n	8012970 <tcp_output+0x2e0>
 801296e:	2300      	movs	r3, #0
 8012970:	4423      	add	r3, r4
 8012972:	2b00      	cmp	r3, #0
 8012974:	d049      	beq.n	8012a0a <tcp_output+0x37a>
      seg->next = NULL;
 8012976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012978:	2200      	movs	r2, #0
 801297a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012980:	2b00      	cmp	r3, #0
 8012982:	d105      	bne.n	8012990 <tcp_output+0x300>
        pcb->unacked = seg;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012988:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801298c:	623b      	str	r3, [r7, #32]
 801298e:	e03f      	b.n	8012a10 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012992:	68db      	ldr	r3, [r3, #12]
 8012994:	685b      	ldr	r3, [r3, #4]
 8012996:	4618      	mov	r0, r3
 8012998:	f7f9 fedf 	bl	800c75a <lwip_htonl>
 801299c:	4604      	mov	r4, r0
 801299e:	6a3b      	ldr	r3, [r7, #32]
 80129a0:	68db      	ldr	r3, [r3, #12]
 80129a2:	685b      	ldr	r3, [r3, #4]
 80129a4:	4618      	mov	r0, r3
 80129a6:	f7f9 fed8 	bl	800c75a <lwip_htonl>
 80129aa:	4603      	mov	r3, r0
 80129ac:	1ae3      	subs	r3, r4, r3
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	da24      	bge.n	80129fc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	3370      	adds	r3, #112	; 0x70
 80129b6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80129b8:	e002      	b.n	80129c0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80129ba:	69fb      	ldr	r3, [r7, #28]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80129c0:	69fb      	ldr	r3, [r7, #28]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d011      	beq.n	80129ec <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80129c8:	69fb      	ldr	r3, [r7, #28]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	68db      	ldr	r3, [r3, #12]
 80129ce:	685b      	ldr	r3, [r3, #4]
 80129d0:	4618      	mov	r0, r3
 80129d2:	f7f9 fec2 	bl	800c75a <lwip_htonl>
 80129d6:	4604      	mov	r4, r0
 80129d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129da:	68db      	ldr	r3, [r3, #12]
 80129dc:	685b      	ldr	r3, [r3, #4]
 80129de:	4618      	mov	r0, r3
 80129e0:	f7f9 febb 	bl	800c75a <lwip_htonl>
 80129e4:	4603      	mov	r3, r0
 80129e6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	dbe6      	blt.n	80129ba <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80129ec:	69fb      	ldr	r3, [r7, #28]
 80129ee:	681a      	ldr	r2, [r3, #0]
 80129f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80129f4:	69fb      	ldr	r3, [r7, #28]
 80129f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129f8:	601a      	str	r2, [r3, #0]
 80129fa:	e009      	b.n	8012a10 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80129fc:	6a3b      	ldr	r3, [r7, #32]
 80129fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a00:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012a02:	6a3b      	ldr	r3, [r7, #32]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	623b      	str	r3, [r7, #32]
 8012a08:	e002      	b.n	8012a10 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012a0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a0c:	f7fc fc43 	bl	800f296 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a14:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d012      	beq.n	8012a42 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a1e:	68db      	ldr	r3, [r3, #12]
 8012a20:	685b      	ldr	r3, [r3, #4]
 8012a22:	4618      	mov	r0, r3
 8012a24:	f7f9 fe99 	bl	800c75a <lwip_htonl>
 8012a28:	4602      	mov	r2, r0
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a2e:	1ad3      	subs	r3, r2, r3
 8012a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a32:	8912      	ldrh	r2, [r2, #8]
 8012a34:	4413      	add	r3, r2
  while (seg != NULL &&
 8012a36:	69ba      	ldr	r2, [r7, #24]
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	f4bf aed9 	bcs.w	80127f0 <tcp_output+0x160>
 8012a3e:	e000      	b.n	8012a42 <tcp_output+0x3b2>
      break;
 8012a40:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d108      	bne.n	8012a5c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012a52:	e004      	b.n	8012a5e <tcp_output+0x3ce>
    goto output_done;
 8012a54:	bf00      	nop
 8012a56:	e002      	b.n	8012a5e <tcp_output+0x3ce>
    goto output_done;
 8012a58:	bf00      	nop
 8012a5a:	e000      	b.n	8012a5e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012a5c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	8b5b      	ldrh	r3, [r3, #26]
 8012a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012a66:	b29a      	uxth	r2, r3
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012a6c:	2300      	movs	r3, #0
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	3728      	adds	r7, #40	; 0x28
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bdb0      	pop	{r4, r5, r7, pc}
 8012a76:	bf00      	nop

08012a78 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b082      	sub	sp, #8
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d106      	bne.n	8012a94 <tcp_output_segment_busy+0x1c>
 8012a86:	4b09      	ldr	r3, [pc, #36]	; (8012aac <tcp_output_segment_busy+0x34>)
 8012a88:	f240 529a 	movw	r2, #1434	; 0x59a
 8012a8c:	4908      	ldr	r1, [pc, #32]	; (8012ab0 <tcp_output_segment_busy+0x38>)
 8012a8e:	4809      	ldr	r0, [pc, #36]	; (8012ab4 <tcp_output_segment_busy+0x3c>)
 8012a90:	f004 f9c8 	bl	8016e24 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	685b      	ldr	r3, [r3, #4]
 8012a98:	7b9b      	ldrb	r3, [r3, #14]
 8012a9a:	2b01      	cmp	r3, #1
 8012a9c:	d001      	beq.n	8012aa2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	e000      	b.n	8012aa4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012aa2:	2300      	movs	r3, #0
}
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	3708      	adds	r7, #8
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	bd80      	pop	{r7, pc}
 8012aac:	08019770 	.word	0x08019770
 8012ab0:	08019d0c 	.word	0x08019d0c
 8012ab4:	080197c4 	.word	0x080197c4

08012ab8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012ab8:	b5b0      	push	{r4, r5, r7, lr}
 8012aba:	b08c      	sub	sp, #48	; 0x30
 8012abc:	af04      	add	r7, sp, #16
 8012abe:	60f8      	str	r0, [r7, #12]
 8012ac0:	60b9      	str	r1, [r7, #8]
 8012ac2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d106      	bne.n	8012ad8 <tcp_output_segment+0x20>
 8012aca:	4b63      	ldr	r3, [pc, #396]	; (8012c58 <tcp_output_segment+0x1a0>)
 8012acc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012ad0:	4962      	ldr	r1, [pc, #392]	; (8012c5c <tcp_output_segment+0x1a4>)
 8012ad2:	4863      	ldr	r0, [pc, #396]	; (8012c60 <tcp_output_segment+0x1a8>)
 8012ad4:	f004 f9a6 	bl	8016e24 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d106      	bne.n	8012aec <tcp_output_segment+0x34>
 8012ade:	4b5e      	ldr	r3, [pc, #376]	; (8012c58 <tcp_output_segment+0x1a0>)
 8012ae0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012ae4:	495f      	ldr	r1, [pc, #380]	; (8012c64 <tcp_output_segment+0x1ac>)
 8012ae6:	485e      	ldr	r0, [pc, #376]	; (8012c60 <tcp_output_segment+0x1a8>)
 8012ae8:	f004 f99c 	bl	8016e24 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d106      	bne.n	8012b00 <tcp_output_segment+0x48>
 8012af2:	4b59      	ldr	r3, [pc, #356]	; (8012c58 <tcp_output_segment+0x1a0>)
 8012af4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012af8:	495b      	ldr	r1, [pc, #364]	; (8012c68 <tcp_output_segment+0x1b0>)
 8012afa:	4859      	ldr	r0, [pc, #356]	; (8012c60 <tcp_output_segment+0x1a8>)
 8012afc:	f004 f992 	bl	8016e24 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012b00:	68f8      	ldr	r0, [r7, #12]
 8012b02:	f7ff ffb9 	bl	8012a78 <tcp_output_segment_busy>
 8012b06:	4603      	mov	r3, r0
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d001      	beq.n	8012b10 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	e09f      	b.n	8012c50 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012b10:	68bb      	ldr	r3, [r7, #8]
 8012b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	68dc      	ldr	r4, [r3, #12]
 8012b18:	4610      	mov	r0, r2
 8012b1a:	f7f9 fe1e 	bl	800c75a <lwip_htonl>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	68dc      	ldr	r4, [r3, #12]
 8012b2a:	4610      	mov	r0, r2
 8012b2c:	f7f9 fe00 	bl	800c730 <lwip_htons>
 8012b30:	4603      	mov	r3, r0
 8012b32:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b38:	68ba      	ldr	r2, [r7, #8]
 8012b3a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012b3c:	441a      	add	r2, r3
 8012b3e:	68bb      	ldr	r3, [r7, #8]
 8012b40:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	68db      	ldr	r3, [r3, #12]
 8012b46:	3314      	adds	r3, #20
 8012b48:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	7a9b      	ldrb	r3, [r3, #10]
 8012b4e:	f003 0301 	and.w	r3, r3, #1
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d015      	beq.n	8012b82 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012b56:	68bb      	ldr	r3, [r7, #8]
 8012b58:	3304      	adds	r3, #4
 8012b5a:	461a      	mov	r2, r3
 8012b5c:	6879      	ldr	r1, [r7, #4]
 8012b5e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012b62:	f7fc fe8f 	bl	800f884 <tcp_eff_send_mss_netif>
 8012b66:	4603      	mov	r3, r0
 8012b68:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012b6a:	8b7b      	ldrh	r3, [r7, #26]
 8012b6c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012b70:	4618      	mov	r0, r3
 8012b72:	f7f9 fdf2 	bl	800c75a <lwip_htonl>
 8012b76:	4602      	mov	r2, r0
 8012b78:	69fb      	ldr	r3, [r7, #28]
 8012b7a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012b7c:	69fb      	ldr	r3, [r7, #28]
 8012b7e:	3304      	adds	r3, #4
 8012b80:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012b82:	68bb      	ldr	r3, [r7, #8]
 8012b84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	da02      	bge.n	8012b92 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012b8c:	68bb      	ldr	r3, [r7, #8]
 8012b8e:	2200      	movs	r2, #0
 8012b90:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012b92:	68bb      	ldr	r3, [r7, #8]
 8012b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d10c      	bne.n	8012bb4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012b9a:	4b34      	ldr	r3, [pc, #208]	; (8012c6c <tcp_output_segment+0x1b4>)
 8012b9c:	681a      	ldr	r2, [r3, #0]
 8012b9e:	68bb      	ldr	r3, [r7, #8]
 8012ba0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	68db      	ldr	r3, [r3, #12]
 8012ba6:	685b      	ldr	r3, [r3, #4]
 8012ba8:	4618      	mov	r0, r3
 8012baa:	f7f9 fdd6 	bl	800c75a <lwip_htonl>
 8012bae:	4602      	mov	r2, r0
 8012bb0:	68bb      	ldr	r3, [r7, #8]
 8012bb2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	68da      	ldr	r2, [r3, #12]
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	685b      	ldr	r3, [r3, #4]
 8012bbc:	685b      	ldr	r3, [r3, #4]
 8012bbe:	1ad3      	subs	r3, r2, r3
 8012bc0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	685b      	ldr	r3, [r3, #4]
 8012bc6:	8959      	ldrh	r1, [r3, #10]
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	685b      	ldr	r3, [r3, #4]
 8012bcc:	8b3a      	ldrh	r2, [r7, #24]
 8012bce:	1a8a      	subs	r2, r1, r2
 8012bd0:	b292      	uxth	r2, r2
 8012bd2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	685b      	ldr	r3, [r3, #4]
 8012bd8:	8919      	ldrh	r1, [r3, #8]
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	685b      	ldr	r3, [r3, #4]
 8012bde:	8b3a      	ldrh	r2, [r7, #24]
 8012be0:	1a8a      	subs	r2, r1, r2
 8012be2:	b292      	uxth	r2, r2
 8012be4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	685b      	ldr	r3, [r3, #4]
 8012bea:	68fa      	ldr	r2, [r7, #12]
 8012bec:	68d2      	ldr	r2, [r2, #12]
 8012bee:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	68db      	ldr	r3, [r3, #12]
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	741a      	strb	r2, [r3, #16]
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	68db      	ldr	r3, [r3, #12]
 8012c00:	f103 0214 	add.w	r2, r3, #20
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	7a9b      	ldrb	r3, [r3, #10]
 8012c08:	009b      	lsls	r3, r3, #2
 8012c0a:	f003 0304 	and.w	r3, r3, #4
 8012c0e:	4413      	add	r3, r2
 8012c10:	69fa      	ldr	r2, [r7, #28]
 8012c12:	429a      	cmp	r2, r3
 8012c14:	d006      	beq.n	8012c24 <tcp_output_segment+0x16c>
 8012c16:	4b10      	ldr	r3, [pc, #64]	; (8012c58 <tcp_output_segment+0x1a0>)
 8012c18:	f240 621c 	movw	r2, #1564	; 0x61c
 8012c1c:	4914      	ldr	r1, [pc, #80]	; (8012c70 <tcp_output_segment+0x1b8>)
 8012c1e:	4810      	ldr	r0, [pc, #64]	; (8012c60 <tcp_output_segment+0x1a8>)
 8012c20:	f004 f900 	bl	8016e24 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	6858      	ldr	r0, [r3, #4]
 8012c28:	68b9      	ldr	r1, [r7, #8]
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	1d1c      	adds	r4, r3, #4
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	7add      	ldrb	r5, [r3, #11]
 8012c32:	68bb      	ldr	r3, [r7, #8]
 8012c34:	7a9b      	ldrb	r3, [r3, #10]
 8012c36:	687a      	ldr	r2, [r7, #4]
 8012c38:	9202      	str	r2, [sp, #8]
 8012c3a:	2206      	movs	r2, #6
 8012c3c:	9201      	str	r2, [sp, #4]
 8012c3e:	9300      	str	r3, [sp, #0]
 8012c40:	462b      	mov	r3, r5
 8012c42:	4622      	mov	r2, r4
 8012c44:	f002 fa66 	bl	8015114 <ip4_output_if>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012c4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012c50:	4618      	mov	r0, r3
 8012c52:	3720      	adds	r7, #32
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bdb0      	pop	{r4, r5, r7, pc}
 8012c58:	08019770 	.word	0x08019770
 8012c5c:	08019d34 	.word	0x08019d34
 8012c60:	080197c4 	.word	0x080197c4
 8012c64:	08019d54 	.word	0x08019d54
 8012c68:	08019d74 	.word	0x08019d74
 8012c6c:	2000b100 	.word	0x2000b100
 8012c70:	08019d98 	.word	0x08019d98

08012c74 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012c74:	b5b0      	push	{r4, r5, r7, lr}
 8012c76:	b084      	sub	sp, #16
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d106      	bne.n	8012c90 <tcp_rexmit_rto_prepare+0x1c>
 8012c82:	4b31      	ldr	r3, [pc, #196]	; (8012d48 <tcp_rexmit_rto_prepare+0xd4>)
 8012c84:	f240 6263 	movw	r2, #1635	; 0x663
 8012c88:	4930      	ldr	r1, [pc, #192]	; (8012d4c <tcp_rexmit_rto_prepare+0xd8>)
 8012c8a:	4831      	ldr	r0, [pc, #196]	; (8012d50 <tcp_rexmit_rto_prepare+0xdc>)
 8012c8c:	f004 f8ca 	bl	8016e24 <iprintf>

  if (pcb->unacked == NULL) {
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d102      	bne.n	8012c9e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012c98:	f06f 0305 	mvn.w	r3, #5
 8012c9c:	e050      	b.n	8012d40 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ca2:	60fb      	str	r3, [r7, #12]
 8012ca4:	e00b      	b.n	8012cbe <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012ca6:	68f8      	ldr	r0, [r7, #12]
 8012ca8:	f7ff fee6 	bl	8012a78 <tcp_output_segment_busy>
 8012cac:	4603      	mov	r3, r0
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d002      	beq.n	8012cb8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012cb2:	f06f 0305 	mvn.w	r3, #5
 8012cb6:	e043      	b.n	8012d40 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	60fb      	str	r3, [r7, #12]
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d1ef      	bne.n	8012ca6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012cc6:	68f8      	ldr	r0, [r7, #12]
 8012cc8:	f7ff fed6 	bl	8012a78 <tcp_output_segment_busy>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d002      	beq.n	8012cd8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012cd2:	f06f 0305 	mvn.w	r3, #5
 8012cd6:	e033      	b.n	8012d40 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	2200      	movs	r2, #0
 8012cec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	8b5b      	ldrh	r3, [r3, #26]
 8012cf2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012cf6:	b29a      	uxth	r2, r3
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	68db      	ldr	r3, [r3, #12]
 8012d00:	685b      	ldr	r3, [r3, #4]
 8012d02:	4618      	mov	r0, r3
 8012d04:	f7f9 fd29 	bl	800c75a <lwip_htonl>
 8012d08:	4604      	mov	r4, r0
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	891b      	ldrh	r3, [r3, #8]
 8012d0e:	461d      	mov	r5, r3
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	68db      	ldr	r3, [r3, #12]
 8012d14:	899b      	ldrh	r3, [r3, #12]
 8012d16:	b29b      	uxth	r3, r3
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f7f9 fd09 	bl	800c730 <lwip_htons>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	b2db      	uxtb	r3, r3
 8012d22:	f003 0303 	and.w	r3, r3, #3
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d001      	beq.n	8012d2e <tcp_rexmit_rto_prepare+0xba>
 8012d2a:	2301      	movs	r3, #1
 8012d2c:	e000      	b.n	8012d30 <tcp_rexmit_rto_prepare+0xbc>
 8012d2e:	2300      	movs	r3, #0
 8012d30:	442b      	add	r3, r5
 8012d32:	18e2      	adds	r2, r4, r3
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012d3e:	2300      	movs	r3, #0
}
 8012d40:	4618      	mov	r0, r3
 8012d42:	3710      	adds	r7, #16
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bdb0      	pop	{r4, r5, r7, pc}
 8012d48:	08019770 	.word	0x08019770
 8012d4c:	08019dac 	.word	0x08019dac
 8012d50:	080197c4 	.word	0x080197c4

08012d54 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b082      	sub	sp, #8
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d106      	bne.n	8012d70 <tcp_rexmit_rto_commit+0x1c>
 8012d62:	4b0d      	ldr	r3, [pc, #52]	; (8012d98 <tcp_rexmit_rto_commit+0x44>)
 8012d64:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012d68:	490c      	ldr	r1, [pc, #48]	; (8012d9c <tcp_rexmit_rto_commit+0x48>)
 8012d6a:	480d      	ldr	r0, [pc, #52]	; (8012da0 <tcp_rexmit_rto_commit+0x4c>)
 8012d6c:	f004 f85a 	bl	8016e24 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012d76:	2bff      	cmp	r3, #255	; 0xff
 8012d78:	d007      	beq.n	8012d8a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012d80:	3301      	adds	r3, #1
 8012d82:	b2da      	uxtb	r2, r3
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f7ff fc80 	bl	8012690 <tcp_output>
}
 8012d90:	bf00      	nop
 8012d92:	3708      	adds	r7, #8
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd80      	pop	{r7, pc}
 8012d98:	08019770 	.word	0x08019770
 8012d9c:	08019dd0 	.word	0x08019dd0
 8012da0:	080197c4 	.word	0x080197c4

08012da4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b082      	sub	sp, #8
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d106      	bne.n	8012dc0 <tcp_rexmit_rto+0x1c>
 8012db2:	4b0a      	ldr	r3, [pc, #40]	; (8012ddc <tcp_rexmit_rto+0x38>)
 8012db4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012db8:	4909      	ldr	r1, [pc, #36]	; (8012de0 <tcp_rexmit_rto+0x3c>)
 8012dba:	480a      	ldr	r0, [pc, #40]	; (8012de4 <tcp_rexmit_rto+0x40>)
 8012dbc:	f004 f832 	bl	8016e24 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f7ff ff57 	bl	8012c74 <tcp_rexmit_rto_prepare>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d102      	bne.n	8012dd2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012dcc:	6878      	ldr	r0, [r7, #4]
 8012dce:	f7ff ffc1 	bl	8012d54 <tcp_rexmit_rto_commit>
  }
}
 8012dd2:	bf00      	nop
 8012dd4:	3708      	adds	r7, #8
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}
 8012dda:	bf00      	nop
 8012ddc:	08019770 	.word	0x08019770
 8012de0:	08019df4 	.word	0x08019df4
 8012de4:	080197c4 	.word	0x080197c4

08012de8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012de8:	b590      	push	{r4, r7, lr}
 8012dea:	b085      	sub	sp, #20
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d106      	bne.n	8012e04 <tcp_rexmit+0x1c>
 8012df6:	4b2f      	ldr	r3, [pc, #188]	; (8012eb4 <tcp_rexmit+0xcc>)
 8012df8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012dfc:	492e      	ldr	r1, [pc, #184]	; (8012eb8 <tcp_rexmit+0xd0>)
 8012dfe:	482f      	ldr	r0, [pc, #188]	; (8012ebc <tcp_rexmit+0xd4>)
 8012e00:	f004 f810 	bl	8016e24 <iprintf>

  if (pcb->unacked == NULL) {
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d102      	bne.n	8012e12 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012e0c:	f06f 0305 	mvn.w	r3, #5
 8012e10:	e04c      	b.n	8012eac <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e16:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012e18:	68b8      	ldr	r0, [r7, #8]
 8012e1a:	f7ff fe2d 	bl	8012a78 <tcp_output_segment_busy>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d002      	beq.n	8012e2a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012e24:	f06f 0305 	mvn.w	r3, #5
 8012e28:	e040      	b.n	8012eac <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012e2a:	68bb      	ldr	r3, [r7, #8]
 8012e2c:	681a      	ldr	r2, [r3, #0]
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	336c      	adds	r3, #108	; 0x6c
 8012e36:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012e38:	e002      	b.n	8012e40 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d011      	beq.n	8012e6c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	68db      	ldr	r3, [r3, #12]
 8012e4e:	685b      	ldr	r3, [r3, #4]
 8012e50:	4618      	mov	r0, r3
 8012e52:	f7f9 fc82 	bl	800c75a <lwip_htonl>
 8012e56:	4604      	mov	r4, r0
 8012e58:	68bb      	ldr	r3, [r7, #8]
 8012e5a:	68db      	ldr	r3, [r3, #12]
 8012e5c:	685b      	ldr	r3, [r3, #4]
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f7f9 fc7b 	bl	800c75a <lwip_htonl>
 8012e64:	4603      	mov	r3, r0
 8012e66:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	dbe6      	blt.n	8012e3a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	681a      	ldr	r2, [r3, #0]
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	68ba      	ldr	r2, [r7, #8]
 8012e78:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d103      	bne.n	8012e8a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2200      	movs	r2, #0
 8012e86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012e90:	2bff      	cmp	r3, #255	; 0xff
 8012e92:	d007      	beq.n	8012ea4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012e9a:	3301      	adds	r3, #1
 8012e9c:	b2da      	uxtb	r2, r3
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012eaa:	2300      	movs	r3, #0
}
 8012eac:	4618      	mov	r0, r3
 8012eae:	3714      	adds	r7, #20
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	bd90      	pop	{r4, r7, pc}
 8012eb4:	08019770 	.word	0x08019770
 8012eb8:	08019e10 	.word	0x08019e10
 8012ebc:	080197c4 	.word	0x080197c4

08012ec0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b082      	sub	sp, #8
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d106      	bne.n	8012edc <tcp_rexmit_fast+0x1c>
 8012ece:	4b2a      	ldr	r3, [pc, #168]	; (8012f78 <tcp_rexmit_fast+0xb8>)
 8012ed0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012ed4:	4929      	ldr	r1, [pc, #164]	; (8012f7c <tcp_rexmit_fast+0xbc>)
 8012ed6:	482a      	ldr	r0, [pc, #168]	; (8012f80 <tcp_rexmit_fast+0xc0>)
 8012ed8:	f003 ffa4 	bl	8016e24 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d044      	beq.n	8012f6e <tcp_rexmit_fast+0xae>
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	8b5b      	ldrh	r3, [r3, #26]
 8012ee8:	f003 0304 	and.w	r3, r3, #4
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d13e      	bne.n	8012f6e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012ef0:	6878      	ldr	r0, [r7, #4]
 8012ef2:	f7ff ff79 	bl	8012de8 <tcp_rexmit>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d138      	bne.n	8012f6e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012f08:	4293      	cmp	r3, r2
 8012f0a:	bf28      	it	cs
 8012f0c:	4613      	movcs	r3, r2
 8012f0e:	b29b      	uxth	r3, r3
 8012f10:	0fda      	lsrs	r2, r3, #31
 8012f12:	4413      	add	r3, r2
 8012f14:	105b      	asrs	r3, r3, #1
 8012f16:	b29a      	uxth	r2, r3
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012f24:	461a      	mov	r2, r3
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f2a:	005b      	lsls	r3, r3, #1
 8012f2c:	429a      	cmp	r2, r3
 8012f2e:	d206      	bcs.n	8012f3e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f34:	005b      	lsls	r3, r3, #1
 8012f36:	b29a      	uxth	r2, r3
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f48:	4619      	mov	r1, r3
 8012f4a:	0049      	lsls	r1, r1, #1
 8012f4c:	440b      	add	r3, r1
 8012f4e:	b29b      	uxth	r3, r3
 8012f50:	4413      	add	r3, r2
 8012f52:	b29a      	uxth	r2, r3
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	8b5b      	ldrh	r3, [r3, #26]
 8012f5e:	f043 0304 	orr.w	r3, r3, #4
 8012f62:	b29a      	uxth	r2, r3
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012f6e:	bf00      	nop
 8012f70:	3708      	adds	r7, #8
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bd80      	pop	{r7, pc}
 8012f76:	bf00      	nop
 8012f78:	08019770 	.word	0x08019770
 8012f7c:	08019e28 	.word	0x08019e28
 8012f80:	080197c4 	.word	0x080197c4

08012f84 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b086      	sub	sp, #24
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	60f8      	str	r0, [r7, #12]
 8012f8c:	607b      	str	r3, [r7, #4]
 8012f8e:	460b      	mov	r3, r1
 8012f90:	817b      	strh	r3, [r7, #10]
 8012f92:	4613      	mov	r3, r2
 8012f94:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012f96:	897a      	ldrh	r2, [r7, #10]
 8012f98:	893b      	ldrh	r3, [r7, #8]
 8012f9a:	4413      	add	r3, r2
 8012f9c:	b29b      	uxth	r3, r3
 8012f9e:	3314      	adds	r3, #20
 8012fa0:	b29b      	uxth	r3, r3
 8012fa2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012fa6:	4619      	mov	r1, r3
 8012fa8:	2022      	movs	r0, #34	; 0x22
 8012faa:	f7fa fc11 	bl	800d7d0 <pbuf_alloc>
 8012fae:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012fb0:	697b      	ldr	r3, [r7, #20]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d04d      	beq.n	8013052 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012fb6:	897b      	ldrh	r3, [r7, #10]
 8012fb8:	3313      	adds	r3, #19
 8012fba:	697a      	ldr	r2, [r7, #20]
 8012fbc:	8952      	ldrh	r2, [r2, #10]
 8012fbe:	4293      	cmp	r3, r2
 8012fc0:	db06      	blt.n	8012fd0 <tcp_output_alloc_header_common+0x4c>
 8012fc2:	4b26      	ldr	r3, [pc, #152]	; (801305c <tcp_output_alloc_header_common+0xd8>)
 8012fc4:	f240 7223 	movw	r2, #1827	; 0x723
 8012fc8:	4925      	ldr	r1, [pc, #148]	; (8013060 <tcp_output_alloc_header_common+0xdc>)
 8012fca:	4826      	ldr	r0, [pc, #152]	; (8013064 <tcp_output_alloc_header_common+0xe0>)
 8012fcc:	f003 ff2a 	bl	8016e24 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012fd0:	697b      	ldr	r3, [r7, #20]
 8012fd2:	685b      	ldr	r3, [r3, #4]
 8012fd4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012fd6:	8c3b      	ldrh	r3, [r7, #32]
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f7f9 fba9 	bl	800c730 <lwip_htons>
 8012fde:	4603      	mov	r3, r0
 8012fe0:	461a      	mov	r2, r3
 8012fe2:	693b      	ldr	r3, [r7, #16]
 8012fe4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012fe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f7f9 fba1 	bl	800c730 <lwip_htons>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	461a      	mov	r2, r3
 8012ff2:	693b      	ldr	r3, [r7, #16]
 8012ff4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012ff6:	693b      	ldr	r3, [r7, #16]
 8012ff8:	687a      	ldr	r2, [r7, #4]
 8012ffa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012ffc:	68f8      	ldr	r0, [r7, #12]
 8012ffe:	f7f9 fbac 	bl	800c75a <lwip_htonl>
 8013002:	4602      	mov	r2, r0
 8013004:	693b      	ldr	r3, [r7, #16]
 8013006:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013008:	897b      	ldrh	r3, [r7, #10]
 801300a:	089b      	lsrs	r3, r3, #2
 801300c:	b29b      	uxth	r3, r3
 801300e:	3305      	adds	r3, #5
 8013010:	b29b      	uxth	r3, r3
 8013012:	031b      	lsls	r3, r3, #12
 8013014:	b29a      	uxth	r2, r3
 8013016:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801301a:	b29b      	uxth	r3, r3
 801301c:	4313      	orrs	r3, r2
 801301e:	b29b      	uxth	r3, r3
 8013020:	4618      	mov	r0, r3
 8013022:	f7f9 fb85 	bl	800c730 <lwip_htons>
 8013026:	4603      	mov	r3, r0
 8013028:	461a      	mov	r2, r3
 801302a:	693b      	ldr	r3, [r7, #16]
 801302c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801302e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013030:	4618      	mov	r0, r3
 8013032:	f7f9 fb7d 	bl	800c730 <lwip_htons>
 8013036:	4603      	mov	r3, r0
 8013038:	461a      	mov	r2, r3
 801303a:	693b      	ldr	r3, [r7, #16]
 801303c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801303e:	693b      	ldr	r3, [r7, #16]
 8013040:	2200      	movs	r2, #0
 8013042:	741a      	strb	r2, [r3, #16]
 8013044:	2200      	movs	r2, #0
 8013046:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013048:	693b      	ldr	r3, [r7, #16]
 801304a:	2200      	movs	r2, #0
 801304c:	749a      	strb	r2, [r3, #18]
 801304e:	2200      	movs	r2, #0
 8013050:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013052:	697b      	ldr	r3, [r7, #20]
}
 8013054:	4618      	mov	r0, r3
 8013056:	3718      	adds	r7, #24
 8013058:	46bd      	mov	sp, r7
 801305a:	bd80      	pop	{r7, pc}
 801305c:	08019770 	.word	0x08019770
 8013060:	08019e48 	.word	0x08019e48
 8013064:	080197c4 	.word	0x080197c4

08013068 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013068:	b5b0      	push	{r4, r5, r7, lr}
 801306a:	b08a      	sub	sp, #40	; 0x28
 801306c:	af04      	add	r7, sp, #16
 801306e:	60f8      	str	r0, [r7, #12]
 8013070:	607b      	str	r3, [r7, #4]
 8013072:	460b      	mov	r3, r1
 8013074:	817b      	strh	r3, [r7, #10]
 8013076:	4613      	mov	r3, r2
 8013078:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d106      	bne.n	801308e <tcp_output_alloc_header+0x26>
 8013080:	4b15      	ldr	r3, [pc, #84]	; (80130d8 <tcp_output_alloc_header+0x70>)
 8013082:	f240 7242 	movw	r2, #1858	; 0x742
 8013086:	4915      	ldr	r1, [pc, #84]	; (80130dc <tcp_output_alloc_header+0x74>)
 8013088:	4815      	ldr	r0, [pc, #84]	; (80130e0 <tcp_output_alloc_header+0x78>)
 801308a:	f003 fecb 	bl	8016e24 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	8adb      	ldrh	r3, [r3, #22]
 8013096:	68fa      	ldr	r2, [r7, #12]
 8013098:	8b12      	ldrh	r2, [r2, #24]
 801309a:	68f9      	ldr	r1, [r7, #12]
 801309c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801309e:	893d      	ldrh	r5, [r7, #8]
 80130a0:	897c      	ldrh	r4, [r7, #10]
 80130a2:	9103      	str	r1, [sp, #12]
 80130a4:	2110      	movs	r1, #16
 80130a6:	9102      	str	r1, [sp, #8]
 80130a8:	9201      	str	r2, [sp, #4]
 80130aa:	9300      	str	r3, [sp, #0]
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	462a      	mov	r2, r5
 80130b0:	4621      	mov	r1, r4
 80130b2:	f7ff ff67 	bl	8012f84 <tcp_output_alloc_header_common>
 80130b6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80130b8:	697b      	ldr	r3, [r7, #20]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d006      	beq.n	80130cc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130c2:	68fa      	ldr	r2, [r7, #12]
 80130c4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80130c6:	441a      	add	r2, r3
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80130cc:	697b      	ldr	r3, [r7, #20]
}
 80130ce:	4618      	mov	r0, r3
 80130d0:	3718      	adds	r7, #24
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bdb0      	pop	{r4, r5, r7, pc}
 80130d6:	bf00      	nop
 80130d8:	08019770 	.word	0x08019770
 80130dc:	08019e78 	.word	0x08019e78
 80130e0:	080197c4 	.word	0x080197c4

080130e4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b088      	sub	sp, #32
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	60f8      	str	r0, [r7, #12]
 80130ec:	60b9      	str	r1, [r7, #8]
 80130ee:	4611      	mov	r1, r2
 80130f0:	461a      	mov	r2, r3
 80130f2:	460b      	mov	r3, r1
 80130f4:	71fb      	strb	r3, [r7, #7]
 80130f6:	4613      	mov	r3, r2
 80130f8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80130fa:	2300      	movs	r3, #0
 80130fc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80130fe:	68bb      	ldr	r3, [r7, #8]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d106      	bne.n	8013112 <tcp_output_fill_options+0x2e>
 8013104:	4b13      	ldr	r3, [pc, #76]	; (8013154 <tcp_output_fill_options+0x70>)
 8013106:	f240 7256 	movw	r2, #1878	; 0x756
 801310a:	4913      	ldr	r1, [pc, #76]	; (8013158 <tcp_output_fill_options+0x74>)
 801310c:	4813      	ldr	r0, [pc, #76]	; (801315c <tcp_output_fill_options+0x78>)
 801310e:	f003 fe89 	bl	8016e24 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013112:	68bb      	ldr	r3, [r7, #8]
 8013114:	685b      	ldr	r3, [r3, #4]
 8013116:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013118:	69bb      	ldr	r3, [r7, #24]
 801311a:	3314      	adds	r3, #20
 801311c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801311e:	69bb      	ldr	r3, [r7, #24]
 8013120:	f103 0214 	add.w	r2, r3, #20
 8013124:	8bfb      	ldrh	r3, [r7, #30]
 8013126:	009b      	lsls	r3, r3, #2
 8013128:	4619      	mov	r1, r3
 801312a:	79fb      	ldrb	r3, [r7, #7]
 801312c:	009b      	lsls	r3, r3, #2
 801312e:	f003 0304 	and.w	r3, r3, #4
 8013132:	440b      	add	r3, r1
 8013134:	4413      	add	r3, r2
 8013136:	697a      	ldr	r2, [r7, #20]
 8013138:	429a      	cmp	r2, r3
 801313a:	d006      	beq.n	801314a <tcp_output_fill_options+0x66>
 801313c:	4b05      	ldr	r3, [pc, #20]	; (8013154 <tcp_output_fill_options+0x70>)
 801313e:	f240 7275 	movw	r2, #1909	; 0x775
 8013142:	4907      	ldr	r1, [pc, #28]	; (8013160 <tcp_output_fill_options+0x7c>)
 8013144:	4805      	ldr	r0, [pc, #20]	; (801315c <tcp_output_fill_options+0x78>)
 8013146:	f003 fe6d 	bl	8016e24 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801314a:	bf00      	nop
 801314c:	3720      	adds	r7, #32
 801314e:	46bd      	mov	sp, r7
 8013150:	bd80      	pop	{r7, pc}
 8013152:	bf00      	nop
 8013154:	08019770 	.word	0x08019770
 8013158:	08019ea0 	.word	0x08019ea0
 801315c:	080197c4 	.word	0x080197c4
 8013160:	08019d98 	.word	0x08019d98

08013164 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b08a      	sub	sp, #40	; 0x28
 8013168:	af04      	add	r7, sp, #16
 801316a:	60f8      	str	r0, [r7, #12]
 801316c:	60b9      	str	r1, [r7, #8]
 801316e:	607a      	str	r2, [r7, #4]
 8013170:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013172:	68bb      	ldr	r3, [r7, #8]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d106      	bne.n	8013186 <tcp_output_control_segment+0x22>
 8013178:	4b1c      	ldr	r3, [pc, #112]	; (80131ec <tcp_output_control_segment+0x88>)
 801317a:	f240 7287 	movw	r2, #1927	; 0x787
 801317e:	491c      	ldr	r1, [pc, #112]	; (80131f0 <tcp_output_control_segment+0x8c>)
 8013180:	481c      	ldr	r0, [pc, #112]	; (80131f4 <tcp_output_control_segment+0x90>)
 8013182:	f003 fe4f 	bl	8016e24 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013186:	683a      	ldr	r2, [r7, #0]
 8013188:	6879      	ldr	r1, [r7, #4]
 801318a:	68f8      	ldr	r0, [r7, #12]
 801318c:	f7fe ff40 	bl	8012010 <tcp_route>
 8013190:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013192:	693b      	ldr	r3, [r7, #16]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d102      	bne.n	801319e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013198:	23fc      	movs	r3, #252	; 0xfc
 801319a:	75fb      	strb	r3, [r7, #23]
 801319c:	e01c      	b.n	80131d8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d006      	beq.n	80131b2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	7adb      	ldrb	r3, [r3, #11]
 80131a8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	7a9b      	ldrb	r3, [r3, #10]
 80131ae:	757b      	strb	r3, [r7, #21]
 80131b0:	e003      	b.n	80131ba <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80131b2:	23ff      	movs	r3, #255	; 0xff
 80131b4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80131b6:	2300      	movs	r3, #0
 80131b8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80131ba:	7dba      	ldrb	r2, [r7, #22]
 80131bc:	693b      	ldr	r3, [r7, #16]
 80131be:	9302      	str	r3, [sp, #8]
 80131c0:	2306      	movs	r3, #6
 80131c2:	9301      	str	r3, [sp, #4]
 80131c4:	7d7b      	ldrb	r3, [r7, #21]
 80131c6:	9300      	str	r3, [sp, #0]
 80131c8:	4613      	mov	r3, r2
 80131ca:	683a      	ldr	r2, [r7, #0]
 80131cc:	6879      	ldr	r1, [r7, #4]
 80131ce:	68b8      	ldr	r0, [r7, #8]
 80131d0:	f001 ffa0 	bl	8015114 <ip4_output_if>
 80131d4:	4603      	mov	r3, r0
 80131d6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80131d8:	68b8      	ldr	r0, [r7, #8]
 80131da:	f7fa fddd 	bl	800dd98 <pbuf_free>
  return err;
 80131de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80131e2:	4618      	mov	r0, r3
 80131e4:	3718      	adds	r7, #24
 80131e6:	46bd      	mov	sp, r7
 80131e8:	bd80      	pop	{r7, pc}
 80131ea:	bf00      	nop
 80131ec:	08019770 	.word	0x08019770
 80131f0:	08019ec8 	.word	0x08019ec8
 80131f4:	080197c4 	.word	0x080197c4

080131f8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80131f8:	b590      	push	{r4, r7, lr}
 80131fa:	b08b      	sub	sp, #44	; 0x2c
 80131fc:	af04      	add	r7, sp, #16
 80131fe:	60f8      	str	r0, [r7, #12]
 8013200:	60b9      	str	r1, [r7, #8]
 8013202:	607a      	str	r2, [r7, #4]
 8013204:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013206:	683b      	ldr	r3, [r7, #0]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d106      	bne.n	801321a <tcp_rst+0x22>
 801320c:	4b1f      	ldr	r3, [pc, #124]	; (801328c <tcp_rst+0x94>)
 801320e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013212:	491f      	ldr	r1, [pc, #124]	; (8013290 <tcp_rst+0x98>)
 8013214:	481f      	ldr	r0, [pc, #124]	; (8013294 <tcp_rst+0x9c>)
 8013216:	f003 fe05 	bl	8016e24 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801321c:	2b00      	cmp	r3, #0
 801321e:	d106      	bne.n	801322e <tcp_rst+0x36>
 8013220:	4b1a      	ldr	r3, [pc, #104]	; (801328c <tcp_rst+0x94>)
 8013222:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013226:	491c      	ldr	r1, [pc, #112]	; (8013298 <tcp_rst+0xa0>)
 8013228:	481a      	ldr	r0, [pc, #104]	; (8013294 <tcp_rst+0x9c>)
 801322a:	f003 fdfb 	bl	8016e24 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801322e:	2300      	movs	r3, #0
 8013230:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013232:	f246 0308 	movw	r3, #24584	; 0x6008
 8013236:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013238:	7dfb      	ldrb	r3, [r7, #23]
 801323a:	b29c      	uxth	r4, r3
 801323c:	68b8      	ldr	r0, [r7, #8]
 801323e:	f7f9 fa8c 	bl	800c75a <lwip_htonl>
 8013242:	4602      	mov	r2, r0
 8013244:	8abb      	ldrh	r3, [r7, #20]
 8013246:	9303      	str	r3, [sp, #12]
 8013248:	2314      	movs	r3, #20
 801324a:	9302      	str	r3, [sp, #8]
 801324c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801324e:	9301      	str	r3, [sp, #4]
 8013250:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013252:	9300      	str	r3, [sp, #0]
 8013254:	4613      	mov	r3, r2
 8013256:	2200      	movs	r2, #0
 8013258:	4621      	mov	r1, r4
 801325a:	6878      	ldr	r0, [r7, #4]
 801325c:	f7ff fe92 	bl	8012f84 <tcp_output_alloc_header_common>
 8013260:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013262:	693b      	ldr	r3, [r7, #16]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d00c      	beq.n	8013282 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013268:	7dfb      	ldrb	r3, [r7, #23]
 801326a:	2200      	movs	r2, #0
 801326c:	6939      	ldr	r1, [r7, #16]
 801326e:	68f8      	ldr	r0, [r7, #12]
 8013270:	f7ff ff38 	bl	80130e4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013276:	683a      	ldr	r2, [r7, #0]
 8013278:	6939      	ldr	r1, [r7, #16]
 801327a:	68f8      	ldr	r0, [r7, #12]
 801327c:	f7ff ff72 	bl	8013164 <tcp_output_control_segment>
 8013280:	e000      	b.n	8013284 <tcp_rst+0x8c>
    return;
 8013282:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013284:	371c      	adds	r7, #28
 8013286:	46bd      	mov	sp, r7
 8013288:	bd90      	pop	{r4, r7, pc}
 801328a:	bf00      	nop
 801328c:	08019770 	.word	0x08019770
 8013290:	08019ef4 	.word	0x08019ef4
 8013294:	080197c4 	.word	0x080197c4
 8013298:	08019f10 	.word	0x08019f10

0801329c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801329c:	b590      	push	{r4, r7, lr}
 801329e:	b087      	sub	sp, #28
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80132a4:	2300      	movs	r3, #0
 80132a6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80132a8:	2300      	movs	r3, #0
 80132aa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d106      	bne.n	80132c0 <tcp_send_empty_ack+0x24>
 80132b2:	4b28      	ldr	r3, [pc, #160]	; (8013354 <tcp_send_empty_ack+0xb8>)
 80132b4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80132b8:	4927      	ldr	r1, [pc, #156]	; (8013358 <tcp_send_empty_ack+0xbc>)
 80132ba:	4828      	ldr	r0, [pc, #160]	; (801335c <tcp_send_empty_ack+0xc0>)
 80132bc:	f003 fdb2 	bl	8016e24 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80132c0:	7dfb      	ldrb	r3, [r7, #23]
 80132c2:	009b      	lsls	r3, r3, #2
 80132c4:	b2db      	uxtb	r3, r3
 80132c6:	f003 0304 	and.w	r3, r3, #4
 80132ca:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80132cc:	7d7b      	ldrb	r3, [r7, #21]
 80132ce:	b29c      	uxth	r4, r3
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80132d4:	4618      	mov	r0, r3
 80132d6:	f7f9 fa40 	bl	800c75a <lwip_htonl>
 80132da:	4603      	mov	r3, r0
 80132dc:	2200      	movs	r2, #0
 80132de:	4621      	mov	r1, r4
 80132e0:	6878      	ldr	r0, [r7, #4]
 80132e2:	f7ff fec1 	bl	8013068 <tcp_output_alloc_header>
 80132e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80132e8:	693b      	ldr	r3, [r7, #16]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d109      	bne.n	8013302 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	8b5b      	ldrh	r3, [r3, #26]
 80132f2:	f043 0303 	orr.w	r3, r3, #3
 80132f6:	b29a      	uxth	r2, r3
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80132fc:	f06f 0301 	mvn.w	r3, #1
 8013300:	e023      	b.n	801334a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013302:	7dbb      	ldrb	r3, [r7, #22]
 8013304:	7dfa      	ldrb	r2, [r7, #23]
 8013306:	6939      	ldr	r1, [r7, #16]
 8013308:	6878      	ldr	r0, [r7, #4]
 801330a:	f7ff feeb 	bl	80130e4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801330e:	687a      	ldr	r2, [r7, #4]
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	3304      	adds	r3, #4
 8013314:	6939      	ldr	r1, [r7, #16]
 8013316:	6878      	ldr	r0, [r7, #4]
 8013318:	f7ff ff24 	bl	8013164 <tcp_output_control_segment>
 801331c:	4603      	mov	r3, r0
 801331e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d007      	beq.n	8013338 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	8b5b      	ldrh	r3, [r3, #26]
 801332c:	f043 0303 	orr.w	r3, r3, #3
 8013330:	b29a      	uxth	r2, r3
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	835a      	strh	r2, [r3, #26]
 8013336:	e006      	b.n	8013346 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	8b5b      	ldrh	r3, [r3, #26]
 801333c:	f023 0303 	bic.w	r3, r3, #3
 8013340:	b29a      	uxth	r2, r3
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013346:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801334a:	4618      	mov	r0, r3
 801334c:	371c      	adds	r7, #28
 801334e:	46bd      	mov	sp, r7
 8013350:	bd90      	pop	{r4, r7, pc}
 8013352:	bf00      	nop
 8013354:	08019770 	.word	0x08019770
 8013358:	08019f2c 	.word	0x08019f2c
 801335c:	080197c4 	.word	0x080197c4

08013360 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013360:	b590      	push	{r4, r7, lr}
 8013362:	b087      	sub	sp, #28
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013368:	2300      	movs	r3, #0
 801336a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d106      	bne.n	8013380 <tcp_keepalive+0x20>
 8013372:	4b18      	ldr	r3, [pc, #96]	; (80133d4 <tcp_keepalive+0x74>)
 8013374:	f640 0224 	movw	r2, #2084	; 0x824
 8013378:	4917      	ldr	r1, [pc, #92]	; (80133d8 <tcp_keepalive+0x78>)
 801337a:	4818      	ldr	r0, [pc, #96]	; (80133dc <tcp_keepalive+0x7c>)
 801337c:	f003 fd52 	bl	8016e24 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013380:	7dfb      	ldrb	r3, [r7, #23]
 8013382:	b29c      	uxth	r4, r3
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013388:	3b01      	subs	r3, #1
 801338a:	4618      	mov	r0, r3
 801338c:	f7f9 f9e5 	bl	800c75a <lwip_htonl>
 8013390:	4603      	mov	r3, r0
 8013392:	2200      	movs	r2, #0
 8013394:	4621      	mov	r1, r4
 8013396:	6878      	ldr	r0, [r7, #4]
 8013398:	f7ff fe66 	bl	8013068 <tcp_output_alloc_header>
 801339c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801339e:	693b      	ldr	r3, [r7, #16]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d102      	bne.n	80133aa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80133a4:	f04f 33ff 	mov.w	r3, #4294967295
 80133a8:	e010      	b.n	80133cc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80133aa:	7dfb      	ldrb	r3, [r7, #23]
 80133ac:	2200      	movs	r2, #0
 80133ae:	6939      	ldr	r1, [r7, #16]
 80133b0:	6878      	ldr	r0, [r7, #4]
 80133b2:	f7ff fe97 	bl	80130e4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80133b6:	687a      	ldr	r2, [r7, #4]
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	3304      	adds	r3, #4
 80133bc:	6939      	ldr	r1, [r7, #16]
 80133be:	6878      	ldr	r0, [r7, #4]
 80133c0:	f7ff fed0 	bl	8013164 <tcp_output_control_segment>
 80133c4:	4603      	mov	r3, r0
 80133c6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80133c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80133cc:	4618      	mov	r0, r3
 80133ce:	371c      	adds	r7, #28
 80133d0:	46bd      	mov	sp, r7
 80133d2:	bd90      	pop	{r4, r7, pc}
 80133d4:	08019770 	.word	0x08019770
 80133d8:	08019f4c 	.word	0x08019f4c
 80133dc:	080197c4 	.word	0x080197c4

080133e0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80133e0:	b590      	push	{r4, r7, lr}
 80133e2:	b08b      	sub	sp, #44	; 0x2c
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80133e8:	2300      	movs	r3, #0
 80133ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d106      	bne.n	8013402 <tcp_zero_window_probe+0x22>
 80133f4:	4b4c      	ldr	r3, [pc, #304]	; (8013528 <tcp_zero_window_probe+0x148>)
 80133f6:	f640 024f 	movw	r2, #2127	; 0x84f
 80133fa:	494c      	ldr	r1, [pc, #304]	; (801352c <tcp_zero_window_probe+0x14c>)
 80133fc:	484c      	ldr	r0, [pc, #304]	; (8013530 <tcp_zero_window_probe+0x150>)
 80133fe:	f003 fd11 	bl	8016e24 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013406:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013408:	6a3b      	ldr	r3, [r7, #32]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d101      	bne.n	8013412 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801340e:	2300      	movs	r3, #0
 8013410:	e086      	b.n	8013520 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013418:	2bff      	cmp	r3, #255	; 0xff
 801341a:	d007      	beq.n	801342c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013422:	3301      	adds	r3, #1
 8013424:	b2da      	uxtb	r2, r3
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801342c:	6a3b      	ldr	r3, [r7, #32]
 801342e:	68db      	ldr	r3, [r3, #12]
 8013430:	899b      	ldrh	r3, [r3, #12]
 8013432:	b29b      	uxth	r3, r3
 8013434:	4618      	mov	r0, r3
 8013436:	f7f9 f97b 	bl	800c730 <lwip_htons>
 801343a:	4603      	mov	r3, r0
 801343c:	b2db      	uxtb	r3, r3
 801343e:	f003 0301 	and.w	r3, r3, #1
 8013442:	2b00      	cmp	r3, #0
 8013444:	d005      	beq.n	8013452 <tcp_zero_window_probe+0x72>
 8013446:	6a3b      	ldr	r3, [r7, #32]
 8013448:	891b      	ldrh	r3, [r3, #8]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d101      	bne.n	8013452 <tcp_zero_window_probe+0x72>
 801344e:	2301      	movs	r3, #1
 8013450:	e000      	b.n	8013454 <tcp_zero_window_probe+0x74>
 8013452:	2300      	movs	r3, #0
 8013454:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013456:	7ffb      	ldrb	r3, [r7, #31]
 8013458:	2b00      	cmp	r3, #0
 801345a:	bf0c      	ite	eq
 801345c:	2301      	moveq	r3, #1
 801345e:	2300      	movne	r3, #0
 8013460:	b2db      	uxtb	r3, r3
 8013462:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013468:	b299      	uxth	r1, r3
 801346a:	6a3b      	ldr	r3, [r7, #32]
 801346c:	68db      	ldr	r3, [r3, #12]
 801346e:	685b      	ldr	r3, [r3, #4]
 8013470:	8bba      	ldrh	r2, [r7, #28]
 8013472:	6878      	ldr	r0, [r7, #4]
 8013474:	f7ff fdf8 	bl	8013068 <tcp_output_alloc_header>
 8013478:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801347a:	69bb      	ldr	r3, [r7, #24]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d102      	bne.n	8013486 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013480:	f04f 33ff 	mov.w	r3, #4294967295
 8013484:	e04c      	b.n	8013520 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013486:	69bb      	ldr	r3, [r7, #24]
 8013488:	685b      	ldr	r3, [r3, #4]
 801348a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801348c:	7ffb      	ldrb	r3, [r7, #31]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d011      	beq.n	80134b6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013492:	697b      	ldr	r3, [r7, #20]
 8013494:	899b      	ldrh	r3, [r3, #12]
 8013496:	b29b      	uxth	r3, r3
 8013498:	b21b      	sxth	r3, r3
 801349a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801349e:	b21c      	sxth	r4, r3
 80134a0:	2011      	movs	r0, #17
 80134a2:	f7f9 f945 	bl	800c730 <lwip_htons>
 80134a6:	4603      	mov	r3, r0
 80134a8:	b21b      	sxth	r3, r3
 80134aa:	4323      	orrs	r3, r4
 80134ac:	b21b      	sxth	r3, r3
 80134ae:	b29a      	uxth	r2, r3
 80134b0:	697b      	ldr	r3, [r7, #20]
 80134b2:	819a      	strh	r2, [r3, #12]
 80134b4:	e010      	b.n	80134d8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80134b6:	69bb      	ldr	r3, [r7, #24]
 80134b8:	685b      	ldr	r3, [r3, #4]
 80134ba:	3314      	adds	r3, #20
 80134bc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80134be:	6a3b      	ldr	r3, [r7, #32]
 80134c0:	6858      	ldr	r0, [r3, #4]
 80134c2:	6a3b      	ldr	r3, [r7, #32]
 80134c4:	685b      	ldr	r3, [r3, #4]
 80134c6:	891a      	ldrh	r2, [r3, #8]
 80134c8:	6a3b      	ldr	r3, [r7, #32]
 80134ca:	891b      	ldrh	r3, [r3, #8]
 80134cc:	1ad3      	subs	r3, r2, r3
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	2201      	movs	r2, #1
 80134d2:	6939      	ldr	r1, [r7, #16]
 80134d4:	f7fa fe56 	bl	800e184 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80134d8:	6a3b      	ldr	r3, [r7, #32]
 80134da:	68db      	ldr	r3, [r3, #12]
 80134dc:	685b      	ldr	r3, [r3, #4]
 80134de:	4618      	mov	r0, r3
 80134e0:	f7f9 f93b 	bl	800c75a <lwip_htonl>
 80134e4:	4603      	mov	r3, r0
 80134e6:	3301      	adds	r3, #1
 80134e8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	1ad3      	subs	r3, r2, r3
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	da02      	bge.n	80134fc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	68fa      	ldr	r2, [r7, #12]
 80134fa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80134fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013500:	2200      	movs	r2, #0
 8013502:	69b9      	ldr	r1, [r7, #24]
 8013504:	6878      	ldr	r0, [r7, #4]
 8013506:	f7ff fded 	bl	80130e4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801350a:	687a      	ldr	r2, [r7, #4]
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	3304      	adds	r3, #4
 8013510:	69b9      	ldr	r1, [r7, #24]
 8013512:	6878      	ldr	r0, [r7, #4]
 8013514:	f7ff fe26 	bl	8013164 <tcp_output_control_segment>
 8013518:	4603      	mov	r3, r0
 801351a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801351c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013520:	4618      	mov	r0, r3
 8013522:	372c      	adds	r7, #44	; 0x2c
 8013524:	46bd      	mov	sp, r7
 8013526:	bd90      	pop	{r4, r7, pc}
 8013528:	08019770 	.word	0x08019770
 801352c:	08019f68 	.word	0x08019f68
 8013530:	080197c4 	.word	0x080197c4

08013534 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013534:	b580      	push	{r7, lr}
 8013536:	b082      	sub	sp, #8
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801353c:	f7fa ff10 	bl	800e360 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013540:	4b0a      	ldr	r3, [pc, #40]	; (801356c <tcpip_tcp_timer+0x38>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d103      	bne.n	8013550 <tcpip_tcp_timer+0x1c>
 8013548:	4b09      	ldr	r3, [pc, #36]	; (8013570 <tcpip_tcp_timer+0x3c>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d005      	beq.n	801355c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013550:	2200      	movs	r2, #0
 8013552:	4908      	ldr	r1, [pc, #32]	; (8013574 <tcpip_tcp_timer+0x40>)
 8013554:	20fa      	movs	r0, #250	; 0xfa
 8013556:	f000 f8f3 	bl	8013740 <sys_timeout>
 801355a:	e003      	b.n	8013564 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801355c:	4b06      	ldr	r3, [pc, #24]	; (8013578 <tcpip_tcp_timer+0x44>)
 801355e:	2200      	movs	r2, #0
 8013560:	601a      	str	r2, [r3, #0]
  }
}
 8013562:	bf00      	nop
 8013564:	bf00      	nop
 8013566:	3708      	adds	r7, #8
 8013568:	46bd      	mov	sp, r7
 801356a:	bd80      	pop	{r7, pc}
 801356c:	2000b0fc 	.word	0x2000b0fc
 8013570:	2000b10c 	.word	0x2000b10c
 8013574:	08013535 	.word	0x08013535
 8013578:	20004280 	.word	0x20004280

0801357c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013580:	4b0a      	ldr	r3, [pc, #40]	; (80135ac <tcp_timer_needed+0x30>)
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d10f      	bne.n	80135a8 <tcp_timer_needed+0x2c>
 8013588:	4b09      	ldr	r3, [pc, #36]	; (80135b0 <tcp_timer_needed+0x34>)
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d103      	bne.n	8013598 <tcp_timer_needed+0x1c>
 8013590:	4b08      	ldr	r3, [pc, #32]	; (80135b4 <tcp_timer_needed+0x38>)
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d007      	beq.n	80135a8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013598:	4b04      	ldr	r3, [pc, #16]	; (80135ac <tcp_timer_needed+0x30>)
 801359a:	2201      	movs	r2, #1
 801359c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801359e:	2200      	movs	r2, #0
 80135a0:	4905      	ldr	r1, [pc, #20]	; (80135b8 <tcp_timer_needed+0x3c>)
 80135a2:	20fa      	movs	r0, #250	; 0xfa
 80135a4:	f000 f8cc 	bl	8013740 <sys_timeout>
  }
}
 80135a8:	bf00      	nop
 80135aa:	bd80      	pop	{r7, pc}
 80135ac:	20004280 	.word	0x20004280
 80135b0:	2000b0fc 	.word	0x2000b0fc
 80135b4:	2000b10c 	.word	0x2000b10c
 80135b8:	08013535 	.word	0x08013535

080135bc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b086      	sub	sp, #24
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	60f8      	str	r0, [r7, #12]
 80135c4:	60b9      	str	r1, [r7, #8]
 80135c6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80135c8:	200a      	movs	r0, #10
 80135ca:	f7f9 fd67 	bl	800d09c <memp_malloc>
 80135ce:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d109      	bne.n	80135ea <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80135d6:	693b      	ldr	r3, [r7, #16]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d151      	bne.n	8013680 <sys_timeout_abs+0xc4>
 80135dc:	4b2a      	ldr	r3, [pc, #168]	; (8013688 <sys_timeout_abs+0xcc>)
 80135de:	22be      	movs	r2, #190	; 0xbe
 80135e0:	492a      	ldr	r1, [pc, #168]	; (801368c <sys_timeout_abs+0xd0>)
 80135e2:	482b      	ldr	r0, [pc, #172]	; (8013690 <sys_timeout_abs+0xd4>)
 80135e4:	f003 fc1e 	bl	8016e24 <iprintf>
    return;
 80135e8:	e04a      	b.n	8013680 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80135ea:	693b      	ldr	r3, [r7, #16]
 80135ec:	2200      	movs	r2, #0
 80135ee:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80135f0:	693b      	ldr	r3, [r7, #16]
 80135f2:	68ba      	ldr	r2, [r7, #8]
 80135f4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80135f6:	693b      	ldr	r3, [r7, #16]
 80135f8:	687a      	ldr	r2, [r7, #4]
 80135fa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80135fc:	693b      	ldr	r3, [r7, #16]
 80135fe:	68fa      	ldr	r2, [r7, #12]
 8013600:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013602:	4b24      	ldr	r3, [pc, #144]	; (8013694 <sys_timeout_abs+0xd8>)
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d103      	bne.n	8013612 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801360a:	4a22      	ldr	r2, [pc, #136]	; (8013694 <sys_timeout_abs+0xd8>)
 801360c:	693b      	ldr	r3, [r7, #16]
 801360e:	6013      	str	r3, [r2, #0]
    return;
 8013610:	e037      	b.n	8013682 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013612:	693b      	ldr	r3, [r7, #16]
 8013614:	685a      	ldr	r2, [r3, #4]
 8013616:	4b1f      	ldr	r3, [pc, #124]	; (8013694 <sys_timeout_abs+0xd8>)
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	685b      	ldr	r3, [r3, #4]
 801361c:	1ad3      	subs	r3, r2, r3
 801361e:	0fdb      	lsrs	r3, r3, #31
 8013620:	f003 0301 	and.w	r3, r3, #1
 8013624:	b2db      	uxtb	r3, r3
 8013626:	2b00      	cmp	r3, #0
 8013628:	d007      	beq.n	801363a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801362a:	4b1a      	ldr	r3, [pc, #104]	; (8013694 <sys_timeout_abs+0xd8>)
 801362c:	681a      	ldr	r2, [r3, #0]
 801362e:	693b      	ldr	r3, [r7, #16]
 8013630:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013632:	4a18      	ldr	r2, [pc, #96]	; (8013694 <sys_timeout_abs+0xd8>)
 8013634:	693b      	ldr	r3, [r7, #16]
 8013636:	6013      	str	r3, [r2, #0]
 8013638:	e023      	b.n	8013682 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801363a:	4b16      	ldr	r3, [pc, #88]	; (8013694 <sys_timeout_abs+0xd8>)
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	617b      	str	r3, [r7, #20]
 8013640:	e01a      	b.n	8013678 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013642:	697b      	ldr	r3, [r7, #20]
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d00b      	beq.n	8013662 <sys_timeout_abs+0xa6>
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	685a      	ldr	r2, [r3, #4]
 801364e:	697b      	ldr	r3, [r7, #20]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	685b      	ldr	r3, [r3, #4]
 8013654:	1ad3      	subs	r3, r2, r3
 8013656:	0fdb      	lsrs	r3, r3, #31
 8013658:	f003 0301 	and.w	r3, r3, #1
 801365c:	b2db      	uxtb	r3, r3
 801365e:	2b00      	cmp	r3, #0
 8013660:	d007      	beq.n	8013672 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013662:	697b      	ldr	r3, [r7, #20]
 8013664:	681a      	ldr	r2, [r3, #0]
 8013666:	693b      	ldr	r3, [r7, #16]
 8013668:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801366a:	697b      	ldr	r3, [r7, #20]
 801366c:	693a      	ldr	r2, [r7, #16]
 801366e:	601a      	str	r2, [r3, #0]
        break;
 8013670:	e007      	b.n	8013682 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013672:	697b      	ldr	r3, [r7, #20]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	617b      	str	r3, [r7, #20]
 8013678:	697b      	ldr	r3, [r7, #20]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d1e1      	bne.n	8013642 <sys_timeout_abs+0x86>
 801367e:	e000      	b.n	8013682 <sys_timeout_abs+0xc6>
    return;
 8013680:	bf00      	nop
      }
    }
  }
}
 8013682:	3718      	adds	r7, #24
 8013684:	46bd      	mov	sp, r7
 8013686:	bd80      	pop	{r7, pc}
 8013688:	08019f8c 	.word	0x08019f8c
 801368c:	08019fc0 	.word	0x08019fc0
 8013690:	0801a000 	.word	0x0801a000
 8013694:	20004278 	.word	0x20004278

08013698 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b086      	sub	sp, #24
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80136a4:	697b      	ldr	r3, [r7, #20]
 80136a6:	685b      	ldr	r3, [r3, #4]
 80136a8:	4798      	blx	r3

  now = sys_now();
 80136aa:	f7f4 fb33 	bl	8007d14 <sys_now>
 80136ae:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80136b0:	697b      	ldr	r3, [r7, #20]
 80136b2:	681a      	ldr	r2, [r3, #0]
 80136b4:	4b0f      	ldr	r3, [pc, #60]	; (80136f4 <lwip_cyclic_timer+0x5c>)
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	4413      	add	r3, r2
 80136ba:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80136bc:	68fa      	ldr	r2, [r7, #12]
 80136be:	693b      	ldr	r3, [r7, #16]
 80136c0:	1ad3      	subs	r3, r2, r3
 80136c2:	0fdb      	lsrs	r3, r3, #31
 80136c4:	f003 0301 	and.w	r3, r3, #1
 80136c8:	b2db      	uxtb	r3, r3
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d009      	beq.n	80136e2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80136ce:	697b      	ldr	r3, [r7, #20]
 80136d0:	681a      	ldr	r2, [r3, #0]
 80136d2:	693b      	ldr	r3, [r7, #16]
 80136d4:	4413      	add	r3, r2
 80136d6:	687a      	ldr	r2, [r7, #4]
 80136d8:	4907      	ldr	r1, [pc, #28]	; (80136f8 <lwip_cyclic_timer+0x60>)
 80136da:	4618      	mov	r0, r3
 80136dc:	f7ff ff6e 	bl	80135bc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80136e0:	e004      	b.n	80136ec <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80136e2:	687a      	ldr	r2, [r7, #4]
 80136e4:	4904      	ldr	r1, [pc, #16]	; (80136f8 <lwip_cyclic_timer+0x60>)
 80136e6:	68f8      	ldr	r0, [r7, #12]
 80136e8:	f7ff ff68 	bl	80135bc <sys_timeout_abs>
}
 80136ec:	bf00      	nop
 80136ee:	3718      	adds	r7, #24
 80136f0:	46bd      	mov	sp, r7
 80136f2:	bd80      	pop	{r7, pc}
 80136f4:	2000427c 	.word	0x2000427c
 80136f8:	08013699 	.word	0x08013699

080136fc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b082      	sub	sp, #8
 8013700:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013702:	2301      	movs	r3, #1
 8013704:	607b      	str	r3, [r7, #4]
 8013706:	e00e      	b.n	8013726 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013708:	4a0b      	ldr	r2, [pc, #44]	; (8013738 <sys_timeouts_init+0x3c>)
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	00db      	lsls	r3, r3, #3
 8013714:	4a08      	ldr	r2, [pc, #32]	; (8013738 <sys_timeouts_init+0x3c>)
 8013716:	4413      	add	r3, r2
 8013718:	461a      	mov	r2, r3
 801371a:	4908      	ldr	r1, [pc, #32]	; (801373c <sys_timeouts_init+0x40>)
 801371c:	f000 f810 	bl	8013740 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	3301      	adds	r3, #1
 8013724:	607b      	str	r3, [r7, #4]
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	2b02      	cmp	r3, #2
 801372a:	d9ed      	bls.n	8013708 <sys_timeouts_init+0xc>
  }
}
 801372c:	bf00      	nop
 801372e:	bf00      	nop
 8013730:	3708      	adds	r7, #8
 8013732:	46bd      	mov	sp, r7
 8013734:	bd80      	pop	{r7, pc}
 8013736:	bf00      	nop
 8013738:	0801abf4 	.word	0x0801abf4
 801373c:	08013699 	.word	0x08013699

08013740 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013740:	b580      	push	{r7, lr}
 8013742:	b086      	sub	sp, #24
 8013744:	af00      	add	r7, sp, #0
 8013746:	60f8      	str	r0, [r7, #12]
 8013748:	60b9      	str	r1, [r7, #8]
 801374a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013752:	d306      	bcc.n	8013762 <sys_timeout+0x22>
 8013754:	4b0a      	ldr	r3, [pc, #40]	; (8013780 <sys_timeout+0x40>)
 8013756:	f240 1229 	movw	r2, #297	; 0x129
 801375a:	490a      	ldr	r1, [pc, #40]	; (8013784 <sys_timeout+0x44>)
 801375c:	480a      	ldr	r0, [pc, #40]	; (8013788 <sys_timeout+0x48>)
 801375e:	f003 fb61 	bl	8016e24 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013762:	f7f4 fad7 	bl	8007d14 <sys_now>
 8013766:	4602      	mov	r2, r0
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	4413      	add	r3, r2
 801376c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801376e:	687a      	ldr	r2, [r7, #4]
 8013770:	68b9      	ldr	r1, [r7, #8]
 8013772:	6978      	ldr	r0, [r7, #20]
 8013774:	f7ff ff22 	bl	80135bc <sys_timeout_abs>
#endif
}
 8013778:	bf00      	nop
 801377a:	3718      	adds	r7, #24
 801377c:	46bd      	mov	sp, r7
 801377e:	bd80      	pop	{r7, pc}
 8013780:	08019f8c 	.word	0x08019f8c
 8013784:	0801a028 	.word	0x0801a028
 8013788:	0801a000 	.word	0x0801a000

0801378c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b084      	sub	sp, #16
 8013790:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013792:	f7f4 fabf 	bl	8007d14 <sys_now>
 8013796:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013798:	4b17      	ldr	r3, [pc, #92]	; (80137f8 <sys_check_timeouts+0x6c>)
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801379e:	68bb      	ldr	r3, [r7, #8]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d022      	beq.n	80137ea <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80137a4:	68bb      	ldr	r3, [r7, #8]
 80137a6:	685b      	ldr	r3, [r3, #4]
 80137a8:	68fa      	ldr	r2, [r7, #12]
 80137aa:	1ad3      	subs	r3, r2, r3
 80137ac:	0fdb      	lsrs	r3, r3, #31
 80137ae:	f003 0301 	and.w	r3, r3, #1
 80137b2:	b2db      	uxtb	r3, r3
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d11a      	bne.n	80137ee <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80137b8:	68bb      	ldr	r3, [r7, #8]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	4a0e      	ldr	r2, [pc, #56]	; (80137f8 <sys_check_timeouts+0x6c>)
 80137be:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	689b      	ldr	r3, [r3, #8]
 80137c4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80137c6:	68bb      	ldr	r3, [r7, #8]
 80137c8:	68db      	ldr	r3, [r3, #12]
 80137ca:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80137cc:	68bb      	ldr	r3, [r7, #8]
 80137ce:	685b      	ldr	r3, [r3, #4]
 80137d0:	4a0a      	ldr	r2, [pc, #40]	; (80137fc <sys_check_timeouts+0x70>)
 80137d2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80137d4:	68b9      	ldr	r1, [r7, #8]
 80137d6:	200a      	movs	r0, #10
 80137d8:	f7f9 fcb2 	bl	800d140 <memp_free>
    if (handler != NULL) {
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d0da      	beq.n	8013798 <sys_check_timeouts+0xc>
      handler(arg);
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	6838      	ldr	r0, [r7, #0]
 80137e6:	4798      	blx	r3
  do {
 80137e8:	e7d6      	b.n	8013798 <sys_check_timeouts+0xc>
      return;
 80137ea:	bf00      	nop
 80137ec:	e000      	b.n	80137f0 <sys_check_timeouts+0x64>
      return;
 80137ee:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80137f0:	3710      	adds	r7, #16
 80137f2:	46bd      	mov	sp, r7
 80137f4:	bd80      	pop	{r7, pc}
 80137f6:	bf00      	nop
 80137f8:	20004278 	.word	0x20004278
 80137fc:	2000427c 	.word	0x2000427c

08013800 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013800:	b580      	push	{r7, lr}
 8013802:	b082      	sub	sp, #8
 8013804:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013806:	4b16      	ldr	r3, [pc, #88]	; (8013860 <sys_timeouts_sleeptime+0x60>)
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d102      	bne.n	8013814 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801380e:	f04f 33ff 	mov.w	r3, #4294967295
 8013812:	e020      	b.n	8013856 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013814:	f7f4 fa7e 	bl	8007d14 <sys_now>
 8013818:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801381a:	4b11      	ldr	r3, [pc, #68]	; (8013860 <sys_timeouts_sleeptime+0x60>)
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	685a      	ldr	r2, [r3, #4]
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	1ad3      	subs	r3, r2, r3
 8013824:	0fdb      	lsrs	r3, r3, #31
 8013826:	f003 0301 	and.w	r3, r3, #1
 801382a:	b2db      	uxtb	r3, r3
 801382c:	2b00      	cmp	r3, #0
 801382e:	d001      	beq.n	8013834 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013830:	2300      	movs	r3, #0
 8013832:	e010      	b.n	8013856 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013834:	4b0a      	ldr	r3, [pc, #40]	; (8013860 <sys_timeouts_sleeptime+0x60>)
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	685a      	ldr	r2, [r3, #4]
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	1ad3      	subs	r3, r2, r3
 801383e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013840:	683b      	ldr	r3, [r7, #0]
 8013842:	2b00      	cmp	r3, #0
 8013844:	da06      	bge.n	8013854 <sys_timeouts_sleeptime+0x54>
 8013846:	4b07      	ldr	r3, [pc, #28]	; (8013864 <sys_timeouts_sleeptime+0x64>)
 8013848:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801384c:	4906      	ldr	r1, [pc, #24]	; (8013868 <sys_timeouts_sleeptime+0x68>)
 801384e:	4807      	ldr	r0, [pc, #28]	; (801386c <sys_timeouts_sleeptime+0x6c>)
 8013850:	f003 fae8 	bl	8016e24 <iprintf>
    return ret;
 8013854:	683b      	ldr	r3, [r7, #0]
  }
}
 8013856:	4618      	mov	r0, r3
 8013858:	3708      	adds	r7, #8
 801385a:	46bd      	mov	sp, r7
 801385c:	bd80      	pop	{r7, pc}
 801385e:	bf00      	nop
 8013860:	20004278 	.word	0x20004278
 8013864:	08019f8c 	.word	0x08019f8c
 8013868:	0801a060 	.word	0x0801a060
 801386c:	0801a000 	.word	0x0801a000

08013870 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013874:	f003 faee 	bl	8016e54 <rand>
 8013878:	4603      	mov	r3, r0
 801387a:	b29b      	uxth	r3, r3
 801387c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013880:	b29b      	uxth	r3, r3
 8013882:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013886:	b29a      	uxth	r2, r3
 8013888:	4b01      	ldr	r3, [pc, #4]	; (8013890 <udp_init+0x20>)
 801388a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801388c:	bf00      	nop
 801388e:	bd80      	pop	{r7, pc}
 8013890:	20000128 	.word	0x20000128

08013894 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b084      	sub	sp, #16
 8013898:	af00      	add	r7, sp, #0
 801389a:	60f8      	str	r0, [r7, #12]
 801389c:	60b9      	str	r1, [r7, #8]
 801389e:	4613      	mov	r3, r2
 80138a0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d105      	bne.n	80138b4 <udp_input_local_match+0x20>
 80138a8:	4b27      	ldr	r3, [pc, #156]	; (8013948 <udp_input_local_match+0xb4>)
 80138aa:	2287      	movs	r2, #135	; 0x87
 80138ac:	4927      	ldr	r1, [pc, #156]	; (801394c <udp_input_local_match+0xb8>)
 80138ae:	4828      	ldr	r0, [pc, #160]	; (8013950 <udp_input_local_match+0xbc>)
 80138b0:	f003 fab8 	bl	8016e24 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80138b4:	68bb      	ldr	r3, [r7, #8]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d105      	bne.n	80138c6 <udp_input_local_match+0x32>
 80138ba:	4b23      	ldr	r3, [pc, #140]	; (8013948 <udp_input_local_match+0xb4>)
 80138bc:	2288      	movs	r2, #136	; 0x88
 80138be:	4925      	ldr	r1, [pc, #148]	; (8013954 <udp_input_local_match+0xc0>)
 80138c0:	4823      	ldr	r0, [pc, #140]	; (8013950 <udp_input_local_match+0xbc>)
 80138c2:	f003 faaf 	bl	8016e24 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	7a1b      	ldrb	r3, [r3, #8]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d00b      	beq.n	80138e6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	7a1a      	ldrb	r2, [r3, #8]
 80138d2:	4b21      	ldr	r3, [pc, #132]	; (8013958 <udp_input_local_match+0xc4>)
 80138d4:	685b      	ldr	r3, [r3, #4]
 80138d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80138da:	3301      	adds	r3, #1
 80138dc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80138de:	429a      	cmp	r2, r3
 80138e0:	d001      	beq.n	80138e6 <udp_input_local_match+0x52>
    return 0;
 80138e2:	2300      	movs	r3, #0
 80138e4:	e02b      	b.n	801393e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80138e6:	79fb      	ldrb	r3, [r7, #7]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d018      	beq.n	801391e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d013      	beq.n	801391a <udp_input_local_match+0x86>
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d00f      	beq.n	801391a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80138fa:	4b17      	ldr	r3, [pc, #92]	; (8013958 <udp_input_local_match+0xc4>)
 80138fc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80138fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013902:	d00a      	beq.n	801391a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	681a      	ldr	r2, [r3, #0]
 8013908:	4b13      	ldr	r3, [pc, #76]	; (8013958 <udp_input_local_match+0xc4>)
 801390a:	695b      	ldr	r3, [r3, #20]
 801390c:	405a      	eors	r2, r3
 801390e:	68bb      	ldr	r3, [r7, #8]
 8013910:	3308      	adds	r3, #8
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013916:	2b00      	cmp	r3, #0
 8013918:	d110      	bne.n	801393c <udp_input_local_match+0xa8>
          return 1;
 801391a:	2301      	movs	r3, #1
 801391c:	e00f      	b.n	801393e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d009      	beq.n	8013938 <udp_input_local_match+0xa4>
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d005      	beq.n	8013938 <udp_input_local_match+0xa4>
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	681a      	ldr	r2, [r3, #0]
 8013930:	4b09      	ldr	r3, [pc, #36]	; (8013958 <udp_input_local_match+0xc4>)
 8013932:	695b      	ldr	r3, [r3, #20]
 8013934:	429a      	cmp	r2, r3
 8013936:	d101      	bne.n	801393c <udp_input_local_match+0xa8>
        return 1;
 8013938:	2301      	movs	r3, #1
 801393a:	e000      	b.n	801393e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801393c:	2300      	movs	r3, #0
}
 801393e:	4618      	mov	r0, r3
 8013940:	3710      	adds	r7, #16
 8013942:	46bd      	mov	sp, r7
 8013944:	bd80      	pop	{r7, pc}
 8013946:	bf00      	nop
 8013948:	0801a074 	.word	0x0801a074
 801394c:	0801a0a4 	.word	0x0801a0a4
 8013950:	0801a0c8 	.word	0x0801a0c8
 8013954:	0801a0f0 	.word	0x0801a0f0
 8013958:	200079e8 	.word	0x200079e8

0801395c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801395c:	b590      	push	{r4, r7, lr}
 801395e:	b08d      	sub	sp, #52	; 0x34
 8013960:	af02      	add	r7, sp, #8
 8013962:	6078      	str	r0, [r7, #4]
 8013964:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013966:	2300      	movs	r3, #0
 8013968:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d105      	bne.n	801397c <udp_input+0x20>
 8013970:	4b7c      	ldr	r3, [pc, #496]	; (8013b64 <udp_input+0x208>)
 8013972:	22cf      	movs	r2, #207	; 0xcf
 8013974:	497c      	ldr	r1, [pc, #496]	; (8013b68 <udp_input+0x20c>)
 8013976:	487d      	ldr	r0, [pc, #500]	; (8013b6c <udp_input+0x210>)
 8013978:	f003 fa54 	bl	8016e24 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d105      	bne.n	801398e <udp_input+0x32>
 8013982:	4b78      	ldr	r3, [pc, #480]	; (8013b64 <udp_input+0x208>)
 8013984:	22d0      	movs	r2, #208	; 0xd0
 8013986:	497a      	ldr	r1, [pc, #488]	; (8013b70 <udp_input+0x214>)
 8013988:	4878      	ldr	r0, [pc, #480]	; (8013b6c <udp_input+0x210>)
 801398a:	f003 fa4b 	bl	8016e24 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	895b      	ldrh	r3, [r3, #10]
 8013992:	2b07      	cmp	r3, #7
 8013994:	d803      	bhi.n	801399e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f7fa f9fe 	bl	800dd98 <pbuf_free>
    goto end;
 801399c:	e0de      	b.n	8013b5c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	685b      	ldr	r3, [r3, #4]
 80139a2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80139a4:	4b73      	ldr	r3, [pc, #460]	; (8013b74 <udp_input+0x218>)
 80139a6:	695b      	ldr	r3, [r3, #20]
 80139a8:	4a72      	ldr	r2, [pc, #456]	; (8013b74 <udp_input+0x218>)
 80139aa:	6812      	ldr	r2, [r2, #0]
 80139ac:	4611      	mov	r1, r2
 80139ae:	4618      	mov	r0, r3
 80139b0:	f001 fc88 	bl	80152c4 <ip4_addr_isbroadcast_u32>
 80139b4:	4603      	mov	r3, r0
 80139b6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80139b8:	697b      	ldr	r3, [r7, #20]
 80139ba:	881b      	ldrh	r3, [r3, #0]
 80139bc:	b29b      	uxth	r3, r3
 80139be:	4618      	mov	r0, r3
 80139c0:	f7f8 feb6 	bl	800c730 <lwip_htons>
 80139c4:	4603      	mov	r3, r0
 80139c6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80139c8:	697b      	ldr	r3, [r7, #20]
 80139ca:	885b      	ldrh	r3, [r3, #2]
 80139cc:	b29b      	uxth	r3, r3
 80139ce:	4618      	mov	r0, r3
 80139d0:	f7f8 feae 	bl	800c730 <lwip_htons>
 80139d4:	4603      	mov	r3, r0
 80139d6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80139d8:	2300      	movs	r3, #0
 80139da:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80139dc:	2300      	movs	r3, #0
 80139de:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80139e0:	2300      	movs	r3, #0
 80139e2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80139e4:	4b64      	ldr	r3, [pc, #400]	; (8013b78 <udp_input+0x21c>)
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	627b      	str	r3, [r7, #36]	; 0x24
 80139ea:	e054      	b.n	8013a96 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80139ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ee:	8a5b      	ldrh	r3, [r3, #18]
 80139f0:	89fa      	ldrh	r2, [r7, #14]
 80139f2:	429a      	cmp	r2, r3
 80139f4:	d14a      	bne.n	8013a8c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80139f6:	7cfb      	ldrb	r3, [r7, #19]
 80139f8:	461a      	mov	r2, r3
 80139fa:	6839      	ldr	r1, [r7, #0]
 80139fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80139fe:	f7ff ff49 	bl	8013894 <udp_input_local_match>
 8013a02:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d041      	beq.n	8013a8c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a0a:	7c1b      	ldrb	r3, [r3, #16]
 8013a0c:	f003 0304 	and.w	r3, r3, #4
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d11d      	bne.n	8013a50 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013a14:	69fb      	ldr	r3, [r7, #28]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d102      	bne.n	8013a20 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a1c:	61fb      	str	r3, [r7, #28]
 8013a1e:	e017      	b.n	8013a50 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013a20:	7cfb      	ldrb	r3, [r7, #19]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d014      	beq.n	8013a50 <udp_input+0xf4>
 8013a26:	4b53      	ldr	r3, [pc, #332]	; (8013b74 <udp_input+0x218>)
 8013a28:	695b      	ldr	r3, [r3, #20]
 8013a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a2e:	d10f      	bne.n	8013a50 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013a30:	69fb      	ldr	r3, [r7, #28]
 8013a32:	681a      	ldr	r2, [r3, #0]
 8013a34:	683b      	ldr	r3, [r7, #0]
 8013a36:	3304      	adds	r3, #4
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	429a      	cmp	r2, r3
 8013a3c:	d008      	beq.n	8013a50 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a40:	681a      	ldr	r2, [r3, #0]
 8013a42:	683b      	ldr	r3, [r7, #0]
 8013a44:	3304      	adds	r3, #4
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	429a      	cmp	r2, r3
 8013a4a:	d101      	bne.n	8013a50 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a4e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a52:	8a9b      	ldrh	r3, [r3, #20]
 8013a54:	8a3a      	ldrh	r2, [r7, #16]
 8013a56:	429a      	cmp	r2, r3
 8013a58:	d118      	bne.n	8013a8c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a5c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d005      	beq.n	8013a6e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a64:	685a      	ldr	r2, [r3, #4]
 8013a66:	4b43      	ldr	r3, [pc, #268]	; (8013b74 <udp_input+0x218>)
 8013a68:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013a6a:	429a      	cmp	r2, r3
 8013a6c:	d10e      	bne.n	8013a8c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013a6e:	6a3b      	ldr	r3, [r7, #32]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d014      	beq.n	8013a9e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a76:	68da      	ldr	r2, [r3, #12]
 8013a78:	6a3b      	ldr	r3, [r7, #32]
 8013a7a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013a7c:	4b3e      	ldr	r3, [pc, #248]	; (8013b78 <udp_input+0x21c>)
 8013a7e:	681a      	ldr	r2, [r3, #0]
 8013a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a82:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013a84:	4a3c      	ldr	r2, [pc, #240]	; (8013b78 <udp_input+0x21c>)
 8013a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a88:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013a8a:	e008      	b.n	8013a9e <udp_input+0x142>
      }
    }

    prev = pcb;
 8013a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a8e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a92:	68db      	ldr	r3, [r3, #12]
 8013a94:	627b      	str	r3, [r7, #36]	; 0x24
 8013a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d1a7      	bne.n	80139ec <udp_input+0x90>
 8013a9c:	e000      	b.n	8013aa0 <udp_input+0x144>
        break;
 8013a9e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d101      	bne.n	8013aaa <udp_input+0x14e>
    pcb = uncon_pcb;
 8013aa6:	69fb      	ldr	r3, [r7, #28]
 8013aa8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d002      	beq.n	8013ab6 <udp_input+0x15a>
    for_us = 1;
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	76fb      	strb	r3, [r7, #27]
 8013ab4:	e00a      	b.n	8013acc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013ab6:	683b      	ldr	r3, [r7, #0]
 8013ab8:	3304      	adds	r3, #4
 8013aba:	681a      	ldr	r2, [r3, #0]
 8013abc:	4b2d      	ldr	r3, [pc, #180]	; (8013b74 <udp_input+0x218>)
 8013abe:	695b      	ldr	r3, [r3, #20]
 8013ac0:	429a      	cmp	r2, r3
 8013ac2:	bf0c      	ite	eq
 8013ac4:	2301      	moveq	r3, #1
 8013ac6:	2300      	movne	r3, #0
 8013ac8:	b2db      	uxtb	r3, r3
 8013aca:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013acc:	7efb      	ldrb	r3, [r7, #27]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d041      	beq.n	8013b56 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013ad2:	2108      	movs	r1, #8
 8013ad4:	6878      	ldr	r0, [r7, #4]
 8013ad6:	f7fa f8d9 	bl	800dc8c <pbuf_remove_header>
 8013ada:	4603      	mov	r3, r0
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d00a      	beq.n	8013af6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013ae0:	4b20      	ldr	r3, [pc, #128]	; (8013b64 <udp_input+0x208>)
 8013ae2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013ae6:	4925      	ldr	r1, [pc, #148]	; (8013b7c <udp_input+0x220>)
 8013ae8:	4820      	ldr	r0, [pc, #128]	; (8013b6c <udp_input+0x210>)
 8013aea:	f003 f99b 	bl	8016e24 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013aee:	6878      	ldr	r0, [r7, #4]
 8013af0:	f7fa f952 	bl	800dd98 <pbuf_free>
      goto end;
 8013af4:	e032      	b.n	8013b5c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d012      	beq.n	8013b22 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013afe:	699b      	ldr	r3, [r3, #24]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d00a      	beq.n	8013b1a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b06:	699c      	ldr	r4, [r3, #24]
 8013b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b0a:	69d8      	ldr	r0, [r3, #28]
 8013b0c:	8a3b      	ldrh	r3, [r7, #16]
 8013b0e:	9300      	str	r3, [sp, #0]
 8013b10:	4b1b      	ldr	r3, [pc, #108]	; (8013b80 <udp_input+0x224>)
 8013b12:	687a      	ldr	r2, [r7, #4]
 8013b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013b16:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013b18:	e021      	b.n	8013b5e <udp_input+0x202>
        pbuf_free(p);
 8013b1a:	6878      	ldr	r0, [r7, #4]
 8013b1c:	f7fa f93c 	bl	800dd98 <pbuf_free>
        goto end;
 8013b20:	e01c      	b.n	8013b5c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013b22:	7cfb      	ldrb	r3, [r7, #19]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d112      	bne.n	8013b4e <udp_input+0x1f2>
 8013b28:	4b12      	ldr	r3, [pc, #72]	; (8013b74 <udp_input+0x218>)
 8013b2a:	695b      	ldr	r3, [r3, #20]
 8013b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013b30:	2be0      	cmp	r3, #224	; 0xe0
 8013b32:	d00c      	beq.n	8013b4e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013b34:	4b0f      	ldr	r3, [pc, #60]	; (8013b74 <udp_input+0x218>)
 8013b36:	899b      	ldrh	r3, [r3, #12]
 8013b38:	3308      	adds	r3, #8
 8013b3a:	b29b      	uxth	r3, r3
 8013b3c:	b21b      	sxth	r3, r3
 8013b3e:	4619      	mov	r1, r3
 8013b40:	6878      	ldr	r0, [r7, #4]
 8013b42:	f7fa f916 	bl	800dd72 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013b46:	2103      	movs	r1, #3
 8013b48:	6878      	ldr	r0, [r7, #4]
 8013b4a:	f001 f89b 	bl	8014c84 <icmp_dest_unreach>
      pbuf_free(p);
 8013b4e:	6878      	ldr	r0, [r7, #4]
 8013b50:	f7fa f922 	bl	800dd98 <pbuf_free>
  return;
 8013b54:	e003      	b.n	8013b5e <udp_input+0x202>
    pbuf_free(p);
 8013b56:	6878      	ldr	r0, [r7, #4]
 8013b58:	f7fa f91e 	bl	800dd98 <pbuf_free>
  return;
 8013b5c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013b5e:	372c      	adds	r7, #44	; 0x2c
 8013b60:	46bd      	mov	sp, r7
 8013b62:	bd90      	pop	{r4, r7, pc}
 8013b64:	0801a074 	.word	0x0801a074
 8013b68:	0801a118 	.word	0x0801a118
 8013b6c:	0801a0c8 	.word	0x0801a0c8
 8013b70:	0801a130 	.word	0x0801a130
 8013b74:	200079e8 	.word	0x200079e8
 8013b78:	2000b114 	.word	0x2000b114
 8013b7c:	0801a14c 	.word	0x0801a14c
 8013b80:	200079f8 	.word	0x200079f8

08013b84 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013b84:	b480      	push	{r7}
 8013b86:	b085      	sub	sp, #20
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
 8013b8c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d01e      	beq.n	8013bd2 <udp_netif_ip_addr_changed+0x4e>
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d01a      	beq.n	8013bd2 <udp_netif_ip_addr_changed+0x4e>
 8013b9c:	683b      	ldr	r3, [r7, #0]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d017      	beq.n	8013bd2 <udp_netif_ip_addr_changed+0x4e>
 8013ba2:	683b      	ldr	r3, [r7, #0]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d013      	beq.n	8013bd2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013baa:	4b0d      	ldr	r3, [pc, #52]	; (8013be0 <udp_netif_ip_addr_changed+0x5c>)
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	60fb      	str	r3, [r7, #12]
 8013bb0:	e00c      	b.n	8013bcc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	681a      	ldr	r2, [r3, #0]
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	d103      	bne.n	8013bc6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013bbe:	683b      	ldr	r3, [r7, #0]
 8013bc0:	681a      	ldr	r2, [r3, #0]
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	68db      	ldr	r3, [r3, #12]
 8013bca:	60fb      	str	r3, [r7, #12]
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d1ef      	bne.n	8013bb2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013bd2:	bf00      	nop
 8013bd4:	3714      	adds	r7, #20
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bdc:	4770      	bx	lr
 8013bde:	bf00      	nop
 8013be0:	2000b114 	.word	0x2000b114

08013be4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b082      	sub	sp, #8
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013bec:	4915      	ldr	r1, [pc, #84]	; (8013c44 <etharp_free_entry+0x60>)
 8013bee:	687a      	ldr	r2, [r7, #4]
 8013bf0:	4613      	mov	r3, r2
 8013bf2:	005b      	lsls	r3, r3, #1
 8013bf4:	4413      	add	r3, r2
 8013bf6:	00db      	lsls	r3, r3, #3
 8013bf8:	440b      	add	r3, r1
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d013      	beq.n	8013c28 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013c00:	4910      	ldr	r1, [pc, #64]	; (8013c44 <etharp_free_entry+0x60>)
 8013c02:	687a      	ldr	r2, [r7, #4]
 8013c04:	4613      	mov	r3, r2
 8013c06:	005b      	lsls	r3, r3, #1
 8013c08:	4413      	add	r3, r2
 8013c0a:	00db      	lsls	r3, r3, #3
 8013c0c:	440b      	add	r3, r1
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	4618      	mov	r0, r3
 8013c12:	f7fa f8c1 	bl	800dd98 <pbuf_free>
    arp_table[i].q = NULL;
 8013c16:	490b      	ldr	r1, [pc, #44]	; (8013c44 <etharp_free_entry+0x60>)
 8013c18:	687a      	ldr	r2, [r7, #4]
 8013c1a:	4613      	mov	r3, r2
 8013c1c:	005b      	lsls	r3, r3, #1
 8013c1e:	4413      	add	r3, r2
 8013c20:	00db      	lsls	r3, r3, #3
 8013c22:	440b      	add	r3, r1
 8013c24:	2200      	movs	r2, #0
 8013c26:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013c28:	4906      	ldr	r1, [pc, #24]	; (8013c44 <etharp_free_entry+0x60>)
 8013c2a:	687a      	ldr	r2, [r7, #4]
 8013c2c:	4613      	mov	r3, r2
 8013c2e:	005b      	lsls	r3, r3, #1
 8013c30:	4413      	add	r3, r2
 8013c32:	00db      	lsls	r3, r3, #3
 8013c34:	440b      	add	r3, r1
 8013c36:	3314      	adds	r3, #20
 8013c38:	2200      	movs	r2, #0
 8013c3a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013c3c:	bf00      	nop
 8013c3e:	3708      	adds	r7, #8
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bd80      	pop	{r7, pc}
 8013c44:	20004284 	.word	0x20004284

08013c48 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b082      	sub	sp, #8
 8013c4c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013c4e:	2300      	movs	r3, #0
 8013c50:	607b      	str	r3, [r7, #4]
 8013c52:	e096      	b.n	8013d82 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013c54:	494f      	ldr	r1, [pc, #316]	; (8013d94 <etharp_tmr+0x14c>)
 8013c56:	687a      	ldr	r2, [r7, #4]
 8013c58:	4613      	mov	r3, r2
 8013c5a:	005b      	lsls	r3, r3, #1
 8013c5c:	4413      	add	r3, r2
 8013c5e:	00db      	lsls	r3, r3, #3
 8013c60:	440b      	add	r3, r1
 8013c62:	3314      	adds	r3, #20
 8013c64:	781b      	ldrb	r3, [r3, #0]
 8013c66:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013c68:	78fb      	ldrb	r3, [r7, #3]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	f000 8086 	beq.w	8013d7c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013c70:	4948      	ldr	r1, [pc, #288]	; (8013d94 <etharp_tmr+0x14c>)
 8013c72:	687a      	ldr	r2, [r7, #4]
 8013c74:	4613      	mov	r3, r2
 8013c76:	005b      	lsls	r3, r3, #1
 8013c78:	4413      	add	r3, r2
 8013c7a:	00db      	lsls	r3, r3, #3
 8013c7c:	440b      	add	r3, r1
 8013c7e:	3312      	adds	r3, #18
 8013c80:	881b      	ldrh	r3, [r3, #0]
 8013c82:	3301      	adds	r3, #1
 8013c84:	b298      	uxth	r0, r3
 8013c86:	4943      	ldr	r1, [pc, #268]	; (8013d94 <etharp_tmr+0x14c>)
 8013c88:	687a      	ldr	r2, [r7, #4]
 8013c8a:	4613      	mov	r3, r2
 8013c8c:	005b      	lsls	r3, r3, #1
 8013c8e:	4413      	add	r3, r2
 8013c90:	00db      	lsls	r3, r3, #3
 8013c92:	440b      	add	r3, r1
 8013c94:	3312      	adds	r3, #18
 8013c96:	4602      	mov	r2, r0
 8013c98:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013c9a:	493e      	ldr	r1, [pc, #248]	; (8013d94 <etharp_tmr+0x14c>)
 8013c9c:	687a      	ldr	r2, [r7, #4]
 8013c9e:	4613      	mov	r3, r2
 8013ca0:	005b      	lsls	r3, r3, #1
 8013ca2:	4413      	add	r3, r2
 8013ca4:	00db      	lsls	r3, r3, #3
 8013ca6:	440b      	add	r3, r1
 8013ca8:	3312      	adds	r3, #18
 8013caa:	881b      	ldrh	r3, [r3, #0]
 8013cac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013cb0:	d215      	bcs.n	8013cde <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013cb2:	4938      	ldr	r1, [pc, #224]	; (8013d94 <etharp_tmr+0x14c>)
 8013cb4:	687a      	ldr	r2, [r7, #4]
 8013cb6:	4613      	mov	r3, r2
 8013cb8:	005b      	lsls	r3, r3, #1
 8013cba:	4413      	add	r3, r2
 8013cbc:	00db      	lsls	r3, r3, #3
 8013cbe:	440b      	add	r3, r1
 8013cc0:	3314      	adds	r3, #20
 8013cc2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013cc4:	2b01      	cmp	r3, #1
 8013cc6:	d10e      	bne.n	8013ce6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013cc8:	4932      	ldr	r1, [pc, #200]	; (8013d94 <etharp_tmr+0x14c>)
 8013cca:	687a      	ldr	r2, [r7, #4]
 8013ccc:	4613      	mov	r3, r2
 8013cce:	005b      	lsls	r3, r3, #1
 8013cd0:	4413      	add	r3, r2
 8013cd2:	00db      	lsls	r3, r3, #3
 8013cd4:	440b      	add	r3, r1
 8013cd6:	3312      	adds	r3, #18
 8013cd8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013cda:	2b04      	cmp	r3, #4
 8013cdc:	d903      	bls.n	8013ce6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013cde:	6878      	ldr	r0, [r7, #4]
 8013ce0:	f7ff ff80 	bl	8013be4 <etharp_free_entry>
 8013ce4:	e04a      	b.n	8013d7c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013ce6:	492b      	ldr	r1, [pc, #172]	; (8013d94 <etharp_tmr+0x14c>)
 8013ce8:	687a      	ldr	r2, [r7, #4]
 8013cea:	4613      	mov	r3, r2
 8013cec:	005b      	lsls	r3, r3, #1
 8013cee:	4413      	add	r3, r2
 8013cf0:	00db      	lsls	r3, r3, #3
 8013cf2:	440b      	add	r3, r1
 8013cf4:	3314      	adds	r3, #20
 8013cf6:	781b      	ldrb	r3, [r3, #0]
 8013cf8:	2b03      	cmp	r3, #3
 8013cfa:	d10a      	bne.n	8013d12 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013cfc:	4925      	ldr	r1, [pc, #148]	; (8013d94 <etharp_tmr+0x14c>)
 8013cfe:	687a      	ldr	r2, [r7, #4]
 8013d00:	4613      	mov	r3, r2
 8013d02:	005b      	lsls	r3, r3, #1
 8013d04:	4413      	add	r3, r2
 8013d06:	00db      	lsls	r3, r3, #3
 8013d08:	440b      	add	r3, r1
 8013d0a:	3314      	adds	r3, #20
 8013d0c:	2204      	movs	r2, #4
 8013d0e:	701a      	strb	r2, [r3, #0]
 8013d10:	e034      	b.n	8013d7c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013d12:	4920      	ldr	r1, [pc, #128]	; (8013d94 <etharp_tmr+0x14c>)
 8013d14:	687a      	ldr	r2, [r7, #4]
 8013d16:	4613      	mov	r3, r2
 8013d18:	005b      	lsls	r3, r3, #1
 8013d1a:	4413      	add	r3, r2
 8013d1c:	00db      	lsls	r3, r3, #3
 8013d1e:	440b      	add	r3, r1
 8013d20:	3314      	adds	r3, #20
 8013d22:	781b      	ldrb	r3, [r3, #0]
 8013d24:	2b04      	cmp	r3, #4
 8013d26:	d10a      	bne.n	8013d3e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013d28:	491a      	ldr	r1, [pc, #104]	; (8013d94 <etharp_tmr+0x14c>)
 8013d2a:	687a      	ldr	r2, [r7, #4]
 8013d2c:	4613      	mov	r3, r2
 8013d2e:	005b      	lsls	r3, r3, #1
 8013d30:	4413      	add	r3, r2
 8013d32:	00db      	lsls	r3, r3, #3
 8013d34:	440b      	add	r3, r1
 8013d36:	3314      	adds	r3, #20
 8013d38:	2202      	movs	r2, #2
 8013d3a:	701a      	strb	r2, [r3, #0]
 8013d3c:	e01e      	b.n	8013d7c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013d3e:	4915      	ldr	r1, [pc, #84]	; (8013d94 <etharp_tmr+0x14c>)
 8013d40:	687a      	ldr	r2, [r7, #4]
 8013d42:	4613      	mov	r3, r2
 8013d44:	005b      	lsls	r3, r3, #1
 8013d46:	4413      	add	r3, r2
 8013d48:	00db      	lsls	r3, r3, #3
 8013d4a:	440b      	add	r3, r1
 8013d4c:	3314      	adds	r3, #20
 8013d4e:	781b      	ldrb	r3, [r3, #0]
 8013d50:	2b01      	cmp	r3, #1
 8013d52:	d113      	bne.n	8013d7c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013d54:	490f      	ldr	r1, [pc, #60]	; (8013d94 <etharp_tmr+0x14c>)
 8013d56:	687a      	ldr	r2, [r7, #4]
 8013d58:	4613      	mov	r3, r2
 8013d5a:	005b      	lsls	r3, r3, #1
 8013d5c:	4413      	add	r3, r2
 8013d5e:	00db      	lsls	r3, r3, #3
 8013d60:	440b      	add	r3, r1
 8013d62:	3308      	adds	r3, #8
 8013d64:	6818      	ldr	r0, [r3, #0]
 8013d66:	687a      	ldr	r2, [r7, #4]
 8013d68:	4613      	mov	r3, r2
 8013d6a:	005b      	lsls	r3, r3, #1
 8013d6c:	4413      	add	r3, r2
 8013d6e:	00db      	lsls	r3, r3, #3
 8013d70:	4a08      	ldr	r2, [pc, #32]	; (8013d94 <etharp_tmr+0x14c>)
 8013d72:	4413      	add	r3, r2
 8013d74:	3304      	adds	r3, #4
 8013d76:	4619      	mov	r1, r3
 8013d78:	f000 fe6e 	bl	8014a58 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	3301      	adds	r3, #1
 8013d80:	607b      	str	r3, [r7, #4]
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	2b09      	cmp	r3, #9
 8013d86:	f77f af65 	ble.w	8013c54 <etharp_tmr+0xc>
      }
    }
  }
}
 8013d8a:	bf00      	nop
 8013d8c:	bf00      	nop
 8013d8e:	3708      	adds	r7, #8
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bd80      	pop	{r7, pc}
 8013d94:	20004284 	.word	0x20004284

08013d98 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b08a      	sub	sp, #40	; 0x28
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	60f8      	str	r0, [r7, #12]
 8013da0:	460b      	mov	r3, r1
 8013da2:	607a      	str	r2, [r7, #4]
 8013da4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013da6:	230a      	movs	r3, #10
 8013da8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013daa:	230a      	movs	r3, #10
 8013dac:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013dae:	230a      	movs	r3, #10
 8013db0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013db2:	2300      	movs	r3, #0
 8013db4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013db6:	230a      	movs	r3, #10
 8013db8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013dba:	2300      	movs	r3, #0
 8013dbc:	83bb      	strh	r3, [r7, #28]
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	837b      	strh	r3, [r7, #26]
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	843b      	strh	r3, [r7, #32]
 8013dca:	e0ae      	b.n	8013f2a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013dcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013dd0:	49a6      	ldr	r1, [pc, #664]	; (801406c <etharp_find_entry+0x2d4>)
 8013dd2:	4613      	mov	r3, r2
 8013dd4:	005b      	lsls	r3, r3, #1
 8013dd6:	4413      	add	r3, r2
 8013dd8:	00db      	lsls	r3, r3, #3
 8013dda:	440b      	add	r3, r1
 8013ddc:	3314      	adds	r3, #20
 8013dde:	781b      	ldrb	r3, [r3, #0]
 8013de0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013de2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013de6:	2b0a      	cmp	r3, #10
 8013de8:	d105      	bne.n	8013df6 <etharp_find_entry+0x5e>
 8013dea:	7dfb      	ldrb	r3, [r7, #23]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d102      	bne.n	8013df6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013df0:	8c3b      	ldrh	r3, [r7, #32]
 8013df2:	847b      	strh	r3, [r7, #34]	; 0x22
 8013df4:	e095      	b.n	8013f22 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013df6:	7dfb      	ldrb	r3, [r7, #23]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	f000 8092 	beq.w	8013f22 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013dfe:	7dfb      	ldrb	r3, [r7, #23]
 8013e00:	2b01      	cmp	r3, #1
 8013e02:	d009      	beq.n	8013e18 <etharp_find_entry+0x80>
 8013e04:	7dfb      	ldrb	r3, [r7, #23]
 8013e06:	2b01      	cmp	r3, #1
 8013e08:	d806      	bhi.n	8013e18 <etharp_find_entry+0x80>
 8013e0a:	4b99      	ldr	r3, [pc, #612]	; (8014070 <etharp_find_entry+0x2d8>)
 8013e0c:	f240 1223 	movw	r2, #291	; 0x123
 8013e10:	4998      	ldr	r1, [pc, #608]	; (8014074 <etharp_find_entry+0x2dc>)
 8013e12:	4899      	ldr	r0, [pc, #612]	; (8014078 <etharp_find_entry+0x2e0>)
 8013e14:	f003 f806 	bl	8016e24 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d020      	beq.n	8013e60 <etharp_find_entry+0xc8>
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	6819      	ldr	r1, [r3, #0]
 8013e22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e26:	4891      	ldr	r0, [pc, #580]	; (801406c <etharp_find_entry+0x2d4>)
 8013e28:	4613      	mov	r3, r2
 8013e2a:	005b      	lsls	r3, r3, #1
 8013e2c:	4413      	add	r3, r2
 8013e2e:	00db      	lsls	r3, r3, #3
 8013e30:	4403      	add	r3, r0
 8013e32:	3304      	adds	r3, #4
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	4299      	cmp	r1, r3
 8013e38:	d112      	bne.n	8013e60 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d00c      	beq.n	8013e5a <etharp_find_entry+0xc2>
 8013e40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e44:	4989      	ldr	r1, [pc, #548]	; (801406c <etharp_find_entry+0x2d4>)
 8013e46:	4613      	mov	r3, r2
 8013e48:	005b      	lsls	r3, r3, #1
 8013e4a:	4413      	add	r3, r2
 8013e4c:	00db      	lsls	r3, r3, #3
 8013e4e:	440b      	add	r3, r1
 8013e50:	3308      	adds	r3, #8
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	687a      	ldr	r2, [r7, #4]
 8013e56:	429a      	cmp	r2, r3
 8013e58:	d102      	bne.n	8013e60 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013e5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013e5e:	e100      	b.n	8014062 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013e60:	7dfb      	ldrb	r3, [r7, #23]
 8013e62:	2b01      	cmp	r3, #1
 8013e64:	d140      	bne.n	8013ee8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013e66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e6a:	4980      	ldr	r1, [pc, #512]	; (801406c <etharp_find_entry+0x2d4>)
 8013e6c:	4613      	mov	r3, r2
 8013e6e:	005b      	lsls	r3, r3, #1
 8013e70:	4413      	add	r3, r2
 8013e72:	00db      	lsls	r3, r3, #3
 8013e74:	440b      	add	r3, r1
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d01a      	beq.n	8013eb2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013e7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e80:	497a      	ldr	r1, [pc, #488]	; (801406c <etharp_find_entry+0x2d4>)
 8013e82:	4613      	mov	r3, r2
 8013e84:	005b      	lsls	r3, r3, #1
 8013e86:	4413      	add	r3, r2
 8013e88:	00db      	lsls	r3, r3, #3
 8013e8a:	440b      	add	r3, r1
 8013e8c:	3312      	adds	r3, #18
 8013e8e:	881b      	ldrh	r3, [r3, #0]
 8013e90:	8bba      	ldrh	r2, [r7, #28]
 8013e92:	429a      	cmp	r2, r3
 8013e94:	d845      	bhi.n	8013f22 <etharp_find_entry+0x18a>
            old_queue = i;
 8013e96:	8c3b      	ldrh	r3, [r7, #32]
 8013e98:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013e9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e9e:	4973      	ldr	r1, [pc, #460]	; (801406c <etharp_find_entry+0x2d4>)
 8013ea0:	4613      	mov	r3, r2
 8013ea2:	005b      	lsls	r3, r3, #1
 8013ea4:	4413      	add	r3, r2
 8013ea6:	00db      	lsls	r3, r3, #3
 8013ea8:	440b      	add	r3, r1
 8013eaa:	3312      	adds	r3, #18
 8013eac:	881b      	ldrh	r3, [r3, #0]
 8013eae:	83bb      	strh	r3, [r7, #28]
 8013eb0:	e037      	b.n	8013f22 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013eb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013eb6:	496d      	ldr	r1, [pc, #436]	; (801406c <etharp_find_entry+0x2d4>)
 8013eb8:	4613      	mov	r3, r2
 8013eba:	005b      	lsls	r3, r3, #1
 8013ebc:	4413      	add	r3, r2
 8013ebe:	00db      	lsls	r3, r3, #3
 8013ec0:	440b      	add	r3, r1
 8013ec2:	3312      	adds	r3, #18
 8013ec4:	881b      	ldrh	r3, [r3, #0]
 8013ec6:	8b7a      	ldrh	r2, [r7, #26]
 8013ec8:	429a      	cmp	r2, r3
 8013eca:	d82a      	bhi.n	8013f22 <etharp_find_entry+0x18a>
            old_pending = i;
 8013ecc:	8c3b      	ldrh	r3, [r7, #32]
 8013ece:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013ed0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ed4:	4965      	ldr	r1, [pc, #404]	; (801406c <etharp_find_entry+0x2d4>)
 8013ed6:	4613      	mov	r3, r2
 8013ed8:	005b      	lsls	r3, r3, #1
 8013eda:	4413      	add	r3, r2
 8013edc:	00db      	lsls	r3, r3, #3
 8013ede:	440b      	add	r3, r1
 8013ee0:	3312      	adds	r3, #18
 8013ee2:	881b      	ldrh	r3, [r3, #0]
 8013ee4:	837b      	strh	r3, [r7, #26]
 8013ee6:	e01c      	b.n	8013f22 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013ee8:	7dfb      	ldrb	r3, [r7, #23]
 8013eea:	2b01      	cmp	r3, #1
 8013eec:	d919      	bls.n	8013f22 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013eee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ef2:	495e      	ldr	r1, [pc, #376]	; (801406c <etharp_find_entry+0x2d4>)
 8013ef4:	4613      	mov	r3, r2
 8013ef6:	005b      	lsls	r3, r3, #1
 8013ef8:	4413      	add	r3, r2
 8013efa:	00db      	lsls	r3, r3, #3
 8013efc:	440b      	add	r3, r1
 8013efe:	3312      	adds	r3, #18
 8013f00:	881b      	ldrh	r3, [r3, #0]
 8013f02:	8b3a      	ldrh	r2, [r7, #24]
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d80c      	bhi.n	8013f22 <etharp_find_entry+0x18a>
            old_stable = i;
 8013f08:	8c3b      	ldrh	r3, [r7, #32]
 8013f0a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013f0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f10:	4956      	ldr	r1, [pc, #344]	; (801406c <etharp_find_entry+0x2d4>)
 8013f12:	4613      	mov	r3, r2
 8013f14:	005b      	lsls	r3, r3, #1
 8013f16:	4413      	add	r3, r2
 8013f18:	00db      	lsls	r3, r3, #3
 8013f1a:	440b      	add	r3, r1
 8013f1c:	3312      	adds	r3, #18
 8013f1e:	881b      	ldrh	r3, [r3, #0]
 8013f20:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013f22:	8c3b      	ldrh	r3, [r7, #32]
 8013f24:	3301      	adds	r3, #1
 8013f26:	b29b      	uxth	r3, r3
 8013f28:	843b      	strh	r3, [r7, #32]
 8013f2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013f2e:	2b09      	cmp	r3, #9
 8013f30:	f77f af4c 	ble.w	8013dcc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013f34:	7afb      	ldrb	r3, [r7, #11]
 8013f36:	f003 0302 	and.w	r3, r3, #2
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d108      	bne.n	8013f50 <etharp_find_entry+0x1b8>
 8013f3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013f42:	2b0a      	cmp	r3, #10
 8013f44:	d107      	bne.n	8013f56 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013f46:	7afb      	ldrb	r3, [r7, #11]
 8013f48:	f003 0301 	and.w	r3, r3, #1
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d102      	bne.n	8013f56 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013f50:	f04f 33ff 	mov.w	r3, #4294967295
 8013f54:	e085      	b.n	8014062 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013f56:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013f5a:	2b09      	cmp	r3, #9
 8013f5c:	dc02      	bgt.n	8013f64 <etharp_find_entry+0x1cc>
    i = empty;
 8013f5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f60:	843b      	strh	r3, [r7, #32]
 8013f62:	e039      	b.n	8013fd8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013f64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013f68:	2b09      	cmp	r3, #9
 8013f6a:	dc14      	bgt.n	8013f96 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013f6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013f6e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013f70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f74:	493d      	ldr	r1, [pc, #244]	; (801406c <etharp_find_entry+0x2d4>)
 8013f76:	4613      	mov	r3, r2
 8013f78:	005b      	lsls	r3, r3, #1
 8013f7a:	4413      	add	r3, r2
 8013f7c:	00db      	lsls	r3, r3, #3
 8013f7e:	440b      	add	r3, r1
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d018      	beq.n	8013fb8 <etharp_find_entry+0x220>
 8013f86:	4b3a      	ldr	r3, [pc, #232]	; (8014070 <etharp_find_entry+0x2d8>)
 8013f88:	f240 126d 	movw	r2, #365	; 0x16d
 8013f8c:	493b      	ldr	r1, [pc, #236]	; (801407c <etharp_find_entry+0x2e4>)
 8013f8e:	483a      	ldr	r0, [pc, #232]	; (8014078 <etharp_find_entry+0x2e0>)
 8013f90:	f002 ff48 	bl	8016e24 <iprintf>
 8013f94:	e010      	b.n	8013fb8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013f96:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013f9a:	2b09      	cmp	r3, #9
 8013f9c:	dc02      	bgt.n	8013fa4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013f9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013fa0:	843b      	strh	r3, [r7, #32]
 8013fa2:	e009      	b.n	8013fb8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013fa4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013fa8:	2b09      	cmp	r3, #9
 8013faa:	dc02      	bgt.n	8013fb2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013fac:	8bfb      	ldrh	r3, [r7, #30]
 8013fae:	843b      	strh	r3, [r7, #32]
 8013fb0:	e002      	b.n	8013fb8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8013fb6:	e054      	b.n	8014062 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013fb8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013fbc:	2b09      	cmp	r3, #9
 8013fbe:	dd06      	ble.n	8013fce <etharp_find_entry+0x236>
 8013fc0:	4b2b      	ldr	r3, [pc, #172]	; (8014070 <etharp_find_entry+0x2d8>)
 8013fc2:	f240 127f 	movw	r2, #383	; 0x17f
 8013fc6:	492e      	ldr	r1, [pc, #184]	; (8014080 <etharp_find_entry+0x2e8>)
 8013fc8:	482b      	ldr	r0, [pc, #172]	; (8014078 <etharp_find_entry+0x2e0>)
 8013fca:	f002 ff2b 	bl	8016e24 <iprintf>
    etharp_free_entry(i);
 8013fce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f7ff fe06 	bl	8013be4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013fd8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013fdc:	2b09      	cmp	r3, #9
 8013fde:	dd06      	ble.n	8013fee <etharp_find_entry+0x256>
 8013fe0:	4b23      	ldr	r3, [pc, #140]	; (8014070 <etharp_find_entry+0x2d8>)
 8013fe2:	f240 1283 	movw	r2, #387	; 0x183
 8013fe6:	4926      	ldr	r1, [pc, #152]	; (8014080 <etharp_find_entry+0x2e8>)
 8013fe8:	4823      	ldr	r0, [pc, #140]	; (8014078 <etharp_find_entry+0x2e0>)
 8013fea:	f002 ff1b 	bl	8016e24 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013fee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ff2:	491e      	ldr	r1, [pc, #120]	; (801406c <etharp_find_entry+0x2d4>)
 8013ff4:	4613      	mov	r3, r2
 8013ff6:	005b      	lsls	r3, r3, #1
 8013ff8:	4413      	add	r3, r2
 8013ffa:	00db      	lsls	r3, r3, #3
 8013ffc:	440b      	add	r3, r1
 8013ffe:	3314      	adds	r3, #20
 8014000:	781b      	ldrb	r3, [r3, #0]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d006      	beq.n	8014014 <etharp_find_entry+0x27c>
 8014006:	4b1a      	ldr	r3, [pc, #104]	; (8014070 <etharp_find_entry+0x2d8>)
 8014008:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801400c:	491d      	ldr	r1, [pc, #116]	; (8014084 <etharp_find_entry+0x2ec>)
 801400e:	481a      	ldr	r0, [pc, #104]	; (8014078 <etharp_find_entry+0x2e0>)
 8014010:	f002 ff08 	bl	8016e24 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d00b      	beq.n	8014032 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801401a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	6819      	ldr	r1, [r3, #0]
 8014022:	4812      	ldr	r0, [pc, #72]	; (801406c <etharp_find_entry+0x2d4>)
 8014024:	4613      	mov	r3, r2
 8014026:	005b      	lsls	r3, r3, #1
 8014028:	4413      	add	r3, r2
 801402a:	00db      	lsls	r3, r3, #3
 801402c:	4403      	add	r3, r0
 801402e:	3304      	adds	r3, #4
 8014030:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014032:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014036:	490d      	ldr	r1, [pc, #52]	; (801406c <etharp_find_entry+0x2d4>)
 8014038:	4613      	mov	r3, r2
 801403a:	005b      	lsls	r3, r3, #1
 801403c:	4413      	add	r3, r2
 801403e:	00db      	lsls	r3, r3, #3
 8014040:	440b      	add	r3, r1
 8014042:	3312      	adds	r3, #18
 8014044:	2200      	movs	r2, #0
 8014046:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014048:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801404c:	4907      	ldr	r1, [pc, #28]	; (801406c <etharp_find_entry+0x2d4>)
 801404e:	4613      	mov	r3, r2
 8014050:	005b      	lsls	r3, r3, #1
 8014052:	4413      	add	r3, r2
 8014054:	00db      	lsls	r3, r3, #3
 8014056:	440b      	add	r3, r1
 8014058:	3308      	adds	r3, #8
 801405a:	687a      	ldr	r2, [r7, #4]
 801405c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801405e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014062:	4618      	mov	r0, r3
 8014064:	3728      	adds	r7, #40	; 0x28
 8014066:	46bd      	mov	sp, r7
 8014068:	bd80      	pop	{r7, pc}
 801406a:	bf00      	nop
 801406c:	20004284 	.word	0x20004284
 8014070:	0801a3d8 	.word	0x0801a3d8
 8014074:	0801a410 	.word	0x0801a410
 8014078:	0801a450 	.word	0x0801a450
 801407c:	0801a478 	.word	0x0801a478
 8014080:	0801a490 	.word	0x0801a490
 8014084:	0801a4a4 	.word	0x0801a4a4

08014088 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014088:	b580      	push	{r7, lr}
 801408a:	b088      	sub	sp, #32
 801408c:	af02      	add	r7, sp, #8
 801408e:	60f8      	str	r0, [r7, #12]
 8014090:	60b9      	str	r1, [r7, #8]
 8014092:	607a      	str	r2, [r7, #4]
 8014094:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801409c:	2b06      	cmp	r3, #6
 801409e:	d006      	beq.n	80140ae <etharp_update_arp_entry+0x26>
 80140a0:	4b48      	ldr	r3, [pc, #288]	; (80141c4 <etharp_update_arp_entry+0x13c>)
 80140a2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80140a6:	4948      	ldr	r1, [pc, #288]	; (80141c8 <etharp_update_arp_entry+0x140>)
 80140a8:	4848      	ldr	r0, [pc, #288]	; (80141cc <etharp_update_arp_entry+0x144>)
 80140aa:	f002 febb 	bl	8016e24 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d012      	beq.n	80140da <etharp_update_arp_entry+0x52>
 80140b4:	68bb      	ldr	r3, [r7, #8]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d00e      	beq.n	80140da <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	68f9      	ldr	r1, [r7, #12]
 80140c2:	4618      	mov	r0, r3
 80140c4:	f001 f8fe 	bl	80152c4 <ip4_addr_isbroadcast_u32>
 80140c8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d105      	bne.n	80140da <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80140ce:	68bb      	ldr	r3, [r7, #8]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80140d6:	2be0      	cmp	r3, #224	; 0xe0
 80140d8:	d102      	bne.n	80140e0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80140da:	f06f 030f 	mvn.w	r3, #15
 80140de:	e06c      	b.n	80141ba <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80140e0:	78fb      	ldrb	r3, [r7, #3]
 80140e2:	68fa      	ldr	r2, [r7, #12]
 80140e4:	4619      	mov	r1, r3
 80140e6:	68b8      	ldr	r0, [r7, #8]
 80140e8:	f7ff fe56 	bl	8013d98 <etharp_find_entry>
 80140ec:	4603      	mov	r3, r0
 80140ee:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80140f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	da02      	bge.n	80140fe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80140f8:	8afb      	ldrh	r3, [r7, #22]
 80140fa:	b25b      	sxtb	r3, r3
 80140fc:	e05d      	b.n	80141ba <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80140fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014102:	4933      	ldr	r1, [pc, #204]	; (80141d0 <etharp_update_arp_entry+0x148>)
 8014104:	4613      	mov	r3, r2
 8014106:	005b      	lsls	r3, r3, #1
 8014108:	4413      	add	r3, r2
 801410a:	00db      	lsls	r3, r3, #3
 801410c:	440b      	add	r3, r1
 801410e:	3314      	adds	r3, #20
 8014110:	2202      	movs	r2, #2
 8014112:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014114:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014118:	492d      	ldr	r1, [pc, #180]	; (80141d0 <etharp_update_arp_entry+0x148>)
 801411a:	4613      	mov	r3, r2
 801411c:	005b      	lsls	r3, r3, #1
 801411e:	4413      	add	r3, r2
 8014120:	00db      	lsls	r3, r3, #3
 8014122:	440b      	add	r3, r1
 8014124:	3308      	adds	r3, #8
 8014126:	68fa      	ldr	r2, [r7, #12]
 8014128:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801412a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801412e:	4613      	mov	r3, r2
 8014130:	005b      	lsls	r3, r3, #1
 8014132:	4413      	add	r3, r2
 8014134:	00db      	lsls	r3, r3, #3
 8014136:	3308      	adds	r3, #8
 8014138:	4a25      	ldr	r2, [pc, #148]	; (80141d0 <etharp_update_arp_entry+0x148>)
 801413a:	4413      	add	r3, r2
 801413c:	3304      	adds	r3, #4
 801413e:	2206      	movs	r2, #6
 8014140:	6879      	ldr	r1, [r7, #4]
 8014142:	4618      	mov	r0, r3
 8014144:	f002 fe58 	bl	8016df8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014148:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801414c:	4920      	ldr	r1, [pc, #128]	; (80141d0 <etharp_update_arp_entry+0x148>)
 801414e:	4613      	mov	r3, r2
 8014150:	005b      	lsls	r3, r3, #1
 8014152:	4413      	add	r3, r2
 8014154:	00db      	lsls	r3, r3, #3
 8014156:	440b      	add	r3, r1
 8014158:	3312      	adds	r3, #18
 801415a:	2200      	movs	r2, #0
 801415c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801415e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014162:	491b      	ldr	r1, [pc, #108]	; (80141d0 <etharp_update_arp_entry+0x148>)
 8014164:	4613      	mov	r3, r2
 8014166:	005b      	lsls	r3, r3, #1
 8014168:	4413      	add	r3, r2
 801416a:	00db      	lsls	r3, r3, #3
 801416c:	440b      	add	r3, r1
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d021      	beq.n	80141b8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014174:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014178:	4915      	ldr	r1, [pc, #84]	; (80141d0 <etharp_update_arp_entry+0x148>)
 801417a:	4613      	mov	r3, r2
 801417c:	005b      	lsls	r3, r3, #1
 801417e:	4413      	add	r3, r2
 8014180:	00db      	lsls	r3, r3, #3
 8014182:	440b      	add	r3, r1
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014188:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801418c:	4910      	ldr	r1, [pc, #64]	; (80141d0 <etharp_update_arp_entry+0x148>)
 801418e:	4613      	mov	r3, r2
 8014190:	005b      	lsls	r3, r3, #1
 8014192:	4413      	add	r3, r2
 8014194:	00db      	lsls	r3, r3, #3
 8014196:	440b      	add	r3, r1
 8014198:	2200      	movs	r2, #0
 801419a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80141a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80141a6:	9300      	str	r3, [sp, #0]
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	6939      	ldr	r1, [r7, #16]
 80141ac:	68f8      	ldr	r0, [r7, #12]
 80141ae:	f001 ff91 	bl	80160d4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80141b2:	6938      	ldr	r0, [r7, #16]
 80141b4:	f7f9 fdf0 	bl	800dd98 <pbuf_free>
  }
  return ERR_OK;
 80141b8:	2300      	movs	r3, #0
}
 80141ba:	4618      	mov	r0, r3
 80141bc:	3718      	adds	r7, #24
 80141be:	46bd      	mov	sp, r7
 80141c0:	bd80      	pop	{r7, pc}
 80141c2:	bf00      	nop
 80141c4:	0801a3d8 	.word	0x0801a3d8
 80141c8:	0801a4d0 	.word	0x0801a4d0
 80141cc:	0801a450 	.word	0x0801a450
 80141d0:	20004284 	.word	0x20004284

080141d4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b084      	sub	sp, #16
 80141d8:	af00      	add	r7, sp, #0
 80141da:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80141dc:	2300      	movs	r3, #0
 80141de:	60fb      	str	r3, [r7, #12]
 80141e0:	e01e      	b.n	8014220 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80141e2:	4913      	ldr	r1, [pc, #76]	; (8014230 <etharp_cleanup_netif+0x5c>)
 80141e4:	68fa      	ldr	r2, [r7, #12]
 80141e6:	4613      	mov	r3, r2
 80141e8:	005b      	lsls	r3, r3, #1
 80141ea:	4413      	add	r3, r2
 80141ec:	00db      	lsls	r3, r3, #3
 80141ee:	440b      	add	r3, r1
 80141f0:	3314      	adds	r3, #20
 80141f2:	781b      	ldrb	r3, [r3, #0]
 80141f4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80141f6:	7afb      	ldrb	r3, [r7, #11]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d00e      	beq.n	801421a <etharp_cleanup_netif+0x46>
 80141fc:	490c      	ldr	r1, [pc, #48]	; (8014230 <etharp_cleanup_netif+0x5c>)
 80141fe:	68fa      	ldr	r2, [r7, #12]
 8014200:	4613      	mov	r3, r2
 8014202:	005b      	lsls	r3, r3, #1
 8014204:	4413      	add	r3, r2
 8014206:	00db      	lsls	r3, r3, #3
 8014208:	440b      	add	r3, r1
 801420a:	3308      	adds	r3, #8
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	687a      	ldr	r2, [r7, #4]
 8014210:	429a      	cmp	r2, r3
 8014212:	d102      	bne.n	801421a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014214:	68f8      	ldr	r0, [r7, #12]
 8014216:	f7ff fce5 	bl	8013be4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	3301      	adds	r3, #1
 801421e:	60fb      	str	r3, [r7, #12]
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	2b09      	cmp	r3, #9
 8014224:	dddd      	ble.n	80141e2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8014226:	bf00      	nop
 8014228:	bf00      	nop
 801422a:	3710      	adds	r7, #16
 801422c:	46bd      	mov	sp, r7
 801422e:	bd80      	pop	{r7, pc}
 8014230:	20004284 	.word	0x20004284

08014234 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014234:	b5b0      	push	{r4, r5, r7, lr}
 8014236:	b08a      	sub	sp, #40	; 0x28
 8014238:	af04      	add	r7, sp, #16
 801423a:	6078      	str	r0, [r7, #4]
 801423c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d107      	bne.n	8014254 <etharp_input+0x20>
 8014244:	4b3d      	ldr	r3, [pc, #244]	; (801433c <etharp_input+0x108>)
 8014246:	f240 228a 	movw	r2, #650	; 0x28a
 801424a:	493d      	ldr	r1, [pc, #244]	; (8014340 <etharp_input+0x10c>)
 801424c:	483d      	ldr	r0, [pc, #244]	; (8014344 <etharp_input+0x110>)
 801424e:	f002 fde9 	bl	8016e24 <iprintf>
 8014252:	e06f      	b.n	8014334 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	685b      	ldr	r3, [r3, #4]
 8014258:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801425a:	693b      	ldr	r3, [r7, #16]
 801425c:	881b      	ldrh	r3, [r3, #0]
 801425e:	b29b      	uxth	r3, r3
 8014260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014264:	d10c      	bne.n	8014280 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014266:	693b      	ldr	r3, [r7, #16]
 8014268:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801426a:	2b06      	cmp	r3, #6
 801426c:	d108      	bne.n	8014280 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801426e:	693b      	ldr	r3, [r7, #16]
 8014270:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014272:	2b04      	cmp	r3, #4
 8014274:	d104      	bne.n	8014280 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014276:	693b      	ldr	r3, [r7, #16]
 8014278:	885b      	ldrh	r3, [r3, #2]
 801427a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801427c:	2b08      	cmp	r3, #8
 801427e:	d003      	beq.n	8014288 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014280:	6878      	ldr	r0, [r7, #4]
 8014282:	f7f9 fd89 	bl	800dd98 <pbuf_free>
    return;
 8014286:	e055      	b.n	8014334 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014288:	693b      	ldr	r3, [r7, #16]
 801428a:	330e      	adds	r3, #14
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014290:	693b      	ldr	r3, [r7, #16]
 8014292:	3318      	adds	r3, #24
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014298:	683b      	ldr	r3, [r7, #0]
 801429a:	3304      	adds	r3, #4
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d102      	bne.n	80142a8 <etharp_input+0x74>
    for_us = 0;
 80142a2:	2300      	movs	r3, #0
 80142a4:	75fb      	strb	r3, [r7, #23]
 80142a6:	e009      	b.n	80142bc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80142a8:	68ba      	ldr	r2, [r7, #8]
 80142aa:	683b      	ldr	r3, [r7, #0]
 80142ac:	3304      	adds	r3, #4
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	429a      	cmp	r2, r3
 80142b2:	bf0c      	ite	eq
 80142b4:	2301      	moveq	r3, #1
 80142b6:	2300      	movne	r3, #0
 80142b8:	b2db      	uxtb	r3, r3
 80142ba:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80142bc:	693b      	ldr	r3, [r7, #16]
 80142be:	f103 0208 	add.w	r2, r3, #8
 80142c2:	7dfb      	ldrb	r3, [r7, #23]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d001      	beq.n	80142cc <etharp_input+0x98>
 80142c8:	2301      	movs	r3, #1
 80142ca:	e000      	b.n	80142ce <etharp_input+0x9a>
 80142cc:	2302      	movs	r3, #2
 80142ce:	f107 010c 	add.w	r1, r7, #12
 80142d2:	6838      	ldr	r0, [r7, #0]
 80142d4:	f7ff fed8 	bl	8014088 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80142d8:	693b      	ldr	r3, [r7, #16]
 80142da:	88db      	ldrh	r3, [r3, #6]
 80142dc:	b29b      	uxth	r3, r3
 80142de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80142e2:	d003      	beq.n	80142ec <etharp_input+0xb8>
 80142e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80142e8:	d01e      	beq.n	8014328 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80142ea:	e020      	b.n	801432e <etharp_input+0xfa>
      if (for_us) {
 80142ec:	7dfb      	ldrb	r3, [r7, #23]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d01c      	beq.n	801432c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80142f2:	683b      	ldr	r3, [r7, #0]
 80142f4:	f103 0022 	add.w	r0, r3, #34	; 0x22
 80142f8:	693b      	ldr	r3, [r7, #16]
 80142fa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80142fe:	683b      	ldr	r3, [r7, #0]
 8014300:	f103 0522 	add.w	r5, r3, #34	; 0x22
 8014304:	683b      	ldr	r3, [r7, #0]
 8014306:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014308:	693a      	ldr	r2, [r7, #16]
 801430a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801430c:	2102      	movs	r1, #2
 801430e:	9103      	str	r1, [sp, #12]
 8014310:	f107 010c 	add.w	r1, r7, #12
 8014314:	9102      	str	r1, [sp, #8]
 8014316:	9201      	str	r2, [sp, #4]
 8014318:	9300      	str	r3, [sp, #0]
 801431a:	462b      	mov	r3, r5
 801431c:	4622      	mov	r2, r4
 801431e:	4601      	mov	r1, r0
 8014320:	6838      	ldr	r0, [r7, #0]
 8014322:	f000 faeb 	bl	80148fc <etharp_raw>
      break;
 8014326:	e001      	b.n	801432c <etharp_input+0xf8>
      break;
 8014328:	bf00      	nop
 801432a:	e000      	b.n	801432e <etharp_input+0xfa>
      break;
 801432c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801432e:	6878      	ldr	r0, [r7, #4]
 8014330:	f7f9 fd32 	bl	800dd98 <pbuf_free>
}
 8014334:	3718      	adds	r7, #24
 8014336:	46bd      	mov	sp, r7
 8014338:	bdb0      	pop	{r4, r5, r7, pc}
 801433a:	bf00      	nop
 801433c:	0801a3d8 	.word	0x0801a3d8
 8014340:	0801a528 	.word	0x0801a528
 8014344:	0801a450 	.word	0x0801a450

08014348 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014348:	b580      	push	{r7, lr}
 801434a:	b086      	sub	sp, #24
 801434c:	af02      	add	r7, sp, #8
 801434e:	60f8      	str	r0, [r7, #12]
 8014350:	60b9      	str	r1, [r7, #8]
 8014352:	4613      	mov	r3, r2
 8014354:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014356:	79fa      	ldrb	r2, [r7, #7]
 8014358:	4944      	ldr	r1, [pc, #272]	; (801446c <etharp_output_to_arp_index+0x124>)
 801435a:	4613      	mov	r3, r2
 801435c:	005b      	lsls	r3, r3, #1
 801435e:	4413      	add	r3, r2
 8014360:	00db      	lsls	r3, r3, #3
 8014362:	440b      	add	r3, r1
 8014364:	3314      	adds	r3, #20
 8014366:	781b      	ldrb	r3, [r3, #0]
 8014368:	2b01      	cmp	r3, #1
 801436a:	d806      	bhi.n	801437a <etharp_output_to_arp_index+0x32>
 801436c:	4b40      	ldr	r3, [pc, #256]	; (8014470 <etharp_output_to_arp_index+0x128>)
 801436e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014372:	4940      	ldr	r1, [pc, #256]	; (8014474 <etharp_output_to_arp_index+0x12c>)
 8014374:	4840      	ldr	r0, [pc, #256]	; (8014478 <etharp_output_to_arp_index+0x130>)
 8014376:	f002 fd55 	bl	8016e24 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801437a:	79fa      	ldrb	r2, [r7, #7]
 801437c:	493b      	ldr	r1, [pc, #236]	; (801446c <etharp_output_to_arp_index+0x124>)
 801437e:	4613      	mov	r3, r2
 8014380:	005b      	lsls	r3, r3, #1
 8014382:	4413      	add	r3, r2
 8014384:	00db      	lsls	r3, r3, #3
 8014386:	440b      	add	r3, r1
 8014388:	3314      	adds	r3, #20
 801438a:	781b      	ldrb	r3, [r3, #0]
 801438c:	2b02      	cmp	r3, #2
 801438e:	d153      	bne.n	8014438 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014390:	79fa      	ldrb	r2, [r7, #7]
 8014392:	4936      	ldr	r1, [pc, #216]	; (801446c <etharp_output_to_arp_index+0x124>)
 8014394:	4613      	mov	r3, r2
 8014396:	005b      	lsls	r3, r3, #1
 8014398:	4413      	add	r3, r2
 801439a:	00db      	lsls	r3, r3, #3
 801439c:	440b      	add	r3, r1
 801439e:	3312      	adds	r3, #18
 80143a0:	881b      	ldrh	r3, [r3, #0]
 80143a2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80143a6:	d919      	bls.n	80143dc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80143a8:	79fa      	ldrb	r2, [r7, #7]
 80143aa:	4613      	mov	r3, r2
 80143ac:	005b      	lsls	r3, r3, #1
 80143ae:	4413      	add	r3, r2
 80143b0:	00db      	lsls	r3, r3, #3
 80143b2:	4a2e      	ldr	r2, [pc, #184]	; (801446c <etharp_output_to_arp_index+0x124>)
 80143b4:	4413      	add	r3, r2
 80143b6:	3304      	adds	r3, #4
 80143b8:	4619      	mov	r1, r3
 80143ba:	68f8      	ldr	r0, [r7, #12]
 80143bc:	f000 fb4c 	bl	8014a58 <etharp_request>
 80143c0:	4603      	mov	r3, r0
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d138      	bne.n	8014438 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80143c6:	79fa      	ldrb	r2, [r7, #7]
 80143c8:	4928      	ldr	r1, [pc, #160]	; (801446c <etharp_output_to_arp_index+0x124>)
 80143ca:	4613      	mov	r3, r2
 80143cc:	005b      	lsls	r3, r3, #1
 80143ce:	4413      	add	r3, r2
 80143d0:	00db      	lsls	r3, r3, #3
 80143d2:	440b      	add	r3, r1
 80143d4:	3314      	adds	r3, #20
 80143d6:	2203      	movs	r2, #3
 80143d8:	701a      	strb	r2, [r3, #0]
 80143da:	e02d      	b.n	8014438 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80143dc:	79fa      	ldrb	r2, [r7, #7]
 80143de:	4923      	ldr	r1, [pc, #140]	; (801446c <etharp_output_to_arp_index+0x124>)
 80143e0:	4613      	mov	r3, r2
 80143e2:	005b      	lsls	r3, r3, #1
 80143e4:	4413      	add	r3, r2
 80143e6:	00db      	lsls	r3, r3, #3
 80143e8:	440b      	add	r3, r1
 80143ea:	3312      	adds	r3, #18
 80143ec:	881b      	ldrh	r3, [r3, #0]
 80143ee:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80143f2:	d321      	bcc.n	8014438 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80143f4:	79fa      	ldrb	r2, [r7, #7]
 80143f6:	4613      	mov	r3, r2
 80143f8:	005b      	lsls	r3, r3, #1
 80143fa:	4413      	add	r3, r2
 80143fc:	00db      	lsls	r3, r3, #3
 80143fe:	4a1b      	ldr	r2, [pc, #108]	; (801446c <etharp_output_to_arp_index+0x124>)
 8014400:	4413      	add	r3, r2
 8014402:	1d19      	adds	r1, r3, #4
 8014404:	79fa      	ldrb	r2, [r7, #7]
 8014406:	4613      	mov	r3, r2
 8014408:	005b      	lsls	r3, r3, #1
 801440a:	4413      	add	r3, r2
 801440c:	00db      	lsls	r3, r3, #3
 801440e:	3308      	adds	r3, #8
 8014410:	4a16      	ldr	r2, [pc, #88]	; (801446c <etharp_output_to_arp_index+0x124>)
 8014412:	4413      	add	r3, r2
 8014414:	3304      	adds	r3, #4
 8014416:	461a      	mov	r2, r3
 8014418:	68f8      	ldr	r0, [r7, #12]
 801441a:	f000 fafb 	bl	8014a14 <etharp_request_dst>
 801441e:	4603      	mov	r3, r0
 8014420:	2b00      	cmp	r3, #0
 8014422:	d109      	bne.n	8014438 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014424:	79fa      	ldrb	r2, [r7, #7]
 8014426:	4911      	ldr	r1, [pc, #68]	; (801446c <etharp_output_to_arp_index+0x124>)
 8014428:	4613      	mov	r3, r2
 801442a:	005b      	lsls	r3, r3, #1
 801442c:	4413      	add	r3, r2
 801442e:	00db      	lsls	r3, r3, #3
 8014430:	440b      	add	r3, r1
 8014432:	3314      	adds	r3, #20
 8014434:	2203      	movs	r2, #3
 8014436:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	f103 0122 	add.w	r1, r3, #34	; 0x22
 801443e:	79fa      	ldrb	r2, [r7, #7]
 8014440:	4613      	mov	r3, r2
 8014442:	005b      	lsls	r3, r3, #1
 8014444:	4413      	add	r3, r2
 8014446:	00db      	lsls	r3, r3, #3
 8014448:	3308      	adds	r3, #8
 801444a:	4a08      	ldr	r2, [pc, #32]	; (801446c <etharp_output_to_arp_index+0x124>)
 801444c:	4413      	add	r3, r2
 801444e:	3304      	adds	r3, #4
 8014450:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014454:	9200      	str	r2, [sp, #0]
 8014456:	460a      	mov	r2, r1
 8014458:	68b9      	ldr	r1, [r7, #8]
 801445a:	68f8      	ldr	r0, [r7, #12]
 801445c:	f001 fe3a 	bl	80160d4 <ethernet_output>
 8014460:	4603      	mov	r3, r0
}
 8014462:	4618      	mov	r0, r3
 8014464:	3710      	adds	r7, #16
 8014466:	46bd      	mov	sp, r7
 8014468:	bd80      	pop	{r7, pc}
 801446a:	bf00      	nop
 801446c:	20004284 	.word	0x20004284
 8014470:	0801a3d8 	.word	0x0801a3d8
 8014474:	0801a548 	.word	0x0801a548
 8014478:	0801a450 	.word	0x0801a450

0801447c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b08a      	sub	sp, #40	; 0x28
 8014480:	af02      	add	r7, sp, #8
 8014482:	60f8      	str	r0, [r7, #12]
 8014484:	60b9      	str	r1, [r7, #8]
 8014486:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d106      	bne.n	80144a0 <etharp_output+0x24>
 8014492:	4b73      	ldr	r3, [pc, #460]	; (8014660 <etharp_output+0x1e4>)
 8014494:	f240 321e 	movw	r2, #798	; 0x31e
 8014498:	4972      	ldr	r1, [pc, #456]	; (8014664 <etharp_output+0x1e8>)
 801449a:	4873      	ldr	r0, [pc, #460]	; (8014668 <etharp_output+0x1ec>)
 801449c:	f002 fcc2 	bl	8016e24 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80144a0:	68bb      	ldr	r3, [r7, #8]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d106      	bne.n	80144b4 <etharp_output+0x38>
 80144a6:	4b6e      	ldr	r3, [pc, #440]	; (8014660 <etharp_output+0x1e4>)
 80144a8:	f240 321f 	movw	r2, #799	; 0x31f
 80144ac:	496f      	ldr	r1, [pc, #444]	; (801466c <etharp_output+0x1f0>)
 80144ae:	486e      	ldr	r0, [pc, #440]	; (8014668 <etharp_output+0x1ec>)
 80144b0:	f002 fcb8 	bl	8016e24 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d106      	bne.n	80144c8 <etharp_output+0x4c>
 80144ba:	4b69      	ldr	r3, [pc, #420]	; (8014660 <etharp_output+0x1e4>)
 80144bc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80144c0:	496b      	ldr	r1, [pc, #428]	; (8014670 <etharp_output+0x1f4>)
 80144c2:	4869      	ldr	r0, [pc, #420]	; (8014668 <etharp_output+0x1ec>)
 80144c4:	f002 fcae 	bl	8016e24 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	68f9      	ldr	r1, [r7, #12]
 80144ce:	4618      	mov	r0, r3
 80144d0:	f000 fef8 	bl	80152c4 <ip4_addr_isbroadcast_u32>
 80144d4:	4603      	mov	r3, r0
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d002      	beq.n	80144e0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80144da:	4b66      	ldr	r3, [pc, #408]	; (8014674 <etharp_output+0x1f8>)
 80144dc:	61fb      	str	r3, [r7, #28]
 80144de:	e0af      	b.n	8014640 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80144e8:	2be0      	cmp	r3, #224	; 0xe0
 80144ea:	d118      	bne.n	801451e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80144ec:	2301      	movs	r3, #1
 80144ee:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80144f0:	2300      	movs	r3, #0
 80144f2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80144f4:	235e      	movs	r3, #94	; 0x5e
 80144f6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	3301      	adds	r3, #1
 80144fc:	781b      	ldrb	r3, [r3, #0]
 80144fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014502:	b2db      	uxtb	r3, r3
 8014504:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	3302      	adds	r3, #2
 801450a:	781b      	ldrb	r3, [r3, #0]
 801450c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	3303      	adds	r3, #3
 8014512:	781b      	ldrb	r3, [r3, #0]
 8014514:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014516:	f107 0310 	add.w	r3, r7, #16
 801451a:	61fb      	str	r3, [r7, #28]
 801451c:	e090      	b.n	8014640 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	681a      	ldr	r2, [r3, #0]
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	3304      	adds	r3, #4
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	405a      	eors	r2, r3
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	3308      	adds	r3, #8
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	4013      	ands	r3, r2
 8014532:	2b00      	cmp	r3, #0
 8014534:	d012      	beq.n	801455c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801453c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014540:	4293      	cmp	r3, r2
 8014542:	d00b      	beq.n	801455c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	330c      	adds	r3, #12
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d003      	beq.n	8014556 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	330c      	adds	r3, #12
 8014552:	61bb      	str	r3, [r7, #24]
 8014554:	e002      	b.n	801455c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014556:	f06f 0303 	mvn.w	r3, #3
 801455a:	e07d      	b.n	8014658 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801455c:	4b46      	ldr	r3, [pc, #280]	; (8014678 <etharp_output+0x1fc>)
 801455e:	781b      	ldrb	r3, [r3, #0]
 8014560:	4619      	mov	r1, r3
 8014562:	4a46      	ldr	r2, [pc, #280]	; (801467c <etharp_output+0x200>)
 8014564:	460b      	mov	r3, r1
 8014566:	005b      	lsls	r3, r3, #1
 8014568:	440b      	add	r3, r1
 801456a:	00db      	lsls	r3, r3, #3
 801456c:	4413      	add	r3, r2
 801456e:	3314      	adds	r3, #20
 8014570:	781b      	ldrb	r3, [r3, #0]
 8014572:	2b01      	cmp	r3, #1
 8014574:	d925      	bls.n	80145c2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014576:	4b40      	ldr	r3, [pc, #256]	; (8014678 <etharp_output+0x1fc>)
 8014578:	781b      	ldrb	r3, [r3, #0]
 801457a:	4619      	mov	r1, r3
 801457c:	4a3f      	ldr	r2, [pc, #252]	; (801467c <etharp_output+0x200>)
 801457e:	460b      	mov	r3, r1
 8014580:	005b      	lsls	r3, r3, #1
 8014582:	440b      	add	r3, r1
 8014584:	00db      	lsls	r3, r3, #3
 8014586:	4413      	add	r3, r2
 8014588:	3308      	adds	r3, #8
 801458a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801458c:	68fa      	ldr	r2, [r7, #12]
 801458e:	429a      	cmp	r2, r3
 8014590:	d117      	bne.n	80145c2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014592:	69bb      	ldr	r3, [r7, #24]
 8014594:	681a      	ldr	r2, [r3, #0]
 8014596:	4b38      	ldr	r3, [pc, #224]	; (8014678 <etharp_output+0x1fc>)
 8014598:	781b      	ldrb	r3, [r3, #0]
 801459a:	4618      	mov	r0, r3
 801459c:	4937      	ldr	r1, [pc, #220]	; (801467c <etharp_output+0x200>)
 801459e:	4603      	mov	r3, r0
 80145a0:	005b      	lsls	r3, r3, #1
 80145a2:	4403      	add	r3, r0
 80145a4:	00db      	lsls	r3, r3, #3
 80145a6:	440b      	add	r3, r1
 80145a8:	3304      	adds	r3, #4
 80145aa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80145ac:	429a      	cmp	r2, r3
 80145ae:	d108      	bne.n	80145c2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80145b0:	4b31      	ldr	r3, [pc, #196]	; (8014678 <etharp_output+0x1fc>)
 80145b2:	781b      	ldrb	r3, [r3, #0]
 80145b4:	461a      	mov	r2, r3
 80145b6:	68b9      	ldr	r1, [r7, #8]
 80145b8:	68f8      	ldr	r0, [r7, #12]
 80145ba:	f7ff fec5 	bl	8014348 <etharp_output_to_arp_index>
 80145be:	4603      	mov	r3, r0
 80145c0:	e04a      	b.n	8014658 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80145c2:	2300      	movs	r3, #0
 80145c4:	75fb      	strb	r3, [r7, #23]
 80145c6:	e031      	b.n	801462c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80145c8:	7dfa      	ldrb	r2, [r7, #23]
 80145ca:	492c      	ldr	r1, [pc, #176]	; (801467c <etharp_output+0x200>)
 80145cc:	4613      	mov	r3, r2
 80145ce:	005b      	lsls	r3, r3, #1
 80145d0:	4413      	add	r3, r2
 80145d2:	00db      	lsls	r3, r3, #3
 80145d4:	440b      	add	r3, r1
 80145d6:	3314      	adds	r3, #20
 80145d8:	781b      	ldrb	r3, [r3, #0]
 80145da:	2b01      	cmp	r3, #1
 80145dc:	d923      	bls.n	8014626 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80145de:	7dfa      	ldrb	r2, [r7, #23]
 80145e0:	4926      	ldr	r1, [pc, #152]	; (801467c <etharp_output+0x200>)
 80145e2:	4613      	mov	r3, r2
 80145e4:	005b      	lsls	r3, r3, #1
 80145e6:	4413      	add	r3, r2
 80145e8:	00db      	lsls	r3, r3, #3
 80145ea:	440b      	add	r3, r1
 80145ec:	3308      	adds	r3, #8
 80145ee:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80145f0:	68fa      	ldr	r2, [r7, #12]
 80145f2:	429a      	cmp	r2, r3
 80145f4:	d117      	bne.n	8014626 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80145f6:	69bb      	ldr	r3, [r7, #24]
 80145f8:	6819      	ldr	r1, [r3, #0]
 80145fa:	7dfa      	ldrb	r2, [r7, #23]
 80145fc:	481f      	ldr	r0, [pc, #124]	; (801467c <etharp_output+0x200>)
 80145fe:	4613      	mov	r3, r2
 8014600:	005b      	lsls	r3, r3, #1
 8014602:	4413      	add	r3, r2
 8014604:	00db      	lsls	r3, r3, #3
 8014606:	4403      	add	r3, r0
 8014608:	3304      	adds	r3, #4
 801460a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801460c:	4299      	cmp	r1, r3
 801460e:	d10a      	bne.n	8014626 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014610:	4a19      	ldr	r2, [pc, #100]	; (8014678 <etharp_output+0x1fc>)
 8014612:	7dfb      	ldrb	r3, [r7, #23]
 8014614:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014616:	7dfb      	ldrb	r3, [r7, #23]
 8014618:	461a      	mov	r2, r3
 801461a:	68b9      	ldr	r1, [r7, #8]
 801461c:	68f8      	ldr	r0, [r7, #12]
 801461e:	f7ff fe93 	bl	8014348 <etharp_output_to_arp_index>
 8014622:	4603      	mov	r3, r0
 8014624:	e018      	b.n	8014658 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014626:	7dfb      	ldrb	r3, [r7, #23]
 8014628:	3301      	adds	r3, #1
 801462a:	75fb      	strb	r3, [r7, #23]
 801462c:	7dfb      	ldrb	r3, [r7, #23]
 801462e:	2b09      	cmp	r3, #9
 8014630:	d9ca      	bls.n	80145c8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014632:	68ba      	ldr	r2, [r7, #8]
 8014634:	69b9      	ldr	r1, [r7, #24]
 8014636:	68f8      	ldr	r0, [r7, #12]
 8014638:	f000 f822 	bl	8014680 <etharp_query>
 801463c:	4603      	mov	r3, r0
 801463e:	e00b      	b.n	8014658 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8014646:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801464a:	9300      	str	r3, [sp, #0]
 801464c:	69fb      	ldr	r3, [r7, #28]
 801464e:	68b9      	ldr	r1, [r7, #8]
 8014650:	68f8      	ldr	r0, [r7, #12]
 8014652:	f001 fd3f 	bl	80160d4 <ethernet_output>
 8014656:	4603      	mov	r3, r0
}
 8014658:	4618      	mov	r0, r3
 801465a:	3720      	adds	r7, #32
 801465c:	46bd      	mov	sp, r7
 801465e:	bd80      	pop	{r7, pc}
 8014660:	0801a3d8 	.word	0x0801a3d8
 8014664:	0801a528 	.word	0x0801a528
 8014668:	0801a450 	.word	0x0801a450
 801466c:	0801a578 	.word	0x0801a578
 8014670:	0801a518 	.word	0x0801a518
 8014674:	0801ac10 	.word	0x0801ac10
 8014678:	20004374 	.word	0x20004374
 801467c:	20004284 	.word	0x20004284

08014680 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b08c      	sub	sp, #48	; 0x30
 8014684:	af02      	add	r7, sp, #8
 8014686:	60f8      	str	r0, [r7, #12]
 8014688:	60b9      	str	r1, [r7, #8]
 801468a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	3322      	adds	r3, #34	; 0x22
 8014690:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014692:	23ff      	movs	r3, #255	; 0xff
 8014694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014698:	2300      	movs	r3, #0
 801469a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801469c:	68bb      	ldr	r3, [r7, #8]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	68f9      	ldr	r1, [r7, #12]
 80146a2:	4618      	mov	r0, r3
 80146a4:	f000 fe0e 	bl	80152c4 <ip4_addr_isbroadcast_u32>
 80146a8:	4603      	mov	r3, r0
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d10c      	bne.n	80146c8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80146b6:	2be0      	cmp	r3, #224	; 0xe0
 80146b8:	d006      	beq.n	80146c8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80146ba:	68bb      	ldr	r3, [r7, #8]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d003      	beq.n	80146c8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80146c0:	68bb      	ldr	r3, [r7, #8]
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d102      	bne.n	80146ce <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80146c8:	f06f 030f 	mvn.w	r3, #15
 80146cc:	e101      	b.n	80148d2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80146ce:	68fa      	ldr	r2, [r7, #12]
 80146d0:	2101      	movs	r1, #1
 80146d2:	68b8      	ldr	r0, [r7, #8]
 80146d4:	f7ff fb60 	bl	8013d98 <etharp_find_entry>
 80146d8:	4603      	mov	r3, r0
 80146da:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80146dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	da02      	bge.n	80146ea <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80146e4:	8a7b      	ldrh	r3, [r7, #18]
 80146e6:	b25b      	sxtb	r3, r3
 80146e8:	e0f3      	b.n	80148d2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80146ea:	8a7b      	ldrh	r3, [r7, #18]
 80146ec:	2b7e      	cmp	r3, #126	; 0x7e
 80146ee:	d906      	bls.n	80146fe <etharp_query+0x7e>
 80146f0:	4b7a      	ldr	r3, [pc, #488]	; (80148dc <etharp_query+0x25c>)
 80146f2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80146f6:	497a      	ldr	r1, [pc, #488]	; (80148e0 <etharp_query+0x260>)
 80146f8:	487a      	ldr	r0, [pc, #488]	; (80148e4 <etharp_query+0x264>)
 80146fa:	f002 fb93 	bl	8016e24 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80146fe:	8a7b      	ldrh	r3, [r7, #18]
 8014700:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014702:	7c7a      	ldrb	r2, [r7, #17]
 8014704:	4978      	ldr	r1, [pc, #480]	; (80148e8 <etharp_query+0x268>)
 8014706:	4613      	mov	r3, r2
 8014708:	005b      	lsls	r3, r3, #1
 801470a:	4413      	add	r3, r2
 801470c:	00db      	lsls	r3, r3, #3
 801470e:	440b      	add	r3, r1
 8014710:	3314      	adds	r3, #20
 8014712:	781b      	ldrb	r3, [r3, #0]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d115      	bne.n	8014744 <etharp_query+0xc4>
    is_new_entry = 1;
 8014718:	2301      	movs	r3, #1
 801471a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801471c:	7c7a      	ldrb	r2, [r7, #17]
 801471e:	4972      	ldr	r1, [pc, #456]	; (80148e8 <etharp_query+0x268>)
 8014720:	4613      	mov	r3, r2
 8014722:	005b      	lsls	r3, r3, #1
 8014724:	4413      	add	r3, r2
 8014726:	00db      	lsls	r3, r3, #3
 8014728:	440b      	add	r3, r1
 801472a:	3314      	adds	r3, #20
 801472c:	2201      	movs	r2, #1
 801472e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014730:	7c7a      	ldrb	r2, [r7, #17]
 8014732:	496d      	ldr	r1, [pc, #436]	; (80148e8 <etharp_query+0x268>)
 8014734:	4613      	mov	r3, r2
 8014736:	005b      	lsls	r3, r3, #1
 8014738:	4413      	add	r3, r2
 801473a:	00db      	lsls	r3, r3, #3
 801473c:	440b      	add	r3, r1
 801473e:	3308      	adds	r3, #8
 8014740:	68fa      	ldr	r2, [r7, #12]
 8014742:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014744:	7c7a      	ldrb	r2, [r7, #17]
 8014746:	4968      	ldr	r1, [pc, #416]	; (80148e8 <etharp_query+0x268>)
 8014748:	4613      	mov	r3, r2
 801474a:	005b      	lsls	r3, r3, #1
 801474c:	4413      	add	r3, r2
 801474e:	00db      	lsls	r3, r3, #3
 8014750:	440b      	add	r3, r1
 8014752:	3314      	adds	r3, #20
 8014754:	781b      	ldrb	r3, [r3, #0]
 8014756:	2b01      	cmp	r3, #1
 8014758:	d011      	beq.n	801477e <etharp_query+0xfe>
 801475a:	7c7a      	ldrb	r2, [r7, #17]
 801475c:	4962      	ldr	r1, [pc, #392]	; (80148e8 <etharp_query+0x268>)
 801475e:	4613      	mov	r3, r2
 8014760:	005b      	lsls	r3, r3, #1
 8014762:	4413      	add	r3, r2
 8014764:	00db      	lsls	r3, r3, #3
 8014766:	440b      	add	r3, r1
 8014768:	3314      	adds	r3, #20
 801476a:	781b      	ldrb	r3, [r3, #0]
 801476c:	2b01      	cmp	r3, #1
 801476e:	d806      	bhi.n	801477e <etharp_query+0xfe>
 8014770:	4b5a      	ldr	r3, [pc, #360]	; (80148dc <etharp_query+0x25c>)
 8014772:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014776:	495d      	ldr	r1, [pc, #372]	; (80148ec <etharp_query+0x26c>)
 8014778:	485a      	ldr	r0, [pc, #360]	; (80148e4 <etharp_query+0x264>)
 801477a:	f002 fb53 	bl	8016e24 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801477e:	6a3b      	ldr	r3, [r7, #32]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d102      	bne.n	801478a <etharp_query+0x10a>
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d10c      	bne.n	80147a4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801478a:	68b9      	ldr	r1, [r7, #8]
 801478c:	68f8      	ldr	r0, [r7, #12]
 801478e:	f000 f963 	bl	8014a58 <etharp_request>
 8014792:	4603      	mov	r3, r0
 8014794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d102      	bne.n	80147a4 <etharp_query+0x124>
      return result;
 801479e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80147a2:	e096      	b.n	80148d2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d106      	bne.n	80147b8 <etharp_query+0x138>
 80147aa:	4b4c      	ldr	r3, [pc, #304]	; (80148dc <etharp_query+0x25c>)
 80147ac:	f240 32e1 	movw	r2, #993	; 0x3e1
 80147b0:	494f      	ldr	r1, [pc, #316]	; (80148f0 <etharp_query+0x270>)
 80147b2:	484c      	ldr	r0, [pc, #304]	; (80148e4 <etharp_query+0x264>)
 80147b4:	f002 fb36 	bl	8016e24 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80147b8:	7c7a      	ldrb	r2, [r7, #17]
 80147ba:	494b      	ldr	r1, [pc, #300]	; (80148e8 <etharp_query+0x268>)
 80147bc:	4613      	mov	r3, r2
 80147be:	005b      	lsls	r3, r3, #1
 80147c0:	4413      	add	r3, r2
 80147c2:	00db      	lsls	r3, r3, #3
 80147c4:	440b      	add	r3, r1
 80147c6:	3314      	adds	r3, #20
 80147c8:	781b      	ldrb	r3, [r3, #0]
 80147ca:	2b01      	cmp	r3, #1
 80147cc:	d917      	bls.n	80147fe <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80147ce:	4a49      	ldr	r2, [pc, #292]	; (80148f4 <etharp_query+0x274>)
 80147d0:	7c7b      	ldrb	r3, [r7, #17]
 80147d2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80147d4:	7c7a      	ldrb	r2, [r7, #17]
 80147d6:	4613      	mov	r3, r2
 80147d8:	005b      	lsls	r3, r3, #1
 80147da:	4413      	add	r3, r2
 80147dc:	00db      	lsls	r3, r3, #3
 80147de:	3308      	adds	r3, #8
 80147e0:	4a41      	ldr	r2, [pc, #260]	; (80148e8 <etharp_query+0x268>)
 80147e2:	4413      	add	r3, r2
 80147e4:	3304      	adds	r3, #4
 80147e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80147ea:	9200      	str	r2, [sp, #0]
 80147ec:	697a      	ldr	r2, [r7, #20]
 80147ee:	6879      	ldr	r1, [r7, #4]
 80147f0:	68f8      	ldr	r0, [r7, #12]
 80147f2:	f001 fc6f 	bl	80160d4 <ethernet_output>
 80147f6:	4603      	mov	r3, r0
 80147f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80147fc:	e067      	b.n	80148ce <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80147fe:	7c7a      	ldrb	r2, [r7, #17]
 8014800:	4939      	ldr	r1, [pc, #228]	; (80148e8 <etharp_query+0x268>)
 8014802:	4613      	mov	r3, r2
 8014804:	005b      	lsls	r3, r3, #1
 8014806:	4413      	add	r3, r2
 8014808:	00db      	lsls	r3, r3, #3
 801480a:	440b      	add	r3, r1
 801480c:	3314      	adds	r3, #20
 801480e:	781b      	ldrb	r3, [r3, #0]
 8014810:	2b01      	cmp	r3, #1
 8014812:	d15c      	bne.n	80148ce <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014814:	2300      	movs	r3, #0
 8014816:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801481c:	e01c      	b.n	8014858 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801481e:	69fb      	ldr	r3, [r7, #28]
 8014820:	895a      	ldrh	r2, [r3, #10]
 8014822:	69fb      	ldr	r3, [r7, #28]
 8014824:	891b      	ldrh	r3, [r3, #8]
 8014826:	429a      	cmp	r2, r3
 8014828:	d10a      	bne.n	8014840 <etharp_query+0x1c0>
 801482a:	69fb      	ldr	r3, [r7, #28]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d006      	beq.n	8014840 <etharp_query+0x1c0>
 8014832:	4b2a      	ldr	r3, [pc, #168]	; (80148dc <etharp_query+0x25c>)
 8014834:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014838:	492f      	ldr	r1, [pc, #188]	; (80148f8 <etharp_query+0x278>)
 801483a:	482a      	ldr	r0, [pc, #168]	; (80148e4 <etharp_query+0x264>)
 801483c:	f002 faf2 	bl	8016e24 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014840:	69fb      	ldr	r3, [r7, #28]
 8014842:	7b1b      	ldrb	r3, [r3, #12]
 8014844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014848:	2b00      	cmp	r3, #0
 801484a:	d002      	beq.n	8014852 <etharp_query+0x1d2>
        copy_needed = 1;
 801484c:	2301      	movs	r3, #1
 801484e:	61bb      	str	r3, [r7, #24]
        break;
 8014850:	e005      	b.n	801485e <etharp_query+0x1de>
      }
      p = p->next;
 8014852:	69fb      	ldr	r3, [r7, #28]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014858:	69fb      	ldr	r3, [r7, #28]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d1df      	bne.n	801481e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801485e:	69bb      	ldr	r3, [r7, #24]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d007      	beq.n	8014874 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014864:	687a      	ldr	r2, [r7, #4]
 8014866:	f44f 7120 	mov.w	r1, #640	; 0x280
 801486a:	200e      	movs	r0, #14
 801486c:	f7f9 fcfc 	bl	800e268 <pbuf_clone>
 8014870:	61f8      	str	r0, [r7, #28]
 8014872:	e004      	b.n	801487e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014878:	69f8      	ldr	r0, [r7, #28]
 801487a:	f7f9 fb33 	bl	800dee4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801487e:	69fb      	ldr	r3, [r7, #28]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d021      	beq.n	80148c8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014884:	7c7a      	ldrb	r2, [r7, #17]
 8014886:	4918      	ldr	r1, [pc, #96]	; (80148e8 <etharp_query+0x268>)
 8014888:	4613      	mov	r3, r2
 801488a:	005b      	lsls	r3, r3, #1
 801488c:	4413      	add	r3, r2
 801488e:	00db      	lsls	r3, r3, #3
 8014890:	440b      	add	r3, r1
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d00a      	beq.n	80148ae <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014898:	7c7a      	ldrb	r2, [r7, #17]
 801489a:	4913      	ldr	r1, [pc, #76]	; (80148e8 <etharp_query+0x268>)
 801489c:	4613      	mov	r3, r2
 801489e:	005b      	lsls	r3, r3, #1
 80148a0:	4413      	add	r3, r2
 80148a2:	00db      	lsls	r3, r3, #3
 80148a4:	440b      	add	r3, r1
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	4618      	mov	r0, r3
 80148aa:	f7f9 fa75 	bl	800dd98 <pbuf_free>
      }
      arp_table[i].q = p;
 80148ae:	7c7a      	ldrb	r2, [r7, #17]
 80148b0:	490d      	ldr	r1, [pc, #52]	; (80148e8 <etharp_query+0x268>)
 80148b2:	4613      	mov	r3, r2
 80148b4:	005b      	lsls	r3, r3, #1
 80148b6:	4413      	add	r3, r2
 80148b8:	00db      	lsls	r3, r3, #3
 80148ba:	440b      	add	r3, r1
 80148bc:	69fa      	ldr	r2, [r7, #28]
 80148be:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80148c0:	2300      	movs	r3, #0
 80148c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80148c6:	e002      	b.n	80148ce <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80148c8:	23ff      	movs	r3, #255	; 0xff
 80148ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80148ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80148d2:	4618      	mov	r0, r3
 80148d4:	3728      	adds	r7, #40	; 0x28
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}
 80148da:	bf00      	nop
 80148dc:	0801a3d8 	.word	0x0801a3d8
 80148e0:	0801a584 	.word	0x0801a584
 80148e4:	0801a450 	.word	0x0801a450
 80148e8:	20004284 	.word	0x20004284
 80148ec:	0801a594 	.word	0x0801a594
 80148f0:	0801a578 	.word	0x0801a578
 80148f4:	20004374 	.word	0x20004374
 80148f8:	0801a5bc 	.word	0x0801a5bc

080148fc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b08a      	sub	sp, #40	; 0x28
 8014900:	af02      	add	r7, sp, #8
 8014902:	60f8      	str	r0, [r7, #12]
 8014904:	60b9      	str	r1, [r7, #8]
 8014906:	607a      	str	r2, [r7, #4]
 8014908:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801490a:	2300      	movs	r3, #0
 801490c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d106      	bne.n	8014922 <etharp_raw+0x26>
 8014914:	4b3a      	ldr	r3, [pc, #232]	; (8014a00 <etharp_raw+0x104>)
 8014916:	f240 4257 	movw	r2, #1111	; 0x457
 801491a:	493a      	ldr	r1, [pc, #232]	; (8014a04 <etharp_raw+0x108>)
 801491c:	483a      	ldr	r0, [pc, #232]	; (8014a08 <etharp_raw+0x10c>)
 801491e:	f002 fa81 	bl	8016e24 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014922:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014926:	211c      	movs	r1, #28
 8014928:	200e      	movs	r0, #14
 801492a:	f7f8 ff51 	bl	800d7d0 <pbuf_alloc>
 801492e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014930:	69bb      	ldr	r3, [r7, #24]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d102      	bne.n	801493c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014936:	f04f 33ff 	mov.w	r3, #4294967295
 801493a:	e05d      	b.n	80149f8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801493c:	69bb      	ldr	r3, [r7, #24]
 801493e:	895b      	ldrh	r3, [r3, #10]
 8014940:	2b1b      	cmp	r3, #27
 8014942:	d806      	bhi.n	8014952 <etharp_raw+0x56>
 8014944:	4b2e      	ldr	r3, [pc, #184]	; (8014a00 <etharp_raw+0x104>)
 8014946:	f240 4262 	movw	r2, #1122	; 0x462
 801494a:	4930      	ldr	r1, [pc, #192]	; (8014a0c <etharp_raw+0x110>)
 801494c:	482e      	ldr	r0, [pc, #184]	; (8014a08 <etharp_raw+0x10c>)
 801494e:	f002 fa69 	bl	8016e24 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014952:	69bb      	ldr	r3, [r7, #24]
 8014954:	685b      	ldr	r3, [r3, #4]
 8014956:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014958:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801495a:	4618      	mov	r0, r3
 801495c:	f7f7 fee8 	bl	800c730 <lwip_htons>
 8014960:	4603      	mov	r3, r0
 8014962:	461a      	mov	r2, r3
 8014964:	697b      	ldr	r3, [r7, #20]
 8014966:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801496e:	2b06      	cmp	r3, #6
 8014970:	d006      	beq.n	8014980 <etharp_raw+0x84>
 8014972:	4b23      	ldr	r3, [pc, #140]	; (8014a00 <etharp_raw+0x104>)
 8014974:	f240 4269 	movw	r2, #1129	; 0x469
 8014978:	4925      	ldr	r1, [pc, #148]	; (8014a10 <etharp_raw+0x114>)
 801497a:	4823      	ldr	r0, [pc, #140]	; (8014a08 <etharp_raw+0x10c>)
 801497c:	f002 fa52 	bl	8016e24 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014980:	697b      	ldr	r3, [r7, #20]
 8014982:	3308      	adds	r3, #8
 8014984:	2206      	movs	r2, #6
 8014986:	6839      	ldr	r1, [r7, #0]
 8014988:	4618      	mov	r0, r3
 801498a:	f002 fa35 	bl	8016df8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801498e:	697b      	ldr	r3, [r7, #20]
 8014990:	3312      	adds	r3, #18
 8014992:	2206      	movs	r2, #6
 8014994:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014996:	4618      	mov	r0, r3
 8014998:	f002 fa2e 	bl	8016df8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801499c:	697b      	ldr	r3, [r7, #20]
 801499e:	330e      	adds	r3, #14
 80149a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80149a2:	6812      	ldr	r2, [r2, #0]
 80149a4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80149a6:	697b      	ldr	r3, [r7, #20]
 80149a8:	3318      	adds	r3, #24
 80149aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149ac:	6812      	ldr	r2, [r2, #0]
 80149ae:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80149b0:	697b      	ldr	r3, [r7, #20]
 80149b2:	2200      	movs	r2, #0
 80149b4:	701a      	strb	r2, [r3, #0]
 80149b6:	2200      	movs	r2, #0
 80149b8:	f042 0201 	orr.w	r2, r2, #1
 80149bc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80149be:	697b      	ldr	r3, [r7, #20]
 80149c0:	2200      	movs	r2, #0
 80149c2:	f042 0208 	orr.w	r2, r2, #8
 80149c6:	709a      	strb	r2, [r3, #2]
 80149c8:	2200      	movs	r2, #0
 80149ca:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80149cc:	697b      	ldr	r3, [r7, #20]
 80149ce:	2206      	movs	r2, #6
 80149d0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80149d2:	697b      	ldr	r3, [r7, #20]
 80149d4:	2204      	movs	r2, #4
 80149d6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80149d8:	f640 0306 	movw	r3, #2054	; 0x806
 80149dc:	9300      	str	r3, [sp, #0]
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	68ba      	ldr	r2, [r7, #8]
 80149e2:	69b9      	ldr	r1, [r7, #24]
 80149e4:	68f8      	ldr	r0, [r7, #12]
 80149e6:	f001 fb75 	bl	80160d4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80149ea:	69b8      	ldr	r0, [r7, #24]
 80149ec:	f7f9 f9d4 	bl	800dd98 <pbuf_free>
  p = NULL;
 80149f0:	2300      	movs	r3, #0
 80149f2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80149f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80149f8:	4618      	mov	r0, r3
 80149fa:	3720      	adds	r7, #32
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd80      	pop	{r7, pc}
 8014a00:	0801a3d8 	.word	0x0801a3d8
 8014a04:	0801a528 	.word	0x0801a528
 8014a08:	0801a450 	.word	0x0801a450
 8014a0c:	0801a5d8 	.word	0x0801a5d8
 8014a10:	0801a60c 	.word	0x0801a60c

08014a14 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b088      	sub	sp, #32
 8014a18:	af04      	add	r7, sp, #16
 8014a1a:	60f8      	str	r0, [r7, #12]
 8014a1c:	60b9      	str	r1, [r7, #8]
 8014a1e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014a30:	2201      	movs	r2, #1
 8014a32:	9203      	str	r2, [sp, #12]
 8014a34:	68ba      	ldr	r2, [r7, #8]
 8014a36:	9202      	str	r2, [sp, #8]
 8014a38:	4a06      	ldr	r2, [pc, #24]	; (8014a54 <etharp_request_dst+0x40>)
 8014a3a:	9201      	str	r2, [sp, #4]
 8014a3c:	9300      	str	r3, [sp, #0]
 8014a3e:	4603      	mov	r3, r0
 8014a40:	687a      	ldr	r2, [r7, #4]
 8014a42:	68f8      	ldr	r0, [r7, #12]
 8014a44:	f7ff ff5a 	bl	80148fc <etharp_raw>
 8014a48:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	3710      	adds	r7, #16
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	bd80      	pop	{r7, pc}
 8014a52:	bf00      	nop
 8014a54:	0801ac18 	.word	0x0801ac18

08014a58 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b082      	sub	sp, #8
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	6078      	str	r0, [r7, #4]
 8014a60:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014a62:	4a05      	ldr	r2, [pc, #20]	; (8014a78 <etharp_request+0x20>)
 8014a64:	6839      	ldr	r1, [r7, #0]
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	f7ff ffd4 	bl	8014a14 <etharp_request_dst>
 8014a6c:	4603      	mov	r3, r0
}
 8014a6e:	4618      	mov	r0, r3
 8014a70:	3708      	adds	r7, #8
 8014a72:	46bd      	mov	sp, r7
 8014a74:	bd80      	pop	{r7, pc}
 8014a76:	bf00      	nop
 8014a78:	0801ac10 	.word	0x0801ac10

08014a7c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b08e      	sub	sp, #56	; 0x38
 8014a80:	af04      	add	r7, sp, #16
 8014a82:	6078      	str	r0, [r7, #4]
 8014a84:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014a86:	4b79      	ldr	r3, [pc, #484]	; (8014c6c <icmp_input+0x1f0>)
 8014a88:	689b      	ldr	r3, [r3, #8]
 8014a8a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a8e:	781b      	ldrb	r3, [r3, #0]
 8014a90:	f003 030f 	and.w	r3, r3, #15
 8014a94:	b2db      	uxtb	r3, r3
 8014a96:	009b      	lsls	r3, r3, #2
 8014a98:	b2db      	uxtb	r3, r3
 8014a9a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014a9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014a9e:	2b13      	cmp	r3, #19
 8014aa0:	f240 80cd 	bls.w	8014c3e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	895b      	ldrh	r3, [r3, #10]
 8014aa8:	2b03      	cmp	r3, #3
 8014aaa:	f240 80ca 	bls.w	8014c42 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	685b      	ldr	r3, [r3, #4]
 8014ab2:	781b      	ldrb	r3, [r3, #0]
 8014ab4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014ab8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	f000 80b7 	beq.w	8014c30 <icmp_input+0x1b4>
 8014ac2:	2b08      	cmp	r3, #8
 8014ac4:	f040 80b7 	bne.w	8014c36 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014ac8:	4b69      	ldr	r3, [pc, #420]	; (8014c70 <icmp_input+0x1f4>)
 8014aca:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014acc:	4b67      	ldr	r3, [pc, #412]	; (8014c6c <icmp_input+0x1f0>)
 8014ace:	695b      	ldr	r3, [r3, #20]
 8014ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014ad4:	2be0      	cmp	r3, #224	; 0xe0
 8014ad6:	f000 80bb 	beq.w	8014c50 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014ada:	4b64      	ldr	r3, [pc, #400]	; (8014c6c <icmp_input+0x1f0>)
 8014adc:	695b      	ldr	r3, [r3, #20]
 8014ade:	4a63      	ldr	r2, [pc, #396]	; (8014c6c <icmp_input+0x1f0>)
 8014ae0:	6812      	ldr	r2, [r2, #0]
 8014ae2:	4611      	mov	r1, r2
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	f000 fbed 	bl	80152c4 <ip4_addr_isbroadcast_u32>
 8014aea:	4603      	mov	r3, r0
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	f040 80b1 	bne.w	8014c54 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	891b      	ldrh	r3, [r3, #8]
 8014af6:	2b07      	cmp	r3, #7
 8014af8:	f240 80a5 	bls.w	8014c46 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014afc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014afe:	330e      	adds	r3, #14
 8014b00:	4619      	mov	r1, r3
 8014b02:	6878      	ldr	r0, [r7, #4]
 8014b04:	f7f9 f8b2 	bl	800dc6c <pbuf_add_header>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d04b      	beq.n	8014ba6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	891a      	ldrh	r2, [r3, #8]
 8014b12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b14:	4413      	add	r3, r2
 8014b16:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	891b      	ldrh	r3, [r3, #8]
 8014b1c:	8b7a      	ldrh	r2, [r7, #26]
 8014b1e:	429a      	cmp	r2, r3
 8014b20:	f0c0 809a 	bcc.w	8014c58 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014b24:	8b7b      	ldrh	r3, [r7, #26]
 8014b26:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014b2a:	4619      	mov	r1, r3
 8014b2c:	200e      	movs	r0, #14
 8014b2e:	f7f8 fe4f 	bl	800d7d0 <pbuf_alloc>
 8014b32:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014b34:	697b      	ldr	r3, [r7, #20]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	f000 8090 	beq.w	8014c5c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014b3c:	697b      	ldr	r3, [r7, #20]
 8014b3e:	895b      	ldrh	r3, [r3, #10]
 8014b40:	461a      	mov	r2, r3
 8014b42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b44:	3308      	adds	r3, #8
 8014b46:	429a      	cmp	r2, r3
 8014b48:	d203      	bcs.n	8014b52 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014b4a:	6978      	ldr	r0, [r7, #20]
 8014b4c:	f7f9 f924 	bl	800dd98 <pbuf_free>
          goto icmperr;
 8014b50:	e085      	b.n	8014c5e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014b52:	697b      	ldr	r3, [r7, #20]
 8014b54:	685b      	ldr	r3, [r3, #4]
 8014b56:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014b58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f002 f94c 	bl	8016df8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014b60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b62:	4619      	mov	r1, r3
 8014b64:	6978      	ldr	r0, [r7, #20]
 8014b66:	f7f9 f891 	bl	800dc8c <pbuf_remove_header>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d009      	beq.n	8014b84 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014b70:	4b40      	ldr	r3, [pc, #256]	; (8014c74 <icmp_input+0x1f8>)
 8014b72:	22b6      	movs	r2, #182	; 0xb6
 8014b74:	4940      	ldr	r1, [pc, #256]	; (8014c78 <icmp_input+0x1fc>)
 8014b76:	4841      	ldr	r0, [pc, #260]	; (8014c7c <icmp_input+0x200>)
 8014b78:	f002 f954 	bl	8016e24 <iprintf>
          pbuf_free(r);
 8014b7c:	6978      	ldr	r0, [r7, #20]
 8014b7e:	f7f9 f90b 	bl	800dd98 <pbuf_free>
          goto icmperr;
 8014b82:	e06c      	b.n	8014c5e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014b84:	6879      	ldr	r1, [r7, #4]
 8014b86:	6978      	ldr	r0, [r7, #20]
 8014b88:	f7f9 fa2a 	bl	800dfe0 <pbuf_copy>
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d003      	beq.n	8014b9a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014b92:	6978      	ldr	r0, [r7, #20]
 8014b94:	f7f9 f900 	bl	800dd98 <pbuf_free>
          goto icmperr;
 8014b98:	e061      	b.n	8014c5e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014b9a:	6878      	ldr	r0, [r7, #4]
 8014b9c:	f7f9 f8fc 	bl	800dd98 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014ba0:	697b      	ldr	r3, [r7, #20]
 8014ba2:	607b      	str	r3, [r7, #4]
 8014ba4:	e00f      	b.n	8014bc6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014ba6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ba8:	330e      	adds	r3, #14
 8014baa:	4619      	mov	r1, r3
 8014bac:	6878      	ldr	r0, [r7, #4]
 8014bae:	f7f9 f86d 	bl	800dc8c <pbuf_remove_header>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d006      	beq.n	8014bc6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014bb8:	4b2e      	ldr	r3, [pc, #184]	; (8014c74 <icmp_input+0x1f8>)
 8014bba:	22c7      	movs	r2, #199	; 0xc7
 8014bbc:	4930      	ldr	r1, [pc, #192]	; (8014c80 <icmp_input+0x204>)
 8014bbe:	482f      	ldr	r0, [pc, #188]	; (8014c7c <icmp_input+0x200>)
 8014bc0:	f002 f930 	bl	8016e24 <iprintf>
          goto icmperr;
 8014bc4:	e04b      	b.n	8014c5e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	685b      	ldr	r3, [r3, #4]
 8014bca:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014bcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014bce:	4619      	mov	r1, r3
 8014bd0:	6878      	ldr	r0, [r7, #4]
 8014bd2:	f7f9 f84b 	bl	800dc6c <pbuf_add_header>
 8014bd6:	4603      	mov	r3, r0
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d12b      	bne.n	8014c34 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	685b      	ldr	r3, [r3, #4]
 8014be0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014be2:	69fb      	ldr	r3, [r7, #28]
 8014be4:	681a      	ldr	r2, [r3, #0]
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014bea:	4b20      	ldr	r3, [pc, #128]	; (8014c6c <icmp_input+0x1f0>)
 8014bec:	691a      	ldr	r2, [r3, #16]
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014bf2:	693b      	ldr	r3, [r7, #16]
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014bf8:	693b      	ldr	r3, [r7, #16]
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	709a      	strb	r2, [r3, #2]
 8014bfe:	2200      	movs	r2, #0
 8014c00:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	22ff      	movs	r2, #255	; 0xff
 8014c06:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	729a      	strb	r2, [r3, #10]
 8014c0e:	2200      	movs	r2, #0
 8014c10:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014c12:	683b      	ldr	r3, [r7, #0]
 8014c14:	9302      	str	r3, [sp, #8]
 8014c16:	2301      	movs	r3, #1
 8014c18:	9301      	str	r3, [sp, #4]
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	9300      	str	r3, [sp, #0]
 8014c1e:	23ff      	movs	r3, #255	; 0xff
 8014c20:	2200      	movs	r2, #0
 8014c22:	69f9      	ldr	r1, [r7, #28]
 8014c24:	6878      	ldr	r0, [r7, #4]
 8014c26:	f000 fa75 	bl	8015114 <ip4_output_if>
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014c2e:	e001      	b.n	8014c34 <icmp_input+0x1b8>
      break;
 8014c30:	bf00      	nop
 8014c32:	e000      	b.n	8014c36 <icmp_input+0x1ba>
      break;
 8014c34:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014c36:	6878      	ldr	r0, [r7, #4]
 8014c38:	f7f9 f8ae 	bl	800dd98 <pbuf_free>
  return;
 8014c3c:	e013      	b.n	8014c66 <icmp_input+0x1ea>
    goto lenerr;
 8014c3e:	bf00      	nop
 8014c40:	e002      	b.n	8014c48 <icmp_input+0x1cc>
    goto lenerr;
 8014c42:	bf00      	nop
 8014c44:	e000      	b.n	8014c48 <icmp_input+0x1cc>
        goto lenerr;
 8014c46:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014c48:	6878      	ldr	r0, [r7, #4]
 8014c4a:	f7f9 f8a5 	bl	800dd98 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014c4e:	e00a      	b.n	8014c66 <icmp_input+0x1ea>
        goto icmperr;
 8014c50:	bf00      	nop
 8014c52:	e004      	b.n	8014c5e <icmp_input+0x1e2>
        goto icmperr;
 8014c54:	bf00      	nop
 8014c56:	e002      	b.n	8014c5e <icmp_input+0x1e2>
          goto icmperr;
 8014c58:	bf00      	nop
 8014c5a:	e000      	b.n	8014c5e <icmp_input+0x1e2>
          goto icmperr;
 8014c5c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014c5e:	6878      	ldr	r0, [r7, #4]
 8014c60:	f7f9 f89a 	bl	800dd98 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014c64:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014c66:	3728      	adds	r7, #40	; 0x28
 8014c68:	46bd      	mov	sp, r7
 8014c6a:	bd80      	pop	{r7, pc}
 8014c6c:	200079e8 	.word	0x200079e8
 8014c70:	200079fc 	.word	0x200079fc
 8014c74:	0801a650 	.word	0x0801a650
 8014c78:	0801a688 	.word	0x0801a688
 8014c7c:	0801a6c0 	.word	0x0801a6c0
 8014c80:	0801a6e8 	.word	0x0801a6e8

08014c84 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b082      	sub	sp, #8
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
 8014c8c:	460b      	mov	r3, r1
 8014c8e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014c90:	78fb      	ldrb	r3, [r7, #3]
 8014c92:	461a      	mov	r2, r3
 8014c94:	2103      	movs	r1, #3
 8014c96:	6878      	ldr	r0, [r7, #4]
 8014c98:	f000 f814 	bl	8014cc4 <icmp_send_response>
}
 8014c9c:	bf00      	nop
 8014c9e:	3708      	adds	r7, #8
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	bd80      	pop	{r7, pc}

08014ca4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b082      	sub	sp, #8
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
 8014cac:	460b      	mov	r3, r1
 8014cae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014cb0:	78fb      	ldrb	r3, [r7, #3]
 8014cb2:	461a      	mov	r2, r3
 8014cb4:	210b      	movs	r1, #11
 8014cb6:	6878      	ldr	r0, [r7, #4]
 8014cb8:	f000 f804 	bl	8014cc4 <icmp_send_response>
}
 8014cbc:	bf00      	nop
 8014cbe:	3708      	adds	r7, #8
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	bd80      	pop	{r7, pc}

08014cc4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b08c      	sub	sp, #48	; 0x30
 8014cc8:	af04      	add	r7, sp, #16
 8014cca:	6078      	str	r0, [r7, #4]
 8014ccc:	460b      	mov	r3, r1
 8014cce:	70fb      	strb	r3, [r7, #3]
 8014cd0:	4613      	mov	r3, r2
 8014cd2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014cd4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014cd8:	2124      	movs	r1, #36	; 0x24
 8014cda:	2022      	movs	r0, #34	; 0x22
 8014cdc:	f7f8 fd78 	bl	800d7d0 <pbuf_alloc>
 8014ce0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014ce2:	69fb      	ldr	r3, [r7, #28]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d04c      	beq.n	8014d82 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014ce8:	69fb      	ldr	r3, [r7, #28]
 8014cea:	895b      	ldrh	r3, [r3, #10]
 8014cec:	2b23      	cmp	r3, #35	; 0x23
 8014cee:	d806      	bhi.n	8014cfe <icmp_send_response+0x3a>
 8014cf0:	4b26      	ldr	r3, [pc, #152]	; (8014d8c <icmp_send_response+0xc8>)
 8014cf2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014cf6:	4926      	ldr	r1, [pc, #152]	; (8014d90 <icmp_send_response+0xcc>)
 8014cf8:	4826      	ldr	r0, [pc, #152]	; (8014d94 <icmp_send_response+0xd0>)
 8014cfa:	f002 f893 	bl	8016e24 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	685b      	ldr	r3, [r3, #4]
 8014d02:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014d04:	69fb      	ldr	r3, [r7, #28]
 8014d06:	685b      	ldr	r3, [r3, #4]
 8014d08:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014d0a:	697b      	ldr	r3, [r7, #20]
 8014d0c:	78fa      	ldrb	r2, [r7, #3]
 8014d0e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014d10:	697b      	ldr	r3, [r7, #20]
 8014d12:	78ba      	ldrb	r2, [r7, #2]
 8014d14:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014d16:	697b      	ldr	r3, [r7, #20]
 8014d18:	2200      	movs	r2, #0
 8014d1a:	711a      	strb	r2, [r3, #4]
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014d20:	697b      	ldr	r3, [r7, #20]
 8014d22:	2200      	movs	r2, #0
 8014d24:	719a      	strb	r2, [r3, #6]
 8014d26:	2200      	movs	r2, #0
 8014d28:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014d2a:	69fb      	ldr	r3, [r7, #28]
 8014d2c:	685b      	ldr	r3, [r3, #4]
 8014d2e:	f103 0008 	add.w	r0, r3, #8
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	685b      	ldr	r3, [r3, #4]
 8014d36:	221c      	movs	r2, #28
 8014d38:	4619      	mov	r1, r3
 8014d3a:	f002 f85d 	bl	8016df8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014d3e:	69bb      	ldr	r3, [r7, #24]
 8014d40:	68db      	ldr	r3, [r3, #12]
 8014d42:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014d44:	f107 030c 	add.w	r3, r7, #12
 8014d48:	4618      	mov	r0, r3
 8014d4a:	f000 f825 	bl	8014d98 <ip4_route>
 8014d4e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014d50:	693b      	ldr	r3, [r7, #16]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d011      	beq.n	8014d7a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014d56:	697b      	ldr	r3, [r7, #20]
 8014d58:	2200      	movs	r2, #0
 8014d5a:	709a      	strb	r2, [r3, #2]
 8014d5c:	2200      	movs	r2, #0
 8014d5e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014d60:	f107 020c 	add.w	r2, r7, #12
 8014d64:	693b      	ldr	r3, [r7, #16]
 8014d66:	9302      	str	r3, [sp, #8]
 8014d68:	2301      	movs	r3, #1
 8014d6a:	9301      	str	r3, [sp, #4]
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	9300      	str	r3, [sp, #0]
 8014d70:	23ff      	movs	r3, #255	; 0xff
 8014d72:	2100      	movs	r1, #0
 8014d74:	69f8      	ldr	r0, [r7, #28]
 8014d76:	f000 f9cd 	bl	8015114 <ip4_output_if>
  }
  pbuf_free(q);
 8014d7a:	69f8      	ldr	r0, [r7, #28]
 8014d7c:	f7f9 f80c 	bl	800dd98 <pbuf_free>
 8014d80:	e000      	b.n	8014d84 <icmp_send_response+0xc0>
    return;
 8014d82:	bf00      	nop
}
 8014d84:	3720      	adds	r7, #32
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd80      	pop	{r7, pc}
 8014d8a:	bf00      	nop
 8014d8c:	0801a650 	.word	0x0801a650
 8014d90:	0801a71c 	.word	0x0801a71c
 8014d94:	0801a6c0 	.word	0x0801a6c0

08014d98 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014d98:	b480      	push	{r7}
 8014d9a:	b085      	sub	sp, #20
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014da0:	4b33      	ldr	r3, [pc, #204]	; (8014e70 <ip4_route+0xd8>)
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	60fb      	str	r3, [r7, #12]
 8014da6:	e036      	b.n	8014e16 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014dae:	f003 0301 	and.w	r3, r3, #1
 8014db2:	b2db      	uxtb	r3, r3
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d02b      	beq.n	8014e10 <ip4_route+0x78>
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014dbe:	089b      	lsrs	r3, r3, #2
 8014dc0:	f003 0301 	and.w	r3, r3, #1
 8014dc4:	b2db      	uxtb	r3, r3
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d022      	beq.n	8014e10 <ip4_route+0x78>
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	3304      	adds	r3, #4
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d01d      	beq.n	8014e10 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	681a      	ldr	r2, [r3, #0]
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	3304      	adds	r3, #4
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	405a      	eors	r2, r3
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	3308      	adds	r3, #8
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	4013      	ands	r3, r2
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d101      	bne.n	8014df0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	e038      	b.n	8014e62 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014df6:	f003 0302 	and.w	r3, r3, #2
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d108      	bne.n	8014e10 <ip4_route+0x78>
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	681a      	ldr	r2, [r3, #0]
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	330c      	adds	r3, #12
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	429a      	cmp	r2, r3
 8014e0a:	d101      	bne.n	8014e10 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	e028      	b.n	8014e62 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	60fb      	str	r3, [r7, #12]
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d1c5      	bne.n	8014da8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014e1c:	4b15      	ldr	r3, [pc, #84]	; (8014e74 <ip4_route+0xdc>)
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d01a      	beq.n	8014e5a <ip4_route+0xc2>
 8014e24:	4b13      	ldr	r3, [pc, #76]	; (8014e74 <ip4_route+0xdc>)
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014e2c:	f003 0301 	and.w	r3, r3, #1
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d012      	beq.n	8014e5a <ip4_route+0xc2>
 8014e34:	4b0f      	ldr	r3, [pc, #60]	; (8014e74 <ip4_route+0xdc>)
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014e3c:	f003 0304 	and.w	r3, r3, #4
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d00a      	beq.n	8014e5a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014e44:	4b0b      	ldr	r3, [pc, #44]	; (8014e74 <ip4_route+0xdc>)
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	3304      	adds	r3, #4
 8014e4a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d004      	beq.n	8014e5a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	b2db      	uxtb	r3, r3
 8014e56:	2b7f      	cmp	r3, #127	; 0x7f
 8014e58:	d101      	bne.n	8014e5e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	e001      	b.n	8014e62 <ip4_route+0xca>
  }

  return netif_default;
 8014e5e:	4b05      	ldr	r3, [pc, #20]	; (8014e74 <ip4_route+0xdc>)
 8014e60:	681b      	ldr	r3, [r3, #0]
}
 8014e62:	4618      	mov	r0, r3
 8014e64:	3714      	adds	r7, #20
 8014e66:	46bd      	mov	sp, r7
 8014e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6c:	4770      	bx	lr
 8014e6e:	bf00      	nop
 8014e70:	2000b0ec 	.word	0x2000b0ec
 8014e74:	2000b0f0 	.word	0x2000b0f0

08014e78 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b082      	sub	sp, #8
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014e86:	f003 0301 	and.w	r3, r3, #1
 8014e8a:	b2db      	uxtb	r3, r3
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d016      	beq.n	8014ebe <ip4_input_accept+0x46>
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	3304      	adds	r3, #4
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d011      	beq.n	8014ebe <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014e9a:	4b0b      	ldr	r3, [pc, #44]	; (8014ec8 <ip4_input_accept+0x50>)
 8014e9c:	695a      	ldr	r2, [r3, #20]
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	3304      	adds	r3, #4
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	429a      	cmp	r2, r3
 8014ea6:	d008      	beq.n	8014eba <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014ea8:	4b07      	ldr	r3, [pc, #28]	; (8014ec8 <ip4_input_accept+0x50>)
 8014eaa:	695b      	ldr	r3, [r3, #20]
 8014eac:	6879      	ldr	r1, [r7, #4]
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f000 fa08 	bl	80152c4 <ip4_addr_isbroadcast_u32>
 8014eb4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d001      	beq.n	8014ebe <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014eba:	2301      	movs	r3, #1
 8014ebc:	e000      	b.n	8014ec0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014ebe:	2300      	movs	r3, #0
}
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	3708      	adds	r7, #8
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	bd80      	pop	{r7, pc}
 8014ec8:	200079e8 	.word	0x200079e8

08014ecc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b086      	sub	sp, #24
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
 8014ed4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	685b      	ldr	r3, [r3, #4]
 8014eda:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014edc:	697b      	ldr	r3, [r7, #20]
 8014ede:	781b      	ldrb	r3, [r3, #0]
 8014ee0:	091b      	lsrs	r3, r3, #4
 8014ee2:	b2db      	uxtb	r3, r3
 8014ee4:	2b04      	cmp	r3, #4
 8014ee6:	d004      	beq.n	8014ef2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014ee8:	6878      	ldr	r0, [r7, #4]
 8014eea:	f7f8 ff55 	bl	800dd98 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014eee:	2300      	movs	r3, #0
 8014ef0:	e107      	b.n	8015102 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014ef2:	697b      	ldr	r3, [r7, #20]
 8014ef4:	781b      	ldrb	r3, [r3, #0]
 8014ef6:	f003 030f 	and.w	r3, r3, #15
 8014efa:	b2db      	uxtb	r3, r3
 8014efc:	009b      	lsls	r3, r3, #2
 8014efe:	b2db      	uxtb	r3, r3
 8014f00:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014f02:	697b      	ldr	r3, [r7, #20]
 8014f04:	885b      	ldrh	r3, [r3, #2]
 8014f06:	b29b      	uxth	r3, r3
 8014f08:	4618      	mov	r0, r3
 8014f0a:	f7f7 fc11 	bl	800c730 <lwip_htons>
 8014f0e:	4603      	mov	r3, r0
 8014f10:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	891b      	ldrh	r3, [r3, #8]
 8014f16:	89ba      	ldrh	r2, [r7, #12]
 8014f18:	429a      	cmp	r2, r3
 8014f1a:	d204      	bcs.n	8014f26 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014f1c:	89bb      	ldrh	r3, [r7, #12]
 8014f1e:	4619      	mov	r1, r3
 8014f20:	6878      	ldr	r0, [r7, #4]
 8014f22:	f7f8 fdb3 	bl	800da8c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	895b      	ldrh	r3, [r3, #10]
 8014f2a:	89fa      	ldrh	r2, [r7, #14]
 8014f2c:	429a      	cmp	r2, r3
 8014f2e:	d807      	bhi.n	8014f40 <ip4_input+0x74>
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	891b      	ldrh	r3, [r3, #8]
 8014f34:	89ba      	ldrh	r2, [r7, #12]
 8014f36:	429a      	cmp	r2, r3
 8014f38:	d802      	bhi.n	8014f40 <ip4_input+0x74>
 8014f3a:	89fb      	ldrh	r3, [r7, #14]
 8014f3c:	2b13      	cmp	r3, #19
 8014f3e:	d804      	bhi.n	8014f4a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014f40:	6878      	ldr	r0, [r7, #4]
 8014f42:	f7f8 ff29 	bl	800dd98 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014f46:	2300      	movs	r3, #0
 8014f48:	e0db      	b.n	8015102 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014f4a:	697b      	ldr	r3, [r7, #20]
 8014f4c:	691b      	ldr	r3, [r3, #16]
 8014f4e:	4a6f      	ldr	r2, [pc, #444]	; (801510c <ip4_input+0x240>)
 8014f50:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014f52:	697b      	ldr	r3, [r7, #20]
 8014f54:	68db      	ldr	r3, [r3, #12]
 8014f56:	4a6d      	ldr	r2, [pc, #436]	; (801510c <ip4_input+0x240>)
 8014f58:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014f5a:	4b6c      	ldr	r3, [pc, #432]	; (801510c <ip4_input+0x240>)
 8014f5c:	695b      	ldr	r3, [r3, #20]
 8014f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014f62:	2be0      	cmp	r3, #224	; 0xe0
 8014f64:	d112      	bne.n	8014f8c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014f66:	683b      	ldr	r3, [r7, #0]
 8014f68:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014f6c:	f003 0301 	and.w	r3, r3, #1
 8014f70:	b2db      	uxtb	r3, r3
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d007      	beq.n	8014f86 <ip4_input+0xba>
 8014f76:	683b      	ldr	r3, [r7, #0]
 8014f78:	3304      	adds	r3, #4
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d002      	beq.n	8014f86 <ip4_input+0xba>
      netif = inp;
 8014f80:	683b      	ldr	r3, [r7, #0]
 8014f82:	613b      	str	r3, [r7, #16]
 8014f84:	e02a      	b.n	8014fdc <ip4_input+0x110>
    } else {
      netif = NULL;
 8014f86:	2300      	movs	r3, #0
 8014f88:	613b      	str	r3, [r7, #16]
 8014f8a:	e027      	b.n	8014fdc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014f8c:	6838      	ldr	r0, [r7, #0]
 8014f8e:	f7ff ff73 	bl	8014e78 <ip4_input_accept>
 8014f92:	4603      	mov	r3, r0
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d002      	beq.n	8014f9e <ip4_input+0xd2>
      netif = inp;
 8014f98:	683b      	ldr	r3, [r7, #0]
 8014f9a:	613b      	str	r3, [r7, #16]
 8014f9c:	e01e      	b.n	8014fdc <ip4_input+0x110>
    } else {
      netif = NULL;
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014fa2:	4b5a      	ldr	r3, [pc, #360]	; (801510c <ip4_input+0x240>)
 8014fa4:	695b      	ldr	r3, [r3, #20]
 8014fa6:	b2db      	uxtb	r3, r3
 8014fa8:	2b7f      	cmp	r3, #127	; 0x7f
 8014faa:	d017      	beq.n	8014fdc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014fac:	4b58      	ldr	r3, [pc, #352]	; (8015110 <ip4_input+0x244>)
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	613b      	str	r3, [r7, #16]
 8014fb2:	e00e      	b.n	8014fd2 <ip4_input+0x106>
          if (netif == inp) {
 8014fb4:	693a      	ldr	r2, [r7, #16]
 8014fb6:	683b      	ldr	r3, [r7, #0]
 8014fb8:	429a      	cmp	r2, r3
 8014fba:	d006      	beq.n	8014fca <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014fbc:	6938      	ldr	r0, [r7, #16]
 8014fbe:	f7ff ff5b 	bl	8014e78 <ip4_input_accept>
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d108      	bne.n	8014fda <ip4_input+0x10e>
 8014fc8:	e000      	b.n	8014fcc <ip4_input+0x100>
            continue;
 8014fca:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014fcc:	693b      	ldr	r3, [r7, #16]
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	613b      	str	r3, [r7, #16]
 8014fd2:	693b      	ldr	r3, [r7, #16]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d1ed      	bne.n	8014fb4 <ip4_input+0xe8>
 8014fd8:	e000      	b.n	8014fdc <ip4_input+0x110>
            break;
 8014fda:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014fdc:	4b4b      	ldr	r3, [pc, #300]	; (801510c <ip4_input+0x240>)
 8014fde:	691b      	ldr	r3, [r3, #16]
 8014fe0:	6839      	ldr	r1, [r7, #0]
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f000 f96e 	bl	80152c4 <ip4_addr_isbroadcast_u32>
 8014fe8:	4603      	mov	r3, r0
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d105      	bne.n	8014ffa <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014fee:	4b47      	ldr	r3, [pc, #284]	; (801510c <ip4_input+0x240>)
 8014ff0:	691b      	ldr	r3, [r3, #16]
 8014ff2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014ff6:	2be0      	cmp	r3, #224	; 0xe0
 8014ff8:	d104      	bne.n	8015004 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014ffa:	6878      	ldr	r0, [r7, #4]
 8014ffc:	f7f8 fecc 	bl	800dd98 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015000:	2300      	movs	r3, #0
 8015002:	e07e      	b.n	8015102 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015004:	693b      	ldr	r3, [r7, #16]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d104      	bne.n	8015014 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801500a:	6878      	ldr	r0, [r7, #4]
 801500c:	f7f8 fec4 	bl	800dd98 <pbuf_free>
    return ERR_OK;
 8015010:	2300      	movs	r3, #0
 8015012:	e076      	b.n	8015102 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015014:	697b      	ldr	r3, [r7, #20]
 8015016:	88db      	ldrh	r3, [r3, #6]
 8015018:	b29b      	uxth	r3, r3
 801501a:	461a      	mov	r2, r3
 801501c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015020:	4013      	ands	r3, r2
 8015022:	2b00      	cmp	r3, #0
 8015024:	d00b      	beq.n	801503e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015026:	6878      	ldr	r0, [r7, #4]
 8015028:	f000 fc92 	bl	8015950 <ip4_reass>
 801502c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d101      	bne.n	8015038 <ip4_input+0x16c>
      return ERR_OK;
 8015034:	2300      	movs	r3, #0
 8015036:	e064      	b.n	8015102 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	685b      	ldr	r3, [r3, #4]
 801503c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801503e:	4a33      	ldr	r2, [pc, #204]	; (801510c <ip4_input+0x240>)
 8015040:	693b      	ldr	r3, [r7, #16]
 8015042:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015044:	4a31      	ldr	r2, [pc, #196]	; (801510c <ip4_input+0x240>)
 8015046:	683b      	ldr	r3, [r7, #0]
 8015048:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801504a:	4a30      	ldr	r2, [pc, #192]	; (801510c <ip4_input+0x240>)
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015050:	697b      	ldr	r3, [r7, #20]
 8015052:	781b      	ldrb	r3, [r3, #0]
 8015054:	f003 030f 	and.w	r3, r3, #15
 8015058:	b2db      	uxtb	r3, r3
 801505a:	009b      	lsls	r3, r3, #2
 801505c:	b2db      	uxtb	r3, r3
 801505e:	b29a      	uxth	r2, r3
 8015060:	4b2a      	ldr	r3, [pc, #168]	; (801510c <ip4_input+0x240>)
 8015062:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015064:	89fb      	ldrh	r3, [r7, #14]
 8015066:	4619      	mov	r1, r3
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	f7f8 fe0f 	bl	800dc8c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801506e:	697b      	ldr	r3, [r7, #20]
 8015070:	7a5b      	ldrb	r3, [r3, #9]
 8015072:	2b11      	cmp	r3, #17
 8015074:	d006      	beq.n	8015084 <ip4_input+0x1b8>
 8015076:	2b11      	cmp	r3, #17
 8015078:	dc13      	bgt.n	80150a2 <ip4_input+0x1d6>
 801507a:	2b01      	cmp	r3, #1
 801507c:	d00c      	beq.n	8015098 <ip4_input+0x1cc>
 801507e:	2b06      	cmp	r3, #6
 8015080:	d005      	beq.n	801508e <ip4_input+0x1c2>
 8015082:	e00e      	b.n	80150a2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015084:	6839      	ldr	r1, [r7, #0]
 8015086:	6878      	ldr	r0, [r7, #4]
 8015088:	f7fe fc68 	bl	801395c <udp_input>
        break;
 801508c:	e026      	b.n	80150dc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801508e:	6839      	ldr	r1, [r7, #0]
 8015090:	6878      	ldr	r0, [r7, #4]
 8015092:	f7fa fcb5 	bl	800fa00 <tcp_input>
        break;
 8015096:	e021      	b.n	80150dc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015098:	6839      	ldr	r1, [r7, #0]
 801509a:	6878      	ldr	r0, [r7, #4]
 801509c:	f7ff fcee 	bl	8014a7c <icmp_input>
        break;
 80150a0:	e01c      	b.n	80150dc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80150a2:	4b1a      	ldr	r3, [pc, #104]	; (801510c <ip4_input+0x240>)
 80150a4:	695b      	ldr	r3, [r3, #20]
 80150a6:	6939      	ldr	r1, [r7, #16]
 80150a8:	4618      	mov	r0, r3
 80150aa:	f000 f90b 	bl	80152c4 <ip4_addr_isbroadcast_u32>
 80150ae:	4603      	mov	r3, r0
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d10f      	bne.n	80150d4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80150b4:	4b15      	ldr	r3, [pc, #84]	; (801510c <ip4_input+0x240>)
 80150b6:	695b      	ldr	r3, [r3, #20]
 80150b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80150bc:	2be0      	cmp	r3, #224	; 0xe0
 80150be:	d009      	beq.n	80150d4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80150c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80150c4:	4619      	mov	r1, r3
 80150c6:	6878      	ldr	r0, [r7, #4]
 80150c8:	f7f8 fe53 	bl	800dd72 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80150cc:	2102      	movs	r1, #2
 80150ce:	6878      	ldr	r0, [r7, #4]
 80150d0:	f7ff fdd8 	bl	8014c84 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80150d4:	6878      	ldr	r0, [r7, #4]
 80150d6:	f7f8 fe5f 	bl	800dd98 <pbuf_free>
        break;
 80150da:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80150dc:	4b0b      	ldr	r3, [pc, #44]	; (801510c <ip4_input+0x240>)
 80150de:	2200      	movs	r2, #0
 80150e0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80150e2:	4b0a      	ldr	r3, [pc, #40]	; (801510c <ip4_input+0x240>)
 80150e4:	2200      	movs	r2, #0
 80150e6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80150e8:	4b08      	ldr	r3, [pc, #32]	; (801510c <ip4_input+0x240>)
 80150ea:	2200      	movs	r2, #0
 80150ec:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80150ee:	4b07      	ldr	r3, [pc, #28]	; (801510c <ip4_input+0x240>)
 80150f0:	2200      	movs	r2, #0
 80150f2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80150f4:	4b05      	ldr	r3, [pc, #20]	; (801510c <ip4_input+0x240>)
 80150f6:	2200      	movs	r2, #0
 80150f8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80150fa:	4b04      	ldr	r3, [pc, #16]	; (801510c <ip4_input+0x240>)
 80150fc:	2200      	movs	r2, #0
 80150fe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015100:	2300      	movs	r3, #0
}
 8015102:	4618      	mov	r0, r3
 8015104:	3718      	adds	r7, #24
 8015106:	46bd      	mov	sp, r7
 8015108:	bd80      	pop	{r7, pc}
 801510a:	bf00      	nop
 801510c:	200079e8 	.word	0x200079e8
 8015110:	2000b0ec 	.word	0x2000b0ec

08015114 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015114:	b580      	push	{r7, lr}
 8015116:	b08a      	sub	sp, #40	; 0x28
 8015118:	af04      	add	r7, sp, #16
 801511a:	60f8      	str	r0, [r7, #12]
 801511c:	60b9      	str	r1, [r7, #8]
 801511e:	607a      	str	r2, [r7, #4]
 8015120:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015122:	68bb      	ldr	r3, [r7, #8]
 8015124:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d009      	beq.n	8015140 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801512c:	68bb      	ldr	r3, [r7, #8]
 801512e:	2b00      	cmp	r3, #0
 8015130:	d003      	beq.n	801513a <ip4_output_if+0x26>
 8015132:	68bb      	ldr	r3, [r7, #8]
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d102      	bne.n	8015140 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801513a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801513c:	3304      	adds	r3, #4
 801513e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015140:	78fa      	ldrb	r2, [r7, #3]
 8015142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015144:	9302      	str	r3, [sp, #8]
 8015146:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801514a:	9301      	str	r3, [sp, #4]
 801514c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015150:	9300      	str	r3, [sp, #0]
 8015152:	4613      	mov	r3, r2
 8015154:	687a      	ldr	r2, [r7, #4]
 8015156:	6979      	ldr	r1, [r7, #20]
 8015158:	68f8      	ldr	r0, [r7, #12]
 801515a:	f000 f805 	bl	8015168 <ip4_output_if_src>
 801515e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015160:	4618      	mov	r0, r3
 8015162:	3718      	adds	r7, #24
 8015164:	46bd      	mov	sp, r7
 8015166:	bd80      	pop	{r7, pc}

08015168 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015168:	b580      	push	{r7, lr}
 801516a:	b088      	sub	sp, #32
 801516c:	af00      	add	r7, sp, #0
 801516e:	60f8      	str	r0, [r7, #12]
 8015170:	60b9      	str	r1, [r7, #8]
 8015172:	607a      	str	r2, [r7, #4]
 8015174:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	7b9b      	ldrb	r3, [r3, #14]
 801517a:	2b01      	cmp	r3, #1
 801517c:	d006      	beq.n	801518c <ip4_output_if_src+0x24>
 801517e:	4b4b      	ldr	r3, [pc, #300]	; (80152ac <ip4_output_if_src+0x144>)
 8015180:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015184:	494a      	ldr	r1, [pc, #296]	; (80152b0 <ip4_output_if_src+0x148>)
 8015186:	484b      	ldr	r0, [pc, #300]	; (80152b4 <ip4_output_if_src+0x14c>)
 8015188:	f001 fe4c 	bl	8016e24 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d060      	beq.n	8015254 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015192:	2314      	movs	r3, #20
 8015194:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015196:	2114      	movs	r1, #20
 8015198:	68f8      	ldr	r0, [r7, #12]
 801519a:	f7f8 fd67 	bl	800dc6c <pbuf_add_header>
 801519e:	4603      	mov	r3, r0
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d002      	beq.n	80151aa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80151a4:	f06f 0301 	mvn.w	r3, #1
 80151a8:	e07c      	b.n	80152a4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	685b      	ldr	r3, [r3, #4]
 80151ae:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	895b      	ldrh	r3, [r3, #10]
 80151b4:	2b13      	cmp	r3, #19
 80151b6:	d806      	bhi.n	80151c6 <ip4_output_if_src+0x5e>
 80151b8:	4b3c      	ldr	r3, [pc, #240]	; (80152ac <ip4_output_if_src+0x144>)
 80151ba:	f44f 7262 	mov.w	r2, #904	; 0x388
 80151be:	493e      	ldr	r1, [pc, #248]	; (80152b8 <ip4_output_if_src+0x150>)
 80151c0:	483c      	ldr	r0, [pc, #240]	; (80152b4 <ip4_output_if_src+0x14c>)
 80151c2:	f001 fe2f 	bl	8016e24 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80151c6:	69fb      	ldr	r3, [r7, #28]
 80151c8:	78fa      	ldrb	r2, [r7, #3]
 80151ca:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80151cc:	69fb      	ldr	r3, [r7, #28]
 80151ce:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80151d2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	681a      	ldr	r2, [r3, #0]
 80151d8:	69fb      	ldr	r3, [r7, #28]
 80151da:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80151dc:	8b7b      	ldrh	r3, [r7, #26]
 80151de:	089b      	lsrs	r3, r3, #2
 80151e0:	b29b      	uxth	r3, r3
 80151e2:	b2db      	uxtb	r3, r3
 80151e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80151e8:	b2da      	uxtb	r2, r3
 80151ea:	69fb      	ldr	r3, [r7, #28]
 80151ec:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80151ee:	69fb      	ldr	r3, [r7, #28]
 80151f0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80151f4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	891b      	ldrh	r3, [r3, #8]
 80151fa:	4618      	mov	r0, r3
 80151fc:	f7f7 fa98 	bl	800c730 <lwip_htons>
 8015200:	4603      	mov	r3, r0
 8015202:	461a      	mov	r2, r3
 8015204:	69fb      	ldr	r3, [r7, #28]
 8015206:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015208:	69fb      	ldr	r3, [r7, #28]
 801520a:	2200      	movs	r2, #0
 801520c:	719a      	strb	r2, [r3, #6]
 801520e:	2200      	movs	r2, #0
 8015210:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015212:	4b2a      	ldr	r3, [pc, #168]	; (80152bc <ip4_output_if_src+0x154>)
 8015214:	881b      	ldrh	r3, [r3, #0]
 8015216:	4618      	mov	r0, r3
 8015218:	f7f7 fa8a 	bl	800c730 <lwip_htons>
 801521c:	4603      	mov	r3, r0
 801521e:	461a      	mov	r2, r3
 8015220:	69fb      	ldr	r3, [r7, #28]
 8015222:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015224:	4b25      	ldr	r3, [pc, #148]	; (80152bc <ip4_output_if_src+0x154>)
 8015226:	881b      	ldrh	r3, [r3, #0]
 8015228:	3301      	adds	r3, #1
 801522a:	b29a      	uxth	r2, r3
 801522c:	4b23      	ldr	r3, [pc, #140]	; (80152bc <ip4_output_if_src+0x154>)
 801522e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015230:	68bb      	ldr	r3, [r7, #8]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d104      	bne.n	8015240 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015236:	4b22      	ldr	r3, [pc, #136]	; (80152c0 <ip4_output_if_src+0x158>)
 8015238:	681a      	ldr	r2, [r3, #0]
 801523a:	69fb      	ldr	r3, [r7, #28]
 801523c:	60da      	str	r2, [r3, #12]
 801523e:	e003      	b.n	8015248 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015240:	68bb      	ldr	r3, [r7, #8]
 8015242:	681a      	ldr	r2, [r3, #0]
 8015244:	69fb      	ldr	r3, [r7, #28]
 8015246:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015248:	69fb      	ldr	r3, [r7, #28]
 801524a:	2200      	movs	r2, #0
 801524c:	729a      	strb	r2, [r3, #10]
 801524e:	2200      	movs	r2, #0
 8015250:	72da      	strb	r2, [r3, #11]
 8015252:	e00f      	b.n	8015274 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	895b      	ldrh	r3, [r3, #10]
 8015258:	2b13      	cmp	r3, #19
 801525a:	d802      	bhi.n	8015262 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801525c:	f06f 0301 	mvn.w	r3, #1
 8015260:	e020      	b.n	80152a4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	685b      	ldr	r3, [r3, #4]
 8015266:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015268:	69fb      	ldr	r3, [r7, #28]
 801526a:	691b      	ldr	r3, [r3, #16]
 801526c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801526e:	f107 0314 	add.w	r3, r7, #20
 8015272:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015276:	8c1b      	ldrh	r3, [r3, #32]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d00c      	beq.n	8015296 <ip4_output_if_src+0x12e>
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	891a      	ldrh	r2, [r3, #8]
 8015280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015282:	8c1b      	ldrh	r3, [r3, #32]
 8015284:	429a      	cmp	r2, r3
 8015286:	d906      	bls.n	8015296 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015288:	687a      	ldr	r2, [r7, #4]
 801528a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801528c:	68f8      	ldr	r0, [r7, #12]
 801528e:	f000 fd4d 	bl	8015d2c <ip4_frag>
 8015292:	4603      	mov	r3, r0
 8015294:	e006      	b.n	80152a4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015298:	695b      	ldr	r3, [r3, #20]
 801529a:	687a      	ldr	r2, [r7, #4]
 801529c:	68f9      	ldr	r1, [r7, #12]
 801529e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80152a0:	4798      	blx	r3
 80152a2:	4603      	mov	r3, r0
}
 80152a4:	4618      	mov	r0, r3
 80152a6:	3720      	adds	r7, #32
 80152a8:	46bd      	mov	sp, r7
 80152aa:	bd80      	pop	{r7, pc}
 80152ac:	0801a748 	.word	0x0801a748
 80152b0:	0801a77c 	.word	0x0801a77c
 80152b4:	0801a788 	.word	0x0801a788
 80152b8:	0801a7b0 	.word	0x0801a7b0
 80152bc:	20004376 	.word	0x20004376
 80152c0:	0801ac0c 	.word	0x0801ac0c

080152c4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80152c4:	b480      	push	{r7}
 80152c6:	b085      	sub	sp, #20
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	6078      	str	r0, [r7, #4]
 80152cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152d8:	d002      	beq.n	80152e0 <ip4_addr_isbroadcast_u32+0x1c>
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d101      	bne.n	80152e4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80152e0:	2301      	movs	r3, #1
 80152e2:	e02a      	b.n	801533a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80152e4:	683b      	ldr	r3, [r7, #0]
 80152e6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80152ea:	f003 0302 	and.w	r3, r3, #2
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d101      	bne.n	80152f6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80152f2:	2300      	movs	r3, #0
 80152f4:	e021      	b.n	801533a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80152f6:	683b      	ldr	r3, [r7, #0]
 80152f8:	3304      	adds	r3, #4
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	687a      	ldr	r2, [r7, #4]
 80152fe:	429a      	cmp	r2, r3
 8015300:	d101      	bne.n	8015306 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015302:	2300      	movs	r3, #0
 8015304:	e019      	b.n	801533a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015306:	68fa      	ldr	r2, [r7, #12]
 8015308:	683b      	ldr	r3, [r7, #0]
 801530a:	3304      	adds	r3, #4
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	405a      	eors	r2, r3
 8015310:	683b      	ldr	r3, [r7, #0]
 8015312:	3308      	adds	r3, #8
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	4013      	ands	r3, r2
 8015318:	2b00      	cmp	r3, #0
 801531a:	d10d      	bne.n	8015338 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801531c:	683b      	ldr	r3, [r7, #0]
 801531e:	3308      	adds	r3, #8
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	43da      	mvns	r2, r3
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015328:	683b      	ldr	r3, [r7, #0]
 801532a:	3308      	adds	r3, #8
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015330:	429a      	cmp	r2, r3
 8015332:	d101      	bne.n	8015338 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015334:	2301      	movs	r3, #1
 8015336:	e000      	b.n	801533a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015338:	2300      	movs	r3, #0
  }
}
 801533a:	4618      	mov	r0, r3
 801533c:	3714      	adds	r7, #20
 801533e:	46bd      	mov	sp, r7
 8015340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015344:	4770      	bx	lr
	...

08015348 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b084      	sub	sp, #16
 801534c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801534e:	2300      	movs	r3, #0
 8015350:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015352:	4b12      	ldr	r3, [pc, #72]	; (801539c <ip_reass_tmr+0x54>)
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015358:	e018      	b.n	801538c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	7fdb      	ldrb	r3, [r3, #31]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d00b      	beq.n	801537a <ip_reass_tmr+0x32>
      r->timer--;
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	7fdb      	ldrb	r3, [r3, #31]
 8015366:	3b01      	subs	r3, #1
 8015368:	b2da      	uxtb	r2, r3
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	60fb      	str	r3, [r7, #12]
 8015378:	e008      	b.n	801538c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015384:	68b9      	ldr	r1, [r7, #8]
 8015386:	6878      	ldr	r0, [r7, #4]
 8015388:	f000 f80a 	bl	80153a0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d1e3      	bne.n	801535a <ip_reass_tmr+0x12>
    }
  }
}
 8015392:	bf00      	nop
 8015394:	bf00      	nop
 8015396:	3710      	adds	r7, #16
 8015398:	46bd      	mov	sp, r7
 801539a:	bd80      	pop	{r7, pc}
 801539c:	20004378 	.word	0x20004378

080153a0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b088      	sub	sp, #32
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
 80153a8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80153aa:	2300      	movs	r3, #0
 80153ac:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80153ae:	683a      	ldr	r2, [r7, #0]
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	429a      	cmp	r2, r3
 80153b4:	d105      	bne.n	80153c2 <ip_reass_free_complete_datagram+0x22>
 80153b6:	4b45      	ldr	r3, [pc, #276]	; (80154cc <ip_reass_free_complete_datagram+0x12c>)
 80153b8:	22ab      	movs	r2, #171	; 0xab
 80153ba:	4945      	ldr	r1, [pc, #276]	; (80154d0 <ip_reass_free_complete_datagram+0x130>)
 80153bc:	4845      	ldr	r0, [pc, #276]	; (80154d4 <ip_reass_free_complete_datagram+0x134>)
 80153be:	f001 fd31 	bl	8016e24 <iprintf>
  if (prev != NULL) {
 80153c2:	683b      	ldr	r3, [r7, #0]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d00a      	beq.n	80153de <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80153c8:	683b      	ldr	r3, [r7, #0]
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	687a      	ldr	r2, [r7, #4]
 80153ce:	429a      	cmp	r2, r3
 80153d0:	d005      	beq.n	80153de <ip_reass_free_complete_datagram+0x3e>
 80153d2:	4b3e      	ldr	r3, [pc, #248]	; (80154cc <ip_reass_free_complete_datagram+0x12c>)
 80153d4:	22ad      	movs	r2, #173	; 0xad
 80153d6:	4940      	ldr	r1, [pc, #256]	; (80154d8 <ip_reass_free_complete_datagram+0x138>)
 80153d8:	483e      	ldr	r0, [pc, #248]	; (80154d4 <ip_reass_free_complete_datagram+0x134>)
 80153da:	f001 fd23 	bl	8016e24 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	685b      	ldr	r3, [r3, #4]
 80153e2:	685b      	ldr	r3, [r3, #4]
 80153e4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80153e6:	697b      	ldr	r3, [r7, #20]
 80153e8:	889b      	ldrh	r3, [r3, #4]
 80153ea:	b29b      	uxth	r3, r3
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d12a      	bne.n	8015446 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	685b      	ldr	r3, [r3, #4]
 80153f4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80153f6:	697b      	ldr	r3, [r7, #20]
 80153f8:	681a      	ldr	r2, [r3, #0]
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80153fe:	69bb      	ldr	r3, [r7, #24]
 8015400:	6858      	ldr	r0, [r3, #4]
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	3308      	adds	r3, #8
 8015406:	2214      	movs	r2, #20
 8015408:	4619      	mov	r1, r3
 801540a:	f001 fcf5 	bl	8016df8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801540e:	2101      	movs	r1, #1
 8015410:	69b8      	ldr	r0, [r7, #24]
 8015412:	f7ff fc47 	bl	8014ca4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015416:	69b8      	ldr	r0, [r7, #24]
 8015418:	f7f8 fd4c 	bl	800deb4 <pbuf_clen>
 801541c:	4603      	mov	r3, r0
 801541e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015420:	8bfa      	ldrh	r2, [r7, #30]
 8015422:	8a7b      	ldrh	r3, [r7, #18]
 8015424:	4413      	add	r3, r2
 8015426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801542a:	db05      	blt.n	8015438 <ip_reass_free_complete_datagram+0x98>
 801542c:	4b27      	ldr	r3, [pc, #156]	; (80154cc <ip_reass_free_complete_datagram+0x12c>)
 801542e:	22bc      	movs	r2, #188	; 0xbc
 8015430:	492a      	ldr	r1, [pc, #168]	; (80154dc <ip_reass_free_complete_datagram+0x13c>)
 8015432:	4828      	ldr	r0, [pc, #160]	; (80154d4 <ip_reass_free_complete_datagram+0x134>)
 8015434:	f001 fcf6 	bl	8016e24 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015438:	8bfa      	ldrh	r2, [r7, #30]
 801543a:	8a7b      	ldrh	r3, [r7, #18]
 801543c:	4413      	add	r3, r2
 801543e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015440:	69b8      	ldr	r0, [r7, #24]
 8015442:	f7f8 fca9 	bl	800dd98 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	685b      	ldr	r3, [r3, #4]
 801544a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801544c:	e01f      	b.n	801548e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801544e:	69bb      	ldr	r3, [r7, #24]
 8015450:	685b      	ldr	r3, [r3, #4]
 8015452:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015454:	69bb      	ldr	r3, [r7, #24]
 8015456:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015458:	697b      	ldr	r3, [r7, #20]
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801545e:	68f8      	ldr	r0, [r7, #12]
 8015460:	f7f8 fd28 	bl	800deb4 <pbuf_clen>
 8015464:	4603      	mov	r3, r0
 8015466:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015468:	8bfa      	ldrh	r2, [r7, #30]
 801546a:	8a7b      	ldrh	r3, [r7, #18]
 801546c:	4413      	add	r3, r2
 801546e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015472:	db05      	blt.n	8015480 <ip_reass_free_complete_datagram+0xe0>
 8015474:	4b15      	ldr	r3, [pc, #84]	; (80154cc <ip_reass_free_complete_datagram+0x12c>)
 8015476:	22cc      	movs	r2, #204	; 0xcc
 8015478:	4918      	ldr	r1, [pc, #96]	; (80154dc <ip_reass_free_complete_datagram+0x13c>)
 801547a:	4816      	ldr	r0, [pc, #88]	; (80154d4 <ip_reass_free_complete_datagram+0x134>)
 801547c:	f001 fcd2 	bl	8016e24 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015480:	8bfa      	ldrh	r2, [r7, #30]
 8015482:	8a7b      	ldrh	r3, [r7, #18]
 8015484:	4413      	add	r3, r2
 8015486:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015488:	68f8      	ldr	r0, [r7, #12]
 801548a:	f7f8 fc85 	bl	800dd98 <pbuf_free>
  while (p != NULL) {
 801548e:	69bb      	ldr	r3, [r7, #24]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d1dc      	bne.n	801544e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015494:	6839      	ldr	r1, [r7, #0]
 8015496:	6878      	ldr	r0, [r7, #4]
 8015498:	f000 f8c2 	bl	8015620 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801549c:	4b10      	ldr	r3, [pc, #64]	; (80154e0 <ip_reass_free_complete_datagram+0x140>)
 801549e:	881b      	ldrh	r3, [r3, #0]
 80154a0:	8bfa      	ldrh	r2, [r7, #30]
 80154a2:	429a      	cmp	r2, r3
 80154a4:	d905      	bls.n	80154b2 <ip_reass_free_complete_datagram+0x112>
 80154a6:	4b09      	ldr	r3, [pc, #36]	; (80154cc <ip_reass_free_complete_datagram+0x12c>)
 80154a8:	22d2      	movs	r2, #210	; 0xd2
 80154aa:	490e      	ldr	r1, [pc, #56]	; (80154e4 <ip_reass_free_complete_datagram+0x144>)
 80154ac:	4809      	ldr	r0, [pc, #36]	; (80154d4 <ip_reass_free_complete_datagram+0x134>)
 80154ae:	f001 fcb9 	bl	8016e24 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80154b2:	4b0b      	ldr	r3, [pc, #44]	; (80154e0 <ip_reass_free_complete_datagram+0x140>)
 80154b4:	881a      	ldrh	r2, [r3, #0]
 80154b6:	8bfb      	ldrh	r3, [r7, #30]
 80154b8:	1ad3      	subs	r3, r2, r3
 80154ba:	b29a      	uxth	r2, r3
 80154bc:	4b08      	ldr	r3, [pc, #32]	; (80154e0 <ip_reass_free_complete_datagram+0x140>)
 80154be:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80154c0:	8bfb      	ldrh	r3, [r7, #30]
}
 80154c2:	4618      	mov	r0, r3
 80154c4:	3720      	adds	r7, #32
 80154c6:	46bd      	mov	sp, r7
 80154c8:	bd80      	pop	{r7, pc}
 80154ca:	bf00      	nop
 80154cc:	0801a7e0 	.word	0x0801a7e0
 80154d0:	0801a81c 	.word	0x0801a81c
 80154d4:	0801a828 	.word	0x0801a828
 80154d8:	0801a850 	.word	0x0801a850
 80154dc:	0801a864 	.word	0x0801a864
 80154e0:	2000437c 	.word	0x2000437c
 80154e4:	0801a884 	.word	0x0801a884

080154e8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b08a      	sub	sp, #40	; 0x28
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
 80154f0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80154f2:	2300      	movs	r3, #0
 80154f4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80154f6:	2300      	movs	r3, #0
 80154f8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80154fa:	2300      	movs	r3, #0
 80154fc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80154fe:	2300      	movs	r3, #0
 8015500:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015502:	2300      	movs	r3, #0
 8015504:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015506:	4b28      	ldr	r3, [pc, #160]	; (80155a8 <ip_reass_remove_oldest_datagram+0xc0>)
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801550c:	e030      	b.n	8015570 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015510:	695a      	ldr	r2, [r3, #20]
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	68db      	ldr	r3, [r3, #12]
 8015516:	429a      	cmp	r2, r3
 8015518:	d10c      	bne.n	8015534 <ip_reass_remove_oldest_datagram+0x4c>
 801551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801551c:	699a      	ldr	r2, [r3, #24]
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	691b      	ldr	r3, [r3, #16]
 8015522:	429a      	cmp	r2, r3
 8015524:	d106      	bne.n	8015534 <ip_reass_remove_oldest_datagram+0x4c>
 8015526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015528:	899a      	ldrh	r2, [r3, #12]
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	889b      	ldrh	r3, [r3, #4]
 801552e:	b29b      	uxth	r3, r3
 8015530:	429a      	cmp	r2, r3
 8015532:	d014      	beq.n	801555e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015534:	693b      	ldr	r3, [r7, #16]
 8015536:	3301      	adds	r3, #1
 8015538:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801553a:	6a3b      	ldr	r3, [r7, #32]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d104      	bne.n	801554a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015542:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015544:	69fb      	ldr	r3, [r7, #28]
 8015546:	61bb      	str	r3, [r7, #24]
 8015548:	e009      	b.n	801555e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801554c:	7fda      	ldrb	r2, [r3, #31]
 801554e:	6a3b      	ldr	r3, [r7, #32]
 8015550:	7fdb      	ldrb	r3, [r3, #31]
 8015552:	429a      	cmp	r2, r3
 8015554:	d803      	bhi.n	801555e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015558:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801555a:	69fb      	ldr	r3, [r7, #28]
 801555c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d001      	beq.n	801556a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015568:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015572:	2b00      	cmp	r3, #0
 8015574:	d1cb      	bne.n	801550e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015576:	6a3b      	ldr	r3, [r7, #32]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d008      	beq.n	801558e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801557c:	69b9      	ldr	r1, [r7, #24]
 801557e:	6a38      	ldr	r0, [r7, #32]
 8015580:	f7ff ff0e 	bl	80153a0 <ip_reass_free_complete_datagram>
 8015584:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015586:	697a      	ldr	r2, [r7, #20]
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	4413      	add	r3, r2
 801558c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801558e:	697a      	ldr	r2, [r7, #20]
 8015590:	683b      	ldr	r3, [r7, #0]
 8015592:	429a      	cmp	r2, r3
 8015594:	da02      	bge.n	801559c <ip_reass_remove_oldest_datagram+0xb4>
 8015596:	693b      	ldr	r3, [r7, #16]
 8015598:	2b01      	cmp	r3, #1
 801559a:	dcac      	bgt.n	80154f6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801559c:	697b      	ldr	r3, [r7, #20]
}
 801559e:	4618      	mov	r0, r3
 80155a0:	3728      	adds	r7, #40	; 0x28
 80155a2:	46bd      	mov	sp, r7
 80155a4:	bd80      	pop	{r7, pc}
 80155a6:	bf00      	nop
 80155a8:	20004378 	.word	0x20004378

080155ac <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b084      	sub	sp, #16
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
 80155b4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80155b6:	2004      	movs	r0, #4
 80155b8:	f7f7 fd70 	bl	800d09c <memp_malloc>
 80155bc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d110      	bne.n	80155e6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80155c4:	6839      	ldr	r1, [r7, #0]
 80155c6:	6878      	ldr	r0, [r7, #4]
 80155c8:	f7ff ff8e 	bl	80154e8 <ip_reass_remove_oldest_datagram>
 80155cc:	4602      	mov	r2, r0
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	4293      	cmp	r3, r2
 80155d2:	dc03      	bgt.n	80155dc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80155d4:	2004      	movs	r0, #4
 80155d6:	f7f7 fd61 	bl	800d09c <memp_malloc>
 80155da:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d101      	bne.n	80155e6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80155e2:	2300      	movs	r3, #0
 80155e4:	e016      	b.n	8015614 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80155e6:	2220      	movs	r2, #32
 80155e8:	2100      	movs	r1, #0
 80155ea:	68f8      	ldr	r0, [r7, #12]
 80155ec:	f001 fc12 	bl	8016e14 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	220f      	movs	r2, #15
 80155f4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80155f6:	4b09      	ldr	r3, [pc, #36]	; (801561c <ip_reass_enqueue_new_datagram+0x70>)
 80155f8:	681a      	ldr	r2, [r3, #0]
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80155fe:	4a07      	ldr	r2, [pc, #28]	; (801561c <ip_reass_enqueue_new_datagram+0x70>)
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	3308      	adds	r3, #8
 8015608:	2214      	movs	r2, #20
 801560a:	6879      	ldr	r1, [r7, #4]
 801560c:	4618      	mov	r0, r3
 801560e:	f001 fbf3 	bl	8016df8 <memcpy>
  return ipr;
 8015612:	68fb      	ldr	r3, [r7, #12]
}
 8015614:	4618      	mov	r0, r3
 8015616:	3710      	adds	r7, #16
 8015618:	46bd      	mov	sp, r7
 801561a:	bd80      	pop	{r7, pc}
 801561c:	20004378 	.word	0x20004378

08015620 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015620:	b580      	push	{r7, lr}
 8015622:	b082      	sub	sp, #8
 8015624:	af00      	add	r7, sp, #0
 8015626:	6078      	str	r0, [r7, #4]
 8015628:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801562a:	4b10      	ldr	r3, [pc, #64]	; (801566c <ip_reass_dequeue_datagram+0x4c>)
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	687a      	ldr	r2, [r7, #4]
 8015630:	429a      	cmp	r2, r3
 8015632:	d104      	bne.n	801563e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	4a0c      	ldr	r2, [pc, #48]	; (801566c <ip_reass_dequeue_datagram+0x4c>)
 801563a:	6013      	str	r3, [r2, #0]
 801563c:	e00d      	b.n	801565a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	2b00      	cmp	r3, #0
 8015642:	d106      	bne.n	8015652 <ip_reass_dequeue_datagram+0x32>
 8015644:	4b0a      	ldr	r3, [pc, #40]	; (8015670 <ip_reass_dequeue_datagram+0x50>)
 8015646:	f240 1245 	movw	r2, #325	; 0x145
 801564a:	490a      	ldr	r1, [pc, #40]	; (8015674 <ip_reass_dequeue_datagram+0x54>)
 801564c:	480a      	ldr	r0, [pc, #40]	; (8015678 <ip_reass_dequeue_datagram+0x58>)
 801564e:	f001 fbe9 	bl	8016e24 <iprintf>
    prev->next = ipr->next;
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	681a      	ldr	r2, [r3, #0]
 8015656:	683b      	ldr	r3, [r7, #0]
 8015658:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801565a:	6879      	ldr	r1, [r7, #4]
 801565c:	2004      	movs	r0, #4
 801565e:	f7f7 fd6f 	bl	800d140 <memp_free>
}
 8015662:	bf00      	nop
 8015664:	3708      	adds	r7, #8
 8015666:	46bd      	mov	sp, r7
 8015668:	bd80      	pop	{r7, pc}
 801566a:	bf00      	nop
 801566c:	20004378 	.word	0x20004378
 8015670:	0801a7e0 	.word	0x0801a7e0
 8015674:	0801a8a8 	.word	0x0801a8a8
 8015678:	0801a828 	.word	0x0801a828

0801567c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b08c      	sub	sp, #48	; 0x30
 8015680:	af00      	add	r7, sp, #0
 8015682:	60f8      	str	r0, [r7, #12]
 8015684:	60b9      	str	r1, [r7, #8]
 8015686:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015688:	2300      	movs	r3, #0
 801568a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801568c:	2301      	movs	r3, #1
 801568e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015690:	68bb      	ldr	r3, [r7, #8]
 8015692:	685b      	ldr	r3, [r3, #4]
 8015694:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015696:	69fb      	ldr	r3, [r7, #28]
 8015698:	885b      	ldrh	r3, [r3, #2]
 801569a:	b29b      	uxth	r3, r3
 801569c:	4618      	mov	r0, r3
 801569e:	f7f7 f847 	bl	800c730 <lwip_htons>
 80156a2:	4603      	mov	r3, r0
 80156a4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80156a6:	69fb      	ldr	r3, [r7, #28]
 80156a8:	781b      	ldrb	r3, [r3, #0]
 80156aa:	f003 030f 	and.w	r3, r3, #15
 80156ae:	b2db      	uxtb	r3, r3
 80156b0:	009b      	lsls	r3, r3, #2
 80156b2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80156b4:	7e7b      	ldrb	r3, [r7, #25]
 80156b6:	b29b      	uxth	r3, r3
 80156b8:	8b7a      	ldrh	r2, [r7, #26]
 80156ba:	429a      	cmp	r2, r3
 80156bc:	d202      	bcs.n	80156c4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80156be:	f04f 33ff 	mov.w	r3, #4294967295
 80156c2:	e135      	b.n	8015930 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80156c4:	7e7b      	ldrb	r3, [r7, #25]
 80156c6:	b29b      	uxth	r3, r3
 80156c8:	8b7a      	ldrh	r2, [r7, #26]
 80156ca:	1ad3      	subs	r3, r2, r3
 80156cc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80156ce:	69fb      	ldr	r3, [r7, #28]
 80156d0:	88db      	ldrh	r3, [r3, #6]
 80156d2:	b29b      	uxth	r3, r3
 80156d4:	4618      	mov	r0, r3
 80156d6:	f7f7 f82b 	bl	800c730 <lwip_htons>
 80156da:	4603      	mov	r3, r0
 80156dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80156e0:	b29b      	uxth	r3, r3
 80156e2:	00db      	lsls	r3, r3, #3
 80156e4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80156e6:	68bb      	ldr	r3, [r7, #8]
 80156e8:	685b      	ldr	r3, [r3, #4]
 80156ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80156ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ee:	2200      	movs	r2, #0
 80156f0:	701a      	strb	r2, [r3, #0]
 80156f2:	2200      	movs	r2, #0
 80156f4:	705a      	strb	r2, [r3, #1]
 80156f6:	2200      	movs	r2, #0
 80156f8:	709a      	strb	r2, [r3, #2]
 80156fa:	2200      	movs	r2, #0
 80156fc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80156fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015700:	8afa      	ldrh	r2, [r7, #22]
 8015702:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015704:	8afa      	ldrh	r2, [r7, #22]
 8015706:	8b7b      	ldrh	r3, [r7, #26]
 8015708:	4413      	add	r3, r2
 801570a:	b29a      	uxth	r2, r3
 801570c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801570e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015712:	88db      	ldrh	r3, [r3, #6]
 8015714:	b29b      	uxth	r3, r3
 8015716:	8afa      	ldrh	r2, [r7, #22]
 8015718:	429a      	cmp	r2, r3
 801571a:	d902      	bls.n	8015722 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801571c:	f04f 33ff 	mov.w	r3, #4294967295
 8015720:	e106      	b.n	8015930 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	685b      	ldr	r3, [r3, #4]
 8015726:	627b      	str	r3, [r7, #36]	; 0x24
 8015728:	e068      	b.n	80157fc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801572c:	685b      	ldr	r3, [r3, #4]
 801572e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015732:	889b      	ldrh	r3, [r3, #4]
 8015734:	b29a      	uxth	r2, r3
 8015736:	693b      	ldr	r3, [r7, #16]
 8015738:	889b      	ldrh	r3, [r3, #4]
 801573a:	b29b      	uxth	r3, r3
 801573c:	429a      	cmp	r2, r3
 801573e:	d235      	bcs.n	80157ac <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015744:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015748:	2b00      	cmp	r3, #0
 801574a:	d020      	beq.n	801578e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801574c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801574e:	889b      	ldrh	r3, [r3, #4]
 8015750:	b29a      	uxth	r2, r3
 8015752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015754:	88db      	ldrh	r3, [r3, #6]
 8015756:	b29b      	uxth	r3, r3
 8015758:	429a      	cmp	r2, r3
 801575a:	d307      	bcc.n	801576c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801575c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801575e:	88db      	ldrh	r3, [r3, #6]
 8015760:	b29a      	uxth	r2, r3
 8015762:	693b      	ldr	r3, [r7, #16]
 8015764:	889b      	ldrh	r3, [r3, #4]
 8015766:	b29b      	uxth	r3, r3
 8015768:	429a      	cmp	r2, r3
 801576a:	d902      	bls.n	8015772 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801576c:	f04f 33ff 	mov.w	r3, #4294967295
 8015770:	e0de      	b.n	8015930 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015774:	68ba      	ldr	r2, [r7, #8]
 8015776:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801577a:	88db      	ldrh	r3, [r3, #6]
 801577c:	b29a      	uxth	r2, r3
 801577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015780:	889b      	ldrh	r3, [r3, #4]
 8015782:	b29b      	uxth	r3, r3
 8015784:	429a      	cmp	r2, r3
 8015786:	d03d      	beq.n	8015804 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015788:	2300      	movs	r3, #0
 801578a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801578c:	e03a      	b.n	8015804 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801578e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015790:	88db      	ldrh	r3, [r3, #6]
 8015792:	b29a      	uxth	r2, r3
 8015794:	693b      	ldr	r3, [r7, #16]
 8015796:	889b      	ldrh	r3, [r3, #4]
 8015798:	b29b      	uxth	r3, r3
 801579a:	429a      	cmp	r2, r3
 801579c:	d902      	bls.n	80157a4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801579e:	f04f 33ff 	mov.w	r3, #4294967295
 80157a2:	e0c5      	b.n	8015930 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	68ba      	ldr	r2, [r7, #8]
 80157a8:	605a      	str	r2, [r3, #4]
      break;
 80157aa:	e02b      	b.n	8015804 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80157ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ae:	889b      	ldrh	r3, [r3, #4]
 80157b0:	b29a      	uxth	r2, r3
 80157b2:	693b      	ldr	r3, [r7, #16]
 80157b4:	889b      	ldrh	r3, [r3, #4]
 80157b6:	b29b      	uxth	r3, r3
 80157b8:	429a      	cmp	r2, r3
 80157ba:	d102      	bne.n	80157c2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80157bc:	f04f 33ff 	mov.w	r3, #4294967295
 80157c0:	e0b6      	b.n	8015930 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80157c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157c4:	889b      	ldrh	r3, [r3, #4]
 80157c6:	b29a      	uxth	r2, r3
 80157c8:	693b      	ldr	r3, [r7, #16]
 80157ca:	88db      	ldrh	r3, [r3, #6]
 80157cc:	b29b      	uxth	r3, r3
 80157ce:	429a      	cmp	r2, r3
 80157d0:	d202      	bcs.n	80157d8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80157d2:	f04f 33ff 	mov.w	r3, #4294967295
 80157d6:	e0ab      	b.n	8015930 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80157d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d009      	beq.n	80157f2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80157de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157e0:	88db      	ldrh	r3, [r3, #6]
 80157e2:	b29a      	uxth	r2, r3
 80157e4:	693b      	ldr	r3, [r7, #16]
 80157e6:	889b      	ldrh	r3, [r3, #4]
 80157e8:	b29b      	uxth	r3, r3
 80157ea:	429a      	cmp	r2, r3
 80157ec:	d001      	beq.n	80157f2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80157ee:	2300      	movs	r3, #0
 80157f0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80157f2:	693b      	ldr	r3, [r7, #16]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80157f8:	693b      	ldr	r3, [r7, #16]
 80157fa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80157fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d193      	bne.n	801572a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015802:	e000      	b.n	8015806 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015804:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015808:	2b00      	cmp	r3, #0
 801580a:	d12d      	bne.n	8015868 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801580e:	2b00      	cmp	r3, #0
 8015810:	d01c      	beq.n	801584c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015814:	88db      	ldrh	r3, [r3, #6]
 8015816:	b29a      	uxth	r2, r3
 8015818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801581a:	889b      	ldrh	r3, [r3, #4]
 801581c:	b29b      	uxth	r3, r3
 801581e:	429a      	cmp	r2, r3
 8015820:	d906      	bls.n	8015830 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015822:	4b45      	ldr	r3, [pc, #276]	; (8015938 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015824:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015828:	4944      	ldr	r1, [pc, #272]	; (801593c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801582a:	4845      	ldr	r0, [pc, #276]	; (8015940 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801582c:	f001 fafa 	bl	8016e24 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015832:	68ba      	ldr	r2, [r7, #8]
 8015834:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015838:	88db      	ldrh	r3, [r3, #6]
 801583a:	b29a      	uxth	r2, r3
 801583c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801583e:	889b      	ldrh	r3, [r3, #4]
 8015840:	b29b      	uxth	r3, r3
 8015842:	429a      	cmp	r2, r3
 8015844:	d010      	beq.n	8015868 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015846:	2300      	movs	r3, #0
 8015848:	623b      	str	r3, [r7, #32]
 801584a:	e00d      	b.n	8015868 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	685b      	ldr	r3, [r3, #4]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d006      	beq.n	8015862 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015854:	4b38      	ldr	r3, [pc, #224]	; (8015938 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015856:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801585a:	493a      	ldr	r1, [pc, #232]	; (8015944 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801585c:	4838      	ldr	r0, [pc, #224]	; (8015940 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801585e:	f001 fae1 	bl	8016e24 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	68ba      	ldr	r2, [r7, #8]
 8015866:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d105      	bne.n	801587a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	7f9b      	ldrb	r3, [r3, #30]
 8015872:	f003 0301 	and.w	r3, r3, #1
 8015876:	2b00      	cmp	r3, #0
 8015878:	d059      	beq.n	801592e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801587a:	6a3b      	ldr	r3, [r7, #32]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d04f      	beq.n	8015920 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	685b      	ldr	r3, [r3, #4]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d006      	beq.n	8015896 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	685b      	ldr	r3, [r3, #4]
 801588c:	685b      	ldr	r3, [r3, #4]
 801588e:	889b      	ldrh	r3, [r3, #4]
 8015890:	b29b      	uxth	r3, r3
 8015892:	2b00      	cmp	r3, #0
 8015894:	d002      	beq.n	801589c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015896:	2300      	movs	r3, #0
 8015898:	623b      	str	r3, [r7, #32]
 801589a:	e041      	b.n	8015920 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801589e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80158a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80158a6:	e012      	b.n	80158ce <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80158a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158aa:	685b      	ldr	r3, [r3, #4]
 80158ac:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80158ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158b0:	88db      	ldrh	r3, [r3, #6]
 80158b2:	b29a      	uxth	r2, r3
 80158b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158b6:	889b      	ldrh	r3, [r3, #4]
 80158b8:	b29b      	uxth	r3, r3
 80158ba:	429a      	cmp	r2, r3
 80158bc:	d002      	beq.n	80158c4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80158be:	2300      	movs	r3, #0
 80158c0:	623b      	str	r3, [r7, #32]
            break;
 80158c2:	e007      	b.n	80158d4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80158c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80158c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80158ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d1e9      	bne.n	80158a8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80158d4:	6a3b      	ldr	r3, [r7, #32]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d022      	beq.n	8015920 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	685b      	ldr	r3, [r3, #4]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d106      	bne.n	80158f0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80158e2:	4b15      	ldr	r3, [pc, #84]	; (8015938 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80158e4:	f240 12df 	movw	r2, #479	; 0x1df
 80158e8:	4917      	ldr	r1, [pc, #92]	; (8015948 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80158ea:	4815      	ldr	r0, [pc, #84]	; (8015940 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80158ec:	f001 fa9a 	bl	8016e24 <iprintf>
          LWIP_ASSERT("sanity check",
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	685b      	ldr	r3, [r3, #4]
 80158f4:	685b      	ldr	r3, [r3, #4]
 80158f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80158f8:	429a      	cmp	r2, r3
 80158fa:	d106      	bne.n	801590a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80158fc:	4b0e      	ldr	r3, [pc, #56]	; (8015938 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80158fe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015902:	4911      	ldr	r1, [pc, #68]	; (8015948 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015904:	480e      	ldr	r0, [pc, #56]	; (8015940 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015906:	f001 fa8d 	bl	8016e24 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801590a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	2b00      	cmp	r3, #0
 8015910:	d006      	beq.n	8015920 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015912:	4b09      	ldr	r3, [pc, #36]	; (8015938 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015914:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015918:	490c      	ldr	r1, [pc, #48]	; (801594c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801591a:	4809      	ldr	r0, [pc, #36]	; (8015940 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801591c:	f001 fa82 	bl	8016e24 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015920:	6a3b      	ldr	r3, [r7, #32]
 8015922:	2b00      	cmp	r3, #0
 8015924:	bf14      	ite	ne
 8015926:	2301      	movne	r3, #1
 8015928:	2300      	moveq	r3, #0
 801592a:	b2db      	uxtb	r3, r3
 801592c:	e000      	b.n	8015930 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801592e:	2300      	movs	r3, #0
}
 8015930:	4618      	mov	r0, r3
 8015932:	3730      	adds	r7, #48	; 0x30
 8015934:	46bd      	mov	sp, r7
 8015936:	bd80      	pop	{r7, pc}
 8015938:	0801a7e0 	.word	0x0801a7e0
 801593c:	0801a8c4 	.word	0x0801a8c4
 8015940:	0801a828 	.word	0x0801a828
 8015944:	0801a8e4 	.word	0x0801a8e4
 8015948:	0801a91c 	.word	0x0801a91c
 801594c:	0801a92c 	.word	0x0801a92c

08015950 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b08e      	sub	sp, #56	; 0x38
 8015954:	af00      	add	r7, sp, #0
 8015956:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	685b      	ldr	r3, [r3, #4]
 801595c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801595e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015960:	781b      	ldrb	r3, [r3, #0]
 8015962:	f003 030f 	and.w	r3, r3, #15
 8015966:	b2db      	uxtb	r3, r3
 8015968:	009b      	lsls	r3, r3, #2
 801596a:	b2db      	uxtb	r3, r3
 801596c:	2b14      	cmp	r3, #20
 801596e:	f040 8167 	bne.w	8015c40 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015974:	88db      	ldrh	r3, [r3, #6]
 8015976:	b29b      	uxth	r3, r3
 8015978:	4618      	mov	r0, r3
 801597a:	f7f6 fed9 	bl	800c730 <lwip_htons>
 801597e:	4603      	mov	r3, r0
 8015980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015984:	b29b      	uxth	r3, r3
 8015986:	00db      	lsls	r3, r3, #3
 8015988:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801598a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801598c:	885b      	ldrh	r3, [r3, #2]
 801598e:	b29b      	uxth	r3, r3
 8015990:	4618      	mov	r0, r3
 8015992:	f7f6 fecd 	bl	800c730 <lwip_htons>
 8015996:	4603      	mov	r3, r0
 8015998:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801599c:	781b      	ldrb	r3, [r3, #0]
 801599e:	f003 030f 	and.w	r3, r3, #15
 80159a2:	b2db      	uxtb	r3, r3
 80159a4:	009b      	lsls	r3, r3, #2
 80159a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80159aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80159ae:	b29b      	uxth	r3, r3
 80159b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80159b2:	429a      	cmp	r2, r3
 80159b4:	f0c0 8146 	bcc.w	8015c44 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80159b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80159bc:	b29b      	uxth	r3, r3
 80159be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80159c0:	1ad3      	subs	r3, r2, r3
 80159c2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80159c4:	6878      	ldr	r0, [r7, #4]
 80159c6:	f7f8 fa75 	bl	800deb4 <pbuf_clen>
 80159ca:	4603      	mov	r3, r0
 80159cc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80159ce:	4b9f      	ldr	r3, [pc, #636]	; (8015c4c <ip4_reass+0x2fc>)
 80159d0:	881b      	ldrh	r3, [r3, #0]
 80159d2:	461a      	mov	r2, r3
 80159d4:	8c3b      	ldrh	r3, [r7, #32]
 80159d6:	4413      	add	r3, r2
 80159d8:	2b0a      	cmp	r3, #10
 80159da:	dd10      	ble.n	80159fe <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80159dc:	8c3b      	ldrh	r3, [r7, #32]
 80159de:	4619      	mov	r1, r3
 80159e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159e2:	f7ff fd81 	bl	80154e8 <ip_reass_remove_oldest_datagram>
 80159e6:	4603      	mov	r3, r0
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	f000 812d 	beq.w	8015c48 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80159ee:	4b97      	ldr	r3, [pc, #604]	; (8015c4c <ip4_reass+0x2fc>)
 80159f0:	881b      	ldrh	r3, [r3, #0]
 80159f2:	461a      	mov	r2, r3
 80159f4:	8c3b      	ldrh	r3, [r7, #32]
 80159f6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80159f8:	2b0a      	cmp	r3, #10
 80159fa:	f300 8125 	bgt.w	8015c48 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80159fe:	4b94      	ldr	r3, [pc, #592]	; (8015c50 <ip4_reass+0x300>)
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	633b      	str	r3, [r7, #48]	; 0x30
 8015a04:	e015      	b.n	8015a32 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a08:	695a      	ldr	r2, [r3, #20]
 8015a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a0c:	68db      	ldr	r3, [r3, #12]
 8015a0e:	429a      	cmp	r2, r3
 8015a10:	d10c      	bne.n	8015a2c <ip4_reass+0xdc>
 8015a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a14:	699a      	ldr	r2, [r3, #24]
 8015a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a18:	691b      	ldr	r3, [r3, #16]
 8015a1a:	429a      	cmp	r2, r3
 8015a1c:	d106      	bne.n	8015a2c <ip4_reass+0xdc>
 8015a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a20:	899a      	ldrh	r2, [r3, #12]
 8015a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a24:	889b      	ldrh	r3, [r3, #4]
 8015a26:	b29b      	uxth	r3, r3
 8015a28:	429a      	cmp	r2, r3
 8015a2a:	d006      	beq.n	8015a3a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	633b      	str	r3, [r7, #48]	; 0x30
 8015a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d1e6      	bne.n	8015a06 <ip4_reass+0xb6>
 8015a38:	e000      	b.n	8015a3c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015a3a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d109      	bne.n	8015a56 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015a42:	8c3b      	ldrh	r3, [r7, #32]
 8015a44:	4619      	mov	r1, r3
 8015a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a48:	f7ff fdb0 	bl	80155ac <ip_reass_enqueue_new_datagram>
 8015a4c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d11c      	bne.n	8015a8e <ip4_reass+0x13e>
      goto nullreturn;
 8015a54:	e109      	b.n	8015c6a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a58:	88db      	ldrh	r3, [r3, #6]
 8015a5a:	b29b      	uxth	r3, r3
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	f7f6 fe67 	bl	800c730 <lwip_htons>
 8015a62:	4603      	mov	r3, r0
 8015a64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d110      	bne.n	8015a8e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a6e:	89db      	ldrh	r3, [r3, #14]
 8015a70:	4618      	mov	r0, r3
 8015a72:	f7f6 fe5d 	bl	800c730 <lwip_htons>
 8015a76:	4603      	mov	r3, r0
 8015a78:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d006      	beq.n	8015a8e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a82:	3308      	adds	r3, #8
 8015a84:	2214      	movs	r2, #20
 8015a86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015a88:	4618      	mov	r0, r3
 8015a8a:	f001 f9b5 	bl	8016df8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a90:	88db      	ldrh	r3, [r3, #6]
 8015a92:	b29b      	uxth	r3, r3
 8015a94:	f003 0320 	and.w	r3, r3, #32
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	bf0c      	ite	eq
 8015a9c:	2301      	moveq	r3, #1
 8015a9e:	2300      	movne	r3, #0
 8015aa0:	b2db      	uxtb	r3, r3
 8015aa2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015aa4:	69fb      	ldr	r3, [r7, #28]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d00e      	beq.n	8015ac8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015aaa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015aac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015aae:	4413      	add	r3, r2
 8015ab0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015ab2:	8b7a      	ldrh	r2, [r7, #26]
 8015ab4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015ab6:	429a      	cmp	r2, r3
 8015ab8:	f0c0 80a0 	bcc.w	8015bfc <ip4_reass+0x2ac>
 8015abc:	8b7b      	ldrh	r3, [r7, #26]
 8015abe:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015ac2:	4293      	cmp	r3, r2
 8015ac4:	f200 809a 	bhi.w	8015bfc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015ac8:	69fa      	ldr	r2, [r7, #28]
 8015aca:	6879      	ldr	r1, [r7, #4]
 8015acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ace:	f7ff fdd5 	bl	801567c <ip_reass_chain_frag_into_datagram_and_validate>
 8015ad2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015ad4:	697b      	ldr	r3, [r7, #20]
 8015ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ada:	f000 8091 	beq.w	8015c00 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015ade:	4b5b      	ldr	r3, [pc, #364]	; (8015c4c <ip4_reass+0x2fc>)
 8015ae0:	881a      	ldrh	r2, [r3, #0]
 8015ae2:	8c3b      	ldrh	r3, [r7, #32]
 8015ae4:	4413      	add	r3, r2
 8015ae6:	b29a      	uxth	r2, r3
 8015ae8:	4b58      	ldr	r3, [pc, #352]	; (8015c4c <ip4_reass+0x2fc>)
 8015aea:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015aec:	69fb      	ldr	r3, [r7, #28]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d00d      	beq.n	8015b0e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015af2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015af4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015af6:	4413      	add	r3, r2
 8015af8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015afc:	8a7a      	ldrh	r2, [r7, #18]
 8015afe:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b02:	7f9b      	ldrb	r3, [r3, #30]
 8015b04:	f043 0301 	orr.w	r3, r3, #1
 8015b08:	b2da      	uxtb	r2, r3
 8015b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b0c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015b0e:	697b      	ldr	r3, [r7, #20]
 8015b10:	2b01      	cmp	r3, #1
 8015b12:	d171      	bne.n	8015bf8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b16:	8b9b      	ldrh	r3, [r3, #28]
 8015b18:	3314      	adds	r3, #20
 8015b1a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b1e:	685b      	ldr	r3, [r3, #4]
 8015b20:	685b      	ldr	r3, [r3, #4]
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b28:	685b      	ldr	r3, [r3, #4]
 8015b2a:	685b      	ldr	r3, [r3, #4]
 8015b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b30:	3308      	adds	r3, #8
 8015b32:	2214      	movs	r2, #20
 8015b34:	4619      	mov	r1, r3
 8015b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b38:	f001 f95e 	bl	8016df8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015b3c:	8a3b      	ldrh	r3, [r7, #16]
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f7f6 fdf6 	bl	800c730 <lwip_htons>
 8015b44:	4603      	mov	r3, r0
 8015b46:	461a      	mov	r2, r3
 8015b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b4a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b4e:	2200      	movs	r2, #0
 8015b50:	719a      	strb	r2, [r3, #6]
 8015b52:	2200      	movs	r2, #0
 8015b54:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b58:	2200      	movs	r2, #0
 8015b5a:	729a      	strb	r2, [r3, #10]
 8015b5c:	2200      	movs	r2, #0
 8015b5e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b62:	685b      	ldr	r3, [r3, #4]
 8015b64:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015b66:	e00d      	b.n	8015b84 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b6a:	685b      	ldr	r3, [r3, #4]
 8015b6c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015b6e:	2114      	movs	r1, #20
 8015b70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015b72:	f7f8 f88b 	bl	800dc8c <pbuf_remove_header>
      pbuf_cat(p, r);
 8015b76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015b78:	6878      	ldr	r0, [r7, #4]
 8015b7a:	f7f8 f9db 	bl	800df34 <pbuf_cat>
      r = iprh->next_pbuf;
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d1ee      	bne.n	8015b68 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015b8a:	4b31      	ldr	r3, [pc, #196]	; (8015c50 <ip4_reass+0x300>)
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b90:	429a      	cmp	r2, r3
 8015b92:	d102      	bne.n	8015b9a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015b94:	2300      	movs	r3, #0
 8015b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015b98:	e010      	b.n	8015bbc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015b9a:	4b2d      	ldr	r3, [pc, #180]	; (8015c50 <ip4_reass+0x300>)
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015ba0:	e007      	b.n	8015bb2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ba8:	429a      	cmp	r2, r3
 8015baa:	d006      	beq.n	8015bba <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d1f4      	bne.n	8015ba2 <ip4_reass+0x252>
 8015bb8:	e000      	b.n	8015bbc <ip4_reass+0x26c>
          break;
 8015bba:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015bbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015bbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015bc0:	f7ff fd2e 	bl	8015620 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015bc4:	6878      	ldr	r0, [r7, #4]
 8015bc6:	f7f8 f975 	bl	800deb4 <pbuf_clen>
 8015bca:	4603      	mov	r3, r0
 8015bcc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015bce:	4b1f      	ldr	r3, [pc, #124]	; (8015c4c <ip4_reass+0x2fc>)
 8015bd0:	881b      	ldrh	r3, [r3, #0]
 8015bd2:	8c3a      	ldrh	r2, [r7, #32]
 8015bd4:	429a      	cmp	r2, r3
 8015bd6:	d906      	bls.n	8015be6 <ip4_reass+0x296>
 8015bd8:	4b1e      	ldr	r3, [pc, #120]	; (8015c54 <ip4_reass+0x304>)
 8015bda:	f240 229b 	movw	r2, #667	; 0x29b
 8015bde:	491e      	ldr	r1, [pc, #120]	; (8015c58 <ip4_reass+0x308>)
 8015be0:	481e      	ldr	r0, [pc, #120]	; (8015c5c <ip4_reass+0x30c>)
 8015be2:	f001 f91f 	bl	8016e24 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015be6:	4b19      	ldr	r3, [pc, #100]	; (8015c4c <ip4_reass+0x2fc>)
 8015be8:	881a      	ldrh	r2, [r3, #0]
 8015bea:	8c3b      	ldrh	r3, [r7, #32]
 8015bec:	1ad3      	subs	r3, r2, r3
 8015bee:	b29a      	uxth	r2, r3
 8015bf0:	4b16      	ldr	r3, [pc, #88]	; (8015c4c <ip4_reass+0x2fc>)
 8015bf2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	e03c      	b.n	8015c72 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	e03a      	b.n	8015c72 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8015bfc:	bf00      	nop
 8015bfe:	e000      	b.n	8015c02 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8015c00:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d106      	bne.n	8015c16 <ip4_reass+0x2c6>
 8015c08:	4b12      	ldr	r3, [pc, #72]	; (8015c54 <ip4_reass+0x304>)
 8015c0a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015c0e:	4914      	ldr	r1, [pc, #80]	; (8015c60 <ip4_reass+0x310>)
 8015c10:	4812      	ldr	r0, [pc, #72]	; (8015c5c <ip4_reass+0x30c>)
 8015c12:	f001 f907 	bl	8016e24 <iprintf>
  if (ipr->p == NULL) {
 8015c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c18:	685b      	ldr	r3, [r3, #4]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d124      	bne.n	8015c68 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015c1e:	4b0c      	ldr	r3, [pc, #48]	; (8015c50 <ip4_reass+0x300>)
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c24:	429a      	cmp	r2, r3
 8015c26:	d006      	beq.n	8015c36 <ip4_reass+0x2e6>
 8015c28:	4b0a      	ldr	r3, [pc, #40]	; (8015c54 <ip4_reass+0x304>)
 8015c2a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015c2e:	490d      	ldr	r1, [pc, #52]	; (8015c64 <ip4_reass+0x314>)
 8015c30:	480a      	ldr	r0, [pc, #40]	; (8015c5c <ip4_reass+0x30c>)
 8015c32:	f001 f8f7 	bl	8016e24 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015c36:	2100      	movs	r1, #0
 8015c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c3a:	f7ff fcf1 	bl	8015620 <ip_reass_dequeue_datagram>
 8015c3e:	e014      	b.n	8015c6a <ip4_reass+0x31a>
    goto nullreturn;
 8015c40:	bf00      	nop
 8015c42:	e012      	b.n	8015c6a <ip4_reass+0x31a>
    goto nullreturn;
 8015c44:	bf00      	nop
 8015c46:	e010      	b.n	8015c6a <ip4_reass+0x31a>
      goto nullreturn;
 8015c48:	bf00      	nop
 8015c4a:	e00e      	b.n	8015c6a <ip4_reass+0x31a>
 8015c4c:	2000437c 	.word	0x2000437c
 8015c50:	20004378 	.word	0x20004378
 8015c54:	0801a7e0 	.word	0x0801a7e0
 8015c58:	0801a950 	.word	0x0801a950
 8015c5c:	0801a828 	.word	0x0801a828
 8015c60:	0801a96c 	.word	0x0801a96c
 8015c64:	0801a978 	.word	0x0801a978
  }

nullreturn:
 8015c68:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015c6a:	6878      	ldr	r0, [r7, #4]
 8015c6c:	f7f8 f894 	bl	800dd98 <pbuf_free>
  return NULL;
 8015c70:	2300      	movs	r3, #0
}
 8015c72:	4618      	mov	r0, r3
 8015c74:	3738      	adds	r7, #56	; 0x38
 8015c76:	46bd      	mov	sp, r7
 8015c78:	bd80      	pop	{r7, pc}
 8015c7a:	bf00      	nop

08015c7c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015c80:	2005      	movs	r0, #5
 8015c82:	f7f7 fa0b 	bl	800d09c <memp_malloc>
 8015c86:	4603      	mov	r3, r0
}
 8015c88:	4618      	mov	r0, r3
 8015c8a:	bd80      	pop	{r7, pc}

08015c8c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b082      	sub	sp, #8
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d106      	bne.n	8015ca8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015c9a:	4b07      	ldr	r3, [pc, #28]	; (8015cb8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015c9c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015ca0:	4906      	ldr	r1, [pc, #24]	; (8015cbc <ip_frag_free_pbuf_custom_ref+0x30>)
 8015ca2:	4807      	ldr	r0, [pc, #28]	; (8015cc0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015ca4:	f001 f8be 	bl	8016e24 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015ca8:	6879      	ldr	r1, [r7, #4]
 8015caa:	2005      	movs	r0, #5
 8015cac:	f7f7 fa48 	bl	800d140 <memp_free>
}
 8015cb0:	bf00      	nop
 8015cb2:	3708      	adds	r7, #8
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}
 8015cb8:	0801a7e0 	.word	0x0801a7e0
 8015cbc:	0801a998 	.word	0x0801a998
 8015cc0:	0801a828 	.word	0x0801a828

08015cc4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b084      	sub	sp, #16
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d106      	bne.n	8015ce4 <ipfrag_free_pbuf_custom+0x20>
 8015cd6:	4b11      	ldr	r3, [pc, #68]	; (8015d1c <ipfrag_free_pbuf_custom+0x58>)
 8015cd8:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015cdc:	4910      	ldr	r1, [pc, #64]	; (8015d20 <ipfrag_free_pbuf_custom+0x5c>)
 8015cde:	4811      	ldr	r0, [pc, #68]	; (8015d24 <ipfrag_free_pbuf_custom+0x60>)
 8015ce0:	f001 f8a0 	bl	8016e24 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015ce4:	68fa      	ldr	r2, [r7, #12]
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	429a      	cmp	r2, r3
 8015cea:	d006      	beq.n	8015cfa <ipfrag_free_pbuf_custom+0x36>
 8015cec:	4b0b      	ldr	r3, [pc, #44]	; (8015d1c <ipfrag_free_pbuf_custom+0x58>)
 8015cee:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015cf2:	490d      	ldr	r1, [pc, #52]	; (8015d28 <ipfrag_free_pbuf_custom+0x64>)
 8015cf4:	480b      	ldr	r0, [pc, #44]	; (8015d24 <ipfrag_free_pbuf_custom+0x60>)
 8015cf6:	f001 f895 	bl	8016e24 <iprintf>
  if (pcr->original != NULL) {
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	695b      	ldr	r3, [r3, #20]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d004      	beq.n	8015d0c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	695b      	ldr	r3, [r3, #20]
 8015d06:	4618      	mov	r0, r3
 8015d08:	f7f8 f846 	bl	800dd98 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015d0c:	68f8      	ldr	r0, [r7, #12]
 8015d0e:	f7ff ffbd 	bl	8015c8c <ip_frag_free_pbuf_custom_ref>
}
 8015d12:	bf00      	nop
 8015d14:	3710      	adds	r7, #16
 8015d16:	46bd      	mov	sp, r7
 8015d18:	bd80      	pop	{r7, pc}
 8015d1a:	bf00      	nop
 8015d1c:	0801a7e0 	.word	0x0801a7e0
 8015d20:	0801a9a4 	.word	0x0801a9a4
 8015d24:	0801a828 	.word	0x0801a828
 8015d28:	0801a9b0 	.word	0x0801a9b0

08015d2c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b094      	sub	sp, #80	; 0x50
 8015d30:	af02      	add	r7, sp, #8
 8015d32:	60f8      	str	r0, [r7, #12]
 8015d34:	60b9      	str	r1, [r7, #8]
 8015d36:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015d38:	2300      	movs	r3, #0
 8015d3a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015d3e:	68bb      	ldr	r3, [r7, #8]
 8015d40:	8c1b      	ldrh	r3, [r3, #32]
 8015d42:	3b14      	subs	r3, #20
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	da00      	bge.n	8015d4a <ip4_frag+0x1e>
 8015d48:	3307      	adds	r3, #7
 8015d4a:	10db      	asrs	r3, r3, #3
 8015d4c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015d4e:	2314      	movs	r3, #20
 8015d50:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	685b      	ldr	r3, [r3, #4]
 8015d56:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d5a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d5e:	781b      	ldrb	r3, [r3, #0]
 8015d60:	f003 030f 	and.w	r3, r3, #15
 8015d64:	b2db      	uxtb	r3, r3
 8015d66:	009b      	lsls	r3, r3, #2
 8015d68:	b2db      	uxtb	r3, r3
 8015d6a:	2b14      	cmp	r3, #20
 8015d6c:	d002      	beq.n	8015d74 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015d6e:	f06f 0305 	mvn.w	r3, #5
 8015d72:	e110      	b.n	8015f96 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	895b      	ldrh	r3, [r3, #10]
 8015d78:	2b13      	cmp	r3, #19
 8015d7a:	d809      	bhi.n	8015d90 <ip4_frag+0x64>
 8015d7c:	4b88      	ldr	r3, [pc, #544]	; (8015fa0 <ip4_frag+0x274>)
 8015d7e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015d82:	4988      	ldr	r1, [pc, #544]	; (8015fa4 <ip4_frag+0x278>)
 8015d84:	4888      	ldr	r0, [pc, #544]	; (8015fa8 <ip4_frag+0x27c>)
 8015d86:	f001 f84d 	bl	8016e24 <iprintf>
 8015d8a:	f06f 0305 	mvn.w	r3, #5
 8015d8e:	e102      	b.n	8015f96 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d92:	88db      	ldrh	r3, [r3, #6]
 8015d94:	b29b      	uxth	r3, r3
 8015d96:	4618      	mov	r0, r3
 8015d98:	f7f6 fcca 	bl	800c730 <lwip_htons>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015da0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015da2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015daa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015db0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	891b      	ldrh	r3, [r3, #8]
 8015db6:	3b14      	subs	r3, #20
 8015db8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015dbc:	e0e1      	b.n	8015f82 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015dbe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015dc0:	00db      	lsls	r3, r3, #3
 8015dc2:	b29b      	uxth	r3, r3
 8015dc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015dc8:	4293      	cmp	r3, r2
 8015dca:	bf28      	it	cs
 8015dcc:	4613      	movcs	r3, r2
 8015dce:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015dd0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015dd4:	2114      	movs	r1, #20
 8015dd6:	200e      	movs	r0, #14
 8015dd8:	f7f7 fcfa 	bl	800d7d0 <pbuf_alloc>
 8015ddc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8015dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	f000 80d5 	beq.w	8015f90 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de8:	895b      	ldrh	r3, [r3, #10]
 8015dea:	2b13      	cmp	r3, #19
 8015dec:	d806      	bhi.n	8015dfc <ip4_frag+0xd0>
 8015dee:	4b6c      	ldr	r3, [pc, #432]	; (8015fa0 <ip4_frag+0x274>)
 8015df0:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015df4:	496d      	ldr	r1, [pc, #436]	; (8015fac <ip4_frag+0x280>)
 8015df6:	486c      	ldr	r0, [pc, #432]	; (8015fa8 <ip4_frag+0x27c>)
 8015df8:	f001 f814 	bl	8016e24 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dfe:	685b      	ldr	r3, [r3, #4]
 8015e00:	2214      	movs	r2, #20
 8015e02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015e04:	4618      	mov	r0, r3
 8015e06:	f000 fff7 	bl	8016df8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e0c:	685b      	ldr	r3, [r3, #4]
 8015e0e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015e10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015e12:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015e16:	e064      	b.n	8015ee2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	895a      	ldrh	r2, [r3, #10]
 8015e1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015e1e:	1ad3      	subs	r3, r2, r3
 8015e20:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	895b      	ldrh	r3, [r3, #10]
 8015e26:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015e28:	429a      	cmp	r2, r3
 8015e2a:	d906      	bls.n	8015e3a <ip4_frag+0x10e>
 8015e2c:	4b5c      	ldr	r3, [pc, #368]	; (8015fa0 <ip4_frag+0x274>)
 8015e2e:	f240 322d 	movw	r2, #813	; 0x32d
 8015e32:	495f      	ldr	r1, [pc, #380]	; (8015fb0 <ip4_frag+0x284>)
 8015e34:	485c      	ldr	r0, [pc, #368]	; (8015fa8 <ip4_frag+0x27c>)
 8015e36:	f000 fff5 	bl	8016e24 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015e3a:	8bfa      	ldrh	r2, [r7, #30]
 8015e3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015e40:	4293      	cmp	r3, r2
 8015e42:	bf28      	it	cs
 8015e44:	4613      	movcs	r3, r2
 8015e46:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015e4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d105      	bne.n	8015e5e <ip4_frag+0x132>
        poff = 0;
 8015e52:	2300      	movs	r3, #0
 8015e54:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	60fb      	str	r3, [r7, #12]
        continue;
 8015e5c:	e041      	b.n	8015ee2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015e5e:	f7ff ff0d 	bl	8015c7c <ip_frag_alloc_pbuf_custom_ref>
 8015e62:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015e64:	69bb      	ldr	r3, [r7, #24]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d103      	bne.n	8015e72 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015e6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e6c:	f7f7 ff94 	bl	800dd98 <pbuf_free>
        goto memerr;
 8015e70:	e08f      	b.n	8015f92 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015e72:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015e78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015e7a:	4413      	add	r3, r2
 8015e7c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015e80:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015e84:	9201      	str	r2, [sp, #4]
 8015e86:	9300      	str	r3, [sp, #0]
 8015e88:	4603      	mov	r3, r0
 8015e8a:	2241      	movs	r2, #65	; 0x41
 8015e8c:	2000      	movs	r0, #0
 8015e8e:	f7f7 fdc9 	bl	800da24 <pbuf_alloced_custom>
 8015e92:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015e94:	697b      	ldr	r3, [r7, #20]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d106      	bne.n	8015ea8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015e9a:	69b8      	ldr	r0, [r7, #24]
 8015e9c:	f7ff fef6 	bl	8015c8c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015ea2:	f7f7 ff79 	bl	800dd98 <pbuf_free>
        goto memerr;
 8015ea6:	e074      	b.n	8015f92 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015ea8:	68f8      	ldr	r0, [r7, #12]
 8015eaa:	f7f8 f81b 	bl	800dee4 <pbuf_ref>
      pcr->original = p;
 8015eae:	69bb      	ldr	r3, [r7, #24]
 8015eb0:	68fa      	ldr	r2, [r7, #12]
 8015eb2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015eb4:	69bb      	ldr	r3, [r7, #24]
 8015eb6:	4a3f      	ldr	r2, [pc, #252]	; (8015fb4 <ip4_frag+0x288>)
 8015eb8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015eba:	6979      	ldr	r1, [r7, #20]
 8015ebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015ebe:	f7f8 f839 	bl	800df34 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015ec2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015ec6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015eca:	1ad3      	subs	r3, r2, r3
 8015ecc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015ed0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d004      	beq.n	8015ee2 <ip4_frag+0x1b6>
        poff = 0;
 8015ed8:	2300      	movs	r3, #0
 8015eda:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015ee2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d196      	bne.n	8015e18 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015eea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015eec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015ef0:	4413      	add	r3, r2
 8015ef2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015ef4:	68bb      	ldr	r3, [r7, #8]
 8015ef6:	8c1b      	ldrh	r3, [r3, #32]
 8015ef8:	f1a3 0213 	sub.w	r2, r3, #19
 8015efc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015f00:	429a      	cmp	r2, r3
 8015f02:	bfcc      	ite	gt
 8015f04:	2301      	movgt	r3, #1
 8015f06:	2300      	movle	r3, #0
 8015f08:	b2db      	uxtb	r3, r3
 8015f0a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015f0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015f10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f14:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015f16:	6a3b      	ldr	r3, [r7, #32]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d002      	beq.n	8015f22 <ip4_frag+0x1f6>
 8015f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d003      	beq.n	8015f2a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015f22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015f24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015f28:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015f2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	f7f6 fbff 	bl	800c730 <lwip_htons>
 8015f32:	4603      	mov	r3, r0
 8015f34:	461a      	mov	r2, r3
 8015f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f38:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015f3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015f3c:	3314      	adds	r3, #20
 8015f3e:	b29b      	uxth	r3, r3
 8015f40:	4618      	mov	r0, r3
 8015f42:	f7f6 fbf5 	bl	800c730 <lwip_htons>
 8015f46:	4603      	mov	r3, r0
 8015f48:	461a      	mov	r2, r3
 8015f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f4c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f50:	2200      	movs	r2, #0
 8015f52:	729a      	strb	r2, [r3, #10]
 8015f54:	2200      	movs	r2, #0
 8015f56:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015f58:	68bb      	ldr	r3, [r7, #8]
 8015f5a:	695b      	ldr	r3, [r3, #20]
 8015f5c:	687a      	ldr	r2, [r7, #4]
 8015f5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015f60:	68b8      	ldr	r0, [r7, #8]
 8015f62:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015f64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f66:	f7f7 ff17 	bl	800dd98 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015f6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015f6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015f70:	1ad3      	subs	r3, r2, r3
 8015f72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015f76:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015f7a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f7c:	4413      	add	r3, r2
 8015f7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8015f82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	f47f af19 	bne.w	8015dbe <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	e002      	b.n	8015f96 <ip4_frag+0x26a>
      goto memerr;
 8015f90:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015f92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015f96:	4618      	mov	r0, r3
 8015f98:	3748      	adds	r7, #72	; 0x48
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bd80      	pop	{r7, pc}
 8015f9e:	bf00      	nop
 8015fa0:	0801a7e0 	.word	0x0801a7e0
 8015fa4:	0801a9bc 	.word	0x0801a9bc
 8015fa8:	0801a828 	.word	0x0801a828
 8015fac:	0801a9d8 	.word	0x0801a9d8
 8015fb0:	0801a9f8 	.word	0x0801a9f8
 8015fb4:	08015cc5 	.word	0x08015cc5

08015fb8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015fb8:	b580      	push	{r7, lr}
 8015fba:	b086      	sub	sp, #24
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	6078      	str	r0, [r7, #4]
 8015fc0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015fc2:	230e      	movs	r3, #14
 8015fc4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	895b      	ldrh	r3, [r3, #10]
 8015fca:	2b0e      	cmp	r3, #14
 8015fcc:	d96e      	bls.n	80160ac <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	7bdb      	ldrb	r3, [r3, #15]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d106      	bne.n	8015fe4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015fd6:	683b      	ldr	r3, [r7, #0]
 8015fd8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015fdc:	3301      	adds	r3, #1
 8015fde:	b2da      	uxtb	r2, r3
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	685b      	ldr	r3, [r3, #4]
 8015fe8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015fea:	693b      	ldr	r3, [r7, #16]
 8015fec:	7b1a      	ldrb	r2, [r3, #12]
 8015fee:	7b5b      	ldrb	r3, [r3, #13]
 8015ff0:	021b      	lsls	r3, r3, #8
 8015ff2:	4313      	orrs	r3, r2
 8015ff4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015ff6:	693b      	ldr	r3, [r7, #16]
 8015ff8:	781b      	ldrb	r3, [r3, #0]
 8015ffa:	f003 0301 	and.w	r3, r3, #1
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d023      	beq.n	801604a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016002:	693b      	ldr	r3, [r7, #16]
 8016004:	781b      	ldrb	r3, [r3, #0]
 8016006:	2b01      	cmp	r3, #1
 8016008:	d10f      	bne.n	801602a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801600a:	693b      	ldr	r3, [r7, #16]
 801600c:	785b      	ldrb	r3, [r3, #1]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d11b      	bne.n	801604a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016012:	693b      	ldr	r3, [r7, #16]
 8016014:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016016:	2b5e      	cmp	r3, #94	; 0x5e
 8016018:	d117      	bne.n	801604a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	7b5b      	ldrb	r3, [r3, #13]
 801601e:	f043 0310 	orr.w	r3, r3, #16
 8016022:	b2da      	uxtb	r2, r3
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	735a      	strb	r2, [r3, #13]
 8016028:	e00f      	b.n	801604a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801602a:	693b      	ldr	r3, [r7, #16]
 801602c:	2206      	movs	r2, #6
 801602e:	4928      	ldr	r1, [pc, #160]	; (80160d0 <ethernet_input+0x118>)
 8016030:	4618      	mov	r0, r3
 8016032:	f000 fed3 	bl	8016ddc <memcmp>
 8016036:	4603      	mov	r3, r0
 8016038:	2b00      	cmp	r3, #0
 801603a:	d106      	bne.n	801604a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	7b5b      	ldrb	r3, [r3, #13]
 8016040:	f043 0308 	orr.w	r3, r3, #8
 8016044:	b2da      	uxtb	r2, r3
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801604a:	89fb      	ldrh	r3, [r7, #14]
 801604c:	2b08      	cmp	r3, #8
 801604e:	d003      	beq.n	8016058 <ethernet_input+0xa0>
 8016050:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016054:	d014      	beq.n	8016080 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016056:	e032      	b.n	80160be <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016058:	683b      	ldr	r3, [r7, #0]
 801605a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801605e:	f003 0308 	and.w	r3, r3, #8
 8016062:	2b00      	cmp	r3, #0
 8016064:	d024      	beq.n	80160b0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016066:	8afb      	ldrh	r3, [r7, #22]
 8016068:	4619      	mov	r1, r3
 801606a:	6878      	ldr	r0, [r7, #4]
 801606c:	f7f7 fe0e 	bl	800dc8c <pbuf_remove_header>
 8016070:	4603      	mov	r3, r0
 8016072:	2b00      	cmp	r3, #0
 8016074:	d11e      	bne.n	80160b4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016076:	6839      	ldr	r1, [r7, #0]
 8016078:	6878      	ldr	r0, [r7, #4]
 801607a:	f7fe ff27 	bl	8014ecc <ip4_input>
      break;
 801607e:	e013      	b.n	80160a8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016080:	683b      	ldr	r3, [r7, #0]
 8016082:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8016086:	f003 0308 	and.w	r3, r3, #8
 801608a:	2b00      	cmp	r3, #0
 801608c:	d014      	beq.n	80160b8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801608e:	8afb      	ldrh	r3, [r7, #22]
 8016090:	4619      	mov	r1, r3
 8016092:	6878      	ldr	r0, [r7, #4]
 8016094:	f7f7 fdfa 	bl	800dc8c <pbuf_remove_header>
 8016098:	4603      	mov	r3, r0
 801609a:	2b00      	cmp	r3, #0
 801609c:	d10e      	bne.n	80160bc <ethernet_input+0x104>
        etharp_input(p, netif);
 801609e:	6839      	ldr	r1, [r7, #0]
 80160a0:	6878      	ldr	r0, [r7, #4]
 80160a2:	f7fe f8c7 	bl	8014234 <etharp_input>
      break;
 80160a6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80160a8:	2300      	movs	r3, #0
 80160aa:	e00c      	b.n	80160c6 <ethernet_input+0x10e>
    goto free_and_return;
 80160ac:	bf00      	nop
 80160ae:	e006      	b.n	80160be <ethernet_input+0x106>
        goto free_and_return;
 80160b0:	bf00      	nop
 80160b2:	e004      	b.n	80160be <ethernet_input+0x106>
        goto free_and_return;
 80160b4:	bf00      	nop
 80160b6:	e002      	b.n	80160be <ethernet_input+0x106>
        goto free_and_return;
 80160b8:	bf00      	nop
 80160ba:	e000      	b.n	80160be <ethernet_input+0x106>
        goto free_and_return;
 80160bc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80160be:	6878      	ldr	r0, [r7, #4]
 80160c0:	f7f7 fe6a 	bl	800dd98 <pbuf_free>
  return ERR_OK;
 80160c4:	2300      	movs	r3, #0
}
 80160c6:	4618      	mov	r0, r3
 80160c8:	3718      	adds	r7, #24
 80160ca:	46bd      	mov	sp, r7
 80160cc:	bd80      	pop	{r7, pc}
 80160ce:	bf00      	nop
 80160d0:	0801ac10 	.word	0x0801ac10

080160d4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b086      	sub	sp, #24
 80160d8:	af00      	add	r7, sp, #0
 80160da:	60f8      	str	r0, [r7, #12]
 80160dc:	60b9      	str	r1, [r7, #8]
 80160de:	607a      	str	r2, [r7, #4]
 80160e0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80160e2:	8c3b      	ldrh	r3, [r7, #32]
 80160e4:	4618      	mov	r0, r3
 80160e6:	f7f6 fb23 	bl	800c730 <lwip_htons>
 80160ea:	4603      	mov	r3, r0
 80160ec:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80160ee:	210e      	movs	r1, #14
 80160f0:	68b8      	ldr	r0, [r7, #8]
 80160f2:	f7f7 fdbb 	bl	800dc6c <pbuf_add_header>
 80160f6:	4603      	mov	r3, r0
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d125      	bne.n	8016148 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80160fc:	68bb      	ldr	r3, [r7, #8]
 80160fe:	685b      	ldr	r3, [r3, #4]
 8016100:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016102:	693b      	ldr	r3, [r7, #16]
 8016104:	8afa      	ldrh	r2, [r7, #22]
 8016106:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016108:	693b      	ldr	r3, [r7, #16]
 801610a:	2206      	movs	r2, #6
 801610c:	6839      	ldr	r1, [r7, #0]
 801610e:	4618      	mov	r0, r3
 8016110:	f000 fe72 	bl	8016df8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016114:	693b      	ldr	r3, [r7, #16]
 8016116:	3306      	adds	r3, #6
 8016118:	2206      	movs	r2, #6
 801611a:	6879      	ldr	r1, [r7, #4]
 801611c:	4618      	mov	r0, r3
 801611e:	f000 fe6b 	bl	8016df8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016128:	2b06      	cmp	r3, #6
 801612a:	d006      	beq.n	801613a <ethernet_output+0x66>
 801612c:	4b0a      	ldr	r3, [pc, #40]	; (8016158 <ethernet_output+0x84>)
 801612e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016132:	490a      	ldr	r1, [pc, #40]	; (801615c <ethernet_output+0x88>)
 8016134:	480a      	ldr	r0, [pc, #40]	; (8016160 <ethernet_output+0x8c>)
 8016136:	f000 fe75 	bl	8016e24 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	699b      	ldr	r3, [r3, #24]
 801613e:	68b9      	ldr	r1, [r7, #8]
 8016140:	68f8      	ldr	r0, [r7, #12]
 8016142:	4798      	blx	r3
 8016144:	4603      	mov	r3, r0
 8016146:	e002      	b.n	801614e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016148:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801614a:	f06f 0301 	mvn.w	r3, #1
}
 801614e:	4618      	mov	r0, r3
 8016150:	3718      	adds	r7, #24
 8016152:	46bd      	mov	sp, r7
 8016154:	bd80      	pop	{r7, pc}
 8016156:	bf00      	nop
 8016158:	0801aa08 	.word	0x0801aa08
 801615c:	0801aa40 	.word	0x0801aa40
 8016160:	0801aa74 	.word	0x0801aa74

08016164 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016164:	b580      	push	{r7, lr}
 8016166:	b086      	sub	sp, #24
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
 801616c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801616e:	683b      	ldr	r3, [r7, #0]
 8016170:	60bb      	str	r3, [r7, #8]
 8016172:	2304      	movs	r3, #4
 8016174:	60fb      	str	r3, [r7, #12]
 8016176:	2300      	movs	r3, #0
 8016178:	613b      	str	r3, [r7, #16]
 801617a:	2300      	movs	r3, #0
 801617c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801617e:	f107 0308 	add.w	r3, r7, #8
 8016182:	2100      	movs	r1, #0
 8016184:	4618      	mov	r0, r3
 8016186:	f7f3 fc1d 	bl	80099c4 <osMessageCreate>
 801618a:	4602      	mov	r2, r0
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d102      	bne.n	801619e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016198:	f04f 33ff 	mov.w	r3, #4294967295
 801619c:	e000      	b.n	80161a0 <sys_mbox_new+0x3c>

  return ERR_OK;
 801619e:	2300      	movs	r3, #0
}
 80161a0:	4618      	mov	r0, r3
 80161a2:	3718      	adds	r7, #24
 80161a4:	46bd      	mov	sp, r7
 80161a6:	bd80      	pop	{r7, pc}

080161a8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b084      	sub	sp, #16
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	6078      	str	r0, [r7, #4]
 80161b0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	6839      	ldr	r1, [r7, #0]
 80161b8:	2200      	movs	r2, #0
 80161ba:	4618      	mov	r0, r3
 80161bc:	f7f3 fc2a 	bl	8009a14 <osMessagePut>
 80161c0:	4603      	mov	r3, r0
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d102      	bne.n	80161cc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80161c6:	2300      	movs	r3, #0
 80161c8:	73fb      	strb	r3, [r7, #15]
 80161ca:	e001      	b.n	80161d0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80161cc:	23ff      	movs	r3, #255	; 0xff
 80161ce:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80161d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80161d4:	4618      	mov	r0, r3
 80161d6:	3710      	adds	r7, #16
 80161d8:	46bd      	mov	sp, r7
 80161da:	bd80      	pop	{r7, pc}

080161dc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80161dc:	b580      	push	{r7, lr}
 80161de:	b08c      	sub	sp, #48	; 0x30
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	61f8      	str	r0, [r7, #28]
 80161e4:	61b9      	str	r1, [r7, #24]
 80161e6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80161e8:	f7f3 fa2a 	bl	8009640 <osKernelSysTick>
 80161ec:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80161ee:	697b      	ldr	r3, [r7, #20]
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d017      	beq.n	8016224 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80161f4:	69fb      	ldr	r3, [r7, #28]
 80161f6:	6819      	ldr	r1, [r3, #0]
 80161f8:	f107 0320 	add.w	r3, r7, #32
 80161fc:	697a      	ldr	r2, [r7, #20]
 80161fe:	4618      	mov	r0, r3
 8016200:	f7f3 fc48 	bl	8009a94 <osMessageGet>

    if(event.status == osEventMessage)
 8016204:	6a3b      	ldr	r3, [r7, #32]
 8016206:	2b10      	cmp	r3, #16
 8016208:	d109      	bne.n	801621e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801620c:	461a      	mov	r2, r3
 801620e:	69bb      	ldr	r3, [r7, #24]
 8016210:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016212:	f7f3 fa15 	bl	8009640 <osKernelSysTick>
 8016216:	4602      	mov	r2, r0
 8016218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801621a:	1ad3      	subs	r3, r2, r3
 801621c:	e019      	b.n	8016252 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801621e:	f04f 33ff 	mov.w	r3, #4294967295
 8016222:	e016      	b.n	8016252 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016224:	69fb      	ldr	r3, [r7, #28]
 8016226:	6819      	ldr	r1, [r3, #0]
 8016228:	463b      	mov	r3, r7
 801622a:	f04f 32ff 	mov.w	r2, #4294967295
 801622e:	4618      	mov	r0, r3
 8016230:	f7f3 fc30 	bl	8009a94 <osMessageGet>
 8016234:	f107 0320 	add.w	r3, r7, #32
 8016238:	463a      	mov	r2, r7
 801623a:	ca07      	ldmia	r2, {r0, r1, r2}
 801623c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016242:	461a      	mov	r2, r3
 8016244:	69bb      	ldr	r3, [r7, #24]
 8016246:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016248:	f7f3 f9fa 	bl	8009640 <osKernelSysTick>
 801624c:	4602      	mov	r2, r0
 801624e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016250:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016252:	4618      	mov	r0, r3
 8016254:	3730      	adds	r7, #48	; 0x30
 8016256:	46bd      	mov	sp, r7
 8016258:	bd80      	pop	{r7, pc}

0801625a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801625a:	b480      	push	{r7}
 801625c:	b083      	sub	sp, #12
 801625e:	af00      	add	r7, sp, #0
 8016260:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d101      	bne.n	801626e <sys_mbox_valid+0x14>
    return 0;
 801626a:	2300      	movs	r3, #0
 801626c:	e000      	b.n	8016270 <sys_mbox_valid+0x16>
  else
    return 1;
 801626e:	2301      	movs	r3, #1
}
 8016270:	4618      	mov	r0, r3
 8016272:	370c      	adds	r7, #12
 8016274:	46bd      	mov	sp, r7
 8016276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801627a:	4770      	bx	lr

0801627c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801627c:	b580      	push	{r7, lr}
 801627e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016280:	4803      	ldr	r0, [pc, #12]	; (8016290 <sys_init+0x14>)
 8016282:	f7f3 fa4d 	bl	8009720 <osMutexCreate>
 8016286:	4603      	mov	r3, r0
 8016288:	4a02      	ldr	r2, [pc, #8]	; (8016294 <sys_init+0x18>)
 801628a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801628c:	bf00      	nop
 801628e:	bd80      	pop	{r7, pc}
 8016290:	0801ac20 	.word	0x0801ac20
 8016294:	2000b11c 	.word	0x2000b11c

08016298 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016298:	b580      	push	{r7, lr}
 801629a:	b084      	sub	sp, #16
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80162a0:	2300      	movs	r3, #0
 80162a2:	60bb      	str	r3, [r7, #8]
 80162a4:	2300      	movs	r3, #0
 80162a6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80162a8:	f107 0308 	add.w	r3, r7, #8
 80162ac:	4618      	mov	r0, r3
 80162ae:	f7f3 fa37 	bl	8009720 <osMutexCreate>
 80162b2:	4602      	mov	r2, r0
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d102      	bne.n	80162c6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80162c0:	f04f 33ff 	mov.w	r3, #4294967295
 80162c4:	e000      	b.n	80162c8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80162c6:	2300      	movs	r3, #0
}
 80162c8:	4618      	mov	r0, r3
 80162ca:	3710      	adds	r7, #16
 80162cc:	46bd      	mov	sp, r7
 80162ce:	bd80      	pop	{r7, pc}

080162d0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80162d0:	b580      	push	{r7, lr}
 80162d2:	b082      	sub	sp, #8
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	f04f 31ff 	mov.w	r1, #4294967295
 80162e0:	4618      	mov	r0, r3
 80162e2:	f7f3 fa35 	bl	8009750 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80162e6:	bf00      	nop
 80162e8:	3708      	adds	r7, #8
 80162ea:	46bd      	mov	sp, r7
 80162ec:	bd80      	pop	{r7, pc}

080162ee <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80162ee:	b580      	push	{r7, lr}
 80162f0:	b082      	sub	sp, #8
 80162f2:	af00      	add	r7, sp, #0
 80162f4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	4618      	mov	r0, r3
 80162fc:	f7f3 fa76 	bl	80097ec <osMutexRelease>
}
 8016300:	bf00      	nop
 8016302:	3708      	adds	r7, #8
 8016304:	46bd      	mov	sp, r7
 8016306:	bd80      	pop	{r7, pc}

08016308 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b08c      	sub	sp, #48	; 0x30
 801630c:	af00      	add	r7, sp, #0
 801630e:	60f8      	str	r0, [r7, #12]
 8016310:	60b9      	str	r1, [r7, #8]
 8016312:	607a      	str	r2, [r7, #4]
 8016314:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016316:	f107 0314 	add.w	r3, r7, #20
 801631a:	2200      	movs	r2, #0
 801631c:	601a      	str	r2, [r3, #0]
 801631e:	605a      	str	r2, [r3, #4]
 8016320:	609a      	str	r2, [r3, #8]
 8016322:	60da      	str	r2, [r3, #12]
 8016324:	611a      	str	r2, [r3, #16]
 8016326:	615a      	str	r2, [r3, #20]
 8016328:	619a      	str	r2, [r3, #24]
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	617b      	str	r3, [r7, #20]
 801632e:	68bb      	ldr	r3, [r7, #8]
 8016330:	61bb      	str	r3, [r7, #24]
 8016332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016334:	b21b      	sxth	r3, r3
 8016336:	83bb      	strh	r3, [r7, #28]
 8016338:	683b      	ldr	r3, [r7, #0]
 801633a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801633c:	f107 0314 	add.w	r3, r7, #20
 8016340:	6879      	ldr	r1, [r7, #4]
 8016342:	4618      	mov	r0, r3
 8016344:	f7f3 f98c 	bl	8009660 <osThreadCreate>
 8016348:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801634a:	4618      	mov	r0, r3
 801634c:	3730      	adds	r7, #48	; 0x30
 801634e:	46bd      	mov	sp, r7
 8016350:	bd80      	pop	{r7, pc}
	...

08016354 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016354:	b580      	push	{r7, lr}
 8016356:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016358:	4b04      	ldr	r3, [pc, #16]	; (801636c <sys_arch_protect+0x18>)
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	f04f 31ff 	mov.w	r1, #4294967295
 8016360:	4618      	mov	r0, r3
 8016362:	f7f3 f9f5 	bl	8009750 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016366:	2301      	movs	r3, #1
}
 8016368:	4618      	mov	r0, r3
 801636a:	bd80      	pop	{r7, pc}
 801636c:	2000b11c 	.word	0x2000b11c

08016370 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b082      	sub	sp, #8
 8016374:	af00      	add	r7, sp, #0
 8016376:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016378:	4b04      	ldr	r3, [pc, #16]	; (801638c <sys_arch_unprotect+0x1c>)
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	4618      	mov	r0, r3
 801637e:	f7f3 fa35 	bl	80097ec <osMutexRelease>
}
 8016382:	bf00      	nop
 8016384:	3708      	adds	r7, #8
 8016386:	46bd      	mov	sp, r7
 8016388:	bd80      	pop	{r7, pc}
 801638a:	bf00      	nop
 801638c:	2000b11c 	.word	0x2000b11c

08016390 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016390:	b580      	push	{r7, lr}
 8016392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016394:	2200      	movs	r2, #0
 8016396:	4912      	ldr	r1, [pc, #72]	; (80163e0 <MX_USB_DEVICE_Init+0x50>)
 8016398:	4812      	ldr	r0, [pc, #72]	; (80163e4 <MX_USB_DEVICE_Init+0x54>)
 801639a:	f7f1 ffb7 	bl	800830c <USBD_Init>
 801639e:	4603      	mov	r3, r0
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d001      	beq.n	80163a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80163a4:	f7ea fd6e 	bl	8000e84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80163a8:	490f      	ldr	r1, [pc, #60]	; (80163e8 <MX_USB_DEVICE_Init+0x58>)
 80163aa:	480e      	ldr	r0, [pc, #56]	; (80163e4 <MX_USB_DEVICE_Init+0x54>)
 80163ac:	f7f1 ffde 	bl	800836c <USBD_RegisterClass>
 80163b0:	4603      	mov	r3, r0
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d001      	beq.n	80163ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80163b6:	f7ea fd65 	bl	8000e84 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80163ba:	490c      	ldr	r1, [pc, #48]	; (80163ec <MX_USB_DEVICE_Init+0x5c>)
 80163bc:	4809      	ldr	r0, [pc, #36]	; (80163e4 <MX_USB_DEVICE_Init+0x54>)
 80163be:	f7f1 ff2f 	bl	8008220 <USBD_CDC_RegisterInterface>
 80163c2:	4603      	mov	r3, r0
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d001      	beq.n	80163cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80163c8:	f7ea fd5c 	bl	8000e84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80163cc:	4805      	ldr	r0, [pc, #20]	; (80163e4 <MX_USB_DEVICE_Init+0x54>)
 80163ce:	f7f1 fff4 	bl	80083ba <USBD_Start>
 80163d2:	4603      	mov	r3, r0
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d001      	beq.n	80163dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80163d8:	f7ea fd54 	bl	8000e84 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80163dc:	bf00      	nop
 80163de:	bd80      	pop	{r7, pc}
 80163e0:	20000140 	.word	0x20000140
 80163e4:	2000b120 	.word	0x2000b120
 80163e8:	20000018 	.word	0x20000018
 80163ec:	2000012c 	.word	0x2000012c

080163f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80163f4:	2200      	movs	r2, #0
 80163f6:	4905      	ldr	r1, [pc, #20]	; (801640c <CDC_Init_FS+0x1c>)
 80163f8:	4805      	ldr	r0, [pc, #20]	; (8016410 <CDC_Init_FS+0x20>)
 80163fa:	f7f1 ff26 	bl	800824a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80163fe:	4905      	ldr	r1, [pc, #20]	; (8016414 <CDC_Init_FS+0x24>)
 8016400:	4803      	ldr	r0, [pc, #12]	; (8016410 <CDC_Init_FS+0x20>)
 8016402:	f7f1 ff40 	bl	8008286 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016406:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016408:	4618      	mov	r0, r3
 801640a:	bd80      	pop	{r7, pc}
 801640c:	2000bbf0 	.word	0x2000bbf0
 8016410:	2000b120 	.word	0x2000b120
 8016414:	2000b3f0 	.word	0x2000b3f0

08016418 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016418:	b480      	push	{r7}
 801641a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801641c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801641e:	4618      	mov	r0, r3
 8016420:	46bd      	mov	sp, r7
 8016422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016426:	4770      	bx	lr

08016428 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016428:	b480      	push	{r7}
 801642a:	b083      	sub	sp, #12
 801642c:	af00      	add	r7, sp, #0
 801642e:	4603      	mov	r3, r0
 8016430:	6039      	str	r1, [r7, #0]
 8016432:	71fb      	strb	r3, [r7, #7]
 8016434:	4613      	mov	r3, r2
 8016436:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016438:	79fb      	ldrb	r3, [r7, #7]
 801643a:	2b23      	cmp	r3, #35	; 0x23
 801643c:	d84a      	bhi.n	80164d4 <CDC_Control_FS+0xac>
 801643e:	a201      	add	r2, pc, #4	; (adr r2, 8016444 <CDC_Control_FS+0x1c>)
 8016440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016444:	080164d5 	.word	0x080164d5
 8016448:	080164d5 	.word	0x080164d5
 801644c:	080164d5 	.word	0x080164d5
 8016450:	080164d5 	.word	0x080164d5
 8016454:	080164d5 	.word	0x080164d5
 8016458:	080164d5 	.word	0x080164d5
 801645c:	080164d5 	.word	0x080164d5
 8016460:	080164d5 	.word	0x080164d5
 8016464:	080164d5 	.word	0x080164d5
 8016468:	080164d5 	.word	0x080164d5
 801646c:	080164d5 	.word	0x080164d5
 8016470:	080164d5 	.word	0x080164d5
 8016474:	080164d5 	.word	0x080164d5
 8016478:	080164d5 	.word	0x080164d5
 801647c:	080164d5 	.word	0x080164d5
 8016480:	080164d5 	.word	0x080164d5
 8016484:	080164d5 	.word	0x080164d5
 8016488:	080164d5 	.word	0x080164d5
 801648c:	080164d5 	.word	0x080164d5
 8016490:	080164d5 	.word	0x080164d5
 8016494:	080164d5 	.word	0x080164d5
 8016498:	080164d5 	.word	0x080164d5
 801649c:	080164d5 	.word	0x080164d5
 80164a0:	080164d5 	.word	0x080164d5
 80164a4:	080164d5 	.word	0x080164d5
 80164a8:	080164d5 	.word	0x080164d5
 80164ac:	080164d5 	.word	0x080164d5
 80164b0:	080164d5 	.word	0x080164d5
 80164b4:	080164d5 	.word	0x080164d5
 80164b8:	080164d5 	.word	0x080164d5
 80164bc:	080164d5 	.word	0x080164d5
 80164c0:	080164d5 	.word	0x080164d5
 80164c4:	080164d5 	.word	0x080164d5
 80164c8:	080164d5 	.word	0x080164d5
 80164cc:	080164d5 	.word	0x080164d5
 80164d0:	080164d5 	.word	0x080164d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80164d4:	bf00      	nop
  }

  return (USBD_OK);
 80164d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80164d8:	4618      	mov	r0, r3
 80164da:	370c      	adds	r7, #12
 80164dc:	46bd      	mov	sp, r7
 80164de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e2:	4770      	bx	lr

080164e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80164e4:	b580      	push	{r7, lr}
 80164e6:	b082      	sub	sp, #8
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
 80164ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80164ee:	6879      	ldr	r1, [r7, #4]
 80164f0:	4805      	ldr	r0, [pc, #20]	; (8016508 <CDC_Receive_FS+0x24>)
 80164f2:	f7f1 fec8 	bl	8008286 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80164f6:	4804      	ldr	r0, [pc, #16]	; (8016508 <CDC_Receive_FS+0x24>)
 80164f8:	f7f1 fede 	bl	80082b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80164fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80164fe:	4618      	mov	r0, r3
 8016500:	3708      	adds	r7, #8
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}
 8016506:	bf00      	nop
 8016508:	2000b120 	.word	0x2000b120

0801650c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801650c:	b480      	push	{r7}
 801650e:	b087      	sub	sp, #28
 8016510:	af00      	add	r7, sp, #0
 8016512:	60f8      	str	r0, [r7, #12]
 8016514:	60b9      	str	r1, [r7, #8]
 8016516:	4613      	mov	r3, r2
 8016518:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801651a:	2300      	movs	r3, #0
 801651c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801651e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016522:	4618      	mov	r0, r3
 8016524:	371c      	adds	r7, #28
 8016526:	46bd      	mov	sp, r7
 8016528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801652c:	4770      	bx	lr
	...

08016530 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016530:	b480      	push	{r7}
 8016532:	b083      	sub	sp, #12
 8016534:	af00      	add	r7, sp, #0
 8016536:	4603      	mov	r3, r0
 8016538:	6039      	str	r1, [r7, #0]
 801653a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801653c:	683b      	ldr	r3, [r7, #0]
 801653e:	2212      	movs	r2, #18
 8016540:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016542:	4b03      	ldr	r3, [pc, #12]	; (8016550 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016544:	4618      	mov	r0, r3
 8016546:	370c      	adds	r7, #12
 8016548:	46bd      	mov	sp, r7
 801654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801654e:	4770      	bx	lr
 8016550:	2000015c 	.word	0x2000015c

08016554 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016554:	b480      	push	{r7}
 8016556:	b083      	sub	sp, #12
 8016558:	af00      	add	r7, sp, #0
 801655a:	4603      	mov	r3, r0
 801655c:	6039      	str	r1, [r7, #0]
 801655e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016560:	683b      	ldr	r3, [r7, #0]
 8016562:	2204      	movs	r2, #4
 8016564:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016566:	4b03      	ldr	r3, [pc, #12]	; (8016574 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016568:	4618      	mov	r0, r3
 801656a:	370c      	adds	r7, #12
 801656c:	46bd      	mov	sp, r7
 801656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016572:	4770      	bx	lr
 8016574:	20000170 	.word	0x20000170

08016578 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016578:	b580      	push	{r7, lr}
 801657a:	b082      	sub	sp, #8
 801657c:	af00      	add	r7, sp, #0
 801657e:	4603      	mov	r3, r0
 8016580:	6039      	str	r1, [r7, #0]
 8016582:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016584:	79fb      	ldrb	r3, [r7, #7]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d105      	bne.n	8016596 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801658a:	683a      	ldr	r2, [r7, #0]
 801658c:	4907      	ldr	r1, [pc, #28]	; (80165ac <USBD_FS_ProductStrDescriptor+0x34>)
 801658e:	4808      	ldr	r0, [pc, #32]	; (80165b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8016590:	f7f2 ff45 	bl	800941e <USBD_GetString>
 8016594:	e004      	b.n	80165a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016596:	683a      	ldr	r2, [r7, #0]
 8016598:	4904      	ldr	r1, [pc, #16]	; (80165ac <USBD_FS_ProductStrDescriptor+0x34>)
 801659a:	4805      	ldr	r0, [pc, #20]	; (80165b0 <USBD_FS_ProductStrDescriptor+0x38>)
 801659c:	f7f2 ff3f 	bl	800941e <USBD_GetString>
  }
  return USBD_StrDesc;
 80165a0:	4b02      	ldr	r3, [pc, #8]	; (80165ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80165a2:	4618      	mov	r0, r3
 80165a4:	3708      	adds	r7, #8
 80165a6:	46bd      	mov	sp, r7
 80165a8:	bd80      	pop	{r7, pc}
 80165aa:	bf00      	nop
 80165ac:	2000c3f0 	.word	0x2000c3f0
 80165b0:	0801aa9c 	.word	0x0801aa9c

080165b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b082      	sub	sp, #8
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	4603      	mov	r3, r0
 80165bc:	6039      	str	r1, [r7, #0]
 80165be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80165c0:	683a      	ldr	r2, [r7, #0]
 80165c2:	4904      	ldr	r1, [pc, #16]	; (80165d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80165c4:	4804      	ldr	r0, [pc, #16]	; (80165d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80165c6:	f7f2 ff2a 	bl	800941e <USBD_GetString>
  return USBD_StrDesc;
 80165ca:	4b02      	ldr	r3, [pc, #8]	; (80165d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80165cc:	4618      	mov	r0, r3
 80165ce:	3708      	adds	r7, #8
 80165d0:	46bd      	mov	sp, r7
 80165d2:	bd80      	pop	{r7, pc}
 80165d4:	2000c3f0 	.word	0x2000c3f0
 80165d8:	0801aab4 	.word	0x0801aab4

080165dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b082      	sub	sp, #8
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	4603      	mov	r3, r0
 80165e4:	6039      	str	r1, [r7, #0]
 80165e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80165e8:	683b      	ldr	r3, [r7, #0]
 80165ea:	221a      	movs	r2, #26
 80165ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80165ee:	f000 f843 	bl	8016678 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80165f2:	4b02      	ldr	r3, [pc, #8]	; (80165fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80165f4:	4618      	mov	r0, r3
 80165f6:	3708      	adds	r7, #8
 80165f8:	46bd      	mov	sp, r7
 80165fa:	bd80      	pop	{r7, pc}
 80165fc:	20000174 	.word	0x20000174

08016600 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016600:	b580      	push	{r7, lr}
 8016602:	b082      	sub	sp, #8
 8016604:	af00      	add	r7, sp, #0
 8016606:	4603      	mov	r3, r0
 8016608:	6039      	str	r1, [r7, #0]
 801660a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801660c:	79fb      	ldrb	r3, [r7, #7]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d105      	bne.n	801661e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016612:	683a      	ldr	r2, [r7, #0]
 8016614:	4907      	ldr	r1, [pc, #28]	; (8016634 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016616:	4808      	ldr	r0, [pc, #32]	; (8016638 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016618:	f7f2 ff01 	bl	800941e <USBD_GetString>
 801661c:	e004      	b.n	8016628 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801661e:	683a      	ldr	r2, [r7, #0]
 8016620:	4904      	ldr	r1, [pc, #16]	; (8016634 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016622:	4805      	ldr	r0, [pc, #20]	; (8016638 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016624:	f7f2 fefb 	bl	800941e <USBD_GetString>
  }
  return USBD_StrDesc;
 8016628:	4b02      	ldr	r3, [pc, #8]	; (8016634 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801662a:	4618      	mov	r0, r3
 801662c:	3708      	adds	r7, #8
 801662e:	46bd      	mov	sp, r7
 8016630:	bd80      	pop	{r7, pc}
 8016632:	bf00      	nop
 8016634:	2000c3f0 	.word	0x2000c3f0
 8016638:	0801aac8 	.word	0x0801aac8

0801663c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801663c:	b580      	push	{r7, lr}
 801663e:	b082      	sub	sp, #8
 8016640:	af00      	add	r7, sp, #0
 8016642:	4603      	mov	r3, r0
 8016644:	6039      	str	r1, [r7, #0]
 8016646:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016648:	79fb      	ldrb	r3, [r7, #7]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d105      	bne.n	801665a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801664e:	683a      	ldr	r2, [r7, #0]
 8016650:	4907      	ldr	r1, [pc, #28]	; (8016670 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016652:	4808      	ldr	r0, [pc, #32]	; (8016674 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016654:	f7f2 fee3 	bl	800941e <USBD_GetString>
 8016658:	e004      	b.n	8016664 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801665a:	683a      	ldr	r2, [r7, #0]
 801665c:	4904      	ldr	r1, [pc, #16]	; (8016670 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801665e:	4805      	ldr	r0, [pc, #20]	; (8016674 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016660:	f7f2 fedd 	bl	800941e <USBD_GetString>
  }
  return USBD_StrDesc;
 8016664:	4b02      	ldr	r3, [pc, #8]	; (8016670 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016666:	4618      	mov	r0, r3
 8016668:	3708      	adds	r7, #8
 801666a:	46bd      	mov	sp, r7
 801666c:	bd80      	pop	{r7, pc}
 801666e:	bf00      	nop
 8016670:	2000c3f0 	.word	0x2000c3f0
 8016674:	0801aad4 	.word	0x0801aad4

08016678 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b084      	sub	sp, #16
 801667c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801667e:	4b0f      	ldr	r3, [pc, #60]	; (80166bc <Get_SerialNum+0x44>)
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016684:	4b0e      	ldr	r3, [pc, #56]	; (80166c0 <Get_SerialNum+0x48>)
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801668a:	4b0e      	ldr	r3, [pc, #56]	; (80166c4 <Get_SerialNum+0x4c>)
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016690:	68fa      	ldr	r2, [r7, #12]
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	4413      	add	r3, r2
 8016696:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d009      	beq.n	80166b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801669e:	2208      	movs	r2, #8
 80166a0:	4909      	ldr	r1, [pc, #36]	; (80166c8 <Get_SerialNum+0x50>)
 80166a2:	68f8      	ldr	r0, [r7, #12]
 80166a4:	f000 f814 	bl	80166d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80166a8:	2204      	movs	r2, #4
 80166aa:	4908      	ldr	r1, [pc, #32]	; (80166cc <Get_SerialNum+0x54>)
 80166ac:	68b8      	ldr	r0, [r7, #8]
 80166ae:	f000 f80f 	bl	80166d0 <IntToUnicode>
  }
}
 80166b2:	bf00      	nop
 80166b4:	3710      	adds	r7, #16
 80166b6:	46bd      	mov	sp, r7
 80166b8:	bd80      	pop	{r7, pc}
 80166ba:	bf00      	nop
 80166bc:	1fff7a10 	.word	0x1fff7a10
 80166c0:	1fff7a14 	.word	0x1fff7a14
 80166c4:	1fff7a18 	.word	0x1fff7a18
 80166c8:	20000176 	.word	0x20000176
 80166cc:	20000186 	.word	0x20000186

080166d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80166d0:	b480      	push	{r7}
 80166d2:	b087      	sub	sp, #28
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	60f8      	str	r0, [r7, #12]
 80166d8:	60b9      	str	r1, [r7, #8]
 80166da:	4613      	mov	r3, r2
 80166dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80166de:	2300      	movs	r3, #0
 80166e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80166e2:	2300      	movs	r3, #0
 80166e4:	75fb      	strb	r3, [r7, #23]
 80166e6:	e027      	b.n	8016738 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	0f1b      	lsrs	r3, r3, #28
 80166ec:	2b09      	cmp	r3, #9
 80166ee:	d80b      	bhi.n	8016708 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80166f0:	68fb      	ldr	r3, [r7, #12]
 80166f2:	0f1b      	lsrs	r3, r3, #28
 80166f4:	b2da      	uxtb	r2, r3
 80166f6:	7dfb      	ldrb	r3, [r7, #23]
 80166f8:	005b      	lsls	r3, r3, #1
 80166fa:	4619      	mov	r1, r3
 80166fc:	68bb      	ldr	r3, [r7, #8]
 80166fe:	440b      	add	r3, r1
 8016700:	3230      	adds	r2, #48	; 0x30
 8016702:	b2d2      	uxtb	r2, r2
 8016704:	701a      	strb	r2, [r3, #0]
 8016706:	e00a      	b.n	801671e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	0f1b      	lsrs	r3, r3, #28
 801670c:	b2da      	uxtb	r2, r3
 801670e:	7dfb      	ldrb	r3, [r7, #23]
 8016710:	005b      	lsls	r3, r3, #1
 8016712:	4619      	mov	r1, r3
 8016714:	68bb      	ldr	r3, [r7, #8]
 8016716:	440b      	add	r3, r1
 8016718:	3237      	adds	r2, #55	; 0x37
 801671a:	b2d2      	uxtb	r2, r2
 801671c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	011b      	lsls	r3, r3, #4
 8016722:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016724:	7dfb      	ldrb	r3, [r7, #23]
 8016726:	005b      	lsls	r3, r3, #1
 8016728:	3301      	adds	r3, #1
 801672a:	68ba      	ldr	r2, [r7, #8]
 801672c:	4413      	add	r3, r2
 801672e:	2200      	movs	r2, #0
 8016730:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016732:	7dfb      	ldrb	r3, [r7, #23]
 8016734:	3301      	adds	r3, #1
 8016736:	75fb      	strb	r3, [r7, #23]
 8016738:	7dfa      	ldrb	r2, [r7, #23]
 801673a:	79fb      	ldrb	r3, [r7, #7]
 801673c:	429a      	cmp	r2, r3
 801673e:	d3d3      	bcc.n	80166e8 <IntToUnicode+0x18>
  }
}
 8016740:	bf00      	nop
 8016742:	bf00      	nop
 8016744:	371c      	adds	r7, #28
 8016746:	46bd      	mov	sp, r7
 8016748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801674c:	4770      	bx	lr
	...

08016750 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b08a      	sub	sp, #40	; 0x28
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016758:	f107 0314 	add.w	r3, r7, #20
 801675c:	2200      	movs	r2, #0
 801675e:	601a      	str	r2, [r3, #0]
 8016760:	605a      	str	r2, [r3, #4]
 8016762:	609a      	str	r2, [r3, #8]
 8016764:	60da      	str	r2, [r3, #12]
 8016766:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016770:	d147      	bne.n	8016802 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016772:	2300      	movs	r3, #0
 8016774:	613b      	str	r3, [r7, #16]
 8016776:	4b25      	ldr	r3, [pc, #148]	; (801680c <HAL_PCD_MspInit+0xbc>)
 8016778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801677a:	4a24      	ldr	r2, [pc, #144]	; (801680c <HAL_PCD_MspInit+0xbc>)
 801677c:	f043 0301 	orr.w	r3, r3, #1
 8016780:	6313      	str	r3, [r2, #48]	; 0x30
 8016782:	4b22      	ldr	r3, [pc, #136]	; (801680c <HAL_PCD_MspInit+0xbc>)
 8016784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016786:	f003 0301 	and.w	r3, r3, #1
 801678a:	613b      	str	r3, [r7, #16]
 801678c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801678e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016794:	2300      	movs	r3, #0
 8016796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016798:	2300      	movs	r3, #0
 801679a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801679c:	f107 0314 	add.w	r3, r7, #20
 80167a0:	4619      	mov	r1, r3
 80167a2:	481b      	ldr	r0, [pc, #108]	; (8016810 <HAL_PCD_MspInit+0xc0>)
 80167a4:	f7eb ff92 	bl	80026cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80167a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80167ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80167ae:	2302      	movs	r3, #2
 80167b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80167b2:	2300      	movs	r3, #0
 80167b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80167b6:	2303      	movs	r3, #3
 80167b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80167ba:	230a      	movs	r3, #10
 80167bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80167be:	f107 0314 	add.w	r3, r7, #20
 80167c2:	4619      	mov	r1, r3
 80167c4:	4812      	ldr	r0, [pc, #72]	; (8016810 <HAL_PCD_MspInit+0xc0>)
 80167c6:	f7eb ff81 	bl	80026cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80167ca:	4b10      	ldr	r3, [pc, #64]	; (801680c <HAL_PCD_MspInit+0xbc>)
 80167cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80167ce:	4a0f      	ldr	r2, [pc, #60]	; (801680c <HAL_PCD_MspInit+0xbc>)
 80167d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80167d4:	6353      	str	r3, [r2, #52]	; 0x34
 80167d6:	2300      	movs	r3, #0
 80167d8:	60fb      	str	r3, [r7, #12]
 80167da:	4b0c      	ldr	r3, [pc, #48]	; (801680c <HAL_PCD_MspInit+0xbc>)
 80167dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80167de:	4a0b      	ldr	r2, [pc, #44]	; (801680c <HAL_PCD_MspInit+0xbc>)
 80167e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80167e4:	6453      	str	r3, [r2, #68]	; 0x44
 80167e6:	4b09      	ldr	r3, [pc, #36]	; (801680c <HAL_PCD_MspInit+0xbc>)
 80167e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80167ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80167ee:	60fb      	str	r3, [r7, #12]
 80167f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80167f2:	2200      	movs	r2, #0
 80167f4:	2105      	movs	r1, #5
 80167f6:	2043      	movs	r0, #67	; 0x43
 80167f8:	f7ea ff2c 	bl	8001654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80167fc:	2043      	movs	r0, #67	; 0x43
 80167fe:	f7ea ff45 	bl	800168c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016802:	bf00      	nop
 8016804:	3728      	adds	r7, #40	; 0x28
 8016806:	46bd      	mov	sp, r7
 8016808:	bd80      	pop	{r7, pc}
 801680a:	bf00      	nop
 801680c:	40023800 	.word	0x40023800
 8016810:	40020000 	.word	0x40020000

08016814 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016814:	b580      	push	{r7, lr}
 8016816:	b082      	sub	sp, #8
 8016818:	af00      	add	r7, sp, #0
 801681a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8016828:	4619      	mov	r1, r3
 801682a:	4610      	mov	r0, r2
 801682c:	f7f1 fe10 	bl	8008450 <USBD_LL_SetupStage>
}
 8016830:	bf00      	nop
 8016832:	3708      	adds	r7, #8
 8016834:	46bd      	mov	sp, r7
 8016836:	bd80      	pop	{r7, pc}

08016838 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016838:	b580      	push	{r7, lr}
 801683a:	b082      	sub	sp, #8
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
 8016840:	460b      	mov	r3, r1
 8016842:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801684a:	78fa      	ldrb	r2, [r7, #3]
 801684c:	6879      	ldr	r1, [r7, #4]
 801684e:	4613      	mov	r3, r2
 8016850:	00db      	lsls	r3, r3, #3
 8016852:	1a9b      	subs	r3, r3, r2
 8016854:	009b      	lsls	r3, r3, #2
 8016856:	440b      	add	r3, r1
 8016858:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801685c:	681a      	ldr	r2, [r3, #0]
 801685e:	78fb      	ldrb	r3, [r7, #3]
 8016860:	4619      	mov	r1, r3
 8016862:	f7f1 fe4a 	bl	80084fa <USBD_LL_DataOutStage>
}
 8016866:	bf00      	nop
 8016868:	3708      	adds	r7, #8
 801686a:	46bd      	mov	sp, r7
 801686c:	bd80      	pop	{r7, pc}

0801686e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801686e:	b580      	push	{r7, lr}
 8016870:	b082      	sub	sp, #8
 8016872:	af00      	add	r7, sp, #0
 8016874:	6078      	str	r0, [r7, #4]
 8016876:	460b      	mov	r3, r1
 8016878:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016880:	78fa      	ldrb	r2, [r7, #3]
 8016882:	6879      	ldr	r1, [r7, #4]
 8016884:	4613      	mov	r3, r2
 8016886:	00db      	lsls	r3, r3, #3
 8016888:	1a9b      	subs	r3, r3, r2
 801688a:	009b      	lsls	r3, r3, #2
 801688c:	440b      	add	r3, r1
 801688e:	3348      	adds	r3, #72	; 0x48
 8016890:	681a      	ldr	r2, [r3, #0]
 8016892:	78fb      	ldrb	r3, [r7, #3]
 8016894:	4619      	mov	r1, r3
 8016896:	f7f1 fe93 	bl	80085c0 <USBD_LL_DataInStage>
}
 801689a:	bf00      	nop
 801689c:	3708      	adds	r7, #8
 801689e:	46bd      	mov	sp, r7
 80168a0:	bd80      	pop	{r7, pc}

080168a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168a2:	b580      	push	{r7, lr}
 80168a4:	b082      	sub	sp, #8
 80168a6:	af00      	add	r7, sp, #0
 80168a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80168b0:	4618      	mov	r0, r3
 80168b2:	f7f1 ffa7 	bl	8008804 <USBD_LL_SOF>
}
 80168b6:	bf00      	nop
 80168b8:	3708      	adds	r7, #8
 80168ba:	46bd      	mov	sp, r7
 80168bc:	bd80      	pop	{r7, pc}

080168be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168be:	b580      	push	{r7, lr}
 80168c0:	b084      	sub	sp, #16
 80168c2:	af00      	add	r7, sp, #0
 80168c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80168c6:	2301      	movs	r3, #1
 80168c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	68db      	ldr	r3, [r3, #12]
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d102      	bne.n	80168d8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80168d2:	2300      	movs	r3, #0
 80168d4:	73fb      	strb	r3, [r7, #15]
 80168d6:	e008      	b.n	80168ea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	68db      	ldr	r3, [r3, #12]
 80168dc:	2b02      	cmp	r3, #2
 80168de:	d102      	bne.n	80168e6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80168e0:	2301      	movs	r3, #1
 80168e2:	73fb      	strb	r3, [r7, #15]
 80168e4:	e001      	b.n	80168ea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80168e6:	f7ea facd 	bl	8000e84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80168f0:	7bfa      	ldrb	r2, [r7, #15]
 80168f2:	4611      	mov	r1, r2
 80168f4:	4618      	mov	r0, r3
 80168f6:	f7f1 ff47 	bl	8008788 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016900:	4618      	mov	r0, r3
 8016902:	f7f1 fef3 	bl	80086ec <USBD_LL_Reset>
}
 8016906:	bf00      	nop
 8016908:	3710      	adds	r7, #16
 801690a:	46bd      	mov	sp, r7
 801690c:	bd80      	pop	{r7, pc}
	...

08016910 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b082      	sub	sp, #8
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801691e:	4618      	mov	r0, r3
 8016920:	f7f1 ff42 	bl	80087a8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	687a      	ldr	r2, [r7, #4]
 8016930:	6812      	ldr	r2, [r2, #0]
 8016932:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016936:	f043 0301 	orr.w	r3, r3, #1
 801693a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	6a1b      	ldr	r3, [r3, #32]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d005      	beq.n	8016950 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016944:	4b04      	ldr	r3, [pc, #16]	; (8016958 <HAL_PCD_SuspendCallback+0x48>)
 8016946:	691b      	ldr	r3, [r3, #16]
 8016948:	4a03      	ldr	r2, [pc, #12]	; (8016958 <HAL_PCD_SuspendCallback+0x48>)
 801694a:	f043 0306 	orr.w	r3, r3, #6
 801694e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016950:	bf00      	nop
 8016952:	3708      	adds	r7, #8
 8016954:	46bd      	mov	sp, r7
 8016956:	bd80      	pop	{r7, pc}
 8016958:	e000ed00 	.word	0xe000ed00

0801695c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801695c:	b580      	push	{r7, lr}
 801695e:	b082      	sub	sp, #8
 8016960:	af00      	add	r7, sp, #0
 8016962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801696a:	4618      	mov	r0, r3
 801696c:	f7f1 ff32 	bl	80087d4 <USBD_LL_Resume>
}
 8016970:	bf00      	nop
 8016972:	3708      	adds	r7, #8
 8016974:	46bd      	mov	sp, r7
 8016976:	bd80      	pop	{r7, pc}

08016978 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016978:	b580      	push	{r7, lr}
 801697a:	b082      	sub	sp, #8
 801697c:	af00      	add	r7, sp, #0
 801697e:	6078      	str	r0, [r7, #4]
 8016980:	460b      	mov	r3, r1
 8016982:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801698a:	78fa      	ldrb	r2, [r7, #3]
 801698c:	4611      	mov	r1, r2
 801698e:	4618      	mov	r0, r3
 8016990:	f7f1 ff80 	bl	8008894 <USBD_LL_IsoOUTIncomplete>
}
 8016994:	bf00      	nop
 8016996:	3708      	adds	r7, #8
 8016998:	46bd      	mov	sp, r7
 801699a:	bd80      	pop	{r7, pc}

0801699c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801699c:	b580      	push	{r7, lr}
 801699e:	b082      	sub	sp, #8
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
 80169a4:	460b      	mov	r3, r1
 80169a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80169ae:	78fa      	ldrb	r2, [r7, #3]
 80169b0:	4611      	mov	r1, r2
 80169b2:	4618      	mov	r0, r3
 80169b4:	f7f1 ff48 	bl	8008848 <USBD_LL_IsoINIncomplete>
}
 80169b8:	bf00      	nop
 80169ba:	3708      	adds	r7, #8
 80169bc:	46bd      	mov	sp, r7
 80169be:	bd80      	pop	{r7, pc}

080169c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b082      	sub	sp, #8
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80169ce:	4618      	mov	r0, r3
 80169d0:	f7f1 ff86 	bl	80088e0 <USBD_LL_DevConnected>
}
 80169d4:	bf00      	nop
 80169d6:	3708      	adds	r7, #8
 80169d8:	46bd      	mov	sp, r7
 80169da:	bd80      	pop	{r7, pc}

080169dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169dc:	b580      	push	{r7, lr}
 80169de:	b082      	sub	sp, #8
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80169ea:	4618      	mov	r0, r3
 80169ec:	f7f1 ff83 	bl	80088f6 <USBD_LL_DevDisconnected>
}
 80169f0:	bf00      	nop
 80169f2:	3708      	adds	r7, #8
 80169f4:	46bd      	mov	sp, r7
 80169f6:	bd80      	pop	{r7, pc}

080169f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b082      	sub	sp, #8
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	781b      	ldrb	r3, [r3, #0]
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d13c      	bne.n	8016a82 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016a08:	4a20      	ldr	r2, [pc, #128]	; (8016a8c <USBD_LL_Init+0x94>)
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	4a1e      	ldr	r2, [pc, #120]	; (8016a8c <USBD_LL_Init+0x94>)
 8016a14:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016a18:	4b1c      	ldr	r3, [pc, #112]	; (8016a8c <USBD_LL_Init+0x94>)
 8016a1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016a1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8016a20:	4b1a      	ldr	r3, [pc, #104]	; (8016a8c <USBD_LL_Init+0x94>)
 8016a22:	2204      	movs	r2, #4
 8016a24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016a26:	4b19      	ldr	r3, [pc, #100]	; (8016a8c <USBD_LL_Init+0x94>)
 8016a28:	2202      	movs	r2, #2
 8016a2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016a2c:	4b17      	ldr	r3, [pc, #92]	; (8016a8c <USBD_LL_Init+0x94>)
 8016a2e:	2200      	movs	r2, #0
 8016a30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016a32:	4b16      	ldr	r3, [pc, #88]	; (8016a8c <USBD_LL_Init+0x94>)
 8016a34:	2202      	movs	r2, #2
 8016a36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016a38:	4b14      	ldr	r3, [pc, #80]	; (8016a8c <USBD_LL_Init+0x94>)
 8016a3a:	2200      	movs	r2, #0
 8016a3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016a3e:	4b13      	ldr	r3, [pc, #76]	; (8016a8c <USBD_LL_Init+0x94>)
 8016a40:	2200      	movs	r2, #0
 8016a42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016a44:	4b11      	ldr	r3, [pc, #68]	; (8016a8c <USBD_LL_Init+0x94>)
 8016a46:	2200      	movs	r2, #0
 8016a48:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8016a4a:	4b10      	ldr	r3, [pc, #64]	; (8016a8c <USBD_LL_Init+0x94>)
 8016a4c:	2201      	movs	r2, #1
 8016a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016a50:	4b0e      	ldr	r3, [pc, #56]	; (8016a8c <USBD_LL_Init+0x94>)
 8016a52:	2200      	movs	r2, #0
 8016a54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016a56:	480d      	ldr	r0, [pc, #52]	; (8016a8c <USBD_LL_Init+0x94>)
 8016a58:	f7ec f806 	bl	8002a68 <HAL_PCD_Init>
 8016a5c:	4603      	mov	r3, r0
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d001      	beq.n	8016a66 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016a62:	f7ea fa0f 	bl	8000e84 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016a66:	2180      	movs	r1, #128	; 0x80
 8016a68:	4808      	ldr	r0, [pc, #32]	; (8016a8c <USBD_LL_Init+0x94>)
 8016a6a:	f7ed f964 	bl	8003d36 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016a6e:	2240      	movs	r2, #64	; 0x40
 8016a70:	2100      	movs	r1, #0
 8016a72:	4806      	ldr	r0, [pc, #24]	; (8016a8c <USBD_LL_Init+0x94>)
 8016a74:	f7ed f918 	bl	8003ca8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016a78:	2280      	movs	r2, #128	; 0x80
 8016a7a:	2101      	movs	r1, #1
 8016a7c:	4803      	ldr	r0, [pc, #12]	; (8016a8c <USBD_LL_Init+0x94>)
 8016a7e:	f7ed f913 	bl	8003ca8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016a82:	2300      	movs	r3, #0
}
 8016a84:	4618      	mov	r0, r3
 8016a86:	3708      	adds	r7, #8
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	bd80      	pop	{r7, pc}
 8016a8c:	2000c5f0 	.word	0x2000c5f0

08016a90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016a90:	b580      	push	{r7, lr}
 8016a92:	b084      	sub	sp, #16
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a98:	2300      	movs	r3, #0
 8016a9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016aa6:	4618      	mov	r0, r3
 8016aa8:	f7ec f8fb 	bl	8002ca2 <HAL_PCD_Start>
 8016aac:	4603      	mov	r3, r0
 8016aae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ab0:	7bfb      	ldrb	r3, [r7, #15]
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	f000 f942 	bl	8016d3c <USBD_Get_USB_Status>
 8016ab8:	4603      	mov	r3, r0
 8016aba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8016abe:	4618      	mov	r0, r3
 8016ac0:	3710      	adds	r7, #16
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	bd80      	pop	{r7, pc}

08016ac6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016ac6:	b580      	push	{r7, lr}
 8016ac8:	b084      	sub	sp, #16
 8016aca:	af00      	add	r7, sp, #0
 8016acc:	6078      	str	r0, [r7, #4]
 8016ace:	4608      	mov	r0, r1
 8016ad0:	4611      	mov	r1, r2
 8016ad2:	461a      	mov	r2, r3
 8016ad4:	4603      	mov	r3, r0
 8016ad6:	70fb      	strb	r3, [r7, #3]
 8016ad8:	460b      	mov	r3, r1
 8016ada:	70bb      	strb	r3, [r7, #2]
 8016adc:	4613      	mov	r3, r2
 8016ade:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ae4:	2300      	movs	r3, #0
 8016ae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016aee:	78bb      	ldrb	r3, [r7, #2]
 8016af0:	883a      	ldrh	r2, [r7, #0]
 8016af2:	78f9      	ldrb	r1, [r7, #3]
 8016af4:	f7ec fcdf 	bl	80034b6 <HAL_PCD_EP_Open>
 8016af8:	4603      	mov	r3, r0
 8016afa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016afc:	7bfb      	ldrb	r3, [r7, #15]
 8016afe:	4618      	mov	r0, r3
 8016b00:	f000 f91c 	bl	8016d3c <USBD_Get_USB_Status>
 8016b04:	4603      	mov	r3, r0
 8016b06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b08:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	3710      	adds	r7, #16
 8016b0e:	46bd      	mov	sp, r7
 8016b10:	bd80      	pop	{r7, pc}

08016b12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b12:	b580      	push	{r7, lr}
 8016b14:	b084      	sub	sp, #16
 8016b16:	af00      	add	r7, sp, #0
 8016b18:	6078      	str	r0, [r7, #4]
 8016b1a:	460b      	mov	r3, r1
 8016b1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b1e:	2300      	movs	r3, #0
 8016b20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b22:	2300      	movs	r3, #0
 8016b24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b2c:	78fa      	ldrb	r2, [r7, #3]
 8016b2e:	4611      	mov	r1, r2
 8016b30:	4618      	mov	r0, r3
 8016b32:	f7ec fd28 	bl	8003586 <HAL_PCD_EP_Close>
 8016b36:	4603      	mov	r3, r0
 8016b38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b3a:	7bfb      	ldrb	r3, [r7, #15]
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	f000 f8fd 	bl	8016d3c <USBD_Get_USB_Status>
 8016b42:	4603      	mov	r3, r0
 8016b44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b46:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b48:	4618      	mov	r0, r3
 8016b4a:	3710      	adds	r7, #16
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	bd80      	pop	{r7, pc}

08016b50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b50:	b580      	push	{r7, lr}
 8016b52:	b084      	sub	sp, #16
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	6078      	str	r0, [r7, #4]
 8016b58:	460b      	mov	r3, r1
 8016b5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b60:	2300      	movs	r3, #0
 8016b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b6a:	78fa      	ldrb	r2, [r7, #3]
 8016b6c:	4611      	mov	r1, r2
 8016b6e:	4618      	mov	r0, r3
 8016b70:	f7ec fe00 	bl	8003774 <HAL_PCD_EP_SetStall>
 8016b74:	4603      	mov	r3, r0
 8016b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b78:	7bfb      	ldrb	r3, [r7, #15]
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	f000 f8de 	bl	8016d3c <USBD_Get_USB_Status>
 8016b80:	4603      	mov	r3, r0
 8016b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b86:	4618      	mov	r0, r3
 8016b88:	3710      	adds	r7, #16
 8016b8a:	46bd      	mov	sp, r7
 8016b8c:	bd80      	pop	{r7, pc}

08016b8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b8e:	b580      	push	{r7, lr}
 8016b90:	b084      	sub	sp, #16
 8016b92:	af00      	add	r7, sp, #0
 8016b94:	6078      	str	r0, [r7, #4]
 8016b96:	460b      	mov	r3, r1
 8016b98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016ba8:	78fa      	ldrb	r2, [r7, #3]
 8016baa:	4611      	mov	r1, r2
 8016bac:	4618      	mov	r0, r3
 8016bae:	f7ec fe45 	bl	800383c <HAL_PCD_EP_ClrStall>
 8016bb2:	4603      	mov	r3, r0
 8016bb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016bb6:	7bfb      	ldrb	r3, [r7, #15]
 8016bb8:	4618      	mov	r0, r3
 8016bba:	f000 f8bf 	bl	8016d3c <USBD_Get_USB_Status>
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016bc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8016bc4:	4618      	mov	r0, r3
 8016bc6:	3710      	adds	r7, #16
 8016bc8:	46bd      	mov	sp, r7
 8016bca:	bd80      	pop	{r7, pc}

08016bcc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016bcc:	b480      	push	{r7}
 8016bce:	b085      	sub	sp, #20
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	6078      	str	r0, [r7, #4]
 8016bd4:	460b      	mov	r3, r1
 8016bd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016bde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016be0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	da0b      	bge.n	8016c00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016be8:	78fb      	ldrb	r3, [r7, #3]
 8016bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016bee:	68f9      	ldr	r1, [r7, #12]
 8016bf0:	4613      	mov	r3, r2
 8016bf2:	00db      	lsls	r3, r3, #3
 8016bf4:	1a9b      	subs	r3, r3, r2
 8016bf6:	009b      	lsls	r3, r3, #2
 8016bf8:	440b      	add	r3, r1
 8016bfa:	333e      	adds	r3, #62	; 0x3e
 8016bfc:	781b      	ldrb	r3, [r3, #0]
 8016bfe:	e00b      	b.n	8016c18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016c00:	78fb      	ldrb	r3, [r7, #3]
 8016c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016c06:	68f9      	ldr	r1, [r7, #12]
 8016c08:	4613      	mov	r3, r2
 8016c0a:	00db      	lsls	r3, r3, #3
 8016c0c:	1a9b      	subs	r3, r3, r2
 8016c0e:	009b      	lsls	r3, r3, #2
 8016c10:	440b      	add	r3, r1
 8016c12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016c16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016c18:	4618      	mov	r0, r3
 8016c1a:	3714      	adds	r7, #20
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c22:	4770      	bx	lr

08016c24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b084      	sub	sp, #16
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	6078      	str	r0, [r7, #4]
 8016c2c:	460b      	mov	r3, r1
 8016c2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c30:	2300      	movs	r3, #0
 8016c32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c34:	2300      	movs	r3, #0
 8016c36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016c3e:	78fa      	ldrb	r2, [r7, #3]
 8016c40:	4611      	mov	r1, r2
 8016c42:	4618      	mov	r0, r3
 8016c44:	f7ec fc12 	bl	800346c <HAL_PCD_SetAddress>
 8016c48:	4603      	mov	r3, r0
 8016c4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c4c:	7bfb      	ldrb	r3, [r7, #15]
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f000 f874 	bl	8016d3c <USBD_Get_USB_Status>
 8016c54:	4603      	mov	r3, r0
 8016c56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c58:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	3710      	adds	r7, #16
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	bd80      	pop	{r7, pc}

08016c62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016c62:	b580      	push	{r7, lr}
 8016c64:	b086      	sub	sp, #24
 8016c66:	af00      	add	r7, sp, #0
 8016c68:	60f8      	str	r0, [r7, #12]
 8016c6a:	607a      	str	r2, [r7, #4]
 8016c6c:	603b      	str	r3, [r7, #0]
 8016c6e:	460b      	mov	r3, r1
 8016c70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c72:	2300      	movs	r3, #0
 8016c74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c76:	2300      	movs	r3, #0
 8016c78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016c80:	7af9      	ldrb	r1, [r7, #11]
 8016c82:	683b      	ldr	r3, [r7, #0]
 8016c84:	687a      	ldr	r2, [r7, #4]
 8016c86:	f7ec fd2b 	bl	80036e0 <HAL_PCD_EP_Transmit>
 8016c8a:	4603      	mov	r3, r0
 8016c8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c8e:	7dfb      	ldrb	r3, [r7, #23]
 8016c90:	4618      	mov	r0, r3
 8016c92:	f000 f853 	bl	8016d3c <USBD_Get_USB_Status>
 8016c96:	4603      	mov	r3, r0
 8016c98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016c9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8016c9c:	4618      	mov	r0, r3
 8016c9e:	3718      	adds	r7, #24
 8016ca0:	46bd      	mov	sp, r7
 8016ca2:	bd80      	pop	{r7, pc}

08016ca4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b086      	sub	sp, #24
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	60f8      	str	r0, [r7, #12]
 8016cac:	607a      	str	r2, [r7, #4]
 8016cae:	603b      	str	r3, [r7, #0]
 8016cb0:	460b      	mov	r3, r1
 8016cb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cb8:	2300      	movs	r3, #0
 8016cba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016cc2:	7af9      	ldrb	r1, [r7, #11]
 8016cc4:	683b      	ldr	r3, [r7, #0]
 8016cc6:	687a      	ldr	r2, [r7, #4]
 8016cc8:	f7ec fca7 	bl	800361a <HAL_PCD_EP_Receive>
 8016ccc:	4603      	mov	r3, r0
 8016cce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016cd0:	7dfb      	ldrb	r3, [r7, #23]
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	f000 f832 	bl	8016d3c <USBD_Get_USB_Status>
 8016cd8:	4603      	mov	r3, r0
 8016cda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016cdc:	7dbb      	ldrb	r3, [r7, #22]
}
 8016cde:	4618      	mov	r0, r3
 8016ce0:	3718      	adds	r7, #24
 8016ce2:	46bd      	mov	sp, r7
 8016ce4:	bd80      	pop	{r7, pc}

08016ce6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ce6:	b580      	push	{r7, lr}
 8016ce8:	b082      	sub	sp, #8
 8016cea:	af00      	add	r7, sp, #0
 8016cec:	6078      	str	r0, [r7, #4]
 8016cee:	460b      	mov	r3, r1
 8016cf0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016cf8:	78fa      	ldrb	r2, [r7, #3]
 8016cfa:	4611      	mov	r1, r2
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	f7ec fcd7 	bl	80036b0 <HAL_PCD_EP_GetRxCount>
 8016d02:	4603      	mov	r3, r0
}
 8016d04:	4618      	mov	r0, r3
 8016d06:	3708      	adds	r7, #8
 8016d08:	46bd      	mov	sp, r7
 8016d0a:	bd80      	pop	{r7, pc}

08016d0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016d0c:	b480      	push	{r7}
 8016d0e:	b083      	sub	sp, #12
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016d14:	4b03      	ldr	r3, [pc, #12]	; (8016d24 <USBD_static_malloc+0x18>)
}
 8016d16:	4618      	mov	r0, r3
 8016d18:	370c      	adds	r7, #12
 8016d1a:	46bd      	mov	sp, r7
 8016d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d20:	4770      	bx	lr
 8016d22:	bf00      	nop
 8016d24:	20004380 	.word	0x20004380

08016d28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016d28:	b480      	push	{r7}
 8016d2a:	b083      	sub	sp, #12
 8016d2c:	af00      	add	r7, sp, #0
 8016d2e:	6078      	str	r0, [r7, #4]

}
 8016d30:	bf00      	nop
 8016d32:	370c      	adds	r7, #12
 8016d34:	46bd      	mov	sp, r7
 8016d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d3a:	4770      	bx	lr

08016d3c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016d3c:	b480      	push	{r7}
 8016d3e:	b085      	sub	sp, #20
 8016d40:	af00      	add	r7, sp, #0
 8016d42:	4603      	mov	r3, r0
 8016d44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d46:	2300      	movs	r3, #0
 8016d48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016d4a:	79fb      	ldrb	r3, [r7, #7]
 8016d4c:	2b03      	cmp	r3, #3
 8016d4e:	d817      	bhi.n	8016d80 <USBD_Get_USB_Status+0x44>
 8016d50:	a201      	add	r2, pc, #4	; (adr r2, 8016d58 <USBD_Get_USB_Status+0x1c>)
 8016d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d56:	bf00      	nop
 8016d58:	08016d69 	.word	0x08016d69
 8016d5c:	08016d6f 	.word	0x08016d6f
 8016d60:	08016d75 	.word	0x08016d75
 8016d64:	08016d7b 	.word	0x08016d7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016d68:	2300      	movs	r3, #0
 8016d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8016d6c:	e00b      	b.n	8016d86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016d6e:	2303      	movs	r3, #3
 8016d70:	73fb      	strb	r3, [r7, #15]
    break;
 8016d72:	e008      	b.n	8016d86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016d74:	2301      	movs	r3, #1
 8016d76:	73fb      	strb	r3, [r7, #15]
    break;
 8016d78:	e005      	b.n	8016d86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016d7a:	2303      	movs	r3, #3
 8016d7c:	73fb      	strb	r3, [r7, #15]
    break;
 8016d7e:	e002      	b.n	8016d86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016d80:	2303      	movs	r3, #3
 8016d82:	73fb      	strb	r3, [r7, #15]
    break;
 8016d84:	bf00      	nop
  }
  return usb_status;
 8016d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d88:	4618      	mov	r0, r3
 8016d8a:	3714      	adds	r7, #20
 8016d8c:	46bd      	mov	sp, r7
 8016d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d92:	4770      	bx	lr

08016d94 <__libc_init_array>:
 8016d94:	b570      	push	{r4, r5, r6, lr}
 8016d96:	4d0d      	ldr	r5, [pc, #52]	; (8016dcc <__libc_init_array+0x38>)
 8016d98:	4c0d      	ldr	r4, [pc, #52]	; (8016dd0 <__libc_init_array+0x3c>)
 8016d9a:	1b64      	subs	r4, r4, r5
 8016d9c:	10a4      	asrs	r4, r4, #2
 8016d9e:	2600      	movs	r6, #0
 8016da0:	42a6      	cmp	r6, r4
 8016da2:	d109      	bne.n	8016db8 <__libc_init_array+0x24>
 8016da4:	4d0b      	ldr	r5, [pc, #44]	; (8016dd4 <__libc_init_array+0x40>)
 8016da6:	4c0c      	ldr	r4, [pc, #48]	; (8016dd8 <__libc_init_array+0x44>)
 8016da8:	f001 f856 	bl	8017e58 <_init>
 8016dac:	1b64      	subs	r4, r4, r5
 8016dae:	10a4      	asrs	r4, r4, #2
 8016db0:	2600      	movs	r6, #0
 8016db2:	42a6      	cmp	r6, r4
 8016db4:	d105      	bne.n	8016dc2 <__libc_init_array+0x2e>
 8016db6:	bd70      	pop	{r4, r5, r6, pc}
 8016db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8016dbc:	4798      	blx	r3
 8016dbe:	3601      	adds	r6, #1
 8016dc0:	e7ee      	b.n	8016da0 <__libc_init_array+0xc>
 8016dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8016dc6:	4798      	blx	r3
 8016dc8:	3601      	adds	r6, #1
 8016dca:	e7f2      	b.n	8016db2 <__libc_init_array+0x1e>
 8016dcc:	0801ad7c 	.word	0x0801ad7c
 8016dd0:	0801ad7c 	.word	0x0801ad7c
 8016dd4:	0801ad7c 	.word	0x0801ad7c
 8016dd8:	0801ad80 	.word	0x0801ad80

08016ddc <memcmp>:
 8016ddc:	b530      	push	{r4, r5, lr}
 8016dde:	3901      	subs	r1, #1
 8016de0:	2400      	movs	r4, #0
 8016de2:	42a2      	cmp	r2, r4
 8016de4:	d101      	bne.n	8016dea <memcmp+0xe>
 8016de6:	2000      	movs	r0, #0
 8016de8:	e005      	b.n	8016df6 <memcmp+0x1a>
 8016dea:	5d03      	ldrb	r3, [r0, r4]
 8016dec:	3401      	adds	r4, #1
 8016dee:	5d0d      	ldrb	r5, [r1, r4]
 8016df0:	42ab      	cmp	r3, r5
 8016df2:	d0f6      	beq.n	8016de2 <memcmp+0x6>
 8016df4:	1b58      	subs	r0, r3, r5
 8016df6:	bd30      	pop	{r4, r5, pc}

08016df8 <memcpy>:
 8016df8:	440a      	add	r2, r1
 8016dfa:	4291      	cmp	r1, r2
 8016dfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8016e00:	d100      	bne.n	8016e04 <memcpy+0xc>
 8016e02:	4770      	bx	lr
 8016e04:	b510      	push	{r4, lr}
 8016e06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016e0e:	4291      	cmp	r1, r2
 8016e10:	d1f9      	bne.n	8016e06 <memcpy+0xe>
 8016e12:	bd10      	pop	{r4, pc}

08016e14 <memset>:
 8016e14:	4402      	add	r2, r0
 8016e16:	4603      	mov	r3, r0
 8016e18:	4293      	cmp	r3, r2
 8016e1a:	d100      	bne.n	8016e1e <memset+0xa>
 8016e1c:	4770      	bx	lr
 8016e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8016e22:	e7f9      	b.n	8016e18 <memset+0x4>

08016e24 <iprintf>:
 8016e24:	b40f      	push	{r0, r1, r2, r3}
 8016e26:	4b0a      	ldr	r3, [pc, #40]	; (8016e50 <iprintf+0x2c>)
 8016e28:	b513      	push	{r0, r1, r4, lr}
 8016e2a:	681c      	ldr	r4, [r3, #0]
 8016e2c:	b124      	cbz	r4, 8016e38 <iprintf+0x14>
 8016e2e:	69a3      	ldr	r3, [r4, #24]
 8016e30:	b913      	cbnz	r3, 8016e38 <iprintf+0x14>
 8016e32:	4620      	mov	r0, r4
 8016e34:	f000 f8c4 	bl	8016fc0 <__sinit>
 8016e38:	ab05      	add	r3, sp, #20
 8016e3a:	9a04      	ldr	r2, [sp, #16]
 8016e3c:	68a1      	ldr	r1, [r4, #8]
 8016e3e:	9301      	str	r3, [sp, #4]
 8016e40:	4620      	mov	r0, r4
 8016e42:	f000 fa4b 	bl	80172dc <_vfiprintf_r>
 8016e46:	b002      	add	sp, #8
 8016e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e4c:	b004      	add	sp, #16
 8016e4e:	4770      	bx	lr
 8016e50:	20000190 	.word	0x20000190

08016e54 <rand>:
 8016e54:	4b17      	ldr	r3, [pc, #92]	; (8016eb4 <rand+0x60>)
 8016e56:	b510      	push	{r4, lr}
 8016e58:	681c      	ldr	r4, [r3, #0]
 8016e5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016e5c:	b9b3      	cbnz	r3, 8016e8c <rand+0x38>
 8016e5e:	2018      	movs	r0, #24
 8016e60:	f000 f960 	bl	8017124 <malloc>
 8016e64:	63a0      	str	r0, [r4, #56]	; 0x38
 8016e66:	b928      	cbnz	r0, 8016e74 <rand+0x20>
 8016e68:	4602      	mov	r2, r0
 8016e6a:	4b13      	ldr	r3, [pc, #76]	; (8016eb8 <rand+0x64>)
 8016e6c:	4813      	ldr	r0, [pc, #76]	; (8016ebc <rand+0x68>)
 8016e6e:	214e      	movs	r1, #78	; 0x4e
 8016e70:	f000 f830 	bl	8016ed4 <__assert_func>
 8016e74:	4a12      	ldr	r2, [pc, #72]	; (8016ec0 <rand+0x6c>)
 8016e76:	4b13      	ldr	r3, [pc, #76]	; (8016ec4 <rand+0x70>)
 8016e78:	e9c0 2300 	strd	r2, r3, [r0]
 8016e7c:	4b12      	ldr	r3, [pc, #72]	; (8016ec8 <rand+0x74>)
 8016e7e:	6083      	str	r3, [r0, #8]
 8016e80:	230b      	movs	r3, #11
 8016e82:	8183      	strh	r3, [r0, #12]
 8016e84:	2201      	movs	r2, #1
 8016e86:	2300      	movs	r3, #0
 8016e88:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016e8c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016e8e:	480f      	ldr	r0, [pc, #60]	; (8016ecc <rand+0x78>)
 8016e90:	690a      	ldr	r2, [r1, #16]
 8016e92:	694b      	ldr	r3, [r1, #20]
 8016e94:	4c0e      	ldr	r4, [pc, #56]	; (8016ed0 <rand+0x7c>)
 8016e96:	4350      	muls	r0, r2
 8016e98:	fb04 0003 	mla	r0, r4, r3, r0
 8016e9c:	fba2 3404 	umull	r3, r4, r2, r4
 8016ea0:	1c5a      	adds	r2, r3, #1
 8016ea2:	4404      	add	r4, r0
 8016ea4:	f144 0000 	adc.w	r0, r4, #0
 8016ea8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8016eac:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016eb0:	bd10      	pop	{r4, pc}
 8016eb2:	bf00      	nop
 8016eb4:	20000190 	.word	0x20000190
 8016eb8:	0801ac2c 	.word	0x0801ac2c
 8016ebc:	0801ac43 	.word	0x0801ac43
 8016ec0:	abcd330e 	.word	0xabcd330e
 8016ec4:	e66d1234 	.word	0xe66d1234
 8016ec8:	0005deec 	.word	0x0005deec
 8016ecc:	5851f42d 	.word	0x5851f42d
 8016ed0:	4c957f2d 	.word	0x4c957f2d

08016ed4 <__assert_func>:
 8016ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016ed6:	4614      	mov	r4, r2
 8016ed8:	461a      	mov	r2, r3
 8016eda:	4b09      	ldr	r3, [pc, #36]	; (8016f00 <__assert_func+0x2c>)
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	4605      	mov	r5, r0
 8016ee0:	68d8      	ldr	r0, [r3, #12]
 8016ee2:	b14c      	cbz	r4, 8016ef8 <__assert_func+0x24>
 8016ee4:	4b07      	ldr	r3, [pc, #28]	; (8016f04 <__assert_func+0x30>)
 8016ee6:	9100      	str	r1, [sp, #0]
 8016ee8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016eec:	4906      	ldr	r1, [pc, #24]	; (8016f08 <__assert_func+0x34>)
 8016eee:	462b      	mov	r3, r5
 8016ef0:	f000 f8e4 	bl	80170bc <fiprintf>
 8016ef4:	f000 fddc 	bl	8017ab0 <abort>
 8016ef8:	4b04      	ldr	r3, [pc, #16]	; (8016f0c <__assert_func+0x38>)
 8016efa:	461c      	mov	r4, r3
 8016efc:	e7f3      	b.n	8016ee6 <__assert_func+0x12>
 8016efe:	bf00      	nop
 8016f00:	20000190 	.word	0x20000190
 8016f04:	0801aca2 	.word	0x0801aca2
 8016f08:	0801acaf 	.word	0x0801acaf
 8016f0c:	0801acdd 	.word	0x0801acdd

08016f10 <std>:
 8016f10:	2300      	movs	r3, #0
 8016f12:	b510      	push	{r4, lr}
 8016f14:	4604      	mov	r4, r0
 8016f16:	e9c0 3300 	strd	r3, r3, [r0]
 8016f1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016f1e:	6083      	str	r3, [r0, #8]
 8016f20:	8181      	strh	r1, [r0, #12]
 8016f22:	6643      	str	r3, [r0, #100]	; 0x64
 8016f24:	81c2      	strh	r2, [r0, #14]
 8016f26:	6183      	str	r3, [r0, #24]
 8016f28:	4619      	mov	r1, r3
 8016f2a:	2208      	movs	r2, #8
 8016f2c:	305c      	adds	r0, #92	; 0x5c
 8016f2e:	f7ff ff71 	bl	8016e14 <memset>
 8016f32:	4b05      	ldr	r3, [pc, #20]	; (8016f48 <std+0x38>)
 8016f34:	6263      	str	r3, [r4, #36]	; 0x24
 8016f36:	4b05      	ldr	r3, [pc, #20]	; (8016f4c <std+0x3c>)
 8016f38:	62a3      	str	r3, [r4, #40]	; 0x28
 8016f3a:	4b05      	ldr	r3, [pc, #20]	; (8016f50 <std+0x40>)
 8016f3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016f3e:	4b05      	ldr	r3, [pc, #20]	; (8016f54 <std+0x44>)
 8016f40:	6224      	str	r4, [r4, #32]
 8016f42:	6323      	str	r3, [r4, #48]	; 0x30
 8016f44:	bd10      	pop	{r4, pc}
 8016f46:	bf00      	nop
 8016f48:	08017885 	.word	0x08017885
 8016f4c:	080178a7 	.word	0x080178a7
 8016f50:	080178df 	.word	0x080178df
 8016f54:	08017903 	.word	0x08017903

08016f58 <_cleanup_r>:
 8016f58:	4901      	ldr	r1, [pc, #4]	; (8016f60 <_cleanup_r+0x8>)
 8016f5a:	f000 b8c1 	b.w	80170e0 <_fwalk_reent>
 8016f5e:	bf00      	nop
 8016f60:	08017bed 	.word	0x08017bed

08016f64 <__sfmoreglue>:
 8016f64:	b570      	push	{r4, r5, r6, lr}
 8016f66:	1e4a      	subs	r2, r1, #1
 8016f68:	2568      	movs	r5, #104	; 0x68
 8016f6a:	4355      	muls	r5, r2
 8016f6c:	460e      	mov	r6, r1
 8016f6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016f72:	f000 f92f 	bl	80171d4 <_malloc_r>
 8016f76:	4604      	mov	r4, r0
 8016f78:	b140      	cbz	r0, 8016f8c <__sfmoreglue+0x28>
 8016f7a:	2100      	movs	r1, #0
 8016f7c:	e9c0 1600 	strd	r1, r6, [r0]
 8016f80:	300c      	adds	r0, #12
 8016f82:	60a0      	str	r0, [r4, #8]
 8016f84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016f88:	f7ff ff44 	bl	8016e14 <memset>
 8016f8c:	4620      	mov	r0, r4
 8016f8e:	bd70      	pop	{r4, r5, r6, pc}

08016f90 <__sfp_lock_acquire>:
 8016f90:	4801      	ldr	r0, [pc, #4]	; (8016f98 <__sfp_lock_acquire+0x8>)
 8016f92:	f000 b8c5 	b.w	8017120 <__retarget_lock_acquire_recursive>
 8016f96:	bf00      	nop
 8016f98:	2000ca00 	.word	0x2000ca00

08016f9c <__sfp_lock_release>:
 8016f9c:	4801      	ldr	r0, [pc, #4]	; (8016fa4 <__sfp_lock_release+0x8>)
 8016f9e:	f000 b8c0 	b.w	8017122 <__retarget_lock_release_recursive>
 8016fa2:	bf00      	nop
 8016fa4:	2000ca00 	.word	0x2000ca00

08016fa8 <__sinit_lock_acquire>:
 8016fa8:	4801      	ldr	r0, [pc, #4]	; (8016fb0 <__sinit_lock_acquire+0x8>)
 8016faa:	f000 b8b9 	b.w	8017120 <__retarget_lock_acquire_recursive>
 8016fae:	bf00      	nop
 8016fb0:	2000c9fb 	.word	0x2000c9fb

08016fb4 <__sinit_lock_release>:
 8016fb4:	4801      	ldr	r0, [pc, #4]	; (8016fbc <__sinit_lock_release+0x8>)
 8016fb6:	f000 b8b4 	b.w	8017122 <__retarget_lock_release_recursive>
 8016fba:	bf00      	nop
 8016fbc:	2000c9fb 	.word	0x2000c9fb

08016fc0 <__sinit>:
 8016fc0:	b510      	push	{r4, lr}
 8016fc2:	4604      	mov	r4, r0
 8016fc4:	f7ff fff0 	bl	8016fa8 <__sinit_lock_acquire>
 8016fc8:	69a3      	ldr	r3, [r4, #24]
 8016fca:	b11b      	cbz	r3, 8016fd4 <__sinit+0x14>
 8016fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016fd0:	f7ff bff0 	b.w	8016fb4 <__sinit_lock_release>
 8016fd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016fd8:	6523      	str	r3, [r4, #80]	; 0x50
 8016fda:	4b13      	ldr	r3, [pc, #76]	; (8017028 <__sinit+0x68>)
 8016fdc:	4a13      	ldr	r2, [pc, #76]	; (801702c <__sinit+0x6c>)
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	62a2      	str	r2, [r4, #40]	; 0x28
 8016fe2:	42a3      	cmp	r3, r4
 8016fe4:	bf04      	itt	eq
 8016fe6:	2301      	moveq	r3, #1
 8016fe8:	61a3      	streq	r3, [r4, #24]
 8016fea:	4620      	mov	r0, r4
 8016fec:	f000 f820 	bl	8017030 <__sfp>
 8016ff0:	6060      	str	r0, [r4, #4]
 8016ff2:	4620      	mov	r0, r4
 8016ff4:	f000 f81c 	bl	8017030 <__sfp>
 8016ff8:	60a0      	str	r0, [r4, #8]
 8016ffa:	4620      	mov	r0, r4
 8016ffc:	f000 f818 	bl	8017030 <__sfp>
 8017000:	2200      	movs	r2, #0
 8017002:	60e0      	str	r0, [r4, #12]
 8017004:	2104      	movs	r1, #4
 8017006:	6860      	ldr	r0, [r4, #4]
 8017008:	f7ff ff82 	bl	8016f10 <std>
 801700c:	68a0      	ldr	r0, [r4, #8]
 801700e:	2201      	movs	r2, #1
 8017010:	2109      	movs	r1, #9
 8017012:	f7ff ff7d 	bl	8016f10 <std>
 8017016:	68e0      	ldr	r0, [r4, #12]
 8017018:	2202      	movs	r2, #2
 801701a:	2112      	movs	r1, #18
 801701c:	f7ff ff78 	bl	8016f10 <std>
 8017020:	2301      	movs	r3, #1
 8017022:	61a3      	str	r3, [r4, #24]
 8017024:	e7d2      	b.n	8016fcc <__sinit+0xc>
 8017026:	bf00      	nop
 8017028:	0801ac28 	.word	0x0801ac28
 801702c:	08016f59 	.word	0x08016f59

08017030 <__sfp>:
 8017030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017032:	4607      	mov	r7, r0
 8017034:	f7ff ffac 	bl	8016f90 <__sfp_lock_acquire>
 8017038:	4b1e      	ldr	r3, [pc, #120]	; (80170b4 <__sfp+0x84>)
 801703a:	681e      	ldr	r6, [r3, #0]
 801703c:	69b3      	ldr	r3, [r6, #24]
 801703e:	b913      	cbnz	r3, 8017046 <__sfp+0x16>
 8017040:	4630      	mov	r0, r6
 8017042:	f7ff ffbd 	bl	8016fc0 <__sinit>
 8017046:	3648      	adds	r6, #72	; 0x48
 8017048:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801704c:	3b01      	subs	r3, #1
 801704e:	d503      	bpl.n	8017058 <__sfp+0x28>
 8017050:	6833      	ldr	r3, [r6, #0]
 8017052:	b30b      	cbz	r3, 8017098 <__sfp+0x68>
 8017054:	6836      	ldr	r6, [r6, #0]
 8017056:	e7f7      	b.n	8017048 <__sfp+0x18>
 8017058:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801705c:	b9d5      	cbnz	r5, 8017094 <__sfp+0x64>
 801705e:	4b16      	ldr	r3, [pc, #88]	; (80170b8 <__sfp+0x88>)
 8017060:	60e3      	str	r3, [r4, #12]
 8017062:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017066:	6665      	str	r5, [r4, #100]	; 0x64
 8017068:	f000 f859 	bl	801711e <__retarget_lock_init_recursive>
 801706c:	f7ff ff96 	bl	8016f9c <__sfp_lock_release>
 8017070:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017074:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017078:	6025      	str	r5, [r4, #0]
 801707a:	61a5      	str	r5, [r4, #24]
 801707c:	2208      	movs	r2, #8
 801707e:	4629      	mov	r1, r5
 8017080:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017084:	f7ff fec6 	bl	8016e14 <memset>
 8017088:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801708c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017090:	4620      	mov	r0, r4
 8017092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017094:	3468      	adds	r4, #104	; 0x68
 8017096:	e7d9      	b.n	801704c <__sfp+0x1c>
 8017098:	2104      	movs	r1, #4
 801709a:	4638      	mov	r0, r7
 801709c:	f7ff ff62 	bl	8016f64 <__sfmoreglue>
 80170a0:	4604      	mov	r4, r0
 80170a2:	6030      	str	r0, [r6, #0]
 80170a4:	2800      	cmp	r0, #0
 80170a6:	d1d5      	bne.n	8017054 <__sfp+0x24>
 80170a8:	f7ff ff78 	bl	8016f9c <__sfp_lock_release>
 80170ac:	230c      	movs	r3, #12
 80170ae:	603b      	str	r3, [r7, #0]
 80170b0:	e7ee      	b.n	8017090 <__sfp+0x60>
 80170b2:	bf00      	nop
 80170b4:	0801ac28 	.word	0x0801ac28
 80170b8:	ffff0001 	.word	0xffff0001

080170bc <fiprintf>:
 80170bc:	b40e      	push	{r1, r2, r3}
 80170be:	b503      	push	{r0, r1, lr}
 80170c0:	4601      	mov	r1, r0
 80170c2:	ab03      	add	r3, sp, #12
 80170c4:	4805      	ldr	r0, [pc, #20]	; (80170dc <fiprintf+0x20>)
 80170c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80170ca:	6800      	ldr	r0, [r0, #0]
 80170cc:	9301      	str	r3, [sp, #4]
 80170ce:	f000 f905 	bl	80172dc <_vfiprintf_r>
 80170d2:	b002      	add	sp, #8
 80170d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80170d8:	b003      	add	sp, #12
 80170da:	4770      	bx	lr
 80170dc:	20000190 	.word	0x20000190

080170e0 <_fwalk_reent>:
 80170e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170e4:	4606      	mov	r6, r0
 80170e6:	4688      	mov	r8, r1
 80170e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80170ec:	2700      	movs	r7, #0
 80170ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80170f2:	f1b9 0901 	subs.w	r9, r9, #1
 80170f6:	d505      	bpl.n	8017104 <_fwalk_reent+0x24>
 80170f8:	6824      	ldr	r4, [r4, #0]
 80170fa:	2c00      	cmp	r4, #0
 80170fc:	d1f7      	bne.n	80170ee <_fwalk_reent+0xe>
 80170fe:	4638      	mov	r0, r7
 8017100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017104:	89ab      	ldrh	r3, [r5, #12]
 8017106:	2b01      	cmp	r3, #1
 8017108:	d907      	bls.n	801711a <_fwalk_reent+0x3a>
 801710a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801710e:	3301      	adds	r3, #1
 8017110:	d003      	beq.n	801711a <_fwalk_reent+0x3a>
 8017112:	4629      	mov	r1, r5
 8017114:	4630      	mov	r0, r6
 8017116:	47c0      	blx	r8
 8017118:	4307      	orrs	r7, r0
 801711a:	3568      	adds	r5, #104	; 0x68
 801711c:	e7e9      	b.n	80170f2 <_fwalk_reent+0x12>

0801711e <__retarget_lock_init_recursive>:
 801711e:	4770      	bx	lr

08017120 <__retarget_lock_acquire_recursive>:
 8017120:	4770      	bx	lr

08017122 <__retarget_lock_release_recursive>:
 8017122:	4770      	bx	lr

08017124 <malloc>:
 8017124:	4b02      	ldr	r3, [pc, #8]	; (8017130 <malloc+0xc>)
 8017126:	4601      	mov	r1, r0
 8017128:	6818      	ldr	r0, [r3, #0]
 801712a:	f000 b853 	b.w	80171d4 <_malloc_r>
 801712e:	bf00      	nop
 8017130:	20000190 	.word	0x20000190

08017134 <_free_r>:
 8017134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017136:	2900      	cmp	r1, #0
 8017138:	d048      	beq.n	80171cc <_free_r+0x98>
 801713a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801713e:	9001      	str	r0, [sp, #4]
 8017140:	2b00      	cmp	r3, #0
 8017142:	f1a1 0404 	sub.w	r4, r1, #4
 8017146:	bfb8      	it	lt
 8017148:	18e4      	addlt	r4, r4, r3
 801714a:	f000 fe01 	bl	8017d50 <__malloc_lock>
 801714e:	4a20      	ldr	r2, [pc, #128]	; (80171d0 <_free_r+0x9c>)
 8017150:	9801      	ldr	r0, [sp, #4]
 8017152:	6813      	ldr	r3, [r2, #0]
 8017154:	4615      	mov	r5, r2
 8017156:	b933      	cbnz	r3, 8017166 <_free_r+0x32>
 8017158:	6063      	str	r3, [r4, #4]
 801715a:	6014      	str	r4, [r2, #0]
 801715c:	b003      	add	sp, #12
 801715e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017162:	f000 bdfb 	b.w	8017d5c <__malloc_unlock>
 8017166:	42a3      	cmp	r3, r4
 8017168:	d90b      	bls.n	8017182 <_free_r+0x4e>
 801716a:	6821      	ldr	r1, [r4, #0]
 801716c:	1862      	adds	r2, r4, r1
 801716e:	4293      	cmp	r3, r2
 8017170:	bf04      	itt	eq
 8017172:	681a      	ldreq	r2, [r3, #0]
 8017174:	685b      	ldreq	r3, [r3, #4]
 8017176:	6063      	str	r3, [r4, #4]
 8017178:	bf04      	itt	eq
 801717a:	1852      	addeq	r2, r2, r1
 801717c:	6022      	streq	r2, [r4, #0]
 801717e:	602c      	str	r4, [r5, #0]
 8017180:	e7ec      	b.n	801715c <_free_r+0x28>
 8017182:	461a      	mov	r2, r3
 8017184:	685b      	ldr	r3, [r3, #4]
 8017186:	b10b      	cbz	r3, 801718c <_free_r+0x58>
 8017188:	42a3      	cmp	r3, r4
 801718a:	d9fa      	bls.n	8017182 <_free_r+0x4e>
 801718c:	6811      	ldr	r1, [r2, #0]
 801718e:	1855      	adds	r5, r2, r1
 8017190:	42a5      	cmp	r5, r4
 8017192:	d10b      	bne.n	80171ac <_free_r+0x78>
 8017194:	6824      	ldr	r4, [r4, #0]
 8017196:	4421      	add	r1, r4
 8017198:	1854      	adds	r4, r2, r1
 801719a:	42a3      	cmp	r3, r4
 801719c:	6011      	str	r1, [r2, #0]
 801719e:	d1dd      	bne.n	801715c <_free_r+0x28>
 80171a0:	681c      	ldr	r4, [r3, #0]
 80171a2:	685b      	ldr	r3, [r3, #4]
 80171a4:	6053      	str	r3, [r2, #4]
 80171a6:	4421      	add	r1, r4
 80171a8:	6011      	str	r1, [r2, #0]
 80171aa:	e7d7      	b.n	801715c <_free_r+0x28>
 80171ac:	d902      	bls.n	80171b4 <_free_r+0x80>
 80171ae:	230c      	movs	r3, #12
 80171b0:	6003      	str	r3, [r0, #0]
 80171b2:	e7d3      	b.n	801715c <_free_r+0x28>
 80171b4:	6825      	ldr	r5, [r4, #0]
 80171b6:	1961      	adds	r1, r4, r5
 80171b8:	428b      	cmp	r3, r1
 80171ba:	bf04      	itt	eq
 80171bc:	6819      	ldreq	r1, [r3, #0]
 80171be:	685b      	ldreq	r3, [r3, #4]
 80171c0:	6063      	str	r3, [r4, #4]
 80171c2:	bf04      	itt	eq
 80171c4:	1949      	addeq	r1, r1, r5
 80171c6:	6021      	streq	r1, [r4, #0]
 80171c8:	6054      	str	r4, [r2, #4]
 80171ca:	e7c7      	b.n	801715c <_free_r+0x28>
 80171cc:	b003      	add	sp, #12
 80171ce:	bd30      	pop	{r4, r5, pc}
 80171d0:	200045a0 	.word	0x200045a0

080171d4 <_malloc_r>:
 80171d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171d6:	1ccd      	adds	r5, r1, #3
 80171d8:	f025 0503 	bic.w	r5, r5, #3
 80171dc:	3508      	adds	r5, #8
 80171de:	2d0c      	cmp	r5, #12
 80171e0:	bf38      	it	cc
 80171e2:	250c      	movcc	r5, #12
 80171e4:	2d00      	cmp	r5, #0
 80171e6:	4606      	mov	r6, r0
 80171e8:	db01      	blt.n	80171ee <_malloc_r+0x1a>
 80171ea:	42a9      	cmp	r1, r5
 80171ec:	d903      	bls.n	80171f6 <_malloc_r+0x22>
 80171ee:	230c      	movs	r3, #12
 80171f0:	6033      	str	r3, [r6, #0]
 80171f2:	2000      	movs	r0, #0
 80171f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171f6:	f000 fdab 	bl	8017d50 <__malloc_lock>
 80171fa:	4921      	ldr	r1, [pc, #132]	; (8017280 <_malloc_r+0xac>)
 80171fc:	680a      	ldr	r2, [r1, #0]
 80171fe:	4614      	mov	r4, r2
 8017200:	b99c      	cbnz	r4, 801722a <_malloc_r+0x56>
 8017202:	4f20      	ldr	r7, [pc, #128]	; (8017284 <_malloc_r+0xb0>)
 8017204:	683b      	ldr	r3, [r7, #0]
 8017206:	b923      	cbnz	r3, 8017212 <_malloc_r+0x3e>
 8017208:	4621      	mov	r1, r4
 801720a:	4630      	mov	r0, r6
 801720c:	f000 fb2a 	bl	8017864 <_sbrk_r>
 8017210:	6038      	str	r0, [r7, #0]
 8017212:	4629      	mov	r1, r5
 8017214:	4630      	mov	r0, r6
 8017216:	f000 fb25 	bl	8017864 <_sbrk_r>
 801721a:	1c43      	adds	r3, r0, #1
 801721c:	d123      	bne.n	8017266 <_malloc_r+0x92>
 801721e:	230c      	movs	r3, #12
 8017220:	6033      	str	r3, [r6, #0]
 8017222:	4630      	mov	r0, r6
 8017224:	f000 fd9a 	bl	8017d5c <__malloc_unlock>
 8017228:	e7e3      	b.n	80171f2 <_malloc_r+0x1e>
 801722a:	6823      	ldr	r3, [r4, #0]
 801722c:	1b5b      	subs	r3, r3, r5
 801722e:	d417      	bmi.n	8017260 <_malloc_r+0x8c>
 8017230:	2b0b      	cmp	r3, #11
 8017232:	d903      	bls.n	801723c <_malloc_r+0x68>
 8017234:	6023      	str	r3, [r4, #0]
 8017236:	441c      	add	r4, r3
 8017238:	6025      	str	r5, [r4, #0]
 801723a:	e004      	b.n	8017246 <_malloc_r+0x72>
 801723c:	6863      	ldr	r3, [r4, #4]
 801723e:	42a2      	cmp	r2, r4
 8017240:	bf0c      	ite	eq
 8017242:	600b      	streq	r3, [r1, #0]
 8017244:	6053      	strne	r3, [r2, #4]
 8017246:	4630      	mov	r0, r6
 8017248:	f000 fd88 	bl	8017d5c <__malloc_unlock>
 801724c:	f104 000b 	add.w	r0, r4, #11
 8017250:	1d23      	adds	r3, r4, #4
 8017252:	f020 0007 	bic.w	r0, r0, #7
 8017256:	1ac2      	subs	r2, r0, r3
 8017258:	d0cc      	beq.n	80171f4 <_malloc_r+0x20>
 801725a:	1a1b      	subs	r3, r3, r0
 801725c:	50a3      	str	r3, [r4, r2]
 801725e:	e7c9      	b.n	80171f4 <_malloc_r+0x20>
 8017260:	4622      	mov	r2, r4
 8017262:	6864      	ldr	r4, [r4, #4]
 8017264:	e7cc      	b.n	8017200 <_malloc_r+0x2c>
 8017266:	1cc4      	adds	r4, r0, #3
 8017268:	f024 0403 	bic.w	r4, r4, #3
 801726c:	42a0      	cmp	r0, r4
 801726e:	d0e3      	beq.n	8017238 <_malloc_r+0x64>
 8017270:	1a21      	subs	r1, r4, r0
 8017272:	4630      	mov	r0, r6
 8017274:	f000 faf6 	bl	8017864 <_sbrk_r>
 8017278:	3001      	adds	r0, #1
 801727a:	d1dd      	bne.n	8017238 <_malloc_r+0x64>
 801727c:	e7cf      	b.n	801721e <_malloc_r+0x4a>
 801727e:	bf00      	nop
 8017280:	200045a0 	.word	0x200045a0
 8017284:	200045a4 	.word	0x200045a4

08017288 <__sfputc_r>:
 8017288:	6893      	ldr	r3, [r2, #8]
 801728a:	3b01      	subs	r3, #1
 801728c:	2b00      	cmp	r3, #0
 801728e:	b410      	push	{r4}
 8017290:	6093      	str	r3, [r2, #8]
 8017292:	da08      	bge.n	80172a6 <__sfputc_r+0x1e>
 8017294:	6994      	ldr	r4, [r2, #24]
 8017296:	42a3      	cmp	r3, r4
 8017298:	db01      	blt.n	801729e <__sfputc_r+0x16>
 801729a:	290a      	cmp	r1, #10
 801729c:	d103      	bne.n	80172a6 <__sfputc_r+0x1e>
 801729e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172a2:	f000 bb33 	b.w	801790c <__swbuf_r>
 80172a6:	6813      	ldr	r3, [r2, #0]
 80172a8:	1c58      	adds	r0, r3, #1
 80172aa:	6010      	str	r0, [r2, #0]
 80172ac:	7019      	strb	r1, [r3, #0]
 80172ae:	4608      	mov	r0, r1
 80172b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172b4:	4770      	bx	lr

080172b6 <__sfputs_r>:
 80172b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172b8:	4606      	mov	r6, r0
 80172ba:	460f      	mov	r7, r1
 80172bc:	4614      	mov	r4, r2
 80172be:	18d5      	adds	r5, r2, r3
 80172c0:	42ac      	cmp	r4, r5
 80172c2:	d101      	bne.n	80172c8 <__sfputs_r+0x12>
 80172c4:	2000      	movs	r0, #0
 80172c6:	e007      	b.n	80172d8 <__sfputs_r+0x22>
 80172c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172cc:	463a      	mov	r2, r7
 80172ce:	4630      	mov	r0, r6
 80172d0:	f7ff ffda 	bl	8017288 <__sfputc_r>
 80172d4:	1c43      	adds	r3, r0, #1
 80172d6:	d1f3      	bne.n	80172c0 <__sfputs_r+0xa>
 80172d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080172dc <_vfiprintf_r>:
 80172dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172e0:	460d      	mov	r5, r1
 80172e2:	b09d      	sub	sp, #116	; 0x74
 80172e4:	4614      	mov	r4, r2
 80172e6:	4698      	mov	r8, r3
 80172e8:	4606      	mov	r6, r0
 80172ea:	b118      	cbz	r0, 80172f4 <_vfiprintf_r+0x18>
 80172ec:	6983      	ldr	r3, [r0, #24]
 80172ee:	b90b      	cbnz	r3, 80172f4 <_vfiprintf_r+0x18>
 80172f0:	f7ff fe66 	bl	8016fc0 <__sinit>
 80172f4:	4b89      	ldr	r3, [pc, #548]	; (801751c <_vfiprintf_r+0x240>)
 80172f6:	429d      	cmp	r5, r3
 80172f8:	d11b      	bne.n	8017332 <_vfiprintf_r+0x56>
 80172fa:	6875      	ldr	r5, [r6, #4]
 80172fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80172fe:	07d9      	lsls	r1, r3, #31
 8017300:	d405      	bmi.n	801730e <_vfiprintf_r+0x32>
 8017302:	89ab      	ldrh	r3, [r5, #12]
 8017304:	059a      	lsls	r2, r3, #22
 8017306:	d402      	bmi.n	801730e <_vfiprintf_r+0x32>
 8017308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801730a:	f7ff ff09 	bl	8017120 <__retarget_lock_acquire_recursive>
 801730e:	89ab      	ldrh	r3, [r5, #12]
 8017310:	071b      	lsls	r3, r3, #28
 8017312:	d501      	bpl.n	8017318 <_vfiprintf_r+0x3c>
 8017314:	692b      	ldr	r3, [r5, #16]
 8017316:	b9eb      	cbnz	r3, 8017354 <_vfiprintf_r+0x78>
 8017318:	4629      	mov	r1, r5
 801731a:	4630      	mov	r0, r6
 801731c:	f000 fb5a 	bl	80179d4 <__swsetup_r>
 8017320:	b1c0      	cbz	r0, 8017354 <_vfiprintf_r+0x78>
 8017322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017324:	07dc      	lsls	r4, r3, #31
 8017326:	d50e      	bpl.n	8017346 <_vfiprintf_r+0x6a>
 8017328:	f04f 30ff 	mov.w	r0, #4294967295
 801732c:	b01d      	add	sp, #116	; 0x74
 801732e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017332:	4b7b      	ldr	r3, [pc, #492]	; (8017520 <_vfiprintf_r+0x244>)
 8017334:	429d      	cmp	r5, r3
 8017336:	d101      	bne.n	801733c <_vfiprintf_r+0x60>
 8017338:	68b5      	ldr	r5, [r6, #8]
 801733a:	e7df      	b.n	80172fc <_vfiprintf_r+0x20>
 801733c:	4b79      	ldr	r3, [pc, #484]	; (8017524 <_vfiprintf_r+0x248>)
 801733e:	429d      	cmp	r5, r3
 8017340:	bf08      	it	eq
 8017342:	68f5      	ldreq	r5, [r6, #12]
 8017344:	e7da      	b.n	80172fc <_vfiprintf_r+0x20>
 8017346:	89ab      	ldrh	r3, [r5, #12]
 8017348:	0598      	lsls	r0, r3, #22
 801734a:	d4ed      	bmi.n	8017328 <_vfiprintf_r+0x4c>
 801734c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801734e:	f7ff fee8 	bl	8017122 <__retarget_lock_release_recursive>
 8017352:	e7e9      	b.n	8017328 <_vfiprintf_r+0x4c>
 8017354:	2300      	movs	r3, #0
 8017356:	9309      	str	r3, [sp, #36]	; 0x24
 8017358:	2320      	movs	r3, #32
 801735a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801735e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017362:	2330      	movs	r3, #48	; 0x30
 8017364:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017528 <_vfiprintf_r+0x24c>
 8017368:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801736c:	f04f 0901 	mov.w	r9, #1
 8017370:	4623      	mov	r3, r4
 8017372:	469a      	mov	sl, r3
 8017374:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017378:	b10a      	cbz	r2, 801737e <_vfiprintf_r+0xa2>
 801737a:	2a25      	cmp	r2, #37	; 0x25
 801737c:	d1f9      	bne.n	8017372 <_vfiprintf_r+0x96>
 801737e:	ebba 0b04 	subs.w	fp, sl, r4
 8017382:	d00b      	beq.n	801739c <_vfiprintf_r+0xc0>
 8017384:	465b      	mov	r3, fp
 8017386:	4622      	mov	r2, r4
 8017388:	4629      	mov	r1, r5
 801738a:	4630      	mov	r0, r6
 801738c:	f7ff ff93 	bl	80172b6 <__sfputs_r>
 8017390:	3001      	adds	r0, #1
 8017392:	f000 80aa 	beq.w	80174ea <_vfiprintf_r+0x20e>
 8017396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017398:	445a      	add	r2, fp
 801739a:	9209      	str	r2, [sp, #36]	; 0x24
 801739c:	f89a 3000 	ldrb.w	r3, [sl]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	f000 80a2 	beq.w	80174ea <_vfiprintf_r+0x20e>
 80173a6:	2300      	movs	r3, #0
 80173a8:	f04f 32ff 	mov.w	r2, #4294967295
 80173ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80173b0:	f10a 0a01 	add.w	sl, sl, #1
 80173b4:	9304      	str	r3, [sp, #16]
 80173b6:	9307      	str	r3, [sp, #28]
 80173b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80173bc:	931a      	str	r3, [sp, #104]	; 0x68
 80173be:	4654      	mov	r4, sl
 80173c0:	2205      	movs	r2, #5
 80173c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173c6:	4858      	ldr	r0, [pc, #352]	; (8017528 <_vfiprintf_r+0x24c>)
 80173c8:	f7e8 ff02 	bl	80001d0 <memchr>
 80173cc:	9a04      	ldr	r2, [sp, #16]
 80173ce:	b9d8      	cbnz	r0, 8017408 <_vfiprintf_r+0x12c>
 80173d0:	06d1      	lsls	r1, r2, #27
 80173d2:	bf44      	itt	mi
 80173d4:	2320      	movmi	r3, #32
 80173d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80173da:	0713      	lsls	r3, r2, #28
 80173dc:	bf44      	itt	mi
 80173de:	232b      	movmi	r3, #43	; 0x2b
 80173e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80173e4:	f89a 3000 	ldrb.w	r3, [sl]
 80173e8:	2b2a      	cmp	r3, #42	; 0x2a
 80173ea:	d015      	beq.n	8017418 <_vfiprintf_r+0x13c>
 80173ec:	9a07      	ldr	r2, [sp, #28]
 80173ee:	4654      	mov	r4, sl
 80173f0:	2000      	movs	r0, #0
 80173f2:	f04f 0c0a 	mov.w	ip, #10
 80173f6:	4621      	mov	r1, r4
 80173f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80173fc:	3b30      	subs	r3, #48	; 0x30
 80173fe:	2b09      	cmp	r3, #9
 8017400:	d94e      	bls.n	80174a0 <_vfiprintf_r+0x1c4>
 8017402:	b1b0      	cbz	r0, 8017432 <_vfiprintf_r+0x156>
 8017404:	9207      	str	r2, [sp, #28]
 8017406:	e014      	b.n	8017432 <_vfiprintf_r+0x156>
 8017408:	eba0 0308 	sub.w	r3, r0, r8
 801740c:	fa09 f303 	lsl.w	r3, r9, r3
 8017410:	4313      	orrs	r3, r2
 8017412:	9304      	str	r3, [sp, #16]
 8017414:	46a2      	mov	sl, r4
 8017416:	e7d2      	b.n	80173be <_vfiprintf_r+0xe2>
 8017418:	9b03      	ldr	r3, [sp, #12]
 801741a:	1d19      	adds	r1, r3, #4
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	9103      	str	r1, [sp, #12]
 8017420:	2b00      	cmp	r3, #0
 8017422:	bfbb      	ittet	lt
 8017424:	425b      	neglt	r3, r3
 8017426:	f042 0202 	orrlt.w	r2, r2, #2
 801742a:	9307      	strge	r3, [sp, #28]
 801742c:	9307      	strlt	r3, [sp, #28]
 801742e:	bfb8      	it	lt
 8017430:	9204      	strlt	r2, [sp, #16]
 8017432:	7823      	ldrb	r3, [r4, #0]
 8017434:	2b2e      	cmp	r3, #46	; 0x2e
 8017436:	d10c      	bne.n	8017452 <_vfiprintf_r+0x176>
 8017438:	7863      	ldrb	r3, [r4, #1]
 801743a:	2b2a      	cmp	r3, #42	; 0x2a
 801743c:	d135      	bne.n	80174aa <_vfiprintf_r+0x1ce>
 801743e:	9b03      	ldr	r3, [sp, #12]
 8017440:	1d1a      	adds	r2, r3, #4
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	9203      	str	r2, [sp, #12]
 8017446:	2b00      	cmp	r3, #0
 8017448:	bfb8      	it	lt
 801744a:	f04f 33ff 	movlt.w	r3, #4294967295
 801744e:	3402      	adds	r4, #2
 8017450:	9305      	str	r3, [sp, #20]
 8017452:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017538 <_vfiprintf_r+0x25c>
 8017456:	7821      	ldrb	r1, [r4, #0]
 8017458:	2203      	movs	r2, #3
 801745a:	4650      	mov	r0, sl
 801745c:	f7e8 feb8 	bl	80001d0 <memchr>
 8017460:	b140      	cbz	r0, 8017474 <_vfiprintf_r+0x198>
 8017462:	2340      	movs	r3, #64	; 0x40
 8017464:	eba0 000a 	sub.w	r0, r0, sl
 8017468:	fa03 f000 	lsl.w	r0, r3, r0
 801746c:	9b04      	ldr	r3, [sp, #16]
 801746e:	4303      	orrs	r3, r0
 8017470:	3401      	adds	r4, #1
 8017472:	9304      	str	r3, [sp, #16]
 8017474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017478:	482c      	ldr	r0, [pc, #176]	; (801752c <_vfiprintf_r+0x250>)
 801747a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801747e:	2206      	movs	r2, #6
 8017480:	f7e8 fea6 	bl	80001d0 <memchr>
 8017484:	2800      	cmp	r0, #0
 8017486:	d03f      	beq.n	8017508 <_vfiprintf_r+0x22c>
 8017488:	4b29      	ldr	r3, [pc, #164]	; (8017530 <_vfiprintf_r+0x254>)
 801748a:	bb1b      	cbnz	r3, 80174d4 <_vfiprintf_r+0x1f8>
 801748c:	9b03      	ldr	r3, [sp, #12]
 801748e:	3307      	adds	r3, #7
 8017490:	f023 0307 	bic.w	r3, r3, #7
 8017494:	3308      	adds	r3, #8
 8017496:	9303      	str	r3, [sp, #12]
 8017498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801749a:	443b      	add	r3, r7
 801749c:	9309      	str	r3, [sp, #36]	; 0x24
 801749e:	e767      	b.n	8017370 <_vfiprintf_r+0x94>
 80174a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80174a4:	460c      	mov	r4, r1
 80174a6:	2001      	movs	r0, #1
 80174a8:	e7a5      	b.n	80173f6 <_vfiprintf_r+0x11a>
 80174aa:	2300      	movs	r3, #0
 80174ac:	3401      	adds	r4, #1
 80174ae:	9305      	str	r3, [sp, #20]
 80174b0:	4619      	mov	r1, r3
 80174b2:	f04f 0c0a 	mov.w	ip, #10
 80174b6:	4620      	mov	r0, r4
 80174b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80174bc:	3a30      	subs	r2, #48	; 0x30
 80174be:	2a09      	cmp	r2, #9
 80174c0:	d903      	bls.n	80174ca <_vfiprintf_r+0x1ee>
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d0c5      	beq.n	8017452 <_vfiprintf_r+0x176>
 80174c6:	9105      	str	r1, [sp, #20]
 80174c8:	e7c3      	b.n	8017452 <_vfiprintf_r+0x176>
 80174ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80174ce:	4604      	mov	r4, r0
 80174d0:	2301      	movs	r3, #1
 80174d2:	e7f0      	b.n	80174b6 <_vfiprintf_r+0x1da>
 80174d4:	ab03      	add	r3, sp, #12
 80174d6:	9300      	str	r3, [sp, #0]
 80174d8:	462a      	mov	r2, r5
 80174da:	4b16      	ldr	r3, [pc, #88]	; (8017534 <_vfiprintf_r+0x258>)
 80174dc:	a904      	add	r1, sp, #16
 80174de:	4630      	mov	r0, r6
 80174e0:	f3af 8000 	nop.w
 80174e4:	4607      	mov	r7, r0
 80174e6:	1c78      	adds	r0, r7, #1
 80174e8:	d1d6      	bne.n	8017498 <_vfiprintf_r+0x1bc>
 80174ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80174ec:	07d9      	lsls	r1, r3, #31
 80174ee:	d405      	bmi.n	80174fc <_vfiprintf_r+0x220>
 80174f0:	89ab      	ldrh	r3, [r5, #12]
 80174f2:	059a      	lsls	r2, r3, #22
 80174f4:	d402      	bmi.n	80174fc <_vfiprintf_r+0x220>
 80174f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80174f8:	f7ff fe13 	bl	8017122 <__retarget_lock_release_recursive>
 80174fc:	89ab      	ldrh	r3, [r5, #12]
 80174fe:	065b      	lsls	r3, r3, #25
 8017500:	f53f af12 	bmi.w	8017328 <_vfiprintf_r+0x4c>
 8017504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017506:	e711      	b.n	801732c <_vfiprintf_r+0x50>
 8017508:	ab03      	add	r3, sp, #12
 801750a:	9300      	str	r3, [sp, #0]
 801750c:	462a      	mov	r2, r5
 801750e:	4b09      	ldr	r3, [pc, #36]	; (8017534 <_vfiprintf_r+0x258>)
 8017510:	a904      	add	r1, sp, #16
 8017512:	4630      	mov	r0, r6
 8017514:	f000 f880 	bl	8017618 <_printf_i>
 8017518:	e7e4      	b.n	80174e4 <_vfiprintf_r+0x208>
 801751a:	bf00      	nop
 801751c:	0801ad00 	.word	0x0801ad00
 8017520:	0801ad20 	.word	0x0801ad20
 8017524:	0801ace0 	.word	0x0801ace0
 8017528:	0801ad40 	.word	0x0801ad40
 801752c:	0801ad4a 	.word	0x0801ad4a
 8017530:	00000000 	.word	0x00000000
 8017534:	080172b7 	.word	0x080172b7
 8017538:	0801ad46 	.word	0x0801ad46

0801753c <_printf_common>:
 801753c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017540:	4616      	mov	r6, r2
 8017542:	4699      	mov	r9, r3
 8017544:	688a      	ldr	r2, [r1, #8]
 8017546:	690b      	ldr	r3, [r1, #16]
 8017548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801754c:	4293      	cmp	r3, r2
 801754e:	bfb8      	it	lt
 8017550:	4613      	movlt	r3, r2
 8017552:	6033      	str	r3, [r6, #0]
 8017554:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017558:	4607      	mov	r7, r0
 801755a:	460c      	mov	r4, r1
 801755c:	b10a      	cbz	r2, 8017562 <_printf_common+0x26>
 801755e:	3301      	adds	r3, #1
 8017560:	6033      	str	r3, [r6, #0]
 8017562:	6823      	ldr	r3, [r4, #0]
 8017564:	0699      	lsls	r1, r3, #26
 8017566:	bf42      	ittt	mi
 8017568:	6833      	ldrmi	r3, [r6, #0]
 801756a:	3302      	addmi	r3, #2
 801756c:	6033      	strmi	r3, [r6, #0]
 801756e:	6825      	ldr	r5, [r4, #0]
 8017570:	f015 0506 	ands.w	r5, r5, #6
 8017574:	d106      	bne.n	8017584 <_printf_common+0x48>
 8017576:	f104 0a19 	add.w	sl, r4, #25
 801757a:	68e3      	ldr	r3, [r4, #12]
 801757c:	6832      	ldr	r2, [r6, #0]
 801757e:	1a9b      	subs	r3, r3, r2
 8017580:	42ab      	cmp	r3, r5
 8017582:	dc26      	bgt.n	80175d2 <_printf_common+0x96>
 8017584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017588:	1e13      	subs	r3, r2, #0
 801758a:	6822      	ldr	r2, [r4, #0]
 801758c:	bf18      	it	ne
 801758e:	2301      	movne	r3, #1
 8017590:	0692      	lsls	r2, r2, #26
 8017592:	d42b      	bmi.n	80175ec <_printf_common+0xb0>
 8017594:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017598:	4649      	mov	r1, r9
 801759a:	4638      	mov	r0, r7
 801759c:	47c0      	blx	r8
 801759e:	3001      	adds	r0, #1
 80175a0:	d01e      	beq.n	80175e0 <_printf_common+0xa4>
 80175a2:	6823      	ldr	r3, [r4, #0]
 80175a4:	68e5      	ldr	r5, [r4, #12]
 80175a6:	6832      	ldr	r2, [r6, #0]
 80175a8:	f003 0306 	and.w	r3, r3, #6
 80175ac:	2b04      	cmp	r3, #4
 80175ae:	bf08      	it	eq
 80175b0:	1aad      	subeq	r5, r5, r2
 80175b2:	68a3      	ldr	r3, [r4, #8]
 80175b4:	6922      	ldr	r2, [r4, #16]
 80175b6:	bf0c      	ite	eq
 80175b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80175bc:	2500      	movne	r5, #0
 80175be:	4293      	cmp	r3, r2
 80175c0:	bfc4      	itt	gt
 80175c2:	1a9b      	subgt	r3, r3, r2
 80175c4:	18ed      	addgt	r5, r5, r3
 80175c6:	2600      	movs	r6, #0
 80175c8:	341a      	adds	r4, #26
 80175ca:	42b5      	cmp	r5, r6
 80175cc:	d11a      	bne.n	8017604 <_printf_common+0xc8>
 80175ce:	2000      	movs	r0, #0
 80175d0:	e008      	b.n	80175e4 <_printf_common+0xa8>
 80175d2:	2301      	movs	r3, #1
 80175d4:	4652      	mov	r2, sl
 80175d6:	4649      	mov	r1, r9
 80175d8:	4638      	mov	r0, r7
 80175da:	47c0      	blx	r8
 80175dc:	3001      	adds	r0, #1
 80175de:	d103      	bne.n	80175e8 <_printf_common+0xac>
 80175e0:	f04f 30ff 	mov.w	r0, #4294967295
 80175e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175e8:	3501      	adds	r5, #1
 80175ea:	e7c6      	b.n	801757a <_printf_common+0x3e>
 80175ec:	18e1      	adds	r1, r4, r3
 80175ee:	1c5a      	adds	r2, r3, #1
 80175f0:	2030      	movs	r0, #48	; 0x30
 80175f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80175f6:	4422      	add	r2, r4
 80175f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80175fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017600:	3302      	adds	r3, #2
 8017602:	e7c7      	b.n	8017594 <_printf_common+0x58>
 8017604:	2301      	movs	r3, #1
 8017606:	4622      	mov	r2, r4
 8017608:	4649      	mov	r1, r9
 801760a:	4638      	mov	r0, r7
 801760c:	47c0      	blx	r8
 801760e:	3001      	adds	r0, #1
 8017610:	d0e6      	beq.n	80175e0 <_printf_common+0xa4>
 8017612:	3601      	adds	r6, #1
 8017614:	e7d9      	b.n	80175ca <_printf_common+0x8e>
	...

08017618 <_printf_i>:
 8017618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801761c:	460c      	mov	r4, r1
 801761e:	4691      	mov	r9, r2
 8017620:	7e27      	ldrb	r7, [r4, #24]
 8017622:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017624:	2f78      	cmp	r7, #120	; 0x78
 8017626:	4680      	mov	r8, r0
 8017628:	469a      	mov	sl, r3
 801762a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801762e:	d807      	bhi.n	8017640 <_printf_i+0x28>
 8017630:	2f62      	cmp	r7, #98	; 0x62
 8017632:	d80a      	bhi.n	801764a <_printf_i+0x32>
 8017634:	2f00      	cmp	r7, #0
 8017636:	f000 80d8 	beq.w	80177ea <_printf_i+0x1d2>
 801763a:	2f58      	cmp	r7, #88	; 0x58
 801763c:	f000 80a3 	beq.w	8017786 <_printf_i+0x16e>
 8017640:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017644:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017648:	e03a      	b.n	80176c0 <_printf_i+0xa8>
 801764a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801764e:	2b15      	cmp	r3, #21
 8017650:	d8f6      	bhi.n	8017640 <_printf_i+0x28>
 8017652:	a001      	add	r0, pc, #4	; (adr r0, 8017658 <_printf_i+0x40>)
 8017654:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017658:	080176b1 	.word	0x080176b1
 801765c:	080176c5 	.word	0x080176c5
 8017660:	08017641 	.word	0x08017641
 8017664:	08017641 	.word	0x08017641
 8017668:	08017641 	.word	0x08017641
 801766c:	08017641 	.word	0x08017641
 8017670:	080176c5 	.word	0x080176c5
 8017674:	08017641 	.word	0x08017641
 8017678:	08017641 	.word	0x08017641
 801767c:	08017641 	.word	0x08017641
 8017680:	08017641 	.word	0x08017641
 8017684:	080177d1 	.word	0x080177d1
 8017688:	080176f5 	.word	0x080176f5
 801768c:	080177b3 	.word	0x080177b3
 8017690:	08017641 	.word	0x08017641
 8017694:	08017641 	.word	0x08017641
 8017698:	080177f3 	.word	0x080177f3
 801769c:	08017641 	.word	0x08017641
 80176a0:	080176f5 	.word	0x080176f5
 80176a4:	08017641 	.word	0x08017641
 80176a8:	08017641 	.word	0x08017641
 80176ac:	080177bb 	.word	0x080177bb
 80176b0:	680b      	ldr	r3, [r1, #0]
 80176b2:	1d1a      	adds	r2, r3, #4
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	600a      	str	r2, [r1, #0]
 80176b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80176bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80176c0:	2301      	movs	r3, #1
 80176c2:	e0a3      	b.n	801780c <_printf_i+0x1f4>
 80176c4:	6825      	ldr	r5, [r4, #0]
 80176c6:	6808      	ldr	r0, [r1, #0]
 80176c8:	062e      	lsls	r6, r5, #24
 80176ca:	f100 0304 	add.w	r3, r0, #4
 80176ce:	d50a      	bpl.n	80176e6 <_printf_i+0xce>
 80176d0:	6805      	ldr	r5, [r0, #0]
 80176d2:	600b      	str	r3, [r1, #0]
 80176d4:	2d00      	cmp	r5, #0
 80176d6:	da03      	bge.n	80176e0 <_printf_i+0xc8>
 80176d8:	232d      	movs	r3, #45	; 0x2d
 80176da:	426d      	negs	r5, r5
 80176dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80176e0:	485e      	ldr	r0, [pc, #376]	; (801785c <_printf_i+0x244>)
 80176e2:	230a      	movs	r3, #10
 80176e4:	e019      	b.n	801771a <_printf_i+0x102>
 80176e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80176ea:	6805      	ldr	r5, [r0, #0]
 80176ec:	600b      	str	r3, [r1, #0]
 80176ee:	bf18      	it	ne
 80176f0:	b22d      	sxthne	r5, r5
 80176f2:	e7ef      	b.n	80176d4 <_printf_i+0xbc>
 80176f4:	680b      	ldr	r3, [r1, #0]
 80176f6:	6825      	ldr	r5, [r4, #0]
 80176f8:	1d18      	adds	r0, r3, #4
 80176fa:	6008      	str	r0, [r1, #0]
 80176fc:	0628      	lsls	r0, r5, #24
 80176fe:	d501      	bpl.n	8017704 <_printf_i+0xec>
 8017700:	681d      	ldr	r5, [r3, #0]
 8017702:	e002      	b.n	801770a <_printf_i+0xf2>
 8017704:	0669      	lsls	r1, r5, #25
 8017706:	d5fb      	bpl.n	8017700 <_printf_i+0xe8>
 8017708:	881d      	ldrh	r5, [r3, #0]
 801770a:	4854      	ldr	r0, [pc, #336]	; (801785c <_printf_i+0x244>)
 801770c:	2f6f      	cmp	r7, #111	; 0x6f
 801770e:	bf0c      	ite	eq
 8017710:	2308      	moveq	r3, #8
 8017712:	230a      	movne	r3, #10
 8017714:	2100      	movs	r1, #0
 8017716:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801771a:	6866      	ldr	r6, [r4, #4]
 801771c:	60a6      	str	r6, [r4, #8]
 801771e:	2e00      	cmp	r6, #0
 8017720:	bfa2      	ittt	ge
 8017722:	6821      	ldrge	r1, [r4, #0]
 8017724:	f021 0104 	bicge.w	r1, r1, #4
 8017728:	6021      	strge	r1, [r4, #0]
 801772a:	b90d      	cbnz	r5, 8017730 <_printf_i+0x118>
 801772c:	2e00      	cmp	r6, #0
 801772e:	d04d      	beq.n	80177cc <_printf_i+0x1b4>
 8017730:	4616      	mov	r6, r2
 8017732:	fbb5 f1f3 	udiv	r1, r5, r3
 8017736:	fb03 5711 	mls	r7, r3, r1, r5
 801773a:	5dc7      	ldrb	r7, [r0, r7]
 801773c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017740:	462f      	mov	r7, r5
 8017742:	42bb      	cmp	r3, r7
 8017744:	460d      	mov	r5, r1
 8017746:	d9f4      	bls.n	8017732 <_printf_i+0x11a>
 8017748:	2b08      	cmp	r3, #8
 801774a:	d10b      	bne.n	8017764 <_printf_i+0x14c>
 801774c:	6823      	ldr	r3, [r4, #0]
 801774e:	07df      	lsls	r7, r3, #31
 8017750:	d508      	bpl.n	8017764 <_printf_i+0x14c>
 8017752:	6923      	ldr	r3, [r4, #16]
 8017754:	6861      	ldr	r1, [r4, #4]
 8017756:	4299      	cmp	r1, r3
 8017758:	bfde      	ittt	le
 801775a:	2330      	movle	r3, #48	; 0x30
 801775c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017760:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017764:	1b92      	subs	r2, r2, r6
 8017766:	6122      	str	r2, [r4, #16]
 8017768:	f8cd a000 	str.w	sl, [sp]
 801776c:	464b      	mov	r3, r9
 801776e:	aa03      	add	r2, sp, #12
 8017770:	4621      	mov	r1, r4
 8017772:	4640      	mov	r0, r8
 8017774:	f7ff fee2 	bl	801753c <_printf_common>
 8017778:	3001      	adds	r0, #1
 801777a:	d14c      	bne.n	8017816 <_printf_i+0x1fe>
 801777c:	f04f 30ff 	mov.w	r0, #4294967295
 8017780:	b004      	add	sp, #16
 8017782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017786:	4835      	ldr	r0, [pc, #212]	; (801785c <_printf_i+0x244>)
 8017788:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801778c:	6823      	ldr	r3, [r4, #0]
 801778e:	680e      	ldr	r6, [r1, #0]
 8017790:	061f      	lsls	r7, r3, #24
 8017792:	f856 5b04 	ldr.w	r5, [r6], #4
 8017796:	600e      	str	r6, [r1, #0]
 8017798:	d514      	bpl.n	80177c4 <_printf_i+0x1ac>
 801779a:	07d9      	lsls	r1, r3, #31
 801779c:	bf44      	itt	mi
 801779e:	f043 0320 	orrmi.w	r3, r3, #32
 80177a2:	6023      	strmi	r3, [r4, #0]
 80177a4:	b91d      	cbnz	r5, 80177ae <_printf_i+0x196>
 80177a6:	6823      	ldr	r3, [r4, #0]
 80177a8:	f023 0320 	bic.w	r3, r3, #32
 80177ac:	6023      	str	r3, [r4, #0]
 80177ae:	2310      	movs	r3, #16
 80177b0:	e7b0      	b.n	8017714 <_printf_i+0xfc>
 80177b2:	6823      	ldr	r3, [r4, #0]
 80177b4:	f043 0320 	orr.w	r3, r3, #32
 80177b8:	6023      	str	r3, [r4, #0]
 80177ba:	2378      	movs	r3, #120	; 0x78
 80177bc:	4828      	ldr	r0, [pc, #160]	; (8017860 <_printf_i+0x248>)
 80177be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80177c2:	e7e3      	b.n	801778c <_printf_i+0x174>
 80177c4:	065e      	lsls	r6, r3, #25
 80177c6:	bf48      	it	mi
 80177c8:	b2ad      	uxthmi	r5, r5
 80177ca:	e7e6      	b.n	801779a <_printf_i+0x182>
 80177cc:	4616      	mov	r6, r2
 80177ce:	e7bb      	b.n	8017748 <_printf_i+0x130>
 80177d0:	680b      	ldr	r3, [r1, #0]
 80177d2:	6826      	ldr	r6, [r4, #0]
 80177d4:	6960      	ldr	r0, [r4, #20]
 80177d6:	1d1d      	adds	r5, r3, #4
 80177d8:	600d      	str	r5, [r1, #0]
 80177da:	0635      	lsls	r5, r6, #24
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	d501      	bpl.n	80177e4 <_printf_i+0x1cc>
 80177e0:	6018      	str	r0, [r3, #0]
 80177e2:	e002      	b.n	80177ea <_printf_i+0x1d2>
 80177e4:	0671      	lsls	r1, r6, #25
 80177e6:	d5fb      	bpl.n	80177e0 <_printf_i+0x1c8>
 80177e8:	8018      	strh	r0, [r3, #0]
 80177ea:	2300      	movs	r3, #0
 80177ec:	6123      	str	r3, [r4, #16]
 80177ee:	4616      	mov	r6, r2
 80177f0:	e7ba      	b.n	8017768 <_printf_i+0x150>
 80177f2:	680b      	ldr	r3, [r1, #0]
 80177f4:	1d1a      	adds	r2, r3, #4
 80177f6:	600a      	str	r2, [r1, #0]
 80177f8:	681e      	ldr	r6, [r3, #0]
 80177fa:	6862      	ldr	r2, [r4, #4]
 80177fc:	2100      	movs	r1, #0
 80177fe:	4630      	mov	r0, r6
 8017800:	f7e8 fce6 	bl	80001d0 <memchr>
 8017804:	b108      	cbz	r0, 801780a <_printf_i+0x1f2>
 8017806:	1b80      	subs	r0, r0, r6
 8017808:	6060      	str	r0, [r4, #4]
 801780a:	6863      	ldr	r3, [r4, #4]
 801780c:	6123      	str	r3, [r4, #16]
 801780e:	2300      	movs	r3, #0
 8017810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017814:	e7a8      	b.n	8017768 <_printf_i+0x150>
 8017816:	6923      	ldr	r3, [r4, #16]
 8017818:	4632      	mov	r2, r6
 801781a:	4649      	mov	r1, r9
 801781c:	4640      	mov	r0, r8
 801781e:	47d0      	blx	sl
 8017820:	3001      	adds	r0, #1
 8017822:	d0ab      	beq.n	801777c <_printf_i+0x164>
 8017824:	6823      	ldr	r3, [r4, #0]
 8017826:	079b      	lsls	r3, r3, #30
 8017828:	d413      	bmi.n	8017852 <_printf_i+0x23a>
 801782a:	68e0      	ldr	r0, [r4, #12]
 801782c:	9b03      	ldr	r3, [sp, #12]
 801782e:	4298      	cmp	r0, r3
 8017830:	bfb8      	it	lt
 8017832:	4618      	movlt	r0, r3
 8017834:	e7a4      	b.n	8017780 <_printf_i+0x168>
 8017836:	2301      	movs	r3, #1
 8017838:	4632      	mov	r2, r6
 801783a:	4649      	mov	r1, r9
 801783c:	4640      	mov	r0, r8
 801783e:	47d0      	blx	sl
 8017840:	3001      	adds	r0, #1
 8017842:	d09b      	beq.n	801777c <_printf_i+0x164>
 8017844:	3501      	adds	r5, #1
 8017846:	68e3      	ldr	r3, [r4, #12]
 8017848:	9903      	ldr	r1, [sp, #12]
 801784a:	1a5b      	subs	r3, r3, r1
 801784c:	42ab      	cmp	r3, r5
 801784e:	dcf2      	bgt.n	8017836 <_printf_i+0x21e>
 8017850:	e7eb      	b.n	801782a <_printf_i+0x212>
 8017852:	2500      	movs	r5, #0
 8017854:	f104 0619 	add.w	r6, r4, #25
 8017858:	e7f5      	b.n	8017846 <_printf_i+0x22e>
 801785a:	bf00      	nop
 801785c:	0801ad51 	.word	0x0801ad51
 8017860:	0801ad62 	.word	0x0801ad62

08017864 <_sbrk_r>:
 8017864:	b538      	push	{r3, r4, r5, lr}
 8017866:	4d06      	ldr	r5, [pc, #24]	; (8017880 <_sbrk_r+0x1c>)
 8017868:	2300      	movs	r3, #0
 801786a:	4604      	mov	r4, r0
 801786c:	4608      	mov	r0, r1
 801786e:	602b      	str	r3, [r5, #0]
 8017870:	f7e9 fd5e 	bl	8001330 <_sbrk>
 8017874:	1c43      	adds	r3, r0, #1
 8017876:	d102      	bne.n	801787e <_sbrk_r+0x1a>
 8017878:	682b      	ldr	r3, [r5, #0]
 801787a:	b103      	cbz	r3, 801787e <_sbrk_r+0x1a>
 801787c:	6023      	str	r3, [r4, #0]
 801787e:	bd38      	pop	{r3, r4, r5, pc}
 8017880:	2000b118 	.word	0x2000b118

08017884 <__sread>:
 8017884:	b510      	push	{r4, lr}
 8017886:	460c      	mov	r4, r1
 8017888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801788c:	f000 fa6c 	bl	8017d68 <_read_r>
 8017890:	2800      	cmp	r0, #0
 8017892:	bfab      	itete	ge
 8017894:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017896:	89a3      	ldrhlt	r3, [r4, #12]
 8017898:	181b      	addge	r3, r3, r0
 801789a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801789e:	bfac      	ite	ge
 80178a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80178a2:	81a3      	strhlt	r3, [r4, #12]
 80178a4:	bd10      	pop	{r4, pc}

080178a6 <__swrite>:
 80178a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178aa:	461f      	mov	r7, r3
 80178ac:	898b      	ldrh	r3, [r1, #12]
 80178ae:	05db      	lsls	r3, r3, #23
 80178b0:	4605      	mov	r5, r0
 80178b2:	460c      	mov	r4, r1
 80178b4:	4616      	mov	r6, r2
 80178b6:	d505      	bpl.n	80178c4 <__swrite+0x1e>
 80178b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178bc:	2302      	movs	r3, #2
 80178be:	2200      	movs	r2, #0
 80178c0:	f000 f9d0 	bl	8017c64 <_lseek_r>
 80178c4:	89a3      	ldrh	r3, [r4, #12]
 80178c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80178ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80178ce:	81a3      	strh	r3, [r4, #12]
 80178d0:	4632      	mov	r2, r6
 80178d2:	463b      	mov	r3, r7
 80178d4:	4628      	mov	r0, r5
 80178d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178da:	f000 b869 	b.w	80179b0 <_write_r>

080178de <__sseek>:
 80178de:	b510      	push	{r4, lr}
 80178e0:	460c      	mov	r4, r1
 80178e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178e6:	f000 f9bd 	bl	8017c64 <_lseek_r>
 80178ea:	1c43      	adds	r3, r0, #1
 80178ec:	89a3      	ldrh	r3, [r4, #12]
 80178ee:	bf15      	itete	ne
 80178f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80178f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80178f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80178fa:	81a3      	strheq	r3, [r4, #12]
 80178fc:	bf18      	it	ne
 80178fe:	81a3      	strhne	r3, [r4, #12]
 8017900:	bd10      	pop	{r4, pc}

08017902 <__sclose>:
 8017902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017906:	f000 b8db 	b.w	8017ac0 <_close_r>
	...

0801790c <__swbuf_r>:
 801790c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801790e:	460e      	mov	r6, r1
 8017910:	4614      	mov	r4, r2
 8017912:	4605      	mov	r5, r0
 8017914:	b118      	cbz	r0, 801791e <__swbuf_r+0x12>
 8017916:	6983      	ldr	r3, [r0, #24]
 8017918:	b90b      	cbnz	r3, 801791e <__swbuf_r+0x12>
 801791a:	f7ff fb51 	bl	8016fc0 <__sinit>
 801791e:	4b21      	ldr	r3, [pc, #132]	; (80179a4 <__swbuf_r+0x98>)
 8017920:	429c      	cmp	r4, r3
 8017922:	d12b      	bne.n	801797c <__swbuf_r+0x70>
 8017924:	686c      	ldr	r4, [r5, #4]
 8017926:	69a3      	ldr	r3, [r4, #24]
 8017928:	60a3      	str	r3, [r4, #8]
 801792a:	89a3      	ldrh	r3, [r4, #12]
 801792c:	071a      	lsls	r2, r3, #28
 801792e:	d52f      	bpl.n	8017990 <__swbuf_r+0x84>
 8017930:	6923      	ldr	r3, [r4, #16]
 8017932:	b36b      	cbz	r3, 8017990 <__swbuf_r+0x84>
 8017934:	6923      	ldr	r3, [r4, #16]
 8017936:	6820      	ldr	r0, [r4, #0]
 8017938:	1ac0      	subs	r0, r0, r3
 801793a:	6963      	ldr	r3, [r4, #20]
 801793c:	b2f6      	uxtb	r6, r6
 801793e:	4283      	cmp	r3, r0
 8017940:	4637      	mov	r7, r6
 8017942:	dc04      	bgt.n	801794e <__swbuf_r+0x42>
 8017944:	4621      	mov	r1, r4
 8017946:	4628      	mov	r0, r5
 8017948:	f000 f950 	bl	8017bec <_fflush_r>
 801794c:	bb30      	cbnz	r0, 801799c <__swbuf_r+0x90>
 801794e:	68a3      	ldr	r3, [r4, #8]
 8017950:	3b01      	subs	r3, #1
 8017952:	60a3      	str	r3, [r4, #8]
 8017954:	6823      	ldr	r3, [r4, #0]
 8017956:	1c5a      	adds	r2, r3, #1
 8017958:	6022      	str	r2, [r4, #0]
 801795a:	701e      	strb	r6, [r3, #0]
 801795c:	6963      	ldr	r3, [r4, #20]
 801795e:	3001      	adds	r0, #1
 8017960:	4283      	cmp	r3, r0
 8017962:	d004      	beq.n	801796e <__swbuf_r+0x62>
 8017964:	89a3      	ldrh	r3, [r4, #12]
 8017966:	07db      	lsls	r3, r3, #31
 8017968:	d506      	bpl.n	8017978 <__swbuf_r+0x6c>
 801796a:	2e0a      	cmp	r6, #10
 801796c:	d104      	bne.n	8017978 <__swbuf_r+0x6c>
 801796e:	4621      	mov	r1, r4
 8017970:	4628      	mov	r0, r5
 8017972:	f000 f93b 	bl	8017bec <_fflush_r>
 8017976:	b988      	cbnz	r0, 801799c <__swbuf_r+0x90>
 8017978:	4638      	mov	r0, r7
 801797a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801797c:	4b0a      	ldr	r3, [pc, #40]	; (80179a8 <__swbuf_r+0x9c>)
 801797e:	429c      	cmp	r4, r3
 8017980:	d101      	bne.n	8017986 <__swbuf_r+0x7a>
 8017982:	68ac      	ldr	r4, [r5, #8]
 8017984:	e7cf      	b.n	8017926 <__swbuf_r+0x1a>
 8017986:	4b09      	ldr	r3, [pc, #36]	; (80179ac <__swbuf_r+0xa0>)
 8017988:	429c      	cmp	r4, r3
 801798a:	bf08      	it	eq
 801798c:	68ec      	ldreq	r4, [r5, #12]
 801798e:	e7ca      	b.n	8017926 <__swbuf_r+0x1a>
 8017990:	4621      	mov	r1, r4
 8017992:	4628      	mov	r0, r5
 8017994:	f000 f81e 	bl	80179d4 <__swsetup_r>
 8017998:	2800      	cmp	r0, #0
 801799a:	d0cb      	beq.n	8017934 <__swbuf_r+0x28>
 801799c:	f04f 37ff 	mov.w	r7, #4294967295
 80179a0:	e7ea      	b.n	8017978 <__swbuf_r+0x6c>
 80179a2:	bf00      	nop
 80179a4:	0801ad00 	.word	0x0801ad00
 80179a8:	0801ad20 	.word	0x0801ad20
 80179ac:	0801ace0 	.word	0x0801ace0

080179b0 <_write_r>:
 80179b0:	b538      	push	{r3, r4, r5, lr}
 80179b2:	4d07      	ldr	r5, [pc, #28]	; (80179d0 <_write_r+0x20>)
 80179b4:	4604      	mov	r4, r0
 80179b6:	4608      	mov	r0, r1
 80179b8:	4611      	mov	r1, r2
 80179ba:	2200      	movs	r2, #0
 80179bc:	602a      	str	r2, [r5, #0]
 80179be:	461a      	mov	r2, r3
 80179c0:	f7e9 fc65 	bl	800128e <_write>
 80179c4:	1c43      	adds	r3, r0, #1
 80179c6:	d102      	bne.n	80179ce <_write_r+0x1e>
 80179c8:	682b      	ldr	r3, [r5, #0]
 80179ca:	b103      	cbz	r3, 80179ce <_write_r+0x1e>
 80179cc:	6023      	str	r3, [r4, #0]
 80179ce:	bd38      	pop	{r3, r4, r5, pc}
 80179d0:	2000b118 	.word	0x2000b118

080179d4 <__swsetup_r>:
 80179d4:	4b32      	ldr	r3, [pc, #200]	; (8017aa0 <__swsetup_r+0xcc>)
 80179d6:	b570      	push	{r4, r5, r6, lr}
 80179d8:	681d      	ldr	r5, [r3, #0]
 80179da:	4606      	mov	r6, r0
 80179dc:	460c      	mov	r4, r1
 80179de:	b125      	cbz	r5, 80179ea <__swsetup_r+0x16>
 80179e0:	69ab      	ldr	r3, [r5, #24]
 80179e2:	b913      	cbnz	r3, 80179ea <__swsetup_r+0x16>
 80179e4:	4628      	mov	r0, r5
 80179e6:	f7ff faeb 	bl	8016fc0 <__sinit>
 80179ea:	4b2e      	ldr	r3, [pc, #184]	; (8017aa4 <__swsetup_r+0xd0>)
 80179ec:	429c      	cmp	r4, r3
 80179ee:	d10f      	bne.n	8017a10 <__swsetup_r+0x3c>
 80179f0:	686c      	ldr	r4, [r5, #4]
 80179f2:	89a3      	ldrh	r3, [r4, #12]
 80179f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80179f8:	0719      	lsls	r1, r3, #28
 80179fa:	d42c      	bmi.n	8017a56 <__swsetup_r+0x82>
 80179fc:	06dd      	lsls	r5, r3, #27
 80179fe:	d411      	bmi.n	8017a24 <__swsetup_r+0x50>
 8017a00:	2309      	movs	r3, #9
 8017a02:	6033      	str	r3, [r6, #0]
 8017a04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017a08:	81a3      	strh	r3, [r4, #12]
 8017a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8017a0e:	e03e      	b.n	8017a8e <__swsetup_r+0xba>
 8017a10:	4b25      	ldr	r3, [pc, #148]	; (8017aa8 <__swsetup_r+0xd4>)
 8017a12:	429c      	cmp	r4, r3
 8017a14:	d101      	bne.n	8017a1a <__swsetup_r+0x46>
 8017a16:	68ac      	ldr	r4, [r5, #8]
 8017a18:	e7eb      	b.n	80179f2 <__swsetup_r+0x1e>
 8017a1a:	4b24      	ldr	r3, [pc, #144]	; (8017aac <__swsetup_r+0xd8>)
 8017a1c:	429c      	cmp	r4, r3
 8017a1e:	bf08      	it	eq
 8017a20:	68ec      	ldreq	r4, [r5, #12]
 8017a22:	e7e6      	b.n	80179f2 <__swsetup_r+0x1e>
 8017a24:	0758      	lsls	r0, r3, #29
 8017a26:	d512      	bpl.n	8017a4e <__swsetup_r+0x7a>
 8017a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a2a:	b141      	cbz	r1, 8017a3e <__swsetup_r+0x6a>
 8017a2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a30:	4299      	cmp	r1, r3
 8017a32:	d002      	beq.n	8017a3a <__swsetup_r+0x66>
 8017a34:	4630      	mov	r0, r6
 8017a36:	f7ff fb7d 	bl	8017134 <_free_r>
 8017a3a:	2300      	movs	r3, #0
 8017a3c:	6363      	str	r3, [r4, #52]	; 0x34
 8017a3e:	89a3      	ldrh	r3, [r4, #12]
 8017a40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017a44:	81a3      	strh	r3, [r4, #12]
 8017a46:	2300      	movs	r3, #0
 8017a48:	6063      	str	r3, [r4, #4]
 8017a4a:	6923      	ldr	r3, [r4, #16]
 8017a4c:	6023      	str	r3, [r4, #0]
 8017a4e:	89a3      	ldrh	r3, [r4, #12]
 8017a50:	f043 0308 	orr.w	r3, r3, #8
 8017a54:	81a3      	strh	r3, [r4, #12]
 8017a56:	6923      	ldr	r3, [r4, #16]
 8017a58:	b94b      	cbnz	r3, 8017a6e <__swsetup_r+0x9a>
 8017a5a:	89a3      	ldrh	r3, [r4, #12]
 8017a5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017a64:	d003      	beq.n	8017a6e <__swsetup_r+0x9a>
 8017a66:	4621      	mov	r1, r4
 8017a68:	4630      	mov	r0, r6
 8017a6a:	f000 f931 	bl	8017cd0 <__smakebuf_r>
 8017a6e:	89a0      	ldrh	r0, [r4, #12]
 8017a70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017a74:	f010 0301 	ands.w	r3, r0, #1
 8017a78:	d00a      	beq.n	8017a90 <__swsetup_r+0xbc>
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	60a3      	str	r3, [r4, #8]
 8017a7e:	6963      	ldr	r3, [r4, #20]
 8017a80:	425b      	negs	r3, r3
 8017a82:	61a3      	str	r3, [r4, #24]
 8017a84:	6923      	ldr	r3, [r4, #16]
 8017a86:	b943      	cbnz	r3, 8017a9a <__swsetup_r+0xc6>
 8017a88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017a8c:	d1ba      	bne.n	8017a04 <__swsetup_r+0x30>
 8017a8e:	bd70      	pop	{r4, r5, r6, pc}
 8017a90:	0781      	lsls	r1, r0, #30
 8017a92:	bf58      	it	pl
 8017a94:	6963      	ldrpl	r3, [r4, #20]
 8017a96:	60a3      	str	r3, [r4, #8]
 8017a98:	e7f4      	b.n	8017a84 <__swsetup_r+0xb0>
 8017a9a:	2000      	movs	r0, #0
 8017a9c:	e7f7      	b.n	8017a8e <__swsetup_r+0xba>
 8017a9e:	bf00      	nop
 8017aa0:	20000190 	.word	0x20000190
 8017aa4:	0801ad00 	.word	0x0801ad00
 8017aa8:	0801ad20 	.word	0x0801ad20
 8017aac:	0801ace0 	.word	0x0801ace0

08017ab0 <abort>:
 8017ab0:	b508      	push	{r3, lr}
 8017ab2:	2006      	movs	r0, #6
 8017ab4:	f000 f992 	bl	8017ddc <raise>
 8017ab8:	2001      	movs	r0, #1
 8017aba:	f7e9 fbc1 	bl	8001240 <_exit>
	...

08017ac0 <_close_r>:
 8017ac0:	b538      	push	{r3, r4, r5, lr}
 8017ac2:	4d06      	ldr	r5, [pc, #24]	; (8017adc <_close_r+0x1c>)
 8017ac4:	2300      	movs	r3, #0
 8017ac6:	4604      	mov	r4, r0
 8017ac8:	4608      	mov	r0, r1
 8017aca:	602b      	str	r3, [r5, #0]
 8017acc:	f7e9 fbfb 	bl	80012c6 <_close>
 8017ad0:	1c43      	adds	r3, r0, #1
 8017ad2:	d102      	bne.n	8017ada <_close_r+0x1a>
 8017ad4:	682b      	ldr	r3, [r5, #0]
 8017ad6:	b103      	cbz	r3, 8017ada <_close_r+0x1a>
 8017ad8:	6023      	str	r3, [r4, #0]
 8017ada:	bd38      	pop	{r3, r4, r5, pc}
 8017adc:	2000b118 	.word	0x2000b118

08017ae0 <__sflush_r>:
 8017ae0:	898a      	ldrh	r2, [r1, #12]
 8017ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ae6:	4605      	mov	r5, r0
 8017ae8:	0710      	lsls	r0, r2, #28
 8017aea:	460c      	mov	r4, r1
 8017aec:	d458      	bmi.n	8017ba0 <__sflush_r+0xc0>
 8017aee:	684b      	ldr	r3, [r1, #4]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	dc05      	bgt.n	8017b00 <__sflush_r+0x20>
 8017af4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	dc02      	bgt.n	8017b00 <__sflush_r+0x20>
 8017afa:	2000      	movs	r0, #0
 8017afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b02:	2e00      	cmp	r6, #0
 8017b04:	d0f9      	beq.n	8017afa <__sflush_r+0x1a>
 8017b06:	2300      	movs	r3, #0
 8017b08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017b0c:	682f      	ldr	r7, [r5, #0]
 8017b0e:	602b      	str	r3, [r5, #0]
 8017b10:	d032      	beq.n	8017b78 <__sflush_r+0x98>
 8017b12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017b14:	89a3      	ldrh	r3, [r4, #12]
 8017b16:	075a      	lsls	r2, r3, #29
 8017b18:	d505      	bpl.n	8017b26 <__sflush_r+0x46>
 8017b1a:	6863      	ldr	r3, [r4, #4]
 8017b1c:	1ac0      	subs	r0, r0, r3
 8017b1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017b20:	b10b      	cbz	r3, 8017b26 <__sflush_r+0x46>
 8017b22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017b24:	1ac0      	subs	r0, r0, r3
 8017b26:	2300      	movs	r3, #0
 8017b28:	4602      	mov	r2, r0
 8017b2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b2c:	6a21      	ldr	r1, [r4, #32]
 8017b2e:	4628      	mov	r0, r5
 8017b30:	47b0      	blx	r6
 8017b32:	1c43      	adds	r3, r0, #1
 8017b34:	89a3      	ldrh	r3, [r4, #12]
 8017b36:	d106      	bne.n	8017b46 <__sflush_r+0x66>
 8017b38:	6829      	ldr	r1, [r5, #0]
 8017b3a:	291d      	cmp	r1, #29
 8017b3c:	d82c      	bhi.n	8017b98 <__sflush_r+0xb8>
 8017b3e:	4a2a      	ldr	r2, [pc, #168]	; (8017be8 <__sflush_r+0x108>)
 8017b40:	40ca      	lsrs	r2, r1
 8017b42:	07d6      	lsls	r6, r2, #31
 8017b44:	d528      	bpl.n	8017b98 <__sflush_r+0xb8>
 8017b46:	2200      	movs	r2, #0
 8017b48:	6062      	str	r2, [r4, #4]
 8017b4a:	04d9      	lsls	r1, r3, #19
 8017b4c:	6922      	ldr	r2, [r4, #16]
 8017b4e:	6022      	str	r2, [r4, #0]
 8017b50:	d504      	bpl.n	8017b5c <__sflush_r+0x7c>
 8017b52:	1c42      	adds	r2, r0, #1
 8017b54:	d101      	bne.n	8017b5a <__sflush_r+0x7a>
 8017b56:	682b      	ldr	r3, [r5, #0]
 8017b58:	b903      	cbnz	r3, 8017b5c <__sflush_r+0x7c>
 8017b5a:	6560      	str	r0, [r4, #84]	; 0x54
 8017b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017b5e:	602f      	str	r7, [r5, #0]
 8017b60:	2900      	cmp	r1, #0
 8017b62:	d0ca      	beq.n	8017afa <__sflush_r+0x1a>
 8017b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017b68:	4299      	cmp	r1, r3
 8017b6a:	d002      	beq.n	8017b72 <__sflush_r+0x92>
 8017b6c:	4628      	mov	r0, r5
 8017b6e:	f7ff fae1 	bl	8017134 <_free_r>
 8017b72:	2000      	movs	r0, #0
 8017b74:	6360      	str	r0, [r4, #52]	; 0x34
 8017b76:	e7c1      	b.n	8017afc <__sflush_r+0x1c>
 8017b78:	6a21      	ldr	r1, [r4, #32]
 8017b7a:	2301      	movs	r3, #1
 8017b7c:	4628      	mov	r0, r5
 8017b7e:	47b0      	blx	r6
 8017b80:	1c41      	adds	r1, r0, #1
 8017b82:	d1c7      	bne.n	8017b14 <__sflush_r+0x34>
 8017b84:	682b      	ldr	r3, [r5, #0]
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d0c4      	beq.n	8017b14 <__sflush_r+0x34>
 8017b8a:	2b1d      	cmp	r3, #29
 8017b8c:	d001      	beq.n	8017b92 <__sflush_r+0xb2>
 8017b8e:	2b16      	cmp	r3, #22
 8017b90:	d101      	bne.n	8017b96 <__sflush_r+0xb6>
 8017b92:	602f      	str	r7, [r5, #0]
 8017b94:	e7b1      	b.n	8017afa <__sflush_r+0x1a>
 8017b96:	89a3      	ldrh	r3, [r4, #12]
 8017b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b9c:	81a3      	strh	r3, [r4, #12]
 8017b9e:	e7ad      	b.n	8017afc <__sflush_r+0x1c>
 8017ba0:	690f      	ldr	r7, [r1, #16]
 8017ba2:	2f00      	cmp	r7, #0
 8017ba4:	d0a9      	beq.n	8017afa <__sflush_r+0x1a>
 8017ba6:	0793      	lsls	r3, r2, #30
 8017ba8:	680e      	ldr	r6, [r1, #0]
 8017baa:	bf08      	it	eq
 8017bac:	694b      	ldreq	r3, [r1, #20]
 8017bae:	600f      	str	r7, [r1, #0]
 8017bb0:	bf18      	it	ne
 8017bb2:	2300      	movne	r3, #0
 8017bb4:	eba6 0807 	sub.w	r8, r6, r7
 8017bb8:	608b      	str	r3, [r1, #8]
 8017bba:	f1b8 0f00 	cmp.w	r8, #0
 8017bbe:	dd9c      	ble.n	8017afa <__sflush_r+0x1a>
 8017bc0:	6a21      	ldr	r1, [r4, #32]
 8017bc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017bc4:	4643      	mov	r3, r8
 8017bc6:	463a      	mov	r2, r7
 8017bc8:	4628      	mov	r0, r5
 8017bca:	47b0      	blx	r6
 8017bcc:	2800      	cmp	r0, #0
 8017bce:	dc06      	bgt.n	8017bde <__sflush_r+0xfe>
 8017bd0:	89a3      	ldrh	r3, [r4, #12]
 8017bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017bd6:	81a3      	strh	r3, [r4, #12]
 8017bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8017bdc:	e78e      	b.n	8017afc <__sflush_r+0x1c>
 8017bde:	4407      	add	r7, r0
 8017be0:	eba8 0800 	sub.w	r8, r8, r0
 8017be4:	e7e9      	b.n	8017bba <__sflush_r+0xda>
 8017be6:	bf00      	nop
 8017be8:	20400001 	.word	0x20400001

08017bec <_fflush_r>:
 8017bec:	b538      	push	{r3, r4, r5, lr}
 8017bee:	690b      	ldr	r3, [r1, #16]
 8017bf0:	4605      	mov	r5, r0
 8017bf2:	460c      	mov	r4, r1
 8017bf4:	b913      	cbnz	r3, 8017bfc <_fflush_r+0x10>
 8017bf6:	2500      	movs	r5, #0
 8017bf8:	4628      	mov	r0, r5
 8017bfa:	bd38      	pop	{r3, r4, r5, pc}
 8017bfc:	b118      	cbz	r0, 8017c06 <_fflush_r+0x1a>
 8017bfe:	6983      	ldr	r3, [r0, #24]
 8017c00:	b90b      	cbnz	r3, 8017c06 <_fflush_r+0x1a>
 8017c02:	f7ff f9dd 	bl	8016fc0 <__sinit>
 8017c06:	4b14      	ldr	r3, [pc, #80]	; (8017c58 <_fflush_r+0x6c>)
 8017c08:	429c      	cmp	r4, r3
 8017c0a:	d11b      	bne.n	8017c44 <_fflush_r+0x58>
 8017c0c:	686c      	ldr	r4, [r5, #4]
 8017c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d0ef      	beq.n	8017bf6 <_fflush_r+0xa>
 8017c16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017c18:	07d0      	lsls	r0, r2, #31
 8017c1a:	d404      	bmi.n	8017c26 <_fflush_r+0x3a>
 8017c1c:	0599      	lsls	r1, r3, #22
 8017c1e:	d402      	bmi.n	8017c26 <_fflush_r+0x3a>
 8017c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017c22:	f7ff fa7d 	bl	8017120 <__retarget_lock_acquire_recursive>
 8017c26:	4628      	mov	r0, r5
 8017c28:	4621      	mov	r1, r4
 8017c2a:	f7ff ff59 	bl	8017ae0 <__sflush_r>
 8017c2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017c30:	07da      	lsls	r2, r3, #31
 8017c32:	4605      	mov	r5, r0
 8017c34:	d4e0      	bmi.n	8017bf8 <_fflush_r+0xc>
 8017c36:	89a3      	ldrh	r3, [r4, #12]
 8017c38:	059b      	lsls	r3, r3, #22
 8017c3a:	d4dd      	bmi.n	8017bf8 <_fflush_r+0xc>
 8017c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017c3e:	f7ff fa70 	bl	8017122 <__retarget_lock_release_recursive>
 8017c42:	e7d9      	b.n	8017bf8 <_fflush_r+0xc>
 8017c44:	4b05      	ldr	r3, [pc, #20]	; (8017c5c <_fflush_r+0x70>)
 8017c46:	429c      	cmp	r4, r3
 8017c48:	d101      	bne.n	8017c4e <_fflush_r+0x62>
 8017c4a:	68ac      	ldr	r4, [r5, #8]
 8017c4c:	e7df      	b.n	8017c0e <_fflush_r+0x22>
 8017c4e:	4b04      	ldr	r3, [pc, #16]	; (8017c60 <_fflush_r+0x74>)
 8017c50:	429c      	cmp	r4, r3
 8017c52:	bf08      	it	eq
 8017c54:	68ec      	ldreq	r4, [r5, #12]
 8017c56:	e7da      	b.n	8017c0e <_fflush_r+0x22>
 8017c58:	0801ad00 	.word	0x0801ad00
 8017c5c:	0801ad20 	.word	0x0801ad20
 8017c60:	0801ace0 	.word	0x0801ace0

08017c64 <_lseek_r>:
 8017c64:	b538      	push	{r3, r4, r5, lr}
 8017c66:	4d07      	ldr	r5, [pc, #28]	; (8017c84 <_lseek_r+0x20>)
 8017c68:	4604      	mov	r4, r0
 8017c6a:	4608      	mov	r0, r1
 8017c6c:	4611      	mov	r1, r2
 8017c6e:	2200      	movs	r2, #0
 8017c70:	602a      	str	r2, [r5, #0]
 8017c72:	461a      	mov	r2, r3
 8017c74:	f7e9 fb4e 	bl	8001314 <_lseek>
 8017c78:	1c43      	adds	r3, r0, #1
 8017c7a:	d102      	bne.n	8017c82 <_lseek_r+0x1e>
 8017c7c:	682b      	ldr	r3, [r5, #0]
 8017c7e:	b103      	cbz	r3, 8017c82 <_lseek_r+0x1e>
 8017c80:	6023      	str	r3, [r4, #0]
 8017c82:	bd38      	pop	{r3, r4, r5, pc}
 8017c84:	2000b118 	.word	0x2000b118

08017c88 <__swhatbuf_r>:
 8017c88:	b570      	push	{r4, r5, r6, lr}
 8017c8a:	460e      	mov	r6, r1
 8017c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c90:	2900      	cmp	r1, #0
 8017c92:	b096      	sub	sp, #88	; 0x58
 8017c94:	4614      	mov	r4, r2
 8017c96:	461d      	mov	r5, r3
 8017c98:	da07      	bge.n	8017caa <__swhatbuf_r+0x22>
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	602b      	str	r3, [r5, #0]
 8017c9e:	89b3      	ldrh	r3, [r6, #12]
 8017ca0:	061a      	lsls	r2, r3, #24
 8017ca2:	d410      	bmi.n	8017cc6 <__swhatbuf_r+0x3e>
 8017ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017ca8:	e00e      	b.n	8017cc8 <__swhatbuf_r+0x40>
 8017caa:	466a      	mov	r2, sp
 8017cac:	f000 f8b2 	bl	8017e14 <_fstat_r>
 8017cb0:	2800      	cmp	r0, #0
 8017cb2:	dbf2      	blt.n	8017c9a <__swhatbuf_r+0x12>
 8017cb4:	9a01      	ldr	r2, [sp, #4]
 8017cb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017cba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017cbe:	425a      	negs	r2, r3
 8017cc0:	415a      	adcs	r2, r3
 8017cc2:	602a      	str	r2, [r5, #0]
 8017cc4:	e7ee      	b.n	8017ca4 <__swhatbuf_r+0x1c>
 8017cc6:	2340      	movs	r3, #64	; 0x40
 8017cc8:	2000      	movs	r0, #0
 8017cca:	6023      	str	r3, [r4, #0]
 8017ccc:	b016      	add	sp, #88	; 0x58
 8017cce:	bd70      	pop	{r4, r5, r6, pc}

08017cd0 <__smakebuf_r>:
 8017cd0:	898b      	ldrh	r3, [r1, #12]
 8017cd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017cd4:	079d      	lsls	r5, r3, #30
 8017cd6:	4606      	mov	r6, r0
 8017cd8:	460c      	mov	r4, r1
 8017cda:	d507      	bpl.n	8017cec <__smakebuf_r+0x1c>
 8017cdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017ce0:	6023      	str	r3, [r4, #0]
 8017ce2:	6123      	str	r3, [r4, #16]
 8017ce4:	2301      	movs	r3, #1
 8017ce6:	6163      	str	r3, [r4, #20]
 8017ce8:	b002      	add	sp, #8
 8017cea:	bd70      	pop	{r4, r5, r6, pc}
 8017cec:	ab01      	add	r3, sp, #4
 8017cee:	466a      	mov	r2, sp
 8017cf0:	f7ff ffca 	bl	8017c88 <__swhatbuf_r>
 8017cf4:	9900      	ldr	r1, [sp, #0]
 8017cf6:	4605      	mov	r5, r0
 8017cf8:	4630      	mov	r0, r6
 8017cfa:	f7ff fa6b 	bl	80171d4 <_malloc_r>
 8017cfe:	b948      	cbnz	r0, 8017d14 <__smakebuf_r+0x44>
 8017d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d04:	059a      	lsls	r2, r3, #22
 8017d06:	d4ef      	bmi.n	8017ce8 <__smakebuf_r+0x18>
 8017d08:	f023 0303 	bic.w	r3, r3, #3
 8017d0c:	f043 0302 	orr.w	r3, r3, #2
 8017d10:	81a3      	strh	r3, [r4, #12]
 8017d12:	e7e3      	b.n	8017cdc <__smakebuf_r+0xc>
 8017d14:	4b0d      	ldr	r3, [pc, #52]	; (8017d4c <__smakebuf_r+0x7c>)
 8017d16:	62b3      	str	r3, [r6, #40]	; 0x28
 8017d18:	89a3      	ldrh	r3, [r4, #12]
 8017d1a:	6020      	str	r0, [r4, #0]
 8017d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017d20:	81a3      	strh	r3, [r4, #12]
 8017d22:	9b00      	ldr	r3, [sp, #0]
 8017d24:	6163      	str	r3, [r4, #20]
 8017d26:	9b01      	ldr	r3, [sp, #4]
 8017d28:	6120      	str	r0, [r4, #16]
 8017d2a:	b15b      	cbz	r3, 8017d44 <__smakebuf_r+0x74>
 8017d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d30:	4630      	mov	r0, r6
 8017d32:	f000 f881 	bl	8017e38 <_isatty_r>
 8017d36:	b128      	cbz	r0, 8017d44 <__smakebuf_r+0x74>
 8017d38:	89a3      	ldrh	r3, [r4, #12]
 8017d3a:	f023 0303 	bic.w	r3, r3, #3
 8017d3e:	f043 0301 	orr.w	r3, r3, #1
 8017d42:	81a3      	strh	r3, [r4, #12]
 8017d44:	89a0      	ldrh	r0, [r4, #12]
 8017d46:	4305      	orrs	r5, r0
 8017d48:	81a5      	strh	r5, [r4, #12]
 8017d4a:	e7cd      	b.n	8017ce8 <__smakebuf_r+0x18>
 8017d4c:	08016f59 	.word	0x08016f59

08017d50 <__malloc_lock>:
 8017d50:	4801      	ldr	r0, [pc, #4]	; (8017d58 <__malloc_lock+0x8>)
 8017d52:	f7ff b9e5 	b.w	8017120 <__retarget_lock_acquire_recursive>
 8017d56:	bf00      	nop
 8017d58:	2000c9fc 	.word	0x2000c9fc

08017d5c <__malloc_unlock>:
 8017d5c:	4801      	ldr	r0, [pc, #4]	; (8017d64 <__malloc_unlock+0x8>)
 8017d5e:	f7ff b9e0 	b.w	8017122 <__retarget_lock_release_recursive>
 8017d62:	bf00      	nop
 8017d64:	2000c9fc 	.word	0x2000c9fc

08017d68 <_read_r>:
 8017d68:	b538      	push	{r3, r4, r5, lr}
 8017d6a:	4d07      	ldr	r5, [pc, #28]	; (8017d88 <_read_r+0x20>)
 8017d6c:	4604      	mov	r4, r0
 8017d6e:	4608      	mov	r0, r1
 8017d70:	4611      	mov	r1, r2
 8017d72:	2200      	movs	r2, #0
 8017d74:	602a      	str	r2, [r5, #0]
 8017d76:	461a      	mov	r2, r3
 8017d78:	f7e9 fa6c 	bl	8001254 <_read>
 8017d7c:	1c43      	adds	r3, r0, #1
 8017d7e:	d102      	bne.n	8017d86 <_read_r+0x1e>
 8017d80:	682b      	ldr	r3, [r5, #0]
 8017d82:	b103      	cbz	r3, 8017d86 <_read_r+0x1e>
 8017d84:	6023      	str	r3, [r4, #0]
 8017d86:	bd38      	pop	{r3, r4, r5, pc}
 8017d88:	2000b118 	.word	0x2000b118

08017d8c <_raise_r>:
 8017d8c:	291f      	cmp	r1, #31
 8017d8e:	b538      	push	{r3, r4, r5, lr}
 8017d90:	4604      	mov	r4, r0
 8017d92:	460d      	mov	r5, r1
 8017d94:	d904      	bls.n	8017da0 <_raise_r+0x14>
 8017d96:	2316      	movs	r3, #22
 8017d98:	6003      	str	r3, [r0, #0]
 8017d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8017d9e:	bd38      	pop	{r3, r4, r5, pc}
 8017da0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017da2:	b112      	cbz	r2, 8017daa <_raise_r+0x1e>
 8017da4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017da8:	b94b      	cbnz	r3, 8017dbe <_raise_r+0x32>
 8017daa:	4620      	mov	r0, r4
 8017dac:	f000 f830 	bl	8017e10 <_getpid_r>
 8017db0:	462a      	mov	r2, r5
 8017db2:	4601      	mov	r1, r0
 8017db4:	4620      	mov	r0, r4
 8017db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017dba:	f000 b817 	b.w	8017dec <_kill_r>
 8017dbe:	2b01      	cmp	r3, #1
 8017dc0:	d00a      	beq.n	8017dd8 <_raise_r+0x4c>
 8017dc2:	1c59      	adds	r1, r3, #1
 8017dc4:	d103      	bne.n	8017dce <_raise_r+0x42>
 8017dc6:	2316      	movs	r3, #22
 8017dc8:	6003      	str	r3, [r0, #0]
 8017dca:	2001      	movs	r0, #1
 8017dcc:	e7e7      	b.n	8017d9e <_raise_r+0x12>
 8017dce:	2400      	movs	r4, #0
 8017dd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017dd4:	4628      	mov	r0, r5
 8017dd6:	4798      	blx	r3
 8017dd8:	2000      	movs	r0, #0
 8017dda:	e7e0      	b.n	8017d9e <_raise_r+0x12>

08017ddc <raise>:
 8017ddc:	4b02      	ldr	r3, [pc, #8]	; (8017de8 <raise+0xc>)
 8017dde:	4601      	mov	r1, r0
 8017de0:	6818      	ldr	r0, [r3, #0]
 8017de2:	f7ff bfd3 	b.w	8017d8c <_raise_r>
 8017de6:	bf00      	nop
 8017de8:	20000190 	.word	0x20000190

08017dec <_kill_r>:
 8017dec:	b538      	push	{r3, r4, r5, lr}
 8017dee:	4d07      	ldr	r5, [pc, #28]	; (8017e0c <_kill_r+0x20>)
 8017df0:	2300      	movs	r3, #0
 8017df2:	4604      	mov	r4, r0
 8017df4:	4608      	mov	r0, r1
 8017df6:	4611      	mov	r1, r2
 8017df8:	602b      	str	r3, [r5, #0]
 8017dfa:	f7e9 fa0f 	bl	800121c <_kill>
 8017dfe:	1c43      	adds	r3, r0, #1
 8017e00:	d102      	bne.n	8017e08 <_kill_r+0x1c>
 8017e02:	682b      	ldr	r3, [r5, #0]
 8017e04:	b103      	cbz	r3, 8017e08 <_kill_r+0x1c>
 8017e06:	6023      	str	r3, [r4, #0]
 8017e08:	bd38      	pop	{r3, r4, r5, pc}
 8017e0a:	bf00      	nop
 8017e0c:	2000b118 	.word	0x2000b118

08017e10 <_getpid_r>:
 8017e10:	f7e9 b9fc 	b.w	800120c <_getpid>

08017e14 <_fstat_r>:
 8017e14:	b538      	push	{r3, r4, r5, lr}
 8017e16:	4d07      	ldr	r5, [pc, #28]	; (8017e34 <_fstat_r+0x20>)
 8017e18:	2300      	movs	r3, #0
 8017e1a:	4604      	mov	r4, r0
 8017e1c:	4608      	mov	r0, r1
 8017e1e:	4611      	mov	r1, r2
 8017e20:	602b      	str	r3, [r5, #0]
 8017e22:	f7e9 fa5c 	bl	80012de <_fstat>
 8017e26:	1c43      	adds	r3, r0, #1
 8017e28:	d102      	bne.n	8017e30 <_fstat_r+0x1c>
 8017e2a:	682b      	ldr	r3, [r5, #0]
 8017e2c:	b103      	cbz	r3, 8017e30 <_fstat_r+0x1c>
 8017e2e:	6023      	str	r3, [r4, #0]
 8017e30:	bd38      	pop	{r3, r4, r5, pc}
 8017e32:	bf00      	nop
 8017e34:	2000b118 	.word	0x2000b118

08017e38 <_isatty_r>:
 8017e38:	b538      	push	{r3, r4, r5, lr}
 8017e3a:	4d06      	ldr	r5, [pc, #24]	; (8017e54 <_isatty_r+0x1c>)
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	4604      	mov	r4, r0
 8017e40:	4608      	mov	r0, r1
 8017e42:	602b      	str	r3, [r5, #0]
 8017e44:	f7e9 fa5b 	bl	80012fe <_isatty>
 8017e48:	1c43      	adds	r3, r0, #1
 8017e4a:	d102      	bne.n	8017e52 <_isatty_r+0x1a>
 8017e4c:	682b      	ldr	r3, [r5, #0]
 8017e4e:	b103      	cbz	r3, 8017e52 <_isatty_r+0x1a>
 8017e50:	6023      	str	r3, [r4, #0]
 8017e52:	bd38      	pop	{r3, r4, r5, pc}
 8017e54:	2000b118 	.word	0x2000b118

08017e58 <_init>:
 8017e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e5a:	bf00      	nop
 8017e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e5e:	bc08      	pop	{r3}
 8017e60:	469e      	mov	lr, r3
 8017e62:	4770      	bx	lr

08017e64 <_fini>:
 8017e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e66:	bf00      	nop
 8017e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e6a:	bc08      	pop	{r3}
 8017e6c:	469e      	mov	lr, r3
 8017e6e:	4770      	bx	lr
