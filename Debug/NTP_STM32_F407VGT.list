
NTP_STM32_F407VGT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022984  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004ee0  08022b18  08022b18  00032b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080279f8  080279f8  00040274  2**0
                  CONTENTS
  4 .ARM          00000008  080279f8  080279f8  000379f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027a00  08027a00  00040274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027a00  08027a00  00037a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08027a04  08027a04  00037a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  08027a08  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cf64  20000278  08027c7c  00040278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000d1dc  08027c7c  0004d1dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040274  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005fc5a  00000000  00000000  000402a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b77a  00000000  00000000  0009fefe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002f50  00000000  00000000  000ab678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002d08  00000000  00000000  000ae5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039e1c  00000000  00000000  000b12d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004b2d3  00000000  00000000  000eb0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe148  00000000  00000000  001363bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00234507  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d7c4  00000000  00000000  0023455c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000278 	.word	0x20000278
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08022afc 	.word	0x08022afc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000027c 	.word	0x2000027c
 80001cc:	08022afc 	.word	0x08022afc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_ldivmod>:
 8000bc8:	b97b      	cbnz	r3, 8000bea <__aeabi_ldivmod+0x22>
 8000bca:	b972      	cbnz	r2, 8000bea <__aeabi_ldivmod+0x22>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bfbe      	ittt	lt
 8000bd0:	2000      	movlt	r0, #0
 8000bd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bd6:	e006      	blt.n	8000be6 <__aeabi_ldivmod+0x1e>
 8000bd8:	bf08      	it	eq
 8000bda:	2800      	cmpeq	r0, #0
 8000bdc:	bf1c      	itt	ne
 8000bde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000be2:	f04f 30ff 	movne.w	r0, #4294967295
 8000be6:	f000 b9ef 	b.w	8000fc8 <__aeabi_idiv0>
 8000bea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	db09      	blt.n	8000c0a <__aeabi_ldivmod+0x42>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db1a      	blt.n	8000c30 <__aeabi_ldivmod+0x68>
 8000bfa:	f000 f883 	bl	8000d04 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4770      	bx	lr
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db1b      	blt.n	8000c4c <__aeabi_ldivmod+0x84>
 8000c14:	f000 f876 	bl	8000d04 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	4252      	negs	r2, r2
 8000c2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2e:	4770      	bx	lr
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	f000 f865 	bl	8000d04 <__udivmoddi4>
 8000c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c42:	b004      	add	sp, #16
 8000c44:	4240      	negs	r0, r0
 8000c46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4a:	4770      	bx	lr
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	f000 f857 	bl	8000d04 <__udivmoddi4>
 8000c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5e:	b004      	add	sp, #16
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b9a4 	b.w	8000fc8 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f83c 	bl	8000d04 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff2b 	bl	8000afc <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fca1 	bl	8000618 <__aeabi_dmul>
 8000cd6:	f000 f979 	bl	8000fcc <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc22 	bl	8000524 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc98 	bl	8000618 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fada 	bl	80002a8 <__aeabi_dsub>
 8000cf4:	f000 f96a 	bl	8000fcc <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <__udivmoddi4>:
 8000d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d08:	9d08      	ldr	r5, [sp, #32]
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	468c      	mov	ip, r1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 8083 	bne.w	8000e1a <__udivmoddi4+0x116>
 8000d14:	428a      	cmp	r2, r1
 8000d16:	4617      	mov	r7, r2
 8000d18:	d947      	bls.n	8000daa <__udivmoddi4+0xa6>
 8000d1a:	fab2 f282 	clz	r2, r2
 8000d1e:	b142      	cbz	r2, 8000d32 <__udivmoddi4+0x2e>
 8000d20:	f1c2 0020 	rsb	r0, r2, #32
 8000d24:	fa24 f000 	lsr.w	r0, r4, r0
 8000d28:	4091      	lsls	r1, r2
 8000d2a:	4097      	lsls	r7, r2
 8000d2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d30:	4094      	lsls	r4, r2
 8000d32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d36:	0c23      	lsrs	r3, r4, #16
 8000d38:	fbbc f6f8 	udiv	r6, ip, r8
 8000d3c:	fa1f fe87 	uxth.w	lr, r7
 8000d40:	fb08 c116 	mls	r1, r8, r6, ip
 8000d44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d48:	fb06 f10e 	mul.w	r1, r6, lr
 8000d4c:	4299      	cmp	r1, r3
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x60>
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d56:	f080 8119 	bcs.w	8000f8c <__udivmoddi4+0x288>
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	f240 8116 	bls.w	8000f8c <__udivmoddi4+0x288>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	443b      	add	r3, r7
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d909      	bls.n	8000d90 <__udivmoddi4+0x8c>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d82:	f080 8105 	bcs.w	8000f90 <__udivmoddi4+0x28c>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f240 8102 	bls.w	8000f90 <__udivmoddi4+0x28c>
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	443c      	add	r4, r7
 8000d90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d94:	eba4 040e 	sub.w	r4, r4, lr
 8000d98:	2600      	movs	r6, #0
 8000d9a:	b11d      	cbz	r5, 8000da4 <__udivmoddi4+0xa0>
 8000d9c:	40d4      	lsrs	r4, r2
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e9c5 4300 	strd	r4, r3, [r5]
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xaa>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f282 	clz	r2, r2
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	d150      	bne.n	8000e58 <__udivmoddi4+0x154>
 8000db6:	1bcb      	subs	r3, r1, r7
 8000db8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbc:	fa1f f887 	uxth.w	r8, r7
 8000dc0:	2601      	movs	r6, #1
 8000dc2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dc6:	0c21      	lsrs	r1, r4, #16
 8000dc8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dcc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd0:	fb08 f30c 	mul.w	r3, r8, ip
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d907      	bls.n	8000de8 <__udivmoddi4+0xe4>
 8000dd8:	1879      	adds	r1, r7, r1
 8000dda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dde:	d202      	bcs.n	8000de6 <__udivmoddi4+0xe2>
 8000de0:	428b      	cmp	r3, r1
 8000de2:	f200 80e9 	bhi.w	8000fb8 <__udivmoddi4+0x2b4>
 8000de6:	4684      	mov	ip, r0
 8000de8:	1ac9      	subs	r1, r1, r3
 8000dea:	b2a3      	uxth	r3, r4
 8000dec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000df8:	fb08 f800 	mul.w	r8, r8, r0
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	d907      	bls.n	8000e10 <__udivmoddi4+0x10c>
 8000e00:	193c      	adds	r4, r7, r4
 8000e02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x10a>
 8000e08:	45a0      	cmp	r8, r4
 8000e0a:	f200 80d9 	bhi.w	8000fc0 <__udivmoddi4+0x2bc>
 8000e0e:	4618      	mov	r0, r3
 8000e10:	eba4 0408 	sub.w	r4, r4, r8
 8000e14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e18:	e7bf      	b.n	8000d9a <__udivmoddi4+0x96>
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d909      	bls.n	8000e32 <__udivmoddi4+0x12e>
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	f000 80b1 	beq.w	8000f86 <__udivmoddi4+0x282>
 8000e24:	2600      	movs	r6, #0
 8000e26:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	fab3 f683 	clz	r6, r3
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d14a      	bne.n	8000ed0 <__udivmoddi4+0x1cc>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d302      	bcc.n	8000e44 <__udivmoddi4+0x140>
 8000e3e:	4282      	cmp	r2, r0
 8000e40:	f200 80b8 	bhi.w	8000fb4 <__udivmoddi4+0x2b0>
 8000e44:	1a84      	subs	r4, r0, r2
 8000e46:	eb61 0103 	sbc.w	r1, r1, r3
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	468c      	mov	ip, r1
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	d0a8      	beq.n	8000da4 <__udivmoddi4+0xa0>
 8000e52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e56:	e7a5      	b.n	8000da4 <__udivmoddi4+0xa0>
 8000e58:	f1c2 0320 	rsb	r3, r2, #32
 8000e5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e60:	4097      	lsls	r7, r2
 8000e62:	fa01 f002 	lsl.w	r0, r1, r2
 8000e66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6a:	40d9      	lsrs	r1, r3
 8000e6c:	4330      	orrs	r0, r6
 8000e6e:	0c03      	lsrs	r3, r0, #16
 8000e70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e74:	fa1f f887 	uxth.w	r8, r7
 8000e78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e80:	fb06 f108 	mul.w	r1, r6, r8
 8000e84:	4299      	cmp	r1, r3
 8000e86:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8a:	d909      	bls.n	8000ea0 <__udivmoddi4+0x19c>
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e92:	f080 808d 	bcs.w	8000fb0 <__udivmoddi4+0x2ac>
 8000e96:	4299      	cmp	r1, r3
 8000e98:	f240 808a 	bls.w	8000fb0 <__udivmoddi4+0x2ac>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	443b      	add	r3, r7
 8000ea0:	1a5b      	subs	r3, r3, r1
 8000ea2:	b281      	uxth	r1, r0
 8000ea4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ea8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb00 f308 	mul.w	r3, r0, r8
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x1c4>
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ebe:	d273      	bcs.n	8000fa8 <__udivmoddi4+0x2a4>
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	d971      	bls.n	8000fa8 <__udivmoddi4+0x2a4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4439      	add	r1, r7
 8000ec8:	1acb      	subs	r3, r1, r3
 8000eca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ece:	e778      	b.n	8000dc2 <__udivmoddi4+0xbe>
 8000ed0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ed4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ed8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000edc:	431c      	orrs	r4, r3
 8000ede:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ee2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ee6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	0c3b      	lsrs	r3, r7, #16
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fa1f f884 	uxth.w	r8, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f02:	fb09 fa08 	mul.w	sl, r9, r8
 8000f06:	458a      	cmp	sl, r1
 8000f08:	fa02 f206 	lsl.w	r2, r2, r6
 8000f0c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x220>
 8000f12:	1861      	adds	r1, r4, r1
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	d248      	bcs.n	8000fac <__udivmoddi4+0x2a8>
 8000f1a:	458a      	cmp	sl, r1
 8000f1c:	d946      	bls.n	8000fac <__udivmoddi4+0x2a8>
 8000f1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f22:	4421      	add	r1, r4
 8000f24:	eba1 010a 	sub.w	r1, r1, sl
 8000f28:	b2bf      	uxth	r7, r7
 8000f2a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f2e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f32:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f36:	fb00 f808 	mul.w	r8, r0, r8
 8000f3a:	45b8      	cmp	r8, r7
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x24a>
 8000f3e:	19e7      	adds	r7, r4, r7
 8000f40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f44:	d22e      	bcs.n	8000fa4 <__udivmoddi4+0x2a0>
 8000f46:	45b8      	cmp	r8, r7
 8000f48:	d92c      	bls.n	8000fa4 <__udivmoddi4+0x2a0>
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	4427      	add	r7, r4
 8000f4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f52:	eba7 0708 	sub.w	r7, r7, r8
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	454f      	cmp	r7, r9
 8000f5c:	46c6      	mov	lr, r8
 8000f5e:	4649      	mov	r1, r9
 8000f60:	d31a      	bcc.n	8000f98 <__udivmoddi4+0x294>
 8000f62:	d017      	beq.n	8000f94 <__udivmoddi4+0x290>
 8000f64:	b15d      	cbz	r5, 8000f7e <__udivmoddi4+0x27a>
 8000f66:	ebb3 020e 	subs.w	r2, r3, lr
 8000f6a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f6e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f72:	40f2      	lsrs	r2, r6
 8000f74:	ea4c 0202 	orr.w	r2, ip, r2
 8000f78:	40f7      	lsrs	r7, r6
 8000f7a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f7e:	2600      	movs	r6, #0
 8000f80:	4631      	mov	r1, r6
 8000f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f86:	462e      	mov	r6, r5
 8000f88:	4628      	mov	r0, r5
 8000f8a:	e70b      	b.n	8000da4 <__udivmoddi4+0xa0>
 8000f8c:	4606      	mov	r6, r0
 8000f8e:	e6e9      	b.n	8000d64 <__udivmoddi4+0x60>
 8000f90:	4618      	mov	r0, r3
 8000f92:	e6fd      	b.n	8000d90 <__udivmoddi4+0x8c>
 8000f94:	4543      	cmp	r3, r8
 8000f96:	d2e5      	bcs.n	8000f64 <__udivmoddi4+0x260>
 8000f98:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f9c:	eb69 0104 	sbc.w	r1, r9, r4
 8000fa0:	3801      	subs	r0, #1
 8000fa2:	e7df      	b.n	8000f64 <__udivmoddi4+0x260>
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	e7d2      	b.n	8000f4e <__udivmoddi4+0x24a>
 8000fa8:	4660      	mov	r0, ip
 8000faa:	e78d      	b.n	8000ec8 <__udivmoddi4+0x1c4>
 8000fac:	4681      	mov	r9, r0
 8000fae:	e7b9      	b.n	8000f24 <__udivmoddi4+0x220>
 8000fb0:	4666      	mov	r6, ip
 8000fb2:	e775      	b.n	8000ea0 <__udivmoddi4+0x19c>
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	e74a      	b.n	8000e4e <__udivmoddi4+0x14a>
 8000fb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fbc:	4439      	add	r1, r7
 8000fbe:	e713      	b.n	8000de8 <__udivmoddi4+0xe4>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	443c      	add	r4, r7
 8000fc4:	e724      	b.n	8000e10 <__udivmoddi4+0x10c>
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <__aeabi_d2uiz>:
 8000fcc:	004a      	lsls	r2, r1, #1
 8000fce:	d211      	bcs.n	8000ff4 <__aeabi_d2uiz+0x28>
 8000fd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fd4:	d211      	bcs.n	8000ffa <__aeabi_d2uiz+0x2e>
 8000fd6:	d50d      	bpl.n	8000ff4 <__aeabi_d2uiz+0x28>
 8000fd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fe0:	d40e      	bmi.n	8001000 <__aeabi_d2uiz+0x34>
 8000fe2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fee:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff2:	4770      	bx	lr
 8000ff4:	f04f 0000 	mov.w	r0, #0
 8000ff8:	4770      	bx	lr
 8000ffa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ffe:	d102      	bne.n	8001006 <__aeabi_d2uiz+0x3a>
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr

0800100c <clearFlash>:
 *      Author: User
 */
#include "MyFlash.h"
#include "local_files.h"
#define CONFIGURATION_START_ADDR 0x080e0000
void clearFlash(){
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
	static FLASH_EraseInitTypeDef EraseInitStruct;
	/* Get the 1st sector to erase */
	uint32_t FirstSector = 11;//flash memory sector
 8001012:	230b      	movs	r3, #11
 8001014:	60fb      	str	r3, [r7, #12]
	/* Get the number of sector to erase from 1st sector*/
	uint32_t NbOfSectors = 1;
 8001016:	2301      	movs	r3, #1
 8001018:	60bb      	str	r3, [r7, #8]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <clearFlash+0x44>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <clearFlash+0x44>)
 8001022:	2202      	movs	r2, #2
 8001024:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FirstSector;
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <clearFlash+0x44>)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors = NbOfSectors;
 800102c:	4a08      	ldr	r2, [pc, #32]	; (8001050 <clearFlash+0x44>)
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	60d3      	str	r3, [r2, #12]
	uint32_t SectorError = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
	HAL_FLASH_Unlock();
 8001036:	f003 ffcb 	bl	8004fd0 <HAL_FLASH_Unlock>
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	4619      	mov	r1, r3
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <clearFlash+0x44>)
 8001040:	f004 f928 	bl	8005294 <HAL_FLASHEx_Erase>
		/*FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
		 */
		//Error_Handler();

	}
	HAL_FLASH_Lock();
 8001044:	f003 ffe6 	bl	8005014 <HAL_FLASH_Lock>

}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000294 	.word	0x20000294

08001054 <WriteDeviceAddressOffset>:
void WriteDeviceAddressOffset(char* data, int size, int offset) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
	uint32_t Address = CONFIGURATION_START_ADDR+offset;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001066:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800106a:	613b      	str	r3, [r7, #16]
	HAL_FLASH_Unlock();
 800106c:	f003 ffb0 	bl	8004fd0 <HAL_FLASH_Unlock>
	for (int i = 0; i<size; i++){
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	e012      	b.n	800109c <WriteDeviceAddressOffset+0x48>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address+i, data[i]) != HAL_OK){
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	18d1      	adds	r1, r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	4413      	add	r3, r2
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	2000      	movs	r0, #0
 800108c:	f003 ff4c 	bl	8004f28 <HAL_FLASH_Program>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d107      	bne.n	80010a6 <WriteDeviceAddressOffset+0x52>
	for (int i = 0; i<size; i++){
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	dbe8      	blt.n	8001076 <WriteDeviceAddressOffset+0x22>
 80010a4:	e000      	b.n	80010a8 <WriteDeviceAddressOffset+0x54>
FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
			 */
			//Error_Handler();
			// int error = HAL_FLASH_GetError();

			break;
 80010a6:	bf00      	nop
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 80010a8:	f003 ffb4 	bl	8005014 <HAL_FLASH_Lock>
}
 80010ac:	bf00      	nop
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <ReadDeviceAddressOffset>:
void ReadDeviceAddressOffset(char* Dout, int size, int offset)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
	uint32_t Address = CONFIGURATION_START_ADDR+offset;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80010c6:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 80010ca:	613b      	str	r3, [r7, #16]

	for (int i = 0; i<size; i++){
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	e00c      	b.n	80010ec <ReadDeviceAddressOffset+0x38>
		Dout[i] = *(__IO char*)(Address+i);
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4413      	add	r3, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	780a      	ldrb	r2, [r1, #0]
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<size; i++){
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3301      	adds	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	dbee      	blt.n	80010d2 <ReadDeviceAddressOffset+0x1e>
	}
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	371c      	adds	r7, #28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4a07      	ldr	r2, [pc, #28]	; (8001130 <vApplicationGetIdleTaskMemory+0x2c>)
 8001114:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	4a06      	ldr	r2, [pc, #24]	; (8001134 <vApplicationGetIdleTaskMemory+0x30>)
 800111a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	200002a8 	.word	0x200002a8
 8001134:	200002fc 	.word	0x200002fc

08001138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	b0c0      	sub	sp, #256	; 0x100
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	memset(&gps,0,sizeof(gps));
 800113e:	221b      	movs	r2, #27
 8001140:	2100      	movs	r1, #0
 8001142:	48a3      	ldr	r0, [pc, #652]	; (80013d0 <main+0x298>)
 8001144:	f01e f836 	bl	801f1b4 <memset>
		// ZDA-38;RMC-68



		 //включение ZDA
		 char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x0B, 0x6B};
 8001148:	4ba2      	ldr	r3, [pc, #648]	; (80013d4 <main+0x29c>)
 800114a:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 800114e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001150:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};
 8001154:	4aa0      	ldr	r2, [pc, #640]	; (80013d8 <main+0x2a0>)
 8001156:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800115a:	ca07      	ldmia	r2, {r0, r1, r2}
 800115c:	c303      	stmia	r3!, {r0, r1}
 800115e:	801a      	strh	r2, [r3, #0]
		 //отключение ZDA
		 //char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5B};
		 //char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};

		 //отключение остального
		 char MESGGA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x23};
 8001160:	4b9e      	ldr	r3, [pc, #632]	; (80013dc <main+0x2a4>)
 8001162:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8001166:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001168:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONGGA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x00, 0xF9, 0x11};
 800116c:	4a9c      	ldr	r2, [pc, #624]	; (80013e0 <main+0x2a8>)
 800116e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001172:	ca07      	ldmia	r2, {r0, r1, r2}
 8001174:	c303      	stmia	r3!, {r0, r1}
 8001176:	801a      	strh	r2, [r3, #0]

		 char MESGLL[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A};
 8001178:	4b9a      	ldr	r3, [pc, #616]	; (80013e4 <main+0x2ac>)
 800117a:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 800117e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001180:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONGLL[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x01, 0xFA, 0x12};
 8001184:	4a98      	ldr	r2, [pc, #608]	; (80013e8 <main+0x2b0>)
 8001186:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800118a:	ca07      	ldmia	r2, {r0, r1, r2}
 800118c:	c303      	stmia	r3!, {r0, r1}
 800118e:	801a      	strh	r2, [r3, #0]

		 char MESGSA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31};
 8001190:	4b96      	ldr	r3, [pc, #600]	; (80013ec <main+0x2b4>)
 8001192:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8001196:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001198:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONGSA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x02, 0xFB, 0x13};
 800119c:	4a94      	ldr	r2, [pc, #592]	; (80013f0 <main+0x2b8>)
 800119e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011a4:	c303      	stmia	r3!, {r0, r1}
 80011a6:	801a      	strh	r2, [r3, #0]

		 char MESGSV[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38};
 80011a8:	4b92      	ldr	r3, [pc, #584]	; (80013f4 <main+0x2bc>)
 80011aa:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80011ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONGSV[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x03, 0xFC, 0x14};
 80011b4:	4a90      	ldr	r2, [pc, #576]	; (80013f8 <main+0x2c0>)
 80011b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80011bc:	c303      	stmia	r3!, {r0, r1}
 80011be:	801a      	strh	r2, [r3, #0]

		 char MESVTG[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x46};
 80011c0:	4b8e      	ldr	r3, [pc, #568]	; (80013fc <main+0x2c4>)
 80011c2:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80011c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONVTG[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x05, 0xFE, 0x16};
 80011cc:	4a8c      	ldr	r2, [pc, #560]	; (8001400 <main+0x2c8>)
 80011ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011d4:	c303      	stmia	r3!, {r0, r1}
 80011d6:	801a      	strh	r2, [r3, #0]
		 //отключение RMC на всякий
		 //char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3F};
		 //char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};

		 //включение RMC
		 char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x07, 0x4F};
 80011d8:	4b8a      	ldr	r3, [pc, #552]	; (8001404 <main+0x2cc>)
 80011da:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80011de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};
 80011e4:	4a88      	ldr	r2, [pc, #544]	; (8001408 <main+0x2d0>)
 80011e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ec:	c303      	stmia	r3!, {r0, r1}
 80011ee:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f0:	f002 fcae 	bl	8003b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f4:	f000 f91a 	bl	800142c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f8:	f000 facc 	bl	8001794 <MX_GPIO_Init>
  MX_RTC_Init();
 80011fc:	f000 f998 	bl	8001530 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001200:	f000 fa74 	bl	80016ec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001204:	f000 fa9c 	bl	8001740 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001208:	f000 fa22 	bl	8001650 <MX_TIM2_Init>
  MX_SPI3_Init();
 800120c:	f000 f9ea 	bl	80015e4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  //TIM1
    HAL_TIM_Base_Start_IT(&htim2);
 8001210:	487e      	ldr	r0, [pc, #504]	; (800140c <main+0x2d4>)
 8001212:	f006 fe45 	bl	8007ea0 <HAL_TIM_Base_Start_IT>

    HAL_Delay(5000);
 8001216:	f241 3088 	movw	r0, #5000	; 0x1388
 800121a:	f002 fcdb 	bl	8003bd4 <HAL_Delay>

   //ON ZDA
    HAL_UART_Transmit(&huart1,(uint8_t*) MESZDA, 16, 1000);
 800121e:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8001222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001226:	2210      	movs	r2, #16
 8001228:	4879      	ldr	r0, [pc, #484]	; (8001410 <main+0x2d8>)
 800122a:	f007 fab8 	bl	800879e <HAL_UART_Transmit>
    HAL_Delay(100);
 800122e:	2064      	movs	r0, #100	; 0x64
 8001230:	f002 fcd0 	bl	8003bd4 <HAL_Delay>
    HAL_UART_Transmit(&huart1,(uint8_t*) CONZDA, 10, 1000);
 8001234:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8001238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123c:	220a      	movs	r2, #10
 800123e:	4874      	ldr	r0, [pc, #464]	; (8001410 <main+0x2d8>)
 8001240:	f007 faad 	bl	800879e <HAL_UART_Transmit>
    HAL_Delay(100);
 8001244:	2064      	movs	r0, #100	; 0x64
 8001246:	f002 fcc5 	bl	8003bd4 <HAL_Delay>

    // OFF protokol
    HAL_UART_Transmit(&huart1,(uint8_t*) MESGGA, 16, 1000);
 800124a:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	2210      	movs	r2, #16
 8001254:	486e      	ldr	r0, [pc, #440]	; (8001410 <main+0x2d8>)
 8001256:	f007 faa2 	bl	800879e <HAL_UART_Transmit>
    HAL_Delay(100);
 800125a:	2064      	movs	r0, #100	; 0x64
 800125c:	f002 fcba 	bl	8003bd4 <HAL_Delay>
    HAL_UART_Transmit(&huart1,(uint8_t*) CONGGA, 10, 1000);
 8001260:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8001264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001268:	220a      	movs	r2, #10
 800126a:	4869      	ldr	r0, [pc, #420]	; (8001410 <main+0x2d8>)
 800126c:	f007 fa97 	bl	800879e <HAL_UART_Transmit>
    HAL_Delay(100);
 8001270:	2064      	movs	r0, #100	; 0x64
 8001272:	f002 fcaf 	bl	8003bd4 <HAL_Delay>

    HAL_UART_Transmit(&huart1,(uint8_t*) MESGLL, 16, 1000);
 8001276:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	2210      	movs	r2, #16
 8001280:	4863      	ldr	r0, [pc, #396]	; (8001410 <main+0x2d8>)
 8001282:	f007 fa8c 	bl	800879e <HAL_UART_Transmit>
    HAL_Delay(100);
 8001286:	2064      	movs	r0, #100	; 0x64
 8001288:	f002 fca4 	bl	8003bd4 <HAL_Delay>
    HAL_UART_Transmit(&huart1,(uint8_t*) CONGLL, 10, 1000);
 800128c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001294:	220a      	movs	r2, #10
 8001296:	485e      	ldr	r0, [pc, #376]	; (8001410 <main+0x2d8>)
 8001298:	f007 fa81 	bl	800879e <HAL_UART_Transmit>
    HAL_Delay(100);
 800129c:	2064      	movs	r0, #100	; 0x64
 800129e:	f002 fc99 	bl	8003bd4 <HAL_Delay>

    HAL_UART_Transmit(&huart1,(uint8_t*) MESGSA, 16, 1000);
 80012a2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	2210      	movs	r2, #16
 80012ac:	4858      	ldr	r0, [pc, #352]	; (8001410 <main+0x2d8>)
 80012ae:	f007 fa76 	bl	800879e <HAL_UART_Transmit>
    HAL_Delay(100);
 80012b2:	2064      	movs	r0, #100	; 0x64
 80012b4:	f002 fc8e 	bl	8003bd4 <HAL_Delay>
    HAL_UART_Transmit(&huart1,(uint8_t*) CONGSA, 10, 1000);
 80012b8:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80012bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c0:	220a      	movs	r2, #10
 80012c2:	4853      	ldr	r0, [pc, #332]	; (8001410 <main+0x2d8>)
 80012c4:	f007 fa6b 	bl	800879e <HAL_UART_Transmit>
    HAL_Delay(100);
 80012c8:	2064      	movs	r0, #100	; 0x64
 80012ca:	f002 fc83 	bl	8003bd4 <HAL_Delay>

    HAL_UART_Transmit(&huart1,(uint8_t*) MESGSV, 16, 1000);
 80012ce:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	2210      	movs	r2, #16
 80012d8:	484d      	ldr	r0, [pc, #308]	; (8001410 <main+0x2d8>)
 80012da:	f007 fa60 	bl	800879e <HAL_UART_Transmit>
    HAL_Delay(100);
 80012de:	2064      	movs	r0, #100	; 0x64
 80012e0:	f002 fc78 	bl	8003bd4 <HAL_Delay>
    HAL_UART_Transmit(&huart1,(uint8_t*) CONGSV, 10, 1000);
 80012e4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80012e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ec:	220a      	movs	r2, #10
 80012ee:	4848      	ldr	r0, [pc, #288]	; (8001410 <main+0x2d8>)
 80012f0:	f007 fa55 	bl	800879e <HAL_UART_Transmit>
    HAL_Delay(100);
 80012f4:	2064      	movs	r0, #100	; 0x64
 80012f6:	f002 fc6d 	bl	8003bd4 <HAL_Delay>

    HAL_UART_Transmit(&huart1,(uint8_t*) MESVTG, 16, 1000);
 80012fa:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	2210      	movs	r2, #16
 8001304:	4842      	ldr	r0, [pc, #264]	; (8001410 <main+0x2d8>)
 8001306:	f007 fa4a 	bl	800879e <HAL_UART_Transmit>
    HAL_Delay(100);
 800130a:	2064      	movs	r0, #100	; 0x64
 800130c:	f002 fc62 	bl	8003bd4 <HAL_Delay>
    HAL_UART_Transmit(&huart1,(uint8_t*) CONVTG, 10, 1000);
 8001310:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001314:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001318:	220a      	movs	r2, #10
 800131a:	483d      	ldr	r0, [pc, #244]	; (8001410 <main+0x2d8>)
 800131c:	f007 fa3f 	bl	800879e <HAL_UART_Transmit>
    HAL_Delay(100);
 8001320:	2064      	movs	r0, #100	; 0x64
 8001322:	f002 fc57 	bl	8003bd4 <HAL_Delay>

    //отключение и включение RMC на всякий
    HAL_UART_Transmit(&huart1,(uint8_t*) MESRMC, 16, 1000);
 8001326:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	2210      	movs	r2, #16
 8001330:	4837      	ldr	r0, [pc, #220]	; (8001410 <main+0x2d8>)
 8001332:	f007 fa34 	bl	800879e <HAL_UART_Transmit>
    HAL_Delay(100);
 8001336:	2064      	movs	r0, #100	; 0x64
 8001338:	f002 fc4c 	bl	8003bd4 <HAL_Delay>
    HAL_UART_Transmit(&huart1,(uint8_t*) CONRMC, 10, 1000);
 800133c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001344:	220a      	movs	r2, #10
 8001346:	4832      	ldr	r0, [pc, #200]	; (8001410 <main+0x2d8>)
 8001348:	f007 fa29 	bl	800879e <HAL_UART_Transmit>
    HAL_Delay(100);
 800134c:	2064      	movs	r0, #100	; 0x64
 800134e:	f002 fc41 	bl	8003bd4 <HAL_Delay>

    //start the web server
    int offset =0;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
   ReadDeviceAddressOffset((char*) &user_info, sizeof(user_info), offset);
 8001358:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800135c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8001360:	482c      	ldr	r0, [pc, #176]	; (8001414 <main+0x2dc>)
 8001362:	f7ff fea7 	bl	80010b4 <ReadDeviceAddressOffset>
   offset+=sizeof(user_info);
 8001366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800136a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800136e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
   //Обнуление PPS
   PPS_count=0;
 8001372:	4b29      	ldr	r3, [pc, #164]	; (8001418 <main+0x2e0>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
   gps.year[0]='V';
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <main+0x298>)
 800137a:	2256      	movs	r2, #86	; 0x56
 800137c:	719a      	strb	r2, [r3, #6]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800137e:	4b27      	ldr	r3, [pc, #156]	; (800141c <main+0x2e4>)
 8001380:	f107 041c 	add.w	r4, r7, #28
 8001384:	461d      	mov	r5, r3
 8001386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800138e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f00b fe3b 	bl	800d014 <osThreadCreate>
 800139e:	4603      	mov	r3, r0
 80013a0:	4a1f      	ldr	r2, [pc, #124]	; (8001420 <main+0x2e8>)
 80013a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, tcpecho_thread, osPriorityIdle, 0, 128);
 80013a4:	463b      	mov	r3, r7
 80013a6:	4a1f      	ldr	r2, [pc, #124]	; (8001424 <main+0x2ec>)
 80013a8:	461c      	mov	r4, r3
 80013aa:	4615      	mov	r5, r2
 80013ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80013b8:	463b      	mov	r3, r7
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f00b fe29 	bl	800d014 <osThreadCreate>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4a18      	ldr	r2, [pc, #96]	; (8001428 <main+0x2f0>)
 80013c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013c8:	f00b fe0d 	bl	800cfe6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <main+0x294>
 80013ce:	bf00      	nop
 80013d0:	20004afc 	.word	0x20004afc
 80013d4:	08022b30 	.word	0x08022b30
 80013d8:	08022b40 	.word	0x08022b40
 80013dc:	08022b4c 	.word	0x08022b4c
 80013e0:	08022b5c 	.word	0x08022b5c
 80013e4:	08022b68 	.word	0x08022b68
 80013e8:	08022b78 	.word	0x08022b78
 80013ec:	08022b84 	.word	0x08022b84
 80013f0:	08022b94 	.word	0x08022b94
 80013f4:	08022ba0 	.word	0x08022ba0
 80013f8:	08022bb0 	.word	0x08022bb0
 80013fc:	08022bbc 	.word	0x08022bbc
 8001400:	08022bcc 	.word	0x08022bcc
 8001404:	08022bd8 	.word	0x08022bd8
 8001408:	08022be8 	.word	0x08022be8
 800140c:	20004d08 	.word	0x20004d08
 8001410:	20004c98 	.word	0x20004c98
 8001414:	20004b18 	.word	0x20004b18
 8001418:	20000528 	.word	0x20000528
 800141c:	08022bf4 	.word	0x08022bf4
 8001420:	20004c3c 	.word	0x20004c3c
 8001424:	08022c10 	.word	0x08022c10
 8001428:	20004ce0 	.word	0x20004ce0

0800142c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b098      	sub	sp, #96	; 0x60
 8001430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001432:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001436:	2230      	movs	r2, #48	; 0x30
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f01d feba 	bl	801f1b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b31      	ldr	r3, [pc, #196]	; (8001528 <SystemClock_Config+0xfc>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a30      	ldr	r2, [pc, #192]	; (8001528 <SystemClock_Config+0xfc>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
 800146e:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <SystemClock_Config+0xfc>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	4b2b      	ldr	r3, [pc, #172]	; (800152c <SystemClock_Config+0x100>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a2a      	ldr	r2, [pc, #168]	; (800152c <SystemClock_Config+0x100>)
 8001484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b28      	ldr	r3, [pc, #160]	; (800152c <SystemClock_Config+0x100>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001496:	2309      	movs	r3, #9
 8001498:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800149a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800149e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014a0:	2301      	movs	r3, #1
 80014a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a4:	2302      	movs	r3, #2
 80014a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014ae:	2304      	movs	r3, #4
 80014b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014b2:	23a8      	movs	r3, #168	; 0xa8
 80014b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b6:	2302      	movs	r3, #2
 80014b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014ba:	2307      	movs	r3, #7
 80014bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c2:	4618      	mov	r0, r3
 80014c4:	f005 fb5a 	bl	8006b7c <HAL_RCC_OscConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80014ce:	f000 fff5 	bl	80024bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d2:	230f      	movs	r3, #15
 80014d4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d6:	2302      	movs	r3, #2
 80014d8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	2105      	movs	r1, #5
 80014f0:	4618      	mov	r0, r3
 80014f2:	f005 fdbb 	bl	800706c <HAL_RCC_ClockConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80014fc:	f000 ffde 	bl	80024bc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001500:	2302      	movs	r3, #2
 8001502:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001508:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	4618      	mov	r0, r3
 8001510:	f005 ffda 	bl	80074c8 <HAL_RCCEx_PeriphCLKConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800151a:	f000 ffcf 	bl	80024bc <Error_Handler>
  }
}
 800151e:	bf00      	nop
 8001520:	3760      	adds	r7, #96	; 0x60
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40007000 	.word	0x40007000

08001530 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001544:	2300      	movs	r3, #0
 8001546:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <MX_RTC_Init+0xac>)
 800154a:	4a25      	ldr	r2, [pc, #148]	; (80015e0 <MX_RTC_Init+0xb0>)
 800154c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800154e:	4b23      	ldr	r3, [pc, #140]	; (80015dc <MX_RTC_Init+0xac>)
 8001550:	2200      	movs	r2, #0
 8001552:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001554:	4b21      	ldr	r3, [pc, #132]	; (80015dc <MX_RTC_Init+0xac>)
 8001556:	227f      	movs	r2, #127	; 0x7f
 8001558:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <MX_RTC_Init+0xac>)
 800155c:	22ff      	movs	r2, #255	; 0xff
 800155e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001560:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <MX_RTC_Init+0xac>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001566:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <MX_RTC_Init+0xac>)
 8001568:	2200      	movs	r2, #0
 800156a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <MX_RTC_Init+0xac>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001572:	481a      	ldr	r0, [pc, #104]	; (80015dc <MX_RTC_Init+0xac>)
 8001574:	f006 f88a 	bl	800768c <HAL_RTC_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800157e:	f000 ff9d 	bl	80024bc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 23;
 8001582:	2317      	movs	r3, #23
 8001584:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 59;
 8001586:	233b      	movs	r3, #59	; 0x3b
 8001588:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	2200      	movs	r2, #0
 800159a:	4619      	mov	r1, r3
 800159c:	480f      	ldr	r0, [pc, #60]	; (80015dc <MX_RTC_Init+0xac>)
 800159e:	f006 f906 	bl	80077ae <HAL_RTC_SetTime>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80015a8:	f000 ff88 	bl	80024bc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80015ac:	2307      	movs	r3, #7
 80015ae:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 80015b0:	2312      	movs	r3, #18
 80015b2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 31;
 80015b4:	231f      	movs	r3, #31
 80015b6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80015bc:	463b      	mov	r3, r7
 80015be:	2200      	movs	r2, #0
 80015c0:	4619      	mov	r1, r3
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <MX_RTC_Init+0xac>)
 80015c4:	f006 fa0e 	bl	80079e4 <HAL_RTC_SetDate>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80015ce:	f000 ff75 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20004ce4 	.word	0x20004ce4
 80015e0:	40002800 	.word	0x40002800

080015e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_SPI3_Init+0x64>)
 80015ea:	4a18      	ldr	r2, [pc, #96]	; (800164c <MX_SPI3_Init+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <MX_SPI3_Init+0x64>)
 80015f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_SPI3_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <MX_SPI3_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_SPI3_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <MX_SPI3_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_SPI3_Init+0x64>)
 8001610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001614:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_SPI3_Init+0x64>)
 8001618:	2200      	movs	r2, #0
 800161a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <MX_SPI3_Init+0x64>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_SPI3_Init+0x64>)
 8001624:	2200      	movs	r2, #0
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <MX_SPI3_Init+0x64>)
 800162a:	2200      	movs	r2, #0
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <MX_SPI3_Init+0x64>)
 8001630:	220a      	movs	r2, #10
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <MX_SPI3_Init+0x64>)
 8001636:	f006 fb5b 	bl	8007cf0 <HAL_SPI_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001640:	f000 ff3c 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20004c40 	.word	0x20004c40
 800164c:	40003c00 	.word	0x40003c00

08001650 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001664:	463b      	mov	r3, r7
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800166c:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <MX_TIM2_Init+0x98>)
 800166e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001672:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3359;
 8001674:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <MX_TIM2_Init+0x98>)
 8001676:	f640 521f 	movw	r2, #3359	; 0xd1f
 800167a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <MX_TIM2_Init+0x98>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <MX_TIM2_Init+0x98>)
 8001684:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001688:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <MX_TIM2_Init+0x98>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <MX_TIM2_Init+0x98>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001696:	4814      	ldr	r0, [pc, #80]	; (80016e8 <MX_TIM2_Init+0x98>)
 8001698:	f006 fbb3 	bl	8007e02 <HAL_TIM_Base_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016a2:	f000 ff0b 	bl	80024bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016ac:	f107 0308 	add.w	r3, r7, #8
 80016b0:	4619      	mov	r1, r3
 80016b2:	480d      	ldr	r0, [pc, #52]	; (80016e8 <MX_TIM2_Init+0x98>)
 80016b4:	f006 fd6c 	bl	8008190 <HAL_TIM_ConfigClockSource>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016be:	f000 fefd 	bl	80024bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016ca:	463b      	mov	r3, r7
 80016cc:	4619      	mov	r1, r3
 80016ce:	4806      	ldr	r0, [pc, #24]	; (80016e8 <MX_TIM2_Init+0x98>)
 80016d0:	f006 ff88 	bl	80085e4 <HAL_TIMEx_MasterConfigSynchronization>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016da:	f000 feef 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20004d08 	.word	0x20004d08

080016ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_USART1_UART_Init+0x4c>)
 80016f2:	4a12      	ldr	r2, [pc, #72]	; (800173c <MX_USART1_UART_Init+0x50>)
 80016f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <MX_USART1_UART_Init+0x4c>)
 80016f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_USART1_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_USART1_UART_Init+0x4c>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <MX_USART1_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_USART1_UART_Init+0x4c>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <MX_USART1_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_USART1_UART_Init+0x4c>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_USART1_UART_Init+0x4c>)
 8001724:	f006 ffee 	bl	8008704 <HAL_UART_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800172e:	f000 fec5 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20004c98 	.word	0x20004c98
 800173c:	40011000 	.word	0x40011000

08001740 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_USART2_UART_Init+0x4c>)
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <MX_USART2_UART_Init+0x50>)
 8001748:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <MX_USART2_UART_Init+0x4c>)
 800174c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001750:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_USART2_UART_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_USART2_UART_Init+0x4c>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <MX_USART2_UART_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_USART2_UART_Init+0x4c>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <MX_USART2_UART_Init+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_USART2_UART_Init+0x4c>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_USART2_UART_Init+0x4c>)
 8001778:	f006 ffc4 	bl	8008704 <HAL_UART_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001782:	f000 fe9b 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20004d50 	.word	0x20004d50
 8001790:	40004400 	.word	0x40004400

08001794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08c      	sub	sp, #48	; 0x30
 8001798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179a:	f107 031c 	add.w	r3, r7, #28
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
 80017ae:	4b58      	ldr	r3, [pc, #352]	; (8001910 <MX_GPIO_Init+0x17c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a57      	ldr	r2, [pc, #348]	; (8001910 <MX_GPIO_Init+0x17c>)
 80017b4:	f043 0310 	orr.w	r3, r3, #16
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b55      	ldr	r3, [pc, #340]	; (8001910 <MX_GPIO_Init+0x17c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	61bb      	str	r3, [r7, #24]
 80017c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	4b51      	ldr	r3, [pc, #324]	; (8001910 <MX_GPIO_Init+0x17c>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a50      	ldr	r2, [pc, #320]	; (8001910 <MX_GPIO_Init+0x17c>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b4e      	ldr	r3, [pc, #312]	; (8001910 <MX_GPIO_Init+0x17c>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b4a      	ldr	r3, [pc, #296]	; (8001910 <MX_GPIO_Init+0x17c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a49      	ldr	r2, [pc, #292]	; (8001910 <MX_GPIO_Init+0x17c>)
 80017ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b47      	ldr	r3, [pc, #284]	; (8001910 <MX_GPIO_Init+0x17c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b43      	ldr	r3, [pc, #268]	; (8001910 <MX_GPIO_Init+0x17c>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a42      	ldr	r2, [pc, #264]	; (8001910 <MX_GPIO_Init+0x17c>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b40      	ldr	r3, [pc, #256]	; (8001910 <MX_GPIO_Init+0x17c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	4b3c      	ldr	r3, [pc, #240]	; (8001910 <MX_GPIO_Init+0x17c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a3b      	ldr	r2, [pc, #236]	; (8001910 <MX_GPIO_Init+0x17c>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b39      	ldr	r3, [pc, #228]	; (8001910 <MX_GPIO_Init+0x17c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	4b35      	ldr	r3, [pc, #212]	; (8001910 <MX_GPIO_Init+0x17c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a34      	ldr	r2, [pc, #208]	; (8001910 <MX_GPIO_Init+0x17c>)
 8001840:	f043 0308 	orr.w	r3, r3, #8
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b32      	ldr	r3, [pc, #200]	; (8001910 <MX_GPIO_Init+0x17c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	21c0      	movs	r1, #192	; 0xc0
 8001856:	482f      	ldr	r0, [pc, #188]	; (8001914 <MX_GPIO_Init+0x180>)
 8001858:	f003 ffda 	bl	8005810 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800185c:	2318      	movs	r3, #24
 800185e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	4619      	mov	r1, r3
 800186e:	482a      	ldr	r0, [pc, #168]	; (8001918 <MX_GPIO_Init+0x184>)
 8001870:	f003 fe32 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001874:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	4619      	mov	r1, r3
 8001888:	4824      	ldr	r0, [pc, #144]	; (800191c <MX_GPIO_Init+0x188>)
 800188a:	f003 fe25 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PPS_Pin */
  GPIO_InitStruct.Pin = PPS_Pin;
 800188e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001894:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PPS_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	4619      	mov	r1, r3
 80018a4:	481e      	ldr	r0, [pc, #120]	; (8001920 <MX_GPIO_Init+0x18c>)
 80018a6:	f003 fe17 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018aa:	23c0      	movs	r3, #192	; 0xc0
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ae:	2301      	movs	r3, #1
 80018b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	4619      	mov	r1, r3
 80018c0:	4814      	ldr	r0, [pc, #80]	; (8001914 <MX_GPIO_Init+0x180>)
 80018c2:	f003 fe09 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	f107 031c 	add.w	r3, r7, #28
 80018d8:	4619      	mov	r1, r3
 80018da:	4812      	ldr	r0, [pc, #72]	; (8001924 <MX_GPIO_Init+0x190>)
 80018dc:	f003 fdfc 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018e0:	2310      	movs	r3, #16
 80018e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	480b      	ldr	r0, [pc, #44]	; (8001920 <MX_GPIO_Init+0x18c>)
 80018f4:	f003 fdf0 	bl	80054d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2105      	movs	r1, #5
 80018fc:	2028      	movs	r0, #40	; 0x28
 80018fe:	f002 fa45 	bl	8003d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001902:	2028      	movs	r0, #40	; 0x28
 8001904:	f002 fa5e 	bl	8003dc4 <HAL_NVIC_EnableIRQ>

}
 8001908:	bf00      	nop
 800190a:	3730      	adds	r7, #48	; 0x30
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40023800 	.word	0x40023800
 8001914:	40020800 	.word	0x40020800
 8001918:	40021000 	.word	0x40021000
 800191c:	40020400 	.word	0x40020400
 8001920:	40020c00 	.word	0x40020c00
 8001924:	40020000 	.word	0x40020000

08001928 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	80fb      	strh	r3, [r7, #6]
	int PPS_Counter_period=0;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
	//int PPS_count=0;//вынес для проверки
	//int PPS_mass[10]={0};//вынес для проверки
	if(GPIO_Pin == PPS_Pin) {
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800193c:	d13d      	bne.n	80019ba <HAL_GPIO_EXTI_Callback+0x92>
		if(PPS_count>2&&PPS_count<12){
 800193e:	4b28      	ldr	r3, [pc, #160]	; (80019e0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b02      	cmp	r3, #2
 8001944:	dd0d      	ble.n	8001962 <HAL_GPIO_EXTI_Callback+0x3a>
 8001946:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b0b      	cmp	r3, #11
 800194c:	dc09      	bgt.n	8001962 <HAL_GPIO_EXTI_Callback+0x3a>
		PPS_mass[PPS_count-2] = TIM2->CNT;
 800194e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3b02      	subs	r3, #2
 800195a:	4611      	mov	r1, r2
 800195c:	4a21      	ldr	r2, [pc, #132]	; (80019e4 <HAL_GPIO_EXTI_Callback+0xbc>)
 800195e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if(PPS_count==12){
 8001962:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b0c      	cmp	r3, #12
 8001968:	d127      	bne.n	80019ba <HAL_GPIO_EXTI_Callback+0x92>
			//HAL_GPIO_TogglePin(Timled_GPIO_Port, Timled_Pin);
			PPS_Counter_period=(PPS_mass[0]+PPS_mass[1]+PPS_mass[2]+PPS_mass[3]+PPS_mass[4]+PPS_mass[5]+PPS_mass[6]+PPS_mass[7]+PPS_mass[8]+PPS_mass[9])/9;
 800196a:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <HAL_GPIO_EXTI_Callback+0xbc>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	441a      	add	r2, r3
 8001974:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	441a      	add	r2, r3
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <HAL_GPIO_EXTI_Callback+0xbc>)
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	441a      	add	r2, r3
 8001980:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	441a      	add	r2, r3
 8001986:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	441a      	add	r2, r3
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <HAL_GPIO_EXTI_Callback+0xbc>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	441a      	add	r2, r3
 8001992:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	441a      	add	r2, r3
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_GPIO_EXTI_Callback+0xbc>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	441a      	add	r2, r3
 800199e:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <HAL_GPIO_EXTI_Callback+0xbc>)
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	4413      	add	r3, r2
 80019a4:	4a10      	ldr	r2, [pc, #64]	; (80019e8 <HAL_GPIO_EXTI_Callback+0xc0>)
 80019a6:	fb82 1203 	smull	r1, r2, r2, r3
 80019aa:	1052      	asrs	r2, r2, #1
 80019ac:	17db      	asrs	r3, r3, #31
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	60fb      	str	r3, [r7, #12]
			TIM2->ARR=PPS_Counter_period;
 80019b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	if(PPS_count<13){
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_GPIO_EXTI_Callback+0xb8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	dc08      	bgt.n	80019d4 <HAL_GPIO_EXTI_Callback+0xac>
		PPS_count=PPS_count+1;
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <HAL_GPIO_EXTI_Callback+0xb8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	3301      	adds	r3, #1
 80019c8:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <HAL_GPIO_EXTI_Callback+0xb8>)
 80019ca:	6013      	str	r3, [r2, #0]
		TIM2->CNT = 0;//обнуление счетчика
 80019cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019d0:	2200      	movs	r2, #0
 80019d2:	625a      	str	r2, [r3, #36]	; 0x24
		}


		}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	20000528 	.word	0x20000528
 80019e4:	2000052c 	.word	0x2000052c
 80019e8:	38e38e39 	.word	0x38e38e39

080019ec <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
	if(huart == &huart1) {
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a62      	ldr	r2, [pc, #392]	; (8001b94 <HAL_UART_RxCpltCallback+0x1a8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	f040 82b3 	bne.w	8001f78 <HAL_UART_RxCpltCallback+0x58c>
		//$ message start
		if(buff[0]=='$'){
 8001a12:	4b61      	ldr	r3, [pc, #388]	; (8001b98 <HAL_UART_RxCpltCallback+0x1ac>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b24      	cmp	r3, #36	; 0x24
 8001a18:	d106      	bne.n	8001a28 <HAL_UART_RxCpltCallback+0x3c>
			count=0;
 8001a1a:	4b60      	ldr	r3, [pc, #384]	; (8001b9c <HAL_UART_RxCpltCallback+0x1b0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
			zpt=0;
 8001a20:	4b5f      	ldr	r3, [pc, #380]	; (8001ba0 <HAL_UART_RxCpltCallback+0x1b4>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	e00f      	b.n	8001a48 <HAL_UART_RxCpltCallback+0x5c>
		}
		//Message error
		else if (count==1&&buff[0]!='G'){
 8001a28:	4b5c      	ldr	r3, [pc, #368]	; (8001b9c <HAL_UART_RxCpltCallback+0x1b0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d10b      	bne.n	8001a48 <HAL_UART_RxCpltCallback+0x5c>
 8001a30:	4b59      	ldr	r3, [pc, #356]	; (8001b98 <HAL_UART_RxCpltCallback+0x1ac>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b47      	cmp	r3, #71	; 0x47
 8001a36:	d007      	beq.n	8001a48 <HAL_UART_RxCpltCallback+0x5c>
			count=0;
 8001a38:	4b58      	ldr	r3, [pc, #352]	; (8001b9c <HAL_UART_RxCpltCallback+0x1b0>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
			ERRORS++;
 8001a3e:	4b59      	ldr	r3, [pc, #356]	; (8001ba4 <HAL_UART_RxCpltCallback+0x1b8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	3301      	adds	r3, #1
 8001a44:	4a57      	ldr	r2, [pc, #348]	; (8001ba4 <HAL_UART_RxCpltCallback+0x1b8>)
 8001a46:	6013      	str	r3, [r2, #0]
		}


		//CRC calculation
		int res = calc_crc(buff[0],count);
 8001a48:	4b53      	ldr	r3, [pc, #332]	; (8001b98 <HAL_UART_RxCpltCallback+0x1ac>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4a53      	ldr	r2, [pc, #332]	; (8001b9c <HAL_UART_RxCpltCallback+0x1b0>)
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 fb4e 	bl	80020f4 <calc_crc>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
		if(res==1){
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d13e      	bne.n	8001ae0 <HAL_UART_RxCpltCallback+0xf4>
			//printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
			//RTC READ
			rtc_read();
 8001a62:	f000 fba3 	bl	80021ac <rtc_read>
			//printf("rtc_read=%llu\t",rtc_read());
			//comparison RTC&CRC
			//Time_calc.tm_wday = 1;//atoi(gps.);
			Time_calc.tm_mon = atoi(gps.month)-1;//-1 do January==0 month
 8001a66:	4850      	ldr	r0, [pc, #320]	; (8001ba8 <HAL_UART_RxCpltCallback+0x1bc>)
 8001a68:	f01d fa50 	bl	801ef0c <atoi>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	4a4e      	ldr	r2, [pc, #312]	; (8001bac <HAL_UART_RxCpltCallback+0x1c0>)
 8001a72:	6113      	str	r3, [r2, #16]
			Time_calc.tm_mday = atoi(gps.day);
 8001a74:	484e      	ldr	r0, [pc, #312]	; (8001bb0 <HAL_UART_RxCpltCallback+0x1c4>)
 8001a76:	f01d fa49 	bl	801ef0c <atoi>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4a4b      	ldr	r2, [pc, #300]	; (8001bac <HAL_UART_RxCpltCallback+0x1c0>)
 8001a7e:	60d3      	str	r3, [r2, #12]
			if(year_str[0]=='0'&&year_str[1]=='0'){
 8001a80:	4b4c      	ldr	r3, [pc, #304]	; (8001bb4 <HAL_UART_RxCpltCallback+0x1c8>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b30      	cmp	r3, #48	; 0x30
 8001a86:	d108      	bne.n	8001a9a <HAL_UART_RxCpltCallback+0xae>
 8001a88:	4b4a      	ldr	r3, [pc, #296]	; (8001bb4 <HAL_UART_RxCpltCallback+0x1c8>)
 8001a8a:	785b      	ldrb	r3, [r3, #1]
 8001a8c:	2b30      	cmp	r3, #48	; 0x30
 8001a8e:	d104      	bne.n	8001a9a <HAL_UART_RxCpltCallback+0xae>
				century=century+100;//atoi(gps.year)
 8001a90:	4b49      	ldr	r3, [pc, #292]	; (8001bb8 <HAL_UART_RxCpltCallback+0x1cc>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	3364      	adds	r3, #100	; 0x64
 8001a96:	4a48      	ldr	r2, [pc, #288]	; (8001bb8 <HAL_UART_RxCpltCallback+0x1cc>)
 8001a98:	6013      	str	r3, [r2, #0]
			}
			Time_calc.tm_year = atoi(year_str) + century;
 8001a9a:	4846      	ldr	r0, [pc, #280]	; (8001bb4 <HAL_UART_RxCpltCallback+0x1c8>)
 8001a9c:	f01d fa36 	bl	801ef0c <atoi>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	4b45      	ldr	r3, [pc, #276]	; (8001bb8 <HAL_UART_RxCpltCallback+0x1cc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4a40      	ldr	r2, [pc, #256]	; (8001bac <HAL_UART_RxCpltCallback+0x1c0>)
 8001aaa:	6153      	str	r3, [r2, #20]
			Time_calc.tm_hour = atoi(gps.hours);
 8001aac:	4843      	ldr	r0, [pc, #268]	; (8001bbc <HAL_UART_RxCpltCallback+0x1d0>)
 8001aae:	f01d fa2d 	bl	801ef0c <atoi>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4a3d      	ldr	r2, [pc, #244]	; (8001bac <HAL_UART_RxCpltCallback+0x1c0>)
 8001ab6:	6093      	str	r3, [r2, #8]
			Time_calc.tm_min = atoi(gps.minuttes);
 8001ab8:	4841      	ldr	r0, [pc, #260]	; (8001bc0 <HAL_UART_RxCpltCallback+0x1d4>)
 8001aba:	f01d fa27 	bl	801ef0c <atoi>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4a3a      	ldr	r2, [pc, #232]	; (8001bac <HAL_UART_RxCpltCallback+0x1c0>)
 8001ac2:	6053      	str	r3, [r2, #4]
			Time_calc.tm_sec = atoi(gps.seconds);
 8001ac4:	483f      	ldr	r0, [pc, #252]	; (8001bc4 <HAL_UART_RxCpltCallback+0x1d8>)
 8001ac6:	f01d fa21 	bl	801ef0c <atoi>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a37      	ldr	r2, [pc, #220]	; (8001bac <HAL_UART_RxCpltCallback+0x1c0>)
 8001ace:	6013      	str	r3, [r2, #0]
			gps_unix = mktime(&Time_calc);
 8001ad0:	4836      	ldr	r0, [pc, #216]	; (8001bac <HAL_UART_RxCpltCallback+0x1c0>)
 8001ad2:	f01d fc4f 	bl	801f374 <mktime>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	493b      	ldr	r1, [pc, #236]	; (8001bc8 <HAL_UART_RxCpltCallback+0x1dc>)
 8001adc:	e9c1 2300 	strd	r2, r3, [r1]
			//printf("tm_year=%d\t tm_mon=%d\t tm_mday=%d\t tm_hour=%d\t tm_min=%d\t tm_sec=%d\n",Time_calc.tm_year,Time_calc.tm_mon,Time_calc.tm_mday,Time_calc.tm_hour,Time_calc.tm_min,Time_calc.tm_sec);
			//printf("rtc_read=%llu\t Time_calc=%llu\n",rtc_read(),gps_unix);

		}
		if(res==1&&gps_unix!=rtc_read()){
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d14a      	bne.n	8001b7c <HAL_UART_RxCpltCallback+0x190>
 8001ae6:	f000 fb61 	bl	80021ac <rtc_read>
 8001aea:	4b37      	ldr	r3, [pc, #220]	; (8001bc8 <HAL_UART_RxCpltCallback+0x1dc>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	4299      	cmp	r1, r3
 8001af2:	bf08      	it	eq
 8001af4:	4290      	cmpeq	r0, r2
 8001af6:	d041      	beq.n	8001b7c <HAL_UART_RxCpltCallback+0x190>

			time_ref_s=htonl(gps_unix- DIFF_SEC_1970_2036);
 8001af8:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <HAL_UART_RxCpltCallback+0x1dc>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	4b33      	ldr	r3, [pc, #204]	; (8001bcc <HAL_UART_RxCpltCallback+0x1e0>)
 8001b00:	4413      	add	r3, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f011 f9cd 	bl	8012ea2 <lwip_htonl>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4a31      	ldr	r2, [pc, #196]	; (8001bd0 <HAL_UART_RxCpltCallback+0x1e4>)
 8001b0c:	6013      	str	r3, [r2, #0]
			sTime.Hours = Time_calc.tm_hour;
 8001b0e:	4b27      	ldr	r3, [pc, #156]	; (8001bac <HAL_UART_RxCpltCallback+0x1c0>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	743b      	strb	r3, [r7, #16]
			sTime.Minutes = Time_calc.tm_min;
 8001b16:	4b25      	ldr	r3, [pc, #148]	; (8001bac <HAL_UART_RxCpltCallback+0x1c0>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	747b      	strb	r3, [r7, #17]
			sTime.Seconds = Time_calc.tm_sec;
 8001b1e:	4b23      	ldr	r3, [pc, #140]	; (8001bac <HAL_UART_RxCpltCallback+0x1c0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	74bb      	strb	r3, [r7, #18]
			sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	623b      	str	r3, [r7, #32]




			if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001b2a:	f107 0310 	add.w	r3, r7, #16
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4619      	mov	r1, r3
 8001b32:	4828      	ldr	r0, [pc, #160]	; (8001bd4 <HAL_UART_RxCpltCallback+0x1e8>)
 8001b34:	f005 fe3b 	bl	80077ae <HAL_RTC_SetTime>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_UART_RxCpltCallback+0x156>
			{
				Error_Handler();
 8001b3e:	f000 fcbd 	bl	80024bc <Error_Handler>
			}
			sDate.Month = Time_calc.tm_mon;
 8001b42:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <HAL_UART_RxCpltCallback+0x1c0>)
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	737b      	strb	r3, [r7, #13]
			sDate.Date = Time_calc.tm_mday;
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_UART_RxCpltCallback+0x1c0>)
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	73bb      	strb	r3, [r7, #14]
			sDate.Year = Time_calc.tm_year-century;
 8001b52:	4b16      	ldr	r3, [pc, #88]	; (8001bac <HAL_UART_RxCpltCallback+0x1c0>)
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <HAL_UART_RxCpltCallback+0x1cc>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	73fb      	strb	r3, [r7, #15]
			if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	2200      	movs	r2, #0
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4819      	ldr	r0, [pc, #100]	; (8001bd4 <HAL_UART_RxCpltCallback+0x1e8>)
 8001b6e:	f005 ff39 	bl	80079e4 <HAL_RTC_SetDate>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_UART_RxCpltCallback+0x190>
			{
				Error_Handler();
 8001b78:	f000 fca0 	bl	80024bc <Error_Handler>
			}


		}
		//ZDA OR RMC
				if (count==3&&buff[0]=='Z'){
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <HAL_UART_RxCpltCallback+0x1b0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d12b      	bne.n	8001bdc <HAL_UART_RxCpltCallback+0x1f0>
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <HAL_UART_RxCpltCallback+0x1ac>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b5a      	cmp	r3, #90	; 0x5a
 8001b8a:	d127      	bne.n	8001bdc <HAL_UART_RxCpltCallback+0x1f0>
					Tipe_Mes=1;
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_UART_RxCpltCallback+0x1ec>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e02e      	b.n	8001bf2 <HAL_UART_RxCpltCallback+0x206>
 8001b94:	20004c98 	.word	0x20004c98
 8001b98:	20000568 	.word	0x20000568
 8001b9c:	20000524 	.word	0x20000524
 8001ba0:	20000510 	.word	0x20000510
 8001ba4:	200004fc 	.word	0x200004fc
 8001ba8:	20004aff 	.word	0x20004aff
 8001bac:	20004d98 	.word	0x20004d98
 8001bb0:	20004afc 	.word	0x20004afc
 8001bb4:	2000056c 	.word	0x2000056c
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	20004b07 	.word	0x20004b07
 8001bc0:	20004b0a 	.word	0x20004b0a
 8001bc4:	20004b0d 	.word	0x20004b0d
 8001bc8:	20000508 	.word	0x20000508
 8001bcc:	83aa7e80 	.word	0x83aa7e80
 8001bd0:	20004d94 	.word	0x20004d94
 8001bd4:	20004ce4 	.word	0x20004ce4
 8001bd8:	20000500 	.word	0x20000500
				}
				else if(count==3&&buff[0]=='R'){
 8001bdc:	4b91      	ldr	r3, [pc, #580]	; (8001e24 <HAL_UART_RxCpltCallback+0x438>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d106      	bne.n	8001bf2 <HAL_UART_RxCpltCallback+0x206>
 8001be4:	4b90      	ldr	r3, [pc, #576]	; (8001e28 <HAL_UART_RxCpltCallback+0x43c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b52      	cmp	r3, #82	; 0x52
 8001bea:	d102      	bne.n	8001bf2 <HAL_UART_RxCpltCallback+0x206>
					Tipe_Mes=2;
 8001bec:	4b8f      	ldr	r3, [pc, #572]	; (8001e2c <HAL_UART_RxCpltCallback+0x440>)
 8001bee:	2202      	movs	r2, #2
 8001bf0:	601a      	str	r2, [r3, #0]
				}
				//If ZDA
				if(Tipe_Mes==1){
 8001bf2:	4b8e      	ldr	r3, [pc, #568]	; (8001e2c <HAL_UART_RxCpltCallback+0x440>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	f040 80d4 	bne.w	8001da4 <HAL_UART_RxCpltCallback+0x3b8>

					if(count==6&&buff[0]!=','){
 8001bfc:	4b89      	ldr	r3, [pc, #548]	; (8001e24 <HAL_UART_RxCpltCallback+0x438>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b06      	cmp	r3, #6
 8001c02:	d10b      	bne.n	8001c1c <HAL_UART_RxCpltCallback+0x230>
 8001c04:	4b88      	ldr	r3, [pc, #544]	; (8001e28 <HAL_UART_RxCpltCallback+0x43c>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b2c      	cmp	r3, #44	; 0x2c
 8001c0a:	d007      	beq.n	8001c1c <HAL_UART_RxCpltCallback+0x230>
						count=0;
 8001c0c:	4b85      	ldr	r3, [pc, #532]	; (8001e24 <HAL_UART_RxCpltCallback+0x438>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
						ERRORS++;
 8001c12:	4b87      	ldr	r3, [pc, #540]	; (8001e30 <HAL_UART_RxCpltCallback+0x444>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3301      	adds	r3, #1
 8001c18:	4a85      	ldr	r2, [pc, #532]	; (8001e30 <HAL_UART_RxCpltCallback+0x444>)
 8001c1a:	6013      	str	r3, [r2, #0]
					}
					if(buff[0]==','){
 8001c1c:	4b82      	ldr	r3, [pc, #520]	; (8001e28 <HAL_UART_RxCpltCallback+0x43c>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b2c      	cmp	r3, #44	; 0x2c
 8001c22:	d107      	bne.n	8001c34 <HAL_UART_RxCpltCallback+0x248>
						zpt++;
 8001c24:	4b83      	ldr	r3, [pc, #524]	; (8001e34 <HAL_UART_RxCpltCallback+0x448>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	4a82      	ldr	r2, [pc, #520]	; (8001e34 <HAL_UART_RxCpltCallback+0x448>)
 8001c2c:	6013      	str	r3, [r2, #0]
						ind=0;
 8001c2e:	4b82      	ldr	r3, [pc, #520]	; (8001e38 <HAL_UART_RxCpltCallback+0x44c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
					}
					if(zpt==1&&buff[0]!=','){
 8001c34:	4b7f      	ldr	r3, [pc, #508]	; (8001e34 <HAL_UART_RxCpltCallback+0x448>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d10e      	bne.n	8001c5a <HAL_UART_RxCpltCallback+0x26e>
 8001c3c:	4b7a      	ldr	r3, [pc, #488]	; (8001e28 <HAL_UART_RxCpltCallback+0x43c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b2c      	cmp	r3, #44	; 0x2c
 8001c42:	d00a      	beq.n	8001c5a <HAL_UART_RxCpltCallback+0x26e>
						time_buff[ind]=buff[0];
 8001c44:	4b7c      	ldr	r3, [pc, #496]	; (8001e38 <HAL_UART_RxCpltCallback+0x44c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a77      	ldr	r2, [pc, #476]	; (8001e28 <HAL_UART_RxCpltCallback+0x43c>)
 8001c4a:	7811      	ldrb	r1, [r2, #0]
 8001c4c:	4a7b      	ldr	r2, [pc, #492]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001c4e:	54d1      	strb	r1, [r2, r3]
						ind++;
 8001c50:	4b79      	ldr	r3, [pc, #484]	; (8001e38 <HAL_UART_RxCpltCallback+0x44c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	3301      	adds	r3, #1
 8001c56:	4a78      	ldr	r2, [pc, #480]	; (8001e38 <HAL_UART_RxCpltCallback+0x44c>)
 8001c58:	6013      	str	r3, [r2, #0]
					}
					if(zpt==2&&buff[0]==','){
 8001c5a:	4b76      	ldr	r3, [pc, #472]	; (8001e34 <HAL_UART_RxCpltCallback+0x448>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d127      	bne.n	8001cb2 <HAL_UART_RxCpltCallback+0x2c6>
 8001c62:	4b71      	ldr	r3, [pc, #452]	; (8001e28 <HAL_UART_RxCpltCallback+0x43c>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b2c      	cmp	r3, #44	; 0x2c
 8001c68:	d123      	bne.n	8001cb2 <HAL_UART_RxCpltCallback+0x2c6>
						gps.hours[0]=time_buff[0];
 8001c6a:	4b74      	ldr	r3, [pc, #464]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001c6c:	781a      	ldrb	r2, [r3, #0]
 8001c6e:	4b74      	ldr	r3, [pc, #464]	; (8001e40 <HAL_UART_RxCpltCallback+0x454>)
 8001c70:	72da      	strb	r2, [r3, #11]
						gps.hours[1]=time_buff[1];
 8001c72:	4b72      	ldr	r3, [pc, #456]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001c74:	785a      	ldrb	r2, [r3, #1]
 8001c76:	4b72      	ldr	r3, [pc, #456]	; (8001e40 <HAL_UART_RxCpltCallback+0x454>)
 8001c78:	731a      	strb	r2, [r3, #12]
						gps.minuttes[0]=time_buff[2];
 8001c7a:	4b70      	ldr	r3, [pc, #448]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001c7c:	789a      	ldrb	r2, [r3, #2]
 8001c7e:	4b70      	ldr	r3, [pc, #448]	; (8001e40 <HAL_UART_RxCpltCallback+0x454>)
 8001c80:	739a      	strb	r2, [r3, #14]
						gps.minuttes[1]=time_buff[3];
 8001c82:	4b6e      	ldr	r3, [pc, #440]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001c84:	78da      	ldrb	r2, [r3, #3]
 8001c86:	4b6e      	ldr	r3, [pc, #440]	; (8001e40 <HAL_UART_RxCpltCallback+0x454>)
 8001c88:	73da      	strb	r2, [r3, #15]
						gps.seconds[0]=time_buff[4];
 8001c8a:	4b6c      	ldr	r3, [pc, #432]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001c8c:	791a      	ldrb	r2, [r3, #4]
 8001c8e:	4b6c      	ldr	r3, [pc, #432]	; (8001e40 <HAL_UART_RxCpltCallback+0x454>)
 8001c90:	745a      	strb	r2, [r3, #17]
						gps.seconds[1]=time_buff[5];
 8001c92:	4b6a      	ldr	r3, [pc, #424]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001c94:	795a      	ldrb	r2, [r3, #5]
 8001c96:	4b6a      	ldr	r3, [pc, #424]	; (8001e40 <HAL_UART_RxCpltCallback+0x454>)
 8001c98:	749a      	strb	r2, [r3, #18]
						gps.seconds[2]=time_buff[6];
 8001c9a:	4b68      	ldr	r3, [pc, #416]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001c9c:	799a      	ldrb	r2, [r3, #6]
 8001c9e:	4b68      	ldr	r3, [pc, #416]	; (8001e40 <HAL_UART_RxCpltCallback+0x454>)
 8001ca0:	74da      	strb	r2, [r3, #19]
						gps.seconds[3]=time_buff[7];
 8001ca2:	4b66      	ldr	r3, [pc, #408]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001ca4:	79da      	ldrb	r2, [r3, #7]
 8001ca6:	4b66      	ldr	r3, [pc, #408]	; (8001e40 <HAL_UART_RxCpltCallback+0x454>)
 8001ca8:	751a      	strb	r2, [r3, #20]
						gps.seconds[4]=time_buff[8];
 8001caa:	4b64      	ldr	r3, [pc, #400]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001cac:	7a1a      	ldrb	r2, [r3, #8]
 8001cae:	4b64      	ldr	r3, [pc, #400]	; (8001e40 <HAL_UART_RxCpltCallback+0x454>)
 8001cb0:	755a      	strb	r2, [r3, #21]
					}
					if(zpt==2&&buff[0]!=','){
 8001cb2:	4b60      	ldr	r3, [pc, #384]	; (8001e34 <HAL_UART_RxCpltCallback+0x448>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d10e      	bne.n	8001cd8 <HAL_UART_RxCpltCallback+0x2ec>
 8001cba:	4b5b      	ldr	r3, [pc, #364]	; (8001e28 <HAL_UART_RxCpltCallback+0x43c>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b2c      	cmp	r3, #44	; 0x2c
 8001cc0:	d00a      	beq.n	8001cd8 <HAL_UART_RxCpltCallback+0x2ec>

						time_buff[ind]=buff[0];
 8001cc2:	4b5d      	ldr	r3, [pc, #372]	; (8001e38 <HAL_UART_RxCpltCallback+0x44c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a58      	ldr	r2, [pc, #352]	; (8001e28 <HAL_UART_RxCpltCallback+0x43c>)
 8001cc8:	7811      	ldrb	r1, [r2, #0]
 8001cca:	4a5c      	ldr	r2, [pc, #368]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001ccc:	54d1      	strb	r1, [r2, r3]
						ind++;
 8001cce:	4b5a      	ldr	r3, [pc, #360]	; (8001e38 <HAL_UART_RxCpltCallback+0x44c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	4a58      	ldr	r2, [pc, #352]	; (8001e38 <HAL_UART_RxCpltCallback+0x44c>)
 8001cd6:	6013      	str	r3, [r2, #0]
					}
					if(zpt==3&&buff[0]==','){
 8001cd8:	4b56      	ldr	r3, [pc, #344]	; (8001e34 <HAL_UART_RxCpltCallback+0x448>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d10b      	bne.n	8001cf8 <HAL_UART_RxCpltCallback+0x30c>
 8001ce0:	4b51      	ldr	r3, [pc, #324]	; (8001e28 <HAL_UART_RxCpltCallback+0x43c>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b2c      	cmp	r3, #44	; 0x2c
 8001ce6:	d107      	bne.n	8001cf8 <HAL_UART_RxCpltCallback+0x30c>
						gps.day[0]=time_buff[0];
 8001ce8:	4b54      	ldr	r3, [pc, #336]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001cea:	781a      	ldrb	r2, [r3, #0]
 8001cec:	4b54      	ldr	r3, [pc, #336]	; (8001e40 <HAL_UART_RxCpltCallback+0x454>)
 8001cee:	701a      	strb	r2, [r3, #0]
						gps.day[1]=time_buff[1];
 8001cf0:	4b52      	ldr	r3, [pc, #328]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001cf2:	785a      	ldrb	r2, [r3, #1]
 8001cf4:	4b52      	ldr	r3, [pc, #328]	; (8001e40 <HAL_UART_RxCpltCallback+0x454>)
 8001cf6:	705a      	strb	r2, [r3, #1]
					}
					if(zpt==3&&buff[0]!=','){
 8001cf8:	4b4e      	ldr	r3, [pc, #312]	; (8001e34 <HAL_UART_RxCpltCallback+0x448>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d10e      	bne.n	8001d1e <HAL_UART_RxCpltCallback+0x332>
 8001d00:	4b49      	ldr	r3, [pc, #292]	; (8001e28 <HAL_UART_RxCpltCallback+0x43c>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b2c      	cmp	r3, #44	; 0x2c
 8001d06:	d00a      	beq.n	8001d1e <HAL_UART_RxCpltCallback+0x332>

						time_buff[ind]=buff[0];
 8001d08:	4b4b      	ldr	r3, [pc, #300]	; (8001e38 <HAL_UART_RxCpltCallback+0x44c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a46      	ldr	r2, [pc, #280]	; (8001e28 <HAL_UART_RxCpltCallback+0x43c>)
 8001d0e:	7811      	ldrb	r1, [r2, #0]
 8001d10:	4a4a      	ldr	r2, [pc, #296]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001d12:	54d1      	strb	r1, [r2, r3]
						ind++;
 8001d14:	4b48      	ldr	r3, [pc, #288]	; (8001e38 <HAL_UART_RxCpltCallback+0x44c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	4a47      	ldr	r2, [pc, #284]	; (8001e38 <HAL_UART_RxCpltCallback+0x44c>)
 8001d1c:	6013      	str	r3, [r2, #0]
					}
					if(zpt==4&&buff[0]==','){
 8001d1e:	4b45      	ldr	r3, [pc, #276]	; (8001e34 <HAL_UART_RxCpltCallback+0x448>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d10b      	bne.n	8001d3e <HAL_UART_RxCpltCallback+0x352>
 8001d26:	4b40      	ldr	r3, [pc, #256]	; (8001e28 <HAL_UART_RxCpltCallback+0x43c>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b2c      	cmp	r3, #44	; 0x2c
 8001d2c:	d107      	bne.n	8001d3e <HAL_UART_RxCpltCallback+0x352>
						gps.month[0]=time_buff[0];
 8001d2e:	4b43      	ldr	r3, [pc, #268]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001d30:	781a      	ldrb	r2, [r3, #0]
 8001d32:	4b43      	ldr	r3, [pc, #268]	; (8001e40 <HAL_UART_RxCpltCallback+0x454>)
 8001d34:	70da      	strb	r2, [r3, #3]
						gps.month[1]=time_buff[1];
 8001d36:	4b41      	ldr	r3, [pc, #260]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001d38:	785a      	ldrb	r2, [r3, #1]
 8001d3a:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <HAL_UART_RxCpltCallback+0x454>)
 8001d3c:	711a      	strb	r2, [r3, #4]
					}
					if(zpt==4&&buff[0]!=','){
 8001d3e:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <HAL_UART_RxCpltCallback+0x448>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d10e      	bne.n	8001d64 <HAL_UART_RxCpltCallback+0x378>
 8001d46:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <HAL_UART_RxCpltCallback+0x43c>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b2c      	cmp	r3, #44	; 0x2c
 8001d4c:	d00a      	beq.n	8001d64 <HAL_UART_RxCpltCallback+0x378>

						time_buff[ind]=buff[0];
 8001d4e:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <HAL_UART_RxCpltCallback+0x44c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a35      	ldr	r2, [pc, #212]	; (8001e28 <HAL_UART_RxCpltCallback+0x43c>)
 8001d54:	7811      	ldrb	r1, [r2, #0]
 8001d56:	4a39      	ldr	r2, [pc, #228]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001d58:	54d1      	strb	r1, [r2, r3]
						ind++;
 8001d5a:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <HAL_UART_RxCpltCallback+0x44c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	4a35      	ldr	r2, [pc, #212]	; (8001e38 <HAL_UART_RxCpltCallback+0x44c>)
 8001d62:	6013      	str	r3, [r2, #0]
					}
					if(zpt==5&&buff[0]==','){
 8001d64:	4b33      	ldr	r3, [pc, #204]	; (8001e34 <HAL_UART_RxCpltCallback+0x448>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b05      	cmp	r3, #5
 8001d6a:	d11b      	bne.n	8001da4 <HAL_UART_RxCpltCallback+0x3b8>
 8001d6c:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <HAL_UART_RxCpltCallback+0x43c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b2c      	cmp	r3, #44	; 0x2c
 8001d72:	d117      	bne.n	8001da4 <HAL_UART_RxCpltCallback+0x3b8>
						gps.year[0]=time_buff[0];
 8001d74:	4b31      	ldr	r3, [pc, #196]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001d76:	781a      	ldrb	r2, [r3, #0]
 8001d78:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <HAL_UART_RxCpltCallback+0x454>)
 8001d7a:	719a      	strb	r2, [r3, #6]
						gps.year[1]=time_buff[1];
 8001d7c:	4b2f      	ldr	r3, [pc, #188]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001d7e:	785a      	ldrb	r2, [r3, #1]
 8001d80:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <HAL_UART_RxCpltCallback+0x454>)
 8001d82:	71da      	strb	r2, [r3, #7]
						gps.year[2]=time_buff[2];
 8001d84:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001d86:	789a      	ldrb	r2, [r3, #2]
 8001d88:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HAL_UART_RxCpltCallback+0x454>)
 8001d8a:	721a      	strb	r2, [r3, #8]
						gps.year[3]=time_buff[3];
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001d8e:	78da      	ldrb	r2, [r3, #3]
 8001d90:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <HAL_UART_RxCpltCallback+0x454>)
 8001d92:	725a      	strb	r2, [r3, #9]
						year_str[0]=time_buff[2];
 8001d94:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001d96:	789a      	ldrb	r2, [r3, #2]
 8001d98:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <HAL_UART_RxCpltCallback+0x458>)
 8001d9a:	701a      	strb	r2, [r3, #0]
						year_str[1]=time_buff[3];
 8001d9c:	4b27      	ldr	r3, [pc, #156]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001d9e:	78da      	ldrb	r2, [r3, #3]
 8001da0:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <HAL_UART_RxCpltCallback+0x458>)
 8001da2:	705a      	strb	r2, [r3, #1]
					}
				}


				//IF RMC
				if(Tipe_Mes==2){
 8001da4:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <HAL_UART_RxCpltCallback+0x440>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	f040 80c9 	bne.w	8001f40 <HAL_UART_RxCpltCallback+0x554>

					if(count==6&&buff[0]!=','){
 8001dae:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <HAL_UART_RxCpltCallback+0x438>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d10b      	bne.n	8001dce <HAL_UART_RxCpltCallback+0x3e2>
 8001db6:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <HAL_UART_RxCpltCallback+0x43c>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b2c      	cmp	r3, #44	; 0x2c
 8001dbc:	d007      	beq.n	8001dce <HAL_UART_RxCpltCallback+0x3e2>
						count=0;
 8001dbe:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_UART_RxCpltCallback+0x438>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
						ERRORS++;
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <HAL_UART_RxCpltCallback+0x444>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	4a19      	ldr	r2, [pc, #100]	; (8001e30 <HAL_UART_RxCpltCallback+0x444>)
 8001dcc:	6013      	str	r3, [r2, #0]
					}
					if(buff[0]==','){
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HAL_UART_RxCpltCallback+0x43c>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b2c      	cmp	r3, #44	; 0x2c
 8001dd4:	d107      	bne.n	8001de6 <HAL_UART_RxCpltCallback+0x3fa>
						zpt++;
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <HAL_UART_RxCpltCallback+0x448>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <HAL_UART_RxCpltCallback+0x448>)
 8001dde:	6013      	str	r3, [r2, #0]
						ind=0;
 8001de0:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <HAL_UART_RxCpltCallback+0x44c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
					}
					if(zpt==1&&buff[0]!=','){
 8001de6:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <HAL_UART_RxCpltCallback+0x448>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d10e      	bne.n	8001e0c <HAL_UART_RxCpltCallback+0x420>
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_UART_RxCpltCallback+0x43c>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b2c      	cmp	r3, #44	; 0x2c
 8001df4:	d00a      	beq.n	8001e0c <HAL_UART_RxCpltCallback+0x420>

						time_buff[ind]=buff[0];
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <HAL_UART_RxCpltCallback+0x44c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <HAL_UART_RxCpltCallback+0x43c>)
 8001dfc:	7811      	ldrb	r1, [r2, #0]
 8001dfe:	4a0f      	ldr	r2, [pc, #60]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001e00:	54d1      	strb	r1, [r2, r3]
						ind++;
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_UART_RxCpltCallback+0x44c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	3301      	adds	r3, #1
 8001e08:	4a0b      	ldr	r2, [pc, #44]	; (8001e38 <HAL_UART_RxCpltCallback+0x44c>)
 8001e0a:	6013      	str	r3, [r2, #0]
					}
					if(zpt==2&&buff[0]==','){
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_UART_RxCpltCallback+0x448>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d13b      	bne.n	8001e8c <HAL_UART_RxCpltCallback+0x4a0>
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <HAL_UART_RxCpltCallback+0x43c>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b2c      	cmp	r3, #44	; 0x2c
 8001e1a:	d137      	bne.n	8001e8c <HAL_UART_RxCpltCallback+0x4a0>
						gps.hours[0]=time_buff[0];
 8001e1c:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <HAL_UART_RxCpltCallback+0x450>)
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	e012      	b.n	8001e48 <HAL_UART_RxCpltCallback+0x45c>
 8001e22:	bf00      	nop
 8001e24:	20000524 	.word	0x20000524
 8001e28:	20000568 	.word	0x20000568
 8001e2c:	20000500 	.word	0x20000500
 8001e30:	200004fc 	.word	0x200004fc
 8001e34:	20000510 	.word	0x20000510
 8001e38:	2000051c 	.word	0x2000051c
 8001e3c:	20000558 	.word	0x20000558
 8001e40:	20004afc 	.word	0x20004afc
 8001e44:	2000056c 	.word	0x2000056c
 8001e48:	4b4d      	ldr	r3, [pc, #308]	; (8001f80 <HAL_UART_RxCpltCallback+0x594>)
 8001e4a:	72da      	strb	r2, [r3, #11]
						gps.hours[1]=time_buff[1];
 8001e4c:	4b4d      	ldr	r3, [pc, #308]	; (8001f84 <HAL_UART_RxCpltCallback+0x598>)
 8001e4e:	785a      	ldrb	r2, [r3, #1]
 8001e50:	4b4b      	ldr	r3, [pc, #300]	; (8001f80 <HAL_UART_RxCpltCallback+0x594>)
 8001e52:	731a      	strb	r2, [r3, #12]
						gps.minuttes[0]=time_buff[2];
 8001e54:	4b4b      	ldr	r3, [pc, #300]	; (8001f84 <HAL_UART_RxCpltCallback+0x598>)
 8001e56:	789a      	ldrb	r2, [r3, #2]
 8001e58:	4b49      	ldr	r3, [pc, #292]	; (8001f80 <HAL_UART_RxCpltCallback+0x594>)
 8001e5a:	739a      	strb	r2, [r3, #14]
						gps.minuttes[1]=time_buff[3];
 8001e5c:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <HAL_UART_RxCpltCallback+0x598>)
 8001e5e:	78da      	ldrb	r2, [r3, #3]
 8001e60:	4b47      	ldr	r3, [pc, #284]	; (8001f80 <HAL_UART_RxCpltCallback+0x594>)
 8001e62:	73da      	strb	r2, [r3, #15]
						gps.seconds[0]=time_buff[4];
 8001e64:	4b47      	ldr	r3, [pc, #284]	; (8001f84 <HAL_UART_RxCpltCallback+0x598>)
 8001e66:	791a      	ldrb	r2, [r3, #4]
 8001e68:	4b45      	ldr	r3, [pc, #276]	; (8001f80 <HAL_UART_RxCpltCallback+0x594>)
 8001e6a:	745a      	strb	r2, [r3, #17]
						gps.seconds[1]=time_buff[5];
 8001e6c:	4b45      	ldr	r3, [pc, #276]	; (8001f84 <HAL_UART_RxCpltCallback+0x598>)
 8001e6e:	795a      	ldrb	r2, [r3, #5]
 8001e70:	4b43      	ldr	r3, [pc, #268]	; (8001f80 <HAL_UART_RxCpltCallback+0x594>)
 8001e72:	749a      	strb	r2, [r3, #18]
						gps.seconds[2]=time_buff[6];
 8001e74:	4b43      	ldr	r3, [pc, #268]	; (8001f84 <HAL_UART_RxCpltCallback+0x598>)
 8001e76:	799a      	ldrb	r2, [r3, #6]
 8001e78:	4b41      	ldr	r3, [pc, #260]	; (8001f80 <HAL_UART_RxCpltCallback+0x594>)
 8001e7a:	74da      	strb	r2, [r3, #19]
						gps.seconds[3]=time_buff[7];
 8001e7c:	4b41      	ldr	r3, [pc, #260]	; (8001f84 <HAL_UART_RxCpltCallback+0x598>)
 8001e7e:	79da      	ldrb	r2, [r3, #7]
 8001e80:	4b3f      	ldr	r3, [pc, #252]	; (8001f80 <HAL_UART_RxCpltCallback+0x594>)
 8001e82:	751a      	strb	r2, [r3, #20]
						gps.seconds[4]=time_buff[8];
 8001e84:	4b3f      	ldr	r3, [pc, #252]	; (8001f84 <HAL_UART_RxCpltCallback+0x598>)
 8001e86:	7a1a      	ldrb	r2, [r3, #8]
 8001e88:	4b3d      	ldr	r3, [pc, #244]	; (8001f80 <HAL_UART_RxCpltCallback+0x594>)
 8001e8a:	755a      	strb	r2, [r3, #21]
					}
					if(zpt==2&&buff[0]!=','){
 8001e8c:	4b3e      	ldr	r3, [pc, #248]	; (8001f88 <HAL_UART_RxCpltCallback+0x59c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d10e      	bne.n	8001eb2 <HAL_UART_RxCpltCallback+0x4c6>
 8001e94:	4b3d      	ldr	r3, [pc, #244]	; (8001f8c <HAL_UART_RxCpltCallback+0x5a0>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b2c      	cmp	r3, #44	; 0x2c
 8001e9a:	d00a      	beq.n	8001eb2 <HAL_UART_RxCpltCallback+0x4c6>

						time_buff[ind]=buff[0];
 8001e9c:	4b3c      	ldr	r3, [pc, #240]	; (8001f90 <HAL_UART_RxCpltCallback+0x5a4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a3a      	ldr	r2, [pc, #232]	; (8001f8c <HAL_UART_RxCpltCallback+0x5a0>)
 8001ea2:	7811      	ldrb	r1, [r2, #0]
 8001ea4:	4a37      	ldr	r2, [pc, #220]	; (8001f84 <HAL_UART_RxCpltCallback+0x598>)
 8001ea6:	54d1      	strb	r1, [r2, r3]
						ind++;
 8001ea8:	4b39      	ldr	r3, [pc, #228]	; (8001f90 <HAL_UART_RxCpltCallback+0x5a4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	3301      	adds	r3, #1
 8001eae:	4a38      	ldr	r2, [pc, #224]	; (8001f90 <HAL_UART_RxCpltCallback+0x5a4>)
 8001eb0:	6013      	str	r3, [r2, #0]
					}
					if(zpt==3&&buff[0]==','){
 8001eb2:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <HAL_UART_RxCpltCallback+0x59c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d107      	bne.n	8001eca <HAL_UART_RxCpltCallback+0x4de>
 8001eba:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <HAL_UART_RxCpltCallback+0x5a0>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b2c      	cmp	r3, #44	; 0x2c
 8001ec0:	d103      	bne.n	8001eca <HAL_UART_RxCpltCallback+0x4de>
						gps.sinc[1]=time_buff[0];
 8001ec2:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <HAL_UART_RxCpltCallback+0x598>)
 8001ec4:	781a      	ldrb	r2, [r3, #0]
 8001ec6:	4b2e      	ldr	r3, [pc, #184]	; (8001f80 <HAL_UART_RxCpltCallback+0x594>)
 8001ec8:	769a      	strb	r2, [r3, #26]
					}

					if(zpt==9&&buff[0]!=','){
 8001eca:	4b2f      	ldr	r3, [pc, #188]	; (8001f88 <HAL_UART_RxCpltCallback+0x59c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b09      	cmp	r3, #9
 8001ed0:	d10e      	bne.n	8001ef0 <HAL_UART_RxCpltCallback+0x504>
 8001ed2:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <HAL_UART_RxCpltCallback+0x5a0>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b2c      	cmp	r3, #44	; 0x2c
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_UART_RxCpltCallback+0x504>

						time_buff[ind]=buff[0];
 8001eda:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <HAL_UART_RxCpltCallback+0x5a4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a2b      	ldr	r2, [pc, #172]	; (8001f8c <HAL_UART_RxCpltCallback+0x5a0>)
 8001ee0:	7811      	ldrb	r1, [r2, #0]
 8001ee2:	4a28      	ldr	r2, [pc, #160]	; (8001f84 <HAL_UART_RxCpltCallback+0x598>)
 8001ee4:	54d1      	strb	r1, [r2, r3]
						ind++;
 8001ee6:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <HAL_UART_RxCpltCallback+0x5a4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	3301      	adds	r3, #1
 8001eec:	4a28      	ldr	r2, [pc, #160]	; (8001f90 <HAL_UART_RxCpltCallback+0x5a4>)
 8001eee:	6013      	str	r3, [r2, #0]
					}
					if(zpt==10&&buff[0]==','){
 8001ef0:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <HAL_UART_RxCpltCallback+0x59c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b0a      	cmp	r3, #10
 8001ef6:	d123      	bne.n	8001f40 <HAL_UART_RxCpltCallback+0x554>
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <HAL_UART_RxCpltCallback+0x5a0>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b2c      	cmp	r3, #44	; 0x2c
 8001efe:	d11f      	bne.n	8001f40 <HAL_UART_RxCpltCallback+0x554>
						gps.day[0]=time_buff[0];
 8001f00:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <HAL_UART_RxCpltCallback+0x598>)
 8001f02:	781a      	ldrb	r2, [r3, #0]
 8001f04:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <HAL_UART_RxCpltCallback+0x594>)
 8001f06:	701a      	strb	r2, [r3, #0]
						gps.day[1]=time_buff[1];
 8001f08:	4b1e      	ldr	r3, [pc, #120]	; (8001f84 <HAL_UART_RxCpltCallback+0x598>)
 8001f0a:	785a      	ldrb	r2, [r3, #1]
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <HAL_UART_RxCpltCallback+0x594>)
 8001f0e:	705a      	strb	r2, [r3, #1]
						gps.month[0]=time_buff[2];
 8001f10:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <HAL_UART_RxCpltCallback+0x598>)
 8001f12:	789a      	ldrb	r2, [r3, #2]
 8001f14:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <HAL_UART_RxCpltCallback+0x594>)
 8001f16:	70da      	strb	r2, [r3, #3]
						gps.month[1]=time_buff[3];
 8001f18:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <HAL_UART_RxCpltCallback+0x598>)
 8001f1a:	78da      	ldrb	r2, [r3, #3]
 8001f1c:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <HAL_UART_RxCpltCallback+0x594>)
 8001f1e:	711a      	strb	r2, [r3, #4]
						gps.year[0]=time_buff[4];
 8001f20:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <HAL_UART_RxCpltCallback+0x598>)
 8001f22:	791a      	ldrb	r2, [r3, #4]
 8001f24:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <HAL_UART_RxCpltCallback+0x594>)
 8001f26:	719a      	strb	r2, [r3, #6]
						gps.year[1]=time_buff[5];
 8001f28:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <HAL_UART_RxCpltCallback+0x598>)
 8001f2a:	795a      	ldrb	r2, [r3, #5]
 8001f2c:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <HAL_UART_RxCpltCallback+0x594>)
 8001f2e:	71da      	strb	r2, [r3, #7]
						year_str[0]=time_buff[4];
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_UART_RxCpltCallback+0x598>)
 8001f32:	791a      	ldrb	r2, [r3, #4]
 8001f34:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <HAL_UART_RxCpltCallback+0x5a8>)
 8001f36:	701a      	strb	r2, [r3, #0]
						year_str[1]=time_buff[5];
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_UART_RxCpltCallback+0x598>)
 8001f3a:	795a      	ldrb	r2, [r3, #5]
 8001f3c:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <HAL_UART_RxCpltCallback+0x5a8>)
 8001f3e:	705a      	strb	r2, [r3, #1]
					}
				}

				//printf("buff=%c\tcount=%d\tzpt=%d\tind=%d\tTipe_Mes=%d\n\r",buff[0],count,zpt,ind,Tipe_Mes);
				//printf("crc_hx=%s\t crc=%d\t crc_buff=%s\t dec=%d\n\r",crc_hx,crc,crc_buff,dec);
				dataReceived=1;
 8001f40:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_UART_RxCpltCallback+0x5ac>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]

				if( dataTransmitted != 0 ) {
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <HAL_UART_RxCpltCallback+0x5b0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d005      	beq.n	8001f5a <HAL_UART_RxCpltCallback+0x56e>

					//HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);

					dataReceived=0;
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_UART_RxCpltCallback+0x5ac>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
					dataTransmitted=0;
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_UART_RxCpltCallback+0x5b0>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
				}

				HAL_UART_Receive_IT (&huart1, (uint8_t *)buff, 1);
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	490b      	ldr	r1, [pc, #44]	; (8001f8c <HAL_UART_RxCpltCallback+0x5a0>)
 8001f5e:	4810      	ldr	r0, [pc, #64]	; (8001fa0 <HAL_UART_RxCpltCallback+0x5b4>)
 8001f60:	f006 fcaf 	bl	80088c2 <HAL_UART_Receive_IT>
				gps.errors[1]=ERRORS;
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HAL_UART_RxCpltCallback+0x5b8>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <HAL_UART_RxCpltCallback+0x594>)
 8001f6c:	761a      	strb	r2, [r3, #24]
				count++;
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HAL_UART_RxCpltCallback+0x5bc>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	3301      	adds	r3, #1
 8001f74:	4a0c      	ldr	r2, [pc, #48]	; (8001fa8 <HAL_UART_RxCpltCallback+0x5bc>)
 8001f76:	6013      	str	r3, [r2, #0]
			}
		}
 8001f78:	bf00      	nop
 8001f7a:	3728      	adds	r7, #40	; 0x28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20004afc 	.word	0x20004afc
 8001f84:	20000558 	.word	0x20000558
 8001f88:	20000510 	.word	0x20000510
 8001f8c:	20000568 	.word	0x20000568
 8001f90:	2000051c 	.word	0x2000051c
 8001f94:	2000056c 	.word	0x2000056c
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	20000004 	.word	0x20000004
 8001fa0:	20004c98 	.word	0x20004c98
 8001fa4:	200004fc 	.word	0x200004fc
 8001fa8:	20000524 	.word	0x20000524

08001fac <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

//	//if(huart == &huart6) {

		dataTransmitted=1;
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_UART_TxCpltCallback+0x30>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

		if( dataReceived != 0 ) {
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <HAL_UART_TxCpltCallback+0x34>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_UART_TxCpltCallback+0x22>
			//HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);
			dataReceived=0;
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_UART_TxCpltCallback+0x34>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
			dataTransmitted=0;
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <HAL_UART_TxCpltCallback+0x30>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
		}
	//}
}char Hex_to_dec(char hex[2]){
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000004 	.word	0x20000004
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	00000000 	.word	0x00000000

08001fe8 <Hex_to_dec>:
 8001fe8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
    int i;
    int dig; /*to store digit*/
    int cont = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
    dec = 0;
 8001ff6:	4b3e      	ldr	r3, [pc, #248]	; (80020f0 <Hex_to_dec+0x108>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
    for (i = (strlen(hex) - 1); i >= 0; i--) {
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7fe f8f1 	bl	80001e4 <strlen>
 8002002:	4603      	mov	r3, r0
 8002004:	3b01      	subs	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	e060      	b.n	80020cc <Hex_to_dec+0xe4>
        switch (hex[i]) {
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	3b41      	subs	r3, #65	; 0x41
 8002014:	2b05      	cmp	r3, #5
 8002016:	d821      	bhi.n	800205c <Hex_to_dec+0x74>
 8002018:	a201      	add	r2, pc, #4	; (adr r2, 8002020 <Hex_to_dec+0x38>)
 800201a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201e:	bf00      	nop
 8002020:	08002039 	.word	0x08002039
 8002024:	0800203f 	.word	0x0800203f
 8002028:	08002045 	.word	0x08002045
 800202c:	0800204b 	.word	0x0800204b
 8002030:	08002051 	.word	0x08002051
 8002034:	08002057 	.word	0x08002057
        case 'A':
            dig = 10;
 8002038:	230a      	movs	r3, #10
 800203a:	613b      	str	r3, [r7, #16]
            break;
 800203c:	e014      	b.n	8002068 <Hex_to_dec+0x80>
        case 'B':
            dig = 11;
 800203e:	230b      	movs	r3, #11
 8002040:	613b      	str	r3, [r7, #16]
            break;
 8002042:	e011      	b.n	8002068 <Hex_to_dec+0x80>
        case 'C':
            dig = 12;
 8002044:	230c      	movs	r3, #12
 8002046:	613b      	str	r3, [r7, #16]
            break;
 8002048:	e00e      	b.n	8002068 <Hex_to_dec+0x80>
        case 'D':
            dig = 13;
 800204a:	230d      	movs	r3, #13
 800204c:	613b      	str	r3, [r7, #16]
            break;
 800204e:	e00b      	b.n	8002068 <Hex_to_dec+0x80>
        case 'E':
            dig = 14;
 8002050:	230e      	movs	r3, #14
 8002052:	613b      	str	r3, [r7, #16]
            break;
 8002054:	e008      	b.n	8002068 <Hex_to_dec+0x80>
        case 'F':
            dig = 15;
 8002056:	230f      	movs	r3, #15
 8002058:	613b      	str	r3, [r7, #16]
            break;
 800205a:	e005      	b.n	8002068 <Hex_to_dec+0x80>
        default:
            dig = hex[i] - 0x30;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	3b30      	subs	r3, #48	; 0x30
 8002066:	613b      	str	r3, [r7, #16]
        }
        dec = dec + (dig)*pow((double)16, (double)cont);
 8002068:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <Hex_to_dec+0x108>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fa69 	bl	8000544 <__aeabi_i2d>
 8002072:	4604      	mov	r4, r0
 8002074:	460d      	mov	r5, r1
 8002076:	6938      	ldr	r0, [r7, #16]
 8002078:	f7fe fa64 	bl	8000544 <__aeabi_i2d>
 800207c:	4680      	mov	r8, r0
 800207e:	4689      	mov	r9, r1
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f7fe fa5f 	bl	8000544 <__aeabi_i2d>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	ec43 2b11 	vmov	d1, r2, r3
 800208e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80020e8 <Hex_to_dec+0x100>
 8002092:	f01f fd7d 	bl	8021b90 <pow>
 8002096:	ec53 2b10 	vmov	r2, r3, d0
 800209a:	4640      	mov	r0, r8
 800209c:	4649      	mov	r1, r9
 800209e:	f7fe fabb 	bl	8000618 <__aeabi_dmul>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4620      	mov	r0, r4
 80020a8:	4629      	mov	r1, r5
 80020aa:	f7fe f8ff 	bl	80002ac <__adddf3>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7fe fd5f 	bl	8000b78 <__aeabi_d2iz>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <Hex_to_dec+0x108>)
 80020be:	6013      	str	r3, [r2, #0]
        cont++;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	3301      	adds	r3, #1
 80020c4:	60fb      	str	r3, [r7, #12]
    for (i = (strlen(hex) - 1); i >= 0; i--) {
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	da9b      	bge.n	800200a <Hex_to_dec+0x22>
    }
    return dec;
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <Hex_to_dec+0x108>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	b2db      	uxtb	r3, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020e2:	bf00      	nop
 80020e4:	f3af 8000 	nop.w
 80020e8:	00000000 	.word	0x00000000
 80020ec:	40300000 	.word	0x40300000
 80020f0:	20004cdc 	.word	0x20004cdc

080020f4 <calc_crc>:
char calc_crc(char c,int cnt){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	6039      	str	r1, [r7, #0]
 80020fe:	71fb      	strb	r3, [r7, #7]
	if (c=='*'){
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	2b2a      	cmp	r3, #42	; 0x2a
 8002104:	d108      	bne.n	8002118 <calc_crc+0x24>
		start_crc=0;
 8002106:	4b23      	ldr	r3, [pc, #140]	; (8002194 <calc_crc+0xa0>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
		crc_pars=1;
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <calc_crc+0xa4>)
 800210e:	2201      	movs	r2, #1
 8002110:	601a      	str	r2, [r3, #0]
		z=0;
 8002112:	4b22      	ldr	r3, [pc, #136]	; (800219c <calc_crc+0xa8>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
	}
	if(start_crc==1){
 8002118:	4b1e      	ldr	r3, [pc, #120]	; (8002194 <calc_crc+0xa0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d105      	bne.n	800212c <calc_crc+0x38>
		crc^=c;
 8002120:	79fa      	ldrb	r2, [r7, #7]
 8002122:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <calc_crc+0xac>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4053      	eors	r3, r2
 8002128:	4a1d      	ldr	r2, [pc, #116]	; (80021a0 <calc_crc+0xac>)
 800212a:	6013      	str	r3, [r2, #0]
	}
	if(crc_pars==1&&c!='*'&&z<=1){
 800212c:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <calc_crc+0xa4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d110      	bne.n	8002156 <calc_crc+0x62>
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	2b2a      	cmp	r3, #42	; 0x2a
 8002138:	d00d      	beq.n	8002156 <calc_crc+0x62>
 800213a:	4b18      	ldr	r3, [pc, #96]	; (800219c <calc_crc+0xa8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b01      	cmp	r3, #1
 8002140:	dc09      	bgt.n	8002156 <calc_crc+0x62>
		crc_buff[z]=c;
 8002142:	4b16      	ldr	r3, [pc, #88]	; (800219c <calc_crc+0xa8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4917      	ldr	r1, [pc, #92]	; (80021a4 <calc_crc+0xb0>)
 8002148:	79fa      	ldrb	r2, [r7, #7]
 800214a:	54ca      	strb	r2, [r1, r3]
		z++;
 800214c:	4b13      	ldr	r3, [pc, #76]	; (800219c <calc_crc+0xa8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	3301      	adds	r3, #1
 8002152:	4a12      	ldr	r2, [pc, #72]	; (800219c <calc_crc+0xa8>)
 8002154:	6013      	str	r3, [r2, #0]
	}
	if(c=='\n'){
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	2b0a      	cmp	r3, #10
 800215a:	d10a      	bne.n	8002172 <calc_crc+0x7e>
		Hex_to_dec(crc_buff);
 800215c:	4811      	ldr	r0, [pc, #68]	; (80021a4 <calc_crc+0xb0>)
 800215e:	f7ff ff43 	bl	8001fe8 <Hex_to_dec>
		if(crc==dec){
 8002162:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <calc_crc+0xac>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <calc_crc+0xb4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d101      	bne.n	8002172 <calc_crc+0x7e>
			//Test++;
			return 1;
 800216e:	2301      	movs	r3, #1
 8002170:	e00c      	b.n	800218c <calc_crc+0x98>
		}
	}
	if(cnt==0){
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d108      	bne.n	800218a <calc_crc+0x96>
		start_crc=1;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <calc_crc+0xa0>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]
		crc_pars=0;
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <calc_crc+0xa4>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
		crc=0;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <calc_crc+0xac>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
	}
//	printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
	return 0;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000514 	.word	0x20000514
 8002198:	20000554 	.word	0x20000554
 800219c:	20000518 	.word	0x20000518
 80021a0:	20000520 	.word	0x20000520
 80021a4:	20000564 	.word	0x20000564
 80021a8:	20004cdc 	.word	0x20004cdc

080021ac <rtc_read>:
time_t rtc_read(void) {
 80021ac:	b5b0      	push	{r4, r5, r7, lr}
 80021ae:	b092      	sub	sp, #72	; 0x48
 80021b0:	af00      	add	r7, sp, #0
	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	struct tm timeinfo;

	hrtc.Instance = RTC;
 80021b2:	4b1f      	ldr	r3, [pc, #124]	; (8002230 <rtc_read+0x84>)
 80021b4:	4a1f      	ldr	r2, [pc, #124]	; (8002234 <rtc_read+0x88>)
 80021b6:	601a      	str	r2, [r3, #0]

	// Read actual date and time
	HAL_RTC_GetTime(&hrtc, &timeStruct, FORMAT_BIN); // Read time first!
 80021b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021bc:	2200      	movs	r2, #0
 80021be:	4619      	mov	r1, r3
 80021c0:	481b      	ldr	r0, [pc, #108]	; (8002230 <rtc_read+0x84>)
 80021c2:	f005 fbb1 	bl	8007928 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &dateStruct, FORMAT_BIN);
 80021c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021ca:	2200      	movs	r2, #0
 80021cc:	4619      	mov	r1, r3
 80021ce:	4818      	ldr	r0, [pc, #96]	; (8002230 <rtc_read+0x84>)
 80021d0:	f005 fcaf 	bl	8007b32 <HAL_RTC_GetDate>

	// Setup a tm structure based on the RTC
	// monday==1 sunday==7
	timeinfo.tm_wday = dateStruct.WeekDay;
 80021d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80021d8:	61fb      	str	r3, [r7, #28]
	timeinfo.tm_mon = dateStruct.Month;//-1 do January==0 month
 80021da:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80021de:	617b      	str	r3, [r7, #20]
	timeinfo.tm_mday = dateStruct.Date;
 80021e0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80021e4:	613b      	str	r3, [r7, #16]
	timeinfo.tm_year = dateStruct.Year + 100;
 80021e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80021ea:	3364      	adds	r3, #100	; 0x64
 80021ec:	61bb      	str	r3, [r7, #24]
	timeinfo.tm_hour = timeStruct.Hours;
 80021ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80021f2:	60fb      	str	r3, [r7, #12]
	timeinfo.tm_min = timeStruct.Minutes;
 80021f4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80021f8:	60bb      	str	r3, [r7, #8]
	timeinfo.tm_sec = timeStruct.Seconds;
 80021fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80021fe:	607b      	str	r3, [r7, #4]
	//printf("tm_wday=%d\t\n",timeinfo.tm_wday);

	// Convert to timestamp
	time_t t = mktime(&timeinfo)+offset_unix[user_info.zone];
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	4618      	mov	r0, r3
 8002204:	f01d f8b6 	bl	801f374 <mktime>
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <rtc_read+0x8c>)
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	4a0b      	ldr	r2, [pc, #44]	; (800223c <rtc_read+0x90>)
 800220e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002212:	461a      	mov	r2, r3
 8002214:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002218:	1884      	adds	r4, r0, r2
 800221a:	eb41 0503 	adc.w	r5, r1, r3
 800221e:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40


	return t;
 8002222:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
}
 8002226:	4610      	mov	r0, r2
 8002228:	4619      	mov	r1, r3
 800222a:	3748      	adds	r7, #72	; 0x48
 800222c:	46bd      	mov	sp, r7
 800222e:	bdb0      	pop	{r4, r5, r7, pc}
 8002230:	20004ce4 	.word	0x20004ce4
 8002234:	40002800 	.word	0x40002800
 8002238:	20004b18 	.word	0x20004b18
 800223c:	0802662c 	.word	0x0802662c

08002240 <tcpecho_init>:

void tcpecho_init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af02      	add	r7, sp, #8
	sys_thread_new("tcpecho_thread", tcpecho_thread, NULL,DEFAULT_THREAD_STACKSIZE, 1);
 8002246:	2301      	movs	r3, #1
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800224e:	2200      	movs	r2, #0
 8002250:	4903      	ldr	r1, [pc, #12]	; (8002260 <tcpecho_init+0x20>)
 8002252:	4804      	ldr	r0, [pc, #16]	; (8002264 <tcpecho_init+0x24>)
 8002254:	f01c f914 	bl	801e480 <sys_thread_new>
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	080022f9 	.word	0x080022f9
 8002264:	08022c2c 	.word	0x08022c2c

08002268 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002268:	b590      	push	{r4, r7, lr}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8002270:	f008 fdb6 	bl	800ade0 <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002274:	f01c f948 	bl	801e508 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  httpd_init();
 8002278:	f010 fdde 	bl	8012e38 <httpd_init>
  tcpecho_init();
 800227c:	f7ff ffe0 	bl	8002240 <tcpecho_init>
  memset(&user_info,0,sizeof(user_info));
 8002280:	f44f 7292 	mov.w	r2, #292	; 0x124
 8002284:	2100      	movs	r1, #0
 8002286:	4816      	ldr	r0, [pc, #88]	; (80022e0 <StartDefaultTask+0x78>)
 8002288:	f01c ff94 	bl	801f1b4 <memset>
  strncpy(user_info.ip,"192.168.0.68",13);
 800228c:	4a14      	ldr	r2, [pc, #80]	; (80022e0 <StartDefaultTask+0x78>)
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <StartDefaultTask+0x7c>)
 8002290:	4614      	mov	r4, r2
 8002292:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002294:	c407      	stmia	r4!, {r0, r1, r2}
 8002296:	7023      	strb	r3, [r4, #0]
  strncpy(user_info.netmask,"255.255.255.0",14);
 8002298:	4a13      	ldr	r2, [pc, #76]	; (80022e8 <StartDefaultTask+0x80>)
 800229a:	4b14      	ldr	r3, [pc, #80]	; (80022ec <StartDefaultTask+0x84>)
 800229c:	4614      	mov	r4, r2
 800229e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80022a0:	6020      	str	r0, [r4, #0]
 80022a2:	6061      	str	r1, [r4, #4]
 80022a4:	60a2      	str	r2, [r4, #8]
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	81a3      	strh	r3, [r4, #12]
  //user_info.zone=12;

  	  ip4_addr_t add;
  	  inet_aton(user_info.ip, &add);
 80022aa:	f107 030c 	add.w	r3, r7, #12
 80022ae:	4619      	mov	r1, r3
 80022b0:	480b      	ldr	r0, [pc, #44]	; (80022e0 <StartDefaultTask+0x78>)
 80022b2:	f01a ff0f 	bl	801d0d4 <ip4addr_aton>
  	  setIP(add.addr);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f008 fd6d 	bl	800ad98 <setIP>

  	ip4_addr_t mask;
  	inet_aton(user_info.netmask, &mask);
 80022be:	f107 0308 	add.w	r3, r7, #8
 80022c2:	4619      	mov	r1, r3
 80022c4:	4808      	ldr	r0, [pc, #32]	; (80022e8 <StartDefaultTask+0x80>)
 80022c6:	f01a ff05 	bl	801d0d4 <ip4addr_aton>
  	setNetmask(mask.addr);
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f008 fd75 	bl	800adbc <setNetmask>

  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Receive_IT (&huart1, (uint8_t*)&buff, 1);
 80022d2:	2201      	movs	r2, #1
 80022d4:	4906      	ldr	r1, [pc, #24]	; (80022f0 <StartDefaultTask+0x88>)
 80022d6:	4807      	ldr	r0, [pc, #28]	; (80022f4 <StartDefaultTask+0x8c>)
 80022d8:	f006 faf3 	bl	80088c2 <HAL_UART_Receive_IT>
 80022dc:	e7f9      	b.n	80022d2 <StartDefaultTask+0x6a>
 80022de:	bf00      	nop
 80022e0:	20004b18 	.word	0x20004b18
 80022e4:	08022c3c 	.word	0x08022c3c
 80022e8:	20004c2b 	.word	0x20004c2b
 80022ec:	08022c4c 	.word	0x08022c4c
 80022f0:	20000568 	.word	0x20000568
 80022f4:	20004c98 	.word	0x20004c98

080022f8 <tcpecho_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tcpecho_thread */
void tcpecho_thread(void const * argument)
{
 80022f8:	b590      	push	{r4, r7, lr}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
			//struct tm tm_;
			//uint32_t tm_ms_;


			/* Create a new connection identifier. */
			conn = netconn_new(NETCONN_UDP);
 8002300:	2200      	movs	r2, #0
 8002302:	2100      	movs	r1, #0
 8002304:	2020      	movs	r0, #32
 8002306:	f00d fde7 	bl	800fed8 <netconn_new_with_proto_and_callback>
 800230a:	61f8      	str	r0, [r7, #28]
			if (conn!=NULL)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 80b1 	beq.w	8002476 <tcpecho_thread+0x17e>
			{
				/* Bind connection to well known port number 7. */
				err = netconn_bind(conn, NULL, 123);
 8002314:	227b      	movs	r2, #123	; 0x7b
 8002316:	2100      	movs	r1, #0
 8002318:	69f8      	ldr	r0, [r7, #28]
 800231a:	f00d fe97 	bl	801004c <netconn_bind>
 800231e:	4603      	mov	r3, r0
 8002320:	76fb      	strb	r3, [r7, #27]
				if (err == ERR_OK)
 8002322:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 80a2 	bne.w	8002470 <tcpecho_thread+0x178>
				{
					while (1)
					{
						while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 800232c:	e08d      	b.n	800244a <tcpecho_thread+0x152>
						{
							do
							{
								netbuf_data(buf, (void **)&ntp_packet_ptr, &buf_data_len);
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f107 0212 	add.w	r2, r7, #18
 8002334:	f107 010c 	add.w	r1, r7, #12
 8002338:	4618      	mov	r0, r3
 800233a:	f00f fb8d 	bl	8011a58 <netbuf_data>

								if(buf_data_len < 48 || buf_data_len > 2048)
 800233e:	8a7b      	ldrh	r3, [r7, #18]
 8002340:	2b2f      	cmp	r3, #47	; 0x2f
 8002342:	d903      	bls.n	800234c <tcpecho_thread+0x54>
 8002344:	8a7b      	ldrh	r3, [r7, #18]
 8002346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800234a:	d904      	bls.n	8002356 <tcpecho_thread+0x5e>
								{
									netbuf_delete(buf);
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	4618      	mov	r0, r3
 8002350:	f00f fb62 	bl	8011a18 <netbuf_delete>
									continue;
 8002354:	e06d      	b.n	8002432 <tcpecho_thread+0x13a>
								}
								ntp_packet_ptr->li_vn_mode = (0 << 6) | (4 << 3) | (4); // Leap Warning: None, Version: NTPv4, Mode: 4 - Server
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2224      	movs	r2, #36	; 0x24
 800235a:	701a      	strb	r2, [r3, #0]
								ntp_packet_ptr->stratum = ntpd_status.stratum;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4a48      	ldr	r2, [pc, #288]	; (8002480 <tcpecho_thread+0x188>)
 8002360:	7a12      	ldrb	r2, [r2, #8]
 8002362:	705a      	strb	r2, [r3, #1]
								ntp_packet_ptr->poll = 5; // 32s
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2205      	movs	r2, #5
 8002368:	709a      	strb	r2, [r3, #2]
								ntp_packet_ptr->precision = -10; // ~1ms
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	22f6      	movs	r2, #246	; 0xf6
 800236e:	70da      	strb	r2, [r3, #3]

								ntp_packet_ptr->rootDelay = 0; // Delay from GPS clock is ~zero
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	605a      	str	r2, [r3, #4]
								ntp_packet_ptr->rootDispersion_s = 0;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	811a      	strh	r2, [r3, #8]
								ntp_packet_ptr->rootDispersion_f = htonl(NTP_MS_TO_FS_U16 * 1.0); // 1ms
 800237c:	2041      	movs	r0, #65	; 0x41
 800237e:	f010 fd90 	bl	8012ea2 <lwip_htonl>
 8002382:	4602      	mov	r2, r0
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	b292      	uxth	r2, r2
 8002388:	815a      	strh	r2, [r3, #10]
								ntp_packet_ptr->refId = ('G') | ('P' << 8) | ('S' << 16) | ('\0' << 24);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4a3d      	ldr	r2, [pc, #244]	; (8002484 <tcpecho_thread+0x18c>)
 800238e:	60da      	str	r2, [r3, #12]
								/* Move client's transmit timestamp into origin fields */
								ntp_packet_ptr->origTm_s = ntp_packet_ptr->txTm_s;
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002396:	619a      	str	r2, [r3, #24]
								ntp_packet_ptr->origTm_f = ntp_packet_ptr->txTm_f;
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800239e:	61da      	str	r2, [r3, #28]

								ntp_packet_ptr->refTm_s = time_ref_s;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4a39      	ldr	r2, [pc, #228]	; (8002488 <tcpecho_thread+0x190>)
 80023a4:	6812      	ldr	r2, [r2, #0]
 80023a6:	611a      	str	r2, [r3, #16]
								ntp_packet_ptr->refTm_f = time_ref_f;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4a38      	ldr	r2, [pc, #224]	; (800248c <tcpecho_thread+0x194>)
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	615a      	str	r2, [r3, #20]

								//rtcGetTime(&RTCD1, &ntpd_datetime);
								//rtcConvertDateTimeToStructTm(&ntpd_datetime, &tm_, &tm_ms_);

								ntp_packet_ptr->rxTm_s = htonl(rtc_read()- DIFF_SEC_1970_2036);//htonl(mktime(&tm_) - DIFF_SEC_1970_2036);
 80023b0:	f7ff fefc 	bl	80021ac <rtc_read>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4b35      	ldr	r3, [pc, #212]	; (8002490 <tcpecho_thread+0x198>)
 80023ba:	4413      	add	r3, r2
 80023bc:	68fc      	ldr	r4, [r7, #12]
 80023be:	4618      	mov	r0, r3
 80023c0:	f010 fd6f 	bl	8012ea2 <lwip_htonl>
 80023c4:	4603      	mov	r3, r0
 80023c6:	6223      	str	r3, [r4, #32]
								ntp_packet_ptr->rxTm_f = htonl((time_t)(((float)TIM2->CNT)/((float)TIM2->ARR)*4294967296.0));//htonl((NTP_MS_TO_FS_U32 * tm_ms_));
 80023c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	ee07 3a90 	vmov	s15, r3
 80023d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	ee07 3a90 	vmov	s15, r3
 80023e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023e8:	ee16 0a90 	vmov	r0, s13
 80023ec:	f7fe f8bc 	bl	8000568 <__aeabi_f2d>
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	4b27      	ldr	r3, [pc, #156]	; (8002494 <tcpecho_thread+0x19c>)
 80023f6:	f7fe f90f 	bl	8000618 <__aeabi_dmul>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4610      	mov	r0, r2
 8002400:	4619      	mov	r1, r3
 8002402:	f7fe fc49 	bl	8000c98 <__aeabi_d2lz>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4613      	mov	r3, r2
 800240c:	68fc      	ldr	r4, [r7, #12]
 800240e:	4618      	mov	r0, r3
 8002410:	f010 fd47 	bl	8012ea2 <lwip_htonl>
 8002414:	4603      	mov	r3, r0
 8002416:	6263      	str	r3, [r4, #36]	; 0x24

								/* Copy into transmit timestamp fields */
								ntp_packet_ptr->txTm_s = ntp_packet_ptr->rxTm_s;
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a12      	ldr	r2, [r2, #32]
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
								ntp_packet_ptr->txTm_f = ntp_packet_ptr->rxTm_f;
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002426:	62da      	str	r2, [r3, #44]	; 0x2c

								netconn_send(conn, buf);
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	4619      	mov	r1, r3
 800242c:	69f8      	ldr	r0, [r7, #28]
 800242e:	f00e f83b 	bl	80104a8 <netconn_send>
							}
							while (netbuf_next(buf) >= 0);
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	4618      	mov	r0, r3
 8002436:	f00f fb59 	bl	8011aec <netbuf_next>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	f6bf af76 	bge.w	800232e <tcpecho_thread+0x36>

							netbuf_delete(buf);
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	4618      	mov	r0, r3
 8002446:	f00f fae7 	bl	8011a18 <netbuf_delete>
						while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 800244a:	f107 0314 	add.w	r3, r7, #20
 800244e:	4619      	mov	r1, r3
 8002450:	69f8      	ldr	r0, [r7, #28]
 8002452:	f00d ffaf 	bl	80103b4 <netconn_recv>
 8002456:	4603      	mov	r3, r0
 8002458:	76bb      	strb	r3, [r7, #26]
 800245a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f43f af65 	beq.w	800232e <tcpecho_thread+0x36>
						}
						/* Close connection and discard connection identifier. */
						//netconn_close(newconn);
						//netconn_delete(newconn);
						ntpd_status.requests_count++;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <tcpecho_thread+0x188>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	3301      	adds	r3, #1
 800246a:	4a05      	ldr	r2, [pc, #20]	; (8002480 <tcpecho_thread+0x188>)
 800246c:	6053      	str	r3, [r2, #4]
						while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 800246e:	e7ec      	b.n	800244a <tcpecho_thread+0x152>
					}
				}
				else
				{
					netconn_delete(conn);
 8002470:	69f8      	ldr	r0, [r7, #28]
 8002472:	f00d fdcf 	bl	8010014 <netconn_delete>
				}
			}
  /* USER CODE END tcpecho_thread */
}
 8002476:	bf00      	nop
 8002478:	3724      	adds	r7, #36	; 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd90      	pop	{r4, r7, pc}
 800247e:	bf00      	nop
 8002480:	2000000c 	.word	0x2000000c
 8002484:	00535047 	.word	0x00535047
 8002488:	20004d94 	.word	0x20004d94
 800248c:	20004d04 	.word	0x20004d04
 8002490:	83aa7e80 	.word	0x83aa7e80
 8002494:	41f00000 	.word	0x41f00000

08002498 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80024aa:	f001 fb73 	bl	8003b94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40010000 	.word	0x40010000

080024bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024c0:	b672      	cpsid	i
}
 80024c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024c4:	e7fe      	b.n	80024c4 <Error_Handler+0x8>
	...

080024c8 <fs_open_custom>:
#define JSON_SIZE 1608
struct tm WebPageTime;
int fs_read_custom(struct fs_file *file, char *buffer, int count){
	return 0;
}
int fs_open_custom(struct fs_file *file, const char *name){
 80024c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024cc:	f2ad 6dec 	subw	sp, sp, #1772	; 0x6ec
 80024d0:	af04      	add	r7, sp, #16
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	6018      	str	r0, [r3, #0]
 80024d6:	463b      	mov	r3, r7
 80024d8:	6019      	str	r1, [r3, #0]
	char generated_html[JSON_SIZE];
	memset(generated_html, 0, JSON_SIZE);
 80024da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024de:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 80024e2:	2100      	movs	r1, #0
 80024e4:	4618      	mov	r0, r3
 80024e6:	f01c fe65 	bl	801f1b4 <memset>
	u16_t offset = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8a7 36d6 	strh.w	r3, [r7, #1750]	; 0x6d6

	if (!strcmp(name, "/info.json")) {
 80024f0:	463b      	mov	r3, r7
 80024f2:	49a4      	ldr	r1, [pc, #656]	; (8002784 <fs_open_custom+0x2bc>)
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	f7fd fe6b 	bl	80001d0 <strcmp>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d14a      	bne.n	8002596 <fs_open_custom+0xce>

		char* ip=user_info.ip;
 8002500:	4ba1      	ldr	r3, [pc, #644]	; (8002788 <fs_open_custom+0x2c0>)
 8002502:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
		int zone=user_info.zone;
 8002506:	4ba0      	ldr	r3, [pc, #640]	; (8002788 <fs_open_custom+0x2c0>)
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
		char* contacts=user_info.contacts;
 800250e:	4b9f      	ldr	r3, [pc, #636]	; (800278c <fs_open_custom+0x2c4>)
 8002510:	f8c7 36b0 	str.w	r3, [r7, #1712]	; 0x6b0
		char* netmask=user_info.netmask;
 8002514:	4b9e      	ldr	r3, [pc, #632]	; (8002790 <fs_open_custom+0x2c8>)
 8002516:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
		char macstr[18]; //string to be displayed on web page
		sprintf (macstr, "%02X:%02X:%02X:%02X:%02X:%02X", getMAC(0), getMAC(1), getMAC(2), getMAC(3), getMAC(4), getMAC(5) );
 800251a:	2000      	movs	r0, #0
 800251c:	f008 fc2a 	bl	800ad74 <getMAC>
 8002520:	4603      	mov	r3, r0
 8002522:	4698      	mov	r8, r3
 8002524:	2001      	movs	r0, #1
 8002526:	f008 fc25 	bl	800ad74 <getMAC>
 800252a:	4603      	mov	r3, r0
 800252c:	4699      	mov	r9, r3
 800252e:	2002      	movs	r0, #2
 8002530:	f008 fc20 	bl	800ad74 <getMAC>
 8002534:	4603      	mov	r3, r0
 8002536:	461c      	mov	r4, r3
 8002538:	2003      	movs	r0, #3
 800253a:	f008 fc1b 	bl	800ad74 <getMAC>
 800253e:	4603      	mov	r3, r0
 8002540:	461d      	mov	r5, r3
 8002542:	2004      	movs	r0, #4
 8002544:	f008 fc16 	bl	800ad74 <getMAC>
 8002548:	4603      	mov	r3, r0
 800254a:	461e      	mov	r6, r3
 800254c:	2005      	movs	r0, #5
 800254e:	f008 fc11 	bl	800ad74 <getMAC>
 8002552:	4603      	mov	r3, r0
 8002554:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002558:	9303      	str	r3, [sp, #12]
 800255a:	9602      	str	r6, [sp, #8]
 800255c:	9501      	str	r5, [sp, #4]
 800255e:	9400      	str	r4, [sp, #0]
 8002560:	464b      	mov	r3, r9
 8002562:	4642      	mov	r2, r8
 8002564:	498b      	ldr	r1, [pc, #556]	; (8002794 <fs_open_custom+0x2cc>)
 8002566:	f01d f937 	bl	801f7d8 <siprintf>

			offset = sprintf(generated_html,"[{\"IPaddress\":\"%s\",\"NetMask\":\"%s\",\"Timezone\":\"%d\",\"contacts\":\"%s\",\"software_version\":\"0.00001\",\"mac\":\"%s\"}]",ip,netmask,zone,contacts,macstr);
 800256a:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800256e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002572:	9302      	str	r3, [sp, #8]
 8002574:	f8d7 36b0 	ldr.w	r3, [r7, #1712]	; 0x6b0
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	; 0x6b4
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	f8d7 36ac 	ldr.w	r3, [r7, #1708]	; 0x6ac
 8002584:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 8002588:	4983      	ldr	r1, [pc, #524]	; (8002798 <fs_open_custom+0x2d0>)
 800258a:	f01d f925 	bl	801f7d8 <siprintf>
 800258e:	4603      	mov	r3, r0
 8002590:	f8a7 36d6 	strh.w	r3, [r7, #1750]	; 0x6d6
 8002594:	e0b0      	b.n	80026f8 <fs_open_custom+0x230>
	}
	else if (!strcmp(name, "/uptime.json")) {
 8002596:	463b      	mov	r3, r7
 8002598:	4980      	ldr	r1, [pc, #512]	; (800279c <fs_open_custom+0x2d4>)
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	f7fd fe18 	bl	80001d0 <strcmp>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f040 80a8 	bne.w	80026f8 <fs_open_custom+0x230>
		RTC_DateTypeDef dateStruct;
		RTC_TimeTypeDef timeStruct;

		//hrtc.Instance = RTC;
		if (gps.year[0]!='V'&&PPS_count>12){//gps.year[0]!='V'&&PPS_count>12
 80025a8:	4b7d      	ldr	r3, [pc, #500]	; (80027a0 <fs_open_custom+0x2d8>)
 80025aa:	799b      	ldrb	r3, [r3, #6]
 80025ac:	2b56      	cmp	r3, #86	; 0x56
 80025ae:	f000 8092 	beq.w	80026d6 <fs_open_custom+0x20e>
 80025b2:	4b7c      	ldr	r3, [pc, #496]	; (80027a4 <fs_open_custom+0x2dc>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b0c      	cmp	r3, #12
 80025b8:	f340 808d 	ble.w	80026d6 <fs_open_custom+0x20e>
			// Read actual date and time
			HAL_RTC_GetTime(&hrtc, &timeStruct, FORMAT_BIN); // Read time first!
 80025bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025c0:	2200      	movs	r2, #0
 80025c2:	4619      	mov	r1, r3
 80025c4:	4878      	ldr	r0, [pc, #480]	; (80027a8 <fs_open_custom+0x2e0>)
 80025c6:	f005 f9af 	bl	8007928 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &dateStruct, FORMAT_BIN);
 80025ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025ce:	2200      	movs	r2, #0
 80025d0:	4619      	mov	r1, r3
 80025d2:	4875      	ldr	r0, [pc, #468]	; (80027a8 <fs_open_custom+0x2e0>)
 80025d4:	f005 faad 	bl	8007b32 <HAL_RTC_GetDate>

			struct tm timeinfo;

			timeinfo.tm_wday = dateStruct.WeekDay;
 80025d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	f107 030c 	add.w	r3, r7, #12
 80025e4:	619a      	str	r2, [r3, #24]
			timeinfo.tm_mon = dateStruct.Month;//-1 do January==0 month
 80025e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025ea:	785b      	ldrb	r3, [r3, #1]
 80025ec:	461a      	mov	r2, r3
 80025ee:	f107 030c 	add.w	r3, r7, #12
 80025f2:	611a      	str	r2, [r3, #16]
			timeinfo.tm_mday = dateStruct.Date;
 80025f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025f8:	789b      	ldrb	r3, [r3, #2]
 80025fa:	461a      	mov	r2, r3
 80025fc:	f107 030c 	add.w	r3, r7, #12
 8002600:	60da      	str	r2, [r3, #12]
			timeinfo.tm_year = dateStruct.Year;
 8002602:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002606:	78db      	ldrb	r3, [r3, #3]
 8002608:	461a      	mov	r2, r3
 800260a:	f107 030c 	add.w	r3, r7, #12
 800260e:	615a      	str	r2, [r3, #20]
			timeinfo.tm_hour = timeStruct.Hours;
 8002610:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	f107 030c 	add.w	r3, r7, #12
 800261c:	609a      	str	r2, [r3, #8]
			timeinfo.tm_min = timeStruct.Minutes;
 800261e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002622:	785b      	ldrb	r3, [r3, #1]
 8002624:	461a      	mov	r2, r3
 8002626:	f107 030c 	add.w	r3, r7, #12
 800262a:	605a      	str	r2, [r3, #4]
			timeinfo.tm_sec = timeStruct.Seconds;
 800262c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002630:	789b      	ldrb	r3, [r3, #2]
 8002632:	461a      	mov	r2, r3
 8002634:	f107 030c 	add.w	r3, r7, #12
 8002638:	601a      	str	r2, [r3, #0]

			time_t t = mktime(&timeinfo)+offset_unix[user_info.zone];
 800263a:	f107 030c 	add.w	r3, r7, #12
 800263e:	4618      	mov	r0, r3
 8002640:	f01c fe98 	bl	801f374 <mktime>
 8002644:	4b50      	ldr	r3, [pc, #320]	; (8002788 <fs_open_custom+0x2c0>)
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	4a58      	ldr	r2, [pc, #352]	; (80027ac <fs_open_custom+0x2e4>)
 800264a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264e:	461a      	mov	r2, r3
 8002650:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002654:	1884      	adds	r4, r0, r2
 8002656:	eb41 0503 	adc.w	r5, r1, r3
 800265a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800265e:	e9c3 4500 	strd	r4, r5, [r3]
			// time_t  to   tm

			localtime_r(  &t, &WebPageTime );
 8002662:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002666:	4952      	ldr	r1, [pc, #328]	; (80027b0 <fs_open_custom+0x2e8>)
 8002668:	4618      	mov	r0, r3
 800266a:	f01c fc77 	bl	801ef5c <localtime_r>

			int Hours=WebPageTime.tm_hour;
 800266e:	4b50      	ldr	r3, [pc, #320]	; (80027b0 <fs_open_custom+0x2e8>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
			int Minutes=WebPageTime.tm_min;
 8002676:	4b4e      	ldr	r3, [pc, #312]	; (80027b0 <fs_open_custom+0x2e8>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
			int Seconds=WebPageTime.tm_sec;
 800267e:	4b4c      	ldr	r3, [pc, #304]	; (80027b0 <fs_open_custom+0x2e8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
			int Date=WebPageTime.tm_mday;
 8002686:	4b4a      	ldr	r3, [pc, #296]	; (80027b0 <fs_open_custom+0x2e8>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
			int Month=WebPageTime.tm_mon+1;
 800268e:	4b48      	ldr	r3, [pc, #288]	; (80027b0 <fs_open_custom+0x2e8>)
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	3301      	adds	r3, #1
 8002694:	f8c7 36c0 	str.w	r3, [r7, #1728]	; 0x6c0
			int Year=WebPageTime.tm_year+2000;
 8002698:	4b45      	ldr	r3, [pc, #276]	; (80027b0 <fs_open_custom+0x2e8>)
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80026a0:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc


			offset = sprintf(generated_html,"%02d:%02d:%02d %02d.%02d.%04d",Hours,Minutes,Seconds,Date,Month,Year);
 80026a4:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80026a8:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 80026ac:	9303      	str	r3, [sp, #12]
 80026ae:	f8d7 36c0 	ldr.w	r3, [r7, #1728]	; 0x6c0
 80026b2:	9302      	str	r3, [sp, #8]
 80026b4:	f8d7 36c4 	ldr.w	r3, [r7, #1732]	; 0x6c4
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	f8d7 36c8 	ldr.w	r3, [r7, #1736]	; 0x6c8
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	f8d7 36cc 	ldr.w	r3, [r7, #1740]	; 0x6cc
 80026c4:	f8d7 26d0 	ldr.w	r2, [r7, #1744]	; 0x6d0
 80026c8:	493a      	ldr	r1, [pc, #232]	; (80027b4 <fs_open_custom+0x2ec>)
 80026ca:	f01d f885 	bl	801f7d8 <siprintf>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f8a7 36d6 	strh.w	r3, [r7, #1750]	; 0x6d6
		if (gps.year[0]!='V'&&PPS_count>12){//gps.year[0]!='V'&&PPS_count>12
 80026d4:	e010      	b.n	80026f8 <fs_open_custom+0x230>
		}
		else if (gps.year[0]=='V'||PPS_count<13) {
 80026d6:	4b32      	ldr	r3, [pc, #200]	; (80027a0 <fs_open_custom+0x2d8>)
 80026d8:	799b      	ldrb	r3, [r3, #6]
 80026da:	2b56      	cmp	r3, #86	; 0x56
 80026dc:	d003      	beq.n	80026e6 <fs_open_custom+0x21e>
 80026de:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <fs_open_custom+0x2dc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b0c      	cmp	r3, #12
 80026e4:	dc08      	bgt.n	80026f8 <fs_open_custom+0x230>
			offset = sprintf(generated_html,"no reference time");
 80026e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80026ea:	4933      	ldr	r1, [pc, #204]	; (80027b8 <fs_open_custom+0x2f0>)
 80026ec:	4618      	mov	r0, r3
 80026ee:	f01d f873 	bl	801f7d8 <siprintf>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f8a7 36d6 	strh.w	r3, [r7, #1750]	; 0x6d6
//		else if (gps.year[0]=='') {
//					offset = sprintf(generated_html,"no Reference Timestamp");
//				}
	}

	if (offset>0){
 80026f8:	f8b7 36d6 	ldrh.w	r3, [r7, #1750]	; 0x6d6
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00e      	beq.n	800271e <fs_open_custom+0x256>
		memset(file, 0, sizeof(struct fs_file));
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	2214      	movs	r2, #20
 8002704:	2100      	movs	r1, #0
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	f01c fd54 	bl	801f1b4 <memset>
		file->pextension = mem_malloc(offset);
 800270c:	f8b7 36d6 	ldrh.w	r3, [r7, #1750]	; 0x6d6
 8002710:	4618      	mov	r0, r3
 8002712:	f010 ff1b 	bl	801354c <mem_malloc>
 8002716:	4602      	mov	r2, r0
 8002718:	1d3b      	adds	r3, r7, #4
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60da      	str	r2, [r3, #12]
	}

	if (file->pextension != NULL) {
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d020      	beq.n	800276a <fs_open_custom+0x2a2>
		/* instead of doing memcpy, you would generate e.g. a JSON here */
		memcpy(file->pextension, generated_html, offset);
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f8b7 26d6 	ldrh.w	r2, [r7, #1750]	; 0x6d6
 8002732:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8002736:	4618      	mov	r0, r3
 8002738:	f01c fd14 	bl	801f164 <memcpy>
		file->data = (const char *)file->pextension;
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	601a      	str	r2, [r3, #0]
		file->len = offset; /* don't send the trailing 0 */
 8002748:	f8b7 26d6 	ldrh.w	r2, [r7, #1750]	; 0x6d6
 800274c:	1d3b      	adds	r3, r7, #4
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
		file->index = file->len;
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	1d3b      	adds	r3, r7, #4
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	609a      	str	r2, [r3, #8]
		/* allow persisteng connections */
		file->flags = FS_FILE_FLAGS_HEADER_INCLUDED;
 800275e:	1d3b      	adds	r3, r7, #4
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2201      	movs	r2, #1
 8002764:	741a      	strb	r2, [r3, #16]
		return 1;
 8002766:	2301      	movs	r3, #1
 8002768:	e005      	b.n	8002776 <fs_open_custom+0x2ae>
	}

	printf("Extension fail %s\n\r",name);
 800276a:	463b      	mov	r3, r7
 800276c:	6819      	ldr	r1, [r3, #0]
 800276e:	4813      	ldr	r0, [pc, #76]	; (80027bc <fs_open_custom+0x2f4>)
 8002770:	f01c ffa6 	bl	801f6c0 <iprintf>
	return 0;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	f207 67dc 	addw	r7, r7, #1756	; 0x6dc
 800277c:	46bd      	mov	sp, r7
 800277e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002782:	bf00      	nop
 8002784:	08022c5c 	.word	0x08022c5c
 8002788:	20004b18 	.word	0x20004b18
 800278c:	20004b2c 	.word	0x20004b2c
 8002790:	20004c2b 	.word	0x20004c2b
 8002794:	08022c68 	.word	0x08022c68
 8002798:	08022c88 	.word	0x08022c88
 800279c:	08022cf4 	.word	0x08022cf4
 80027a0:	20004afc 	.word	0x20004afc
 80027a4:	20000528 	.word	0x20000528
 80027a8:	20004ce4 	.word	0x20004ce4
 80027ac:	0802662c 	.word	0x0802662c
 80027b0:	20004dbc 	.word	0x20004dbc
 80027b4:	08022d04 	.word	0x08022d04
 80027b8:	08022d24 	.word	0x08022d24
 80027bc:	08022d38 	.word	0x08022d38

080027c0 <fs_close_custom>:
void fs_close_custom(struct fs_file *file){
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	if (file && file->pextension) {
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00b      	beq.n	80027e6 <fs_close_custom+0x26>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d007      	beq.n	80027e6 <fs_close_custom+0x26>
		mem_free(file->pextension);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	4618      	mov	r0, r3
 80027dc:	f010 fd1c 	bl	8013218 <mem_free>
		file->pextension = NULL;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	60da      	str	r2, [r3, #12]
	}
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 80027ee:	b480      	push	{r7}
 80027f0:	b087      	sub	sp, #28
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	429a      	cmp	r2, r3
 8002802:	d801      	bhi.n	8002808 <jsmn_alloc_token+0x1a>
    return NULL;
 8002804:	2300      	movs	r3, #0
 8002806:	e014      	b.n	8002832 <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	1c59      	adds	r1, r3, #1
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	6051      	str	r1, [r2, #4]
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	4413      	add	r3, r2
 8002818:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f04f 32ff 	mov.w	r2, #4294967295
 8002820:	609a      	str	r2, [r3, #8]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2200      	movs	r2, #0
 800282e:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8002830:	697b      	ldr	r3, [r7, #20]
}
 8002832:	4618      	mov	r0, r3
 8002834:	371c      	adds	r7, #28
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 800283e:	b480      	push	{r7}
 8002840:	b085      	sub	sp, #20
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
 800284a:	460b      	mov	r3, r1
 800284c:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	7afa      	ldrb	r2, [r7, #11]
 8002852:	701a      	strb	r2, [r3, #0]
  token->start = start;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	605a      	str	r2, [r3, #4]
  token->end = end;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
}
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002888:	e07c      	b.n	8002984 <jsmn_parse_primitive+0x110>
    switch (js[parser->pos]) {
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	4413      	add	r3, r2
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b7d      	cmp	r3, #125	; 0x7d
 8002896:	f000 8083 	beq.w	80029a0 <jsmn_parse_primitive+0x12c>
 800289a:	2b7d      	cmp	r3, #125	; 0x7d
 800289c:	dc58      	bgt.n	8002950 <jsmn_parse_primitive+0xdc>
 800289e:	2b5d      	cmp	r3, #93	; 0x5d
 80028a0:	d07e      	beq.n	80029a0 <jsmn_parse_primitive+0x12c>
 80028a2:	2b5d      	cmp	r3, #93	; 0x5d
 80028a4:	dc54      	bgt.n	8002950 <jsmn_parse_primitive+0xdc>
 80028a6:	2b2c      	cmp	r3, #44	; 0x2c
 80028a8:	dc50      	bgt.n	800294c <jsmn_parse_primitive+0xd8>
 80028aa:	2b09      	cmp	r3, #9
 80028ac:	db50      	blt.n	8002950 <jsmn_parse_primitive+0xdc>
 80028ae:	3b09      	subs	r3, #9
 80028b0:	2b23      	cmp	r3, #35	; 0x23
 80028b2:	d84d      	bhi.n	8002950 <jsmn_parse_primitive+0xdc>
 80028b4:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <jsmn_parse_primitive+0x48>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	080029a1 	.word	0x080029a1
 80028c0:	080029a1 	.word	0x080029a1
 80028c4:	08002951 	.word	0x08002951
 80028c8:	08002951 	.word	0x08002951
 80028cc:	080029a1 	.word	0x080029a1
 80028d0:	08002951 	.word	0x08002951
 80028d4:	08002951 	.word	0x08002951
 80028d8:	08002951 	.word	0x08002951
 80028dc:	08002951 	.word	0x08002951
 80028e0:	08002951 	.word	0x08002951
 80028e4:	08002951 	.word	0x08002951
 80028e8:	08002951 	.word	0x08002951
 80028ec:	08002951 	.word	0x08002951
 80028f0:	08002951 	.word	0x08002951
 80028f4:	08002951 	.word	0x08002951
 80028f8:	08002951 	.word	0x08002951
 80028fc:	08002951 	.word	0x08002951
 8002900:	08002951 	.word	0x08002951
 8002904:	08002951 	.word	0x08002951
 8002908:	08002951 	.word	0x08002951
 800290c:	08002951 	.word	0x08002951
 8002910:	08002951 	.word	0x08002951
 8002914:	08002951 	.word	0x08002951
 8002918:	080029a1 	.word	0x080029a1
 800291c:	08002951 	.word	0x08002951
 8002920:	08002951 	.word	0x08002951
 8002924:	08002951 	.word	0x08002951
 8002928:	08002951 	.word	0x08002951
 800292c:	08002951 	.word	0x08002951
 8002930:	08002951 	.word	0x08002951
 8002934:	08002951 	.word	0x08002951
 8002938:	08002951 	.word	0x08002951
 800293c:	08002951 	.word	0x08002951
 8002940:	08002951 	.word	0x08002951
 8002944:	08002951 	.word	0x08002951
 8002948:	080029a1 	.word	0x080029a1
 800294c:	2b3a      	cmp	r3, #58	; 0x3a
 800294e:	d027      	beq.n	80029a0 <jsmn_parse_primitive+0x12c>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8002950:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	4413      	add	r3, r2
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b1f      	cmp	r3, #31
 800295e:	d906      	bls.n	800296e <jsmn_parse_primitive+0xfa>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	4413      	add	r3, r2
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b7e      	cmp	r3, #126	; 0x7e
 800296c:	d905      	bls.n	800297a <jsmn_parse_primitive+0x106>
      parser->pos = start;
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 8002974:	f06f 0301 	mvn.w	r3, #1
 8002978:	e03b      	b.n	80029f2 <jsmn_parse_primitive+0x17e>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	429a      	cmp	r2, r3
 800298c:	d90a      	bls.n	80029a4 <jsmn_parse_primitive+0x130>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	4413      	add	r3, r2
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	f47f af76 	bne.w	800288a <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 800299e:	e001      	b.n	80029a4 <jsmn_parse_primitive+0x130>
      goto found;
 80029a0:	bf00      	nop
 80029a2:	e000      	b.n	80029a6 <jsmn_parse_primitive+0x132>
found:
 80029a4:	bf00      	nop
  if (tokens == NULL) {
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d106      	bne.n	80029ba <jsmn_parse_primitive+0x146>
    parser->pos--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	1e5a      	subs	r2, r3, #1
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	601a      	str	r2, [r3, #0]
    return 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e01b      	b.n	80029f2 <jsmn_parse_primitive+0x17e>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 80029ba:	6a3a      	ldr	r2, [r7, #32]
 80029bc:	6839      	ldr	r1, [r7, #0]
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f7ff ff15 	bl	80027ee <jsmn_alloc_token>
 80029c4:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d105      	bne.n	80029d8 <jsmn_parse_primitive+0x164>
    parser->pos = start;
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
 80029d6:	e00c      	b.n	80029f2 <jsmn_parse_primitive+0x17e>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	2108      	movs	r1, #8
 80029e0:	6938      	ldr	r0, [r7, #16]
 80029e2:	f7ff ff2c 	bl	800283e <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	1e5a      	subs	r2, r3, #1
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	601a      	str	r2, [r3, #0]
  return 0;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop

080029fc <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	61bb      	str	r3, [r7, #24]
  
  /* Skip starting quote */
  parser->pos++;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	601a      	str	r2, [r3, #0]
  
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002a1a:	e0e6      	b.n	8002bea <jsmn_parse_string+0x1ee>
    char c = js[parser->pos];
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	4413      	add	r3, r2
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	2b22      	cmp	r3, #34	; 0x22
 8002a2c:	d11d      	bne.n	8002a6a <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <jsmn_parse_string+0x3c>
        return 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	e0ea      	b.n	8002c0e <jsmn_parse_string+0x212>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8002a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a3a:	6839      	ldr	r1, [r7, #0]
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7ff fed6 	bl	80027ee <jsmn_alloc_token>
 8002a42:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d105      	bne.n	8002a56 <jsmn_parse_string+0x5a>
        parser->pos = start;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 8002a50:	f04f 33ff 	mov.w	r3, #4294967295
 8002a54:	e0db      	b.n	8002c0e <jsmn_parse_string+0x212>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2104      	movs	r1, #4
 8002a60:	6938      	ldr	r0, [r7, #16]
 8002a62:	f7ff feec 	bl	800283e <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e0d1      	b.n	8002c0e <jsmn_parse_string+0x212>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8002a6a:	7dfb      	ldrb	r3, [r7, #23]
 8002a6c:	2b5c      	cmp	r3, #92	; 0x5c
 8002a6e:	f040 80b4 	bne.w	8002bda <jsmn_parse_string+0x1de>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3301      	adds	r3, #1
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	f240 80ad 	bls.w	8002bda <jsmn_parse_string+0x1de>
      int i;
      parser->pos++;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	4413      	add	r3, r2
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b75      	cmp	r3, #117	; 0x75
 8002a96:	f300 809a 	bgt.w	8002bce <jsmn_parse_string+0x1d2>
 8002a9a:	2b5c      	cmp	r3, #92	; 0x5c
 8002a9c:	da06      	bge.n	8002aac <jsmn_parse_string+0xb0>
 8002a9e:	2b22      	cmp	r3, #34	; 0x22
 8002aa0:	f000 809d 	beq.w	8002bde <jsmn_parse_string+0x1e2>
 8002aa4:	2b2f      	cmp	r3, #47	; 0x2f
 8002aa6:	f000 809a 	beq.w	8002bde <jsmn_parse_string+0x1e2>
 8002aaa:	e090      	b.n	8002bce <jsmn_parse_string+0x1d2>
 8002aac:	3b5c      	subs	r3, #92	; 0x5c
 8002aae:	2b19      	cmp	r3, #25
 8002ab0:	f200 808d 	bhi.w	8002bce <jsmn_parse_string+0x1d2>
 8002ab4:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <jsmn_parse_string+0xc0>)
 8002ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aba:	bf00      	nop
 8002abc:	08002bdf 	.word	0x08002bdf
 8002ac0:	08002bcf 	.word	0x08002bcf
 8002ac4:	08002bcf 	.word	0x08002bcf
 8002ac8:	08002bcf 	.word	0x08002bcf
 8002acc:	08002bcf 	.word	0x08002bcf
 8002ad0:	08002bcf 	.word	0x08002bcf
 8002ad4:	08002bdf 	.word	0x08002bdf
 8002ad8:	08002bcf 	.word	0x08002bcf
 8002adc:	08002bcf 	.word	0x08002bcf
 8002ae0:	08002bcf 	.word	0x08002bcf
 8002ae4:	08002bdf 	.word	0x08002bdf
 8002ae8:	08002bcf 	.word	0x08002bcf
 8002aec:	08002bcf 	.word	0x08002bcf
 8002af0:	08002bcf 	.word	0x08002bcf
 8002af4:	08002bcf 	.word	0x08002bcf
 8002af8:	08002bcf 	.word	0x08002bcf
 8002afc:	08002bcf 	.word	0x08002bcf
 8002b00:	08002bcf 	.word	0x08002bcf
 8002b04:	08002bdf 	.word	0x08002bdf
 8002b08:	08002bcf 	.word	0x08002bcf
 8002b0c:	08002bcf 	.word	0x08002bcf
 8002b10:	08002bcf 	.word	0x08002bcf
 8002b14:	08002bdf 	.word	0x08002bdf
 8002b18:	08002bcf 	.word	0x08002bcf
 8002b1c:	08002bdf 	.word	0x08002bdf
 8002b20:	08002b25 	.word	0x08002b25
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	e037      	b.n	8002ba4 <jsmn_parse_string+0x1a8>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b2f      	cmp	r3, #47	; 0x2f
 8002b40:	d906      	bls.n	8002b50 <jsmn_parse_string+0x154>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	4413      	add	r3, r2
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b39      	cmp	r3, #57	; 0x39
 8002b4e:	d921      	bls.n	8002b94 <jsmn_parse_string+0x198>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	4413      	add	r3, r2
 8002b58:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	d906      	bls.n	8002b6c <jsmn_parse_string+0x170>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	4413      	add	r3, r2
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b46      	cmp	r3, #70	; 0x46
 8002b6a:	d913      	bls.n	8002b94 <jsmn_parse_string+0x198>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	4413      	add	r3, r2
 8002b74:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8002b76:	2b60      	cmp	r3, #96	; 0x60
 8002b78:	d906      	bls.n	8002b88 <jsmn_parse_string+0x18c>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	4413      	add	r3, r2
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b66      	cmp	r3, #102	; 0x66
 8002b86:	d905      	bls.n	8002b94 <jsmn_parse_string+0x198>
            parser->pos = start;
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 8002b8e:	f06f 0301 	mvn.w	r3, #1
 8002b92:	e03c      	b.n	8002c0e <jsmn_parse_string+0x212>
          }
          parser->pos++;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	601a      	str	r2, [r3, #0]
             i++) {
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	dc0b      	bgt.n	8002bc2 <jsmn_parse_string+0x1c6>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d906      	bls.n	8002bc2 <jsmn_parse_string+0x1c6>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	4413      	add	r3, r2
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1b8      	bne.n	8002b34 <jsmn_parse_string+0x138>
        }
        parser->pos--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	1e5a      	subs	r2, r3, #1
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	601a      	str	r2, [r3, #0]
        break;
 8002bcc:	e008      	b.n	8002be0 <jsmn_parse_string+0x1e4>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 8002bd4:	f06f 0301 	mvn.w	r3, #1
 8002bd8:	e019      	b.n	8002c0e <jsmn_parse_string+0x212>
      }
    }
 8002bda:	bf00      	nop
 8002bdc:	e000      	b.n	8002be0 <jsmn_parse_string+0x1e4>
        break;
 8002bde:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d907      	bls.n	8002c04 <jsmn_parse_string+0x208>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f47f af0c 	bne.w	8002a1c <jsmn_parse_string+0x20>
  }
  parser->pos = start;
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 8002c0a:	f06f 0302 	mvn.w	r3, #2
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3720      	adds	r7, #32
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop

08002c18 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08c      	sub	sp, #48	; 0x30
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002c2c:	e1bf      	b.n	8002fae <jsmn_parse+0x396>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	4413      	add	r3, r2
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 8002c3a:	7ffb      	ldrb	r3, [r7, #31]
 8002c3c:	2b7d      	cmp	r3, #125	; 0x7d
 8002c3e:	f000 80b9 	beq.w	8002db4 <jsmn_parse+0x19c>
 8002c42:	2b7d      	cmp	r3, #125	; 0x7d
 8002c44:	f300 8181 	bgt.w	8002f4a <jsmn_parse+0x332>
 8002c48:	2b7b      	cmp	r3, #123	; 0x7b
 8002c4a:	d07c      	beq.n	8002d46 <jsmn_parse+0x12e>
 8002c4c:	2b7b      	cmp	r3, #123	; 0x7b
 8002c4e:	f300 817c 	bgt.w	8002f4a <jsmn_parse+0x332>
 8002c52:	2b5d      	cmp	r3, #93	; 0x5d
 8002c54:	f000 80ae 	beq.w	8002db4 <jsmn_parse+0x19c>
 8002c58:	2b5d      	cmp	r3, #93	; 0x5d
 8002c5a:	f300 8176 	bgt.w	8002f4a <jsmn_parse+0x332>
 8002c5e:	2b3a      	cmp	r3, #58	; 0x3a
 8002c60:	dc6e      	bgt.n	8002d40 <jsmn_parse+0x128>
 8002c62:	2b09      	cmp	r3, #9
 8002c64:	f2c0 8171 	blt.w	8002f4a <jsmn_parse+0x332>
 8002c68:	3b09      	subs	r3, #9
 8002c6a:	2b31      	cmp	r3, #49	; 0x31
 8002c6c:	f200 816d 	bhi.w	8002f4a <jsmn_parse+0x332>
 8002c70:	a201      	add	r2, pc, #4	; (adr r2, 8002c78 <jsmn_parse+0x60>)
 8002c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c76:	bf00      	nop
 8002c78:	08002f8f 	.word	0x08002f8f
 8002c7c:	08002f8f 	.word	0x08002f8f
 8002c80:	08002f4b 	.word	0x08002f4b
 8002c84:	08002f4b 	.word	0x08002f4b
 8002c88:	08002f8f 	.word	0x08002f8f
 8002c8c:	08002f4b 	.word	0x08002f4b
 8002c90:	08002f4b 	.word	0x08002f4b
 8002c94:	08002f4b 	.word	0x08002f4b
 8002c98:	08002f4b 	.word	0x08002f4b
 8002c9c:	08002f4b 	.word	0x08002f4b
 8002ca0:	08002f4b 	.word	0x08002f4b
 8002ca4:	08002f4b 	.word	0x08002f4b
 8002ca8:	08002f4b 	.word	0x08002f4b
 8002cac:	08002f4b 	.word	0x08002f4b
 8002cb0:	08002f4b 	.word	0x08002f4b
 8002cb4:	08002f4b 	.word	0x08002f4b
 8002cb8:	08002f4b 	.word	0x08002f4b
 8002cbc:	08002f4b 	.word	0x08002f4b
 8002cc0:	08002f4b 	.word	0x08002f4b
 8002cc4:	08002f4b 	.word	0x08002f4b
 8002cc8:	08002f4b 	.word	0x08002f4b
 8002ccc:	08002f4b 	.word	0x08002f4b
 8002cd0:	08002f4b 	.word	0x08002f4b
 8002cd4:	08002f8f 	.word	0x08002f8f
 8002cd8:	08002f4b 	.word	0x08002f4b
 8002cdc:	08002e69 	.word	0x08002e69
 8002ce0:	08002f4b 	.word	0x08002f4b
 8002ce4:	08002f4b 	.word	0x08002f4b
 8002ce8:	08002f4b 	.word	0x08002f4b
 8002cec:	08002f4b 	.word	0x08002f4b
 8002cf0:	08002f4b 	.word	0x08002f4b
 8002cf4:	08002f4b 	.word	0x08002f4b
 8002cf8:	08002f4b 	.word	0x08002f4b
 8002cfc:	08002f4b 	.word	0x08002f4b
 8002d00:	08002f4b 	.word	0x08002f4b
 8002d04:	08002ebd 	.word	0x08002ebd
 8002d08:	08002f4b 	.word	0x08002f4b
 8002d0c:	08002f4b 	.word	0x08002f4b
 8002d10:	08002f4b 	.word	0x08002f4b
 8002d14:	08002f4b 	.word	0x08002f4b
 8002d18:	08002f4b 	.word	0x08002f4b
 8002d1c:	08002f4b 	.word	0x08002f4b
 8002d20:	08002f4b 	.word	0x08002f4b
 8002d24:	08002f4b 	.word	0x08002f4b
 8002d28:	08002f4b 	.word	0x08002f4b
 8002d2c:	08002f4b 	.word	0x08002f4b
 8002d30:	08002f4b 	.word	0x08002f4b
 8002d34:	08002f4b 	.word	0x08002f4b
 8002d38:	08002f4b 	.word	0x08002f4b
 8002d3c:	08002eaf 	.word	0x08002eaf
 8002d40:	2b5b      	cmp	r3, #91	; 0x5b
 8002d42:	f040 8102 	bne.w	8002f4a <jsmn_parse+0x332>
    case '{':
    case '[':
      count++;
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 811f 	beq.w	8002f92 <jsmn_parse+0x37a>
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8002d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d56:	6839      	ldr	r1, [r7, #0]
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7ff fd48 	bl	80027ee <jsmn_alloc_token>
 8002d5e:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d102      	bne.n	8002d6c <jsmn_parse+0x154>
        return JSMN_ERROR_NOMEM;
 8002d66:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6a:	e14f      	b.n	800300c <jsmn_parse+0x3f4>
      }
      if (parser->toksuper != -1) {
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d00a      	beq.n	8002d8c <jsmn_parse+0x174>
        jsmntok_t *t = &tokens[parser->toksuper];
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	4413      	add	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]
        /* In strict mode an object or array can't become a key */
        if (t->type == JSMN_OBJECT) {
          return JSMN_ERROR_INVAL;
        }
#endif
        t->size++;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
        token->parent = parser->toksuper;
#endif
      }
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 8002d8c:	7ffb      	ldrb	r3, [r7, #31]
 8002d8e:	2b7b      	cmp	r3, #123	; 0x7b
 8002d90:	d101      	bne.n	8002d96 <jsmn_parse+0x17e>
 8002d92:	2201      	movs	r2, #1
 8002d94:	e000      	b.n	8002d98 <jsmn_parse+0x180>
 8002d96:	2202      	movs	r2, #2
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	461a      	mov	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	609a      	str	r2, [r3, #8]
      break;
 8002db2:	e0f7      	b.n	8002fa4 <jsmn_parse+0x38c>
    case '}':
    case ']':
      if (tokens == NULL) {
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80ed 	beq.w	8002f96 <jsmn_parse+0x37e>
        break;
      }
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 8002dbc:	7ffb      	ldrb	r3, [r7, #31]
 8002dbe:	2b7d      	cmp	r3, #125	; 0x7d
 8002dc0:	d101      	bne.n	8002dc6 <jsmn_parse+0x1ae>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <jsmn_parse+0x1b0>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	77bb      	strb	r3, [r7, #30]
          break;
        }
        token = &tokens[token->parent];
      }
#else
      for (i = parser->toknext - 1; i >= 0; i--) {
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd2:	e024      	b.n	8002e1e <jsmn_parse+0x206>
        token = &tokens[i];
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	4413      	add	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de6:	d017      	beq.n	8002e18 <jsmn_parse+0x200>
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df0:	d112      	bne.n	8002e18 <jsmn_parse+0x200>
          if (token->type != type) {
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	7fba      	ldrb	r2, [r7, #30]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d002      	beq.n	8002e02 <jsmn_parse+0x1ea>
            return JSMN_ERROR_INVAL;
 8002dfc:	f06f 0301 	mvn.w	r3, #1
 8002e00:	e104      	b.n	800300c <jsmn_parse+0x3f4>
          }
          parser->toksuper = -1;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f04f 32ff 	mov.w	r2, #4294967295
 8002e08:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	461a      	mov	r2, r3
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	609a      	str	r2, [r3, #8]
          break;
 8002e16:	e005      	b.n	8002e24 <jsmn_parse+0x20c>
      for (i = parser->toknext - 1; i >= 0; i--) {
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	dad7      	bge.n	8002dd4 <jsmn_parse+0x1bc>
        }
      }
      /* Error if unmatched closing bracket */
      if (i == -1) {
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2a:	d119      	bne.n	8002e60 <jsmn_parse+0x248>
        return JSMN_ERROR_INVAL;
 8002e2c:	f06f 0301 	mvn.w	r3, #1
 8002e30:	e0ec      	b.n	800300c <jsmn_parse+0x3f4>
      }
      for (; i >= 0; i--) {
        token = &tokens[i];
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	4413      	add	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e44:	d009      	beq.n	8002e5a <jsmn_parse+0x242>
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4e:	d104      	bne.n	8002e5a <jsmn_parse+0x242>
          parser->toksuper = i;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e54:	609a      	str	r2, [r3, #8]
          break;
 8002e56:	bf00      	nop
        }
      }
#endif
      break;
 8002e58:	e0a4      	b.n	8002fa4 <jsmn_parse+0x38c>
      for (; i >= 0; i--) {
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	dae5      	bge.n	8002e32 <jsmn_parse+0x21a>
      break;
 8002e66:	e09d      	b.n	8002fa4 <jsmn_parse+0x38c>
    case '\"':
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	68b9      	ldr	r1, [r7, #8]
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f7ff fdc2 	bl	80029fc <jsmn_parse_string>
 8002e78:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	da01      	bge.n	8002e84 <jsmn_parse+0x26c>
        return r;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	e0c3      	b.n	800300c <jsmn_parse+0x3f4>
      }
      count++;
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	3301      	adds	r3, #1
 8002e88:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e92:	f000 8082 	beq.w	8002f9a <jsmn_parse+0x382>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d07e      	beq.n	8002f9a <jsmn_parse+0x382>
        tokens[parser->toksuper].size++;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	3201      	adds	r2, #1
 8002eaa:	60da      	str	r2, [r3, #12]
      }
      break;
 8002eac:	e075      	b.n	8002f9a <jsmn_parse+0x382>
    case '\r':
    case '\n':
    case ' ':
      break;
    case ':':
      parser->toksuper = parser->toknext - 1;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	609a      	str	r2, [r3, #8]
      break;
 8002eba:	e073      	b.n	8002fa4 <jsmn_parse+0x38c>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d06d      	beq.n	8002f9e <jsmn_parse+0x386>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eca:	d068      	beq.n	8002f9e <jsmn_parse+0x386>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d060      	beq.n	8002f9e <jsmn_parse+0x386>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d058      	beq.n	8002f9e <jsmn_parse+0x386>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef4:	e025      	b.n	8002f42 <jsmn_parse+0x32a>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	4413      	add	r3, r2
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d006      	beq.n	8002f12 <jsmn_parse+0x2fa>
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d114      	bne.n	8002f3c <jsmn_parse+0x324>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	4413      	add	r3, r2
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d00c      	beq.n	8002f3c <jsmn_parse+0x324>
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	4413      	add	r3, r2
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f30:	d104      	bne.n	8002f3c <jsmn_parse+0x324>
              parser->toksuper = i;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f36:	609a      	str	r2, [r3, #8]
              break;
 8002f38:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 8002f3a:	e030      	b.n	8002f9e <jsmn_parse+0x386>
        for (i = parser->toknext - 1; i >= 0; i--) {
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	dad6      	bge.n	8002ef6 <jsmn_parse+0x2de>
      break;
 8002f48:	e029      	b.n	8002f9e <jsmn_parse+0x386>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f7ff fc8d 	bl	8002874 <jsmn_parse_primitive>
 8002f5a:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	da01      	bge.n	8002f66 <jsmn_parse+0x34e>
        return r;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	e052      	b.n	800300c <jsmn_parse+0x3f4>
      }
      count++;
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d015      	beq.n	8002fa2 <jsmn_parse+0x38a>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d012      	beq.n	8002fa2 <jsmn_parse+0x38a>
        tokens[parser->toksuper].size++;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	4413      	add	r3, r2
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	3201      	adds	r2, #1
 8002f8a:	60da      	str	r2, [r3, #12]
      }
      break;
 8002f8c:	e009      	b.n	8002fa2 <jsmn_parse+0x38a>
      break;
 8002f8e:	bf00      	nop
 8002f90:	e008      	b.n	8002fa4 <jsmn_parse+0x38c>
        break;
 8002f92:	bf00      	nop
 8002f94:	e006      	b.n	8002fa4 <jsmn_parse+0x38c>
        break;
 8002f96:	bf00      	nop
 8002f98:	e004      	b.n	8002fa4 <jsmn_parse+0x38c>
      break;
 8002f9a:	bf00      	nop
 8002f9c:	e002      	b.n	8002fa4 <jsmn_parse+0x38c>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e000      	b.n	8002fa4 <jsmn_parse+0x38c>
      break;
 8002fa2:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d907      	bls.n	8002fc8 <jsmn_parse+0x3b0>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f47f ae33 	bne.w	8002c2e <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01d      	beq.n	800300a <jsmn_parse+0x3f2>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd6:	e015      	b.n	8003004 <jsmn_parse+0x3ec>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	4413      	add	r3, r2
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe6:	d00a      	beq.n	8002ffe <jsmn_parse+0x3e6>
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	4413      	add	r3, r2
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	d102      	bne.n	8002ffe <jsmn_parse+0x3e6>
        return JSMN_ERROR_PART;
 8002ff8:	f06f 0302 	mvn.w	r3, #2
 8002ffc:	e006      	b.n	800300c <jsmn_parse+0x3f4>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	3b01      	subs	r3, #1
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	2b00      	cmp	r3, #0
 8003008:	dae6      	bge.n	8002fd8 <jsmn_parse+0x3c0>
      }
    }
  }

  return count;
 800300a:	6a3b      	ldr	r3, [r7, #32]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3728      	adds	r7, #40	; 0x28
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f04f 32ff 	mov.w	r2, #4294967295
 800302e:	609a      	str	r2, [r3, #8]
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <jsoneq>:
int post_offset=0;
//static char last_user[USER_PASS_BUFSIZE];

char buf_data[USER_PASS_BUFSIZE];

static int jsoneq(const char *json, jsmntok_t *tok, const char *s) {
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b04      	cmp	r3, #4
 800304e:	d11e      	bne.n	800308e <jsoneq+0x52>
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7fd f8c7 	bl	80001e4 <strlen>
 8003056:	4603      	mov	r3, r0
 8003058:	4619      	mov	r1, r3
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	4299      	cmp	r1, r3
 8003066:	d112      	bne.n	800308e <jsoneq+0x52>
			strncmp(json + tok->start, s, tok->end - tok->start) == 0) {
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	461a      	mov	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1898      	adds	r0, r3, r2
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	461a      	mov	r2, r3
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	f01c fbd7 	bl	801f832 <strncmp>
 8003084:	4603      	mov	r3, r0
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <jsoneq+0x52>
		return 0;
 800308a:	2300      	movs	r3, #0
 800308c:	e001      	b.n	8003092 <jsoneq+0x56>
	}
	return -1;
 800308e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <httpd_post_begin>:
err_t
httpd_post_begin(void *connection, const char *uri, const char *http_request, u16_t http_request_len, int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	807b      	strh	r3, [r7, #2]
	post_offset=0;
 80030aa:	4b16      	ldr	r3, [pc, #88]	; (8003104 <httpd_post_begin+0x68>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]

	memset(buf_data,0,sizeof(buf_data));
 80030b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030b4:	2100      	movs	r1, #0
 80030b6:	4814      	ldr	r0, [pc, #80]	; (8003108 <httpd_post_begin+0x6c>)
 80030b8:	f01c f87c 	bl	801f1b4 <memset>
	LWIP_UNUSED_ARG(connection);
	LWIP_UNUSED_ARG(http_request);
	LWIP_UNUSED_ARG(http_request_len);
	LWIP_UNUSED_ARG(content_len);
	LWIP_UNUSED_ARG(post_auto_wnd);
	if (!memcmp(uri, "/info.html", 10)) {
 80030bc:	220a      	movs	r2, #10
 80030be:	4913      	ldr	r1, [pc, #76]	; (800310c <httpd_post_begin+0x70>)
 80030c0:	68b8      	ldr	r0, [r7, #8]
 80030c2:	f01c f841 	bl	801f148 <memcmp>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d115      	bne.n	80030f8 <httpd_post_begin+0x5c>
		if (current_connection != connection) {
 80030cc:	4b10      	ldr	r3, [pc, #64]	; (8003110 <httpd_post_begin+0x74>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d010      	beq.n	80030f8 <httpd_post_begin+0x5c>
			current_connection = connection;
 80030d6:	4a0e      	ldr	r2, [pc, #56]	; (8003110 <httpd_post_begin+0x74>)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6013      	str	r3, [r2, #0]
			valid_connection = NULL;
 80030dc:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <httpd_post_begin+0x78>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
			/* default page is "login failed" */
			snprintf(response_uri, response_uri_len, "/info.html");
 80030e2:	8c3b      	ldrh	r3, [r7, #32]
 80030e4:	4a09      	ldr	r2, [pc, #36]	; (800310c <httpd_post_begin+0x70>)
 80030e6:	4619      	mov	r1, r3
 80030e8:	69f8      	ldr	r0, [r7, #28]
 80030ea:	f01c fb41 	bl	801f770 <sniprintf>
			/* e.g. for large uploads to slow flash over a fast connection, you should
         manually update the rx window. That way, a sender can only send a full
         tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
         We do not need to throttle upload speed here, so: */
			*post_auto_wnd = 1;
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
			return ERR_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	e001      	b.n	80030fc <httpd_post_begin+0x60>
		}
	}
	return ERR_VAL;
 80030f8:	f06f 0305 	mvn.w	r3, #5
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20000578 	.word	0x20000578
 8003108:	20004de0 	.word	0x20004de0
 800310c:	08022d4c 	.word	0x08022d4c
 8003110:	20000570 	.word	0x20000570
 8003114:	20000574 	.word	0x20000574

08003118 <httpd_post_receive_data>:

err_t
httpd_post_receive_data(void *connection, struct pbuf *p)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	f5ad 6d06 	sub.w	sp, sp, #2144	; 0x860
 800311e:	af02      	add	r7, sp, #8
 8003120:	1d3b      	adds	r3, r7, #4
 8003122:	6018      	str	r0, [r3, #0]
 8003124:	463b      	mov	r3, r7
 8003126:	6019      	str	r1, [r3, #0]
	err_t ret;

	if ((post_offset+p->len) <= USER_PASS_BUFSIZE){
 8003128:	463b      	mov	r3, r7
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	895b      	ldrh	r3, [r3, #10]
 800312e:	461a      	mov	r2, r3
 8003130:	4b9d      	ldr	r3, [pc, #628]	; (80033a8 <httpd_post_receive_data+0x290>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4413      	add	r3, r2
 8003136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800313a:	dc24      	bgt.n	8003186 <httpd_post_receive_data+0x6e>
		strncpy(buf_data+post_offset, p->payload,p->len);
 800313c:	4b9a      	ldr	r3, [pc, #616]	; (80033a8 <httpd_post_receive_data+0x290>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	4b9a      	ldr	r3, [pc, #616]	; (80033ac <httpd_post_receive_data+0x294>)
 8003144:	18d0      	adds	r0, r2, r3
 8003146:	463b      	mov	r3, r7
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	463b      	mov	r3, r7
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	895b      	ldrh	r3, [r3, #10]
 8003152:	461a      	mov	r2, r3
 8003154:	f01c fb7f 	bl	801f856 <strncpy>
	else{
		ret = ERR_VAL;
		pbuf_free(p);
		return ret;
	}
	post_offset += p->len;
 8003158:	463b      	mov	r3, r7
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	895b      	ldrh	r3, [r3, #10]
 800315e:	461a      	mov	r2, r3
 8003160:	4b91      	ldr	r3, [pc, #580]	; (80033a8 <httpd_post_receive_data+0x290>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4413      	add	r3, r2
 8003166:	4a90      	ldr	r2, [pc, #576]	; (80033a8 <httpd_post_receive_data+0x290>)
 8003168:	6013      	str	r3, [r2, #0]

	int data_len = strlen(buf_data);
 800316a:	4890      	ldr	r0, [pc, #576]	; (80033ac <httpd_post_receive_data+0x294>)
 800316c:	f7fd f83a 	bl	80001e4 <strlen>
 8003170:	4603      	mov	r3, r0
 8003172:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
	if (buf_data[data_len-1]!=']'){
 8003176:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 800317a:	3b01      	subs	r3, #1
 800317c:	4a8b      	ldr	r2, [pc, #556]	; (80033ac <httpd_post_receive_data+0x294>)
 800317e:	5cd3      	ldrb	r3, [r2, r3]
 8003180:	2b5d      	cmp	r3, #93	; 0x5d
 8003182:	d014      	beq.n	80031ae <httpd_post_receive_data+0x96>
 8003184:	e009      	b.n	800319a <httpd_post_receive_data+0x82>
		ret = ERR_VAL;
 8003186:	23fa      	movs	r3, #250	; 0xfa
 8003188:	f887 3857 	strb.w	r3, [r7, #2135]	; 0x857
		pbuf_free(p);
 800318c:	463b      	mov	r3, r7
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	f011 fa2e 	bl	80145f0 <pbuf_free>
		return ret;
 8003194:	f997 3857 	ldrsb.w	r3, [r7, #2135]	; 0x857
 8003198:	e1b4      	b.n	8003504 <httpd_post_receive_data+0x3ec>
		ret = ERR_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	f887 3857 	strb.w	r3, [r7, #2135]	; 0x857
		pbuf_free(p);
 80031a0:	463b      	mov	r3, r7
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	f011 fa24 	bl	80145f0 <pbuf_free>
		return ret;
 80031a8:	f997 3857 	ldrsb.w	r3, [r7, #2135]	; 0x857
 80031ac:	e1aa      	b.n	8003504 <httpd_post_receive_data+0x3ec>
	}

	LWIP_ASSERT("NULL pbuf", p != NULL);
 80031ae:	463b      	mov	r3, r7
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d105      	bne.n	80031c2 <httpd_post_receive_data+0xaa>
 80031b6:	4b7e      	ldr	r3, [pc, #504]	; (80033b0 <httpd_post_receive_data+0x298>)
 80031b8:	224d      	movs	r2, #77	; 0x4d
 80031ba:	497e      	ldr	r1, [pc, #504]	; (80033b4 <httpd_post_receive_data+0x29c>)
 80031bc:	487e      	ldr	r0, [pc, #504]	; (80033b8 <httpd_post_receive_data+0x2a0>)
 80031be:	f01c fa7f 	bl	801f6c0 <iprintf>

	if (current_connection == connection) {
 80031c2:	4b7e      	ldr	r3, [pc, #504]	; (80033bc <httpd_post_receive_data+0x2a4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	1d3a      	adds	r2, r7, #4
 80031c8:	6812      	ldr	r2, [r2, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	f040 8191 	bne.w	80034f2 <httpd_post_receive_data+0x3da>
		jsmn_parser parser;
		jsmntok_t t[128]; /* We expect no more than 512 JSON tokens */
		jsmn_init(&parser);
 80031d0:	f607 0314 	addw	r3, r7, #2068	; 0x814
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff1d 	bl	8003014 <jsmn_init>

		int tokens = jsmn_parse(&parser, buf_data, strlen(buf_data), t, 128);
 80031da:	4874      	ldr	r0, [pc, #464]	; (80033ac <httpd_post_receive_data+0x294>)
 80031dc:	f7fd f802 	bl	80001e4 <strlen>
 80031e0:	4602      	mov	r2, r0
 80031e2:	f107 030c 	add.w	r3, r7, #12
 80031e6:	f607 0014 	addw	r0, r7, #2068	; 0x814
 80031ea:	2180      	movs	r1, #128	; 0x80
 80031ec:	9100      	str	r1, [sp, #0]
 80031ee:	496f      	ldr	r1, [pc, #444]	; (80033ac <httpd_post_receive_data+0x294>)
 80031f0:	f7ff fd12 	bl	8002c18 <jsmn_parse>
 80031f4:	f8c7 0848 	str.w	r0, [r7, #2120]	; 0x848
		for (int i = 0; i<tokens; i++){
 80031f8:	2300      	movs	r3, #0
 80031fa:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
 80031fe:	e145      	b.n	800348c <httpd_post_receive_data+0x374>
			if (jsoneq(buf_data, &t[i], "IPaddress") == 0) {
 8003200:	f107 020c 	add.w	r2, r7, #12
 8003204:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	4413      	add	r3, r2
 800320c:	4a6c      	ldr	r2, [pc, #432]	; (80033c0 <httpd_post_receive_data+0x2a8>)
 800320e:	4619      	mov	r1, r3
 8003210:	4866      	ldr	r0, [pc, #408]	; (80033ac <httpd_post_receive_data+0x294>)
 8003212:	f7ff ff13 	bl	800303c <jsoneq>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d148      	bne.n	80032ae <httpd_post_receive_data+0x196>
				buf_data[t[i+1].end] = '\0';
 800321c:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8003220:	3301      	adds	r3, #1
 8003222:	f107 020c 	add.w	r2, r7, #12
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	4413      	add	r3, r2
 800322a:	3308      	adds	r3, #8
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a5f      	ldr	r2, [pc, #380]	; (80033ac <httpd_post_receive_data+0x294>)
 8003230:	2100      	movs	r1, #0
 8003232:	54d1      	strb	r1, [r2, r3]
				memset(user_info.ip,0,16);
 8003234:	2210      	movs	r2, #16
 8003236:	2100      	movs	r1, #0
 8003238:	4862      	ldr	r0, [pc, #392]	; (80033c4 <httpd_post_receive_data+0x2ac>)
 800323a:	f01b ffbb 	bl	801f1b4 <memset>
				int len = mymin(16,t[i+1].end-t[i+1].start);
 800323e:	2310      	movs	r3, #16
 8003240:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
 8003244:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8003248:	3301      	adds	r3, #1
 800324a:	f107 020c 	add.w	r2, r7, #12
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	4413      	add	r3, r2
 8003252:	3308      	adds	r3, #8
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 800325a:	3301      	adds	r3, #1
 800325c:	f107 010c 	add.w	r1, r7, #12
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	440b      	add	r3, r1
 8003264:	3304      	adds	r3, #4
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 800326e:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 8003272:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8003276:	4293      	cmp	r3, r2
 8003278:	bfa8      	it	ge
 800327a:	4613      	movge	r3, r2
 800327c:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
				strncpy(user_info.ip,&buf_data[t[i+1].start],len);
 8003280:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8003284:	3301      	adds	r3, #1
 8003286:	f107 020c 	add.w	r2, r7, #12
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	4413      	add	r3, r2
 800328e:	3304      	adds	r3, #4
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a46      	ldr	r2, [pc, #280]	; (80033ac <httpd_post_receive_data+0x294>)
 8003294:	4413      	add	r3, r2
 8003296:	f8d7 2820 	ldr.w	r2, [r7, #2080]	; 0x820
 800329a:	4619      	mov	r1, r3
 800329c:	4849      	ldr	r0, [pc, #292]	; (80033c4 <httpd_post_receive_data+0x2ac>)
 800329e:	f01c fada 	bl	801f856 <strncpy>
				i++;
 80032a2:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 80032a6:	3301      	adds	r3, #1
 80032a8:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
				continue;
 80032ac:	e0e9      	b.n	8003482 <httpd_post_receive_data+0x36a>
			}
			if (jsoneq(buf_data, &t[i], "NetMask") == 0) {
 80032ae:	f107 020c 	add.w	r2, r7, #12
 80032b2:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	4413      	add	r3, r2
 80032ba:	4a43      	ldr	r2, [pc, #268]	; (80033c8 <httpd_post_receive_data+0x2b0>)
 80032bc:	4619      	mov	r1, r3
 80032be:	483b      	ldr	r0, [pc, #236]	; (80033ac <httpd_post_receive_data+0x294>)
 80032c0:	f7ff febc 	bl	800303c <jsoneq>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d148      	bne.n	800335c <httpd_post_receive_data+0x244>
				buf_data[t[i+1].end] = '\0';
 80032ca:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 80032ce:	3301      	adds	r3, #1
 80032d0:	f107 020c 	add.w	r2, r7, #12
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	4413      	add	r3, r2
 80032d8:	3308      	adds	r3, #8
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a33      	ldr	r2, [pc, #204]	; (80033ac <httpd_post_receive_data+0x294>)
 80032de:	2100      	movs	r1, #0
 80032e0:	54d1      	strb	r1, [r2, r3]
				memset(user_info.netmask,0,16);
 80032e2:	2210      	movs	r2, #16
 80032e4:	2100      	movs	r1, #0
 80032e6:	4839      	ldr	r0, [pc, #228]	; (80033cc <httpd_post_receive_data+0x2b4>)
 80032e8:	f01b ff64 	bl	801f1b4 <memset>
				int len = mymin(16,t[i+1].end-t[i+1].start);
 80032ec:	2310      	movs	r3, #16
 80032ee:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 80032f2:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 80032f6:	3301      	adds	r3, #1
 80032f8:	f107 020c 	add.w	r2, r7, #12
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	4413      	add	r3, r2
 8003300:	3308      	adds	r3, #8
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8003308:	3301      	adds	r3, #1
 800330a:	f107 010c 	add.w	r1, r7, #12
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	440b      	add	r3, r1
 8003312:	3304      	adds	r3, #4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
 800331c:	f8d7 2830 	ldr.w	r2, [r7, #2096]	; 0x830
 8003320:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8003324:	4293      	cmp	r3, r2
 8003326:	bfa8      	it	ge
 8003328:	4613      	movge	r3, r2
 800332a:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
				strncpy(user_info.netmask,&buf_data[t[i+1].start],len);
 800332e:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8003332:	3301      	adds	r3, #1
 8003334:	f107 020c 	add.w	r2, r7, #12
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	4413      	add	r3, r2
 800333c:	3304      	adds	r3, #4
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1a      	ldr	r2, [pc, #104]	; (80033ac <httpd_post_receive_data+0x294>)
 8003342:	4413      	add	r3, r2
 8003344:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 8003348:	4619      	mov	r1, r3
 800334a:	4820      	ldr	r0, [pc, #128]	; (80033cc <httpd_post_receive_data+0x2b4>)
 800334c:	f01c fa83 	bl	801f856 <strncpy>
				i++;
 8003350:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8003354:	3301      	adds	r3, #1
 8003356:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
				continue;
 800335a:	e092      	b.n	8003482 <httpd_post_receive_data+0x36a>
			}
			if (jsoneq(buf_data, &t[i], "Timezone") == 0) {
 800335c:	f107 020c 	add.w	r2, r7, #12
 8003360:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	4413      	add	r3, r2
 8003368:	4a19      	ldr	r2, [pc, #100]	; (80033d0 <httpd_post_receive_data+0x2b8>)
 800336a:	4619      	mov	r1, r3
 800336c:	480f      	ldr	r0, [pc, #60]	; (80033ac <httpd_post_receive_data+0x294>)
 800336e:	f7ff fe65 	bl	800303c <jsoneq>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d12d      	bne.n	80033d4 <httpd_post_receive_data+0x2bc>
				user_info.zone = atoi(&buf_data[t[i+1].start]);
 8003378:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 800337c:	3301      	adds	r3, #1
 800337e:	f107 020c 	add.w	r2, r7, #12
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	4413      	add	r3, r2
 8003386:	3304      	adds	r3, #4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a08      	ldr	r2, [pc, #32]	; (80033ac <httpd_post_receive_data+0x294>)
 800338c:	4413      	add	r3, r2
 800338e:	4618      	mov	r0, r3
 8003390:	f01b fdbc 	bl	801ef0c <atoi>
 8003394:	4603      	mov	r3, r0
 8003396:	4a0b      	ldr	r2, [pc, #44]	; (80033c4 <httpd_post_receive_data+0x2ac>)
 8003398:	6113      	str	r3, [r2, #16]
				i++;
 800339a:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 800339e:	3301      	adds	r3, #1
 80033a0:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
				continue;
 80033a4:	e06d      	b.n	8003482 <httpd_post_receive_data+0x36a>
 80033a6:	bf00      	nop
 80033a8:	20000578 	.word	0x20000578
 80033ac:	20004de0 	.word	0x20004de0
 80033b0:	08022d58 	.word	0x08022d58
 80033b4:	08022d70 	.word	0x08022d70
 80033b8:	08022d7c 	.word	0x08022d7c
 80033bc:	20000570 	.word	0x20000570
 80033c0:	08022da4 	.word	0x08022da4
 80033c4:	20004b18 	.word	0x20004b18
 80033c8:	08022db0 	.word	0x08022db0
 80033cc:	20004c2b 	.word	0x20004c2b
 80033d0:	08022db8 	.word	0x08022db8
			}
			if (jsoneq(buf_data, &t[i], "contacts") == 0) {
 80033d4:	f107 020c 	add.w	r2, r7, #12
 80033d8:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	4413      	add	r3, r2
 80033e0:	4a4b      	ldr	r2, [pc, #300]	; (8003510 <httpd_post_receive_data+0x3f8>)
 80033e2:	4619      	mov	r1, r3
 80033e4:	484b      	ldr	r0, [pc, #300]	; (8003514 <httpd_post_receive_data+0x3fc>)
 80033e6:	f7ff fe29 	bl	800303c <jsoneq>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d148      	bne.n	8003482 <httpd_post_receive_data+0x36a>
				memset(user_info.contacts,0,INFOLEN);
 80033f0:	22ff      	movs	r2, #255	; 0xff
 80033f2:	2100      	movs	r1, #0
 80033f4:	4848      	ldr	r0, [pc, #288]	; (8003518 <httpd_post_receive_data+0x400>)
 80033f6:	f01b fedd 	bl	801f1b4 <memset>
				buf_data[t[i+1].end] = '\0';
 80033fa:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 80033fe:	3301      	adds	r3, #1
 8003400:	f107 020c 	add.w	r2, r7, #12
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	4413      	add	r3, r2
 8003408:	3308      	adds	r3, #8
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a41      	ldr	r2, [pc, #260]	; (8003514 <httpd_post_receive_data+0x3fc>)
 800340e:	2100      	movs	r1, #0
 8003410:	54d1      	strb	r1, [r2, r3]
				int len = mymin(INFOLEN,t[i+1].end-t[i+1].start);
 8003412:	23ff      	movs	r3, #255	; 0xff
 8003414:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
 8003418:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 800341c:	3301      	adds	r3, #1
 800341e:	f107 020c 	add.w	r2, r7, #12
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	4413      	add	r3, r2
 8003426:	3308      	adds	r3, #8
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 800342e:	3301      	adds	r3, #1
 8003430:	f107 010c 	add.w	r1, r7, #12
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	440b      	add	r3, r1
 8003438:	3304      	adds	r3, #4
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 8003442:	f8d7 283c 	ldr.w	r2, [r7, #2108]	; 0x83c
 8003446:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 800344a:	4293      	cmp	r3, r2
 800344c:	bfa8      	it	ge
 800344e:	4613      	movge	r3, r2
 8003450:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
				strncpy(user_info.contacts,&buf_data[t[i+1].start],len);
 8003454:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8003458:	3301      	adds	r3, #1
 800345a:	f107 020c 	add.w	r2, r7, #12
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	4413      	add	r3, r2
 8003462:	3304      	adds	r3, #4
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2b      	ldr	r2, [pc, #172]	; (8003514 <httpd_post_receive_data+0x3fc>)
 8003468:	4413      	add	r3, r2
 800346a:	f8d7 2838 	ldr.w	r2, [r7, #2104]	; 0x838
 800346e:	4619      	mov	r1, r3
 8003470:	4829      	ldr	r0, [pc, #164]	; (8003518 <httpd_post_receive_data+0x400>)
 8003472:	f01c f9f0 	bl	801f856 <strncpy>
				i++;
 8003476:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 800347a:	3301      	adds	r3, #1
 800347c:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
				continue;
 8003480:	bf00      	nop
		for (int i = 0; i<tokens; i++){
 8003482:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8003486:	3301      	adds	r3, #1
 8003488:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
 800348c:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 8003490:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 8003494:	429a      	cmp	r2, r3
 8003496:	f6ff aeb3 	blt.w	8003200 <httpd_post_receive_data+0xe8>
			}
		}
		//setIPaddr
		ip4_addr_t add;
		inet_aton(user_info.ip, &add);
 800349a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800349e:	4619      	mov	r1, r3
 80034a0:	481e      	ldr	r0, [pc, #120]	; (800351c <httpd_post_receive_data+0x404>)
 80034a2:	f019 fe17 	bl	801d0d4 <ip4addr_aton>
		setIP(add.addr);
 80034a6:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 80034aa:	4618      	mov	r0, r3
 80034ac:	f007 fc74 	bl	800ad98 <setIP>
		//setNetMask
		ip4_addr_t mask;
		inet_aton(user_info.netmask, &mask);
 80034b0:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 80034b4:	4619      	mov	r1, r3
 80034b6:	481a      	ldr	r0, [pc, #104]	; (8003520 <httpd_post_receive_data+0x408>)
 80034b8:	f019 fe0c 	bl	801d0d4 <ip4addr_aton>
		setNetmask(mask.addr);
 80034bc:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80034c0:	4618      	mov	r0, r3
 80034c2:	f007 fc7b 	bl	800adbc <setNetmask>

        clearFlash();
 80034c6:	f7fd fda1 	bl	800100c <clearFlash>
        int offset=0;
 80034ca:	2300      	movs	r3, #0
 80034cc:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
        WriteDeviceAddressOffset((char*) &user_info, sizeof(user_info), offset);
 80034d0:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80034d4:	f44f 7192 	mov.w	r1, #292	; 0x124
 80034d8:	4810      	ldr	r0, [pc, #64]	; (800351c <httpd_post_receive_data+0x404>)
 80034da:	f7fd fdbb 	bl	8001054 <WriteDeviceAddressOffset>
        offset+=sizeof(user_info);
 80034de:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 80034e2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80034e6:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
		/* not returning ERR_OK aborts the connection, so return ERR_OK unless the
       connection is unknown */
		ret = ERR_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f887 3857 	strb.w	r3, [r7, #2135]	; 0x857
 80034f0:	e002      	b.n	80034f8 <httpd_post_receive_data+0x3e0>
	}else {
		ret = ERR_VAL;
 80034f2:	23fa      	movs	r3, #250	; 0xfa
 80034f4:	f887 3857 	strb.w	r3, [r7, #2135]	; 0x857
	}

	/* this function must ALWAYS free the pbuf it is passed or it will leak memory */
	pbuf_free(p);
 80034f8:	463b      	mov	r3, r7
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	f011 f878 	bl	80145f0 <pbuf_free>
	//ret = ERR_OK;
	return ret;
 8003500:	f997 3857 	ldrsb.w	r3, [r7, #2135]	; 0x857
}
 8003504:	4618      	mov	r0, r3
 8003506:	f607 0758 	addw	r7, r7, #2136	; 0x858
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	08022dc4 	.word	0x08022dc4
 8003514:	20004de0 	.word	0x20004de0
 8003518:	20004b2c 	.word	0x20004b2c
 800351c:	20004b18 	.word	0x20004b18
 8003520:	20004c2b 	.word	0x20004c2b

08003524 <httpd_post_finished>:

void
httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	4613      	mov	r3, r2
 8003530:	80fb      	strh	r3, [r7, #6]
	/* default page is "login failed" */
	snprintf(response_uri, response_uri_len, "/404.html");
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	4a0f      	ldr	r2, [pc, #60]	; (8003574 <httpd_post_finished+0x50>)
 8003536:	4619      	mov	r1, r3
 8003538:	68b8      	ldr	r0, [r7, #8]
 800353a:	f01c f919 	bl	801f770 <sniprintf>
	if (current_connection == connection) {
 800353e:	4b0e      	ldr	r3, [pc, #56]	; (8003578 <httpd_post_finished+0x54>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	429a      	cmp	r2, r3
 8003546:	d110      	bne.n	800356a <httpd_post_finished+0x46>
		if (valid_connection == connection) {
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <httpd_post_finished+0x58>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	429a      	cmp	r2, r3
 8003550:	d105      	bne.n	800355e <httpd_post_finished+0x3a>
			/* login succeeded */
			snprintf(response_uri, response_uri_len, "/info.html");
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	4a0a      	ldr	r2, [pc, #40]	; (8003580 <httpd_post_finished+0x5c>)
 8003556:	4619      	mov	r1, r3
 8003558:	68b8      	ldr	r0, [r7, #8]
 800355a:	f01c f909 	bl	801f770 <sniprintf>
		}
		current_connection = NULL;
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <httpd_post_finished+0x54>)
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
		valid_connection = NULL;
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <httpd_post_finished+0x58>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
	}
}
 800356a:	bf00      	nop
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	08022dd0 	.word	0x08022dd0
 8003578:	20000570 	.word	0x20000570
 800357c:	20000574 	.word	0x20000574
 8003580:	08022d4c 	.word	0x08022d4c

08003584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	607b      	str	r3, [r7, #4]
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_MspInit+0x54>)
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	4a11      	ldr	r2, [pc, #68]	; (80035d8 <HAL_MspInit+0x54>)
 8003594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003598:	6453      	str	r3, [r2, #68]	; 0x44
 800359a:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <HAL_MspInit+0x54>)
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a2:	607b      	str	r3, [r7, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_MspInit+0x54>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <HAL_MspInit+0x54>)
 80035b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b4:	6413      	str	r3, [r2, #64]	; 0x40
 80035b6:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <HAL_MspInit+0x54>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035c2:	2200      	movs	r2, #0
 80035c4:	210f      	movs	r1, #15
 80035c6:	f06f 0001 	mvn.w	r0, #1
 80035ca:	f000 fbdf 	bl	8003d8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40023800 	.word	0x40023800

080035dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a05      	ldr	r2, [pc, #20]	; (8003600 <HAL_RTC_MspInit+0x24>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d102      	bne.n	80035f4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80035ee:	4b05      	ldr	r3, [pc, #20]	; (8003604 <HAL_RTC_MspInit+0x28>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	40002800 	.word	0x40002800
 8003604:	42470e3c 	.word	0x42470e3c

08003608 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08a      	sub	sp, #40	; 0x28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003610:	f107 0314 	add.w	r3, r7, #20
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	609a      	str	r2, [r3, #8]
 800361c:	60da      	str	r2, [r3, #12]
 800361e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a19      	ldr	r2, [pc, #100]	; (800368c <HAL_SPI_MspInit+0x84>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d12c      	bne.n	8003684 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	4b18      	ldr	r3, [pc, #96]	; (8003690 <HAL_SPI_MspInit+0x88>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	4a17      	ldr	r2, [pc, #92]	; (8003690 <HAL_SPI_MspInit+0x88>)
 8003634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003638:	6413      	str	r3, [r2, #64]	; 0x40
 800363a:	4b15      	ldr	r3, [pc, #84]	; (8003690 <HAL_SPI_MspInit+0x88>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	4b11      	ldr	r3, [pc, #68]	; (8003690 <HAL_SPI_MspInit+0x88>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	4a10      	ldr	r2, [pc, #64]	; (8003690 <HAL_SPI_MspInit+0x88>)
 8003650:	f043 0304 	orr.w	r3, r3, #4
 8003654:	6313      	str	r3, [r2, #48]	; 0x30
 8003656:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <HAL_SPI_MspInit+0x88>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003662:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003668:	2302      	movs	r3, #2
 800366a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366c:	2300      	movs	r3, #0
 800366e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003670:	2303      	movs	r3, #3
 8003672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003674:	2306      	movs	r3, #6
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003678:	f107 0314 	add.w	r3, r7, #20
 800367c:	4619      	mov	r1, r3
 800367e:	4805      	ldr	r0, [pc, #20]	; (8003694 <HAL_SPI_MspInit+0x8c>)
 8003680:	f001 ff2a 	bl	80054d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003684:	bf00      	nop
 8003686:	3728      	adds	r7, #40	; 0x28
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40003c00 	.word	0x40003c00
 8003690:	40023800 	.word	0x40023800
 8003694:	40020800 	.word	0x40020800

08003698 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a8:	d115      	bne.n	80036d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <HAL_TIM_Base_MspInit+0x48>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	4a0b      	ldr	r2, [pc, #44]	; (80036e0 <HAL_TIM_Base_MspInit+0x48>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ba:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_TIM_Base_MspInit+0x48>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80036c6:	2200      	movs	r2, #0
 80036c8:	2105      	movs	r1, #5
 80036ca:	201c      	movs	r0, #28
 80036cc:	f000 fb5e 	bl	8003d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036d0:	201c      	movs	r0, #28
 80036d2:	f000 fb77 	bl	8003dc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40023800 	.word	0x40023800

080036e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08c      	sub	sp, #48	; 0x30
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ec:	f107 031c 	add.w	r3, r7, #28
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	60da      	str	r2, [r3, #12]
 80036fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a36      	ldr	r2, [pc, #216]	; (80037dc <HAL_UART_MspInit+0xf8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d134      	bne.n	8003770 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	4b35      	ldr	r3, [pc, #212]	; (80037e0 <HAL_UART_MspInit+0xfc>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	4a34      	ldr	r2, [pc, #208]	; (80037e0 <HAL_UART_MspInit+0xfc>)
 8003710:	f043 0310 	orr.w	r3, r3, #16
 8003714:	6453      	str	r3, [r2, #68]	; 0x44
 8003716:	4b32      	ldr	r3, [pc, #200]	; (80037e0 <HAL_UART_MspInit+0xfc>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	61bb      	str	r3, [r7, #24]
 8003720:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	4b2e      	ldr	r3, [pc, #184]	; (80037e0 <HAL_UART_MspInit+0xfc>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	4a2d      	ldr	r2, [pc, #180]	; (80037e0 <HAL_UART_MspInit+0xfc>)
 800372c:	f043 0302 	orr.w	r3, r3, #2
 8003730:	6313      	str	r3, [r2, #48]	; 0x30
 8003732:	4b2b      	ldr	r3, [pc, #172]	; (80037e0 <HAL_UART_MspInit+0xfc>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800373e:	23c0      	movs	r3, #192	; 0xc0
 8003740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003742:	2302      	movs	r3, #2
 8003744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003746:	2300      	movs	r3, #0
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374a:	2303      	movs	r3, #3
 800374c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800374e:	2307      	movs	r3, #7
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003752:	f107 031c 	add.w	r3, r7, #28
 8003756:	4619      	mov	r1, r3
 8003758:	4822      	ldr	r0, [pc, #136]	; (80037e4 <HAL_UART_MspInit+0x100>)
 800375a:	f001 febd 	bl	80054d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800375e:	2200      	movs	r2, #0
 8003760:	2105      	movs	r1, #5
 8003762:	2025      	movs	r0, #37	; 0x25
 8003764:	f000 fb12 	bl	8003d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003768:	2025      	movs	r0, #37	; 0x25
 800376a:	f000 fb2b 	bl	8003dc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800376e:	e030      	b.n	80037d2 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1c      	ldr	r2, [pc, #112]	; (80037e8 <HAL_UART_MspInit+0x104>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d12b      	bne.n	80037d2 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	4b18      	ldr	r3, [pc, #96]	; (80037e0 <HAL_UART_MspInit+0xfc>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	4a17      	ldr	r2, [pc, #92]	; (80037e0 <HAL_UART_MspInit+0xfc>)
 8003784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003788:	6413      	str	r3, [r2, #64]	; 0x40
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <HAL_UART_MspInit+0xfc>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <HAL_UART_MspInit+0xfc>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	4a10      	ldr	r2, [pc, #64]	; (80037e0 <HAL_UART_MspInit+0xfc>)
 80037a0:	f043 0308 	orr.w	r3, r3, #8
 80037a4:	6313      	str	r3, [r2, #48]	; 0x30
 80037a6:	4b0e      	ldr	r3, [pc, #56]	; (80037e0 <HAL_UART_MspInit+0xfc>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80037b2:	2360      	movs	r3, #96	; 0x60
 80037b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b6:	2302      	movs	r3, #2
 80037b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037be:	2303      	movs	r3, #3
 80037c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037c2:	2307      	movs	r3, #7
 80037c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037c6:	f107 031c 	add.w	r3, r7, #28
 80037ca:	4619      	mov	r1, r3
 80037cc:	4807      	ldr	r0, [pc, #28]	; (80037ec <HAL_UART_MspInit+0x108>)
 80037ce:	f001 fe83 	bl	80054d8 <HAL_GPIO_Init>
}
 80037d2:	bf00      	nop
 80037d4:	3730      	adds	r7, #48	; 0x30
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40011000 	.word	0x40011000
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40020400 	.word	0x40020400
 80037e8:	40004400 	.word	0x40004400
 80037ec:	40020c00 	.word	0x40020c00

080037f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08c      	sub	sp, #48	; 0x30
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003800:	2200      	movs	r2, #0
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	2019      	movs	r0, #25
 8003806:	f000 fac1 	bl	8003d8c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800380a:	2019      	movs	r0, #25
 800380c:	f000 fada 	bl	8003dc4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003810:	2300      	movs	r3, #0
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	4b1f      	ldr	r3, [pc, #124]	; (8003894 <HAL_InitTick+0xa4>)
 8003816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003818:	4a1e      	ldr	r2, [pc, #120]	; (8003894 <HAL_InitTick+0xa4>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	6453      	str	r3, [r2, #68]	; 0x44
 8003820:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <HAL_InitTick+0xa4>)
 8003822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800382c:	f107 0210 	add.w	r2, r7, #16
 8003830:	f107 0314 	add.w	r3, r7, #20
 8003834:	4611      	mov	r1, r2
 8003836:	4618      	mov	r0, r3
 8003838:	f003 fe14 	bl	8007464 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800383c:	f003 fdfe 	bl	800743c <HAL_RCC_GetPCLK2Freq>
 8003840:	4603      	mov	r3, r0
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003848:	4a13      	ldr	r2, [pc, #76]	; (8003898 <HAL_InitTick+0xa8>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	0c9b      	lsrs	r3, r3, #18
 8003850:	3b01      	subs	r3, #1
 8003852:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003854:	4b11      	ldr	r3, [pc, #68]	; (800389c <HAL_InitTick+0xac>)
 8003856:	4a12      	ldr	r2, [pc, #72]	; (80038a0 <HAL_InitTick+0xb0>)
 8003858:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800385a:	4b10      	ldr	r3, [pc, #64]	; (800389c <HAL_InitTick+0xac>)
 800385c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003860:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003862:	4a0e      	ldr	r2, [pc, #56]	; (800389c <HAL_InitTick+0xac>)
 8003864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003866:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003868:	4b0c      	ldr	r3, [pc, #48]	; (800389c <HAL_InitTick+0xac>)
 800386a:	2200      	movs	r2, #0
 800386c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800386e:	4b0b      	ldr	r3, [pc, #44]	; (800389c <HAL_InitTick+0xac>)
 8003870:	2200      	movs	r2, #0
 8003872:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003874:	4809      	ldr	r0, [pc, #36]	; (800389c <HAL_InitTick+0xac>)
 8003876:	f004 fac4 	bl	8007e02 <HAL_TIM_Base_Init>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d104      	bne.n	800388a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003880:	4806      	ldr	r0, [pc, #24]	; (800389c <HAL_InitTick+0xac>)
 8003882:	f004 fb0d 	bl	8007ea0 <HAL_TIM_Base_Start_IT>
 8003886:	4603      	mov	r3, r0
 8003888:	e000      	b.n	800388c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
}
 800388c:	4618      	mov	r0, r3
 800388e:	3730      	adds	r7, #48	; 0x30
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40023800 	.word	0x40023800
 8003898:	431bde83 	.word	0x431bde83
 800389c:	20004fe0 	.word	0x20004fe0
 80038a0:	40010000 	.word	0x40010000

080038a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038a8:	e7fe      	b.n	80038a8 <NMI_Handler+0x4>

080038aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038aa:	b480      	push	{r7}
 80038ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038ae:	e7fe      	b.n	80038ae <HardFault_Handler+0x4>

080038b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038b4:	e7fe      	b.n	80038b4 <MemManage_Handler+0x4>

080038b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038b6:	b480      	push	{r7}
 80038b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038ba:	e7fe      	b.n	80038ba <BusFault_Handler+0x4>

080038bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038c0:	e7fe      	b.n	80038c0 <UsageFault_Handler+0x4>

080038c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038c2:	b480      	push	{r7}
 80038c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038c6:	bf00      	nop
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038d4:	4802      	ldr	r0, [pc, #8]	; (80038e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80038d6:	f004 fb53 	bl	8007f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20004fe0 	.word	0x20004fe0

080038e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038e8:	4802      	ldr	r0, [pc, #8]	; (80038f4 <TIM2_IRQHandler+0x10>)
 80038ea:	f004 fb49 	bl	8007f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20004d08 	.word	0x20004d08

080038f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80038fc:	4802      	ldr	r0, [pc, #8]	; (8003908 <USART1_IRQHandler+0x10>)
 80038fe:	f005 f811 	bl	8008924 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20004c98 	.word	0x20004c98

0800390c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003910:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003914:	f001 ff96 	bl	8005844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003918:	bf00      	nop
 800391a:	bd80      	pop	{r7, pc}

0800391c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003920:	4802      	ldr	r0, [pc, #8]	; (800392c <ETH_IRQHandler+0x10>)
 8003922:	f000 fed3 	bl	80046cc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20006964 	.word	0x20006964

08003930 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003934:	4802      	ldr	r0, [pc, #8]	; (8003940 <OTG_FS_IRQHandler+0x10>)
 8003936:	f002 f8ed 	bl	8005b14 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	2000cdc8 	.word	0x2000cdc8

08003944 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
	return 1;
 8003948:	2301      	movs	r3, #1
}
 800394a:	4618      	mov	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <_kill>:

int _kill(int pid, int sig)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <_kill+0x20>)
 8003960:	2216      	movs	r2, #22
 8003962:	601a      	str	r2, [r3, #0]
	return -1;
 8003964:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	2000b8f0 	.word	0x2000b8f0

08003978 <_exit>:

void _exit (int status)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003980:	f04f 31ff 	mov.w	r1, #4294967295
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff ffe5 	bl	8003954 <_kill>
	while (1) {}		/* Make sure we hang here */
 800398a:	e7fe      	b.n	800398a <_exit+0x12>

0800398c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	e00a      	b.n	80039b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800399e:	f3af 8000 	nop.w
 80039a2:	4601      	mov	r1, r0
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	60ba      	str	r2, [r7, #8]
 80039aa:	b2ca      	uxtb	r2, r1
 80039ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	3301      	adds	r3, #1
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	dbf0      	blt.n	800399e <_read+0x12>
	}

return len;
 80039bc:	687b      	ldr	r3, [r7, #4]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b086      	sub	sp, #24
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	60f8      	str	r0, [r7, #12]
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	e009      	b.n	80039ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	60ba      	str	r2, [r7, #8]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	3301      	adds	r3, #1
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	dbf1      	blt.n	80039d8 <_write+0x12>
	}
	return len;
 80039f4:	687b      	ldr	r3, [r7, #4]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <_close>:

int _close(int file)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
	return -1;
 8003a06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a26:	605a      	str	r2, [r3, #4]
	return 0;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <_isatty>:

int _isatty(int file)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
	return 1;
 8003a3e:	2301      	movs	r3, #1
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
	return 0;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
	...

08003a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a70:	4a14      	ldr	r2, [pc, #80]	; (8003ac4 <_sbrk+0x5c>)
 8003a72:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <_sbrk+0x60>)
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a7c:	4b13      	ldr	r3, [pc, #76]	; (8003acc <_sbrk+0x64>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d102      	bne.n	8003a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a84:	4b11      	ldr	r3, [pc, #68]	; (8003acc <_sbrk+0x64>)
 8003a86:	4a12      	ldr	r2, [pc, #72]	; (8003ad0 <_sbrk+0x68>)
 8003a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a8a:	4b10      	ldr	r3, [pc, #64]	; (8003acc <_sbrk+0x64>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4413      	add	r3, r2
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d205      	bcs.n	8003aa4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003a98:	4b0e      	ldr	r3, [pc, #56]	; (8003ad4 <_sbrk+0x6c>)
 8003a9a:	220c      	movs	r2, #12
 8003a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa2:	e009      	b.n	8003ab8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003aa4:	4b09      	ldr	r3, [pc, #36]	; (8003acc <_sbrk+0x64>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aaa:	4b08      	ldr	r3, [pc, #32]	; (8003acc <_sbrk+0x64>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	4a06      	ldr	r2, [pc, #24]	; (8003acc <_sbrk+0x64>)
 8003ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	371c      	adds	r7, #28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	20020000 	.word	0x20020000
 8003ac8:	00000400 	.word	0x00000400
 8003acc:	20000580 	.word	0x20000580
 8003ad0:	2000d1e0 	.word	0x2000d1e0
 8003ad4:	2000b8f0 	.word	0x2000b8f0

08003ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003adc:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <SystemInit+0x20>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae2:	4a05      	ldr	r2, [pc, #20]	; (8003af8 <SystemInit+0x20>)
 8003ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	e000ed00 	.word	0xe000ed00

08003afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b00:	480d      	ldr	r0, [pc, #52]	; (8003b38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b02:	490e      	ldr	r1, [pc, #56]	; (8003b3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b04:	4a0e      	ldr	r2, [pc, #56]	; (8003b40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b08:	e002      	b.n	8003b10 <LoopCopyDataInit>

08003b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b0e:	3304      	adds	r3, #4

08003b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b14:	d3f9      	bcc.n	8003b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b16:	4a0b      	ldr	r2, [pc, #44]	; (8003b44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b18:	4c0b      	ldr	r4, [pc, #44]	; (8003b48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b1c:	e001      	b.n	8003b22 <LoopFillZerobss>

08003b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b20:	3204      	adds	r2, #4

08003b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b24:	d3fb      	bcc.n	8003b1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b26:	f7ff ffd7 	bl	8003ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b2a:	f01b f9f3 	bl	801ef14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b2e:	f7fd fb03 	bl	8001138 <main>
  bx  lr    
 8003b32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b3c:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8003b40:	08027a08 	.word	0x08027a08
  ldr r2, =_sbss
 8003b44:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8003b48:	2000d1dc 	.word	0x2000d1dc

08003b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b4c:	e7fe      	b.n	8003b4c <ADC_IRQHandler>
	...

08003b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b54:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <HAL_Init+0x40>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a0d      	ldr	r2, [pc, #52]	; (8003b90 <HAL_Init+0x40>)
 8003b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_Init+0x40>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <HAL_Init+0x40>)
 8003b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b6c:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <HAL_Init+0x40>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a07      	ldr	r2, [pc, #28]	; (8003b90 <HAL_Init+0x40>)
 8003b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b78:	2003      	movs	r0, #3
 8003b7a:	f000 f8fc 	bl	8003d76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b7e:	2000      	movs	r0, #0
 8003b80:	f7ff fe36 	bl	80037f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b84:	f7ff fcfe 	bl	8003584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023c00 	.word	0x40023c00

08003b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <HAL_IncTick+0x20>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <HAL_IncTick+0x24>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <HAL_IncTick+0x24>)
 8003ba6:	6013      	str	r3, [r2, #0]
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20000024 	.word	0x20000024
 8003bb8:	20005028 	.word	0x20005028

08003bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <HAL_GetTick+0x14>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20005028 	.word	0x20005028

08003bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bdc:	f7ff ffee 	bl	8003bbc <HAL_GetTick>
 8003be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bec:	d005      	beq.n	8003bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bee:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <HAL_Delay+0x44>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bfa:	bf00      	nop
 8003bfc:	f7ff ffde 	bl	8003bbc <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d8f7      	bhi.n	8003bfc <HAL_Delay+0x28>
  {
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000024 	.word	0x20000024

08003c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c2c:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <__NVIC_SetPriorityGrouping+0x44>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c38:	4013      	ands	r3, r2
 8003c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c4e:	4a04      	ldr	r2, [pc, #16]	; (8003c60 <__NVIC_SetPriorityGrouping+0x44>)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	60d3      	str	r3, [r2, #12]
}
 8003c54:	bf00      	nop
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <__NVIC_GetPriorityGrouping+0x18>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	0a1b      	lsrs	r3, r3, #8
 8003c6e:	f003 0307 	and.w	r3, r3, #7
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	e000ed00 	.word	0xe000ed00

08003c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	db0b      	blt.n	8003caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	f003 021f 	and.w	r2, r3, #31
 8003c98:	4907      	ldr	r1, [pc, #28]	; (8003cb8 <__NVIC_EnableIRQ+0x38>)
 8003c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	e000e100 	.word	0xe000e100

08003cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	6039      	str	r1, [r7, #0]
 8003cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	db0a      	blt.n	8003ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	490c      	ldr	r1, [pc, #48]	; (8003d08 <__NVIC_SetPriority+0x4c>)
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	0112      	lsls	r2, r2, #4
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	440b      	add	r3, r1
 8003ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ce4:	e00a      	b.n	8003cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	4908      	ldr	r1, [pc, #32]	; (8003d0c <__NVIC_SetPriority+0x50>)
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	3b04      	subs	r3, #4
 8003cf4:	0112      	lsls	r2, r2, #4
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	761a      	strb	r2, [r3, #24]
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	e000e100 	.word	0xe000e100
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b089      	sub	sp, #36	; 0x24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f1c3 0307 	rsb	r3, r3, #7
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	bf28      	it	cs
 8003d2e:	2304      	movcs	r3, #4
 8003d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	3304      	adds	r3, #4
 8003d36:	2b06      	cmp	r3, #6
 8003d38:	d902      	bls.n	8003d40 <NVIC_EncodePriority+0x30>
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	3b03      	subs	r3, #3
 8003d3e:	e000      	b.n	8003d42 <NVIC_EncodePriority+0x32>
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d44:	f04f 32ff 	mov.w	r2, #4294967295
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43da      	mvns	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	401a      	ands	r2, r3
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d58:	f04f 31ff 	mov.w	r1, #4294967295
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d62:	43d9      	mvns	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d68:	4313      	orrs	r3, r2
         );
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3724      	adds	r7, #36	; 0x24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff ff4c 	bl	8003c1c <__NVIC_SetPriorityGrouping>
}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d9e:	f7ff ff61 	bl	8003c64 <__NVIC_GetPriorityGrouping>
 8003da2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	6978      	ldr	r0, [r7, #20]
 8003daa:	f7ff ffb1 	bl	8003d10 <NVIC_EncodePriority>
 8003dae:	4602      	mov	r2, r0
 8003db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db4:	4611      	mov	r1, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff ff80 	bl	8003cbc <__NVIC_SetPriority>
}
 8003dbc:	bf00      	nop
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff ff54 	bl	8003c80 <__NVIC_EnableIRQ>
}
 8003dd8:	bf00      	nop
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003dee:	f7ff fee5 	bl	8003bbc <HAL_GetTick>
 8003df2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d008      	beq.n	8003e12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2280      	movs	r2, #128	; 0x80
 8003e04:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e052      	b.n	8003eb8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0216 	bic.w	r2, r2, #22
 8003e20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d103      	bne.n	8003e42 <HAL_DMA_Abort+0x62>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0208 	bic.w	r2, r2, #8
 8003e50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0201 	bic.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e62:	e013      	b.n	8003e8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e64:	f7ff feaa 	bl	8003bbc <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b05      	cmp	r3, #5
 8003e70:	d90c      	bls.n	8003e8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e015      	b.n	8003eb8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e4      	bne.n	8003e64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9e:	223f      	movs	r2, #63	; 0x3f
 8003ea0:	409a      	lsls	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d004      	beq.n	8003ede <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2280      	movs	r2, #128	; 0x80
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e00c      	b.n	8003ef8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2205      	movs	r2, #5
 8003ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0201 	bic.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b088      	sub	sp, #32
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61fb      	str	r3, [r7, #28]
 8003f10:	2300      	movs	r3, #0
 8003f12:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8003f14:	4baa      	ldr	r3, [pc, #680]	; (80041c0 <HAL_ETH_Init+0x2bc>)
 8003f16:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e183      	b.n	8004232 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f007 f87c 	bl	800b03c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f44:	2300      	movs	r3, #0
 8003f46:	60bb      	str	r3, [r7, #8]
 8003f48:	4b9e      	ldr	r3, [pc, #632]	; (80041c4 <HAL_ETH_Init+0x2c0>)
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	4a9d      	ldr	r2, [pc, #628]	; (80041c4 <HAL_ETH_Init+0x2c0>)
 8003f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f52:	6453      	str	r3, [r2, #68]	; 0x44
 8003f54:	4b9b      	ldr	r3, [pc, #620]	; (80041c4 <HAL_ETH_Init+0x2c0>)
 8003f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003f60:	4b99      	ldr	r3, [pc, #612]	; (80041c8 <HAL_ETH_Init+0x2c4>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	4a98      	ldr	r2, [pc, #608]	; (80041c8 <HAL_ETH_Init+0x2c4>)
 8003f66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f6a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003f6c:	4b96      	ldr	r3, [pc, #600]	; (80041c8 <HAL_ETH_Init+0x2c4>)
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	4994      	ldr	r1, [pc, #592]	; (80041c8 <HAL_ETH_Init+0x2c4>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0201 	orr.w	r2, r2, #1
 8003f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f90:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003f92:	f7ff fe13 	bl	8003bbc <HAL_GetTick>
 8003f96:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003f98:	e011      	b.n	8003fbe <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003f9a:	f7ff fe0f 	bl	8003bbc <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003fa8:	d909      	bls.n	8003fbe <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2203      	movs	r2, #3
 8003fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e139      	b.n	8004232 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e4      	bne.n	8003f9a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f023 031c 	bic.w	r3, r3, #28
 8003fde:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003fe0:	f003 fa0c 	bl	80073fc <HAL_RCC_GetHCLKFreq>
 8003fe4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	4a78      	ldr	r2, [pc, #480]	; (80041cc <HAL_ETH_Init+0x2c8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d908      	bls.n	8004000 <HAL_ETH_Init+0xfc>
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	4a77      	ldr	r2, [pc, #476]	; (80041d0 <HAL_ETH_Init+0x2cc>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d804      	bhi.n	8004000 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f043 0308 	orr.w	r3, r3, #8
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	e027      	b.n	8004050 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	4a73      	ldr	r2, [pc, #460]	; (80041d0 <HAL_ETH_Init+0x2cc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d908      	bls.n	800401a <HAL_ETH_Init+0x116>
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	4a6d      	ldr	r2, [pc, #436]	; (80041c0 <HAL_ETH_Init+0x2bc>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d204      	bcs.n	800401a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f043 030c 	orr.w	r3, r3, #12
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	e01a      	b.n	8004050 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	4a68      	ldr	r2, [pc, #416]	; (80041c0 <HAL_ETH_Init+0x2bc>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d303      	bcc.n	800402a <HAL_ETH_Init+0x126>
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	4a6b      	ldr	r2, [pc, #428]	; (80041d4 <HAL_ETH_Init+0x2d0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d911      	bls.n	800404e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	4a69      	ldr	r2, [pc, #420]	; (80041d4 <HAL_ETH_Init+0x2d0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d908      	bls.n	8004044 <HAL_ETH_Init+0x140>
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	4a68      	ldr	r2, [pc, #416]	; (80041d8 <HAL_ETH_Init+0x2d4>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d804      	bhi.n	8004044 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	f043 0304 	orr.w	r3, r3, #4
 8004040:	61fb      	str	r3, [r7, #28]
 8004042:	e005      	b.n	8004050 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f043 0310 	orr.w	r3, r3, #16
 800404a:	61fb      	str	r3, [r7, #28]
 800404c:	e000      	b.n	8004050 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800404e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	69fa      	ldr	r2, [r7, #28]
 8004056:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004058:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800405c:	2100      	movs	r1, #0
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fc17 	bl	8004892 <HAL_ETH_WritePHYRegister>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00b      	beq.n	8004082 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800406e:	6939      	ldr	r1, [r7, #16]
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fca3 	bl	80049bc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e0d7      	b.n	8004232 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8004082:	20ff      	movs	r0, #255	; 0xff
 8004084:	f7ff fda6 	bl	8003bd4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 80a5 	beq.w	80041dc <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004092:	f7ff fd93 	bl	8003bbc <HAL_GetTick>
 8004096:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004098:	f107 030c 	add.w	r3, r7, #12
 800409c:	461a      	mov	r2, r3
 800409e:	2101      	movs	r1, #1
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fb8e 	bl	80047c2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80040a6:	f7ff fd89 	bl	8003bbc <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d90f      	bls.n	80040d8 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80040bc:	6939      	ldr	r1, [r7, #16]
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fc7c 	bl	80049bc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e0ac      	b.n	8004232 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0da      	beq.n	8004098 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80040e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040e6:	2100      	movs	r1, #0
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fbd2 	bl	8004892 <HAL_ETH_WritePHYRegister>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00b      	beq.n	800410c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80040f8:	6939      	ldr	r1, [r7, #16]
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fc5e 	bl	80049bc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004108:	2301      	movs	r3, #1
 800410a:	e092      	b.n	8004232 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800410c:	f7ff fd56 	bl	8003bbc <HAL_GetTick>
 8004110:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004112:	f107 030c 	add.w	r3, r7, #12
 8004116:	461a      	mov	r2, r3
 8004118:	2101      	movs	r1, #1
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fb51 	bl	80047c2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004120:	f7ff fd4c 	bl	8003bbc <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	f241 3288 	movw	r2, #5000	; 0x1388
 800412e:	4293      	cmp	r3, r2
 8004130:	d90f      	bls.n	8004152 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004136:	6939      	ldr	r1, [r7, #16]
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 fc3f 	bl	80049bc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e06f      	b.n	8004232 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0da      	beq.n	8004112 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800415c:	f107 030c 	add.w	r3, r7, #12
 8004160:	461a      	mov	r2, r3
 8004162:	2110      	movs	r1, #16
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fb2c 	bl	80047c2 <HAL_ETH_ReadPHYRegister>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00b      	beq.n	8004188 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004174:	6939      	ldr	r1, [r7, #16]
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fc20 	bl	80049bc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004184:	2301      	movs	r3, #1
 8004186:	e054      	b.n	8004232 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b00      	cmp	r3, #0
 8004190:	d004      	beq.n	800419c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004198:	60da      	str	r2, [r3, #12]
 800419a:	e002      	b.n	80041a2 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	609a      	str	r2, [r3, #8]
 80041b2:	e035      	b.n	8004220 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80041ba:	609a      	str	r2, [r3, #8]
 80041bc:	e030      	b.n	8004220 <HAL_ETH_Init+0x31c>
 80041be:	bf00      	nop
 80041c0:	03938700 	.word	0x03938700
 80041c4:	40023800 	.word	0x40023800
 80041c8:	40013800 	.word	0x40013800
 80041cc:	01312cff 	.word	0x01312cff
 80041d0:	02160ebf 	.word	0x02160ebf
 80041d4:	05f5e0ff 	.word	0x05f5e0ff
 80041d8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	08db      	lsrs	r3, r3, #3
 80041e2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	085b      	lsrs	r3, r3, #1
 80041ea:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80041ec:	4313      	orrs	r3, r2
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	461a      	mov	r2, r3
 80041f2:	2100      	movs	r1, #0
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fb4c 	bl	8004892 <HAL_ETH_WritePHYRegister>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00b      	beq.n	8004218 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004204:	6939      	ldr	r1, [r7, #16]
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 fbd8 	bl	80049bc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e00c      	b.n	8004232 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004218:	f640 70ff 	movw	r0, #4095	; 0xfff
 800421c:	f7ff fcda 	bl	8003bd4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004220:	6939      	ldr	r1, [r7, #16]
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fbca 	bl	80049bc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3720      	adds	r7, #32
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop

0800423c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_ETH_DMATxDescListInit+0x20>
 8004258:	2302      	movs	r3, #2
 800425a:	e052      	b.n	8004302 <HAL_ETH_DMATxDescListInit+0xc6>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	e030      	b.n	80042da <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	015b      	lsls	r3, r3, #5
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	4413      	add	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004288:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004290:	fb02 f303 	mul.w	r3, r2, r3
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	4413      	add	r3, r2
 8004298:	461a      	mov	r2, r3
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d105      	bne.n	80042b2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	3b01      	subs	r3, #1
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d208      	bcs.n	80042ce <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	3301      	adds	r3, #1
 80042c0:	015b      	lsls	r3, r3, #5
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	4413      	add	r3, r2
 80042c6:	461a      	mov	r2, r3
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	60da      	str	r2, [r3, #12]
 80042cc:	e002      	b.n	80042d4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	3301      	adds	r3, #1
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d3ca      	bcc.n	8004278 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ec:	3310      	adds	r3, #16
 80042ee:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800430e:	b480      	push	{r7}
 8004310:	b087      	sub	sp, #28
 8004312:	af00      	add	r7, sp, #0
 8004314:	60f8      	str	r0, [r7, #12]
 8004316:	60b9      	str	r1, [r7, #8]
 8004318:	607a      	str	r2, [r7, #4]
 800431a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <HAL_ETH_DMARxDescListInit+0x20>
 800432a:	2302      	movs	r3, #2
 800432c:	e056      	b.n	80043dc <HAL_ETH_DMARxDescListInit+0xce>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2202      	movs	r2, #2
 800433a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	e034      	b.n	80043b4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	015b      	lsls	r3, r3, #5
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	4413      	add	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800435a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004362:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	4413      	add	r3, r2
 8004372:	461a      	mov	r2, r3
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d105      	bne.n	800438c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	3b01      	subs	r3, #1
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	429a      	cmp	r2, r3
 8004394:	d208      	bcs.n	80043a8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	3301      	adds	r3, #1
 800439a:	015b      	lsls	r3, r3, #5
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	4413      	add	r3, r2
 80043a0:	461a      	mov	r2, r3
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	60da      	str	r2, [r3, #12]
 80043a6:	e002      	b.n	80043ae <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	3301      	adds	r3, #1
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d3c6      	bcc.n	800434a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c6:	330c      	adds	r3, #12
 80043c8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	371c      	adds	r7, #28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	2300      	movs	r3, #0
 80043fc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_ETH_TransmitFrame+0x24>
 8004408:	2302      	movs	r3, #2
 800440a:	e0cd      	b.n	80045a8 <HAL_ETH_TransmitFrame+0x1c0>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d109      	bne.n	8004436 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8004432:	2301      	movs	r3, #1
 8004434:	e0b8      	b.n	80045a8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	da09      	bge.n	8004454 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2212      	movs	r2, #18
 8004444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0a9      	b.n	80045a8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800445a:	4293      	cmp	r3, r2
 800445c:	d915      	bls.n	800448a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	4a54      	ldr	r2, [pc, #336]	; (80045b4 <HAL_ETH_TransmitFrame+0x1cc>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	0a9b      	lsrs	r3, r3, #10
 8004468:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	4b51      	ldr	r3, [pc, #324]	; (80045b4 <HAL_ETH_TransmitFrame+0x1cc>)
 800446e:	fba3 1302 	umull	r1, r3, r3, r2
 8004472:	0a9b      	lsrs	r3, r3, #10
 8004474:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8004478:	fb01 f303 	mul.w	r3, r1, r3
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d005      	beq.n	800448e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	3301      	adds	r3, #1
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	e001      	b.n	800448e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800448a:	2301      	movs	r3, #1
 800448c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d11c      	bne.n	80044ce <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80044a2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80044ae:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80044be:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	461a      	mov	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80044cc:	e04b      	b.n	8004566 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	e044      	b.n	800455e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044de:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044e2:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d107      	bne.n	80044fa <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80044f8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004502:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	3b01      	subs	r3, #1
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	429a      	cmp	r2, r3
 800450c:	d116      	bne.n	800453c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800451c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	4a25      	ldr	r2, [pc, #148]	; (80045b8 <HAL_ETH_TransmitFrame+0x1d0>)
 8004522:	fb02 f203 	mul.w	r2, r2, r3
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	4413      	add	r3, r2
 800452a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800452e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800453a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004546:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800454a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	461a      	mov	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	3301      	adds	r3, #1
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	429a      	cmp	r2, r3
 8004564:	d3b6      	bcc.n	80044d4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800456e:	3314      	adds	r3, #20
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00d      	beq.n	8004596 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004582:	3314      	adds	r3, #20
 8004584:	2204      	movs	r2, #4
 8004586:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004590:	3304      	adds	r3, #4
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	371c      	adds	r7, #28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	ac02b00b 	.word	0xac02b00b
 80045b8:	fffffa0c 	.word	0xfffffa0c

080045bc <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d101      	bne.n	80045d6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80045d2:	2302      	movs	r3, #2
 80045d4:	e074      	b.n	80046c0 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2202      	movs	r2, #2
 80045e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80045e6:	e05a      	b.n	800469e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	3301      	adds	r3, #1
 80045ec:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045fc:	d10d      	bne.n	800461a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	461a      	mov	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	629a      	str	r2, [r3, #40]	; 0x28
 8004618:	e041      	b.n	800469e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10b      	bne.n	8004640 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	461a      	mov	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	629a      	str	r2, [r3, #40]	; 0x28
 800463e:	e02e      	b.n	800469e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	2b01      	cmp	r3, #1
 8004658:	d103      	bne.n	8004662 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	0c1b      	lsrs	r3, r3, #16
 800466a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800466e:	1f1a      	subs	r2, r3, #4
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	461a      	mov	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	e010      	b.n	80046c0 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	db02      	blt.n	80046ae <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b03      	cmp	r3, #3
 80046ac:	d99c      	bls.n	80045e8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046dc:	3314      	adds	r3, #20
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e4:	2b40      	cmp	r3, #64	; 0x40
 80046e6:	d112      	bne.n	800470e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f006 fd55 	bl	800b198 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f6:	3314      	adds	r3, #20
 80046f8:	2240      	movs	r2, #64	; 0x40
 80046fa:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800470c:	e01b      	b.n	8004746 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004716:	3314      	adds	r3, #20
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b01      	cmp	r3, #1
 8004720:	d111      	bne.n	8004746 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f839 	bl	800479a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004730:	3314      	adds	r3, #20
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800474e:	3314      	adds	r3, #20
 8004750:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004754:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475e:	3314      	adds	r3, #20
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800476a:	d112      	bne.n	8004792 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f81e 	bl	80047ae <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800477a:	3314      	adds	r3, #20
 800477c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004780:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8004792:	bf00      	nop
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b086      	sub	sp, #24
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	460b      	mov	r3, r1
 80047cc:	607a      	str	r2, [r7, #4]
 80047ce:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b82      	cmp	r3, #130	; 0x82
 80047e2:	d101      	bne.n	80047e8 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80047e4:	2302      	movs	r3, #2
 80047e6:	e050      	b.n	800488a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2282      	movs	r2, #130	; 0x82
 80047ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f003 031c 	and.w	r3, r3, #28
 80047fe:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8a1b      	ldrh	r3, [r3, #16]
 8004804:	02db      	lsls	r3, r3, #11
 8004806:	b29b      	uxth	r3, r3
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800480e:	897b      	ldrh	r3, [r7, #10]
 8004810:	019b      	lsls	r3, r3, #6
 8004812:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	4313      	orrs	r3, r2
 800481a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f023 0302 	bic.w	r3, r3, #2
 8004822:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004834:	f7ff f9c2 	bl	8003bbc <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800483a:	e015      	b.n	8004868 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800483c:	f7ff f9be 	bl	8003bbc <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484a:	d309      	bcc.n	8004860 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e014      	b.n	800488a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e4      	bne.n	800483c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	b29b      	uxth	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b086      	sub	sp, #24
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	460b      	mov	r3, r1
 800489c:	607a      	str	r2, [r7, #4]
 800489e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b42      	cmp	r3, #66	; 0x42
 80048b2:	d101      	bne.n	80048b8 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80048b4:	2302      	movs	r3, #2
 80048b6:	e04e      	b.n	8004956 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2242      	movs	r2, #66	; 0x42
 80048bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f003 031c 	and.w	r3, r3, #28
 80048ce:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8a1b      	ldrh	r3, [r3, #16]
 80048d4:	02db      	lsls	r3, r3, #11
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	4313      	orrs	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80048de:	897b      	ldrh	r3, [r7, #10]
 80048e0:	019b      	lsls	r3, r3, #6
 80048e2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f043 0302 	orr.w	r3, r3, #2
 80048f2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800490e:	f7ff f955 	bl	8003bbc <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004914:	e015      	b.n	8004942 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004916:	f7ff f951 	bl	8003bbc <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004924:	d309      	bcc.n	800493a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e00d      	b.n	8004956 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e4      	bne.n	8004916 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800495e:	b580      	push	{r7, lr}
 8004960:	b082      	sub	sp, #8
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_ETH_Start+0x16>
 8004970:	2302      	movs	r3, #2
 8004972:	e01f      	b.n	80049b4 <HAL_ETH_Start+0x56>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 fa1b 	bl	8004dc0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fa35 	bl	8004dfa <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fa7f 	bl	8004e94 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fa4c 	bl	8004e34 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fa61 	bl	8004e64 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b0b0      	sub	sp, #192	; 0xc0
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d007      	beq.n	80049e2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049d8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80049e2:	2300      	movs	r3, #0
 80049e4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80049e6:	2300      	movs	r3, #0
 80049e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80049ea:	2300      	movs	r3, #0
 80049ec:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80049ee:	2300      	movs	r3, #0
 80049f0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80049f2:	2300      	movs	r3, #0
 80049f4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80049f6:	2300      	movs	r3, #0
 80049f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d103      	bne.n	8004a0a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a06:	663b      	str	r3, [r7, #96]	; 0x60
 8004a08:	e001      	b.n	8004a0e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8004a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a12:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004a14:	2300      	movs	r3, #0
 8004a16:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004a20:	2300      	movs	r3, #0
 8004a22:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004a24:	2300      	movs	r3, #0
 8004a26:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004a28:	2340      	movs	r3, #64	; 0x40
 8004a2a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8004a32:	2300      	movs	r3, #0
 8004a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004a44:	2300      	movs	r3, #0
 8004a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004a5c:	2380      	movs	r3, #128	; 0x80
 8004a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004a90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a94:	4bac      	ldr	r3, [pc, #688]	; (8004d48 <ETH_MACDMAConfig+0x38c>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004a9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004aa0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004aa4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004aa8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004aae:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004ab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004ab2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004ab6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004abc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004abe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004ac0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004ac2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004ac4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004ac6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004ac8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004acc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004ace:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004ad0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004ad2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004ae4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004af0:	2001      	movs	r0, #1
 8004af2:	f7ff f86f 	bl	8003bd4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004afe:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004b00:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004b02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004b04:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004b06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004b08:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8004b0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8004b0e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004b14:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004b16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004b1a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004b20:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004b24:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004b2c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004b2e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b3a:	2001      	movs	r0, #1
 8004b3c:	f7ff f84a 	bl	8003bd4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b48:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b52:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004b5c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004b68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b6c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004b70:	4013      	ands	r3, r2
 8004b72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004b76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b7a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004b7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004b80:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004b82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004b86:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004b88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004b8c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004b92:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004b94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004b98:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004b9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004bac:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004bb8:	2001      	movs	r0, #1
 8004bba:	f7ff f80b 	bl	8003bd4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004bc6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004bc8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004bcc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004be2:	2001      	movs	r0, #1
 8004be4:	f7fe fff6 	bl	8003bd4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004bf0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004bf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bfa:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004c00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c04:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004c12:	2300      	movs	r3, #0
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004c16:	2304      	movs	r3, #4
 8004c18:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004c1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c24:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004c26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c2a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c30:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004c32:	2380      	movs	r3, #128	; 0x80
 8004c34:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c46:	3318      	adds	r3, #24
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004c4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c52:	4b3e      	ldr	r3, [pc, #248]	; (8004d4c <ETH_MACDMAConfig+0x390>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004c5a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004c5c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004c5e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004c60:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004c62:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004c64:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004c66:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004c68:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004c6a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004c6c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004c6e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004c70:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004c72:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004c76:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004c7a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004c7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c8e:	3318      	adds	r3, #24
 8004c90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c94:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c9e:	3318      	adds	r3, #24
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	f7fe ff94 	bl	8003bd4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb4:	3318      	adds	r3, #24
 8004cb6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004cba:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004cc0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004cc4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004cc8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004ccc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cd0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004cd2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004cd6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ce4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004cf4:	2001      	movs	r0, #1
 8004cf6:	f7fe ff6d 	bl	8003bd4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d02:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004d06:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d10f      	bne.n	8004d30 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d18:	331c      	adds	r3, #28
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d2c:	331c      	adds	r3, #28
 8004d2e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	461a      	mov	r2, r3
 8004d36:	2100      	movs	r1, #0
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f809 	bl	8004d50 <ETH_MACAddressConfig>
}
 8004d3e:	bf00      	nop
 8004d40:	37c0      	adds	r7, #192	; 0xc0
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	ff20810f 	.word	0xff20810f
 8004d4c:	f8de3f23 	.word	0xf8de3f23

08004d50 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3305      	adds	r3, #5
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	021b      	lsls	r3, r3, #8
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	3204      	adds	r2, #4
 8004d68:	7812      	ldrb	r2, [r2, #0]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <ETH_MACAddressConfig+0x68>)
 8004d72:	4413      	add	r3, r2
 8004d74:	461a      	mov	r2, r3
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3303      	adds	r3, #3
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	061a      	lsls	r2, r3, #24
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3302      	adds	r3, #2
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	041b      	lsls	r3, r3, #16
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	4313      	orrs	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	7812      	ldrb	r2, [r2, #0]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <ETH_MACAddressConfig+0x6c>)
 8004da2:	4413      	add	r3, r2
 8004da4:	461a      	mov	r2, r3
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	6013      	str	r3, [r2, #0]
}
 8004daa:	bf00      	nop
 8004dac:	371c      	adds	r7, #28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40028040 	.word	0x40028040
 8004dbc:	40028044 	.word	0x40028044

08004dc0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0208 	orr.w	r2, r2, #8
 8004dda:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004de4:	2001      	movs	r0, #1
 8004de6:	f000 f87f 	bl	8004ee8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	601a      	str	r2, [r3, #0]
}
 8004df2:	bf00      	nop
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f042 0204 	orr.w	r2, r2, #4
 8004e14:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004e1e:	2001      	movs	r0, #1
 8004e20:	f000 f862 	bl	8004ee8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	601a      	str	r2, [r3, #0]
}
 8004e2c:	bf00      	nop
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e44:	3318      	adds	r3, #24
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e54:	3318      	adds	r3, #24
 8004e56:	601a      	str	r2, [r3, #0]
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e74:	3318      	adds	r3, #24
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0202 	orr.w	r2, r2, #2
 8004e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e84:	3318      	adds	r3, #24
 8004e86:	601a      	str	r2, [r3, #0]
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea8:	3318      	adds	r3, #24
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb8:	3318      	adds	r3, #24
 8004eba:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ec4:	3318      	adds	r3, #24
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004eca:	2001      	movs	r0, #1
 8004ecc:	f000 f80c 	bl	8004ee8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eda:	3318      	adds	r3, #24
 8004edc:	601a      	str	r2, [r3, #0]
}
 8004ede:	bf00      	nop
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <ETH_Delay+0x38>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a0b      	ldr	r2, [pc, #44]	; (8004f24 <ETH_Delay+0x3c>)
 8004ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8004efa:	0a5b      	lsrs	r3, r3, #9
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	fb02 f303 	mul.w	r3, r2, r3
 8004f02:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8004f04:	bf00      	nop
  } 
  while (Delay --);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1e5a      	subs	r2, r3, #1
 8004f0a:	60fa      	str	r2, [r7, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1f9      	bne.n	8004f04 <ETH_Delay+0x1c>
}
 8004f10:	bf00      	nop
 8004f12:	bf00      	nop
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	2000001c 	.word	0x2000001c
 8004f24:	10624dd3 	.word	0x10624dd3

08004f28 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004f3a:	4b23      	ldr	r3, [pc, #140]	; (8004fc8 <HAL_FLASH_Program+0xa0>)
 8004f3c:	7e1b      	ldrb	r3, [r3, #24]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_FLASH_Program+0x1e>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e03b      	b.n	8004fbe <HAL_FLASH_Program+0x96>
 8004f46:	4b20      	ldr	r3, [pc, #128]	; (8004fc8 <HAL_FLASH_Program+0xa0>)
 8004f48:	2201      	movs	r2, #1
 8004f4a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004f4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004f50:	f000 f870 	bl	8005034 <FLASH_WaitForLastOperation>
 8004f54:	4603      	mov	r3, r0
 8004f56:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d12b      	bne.n	8004fb6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d105      	bne.n	8004f70 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004f64:	783b      	ldrb	r3, [r7, #0]
 8004f66:	4619      	mov	r1, r3
 8004f68:	68b8      	ldr	r0, [r7, #8]
 8004f6a:	f000 f91b 	bl	80051a4 <FLASH_Program_Byte>
 8004f6e:	e016      	b.n	8004f9e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d105      	bne.n	8004f82 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004f76:	883b      	ldrh	r3, [r7, #0]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	68b8      	ldr	r0, [r7, #8]
 8004f7c:	f000 f8ee 	bl	800515c <FLASH_Program_HalfWord>
 8004f80:	e00d      	b.n	8004f9e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d105      	bne.n	8004f94 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	68b8      	ldr	r0, [r7, #8]
 8004f8e:	f000 f8c3 	bl	8005118 <FLASH_Program_Word>
 8004f92:	e004      	b.n	8004f9e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f98:	68b8      	ldr	r0, [r7, #8]
 8004f9a:	f000 f88b 	bl	80050b4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004f9e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004fa2:	f000 f847 	bl	8005034 <FLASH_WaitForLastOperation>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004faa:	4b08      	ldr	r3, [pc, #32]	; (8004fcc <HAL_FLASH_Program+0xa4>)
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	4a07      	ldr	r2, [pc, #28]	; (8004fcc <HAL_FLASH_Program+0xa4>)
 8004fb0:	f023 0301 	bic.w	r3, r3, #1
 8004fb4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004fb6:	4b04      	ldr	r3, [pc, #16]	; (8004fc8 <HAL_FLASH_Program+0xa0>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	2000502c 	.word	0x2000502c
 8004fcc:	40023c00 	.word	0x40023c00

08004fd0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004fda:	4b0b      	ldr	r3, [pc, #44]	; (8005008 <HAL_FLASH_Unlock+0x38>)
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	da0b      	bge.n	8004ffa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004fe2:	4b09      	ldr	r3, [pc, #36]	; (8005008 <HAL_FLASH_Unlock+0x38>)
 8004fe4:	4a09      	ldr	r2, [pc, #36]	; (800500c <HAL_FLASH_Unlock+0x3c>)
 8004fe6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004fe8:	4b07      	ldr	r3, [pc, #28]	; (8005008 <HAL_FLASH_Unlock+0x38>)
 8004fea:	4a09      	ldr	r2, [pc, #36]	; (8005010 <HAL_FLASH_Unlock+0x40>)
 8004fec:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004fee:	4b06      	ldr	r3, [pc, #24]	; (8005008 <HAL_FLASH_Unlock+0x38>)
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	da01      	bge.n	8004ffa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004ffa:	79fb      	ldrb	r3, [r7, #7]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	40023c00 	.word	0x40023c00
 800500c:	45670123 	.word	0x45670123
 8005010:	cdef89ab 	.word	0xcdef89ab

08005014 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005018:	4b05      	ldr	r3, [pc, #20]	; (8005030 <HAL_FLASH_Lock+0x1c>)
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	4a04      	ldr	r2, [pc, #16]	; (8005030 <HAL_FLASH_Lock+0x1c>)
 800501e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005022:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	40023c00 	.word	0x40023c00

08005034 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005040:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <FLASH_WaitForLastOperation+0x78>)
 8005042:	2200      	movs	r2, #0
 8005044:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005046:	f7fe fdb9 	bl	8003bbc <HAL_GetTick>
 800504a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800504c:	e010      	b.n	8005070 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005054:	d00c      	beq.n	8005070 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d007      	beq.n	800506c <FLASH_WaitForLastOperation+0x38>
 800505c:	f7fe fdae 	bl	8003bbc <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	429a      	cmp	r2, r3
 800506a:	d201      	bcs.n	8005070 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e019      	b.n	80050a4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005070:	4b0f      	ldr	r3, [pc, #60]	; (80050b0 <FLASH_WaitForLastOperation+0x7c>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1e8      	bne.n	800504e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800507c:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <FLASH_WaitForLastOperation+0x7c>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005088:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <FLASH_WaitForLastOperation+0x7c>)
 800508a:	2201      	movs	r2, #1
 800508c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800508e:	4b08      	ldr	r3, [pc, #32]	; (80050b0 <FLASH_WaitForLastOperation+0x7c>)
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800509a:	f000 f8a5 	bl	80051e8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
  
}  
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	2000502c 	.word	0x2000502c
 80050b0:	40023c00 	.word	0x40023c00

080050b4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80050c0:	4b14      	ldr	r3, [pc, #80]	; (8005114 <FLASH_Program_DoubleWord+0x60>)
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	4a13      	ldr	r2, [pc, #76]	; (8005114 <FLASH_Program_DoubleWord+0x60>)
 80050c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80050cc:	4b11      	ldr	r3, [pc, #68]	; (8005114 <FLASH_Program_DoubleWord+0x60>)
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	4a10      	ldr	r2, [pc, #64]	; (8005114 <FLASH_Program_DoubleWord+0x60>)
 80050d2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80050d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80050d8:	4b0e      	ldr	r3, [pc, #56]	; (8005114 <FLASH_Program_DoubleWord+0x60>)
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	4a0d      	ldr	r2, [pc, #52]	; (8005114 <FLASH_Program_DoubleWord+0x60>)
 80050de:	f043 0301 	orr.w	r3, r3, #1
 80050e2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80050ea:	f3bf 8f6f 	isb	sy
}
 80050ee:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80050f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	000a      	movs	r2, r1
 80050fe:	2300      	movs	r3, #0
 8005100:	68f9      	ldr	r1, [r7, #12]
 8005102:	3104      	adds	r1, #4
 8005104:	4613      	mov	r3, r2
 8005106:	600b      	str	r3, [r1, #0]
}
 8005108:	bf00      	nop
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	40023c00 	.word	0x40023c00

08005118 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005122:	4b0d      	ldr	r3, [pc, #52]	; (8005158 <FLASH_Program_Word+0x40>)
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	4a0c      	ldr	r2, [pc, #48]	; (8005158 <FLASH_Program_Word+0x40>)
 8005128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800512c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800512e:	4b0a      	ldr	r3, [pc, #40]	; (8005158 <FLASH_Program_Word+0x40>)
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	4a09      	ldr	r2, [pc, #36]	; (8005158 <FLASH_Program_Word+0x40>)
 8005134:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005138:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800513a:	4b07      	ldr	r3, [pc, #28]	; (8005158 <FLASH_Program_Word+0x40>)
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	4a06      	ldr	r2, [pc, #24]	; (8005158 <FLASH_Program_Word+0x40>)
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	601a      	str	r2, [r3, #0]
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	40023c00 	.word	0x40023c00

0800515c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	460b      	mov	r3, r1
 8005166:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005168:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <FLASH_Program_HalfWord+0x44>)
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	4a0c      	ldr	r2, [pc, #48]	; (80051a0 <FLASH_Program_HalfWord+0x44>)
 800516e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005172:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005174:	4b0a      	ldr	r3, [pc, #40]	; (80051a0 <FLASH_Program_HalfWord+0x44>)
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	4a09      	ldr	r2, [pc, #36]	; (80051a0 <FLASH_Program_HalfWord+0x44>)
 800517a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800517e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005180:	4b07      	ldr	r3, [pc, #28]	; (80051a0 <FLASH_Program_HalfWord+0x44>)
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	4a06      	ldr	r2, [pc, #24]	; (80051a0 <FLASH_Program_HalfWord+0x44>)
 8005186:	f043 0301 	orr.w	r3, r3, #1
 800518a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	887a      	ldrh	r2, [r7, #2]
 8005190:	801a      	strh	r2, [r3, #0]
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40023c00 	.word	0x40023c00

080051a4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	460b      	mov	r3, r1
 80051ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80051b0:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <FLASH_Program_Byte+0x40>)
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	4a0b      	ldr	r2, [pc, #44]	; (80051e4 <FLASH_Program_Byte+0x40>)
 80051b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80051bc:	4b09      	ldr	r3, [pc, #36]	; (80051e4 <FLASH_Program_Byte+0x40>)
 80051be:	4a09      	ldr	r2, [pc, #36]	; (80051e4 <FLASH_Program_Byte+0x40>)
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80051c4:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <FLASH_Program_Byte+0x40>)
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	4a06      	ldr	r2, [pc, #24]	; (80051e4 <FLASH_Program_Byte+0x40>)
 80051ca:	f043 0301 	orr.w	r3, r3, #1
 80051ce:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	78fa      	ldrb	r2, [r7, #3]
 80051d4:	701a      	strb	r2, [r3, #0]
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40023c00 	.word	0x40023c00

080051e8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80051ec:	4b27      	ldr	r3, [pc, #156]	; (800528c <FLASH_SetErrorCode+0xa4>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f003 0310 	and.w	r3, r3, #16
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d008      	beq.n	800520a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80051f8:	4b25      	ldr	r3, [pc, #148]	; (8005290 <FLASH_SetErrorCode+0xa8>)
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	f043 0310 	orr.w	r3, r3, #16
 8005200:	4a23      	ldr	r2, [pc, #140]	; (8005290 <FLASH_SetErrorCode+0xa8>)
 8005202:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005204:	4b21      	ldr	r3, [pc, #132]	; (800528c <FLASH_SetErrorCode+0xa4>)
 8005206:	2210      	movs	r2, #16
 8005208:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800520a:	4b20      	ldr	r3, [pc, #128]	; (800528c <FLASH_SetErrorCode+0xa4>)
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b00      	cmp	r3, #0
 8005214:	d008      	beq.n	8005228 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005216:	4b1e      	ldr	r3, [pc, #120]	; (8005290 <FLASH_SetErrorCode+0xa8>)
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	f043 0308 	orr.w	r3, r3, #8
 800521e:	4a1c      	ldr	r2, [pc, #112]	; (8005290 <FLASH_SetErrorCode+0xa8>)
 8005220:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005222:	4b1a      	ldr	r3, [pc, #104]	; (800528c <FLASH_SetErrorCode+0xa4>)
 8005224:	2220      	movs	r2, #32
 8005226:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005228:	4b18      	ldr	r3, [pc, #96]	; (800528c <FLASH_SetErrorCode+0xa4>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005230:	2b00      	cmp	r3, #0
 8005232:	d008      	beq.n	8005246 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005234:	4b16      	ldr	r3, [pc, #88]	; (8005290 <FLASH_SetErrorCode+0xa8>)
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	f043 0304 	orr.w	r3, r3, #4
 800523c:	4a14      	ldr	r2, [pc, #80]	; (8005290 <FLASH_SetErrorCode+0xa8>)
 800523e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005240:	4b12      	ldr	r3, [pc, #72]	; (800528c <FLASH_SetErrorCode+0xa4>)
 8005242:	2240      	movs	r2, #64	; 0x40
 8005244:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005246:	4b11      	ldr	r3, [pc, #68]	; (800528c <FLASH_SetErrorCode+0xa4>)
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524e:	2b00      	cmp	r3, #0
 8005250:	d008      	beq.n	8005264 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005252:	4b0f      	ldr	r3, [pc, #60]	; (8005290 <FLASH_SetErrorCode+0xa8>)
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	f043 0302 	orr.w	r3, r3, #2
 800525a:	4a0d      	ldr	r2, [pc, #52]	; (8005290 <FLASH_SetErrorCode+0xa8>)
 800525c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800525e:	4b0b      	ldr	r3, [pc, #44]	; (800528c <FLASH_SetErrorCode+0xa4>)
 8005260:	2280      	movs	r2, #128	; 0x80
 8005262:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005264:	4b09      	ldr	r3, [pc, #36]	; (800528c <FLASH_SetErrorCode+0xa4>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005270:	4b07      	ldr	r3, [pc, #28]	; (8005290 <FLASH_SetErrorCode+0xa8>)
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	f043 0320 	orr.w	r3, r3, #32
 8005278:	4a05      	ldr	r2, [pc, #20]	; (8005290 <FLASH_SetErrorCode+0xa8>)
 800527a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800527c:	4b03      	ldr	r3, [pc, #12]	; (800528c <FLASH_SetErrorCode+0xa4>)
 800527e:	2202      	movs	r2, #2
 8005280:	60da      	str	r2, [r3, #12]
  }
}
 8005282:	bf00      	nop
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	40023c00 	.word	0x40023c00
 8005290:	2000502c 	.word	0x2000502c

08005294 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80052a6:	4b31      	ldr	r3, [pc, #196]	; (800536c <HAL_FLASHEx_Erase+0xd8>)
 80052a8:	7e1b      	ldrb	r3, [r3, #24]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d101      	bne.n	80052b2 <HAL_FLASHEx_Erase+0x1e>
 80052ae:	2302      	movs	r3, #2
 80052b0:	e058      	b.n	8005364 <HAL_FLASHEx_Erase+0xd0>
 80052b2:	4b2e      	ldr	r3, [pc, #184]	; (800536c <HAL_FLASHEx_Erase+0xd8>)
 80052b4:	2201      	movs	r2, #1
 80052b6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80052b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80052bc:	f7ff feba 	bl	8005034 <FLASH_WaitForLastOperation>
 80052c0:	4603      	mov	r3, r0
 80052c2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d148      	bne.n	800535c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	f04f 32ff 	mov.w	r2, #4294967295
 80052d0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d115      	bne.n	8005306 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	4619      	mov	r1, r3
 80052e6:	4610      	mov	r0, r2
 80052e8:	f000 f844 	bl	8005374 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80052ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80052f0:	f7ff fea0 	bl	8005034 <FLASH_WaitForLastOperation>
 80052f4:	4603      	mov	r3, r0
 80052f6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80052f8:	4b1d      	ldr	r3, [pc, #116]	; (8005370 <HAL_FLASHEx_Erase+0xdc>)
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	4a1c      	ldr	r2, [pc, #112]	; (8005370 <HAL_FLASHEx_Erase+0xdc>)
 80052fe:	f023 0304 	bic.w	r3, r3, #4
 8005302:	6113      	str	r3, [r2, #16]
 8005304:	e028      	b.n	8005358 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	60bb      	str	r3, [r7, #8]
 800530c:	e01c      	b.n	8005348 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	4619      	mov	r1, r3
 8005316:	68b8      	ldr	r0, [r7, #8]
 8005318:	f000 f850 	bl	80053bc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800531c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005320:	f7ff fe88 	bl	8005034 <FLASH_WaitForLastOperation>
 8005324:	4603      	mov	r3, r0
 8005326:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005328:	4b11      	ldr	r3, [pc, #68]	; (8005370 <HAL_FLASHEx_Erase+0xdc>)
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	4a10      	ldr	r2, [pc, #64]	; (8005370 <HAL_FLASHEx_Erase+0xdc>)
 800532e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005332:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	601a      	str	r2, [r3, #0]
          break;
 8005340:	e00a      	b.n	8005358 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	3301      	adds	r3, #1
 8005346:	60bb      	str	r3, [r7, #8]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	4413      	add	r3, r2
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	429a      	cmp	r2, r3
 8005356:	d3da      	bcc.n	800530e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005358:	f000 f878 	bl	800544c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800535c:	4b03      	ldr	r3, [pc, #12]	; (800536c <HAL_FLASHEx_Erase+0xd8>)
 800535e:	2200      	movs	r2, #0
 8005360:	761a      	strb	r2, [r3, #24]

  return status;
 8005362:	7bfb      	ldrb	r3, [r7, #15]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	2000502c 	.word	0x2000502c
 8005370:	40023c00 	.word	0x40023c00

08005374 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	4603      	mov	r3, r0
 800537c:	6039      	str	r1, [r7, #0]
 800537e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005380:	4b0d      	ldr	r3, [pc, #52]	; (80053b8 <FLASH_MassErase+0x44>)
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	4a0c      	ldr	r2, [pc, #48]	; (80053b8 <FLASH_MassErase+0x44>)
 8005386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800538a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800538c:	4b0a      	ldr	r3, [pc, #40]	; (80053b8 <FLASH_MassErase+0x44>)
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	4a09      	ldr	r2, [pc, #36]	; (80053b8 <FLASH_MassErase+0x44>)
 8005392:	f043 0304 	orr.w	r3, r3, #4
 8005396:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005398:	4b07      	ldr	r3, [pc, #28]	; (80053b8 <FLASH_MassErase+0x44>)
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	021b      	lsls	r3, r3, #8
 80053a0:	4313      	orrs	r3, r2
 80053a2:	4a05      	ldr	r2, [pc, #20]	; (80053b8 <FLASH_MassErase+0x44>)
 80053a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a8:	6113      	str	r3, [r2, #16]
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40023c00 	.word	0x40023c00

080053bc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	460b      	mov	r3, r1
 80053c6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d102      	bne.n	80053d8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	e010      	b.n	80053fa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80053d8:	78fb      	ldrb	r3, [r7, #3]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d103      	bne.n	80053e6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80053de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	e009      	b.n	80053fa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80053e6:	78fb      	ldrb	r3, [r7, #3]
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d103      	bne.n	80053f4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80053ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	e002      	b.n	80053fa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80053f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80053f8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80053fa:	4b13      	ldr	r3, [pc, #76]	; (8005448 <FLASH_Erase_Sector+0x8c>)
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	4a12      	ldr	r2, [pc, #72]	; (8005448 <FLASH_Erase_Sector+0x8c>)
 8005400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005404:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005406:	4b10      	ldr	r3, [pc, #64]	; (8005448 <FLASH_Erase_Sector+0x8c>)
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	490f      	ldr	r1, [pc, #60]	; (8005448 <FLASH_Erase_Sector+0x8c>)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005412:	4b0d      	ldr	r3, [pc, #52]	; (8005448 <FLASH_Erase_Sector+0x8c>)
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	4a0c      	ldr	r2, [pc, #48]	; (8005448 <FLASH_Erase_Sector+0x8c>)
 8005418:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800541c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800541e:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <FLASH_Erase_Sector+0x8c>)
 8005420:	691a      	ldr	r2, [r3, #16]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	4313      	orrs	r3, r2
 8005428:	4a07      	ldr	r2, [pc, #28]	; (8005448 <FLASH_Erase_Sector+0x8c>)
 800542a:	f043 0302 	orr.w	r3, r3, #2
 800542e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005430:	4b05      	ldr	r3, [pc, #20]	; (8005448 <FLASH_Erase_Sector+0x8c>)
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	4a04      	ldr	r2, [pc, #16]	; (8005448 <FLASH_Erase_Sector+0x8c>)
 8005436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800543a:	6113      	str	r3, [r2, #16]
}
 800543c:	bf00      	nop
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	40023c00 	.word	0x40023c00

0800544c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005450:	4b20      	ldr	r3, [pc, #128]	; (80054d4 <FLASH_FlushCaches+0x88>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005458:	2b00      	cmp	r3, #0
 800545a:	d017      	beq.n	800548c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800545c:	4b1d      	ldr	r3, [pc, #116]	; (80054d4 <FLASH_FlushCaches+0x88>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a1c      	ldr	r2, [pc, #112]	; (80054d4 <FLASH_FlushCaches+0x88>)
 8005462:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005466:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005468:	4b1a      	ldr	r3, [pc, #104]	; (80054d4 <FLASH_FlushCaches+0x88>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a19      	ldr	r2, [pc, #100]	; (80054d4 <FLASH_FlushCaches+0x88>)
 800546e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	4b17      	ldr	r3, [pc, #92]	; (80054d4 <FLASH_FlushCaches+0x88>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a16      	ldr	r2, [pc, #88]	; (80054d4 <FLASH_FlushCaches+0x88>)
 800547a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800547e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005480:	4b14      	ldr	r3, [pc, #80]	; (80054d4 <FLASH_FlushCaches+0x88>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a13      	ldr	r2, [pc, #76]	; (80054d4 <FLASH_FlushCaches+0x88>)
 8005486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800548a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800548c:	4b11      	ldr	r3, [pc, #68]	; (80054d4 <FLASH_FlushCaches+0x88>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005494:	2b00      	cmp	r3, #0
 8005496:	d017      	beq.n	80054c8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005498:	4b0e      	ldr	r3, [pc, #56]	; (80054d4 <FLASH_FlushCaches+0x88>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a0d      	ldr	r2, [pc, #52]	; (80054d4 <FLASH_FlushCaches+0x88>)
 800549e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054a2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80054a4:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <FLASH_FlushCaches+0x88>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a0a      	ldr	r2, [pc, #40]	; (80054d4 <FLASH_FlushCaches+0x88>)
 80054aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	4b08      	ldr	r3, [pc, #32]	; (80054d4 <FLASH_FlushCaches+0x88>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a07      	ldr	r2, [pc, #28]	; (80054d4 <FLASH_FlushCaches+0x88>)
 80054b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054ba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80054bc:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <FLASH_FlushCaches+0x88>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a04      	ldr	r2, [pc, #16]	; (80054d4 <FLASH_FlushCaches+0x88>)
 80054c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054c6:	6013      	str	r3, [r2, #0]
  }
}
 80054c8:	bf00      	nop
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40023c00 	.word	0x40023c00

080054d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054d8:	b480      	push	{r7}
 80054da:	b089      	sub	sp, #36	; 0x24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054ee:	2300      	movs	r3, #0
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	e16b      	b.n	80057cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054f4:	2201      	movs	r2, #1
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	4013      	ands	r3, r2
 8005506:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	429a      	cmp	r2, r3
 800550e:	f040 815a 	bne.w	80057c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	2b01      	cmp	r3, #1
 800551c:	d005      	beq.n	800552a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005526:	2b02      	cmp	r3, #2
 8005528:	d130      	bne.n	800558c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	2203      	movs	r2, #3
 8005536:	fa02 f303 	lsl.w	r3, r2, r3
 800553a:	43db      	mvns	r3, r3
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	4013      	ands	r3, r2
 8005540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	4313      	orrs	r3, r2
 8005552:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005560:	2201      	movs	r2, #1
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	43db      	mvns	r3, r3
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	4013      	ands	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	091b      	lsrs	r3, r3, #4
 8005576:	f003 0201 	and.w	r2, r3, #1
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	4313      	orrs	r3, r2
 8005584:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f003 0303 	and.w	r3, r3, #3
 8005594:	2b03      	cmp	r3, #3
 8005596:	d017      	beq.n	80055c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	2203      	movs	r2, #3
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	43db      	mvns	r3, r3
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	4013      	ands	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4313      	orrs	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f003 0303 	and.w	r3, r3, #3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d123      	bne.n	800561c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	08da      	lsrs	r2, r3, #3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3208      	adds	r2, #8
 80055dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	220f      	movs	r2, #15
 80055ec:	fa02 f303 	lsl.w	r3, r2, r3
 80055f0:	43db      	mvns	r3, r3
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	4013      	ands	r3, r2
 80055f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	691a      	ldr	r2, [r3, #16]
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	fa02 f303 	lsl.w	r3, r2, r3
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	4313      	orrs	r3, r2
 800560c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	08da      	lsrs	r2, r3, #3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	3208      	adds	r2, #8
 8005616:	69b9      	ldr	r1, [r7, #24]
 8005618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	2203      	movs	r2, #3
 8005628:	fa02 f303 	lsl.w	r3, r2, r3
 800562c:	43db      	mvns	r3, r3
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	4013      	ands	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f003 0203 	and.w	r2, r3, #3
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4313      	orrs	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 80b4 	beq.w	80057c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	4b60      	ldr	r3, [pc, #384]	; (80057e4 <HAL_GPIO_Init+0x30c>)
 8005664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005666:	4a5f      	ldr	r2, [pc, #380]	; (80057e4 <HAL_GPIO_Init+0x30c>)
 8005668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800566c:	6453      	str	r3, [r2, #68]	; 0x44
 800566e:	4b5d      	ldr	r3, [pc, #372]	; (80057e4 <HAL_GPIO_Init+0x30c>)
 8005670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800567a:	4a5b      	ldr	r2, [pc, #364]	; (80057e8 <HAL_GPIO_Init+0x310>)
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	089b      	lsrs	r3, r3, #2
 8005680:	3302      	adds	r3, #2
 8005682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005686:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	220f      	movs	r2, #15
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	43db      	mvns	r3, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4013      	ands	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a52      	ldr	r2, [pc, #328]	; (80057ec <HAL_GPIO_Init+0x314>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d02b      	beq.n	80056fe <HAL_GPIO_Init+0x226>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a51      	ldr	r2, [pc, #324]	; (80057f0 <HAL_GPIO_Init+0x318>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d025      	beq.n	80056fa <HAL_GPIO_Init+0x222>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a50      	ldr	r2, [pc, #320]	; (80057f4 <HAL_GPIO_Init+0x31c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d01f      	beq.n	80056f6 <HAL_GPIO_Init+0x21e>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a4f      	ldr	r2, [pc, #316]	; (80057f8 <HAL_GPIO_Init+0x320>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d019      	beq.n	80056f2 <HAL_GPIO_Init+0x21a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a4e      	ldr	r2, [pc, #312]	; (80057fc <HAL_GPIO_Init+0x324>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d013      	beq.n	80056ee <HAL_GPIO_Init+0x216>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a4d      	ldr	r2, [pc, #308]	; (8005800 <HAL_GPIO_Init+0x328>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00d      	beq.n	80056ea <HAL_GPIO_Init+0x212>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a4c      	ldr	r2, [pc, #304]	; (8005804 <HAL_GPIO_Init+0x32c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d007      	beq.n	80056e6 <HAL_GPIO_Init+0x20e>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a4b      	ldr	r2, [pc, #300]	; (8005808 <HAL_GPIO_Init+0x330>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d101      	bne.n	80056e2 <HAL_GPIO_Init+0x20a>
 80056de:	2307      	movs	r3, #7
 80056e0:	e00e      	b.n	8005700 <HAL_GPIO_Init+0x228>
 80056e2:	2308      	movs	r3, #8
 80056e4:	e00c      	b.n	8005700 <HAL_GPIO_Init+0x228>
 80056e6:	2306      	movs	r3, #6
 80056e8:	e00a      	b.n	8005700 <HAL_GPIO_Init+0x228>
 80056ea:	2305      	movs	r3, #5
 80056ec:	e008      	b.n	8005700 <HAL_GPIO_Init+0x228>
 80056ee:	2304      	movs	r3, #4
 80056f0:	e006      	b.n	8005700 <HAL_GPIO_Init+0x228>
 80056f2:	2303      	movs	r3, #3
 80056f4:	e004      	b.n	8005700 <HAL_GPIO_Init+0x228>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e002      	b.n	8005700 <HAL_GPIO_Init+0x228>
 80056fa:	2301      	movs	r3, #1
 80056fc:	e000      	b.n	8005700 <HAL_GPIO_Init+0x228>
 80056fe:	2300      	movs	r3, #0
 8005700:	69fa      	ldr	r2, [r7, #28]
 8005702:	f002 0203 	and.w	r2, r2, #3
 8005706:	0092      	lsls	r2, r2, #2
 8005708:	4093      	lsls	r3, r2
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	4313      	orrs	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005710:	4935      	ldr	r1, [pc, #212]	; (80057e8 <HAL_GPIO_Init+0x310>)
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	089b      	lsrs	r3, r3, #2
 8005716:	3302      	adds	r3, #2
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800571e:	4b3b      	ldr	r3, [pc, #236]	; (800580c <HAL_GPIO_Init+0x334>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	43db      	mvns	r3, r3
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	4013      	ands	r3, r2
 800572c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	4313      	orrs	r3, r2
 8005740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005742:	4a32      	ldr	r2, [pc, #200]	; (800580c <HAL_GPIO_Init+0x334>)
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005748:	4b30      	ldr	r3, [pc, #192]	; (800580c <HAL_GPIO_Init+0x334>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	43db      	mvns	r3, r3
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4013      	ands	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800576c:	4a27      	ldr	r2, [pc, #156]	; (800580c <HAL_GPIO_Init+0x334>)
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005772:	4b26      	ldr	r3, [pc, #152]	; (800580c <HAL_GPIO_Init+0x334>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	43db      	mvns	r3, r3
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	4013      	ands	r3, r2
 8005780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005796:	4a1d      	ldr	r2, [pc, #116]	; (800580c <HAL_GPIO_Init+0x334>)
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800579c:	4b1b      	ldr	r3, [pc, #108]	; (800580c <HAL_GPIO_Init+0x334>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	43db      	mvns	r3, r3
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	4013      	ands	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057c0:	4a12      	ldr	r2, [pc, #72]	; (800580c <HAL_GPIO_Init+0x334>)
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	3301      	adds	r3, #1
 80057ca:	61fb      	str	r3, [r7, #28]
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	2b0f      	cmp	r3, #15
 80057d0:	f67f ae90 	bls.w	80054f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80057d4:	bf00      	nop
 80057d6:	bf00      	nop
 80057d8:	3724      	adds	r7, #36	; 0x24
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40023800 	.word	0x40023800
 80057e8:	40013800 	.word	0x40013800
 80057ec:	40020000 	.word	0x40020000
 80057f0:	40020400 	.word	0x40020400
 80057f4:	40020800 	.word	0x40020800
 80057f8:	40020c00 	.word	0x40020c00
 80057fc:	40021000 	.word	0x40021000
 8005800:	40021400 	.word	0x40021400
 8005804:	40021800 	.word	0x40021800
 8005808:	40021c00 	.word	0x40021c00
 800580c:	40013c00 	.word	0x40013c00

08005810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	807b      	strh	r3, [r7, #2]
 800581c:	4613      	mov	r3, r2
 800581e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005820:	787b      	ldrb	r3, [r7, #1]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005826:	887a      	ldrh	r2, [r7, #2]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800582c:	e003      	b.n	8005836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800582e:	887b      	ldrh	r3, [r7, #2]
 8005830:	041a      	lsls	r2, r3, #16
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	619a      	str	r2, [r3, #24]
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
	...

08005844 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	4603      	mov	r3, r0
 800584c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800584e:	4b08      	ldr	r3, [pc, #32]	; (8005870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005850:	695a      	ldr	r2, [r3, #20]
 8005852:	88fb      	ldrh	r3, [r7, #6]
 8005854:	4013      	ands	r3, r2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d006      	beq.n	8005868 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800585a:	4a05      	ldr	r2, [pc, #20]	; (8005870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800585c:	88fb      	ldrh	r3, [r7, #6]
 800585e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005860:	88fb      	ldrh	r3, [r7, #6]
 8005862:	4618      	mov	r0, r3
 8005864:	f7fc f860 	bl	8001928 <HAL_GPIO_EXTI_Callback>
  }
}
 8005868:	bf00      	nop
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	40013c00 	.word	0x40013c00

08005874 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005876:	b08f      	sub	sp, #60	; 0x3c
 8005878:	af0a      	add	r7, sp, #40	; 0x28
 800587a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e10f      	b.n	8005aa6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d106      	bne.n	80058a6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f019 f811 	bl	801e8c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2203      	movs	r2, #3
 80058aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d102      	bne.n	80058c0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f003 fff0 	bl	80098aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	687e      	ldr	r6, [r7, #4]
 80058d2:	466d      	mov	r5, sp
 80058d4:	f106 0410 	add.w	r4, r6, #16
 80058d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80058e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80058e8:	1d33      	adds	r3, r6, #4
 80058ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058ec:	6838      	ldr	r0, [r7, #0]
 80058ee:	f003 fec7 	bl	8009680 <USB_CoreInit>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d005      	beq.n	8005904 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e0d0      	b.n	8005aa6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2100      	movs	r1, #0
 800590a:	4618      	mov	r0, r3
 800590c:	f003 ffde 	bl	80098cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005910:	2300      	movs	r3, #0
 8005912:	73fb      	strb	r3, [r7, #15]
 8005914:	e04a      	b.n	80059ac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005916:	7bfa      	ldrb	r2, [r7, #15]
 8005918:	6879      	ldr	r1, [r7, #4]
 800591a:	4613      	mov	r3, r2
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	1a9b      	subs	r3, r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	440b      	add	r3, r1
 8005924:	333d      	adds	r3, #61	; 0x3d
 8005926:	2201      	movs	r2, #1
 8005928:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800592a:	7bfa      	ldrb	r2, [r7, #15]
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	1a9b      	subs	r3, r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	440b      	add	r3, r1
 8005938:	333c      	adds	r3, #60	; 0x3c
 800593a:	7bfa      	ldrb	r2, [r7, #15]
 800593c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800593e:	7bfa      	ldrb	r2, [r7, #15]
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	b298      	uxth	r0, r3
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	4613      	mov	r3, r2
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	440b      	add	r3, r1
 8005950:	3342      	adds	r3, #66	; 0x42
 8005952:	4602      	mov	r2, r0
 8005954:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005956:	7bfa      	ldrb	r2, [r7, #15]
 8005958:	6879      	ldr	r1, [r7, #4]
 800595a:	4613      	mov	r3, r2
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	1a9b      	subs	r3, r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	440b      	add	r3, r1
 8005964:	333f      	adds	r3, #63	; 0x3f
 8005966:	2200      	movs	r2, #0
 8005968:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800596a:	7bfa      	ldrb	r2, [r7, #15]
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	4613      	mov	r3, r2
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	1a9b      	subs	r3, r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	440b      	add	r3, r1
 8005978:	3344      	adds	r3, #68	; 0x44
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800597e:	7bfa      	ldrb	r2, [r7, #15]
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	4613      	mov	r3, r2
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	1a9b      	subs	r3, r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	440b      	add	r3, r1
 800598c:	3348      	adds	r3, #72	; 0x48
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005992:	7bfa      	ldrb	r2, [r7, #15]
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	4613      	mov	r3, r2
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	1a9b      	subs	r3, r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	440b      	add	r3, r1
 80059a0:	3350      	adds	r3, #80	; 0x50
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
 80059a8:	3301      	adds	r3, #1
 80059aa:	73fb      	strb	r3, [r7, #15]
 80059ac:	7bfa      	ldrb	r2, [r7, #15]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d3af      	bcc.n	8005916 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059b6:	2300      	movs	r3, #0
 80059b8:	73fb      	strb	r3, [r7, #15]
 80059ba:	e044      	b.n	8005a46 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80059bc:	7bfa      	ldrb	r2, [r7, #15]
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	4613      	mov	r3, r2
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	1a9b      	subs	r3, r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80059ce:	2200      	movs	r2, #0
 80059d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80059d2:	7bfa      	ldrb	r2, [r7, #15]
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	4613      	mov	r3, r2
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	1a9b      	subs	r3, r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	440b      	add	r3, r1
 80059e0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80059e4:	7bfa      	ldrb	r2, [r7, #15]
 80059e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80059e8:	7bfa      	ldrb	r2, [r7, #15]
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	4613      	mov	r3, r2
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	1a9b      	subs	r3, r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80059fa:	2200      	movs	r2, #0
 80059fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80059fe:	7bfa      	ldrb	r2, [r7, #15]
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	1a9b      	subs	r3, r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a14:	7bfa      	ldrb	r2, [r7, #15]
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	1a9b      	subs	r3, r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	440b      	add	r3, r1
 8005a22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a2a:	7bfa      	ldrb	r2, [r7, #15]
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	1a9b      	subs	r3, r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	440b      	add	r3, r1
 8005a38:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	3301      	adds	r3, #1
 8005a44:	73fb      	strb	r3, [r7, #15]
 8005a46:	7bfa      	ldrb	r2, [r7, #15]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d3b5      	bcc.n	80059bc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	603b      	str	r3, [r7, #0]
 8005a56:	687e      	ldr	r6, [r7, #4]
 8005a58:	466d      	mov	r5, sp
 8005a5a:	f106 0410 	add.w	r4, r6, #16
 8005a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a6e:	1d33      	adds	r3, r6, #4
 8005a70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a72:	6838      	ldr	r0, [r7, #0]
 8005a74:	f003 ff76 	bl	8009964 <USB_DevInit>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d005      	beq.n	8005a8a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2202      	movs	r2, #2
 8005a82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e00d      	b.n	8005aa6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f004 fff2 	bl	800aa88 <USB_DevDisconnect>

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005aae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b084      	sub	sp, #16
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d101      	bne.n	8005aca <HAL_PCD_Start+0x1c>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e020      	b.n	8005b0c <HAL_PCD_Start+0x5e>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d109      	bne.n	8005aee <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d005      	beq.n	8005aee <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f003 fec8 	bl	8009888 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f004 ffa2 	bl	800aa46 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005b14:	b590      	push	{r4, r7, lr}
 8005b16:	b08d      	sub	sp, #52	; 0x34
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f005 f860 	bl	800abf0 <USB_GetMode>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f040 839d 	bne.w	8006272 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f004 ffc4 	bl	800aaca <USB_ReadInterrupts>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 8393 	beq.w	8006270 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f004 ffbb 	bl	800aaca <USB_ReadInterrupts>
 8005b54:	4603      	mov	r3, r0
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d107      	bne.n	8005b6e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	695a      	ldr	r2, [r3, #20]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f002 0202 	and.w	r2, r2, #2
 8005b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f004 ffa9 	bl	800aaca <USB_ReadInterrupts>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f003 0310 	and.w	r3, r3, #16
 8005b7e:	2b10      	cmp	r3, #16
 8005b80:	d161      	bne.n	8005c46 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	699a      	ldr	r2, [r3, #24]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 0210 	bic.w	r2, r2, #16
 8005b90:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	f003 020f 	and.w	r2, r3, #15
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	1a9b      	subs	r3, r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	4413      	add	r3, r2
 8005bae:	3304      	adds	r3, #4
 8005bb0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	0c5b      	lsrs	r3, r3, #17
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d124      	bne.n	8005c08 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d035      	beq.n	8005c36 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	091b      	lsrs	r3, r3, #4
 8005bd2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005bd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	6a38      	ldr	r0, [r7, #32]
 8005bde:	f004 fde0 	bl	800a7a2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	091b      	lsrs	r3, r3, #4
 8005bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bee:	441a      	add	r2, r3
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	699a      	ldr	r2, [r3, #24]
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	091b      	lsrs	r3, r3, #4
 8005bfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c00:	441a      	add	r2, r3
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	619a      	str	r2, [r3, #24]
 8005c06:	e016      	b.n	8005c36 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	0c5b      	lsrs	r3, r3, #17
 8005c0c:	f003 030f 	and.w	r3, r3, #15
 8005c10:	2b06      	cmp	r3, #6
 8005c12:	d110      	bne.n	8005c36 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c1a:	2208      	movs	r2, #8
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6a38      	ldr	r0, [r7, #32]
 8005c20:	f004 fdbf 	bl	800a7a2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	699a      	ldr	r2, [r3, #24]
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	091b      	lsrs	r3, r3, #4
 8005c2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c30:	441a      	add	r2, r3
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	699a      	ldr	r2, [r3, #24]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f042 0210 	orr.w	r2, r2, #16
 8005c44:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f004 ff3d 	bl	800aaca <USB_ReadInterrupts>
 8005c50:	4603      	mov	r3, r0
 8005c52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c5a:	d16e      	bne.n	8005d3a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f004 ff43 	bl	800aaf0 <USB_ReadDevAllOutEpInterrupt>
 8005c6a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005c6c:	e062      	b.n	8005d34 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d057      	beq.n	8005d28 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c7e:	b2d2      	uxtb	r2, r2
 8005c80:	4611      	mov	r1, r2
 8005c82:	4618      	mov	r0, r3
 8005c84:	f004 ff68 	bl	800ab58 <USB_ReadDevOutEPInterrupt>
 8005c88:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00c      	beq.n	8005cae <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005ca6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fdb1 	bl	8006810 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f003 0308 	and.w	r3, r3, #8
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00c      	beq.n	8005cd2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	2308      	movs	r3, #8
 8005cc8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005cca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 feab 	bl	8006a28 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f003 0310 	and.w	r3, r3, #16
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d008      	beq.n	8005cee <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce8:	461a      	mov	r2, r3
 8005cea:	2310      	movs	r3, #16
 8005cec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d008      	beq.n	8005d0a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d04:	461a      	mov	r2, r3
 8005d06:	2320      	movs	r3, #32
 8005d08:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d009      	beq.n	8005d28 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d20:	461a      	mov	r2, r3
 8005d22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d26:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	085b      	lsrs	r3, r3, #1
 8005d32:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d199      	bne.n	8005c6e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f004 fec3 	bl	800aaca <USB_ReadInterrupts>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d4e:	f040 80c0 	bne.w	8005ed2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f004 fee4 	bl	800ab24 <USB_ReadDevAllInEpInterrupt>
 8005d5c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005d62:	e0b2      	b.n	8005eca <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 80a7 	beq.w	8005ebe <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	4611      	mov	r1, r2
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f004 ff0a 	bl	800ab94 <USB_ReadDevInEPInterrupt>
 8005d80:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d057      	beq.n	8005e3c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	f003 030f 	and.w	r3, r3, #15
 8005d92:	2201      	movs	r2, #1
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	43db      	mvns	r3, r3
 8005da6:	69f9      	ldr	r1, [r7, #28]
 8005da8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dac:	4013      	ands	r3, r2
 8005dae:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d132      	bne.n	8005e30 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dce:	4613      	mov	r3, r2
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	1a9b      	subs	r3, r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	440b      	add	r3, r1
 8005dd8:	3348      	adds	r3, #72	; 0x48
 8005dda:	6819      	ldr	r1, [r3, #0]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de0:	4613      	mov	r3, r2
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4403      	add	r3, r0
 8005dea:	3344      	adds	r3, #68	; 0x44
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4419      	add	r1, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df4:	4613      	mov	r3, r2
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	1a9b      	subs	r3, r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4403      	add	r3, r0
 8005dfe:	3348      	adds	r3, #72	; 0x48
 8005e00:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d113      	bne.n	8005e30 <HAL_PCD_IRQHandler+0x31c>
 8005e08:	6879      	ldr	r1, [r7, #4]
 8005e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	1a9b      	subs	r3, r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	440b      	add	r3, r1
 8005e16:	3350      	adds	r3, #80	; 0x50
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d108      	bne.n	8005e30 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6818      	ldr	r0, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e28:	461a      	mov	r2, r3
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	f004 ff12 	bl	800ac54 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	4619      	mov	r1, r3
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f018 fdd5 	bl	801e9e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d008      	beq.n	8005e58 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e52:	461a      	mov	r2, r3
 8005e54:	2308      	movs	r3, #8
 8005e56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f003 0310 	and.w	r3, r3, #16
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d008      	beq.n	8005e74 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6e:	461a      	mov	r2, r3
 8005e70:	2310      	movs	r3, #16
 8005e72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d008      	beq.n	8005e90 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	2340      	movs	r3, #64	; 0x40
 8005e8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d008      	beq.n	8005eac <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005eb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fc1b 	bl	80066f4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec6:	085b      	lsrs	r3, r3, #1
 8005ec8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f47f af49 	bne.w	8005d64 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f004 fdf7 	bl	800aaca <USB_ReadInterrupts>
 8005edc:	4603      	mov	r3, r0
 8005ede:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ee2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ee6:	d122      	bne.n	8005f2e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	69fa      	ldr	r2, [r7, #28]
 8005ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ef6:	f023 0301 	bic.w	r3, r3, #1
 8005efa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d108      	bne.n	8005f18 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005f0e:	2100      	movs	r1, #0
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fe27 	bl	8006b64 <HAL_PCDEx_LPM_Callback>
 8005f16:	e002      	b.n	8005f1e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f018 fddb 	bl	801ead4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695a      	ldr	r2, [r3, #20]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005f2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f004 fdc9 	bl	800aaca <USB_ReadInterrupts>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f42:	d112      	bne.n	8005f6a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d102      	bne.n	8005f5a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f018 fd97 	bl	801ea88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	695a      	ldr	r2, [r3, #20]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005f68:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f004 fdab 	bl	800aaca <USB_ReadInterrupts>
 8005f74:	4603      	mov	r3, r0
 8005f76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7e:	f040 80c7 	bne.w	8006110 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	69fa      	ldr	r2, [r7, #28]
 8005f8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f90:	f023 0301 	bic.w	r3, r3, #1
 8005f94:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2110      	movs	r1, #16
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f003 fe45 	bl	8009c2c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fa6:	e056      	b.n	8006056 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005fba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fcc:	0151      	lsls	r1, r2, #5
 8005fce:	69fa      	ldr	r2, [r7, #28]
 8005fd0:	440a      	add	r2, r1
 8005fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fda:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fec:	0151      	lsls	r1, r2, #5
 8005fee:	69fa      	ldr	r2, [r7, #28]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ffa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006008:	461a      	mov	r2, r3
 800600a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800600e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006020:	0151      	lsls	r1, r2, #5
 8006022:	69fa      	ldr	r2, [r7, #28]
 8006024:	440a      	add	r2, r1
 8006026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800602a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800602e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006040:	0151      	lsls	r1, r2, #5
 8006042:	69fa      	ldr	r2, [r7, #28]
 8006044:	440a      	add	r2, r1
 8006046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800604a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800604e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006052:	3301      	adds	r3, #1
 8006054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800605c:	429a      	cmp	r2, r3
 800605e:	d3a3      	bcc.n	8005fa8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	69fa      	ldr	r2, [r7, #28]
 800606a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800606e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006072:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006078:	2b00      	cmp	r3, #0
 800607a:	d016      	beq.n	80060aa <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006086:	69fa      	ldr	r2, [r7, #28]
 8006088:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800608c:	f043 030b 	orr.w	r3, r3, #11
 8006090:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609c:	69fa      	ldr	r2, [r7, #28]
 800609e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060a2:	f043 030b 	orr.w	r3, r3, #11
 80060a6:	6453      	str	r3, [r2, #68]	; 0x44
 80060a8:	e015      	b.n	80060d6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	69fa      	ldr	r2, [r7, #28]
 80060b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80060bc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80060c0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060d0:	f043 030b 	orr.w	r3, r3, #11
 80060d4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80060e8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80060fa:	461a      	mov	r2, r3
 80060fc:	f004 fdaa 	bl	800ac54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695a      	ldr	r2, [r3, #20]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800610e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4618      	mov	r0, r3
 8006116:	f004 fcd8 	bl	800aaca <USB_ReadInterrupts>
 800611a:	4603      	mov	r3, r0
 800611c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006124:	d124      	bne.n	8006170 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4618      	mov	r0, r3
 800612c:	f004 fd6e 	bl	800ac0c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4618      	mov	r0, r3
 8006136:	f003 fdd6 	bl	8009ce6 <USB_GetDevSpeed>
 800613a:	4603      	mov	r3, r0
 800613c:	461a      	mov	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681c      	ldr	r4, [r3, #0]
 8006146:	f001 f959 	bl	80073fc <HAL_RCC_GetHCLKFreq>
 800614a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006150:	b2db      	uxtb	r3, r3
 8006152:	461a      	mov	r2, r3
 8006154:	4620      	mov	r0, r4
 8006156:	f003 faf5 	bl	8009744 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f018 fc6b 	bl	801ea36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	695a      	ldr	r2, [r3, #20]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800616e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4618      	mov	r0, r3
 8006176:	f004 fca8 	bl	800aaca <USB_ReadInterrupts>
 800617a:	4603      	mov	r3, r0
 800617c:	f003 0308 	and.w	r3, r3, #8
 8006180:	2b08      	cmp	r3, #8
 8006182:	d10a      	bne.n	800619a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f018 fc48 	bl	801ea1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	695a      	ldr	r2, [r3, #20]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f002 0208 	and.w	r2, r2, #8
 8006198:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4618      	mov	r0, r3
 80061a0:	f004 fc93 	bl	800aaca <USB_ReadInterrupts>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ae:	d10f      	bne.n	80061d0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	4619      	mov	r1, r3
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f018 fcaa 	bl	801eb14 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	695a      	ldr	r2, [r3, #20]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80061ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f004 fc78 	bl	800aaca <USB_ReadInterrupts>
 80061da:	4603      	mov	r3, r0
 80061dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061e4:	d10f      	bne.n	8006206 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	4619      	mov	r1, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f018 fc7d 	bl	801eaf0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	695a      	ldr	r2, [r3, #20]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006204:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4618      	mov	r0, r3
 800620c:	f004 fc5d 	bl	800aaca <USB_ReadInterrupts>
 8006210:	4603      	mov	r3, r0
 8006212:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621a:	d10a      	bne.n	8006232 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f018 fc8b 	bl	801eb38 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	695a      	ldr	r2, [r3, #20]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006230:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4618      	mov	r0, r3
 8006238:	f004 fc47 	bl	800aaca <USB_ReadInterrupts>
 800623c:	4603      	mov	r3, r0
 800623e:	f003 0304 	and.w	r3, r3, #4
 8006242:	2b04      	cmp	r3, #4
 8006244:	d115      	bne.n	8006272 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f018 fc7b 	bl	801eb54 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6859      	ldr	r1, [r3, #4]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	430a      	orrs	r2, r1
 800626c:	605a      	str	r2, [r3, #4]
 800626e:	e000      	b.n	8006272 <HAL_PCD_IRQHandler+0x75e>
      return;
 8006270:	bf00      	nop
    }
  }
}
 8006272:	3734      	adds	r7, #52	; 0x34
 8006274:	46bd      	mov	sp, r7
 8006276:	bd90      	pop	{r4, r7, pc}

08006278 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800628a:	2b01      	cmp	r3, #1
 800628c:	d101      	bne.n	8006292 <HAL_PCD_SetAddress+0x1a>
 800628e:	2302      	movs	r3, #2
 8006290:	e013      	b.n	80062ba <HAL_PCD_SetAddress+0x42>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	78fa      	ldrb	r2, [r7, #3]
 800629e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	78fa      	ldrb	r2, [r7, #3]
 80062a8:	4611      	mov	r1, r2
 80062aa:	4618      	mov	r0, r3
 80062ac:	f004 fba5 	bl	800a9fa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	4608      	mov	r0, r1
 80062cc:	4611      	mov	r1, r2
 80062ce:	461a      	mov	r2, r3
 80062d0:	4603      	mov	r3, r0
 80062d2:	70fb      	strb	r3, [r7, #3]
 80062d4:	460b      	mov	r3, r1
 80062d6:	803b      	strh	r3, [r7, #0]
 80062d8:	4613      	mov	r3, r2
 80062da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80062e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	da0f      	bge.n	8006308 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	f003 020f 	and.w	r2, r3, #15
 80062ee:	4613      	mov	r3, r2
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	1a9b      	subs	r3, r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	3338      	adds	r3, #56	; 0x38
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	4413      	add	r3, r2
 80062fc:	3304      	adds	r3, #4
 80062fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2201      	movs	r2, #1
 8006304:	705a      	strb	r2, [r3, #1]
 8006306:	e00f      	b.n	8006328 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006308:	78fb      	ldrb	r3, [r7, #3]
 800630a:	f003 020f 	and.w	r2, r3, #15
 800630e:	4613      	mov	r3, r2
 8006310:	00db      	lsls	r3, r3, #3
 8006312:	1a9b      	subs	r3, r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	4413      	add	r3, r2
 800631e:	3304      	adds	r3, #4
 8006320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	f003 030f 	and.w	r3, r3, #15
 800632e:	b2da      	uxtb	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006334:	883a      	ldrh	r2, [r7, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	78ba      	ldrb	r2, [r7, #2]
 800633e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	785b      	ldrb	r3, [r3, #1]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d004      	beq.n	8006352 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006352:	78bb      	ldrb	r3, [r7, #2]
 8006354:	2b02      	cmp	r3, #2
 8006356:	d102      	bne.n	800635e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006364:	2b01      	cmp	r3, #1
 8006366:	d101      	bne.n	800636c <HAL_PCD_EP_Open+0xaa>
 8006368:	2302      	movs	r3, #2
 800636a:	e00e      	b.n	800638a <HAL_PCD_EP_Open+0xc8>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68f9      	ldr	r1, [r7, #12]
 800637a:	4618      	mov	r0, r3
 800637c:	f003 fcd8 	bl	8009d30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006388:	7afb      	ldrb	r3, [r7, #11]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	460b      	mov	r3, r1
 800639c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800639e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	da0f      	bge.n	80063c6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063a6:	78fb      	ldrb	r3, [r7, #3]
 80063a8:	f003 020f 	and.w	r2, r3, #15
 80063ac:	4613      	mov	r3, r2
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	1a9b      	subs	r3, r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	3338      	adds	r3, #56	; 0x38
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	4413      	add	r3, r2
 80063ba:	3304      	adds	r3, #4
 80063bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	705a      	strb	r2, [r3, #1]
 80063c4:	e00f      	b.n	80063e6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063c6:	78fb      	ldrb	r3, [r7, #3]
 80063c8:	f003 020f 	and.w	r2, r3, #15
 80063cc:	4613      	mov	r3, r2
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	1a9b      	subs	r3, r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	4413      	add	r3, r2
 80063dc:	3304      	adds	r3, #4
 80063de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80063e6:	78fb      	ldrb	r3, [r7, #3]
 80063e8:	f003 030f 	and.w	r3, r3, #15
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d101      	bne.n	8006400 <HAL_PCD_EP_Close+0x6e>
 80063fc:	2302      	movs	r3, #2
 80063fe:	e00e      	b.n	800641e <HAL_PCD_EP_Close+0x8c>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68f9      	ldr	r1, [r7, #12]
 800640e:	4618      	mov	r0, r3
 8006410:	f003 fd16 	bl	8009e40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b086      	sub	sp, #24
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	603b      	str	r3, [r7, #0]
 8006432:	460b      	mov	r3, r1
 8006434:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006436:	7afb      	ldrb	r3, [r7, #11]
 8006438:	f003 020f 	and.w	r2, r3, #15
 800643c:	4613      	mov	r3, r2
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	1a9b      	subs	r3, r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	4413      	add	r3, r2
 800644c:	3304      	adds	r3, #4
 800644e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	2200      	movs	r2, #0
 8006460:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2200      	movs	r2, #0
 8006466:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006468:	7afb      	ldrb	r3, [r7, #11]
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	b2da      	uxtb	r2, r3
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d102      	bne.n	8006482 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006482:	7afb      	ldrb	r3, [r7, #11]
 8006484:	f003 030f 	and.w	r3, r3, #15
 8006488:	2b00      	cmp	r3, #0
 800648a:	d109      	bne.n	80064a0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	461a      	mov	r2, r3
 8006498:	6979      	ldr	r1, [r7, #20]
 800649a:	f003 fff1 	bl	800a480 <USB_EP0StartXfer>
 800649e:	e008      	b.n	80064b2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6818      	ldr	r0, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	6979      	ldr	r1, [r7, #20]
 80064ae:	f003 fda3 	bl	8009ff8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	460b      	mov	r3, r1
 80064c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80064c8:	78fb      	ldrb	r3, [r7, #3]
 80064ca:	f003 020f 	and.w	r2, r3, #15
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	4613      	mov	r3, r2
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	1a9b      	subs	r3, r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	440b      	add	r3, r1
 80064da:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80064de:	681b      	ldr	r3, [r3, #0]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	607a      	str	r2, [r7, #4]
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	460b      	mov	r3, r1
 80064fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064fc:	7afb      	ldrb	r3, [r7, #11]
 80064fe:	f003 020f 	and.w	r2, r3, #15
 8006502:	4613      	mov	r3, r2
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	1a9b      	subs	r3, r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	3338      	adds	r3, #56	; 0x38
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4413      	add	r3, r2
 8006510:	3304      	adds	r3, #4
 8006512:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	2200      	movs	r2, #0
 8006524:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	2201      	movs	r2, #1
 800652a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800652c:	7afb      	ldrb	r3, [r7, #11]
 800652e:	f003 030f 	and.w	r3, r3, #15
 8006532:	b2da      	uxtb	r2, r3
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d102      	bne.n	8006546 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006546:	7afb      	ldrb	r3, [r7, #11]
 8006548:	f003 030f 	and.w	r3, r3, #15
 800654c:	2b00      	cmp	r3, #0
 800654e:	d109      	bne.n	8006564 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6818      	ldr	r0, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	b2db      	uxtb	r3, r3
 800655a:	461a      	mov	r2, r3
 800655c:	6979      	ldr	r1, [r7, #20]
 800655e:	f003 ff8f 	bl	800a480 <USB_EP0StartXfer>
 8006562:	e008      	b.n	8006576 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6818      	ldr	r0, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	461a      	mov	r2, r3
 8006570:	6979      	ldr	r1, [r7, #20]
 8006572:	f003 fd41 	bl	8009ff8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	460b      	mov	r3, r1
 800658a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800658c:	78fb      	ldrb	r3, [r7, #3]
 800658e:	f003 020f 	and.w	r2, r3, #15
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	429a      	cmp	r2, r3
 8006598:	d901      	bls.n	800659e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e050      	b.n	8006640 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800659e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	da0f      	bge.n	80065c6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065a6:	78fb      	ldrb	r3, [r7, #3]
 80065a8:	f003 020f 	and.w	r2, r3, #15
 80065ac:	4613      	mov	r3, r2
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	1a9b      	subs	r3, r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	3338      	adds	r3, #56	; 0x38
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	4413      	add	r3, r2
 80065ba:	3304      	adds	r3, #4
 80065bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2201      	movs	r2, #1
 80065c2:	705a      	strb	r2, [r3, #1]
 80065c4:	e00d      	b.n	80065e2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80065c6:	78fa      	ldrb	r2, [r7, #3]
 80065c8:	4613      	mov	r3, r2
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	1a9b      	subs	r3, r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	4413      	add	r3, r2
 80065d8:	3304      	adds	r3, #4
 80065da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2201      	movs	r2, #1
 80065e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	f003 030f 	and.w	r3, r3, #15
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d101      	bne.n	8006602 <HAL_PCD_EP_SetStall+0x82>
 80065fe:	2302      	movs	r3, #2
 8006600:	e01e      	b.n	8006640 <HAL_PCD_EP_SetStall+0xc0>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68f9      	ldr	r1, [r7, #12]
 8006610:	4618      	mov	r0, r3
 8006612:	f004 f91e 	bl	800a852 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006616:	78fb      	ldrb	r3, [r7, #3]
 8006618:	f003 030f 	and.w	r3, r3, #15
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10a      	bne.n	8006636 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6818      	ldr	r0, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	b2d9      	uxtb	r1, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006630:	461a      	mov	r2, r3
 8006632:	f004 fb0f 	bl	800ac54 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	f003 020f 	and.w	r2, r3, #15
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	429a      	cmp	r2, r3
 8006660:	d901      	bls.n	8006666 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e042      	b.n	80066ec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006666:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800666a:	2b00      	cmp	r3, #0
 800666c:	da0f      	bge.n	800668e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800666e:	78fb      	ldrb	r3, [r7, #3]
 8006670:	f003 020f 	and.w	r2, r3, #15
 8006674:	4613      	mov	r3, r2
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	1a9b      	subs	r3, r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	3338      	adds	r3, #56	; 0x38
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	4413      	add	r3, r2
 8006682:	3304      	adds	r3, #4
 8006684:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	705a      	strb	r2, [r3, #1]
 800668c:	e00f      	b.n	80066ae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800668e:	78fb      	ldrb	r3, [r7, #3]
 8006690:	f003 020f 	and.w	r2, r3, #15
 8006694:	4613      	mov	r3, r2
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	1a9b      	subs	r3, r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	4413      	add	r3, r2
 80066a4:	3304      	adds	r3, #4
 80066a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066b4:	78fb      	ldrb	r3, [r7, #3]
 80066b6:	f003 030f 	and.w	r3, r3, #15
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <HAL_PCD_EP_ClrStall+0x86>
 80066ca:	2302      	movs	r3, #2
 80066cc:	e00e      	b.n	80066ec <HAL_PCD_EP_ClrStall+0xa4>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68f9      	ldr	r1, [r7, #12]
 80066dc:	4618      	mov	r0, r3
 80066de:	f004 f926 	bl	800a92e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08a      	sub	sp, #40	; 0x28
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	4613      	mov	r3, r2
 800670c:	00db      	lsls	r3, r3, #3
 800670e:	1a9b      	subs	r3, r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	3338      	adds	r3, #56	; 0x38
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	4413      	add	r3, r2
 8006718:	3304      	adds	r3, #4
 800671a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	699a      	ldr	r2, [r3, #24]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	429a      	cmp	r2, r3
 8006726:	d901      	bls.n	800672c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e06c      	b.n	8006806 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	695a      	ldr	r2, [r3, #20]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	69fa      	ldr	r2, [r7, #28]
 800673e:	429a      	cmp	r2, r3
 8006740:	d902      	bls.n	8006748 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	3303      	adds	r3, #3
 800674c:	089b      	lsrs	r3, r3, #2
 800674e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006750:	e02b      	b.n	80067aa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	695a      	ldr	r2, [r3, #20]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	69fa      	ldr	r2, [r7, #28]
 8006764:	429a      	cmp	r2, r3
 8006766:	d902      	bls.n	800676e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	3303      	adds	r3, #3
 8006772:	089b      	lsrs	r3, r3, #2
 8006774:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	68d9      	ldr	r1, [r3, #12]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	b2da      	uxtb	r2, r3
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006786:	b2db      	uxtb	r3, r3
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	4603      	mov	r3, r0
 800678c:	6978      	ldr	r0, [r7, #20]
 800678e:	f003 ffca 	bl	800a726 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	441a      	add	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	699a      	ldr	r2, [r3, #24]
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	441a      	add	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d809      	bhi.n	80067d4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	699a      	ldr	r2, [r3, #24]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d203      	bcs.n	80067d4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1be      	bne.n	8006752 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	695a      	ldr	r2, [r3, #20]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d811      	bhi.n	8006804 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	f003 030f 	and.w	r3, r3, #15
 80067e6:	2201      	movs	r2, #1
 80067e8:	fa02 f303 	lsl.w	r3, r2, r3
 80067ec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	43db      	mvns	r3, r3
 80067fa:	6939      	ldr	r1, [r7, #16]
 80067fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006800:	4013      	ands	r3, r2
 8006802:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3720      	adds	r7, #32
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
	...

08006810 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	333c      	adds	r3, #60	; 0x3c
 8006828:	3304      	adds	r3, #4
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	2b01      	cmp	r3, #1
 8006844:	f040 80a0 	bne.w	8006988 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b00      	cmp	r3, #0
 8006850:	d015      	beq.n	800687e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4a72      	ldr	r2, [pc, #456]	; (8006a20 <PCD_EP_OutXfrComplete_int+0x210>)
 8006856:	4293      	cmp	r3, r2
 8006858:	f240 80dd 	bls.w	8006a16 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 80d7 	beq.w	8006a16 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	4413      	add	r3, r2
 8006870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006874:	461a      	mov	r2, r3
 8006876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800687a:	6093      	str	r3, [r2, #8]
 800687c:	e0cb      	b.n	8006a16 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	f003 0320 	and.w	r3, r3, #32
 8006884:	2b00      	cmp	r3, #0
 8006886:	d009      	beq.n	800689c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006894:	461a      	mov	r2, r3
 8006896:	2320      	movs	r3, #32
 8006898:	6093      	str	r3, [r2, #8]
 800689a:	e0bc      	b.n	8006a16 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f040 80b7 	bne.w	8006a16 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4a5d      	ldr	r2, [pc, #372]	; (8006a20 <PCD_EP_OutXfrComplete_int+0x210>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d90f      	bls.n	80068d0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c6:	461a      	mov	r2, r3
 80068c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068cc:	6093      	str	r3, [r2, #8]
 80068ce:	e0a2      	b.n	8006a16 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	4613      	mov	r3, r2
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	1a9b      	subs	r3, r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	440b      	add	r3, r1
 80068de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80068e2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	0159      	lsls	r1, r3, #5
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	440b      	add	r3, r1
 80068ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80068f6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	4613      	mov	r3, r2
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	1a9b      	subs	r3, r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4403      	add	r3, r0
 8006906:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800690a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800690c:	6879      	ldr	r1, [r7, #4]
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	4613      	mov	r3, r2
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	1a9b      	subs	r3, r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	440b      	add	r3, r1
 800691a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800691e:	6819      	ldr	r1, [r3, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	4613      	mov	r3, r2
 8006926:	00db      	lsls	r3, r3, #3
 8006928:	1a9b      	subs	r3, r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4403      	add	r3, r0
 800692e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4419      	add	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	4613      	mov	r3, r2
 800693c:	00db      	lsls	r3, r3, #3
 800693e:	1a9b      	subs	r3, r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4403      	add	r3, r0
 8006944:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006948:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d114      	bne.n	800697a <PCD_EP_OutXfrComplete_int+0x16a>
 8006950:	6879      	ldr	r1, [r7, #4]
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	4613      	mov	r3, r2
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	1a9b      	subs	r3, r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	440b      	add	r3, r1
 800695e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d108      	bne.n	800697a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6818      	ldr	r0, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006972:	461a      	mov	r2, r3
 8006974:	2101      	movs	r1, #1
 8006976:	f004 f96d 	bl	800ac54 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	b2db      	uxtb	r3, r3
 800697e:	4619      	mov	r1, r3
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f018 f815 	bl	801e9b0 <HAL_PCD_DataOutStageCallback>
 8006986:	e046      	b.n	8006a16 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4a26      	ldr	r2, [pc, #152]	; (8006a24 <PCD_EP_OutXfrComplete_int+0x214>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d124      	bne.n	80069da <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a6:	461a      	mov	r2, r3
 80069a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ac:	6093      	str	r3, [r2, #8]
 80069ae:	e032      	b.n	8006a16 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	f003 0320 	and.w	r3, r3, #32
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d008      	beq.n	80069cc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c6:	461a      	mov	r2, r3
 80069c8:	2320      	movs	r3, #32
 80069ca:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f017 ffec 	bl	801e9b0 <HAL_PCD_DataOutStageCallback>
 80069d8:	e01d      	b.n	8006a16 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d114      	bne.n	8006a0a <PCD_EP_OutXfrComplete_int+0x1fa>
 80069e0:	6879      	ldr	r1, [r7, #4]
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	4613      	mov	r3, r2
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	1a9b      	subs	r3, r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d108      	bne.n	8006a0a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6818      	ldr	r0, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006a02:	461a      	mov	r2, r3
 8006a04:	2100      	movs	r1, #0
 8006a06:	f004 f925 	bl	800ac54 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f017 ffcd 	bl	801e9b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	4f54300a 	.word	0x4f54300a
 8006a24:	4f54310a 	.word	0x4f54310a

08006a28 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	333c      	adds	r3, #60	; 0x3c
 8006a40:	3304      	adds	r3, #4
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4a15      	ldr	r2, [pc, #84]	; (8006ab0 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d90e      	bls.n	8006a7c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d009      	beq.n	8006a7c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a74:	461a      	mov	r2, r3
 8006a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a7a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f017 ff85 	bl	801e98c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	4a0a      	ldr	r2, [pc, #40]	; (8006ab0 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d90c      	bls.n	8006aa4 <PCD_EP_OutSetupPacket_int+0x7c>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d108      	bne.n	8006aa4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6818      	ldr	r0, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	f004 f8d8 	bl	800ac54 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	4f54300a 	.word	0x4f54300a

08006ab4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	70fb      	strb	r3, [r7, #3]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006acc:	78fb      	ldrb	r3, [r7, #3]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d107      	bne.n	8006ae2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006ad2:	883b      	ldrh	r3, [r7, #0]
 8006ad4:	0419      	lsls	r1, r3, #16
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	629a      	str	r2, [r3, #40]	; 0x28
 8006ae0:	e028      	b.n	8006b34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae8:	0c1b      	lsrs	r3, r3, #16
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	4413      	add	r3, r2
 8006aee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006af0:	2300      	movs	r3, #0
 8006af2:	73fb      	strb	r3, [r7, #15]
 8006af4:	e00d      	b.n	8006b12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
 8006afc:	3340      	adds	r3, #64	; 0x40
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	0c1b      	lsrs	r3, r3, #16
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	4413      	add	r3, r2
 8006b0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	73fb      	strb	r3, [r7, #15]
 8006b12:	7bfa      	ldrb	r2, [r7, #15]
 8006b14:	78fb      	ldrb	r3, [r7, #3]
 8006b16:	3b01      	subs	r3, #1
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d3ec      	bcc.n	8006af6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006b1c:	883b      	ldrh	r3, [r7, #0]
 8006b1e:	0418      	lsls	r0, r3, #16
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6819      	ldr	r1, [r3, #0]
 8006b24:	78fb      	ldrb	r3, [r7, #3]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	4302      	orrs	r2, r0
 8006b2c:	3340      	adds	r3, #64	; 0x40
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	440b      	add	r3, r1
 8006b32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	887a      	ldrh	r2, [r7, #2]
 8006b54:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e264      	b.n	8007058 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d075      	beq.n	8006c86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b9a:	4ba3      	ldr	r3, [pc, #652]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f003 030c 	and.w	r3, r3, #12
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	d00c      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ba6:	4ba0      	ldr	r3, [pc, #640]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bae:	2b08      	cmp	r3, #8
 8006bb0:	d112      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bb2:	4b9d      	ldr	r3, [pc, #628]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bbe:	d10b      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bc0:	4b99      	ldr	r3, [pc, #612]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d05b      	beq.n	8006c84 <HAL_RCC_OscConfig+0x108>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d157      	bne.n	8006c84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e23f      	b.n	8007058 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006be0:	d106      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x74>
 8006be2:	4b91      	ldr	r3, [pc, #580]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a90      	ldr	r2, [pc, #576]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	e01d      	b.n	8006c2c <HAL_RCC_OscConfig+0xb0>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bf8:	d10c      	bne.n	8006c14 <HAL_RCC_OscConfig+0x98>
 8006bfa:	4b8b      	ldr	r3, [pc, #556]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a8a      	ldr	r2, [pc, #552]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	4b88      	ldr	r3, [pc, #544]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a87      	ldr	r2, [pc, #540]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	e00b      	b.n	8006c2c <HAL_RCC_OscConfig+0xb0>
 8006c14:	4b84      	ldr	r3, [pc, #528]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a83      	ldr	r2, [pc, #524]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	4b81      	ldr	r3, [pc, #516]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a80      	ldr	r2, [pc, #512]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d013      	beq.n	8006c5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c34:	f7fc ffc2 	bl	8003bbc <HAL_GetTick>
 8006c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c3a:	e008      	b.n	8006c4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c3c:	f7fc ffbe 	bl	8003bbc <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b64      	cmp	r3, #100	; 0x64
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e204      	b.n	8007058 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c4e:	4b76      	ldr	r3, [pc, #472]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0f0      	beq.n	8006c3c <HAL_RCC_OscConfig+0xc0>
 8006c5a:	e014      	b.n	8006c86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c5c:	f7fc ffae 	bl	8003bbc <HAL_GetTick>
 8006c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c64:	f7fc ffaa 	bl	8003bbc <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b64      	cmp	r3, #100	; 0x64
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e1f0      	b.n	8007058 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c76:	4b6c      	ldr	r3, [pc, #432]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1f0      	bne.n	8006c64 <HAL_RCC_OscConfig+0xe8>
 8006c82:	e000      	b.n	8006c86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d063      	beq.n	8006d5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c92:	4b65      	ldr	r3, [pc, #404]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f003 030c 	and.w	r3, r3, #12
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00b      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c9e:	4b62      	ldr	r3, [pc, #392]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ca6:	2b08      	cmp	r3, #8
 8006ca8:	d11c      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006caa:	4b5f      	ldr	r3, [pc, #380]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d116      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cb6:	4b5c      	ldr	r3, [pc, #368]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d005      	beq.n	8006cce <HAL_RCC_OscConfig+0x152>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d001      	beq.n	8006cce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e1c4      	b.n	8007058 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cce:	4b56      	ldr	r3, [pc, #344]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	4952      	ldr	r1, [pc, #328]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ce2:	e03a      	b.n	8006d5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d020      	beq.n	8006d2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cec:	4b4f      	ldr	r3, [pc, #316]	; (8006e2c <HAL_RCC_OscConfig+0x2b0>)
 8006cee:	2201      	movs	r2, #1
 8006cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf2:	f7fc ff63 	bl	8003bbc <HAL_GetTick>
 8006cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cf8:	e008      	b.n	8006d0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cfa:	f7fc ff5f 	bl	8003bbc <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d901      	bls.n	8006d0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e1a5      	b.n	8007058 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d0c:	4b46      	ldr	r3, [pc, #280]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0f0      	beq.n	8006cfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d18:	4b43      	ldr	r3, [pc, #268]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	4940      	ldr	r1, [pc, #256]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	600b      	str	r3, [r1, #0]
 8006d2c:	e015      	b.n	8006d5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d2e:	4b3f      	ldr	r3, [pc, #252]	; (8006e2c <HAL_RCC_OscConfig+0x2b0>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d34:	f7fc ff42 	bl	8003bbc <HAL_GetTick>
 8006d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d3a:	e008      	b.n	8006d4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d3c:	f7fc ff3e 	bl	8003bbc <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e184      	b.n	8007058 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d4e:	4b36      	ldr	r3, [pc, #216]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1f0      	bne.n	8006d3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0308 	and.w	r3, r3, #8
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d030      	beq.n	8006dc8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d016      	beq.n	8006d9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d6e:	4b30      	ldr	r3, [pc, #192]	; (8006e30 <HAL_RCC_OscConfig+0x2b4>)
 8006d70:	2201      	movs	r2, #1
 8006d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d74:	f7fc ff22 	bl	8003bbc <HAL_GetTick>
 8006d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d7a:	e008      	b.n	8006d8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d7c:	f7fc ff1e 	bl	8003bbc <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e164      	b.n	8007058 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d8e:	4b26      	ldr	r3, [pc, #152]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d92:	f003 0302 	and.w	r3, r3, #2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d0f0      	beq.n	8006d7c <HAL_RCC_OscConfig+0x200>
 8006d9a:	e015      	b.n	8006dc8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d9c:	4b24      	ldr	r3, [pc, #144]	; (8006e30 <HAL_RCC_OscConfig+0x2b4>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006da2:	f7fc ff0b 	bl	8003bbc <HAL_GetTick>
 8006da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006da8:	e008      	b.n	8006dbc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006daa:	f7fc ff07 	bl	8003bbc <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d901      	bls.n	8006dbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e14d      	b.n	8007058 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dbc:	4b1a      	ldr	r3, [pc, #104]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dc0:	f003 0302 	and.w	r3, r3, #2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1f0      	bne.n	8006daa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 80a0 	beq.w	8006f16 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dda:	4b13      	ldr	r3, [pc, #76]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10f      	bne.n	8006e06 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006de6:	2300      	movs	r3, #0
 8006de8:	60bb      	str	r3, [r7, #8]
 8006dea:	4b0f      	ldr	r3, [pc, #60]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	4a0e      	ldr	r2, [pc, #56]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006df4:	6413      	str	r3, [r2, #64]	; 0x40
 8006df6:	4b0c      	ldr	r3, [pc, #48]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dfe:	60bb      	str	r3, [r7, #8]
 8006e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e02:	2301      	movs	r3, #1
 8006e04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e06:	4b0b      	ldr	r3, [pc, #44]	; (8006e34 <HAL_RCC_OscConfig+0x2b8>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d121      	bne.n	8006e56 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e12:	4b08      	ldr	r3, [pc, #32]	; (8006e34 <HAL_RCC_OscConfig+0x2b8>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a07      	ldr	r2, [pc, #28]	; (8006e34 <HAL_RCC_OscConfig+0x2b8>)
 8006e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e1e:	f7fc fecd 	bl	8003bbc <HAL_GetTick>
 8006e22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e24:	e011      	b.n	8006e4a <HAL_RCC_OscConfig+0x2ce>
 8006e26:	bf00      	nop
 8006e28:	40023800 	.word	0x40023800
 8006e2c:	42470000 	.word	0x42470000
 8006e30:	42470e80 	.word	0x42470e80
 8006e34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e38:	f7fc fec0 	bl	8003bbc <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d901      	bls.n	8006e4a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e106      	b.n	8007058 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e4a:	4b85      	ldr	r3, [pc, #532]	; (8007060 <HAL_RCC_OscConfig+0x4e4>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d0f0      	beq.n	8006e38 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d106      	bne.n	8006e6c <HAL_RCC_OscConfig+0x2f0>
 8006e5e:	4b81      	ldr	r3, [pc, #516]	; (8007064 <HAL_RCC_OscConfig+0x4e8>)
 8006e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e62:	4a80      	ldr	r2, [pc, #512]	; (8007064 <HAL_RCC_OscConfig+0x4e8>)
 8006e64:	f043 0301 	orr.w	r3, r3, #1
 8006e68:	6713      	str	r3, [r2, #112]	; 0x70
 8006e6a:	e01c      	b.n	8006ea6 <HAL_RCC_OscConfig+0x32a>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	2b05      	cmp	r3, #5
 8006e72:	d10c      	bne.n	8006e8e <HAL_RCC_OscConfig+0x312>
 8006e74:	4b7b      	ldr	r3, [pc, #492]	; (8007064 <HAL_RCC_OscConfig+0x4e8>)
 8006e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e78:	4a7a      	ldr	r2, [pc, #488]	; (8007064 <HAL_RCC_OscConfig+0x4e8>)
 8006e7a:	f043 0304 	orr.w	r3, r3, #4
 8006e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e80:	4b78      	ldr	r3, [pc, #480]	; (8007064 <HAL_RCC_OscConfig+0x4e8>)
 8006e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e84:	4a77      	ldr	r2, [pc, #476]	; (8007064 <HAL_RCC_OscConfig+0x4e8>)
 8006e86:	f043 0301 	orr.w	r3, r3, #1
 8006e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e8c:	e00b      	b.n	8006ea6 <HAL_RCC_OscConfig+0x32a>
 8006e8e:	4b75      	ldr	r3, [pc, #468]	; (8007064 <HAL_RCC_OscConfig+0x4e8>)
 8006e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e92:	4a74      	ldr	r2, [pc, #464]	; (8007064 <HAL_RCC_OscConfig+0x4e8>)
 8006e94:	f023 0301 	bic.w	r3, r3, #1
 8006e98:	6713      	str	r3, [r2, #112]	; 0x70
 8006e9a:	4b72      	ldr	r3, [pc, #456]	; (8007064 <HAL_RCC_OscConfig+0x4e8>)
 8006e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9e:	4a71      	ldr	r2, [pc, #452]	; (8007064 <HAL_RCC_OscConfig+0x4e8>)
 8006ea0:	f023 0304 	bic.w	r3, r3, #4
 8006ea4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d015      	beq.n	8006eda <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eae:	f7fc fe85 	bl	8003bbc <HAL_GetTick>
 8006eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eb4:	e00a      	b.n	8006ecc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eb6:	f7fc fe81 	bl	8003bbc <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d901      	bls.n	8006ecc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e0c5      	b.n	8007058 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ecc:	4b65      	ldr	r3, [pc, #404]	; (8007064 <HAL_RCC_OscConfig+0x4e8>)
 8006ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d0ee      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x33a>
 8006ed8:	e014      	b.n	8006f04 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eda:	f7fc fe6f 	bl	8003bbc <HAL_GetTick>
 8006ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ee0:	e00a      	b.n	8006ef8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ee2:	f7fc fe6b 	bl	8003bbc <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d901      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e0af      	b.n	8007058 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ef8:	4b5a      	ldr	r3, [pc, #360]	; (8007064 <HAL_RCC_OscConfig+0x4e8>)
 8006efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1ee      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d105      	bne.n	8006f16 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f0a:	4b56      	ldr	r3, [pc, #344]	; (8007064 <HAL_RCC_OscConfig+0x4e8>)
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0e:	4a55      	ldr	r2, [pc, #340]	; (8007064 <HAL_RCC_OscConfig+0x4e8>)
 8006f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 809b 	beq.w	8007056 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f20:	4b50      	ldr	r3, [pc, #320]	; (8007064 <HAL_RCC_OscConfig+0x4e8>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 030c 	and.w	r3, r3, #12
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d05c      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d141      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f34:	4b4c      	ldr	r3, [pc, #304]	; (8007068 <HAL_RCC_OscConfig+0x4ec>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f3a:	f7fc fe3f 	bl	8003bbc <HAL_GetTick>
 8006f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f40:	e008      	b.n	8006f54 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f42:	f7fc fe3b 	bl	8003bbc <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d901      	bls.n	8006f54 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e081      	b.n	8007058 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f54:	4b43      	ldr	r3, [pc, #268]	; (8007064 <HAL_RCC_OscConfig+0x4e8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1f0      	bne.n	8006f42 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	69da      	ldr	r2, [r3, #28]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a1b      	ldr	r3, [r3, #32]
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	019b      	lsls	r3, r3, #6
 8006f70:	431a      	orrs	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f76:	085b      	lsrs	r3, r3, #1
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	041b      	lsls	r3, r3, #16
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f82:	061b      	lsls	r3, r3, #24
 8006f84:	4937      	ldr	r1, [pc, #220]	; (8007064 <HAL_RCC_OscConfig+0x4e8>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f8a:	4b37      	ldr	r3, [pc, #220]	; (8007068 <HAL_RCC_OscConfig+0x4ec>)
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f90:	f7fc fe14 	bl	8003bbc <HAL_GetTick>
 8006f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f96:	e008      	b.n	8006faa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f98:	f7fc fe10 	bl	8003bbc <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e056      	b.n	8007058 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006faa:	4b2e      	ldr	r3, [pc, #184]	; (8007064 <HAL_RCC_OscConfig+0x4e8>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0f0      	beq.n	8006f98 <HAL_RCC_OscConfig+0x41c>
 8006fb6:	e04e      	b.n	8007056 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fb8:	4b2b      	ldr	r3, [pc, #172]	; (8007068 <HAL_RCC_OscConfig+0x4ec>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fbe:	f7fc fdfd 	bl	8003bbc <HAL_GetTick>
 8006fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fc4:	e008      	b.n	8006fd8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fc6:	f7fc fdf9 	bl	8003bbc <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d901      	bls.n	8006fd8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e03f      	b.n	8007058 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fd8:	4b22      	ldr	r3, [pc, #136]	; (8007064 <HAL_RCC_OscConfig+0x4e8>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1f0      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x44a>
 8006fe4:	e037      	b.n	8007056 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d101      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e032      	b.n	8007058 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ff2:	4b1c      	ldr	r3, [pc, #112]	; (8007064 <HAL_RCC_OscConfig+0x4e8>)
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d028      	beq.n	8007052 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800700a:	429a      	cmp	r2, r3
 800700c:	d121      	bne.n	8007052 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007018:	429a      	cmp	r2, r3
 800701a:	d11a      	bne.n	8007052 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007022:	4013      	ands	r3, r2
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007028:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800702a:	4293      	cmp	r3, r2
 800702c:	d111      	bne.n	8007052 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007038:	085b      	lsrs	r3, r3, #1
 800703a:	3b01      	subs	r3, #1
 800703c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800703e:	429a      	cmp	r2, r3
 8007040:	d107      	bne.n	8007052 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800704e:	429a      	cmp	r2, r3
 8007050:	d001      	beq.n	8007056 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e000      	b.n	8007058 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3718      	adds	r7, #24
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	40007000 	.word	0x40007000
 8007064:	40023800 	.word	0x40023800
 8007068:	42470060 	.word	0x42470060

0800706c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e0cc      	b.n	800721a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007080:	4b68      	ldr	r3, [pc, #416]	; (8007224 <HAL_RCC_ClockConfig+0x1b8>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d90c      	bls.n	80070a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800708e:	4b65      	ldr	r3, [pc, #404]	; (8007224 <HAL_RCC_ClockConfig+0x1b8>)
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	b2d2      	uxtb	r2, r2
 8007094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007096:	4b63      	ldr	r3, [pc, #396]	; (8007224 <HAL_RCC_ClockConfig+0x1b8>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0307 	and.w	r3, r3, #7
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d001      	beq.n	80070a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e0b8      	b.n	800721a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d020      	beq.n	80070f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0304 	and.w	r3, r3, #4
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d005      	beq.n	80070cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070c0:	4b59      	ldr	r3, [pc, #356]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	4a58      	ldr	r2, [pc, #352]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80070c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0308 	and.w	r3, r3, #8
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d005      	beq.n	80070e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070d8:	4b53      	ldr	r3, [pc, #332]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	4a52      	ldr	r2, [pc, #328]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80070de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070e4:	4b50      	ldr	r3, [pc, #320]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	494d      	ldr	r1, [pc, #308]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d044      	beq.n	800718c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d107      	bne.n	800711a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800710a:	4b47      	ldr	r3, [pc, #284]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d119      	bne.n	800714a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e07f      	b.n	800721a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	2b02      	cmp	r3, #2
 8007120:	d003      	beq.n	800712a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007126:	2b03      	cmp	r3, #3
 8007128:	d107      	bne.n	800713a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800712a:	4b3f      	ldr	r3, [pc, #252]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d109      	bne.n	800714a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e06f      	b.n	800721a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800713a:	4b3b      	ldr	r3, [pc, #236]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e067      	b.n	800721a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800714a:	4b37      	ldr	r3, [pc, #220]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f023 0203 	bic.w	r2, r3, #3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	4934      	ldr	r1, [pc, #208]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 8007158:	4313      	orrs	r3, r2
 800715a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800715c:	f7fc fd2e 	bl	8003bbc <HAL_GetTick>
 8007160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007162:	e00a      	b.n	800717a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007164:	f7fc fd2a 	bl	8003bbc <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007172:	4293      	cmp	r3, r2
 8007174:	d901      	bls.n	800717a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e04f      	b.n	800721a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800717a:	4b2b      	ldr	r3, [pc, #172]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f003 020c 	and.w	r2, r3, #12
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	429a      	cmp	r2, r3
 800718a:	d1eb      	bne.n	8007164 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800718c:	4b25      	ldr	r3, [pc, #148]	; (8007224 <HAL_RCC_ClockConfig+0x1b8>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0307 	and.w	r3, r3, #7
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d20c      	bcs.n	80071b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800719a:	4b22      	ldr	r3, [pc, #136]	; (8007224 <HAL_RCC_ClockConfig+0x1b8>)
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071a2:	4b20      	ldr	r3, [pc, #128]	; (8007224 <HAL_RCC_ClockConfig+0x1b8>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0307 	and.w	r3, r3, #7
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d001      	beq.n	80071b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e032      	b.n	800721a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0304 	and.w	r3, r3, #4
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d008      	beq.n	80071d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071c0:	4b19      	ldr	r3, [pc, #100]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	4916      	ldr	r1, [pc, #88]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0308 	and.w	r3, r3, #8
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d009      	beq.n	80071f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071de:	4b12      	ldr	r3, [pc, #72]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	490e      	ldr	r1, [pc, #56]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071f2:	f000 f821 	bl	8007238 <HAL_RCC_GetSysClockFreq>
 80071f6:	4602      	mov	r2, r0
 80071f8:	4b0b      	ldr	r3, [pc, #44]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	091b      	lsrs	r3, r3, #4
 80071fe:	f003 030f 	and.w	r3, r3, #15
 8007202:	490a      	ldr	r1, [pc, #40]	; (800722c <HAL_RCC_ClockConfig+0x1c0>)
 8007204:	5ccb      	ldrb	r3, [r1, r3]
 8007206:	fa22 f303 	lsr.w	r3, r2, r3
 800720a:	4a09      	ldr	r2, [pc, #36]	; (8007230 <HAL_RCC_ClockConfig+0x1c4>)
 800720c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800720e:	4b09      	ldr	r3, [pc, #36]	; (8007234 <HAL_RCC_ClockConfig+0x1c8>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4618      	mov	r0, r3
 8007214:	f7fc faec 	bl	80037f0 <HAL_InitTick>

  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	40023c00 	.word	0x40023c00
 8007228:	40023800 	.word	0x40023800
 800722c:	080266a8 	.word	0x080266a8
 8007230:	2000001c 	.word	0x2000001c
 8007234:	20000020 	.word	0x20000020

08007238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007238:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	607b      	str	r3, [r7, #4]
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]
 8007248:	2300      	movs	r3, #0
 800724a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800724c:	2300      	movs	r3, #0
 800724e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007250:	4b67      	ldr	r3, [pc, #412]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f003 030c 	and.w	r3, r3, #12
 8007258:	2b08      	cmp	r3, #8
 800725a:	d00d      	beq.n	8007278 <HAL_RCC_GetSysClockFreq+0x40>
 800725c:	2b08      	cmp	r3, #8
 800725e:	f200 80bd 	bhi.w	80073dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <HAL_RCC_GetSysClockFreq+0x34>
 8007266:	2b04      	cmp	r3, #4
 8007268:	d003      	beq.n	8007272 <HAL_RCC_GetSysClockFreq+0x3a>
 800726a:	e0b7      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800726c:	4b61      	ldr	r3, [pc, #388]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800726e:	60bb      	str	r3, [r7, #8]
       break;
 8007270:	e0b7      	b.n	80073e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007272:	4b61      	ldr	r3, [pc, #388]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007274:	60bb      	str	r3, [r7, #8]
      break;
 8007276:	e0b4      	b.n	80073e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007278:	4b5d      	ldr	r3, [pc, #372]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007280:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007282:	4b5b      	ldr	r3, [pc, #364]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d04d      	beq.n	800732a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800728e:	4b58      	ldr	r3, [pc, #352]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	099b      	lsrs	r3, r3, #6
 8007294:	461a      	mov	r2, r3
 8007296:	f04f 0300 	mov.w	r3, #0
 800729a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800729e:	f04f 0100 	mov.w	r1, #0
 80072a2:	ea02 0800 	and.w	r8, r2, r0
 80072a6:	ea03 0901 	and.w	r9, r3, r1
 80072aa:	4640      	mov	r0, r8
 80072ac:	4649      	mov	r1, r9
 80072ae:	f04f 0200 	mov.w	r2, #0
 80072b2:	f04f 0300 	mov.w	r3, #0
 80072b6:	014b      	lsls	r3, r1, #5
 80072b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80072bc:	0142      	lsls	r2, r0, #5
 80072be:	4610      	mov	r0, r2
 80072c0:	4619      	mov	r1, r3
 80072c2:	ebb0 0008 	subs.w	r0, r0, r8
 80072c6:	eb61 0109 	sbc.w	r1, r1, r9
 80072ca:	f04f 0200 	mov.w	r2, #0
 80072ce:	f04f 0300 	mov.w	r3, #0
 80072d2:	018b      	lsls	r3, r1, #6
 80072d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80072d8:	0182      	lsls	r2, r0, #6
 80072da:	1a12      	subs	r2, r2, r0
 80072dc:	eb63 0301 	sbc.w	r3, r3, r1
 80072e0:	f04f 0000 	mov.w	r0, #0
 80072e4:	f04f 0100 	mov.w	r1, #0
 80072e8:	00d9      	lsls	r1, r3, #3
 80072ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072ee:	00d0      	lsls	r0, r2, #3
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	eb12 0208 	adds.w	r2, r2, r8
 80072f8:	eb43 0309 	adc.w	r3, r3, r9
 80072fc:	f04f 0000 	mov.w	r0, #0
 8007300:	f04f 0100 	mov.w	r1, #0
 8007304:	0259      	lsls	r1, r3, #9
 8007306:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800730a:	0250      	lsls	r0, r2, #9
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	4610      	mov	r0, r2
 8007312:	4619      	mov	r1, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	461a      	mov	r2, r3
 8007318:	f04f 0300 	mov.w	r3, #0
 800731c:	f7f9 fca4 	bl	8000c68 <__aeabi_uldivmod>
 8007320:	4602      	mov	r2, r0
 8007322:	460b      	mov	r3, r1
 8007324:	4613      	mov	r3, r2
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	e04a      	b.n	80073c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800732a:	4b31      	ldr	r3, [pc, #196]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	099b      	lsrs	r3, r3, #6
 8007330:	461a      	mov	r2, r3
 8007332:	f04f 0300 	mov.w	r3, #0
 8007336:	f240 10ff 	movw	r0, #511	; 0x1ff
 800733a:	f04f 0100 	mov.w	r1, #0
 800733e:	ea02 0400 	and.w	r4, r2, r0
 8007342:	ea03 0501 	and.w	r5, r3, r1
 8007346:	4620      	mov	r0, r4
 8007348:	4629      	mov	r1, r5
 800734a:	f04f 0200 	mov.w	r2, #0
 800734e:	f04f 0300 	mov.w	r3, #0
 8007352:	014b      	lsls	r3, r1, #5
 8007354:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007358:	0142      	lsls	r2, r0, #5
 800735a:	4610      	mov	r0, r2
 800735c:	4619      	mov	r1, r3
 800735e:	1b00      	subs	r0, r0, r4
 8007360:	eb61 0105 	sbc.w	r1, r1, r5
 8007364:	f04f 0200 	mov.w	r2, #0
 8007368:	f04f 0300 	mov.w	r3, #0
 800736c:	018b      	lsls	r3, r1, #6
 800736e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007372:	0182      	lsls	r2, r0, #6
 8007374:	1a12      	subs	r2, r2, r0
 8007376:	eb63 0301 	sbc.w	r3, r3, r1
 800737a:	f04f 0000 	mov.w	r0, #0
 800737e:	f04f 0100 	mov.w	r1, #0
 8007382:	00d9      	lsls	r1, r3, #3
 8007384:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007388:	00d0      	lsls	r0, r2, #3
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	1912      	adds	r2, r2, r4
 8007390:	eb45 0303 	adc.w	r3, r5, r3
 8007394:	f04f 0000 	mov.w	r0, #0
 8007398:	f04f 0100 	mov.w	r1, #0
 800739c:	0299      	lsls	r1, r3, #10
 800739e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80073a2:	0290      	lsls	r0, r2, #10
 80073a4:	4602      	mov	r2, r0
 80073a6:	460b      	mov	r3, r1
 80073a8:	4610      	mov	r0, r2
 80073aa:	4619      	mov	r1, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	461a      	mov	r2, r3
 80073b0:	f04f 0300 	mov.w	r3, #0
 80073b4:	f7f9 fc58 	bl	8000c68 <__aeabi_uldivmod>
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	4613      	mov	r3, r2
 80073be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073c0:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	0c1b      	lsrs	r3, r3, #16
 80073c6:	f003 0303 	and.w	r3, r3, #3
 80073ca:	3301      	adds	r3, #1
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d8:	60bb      	str	r3, [r7, #8]
      break;
 80073da:	e002      	b.n	80073e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073dc:	4b05      	ldr	r3, [pc, #20]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80073de:	60bb      	str	r3, [r7, #8]
      break;
 80073e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073e2:	68bb      	ldr	r3, [r7, #8]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80073ee:	bf00      	nop
 80073f0:	40023800 	.word	0x40023800
 80073f4:	00f42400 	.word	0x00f42400
 80073f8:	007a1200 	.word	0x007a1200

080073fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073fc:	b480      	push	{r7}
 80073fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007400:	4b03      	ldr	r3, [pc, #12]	; (8007410 <HAL_RCC_GetHCLKFreq+0x14>)
 8007402:	681b      	ldr	r3, [r3, #0]
}
 8007404:	4618      	mov	r0, r3
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	2000001c 	.word	0x2000001c

08007414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007418:	f7ff fff0 	bl	80073fc <HAL_RCC_GetHCLKFreq>
 800741c:	4602      	mov	r2, r0
 800741e:	4b05      	ldr	r3, [pc, #20]	; (8007434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	0a9b      	lsrs	r3, r3, #10
 8007424:	f003 0307 	and.w	r3, r3, #7
 8007428:	4903      	ldr	r1, [pc, #12]	; (8007438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800742a:	5ccb      	ldrb	r3, [r1, r3]
 800742c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007430:	4618      	mov	r0, r3
 8007432:	bd80      	pop	{r7, pc}
 8007434:	40023800 	.word	0x40023800
 8007438:	080266b8 	.word	0x080266b8

0800743c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007440:	f7ff ffdc 	bl	80073fc <HAL_RCC_GetHCLKFreq>
 8007444:	4602      	mov	r2, r0
 8007446:	4b05      	ldr	r3, [pc, #20]	; (800745c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	0b5b      	lsrs	r3, r3, #13
 800744c:	f003 0307 	and.w	r3, r3, #7
 8007450:	4903      	ldr	r1, [pc, #12]	; (8007460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007452:	5ccb      	ldrb	r3, [r1, r3]
 8007454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007458:	4618      	mov	r0, r3
 800745a:	bd80      	pop	{r7, pc}
 800745c:	40023800 	.word	0x40023800
 8007460:	080266b8 	.word	0x080266b8

08007464 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	220f      	movs	r2, #15
 8007472:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007474:	4b12      	ldr	r3, [pc, #72]	; (80074c0 <HAL_RCC_GetClockConfig+0x5c>)
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f003 0203 	and.w	r2, r3, #3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007480:	4b0f      	ldr	r3, [pc, #60]	; (80074c0 <HAL_RCC_GetClockConfig+0x5c>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800748c:	4b0c      	ldr	r3, [pc, #48]	; (80074c0 <HAL_RCC_GetClockConfig+0x5c>)
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007498:	4b09      	ldr	r3, [pc, #36]	; (80074c0 <HAL_RCC_GetClockConfig+0x5c>)
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	08db      	lsrs	r3, r3, #3
 800749e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80074a6:	4b07      	ldr	r3, [pc, #28]	; (80074c4 <HAL_RCC_GetClockConfig+0x60>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0207 	and.w	r2, r3, #7
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	601a      	str	r2, [r3, #0]
}
 80074b2:	bf00      	nop
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	40023800 	.word	0x40023800
 80074c4:	40023c00 	.word	0x40023c00

080074c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d105      	bne.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d035      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80074f0:	4b62      	ldr	r3, [pc, #392]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074f6:	f7fc fb61 	bl	8003bbc <HAL_GetTick>
 80074fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80074fc:	e008      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80074fe:	f7fc fb5d 	bl	8003bbc <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b02      	cmp	r3, #2
 800750a:	d901      	bls.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e0b0      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007510:	4b5b      	ldr	r3, [pc, #364]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1f0      	bne.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	019a      	lsls	r2, r3, #6
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	071b      	lsls	r3, r3, #28
 8007528:	4955      	ldr	r1, [pc, #340]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800752a:	4313      	orrs	r3, r2
 800752c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007530:	4b52      	ldr	r3, [pc, #328]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007532:	2201      	movs	r2, #1
 8007534:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007536:	f7fc fb41 	bl	8003bbc <HAL_GetTick>
 800753a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800753c:	e008      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800753e:	f7fc fb3d 	bl	8003bbc <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	2b02      	cmp	r3, #2
 800754a:	d901      	bls.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e090      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007550:	4b4b      	ldr	r3, [pc, #300]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d0f0      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0302 	and.w	r3, r3, #2
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 8083 	beq.w	8007670 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800756a:	2300      	movs	r3, #0
 800756c:	60fb      	str	r3, [r7, #12]
 800756e:	4b44      	ldr	r3, [pc, #272]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007572:	4a43      	ldr	r2, [pc, #268]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007578:	6413      	str	r3, [r2, #64]	; 0x40
 800757a:	4b41      	ldr	r3, [pc, #260]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007582:	60fb      	str	r3, [r7, #12]
 8007584:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007586:	4b3f      	ldr	r3, [pc, #252]	; (8007684 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a3e      	ldr	r2, [pc, #248]	; (8007684 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800758c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007590:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007592:	f7fc fb13 	bl	8003bbc <HAL_GetTick>
 8007596:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007598:	e008      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800759a:	f7fc fb0f 	bl	8003bbc <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d901      	bls.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e062      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80075ac:	4b35      	ldr	r3, [pc, #212]	; (8007684 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0f0      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80075b8:	4b31      	ldr	r3, [pc, #196]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d02f      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d028      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075d6:	4b2a      	ldr	r3, [pc, #168]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80075e0:	4b29      	ldr	r3, [pc, #164]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80075e2:	2201      	movs	r2, #1
 80075e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80075e6:	4b28      	ldr	r3, [pc, #160]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80075ec:	4a24      	ldr	r2, [pc, #144]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80075f2:	4b23      	ldr	r3, [pc, #140]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d114      	bne.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80075fe:	f7fc fadd 	bl	8003bbc <HAL_GetTick>
 8007602:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007604:	e00a      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007606:	f7fc fad9 	bl	8003bbc <HAL_GetTick>
 800760a:	4602      	mov	r2, r0
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	f241 3288 	movw	r2, #5000	; 0x1388
 8007614:	4293      	cmp	r3, r2
 8007616:	d901      	bls.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e02a      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800761c:	4b18      	ldr	r3, [pc, #96]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800761e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	2b00      	cmp	r3, #0
 8007626:	d0ee      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007630:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007634:	d10d      	bne.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007636:	4b12      	ldr	r3, [pc, #72]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800764a:	490d      	ldr	r1, [pc, #52]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800764c:	4313      	orrs	r3, r2
 800764e:	608b      	str	r3, [r1, #8]
 8007650:	e005      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007652:	4b0b      	ldr	r3, [pc, #44]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	4a0a      	ldr	r2, [pc, #40]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007658:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800765c:	6093      	str	r3, [r2, #8]
 800765e:	4b08      	ldr	r3, [pc, #32]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007660:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800766a:	4905      	ldr	r1, [pc, #20]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800766c:	4313      	orrs	r3, r2
 800766e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3718      	adds	r7, #24
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	42470068 	.word	0x42470068
 8007680:	40023800 	.word	0x40023800
 8007684:	40007000 	.word	0x40007000
 8007688:	42470e40 	.word	0x42470e40

0800768c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e083      	b.n	80077a6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	7f5b      	ldrb	r3, [r3, #29]
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d105      	bne.n	80076b4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7fb ff94 	bl	80035dc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	22ca      	movs	r2, #202	; 0xca
 80076c0:	625a      	str	r2, [r3, #36]	; 0x24
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2253      	movs	r2, #83	; 0x53
 80076c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 faa8 	bl	8007c20 <RTC_EnterInitMode>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d008      	beq.n	80076e8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	22ff      	movs	r2, #255	; 0xff
 80076dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2204      	movs	r2, #4
 80076e2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e05e      	b.n	80077a6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	6812      	ldr	r2, [r2, #0]
 80076f2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80076f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076fa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6899      	ldr	r1, [r3, #8]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685a      	ldr	r2, [r3, #4]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	431a      	orrs	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	431a      	orrs	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	68d2      	ldr	r2, [r2, #12]
 8007722:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6919      	ldr	r1, [r3, #16]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	041a      	lsls	r2, r3, #16
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68da      	ldr	r2, [r3, #12]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007746:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f003 0320 	and.w	r3, r3, #32
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10e      	bne.n	8007774 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fa3a 	bl	8007bd0 <HAL_RTC_WaitForSynchro>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d008      	beq.n	8007774 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	22ff      	movs	r2, #255	; 0xff
 8007768:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2204      	movs	r2, #4
 800776e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e018      	b.n	80077a6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007782:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	699a      	ldr	r2, [r3, #24]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	430a      	orrs	r2, r1
 8007794:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	22ff      	movs	r2, #255	; 0xff
 800779c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80077a4:	2300      	movs	r3, #0
  }
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80077ae:	b590      	push	{r4, r7, lr}
 80077b0:	b087      	sub	sp, #28
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	60f8      	str	r0, [r7, #12]
 80077b6:	60b9      	str	r1, [r7, #8]
 80077b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	7f1b      	ldrb	r3, [r3, #28]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d101      	bne.n	80077ca <HAL_RTC_SetTime+0x1c>
 80077c6:	2302      	movs	r3, #2
 80077c8:	e0aa      	b.n	8007920 <HAL_RTC_SetTime+0x172>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2201      	movs	r2, #1
 80077ce:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2202      	movs	r2, #2
 80077d4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d126      	bne.n	800782a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d102      	bne.n	80077f0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	2200      	movs	r2, #0
 80077ee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 fa3f 	bl	8007c78 <RTC_ByteToBcd2>
 80077fa:	4603      	mov	r3, r0
 80077fc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	785b      	ldrb	r3, [r3, #1]
 8007802:	4618      	mov	r0, r3
 8007804:	f000 fa38 	bl	8007c78 <RTC_ByteToBcd2>
 8007808:	4603      	mov	r3, r0
 800780a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800780c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	789b      	ldrb	r3, [r3, #2]
 8007812:	4618      	mov	r0, r3
 8007814:	f000 fa30 	bl	8007c78 <RTC_ByteToBcd2>
 8007818:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800781a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	78db      	ldrb	r3, [r3, #3]
 8007822:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007824:	4313      	orrs	r3, r2
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	e018      	b.n	800785c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007834:	2b00      	cmp	r3, #0
 8007836:	d102      	bne.n	800783e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2200      	movs	r2, #0
 800783c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	785b      	ldrb	r3, [r3, #1]
 8007848:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800784a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007850:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	78db      	ldrb	r3, [r3, #3]
 8007856:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007858:	4313      	orrs	r3, r2
 800785a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	22ca      	movs	r2, #202	; 0xca
 8007862:	625a      	str	r2, [r3, #36]	; 0x24
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2253      	movs	r2, #83	; 0x53
 800786a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 f9d7 	bl	8007c20 <RTC_EnterInitMode>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00b      	beq.n	8007890 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	22ff      	movs	r2, #255	; 0xff
 800787e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2204      	movs	r2, #4
 8007884:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e047      	b.n	8007920 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800789a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800789e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689a      	ldr	r2, [r3, #8]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80078ae:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6899      	ldr	r1, [r3, #8]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	68da      	ldr	r2, [r3, #12]
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	431a      	orrs	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078d6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f003 0320 	and.w	r3, r3, #32
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d111      	bne.n	800790a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 f972 	bl	8007bd0 <HAL_RTC_WaitForSynchro>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00b      	beq.n	800790a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	22ff      	movs	r2, #255	; 0xff
 80078f8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2204      	movs	r2, #4
 80078fe:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e00a      	b.n	8007920 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	22ff      	movs	r2, #255	; 0xff
 8007910:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2201      	movs	r2, #1
 8007916:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800791e:	2300      	movs	r3, #0
  }
}
 8007920:	4618      	mov	r0, r3
 8007922:	371c      	adds	r7, #28
 8007924:	46bd      	mov	sp, r7
 8007926:	bd90      	pop	{r4, r7, pc}

08007928 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800795a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800795e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	0c1b      	lsrs	r3, r3, #16
 8007964:	b2db      	uxtb	r3, r3
 8007966:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800796a:	b2da      	uxtb	r2, r3
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	0a1b      	lsrs	r3, r3, #8
 8007974:	b2db      	uxtb	r3, r3
 8007976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800797a:	b2da      	uxtb	r2, r3
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	b2db      	uxtb	r3, r3
 8007984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007988:	b2da      	uxtb	r2, r3
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	0c1b      	lsrs	r3, r3, #16
 8007992:	b2db      	uxtb	r3, r3
 8007994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007998:	b2da      	uxtb	r2, r3
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d11a      	bne.n	80079da <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	4618      	mov	r0, r3
 80079aa:	f000 f983 	bl	8007cb4 <RTC_Bcd2ToByte>
 80079ae:	4603      	mov	r3, r0
 80079b0:	461a      	mov	r2, r3
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	785b      	ldrb	r3, [r3, #1]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 f97a 	bl	8007cb4 <RTC_Bcd2ToByte>
 80079c0:	4603      	mov	r3, r0
 80079c2:	461a      	mov	r2, r3
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	789b      	ldrb	r3, [r3, #2]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f000 f971 	bl	8007cb4 <RTC_Bcd2ToByte>
 80079d2:	4603      	mov	r3, r0
 80079d4:	461a      	mov	r2, r3
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3718      	adds	r7, #24
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80079e4:	b590      	push	{r4, r7, lr}
 80079e6:	b087      	sub	sp, #28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80079f0:	2300      	movs	r3, #0
 80079f2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	7f1b      	ldrb	r3, [r3, #28]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d101      	bne.n	8007a00 <HAL_RTC_SetDate+0x1c>
 80079fc:	2302      	movs	r3, #2
 80079fe:	e094      	b.n	8007b2a <HAL_RTC_SetDate+0x146>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2201      	movs	r2, #1
 8007a04:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2202      	movs	r2, #2
 8007a0a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10e      	bne.n	8007a30 <HAL_RTC_SetDate+0x4c>
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	785b      	ldrb	r3, [r3, #1]
 8007a16:	f003 0310 	and.w	r3, r3, #16
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d008      	beq.n	8007a30 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	785b      	ldrb	r3, [r3, #1]
 8007a22:	f023 0310 	bic.w	r3, r3, #16
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	330a      	adds	r3, #10
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d11c      	bne.n	8007a70 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	78db      	ldrb	r3, [r3, #3]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 f91c 	bl	8007c78 <RTC_ByteToBcd2>
 8007a40:	4603      	mov	r3, r0
 8007a42:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	785b      	ldrb	r3, [r3, #1]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f000 f915 	bl	8007c78 <RTC_ByteToBcd2>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007a52:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	789b      	ldrb	r3, [r3, #2]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 f90d 	bl	8007c78 <RTC_ByteToBcd2>
 8007a5e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007a60:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	617b      	str	r3, [r7, #20]
 8007a6e:	e00e      	b.n	8007a8e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	78db      	ldrb	r3, [r3, #3]
 8007a74:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	785b      	ldrb	r3, [r3, #1]
 8007a7a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007a7c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007a82:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	22ca      	movs	r2, #202	; 0xca
 8007a94:	625a      	str	r2, [r3, #36]	; 0x24
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2253      	movs	r2, #83	; 0x53
 8007a9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f000 f8be 	bl	8007c20 <RTC_EnterInitMode>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00b      	beq.n	8007ac2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	22ff      	movs	r2, #255	; 0xff
 8007ab0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2204      	movs	r2, #4
 8007ab6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e033      	b.n	8007b2a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007acc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007ad0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68da      	ldr	r2, [r3, #12]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ae0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f003 0320 	and.w	r3, r3, #32
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d111      	bne.n	8007b14 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 f86d 	bl	8007bd0 <HAL_RTC_WaitForSynchro>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00b      	beq.n	8007b14 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	22ff      	movs	r2, #255	; 0xff
 8007b02:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2204      	movs	r2, #4
 8007b08:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e00a      	b.n	8007b2a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	22ff      	movs	r2, #255	; 0xff
 8007b1a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007b28:	2300      	movs	r3, #0
  }
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd90      	pop	{r4, r7, pc}

08007b32 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b086      	sub	sp, #24
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	60f8      	str	r0, [r7, #12]
 8007b3a:	60b9      	str	r1, [r7, #8]
 8007b3c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007b4c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007b50:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	0c1b      	lsrs	r3, r3, #16
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	0a1b      	lsrs	r3, r3, #8
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	f003 031f 	and.w	r3, r3, #31
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	0b5b      	lsrs	r3, r3, #13
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	f003 0307 	and.w	r3, r3, #7
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d11a      	bne.n	8007bc6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	78db      	ldrb	r3, [r3, #3]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 f88d 	bl	8007cb4 <RTC_Bcd2ToByte>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	785b      	ldrb	r3, [r3, #1]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 f884 	bl	8007cb4 <RTC_Bcd2ToByte>
 8007bac:	4603      	mov	r3, r0
 8007bae:	461a      	mov	r2, r3
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	789b      	ldrb	r3, [r3, #2]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 f87b 	bl	8007cb4 <RTC_Bcd2ToByte>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3718      	adds	r7, #24
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68da      	ldr	r2, [r3, #12]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007bea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007bec:	f7fb ffe6 	bl	8003bbc <HAL_GetTick>
 8007bf0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007bf2:	e009      	b.n	8007c08 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007bf4:	f7fb ffe2 	bl	8003bbc <HAL_GetTick>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c02:	d901      	bls.n	8007c08 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e007      	b.n	8007c18 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	f003 0320 	and.w	r3, r3, #32
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d0ee      	beq.n	8007bf4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d119      	bne.n	8007c6e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c42:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c44:	f7fb ffba 	bl	8003bbc <HAL_GetTick>
 8007c48:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007c4a:	e009      	b.n	8007c60 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007c4c:	f7fb ffb6 	bl	8003bbc <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c5a:	d901      	bls.n	8007c60 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e007      	b.n	8007c70 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d0ee      	beq.n	8007c4c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007c82:	2300      	movs	r3, #0
 8007c84:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8007c86:	e005      	b.n	8007c94 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007c8e:	79fb      	ldrb	r3, [r7, #7]
 8007c90:	3b0a      	subs	r3, #10
 8007c92:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8007c94:	79fb      	ldrb	r3, [r7, #7]
 8007c96:	2b09      	cmp	r3, #9
 8007c98:	d8f6      	bhi.n	8007c88 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	011b      	lsls	r3, r3, #4
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	79fb      	ldrb	r3, [r7, #7]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	b2db      	uxtb	r3, r3
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3714      	adds	r7, #20
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	4603      	mov	r3, r0
 8007cbc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007cc2:	79fb      	ldrb	r3, [r7, #7]
 8007cc4:	091b      	lsrs	r3, r3, #4
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	461a      	mov	r2, r3
 8007cca:	4613      	mov	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007cd4:	79fb      	ldrb	r3, [r7, #7]
 8007cd6:	f003 030f 	and.w	r3, r3, #15
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	4413      	add	r3, r2
 8007ce2:	b2db      	uxtb	r3, r3
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e07b      	b.n	8007dfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d108      	bne.n	8007d1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d12:	d009      	beq.n	8007d28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	61da      	str	r2, [r3, #28]
 8007d1a:	e005      	b.n	8007d28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d106      	bne.n	8007d48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7fb fc60 	bl	8003608 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007d70:	431a      	orrs	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d7a:	431a      	orrs	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	f003 0302 	and.w	r3, r3, #2
 8007d84:	431a      	orrs	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	431a      	orrs	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007da2:	431a      	orrs	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a1b      	ldr	r3, [r3, #32]
 8007da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dac:	ea42 0103 	orr.w	r1, r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	0c1b      	lsrs	r3, r3, #16
 8007dc6:	f003 0104 	and.w	r1, r3, #4
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	f003 0210 	and.w	r2, r3, #16
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	69da      	ldr	r2, [r3, #28]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007de8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b082      	sub	sp, #8
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e041      	b.n	8007e98 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d106      	bne.n	8007e2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7fb fc35 	bl	8003698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2202      	movs	r2, #2
 8007e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	4619      	mov	r1, r3
 8007e40:	4610      	mov	r0, r2
 8007e42:	f000 fa95 	bl	8008370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d001      	beq.n	8007eb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e04e      	b.n	8007f56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68da      	ldr	r2, [r3, #12]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f042 0201 	orr.w	r2, r2, #1
 8007ece:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a23      	ldr	r2, [pc, #140]	; (8007f64 <HAL_TIM_Base_Start_IT+0xc4>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d022      	beq.n	8007f20 <HAL_TIM_Base_Start_IT+0x80>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ee2:	d01d      	beq.n	8007f20 <HAL_TIM_Base_Start_IT+0x80>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a1f      	ldr	r2, [pc, #124]	; (8007f68 <HAL_TIM_Base_Start_IT+0xc8>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d018      	beq.n	8007f20 <HAL_TIM_Base_Start_IT+0x80>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a1e      	ldr	r2, [pc, #120]	; (8007f6c <HAL_TIM_Base_Start_IT+0xcc>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d013      	beq.n	8007f20 <HAL_TIM_Base_Start_IT+0x80>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a1c      	ldr	r2, [pc, #112]	; (8007f70 <HAL_TIM_Base_Start_IT+0xd0>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d00e      	beq.n	8007f20 <HAL_TIM_Base_Start_IT+0x80>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a1b      	ldr	r2, [pc, #108]	; (8007f74 <HAL_TIM_Base_Start_IT+0xd4>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d009      	beq.n	8007f20 <HAL_TIM_Base_Start_IT+0x80>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a19      	ldr	r2, [pc, #100]	; (8007f78 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d004      	beq.n	8007f20 <HAL_TIM_Base_Start_IT+0x80>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a18      	ldr	r2, [pc, #96]	; (8007f7c <HAL_TIM_Base_Start_IT+0xdc>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d111      	bne.n	8007f44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2b06      	cmp	r3, #6
 8007f30:	d010      	beq.n	8007f54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f042 0201 	orr.w	r2, r2, #1
 8007f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f42:	e007      	b.n	8007f54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0201 	orr.w	r2, r2, #1
 8007f52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	40010000 	.word	0x40010000
 8007f68:	40000400 	.word	0x40000400
 8007f6c:	40000800 	.word	0x40000800
 8007f70:	40000c00 	.word	0x40000c00
 8007f74:	40010400 	.word	0x40010400
 8007f78:	40014000 	.word	0x40014000
 8007f7c:	40001800 	.word	0x40001800

08007f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	f003 0302 	and.w	r3, r3, #2
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d122      	bne.n	8007fdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	f003 0302 	and.w	r3, r3, #2
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d11b      	bne.n	8007fdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f06f 0202 	mvn.w	r2, #2
 8007fac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	f003 0303 	and.w	r3, r3, #3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f9b5 	bl	8008332 <HAL_TIM_IC_CaptureCallback>
 8007fc8:	e005      	b.n	8007fd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f9a7 	bl	800831e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f9b8 	bl	8008346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	f003 0304 	and.w	r3, r3, #4
 8007fe6:	2b04      	cmp	r3, #4
 8007fe8:	d122      	bne.n	8008030 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	f003 0304 	and.w	r3, r3, #4
 8007ff4:	2b04      	cmp	r3, #4
 8007ff6:	d11b      	bne.n	8008030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f06f 0204 	mvn.w	r2, #4
 8008000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2202      	movs	r2, #2
 8008006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008012:	2b00      	cmp	r3, #0
 8008014:	d003      	beq.n	800801e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f98b 	bl	8008332 <HAL_TIM_IC_CaptureCallback>
 800801c:	e005      	b.n	800802a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f97d 	bl	800831e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f98e 	bl	8008346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	f003 0308 	and.w	r3, r3, #8
 800803a:	2b08      	cmp	r3, #8
 800803c:	d122      	bne.n	8008084 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	f003 0308 	and.w	r3, r3, #8
 8008048:	2b08      	cmp	r3, #8
 800804a:	d11b      	bne.n	8008084 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f06f 0208 	mvn.w	r2, #8
 8008054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2204      	movs	r2, #4
 800805a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	69db      	ldr	r3, [r3, #28]
 8008062:	f003 0303 	and.w	r3, r3, #3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f961 	bl	8008332 <HAL_TIM_IC_CaptureCallback>
 8008070:	e005      	b.n	800807e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f953 	bl	800831e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f964 	bl	8008346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	f003 0310 	and.w	r3, r3, #16
 800808e:	2b10      	cmp	r3, #16
 8008090:	d122      	bne.n	80080d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f003 0310 	and.w	r3, r3, #16
 800809c:	2b10      	cmp	r3, #16
 800809e:	d11b      	bne.n	80080d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f06f 0210 	mvn.w	r2, #16
 80080a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2208      	movs	r2, #8
 80080ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	69db      	ldr	r3, [r3, #28]
 80080b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f937 	bl	8008332 <HAL_TIM_IC_CaptureCallback>
 80080c4:	e005      	b.n	80080d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f929 	bl	800831e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f93a 	bl	8008346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d10e      	bne.n	8008104 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d107      	bne.n	8008104 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f06f 0201 	mvn.w	r2, #1
 80080fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7fa f9ca 	bl	8002498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800810e:	2b80      	cmp	r3, #128	; 0x80
 8008110:	d10e      	bne.n	8008130 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800811c:	2b80      	cmp	r3, #128	; 0x80
 800811e:	d107      	bne.n	8008130 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fae0 	bl	80086f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813a:	2b40      	cmp	r3, #64	; 0x40
 800813c:	d10e      	bne.n	800815c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008148:	2b40      	cmp	r3, #64	; 0x40
 800814a:	d107      	bne.n	800815c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f8ff 	bl	800835a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	f003 0320 	and.w	r3, r3, #32
 8008166:	2b20      	cmp	r3, #32
 8008168:	d10e      	bne.n	8008188 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	f003 0320 	and.w	r3, r3, #32
 8008174:	2b20      	cmp	r3, #32
 8008176:	d107      	bne.n	8008188 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f06f 0220 	mvn.w	r2, #32
 8008180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 faaa 	bl	80086dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008188:	bf00      	nop
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d101      	bne.n	80081ac <HAL_TIM_ConfigClockSource+0x1c>
 80081a8:	2302      	movs	r3, #2
 80081aa:	e0b4      	b.n	8008316 <HAL_TIM_ConfigClockSource+0x186>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2202      	movs	r2, #2
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80081ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081e4:	d03e      	beq.n	8008264 <HAL_TIM_ConfigClockSource+0xd4>
 80081e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081ea:	f200 8087 	bhi.w	80082fc <HAL_TIM_ConfigClockSource+0x16c>
 80081ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081f2:	f000 8086 	beq.w	8008302 <HAL_TIM_ConfigClockSource+0x172>
 80081f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081fa:	d87f      	bhi.n	80082fc <HAL_TIM_ConfigClockSource+0x16c>
 80081fc:	2b70      	cmp	r3, #112	; 0x70
 80081fe:	d01a      	beq.n	8008236 <HAL_TIM_ConfigClockSource+0xa6>
 8008200:	2b70      	cmp	r3, #112	; 0x70
 8008202:	d87b      	bhi.n	80082fc <HAL_TIM_ConfigClockSource+0x16c>
 8008204:	2b60      	cmp	r3, #96	; 0x60
 8008206:	d050      	beq.n	80082aa <HAL_TIM_ConfigClockSource+0x11a>
 8008208:	2b60      	cmp	r3, #96	; 0x60
 800820a:	d877      	bhi.n	80082fc <HAL_TIM_ConfigClockSource+0x16c>
 800820c:	2b50      	cmp	r3, #80	; 0x50
 800820e:	d03c      	beq.n	800828a <HAL_TIM_ConfigClockSource+0xfa>
 8008210:	2b50      	cmp	r3, #80	; 0x50
 8008212:	d873      	bhi.n	80082fc <HAL_TIM_ConfigClockSource+0x16c>
 8008214:	2b40      	cmp	r3, #64	; 0x40
 8008216:	d058      	beq.n	80082ca <HAL_TIM_ConfigClockSource+0x13a>
 8008218:	2b40      	cmp	r3, #64	; 0x40
 800821a:	d86f      	bhi.n	80082fc <HAL_TIM_ConfigClockSource+0x16c>
 800821c:	2b30      	cmp	r3, #48	; 0x30
 800821e:	d064      	beq.n	80082ea <HAL_TIM_ConfigClockSource+0x15a>
 8008220:	2b30      	cmp	r3, #48	; 0x30
 8008222:	d86b      	bhi.n	80082fc <HAL_TIM_ConfigClockSource+0x16c>
 8008224:	2b20      	cmp	r3, #32
 8008226:	d060      	beq.n	80082ea <HAL_TIM_ConfigClockSource+0x15a>
 8008228:	2b20      	cmp	r3, #32
 800822a:	d867      	bhi.n	80082fc <HAL_TIM_ConfigClockSource+0x16c>
 800822c:	2b00      	cmp	r3, #0
 800822e:	d05c      	beq.n	80082ea <HAL_TIM_ConfigClockSource+0x15a>
 8008230:	2b10      	cmp	r3, #16
 8008232:	d05a      	beq.n	80082ea <HAL_TIM_ConfigClockSource+0x15a>
 8008234:	e062      	b.n	80082fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6818      	ldr	r0, [r3, #0]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	6899      	ldr	r1, [r3, #8]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	685a      	ldr	r2, [r3, #4]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	f000 f9ad 	bl	80085a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008258:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	609a      	str	r2, [r3, #8]
      break;
 8008262:	e04f      	b.n	8008304 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6818      	ldr	r0, [r3, #0]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	6899      	ldr	r1, [r3, #8]
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	f000 f996 	bl	80085a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	689a      	ldr	r2, [r3, #8]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008286:	609a      	str	r2, [r3, #8]
      break;
 8008288:	e03c      	b.n	8008304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	6859      	ldr	r1, [r3, #4]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	461a      	mov	r2, r3
 8008298:	f000 f90a 	bl	80084b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2150      	movs	r1, #80	; 0x50
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 f963 	bl	800856e <TIM_ITRx_SetConfig>
      break;
 80082a8:	e02c      	b.n	8008304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6818      	ldr	r0, [r3, #0]
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	6859      	ldr	r1, [r3, #4]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	461a      	mov	r2, r3
 80082b8:	f000 f929 	bl	800850e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2160      	movs	r1, #96	; 0x60
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 f953 	bl	800856e <TIM_ITRx_SetConfig>
      break;
 80082c8:	e01c      	b.n	8008304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6818      	ldr	r0, [r3, #0]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	6859      	ldr	r1, [r3, #4]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	461a      	mov	r2, r3
 80082d8:	f000 f8ea 	bl	80084b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2140      	movs	r1, #64	; 0x40
 80082e2:	4618      	mov	r0, r3
 80082e4:	f000 f943 	bl	800856e <TIM_ITRx_SetConfig>
      break;
 80082e8:	e00c      	b.n	8008304 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4619      	mov	r1, r3
 80082f4:	4610      	mov	r0, r2
 80082f6:	f000 f93a 	bl	800856e <TIM_ITRx_SetConfig>
      break;
 80082fa:	e003      	b.n	8008304 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008300:	e000      	b.n	8008304 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008302:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008314:	7bfb      	ldrb	r3, [r7, #15]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008326:	bf00      	nop
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008332:	b480      	push	{r7}
 8008334:	b083      	sub	sp, #12
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800833a:	bf00      	nop
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800834e:	bf00      	nop
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800835a:	b480      	push	{r7}
 800835c:	b083      	sub	sp, #12
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008362:	bf00      	nop
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
	...

08008370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a40      	ldr	r2, [pc, #256]	; (8008484 <TIM_Base_SetConfig+0x114>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d013      	beq.n	80083b0 <TIM_Base_SetConfig+0x40>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800838e:	d00f      	beq.n	80083b0 <TIM_Base_SetConfig+0x40>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a3d      	ldr	r2, [pc, #244]	; (8008488 <TIM_Base_SetConfig+0x118>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d00b      	beq.n	80083b0 <TIM_Base_SetConfig+0x40>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a3c      	ldr	r2, [pc, #240]	; (800848c <TIM_Base_SetConfig+0x11c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d007      	beq.n	80083b0 <TIM_Base_SetConfig+0x40>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a3b      	ldr	r2, [pc, #236]	; (8008490 <TIM_Base_SetConfig+0x120>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d003      	beq.n	80083b0 <TIM_Base_SetConfig+0x40>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a3a      	ldr	r2, [pc, #232]	; (8008494 <TIM_Base_SetConfig+0x124>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d108      	bne.n	80083c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	4313      	orrs	r3, r2
 80083c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a2f      	ldr	r2, [pc, #188]	; (8008484 <TIM_Base_SetConfig+0x114>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d02b      	beq.n	8008422 <TIM_Base_SetConfig+0xb2>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d0:	d027      	beq.n	8008422 <TIM_Base_SetConfig+0xb2>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a2c      	ldr	r2, [pc, #176]	; (8008488 <TIM_Base_SetConfig+0x118>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d023      	beq.n	8008422 <TIM_Base_SetConfig+0xb2>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a2b      	ldr	r2, [pc, #172]	; (800848c <TIM_Base_SetConfig+0x11c>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d01f      	beq.n	8008422 <TIM_Base_SetConfig+0xb2>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a2a      	ldr	r2, [pc, #168]	; (8008490 <TIM_Base_SetConfig+0x120>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d01b      	beq.n	8008422 <TIM_Base_SetConfig+0xb2>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a29      	ldr	r2, [pc, #164]	; (8008494 <TIM_Base_SetConfig+0x124>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d017      	beq.n	8008422 <TIM_Base_SetConfig+0xb2>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a28      	ldr	r2, [pc, #160]	; (8008498 <TIM_Base_SetConfig+0x128>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d013      	beq.n	8008422 <TIM_Base_SetConfig+0xb2>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a27      	ldr	r2, [pc, #156]	; (800849c <TIM_Base_SetConfig+0x12c>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d00f      	beq.n	8008422 <TIM_Base_SetConfig+0xb2>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a26      	ldr	r2, [pc, #152]	; (80084a0 <TIM_Base_SetConfig+0x130>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d00b      	beq.n	8008422 <TIM_Base_SetConfig+0xb2>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a25      	ldr	r2, [pc, #148]	; (80084a4 <TIM_Base_SetConfig+0x134>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d007      	beq.n	8008422 <TIM_Base_SetConfig+0xb2>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a24      	ldr	r2, [pc, #144]	; (80084a8 <TIM_Base_SetConfig+0x138>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d003      	beq.n	8008422 <TIM_Base_SetConfig+0xb2>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a23      	ldr	r2, [pc, #140]	; (80084ac <TIM_Base_SetConfig+0x13c>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d108      	bne.n	8008434 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	4313      	orrs	r3, r2
 8008432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	4313      	orrs	r3, r2
 8008440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	689a      	ldr	r2, [r3, #8]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a0a      	ldr	r2, [pc, #40]	; (8008484 <TIM_Base_SetConfig+0x114>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d003      	beq.n	8008468 <TIM_Base_SetConfig+0xf8>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a0c      	ldr	r2, [pc, #48]	; (8008494 <TIM_Base_SetConfig+0x124>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d103      	bne.n	8008470 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	691a      	ldr	r2, [r3, #16]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	615a      	str	r2, [r3, #20]
}
 8008476:	bf00      	nop
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	40010000 	.word	0x40010000
 8008488:	40000400 	.word	0x40000400
 800848c:	40000800 	.word	0x40000800
 8008490:	40000c00 	.word	0x40000c00
 8008494:	40010400 	.word	0x40010400
 8008498:	40014000 	.word	0x40014000
 800849c:	40014400 	.word	0x40014400
 80084a0:	40014800 	.word	0x40014800
 80084a4:	40001800 	.word	0x40001800
 80084a8:	40001c00 	.word	0x40001c00
 80084ac:	40002000 	.word	0x40002000

080084b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6a1b      	ldr	r3, [r3, #32]
 80084c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6a1b      	ldr	r3, [r3, #32]
 80084c6:	f023 0201 	bic.w	r2, r3, #1
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	011b      	lsls	r3, r3, #4
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f023 030a 	bic.w	r3, r3, #10
 80084ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	621a      	str	r2, [r3, #32]
}
 8008502:	bf00      	nop
 8008504:	371c      	adds	r7, #28
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800850e:	b480      	push	{r7}
 8008510:	b087      	sub	sp, #28
 8008512:	af00      	add	r7, sp, #0
 8008514:	60f8      	str	r0, [r7, #12]
 8008516:	60b9      	str	r1, [r7, #8]
 8008518:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6a1b      	ldr	r3, [r3, #32]
 800851e:	f023 0210 	bic.w	r2, r3, #16
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6a1b      	ldr	r3, [r3, #32]
 8008530:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008538:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	031b      	lsls	r3, r3, #12
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	4313      	orrs	r3, r2
 8008542:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800854a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	011b      	lsls	r3, r3, #4
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	4313      	orrs	r3, r2
 8008554:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	621a      	str	r2, [r3, #32]
}
 8008562:	bf00      	nop
 8008564:	371c      	adds	r7, #28
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800856e:	b480      	push	{r7}
 8008570:	b085      	sub	sp, #20
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	4313      	orrs	r3, r2
 800858c:	f043 0307 	orr.w	r3, r3, #7
 8008590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	609a      	str	r2, [r3, #8]
}
 8008598:	bf00      	nop
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b087      	sub	sp, #28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	021a      	lsls	r2, r3, #8
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	431a      	orrs	r2, r3
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	697a      	ldr	r2, [r7, #20]
 80085d6:	609a      	str	r2, [r3, #8]
}
 80085d8:	bf00      	nop
 80085da:	371c      	adds	r7, #28
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d101      	bne.n	80085fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085f8:	2302      	movs	r3, #2
 80085fa:	e05a      	b.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2202      	movs	r2, #2
 8008608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	4313      	orrs	r3, r2
 800862c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a21      	ldr	r2, [pc, #132]	; (80086c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d022      	beq.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008648:	d01d      	beq.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a1d      	ldr	r2, [pc, #116]	; (80086c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d018      	beq.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a1b      	ldr	r2, [pc, #108]	; (80086c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d013      	beq.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a1a      	ldr	r2, [pc, #104]	; (80086cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d00e      	beq.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a18      	ldr	r2, [pc, #96]	; (80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d009      	beq.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a17      	ldr	r2, [pc, #92]	; (80086d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d004      	beq.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a15      	ldr	r2, [pc, #84]	; (80086d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d10c      	bne.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800868c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	4313      	orrs	r3, r2
 8008696:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3714      	adds	r7, #20
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	40010000 	.word	0x40010000
 80086c4:	40000400 	.word	0x40000400
 80086c8:	40000800 	.word	0x40000800
 80086cc:	40000c00 	.word	0x40000c00
 80086d0:	40010400 	.word	0x40010400
 80086d4:	40014000 	.word	0x40014000
 80086d8:	40001800 	.word	0x40001800

080086dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e03f      	b.n	8008796 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d106      	bne.n	8008730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f7fa ffda 	bl	80036e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2224      	movs	r2, #36	; 0x24
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68da      	ldr	r2, [r3, #12]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 fdd1 	bl	80092f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	691a      	ldr	r2, [r3, #16]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800875c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	695a      	ldr	r2, [r3, #20]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800876c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68da      	ldr	r2, [r3, #12]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800877c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2220      	movs	r2, #32
 8008788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2220      	movs	r2, #32
 8008790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b08a      	sub	sp, #40	; 0x28
 80087a2:	af02      	add	r7, sp, #8
 80087a4:	60f8      	str	r0, [r7, #12]
 80087a6:	60b9      	str	r1, [r7, #8]
 80087a8:	603b      	str	r3, [r7, #0]
 80087aa:	4613      	mov	r3, r2
 80087ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80087ae:	2300      	movs	r3, #0
 80087b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	2b20      	cmp	r3, #32
 80087bc:	d17c      	bne.n	80088b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <HAL_UART_Transmit+0x2c>
 80087c4:	88fb      	ldrh	r3, [r7, #6]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d101      	bne.n	80087ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e075      	b.n	80088ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d101      	bne.n	80087dc <HAL_UART_Transmit+0x3e>
 80087d8:	2302      	movs	r3, #2
 80087da:	e06e      	b.n	80088ba <HAL_UART_Transmit+0x11c>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2221      	movs	r2, #33	; 0x21
 80087ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087f2:	f7fb f9e3 	bl	8003bbc <HAL_GetTick>
 80087f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	88fa      	ldrh	r2, [r7, #6]
 80087fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	88fa      	ldrh	r2, [r7, #6]
 8008802:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800880c:	d108      	bne.n	8008820 <HAL_UART_Transmit+0x82>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d104      	bne.n	8008820 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008816:	2300      	movs	r3, #0
 8008818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	61bb      	str	r3, [r7, #24]
 800881e:	e003      	b.n	8008828 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008824:	2300      	movs	r3, #0
 8008826:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008830:	e02a      	b.n	8008888 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	2200      	movs	r2, #0
 800883a:	2180      	movs	r1, #128	; 0x80
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f000 fb15 	bl	8008e6c <UART_WaitOnFlagUntilTimeout>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d001      	beq.n	800884c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008848:	2303      	movs	r3, #3
 800884a:	e036      	b.n	80088ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10b      	bne.n	800886a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	461a      	mov	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008860:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	3302      	adds	r3, #2
 8008866:	61bb      	str	r3, [r7, #24]
 8008868:	e007      	b.n	800887a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	781a      	ldrb	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	3301      	adds	r3, #1
 8008878:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800887e:	b29b      	uxth	r3, r3
 8008880:	3b01      	subs	r3, #1
 8008882:	b29a      	uxth	r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800888c:	b29b      	uxth	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1cf      	bne.n	8008832 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2200      	movs	r2, #0
 800889a:	2140      	movs	r1, #64	; 0x40
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 fae5 	bl	8008e6c <UART_WaitOnFlagUntilTimeout>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d001      	beq.n	80088ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e006      	b.n	80088ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2220      	movs	r2, #32
 80088b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	e000      	b.n	80088ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80088b8:	2302      	movs	r3, #2
  }
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3720      	adds	r7, #32
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b084      	sub	sp, #16
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	60f8      	str	r0, [r7, #12]
 80088ca:	60b9      	str	r1, [r7, #8]
 80088cc:	4613      	mov	r3, r2
 80088ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b20      	cmp	r3, #32
 80088da:	d11d      	bne.n	8008918 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d002      	beq.n	80088e8 <HAL_UART_Receive_IT+0x26>
 80088e2:	88fb      	ldrh	r3, [r7, #6]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e016      	b.n	800891a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d101      	bne.n	80088fa <HAL_UART_Receive_IT+0x38>
 80088f6:	2302      	movs	r3, #2
 80088f8:	e00f      	b.n	800891a <HAL_UART_Receive_IT+0x58>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008908:	88fb      	ldrh	r3, [r7, #6]
 800890a:	461a      	mov	r2, r3
 800890c:	68b9      	ldr	r1, [r7, #8]
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f000 fb1a 	bl	8008f48 <UART_Start_Receive_IT>
 8008914:	4603      	mov	r3, r0
 8008916:	e000      	b.n	800891a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008918:	2302      	movs	r3, #2
  }
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
	...

08008924 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b0ba      	sub	sp, #232	; 0xe8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800894a:	2300      	movs	r3, #0
 800894c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008950:	2300      	movs	r3, #0
 8008952:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800895a:	f003 030f 	and.w	r3, r3, #15
 800895e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008962:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10f      	bne.n	800898a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800896a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800896e:	f003 0320 	and.w	r3, r3, #32
 8008972:	2b00      	cmp	r3, #0
 8008974:	d009      	beq.n	800898a <HAL_UART_IRQHandler+0x66>
 8008976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800897a:	f003 0320 	and.w	r3, r3, #32
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fbf9 	bl	800917a <UART_Receive_IT>
      return;
 8008988:	e256      	b.n	8008e38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800898a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 80de 	beq.w	8008b50 <HAL_UART_IRQHandler+0x22c>
 8008994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008998:	f003 0301 	and.w	r3, r3, #1
 800899c:	2b00      	cmp	r3, #0
 800899e:	d106      	bne.n	80089ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80089a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 80d1 	beq.w	8008b50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80089ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00b      	beq.n	80089d2 <HAL_UART_IRQHandler+0xae>
 80089ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d005      	beq.n	80089d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ca:	f043 0201 	orr.w	r2, r3, #1
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089d6:	f003 0304 	and.w	r3, r3, #4
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00b      	beq.n	80089f6 <HAL_UART_IRQHandler+0xd2>
 80089de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d005      	beq.n	80089f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ee:	f043 0202 	orr.w	r2, r3, #2
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089fa:	f003 0302 	and.w	r3, r3, #2
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00b      	beq.n	8008a1a <HAL_UART_IRQHandler+0xf6>
 8008a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a06:	f003 0301 	and.w	r3, r3, #1
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d005      	beq.n	8008a1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a12:	f043 0204 	orr.w	r2, r3, #4
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a1e:	f003 0308 	and.w	r3, r3, #8
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d011      	beq.n	8008a4a <HAL_UART_IRQHandler+0x126>
 8008a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a2a:	f003 0320 	and.w	r3, r3, #32
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d105      	bne.n	8008a3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a36:	f003 0301 	and.w	r3, r3, #1
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d005      	beq.n	8008a4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a42:	f043 0208 	orr.w	r2, r3, #8
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 81ed 	beq.w	8008e2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a58:	f003 0320 	and.w	r3, r3, #32
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d008      	beq.n	8008a72 <HAL_UART_IRQHandler+0x14e>
 8008a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a64:	f003 0320 	and.w	r3, r3, #32
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d002      	beq.n	8008a72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fb84 	bl	800917a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	695b      	ldr	r3, [r3, #20]
 8008a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a7c:	2b40      	cmp	r3, #64	; 0x40
 8008a7e:	bf0c      	ite	eq
 8008a80:	2301      	moveq	r3, #1
 8008a82:	2300      	movne	r3, #0
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8e:	f003 0308 	and.w	r3, r3, #8
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d103      	bne.n	8008a9e <HAL_UART_IRQHandler+0x17a>
 8008a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d04f      	beq.n	8008b3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fa8c 	bl	8008fbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aae:	2b40      	cmp	r3, #64	; 0x40
 8008ab0:	d141      	bne.n	8008b36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3314      	adds	r3, #20
 8008ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ac0:	e853 3f00 	ldrex	r3, [r3]
 8008ac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008ac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3314      	adds	r3, #20
 8008ada:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008ade:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008aea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008aee:	e841 2300 	strex	r3, r2, [r1]
 8008af2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008af6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1d9      	bne.n	8008ab2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d013      	beq.n	8008b2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0a:	4a7d      	ldr	r2, [pc, #500]	; (8008d00 <HAL_UART_IRQHandler+0x3dc>)
 8008b0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7fb f9d4 	bl	8003ec0 <HAL_DMA_Abort_IT>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d016      	beq.n	8008b4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008b28:	4610      	mov	r0, r2
 8008b2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b2c:	e00e      	b.n	8008b4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 f986 	bl	8008e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b34:	e00a      	b.n	8008b4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 f982 	bl	8008e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b3c:	e006      	b.n	8008b4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f97e 	bl	8008e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008b4a:	e170      	b.n	8008e2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b4c:	bf00      	nop
    return;
 8008b4e:	e16e      	b.n	8008e2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	f040 814a 	bne.w	8008dee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b5e:	f003 0310 	and.w	r3, r3, #16
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f000 8143 	beq.w	8008dee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b6c:	f003 0310 	and.w	r3, r3, #16
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 813c 	beq.w	8008dee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b76:	2300      	movs	r3, #0
 8008b78:	60bb      	str	r3, [r7, #8]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	60bb      	str	r3, [r7, #8]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	60bb      	str	r3, [r7, #8]
 8008b8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	695b      	ldr	r3, [r3, #20]
 8008b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b96:	2b40      	cmp	r3, #64	; 0x40
 8008b98:	f040 80b4 	bne.w	8008d04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ba8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f000 8140 	beq.w	8008e32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008bb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	f080 8139 	bcs.w	8008e32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008bc6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bd2:	f000 8088 	beq.w	8008ce6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	330c      	adds	r3, #12
 8008bdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008be4:	e853 3f00 	ldrex	r3, [r3]
 8008be8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	330c      	adds	r3, #12
 8008bfe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008c02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008c0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008c12:	e841 2300 	strex	r3, r2, [r1]
 8008c16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1d9      	bne.n	8008bd6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	3314      	adds	r3, #20
 8008c28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c2c:	e853 3f00 	ldrex	r3, [r3]
 8008c30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c34:	f023 0301 	bic.w	r3, r3, #1
 8008c38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	3314      	adds	r3, #20
 8008c42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008c4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c52:	e841 2300 	strex	r3, r2, [r1]
 8008c56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1e1      	bne.n	8008c22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	3314      	adds	r3, #20
 8008c64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c68:	e853 3f00 	ldrex	r3, [r3]
 8008c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	3314      	adds	r3, #20
 8008c7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c8a:	e841 2300 	strex	r3, r2, [r1]
 8008c8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008c90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1e3      	bne.n	8008c5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2220      	movs	r2, #32
 8008c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	330c      	adds	r3, #12
 8008caa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cae:	e853 3f00 	ldrex	r3, [r3]
 8008cb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cb6:	f023 0310 	bic.w	r3, r3, #16
 8008cba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	330c      	adds	r3, #12
 8008cc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008cc8:	65ba      	str	r2, [r7, #88]	; 0x58
 8008cca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ccc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008cce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008cd0:	e841 2300 	strex	r3, r2, [r1]
 8008cd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1e3      	bne.n	8008ca4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fb f87d 	bl	8003de0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f8ac 	bl	8008e54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008cfc:	e099      	b.n	8008e32 <HAL_UART_IRQHandler+0x50e>
 8008cfe:	bf00      	nop
 8008d00:	08009083 	.word	0x08009083
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f000 808b 	beq.w	8008e36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008d20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 8086 	beq.w	8008e36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	330c      	adds	r3, #12
 8008d30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d34:	e853 3f00 	ldrex	r3, [r3]
 8008d38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	330c      	adds	r3, #12
 8008d4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008d4e:	647a      	str	r2, [r7, #68]	; 0x44
 8008d50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d56:	e841 2300 	strex	r3, r2, [r1]
 8008d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1e3      	bne.n	8008d2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	3314      	adds	r3, #20
 8008d68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	e853 3f00 	ldrex	r3, [r3]
 8008d70:	623b      	str	r3, [r7, #32]
   return(result);
 8008d72:	6a3b      	ldr	r3, [r7, #32]
 8008d74:	f023 0301 	bic.w	r3, r3, #1
 8008d78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3314      	adds	r3, #20
 8008d82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008d86:	633a      	str	r2, [r7, #48]	; 0x30
 8008d88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d8e:	e841 2300 	strex	r3, r2, [r1]
 8008d92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1e3      	bne.n	8008d62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2220      	movs	r2, #32
 8008d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	330c      	adds	r3, #12
 8008dae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	e853 3f00 	ldrex	r3, [r3]
 8008db6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f023 0310 	bic.w	r3, r3, #16
 8008dbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	330c      	adds	r3, #12
 8008dc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008dcc:	61fa      	str	r2, [r7, #28]
 8008dce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd0:	69b9      	ldr	r1, [r7, #24]
 8008dd2:	69fa      	ldr	r2, [r7, #28]
 8008dd4:	e841 2300 	strex	r3, r2, [r1]
 8008dd8:	617b      	str	r3, [r7, #20]
   return(result);
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1e3      	bne.n	8008da8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008de0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f834 	bl	8008e54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008dec:	e023      	b.n	8008e36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d009      	beq.n	8008e0e <HAL_UART_IRQHandler+0x4ea>
 8008dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d003      	beq.n	8008e0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f94f 	bl	80090aa <UART_Transmit_IT>
    return;
 8008e0c:	e014      	b.n	8008e38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00e      	beq.n	8008e38 <HAL_UART_IRQHandler+0x514>
 8008e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d008      	beq.n	8008e38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f98f 	bl	800914a <UART_EndTransmit_IT>
    return;
 8008e2c:	e004      	b.n	8008e38 <HAL_UART_IRQHandler+0x514>
    return;
 8008e2e:	bf00      	nop
 8008e30:	e002      	b.n	8008e38 <HAL_UART_IRQHandler+0x514>
      return;
 8008e32:	bf00      	nop
 8008e34:	e000      	b.n	8008e38 <HAL_UART_IRQHandler+0x514>
      return;
 8008e36:	bf00      	nop
  }
}
 8008e38:	37e8      	adds	r7, #232	; 0xe8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop

08008e40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e48:	bf00      	nop
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b090      	sub	sp, #64	; 0x40
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	603b      	str	r3, [r7, #0]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e7c:	e050      	b.n	8008f20 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e84:	d04c      	beq.n	8008f20 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d007      	beq.n	8008e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8008e8c:	f7fa fe96 	bl	8003bbc <HAL_GetTick>
 8008e90:	4602      	mov	r2, r0
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d241      	bcs.n	8008f20 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	330c      	adds	r3, #12
 8008ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea6:	e853 3f00 	ldrex	r3, [r3]
 8008eaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	330c      	adds	r3, #12
 8008eba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ebc:	637a      	str	r2, [r7, #52]	; 0x34
 8008ebe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ec4:	e841 2300 	strex	r3, r2, [r1]
 8008ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1e5      	bne.n	8008e9c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	3314      	adds	r3, #20
 8008ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	e853 3f00 	ldrex	r3, [r3]
 8008ede:	613b      	str	r3, [r7, #16]
   return(result);
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	f023 0301 	bic.w	r3, r3, #1
 8008ee6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3314      	adds	r3, #20
 8008eee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ef0:	623a      	str	r2, [r7, #32]
 8008ef2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef4:	69f9      	ldr	r1, [r7, #28]
 8008ef6:	6a3a      	ldr	r2, [r7, #32]
 8008ef8:	e841 2300 	strex	r3, r2, [r1]
 8008efc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1e5      	bne.n	8008ed0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2220      	movs	r2, #32
 8008f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2220      	movs	r2, #32
 8008f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	e00f      	b.n	8008f40 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	4013      	ands	r3, r2
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	bf0c      	ite	eq
 8008f30:	2301      	moveq	r3, #1
 8008f32:	2300      	movne	r3, #0
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	461a      	mov	r2, r3
 8008f38:	79fb      	ldrb	r3, [r7, #7]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d09f      	beq.n	8008e7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3740      	adds	r7, #64	; 0x40
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	4613      	mov	r3, r2
 8008f54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	88fa      	ldrh	r2, [r7, #6]
 8008f60:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	88fa      	ldrh	r2, [r7, #6]
 8008f66:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2222      	movs	r2, #34	; 0x22
 8008f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68da      	ldr	r2, [r3, #12]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f8c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	695a      	ldr	r2, [r3, #20]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f042 0201 	orr.w	r2, r2, #1
 8008f9c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68da      	ldr	r2, [r3, #12]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f042 0220 	orr.w	r2, r2, #32
 8008fac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b095      	sub	sp, #84	; 0x54
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	330c      	adds	r3, #12
 8008fca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fce:	e853 3f00 	ldrex	r3, [r3]
 8008fd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	330c      	adds	r3, #12
 8008fe2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fe4:	643a      	str	r2, [r7, #64]	; 0x40
 8008fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fec:	e841 2300 	strex	r3, r2, [r1]
 8008ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1e5      	bne.n	8008fc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	3314      	adds	r3, #20
 8008ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	6a3b      	ldr	r3, [r7, #32]
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	61fb      	str	r3, [r7, #28]
   return(result);
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	f023 0301 	bic.w	r3, r3, #1
 800900e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3314      	adds	r3, #20
 8009016:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009018:	62fa      	str	r2, [r7, #44]	; 0x2c
 800901a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800901e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009020:	e841 2300 	strex	r3, r2, [r1]
 8009024:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e5      	bne.n	8008ff8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009030:	2b01      	cmp	r3, #1
 8009032:	d119      	bne.n	8009068 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	330c      	adds	r3, #12
 800903a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	e853 3f00 	ldrex	r3, [r3]
 8009042:	60bb      	str	r3, [r7, #8]
   return(result);
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	f023 0310 	bic.w	r3, r3, #16
 800904a:	647b      	str	r3, [r7, #68]	; 0x44
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	330c      	adds	r3, #12
 8009052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009054:	61ba      	str	r2, [r7, #24]
 8009056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009058:	6979      	ldr	r1, [r7, #20]
 800905a:	69ba      	ldr	r2, [r7, #24]
 800905c:	e841 2300 	strex	r3, r2, [r1]
 8009060:	613b      	str	r3, [r7, #16]
   return(result);
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1e5      	bne.n	8009034 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2220      	movs	r2, #32
 800906c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009076:	bf00      	nop
 8009078:	3754      	adds	r7, #84	; 0x54
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr

08009082 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b084      	sub	sp, #16
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f7ff fecf 	bl	8008e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090a2:	bf00      	nop
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80090aa:	b480      	push	{r7}
 80090ac:	b085      	sub	sp, #20
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	2b21      	cmp	r3, #33	; 0x21
 80090bc:	d13e      	bne.n	800913c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090c6:	d114      	bne.n	80090f2 <UART_Transmit_IT+0x48>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d110      	bne.n	80090f2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a1b      	ldr	r3, [r3, #32]
 80090d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	461a      	mov	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a1b      	ldr	r3, [r3, #32]
 80090ea:	1c9a      	adds	r2, r3, #2
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	621a      	str	r2, [r3, #32]
 80090f0:	e008      	b.n	8009104 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a1b      	ldr	r3, [r3, #32]
 80090f6:	1c59      	adds	r1, r3, #1
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	6211      	str	r1, [r2, #32]
 80090fc:	781a      	ldrb	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009108:	b29b      	uxth	r3, r3
 800910a:	3b01      	subs	r3, #1
 800910c:	b29b      	uxth	r3, r3
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	4619      	mov	r1, r3
 8009112:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10f      	bne.n	8009138 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68da      	ldr	r2, [r3, #12]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009126:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68da      	ldr	r2, [r3, #12]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009136:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	e000      	b.n	800913e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800913c:	2302      	movs	r3, #2
  }
}
 800913e:	4618      	mov	r0, r3
 8009140:	3714      	adds	r7, #20
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b082      	sub	sp, #8
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68da      	ldr	r2, [r3, #12]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009160:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2220      	movs	r2, #32
 8009166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f7f8 ff1e 	bl	8001fac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b08c      	sub	sp, #48	; 0x30
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b22      	cmp	r3, #34	; 0x22
 800918c:	f040 80ab 	bne.w	80092e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009198:	d117      	bne.n	80091ca <UART_Receive_IT+0x50>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d113      	bne.n	80091ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80091a2:	2300      	movs	r3, #0
 80091a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c2:	1c9a      	adds	r2, r3, #2
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	629a      	str	r2, [r3, #40]	; 0x28
 80091c8:	e026      	b.n	8009218 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80091d0:	2300      	movs	r3, #0
 80091d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091dc:	d007      	beq.n	80091ee <UART_Receive_IT+0x74>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10a      	bne.n	80091fc <UART_Receive_IT+0x82>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d106      	bne.n	80091fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	b2da      	uxtb	r2, r3
 80091f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f8:	701a      	strb	r2, [r3, #0]
 80091fa:	e008      	b.n	800920e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	b2db      	uxtb	r3, r3
 8009204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009208:	b2da      	uxtb	r2, r3
 800920a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009212:	1c5a      	adds	r2, r3, #1
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800921c:	b29b      	uxth	r3, r3
 800921e:	3b01      	subs	r3, #1
 8009220:	b29b      	uxth	r3, r3
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	4619      	mov	r1, r3
 8009226:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009228:	2b00      	cmp	r3, #0
 800922a:	d15a      	bne.n	80092e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68da      	ldr	r2, [r3, #12]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f022 0220 	bic.w	r2, r2, #32
 800923a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68da      	ldr	r2, [r3, #12]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800924a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	695a      	ldr	r2, [r3, #20]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f022 0201 	bic.w	r2, r2, #1
 800925a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2220      	movs	r2, #32
 8009260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009268:	2b01      	cmp	r3, #1
 800926a:	d135      	bne.n	80092d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	330c      	adds	r3, #12
 8009278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	e853 3f00 	ldrex	r3, [r3]
 8009280:	613b      	str	r3, [r7, #16]
   return(result);
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	f023 0310 	bic.w	r3, r3, #16
 8009288:	627b      	str	r3, [r7, #36]	; 0x24
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	330c      	adds	r3, #12
 8009290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009292:	623a      	str	r2, [r7, #32]
 8009294:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009296:	69f9      	ldr	r1, [r7, #28]
 8009298:	6a3a      	ldr	r2, [r7, #32]
 800929a:	e841 2300 	strex	r3, r2, [r1]
 800929e:	61bb      	str	r3, [r7, #24]
   return(result);
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1e5      	bne.n	8009272 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0310 	and.w	r3, r3, #16
 80092b0:	2b10      	cmp	r3, #16
 80092b2:	d10a      	bne.n	80092ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80092b4:	2300      	movs	r3, #0
 80092b6:	60fb      	str	r3, [r7, #12]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	60fb      	str	r3, [r7, #12]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	60fb      	str	r3, [r7, #12]
 80092c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7ff fdbf 	bl	8008e54 <HAL_UARTEx_RxEventCallback>
 80092d6:	e002      	b.n	80092de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f7f8 fb87 	bl	80019ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	e002      	b.n	80092e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	e000      	b.n	80092e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80092e6:	2302      	movs	r3, #2
  }
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3730      	adds	r7, #48	; 0x30
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f4:	b09f      	sub	sp, #124	; 0x7c
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009306:	68d9      	ldr	r1, [r3, #12]
 8009308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	ea40 0301 	orr.w	r3, r0, r1
 8009310:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009314:	689a      	ldr	r2, [r3, #8]
 8009316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	431a      	orrs	r2, r3
 800931c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800931e:	695b      	ldr	r3, [r3, #20]
 8009320:	431a      	orrs	r2, r3
 8009322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009324:	69db      	ldr	r3, [r3, #28]
 8009326:	4313      	orrs	r3, r2
 8009328:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800932a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009334:	f021 010c 	bic.w	r1, r1, #12
 8009338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800933e:	430b      	orrs	r3, r1
 8009340:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800934c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800934e:	6999      	ldr	r1, [r3, #24]
 8009350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	ea40 0301 	orr.w	r3, r0, r1
 8009358:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800935a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	4bc5      	ldr	r3, [pc, #788]	; (8009674 <UART_SetConfig+0x384>)
 8009360:	429a      	cmp	r2, r3
 8009362:	d004      	beq.n	800936e <UART_SetConfig+0x7e>
 8009364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	4bc3      	ldr	r3, [pc, #780]	; (8009678 <UART_SetConfig+0x388>)
 800936a:	429a      	cmp	r2, r3
 800936c:	d103      	bne.n	8009376 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800936e:	f7fe f865 	bl	800743c <HAL_RCC_GetPCLK2Freq>
 8009372:	6778      	str	r0, [r7, #116]	; 0x74
 8009374:	e002      	b.n	800937c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009376:	f7fe f84d 	bl	8007414 <HAL_RCC_GetPCLK1Freq>
 800937a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800937c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800937e:	69db      	ldr	r3, [r3, #28]
 8009380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009384:	f040 80b6 	bne.w	80094f4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800938a:	461c      	mov	r4, r3
 800938c:	f04f 0500 	mov.w	r5, #0
 8009390:	4622      	mov	r2, r4
 8009392:	462b      	mov	r3, r5
 8009394:	1891      	adds	r1, r2, r2
 8009396:	6439      	str	r1, [r7, #64]	; 0x40
 8009398:	415b      	adcs	r3, r3
 800939a:	647b      	str	r3, [r7, #68]	; 0x44
 800939c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80093a0:	1912      	adds	r2, r2, r4
 80093a2:	eb45 0303 	adc.w	r3, r5, r3
 80093a6:	f04f 0000 	mov.w	r0, #0
 80093aa:	f04f 0100 	mov.w	r1, #0
 80093ae:	00d9      	lsls	r1, r3, #3
 80093b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80093b4:	00d0      	lsls	r0, r2, #3
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	1911      	adds	r1, r2, r4
 80093bc:	6639      	str	r1, [r7, #96]	; 0x60
 80093be:	416b      	adcs	r3, r5
 80093c0:	667b      	str	r3, [r7, #100]	; 0x64
 80093c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	461a      	mov	r2, r3
 80093c8:	f04f 0300 	mov.w	r3, #0
 80093cc:	1891      	adds	r1, r2, r2
 80093ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80093d0:	415b      	adcs	r3, r3
 80093d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80093d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80093dc:	f7f7 fc44 	bl	8000c68 <__aeabi_uldivmod>
 80093e0:	4602      	mov	r2, r0
 80093e2:	460b      	mov	r3, r1
 80093e4:	4ba5      	ldr	r3, [pc, #660]	; (800967c <UART_SetConfig+0x38c>)
 80093e6:	fba3 2302 	umull	r2, r3, r3, r2
 80093ea:	095b      	lsrs	r3, r3, #5
 80093ec:	011e      	lsls	r6, r3, #4
 80093ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093f0:	461c      	mov	r4, r3
 80093f2:	f04f 0500 	mov.w	r5, #0
 80093f6:	4622      	mov	r2, r4
 80093f8:	462b      	mov	r3, r5
 80093fa:	1891      	adds	r1, r2, r2
 80093fc:	6339      	str	r1, [r7, #48]	; 0x30
 80093fe:	415b      	adcs	r3, r3
 8009400:	637b      	str	r3, [r7, #52]	; 0x34
 8009402:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009406:	1912      	adds	r2, r2, r4
 8009408:	eb45 0303 	adc.w	r3, r5, r3
 800940c:	f04f 0000 	mov.w	r0, #0
 8009410:	f04f 0100 	mov.w	r1, #0
 8009414:	00d9      	lsls	r1, r3, #3
 8009416:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800941a:	00d0      	lsls	r0, r2, #3
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	1911      	adds	r1, r2, r4
 8009422:	65b9      	str	r1, [r7, #88]	; 0x58
 8009424:	416b      	adcs	r3, r5
 8009426:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	461a      	mov	r2, r3
 800942e:	f04f 0300 	mov.w	r3, #0
 8009432:	1891      	adds	r1, r2, r2
 8009434:	62b9      	str	r1, [r7, #40]	; 0x28
 8009436:	415b      	adcs	r3, r3
 8009438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800943a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800943e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009442:	f7f7 fc11 	bl	8000c68 <__aeabi_uldivmod>
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	4b8c      	ldr	r3, [pc, #560]	; (800967c <UART_SetConfig+0x38c>)
 800944c:	fba3 1302 	umull	r1, r3, r3, r2
 8009450:	095b      	lsrs	r3, r3, #5
 8009452:	2164      	movs	r1, #100	; 0x64
 8009454:	fb01 f303 	mul.w	r3, r1, r3
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	00db      	lsls	r3, r3, #3
 800945c:	3332      	adds	r3, #50	; 0x32
 800945e:	4a87      	ldr	r2, [pc, #540]	; (800967c <UART_SetConfig+0x38c>)
 8009460:	fba2 2303 	umull	r2, r3, r2, r3
 8009464:	095b      	lsrs	r3, r3, #5
 8009466:	005b      	lsls	r3, r3, #1
 8009468:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800946c:	441e      	add	r6, r3
 800946e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009470:	4618      	mov	r0, r3
 8009472:	f04f 0100 	mov.w	r1, #0
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	1894      	adds	r4, r2, r2
 800947c:	623c      	str	r4, [r7, #32]
 800947e:	415b      	adcs	r3, r3
 8009480:	627b      	str	r3, [r7, #36]	; 0x24
 8009482:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009486:	1812      	adds	r2, r2, r0
 8009488:	eb41 0303 	adc.w	r3, r1, r3
 800948c:	f04f 0400 	mov.w	r4, #0
 8009490:	f04f 0500 	mov.w	r5, #0
 8009494:	00dd      	lsls	r5, r3, #3
 8009496:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800949a:	00d4      	lsls	r4, r2, #3
 800949c:	4622      	mov	r2, r4
 800949e:	462b      	mov	r3, r5
 80094a0:	1814      	adds	r4, r2, r0
 80094a2:	653c      	str	r4, [r7, #80]	; 0x50
 80094a4:	414b      	adcs	r3, r1
 80094a6:	657b      	str	r3, [r7, #84]	; 0x54
 80094a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	461a      	mov	r2, r3
 80094ae:	f04f 0300 	mov.w	r3, #0
 80094b2:	1891      	adds	r1, r2, r2
 80094b4:	61b9      	str	r1, [r7, #24]
 80094b6:	415b      	adcs	r3, r3
 80094b8:	61fb      	str	r3, [r7, #28]
 80094ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80094c2:	f7f7 fbd1 	bl	8000c68 <__aeabi_uldivmod>
 80094c6:	4602      	mov	r2, r0
 80094c8:	460b      	mov	r3, r1
 80094ca:	4b6c      	ldr	r3, [pc, #432]	; (800967c <UART_SetConfig+0x38c>)
 80094cc:	fba3 1302 	umull	r1, r3, r3, r2
 80094d0:	095b      	lsrs	r3, r3, #5
 80094d2:	2164      	movs	r1, #100	; 0x64
 80094d4:	fb01 f303 	mul.w	r3, r1, r3
 80094d8:	1ad3      	subs	r3, r2, r3
 80094da:	00db      	lsls	r3, r3, #3
 80094dc:	3332      	adds	r3, #50	; 0x32
 80094de:	4a67      	ldr	r2, [pc, #412]	; (800967c <UART_SetConfig+0x38c>)
 80094e0:	fba2 2303 	umull	r2, r3, r2, r3
 80094e4:	095b      	lsrs	r3, r3, #5
 80094e6:	f003 0207 	and.w	r2, r3, #7
 80094ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4432      	add	r2, r6
 80094f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80094f2:	e0b9      	b.n	8009668 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80094f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094f6:	461c      	mov	r4, r3
 80094f8:	f04f 0500 	mov.w	r5, #0
 80094fc:	4622      	mov	r2, r4
 80094fe:	462b      	mov	r3, r5
 8009500:	1891      	adds	r1, r2, r2
 8009502:	6139      	str	r1, [r7, #16]
 8009504:	415b      	adcs	r3, r3
 8009506:	617b      	str	r3, [r7, #20]
 8009508:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800950c:	1912      	adds	r2, r2, r4
 800950e:	eb45 0303 	adc.w	r3, r5, r3
 8009512:	f04f 0000 	mov.w	r0, #0
 8009516:	f04f 0100 	mov.w	r1, #0
 800951a:	00d9      	lsls	r1, r3, #3
 800951c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009520:	00d0      	lsls	r0, r2, #3
 8009522:	4602      	mov	r2, r0
 8009524:	460b      	mov	r3, r1
 8009526:	eb12 0804 	adds.w	r8, r2, r4
 800952a:	eb43 0905 	adc.w	r9, r3, r5
 800952e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	4618      	mov	r0, r3
 8009534:	f04f 0100 	mov.w	r1, #0
 8009538:	f04f 0200 	mov.w	r2, #0
 800953c:	f04f 0300 	mov.w	r3, #0
 8009540:	008b      	lsls	r3, r1, #2
 8009542:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009546:	0082      	lsls	r2, r0, #2
 8009548:	4640      	mov	r0, r8
 800954a:	4649      	mov	r1, r9
 800954c:	f7f7 fb8c 	bl	8000c68 <__aeabi_uldivmod>
 8009550:	4602      	mov	r2, r0
 8009552:	460b      	mov	r3, r1
 8009554:	4b49      	ldr	r3, [pc, #292]	; (800967c <UART_SetConfig+0x38c>)
 8009556:	fba3 2302 	umull	r2, r3, r3, r2
 800955a:	095b      	lsrs	r3, r3, #5
 800955c:	011e      	lsls	r6, r3, #4
 800955e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009560:	4618      	mov	r0, r3
 8009562:	f04f 0100 	mov.w	r1, #0
 8009566:	4602      	mov	r2, r0
 8009568:	460b      	mov	r3, r1
 800956a:	1894      	adds	r4, r2, r2
 800956c:	60bc      	str	r4, [r7, #8]
 800956e:	415b      	adcs	r3, r3
 8009570:	60fb      	str	r3, [r7, #12]
 8009572:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009576:	1812      	adds	r2, r2, r0
 8009578:	eb41 0303 	adc.w	r3, r1, r3
 800957c:	f04f 0400 	mov.w	r4, #0
 8009580:	f04f 0500 	mov.w	r5, #0
 8009584:	00dd      	lsls	r5, r3, #3
 8009586:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800958a:	00d4      	lsls	r4, r2, #3
 800958c:	4622      	mov	r2, r4
 800958e:	462b      	mov	r3, r5
 8009590:	1814      	adds	r4, r2, r0
 8009592:	64bc      	str	r4, [r7, #72]	; 0x48
 8009594:	414b      	adcs	r3, r1
 8009596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	4618      	mov	r0, r3
 800959e:	f04f 0100 	mov.w	r1, #0
 80095a2:	f04f 0200 	mov.w	r2, #0
 80095a6:	f04f 0300 	mov.w	r3, #0
 80095aa:	008b      	lsls	r3, r1, #2
 80095ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80095b0:	0082      	lsls	r2, r0, #2
 80095b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80095b6:	f7f7 fb57 	bl	8000c68 <__aeabi_uldivmod>
 80095ba:	4602      	mov	r2, r0
 80095bc:	460b      	mov	r3, r1
 80095be:	4b2f      	ldr	r3, [pc, #188]	; (800967c <UART_SetConfig+0x38c>)
 80095c0:	fba3 1302 	umull	r1, r3, r3, r2
 80095c4:	095b      	lsrs	r3, r3, #5
 80095c6:	2164      	movs	r1, #100	; 0x64
 80095c8:	fb01 f303 	mul.w	r3, r1, r3
 80095cc:	1ad3      	subs	r3, r2, r3
 80095ce:	011b      	lsls	r3, r3, #4
 80095d0:	3332      	adds	r3, #50	; 0x32
 80095d2:	4a2a      	ldr	r2, [pc, #168]	; (800967c <UART_SetConfig+0x38c>)
 80095d4:	fba2 2303 	umull	r2, r3, r2, r3
 80095d8:	095b      	lsrs	r3, r3, #5
 80095da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095de:	441e      	add	r6, r3
 80095e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095e2:	4618      	mov	r0, r3
 80095e4:	f04f 0100 	mov.w	r1, #0
 80095e8:	4602      	mov	r2, r0
 80095ea:	460b      	mov	r3, r1
 80095ec:	1894      	adds	r4, r2, r2
 80095ee:	603c      	str	r4, [r7, #0]
 80095f0:	415b      	adcs	r3, r3
 80095f2:	607b      	str	r3, [r7, #4]
 80095f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095f8:	1812      	adds	r2, r2, r0
 80095fa:	eb41 0303 	adc.w	r3, r1, r3
 80095fe:	f04f 0400 	mov.w	r4, #0
 8009602:	f04f 0500 	mov.w	r5, #0
 8009606:	00dd      	lsls	r5, r3, #3
 8009608:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800960c:	00d4      	lsls	r4, r2, #3
 800960e:	4622      	mov	r2, r4
 8009610:	462b      	mov	r3, r5
 8009612:	eb12 0a00 	adds.w	sl, r2, r0
 8009616:	eb43 0b01 	adc.w	fp, r3, r1
 800961a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	4618      	mov	r0, r3
 8009620:	f04f 0100 	mov.w	r1, #0
 8009624:	f04f 0200 	mov.w	r2, #0
 8009628:	f04f 0300 	mov.w	r3, #0
 800962c:	008b      	lsls	r3, r1, #2
 800962e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009632:	0082      	lsls	r2, r0, #2
 8009634:	4650      	mov	r0, sl
 8009636:	4659      	mov	r1, fp
 8009638:	f7f7 fb16 	bl	8000c68 <__aeabi_uldivmod>
 800963c:	4602      	mov	r2, r0
 800963e:	460b      	mov	r3, r1
 8009640:	4b0e      	ldr	r3, [pc, #56]	; (800967c <UART_SetConfig+0x38c>)
 8009642:	fba3 1302 	umull	r1, r3, r3, r2
 8009646:	095b      	lsrs	r3, r3, #5
 8009648:	2164      	movs	r1, #100	; 0x64
 800964a:	fb01 f303 	mul.w	r3, r1, r3
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	011b      	lsls	r3, r3, #4
 8009652:	3332      	adds	r3, #50	; 0x32
 8009654:	4a09      	ldr	r2, [pc, #36]	; (800967c <UART_SetConfig+0x38c>)
 8009656:	fba2 2303 	umull	r2, r3, r2, r3
 800965a:	095b      	lsrs	r3, r3, #5
 800965c:	f003 020f 	and.w	r2, r3, #15
 8009660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4432      	add	r2, r6
 8009666:	609a      	str	r2, [r3, #8]
}
 8009668:	bf00      	nop
 800966a:	377c      	adds	r7, #124	; 0x7c
 800966c:	46bd      	mov	sp, r7
 800966e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009672:	bf00      	nop
 8009674:	40011000 	.word	0x40011000
 8009678:	40011400 	.word	0x40011400
 800967c:	51eb851f 	.word	0x51eb851f

08009680 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009680:	b084      	sub	sp, #16
 8009682:	b580      	push	{r7, lr}
 8009684:	b084      	sub	sp, #16
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	f107 001c 	add.w	r0, r7, #28
 800968e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009694:	2b01      	cmp	r3, #1
 8009696:	d122      	bne.n	80096de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80096ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80096c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d105      	bne.n	80096d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f001 fb1c 	bl	800ad10 <USB_CoreReset>
 80096d8:	4603      	mov	r3, r0
 80096da:	73fb      	strb	r3, [r7, #15]
 80096dc:	e01a      	b.n	8009714 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f001 fb10 	bl	800ad10 <USB_CoreReset>
 80096f0:	4603      	mov	r3, r0
 80096f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80096f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d106      	bne.n	8009708 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	639a      	str	r2, [r3, #56]	; 0x38
 8009706:	e005      	b.n	8009714 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009716:	2b01      	cmp	r3, #1
 8009718:	d10b      	bne.n	8009732 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	f043 0206 	orr.w	r2, r3, #6
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f043 0220 	orr.w	r2, r3, #32
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009732:	7bfb      	ldrb	r3, [r7, #15]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800973e:	b004      	add	sp, #16
 8009740:	4770      	bx	lr
	...

08009744 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009744:	b480      	push	{r7}
 8009746:	b087      	sub	sp, #28
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	4613      	mov	r3, r2
 8009750:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009752:	79fb      	ldrb	r3, [r7, #7]
 8009754:	2b02      	cmp	r3, #2
 8009756:	d165      	bne.n	8009824 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	4a41      	ldr	r2, [pc, #260]	; (8009860 <USB_SetTurnaroundTime+0x11c>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d906      	bls.n	800976e <USB_SetTurnaroundTime+0x2a>
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	4a40      	ldr	r2, [pc, #256]	; (8009864 <USB_SetTurnaroundTime+0x120>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d202      	bcs.n	800976e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009768:	230f      	movs	r3, #15
 800976a:	617b      	str	r3, [r7, #20]
 800976c:	e062      	b.n	8009834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	4a3c      	ldr	r2, [pc, #240]	; (8009864 <USB_SetTurnaroundTime+0x120>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d306      	bcc.n	8009784 <USB_SetTurnaroundTime+0x40>
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	4a3b      	ldr	r2, [pc, #236]	; (8009868 <USB_SetTurnaroundTime+0x124>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d202      	bcs.n	8009784 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800977e:	230e      	movs	r3, #14
 8009780:	617b      	str	r3, [r7, #20]
 8009782:	e057      	b.n	8009834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	4a38      	ldr	r2, [pc, #224]	; (8009868 <USB_SetTurnaroundTime+0x124>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d306      	bcc.n	800979a <USB_SetTurnaroundTime+0x56>
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	4a37      	ldr	r2, [pc, #220]	; (800986c <USB_SetTurnaroundTime+0x128>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d202      	bcs.n	800979a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009794:	230d      	movs	r3, #13
 8009796:	617b      	str	r3, [r7, #20]
 8009798:	e04c      	b.n	8009834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	4a33      	ldr	r2, [pc, #204]	; (800986c <USB_SetTurnaroundTime+0x128>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d306      	bcc.n	80097b0 <USB_SetTurnaroundTime+0x6c>
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	4a32      	ldr	r2, [pc, #200]	; (8009870 <USB_SetTurnaroundTime+0x12c>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d802      	bhi.n	80097b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80097aa:	230c      	movs	r3, #12
 80097ac:	617b      	str	r3, [r7, #20]
 80097ae:	e041      	b.n	8009834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	4a2f      	ldr	r2, [pc, #188]	; (8009870 <USB_SetTurnaroundTime+0x12c>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d906      	bls.n	80097c6 <USB_SetTurnaroundTime+0x82>
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	4a2e      	ldr	r2, [pc, #184]	; (8009874 <USB_SetTurnaroundTime+0x130>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d802      	bhi.n	80097c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80097c0:	230b      	movs	r3, #11
 80097c2:	617b      	str	r3, [r7, #20]
 80097c4:	e036      	b.n	8009834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	4a2a      	ldr	r2, [pc, #168]	; (8009874 <USB_SetTurnaroundTime+0x130>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d906      	bls.n	80097dc <USB_SetTurnaroundTime+0x98>
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	4a29      	ldr	r2, [pc, #164]	; (8009878 <USB_SetTurnaroundTime+0x134>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d802      	bhi.n	80097dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80097d6:	230a      	movs	r3, #10
 80097d8:	617b      	str	r3, [r7, #20]
 80097da:	e02b      	b.n	8009834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	4a26      	ldr	r2, [pc, #152]	; (8009878 <USB_SetTurnaroundTime+0x134>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d906      	bls.n	80097f2 <USB_SetTurnaroundTime+0xae>
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	4a25      	ldr	r2, [pc, #148]	; (800987c <USB_SetTurnaroundTime+0x138>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d202      	bcs.n	80097f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80097ec:	2309      	movs	r3, #9
 80097ee:	617b      	str	r3, [r7, #20]
 80097f0:	e020      	b.n	8009834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	4a21      	ldr	r2, [pc, #132]	; (800987c <USB_SetTurnaroundTime+0x138>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d306      	bcc.n	8009808 <USB_SetTurnaroundTime+0xc4>
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	4a20      	ldr	r2, [pc, #128]	; (8009880 <USB_SetTurnaroundTime+0x13c>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d802      	bhi.n	8009808 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009802:	2308      	movs	r3, #8
 8009804:	617b      	str	r3, [r7, #20]
 8009806:	e015      	b.n	8009834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	4a1d      	ldr	r2, [pc, #116]	; (8009880 <USB_SetTurnaroundTime+0x13c>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d906      	bls.n	800981e <USB_SetTurnaroundTime+0xda>
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	4a1c      	ldr	r2, [pc, #112]	; (8009884 <USB_SetTurnaroundTime+0x140>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d202      	bcs.n	800981e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009818:	2307      	movs	r3, #7
 800981a:	617b      	str	r3, [r7, #20]
 800981c:	e00a      	b.n	8009834 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800981e:	2306      	movs	r3, #6
 8009820:	617b      	str	r3, [r7, #20]
 8009822:	e007      	b.n	8009834 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009824:	79fb      	ldrb	r3, [r7, #7]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d102      	bne.n	8009830 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800982a:	2309      	movs	r3, #9
 800982c:	617b      	str	r3, [r7, #20]
 800982e:	e001      	b.n	8009834 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009830:	2309      	movs	r3, #9
 8009832:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	68da      	ldr	r2, [r3, #12]
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	029b      	lsls	r3, r3, #10
 8009848:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800984c:	431a      	orrs	r2, r3
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009852:	2300      	movs	r3, #0
}
 8009854:	4618      	mov	r0, r3
 8009856:	371c      	adds	r7, #28
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr
 8009860:	00d8acbf 	.word	0x00d8acbf
 8009864:	00e4e1c0 	.word	0x00e4e1c0
 8009868:	00f42400 	.word	0x00f42400
 800986c:	01067380 	.word	0x01067380
 8009870:	011a499f 	.word	0x011a499f
 8009874:	01312cff 	.word	0x01312cff
 8009878:	014ca43f 	.word	0x014ca43f
 800987c:	016e3600 	.word	0x016e3600
 8009880:	01a6ab1f 	.word	0x01a6ab1f
 8009884:	01e84800 	.word	0x01e84800

08009888 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	f043 0201 	orr.w	r2, r3, #1
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b083      	sub	sp, #12
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	f023 0201 	bic.w	r2, r3, #1
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	460b      	mov	r3, r1
 80098d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80098d8:	2300      	movs	r3, #0
 80098da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80098e8:	78fb      	ldrb	r3, [r7, #3]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d115      	bne.n	800991a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80098fa:	2001      	movs	r0, #1
 80098fc:	f7fa f96a 	bl	8003bd4 <HAL_Delay>
      ms++;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	3301      	adds	r3, #1
 8009904:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f001 f972 	bl	800abf0 <USB_GetMode>
 800990c:	4603      	mov	r3, r0
 800990e:	2b01      	cmp	r3, #1
 8009910:	d01e      	beq.n	8009950 <USB_SetCurrentMode+0x84>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2b31      	cmp	r3, #49	; 0x31
 8009916:	d9f0      	bls.n	80098fa <USB_SetCurrentMode+0x2e>
 8009918:	e01a      	b.n	8009950 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800991a:	78fb      	ldrb	r3, [r7, #3]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d115      	bne.n	800994c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800992c:	2001      	movs	r0, #1
 800992e:	f7fa f951 	bl	8003bd4 <HAL_Delay>
      ms++;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	3301      	adds	r3, #1
 8009936:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f001 f959 	bl	800abf0 <USB_GetMode>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d005      	beq.n	8009950 <USB_SetCurrentMode+0x84>
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2b31      	cmp	r3, #49	; 0x31
 8009948:	d9f0      	bls.n	800992c <USB_SetCurrentMode+0x60>
 800994a:	e001      	b.n	8009950 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e005      	b.n	800995c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2b32      	cmp	r3, #50	; 0x32
 8009954:	d101      	bne.n	800995a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e000      	b.n	800995c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009964:	b084      	sub	sp, #16
 8009966:	b580      	push	{r7, lr}
 8009968:	b086      	sub	sp, #24
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
 800996e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009972:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800997e:	2300      	movs	r3, #0
 8009980:	613b      	str	r3, [r7, #16]
 8009982:	e009      	b.n	8009998 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	3340      	adds	r3, #64	; 0x40
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	4413      	add	r3, r2
 800998e:	2200      	movs	r2, #0
 8009990:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	3301      	adds	r3, #1
 8009996:	613b      	str	r3, [r7, #16]
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	2b0e      	cmp	r3, #14
 800999c:	d9f2      	bls.n	8009984 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800999e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d11c      	bne.n	80099de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099b2:	f043 0302 	orr.w	r3, r3, #2
 80099b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	639a      	str	r2, [r3, #56]	; 0x38
 80099dc:	e00b      	b.n	80099f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099fc:	461a      	mov	r2, r3
 80099fe:	2300      	movs	r3, #0
 8009a00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a08:	4619      	mov	r1, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a10:	461a      	mov	r2, r3
 8009a12:	680b      	ldr	r3, [r1, #0]
 8009a14:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d10c      	bne.n	8009a36 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d104      	bne.n	8009a2c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009a22:	2100      	movs	r1, #0
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f945 	bl	8009cb4 <USB_SetDevSpeed>
 8009a2a:	e008      	b.n	8009a3e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009a2c:	2101      	movs	r1, #1
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f940 	bl	8009cb4 <USB_SetDevSpeed>
 8009a34:	e003      	b.n	8009a3e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009a36:	2103      	movs	r1, #3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 f93b 	bl	8009cb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a3e:	2110      	movs	r1, #16
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 f8f3 	bl	8009c2c <USB_FlushTxFifo>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d001      	beq.n	8009a50 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 f90f 	bl	8009c74 <USB_FlushRxFifo>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a66:	461a      	mov	r2, r3
 8009a68:	2300      	movs	r3, #0
 8009a6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a72:	461a      	mov	r2, r3
 8009a74:	2300      	movs	r3, #0
 8009a76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a7e:	461a      	mov	r2, r3
 8009a80:	2300      	movs	r3, #0
 8009a82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a84:	2300      	movs	r3, #0
 8009a86:	613b      	str	r3, [r7, #16]
 8009a88:	e043      	b.n	8009b12 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	015a      	lsls	r2, r3, #5
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	4413      	add	r3, r2
 8009a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009aa0:	d118      	bne.n	8009ad4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10a      	bne.n	8009abe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	015a      	lsls	r2, r3, #5
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	4413      	add	r3, r2
 8009ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009aba:	6013      	str	r3, [r2, #0]
 8009abc:	e013      	b.n	8009ae6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	015a      	lsls	r2, r3, #5
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aca:	461a      	mov	r2, r3
 8009acc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009ad0:	6013      	str	r3, [r2, #0]
 8009ad2:	e008      	b.n	8009ae6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	015a      	lsls	r2, r3, #5
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	4413      	add	r3, r2
 8009adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	015a      	lsls	r2, r3, #5
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	4413      	add	r3, r2
 8009aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af2:	461a      	mov	r2, r3
 8009af4:	2300      	movs	r3, #0
 8009af6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	015a      	lsls	r2, r3, #5
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	4413      	add	r3, r2
 8009b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b04:	461a      	mov	r2, r3
 8009b06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	613b      	str	r3, [r7, #16]
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	693a      	ldr	r2, [r7, #16]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d3b7      	bcc.n	8009a8a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	613b      	str	r3, [r7, #16]
 8009b1e:	e043      	b.n	8009ba8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	015a      	lsls	r2, r3, #5
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	4413      	add	r3, r2
 8009b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b36:	d118      	bne.n	8009b6a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d10a      	bne.n	8009b54 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	015a      	lsls	r2, r3, #5
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	4413      	add	r3, r2
 8009b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b50:	6013      	str	r3, [r2, #0]
 8009b52:	e013      	b.n	8009b7c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	015a      	lsls	r2, r3, #5
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b60:	461a      	mov	r2, r3
 8009b62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	e008      	b.n	8009b7c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	015a      	lsls	r2, r3, #5
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	4413      	add	r3, r2
 8009b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b76:	461a      	mov	r2, r3
 8009b78:	2300      	movs	r3, #0
 8009b7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	015a      	lsls	r2, r3, #5
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	4413      	add	r3, r2
 8009b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b88:	461a      	mov	r2, r3
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	015a      	lsls	r2, r3, #5
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ba0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	613b      	str	r3, [r7, #16]
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d3b7      	bcc.n	8009b20 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bc2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009bd0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d105      	bne.n	8009be4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	f043 0210 	orr.w	r2, r3, #16
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	699a      	ldr	r2, [r3, #24]
 8009be8:	4b0f      	ldr	r3, [pc, #60]	; (8009c28 <USB_DevInit+0x2c4>)
 8009bea:	4313      	orrs	r3, r2
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d005      	beq.n	8009c02 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	f043 0208 	orr.w	r2, r3, #8
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d107      	bne.n	8009c18 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	699b      	ldr	r3, [r3, #24]
 8009c0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c10:	f043 0304 	orr.w	r3, r3, #4
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c24:	b004      	add	sp, #16
 8009c26:	4770      	bx	lr
 8009c28:	803c3800 	.word	0x803c3800

08009c2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009c36:	2300      	movs	r3, #0
 8009c38:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	019b      	lsls	r3, r3, #6
 8009c3e:	f043 0220 	orr.w	r2, r3, #32
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	3301      	adds	r3, #1
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	4a08      	ldr	r2, [pc, #32]	; (8009c70 <USB_FlushTxFifo+0x44>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d901      	bls.n	8009c56 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8009c52:	2303      	movs	r3, #3
 8009c54:	e006      	b.n	8009c64 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	f003 0320 	and.w	r3, r3, #32
 8009c5e:	2b20      	cmp	r3, #32
 8009c60:	d0f1      	beq.n	8009c46 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	00030d40 	.word	0x00030d40

08009c74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2210      	movs	r2, #16
 8009c84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	60fb      	str	r3, [r7, #12]
 8009c8c:	4a08      	ldr	r2, [pc, #32]	; (8009cb0 <USB_FlushRxFifo+0x3c>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d901      	bls.n	8009c96 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8009c92:	2303      	movs	r3, #3
 8009c94:	e006      	b.n	8009ca4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	f003 0310 	and.w	r3, r3, #16
 8009c9e:	2b10      	cmp	r3, #16
 8009ca0:	d0f1      	beq.n	8009c86 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3714      	adds	r7, #20
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr
 8009cb0:	00030d40 	.word	0x00030d40

08009cb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	78fb      	ldrb	r3, [r7, #3]
 8009cce:	68f9      	ldr	r1, [r7, #12]
 8009cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3714      	adds	r7, #20
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr

08009ce6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009ce6:	b480      	push	{r7}
 8009ce8:	b087      	sub	sp, #28
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	f003 0306 	and.w	r3, r3, #6
 8009cfe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d102      	bne.n	8009d0c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009d06:	2300      	movs	r3, #0
 8009d08:	75fb      	strb	r3, [r7, #23]
 8009d0a:	e00a      	b.n	8009d22 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	d002      	beq.n	8009d18 <USB_GetDevSpeed+0x32>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2b06      	cmp	r3, #6
 8009d16:	d102      	bne.n	8009d1e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009d18:	2302      	movs	r3, #2
 8009d1a:	75fb      	strb	r3, [r7, #23]
 8009d1c:	e001      	b.n	8009d22 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009d1e:	230f      	movs	r3, #15
 8009d20:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	371c      	adds	r7, #28
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	785b      	ldrb	r3, [r3, #1]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d13a      	bne.n	8009dc2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d52:	69da      	ldr	r2, [r3, #28]
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	f003 030f 	and.w	r3, r3, #15
 8009d5c:	2101      	movs	r1, #1
 8009d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	68f9      	ldr	r1, [r7, #12]
 8009d66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	015a      	lsls	r2, r3, #5
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	4413      	add	r3, r2
 8009d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d155      	bne.n	8009e30 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	015a      	lsls	r2, r3, #5
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	78db      	ldrb	r3, [r3, #3]
 8009d9e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009da0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	059b      	lsls	r3, r3, #22
 8009da6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009da8:	4313      	orrs	r3, r2
 8009daa:	68ba      	ldr	r2, [r7, #8]
 8009dac:	0151      	lsls	r1, r2, #5
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	440a      	add	r2, r1
 8009db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dbe:	6013      	str	r3, [r2, #0]
 8009dc0:	e036      	b.n	8009e30 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dc8:	69da      	ldr	r2, [r3, #28]
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	f003 030f 	and.w	r3, r3, #15
 8009dd2:	2101      	movs	r1, #1
 8009dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8009dd8:	041b      	lsls	r3, r3, #16
 8009dda:	68f9      	ldr	r1, [r7, #12]
 8009ddc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009de0:	4313      	orrs	r3, r2
 8009de2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	015a      	lsls	r2, r3, #5
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	4413      	add	r3, r2
 8009dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d11a      	bne.n	8009e30 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	015a      	lsls	r2, r3, #5
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	4413      	add	r3, r2
 8009e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	78db      	ldrb	r3, [r3, #3]
 8009e14:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009e16:	430b      	orrs	r3, r1
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	0151      	lsls	r1, r2, #5
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	440a      	add	r2, r1
 8009e22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e2e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3714      	adds	r7, #20
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
	...

08009e40 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	785b      	ldrb	r3, [r3, #1]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d161      	bne.n	8009f20 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	015a      	lsls	r2, r3, #5
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4413      	add	r3, r2
 8009e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e72:	d11f      	bne.n	8009eb4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	015a      	lsls	r2, r3, #5
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	0151      	lsls	r1, r2, #5
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	440a      	add	r2, r1
 8009e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009e92:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	015a      	lsls	r2, r3, #5
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	0151      	lsls	r1, r2, #5
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	440a      	add	r2, r1
 8009eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009eb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	f003 030f 	and.w	r3, r3, #15
 8009ec4:	2101      	movs	r1, #1
 8009ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	43db      	mvns	r3, r3
 8009ece:	68f9      	ldr	r1, [r7, #12]
 8009ed0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ed4:	4013      	ands	r3, r2
 8009ed6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ede:	69da      	ldr	r2, [r3, #28]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	f003 030f 	and.w	r3, r3, #15
 8009ee8:	2101      	movs	r1, #1
 8009eea:	fa01 f303 	lsl.w	r3, r1, r3
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	43db      	mvns	r3, r3
 8009ef2:	68f9      	ldr	r1, [r7, #12]
 8009ef4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ef8:	4013      	ands	r3, r2
 8009efa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	015a      	lsls	r2, r3, #5
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	4413      	add	r3, r2
 8009f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	0159      	lsls	r1, r3, #5
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	440b      	add	r3, r1
 8009f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f16:	4619      	mov	r1, r3
 8009f18:	4b35      	ldr	r3, [pc, #212]	; (8009ff0 <USB_DeactivateEndpoint+0x1b0>)
 8009f1a:	4013      	ands	r3, r2
 8009f1c:	600b      	str	r3, [r1, #0]
 8009f1e:	e060      	b.n	8009fe2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	015a      	lsls	r2, r3, #5
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	4413      	add	r3, r2
 8009f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f36:	d11f      	bne.n	8009f78 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	015a      	lsls	r2, r3, #5
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	4413      	add	r3, r2
 8009f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	68ba      	ldr	r2, [r7, #8]
 8009f48:	0151      	lsls	r1, r2, #5
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	440a      	add	r2, r1
 8009f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f56:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	015a      	lsls	r2, r3, #5
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	4413      	add	r3, r2
 8009f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	0151      	lsls	r1, r2, #5
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	440a      	add	r2, r1
 8009f6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	f003 030f 	and.w	r3, r3, #15
 8009f88:	2101      	movs	r1, #1
 8009f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f8e:	041b      	lsls	r3, r3, #16
 8009f90:	43db      	mvns	r3, r3
 8009f92:	68f9      	ldr	r1, [r7, #12]
 8009f94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f98:	4013      	ands	r3, r2
 8009f9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fa2:	69da      	ldr	r2, [r3, #28]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	f003 030f 	and.w	r3, r3, #15
 8009fac:	2101      	movs	r1, #1
 8009fae:	fa01 f303 	lsl.w	r3, r1, r3
 8009fb2:	041b      	lsls	r3, r3, #16
 8009fb4:	43db      	mvns	r3, r3
 8009fb6:	68f9      	ldr	r1, [r7, #12]
 8009fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	015a      	lsls	r2, r3, #5
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	0159      	lsls	r1, r3, #5
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	440b      	add	r3, r1
 8009fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fda:	4619      	mov	r1, r3
 8009fdc:	4b05      	ldr	r3, [pc, #20]	; (8009ff4 <USB_DeactivateEndpoint+0x1b4>)
 8009fde:	4013      	ands	r3, r2
 8009fe0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009fe2:	2300      	movs	r3, #0
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3714      	adds	r7, #20
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr
 8009ff0:	ec337800 	.word	0xec337800
 8009ff4:	eff37800 	.word	0xeff37800

08009ff8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b08a      	sub	sp, #40	; 0x28
 8009ffc:	af02      	add	r7, sp, #8
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	4613      	mov	r3, r2
 800a004:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	785b      	ldrb	r3, [r3, #1]
 800a014:	2b01      	cmp	r3, #1
 800a016:	f040 815c 	bne.w	800a2d2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	695b      	ldr	r3, [r3, #20]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d132      	bne.n	800a088 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	015a      	lsls	r2, r3, #5
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	4413      	add	r3, r2
 800a02a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	69ba      	ldr	r2, [r7, #24]
 800a032:	0151      	lsls	r1, r2, #5
 800a034:	69fa      	ldr	r2, [r7, #28]
 800a036:	440a      	add	r2, r1
 800a038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a03c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a040:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a044:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	015a      	lsls	r2, r3, #5
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	4413      	add	r3, r2
 800a04e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	69ba      	ldr	r2, [r7, #24]
 800a056:	0151      	lsls	r1, r2, #5
 800a058:	69fa      	ldr	r2, [r7, #28]
 800a05a:	440a      	add	r2, r1
 800a05c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a060:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a064:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	015a      	lsls	r2, r3, #5
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	4413      	add	r3, r2
 800a06e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	69ba      	ldr	r2, [r7, #24]
 800a076:	0151      	lsls	r1, r2, #5
 800a078:	69fa      	ldr	r2, [r7, #28]
 800a07a:	440a      	add	r2, r1
 800a07c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a080:	0cdb      	lsrs	r3, r3, #19
 800a082:	04db      	lsls	r3, r3, #19
 800a084:	6113      	str	r3, [r2, #16]
 800a086:	e074      	b.n	800a172 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a088:	69bb      	ldr	r3, [r7, #24]
 800a08a:	015a      	lsls	r2, r3, #5
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	4413      	add	r3, r2
 800a090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	69ba      	ldr	r2, [r7, #24]
 800a098:	0151      	lsls	r1, r2, #5
 800a09a:	69fa      	ldr	r2, [r7, #28]
 800a09c:	440a      	add	r2, r1
 800a09e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0a2:	0cdb      	lsrs	r3, r3, #19
 800a0a4:	04db      	lsls	r3, r3, #19
 800a0a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	015a      	lsls	r2, r3, #5
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	69ba      	ldr	r2, [r7, #24]
 800a0b8:	0151      	lsls	r1, r2, #5
 800a0ba:	69fa      	ldr	r2, [r7, #28]
 800a0bc:	440a      	add	r2, r1
 800a0be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a0c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a0ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	015a      	lsls	r2, r3, #5
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0d8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	6959      	ldr	r1, [r3, #20]
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	440b      	add	r3, r1
 800a0e4:	1e59      	subs	r1, r3, #1
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	fbb1 f3f3 	udiv	r3, r1, r3
 800a0ee:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a0f0:	4b9d      	ldr	r3, [pc, #628]	; (800a368 <USB_EPStartXfer+0x370>)
 800a0f2:	400b      	ands	r3, r1
 800a0f4:	69b9      	ldr	r1, [r7, #24]
 800a0f6:	0148      	lsls	r0, r1, #5
 800a0f8:	69f9      	ldr	r1, [r7, #28]
 800a0fa:	4401      	add	r1, r0
 800a0fc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a100:	4313      	orrs	r3, r2
 800a102:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	015a      	lsls	r2, r3, #5
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	4413      	add	r3, r2
 800a10c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a110:	691a      	ldr	r2, [r3, #16]
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	695b      	ldr	r3, [r3, #20]
 800a116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a11a:	69b9      	ldr	r1, [r7, #24]
 800a11c:	0148      	lsls	r0, r1, #5
 800a11e:	69f9      	ldr	r1, [r7, #28]
 800a120:	4401      	add	r1, r0
 800a122:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a126:	4313      	orrs	r3, r2
 800a128:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	78db      	ldrb	r3, [r3, #3]
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d11f      	bne.n	800a172 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	015a      	lsls	r2, r3, #5
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	4413      	add	r3, r2
 800a13a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	69ba      	ldr	r2, [r7, #24]
 800a142:	0151      	lsls	r1, r2, #5
 800a144:	69fa      	ldr	r2, [r7, #28]
 800a146:	440a      	add	r2, r1
 800a148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a14c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a150:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	015a      	lsls	r2, r3, #5
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	4413      	add	r3, r2
 800a15a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	69ba      	ldr	r2, [r7, #24]
 800a162:	0151      	lsls	r1, r2, #5
 800a164:	69fa      	ldr	r2, [r7, #28]
 800a166:	440a      	add	r2, r1
 800a168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a16c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a170:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a172:	79fb      	ldrb	r3, [r7, #7]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d14b      	bne.n	800a210 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d009      	beq.n	800a194 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	015a      	lsls	r2, r3, #5
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	4413      	add	r3, r2
 800a188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a18c:	461a      	mov	r2, r3
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	78db      	ldrb	r3, [r3, #3]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d128      	bne.n	800a1ee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d110      	bne.n	800a1ce <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a1ac:	69bb      	ldr	r3, [r7, #24]
 800a1ae:	015a      	lsls	r2, r3, #5
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	69ba      	ldr	r2, [r7, #24]
 800a1bc:	0151      	lsls	r1, r2, #5
 800a1be:	69fa      	ldr	r2, [r7, #28]
 800a1c0:	440a      	add	r2, r1
 800a1c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1ca:	6013      	str	r3, [r2, #0]
 800a1cc:	e00f      	b.n	800a1ee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	015a      	lsls	r2, r3, #5
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	69ba      	ldr	r2, [r7, #24]
 800a1de:	0151      	lsls	r1, r2, #5
 800a1e0:	69fa      	ldr	r2, [r7, #28]
 800a1e2:	440a      	add	r2, r1
 800a1e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1ec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	015a      	lsls	r2, r3, #5
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	69ba      	ldr	r2, [r7, #24]
 800a1fe:	0151      	lsls	r1, r2, #5
 800a200:	69fa      	ldr	r2, [r7, #28]
 800a202:	440a      	add	r2, r1
 800a204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a208:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a20c:	6013      	str	r3, [r2, #0]
 800a20e:	e12f      	b.n	800a470 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	015a      	lsls	r2, r3, #5
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	4413      	add	r3, r2
 800a218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	69ba      	ldr	r2, [r7, #24]
 800a220:	0151      	lsls	r1, r2, #5
 800a222:	69fa      	ldr	r2, [r7, #28]
 800a224:	440a      	add	r2, r1
 800a226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a22a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a22e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	78db      	ldrb	r3, [r3, #3]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d015      	beq.n	800a264 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	695b      	ldr	r3, [r3, #20]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f000 8117 	beq.w	800a470 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	f003 030f 	and.w	r3, r3, #15
 800a252:	2101      	movs	r1, #1
 800a254:	fa01 f303 	lsl.w	r3, r1, r3
 800a258:	69f9      	ldr	r1, [r7, #28]
 800a25a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a25e:	4313      	orrs	r3, r2
 800a260:	634b      	str	r3, [r1, #52]	; 0x34
 800a262:	e105      	b.n	800a470 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a270:	2b00      	cmp	r3, #0
 800a272:	d110      	bne.n	800a296 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	015a      	lsls	r2, r3, #5
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	4413      	add	r3, r2
 800a27c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	69ba      	ldr	r2, [r7, #24]
 800a284:	0151      	lsls	r1, r2, #5
 800a286:	69fa      	ldr	r2, [r7, #28]
 800a288:	440a      	add	r2, r1
 800a28a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a28e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a292:	6013      	str	r3, [r2, #0]
 800a294:	e00f      	b.n	800a2b6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	015a      	lsls	r2, r3, #5
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	4413      	add	r3, r2
 800a29e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	69ba      	ldr	r2, [r7, #24]
 800a2a6:	0151      	lsls	r1, r2, #5
 800a2a8:	69fa      	ldr	r2, [r7, #28]
 800a2aa:	440a      	add	r2, r1
 800a2ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2b4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	68d9      	ldr	r1, [r3, #12]
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	781a      	ldrb	r2, [r3, #0]
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	b298      	uxth	r0, r3
 800a2c4:	79fb      	ldrb	r3, [r7, #7]
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	f000 fa2b 	bl	800a726 <USB_WritePacket>
 800a2d0:	e0ce      	b.n	800a470 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	015a      	lsls	r2, r3, #5
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	4413      	add	r3, r2
 800a2da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	69ba      	ldr	r2, [r7, #24]
 800a2e2:	0151      	lsls	r1, r2, #5
 800a2e4:	69fa      	ldr	r2, [r7, #28]
 800a2e6:	440a      	add	r2, r1
 800a2e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2ec:	0cdb      	lsrs	r3, r3, #19
 800a2ee:	04db      	lsls	r3, r3, #19
 800a2f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	015a      	lsls	r2, r3, #5
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	69ba      	ldr	r2, [r7, #24]
 800a302:	0151      	lsls	r1, r2, #5
 800a304:	69fa      	ldr	r2, [r7, #28]
 800a306:	440a      	add	r2, r1
 800a308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a30c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a310:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a314:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	695b      	ldr	r3, [r3, #20]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d126      	bne.n	800a36c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	015a      	lsls	r2, r3, #5
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	4413      	add	r3, r2
 800a326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a32a:	691a      	ldr	r2, [r3, #16]
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a334:	69b9      	ldr	r1, [r7, #24]
 800a336:	0148      	lsls	r0, r1, #5
 800a338:	69f9      	ldr	r1, [r7, #28]
 800a33a:	4401      	add	r1, r0
 800a33c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a340:	4313      	orrs	r3, r2
 800a342:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	015a      	lsls	r2, r3, #5
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	4413      	add	r3, r2
 800a34c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	69ba      	ldr	r2, [r7, #24]
 800a354:	0151      	lsls	r1, r2, #5
 800a356:	69fa      	ldr	r2, [r7, #28]
 800a358:	440a      	add	r2, r1
 800a35a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a35e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a362:	6113      	str	r3, [r2, #16]
 800a364:	e036      	b.n	800a3d4 <USB_EPStartXfer+0x3dc>
 800a366:	bf00      	nop
 800a368:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	695a      	ldr	r2, [r3, #20]
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	4413      	add	r3, r2
 800a376:	1e5a      	subs	r2, r3, #1
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a380:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	015a      	lsls	r2, r3, #5
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	4413      	add	r3, r2
 800a38a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a38e:	691a      	ldr	r2, [r3, #16]
 800a390:	8afb      	ldrh	r3, [r7, #22]
 800a392:	04d9      	lsls	r1, r3, #19
 800a394:	4b39      	ldr	r3, [pc, #228]	; (800a47c <USB_EPStartXfer+0x484>)
 800a396:	400b      	ands	r3, r1
 800a398:	69b9      	ldr	r1, [r7, #24]
 800a39a:	0148      	lsls	r0, r1, #5
 800a39c:	69f9      	ldr	r1, [r7, #28]
 800a39e:	4401      	add	r1, r0
 800a3a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	015a      	lsls	r2, r3, #5
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b4:	691a      	ldr	r2, [r3, #16]
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	8af9      	ldrh	r1, [r7, #22]
 800a3bc:	fb01 f303 	mul.w	r3, r1, r3
 800a3c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3c4:	69b9      	ldr	r1, [r7, #24]
 800a3c6:	0148      	lsls	r0, r1, #5
 800a3c8:	69f9      	ldr	r1, [r7, #28]
 800a3ca:	4401      	add	r1, r0
 800a3cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a3d4:	79fb      	ldrb	r3, [r7, #7]
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d10d      	bne.n	800a3f6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d009      	beq.n	800a3f6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	68d9      	ldr	r1, [r3, #12]
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	015a      	lsls	r2, r3, #5
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3f2:	460a      	mov	r2, r1
 800a3f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	78db      	ldrb	r3, [r3, #3]
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d128      	bne.n	800a450 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d110      	bne.n	800a430 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	015a      	lsls	r2, r3, #5
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	4413      	add	r3, r2
 800a416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	69ba      	ldr	r2, [r7, #24]
 800a41e:	0151      	lsls	r1, r2, #5
 800a420:	69fa      	ldr	r2, [r7, #28]
 800a422:	440a      	add	r2, r1
 800a424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a428:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a42c:	6013      	str	r3, [r2, #0]
 800a42e:	e00f      	b.n	800a450 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	015a      	lsls	r2, r3, #5
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	4413      	add	r3, r2
 800a438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	69ba      	ldr	r2, [r7, #24]
 800a440:	0151      	lsls	r1, r2, #5
 800a442:	69fa      	ldr	r2, [r7, #28]
 800a444:	440a      	add	r2, r1
 800a446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a44a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a44e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	015a      	lsls	r2, r3, #5
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	4413      	add	r3, r2
 800a458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	69ba      	ldr	r2, [r7, #24]
 800a460:	0151      	lsls	r1, r2, #5
 800a462:	69fa      	ldr	r2, [r7, #28]
 800a464:	440a      	add	r2, r1
 800a466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a46a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a46e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3720      	adds	r7, #32
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	1ff80000 	.word	0x1ff80000

0800a480 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a480:	b480      	push	{r7}
 800a482:	b087      	sub	sp, #28
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	4613      	mov	r3, r2
 800a48c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	785b      	ldrb	r3, [r3, #1]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	f040 80cd 	bne.w	800a63c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	695b      	ldr	r3, [r3, #20]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d132      	bne.n	800a510 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	015a      	lsls	r2, r3, #5
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	693a      	ldr	r2, [r7, #16]
 800a4ba:	0151      	lsls	r1, r2, #5
 800a4bc:	697a      	ldr	r2, [r7, #20]
 800a4be:	440a      	add	r2, r1
 800a4c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a4c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a4cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	015a      	lsls	r2, r3, #5
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	693a      	ldr	r2, [r7, #16]
 800a4de:	0151      	lsls	r1, r2, #5
 800a4e0:	697a      	ldr	r2, [r7, #20]
 800a4e2:	440a      	add	r2, r1
 800a4e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	015a      	lsls	r2, r3, #5
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	693a      	ldr	r2, [r7, #16]
 800a4fe:	0151      	lsls	r1, r2, #5
 800a500:	697a      	ldr	r2, [r7, #20]
 800a502:	440a      	add	r2, r1
 800a504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a508:	0cdb      	lsrs	r3, r3, #19
 800a50a:	04db      	lsls	r3, r3, #19
 800a50c:	6113      	str	r3, [r2, #16]
 800a50e:	e04e      	b.n	800a5ae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	015a      	lsls	r2, r3, #5
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	4413      	add	r3, r2
 800a518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	693a      	ldr	r2, [r7, #16]
 800a520:	0151      	lsls	r1, r2, #5
 800a522:	697a      	ldr	r2, [r7, #20]
 800a524:	440a      	add	r2, r1
 800a526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a52a:	0cdb      	lsrs	r3, r3, #19
 800a52c:	04db      	lsls	r3, r3, #19
 800a52e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	015a      	lsls	r2, r3, #5
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	4413      	add	r3, r2
 800a538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	693a      	ldr	r2, [r7, #16]
 800a540:	0151      	lsls	r1, r2, #5
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	440a      	add	r2, r1
 800a546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a54a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a54e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a552:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	695a      	ldr	r2, [r3, #20]
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d903      	bls.n	800a568 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	689a      	ldr	r2, [r3, #8]
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	015a      	lsls	r2, r3, #5
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	4413      	add	r3, r2
 800a570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a574:	691b      	ldr	r3, [r3, #16]
 800a576:	693a      	ldr	r2, [r7, #16]
 800a578:	0151      	lsls	r1, r2, #5
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	440a      	add	r2, r1
 800a57e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a582:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a586:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	015a      	lsls	r2, r3, #5
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	4413      	add	r3, r2
 800a590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a594:	691a      	ldr	r2, [r3, #16]
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	695b      	ldr	r3, [r3, #20]
 800a59a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a59e:	6939      	ldr	r1, [r7, #16]
 800a5a0:	0148      	lsls	r0, r1, #5
 800a5a2:	6979      	ldr	r1, [r7, #20]
 800a5a4:	4401      	add	r1, r0
 800a5a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a5ae:	79fb      	ldrb	r3, [r7, #7]
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d11e      	bne.n	800a5f2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d009      	beq.n	800a5d0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	015a      	lsls	r2, r3, #5
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	015a      	lsls	r2, r3, #5
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	693a      	ldr	r2, [r7, #16]
 800a5e0:	0151      	lsls	r1, r2, #5
 800a5e2:	697a      	ldr	r2, [r7, #20]
 800a5e4:	440a      	add	r2, r1
 800a5e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a5ee:	6013      	str	r3, [r2, #0]
 800a5f0:	e092      	b.n	800a718 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	015a      	lsls	r2, r3, #5
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	693a      	ldr	r2, [r7, #16]
 800a602:	0151      	lsls	r1, r2, #5
 800a604:	697a      	ldr	r2, [r7, #20]
 800a606:	440a      	add	r2, r1
 800a608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a60c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a610:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	695b      	ldr	r3, [r3, #20]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d07e      	beq.n	800a718 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	f003 030f 	and.w	r3, r3, #15
 800a62a:	2101      	movs	r1, #1
 800a62c:	fa01 f303 	lsl.w	r3, r1, r3
 800a630:	6979      	ldr	r1, [r7, #20]
 800a632:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a636:	4313      	orrs	r3, r2
 800a638:	634b      	str	r3, [r1, #52]	; 0x34
 800a63a:	e06d      	b.n	800a718 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	015a      	lsls	r2, r3, #5
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	4413      	add	r3, r2
 800a644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a648:	691b      	ldr	r3, [r3, #16]
 800a64a:	693a      	ldr	r2, [r7, #16]
 800a64c:	0151      	lsls	r1, r2, #5
 800a64e:	697a      	ldr	r2, [r7, #20]
 800a650:	440a      	add	r2, r1
 800a652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a656:	0cdb      	lsrs	r3, r3, #19
 800a658:	04db      	lsls	r3, r3, #19
 800a65a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	015a      	lsls	r2, r3, #5
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	4413      	add	r3, r2
 800a664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	693a      	ldr	r2, [r7, #16]
 800a66c:	0151      	lsls	r1, r2, #5
 800a66e:	697a      	ldr	r2, [r7, #20]
 800a670:	440a      	add	r2, r1
 800a672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a676:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a67a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a67e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	695b      	ldr	r3, [r3, #20]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d003      	beq.n	800a690 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	689a      	ldr	r2, [r3, #8]
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	015a      	lsls	r2, r3, #5
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	4413      	add	r3, r2
 800a698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	693a      	ldr	r2, [r7, #16]
 800a6a0:	0151      	lsls	r1, r2, #5
 800a6a2:	697a      	ldr	r2, [r7, #20]
 800a6a4:	440a      	add	r2, r1
 800a6a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	015a      	lsls	r2, r3, #5
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6bc:	691a      	ldr	r2, [r3, #16]
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6c6:	6939      	ldr	r1, [r7, #16]
 800a6c8:	0148      	lsls	r0, r1, #5
 800a6ca:	6979      	ldr	r1, [r7, #20]
 800a6cc:	4401      	add	r1, r0
 800a6ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a6d6:	79fb      	ldrb	r3, [r7, #7]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d10d      	bne.n	800a6f8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d009      	beq.n	800a6f8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	68d9      	ldr	r1, [r3, #12]
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	015a      	lsls	r2, r3, #5
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6f4:	460a      	mov	r2, r1
 800a6f6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	015a      	lsls	r2, r3, #5
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	4413      	add	r3, r2
 800a700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	693a      	ldr	r2, [r7, #16]
 800a708:	0151      	lsls	r1, r2, #5
 800a70a:	697a      	ldr	r2, [r7, #20]
 800a70c:	440a      	add	r2, r1
 800a70e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a712:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a716:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	371c      	adds	r7, #28
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr

0800a726 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a726:	b480      	push	{r7}
 800a728:	b089      	sub	sp, #36	; 0x24
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	60f8      	str	r0, [r7, #12]
 800a72e:	60b9      	str	r1, [r7, #8]
 800a730:	4611      	mov	r1, r2
 800a732:	461a      	mov	r2, r3
 800a734:	460b      	mov	r3, r1
 800a736:	71fb      	strb	r3, [r7, #7]
 800a738:	4613      	mov	r3, r2
 800a73a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a744:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d123      	bne.n	800a794 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a74c:	88bb      	ldrh	r3, [r7, #4]
 800a74e:	3303      	adds	r3, #3
 800a750:	089b      	lsrs	r3, r3, #2
 800a752:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a754:	2300      	movs	r3, #0
 800a756:	61bb      	str	r3, [r7, #24]
 800a758:	e018      	b.n	800a78c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a75a:	79fb      	ldrb	r3, [r7, #7]
 800a75c:	031a      	lsls	r2, r3, #12
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	4413      	add	r3, r2
 800a762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a766:	461a      	mov	r2, r3
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	3301      	adds	r3, #1
 800a772:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	3301      	adds	r3, #1
 800a778:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	3301      	adds	r3, #1
 800a77e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	3301      	adds	r3, #1
 800a784:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	3301      	adds	r3, #1
 800a78a:	61bb      	str	r3, [r7, #24]
 800a78c:	69ba      	ldr	r2, [r7, #24]
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	429a      	cmp	r2, r3
 800a792:	d3e2      	bcc.n	800a75a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	3724      	adds	r7, #36	; 0x24
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr

0800a7a2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a7a2:	b480      	push	{r7}
 800a7a4:	b08b      	sub	sp, #44	; 0x2c
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	60f8      	str	r0, [r7, #12]
 800a7aa:	60b9      	str	r1, [r7, #8]
 800a7ac:	4613      	mov	r3, r2
 800a7ae:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a7b8:	88fb      	ldrh	r3, [r7, #6]
 800a7ba:	089b      	lsrs	r3, r3, #2
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a7c0:	88fb      	ldrh	r3, [r7, #6]
 800a7c2:	f003 0303 	and.w	r3, r3, #3
 800a7c6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	623b      	str	r3, [r7, #32]
 800a7cc:	e014      	b.n	800a7f8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d8:	601a      	str	r2, [r3, #0]
    pDest++;
 800a7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7dc:	3301      	adds	r3, #1
 800a7de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a7f2:	6a3b      	ldr	r3, [r7, #32]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	623b      	str	r3, [r7, #32]
 800a7f8:	6a3a      	ldr	r2, [r7, #32]
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d3e6      	bcc.n	800a7ce <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a800:	8bfb      	ldrh	r3, [r7, #30]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d01e      	beq.n	800a844 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a806:	2300      	movs	r3, #0
 800a808:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a810:	461a      	mov	r2, r3
 800a812:	f107 0310 	add.w	r3, r7, #16
 800a816:	6812      	ldr	r2, [r2, #0]
 800a818:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a81a:	693a      	ldr	r2, [r7, #16]
 800a81c:	6a3b      	ldr	r3, [r7, #32]
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	00db      	lsls	r3, r3, #3
 800a822:	fa22 f303 	lsr.w	r3, r2, r3
 800a826:	b2da      	uxtb	r2, r3
 800a828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82a:	701a      	strb	r2, [r3, #0]
      i++;
 800a82c:	6a3b      	ldr	r3, [r7, #32]
 800a82e:	3301      	adds	r3, #1
 800a830:	623b      	str	r3, [r7, #32]
      pDest++;
 800a832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a834:	3301      	adds	r3, #1
 800a836:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a838:	8bfb      	ldrh	r3, [r7, #30]
 800a83a:	3b01      	subs	r3, #1
 800a83c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a83e:	8bfb      	ldrh	r3, [r7, #30]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1ea      	bne.n	800a81a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a846:	4618      	mov	r0, r3
 800a848:	372c      	adds	r7, #44	; 0x2c
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr

0800a852 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a852:	b480      	push	{r7}
 800a854:	b085      	sub	sp, #20
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	785b      	ldrb	r3, [r3, #1]
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d12c      	bne.n	800a8c8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	015a      	lsls	r2, r3, #5
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	4413      	add	r3, r2
 800a876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	db12      	blt.n	800a8a6 <USB_EPSetStall+0x54>
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00f      	beq.n	800a8a6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	015a      	lsls	r2, r3, #5
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	4413      	add	r3, r2
 800a88e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	68ba      	ldr	r2, [r7, #8]
 800a896:	0151      	lsls	r1, r2, #5
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	440a      	add	r2, r1
 800a89c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a8a4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	015a      	lsls	r2, r3, #5
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68ba      	ldr	r2, [r7, #8]
 800a8b6:	0151      	lsls	r1, r2, #5
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	440a      	add	r2, r1
 800a8bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a8c4:	6013      	str	r3, [r2, #0]
 800a8c6:	e02b      	b.n	800a920 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	015a      	lsls	r2, r3, #5
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	db12      	blt.n	800a900 <USB_EPSetStall+0xae>
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00f      	beq.n	800a900 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	015a      	lsls	r2, r3, #5
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68ba      	ldr	r2, [r7, #8]
 800a8f0:	0151      	lsls	r1, r2, #5
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	440a      	add	r2, r1
 800a8f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a8fe:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	015a      	lsls	r2, r3, #5
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	4413      	add	r3, r2
 800a908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68ba      	ldr	r2, [r7, #8]
 800a910:	0151      	lsls	r1, r2, #5
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	440a      	add	r2, r1
 800a916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a91a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a91e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a92e:	b480      	push	{r7}
 800a930:	b085      	sub	sp, #20
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	785b      	ldrb	r3, [r3, #1]
 800a946:	2b01      	cmp	r3, #1
 800a948:	d128      	bne.n	800a99c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	015a      	lsls	r2, r3, #5
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	4413      	add	r3, r2
 800a952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68ba      	ldr	r2, [r7, #8]
 800a95a:	0151      	lsls	r1, r2, #5
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	440a      	add	r2, r1
 800a960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a964:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a968:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	78db      	ldrb	r3, [r3, #3]
 800a96e:	2b03      	cmp	r3, #3
 800a970:	d003      	beq.n	800a97a <USB_EPClearStall+0x4c>
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	78db      	ldrb	r3, [r3, #3]
 800a976:	2b02      	cmp	r3, #2
 800a978:	d138      	bne.n	800a9ec <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	015a      	lsls	r2, r3, #5
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	4413      	add	r3, r2
 800a982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68ba      	ldr	r2, [r7, #8]
 800a98a:	0151      	lsls	r1, r2, #5
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	440a      	add	r2, r1
 800a990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a998:	6013      	str	r3, [r2, #0]
 800a99a:	e027      	b.n	800a9ec <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	015a      	lsls	r2, r3, #5
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	0151      	lsls	r1, r2, #5
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	440a      	add	r2, r1
 800a9b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a9ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	78db      	ldrb	r3, [r3, #3]
 800a9c0:	2b03      	cmp	r3, #3
 800a9c2:	d003      	beq.n	800a9cc <USB_EPClearStall+0x9e>
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	78db      	ldrb	r3, [r3, #3]
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d10f      	bne.n	800a9ec <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	015a      	lsls	r2, r3, #5
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	0151      	lsls	r1, r2, #5
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	440a      	add	r2, r1
 800a9e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9ea:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3714      	adds	r7, #20
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr

0800a9fa <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a9fa:	b480      	push	{r7}
 800a9fc:	b085      	sub	sp, #20
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
 800aa02:	460b      	mov	r3, r1
 800aa04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa18:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800aa1c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	78fb      	ldrb	r3, [r7, #3]
 800aa28:	011b      	lsls	r3, r3, #4
 800aa2a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800aa2e:	68f9      	ldr	r1, [r7, #12]
 800aa30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa34:	4313      	orrs	r3, r2
 800aa36:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3714      	adds	r7, #20
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aa46:	b480      	push	{r7}
 800aa48:	b085      	sub	sp, #20
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68fa      	ldr	r2, [r7, #12]
 800aa5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa60:	f023 0303 	bic.w	r3, r3, #3
 800aa64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa74:	f023 0302 	bic.w	r3, r3, #2
 800aa78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aaa2:	f023 0303 	bic.w	r3, r3, #3
 800aaa6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aab6:	f043 0302 	orr.w	r3, r3, #2
 800aaba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr

0800aaca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800aaca:	b480      	push	{r7}
 800aacc:	b085      	sub	sp, #20
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	695b      	ldr	r3, [r3, #20]
 800aad6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	699b      	ldr	r3, [r3, #24]
 800aadc:	68fa      	ldr	r2, [r7, #12]
 800aade:	4013      	ands	r3, r2
 800aae0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aae2:	68fb      	ldr	r3, [r7, #12]
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab02:	699b      	ldr	r3, [r3, #24]
 800ab04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab0c:	69db      	ldr	r3, [r3, #28]
 800ab0e:	68ba      	ldr	r2, [r7, #8]
 800ab10:	4013      	ands	r3, r2
 800ab12:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	0c1b      	lsrs	r3, r3, #16
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3714      	adds	r7, #20
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b085      	sub	sp, #20
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab36:	699b      	ldr	r3, [r3, #24]
 800ab38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab40:	69db      	ldr	r3, [r3, #28]
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	4013      	ands	r3, r2
 800ab46:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	b29b      	uxth	r3, r3
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3714      	adds	r7, #20
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	460b      	mov	r3, r1
 800ab62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ab68:	78fb      	ldrb	r3, [r7, #3]
 800ab6a:	015a      	lsls	r2, r3, #5
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	4413      	add	r3, r2
 800ab70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab7e:	695b      	ldr	r3, [r3, #20]
 800ab80:	68ba      	ldr	r2, [r7, #8]
 800ab82:	4013      	ands	r3, r2
 800ab84:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ab86:	68bb      	ldr	r3, [r7, #8]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3714      	adds	r7, #20
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b087      	sub	sp, #28
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abb6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800abb8:	78fb      	ldrb	r3, [r7, #3]
 800abba:	f003 030f 	and.w	r3, r3, #15
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	fa22 f303 	lsr.w	r3, r2, r3
 800abc4:	01db      	lsls	r3, r3, #7
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	4313      	orrs	r3, r2
 800abcc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800abce:	78fb      	ldrb	r3, [r7, #3]
 800abd0:	015a      	lsls	r2, r3, #5
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	4413      	add	r3, r2
 800abd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	693a      	ldr	r2, [r7, #16]
 800abde:	4013      	ands	r3, r2
 800abe0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800abe2:	68bb      	ldr	r3, [r7, #8]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	371c      	adds	r7, #28
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	695b      	ldr	r3, [r3, #20]
 800abfc:	f003 0301 	and.w	r3, r3, #1
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac26:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ac2a:	f023 0307 	bic.w	r3, r3, #7
 800ac2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3714      	adds	r7, #20
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr
	...

0800ac54 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b087      	sub	sp, #28
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	607a      	str	r2, [r7, #4]
 800ac60:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	333c      	adds	r3, #60	; 0x3c
 800ac6a:	3304      	adds	r3, #4
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	4a26      	ldr	r2, [pc, #152]	; (800ad0c <USB_EP0_OutStart+0xb8>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d90a      	bls.n	800ac8e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac88:	d101      	bne.n	800ac8e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	e037      	b.n	800acfe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac94:	461a      	mov	r2, r3
 800ac96:	2300      	movs	r3, #0
 800ac98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	697a      	ldr	r2, [r7, #20]
 800aca4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aca8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800acac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acb4:	691b      	ldr	r3, [r3, #16]
 800acb6:	697a      	ldr	r2, [r7, #20]
 800acb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acbc:	f043 0318 	orr.w	r3, r3, #24
 800acc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	697a      	ldr	r2, [r7, #20]
 800accc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acd0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800acd4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800acd6:	7afb      	ldrb	r3, [r7, #11]
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d10f      	bne.n	800acfc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ace2:	461a      	mov	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	697a      	ldr	r2, [r7, #20]
 800acf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acf6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800acfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800acfc:	2300      	movs	r3, #0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	371c      	adds	r7, #28
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	4f54300a 	.word	0x4f54300a

0800ad10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	60fb      	str	r3, [r7, #12]
 800ad22:	4a13      	ldr	r2, [pc, #76]	; (800ad70 <USB_CoreReset+0x60>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d901      	bls.n	800ad2c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800ad28:	2303      	movs	r3, #3
 800ad2a:	e01a      	b.n	800ad62 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	691b      	ldr	r3, [r3, #16]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	daf3      	bge.n	800ad1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ad34:	2300      	movs	r3, #0
 800ad36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	f043 0201 	orr.w	r2, r3, #1
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	3301      	adds	r3, #1
 800ad48:	60fb      	str	r3, [r7, #12]
 800ad4a:	4a09      	ldr	r2, [pc, #36]	; (800ad70 <USB_CoreReset+0x60>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d901      	bls.n	800ad54 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800ad50:	2303      	movs	r3, #3
 800ad52:	e006      	b.n	800ad62 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	f003 0301 	and.w	r3, r3, #1
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d0f1      	beq.n	800ad44 <USB_CoreReset+0x34>

  return HAL_OK;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3714      	adds	r7, #20
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	00030d40 	.word	0x00030d40

0800ad74 <getMAC>:
uint8_t IP_ADDRESS[4];
uint8_t NETMASK_ADDRESS[4];
uint8_t GATEWAY_ADDRESS[4];

/* USER CODE BEGIN 2 */
uint8_t getMAC(int n){
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
	/* get MAC hardware address */
	return gnetif.hwaddr[n];
 800ad7c:	4a05      	ldr	r2, [pc, #20]	; (800ad94 <getMAC+0x20>)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4413      	add	r3, r2
 800ad82:	3322      	adds	r3, #34	; 0x22
 800ad84:	781b      	ldrb	r3, [r3, #0]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	370c      	adds	r7, #12
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	20005050 	.word	0x20005050

0800ad98 <setIP>:

const ip4_addr_t* getIPAddr(){
	return netif_ip4_addr(&gnetif);
}

void setIP(u32_t addr){
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
	ip4_addr_t temp;
	temp.addr = addr;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	60fb      	str	r3, [r7, #12]
	netif_set_ipaddr(&gnetif,&temp);
 800ada4:	f107 030c 	add.w	r3, r7, #12
 800ada8:	4619      	mov	r1, r3
 800adaa:	4803      	ldr	r0, [pc, #12]	; (800adb8 <setIP+0x20>)
 800adac:	f008 fefc 	bl	8013ba8 <netif_set_ipaddr>
}
 800adb0:	bf00      	nop
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	20005050 	.word	0x20005050

0800adbc <setNetmask>:
	ip4_addr_t temp;
	temp.addr = addr;
	netif_set_gw(&gnetif,&temp);
}

void setNetmask(u32_t addr){
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
	ip4_addr_t temp;
	temp.addr = addr;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	60fb      	str	r3, [r7, #12]
	netif_set_netmask(&gnetif,&temp);
 800adc8:	f107 030c 	add.w	r3, r7, #12
 800adcc:	4619      	mov	r1, r3
 800adce:	4803      	ldr	r0, [pc, #12]	; (800addc <setNetmask+0x20>)
 800add0:	f008 ff32 	bl	8013c38 <netif_set_netmask>
}
 800add4:	bf00      	nop
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	20005050 	.word	0x20005050

0800ade0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800ade6:	4b8c      	ldr	r3, [pc, #560]	; (800b018 <MX_LWIP_Init+0x238>)
 800ade8:	22c0      	movs	r2, #192	; 0xc0
 800adea:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800adec:	4b8a      	ldr	r3, [pc, #552]	; (800b018 <MX_LWIP_Init+0x238>)
 800adee:	22a8      	movs	r2, #168	; 0xa8
 800adf0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800adf2:	4b89      	ldr	r3, [pc, #548]	; (800b018 <MX_LWIP_Init+0x238>)
 800adf4:	2200      	movs	r2, #0
 800adf6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 68;
 800adf8:	4b87      	ldr	r3, [pc, #540]	; (800b018 <MX_LWIP_Init+0x238>)
 800adfa:	2244      	movs	r2, #68	; 0x44
 800adfc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800adfe:	4b87      	ldr	r3, [pc, #540]	; (800b01c <MX_LWIP_Init+0x23c>)
 800ae00:	22ff      	movs	r2, #255	; 0xff
 800ae02:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800ae04:	4b85      	ldr	r3, [pc, #532]	; (800b01c <MX_LWIP_Init+0x23c>)
 800ae06:	22ff      	movs	r2, #255	; 0xff
 800ae08:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800ae0a:	4b84      	ldr	r3, [pc, #528]	; (800b01c <MX_LWIP_Init+0x23c>)
 800ae0c:	22ff      	movs	r2, #255	; 0xff
 800ae0e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800ae10:	4b82      	ldr	r3, [pc, #520]	; (800b01c <MX_LWIP_Init+0x23c>)
 800ae12:	2200      	movs	r2, #0
 800ae14:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800ae16:	4b82      	ldr	r3, [pc, #520]	; (800b020 <MX_LWIP_Init+0x240>)
 800ae18:	22c0      	movs	r2, #192	; 0xc0
 800ae1a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800ae1c:	4b80      	ldr	r3, [pc, #512]	; (800b020 <MX_LWIP_Init+0x240>)
 800ae1e:	22a8      	movs	r2, #168	; 0xa8
 800ae20:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800ae22:	4b7f      	ldr	r3, [pc, #508]	; (800b020 <MX_LWIP_Init+0x240>)
 800ae24:	2200      	movs	r2, #0
 800ae26:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800ae28:	4b7d      	ldr	r3, [pc, #500]	; (800b020 <MX_LWIP_Init+0x240>)
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800ae2e:	2100      	movs	r1, #0
 800ae30:	2000      	movs	r0, #0
 800ae32:	f006 fff9 	bl	8011e28 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800ae36:	4b78      	ldr	r3, [pc, #480]	; (800b018 <MX_LWIP_Init+0x238>)
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	061a      	lsls	r2, r3, #24
 800ae3c:	4b76      	ldr	r3, [pc, #472]	; (800b018 <MX_LWIP_Init+0x238>)
 800ae3e:	785b      	ldrb	r3, [r3, #1]
 800ae40:	041b      	lsls	r3, r3, #16
 800ae42:	431a      	orrs	r2, r3
 800ae44:	4b74      	ldr	r3, [pc, #464]	; (800b018 <MX_LWIP_Init+0x238>)
 800ae46:	789b      	ldrb	r3, [r3, #2]
 800ae48:	021b      	lsls	r3, r3, #8
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	4a72      	ldr	r2, [pc, #456]	; (800b018 <MX_LWIP_Init+0x238>)
 800ae4e:	78d2      	ldrb	r2, [r2, #3]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	061a      	lsls	r2, r3, #24
 800ae54:	4b70      	ldr	r3, [pc, #448]	; (800b018 <MX_LWIP_Init+0x238>)
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	0619      	lsls	r1, r3, #24
 800ae5a:	4b6f      	ldr	r3, [pc, #444]	; (800b018 <MX_LWIP_Init+0x238>)
 800ae5c:	785b      	ldrb	r3, [r3, #1]
 800ae5e:	041b      	lsls	r3, r3, #16
 800ae60:	4319      	orrs	r1, r3
 800ae62:	4b6d      	ldr	r3, [pc, #436]	; (800b018 <MX_LWIP_Init+0x238>)
 800ae64:	789b      	ldrb	r3, [r3, #2]
 800ae66:	021b      	lsls	r3, r3, #8
 800ae68:	430b      	orrs	r3, r1
 800ae6a:	496b      	ldr	r1, [pc, #428]	; (800b018 <MX_LWIP_Init+0x238>)
 800ae6c:	78c9      	ldrb	r1, [r1, #3]
 800ae6e:	430b      	orrs	r3, r1
 800ae70:	021b      	lsls	r3, r3, #8
 800ae72:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae76:	431a      	orrs	r2, r3
 800ae78:	4b67      	ldr	r3, [pc, #412]	; (800b018 <MX_LWIP_Init+0x238>)
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	0619      	lsls	r1, r3, #24
 800ae7e:	4b66      	ldr	r3, [pc, #408]	; (800b018 <MX_LWIP_Init+0x238>)
 800ae80:	785b      	ldrb	r3, [r3, #1]
 800ae82:	041b      	lsls	r3, r3, #16
 800ae84:	4319      	orrs	r1, r3
 800ae86:	4b64      	ldr	r3, [pc, #400]	; (800b018 <MX_LWIP_Init+0x238>)
 800ae88:	789b      	ldrb	r3, [r3, #2]
 800ae8a:	021b      	lsls	r3, r3, #8
 800ae8c:	430b      	orrs	r3, r1
 800ae8e:	4962      	ldr	r1, [pc, #392]	; (800b018 <MX_LWIP_Init+0x238>)
 800ae90:	78c9      	ldrb	r1, [r1, #3]
 800ae92:	430b      	orrs	r3, r1
 800ae94:	0a1b      	lsrs	r3, r3, #8
 800ae96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ae9a:	431a      	orrs	r2, r3
 800ae9c:	4b5e      	ldr	r3, [pc, #376]	; (800b018 <MX_LWIP_Init+0x238>)
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	0619      	lsls	r1, r3, #24
 800aea2:	4b5d      	ldr	r3, [pc, #372]	; (800b018 <MX_LWIP_Init+0x238>)
 800aea4:	785b      	ldrb	r3, [r3, #1]
 800aea6:	041b      	lsls	r3, r3, #16
 800aea8:	4319      	orrs	r1, r3
 800aeaa:	4b5b      	ldr	r3, [pc, #364]	; (800b018 <MX_LWIP_Init+0x238>)
 800aeac:	789b      	ldrb	r3, [r3, #2]
 800aeae:	021b      	lsls	r3, r3, #8
 800aeb0:	430b      	orrs	r3, r1
 800aeb2:	4959      	ldr	r1, [pc, #356]	; (800b018 <MX_LWIP_Init+0x238>)
 800aeb4:	78c9      	ldrb	r1, [r1, #3]
 800aeb6:	430b      	orrs	r3, r1
 800aeb8:	0e1b      	lsrs	r3, r3, #24
 800aeba:	4313      	orrs	r3, r2
 800aebc:	4a59      	ldr	r2, [pc, #356]	; (800b024 <MX_LWIP_Init+0x244>)
 800aebe:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800aec0:	4b56      	ldr	r3, [pc, #344]	; (800b01c <MX_LWIP_Init+0x23c>)
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	061a      	lsls	r2, r3, #24
 800aec6:	4b55      	ldr	r3, [pc, #340]	; (800b01c <MX_LWIP_Init+0x23c>)
 800aec8:	785b      	ldrb	r3, [r3, #1]
 800aeca:	041b      	lsls	r3, r3, #16
 800aecc:	431a      	orrs	r2, r3
 800aece:	4b53      	ldr	r3, [pc, #332]	; (800b01c <MX_LWIP_Init+0x23c>)
 800aed0:	789b      	ldrb	r3, [r3, #2]
 800aed2:	021b      	lsls	r3, r3, #8
 800aed4:	4313      	orrs	r3, r2
 800aed6:	4a51      	ldr	r2, [pc, #324]	; (800b01c <MX_LWIP_Init+0x23c>)
 800aed8:	78d2      	ldrb	r2, [r2, #3]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	061a      	lsls	r2, r3, #24
 800aede:	4b4f      	ldr	r3, [pc, #316]	; (800b01c <MX_LWIP_Init+0x23c>)
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	0619      	lsls	r1, r3, #24
 800aee4:	4b4d      	ldr	r3, [pc, #308]	; (800b01c <MX_LWIP_Init+0x23c>)
 800aee6:	785b      	ldrb	r3, [r3, #1]
 800aee8:	041b      	lsls	r3, r3, #16
 800aeea:	4319      	orrs	r1, r3
 800aeec:	4b4b      	ldr	r3, [pc, #300]	; (800b01c <MX_LWIP_Init+0x23c>)
 800aeee:	789b      	ldrb	r3, [r3, #2]
 800aef0:	021b      	lsls	r3, r3, #8
 800aef2:	430b      	orrs	r3, r1
 800aef4:	4949      	ldr	r1, [pc, #292]	; (800b01c <MX_LWIP_Init+0x23c>)
 800aef6:	78c9      	ldrb	r1, [r1, #3]
 800aef8:	430b      	orrs	r3, r1
 800aefa:	021b      	lsls	r3, r3, #8
 800aefc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800af00:	431a      	orrs	r2, r3
 800af02:	4b46      	ldr	r3, [pc, #280]	; (800b01c <MX_LWIP_Init+0x23c>)
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	0619      	lsls	r1, r3, #24
 800af08:	4b44      	ldr	r3, [pc, #272]	; (800b01c <MX_LWIP_Init+0x23c>)
 800af0a:	785b      	ldrb	r3, [r3, #1]
 800af0c:	041b      	lsls	r3, r3, #16
 800af0e:	4319      	orrs	r1, r3
 800af10:	4b42      	ldr	r3, [pc, #264]	; (800b01c <MX_LWIP_Init+0x23c>)
 800af12:	789b      	ldrb	r3, [r3, #2]
 800af14:	021b      	lsls	r3, r3, #8
 800af16:	430b      	orrs	r3, r1
 800af18:	4940      	ldr	r1, [pc, #256]	; (800b01c <MX_LWIP_Init+0x23c>)
 800af1a:	78c9      	ldrb	r1, [r1, #3]
 800af1c:	430b      	orrs	r3, r1
 800af1e:	0a1b      	lsrs	r3, r3, #8
 800af20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800af24:	431a      	orrs	r2, r3
 800af26:	4b3d      	ldr	r3, [pc, #244]	; (800b01c <MX_LWIP_Init+0x23c>)
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	0619      	lsls	r1, r3, #24
 800af2c:	4b3b      	ldr	r3, [pc, #236]	; (800b01c <MX_LWIP_Init+0x23c>)
 800af2e:	785b      	ldrb	r3, [r3, #1]
 800af30:	041b      	lsls	r3, r3, #16
 800af32:	4319      	orrs	r1, r3
 800af34:	4b39      	ldr	r3, [pc, #228]	; (800b01c <MX_LWIP_Init+0x23c>)
 800af36:	789b      	ldrb	r3, [r3, #2]
 800af38:	021b      	lsls	r3, r3, #8
 800af3a:	430b      	orrs	r3, r1
 800af3c:	4937      	ldr	r1, [pc, #220]	; (800b01c <MX_LWIP_Init+0x23c>)
 800af3e:	78c9      	ldrb	r1, [r1, #3]
 800af40:	430b      	orrs	r3, r1
 800af42:	0e1b      	lsrs	r3, r3, #24
 800af44:	4313      	orrs	r3, r2
 800af46:	4a38      	ldr	r2, [pc, #224]	; (800b028 <MX_LWIP_Init+0x248>)
 800af48:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800af4a:	4b35      	ldr	r3, [pc, #212]	; (800b020 <MX_LWIP_Init+0x240>)
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	061a      	lsls	r2, r3, #24
 800af50:	4b33      	ldr	r3, [pc, #204]	; (800b020 <MX_LWIP_Init+0x240>)
 800af52:	785b      	ldrb	r3, [r3, #1]
 800af54:	041b      	lsls	r3, r3, #16
 800af56:	431a      	orrs	r2, r3
 800af58:	4b31      	ldr	r3, [pc, #196]	; (800b020 <MX_LWIP_Init+0x240>)
 800af5a:	789b      	ldrb	r3, [r3, #2]
 800af5c:	021b      	lsls	r3, r3, #8
 800af5e:	4313      	orrs	r3, r2
 800af60:	4a2f      	ldr	r2, [pc, #188]	; (800b020 <MX_LWIP_Init+0x240>)
 800af62:	78d2      	ldrb	r2, [r2, #3]
 800af64:	4313      	orrs	r3, r2
 800af66:	061a      	lsls	r2, r3, #24
 800af68:	4b2d      	ldr	r3, [pc, #180]	; (800b020 <MX_LWIP_Init+0x240>)
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	0619      	lsls	r1, r3, #24
 800af6e:	4b2c      	ldr	r3, [pc, #176]	; (800b020 <MX_LWIP_Init+0x240>)
 800af70:	785b      	ldrb	r3, [r3, #1]
 800af72:	041b      	lsls	r3, r3, #16
 800af74:	4319      	orrs	r1, r3
 800af76:	4b2a      	ldr	r3, [pc, #168]	; (800b020 <MX_LWIP_Init+0x240>)
 800af78:	789b      	ldrb	r3, [r3, #2]
 800af7a:	021b      	lsls	r3, r3, #8
 800af7c:	430b      	orrs	r3, r1
 800af7e:	4928      	ldr	r1, [pc, #160]	; (800b020 <MX_LWIP_Init+0x240>)
 800af80:	78c9      	ldrb	r1, [r1, #3]
 800af82:	430b      	orrs	r3, r1
 800af84:	021b      	lsls	r3, r3, #8
 800af86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800af8a:	431a      	orrs	r2, r3
 800af8c:	4b24      	ldr	r3, [pc, #144]	; (800b020 <MX_LWIP_Init+0x240>)
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	0619      	lsls	r1, r3, #24
 800af92:	4b23      	ldr	r3, [pc, #140]	; (800b020 <MX_LWIP_Init+0x240>)
 800af94:	785b      	ldrb	r3, [r3, #1]
 800af96:	041b      	lsls	r3, r3, #16
 800af98:	4319      	orrs	r1, r3
 800af9a:	4b21      	ldr	r3, [pc, #132]	; (800b020 <MX_LWIP_Init+0x240>)
 800af9c:	789b      	ldrb	r3, [r3, #2]
 800af9e:	021b      	lsls	r3, r3, #8
 800afa0:	430b      	orrs	r3, r1
 800afa2:	491f      	ldr	r1, [pc, #124]	; (800b020 <MX_LWIP_Init+0x240>)
 800afa4:	78c9      	ldrb	r1, [r1, #3]
 800afa6:	430b      	orrs	r3, r1
 800afa8:	0a1b      	lsrs	r3, r3, #8
 800afaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800afae:	431a      	orrs	r2, r3
 800afb0:	4b1b      	ldr	r3, [pc, #108]	; (800b020 <MX_LWIP_Init+0x240>)
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	0619      	lsls	r1, r3, #24
 800afb6:	4b1a      	ldr	r3, [pc, #104]	; (800b020 <MX_LWIP_Init+0x240>)
 800afb8:	785b      	ldrb	r3, [r3, #1]
 800afba:	041b      	lsls	r3, r3, #16
 800afbc:	4319      	orrs	r1, r3
 800afbe:	4b18      	ldr	r3, [pc, #96]	; (800b020 <MX_LWIP_Init+0x240>)
 800afc0:	789b      	ldrb	r3, [r3, #2]
 800afc2:	021b      	lsls	r3, r3, #8
 800afc4:	430b      	orrs	r3, r1
 800afc6:	4916      	ldr	r1, [pc, #88]	; (800b020 <MX_LWIP_Init+0x240>)
 800afc8:	78c9      	ldrb	r1, [r1, #3]
 800afca:	430b      	orrs	r3, r1
 800afcc:	0e1b      	lsrs	r3, r3, #24
 800afce:	4313      	orrs	r3, r2
 800afd0:	4a16      	ldr	r2, [pc, #88]	; (800b02c <MX_LWIP_Init+0x24c>)
 800afd2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800afd4:	4b16      	ldr	r3, [pc, #88]	; (800b030 <MX_LWIP_Init+0x250>)
 800afd6:	9302      	str	r3, [sp, #8]
 800afd8:	4b16      	ldr	r3, [pc, #88]	; (800b034 <MX_LWIP_Init+0x254>)
 800afda:	9301      	str	r3, [sp, #4]
 800afdc:	2300      	movs	r3, #0
 800afde:	9300      	str	r3, [sp, #0]
 800afe0:	4b12      	ldr	r3, [pc, #72]	; (800b02c <MX_LWIP_Init+0x24c>)
 800afe2:	4a11      	ldr	r2, [pc, #68]	; (800b028 <MX_LWIP_Init+0x248>)
 800afe4:	490f      	ldr	r1, [pc, #60]	; (800b024 <MX_LWIP_Init+0x244>)
 800afe6:	4814      	ldr	r0, [pc, #80]	; (800b038 <MX_LWIP_Init+0x258>)
 800afe8:	f008 fcb6 	bl	8013958 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800afec:	4812      	ldr	r0, [pc, #72]	; (800b038 <MX_LWIP_Init+0x258>)
 800afee:	f008 feb5 	bl	8013d5c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800aff2:	4b11      	ldr	r3, [pc, #68]	; (800b038 <MX_LWIP_Init+0x258>)
 800aff4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800aff8:	089b      	lsrs	r3, r3, #2
 800affa:	f003 0301 	and.w	r3, r3, #1
 800affe:	b2db      	uxtb	r3, r3
 800b000:	2b00      	cmp	r3, #0
 800b002:	d003      	beq.n	800b00c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800b004:	480c      	ldr	r0, [pc, #48]	; (800b038 <MX_LWIP_Init+0x258>)
 800b006:	f008 feb9 	bl	8013d7c <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b00a:	e002      	b.n	800b012 <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 800b00c:	480a      	ldr	r0, [pc, #40]	; (800b038 <MX_LWIP_Init+0x258>)
 800b00e:	f008 ff21 	bl	8013e54 <netif_set_down>
}
 800b012:	bf00      	nop
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}
 800b018:	20005088 	.word	0x20005088
 800b01c:	20005084 	.word	0x20005084
 800b020:	2000504c 	.word	0x2000504c
 800b024:	20005080 	.word	0x20005080
 800b028:	2000508c 	.word	0x2000508c
 800b02c:	20005090 	.word	0x20005090
 800b030:	08011d39 	.word	0x08011d39
 800b034:	0800b66d 	.word	0x0800b66d
 800b038:	20005050 	.word	0x20005050

0800b03c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b08e      	sub	sp, #56	; 0x38
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b048:	2200      	movs	r2, #0
 800b04a:	601a      	str	r2, [r3, #0]
 800b04c:	605a      	str	r2, [r3, #4]
 800b04e:	609a      	str	r2, [r3, #8]
 800b050:	60da      	str	r2, [r3, #12]
 800b052:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a4a      	ldr	r2, [pc, #296]	; (800b184 <HAL_ETH_MspInit+0x148>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	f040 808d 	bne.w	800b17a <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b060:	2300      	movs	r3, #0
 800b062:	623b      	str	r3, [r7, #32]
 800b064:	4b48      	ldr	r3, [pc, #288]	; (800b188 <HAL_ETH_MspInit+0x14c>)
 800b066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b068:	4a47      	ldr	r2, [pc, #284]	; (800b188 <HAL_ETH_MspInit+0x14c>)
 800b06a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b06e:	6313      	str	r3, [r2, #48]	; 0x30
 800b070:	4b45      	ldr	r3, [pc, #276]	; (800b188 <HAL_ETH_MspInit+0x14c>)
 800b072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b078:	623b      	str	r3, [r7, #32]
 800b07a:	6a3b      	ldr	r3, [r7, #32]
 800b07c:	2300      	movs	r3, #0
 800b07e:	61fb      	str	r3, [r7, #28]
 800b080:	4b41      	ldr	r3, [pc, #260]	; (800b188 <HAL_ETH_MspInit+0x14c>)
 800b082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b084:	4a40      	ldr	r2, [pc, #256]	; (800b188 <HAL_ETH_MspInit+0x14c>)
 800b086:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b08a:	6313      	str	r3, [r2, #48]	; 0x30
 800b08c:	4b3e      	ldr	r3, [pc, #248]	; (800b188 <HAL_ETH_MspInit+0x14c>)
 800b08e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b090:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b094:	61fb      	str	r3, [r7, #28]
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	2300      	movs	r3, #0
 800b09a:	61bb      	str	r3, [r7, #24]
 800b09c:	4b3a      	ldr	r3, [pc, #232]	; (800b188 <HAL_ETH_MspInit+0x14c>)
 800b09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a0:	4a39      	ldr	r2, [pc, #228]	; (800b188 <HAL_ETH_MspInit+0x14c>)
 800b0a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b0a6:	6313      	str	r3, [r2, #48]	; 0x30
 800b0a8:	4b37      	ldr	r3, [pc, #220]	; (800b188 <HAL_ETH_MspInit+0x14c>)
 800b0aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0b0:	61bb      	str	r3, [r7, #24]
 800b0b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	617b      	str	r3, [r7, #20]
 800b0b8:	4b33      	ldr	r3, [pc, #204]	; (800b188 <HAL_ETH_MspInit+0x14c>)
 800b0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0bc:	4a32      	ldr	r2, [pc, #200]	; (800b188 <HAL_ETH_MspInit+0x14c>)
 800b0be:	f043 0304 	orr.w	r3, r3, #4
 800b0c2:	6313      	str	r3, [r2, #48]	; 0x30
 800b0c4:	4b30      	ldr	r3, [pc, #192]	; (800b188 <HAL_ETH_MspInit+0x14c>)
 800b0c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c8:	f003 0304 	and.w	r3, r3, #4
 800b0cc:	617b      	str	r3, [r7, #20]
 800b0ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	613b      	str	r3, [r7, #16]
 800b0d4:	4b2c      	ldr	r3, [pc, #176]	; (800b188 <HAL_ETH_MspInit+0x14c>)
 800b0d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d8:	4a2b      	ldr	r2, [pc, #172]	; (800b188 <HAL_ETH_MspInit+0x14c>)
 800b0da:	f043 0301 	orr.w	r3, r3, #1
 800b0de:	6313      	str	r3, [r2, #48]	; 0x30
 800b0e0:	4b29      	ldr	r3, [pc, #164]	; (800b188 <HAL_ETH_MspInit+0x14c>)
 800b0e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0e4:	f003 0301 	and.w	r3, r3, #1
 800b0e8:	613b      	str	r3, [r7, #16]
 800b0ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	60fb      	str	r3, [r7, #12]
 800b0f0:	4b25      	ldr	r3, [pc, #148]	; (800b188 <HAL_ETH_MspInit+0x14c>)
 800b0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f4:	4a24      	ldr	r2, [pc, #144]	; (800b188 <HAL_ETH_MspInit+0x14c>)
 800b0f6:	f043 0302 	orr.w	r3, r3, #2
 800b0fa:	6313      	str	r3, [r2, #48]	; 0x30
 800b0fc:	4b22      	ldr	r3, [pc, #136]	; (800b188 <HAL_ETH_MspInit+0x14c>)
 800b0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b100:	f003 0302 	and.w	r3, r3, #2
 800b104:	60fb      	str	r3, [r7, #12]
 800b106:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800b108:	2332      	movs	r3, #50	; 0x32
 800b10a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b10c:	2302      	movs	r3, #2
 800b10e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b110:	2300      	movs	r3, #0
 800b112:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b114:	2303      	movs	r3, #3
 800b116:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b118:	230b      	movs	r3, #11
 800b11a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b11c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b120:	4619      	mov	r1, r3
 800b122:	481a      	ldr	r0, [pc, #104]	; (800b18c <HAL_ETH_MspInit+0x150>)
 800b124:	f7fa f9d8 	bl	80054d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800b128:	2386      	movs	r3, #134	; 0x86
 800b12a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b12c:	2302      	movs	r3, #2
 800b12e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b130:	2300      	movs	r3, #0
 800b132:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b134:	2303      	movs	r3, #3
 800b136:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b138:	230b      	movs	r3, #11
 800b13a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b13c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b140:	4619      	mov	r1, r3
 800b142:	4813      	ldr	r0, [pc, #76]	; (800b190 <HAL_ETH_MspInit+0x154>)
 800b144:	f7fa f9c8 	bl	80054d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800b148:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b14c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b14e:	2302      	movs	r3, #2
 800b150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b152:	2300      	movs	r3, #0
 800b154:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b156:	2303      	movs	r3, #3
 800b158:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b15a:	230b      	movs	r3, #11
 800b15c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b15e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b162:	4619      	mov	r1, r3
 800b164:	480b      	ldr	r0, [pc, #44]	; (800b194 <HAL_ETH_MspInit+0x158>)
 800b166:	f7fa f9b7 	bl	80054d8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b16a:	2200      	movs	r2, #0
 800b16c:	2105      	movs	r1, #5
 800b16e:	203d      	movs	r0, #61	; 0x3d
 800b170:	f7f8 fe0c 	bl	8003d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b174:	203d      	movs	r0, #61	; 0x3d
 800b176:	f7f8 fe25 	bl	8003dc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b17a:	bf00      	nop
 800b17c:	3738      	adds	r7, #56	; 0x38
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	40028000 	.word	0x40028000
 800b188:	40023800 	.word	0x40023800
 800b18c:	40020800 	.word	0x40020800
 800b190:	40020000 	.word	0x40020000
 800b194:	40020400 	.word	0x40020400

0800b198 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800b1a0:	4b04      	ldr	r3, [pc, #16]	; (800b1b4 <HAL_ETH_RxCpltCallback+0x1c>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f002 f89d 	bl	800d2e4 <osSemaphoreRelease>
}
 800b1aa:	bf00      	nop
 800b1ac:	3708      	adds	r7, #8
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	20000584 	.word	0x20000584

0800b1b8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b1b8:	b5b0      	push	{r4, r5, r7, lr}
 800b1ba:	b090      	sub	sp, #64	; 0x40
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b1c4:	4b60      	ldr	r3, [pc, #384]	; (800b348 <low_level_init+0x190>)
 800b1c6:	4a61      	ldr	r2, [pc, #388]	; (800b34c <low_level_init+0x194>)
 800b1c8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800b1ca:	4b5f      	ldr	r3, [pc, #380]	; (800b348 <low_level_init+0x190>)
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800b1d0:	4b5d      	ldr	r3, [pc, #372]	; (800b348 <low_level_init+0x190>)
 800b1d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b1d6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800b1d8:	4b5b      	ldr	r3, [pc, #364]	; (800b348 <low_level_init+0x190>)
 800b1da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b1de:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800b1e0:	4b59      	ldr	r3, [pc, #356]	; (800b348 <low_level_init+0x190>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800b1ec:	2380      	movs	r3, #128	; 0x80
 800b1ee:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800b1f2:	23e1      	movs	r3, #225	; 0xe1
 800b1f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800b1fe:	2300      	movs	r3, #0
 800b200:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800b204:	2300      	movs	r3, #0
 800b206:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800b20a:	4a4f      	ldr	r2, [pc, #316]	; (800b348 <low_level_init+0x190>)
 800b20c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b210:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800b212:	4b4d      	ldr	r3, [pc, #308]	; (800b348 <low_level_init+0x190>)
 800b214:	2201      	movs	r2, #1
 800b216:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800b218:	4b4b      	ldr	r3, [pc, #300]	; (800b348 <low_level_init+0x190>)
 800b21a:	2200      	movs	r2, #0
 800b21c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800b21e:	4b4a      	ldr	r3, [pc, #296]	; (800b348 <low_level_init+0x190>)
 800b220:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b224:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b226:	4848      	ldr	r0, [pc, #288]	; (800b348 <low_level_init+0x190>)
 800b228:	f7f8 fe6c 	bl	8003f04 <HAL_ETH_Init>
 800b22c:	4603      	mov	r3, r0
 800b22e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800b232:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b236:	2b00      	cmp	r3, #0
 800b238:	d108      	bne.n	800b24c <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b240:	f043 0304 	orr.w	r3, r3, #4
 800b244:	b2da      	uxtb	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800b24c:	2304      	movs	r3, #4
 800b24e:	4a40      	ldr	r2, [pc, #256]	; (800b350 <low_level_init+0x198>)
 800b250:	4940      	ldr	r1, [pc, #256]	; (800b354 <low_level_init+0x19c>)
 800b252:	483d      	ldr	r0, [pc, #244]	; (800b348 <low_level_init+0x190>)
 800b254:	f7f8 fff2 	bl	800423c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800b258:	2304      	movs	r3, #4
 800b25a:	4a3f      	ldr	r2, [pc, #252]	; (800b358 <low_level_init+0x1a0>)
 800b25c:	493f      	ldr	r1, [pc, #252]	; (800b35c <low_level_init+0x1a4>)
 800b25e:	483a      	ldr	r0, [pc, #232]	; (800b348 <low_level_init+0x190>)
 800b260:	f7f9 f855 	bl	800430e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2206      	movs	r2, #6
 800b268:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b26c:	4b36      	ldr	r3, [pc, #216]	; (800b348 <low_level_init+0x190>)
 800b26e:	695b      	ldr	r3, [r3, #20]
 800b270:	781a      	ldrb	r2, [r3, #0]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b278:	4b33      	ldr	r3, [pc, #204]	; (800b348 <low_level_init+0x190>)
 800b27a:	695b      	ldr	r3, [r3, #20]
 800b27c:	785a      	ldrb	r2, [r3, #1]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b284:	4b30      	ldr	r3, [pc, #192]	; (800b348 <low_level_init+0x190>)
 800b286:	695b      	ldr	r3, [r3, #20]
 800b288:	789a      	ldrb	r2, [r3, #2]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b290:	4b2d      	ldr	r3, [pc, #180]	; (800b348 <low_level_init+0x190>)
 800b292:	695b      	ldr	r3, [r3, #20]
 800b294:	78da      	ldrb	r2, [r3, #3]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b29c:	4b2a      	ldr	r3, [pc, #168]	; (800b348 <low_level_init+0x190>)
 800b29e:	695b      	ldr	r3, [r3, #20]
 800b2a0:	791a      	ldrb	r2, [r3, #4]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b2a8:	4b27      	ldr	r3, [pc, #156]	; (800b348 <low_level_init+0x190>)
 800b2aa:	695b      	ldr	r3, [r3, #20]
 800b2ac:	795a      	ldrb	r2, [r3, #5]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  /* maximum transfer unit */
  netif->mtu = 1500;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b2ba:	841a      	strh	r2, [r3, #32]

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b2c2:	f043 030a 	orr.w	r3, r3, #10
 800b2c6:	b2da      	uxtb	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800b2d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b2da:	2101      	movs	r1, #1
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f001 ff81 	bl	800d1e4 <osSemaphoreCreate>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	4a1e      	ldr	r2, [pc, #120]	; (800b360 <low_level_init+0x1a8>)
 800b2e6:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800b2e8:	4b1e      	ldr	r3, [pc, #120]	; (800b364 <low_level_init+0x1ac>)
 800b2ea:	f107 040c 	add.w	r4, r7, #12
 800b2ee:	461d      	mov	r5, r3
 800b2f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b2f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b2f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800b2fc:	f107 030c 	add.w	r3, r7, #12
 800b300:	6879      	ldr	r1, [r7, #4]
 800b302:	4618      	mov	r0, r3
 800b304:	f001 fe86 	bl	800d014 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800b308:	480f      	ldr	r0, [pc, #60]	; (800b348 <low_level_init+0x190>)
 800b30a:	f7f9 fb28 	bl	800495e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800b30e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b312:	461a      	mov	r2, r3
 800b314:	211d      	movs	r1, #29
 800b316:	480c      	ldr	r0, [pc, #48]	; (800b348 <low_level_init+0x190>)
 800b318:	f7f9 fa53 	bl	80047c2 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800b31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31e:	f043 030b 	orr.w	r3, r3, #11
 800b322:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800b324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b326:	461a      	mov	r2, r3
 800b328:	211d      	movs	r1, #29
 800b32a:	4807      	ldr	r0, [pc, #28]	; (800b348 <low_level_init+0x190>)
 800b32c:	f7f9 fab1 	bl	8004892 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800b330:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b334:	461a      	mov	r2, r3
 800b336:	211d      	movs	r1, #29
 800b338:	4803      	ldr	r0, [pc, #12]	; (800b348 <low_level_init+0x190>)
 800b33a:	f7f9 fa42 	bl	80047c2 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b33e:	bf00      	nop
 800b340:	3740      	adds	r7, #64	; 0x40
 800b342:	46bd      	mov	sp, r7
 800b344:	bdb0      	pop	{r4, r5, r7, pc}
 800b346:	bf00      	nop
 800b348:	20006964 	.word	0x20006964
 800b34c:	40028000 	.word	0x40028000
 800b350:	200069ac 	.word	0x200069ac
 800b354:	20005094 	.word	0x20005094
 800b358:	20005114 	.word	0x20005114
 800b35c:	200068e4 	.word	0x200068e4
 800b360:	20000584 	.word	0x20000584
 800b364:	08022de4 	.word	0x08022de4

0800b368 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b08a      	sub	sp, #40	; 0x28
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800b372:	4b4b      	ldr	r3, [pc, #300]	; (800b4a0 <low_level_output+0x138>)
 800b374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800b37a:	2300      	movs	r3, #0
 800b37c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800b37e:	2300      	movs	r3, #0
 800b380:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800b382:	2300      	movs	r3, #0
 800b384:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800b386:	2300      	movs	r3, #0
 800b388:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800b38a:	4b45      	ldr	r3, [pc, #276]	; (800b4a0 <low_level_output+0x138>)
 800b38c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b38e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800b390:	2300      	movs	r3, #0
 800b392:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	623b      	str	r3, [r7, #32]
 800b398:	e05a      	b.n	800b450 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	da03      	bge.n	800b3aa <low_level_output+0x42>
      {
        errval = ERR_USE;
 800b3a2:	23f8      	movs	r3, #248	; 0xf8
 800b3a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800b3a8:	e05c      	b.n	800b464 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800b3aa:	6a3b      	ldr	r3, [r7, #32]
 800b3ac:	895b      	ldrh	r3, [r3, #10]
 800b3ae:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b3b4:	e02f      	b.n	800b416 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800b3b6:	69fa      	ldr	r2, [r7, #28]
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	18d0      	adds	r0, r2, r3
 800b3bc:	6a3b      	ldr	r3, [r7, #32]
 800b3be:	685a      	ldr	r2, [r3, #4]
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	18d1      	adds	r1, r2, r3
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800b3ca:	3304      	adds	r3, #4
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	f013 fec9 	bl	801f164 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	da03      	bge.n	800b3e8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800b3e0:	23f8      	movs	r3, #248	; 0xf8
 800b3e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800b3e6:	e03d      	b.n	800b464 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800b3ee:	693a      	ldr	r2, [r7, #16]
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800b3f8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800b3fa:	68ba      	ldr	r2, [r7, #8]
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	1ad3      	subs	r3, r2, r3
 800b400:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b404:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800b406:	697a      	ldr	r2, [r7, #20]
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	1ad3      	subs	r3, r2, r3
 800b40c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b410:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800b412:	2300      	movs	r3, #0
 800b414:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	4413      	add	r3, r2
 800b41c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b420:	4293      	cmp	r3, r2
 800b422:	d8c8      	bhi.n	800b3b6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800b424:	69fa      	ldr	r2, [r7, #28]
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	18d0      	adds	r0, r2, r3
 800b42a:	6a3b      	ldr	r3, [r7, #32]
 800b42c:	685a      	ldr	r2, [r3, #4]
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	4413      	add	r3, r2
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	4619      	mov	r1, r3
 800b436:	f013 fe95 	bl	801f164 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800b43a:	693a      	ldr	r2, [r7, #16]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	4413      	add	r3, r2
 800b440:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800b442:	697a      	ldr	r2, [r7, #20]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	4413      	add	r3, r2
 800b448:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800b44a:	6a3b      	ldr	r3, [r7, #32]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	623b      	str	r3, [r7, #32]
 800b450:	6a3b      	ldr	r3, [r7, #32]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1a1      	bne.n	800b39a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800b456:	6979      	ldr	r1, [r7, #20]
 800b458:	4811      	ldr	r0, [pc, #68]	; (800b4a0 <low_level_output+0x138>)
 800b45a:	f7f8 ffc5 	bl	80043e8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800b45e:	2300      	movs	r3, #0
 800b460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800b464:	4b0e      	ldr	r3, [pc, #56]	; (800b4a0 <low_level_output+0x138>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b46c:	3314      	adds	r3, #20
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f003 0320 	and.w	r3, r3, #32
 800b474:	2b00      	cmp	r3, #0
 800b476:	d00d      	beq.n	800b494 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800b478:	4b09      	ldr	r3, [pc, #36]	; (800b4a0 <low_level_output+0x138>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b480:	3314      	adds	r3, #20
 800b482:	2220      	movs	r2, #32
 800b484:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800b486:	4b06      	ldr	r3, [pc, #24]	; (800b4a0 <low_level_output+0x138>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b48e:	3304      	adds	r3, #4
 800b490:	2200      	movs	r2, #0
 800b492:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800b494:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3728      	adds	r7, #40	; 0x28
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	20006964 	.word	0x20006964

0800b4a4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b08c      	sub	sp, #48	; 0x30
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800b4c8:	484f      	ldr	r0, [pc, #316]	; (800b608 <low_level_input+0x164>)
 800b4ca:	f7f9 f877 	bl	80045bc <HAL_ETH_GetReceivedFrame_IT>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d001      	beq.n	800b4d8 <low_level_input+0x34>

    return NULL;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	e092      	b.n	800b5fe <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800b4d8:	4b4b      	ldr	r3, [pc, #300]	; (800b608 <low_level_input+0x164>)
 800b4da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4dc:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800b4de:	4b4a      	ldr	r3, [pc, #296]	; (800b608 <low_level_input+0x164>)
 800b4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800b4e4:	89fb      	ldrh	r3, [r7, #14]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d007      	beq.n	800b4fa <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800b4ea:	89fb      	ldrh	r3, [r7, #14]
 800b4ec:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	f008 fd98 	bl	8014028 <pbuf_alloc>
 800b4f8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800b4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d04b      	beq.n	800b598 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b500:	4b41      	ldr	r3, [pc, #260]	; (800b608 <low_level_input+0x164>)
 800b502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b504:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800b506:	2300      	movs	r3, #0
 800b508:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800b50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b50e:	e040      	b.n	800b592 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800b510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b512:	895b      	ldrh	r3, [r3, #10]
 800b514:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800b516:	2300      	movs	r3, #0
 800b518:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b51a:	e021      	b.n	800b560 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800b51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51e:	685a      	ldr	r2, [r3, #4]
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	18d0      	adds	r0, r2, r3
 800b524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b526:	69fb      	ldr	r3, [r7, #28]
 800b528:	18d1      	adds	r1, r2, r3
 800b52a:	69fb      	ldr	r3, [r7, #28]
 800b52c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800b530:	3304      	adds	r3, #4
 800b532:	461a      	mov	r2, r3
 800b534:	f013 fe16 	bl	801f164 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b538:	6a3b      	ldr	r3, [r7, #32]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800b53e:	6a3b      	ldr	r3, [r7, #32]
 800b540:	689b      	ldr	r3, [r3, #8]
 800b542:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800b544:	69fa      	ldr	r2, [r7, #28]
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	4413      	add	r3, r2
 800b54a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800b54e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800b550:	69ba      	ldr	r2, [r7, #24]
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	1ad3      	subs	r3, r2, r3
 800b556:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b55a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800b55c:	2300      	movs	r3, #0
 800b55e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b560:	697a      	ldr	r2, [r7, #20]
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	4413      	add	r3, r2
 800b566:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d8d6      	bhi.n	800b51c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800b56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b570:	685a      	ldr	r2, [r3, #4]
 800b572:	69bb      	ldr	r3, [r7, #24]
 800b574:	18d0      	adds	r0, r2, r3
 800b576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	4413      	add	r3, r2
 800b57c:	697a      	ldr	r2, [r7, #20]
 800b57e:	4619      	mov	r1, r3
 800b580:	f013 fdf0 	bl	801f164 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800b584:	69fa      	ldr	r2, [r7, #28]
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	4413      	add	r3, r2
 800b58a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800b58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	62bb      	str	r3, [r7, #40]	; 0x28
 800b592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1bb      	bne.n	800b510 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b598:	4b1b      	ldr	r3, [pc, #108]	; (800b608 <low_level_input+0x164>)
 800b59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b59c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b59e:	2300      	movs	r3, #0
 800b5a0:	613b      	str	r3, [r7, #16]
 800b5a2:	e00b      	b.n	800b5bc <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800b5a4:	6a3b      	ldr	r3, [r7, #32]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b5ac:	6a3b      	ldr	r3, [r7, #32]
 800b5ae:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b5b0:	6a3b      	ldr	r3, [r7, #32]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	613b      	str	r3, [r7, #16]
 800b5bc:	4b12      	ldr	r3, [pc, #72]	; (800b608 <low_level_input+0x164>)
 800b5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c0:	693a      	ldr	r2, [r7, #16]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d3ee      	bcc.n	800b5a4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800b5c6:	4b10      	ldr	r3, [pc, #64]	; (800b608 <low_level_input+0x164>)
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800b5cc:	4b0e      	ldr	r3, [pc, #56]	; (800b608 <low_level_input+0x164>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5d4:	3314      	adds	r3, #20
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00d      	beq.n	800b5fc <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800b5e0:	4b09      	ldr	r3, [pc, #36]	; (800b608 <low_level_input+0x164>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5e8:	3314      	adds	r3, #20
 800b5ea:	2280      	movs	r2, #128	; 0x80
 800b5ec:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800b5ee:	4b06      	ldr	r3, [pc, #24]	; (800b608 <low_level_input+0x164>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5f6:	3308      	adds	r3, #8
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]
  }
  return p;
 800b5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3730      	adds	r7, #48	; 0x30
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	20006964 	.word	0x20006964

0800b60c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b618:	4b12      	ldr	r3, [pc, #72]	; (800b664 <ethernetif_input+0x58>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f04f 31ff 	mov.w	r1, #4294967295
 800b620:	4618      	mov	r0, r3
 800b622:	f001 fe11 	bl	800d248 <osSemaphoreWait>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1f5      	bne.n	800b618 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800b62c:	480e      	ldr	r0, [pc, #56]	; (800b668 <ethernetif_input+0x5c>)
 800b62e:	f012 ff0b 	bl	801e448 <sys_mutex_lock>
        p = low_level_input( netif );
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f7ff ff36 	bl	800b4a4 <low_level_input>
 800b638:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00a      	beq.n	800b656 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	68f9      	ldr	r1, [r7, #12]
 800b646:	68b8      	ldr	r0, [r7, #8]
 800b648:	4798      	blx	r3
 800b64a:	4603      	mov	r3, r0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d002      	beq.n	800b656 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800b650:	68b8      	ldr	r0, [r7, #8]
 800b652:	f008 ffcd 	bl	80145f0 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800b656:	4804      	ldr	r0, [pc, #16]	; (800b668 <ethernetif_input+0x5c>)
 800b658:	f012 ff05 	bl	801e466 <sys_mutex_unlock>
      } while(p!=NULL);
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d1e4      	bne.n	800b62c <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b662:	e7d9      	b.n	800b618 <ethernetif_input+0xc>
 800b664:	20000584 	.word	0x20000584
 800b668:	200081bc 	.word	0x200081bc

0800b66c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d106      	bne.n	800b688 <ethernetif_init+0x1c>
 800b67a:	4b0e      	ldr	r3, [pc, #56]	; (800b6b4 <ethernetif_init+0x48>)
 800b67c:	f240 222b 	movw	r2, #555	; 0x22b
 800b680:	490d      	ldr	r1, [pc, #52]	; (800b6b8 <ethernetif_init+0x4c>)
 800b682:	480e      	ldr	r0, [pc, #56]	; (800b6bc <ethernetif_init+0x50>)
 800b684:	f014 f81c 	bl	801f6c0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2273      	movs	r2, #115	; 0x73
 800b68c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2274      	movs	r2, #116	; 0x74
 800b694:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4a09      	ldr	r2, [pc, #36]	; (800b6c0 <ethernetif_init+0x54>)
 800b69c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4a08      	ldr	r2, [pc, #32]	; (800b6c4 <ethernetif_init+0x58>)
 800b6a2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f7ff fd87 	bl	800b1b8 <low_level_init>

  return ERR_OK;
 800b6aa:	2300      	movs	r3, #0
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	08022e00 	.word	0x08022e00
 800b6b8:	08022e1c 	.word	0x08022e1c
 800b6bc:	08022e2c 	.word	0x08022e2c
 800b6c0:	0801c209 	.word	0x0801c209
 800b6c4:	0800b369 	.word	0x0800b369

0800b6c8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b6cc:	f7f8 fa76 	bl	8003bbc <HAL_GetTick>
 800b6d0:	4603      	mov	r3, r0
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b084      	sub	sp, #16
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	460b      	mov	r3, r1
 800b6e0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b6e2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b6e6:	f013 fbcd 	bl	801ee84 <USBD_static_malloc>
 800b6ea:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d105      	bne.n	800b6fe <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b6fa:	2302      	movs	r3, #2
 800b6fc:	e066      	b.n	800b7cc <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	7c1b      	ldrb	r3, [r3, #16]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d119      	bne.n	800b742 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b70e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b712:	2202      	movs	r2, #2
 800b714:	2181      	movs	r1, #129	; 0x81
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f013 fa91 	bl	801ec3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2201      	movs	r2, #1
 800b720:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b722:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b726:	2202      	movs	r2, #2
 800b728:	2101      	movs	r1, #1
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f013 fa87 	bl	801ec3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2201      	movs	r2, #1
 800b734:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2210      	movs	r2, #16
 800b73c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b740:	e016      	b.n	800b770 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b742:	2340      	movs	r3, #64	; 0x40
 800b744:	2202      	movs	r2, #2
 800b746:	2181      	movs	r1, #129	; 0x81
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f013 fa78 	bl	801ec3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2201      	movs	r2, #1
 800b752:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b754:	2340      	movs	r3, #64	; 0x40
 800b756:	2202      	movs	r2, #2
 800b758:	2101      	movs	r1, #1
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f013 fa6f 	bl	801ec3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2201      	movs	r2, #1
 800b764:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2210      	movs	r2, #16
 800b76c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b770:	2308      	movs	r3, #8
 800b772:	2203      	movs	r2, #3
 800b774:	2182      	movs	r1, #130	; 0x82
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f013 fa61 	bl	801ec3e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2201      	movs	r2, #1
 800b780:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2200      	movs	r2, #0
 800b792:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2200      	movs	r2, #0
 800b79a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	7c1b      	ldrb	r3, [r3, #16]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d109      	bne.n	800b7ba <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b7ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7b0:	2101      	movs	r1, #1
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f013 fb32 	bl	801ee1c <USBD_LL_PrepareReceive>
 800b7b8:	e007      	b.n	800b7ca <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b7c0:	2340      	movs	r3, #64	; 0x40
 800b7c2:	2101      	movs	r1, #1
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f013 fb29 	bl	801ee1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	460b      	mov	r3, r1
 800b7de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b7e0:	2181      	movs	r1, #129	; 0x81
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f013 fa51 	bl	801ec8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b7ee:	2101      	movs	r1, #1
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f013 fa4a 	bl	801ec8a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b7fe:	2182      	movs	r1, #130	; 0x82
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f013 fa42 	bl	801ec8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d00e      	beq.n	800b83e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b830:	4618      	mov	r0, r3
 800b832:	f013 fb35 	bl	801eea0 <USBD_static_free>
    pdev->pClassData = NULL;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2200      	movs	r2, #0
 800b83a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b086      	sub	sp, #24
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b858:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b85a:	2300      	movs	r3, #0
 800b85c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b85e:	2300      	movs	r3, #0
 800b860:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b862:	2300      	movs	r3, #0
 800b864:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d101      	bne.n	800b870 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b86c:	2303      	movs	r3, #3
 800b86e:	e0af      	b.n	800b9d0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d03f      	beq.n	800b8fc <USBD_CDC_Setup+0xb4>
 800b87c:	2b20      	cmp	r3, #32
 800b87e:	f040 809f 	bne.w	800b9c0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	88db      	ldrh	r3, [r3, #6]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d02e      	beq.n	800b8e8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	b25b      	sxtb	r3, r3
 800b890:	2b00      	cmp	r3, #0
 800b892:	da16      	bge.n	800b8c2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b89a:	689b      	ldr	r3, [r3, #8]
 800b89c:	683a      	ldr	r2, [r7, #0]
 800b89e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b8a0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b8a2:	683a      	ldr	r2, [r7, #0]
 800b8a4:	88d2      	ldrh	r2, [r2, #6]
 800b8a6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	88db      	ldrh	r3, [r3, #6]
 800b8ac:	2b07      	cmp	r3, #7
 800b8ae:	bf28      	it	cs
 800b8b0:	2307      	movcs	r3, #7
 800b8b2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	89fa      	ldrh	r2, [r7, #14]
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f001 fae9 	bl	800ce92 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b8c0:	e085      	b.n	800b9ce <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	785a      	ldrb	r2, [r3, #1]
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	88db      	ldrh	r3, [r3, #6]
 800b8d0:	b2da      	uxtb	r2, r3
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b8d8:	6939      	ldr	r1, [r7, #16]
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	88db      	ldrh	r3, [r3, #6]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f001 fb02 	bl	800ceea <USBD_CtlPrepareRx>
      break;
 800b8e6:	e072      	b.n	800b9ce <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8ee:	689b      	ldr	r3, [r3, #8]
 800b8f0:	683a      	ldr	r2, [r7, #0]
 800b8f2:	7850      	ldrb	r0, [r2, #1]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	6839      	ldr	r1, [r7, #0]
 800b8f8:	4798      	blx	r3
      break;
 800b8fa:	e068      	b.n	800b9ce <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	785b      	ldrb	r3, [r3, #1]
 800b900:	2b0b      	cmp	r3, #11
 800b902:	d852      	bhi.n	800b9aa <USBD_CDC_Setup+0x162>
 800b904:	a201      	add	r2, pc, #4	; (adr r2, 800b90c <USBD_CDC_Setup+0xc4>)
 800b906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b90a:	bf00      	nop
 800b90c:	0800b93d 	.word	0x0800b93d
 800b910:	0800b9b9 	.word	0x0800b9b9
 800b914:	0800b9ab 	.word	0x0800b9ab
 800b918:	0800b9ab 	.word	0x0800b9ab
 800b91c:	0800b9ab 	.word	0x0800b9ab
 800b920:	0800b9ab 	.word	0x0800b9ab
 800b924:	0800b9ab 	.word	0x0800b9ab
 800b928:	0800b9ab 	.word	0x0800b9ab
 800b92c:	0800b9ab 	.word	0x0800b9ab
 800b930:	0800b9ab 	.word	0x0800b9ab
 800b934:	0800b967 	.word	0x0800b967
 800b938:	0800b991 	.word	0x0800b991
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b942:	b2db      	uxtb	r3, r3
 800b944:	2b03      	cmp	r3, #3
 800b946:	d107      	bne.n	800b958 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b948:	f107 030a 	add.w	r3, r7, #10
 800b94c:	2202      	movs	r2, #2
 800b94e:	4619      	mov	r1, r3
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f001 fa9e 	bl	800ce92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b956:	e032      	b.n	800b9be <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b958:	6839      	ldr	r1, [r7, #0]
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f001 fa28 	bl	800cdb0 <USBD_CtlError>
            ret = USBD_FAIL;
 800b960:	2303      	movs	r3, #3
 800b962:	75fb      	strb	r3, [r7, #23]
          break;
 800b964:	e02b      	b.n	800b9be <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	2b03      	cmp	r3, #3
 800b970:	d107      	bne.n	800b982 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b972:	f107 030d 	add.w	r3, r7, #13
 800b976:	2201      	movs	r2, #1
 800b978:	4619      	mov	r1, r3
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f001 fa89 	bl	800ce92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b980:	e01d      	b.n	800b9be <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b982:	6839      	ldr	r1, [r7, #0]
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f001 fa13 	bl	800cdb0 <USBD_CtlError>
            ret = USBD_FAIL;
 800b98a:	2303      	movs	r3, #3
 800b98c:	75fb      	strb	r3, [r7, #23]
          break;
 800b98e:	e016      	b.n	800b9be <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b996:	b2db      	uxtb	r3, r3
 800b998:	2b03      	cmp	r3, #3
 800b99a:	d00f      	beq.n	800b9bc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b99c:	6839      	ldr	r1, [r7, #0]
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f001 fa06 	bl	800cdb0 <USBD_CtlError>
            ret = USBD_FAIL;
 800b9a4:	2303      	movs	r3, #3
 800b9a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b9a8:	e008      	b.n	800b9bc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b9aa:	6839      	ldr	r1, [r7, #0]
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f001 f9ff 	bl	800cdb0 <USBD_CtlError>
          ret = USBD_FAIL;
 800b9b2:	2303      	movs	r3, #3
 800b9b4:	75fb      	strb	r3, [r7, #23]
          break;
 800b9b6:	e002      	b.n	800b9be <USBD_CDC_Setup+0x176>
          break;
 800b9b8:	bf00      	nop
 800b9ba:	e008      	b.n	800b9ce <USBD_CDC_Setup+0x186>
          break;
 800b9bc:	bf00      	nop
      }
      break;
 800b9be:	e006      	b.n	800b9ce <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b9c0:	6839      	ldr	r1, [r7, #0]
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f001 f9f4 	bl	800cdb0 <USBD_CtlError>
      ret = USBD_FAIL;
 800b9c8:	2303      	movs	r3, #3
 800b9ca:	75fb      	strb	r3, [r7, #23]
      break;
 800b9cc:	bf00      	nop
  }

  return (uint8_t)ret;
 800b9ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3718      	adds	r7, #24
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b9ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d101      	bne.n	800b9fa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b9f6:	2303      	movs	r3, #3
 800b9f8:	e04f      	b.n	800ba9a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ba02:	78fa      	ldrb	r2, [r7, #3]
 800ba04:	6879      	ldr	r1, [r7, #4]
 800ba06:	4613      	mov	r3, r2
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	4413      	add	r3, r2
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	440b      	add	r3, r1
 800ba10:	3318      	adds	r3, #24
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d029      	beq.n	800ba6c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ba18:	78fa      	ldrb	r2, [r7, #3]
 800ba1a:	6879      	ldr	r1, [r7, #4]
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	4413      	add	r3, r2
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	440b      	add	r3, r1
 800ba26:	3318      	adds	r3, #24
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	78f9      	ldrb	r1, [r7, #3]
 800ba2c:	68f8      	ldr	r0, [r7, #12]
 800ba2e:	460b      	mov	r3, r1
 800ba30:	00db      	lsls	r3, r3, #3
 800ba32:	1a5b      	subs	r3, r3, r1
 800ba34:	009b      	lsls	r3, r3, #2
 800ba36:	4403      	add	r3, r0
 800ba38:	3344      	adds	r3, #68	; 0x44
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ba40:	fb03 f301 	mul.w	r3, r3, r1
 800ba44:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d110      	bne.n	800ba6c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ba4a:	78fa      	ldrb	r2, [r7, #3]
 800ba4c:	6879      	ldr	r1, [r7, #4]
 800ba4e:	4613      	mov	r3, r2
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	4413      	add	r3, r2
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	440b      	add	r3, r1
 800ba58:	3318      	adds	r3, #24
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ba5e:	78f9      	ldrb	r1, [r7, #3]
 800ba60:	2300      	movs	r3, #0
 800ba62:	2200      	movs	r2, #0
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f013 f9b8 	bl	801edda <USBD_LL_Transmit>
 800ba6a:	e015      	b.n	800ba98 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba7a:	691b      	ldr	r3, [r3, #16]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00b      	beq.n	800ba98 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba86:	691b      	ldr	r3, [r3, #16]
 800ba88:	68ba      	ldr	r2, [r7, #8]
 800ba8a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ba8e:	68ba      	ldr	r2, [r7, #8]
 800ba90:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ba94:	78fa      	ldrb	r2, [r7, #3]
 800ba96:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b084      	sub	sp, #16
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
 800baaa:	460b      	mov	r3, r1
 800baac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bab4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800babc:	2b00      	cmp	r3, #0
 800babe:	d101      	bne.n	800bac4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bac0:	2303      	movs	r3, #3
 800bac2:	e015      	b.n	800baf0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bac4:	78fb      	ldrb	r3, [r7, #3]
 800bac6:	4619      	mov	r1, r3
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f013 f9c8 	bl	801ee5e <USBD_LL_GetRxDataSize>
 800bace:	4602      	mov	r2, r0
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	68fa      	ldr	r2, [r7, #12]
 800bae0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800baea:	4611      	mov	r1, r2
 800baec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800baee:	2300      	movs	r3, #0
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3710      	adds	r7, #16
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb06:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d101      	bne.n	800bb12 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800bb0e:	2303      	movs	r3, #3
 800bb10:	e01b      	b.n	800bb4a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d015      	beq.n	800bb48 <USBD_CDC_EP0_RxReady+0x50>
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bb22:	2bff      	cmp	r3, #255	; 0xff
 800bb24:	d010      	beq.n	800bb48 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	68fa      	ldr	r2, [r7, #12]
 800bb30:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bb34:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bb36:	68fa      	ldr	r2, [r7, #12]
 800bb38:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bb3c:	b292      	uxth	r2, r2
 800bb3e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	22ff      	movs	r2, #255	; 0xff
 800bb44:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bb48:	2300      	movs	r3, #0
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3710      	adds	r7, #16
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
	...

0800bb54 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2243      	movs	r2, #67	; 0x43
 800bb60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bb62:	4b03      	ldr	r3, [pc, #12]	; (800bb70 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr
 800bb70:	200000b0 	.word	0x200000b0

0800bb74 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2243      	movs	r2, #67	; 0x43
 800bb80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bb82:	4b03      	ldr	r3, [pc, #12]	; (800bb90 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr
 800bb90:	2000006c 	.word	0x2000006c

0800bb94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2243      	movs	r2, #67	; 0x43
 800bba0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bba2:	4b03      	ldr	r3, [pc, #12]	; (800bbb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	370c      	adds	r7, #12
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr
 800bbb0:	200000f4 	.word	0x200000f4

0800bbb4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	220a      	movs	r2, #10
 800bbc0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bbc2:	4b03      	ldr	r3, [pc, #12]	; (800bbd0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr
 800bbd0:	20000028 	.word	0x20000028

0800bbd4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d101      	bne.n	800bbe8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bbe4:	2303      	movs	r3, #3
 800bbe6:	e004      	b.n	800bbf2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	683a      	ldr	r2, [r7, #0]
 800bbec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	370c      	adds	r7, #12
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bbfe:	b480      	push	{r7}
 800bc00:	b087      	sub	sp, #28
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	60f8      	str	r0, [r7, #12]
 800bc06:	60b9      	str	r1, [r7, #8]
 800bc08:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc10:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d101      	bne.n	800bc1c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bc18:	2303      	movs	r3, #3
 800bc1a:	e008      	b.n	800bc2e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	68ba      	ldr	r2, [r7, #8]
 800bc20:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	371c      	adds	r7, #28
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr

0800bc3a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bc3a:	b480      	push	{r7}
 800bc3c:	b085      	sub	sp, #20
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc4a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d101      	bne.n	800bc56 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800bc52:	2303      	movs	r3, #3
 800bc54:	e004      	b.n	800bc60 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	683a      	ldr	r2, [r7, #0]
 800bc5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3714      	adds	r7, #20
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d101      	bne.n	800bc8a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bc86:	2303      	movs	r3, #3
 800bc88:	e016      	b.n	800bcb8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	7c1b      	ldrb	r3, [r3, #16]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d109      	bne.n	800bca6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc9c:	2101      	movs	r1, #1
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f013 f8bc 	bl	801ee1c <USBD_LL_PrepareReceive>
 800bca4:	e007      	b.n	800bcb6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bcac:	2340      	movs	r3, #64	; 0x40
 800bcae:	2101      	movs	r1, #1
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f013 f8b3 	bl	801ee1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bcb6:	2300      	movs	r3, #0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3710      	adds	r7, #16
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	60b9      	str	r1, [r7, #8]
 800bcca:	4613      	mov	r3, r2
 800bccc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d101      	bne.n	800bcd8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bcd4:	2303      	movs	r3, #3
 800bcd6:	e01f      	b.n	800bd18 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2200      	movs	r2, #0
 800bce4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2200      	movs	r2, #0
 800bcec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d003      	beq.n	800bcfe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	68ba      	ldr	r2, [r7, #8]
 800bcfa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2201      	movs	r2, #1
 800bd02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	79fa      	ldrb	r2, [r7, #7]
 800bd0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bd0c:	68f8      	ldr	r0, [r7, #12]
 800bd0e:	f012 ff2f 	bl	801eb70 <USBD_LL_Init>
 800bd12:	4603      	mov	r3, r0
 800bd14:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bd16:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3718      	adds	r7, #24
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d101      	bne.n	800bd38 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bd34:	2303      	movs	r3, #3
 800bd36:	e016      	b.n	800bd66 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	683a      	ldr	r2, [r7, #0]
 800bd3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d00b      	beq.n	800bd64 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd54:	f107 020e 	add.w	r2, r7, #14
 800bd58:	4610      	mov	r0, r2
 800bd5a:	4798      	blx	r3
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b082      	sub	sp, #8
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f012 ff46 	bl	801ec08 <USBD_LL_Start>
 800bd7c:	4603      	mov	r3, r0
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3708      	adds	r7, #8
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bd86:	b480      	push	{r7}
 800bd88:	b083      	sub	sp, #12
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd8e:	2300      	movs	r3, #0
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	460b      	mov	r3, r1
 800bda6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bda8:	2303      	movs	r3, #3
 800bdaa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d009      	beq.n	800bdca <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	78fa      	ldrb	r2, [r7, #3]
 800bdc0:	4611      	mov	r1, r2
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	4798      	blx	r3
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bdca:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3710      	adds	r7, #16
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	460b      	mov	r3, r1
 800bdde:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d007      	beq.n	800bdfa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	78fa      	ldrb	r2, [r7, #3]
 800bdf4:	4611      	mov	r1, r2
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	4798      	blx	r3
  }

  return USBD_OK;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be14:	6839      	ldr	r1, [r7, #0]
 800be16:	4618      	mov	r0, r3
 800be18:	f000 ff90 	bl	800cd3c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2201      	movs	r2, #1
 800be20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800be2a:	461a      	mov	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800be38:	f003 031f 	and.w	r3, r3, #31
 800be3c:	2b02      	cmp	r3, #2
 800be3e:	d01a      	beq.n	800be76 <USBD_LL_SetupStage+0x72>
 800be40:	2b02      	cmp	r3, #2
 800be42:	d822      	bhi.n	800be8a <USBD_LL_SetupStage+0x86>
 800be44:	2b00      	cmp	r3, #0
 800be46:	d002      	beq.n	800be4e <USBD_LL_SetupStage+0x4a>
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d00a      	beq.n	800be62 <USBD_LL_SetupStage+0x5e>
 800be4c:	e01d      	b.n	800be8a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be54:	4619      	mov	r1, r3
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 fa62 	bl	800c320 <USBD_StdDevReq>
 800be5c:	4603      	mov	r3, r0
 800be5e:	73fb      	strb	r3, [r7, #15]
      break;
 800be60:	e020      	b.n	800bea4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be68:	4619      	mov	r1, r3
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 fac6 	bl	800c3fc <USBD_StdItfReq>
 800be70:	4603      	mov	r3, r0
 800be72:	73fb      	strb	r3, [r7, #15]
      break;
 800be74:	e016      	b.n	800bea4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be7c:	4619      	mov	r1, r3
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fb05 	bl	800c48e <USBD_StdEPReq>
 800be84:	4603      	mov	r3, r0
 800be86:	73fb      	strb	r3, [r7, #15]
      break;
 800be88:	e00c      	b.n	800bea4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800be90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800be94:	b2db      	uxtb	r3, r3
 800be96:	4619      	mov	r1, r3
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f012 ff15 	bl	801ecc8 <USBD_LL_StallEP>
 800be9e:	4603      	mov	r3, r0
 800bea0:	73fb      	strb	r3, [r7, #15]
      break;
 800bea2:	bf00      	nop
  }

  return ret;
 800bea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3710      	adds	r7, #16
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b086      	sub	sp, #24
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	60f8      	str	r0, [r7, #12]
 800beb6:	460b      	mov	r3, r1
 800beb8:	607a      	str	r2, [r7, #4]
 800beba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bebc:	7afb      	ldrb	r3, [r7, #11]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d138      	bne.n	800bf34 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bec8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bed0:	2b03      	cmp	r3, #3
 800bed2:	d14a      	bne.n	800bf6a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	689a      	ldr	r2, [r3, #8]
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d913      	bls.n	800bf08 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	689a      	ldr	r2, [r3, #8]
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	68db      	ldr	r3, [r3, #12]
 800bee8:	1ad2      	subs	r2, r2, r3
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	68da      	ldr	r2, [r3, #12]
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	4293      	cmp	r3, r2
 800bef8:	bf28      	it	cs
 800befa:	4613      	movcs	r3, r2
 800befc:	461a      	mov	r2, r3
 800befe:	6879      	ldr	r1, [r7, #4]
 800bf00:	68f8      	ldr	r0, [r7, #12]
 800bf02:	f001 f80f 	bl	800cf24 <USBD_CtlContinueRx>
 800bf06:	e030      	b.n	800bf6a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	2b03      	cmp	r3, #3
 800bf12:	d10b      	bne.n	800bf2c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf1a:	691b      	ldr	r3, [r3, #16]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d005      	beq.n	800bf2c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf26:	691b      	ldr	r3, [r3, #16]
 800bf28:	68f8      	ldr	r0, [r7, #12]
 800bf2a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bf2c:	68f8      	ldr	r0, [r7, #12]
 800bf2e:	f001 f80a 	bl	800cf46 <USBD_CtlSendStatus>
 800bf32:	e01a      	b.n	800bf6a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	2b03      	cmp	r3, #3
 800bf3e:	d114      	bne.n	800bf6a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf46:	699b      	ldr	r3, [r3, #24]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00e      	beq.n	800bf6a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf52:	699b      	ldr	r3, [r3, #24]
 800bf54:	7afa      	ldrb	r2, [r7, #11]
 800bf56:	4611      	mov	r1, r2
 800bf58:	68f8      	ldr	r0, [r7, #12]
 800bf5a:	4798      	blx	r3
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bf60:	7dfb      	ldrb	r3, [r7, #23]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d001      	beq.n	800bf6a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800bf66:	7dfb      	ldrb	r3, [r7, #23]
 800bf68:	e000      	b.n	800bf6c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800bf6a:	2300      	movs	r3, #0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3718      	adds	r7, #24
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b086      	sub	sp, #24
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	607a      	str	r2, [r7, #4]
 800bf80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bf82:	7afb      	ldrb	r3, [r7, #11]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d16b      	bne.n	800c060 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	3314      	adds	r3, #20
 800bf8c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bf94:	2b02      	cmp	r3, #2
 800bf96:	d156      	bne.n	800c046 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	689a      	ldr	r2, [r3, #8]
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d914      	bls.n	800bfce <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	689a      	ldr	r2, [r3, #8]
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	1ad2      	subs	r2, r2, r3
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	6879      	ldr	r1, [r7, #4]
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	f000 ff84 	bl	800cec8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	68f8      	ldr	r0, [r7, #12]
 800bfc8:	f012 ff28 	bl	801ee1c <USBD_LL_PrepareReceive>
 800bfcc:	e03b      	b.n	800c046 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	68da      	ldr	r2, [r3, #12]
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	689b      	ldr	r3, [r3, #8]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d11c      	bne.n	800c014 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	685a      	ldr	r2, [r3, #4]
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d316      	bcc.n	800c014 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	685a      	ldr	r2, [r3, #4]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d20f      	bcs.n	800c014 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bff4:	2200      	movs	r2, #0
 800bff6:	2100      	movs	r1, #0
 800bff8:	68f8      	ldr	r0, [r7, #12]
 800bffa:	f000 ff65 	bl	800cec8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2200      	movs	r2, #0
 800c002:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c006:	2300      	movs	r3, #0
 800c008:	2200      	movs	r2, #0
 800c00a:	2100      	movs	r1, #0
 800c00c:	68f8      	ldr	r0, [r7, #12]
 800c00e:	f012 ff05 	bl	801ee1c <USBD_LL_PrepareReceive>
 800c012:	e018      	b.n	800c046 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	2b03      	cmp	r3, #3
 800c01e:	d10b      	bne.n	800c038 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c026:	68db      	ldr	r3, [r3, #12]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d005      	beq.n	800c038 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c032:	68db      	ldr	r3, [r3, #12]
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c038:	2180      	movs	r1, #128	; 0x80
 800c03a:	68f8      	ldr	r0, [r7, #12]
 800c03c:	f012 fe44 	bl	801ecc8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c040:	68f8      	ldr	r0, [r7, #12]
 800c042:	f000 ff93 	bl	800cf6c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	d122      	bne.n	800c096 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f7ff fe98 	bl	800bd86 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2200      	movs	r2, #0
 800c05a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c05e:	e01a      	b.n	800c096 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c066:	b2db      	uxtb	r3, r3
 800c068:	2b03      	cmp	r3, #3
 800c06a:	d114      	bne.n	800c096 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c072:	695b      	ldr	r3, [r3, #20]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00e      	beq.n	800c096 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c07e:	695b      	ldr	r3, [r3, #20]
 800c080:	7afa      	ldrb	r2, [r7, #11]
 800c082:	4611      	mov	r1, r2
 800c084:	68f8      	ldr	r0, [r7, #12]
 800c086:	4798      	blx	r3
 800c088:	4603      	mov	r3, r0
 800c08a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c08c:	7dfb      	ldrb	r3, [r7, #23]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d001      	beq.n	800c096 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c092:	7dfb      	ldrb	r3, [r7, #23]
 800c094:	e000      	b.n	800c098 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c096:	2300      	movs	r3, #0
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3718      	adds	r7, #24
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d101      	bne.n	800c0d4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c0d0:	2303      	movs	r3, #3
 800c0d2:	e02f      	b.n	800c134 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00f      	beq.n	800c0fe <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d009      	beq.n	800c0fe <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	6852      	ldr	r2, [r2, #4]
 800c0f6:	b2d2      	uxtb	r2, r2
 800c0f8:	4611      	mov	r1, r2
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c0fe:	2340      	movs	r3, #64	; 0x40
 800c100:	2200      	movs	r2, #0
 800c102:	2100      	movs	r1, #0
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f012 fd9a 	bl	801ec3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2201      	movs	r2, #1
 800c10e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2240      	movs	r2, #64	; 0x40
 800c116:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c11a:	2340      	movs	r3, #64	; 0x40
 800c11c:	2200      	movs	r2, #0
 800c11e:	2180      	movs	r1, #128	; 0x80
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f012 fd8c 	bl	801ec3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2201      	movs	r2, #1
 800c12a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2240      	movs	r2, #64	; 0x40
 800c130:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c132:	2300      	movs	r3, #0
}
 800c134:	4618      	mov	r0, r3
 800c136:	3708      	adds	r7, #8
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	460b      	mov	r3, r1
 800c146:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	78fa      	ldrb	r2, [r7, #3]
 800c14c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c14e:	2300      	movs	r3, #0
}
 800c150:	4618      	mov	r0, r3
 800c152:	370c      	adds	r7, #12
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr

0800c15c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c16a:	b2da      	uxtb	r2, r3
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2204      	movs	r2, #4
 800c176:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c17a:	2300      	movs	r3, #0
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr

0800c188 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c196:	b2db      	uxtb	r3, r3
 800c198:	2b04      	cmp	r3, #4
 800c19a:	d106      	bne.n	800c1aa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c1a2:	b2da      	uxtb	r2, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c1aa:	2300      	movs	r3, #0
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	370c      	adds	r7, #12
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b6:	4770      	bx	lr

0800c1b8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d101      	bne.n	800c1ce <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c1ca:	2303      	movs	r3, #3
 800c1cc:	e012      	b.n	800c1f4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	2b03      	cmp	r3, #3
 800c1d8:	d10b      	bne.n	800c1f2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1e0:	69db      	ldr	r3, [r3, #28]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d005      	beq.n	800c1f2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1ec:	69db      	ldr	r3, [r3, #28]
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c1f2:	2300      	movs	r3, #0
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3708      	adds	r7, #8
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	460b      	mov	r3, r1
 800c206:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d101      	bne.n	800c216 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c212:	2303      	movs	r3, #3
 800c214:	e014      	b.n	800c240 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	2b03      	cmp	r3, #3
 800c220:	d10d      	bne.n	800c23e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c228:	6a1b      	ldr	r3, [r3, #32]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d007      	beq.n	800c23e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c234:	6a1b      	ldr	r3, [r3, #32]
 800c236:	78fa      	ldrb	r2, [r7, #3]
 800c238:	4611      	mov	r1, r2
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	460b      	mov	r3, r1
 800c252:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d101      	bne.n	800c262 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c25e:	2303      	movs	r3, #3
 800c260:	e014      	b.n	800c28c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	2b03      	cmp	r3, #3
 800c26c:	d10d      	bne.n	800c28a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c276:	2b00      	cmp	r3, #0
 800c278:	d007      	beq.n	800c28a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c282:	78fa      	ldrb	r2, [r7, #3]
 800c284:	4611      	mov	r1, r2
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c28a:	2300      	movs	r3, #0
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c29c:	2300      	movs	r3, #0
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	370c      	adds	r7, #12
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr

0800c2aa <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b082      	sub	sp, #8
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d009      	beq.n	800c2d8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	6852      	ldr	r2, [r2, #4]
 800c2d0:	b2d2      	uxtb	r2, r2
 800c2d2:	4611      	mov	r1, r2
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	4798      	blx	r3
  }

  return USBD_OK;
 800c2d8:	2300      	movs	r3, #0
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3708      	adds	r7, #8
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c2e2:	b480      	push	{r7}
 800c2e4:	b087      	sub	sp, #28
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c300:	8a3b      	ldrh	r3, [r7, #16]
 800c302:	021b      	lsls	r3, r3, #8
 800c304:	b21a      	sxth	r2, r3
 800c306:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c30a:	4313      	orrs	r3, r2
 800c30c:	b21b      	sxth	r3, r3
 800c30e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c310:	89fb      	ldrh	r3, [r7, #14]
}
 800c312:	4618      	mov	r0, r3
 800c314:	371c      	adds	r7, #28
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
	...

0800c320 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b084      	sub	sp, #16
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c32a:	2300      	movs	r3, #0
 800c32c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c336:	2b40      	cmp	r3, #64	; 0x40
 800c338:	d005      	beq.n	800c346 <USBD_StdDevReq+0x26>
 800c33a:	2b40      	cmp	r3, #64	; 0x40
 800c33c:	d853      	bhi.n	800c3e6 <USBD_StdDevReq+0xc6>
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d00b      	beq.n	800c35a <USBD_StdDevReq+0x3a>
 800c342:	2b20      	cmp	r3, #32
 800c344:	d14f      	bne.n	800c3e6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	6839      	ldr	r1, [r7, #0]
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	4798      	blx	r3
 800c354:	4603      	mov	r3, r0
 800c356:	73fb      	strb	r3, [r7, #15]
      break;
 800c358:	e04a      	b.n	800c3f0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	785b      	ldrb	r3, [r3, #1]
 800c35e:	2b09      	cmp	r3, #9
 800c360:	d83b      	bhi.n	800c3da <USBD_StdDevReq+0xba>
 800c362:	a201      	add	r2, pc, #4	; (adr r2, 800c368 <USBD_StdDevReq+0x48>)
 800c364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c368:	0800c3bd 	.word	0x0800c3bd
 800c36c:	0800c3d1 	.word	0x0800c3d1
 800c370:	0800c3db 	.word	0x0800c3db
 800c374:	0800c3c7 	.word	0x0800c3c7
 800c378:	0800c3db 	.word	0x0800c3db
 800c37c:	0800c39b 	.word	0x0800c39b
 800c380:	0800c391 	.word	0x0800c391
 800c384:	0800c3db 	.word	0x0800c3db
 800c388:	0800c3b3 	.word	0x0800c3b3
 800c38c:	0800c3a5 	.word	0x0800c3a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c390:	6839      	ldr	r1, [r7, #0]
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 f9de 	bl	800c754 <USBD_GetDescriptor>
          break;
 800c398:	e024      	b.n	800c3e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c39a:	6839      	ldr	r1, [r7, #0]
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 fb43 	bl	800ca28 <USBD_SetAddress>
          break;
 800c3a2:	e01f      	b.n	800c3e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c3a4:	6839      	ldr	r1, [r7, #0]
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 fb82 	bl	800cab0 <USBD_SetConfig>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	73fb      	strb	r3, [r7, #15]
          break;
 800c3b0:	e018      	b.n	800c3e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c3b2:	6839      	ldr	r1, [r7, #0]
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 fc21 	bl	800cbfc <USBD_GetConfig>
          break;
 800c3ba:	e013      	b.n	800c3e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c3bc:	6839      	ldr	r1, [r7, #0]
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fc52 	bl	800cc68 <USBD_GetStatus>
          break;
 800c3c4:	e00e      	b.n	800c3e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c3c6:	6839      	ldr	r1, [r7, #0]
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 fc81 	bl	800ccd0 <USBD_SetFeature>
          break;
 800c3ce:	e009      	b.n	800c3e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c3d0:	6839      	ldr	r1, [r7, #0]
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 fc90 	bl	800ccf8 <USBD_ClrFeature>
          break;
 800c3d8:	e004      	b.n	800c3e4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c3da:	6839      	ldr	r1, [r7, #0]
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 fce7 	bl	800cdb0 <USBD_CtlError>
          break;
 800c3e2:	bf00      	nop
      }
      break;
 800c3e4:	e004      	b.n	800c3f0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c3e6:	6839      	ldr	r1, [r7, #0]
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 fce1 	bl	800cdb0 <USBD_CtlError>
      break;
 800c3ee:	bf00      	nop
  }

  return ret;
 800c3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3710      	adds	r7, #16
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	bf00      	nop

0800c3fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c406:	2300      	movs	r3, #0
 800c408:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c412:	2b40      	cmp	r3, #64	; 0x40
 800c414:	d005      	beq.n	800c422 <USBD_StdItfReq+0x26>
 800c416:	2b40      	cmp	r3, #64	; 0x40
 800c418:	d82f      	bhi.n	800c47a <USBD_StdItfReq+0x7e>
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d001      	beq.n	800c422 <USBD_StdItfReq+0x26>
 800c41e:	2b20      	cmp	r3, #32
 800c420:	d12b      	bne.n	800c47a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	3b01      	subs	r3, #1
 800c42c:	2b02      	cmp	r3, #2
 800c42e:	d81d      	bhi.n	800c46c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	889b      	ldrh	r3, [r3, #4]
 800c434:	b2db      	uxtb	r3, r3
 800c436:	2b01      	cmp	r3, #1
 800c438:	d813      	bhi.n	800c462 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	6839      	ldr	r1, [r7, #0]
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	4798      	blx	r3
 800c448:	4603      	mov	r3, r0
 800c44a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	88db      	ldrh	r3, [r3, #6]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d110      	bne.n	800c476 <USBD_StdItfReq+0x7a>
 800c454:	7bfb      	ldrb	r3, [r7, #15]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d10d      	bne.n	800c476 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 fd73 	bl	800cf46 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c460:	e009      	b.n	800c476 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c462:	6839      	ldr	r1, [r7, #0]
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 fca3 	bl	800cdb0 <USBD_CtlError>
          break;
 800c46a:	e004      	b.n	800c476 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c46c:	6839      	ldr	r1, [r7, #0]
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fc9e 	bl	800cdb0 <USBD_CtlError>
          break;
 800c474:	e000      	b.n	800c478 <USBD_StdItfReq+0x7c>
          break;
 800c476:	bf00      	nop
      }
      break;
 800c478:	e004      	b.n	800c484 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c47a:	6839      	ldr	r1, [r7, #0]
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 fc97 	bl	800cdb0 <USBD_CtlError>
      break;
 800c482:	bf00      	nop
  }

  return ret;
 800c484:	7bfb      	ldrb	r3, [r7, #15]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b084      	sub	sp, #16
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
 800c496:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c498:	2300      	movs	r3, #0
 800c49a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	889b      	ldrh	r3, [r3, #4]
 800c4a0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c4aa:	2b40      	cmp	r3, #64	; 0x40
 800c4ac:	d007      	beq.n	800c4be <USBD_StdEPReq+0x30>
 800c4ae:	2b40      	cmp	r3, #64	; 0x40
 800c4b0:	f200 8145 	bhi.w	800c73e <USBD_StdEPReq+0x2b0>
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d00c      	beq.n	800c4d2 <USBD_StdEPReq+0x44>
 800c4b8:	2b20      	cmp	r3, #32
 800c4ba:	f040 8140 	bne.w	800c73e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4c4:	689b      	ldr	r3, [r3, #8]
 800c4c6:	6839      	ldr	r1, [r7, #0]
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	4798      	blx	r3
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	73fb      	strb	r3, [r7, #15]
      break;
 800c4d0:	e13a      	b.n	800c748 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	785b      	ldrb	r3, [r3, #1]
 800c4d6:	2b03      	cmp	r3, #3
 800c4d8:	d007      	beq.n	800c4ea <USBD_StdEPReq+0x5c>
 800c4da:	2b03      	cmp	r3, #3
 800c4dc:	f300 8129 	bgt.w	800c732 <USBD_StdEPReq+0x2a4>
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d07f      	beq.n	800c5e4 <USBD_StdEPReq+0x156>
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d03c      	beq.n	800c562 <USBD_StdEPReq+0xd4>
 800c4e8:	e123      	b.n	800c732 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	2b02      	cmp	r3, #2
 800c4f4:	d002      	beq.n	800c4fc <USBD_StdEPReq+0x6e>
 800c4f6:	2b03      	cmp	r3, #3
 800c4f8:	d016      	beq.n	800c528 <USBD_StdEPReq+0x9a>
 800c4fa:	e02c      	b.n	800c556 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4fc:	7bbb      	ldrb	r3, [r7, #14]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d00d      	beq.n	800c51e <USBD_StdEPReq+0x90>
 800c502:	7bbb      	ldrb	r3, [r7, #14]
 800c504:	2b80      	cmp	r3, #128	; 0x80
 800c506:	d00a      	beq.n	800c51e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c508:	7bbb      	ldrb	r3, [r7, #14]
 800c50a:	4619      	mov	r1, r3
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f012 fbdb 	bl	801ecc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c512:	2180      	movs	r1, #128	; 0x80
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f012 fbd7 	bl	801ecc8 <USBD_LL_StallEP>
 800c51a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c51c:	e020      	b.n	800c560 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c51e:	6839      	ldr	r1, [r7, #0]
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 fc45 	bl	800cdb0 <USBD_CtlError>
              break;
 800c526:	e01b      	b.n	800c560 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	885b      	ldrh	r3, [r3, #2]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d10e      	bne.n	800c54e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c530:	7bbb      	ldrb	r3, [r7, #14]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d00b      	beq.n	800c54e <USBD_StdEPReq+0xc0>
 800c536:	7bbb      	ldrb	r3, [r7, #14]
 800c538:	2b80      	cmp	r3, #128	; 0x80
 800c53a:	d008      	beq.n	800c54e <USBD_StdEPReq+0xc0>
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	88db      	ldrh	r3, [r3, #6]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d104      	bne.n	800c54e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c544:	7bbb      	ldrb	r3, [r7, #14]
 800c546:	4619      	mov	r1, r3
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f012 fbbd 	bl	801ecc8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 fcf9 	bl	800cf46 <USBD_CtlSendStatus>

              break;
 800c554:	e004      	b.n	800c560 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c556:	6839      	ldr	r1, [r7, #0]
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 fc29 	bl	800cdb0 <USBD_CtlError>
              break;
 800c55e:	bf00      	nop
          }
          break;
 800c560:	e0ec      	b.n	800c73c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c568:	b2db      	uxtb	r3, r3
 800c56a:	2b02      	cmp	r3, #2
 800c56c:	d002      	beq.n	800c574 <USBD_StdEPReq+0xe6>
 800c56e:	2b03      	cmp	r3, #3
 800c570:	d016      	beq.n	800c5a0 <USBD_StdEPReq+0x112>
 800c572:	e030      	b.n	800c5d6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c574:	7bbb      	ldrb	r3, [r7, #14]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00d      	beq.n	800c596 <USBD_StdEPReq+0x108>
 800c57a:	7bbb      	ldrb	r3, [r7, #14]
 800c57c:	2b80      	cmp	r3, #128	; 0x80
 800c57e:	d00a      	beq.n	800c596 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c580:	7bbb      	ldrb	r3, [r7, #14]
 800c582:	4619      	mov	r1, r3
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f012 fb9f 	bl	801ecc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c58a:	2180      	movs	r1, #128	; 0x80
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f012 fb9b 	bl	801ecc8 <USBD_LL_StallEP>
 800c592:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c594:	e025      	b.n	800c5e2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c596:	6839      	ldr	r1, [r7, #0]
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 fc09 	bl	800cdb0 <USBD_CtlError>
              break;
 800c59e:	e020      	b.n	800c5e2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	885b      	ldrh	r3, [r3, #2]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d11b      	bne.n	800c5e0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c5a8:	7bbb      	ldrb	r3, [r7, #14]
 800c5aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d004      	beq.n	800c5bc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c5b2:	7bbb      	ldrb	r3, [r7, #14]
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f012 fba5 	bl	801ed06 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 fcc2 	bl	800cf46 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5c8:	689b      	ldr	r3, [r3, #8]
 800c5ca:	6839      	ldr	r1, [r7, #0]
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	4798      	blx	r3
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c5d4:	e004      	b.n	800c5e0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c5d6:	6839      	ldr	r1, [r7, #0]
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 fbe9 	bl	800cdb0 <USBD_CtlError>
              break;
 800c5de:	e000      	b.n	800c5e2 <USBD_StdEPReq+0x154>
              break;
 800c5e0:	bf00      	nop
          }
          break;
 800c5e2:	e0ab      	b.n	800c73c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	d002      	beq.n	800c5f6 <USBD_StdEPReq+0x168>
 800c5f0:	2b03      	cmp	r3, #3
 800c5f2:	d032      	beq.n	800c65a <USBD_StdEPReq+0x1cc>
 800c5f4:	e097      	b.n	800c726 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5f6:	7bbb      	ldrb	r3, [r7, #14]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d007      	beq.n	800c60c <USBD_StdEPReq+0x17e>
 800c5fc:	7bbb      	ldrb	r3, [r7, #14]
 800c5fe:	2b80      	cmp	r3, #128	; 0x80
 800c600:	d004      	beq.n	800c60c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c602:	6839      	ldr	r1, [r7, #0]
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 fbd3 	bl	800cdb0 <USBD_CtlError>
                break;
 800c60a:	e091      	b.n	800c730 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c60c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c610:	2b00      	cmp	r3, #0
 800c612:	da0b      	bge.n	800c62c <USBD_StdEPReq+0x19e>
 800c614:	7bbb      	ldrb	r3, [r7, #14]
 800c616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c61a:	4613      	mov	r3, r2
 800c61c:	009b      	lsls	r3, r3, #2
 800c61e:	4413      	add	r3, r2
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	3310      	adds	r3, #16
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	4413      	add	r3, r2
 800c628:	3304      	adds	r3, #4
 800c62a:	e00b      	b.n	800c644 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c62c:	7bbb      	ldrb	r3, [r7, #14]
 800c62e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c632:	4613      	mov	r3, r2
 800c634:	009b      	lsls	r3, r3, #2
 800c636:	4413      	add	r3, r2
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	4413      	add	r3, r2
 800c642:	3304      	adds	r3, #4
 800c644:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	2200      	movs	r2, #0
 800c64a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	2202      	movs	r2, #2
 800c650:	4619      	mov	r1, r3
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 fc1d 	bl	800ce92 <USBD_CtlSendData>
              break;
 800c658:	e06a      	b.n	800c730 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c65a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	da11      	bge.n	800c686 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c662:	7bbb      	ldrb	r3, [r7, #14]
 800c664:	f003 020f 	and.w	r2, r3, #15
 800c668:	6879      	ldr	r1, [r7, #4]
 800c66a:	4613      	mov	r3, r2
 800c66c:	009b      	lsls	r3, r3, #2
 800c66e:	4413      	add	r3, r2
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	440b      	add	r3, r1
 800c674:	3324      	adds	r3, #36	; 0x24
 800c676:	881b      	ldrh	r3, [r3, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d117      	bne.n	800c6ac <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c67c:	6839      	ldr	r1, [r7, #0]
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 fb96 	bl	800cdb0 <USBD_CtlError>
                  break;
 800c684:	e054      	b.n	800c730 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c686:	7bbb      	ldrb	r3, [r7, #14]
 800c688:	f003 020f 	and.w	r2, r3, #15
 800c68c:	6879      	ldr	r1, [r7, #4]
 800c68e:	4613      	mov	r3, r2
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	4413      	add	r3, r2
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	440b      	add	r3, r1
 800c698:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c69c:	881b      	ldrh	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d104      	bne.n	800c6ac <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c6a2:	6839      	ldr	r1, [r7, #0]
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 fb83 	bl	800cdb0 <USBD_CtlError>
                  break;
 800c6aa:	e041      	b.n	800c730 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	da0b      	bge.n	800c6cc <USBD_StdEPReq+0x23e>
 800c6b4:	7bbb      	ldrb	r3, [r7, #14]
 800c6b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c6ba:	4613      	mov	r3, r2
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	4413      	add	r3, r2
 800c6c0:	009b      	lsls	r3, r3, #2
 800c6c2:	3310      	adds	r3, #16
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	3304      	adds	r3, #4
 800c6ca:	e00b      	b.n	800c6e4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c6cc:	7bbb      	ldrb	r3, [r7, #14]
 800c6ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	4413      	add	r3, r2
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	4413      	add	r3, r2
 800c6e2:	3304      	adds	r3, #4
 800c6e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c6e6:	7bbb      	ldrb	r3, [r7, #14]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d002      	beq.n	800c6f2 <USBD_StdEPReq+0x264>
 800c6ec:	7bbb      	ldrb	r3, [r7, #14]
 800c6ee:	2b80      	cmp	r3, #128	; 0x80
 800c6f0:	d103      	bne.n	800c6fa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	601a      	str	r2, [r3, #0]
 800c6f8:	e00e      	b.n	800c718 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c6fa:	7bbb      	ldrb	r3, [r7, #14]
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f012 fb20 	bl	801ed44 <USBD_LL_IsStallEP>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d003      	beq.n	800c712 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	2201      	movs	r2, #1
 800c70e:	601a      	str	r2, [r3, #0]
 800c710:	e002      	b.n	800c718 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	2200      	movs	r2, #0
 800c716:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	2202      	movs	r2, #2
 800c71c:	4619      	mov	r1, r3
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 fbb7 	bl	800ce92 <USBD_CtlSendData>
              break;
 800c724:	e004      	b.n	800c730 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c726:	6839      	ldr	r1, [r7, #0]
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 fb41 	bl	800cdb0 <USBD_CtlError>
              break;
 800c72e:	bf00      	nop
          }
          break;
 800c730:	e004      	b.n	800c73c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c732:	6839      	ldr	r1, [r7, #0]
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 fb3b 	bl	800cdb0 <USBD_CtlError>
          break;
 800c73a:	bf00      	nop
      }
      break;
 800c73c:	e004      	b.n	800c748 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c73e:	6839      	ldr	r1, [r7, #0]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 fb35 	bl	800cdb0 <USBD_CtlError>
      break;
 800c746:	bf00      	nop
  }

  return ret;
 800c748:	7bfb      	ldrb	r3, [r7, #15]
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3710      	adds	r7, #16
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
	...

0800c754 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c75e:	2300      	movs	r3, #0
 800c760:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c762:	2300      	movs	r3, #0
 800c764:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c766:	2300      	movs	r3, #0
 800c768:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	885b      	ldrh	r3, [r3, #2]
 800c76e:	0a1b      	lsrs	r3, r3, #8
 800c770:	b29b      	uxth	r3, r3
 800c772:	3b01      	subs	r3, #1
 800c774:	2b06      	cmp	r3, #6
 800c776:	f200 8128 	bhi.w	800c9ca <USBD_GetDescriptor+0x276>
 800c77a:	a201      	add	r2, pc, #4	; (adr r2, 800c780 <USBD_GetDescriptor+0x2c>)
 800c77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c780:	0800c79d 	.word	0x0800c79d
 800c784:	0800c7b5 	.word	0x0800c7b5
 800c788:	0800c7f5 	.word	0x0800c7f5
 800c78c:	0800c9cb 	.word	0x0800c9cb
 800c790:	0800c9cb 	.word	0x0800c9cb
 800c794:	0800c96b 	.word	0x0800c96b
 800c798:	0800c997 	.word	0x0800c997
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	7c12      	ldrb	r2, [r2, #16]
 800c7a8:	f107 0108 	add.w	r1, r7, #8
 800c7ac:	4610      	mov	r0, r2
 800c7ae:	4798      	blx	r3
 800c7b0:	60f8      	str	r0, [r7, #12]
      break;
 800c7b2:	e112      	b.n	800c9da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	7c1b      	ldrb	r3, [r3, #16]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d10d      	bne.n	800c7d8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7c4:	f107 0208 	add.w	r2, r7, #8
 800c7c8:	4610      	mov	r0, r2
 800c7ca:	4798      	blx	r3
 800c7cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	2202      	movs	r2, #2
 800c7d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c7d6:	e100      	b.n	800c9da <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e0:	f107 0208 	add.w	r2, r7, #8
 800c7e4:	4610      	mov	r0, r2
 800c7e6:	4798      	blx	r3
 800c7e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	2202      	movs	r2, #2
 800c7f0:	701a      	strb	r2, [r3, #0]
      break;
 800c7f2:	e0f2      	b.n	800c9da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	885b      	ldrh	r3, [r3, #2]
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	2b05      	cmp	r3, #5
 800c7fc:	f200 80ac 	bhi.w	800c958 <USBD_GetDescriptor+0x204>
 800c800:	a201      	add	r2, pc, #4	; (adr r2, 800c808 <USBD_GetDescriptor+0xb4>)
 800c802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c806:	bf00      	nop
 800c808:	0800c821 	.word	0x0800c821
 800c80c:	0800c855 	.word	0x0800c855
 800c810:	0800c889 	.word	0x0800c889
 800c814:	0800c8bd 	.word	0x0800c8bd
 800c818:	0800c8f1 	.word	0x0800c8f1
 800c81c:	0800c925 	.word	0x0800c925
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d00b      	beq.n	800c844 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	7c12      	ldrb	r2, [r2, #16]
 800c838:	f107 0108 	add.w	r1, r7, #8
 800c83c:	4610      	mov	r0, r2
 800c83e:	4798      	blx	r3
 800c840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c842:	e091      	b.n	800c968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c844:	6839      	ldr	r1, [r7, #0]
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 fab2 	bl	800cdb0 <USBD_CtlError>
            err++;
 800c84c:	7afb      	ldrb	r3, [r7, #11]
 800c84e:	3301      	adds	r3, #1
 800c850:	72fb      	strb	r3, [r7, #11]
          break;
 800c852:	e089      	b.n	800c968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00b      	beq.n	800c878 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c866:	689b      	ldr	r3, [r3, #8]
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	7c12      	ldrb	r2, [r2, #16]
 800c86c:	f107 0108 	add.w	r1, r7, #8
 800c870:	4610      	mov	r0, r2
 800c872:	4798      	blx	r3
 800c874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c876:	e077      	b.n	800c968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c878:	6839      	ldr	r1, [r7, #0]
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 fa98 	bl	800cdb0 <USBD_CtlError>
            err++;
 800c880:	7afb      	ldrb	r3, [r7, #11]
 800c882:	3301      	adds	r3, #1
 800c884:	72fb      	strb	r3, [r7, #11]
          break;
 800c886:	e06f      	b.n	800c968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c88e:	68db      	ldr	r3, [r3, #12]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d00b      	beq.n	800c8ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c89a:	68db      	ldr	r3, [r3, #12]
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	7c12      	ldrb	r2, [r2, #16]
 800c8a0:	f107 0108 	add.w	r1, r7, #8
 800c8a4:	4610      	mov	r0, r2
 800c8a6:	4798      	blx	r3
 800c8a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8aa:	e05d      	b.n	800c968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c8ac:	6839      	ldr	r1, [r7, #0]
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 fa7e 	bl	800cdb0 <USBD_CtlError>
            err++;
 800c8b4:	7afb      	ldrb	r3, [r7, #11]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	72fb      	strb	r3, [r7, #11]
          break;
 800c8ba:	e055      	b.n	800c968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8c2:	691b      	ldr	r3, [r3, #16]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d00b      	beq.n	800c8e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8ce:	691b      	ldr	r3, [r3, #16]
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	7c12      	ldrb	r2, [r2, #16]
 800c8d4:	f107 0108 	add.w	r1, r7, #8
 800c8d8:	4610      	mov	r0, r2
 800c8da:	4798      	blx	r3
 800c8dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8de:	e043      	b.n	800c968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c8e0:	6839      	ldr	r1, [r7, #0]
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 fa64 	bl	800cdb0 <USBD_CtlError>
            err++;
 800c8e8:	7afb      	ldrb	r3, [r7, #11]
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	72fb      	strb	r3, [r7, #11]
          break;
 800c8ee:	e03b      	b.n	800c968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8f6:	695b      	ldr	r3, [r3, #20]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d00b      	beq.n	800c914 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c902:	695b      	ldr	r3, [r3, #20]
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	7c12      	ldrb	r2, [r2, #16]
 800c908:	f107 0108 	add.w	r1, r7, #8
 800c90c:	4610      	mov	r0, r2
 800c90e:	4798      	blx	r3
 800c910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c912:	e029      	b.n	800c968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c914:	6839      	ldr	r1, [r7, #0]
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 fa4a 	bl	800cdb0 <USBD_CtlError>
            err++;
 800c91c:	7afb      	ldrb	r3, [r7, #11]
 800c91e:	3301      	adds	r3, #1
 800c920:	72fb      	strb	r3, [r7, #11]
          break;
 800c922:	e021      	b.n	800c968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c92a:	699b      	ldr	r3, [r3, #24]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d00b      	beq.n	800c948 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c936:	699b      	ldr	r3, [r3, #24]
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	7c12      	ldrb	r2, [r2, #16]
 800c93c:	f107 0108 	add.w	r1, r7, #8
 800c940:	4610      	mov	r0, r2
 800c942:	4798      	blx	r3
 800c944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c946:	e00f      	b.n	800c968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c948:	6839      	ldr	r1, [r7, #0]
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 fa30 	bl	800cdb0 <USBD_CtlError>
            err++;
 800c950:	7afb      	ldrb	r3, [r7, #11]
 800c952:	3301      	adds	r3, #1
 800c954:	72fb      	strb	r3, [r7, #11]
          break;
 800c956:	e007      	b.n	800c968 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c958:	6839      	ldr	r1, [r7, #0]
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 fa28 	bl	800cdb0 <USBD_CtlError>
          err++;
 800c960:	7afb      	ldrb	r3, [r7, #11]
 800c962:	3301      	adds	r3, #1
 800c964:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c966:	bf00      	nop
      }
      break;
 800c968:	e037      	b.n	800c9da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	7c1b      	ldrb	r3, [r3, #16]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d109      	bne.n	800c986 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c97a:	f107 0208 	add.w	r2, r7, #8
 800c97e:	4610      	mov	r0, r2
 800c980:	4798      	blx	r3
 800c982:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c984:	e029      	b.n	800c9da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c986:	6839      	ldr	r1, [r7, #0]
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f000 fa11 	bl	800cdb0 <USBD_CtlError>
        err++;
 800c98e:	7afb      	ldrb	r3, [r7, #11]
 800c990:	3301      	adds	r3, #1
 800c992:	72fb      	strb	r3, [r7, #11]
      break;
 800c994:	e021      	b.n	800c9da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	7c1b      	ldrb	r3, [r3, #16]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d10d      	bne.n	800c9ba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9a6:	f107 0208 	add.w	r2, r7, #8
 800c9aa:	4610      	mov	r0, r2
 800c9ac:	4798      	blx	r3
 800c9ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	2207      	movs	r2, #7
 800c9b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9b8:	e00f      	b.n	800c9da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c9ba:	6839      	ldr	r1, [r7, #0]
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 f9f7 	bl	800cdb0 <USBD_CtlError>
        err++;
 800c9c2:	7afb      	ldrb	r3, [r7, #11]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	72fb      	strb	r3, [r7, #11]
      break;
 800c9c8:	e007      	b.n	800c9da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c9ca:	6839      	ldr	r1, [r7, #0]
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f000 f9ef 	bl	800cdb0 <USBD_CtlError>
      err++;
 800c9d2:	7afb      	ldrb	r3, [r7, #11]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	72fb      	strb	r3, [r7, #11]
      break;
 800c9d8:	bf00      	nop
  }

  if (err != 0U)
 800c9da:	7afb      	ldrb	r3, [r7, #11]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d11e      	bne.n	800ca1e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	88db      	ldrh	r3, [r3, #6]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d016      	beq.n	800ca16 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c9e8:	893b      	ldrh	r3, [r7, #8]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d00e      	beq.n	800ca0c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	88da      	ldrh	r2, [r3, #6]
 800c9f2:	893b      	ldrh	r3, [r7, #8]
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	bf28      	it	cs
 800c9f8:	4613      	movcs	r3, r2
 800c9fa:	b29b      	uxth	r3, r3
 800c9fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c9fe:	893b      	ldrh	r3, [r7, #8]
 800ca00:	461a      	mov	r2, r3
 800ca02:	68f9      	ldr	r1, [r7, #12]
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 fa44 	bl	800ce92 <USBD_CtlSendData>
 800ca0a:	e009      	b.n	800ca20 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ca0c:	6839      	ldr	r1, [r7, #0]
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 f9ce 	bl	800cdb0 <USBD_CtlError>
 800ca14:	e004      	b.n	800ca20 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 fa95 	bl	800cf46 <USBD_CtlSendStatus>
 800ca1c:	e000      	b.n	800ca20 <USBD_GetDescriptor+0x2cc>
    return;
 800ca1e:	bf00      	nop
  }
}
 800ca20:	3710      	adds	r7, #16
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop

0800ca28 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	889b      	ldrh	r3, [r3, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d131      	bne.n	800ca9e <USBD_SetAddress+0x76>
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	88db      	ldrh	r3, [r3, #6]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d12d      	bne.n	800ca9e <USBD_SetAddress+0x76>
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	885b      	ldrh	r3, [r3, #2]
 800ca46:	2b7f      	cmp	r3, #127	; 0x7f
 800ca48:	d829      	bhi.n	800ca9e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	885b      	ldrh	r3, [r3, #2]
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca5c:	b2db      	uxtb	r3, r3
 800ca5e:	2b03      	cmp	r3, #3
 800ca60:	d104      	bne.n	800ca6c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ca62:	6839      	ldr	r1, [r7, #0]
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 f9a3 	bl	800cdb0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca6a:	e01d      	b.n	800caa8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	7bfa      	ldrb	r2, [r7, #15]
 800ca70:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ca74:	7bfb      	ldrb	r3, [r7, #15]
 800ca76:	4619      	mov	r1, r3
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f012 f98f 	bl	801ed9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 fa61 	bl	800cf46 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ca84:	7bfb      	ldrb	r3, [r7, #15]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d004      	beq.n	800ca94 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2202      	movs	r2, #2
 800ca8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca92:	e009      	b.n	800caa8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2201      	movs	r2, #1
 800ca98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca9c:	e004      	b.n	800caa8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ca9e:	6839      	ldr	r1, [r7, #0]
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 f985 	bl	800cdb0 <USBD_CtlError>
  }
}
 800caa6:	bf00      	nop
 800caa8:	bf00      	nop
 800caaa:	3710      	adds	r7, #16
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800caba:	2300      	movs	r3, #0
 800cabc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	885b      	ldrh	r3, [r3, #2]
 800cac2:	b2da      	uxtb	r2, r3
 800cac4:	4b4c      	ldr	r3, [pc, #304]	; (800cbf8 <USBD_SetConfig+0x148>)
 800cac6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cac8:	4b4b      	ldr	r3, [pc, #300]	; (800cbf8 <USBD_SetConfig+0x148>)
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d905      	bls.n	800cadc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cad0:	6839      	ldr	r1, [r7, #0]
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 f96c 	bl	800cdb0 <USBD_CtlError>
    return USBD_FAIL;
 800cad8:	2303      	movs	r3, #3
 800cada:	e088      	b.n	800cbee <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	2b02      	cmp	r3, #2
 800cae6:	d002      	beq.n	800caee <USBD_SetConfig+0x3e>
 800cae8:	2b03      	cmp	r3, #3
 800caea:	d025      	beq.n	800cb38 <USBD_SetConfig+0x88>
 800caec:	e071      	b.n	800cbd2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800caee:	4b42      	ldr	r3, [pc, #264]	; (800cbf8 <USBD_SetConfig+0x148>)
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d01c      	beq.n	800cb30 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800caf6:	4b40      	ldr	r3, [pc, #256]	; (800cbf8 <USBD_SetConfig+0x148>)
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	461a      	mov	r2, r3
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb00:	4b3d      	ldr	r3, [pc, #244]	; (800cbf8 <USBD_SetConfig+0x148>)
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	4619      	mov	r1, r3
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f7ff f948 	bl	800bd9c <USBD_SetClassConfig>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cb10:	7bfb      	ldrb	r3, [r7, #15]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d004      	beq.n	800cb20 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800cb16:	6839      	ldr	r1, [r7, #0]
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f000 f949 	bl	800cdb0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb1e:	e065      	b.n	800cbec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 fa10 	bl	800cf46 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2203      	movs	r2, #3
 800cb2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cb2e:	e05d      	b.n	800cbec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f000 fa08 	bl	800cf46 <USBD_CtlSendStatus>
      break;
 800cb36:	e059      	b.n	800cbec <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cb38:	4b2f      	ldr	r3, [pc, #188]	; (800cbf8 <USBD_SetConfig+0x148>)
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d112      	bne.n	800cb66 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2202      	movs	r2, #2
 800cb44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cb48:	4b2b      	ldr	r3, [pc, #172]	; (800cbf8 <USBD_SetConfig+0x148>)
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb52:	4b29      	ldr	r3, [pc, #164]	; (800cbf8 <USBD_SetConfig+0x148>)
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	4619      	mov	r1, r3
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f7ff f93b 	bl	800bdd4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f000 f9f1 	bl	800cf46 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb64:	e042      	b.n	800cbec <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800cb66:	4b24      	ldr	r3, [pc, #144]	; (800cbf8 <USBD_SetConfig+0x148>)
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d02a      	beq.n	800cbca <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f7ff f929 	bl	800bdd4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cb82:	4b1d      	ldr	r3, [pc, #116]	; (800cbf8 <USBD_SetConfig+0x148>)
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	461a      	mov	r2, r3
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb8c:	4b1a      	ldr	r3, [pc, #104]	; (800cbf8 <USBD_SetConfig+0x148>)
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	4619      	mov	r1, r3
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f7ff f902 	bl	800bd9c <USBD_SetClassConfig>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cb9c:	7bfb      	ldrb	r3, [r7, #15]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d00f      	beq.n	800cbc2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800cba2:	6839      	ldr	r1, [r7, #0]
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f000 f903 	bl	800cdb0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f7ff f90e 	bl	800bdd4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2202      	movs	r2, #2
 800cbbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cbc0:	e014      	b.n	800cbec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f9bf 	bl	800cf46 <USBD_CtlSendStatus>
      break;
 800cbc8:	e010      	b.n	800cbec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 f9bb 	bl	800cf46 <USBD_CtlSendStatus>
      break;
 800cbd0:	e00c      	b.n	800cbec <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800cbd2:	6839      	ldr	r1, [r7, #0]
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f000 f8eb 	bl	800cdb0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cbda:	4b07      	ldr	r3, [pc, #28]	; (800cbf8 <USBD_SetConfig+0x148>)
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	4619      	mov	r1, r3
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f7ff f8f7 	bl	800bdd4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cbe6:	2303      	movs	r3, #3
 800cbe8:	73fb      	strb	r3, [r7, #15]
      break;
 800cbea:	bf00      	nop
  }

  return ret;
 800cbec:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3710      	adds	r7, #16
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	20000588 	.word	0x20000588

0800cbfc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	88db      	ldrh	r3, [r3, #6]
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	d004      	beq.n	800cc18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cc0e:	6839      	ldr	r1, [r7, #0]
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 f8cd 	bl	800cdb0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cc16:	e023      	b.n	800cc60 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	2b02      	cmp	r3, #2
 800cc22:	dc02      	bgt.n	800cc2a <USBD_GetConfig+0x2e>
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	dc03      	bgt.n	800cc30 <USBD_GetConfig+0x34>
 800cc28:	e015      	b.n	800cc56 <USBD_GetConfig+0x5a>
 800cc2a:	2b03      	cmp	r3, #3
 800cc2c:	d00b      	beq.n	800cc46 <USBD_GetConfig+0x4a>
 800cc2e:	e012      	b.n	800cc56 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2200      	movs	r2, #0
 800cc34:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	3308      	adds	r3, #8
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 f927 	bl	800ce92 <USBD_CtlSendData>
        break;
 800cc44:	e00c      	b.n	800cc60 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	3304      	adds	r3, #4
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 f91f 	bl	800ce92 <USBD_CtlSendData>
        break;
 800cc54:	e004      	b.n	800cc60 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cc56:	6839      	ldr	r1, [r7, #0]
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 f8a9 	bl	800cdb0 <USBD_CtlError>
        break;
 800cc5e:	bf00      	nop
}
 800cc60:	bf00      	nop
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc78:	b2db      	uxtb	r3, r3
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	2b02      	cmp	r3, #2
 800cc7e:	d81e      	bhi.n	800ccbe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	88db      	ldrh	r3, [r3, #6]
 800cc84:	2b02      	cmp	r3, #2
 800cc86:	d004      	beq.n	800cc92 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cc88:	6839      	ldr	r1, [r7, #0]
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 f890 	bl	800cdb0 <USBD_CtlError>
        break;
 800cc90:	e01a      	b.n	800ccc8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2201      	movs	r2, #1
 800cc96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d005      	beq.n	800ccae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	68db      	ldr	r3, [r3, #12]
 800cca6:	f043 0202 	orr.w	r2, r3, #2
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	330c      	adds	r3, #12
 800ccb2:	2202      	movs	r2, #2
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 f8eb 	bl	800ce92 <USBD_CtlSendData>
      break;
 800ccbc:	e004      	b.n	800ccc8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ccbe:	6839      	ldr	r1, [r7, #0]
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 f875 	bl	800cdb0 <USBD_CtlError>
      break;
 800ccc6:	bf00      	nop
  }
}
 800ccc8:	bf00      	nop
 800ccca:	3708      	adds	r7, #8
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	885b      	ldrh	r3, [r3, #2]
 800ccde:	2b01      	cmp	r3, #1
 800cce0:	d106      	bne.n	800ccf0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2201      	movs	r2, #1
 800cce6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f000 f92b 	bl	800cf46 <USBD_CtlSendStatus>
  }
}
 800ccf0:	bf00      	nop
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd08:	b2db      	uxtb	r3, r3
 800cd0a:	3b01      	subs	r3, #1
 800cd0c:	2b02      	cmp	r3, #2
 800cd0e:	d80b      	bhi.n	800cd28 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	885b      	ldrh	r3, [r3, #2]
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d10c      	bne.n	800cd32 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 f910 	bl	800cf46 <USBD_CtlSendStatus>
      }
      break;
 800cd26:	e004      	b.n	800cd32 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cd28:	6839      	ldr	r1, [r7, #0]
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 f840 	bl	800cdb0 <USBD_CtlError>
      break;
 800cd30:	e000      	b.n	800cd34 <USBD_ClrFeature+0x3c>
      break;
 800cd32:	bf00      	nop
  }
}
 800cd34:	bf00      	nop
 800cd36:	3708      	adds	r7, #8
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	781a      	ldrb	r2, [r3, #0]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	3301      	adds	r3, #1
 800cd56:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	781a      	ldrb	r2, [r3, #0]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	3301      	adds	r3, #1
 800cd64:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cd66:	68f8      	ldr	r0, [r7, #12]
 800cd68:	f7ff fabb 	bl	800c2e2 <SWAPBYTE>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	461a      	mov	r2, r3
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	3301      	adds	r3, #1
 800cd78:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cd80:	68f8      	ldr	r0, [r7, #12]
 800cd82:	f7ff faae 	bl	800c2e2 <SWAPBYTE>
 800cd86:	4603      	mov	r3, r0
 800cd88:	461a      	mov	r2, r3
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	3301      	adds	r3, #1
 800cd92:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	3301      	adds	r3, #1
 800cd98:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cd9a:	68f8      	ldr	r0, [r7, #12]
 800cd9c:	f7ff faa1 	bl	800c2e2 <SWAPBYTE>
 800cda0:	4603      	mov	r3, r0
 800cda2:	461a      	mov	r2, r3
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	80da      	strh	r2, [r3, #6]
}
 800cda8:	bf00      	nop
 800cdaa:	3710      	adds	r7, #16
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cdba:	2180      	movs	r1, #128	; 0x80
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f011 ff83 	bl	801ecc8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cdc2:	2100      	movs	r1, #0
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f011 ff7f 	bl	801ecc8 <USBD_LL_StallEP>
}
 800cdca:	bf00      	nop
 800cdcc:	3708      	adds	r7, #8
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}

0800cdd2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cdd2:	b580      	push	{r7, lr}
 800cdd4:	b086      	sub	sp, #24
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	60f8      	str	r0, [r7, #12]
 800cdda:	60b9      	str	r1, [r7, #8]
 800cddc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cdde:	2300      	movs	r3, #0
 800cde0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d036      	beq.n	800ce56 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cdec:	6938      	ldr	r0, [r7, #16]
 800cdee:	f000 f836 	bl	800ce5e <USBD_GetLen>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	005b      	lsls	r3, r3, #1
 800cdfa:	b29a      	uxth	r2, r3
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ce00:	7dfb      	ldrb	r3, [r7, #23]
 800ce02:	68ba      	ldr	r2, [r7, #8]
 800ce04:	4413      	add	r3, r2
 800ce06:	687a      	ldr	r2, [r7, #4]
 800ce08:	7812      	ldrb	r2, [r2, #0]
 800ce0a:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce0c:	7dfb      	ldrb	r3, [r7, #23]
 800ce0e:	3301      	adds	r3, #1
 800ce10:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ce12:	7dfb      	ldrb	r3, [r7, #23]
 800ce14:	68ba      	ldr	r2, [r7, #8]
 800ce16:	4413      	add	r3, r2
 800ce18:	2203      	movs	r2, #3
 800ce1a:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce1c:	7dfb      	ldrb	r3, [r7, #23]
 800ce1e:	3301      	adds	r3, #1
 800ce20:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ce22:	e013      	b.n	800ce4c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ce24:	7dfb      	ldrb	r3, [r7, #23]
 800ce26:	68ba      	ldr	r2, [r7, #8]
 800ce28:	4413      	add	r3, r2
 800ce2a:	693a      	ldr	r2, [r7, #16]
 800ce2c:	7812      	ldrb	r2, [r2, #0]
 800ce2e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	3301      	adds	r3, #1
 800ce34:	613b      	str	r3, [r7, #16]
    idx++;
 800ce36:	7dfb      	ldrb	r3, [r7, #23]
 800ce38:	3301      	adds	r3, #1
 800ce3a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ce3c:	7dfb      	ldrb	r3, [r7, #23]
 800ce3e:	68ba      	ldr	r2, [r7, #8]
 800ce40:	4413      	add	r3, r2
 800ce42:	2200      	movs	r2, #0
 800ce44:	701a      	strb	r2, [r3, #0]
    idx++;
 800ce46:	7dfb      	ldrb	r3, [r7, #23]
 800ce48:	3301      	adds	r3, #1
 800ce4a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d1e7      	bne.n	800ce24 <USBD_GetString+0x52>
 800ce54:	e000      	b.n	800ce58 <USBD_GetString+0x86>
    return;
 800ce56:	bf00      	nop
  }
}
 800ce58:	3718      	adds	r7, #24
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}

0800ce5e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ce5e:	b480      	push	{r7}
 800ce60:	b085      	sub	sp, #20
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ce66:	2300      	movs	r3, #0
 800ce68:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ce6e:	e005      	b.n	800ce7c <USBD_GetLen+0x1e>
  {
    len++;
 800ce70:	7bfb      	ldrb	r3, [r7, #15]
 800ce72:	3301      	adds	r3, #1
 800ce74:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d1f5      	bne.n	800ce70 <USBD_GetLen+0x12>
  }

  return len;
 800ce84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3714      	adds	r7, #20
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr

0800ce92 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ce92:	b580      	push	{r7, lr}
 800ce94:	b084      	sub	sp, #16
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	60f8      	str	r0, [r7, #12]
 800ce9a:	60b9      	str	r1, [r7, #8]
 800ce9c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2202      	movs	r2, #2
 800cea2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	68ba      	ldr	r2, [r7, #8]
 800ceb6:	2100      	movs	r1, #0
 800ceb8:	68f8      	ldr	r0, [r7, #12]
 800ceba:	f011 ff8e 	bl	801edda <USBD_LL_Transmit>

  return USBD_OK;
 800cebe:	2300      	movs	r3, #0
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3710      	adds	r7, #16
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	60b9      	str	r1, [r7, #8]
 800ced2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	68ba      	ldr	r2, [r7, #8]
 800ced8:	2100      	movs	r1, #0
 800ceda:	68f8      	ldr	r0, [r7, #12]
 800cedc:	f011 ff7d 	bl	801edda <USBD_LL_Transmit>

  return USBD_OK;
 800cee0:	2300      	movs	r3, #0
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3710      	adds	r7, #16
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b084      	sub	sp, #16
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	60f8      	str	r0, [r7, #12]
 800cef2:	60b9      	str	r1, [r7, #8]
 800cef4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2203      	movs	r2, #3
 800cefa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	68ba      	ldr	r2, [r7, #8]
 800cf12:	2100      	movs	r1, #0
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f011 ff81 	bl	801ee1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf1a:	2300      	movs	r3, #0
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3710      	adds	r7, #16
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	68ba      	ldr	r2, [r7, #8]
 800cf34:	2100      	movs	r1, #0
 800cf36:	68f8      	ldr	r0, [r7, #12]
 800cf38:	f011 ff70 	bl	801ee1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b082      	sub	sp, #8
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2204      	movs	r2, #4
 800cf52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cf56:	2300      	movs	r3, #0
 800cf58:	2200      	movs	r2, #0
 800cf5a:	2100      	movs	r1, #0
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f011 ff3c 	bl	801edda <USBD_LL_Transmit>

  return USBD_OK;
 800cf62:	2300      	movs	r3, #0
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3708      	adds	r7, #8
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2205      	movs	r2, #5
 800cf78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	2200      	movs	r2, #0
 800cf80:	2100      	movs	r1, #0
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f011 ff4a 	bl	801ee1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf88:	2300      	movs	r3, #0
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3708      	adds	r7, #8
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}

0800cf92 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cf92:	b480      	push	{r7}
 800cf94:	b085      	sub	sp, #20
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	4603      	mov	r3, r0
 800cf9a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cfa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cfa4:	2b84      	cmp	r3, #132	; 0x84
 800cfa6:	d005      	beq.n	800cfb4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cfa8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	4413      	add	r3, r2
 800cfb0:	3303      	adds	r3, #3
 800cfb2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3714      	adds	r7, #20
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr

0800cfc2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800cfc2:	b480      	push	{r7}
 800cfc4:	b083      	sub	sp, #12
 800cfc6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfc8:	f3ef 8305 	mrs	r3, IPSR
 800cfcc:	607b      	str	r3, [r7, #4]
  return(result);
 800cfce:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	bf14      	ite	ne
 800cfd4:	2301      	movne	r3, #1
 800cfd6:	2300      	moveq	r3, #0
 800cfd8:	b2db      	uxtb	r3, r3
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	370c      	adds	r7, #12
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr

0800cfe6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cfea:	f001 fcdd 	bl	800e9a8 <vTaskStartScheduler>
  
  return osOK;
 800cfee:	2300      	movs	r3, #0
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800cff8:	f7ff ffe3 	bl	800cfc2 <inHandlerMode>
 800cffc:	4603      	mov	r3, r0
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d003      	beq.n	800d00a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800d002:	f001 fdeb 	bl	800ebdc <xTaskGetTickCountFromISR>
 800d006:	4603      	mov	r3, r0
 800d008:	e002      	b.n	800d010 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800d00a:	f001 fdd7 	bl	800ebbc <xTaskGetTickCount>
 800d00e:	4603      	mov	r3, r0
  }
}
 800d010:	4618      	mov	r0, r3
 800d012:	bd80      	pop	{r7, pc}

0800d014 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d014:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d016:	b089      	sub	sp, #36	; 0x24
 800d018:	af04      	add	r7, sp, #16
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	695b      	ldr	r3, [r3, #20]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d020      	beq.n	800d068 <osThreadCreate+0x54>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	699b      	ldr	r3, [r3, #24]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d01c      	beq.n	800d068 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	685c      	ldr	r4, [r3, #4]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681d      	ldr	r5, [r3, #0]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	691e      	ldr	r6, [r3, #16]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d040:	4618      	mov	r0, r3
 800d042:	f7ff ffa6 	bl	800cf92 <makeFreeRtosPriority>
 800d046:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	695b      	ldr	r3, [r3, #20]
 800d04c:	687a      	ldr	r2, [r7, #4]
 800d04e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d050:	9202      	str	r2, [sp, #8]
 800d052:	9301      	str	r3, [sp, #4]
 800d054:	9100      	str	r1, [sp, #0]
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	4632      	mov	r2, r6
 800d05a:	4629      	mov	r1, r5
 800d05c:	4620      	mov	r0, r4
 800d05e:	f001 fb0f 	bl	800e680 <xTaskCreateStatic>
 800d062:	4603      	mov	r3, r0
 800d064:	60fb      	str	r3, [r7, #12]
 800d066:	e01c      	b.n	800d0a2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	685c      	ldr	r4, [r3, #4]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d074:	b29e      	uxth	r6, r3
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d07c:	4618      	mov	r0, r3
 800d07e:	f7ff ff88 	bl	800cf92 <makeFreeRtosPriority>
 800d082:	4602      	mov	r2, r0
 800d084:	f107 030c 	add.w	r3, r7, #12
 800d088:	9301      	str	r3, [sp, #4]
 800d08a:	9200      	str	r2, [sp, #0]
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	4632      	mov	r2, r6
 800d090:	4629      	mov	r1, r5
 800d092:	4620      	mov	r0, r4
 800d094:	f001 fb51 	bl	800e73a <xTaskCreate>
 800d098:	4603      	mov	r3, r0
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	d001      	beq.n	800d0a2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	e000      	b.n	800d0a4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3714      	adds	r7, #20
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d0ac <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d007      	beq.n	800d0cc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	2001      	movs	r0, #1
 800d0c4:	f000 fc7d 	bl	800d9c2 <xQueueCreateMutexStatic>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	e003      	b.n	800d0d4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800d0cc:	2001      	movs	r0, #1
 800d0ce:	f000 fc60 	bl	800d992 <xQueueCreateMutex>
 800d0d2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3708      	adds	r7, #8
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d101      	bne.n	800d0f4 <osMutexWait+0x18>
    return osErrorParameter;
 800d0f0:	2380      	movs	r3, #128	; 0x80
 800d0f2:	e03a      	b.n	800d16a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0fe:	d103      	bne.n	800d108 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800d100:	f04f 33ff 	mov.w	r3, #4294967295
 800d104:	60fb      	str	r3, [r7, #12]
 800d106:	e009      	b.n	800d11c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d006      	beq.n	800d11c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d101      	bne.n	800d11c <osMutexWait+0x40>
      ticks = 1;
 800d118:	2301      	movs	r3, #1
 800d11a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800d11c:	f7ff ff51 	bl	800cfc2 <inHandlerMode>
 800d120:	4603      	mov	r3, r0
 800d122:	2b00      	cmp	r3, #0
 800d124:	d017      	beq.n	800d156 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d126:	f107 0308 	add.w	r3, r7, #8
 800d12a:	461a      	mov	r2, r3
 800d12c:	2100      	movs	r1, #0
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f001 f874 	bl	800e21c <xQueueReceiveFromISR>
 800d134:	4603      	mov	r3, r0
 800d136:	2b01      	cmp	r3, #1
 800d138:	d001      	beq.n	800d13e <osMutexWait+0x62>
      return osErrorOS;
 800d13a:	23ff      	movs	r3, #255	; 0xff
 800d13c:	e015      	b.n	800d16a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d011      	beq.n	800d168 <osMutexWait+0x8c>
 800d144:	4b0b      	ldr	r3, [pc, #44]	; (800d174 <osMutexWait+0x98>)
 800d146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d14a:	601a      	str	r2, [r3, #0]
 800d14c:	f3bf 8f4f 	dsb	sy
 800d150:	f3bf 8f6f 	isb	sy
 800d154:	e008      	b.n	800d168 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800d156:	68f9      	ldr	r1, [r7, #12]
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f000 ff53 	bl	800e004 <xQueueSemaphoreTake>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b01      	cmp	r3, #1
 800d162:	d001      	beq.n	800d168 <osMutexWait+0x8c>
    return osErrorOS;
 800d164:	23ff      	movs	r3, #255	; 0xff
 800d166:	e000      	b.n	800d16a <osMutexWait+0x8e>
  }
  
  return osOK;
 800d168:	2300      	movs	r3, #0
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	e000ed04 	.word	0xe000ed04

0800d178 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800d180:	2300      	movs	r3, #0
 800d182:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800d184:	2300      	movs	r3, #0
 800d186:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800d188:	f7ff ff1b 	bl	800cfc2 <inHandlerMode>
 800d18c:	4603      	mov	r3, r0
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d016      	beq.n	800d1c0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d192:	f107 0308 	add.w	r3, r7, #8
 800d196:	4619      	mov	r1, r3
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f000 fdc6 	bl	800dd2a <xQueueGiveFromISR>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d001      	beq.n	800d1a8 <osMutexRelease+0x30>
      return osErrorOS;
 800d1a4:	23ff      	movs	r3, #255	; 0xff
 800d1a6:	e017      	b.n	800d1d8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d013      	beq.n	800d1d6 <osMutexRelease+0x5e>
 800d1ae:	4b0c      	ldr	r3, [pc, #48]	; (800d1e0 <osMutexRelease+0x68>)
 800d1b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1b4:	601a      	str	r2, [r3, #0]
 800d1b6:	f3bf 8f4f 	dsb	sy
 800d1ba:	f3bf 8f6f 	isb	sy
 800d1be:	e00a      	b.n	800d1d6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	2100      	movs	r1, #0
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f000 fc16 	bl	800d9f8 <xQueueGenericSend>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b01      	cmp	r3, #1
 800d1d0:	d001      	beq.n	800d1d6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800d1d2:	23ff      	movs	r3, #255	; 0xff
 800d1d4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3710      	adds	r7, #16
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}
 800d1e0:	e000ed04 	.word	0xe000ed04

0800d1e4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b086      	sub	sp, #24
 800d1e8:	af02      	add	r7, sp, #8
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d00f      	beq.n	800d216 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d10a      	bne.n	800d212 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	685b      	ldr	r3, [r3, #4]
 800d200:	2203      	movs	r2, #3
 800d202:	9200      	str	r2, [sp, #0]
 800d204:	2200      	movs	r2, #0
 800d206:	2100      	movs	r1, #0
 800d208:	2001      	movs	r0, #1
 800d20a:	f000 fad7 	bl	800d7bc <xQueueGenericCreateStatic>
 800d20e:	4603      	mov	r3, r0
 800d210:	e016      	b.n	800d240 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800d212:	2300      	movs	r3, #0
 800d214:	e014      	b.n	800d240 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	2b01      	cmp	r3, #1
 800d21a:	d110      	bne.n	800d23e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800d21c:	2203      	movs	r2, #3
 800d21e:	2100      	movs	r1, #0
 800d220:	2001      	movs	r0, #1
 800d222:	f000 fb43 	bl	800d8ac <xQueueGenericCreate>
 800d226:	60f8      	str	r0, [r7, #12]
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d005      	beq.n	800d23a <osSemaphoreCreate+0x56>
 800d22e:	2300      	movs	r3, #0
 800d230:	2200      	movs	r2, #0
 800d232:	2100      	movs	r1, #0
 800d234:	68f8      	ldr	r0, [r7, #12]
 800d236:	f000 fbdf 	bl	800d9f8 <xQueueGenericSend>
      return sema;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	e000      	b.n	800d240 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800d23e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800d240:	4618      	mov	r0, r3
 800d242:	3710      	adds	r7, #16
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d252:	2300      	movs	r3, #0
 800d254:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d101      	bne.n	800d260 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800d25c:	2380      	movs	r3, #128	; 0x80
 800d25e:	e03a      	b.n	800d2d6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800d260:	2300      	movs	r3, #0
 800d262:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d26a:	d103      	bne.n	800d274 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800d26c:	f04f 33ff 	mov.w	r3, #4294967295
 800d270:	60fb      	str	r3, [r7, #12]
 800d272:	e009      	b.n	800d288 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d006      	beq.n	800d288 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d101      	bne.n	800d288 <osSemaphoreWait+0x40>
      ticks = 1;
 800d284:	2301      	movs	r3, #1
 800d286:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800d288:	f7ff fe9b 	bl	800cfc2 <inHandlerMode>
 800d28c:	4603      	mov	r3, r0
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d017      	beq.n	800d2c2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d292:	f107 0308 	add.w	r3, r7, #8
 800d296:	461a      	mov	r2, r3
 800d298:	2100      	movs	r1, #0
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 ffbe 	bl	800e21c <xQueueReceiveFromISR>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d001      	beq.n	800d2aa <osSemaphoreWait+0x62>
      return osErrorOS;
 800d2a6:	23ff      	movs	r3, #255	; 0xff
 800d2a8:	e015      	b.n	800d2d6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d011      	beq.n	800d2d4 <osSemaphoreWait+0x8c>
 800d2b0:	4b0b      	ldr	r3, [pc, #44]	; (800d2e0 <osSemaphoreWait+0x98>)
 800d2b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2b6:	601a      	str	r2, [r3, #0]
 800d2b8:	f3bf 8f4f 	dsb	sy
 800d2bc:	f3bf 8f6f 	isb	sy
 800d2c0:	e008      	b.n	800d2d4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d2c2:	68f9      	ldr	r1, [r7, #12]
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f000 fe9d 	bl	800e004 <xQueueSemaphoreTake>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d001      	beq.n	800d2d4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800d2d0:	23ff      	movs	r3, #255	; 0xff
 800d2d2:	e000      	b.n	800d2d6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800d2d4:	2300      	movs	r3, #0
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3710      	adds	r7, #16
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	e000ed04 	.word	0xe000ed04

0800d2e4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800d2f4:	f7ff fe65 	bl	800cfc2 <inHandlerMode>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d016      	beq.n	800d32c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d2fe:	f107 0308 	add.w	r3, r7, #8
 800d302:	4619      	mov	r1, r3
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f000 fd10 	bl	800dd2a <xQueueGiveFromISR>
 800d30a:	4603      	mov	r3, r0
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d001      	beq.n	800d314 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800d310:	23ff      	movs	r3, #255	; 0xff
 800d312:	e017      	b.n	800d344 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d013      	beq.n	800d342 <osSemaphoreRelease+0x5e>
 800d31a:	4b0c      	ldr	r3, [pc, #48]	; (800d34c <osSemaphoreRelease+0x68>)
 800d31c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d320:	601a      	str	r2, [r3, #0]
 800d322:	f3bf 8f4f 	dsb	sy
 800d326:	f3bf 8f6f 	isb	sy
 800d32a:	e00a      	b.n	800d342 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800d32c:	2300      	movs	r3, #0
 800d32e:	2200      	movs	r2, #0
 800d330:	2100      	movs	r1, #0
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 fb60 	bl	800d9f8 <xQueueGenericSend>
 800d338:	4603      	mov	r3, r0
 800d33a:	2b01      	cmp	r3, #1
 800d33c:	d001      	beq.n	800d342 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800d33e:	23ff      	movs	r3, #255	; 0xff
 800d340:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800d342:	68fb      	ldr	r3, [r7, #12]
}
 800d344:	4618      	mov	r0, r3
 800d346:	3710      	adds	r7, #16
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	e000ed04 	.word	0xe000ed04

0800d350 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800d358:	f7ff fe33 	bl	800cfc2 <inHandlerMode>
 800d35c:	4603      	mov	r3, r0
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d001      	beq.n	800d366 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800d362:	2382      	movs	r3, #130	; 0x82
 800d364:	e003      	b.n	800d36e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f001 f814 	bl	800e394 <vQueueDelete>

  return osOK; 
 800d36c:	2300      	movs	r3, #0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3708      	adds	r7, #8
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d376:	b590      	push	{r4, r7, lr}
 800d378:	b085      	sub	sp, #20
 800d37a:	af02      	add	r7, sp, #8
 800d37c:	6078      	str	r0, [r7, #4]
 800d37e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	689b      	ldr	r3, [r3, #8]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d011      	beq.n	800d3ac <osMessageCreate+0x36>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	68db      	ldr	r3, [r3, #12]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d00d      	beq.n	800d3ac <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6818      	ldr	r0, [r3, #0]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6859      	ldr	r1, [r3, #4]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	689a      	ldr	r2, [r3, #8]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	68db      	ldr	r3, [r3, #12]
 800d3a0:	2400      	movs	r4, #0
 800d3a2:	9400      	str	r4, [sp, #0]
 800d3a4:	f000 fa0a 	bl	800d7bc <xQueueGenericCreateStatic>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	e008      	b.n	800d3be <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6818      	ldr	r0, [r3, #0]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	f000 fa78 	bl	800d8ac <xQueueGenericCreate>
 800d3bc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	370c      	adds	r7, #12
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd90      	pop	{r4, r7, pc}
	...

0800d3c8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b086      	sub	sp, #24
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d101      	bne.n	800d3e6 <osMessagePut+0x1e>
    ticks = 1;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800d3e6:	f7ff fdec 	bl	800cfc2 <inHandlerMode>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d018      	beq.n	800d422 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800d3f0:	f107 0210 	add.w	r2, r7, #16
 800d3f4:	f107 0108 	add.w	r1, r7, #8
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	68f8      	ldr	r0, [r7, #12]
 800d3fc:	f000 fbfa 	bl	800dbf4 <xQueueGenericSendFromISR>
 800d400:	4603      	mov	r3, r0
 800d402:	2b01      	cmp	r3, #1
 800d404:	d001      	beq.n	800d40a <osMessagePut+0x42>
      return osErrorOS;
 800d406:	23ff      	movs	r3, #255	; 0xff
 800d408:	e018      	b.n	800d43c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d014      	beq.n	800d43a <osMessagePut+0x72>
 800d410:	4b0c      	ldr	r3, [pc, #48]	; (800d444 <osMessagePut+0x7c>)
 800d412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d416:	601a      	str	r2, [r3, #0]
 800d418:	f3bf 8f4f 	dsb	sy
 800d41c:	f3bf 8f6f 	isb	sy
 800d420:	e00b      	b.n	800d43a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800d422:	f107 0108 	add.w	r1, r7, #8
 800d426:	2300      	movs	r3, #0
 800d428:	697a      	ldr	r2, [r7, #20]
 800d42a:	68f8      	ldr	r0, [r7, #12]
 800d42c:	f000 fae4 	bl	800d9f8 <xQueueGenericSend>
 800d430:	4603      	mov	r3, r0
 800d432:	2b01      	cmp	r3, #1
 800d434:	d001      	beq.n	800d43a <osMessagePut+0x72>
      return osErrorOS;
 800d436:	23ff      	movs	r3, #255	; 0xff
 800d438:	e000      	b.n	800d43c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800d43a:	2300      	movs	r3, #0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3718      	adds	r7, #24
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}
 800d444:	e000ed04 	.word	0xe000ed04

0800d448 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800d448:	b590      	push	{r4, r7, lr}
 800d44a:	b08b      	sub	sp, #44	; 0x2c
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800d458:	2300      	movs	r3, #0
 800d45a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d10a      	bne.n	800d478 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800d462:	2380      	movs	r3, #128	; 0x80
 800d464:	617b      	str	r3, [r7, #20]
    return event;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	461c      	mov	r4, r3
 800d46a:	f107 0314 	add.w	r3, r7, #20
 800d46e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d472:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d476:	e054      	b.n	800d522 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800d478:	2300      	movs	r3, #0
 800d47a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800d47c:	2300      	movs	r3, #0
 800d47e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d486:	d103      	bne.n	800d490 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800d488:	f04f 33ff 	mov.w	r3, #4294967295
 800d48c:	627b      	str	r3, [r7, #36]	; 0x24
 800d48e:	e009      	b.n	800d4a4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d006      	beq.n	800d4a4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800d49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d101      	bne.n	800d4a4 <osMessageGet+0x5c>
      ticks = 1;
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800d4a4:	f7ff fd8d 	bl	800cfc2 <inHandlerMode>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d01c      	beq.n	800d4e8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800d4ae:	f107 0220 	add.w	r2, r7, #32
 800d4b2:	f107 0314 	add.w	r3, r7, #20
 800d4b6:	3304      	adds	r3, #4
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	68b8      	ldr	r0, [r7, #8]
 800d4bc:	f000 feae 	bl	800e21c <xQueueReceiveFromISR>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d102      	bne.n	800d4cc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800d4c6:	2310      	movs	r3, #16
 800d4c8:	617b      	str	r3, [r7, #20]
 800d4ca:	e001      	b.n	800d4d0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d4d0:	6a3b      	ldr	r3, [r7, #32]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d01d      	beq.n	800d512 <osMessageGet+0xca>
 800d4d6:	4b15      	ldr	r3, [pc, #84]	; (800d52c <osMessageGet+0xe4>)
 800d4d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4dc:	601a      	str	r2, [r3, #0]
 800d4de:	f3bf 8f4f 	dsb	sy
 800d4e2:	f3bf 8f6f 	isb	sy
 800d4e6:	e014      	b.n	800d512 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800d4e8:	f107 0314 	add.w	r3, r7, #20
 800d4ec:	3304      	adds	r3, #4
 800d4ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	68b8      	ldr	r0, [r7, #8]
 800d4f4:	f000 fca6 	bl	800de44 <xQueueReceive>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d102      	bne.n	800d504 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800d4fe:	2310      	movs	r3, #16
 800d500:	617b      	str	r3, [r7, #20]
 800d502:	e006      	b.n	800d512 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d506:	2b00      	cmp	r3, #0
 800d508:	d101      	bne.n	800d50e <osMessageGet+0xc6>
 800d50a:	2300      	movs	r3, #0
 800d50c:	e000      	b.n	800d510 <osMessageGet+0xc8>
 800d50e:	2340      	movs	r3, #64	; 0x40
 800d510:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	461c      	mov	r4, r3
 800d516:	f107 0314 	add.w	r3, r7, #20
 800d51a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d51e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d522:	68f8      	ldr	r0, [r7, #12]
 800d524:	372c      	adds	r7, #44	; 0x2c
 800d526:	46bd      	mov	sp, r7
 800d528:	bd90      	pop	{r4, r7, pc}
 800d52a:	bf00      	nop
 800d52c:	e000ed04 	.word	0xe000ed04

0800d530 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800d538:	f7ff fd43 	bl	800cfc2 <inHandlerMode>
 800d53c:	4603      	mov	r3, r0
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d004      	beq.n	800d54c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 ff08 	bl	800e358 <uxQueueMessagesWaitingFromISR>
 800d548:	4603      	mov	r3, r0
 800d54a:	e003      	b.n	800d554 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 fee5 	bl	800e31c <uxQueueMessagesWaiting>
 800d552:	4603      	mov	r3, r0
  }
}
 800d554:	4618      	mov	r0, r3
 800d556:	3708      	adds	r7, #8
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b082      	sub	sp, #8
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800d564:	f7ff fd2d 	bl	800cfc2 <inHandlerMode>
 800d568:	4603      	mov	r3, r0
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d001      	beq.n	800d572 <osMessageDelete+0x16>
    return osErrorISR;
 800d56e:	2382      	movs	r3, #130	; 0x82
 800d570:	e003      	b.n	800d57a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f000 ff0e 	bl	800e394 <vQueueDelete>

  return osOK; 
 800d578:	2300      	movs	r3, #0
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3708      	adds	r7, #8
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}

0800d582 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d582:	b480      	push	{r7}
 800d584:	b083      	sub	sp, #12
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f103 0208 	add.w	r2, r3, #8
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f04f 32ff 	mov.w	r2, #4294967295
 800d59a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f103 0208 	add.w	r2, r3, #8
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f103 0208 	add.w	r2, r3, #8
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d5b6:	bf00      	nop
 800d5b8:	370c      	adds	r7, #12
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr

0800d5c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d5c2:	b480      	push	{r7}
 800d5c4:	b083      	sub	sp, #12
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d5d0:	bf00      	nop
 800d5d2:	370c      	adds	r7, #12
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr

0800d5dc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b085      	sub	sp, #20
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	68fa      	ldr	r2, [r7, #12]
 800d5f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	689a      	ldr	r2, [r3, #8]
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	689b      	ldr	r3, [r3, #8]
 800d5fe:	683a      	ldr	r2, [r7, #0]
 800d600:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	683a      	ldr	r2, [r7, #0]
 800d606:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	1c5a      	adds	r2, r3, #1
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	601a      	str	r2, [r3, #0]
}
 800d618:	bf00      	nop
 800d61a:	3714      	adds	r7, #20
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr

0800d624 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d624:	b480      	push	{r7}
 800d626:	b085      	sub	sp, #20
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d63a:	d103      	bne.n	800d644 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	691b      	ldr	r3, [r3, #16]
 800d640:	60fb      	str	r3, [r7, #12]
 800d642:	e00c      	b.n	800d65e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	3308      	adds	r3, #8
 800d648:	60fb      	str	r3, [r7, #12]
 800d64a:	e002      	b.n	800d652 <vListInsert+0x2e>
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	60fb      	str	r3, [r7, #12]
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	685b      	ldr	r3, [r3, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	68ba      	ldr	r2, [r7, #8]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d2f6      	bcs.n	800d64c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	685a      	ldr	r2, [r3, #4]
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	685b      	ldr	r3, [r3, #4]
 800d66a:	683a      	ldr	r2, [r7, #0]
 800d66c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	68fa      	ldr	r2, [r7, #12]
 800d672:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	683a      	ldr	r2, [r7, #0]
 800d678:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	687a      	ldr	r2, [r7, #4]
 800d67e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	1c5a      	adds	r2, r3, #1
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	601a      	str	r2, [r3, #0]
}
 800d68a:	bf00      	nop
 800d68c:	3714      	adds	r7, #20
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr

0800d696 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d696:	b480      	push	{r7}
 800d698:	b085      	sub	sp, #20
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	691b      	ldr	r3, [r3, #16]
 800d6a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	6892      	ldr	r2, [r2, #8]
 800d6ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	689b      	ldr	r3, [r3, #8]
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	6852      	ldr	r2, [r2, #4]
 800d6b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d103      	bne.n	800d6ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	689a      	ldr	r2, [r3, #8]
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	1e5a      	subs	r2, r3, #1
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	681b      	ldr	r3, [r3, #0]
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3714      	adds	r7, #20
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr
	...

0800d6ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d10a      	bne.n	800d716 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d704:	f383 8811 	msr	BASEPRI, r3
 800d708:	f3bf 8f6f 	isb	sy
 800d70c:	f3bf 8f4f 	dsb	sy
 800d710:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d712:	bf00      	nop
 800d714:	e7fe      	b.n	800d714 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d716:	f002 f8b5 	bl	800f884 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681a      	ldr	r2, [r3, #0]
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d722:	68f9      	ldr	r1, [r7, #12]
 800d724:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d726:	fb01 f303 	mul.w	r3, r1, r3
 800d72a:	441a      	add	r2, r3
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2200      	movs	r2, #0
 800d734:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d746:	3b01      	subs	r3, #1
 800d748:	68f9      	ldr	r1, [r7, #12]
 800d74a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d74c:	fb01 f303 	mul.w	r3, r1, r3
 800d750:	441a      	add	r2, r3
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	22ff      	movs	r2, #255	; 0xff
 800d75a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	22ff      	movs	r2, #255	; 0xff
 800d762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d114      	bne.n	800d796 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	691b      	ldr	r3, [r3, #16]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d01a      	beq.n	800d7aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	3310      	adds	r3, #16
 800d778:	4618      	mov	r0, r3
 800d77a:	f001 fb79 	bl	800ee70 <xTaskRemoveFromEventList>
 800d77e:	4603      	mov	r3, r0
 800d780:	2b00      	cmp	r3, #0
 800d782:	d012      	beq.n	800d7aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d784:	4b0c      	ldr	r3, [pc, #48]	; (800d7b8 <xQueueGenericReset+0xcc>)
 800d786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d78a:	601a      	str	r2, [r3, #0]
 800d78c:	f3bf 8f4f 	dsb	sy
 800d790:	f3bf 8f6f 	isb	sy
 800d794:	e009      	b.n	800d7aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	3310      	adds	r3, #16
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7ff fef1 	bl	800d582 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	3324      	adds	r3, #36	; 0x24
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7ff feec 	bl	800d582 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d7aa:	f002 f89b 	bl	800f8e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d7ae:	2301      	movs	r3, #1
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3710      	adds	r7, #16
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}
 800d7b8:	e000ed04 	.word	0xe000ed04

0800d7bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b08e      	sub	sp, #56	; 0x38
 800d7c0:	af02      	add	r7, sp, #8
 800d7c2:	60f8      	str	r0, [r7, #12]
 800d7c4:	60b9      	str	r1, [r7, #8]
 800d7c6:	607a      	str	r2, [r7, #4]
 800d7c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d10a      	bne.n	800d7e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d4:	f383 8811 	msr	BASEPRI, r3
 800d7d8:	f3bf 8f6f 	isb	sy
 800d7dc:	f3bf 8f4f 	dsb	sy
 800d7e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d7e2:	bf00      	nop
 800d7e4:	e7fe      	b.n	800d7e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d10a      	bne.n	800d802 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f0:	f383 8811 	msr	BASEPRI, r3
 800d7f4:	f3bf 8f6f 	isb	sy
 800d7f8:	f3bf 8f4f 	dsb	sy
 800d7fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d7fe:	bf00      	nop
 800d800:	e7fe      	b.n	800d800 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d002      	beq.n	800d80e <xQueueGenericCreateStatic+0x52>
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d001      	beq.n	800d812 <xQueueGenericCreateStatic+0x56>
 800d80e:	2301      	movs	r3, #1
 800d810:	e000      	b.n	800d814 <xQueueGenericCreateStatic+0x58>
 800d812:	2300      	movs	r3, #0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d10a      	bne.n	800d82e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81c:	f383 8811 	msr	BASEPRI, r3
 800d820:	f3bf 8f6f 	isb	sy
 800d824:	f3bf 8f4f 	dsb	sy
 800d828:	623b      	str	r3, [r7, #32]
}
 800d82a:	bf00      	nop
 800d82c:	e7fe      	b.n	800d82c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d102      	bne.n	800d83a <xQueueGenericCreateStatic+0x7e>
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d101      	bne.n	800d83e <xQueueGenericCreateStatic+0x82>
 800d83a:	2301      	movs	r3, #1
 800d83c:	e000      	b.n	800d840 <xQueueGenericCreateStatic+0x84>
 800d83e:	2300      	movs	r3, #0
 800d840:	2b00      	cmp	r3, #0
 800d842:	d10a      	bne.n	800d85a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d848:	f383 8811 	msr	BASEPRI, r3
 800d84c:	f3bf 8f6f 	isb	sy
 800d850:	f3bf 8f4f 	dsb	sy
 800d854:	61fb      	str	r3, [r7, #28]
}
 800d856:	bf00      	nop
 800d858:	e7fe      	b.n	800d858 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d85a:	2348      	movs	r3, #72	; 0x48
 800d85c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	2b48      	cmp	r3, #72	; 0x48
 800d862:	d00a      	beq.n	800d87a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d868:	f383 8811 	msr	BASEPRI, r3
 800d86c:	f3bf 8f6f 	isb	sy
 800d870:	f3bf 8f4f 	dsb	sy
 800d874:	61bb      	str	r3, [r7, #24]
}
 800d876:	bf00      	nop
 800d878:	e7fe      	b.n	800d878 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d87a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d882:	2b00      	cmp	r3, #0
 800d884:	d00d      	beq.n	800d8a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d888:	2201      	movs	r2, #1
 800d88a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d88e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d894:	9300      	str	r3, [sp, #0]
 800d896:	4613      	mov	r3, r2
 800d898:	687a      	ldr	r2, [r7, #4]
 800d89a:	68b9      	ldr	r1, [r7, #8]
 800d89c:	68f8      	ldr	r0, [r7, #12]
 800d89e:	f000 f83f 	bl	800d920 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3730      	adds	r7, #48	; 0x30
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b08a      	sub	sp, #40	; 0x28
 800d8b0:	af02      	add	r7, sp, #8
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d10a      	bne.n	800d8d6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c4:	f383 8811 	msr	BASEPRI, r3
 800d8c8:	f3bf 8f6f 	isb	sy
 800d8cc:	f3bf 8f4f 	dsb	sy
 800d8d0:	613b      	str	r3, [r7, #16]
}
 800d8d2:	bf00      	nop
 800d8d4:	e7fe      	b.n	800d8d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	68ba      	ldr	r2, [r7, #8]
 800d8da:	fb02 f303 	mul.w	r3, r2, r3
 800d8de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d8e0:	69fb      	ldr	r3, [r7, #28]
 800d8e2:	3348      	adds	r3, #72	; 0x48
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f002 f8ef 	bl	800fac8 <pvPortMalloc>
 800d8ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d8ec:	69bb      	ldr	r3, [r7, #24]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d011      	beq.n	800d916 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d8f2:	69bb      	ldr	r3, [r7, #24]
 800d8f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	3348      	adds	r3, #72	; 0x48
 800d8fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	2200      	movs	r2, #0
 800d900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d904:	79fa      	ldrb	r2, [r7, #7]
 800d906:	69bb      	ldr	r3, [r7, #24]
 800d908:	9300      	str	r3, [sp, #0]
 800d90a:	4613      	mov	r3, r2
 800d90c:	697a      	ldr	r2, [r7, #20]
 800d90e:	68b9      	ldr	r1, [r7, #8]
 800d910:	68f8      	ldr	r0, [r7, #12]
 800d912:	f000 f805 	bl	800d920 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d916:	69bb      	ldr	r3, [r7, #24]
	}
 800d918:	4618      	mov	r0, r3
 800d91a:	3720      	adds	r7, #32
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b084      	sub	sp, #16
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	607a      	str	r2, [r7, #4]
 800d92c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d103      	bne.n	800d93c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d934:	69bb      	ldr	r3, [r7, #24]
 800d936:	69ba      	ldr	r2, [r7, #24]
 800d938:	601a      	str	r2, [r3, #0]
 800d93a:	e002      	b.n	800d942 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d93c:	69bb      	ldr	r3, [r7, #24]
 800d93e:	687a      	ldr	r2, [r7, #4]
 800d940:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d942:	69bb      	ldr	r3, [r7, #24]
 800d944:	68fa      	ldr	r2, [r7, #12]
 800d946:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d948:	69bb      	ldr	r3, [r7, #24]
 800d94a:	68ba      	ldr	r2, [r7, #8]
 800d94c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d94e:	2101      	movs	r1, #1
 800d950:	69b8      	ldr	r0, [r7, #24]
 800d952:	f7ff fecb 	bl	800d6ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d956:	bf00      	nop
 800d958:	3710      	adds	r7, #16
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}

0800d95e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d95e:	b580      	push	{r7, lr}
 800d960:	b082      	sub	sp, #8
 800d962:	af00      	add	r7, sp, #0
 800d964:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d00e      	beq.n	800d98a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2200      	movs	r2, #0
 800d970:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2200      	movs	r2, #0
 800d976:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2200      	movs	r2, #0
 800d97c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d97e:	2300      	movs	r3, #0
 800d980:	2200      	movs	r2, #0
 800d982:	2100      	movs	r1, #0
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f000 f837 	bl	800d9f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d98a:	bf00      	nop
 800d98c:	3708      	adds	r7, #8
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}

0800d992 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d992:	b580      	push	{r7, lr}
 800d994:	b086      	sub	sp, #24
 800d996:	af00      	add	r7, sp, #0
 800d998:	4603      	mov	r3, r0
 800d99a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d99c:	2301      	movs	r3, #1
 800d99e:	617b      	str	r3, [r7, #20]
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d9a4:	79fb      	ldrb	r3, [r7, #7]
 800d9a6:	461a      	mov	r2, r3
 800d9a8:	6939      	ldr	r1, [r7, #16]
 800d9aa:	6978      	ldr	r0, [r7, #20]
 800d9ac:	f7ff ff7e 	bl	800d8ac <xQueueGenericCreate>
 800d9b0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d9b2:	68f8      	ldr	r0, [r7, #12]
 800d9b4:	f7ff ffd3 	bl	800d95e <prvInitialiseMutex>

		return xNewQueue;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
	}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3718      	adds	r7, #24
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}

0800d9c2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d9c2:	b580      	push	{r7, lr}
 800d9c4:	b088      	sub	sp, #32
 800d9c6:	af02      	add	r7, sp, #8
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	6039      	str	r1, [r7, #0]
 800d9cc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	617b      	str	r3, [r7, #20]
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d9d6:	79fb      	ldrb	r3, [r7, #7]
 800d9d8:	9300      	str	r3, [sp, #0]
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	6939      	ldr	r1, [r7, #16]
 800d9e0:	6978      	ldr	r0, [r7, #20]
 800d9e2:	f7ff feeb 	bl	800d7bc <xQueueGenericCreateStatic>
 800d9e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f7ff ffb8 	bl	800d95e <prvInitialiseMutex>

		return xNewQueue;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
	}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3718      	adds	r7, #24
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b08e      	sub	sp, #56	; 0x38
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	607a      	str	r2, [r7, #4]
 800da04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800da06:	2300      	movs	r3, #0
 800da08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800da0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da10:	2b00      	cmp	r3, #0
 800da12:	d10a      	bne.n	800da2a <xQueueGenericSend+0x32>
	__asm volatile
 800da14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da18:	f383 8811 	msr	BASEPRI, r3
 800da1c:	f3bf 8f6f 	isb	sy
 800da20:	f3bf 8f4f 	dsb	sy
 800da24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800da26:	bf00      	nop
 800da28:	e7fe      	b.n	800da28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d103      	bne.n	800da38 <xQueueGenericSend+0x40>
 800da30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da34:	2b00      	cmp	r3, #0
 800da36:	d101      	bne.n	800da3c <xQueueGenericSend+0x44>
 800da38:	2301      	movs	r3, #1
 800da3a:	e000      	b.n	800da3e <xQueueGenericSend+0x46>
 800da3c:	2300      	movs	r3, #0
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d10a      	bne.n	800da58 <xQueueGenericSend+0x60>
	__asm volatile
 800da42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da46:	f383 8811 	msr	BASEPRI, r3
 800da4a:	f3bf 8f6f 	isb	sy
 800da4e:	f3bf 8f4f 	dsb	sy
 800da52:	627b      	str	r3, [r7, #36]	; 0x24
}
 800da54:	bf00      	nop
 800da56:	e7fe      	b.n	800da56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	2b02      	cmp	r3, #2
 800da5c:	d103      	bne.n	800da66 <xQueueGenericSend+0x6e>
 800da5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da62:	2b01      	cmp	r3, #1
 800da64:	d101      	bne.n	800da6a <xQueueGenericSend+0x72>
 800da66:	2301      	movs	r3, #1
 800da68:	e000      	b.n	800da6c <xQueueGenericSend+0x74>
 800da6a:	2300      	movs	r3, #0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d10a      	bne.n	800da86 <xQueueGenericSend+0x8e>
	__asm volatile
 800da70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da74:	f383 8811 	msr	BASEPRI, r3
 800da78:	f3bf 8f6f 	isb	sy
 800da7c:	f3bf 8f4f 	dsb	sy
 800da80:	623b      	str	r3, [r7, #32]
}
 800da82:	bf00      	nop
 800da84:	e7fe      	b.n	800da84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da86:	f001 fbaf 	bl	800f1e8 <xTaskGetSchedulerState>
 800da8a:	4603      	mov	r3, r0
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d102      	bne.n	800da96 <xQueueGenericSend+0x9e>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d101      	bne.n	800da9a <xQueueGenericSend+0xa2>
 800da96:	2301      	movs	r3, #1
 800da98:	e000      	b.n	800da9c <xQueueGenericSend+0xa4>
 800da9a:	2300      	movs	r3, #0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d10a      	bne.n	800dab6 <xQueueGenericSend+0xbe>
	__asm volatile
 800daa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa4:	f383 8811 	msr	BASEPRI, r3
 800daa8:	f3bf 8f6f 	isb	sy
 800daac:	f3bf 8f4f 	dsb	sy
 800dab0:	61fb      	str	r3, [r7, #28]
}
 800dab2:	bf00      	nop
 800dab4:	e7fe      	b.n	800dab4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dab6:	f001 fee5 	bl	800f884 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800daba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dabc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d302      	bcc.n	800dacc <xQueueGenericSend+0xd4>
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	2b02      	cmp	r3, #2
 800daca:	d129      	bne.n	800db20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dacc:	683a      	ldr	r2, [r7, #0]
 800dace:	68b9      	ldr	r1, [r7, #8]
 800dad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dad2:	f000 fc9a 	bl	800e40a <prvCopyDataToQueue>
 800dad6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d010      	beq.n	800db02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae2:	3324      	adds	r3, #36	; 0x24
 800dae4:	4618      	mov	r0, r3
 800dae6:	f001 f9c3 	bl	800ee70 <xTaskRemoveFromEventList>
 800daea:	4603      	mov	r3, r0
 800daec:	2b00      	cmp	r3, #0
 800daee:	d013      	beq.n	800db18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800daf0:	4b3f      	ldr	r3, [pc, #252]	; (800dbf0 <xQueueGenericSend+0x1f8>)
 800daf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daf6:	601a      	str	r2, [r3, #0]
 800daf8:	f3bf 8f4f 	dsb	sy
 800dafc:	f3bf 8f6f 	isb	sy
 800db00:	e00a      	b.n	800db18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800db02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db04:	2b00      	cmp	r3, #0
 800db06:	d007      	beq.n	800db18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800db08:	4b39      	ldr	r3, [pc, #228]	; (800dbf0 <xQueueGenericSend+0x1f8>)
 800db0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db0e:	601a      	str	r2, [r3, #0]
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800db18:	f001 fee4 	bl	800f8e4 <vPortExitCritical>
				return pdPASS;
 800db1c:	2301      	movs	r3, #1
 800db1e:	e063      	b.n	800dbe8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d103      	bne.n	800db2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800db26:	f001 fedd 	bl	800f8e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800db2a:	2300      	movs	r3, #0
 800db2c:	e05c      	b.n	800dbe8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db30:	2b00      	cmp	r3, #0
 800db32:	d106      	bne.n	800db42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db34:	f107 0314 	add.w	r3, r7, #20
 800db38:	4618      	mov	r0, r3
 800db3a:	f001 f9fb 	bl	800ef34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db3e:	2301      	movs	r3, #1
 800db40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db42:	f001 fecf 	bl	800f8e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db46:	f000 ff8f 	bl	800ea68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db4a:	f001 fe9b 	bl	800f884 <vPortEnterCritical>
 800db4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db54:	b25b      	sxtb	r3, r3
 800db56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db5a:	d103      	bne.n	800db64 <xQueueGenericSend+0x16c>
 800db5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db5e:	2200      	movs	r2, #0
 800db60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db6a:	b25b      	sxtb	r3, r3
 800db6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db70:	d103      	bne.n	800db7a <xQueueGenericSend+0x182>
 800db72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db74:	2200      	movs	r2, #0
 800db76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db7a:	f001 feb3 	bl	800f8e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db7e:	1d3a      	adds	r2, r7, #4
 800db80:	f107 0314 	add.w	r3, r7, #20
 800db84:	4611      	mov	r1, r2
 800db86:	4618      	mov	r0, r3
 800db88:	f001 f9ea 	bl	800ef60 <xTaskCheckForTimeOut>
 800db8c:	4603      	mov	r3, r0
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d124      	bne.n	800dbdc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800db92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db94:	f000 fd31 	bl	800e5fa <prvIsQueueFull>
 800db98:	4603      	mov	r3, r0
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d018      	beq.n	800dbd0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800db9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba0:	3310      	adds	r3, #16
 800dba2:	687a      	ldr	r2, [r7, #4]
 800dba4:	4611      	mov	r1, r2
 800dba6:	4618      	mov	r0, r3
 800dba8:	f001 f93e 	bl	800ee28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dbac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbae:	f000 fcbc 	bl	800e52a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dbb2:	f000 ff67 	bl	800ea84 <xTaskResumeAll>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	f47f af7c 	bne.w	800dab6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800dbbe:	4b0c      	ldr	r3, [pc, #48]	; (800dbf0 <xQueueGenericSend+0x1f8>)
 800dbc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbc4:	601a      	str	r2, [r3, #0]
 800dbc6:	f3bf 8f4f 	dsb	sy
 800dbca:	f3bf 8f6f 	isb	sy
 800dbce:	e772      	b.n	800dab6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dbd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbd2:	f000 fcaa 	bl	800e52a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dbd6:	f000 ff55 	bl	800ea84 <xTaskResumeAll>
 800dbda:	e76c      	b.n	800dab6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dbdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbde:	f000 fca4 	bl	800e52a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dbe2:	f000 ff4f 	bl	800ea84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dbe6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3738      	adds	r7, #56	; 0x38
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	e000ed04 	.word	0xe000ed04

0800dbf4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b090      	sub	sp, #64	; 0x40
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	607a      	str	r2, [r7, #4]
 800dc00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800dc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d10a      	bne.n	800dc22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800dc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc10:	f383 8811 	msr	BASEPRI, r3
 800dc14:	f3bf 8f6f 	isb	sy
 800dc18:	f3bf 8f4f 	dsb	sy
 800dc1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dc1e:	bf00      	nop
 800dc20:	e7fe      	b.n	800dc20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d103      	bne.n	800dc30 <xQueueGenericSendFromISR+0x3c>
 800dc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d101      	bne.n	800dc34 <xQueueGenericSendFromISR+0x40>
 800dc30:	2301      	movs	r3, #1
 800dc32:	e000      	b.n	800dc36 <xQueueGenericSendFromISR+0x42>
 800dc34:	2300      	movs	r3, #0
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d10a      	bne.n	800dc50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800dc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc3e:	f383 8811 	msr	BASEPRI, r3
 800dc42:	f3bf 8f6f 	isb	sy
 800dc46:	f3bf 8f4f 	dsb	sy
 800dc4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dc4c:	bf00      	nop
 800dc4e:	e7fe      	b.n	800dc4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	2b02      	cmp	r3, #2
 800dc54:	d103      	bne.n	800dc5e <xQueueGenericSendFromISR+0x6a>
 800dc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d101      	bne.n	800dc62 <xQueueGenericSendFromISR+0x6e>
 800dc5e:	2301      	movs	r3, #1
 800dc60:	e000      	b.n	800dc64 <xQueueGenericSendFromISR+0x70>
 800dc62:	2300      	movs	r3, #0
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d10a      	bne.n	800dc7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800dc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc6c:	f383 8811 	msr	BASEPRI, r3
 800dc70:	f3bf 8f6f 	isb	sy
 800dc74:	f3bf 8f4f 	dsb	sy
 800dc78:	623b      	str	r3, [r7, #32]
}
 800dc7a:	bf00      	nop
 800dc7c:	e7fe      	b.n	800dc7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dc7e:	f001 fee3 	bl	800fa48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dc82:	f3ef 8211 	mrs	r2, BASEPRI
 800dc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc8a:	f383 8811 	msr	BASEPRI, r3
 800dc8e:	f3bf 8f6f 	isb	sy
 800dc92:	f3bf 8f4f 	dsb	sy
 800dc96:	61fa      	str	r2, [r7, #28]
 800dc98:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dc9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dc9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d302      	bcc.n	800dcb0 <xQueueGenericSendFromISR+0xbc>
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	2b02      	cmp	r3, #2
 800dcae:	d12f      	bne.n	800dd10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dcb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcbe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dcc0:	683a      	ldr	r2, [r7, #0]
 800dcc2:	68b9      	ldr	r1, [r7, #8]
 800dcc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dcc6:	f000 fba0 	bl	800e40a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dcca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800dcce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcd2:	d112      	bne.n	800dcfa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d016      	beq.n	800dd0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcde:	3324      	adds	r3, #36	; 0x24
 800dce0:	4618      	mov	r0, r3
 800dce2:	f001 f8c5 	bl	800ee70 <xTaskRemoveFromEventList>
 800dce6:	4603      	mov	r3, r0
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d00e      	beq.n	800dd0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d00b      	beq.n	800dd0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	601a      	str	r2, [r3, #0]
 800dcf8:	e007      	b.n	800dd0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dcfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dcfe:	3301      	adds	r3, #1
 800dd00:	b2db      	uxtb	r3, r3
 800dd02:	b25a      	sxtb	r2, r3
 800dd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800dd0e:	e001      	b.n	800dd14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dd10:	2300      	movs	r3, #0
 800dd12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd16:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dd1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dd20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3740      	adds	r7, #64	; 0x40
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}

0800dd2a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dd2a:	b580      	push	{r7, lr}
 800dd2c:	b08e      	sub	sp, #56	; 0x38
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	6078      	str	r0, [r7, #4]
 800dd32:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800dd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d10a      	bne.n	800dd54 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800dd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd42:	f383 8811 	msr	BASEPRI, r3
 800dd46:	f3bf 8f6f 	isb	sy
 800dd4a:	f3bf 8f4f 	dsb	sy
 800dd4e:	623b      	str	r3, [r7, #32]
}
 800dd50:	bf00      	nop
 800dd52:	e7fe      	b.n	800dd52 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d00a      	beq.n	800dd72 <xQueueGiveFromISR+0x48>
	__asm volatile
 800dd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd60:	f383 8811 	msr	BASEPRI, r3
 800dd64:	f3bf 8f6f 	isb	sy
 800dd68:	f3bf 8f4f 	dsb	sy
 800dd6c:	61fb      	str	r3, [r7, #28]
}
 800dd6e:	bf00      	nop
 800dd70:	e7fe      	b.n	800dd70 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800dd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d103      	bne.n	800dd82 <xQueueGiveFromISR+0x58>
 800dd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7c:	689b      	ldr	r3, [r3, #8]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d101      	bne.n	800dd86 <xQueueGiveFromISR+0x5c>
 800dd82:	2301      	movs	r3, #1
 800dd84:	e000      	b.n	800dd88 <xQueueGiveFromISR+0x5e>
 800dd86:	2300      	movs	r3, #0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d10a      	bne.n	800dda2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800dd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd90:	f383 8811 	msr	BASEPRI, r3
 800dd94:	f3bf 8f6f 	isb	sy
 800dd98:	f3bf 8f4f 	dsb	sy
 800dd9c:	61bb      	str	r3, [r7, #24]
}
 800dd9e:	bf00      	nop
 800dda0:	e7fe      	b.n	800dda0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dda2:	f001 fe51 	bl	800fa48 <vPortValidateInterruptPriority>
	__asm volatile
 800dda6:	f3ef 8211 	mrs	r2, BASEPRI
 800ddaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddae:	f383 8811 	msr	BASEPRI, r3
 800ddb2:	f3bf 8f6f 	isb	sy
 800ddb6:	f3bf 8f4f 	dsb	sy
 800ddba:	617a      	str	r2, [r7, #20]
 800ddbc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ddbe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ddc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ddc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddc6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ddc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d22b      	bcs.n	800de2a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ddd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ddd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddde:	1c5a      	adds	r2, r3, #1
 800dde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dde4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dde8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddec:	d112      	bne.n	800de14 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ddee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d016      	beq.n	800de24 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ddf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf8:	3324      	adds	r3, #36	; 0x24
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f001 f838 	bl	800ee70 <xTaskRemoveFromEventList>
 800de00:	4603      	mov	r3, r0
 800de02:	2b00      	cmp	r3, #0
 800de04:	d00e      	beq.n	800de24 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d00b      	beq.n	800de24 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	2201      	movs	r2, #1
 800de10:	601a      	str	r2, [r3, #0]
 800de12:	e007      	b.n	800de24 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800de14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de18:	3301      	adds	r3, #1
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	b25a      	sxtb	r2, r3
 800de1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800de24:	2301      	movs	r3, #1
 800de26:	637b      	str	r3, [r7, #52]	; 0x34
 800de28:	e001      	b.n	800de2e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800de2a:	2300      	movs	r3, #0
 800de2c:	637b      	str	r3, [r7, #52]	; 0x34
 800de2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de30:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	f383 8811 	msr	BASEPRI, r3
}
 800de38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800de3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3738      	adds	r7, #56	; 0x38
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b08c      	sub	sp, #48	; 0x30
 800de48:	af00      	add	r7, sp, #0
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	60b9      	str	r1, [r7, #8]
 800de4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800de50:	2300      	movs	r3, #0
 800de52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800de58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d10a      	bne.n	800de74 <xQueueReceive+0x30>
	__asm volatile
 800de5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de62:	f383 8811 	msr	BASEPRI, r3
 800de66:	f3bf 8f6f 	isb	sy
 800de6a:	f3bf 8f4f 	dsb	sy
 800de6e:	623b      	str	r3, [r7, #32]
}
 800de70:	bf00      	nop
 800de72:	e7fe      	b.n	800de72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d103      	bne.n	800de82 <xQueueReceive+0x3e>
 800de7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d101      	bne.n	800de86 <xQueueReceive+0x42>
 800de82:	2301      	movs	r3, #1
 800de84:	e000      	b.n	800de88 <xQueueReceive+0x44>
 800de86:	2300      	movs	r3, #0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d10a      	bne.n	800dea2 <xQueueReceive+0x5e>
	__asm volatile
 800de8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de90:	f383 8811 	msr	BASEPRI, r3
 800de94:	f3bf 8f6f 	isb	sy
 800de98:	f3bf 8f4f 	dsb	sy
 800de9c:	61fb      	str	r3, [r7, #28]
}
 800de9e:	bf00      	nop
 800dea0:	e7fe      	b.n	800dea0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dea2:	f001 f9a1 	bl	800f1e8 <xTaskGetSchedulerState>
 800dea6:	4603      	mov	r3, r0
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d102      	bne.n	800deb2 <xQueueReceive+0x6e>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d101      	bne.n	800deb6 <xQueueReceive+0x72>
 800deb2:	2301      	movs	r3, #1
 800deb4:	e000      	b.n	800deb8 <xQueueReceive+0x74>
 800deb6:	2300      	movs	r3, #0
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d10a      	bne.n	800ded2 <xQueueReceive+0x8e>
	__asm volatile
 800debc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec0:	f383 8811 	msr	BASEPRI, r3
 800dec4:	f3bf 8f6f 	isb	sy
 800dec8:	f3bf 8f4f 	dsb	sy
 800decc:	61bb      	str	r3, [r7, #24]
}
 800dece:	bf00      	nop
 800ded0:	e7fe      	b.n	800ded0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ded2:	f001 fcd7 	bl	800f884 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ded6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deda:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d01f      	beq.n	800df22 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dee2:	68b9      	ldr	r1, [r7, #8]
 800dee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dee6:	f000 fafa 	bl	800e4de <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800deea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deec:	1e5a      	subs	r2, r3, #1
 800deee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800def2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def4:	691b      	ldr	r3, [r3, #16]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00f      	beq.n	800df1a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800defa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defc:	3310      	adds	r3, #16
 800defe:	4618      	mov	r0, r3
 800df00:	f000 ffb6 	bl	800ee70 <xTaskRemoveFromEventList>
 800df04:	4603      	mov	r3, r0
 800df06:	2b00      	cmp	r3, #0
 800df08:	d007      	beq.n	800df1a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800df0a:	4b3d      	ldr	r3, [pc, #244]	; (800e000 <xQueueReceive+0x1bc>)
 800df0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df10:	601a      	str	r2, [r3, #0]
 800df12:	f3bf 8f4f 	dsb	sy
 800df16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800df1a:	f001 fce3 	bl	800f8e4 <vPortExitCritical>
				return pdPASS;
 800df1e:	2301      	movs	r3, #1
 800df20:	e069      	b.n	800dff6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d103      	bne.n	800df30 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800df28:	f001 fcdc 	bl	800f8e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800df2c:	2300      	movs	r3, #0
 800df2e:	e062      	b.n	800dff6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800df30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df32:	2b00      	cmp	r3, #0
 800df34:	d106      	bne.n	800df44 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800df36:	f107 0310 	add.w	r3, r7, #16
 800df3a:	4618      	mov	r0, r3
 800df3c:	f000 fffa 	bl	800ef34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800df40:	2301      	movs	r3, #1
 800df42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800df44:	f001 fcce 	bl	800f8e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800df48:	f000 fd8e 	bl	800ea68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df4c:	f001 fc9a 	bl	800f884 <vPortEnterCritical>
 800df50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df56:	b25b      	sxtb	r3, r3
 800df58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df5c:	d103      	bne.n	800df66 <xQueueReceive+0x122>
 800df5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df60:	2200      	movs	r2, #0
 800df62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df6c:	b25b      	sxtb	r3, r3
 800df6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df72:	d103      	bne.n	800df7c <xQueueReceive+0x138>
 800df74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df76:	2200      	movs	r2, #0
 800df78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df7c:	f001 fcb2 	bl	800f8e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800df80:	1d3a      	adds	r2, r7, #4
 800df82:	f107 0310 	add.w	r3, r7, #16
 800df86:	4611      	mov	r1, r2
 800df88:	4618      	mov	r0, r3
 800df8a:	f000 ffe9 	bl	800ef60 <xTaskCheckForTimeOut>
 800df8e:	4603      	mov	r3, r0
 800df90:	2b00      	cmp	r3, #0
 800df92:	d123      	bne.n	800dfdc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df96:	f000 fb1a 	bl	800e5ce <prvIsQueueEmpty>
 800df9a:	4603      	mov	r3, r0
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d017      	beq.n	800dfd0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa2:	3324      	adds	r3, #36	; 0x24
 800dfa4:	687a      	ldr	r2, [r7, #4]
 800dfa6:	4611      	mov	r1, r2
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f000 ff3d 	bl	800ee28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dfae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfb0:	f000 fabb 	bl	800e52a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dfb4:	f000 fd66 	bl	800ea84 <xTaskResumeAll>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d189      	bne.n	800ded2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800dfbe:	4b10      	ldr	r3, [pc, #64]	; (800e000 <xQueueReceive+0x1bc>)
 800dfc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfc4:	601a      	str	r2, [r3, #0]
 800dfc6:	f3bf 8f4f 	dsb	sy
 800dfca:	f3bf 8f6f 	isb	sy
 800dfce:	e780      	b.n	800ded2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dfd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfd2:	f000 faaa 	bl	800e52a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dfd6:	f000 fd55 	bl	800ea84 <xTaskResumeAll>
 800dfda:	e77a      	b.n	800ded2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dfdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfde:	f000 faa4 	bl	800e52a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dfe2:	f000 fd4f 	bl	800ea84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dfe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfe8:	f000 faf1 	bl	800e5ce <prvIsQueueEmpty>
 800dfec:	4603      	mov	r3, r0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	f43f af6f 	beq.w	800ded2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dff4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3730      	adds	r7, #48	; 0x30
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	e000ed04 	.word	0xe000ed04

0800e004 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b08e      	sub	sp, #56	; 0x38
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e00e:	2300      	movs	r3, #0
 800e010:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e016:	2300      	movs	r3, #0
 800e018:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d10a      	bne.n	800e036 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800e020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e024:	f383 8811 	msr	BASEPRI, r3
 800e028:	f3bf 8f6f 	isb	sy
 800e02c:	f3bf 8f4f 	dsb	sy
 800e030:	623b      	str	r3, [r7, #32]
}
 800e032:	bf00      	nop
 800e034:	e7fe      	b.n	800e034 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d00a      	beq.n	800e054 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e042:	f383 8811 	msr	BASEPRI, r3
 800e046:	f3bf 8f6f 	isb	sy
 800e04a:	f3bf 8f4f 	dsb	sy
 800e04e:	61fb      	str	r3, [r7, #28]
}
 800e050:	bf00      	nop
 800e052:	e7fe      	b.n	800e052 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e054:	f001 f8c8 	bl	800f1e8 <xTaskGetSchedulerState>
 800e058:	4603      	mov	r3, r0
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d102      	bne.n	800e064 <xQueueSemaphoreTake+0x60>
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d101      	bne.n	800e068 <xQueueSemaphoreTake+0x64>
 800e064:	2301      	movs	r3, #1
 800e066:	e000      	b.n	800e06a <xQueueSemaphoreTake+0x66>
 800e068:	2300      	movs	r3, #0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d10a      	bne.n	800e084 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e072:	f383 8811 	msr	BASEPRI, r3
 800e076:	f3bf 8f6f 	isb	sy
 800e07a:	f3bf 8f4f 	dsb	sy
 800e07e:	61bb      	str	r3, [r7, #24]
}
 800e080:	bf00      	nop
 800e082:	e7fe      	b.n	800e082 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e084:	f001 fbfe 	bl	800f884 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e08a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e08c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e090:	2b00      	cmp	r3, #0
 800e092:	d024      	beq.n	800e0de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e096:	1e5a      	subs	r2, r3, #1
 800e098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e09a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d104      	bne.n	800e0ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e0a4:	f001 fa48 	bl	800f538 <pvTaskIncrementMutexHeldCount>
 800e0a8:	4602      	mov	r2, r0
 800e0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b0:	691b      	ldr	r3, [r3, #16]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d00f      	beq.n	800e0d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b8:	3310      	adds	r3, #16
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f000 fed8 	bl	800ee70 <xTaskRemoveFromEventList>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d007      	beq.n	800e0d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e0c6:	4b54      	ldr	r3, [pc, #336]	; (800e218 <xQueueSemaphoreTake+0x214>)
 800e0c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0cc:	601a      	str	r2, [r3, #0]
 800e0ce:	f3bf 8f4f 	dsb	sy
 800e0d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e0d6:	f001 fc05 	bl	800f8e4 <vPortExitCritical>
				return pdPASS;
 800e0da:	2301      	movs	r3, #1
 800e0dc:	e097      	b.n	800e20e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d111      	bne.n	800e108 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d00a      	beq.n	800e100 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ee:	f383 8811 	msr	BASEPRI, r3
 800e0f2:	f3bf 8f6f 	isb	sy
 800e0f6:	f3bf 8f4f 	dsb	sy
 800e0fa:	617b      	str	r3, [r7, #20]
}
 800e0fc:	bf00      	nop
 800e0fe:	e7fe      	b.n	800e0fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e100:	f001 fbf0 	bl	800f8e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e104:	2300      	movs	r3, #0
 800e106:	e082      	b.n	800e20e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d106      	bne.n	800e11c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e10e:	f107 030c 	add.w	r3, r7, #12
 800e112:	4618      	mov	r0, r3
 800e114:	f000 ff0e 	bl	800ef34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e118:	2301      	movs	r3, #1
 800e11a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e11c:	f001 fbe2 	bl	800f8e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e120:	f000 fca2 	bl	800ea68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e124:	f001 fbae 	bl	800f884 <vPortEnterCritical>
 800e128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e12a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e12e:	b25b      	sxtb	r3, r3
 800e130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e134:	d103      	bne.n	800e13e <xQueueSemaphoreTake+0x13a>
 800e136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e138:	2200      	movs	r2, #0
 800e13a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e140:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e144:	b25b      	sxtb	r3, r3
 800e146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e14a:	d103      	bne.n	800e154 <xQueueSemaphoreTake+0x150>
 800e14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e14e:	2200      	movs	r2, #0
 800e150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e154:	f001 fbc6 	bl	800f8e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e158:	463a      	mov	r2, r7
 800e15a:	f107 030c 	add.w	r3, r7, #12
 800e15e:	4611      	mov	r1, r2
 800e160:	4618      	mov	r0, r3
 800e162:	f000 fefd 	bl	800ef60 <xTaskCheckForTimeOut>
 800e166:	4603      	mov	r3, r0
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d132      	bne.n	800e1d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e16c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e16e:	f000 fa2e 	bl	800e5ce <prvIsQueueEmpty>
 800e172:	4603      	mov	r3, r0
 800e174:	2b00      	cmp	r3, #0
 800e176:	d026      	beq.n	800e1c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d109      	bne.n	800e194 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e180:	f001 fb80 	bl	800f884 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e186:	689b      	ldr	r3, [r3, #8]
 800e188:	4618      	mov	r0, r3
 800e18a:	f001 f84b 	bl	800f224 <xTaskPriorityInherit>
 800e18e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e190:	f001 fba8 	bl	800f8e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e196:	3324      	adds	r3, #36	; 0x24
 800e198:	683a      	ldr	r2, [r7, #0]
 800e19a:	4611      	mov	r1, r2
 800e19c:	4618      	mov	r0, r3
 800e19e:	f000 fe43 	bl	800ee28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e1a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1a4:	f000 f9c1 	bl	800e52a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e1a8:	f000 fc6c 	bl	800ea84 <xTaskResumeAll>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	f47f af68 	bne.w	800e084 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e1b4:	4b18      	ldr	r3, [pc, #96]	; (800e218 <xQueueSemaphoreTake+0x214>)
 800e1b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1ba:	601a      	str	r2, [r3, #0]
 800e1bc:	f3bf 8f4f 	dsb	sy
 800e1c0:	f3bf 8f6f 	isb	sy
 800e1c4:	e75e      	b.n	800e084 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e1c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1c8:	f000 f9af 	bl	800e52a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e1cc:	f000 fc5a 	bl	800ea84 <xTaskResumeAll>
 800e1d0:	e758      	b.n	800e084 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e1d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1d4:	f000 f9a9 	bl	800e52a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e1d8:	f000 fc54 	bl	800ea84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e1dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1de:	f000 f9f6 	bl	800e5ce <prvIsQueueEmpty>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	f43f af4d 	beq.w	800e084 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d00d      	beq.n	800e20c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e1f0:	f001 fb48 	bl	800f884 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e1f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1f6:	f000 f8f0 	bl	800e3da <prvGetDisinheritPriorityAfterTimeout>
 800e1fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fe:	689b      	ldr	r3, [r3, #8]
 800e200:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e202:	4618      	mov	r0, r3
 800e204:	f001 f90a 	bl	800f41c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e208:	f001 fb6c 	bl	800f8e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e20c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3738      	adds	r7, #56	; 0x38
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
 800e216:	bf00      	nop
 800e218:	e000ed04 	.word	0xe000ed04

0800e21c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b08e      	sub	sp, #56	; 0x38
 800e220:	af00      	add	r7, sp, #0
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	60b9      	str	r1, [r7, #8]
 800e226:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d10a      	bne.n	800e248 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e236:	f383 8811 	msr	BASEPRI, r3
 800e23a:	f3bf 8f6f 	isb	sy
 800e23e:	f3bf 8f4f 	dsb	sy
 800e242:	623b      	str	r3, [r7, #32]
}
 800e244:	bf00      	nop
 800e246:	e7fe      	b.n	800e246 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d103      	bne.n	800e256 <xQueueReceiveFromISR+0x3a>
 800e24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e252:	2b00      	cmp	r3, #0
 800e254:	d101      	bne.n	800e25a <xQueueReceiveFromISR+0x3e>
 800e256:	2301      	movs	r3, #1
 800e258:	e000      	b.n	800e25c <xQueueReceiveFromISR+0x40>
 800e25a:	2300      	movs	r3, #0
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d10a      	bne.n	800e276 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e264:	f383 8811 	msr	BASEPRI, r3
 800e268:	f3bf 8f6f 	isb	sy
 800e26c:	f3bf 8f4f 	dsb	sy
 800e270:	61fb      	str	r3, [r7, #28]
}
 800e272:	bf00      	nop
 800e274:	e7fe      	b.n	800e274 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e276:	f001 fbe7 	bl	800fa48 <vPortValidateInterruptPriority>
	__asm volatile
 800e27a:	f3ef 8211 	mrs	r2, BASEPRI
 800e27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e282:	f383 8811 	msr	BASEPRI, r3
 800e286:	f3bf 8f6f 	isb	sy
 800e28a:	f3bf 8f4f 	dsb	sy
 800e28e:	61ba      	str	r2, [r7, #24]
 800e290:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e292:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e294:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e29a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d02f      	beq.n	800e302 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e2a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e2ac:	68b9      	ldr	r1, [r7, #8]
 800e2ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2b0:	f000 f915 	bl	800e4de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b6:	1e5a      	subs	r2, r3, #1
 800e2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e2bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c4:	d112      	bne.n	800e2ec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c8:	691b      	ldr	r3, [r3, #16]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d016      	beq.n	800e2fc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d0:	3310      	adds	r3, #16
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f000 fdcc 	bl	800ee70 <xTaskRemoveFromEventList>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d00e      	beq.n	800e2fc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d00b      	beq.n	800e2fc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	601a      	str	r2, [r3, #0]
 800e2ea:	e007      	b.n	800e2fc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e2ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	b2db      	uxtb	r3, r3
 800e2f4:	b25a      	sxtb	r2, r3
 800e2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	637b      	str	r3, [r7, #52]	; 0x34
 800e300:	e001      	b.n	800e306 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e302:	2300      	movs	r3, #0
 800e304:	637b      	str	r3, [r7, #52]	; 0x34
 800e306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e308:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	f383 8811 	msr	BASEPRI, r3
}
 800e310:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e314:	4618      	mov	r0, r3
 800e316:	3738      	adds	r7, #56	; 0x38
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b084      	sub	sp, #16
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d10a      	bne.n	800e340 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800e32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e32e:	f383 8811 	msr	BASEPRI, r3
 800e332:	f3bf 8f6f 	isb	sy
 800e336:	f3bf 8f4f 	dsb	sy
 800e33a:	60bb      	str	r3, [r7, #8]
}
 800e33c:	bf00      	nop
 800e33e:	e7fe      	b.n	800e33e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800e340:	f001 faa0 	bl	800f884 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e348:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800e34a:	f001 facb 	bl	800f8e4 <vPortExitCritical>

	return uxReturn;
 800e34e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e350:	4618      	mov	r0, r3
 800e352:	3710      	adds	r7, #16
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800e358:	b480      	push	{r7}
 800e35a:	b087      	sub	sp, #28
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d10a      	bne.n	800e380 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800e36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e36e:	f383 8811 	msr	BASEPRI, r3
 800e372:	f3bf 8f6f 	isb	sy
 800e376:	f3bf 8f4f 	dsb	sy
 800e37a:	60fb      	str	r3, [r7, #12]
}
 800e37c:	bf00      	nop
 800e37e:	e7fe      	b.n	800e37e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e384:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800e386:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e388:	4618      	mov	r0, r3
 800e38a:	371c      	adds	r7, #28
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d10a      	bne.n	800e3bc <vQueueDelete+0x28>
	__asm volatile
 800e3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3aa:	f383 8811 	msr	BASEPRI, r3
 800e3ae:	f3bf 8f6f 	isb	sy
 800e3b2:	f3bf 8f4f 	dsb	sy
 800e3b6:	60bb      	str	r3, [r7, #8]
}
 800e3b8:	bf00      	nop
 800e3ba:	e7fe      	b.n	800e3ba <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e3bc:	68f8      	ldr	r0, [r7, #12]
 800e3be:	f000 f935 	bl	800e62c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d102      	bne.n	800e3d2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800e3cc:	68f8      	ldr	r0, [r7, #12]
 800e3ce:	f001 fc47 	bl	800fc60 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e3d2:	bf00      	nop
 800e3d4:	3710      	adds	r7, #16
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}

0800e3da <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e3da:	b480      	push	{r7}
 800e3dc:	b085      	sub	sp, #20
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d006      	beq.n	800e3f8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	f1c3 0307 	rsb	r3, r3, #7
 800e3f4:	60fb      	str	r3, [r7, #12]
 800e3f6:	e001      	b.n	800e3fc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
	}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3714      	adds	r7, #20
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr

0800e40a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b086      	sub	sp, #24
 800e40e:	af00      	add	r7, sp, #0
 800e410:	60f8      	str	r0, [r7, #12]
 800e412:	60b9      	str	r1, [r7, #8]
 800e414:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e416:	2300      	movs	r3, #0
 800e418:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e41e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e424:	2b00      	cmp	r3, #0
 800e426:	d10d      	bne.n	800e444 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d14d      	bne.n	800e4cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	689b      	ldr	r3, [r3, #8]
 800e434:	4618      	mov	r0, r3
 800e436:	f000 ff6b 	bl	800f310 <xTaskPriorityDisinherit>
 800e43a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2200      	movs	r2, #0
 800e440:	609a      	str	r2, [r3, #8]
 800e442:	e043      	b.n	800e4cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d119      	bne.n	800e47e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	6858      	ldr	r0, [r3, #4]
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e452:	461a      	mov	r2, r3
 800e454:	68b9      	ldr	r1, [r7, #8]
 800e456:	f010 fe85 	bl	801f164 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	685a      	ldr	r2, [r3, #4]
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e462:	441a      	add	r2, r3
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	685a      	ldr	r2, [r3, #4]
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	689b      	ldr	r3, [r3, #8]
 800e470:	429a      	cmp	r2, r3
 800e472:	d32b      	bcc.n	800e4cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681a      	ldr	r2, [r3, #0]
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	605a      	str	r2, [r3, #4]
 800e47c:	e026      	b.n	800e4cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	68d8      	ldr	r0, [r3, #12]
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e486:	461a      	mov	r2, r3
 800e488:	68b9      	ldr	r1, [r7, #8]
 800e48a:	f010 fe6b 	bl	801f164 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	68da      	ldr	r2, [r3, #12]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e496:	425b      	negs	r3, r3
 800e498:	441a      	add	r2, r3
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	68da      	ldr	r2, [r3, #12]
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d207      	bcs.n	800e4ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	689a      	ldr	r2, [r3, #8]
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4b2:	425b      	negs	r3, r3
 800e4b4:	441a      	add	r2, r3
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2b02      	cmp	r3, #2
 800e4be:	d105      	bne.n	800e4cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d002      	beq.n	800e4cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	3b01      	subs	r3, #1
 800e4ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	1c5a      	adds	r2, r3, #1
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e4d4:	697b      	ldr	r3, [r7, #20]
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3718      	adds	r7, #24
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}

0800e4de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e4de:	b580      	push	{r7, lr}
 800e4e0:	b082      	sub	sp, #8
 800e4e2:	af00      	add	r7, sp, #0
 800e4e4:	6078      	str	r0, [r7, #4]
 800e4e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d018      	beq.n	800e522 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	68da      	ldr	r2, [r3, #12]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4f8:	441a      	add	r2, r3
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	68da      	ldr	r2, [r3, #12]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	689b      	ldr	r3, [r3, #8]
 800e506:	429a      	cmp	r2, r3
 800e508:	d303      	bcc.n	800e512 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681a      	ldr	r2, [r3, #0]
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	68d9      	ldr	r1, [r3, #12]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e51a:	461a      	mov	r2, r3
 800e51c:	6838      	ldr	r0, [r7, #0]
 800e51e:	f010 fe21 	bl	801f164 <memcpy>
	}
}
 800e522:	bf00      	nop
 800e524:	3708      	adds	r7, #8
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}

0800e52a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e52a:	b580      	push	{r7, lr}
 800e52c:	b084      	sub	sp, #16
 800e52e:	af00      	add	r7, sp, #0
 800e530:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e532:	f001 f9a7 	bl	800f884 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e53c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e53e:	e011      	b.n	800e564 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e544:	2b00      	cmp	r3, #0
 800e546:	d012      	beq.n	800e56e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	3324      	adds	r3, #36	; 0x24
 800e54c:	4618      	mov	r0, r3
 800e54e:	f000 fc8f 	bl	800ee70 <xTaskRemoveFromEventList>
 800e552:	4603      	mov	r3, r0
 800e554:	2b00      	cmp	r3, #0
 800e556:	d001      	beq.n	800e55c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e558:	f000 fd64 	bl	800f024 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e55c:	7bfb      	ldrb	r3, [r7, #15]
 800e55e:	3b01      	subs	r3, #1
 800e560:	b2db      	uxtb	r3, r3
 800e562:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	dce9      	bgt.n	800e540 <prvUnlockQueue+0x16>
 800e56c:	e000      	b.n	800e570 <prvUnlockQueue+0x46>
					break;
 800e56e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	22ff      	movs	r2, #255	; 0xff
 800e574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e578:	f001 f9b4 	bl	800f8e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e57c:	f001 f982 	bl	800f884 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e586:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e588:	e011      	b.n	800e5ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	691b      	ldr	r3, [r3, #16]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d012      	beq.n	800e5b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	3310      	adds	r3, #16
 800e596:	4618      	mov	r0, r3
 800e598:	f000 fc6a 	bl	800ee70 <xTaskRemoveFromEventList>
 800e59c:	4603      	mov	r3, r0
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d001      	beq.n	800e5a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e5a2:	f000 fd3f 	bl	800f024 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e5a6:	7bbb      	ldrb	r3, [r7, #14]
 800e5a8:	3b01      	subs	r3, #1
 800e5aa:	b2db      	uxtb	r3, r3
 800e5ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e5ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	dce9      	bgt.n	800e58a <prvUnlockQueue+0x60>
 800e5b6:	e000      	b.n	800e5ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e5b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	22ff      	movs	r2, #255	; 0xff
 800e5be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e5c2:	f001 f98f 	bl	800f8e4 <vPortExitCritical>
}
 800e5c6:	bf00      	nop
 800e5c8:	3710      	adds	r7, #16
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}

0800e5ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e5ce:	b580      	push	{r7, lr}
 800e5d0:	b084      	sub	sp, #16
 800e5d2:	af00      	add	r7, sp, #0
 800e5d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e5d6:	f001 f955 	bl	800f884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d102      	bne.n	800e5e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	60fb      	str	r3, [r7, #12]
 800e5e6:	e001      	b.n	800e5ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e5ec:	f001 f97a 	bl	800f8e4 <vPortExitCritical>

	return xReturn;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3710      	adds	r7, #16
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}

0800e5fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e5fa:	b580      	push	{r7, lr}
 800e5fc:	b084      	sub	sp, #16
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e602:	f001 f93f 	bl	800f884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e60e:	429a      	cmp	r2, r3
 800e610:	d102      	bne.n	800e618 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e612:	2301      	movs	r3, #1
 800e614:	60fb      	str	r3, [r7, #12]
 800e616:	e001      	b.n	800e61c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e618:	2300      	movs	r3, #0
 800e61a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e61c:	f001 f962 	bl	800f8e4 <vPortExitCritical>

	return xReturn;
 800e620:	68fb      	ldr	r3, [r7, #12]
}
 800e622:	4618      	mov	r0, r3
 800e624:	3710      	adds	r7, #16
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
	...

0800e62c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e62c:	b480      	push	{r7}
 800e62e:	b085      	sub	sp, #20
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e634:	2300      	movs	r3, #0
 800e636:	60fb      	str	r3, [r7, #12]
 800e638:	e016      	b.n	800e668 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e63a:	4a10      	ldr	r2, [pc, #64]	; (800e67c <vQueueUnregisterQueue+0x50>)
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	00db      	lsls	r3, r3, #3
 800e640:	4413      	add	r3, r2
 800e642:	685b      	ldr	r3, [r3, #4]
 800e644:	687a      	ldr	r2, [r7, #4]
 800e646:	429a      	cmp	r2, r3
 800e648:	d10b      	bne.n	800e662 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e64a:	4a0c      	ldr	r2, [pc, #48]	; (800e67c <vQueueUnregisterQueue+0x50>)
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2100      	movs	r1, #0
 800e650:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e654:	4a09      	ldr	r2, [pc, #36]	; (800e67c <vQueueUnregisterQueue+0x50>)
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	00db      	lsls	r3, r3, #3
 800e65a:	4413      	add	r3, r2
 800e65c:	2200      	movs	r2, #0
 800e65e:	605a      	str	r2, [r3, #4]
				break;
 800e660:	e006      	b.n	800e670 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	3301      	adds	r3, #1
 800e666:	60fb      	str	r3, [r7, #12]
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2b07      	cmp	r3, #7
 800e66c:	d9e5      	bls.n	800e63a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e66e:	bf00      	nop
 800e670:	bf00      	nop
 800e672:	3714      	adds	r7, #20
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr
 800e67c:	2000817c 	.word	0x2000817c

0800e680 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e680:	b580      	push	{r7, lr}
 800e682:	b08e      	sub	sp, #56	; 0x38
 800e684:	af04      	add	r7, sp, #16
 800e686:	60f8      	str	r0, [r7, #12]
 800e688:	60b9      	str	r1, [r7, #8]
 800e68a:	607a      	str	r2, [r7, #4]
 800e68c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e68e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e690:	2b00      	cmp	r3, #0
 800e692:	d10a      	bne.n	800e6aa <xTaskCreateStatic+0x2a>
	__asm volatile
 800e694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e698:	f383 8811 	msr	BASEPRI, r3
 800e69c:	f3bf 8f6f 	isb	sy
 800e6a0:	f3bf 8f4f 	dsb	sy
 800e6a4:	623b      	str	r3, [r7, #32]
}
 800e6a6:	bf00      	nop
 800e6a8:	e7fe      	b.n	800e6a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d10a      	bne.n	800e6c6 <xTaskCreateStatic+0x46>
	__asm volatile
 800e6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b4:	f383 8811 	msr	BASEPRI, r3
 800e6b8:	f3bf 8f6f 	isb	sy
 800e6bc:	f3bf 8f4f 	dsb	sy
 800e6c0:	61fb      	str	r3, [r7, #28]
}
 800e6c2:	bf00      	nop
 800e6c4:	e7fe      	b.n	800e6c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e6c6:	2354      	movs	r3, #84	; 0x54
 800e6c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	2b54      	cmp	r3, #84	; 0x54
 800e6ce:	d00a      	beq.n	800e6e6 <xTaskCreateStatic+0x66>
	__asm volatile
 800e6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d4:	f383 8811 	msr	BASEPRI, r3
 800e6d8:	f3bf 8f6f 	isb	sy
 800e6dc:	f3bf 8f4f 	dsb	sy
 800e6e0:	61bb      	str	r3, [r7, #24]
}
 800e6e2:	bf00      	nop
 800e6e4:	e7fe      	b.n	800e6e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e6e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d01e      	beq.n	800e72c <xTaskCreateStatic+0xac>
 800e6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d01b      	beq.n	800e72c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e700:	2202      	movs	r2, #2
 800e702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e706:	2300      	movs	r3, #0
 800e708:	9303      	str	r3, [sp, #12]
 800e70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70c:	9302      	str	r3, [sp, #8]
 800e70e:	f107 0314 	add.w	r3, r7, #20
 800e712:	9301      	str	r3, [sp, #4]
 800e714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e716:	9300      	str	r3, [sp, #0]
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	687a      	ldr	r2, [r7, #4]
 800e71c:	68b9      	ldr	r1, [r7, #8]
 800e71e:	68f8      	ldr	r0, [r7, #12]
 800e720:	f000 f850 	bl	800e7c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e724:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e726:	f000 f8d5 	bl	800e8d4 <prvAddNewTaskToReadyList>
 800e72a:	e001      	b.n	800e730 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e72c:	2300      	movs	r3, #0
 800e72e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e730:	697b      	ldr	r3, [r7, #20]
	}
 800e732:	4618      	mov	r0, r3
 800e734:	3728      	adds	r7, #40	; 0x28
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}

0800e73a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e73a:	b580      	push	{r7, lr}
 800e73c:	b08c      	sub	sp, #48	; 0x30
 800e73e:	af04      	add	r7, sp, #16
 800e740:	60f8      	str	r0, [r7, #12]
 800e742:	60b9      	str	r1, [r7, #8]
 800e744:	603b      	str	r3, [r7, #0]
 800e746:	4613      	mov	r3, r2
 800e748:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e74a:	88fb      	ldrh	r3, [r7, #6]
 800e74c:	009b      	lsls	r3, r3, #2
 800e74e:	4618      	mov	r0, r3
 800e750:	f001 f9ba 	bl	800fac8 <pvPortMalloc>
 800e754:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d00e      	beq.n	800e77a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e75c:	2054      	movs	r0, #84	; 0x54
 800e75e:	f001 f9b3 	bl	800fac8 <pvPortMalloc>
 800e762:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e764:	69fb      	ldr	r3, [r7, #28]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d003      	beq.n	800e772 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	697a      	ldr	r2, [r7, #20]
 800e76e:	631a      	str	r2, [r3, #48]	; 0x30
 800e770:	e005      	b.n	800e77e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e772:	6978      	ldr	r0, [r7, #20]
 800e774:	f001 fa74 	bl	800fc60 <vPortFree>
 800e778:	e001      	b.n	800e77e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e77a:	2300      	movs	r3, #0
 800e77c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d017      	beq.n	800e7b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	2200      	movs	r2, #0
 800e788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e78c:	88fa      	ldrh	r2, [r7, #6]
 800e78e:	2300      	movs	r3, #0
 800e790:	9303      	str	r3, [sp, #12]
 800e792:	69fb      	ldr	r3, [r7, #28]
 800e794:	9302      	str	r3, [sp, #8]
 800e796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e798:	9301      	str	r3, [sp, #4]
 800e79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79c:	9300      	str	r3, [sp, #0]
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	68b9      	ldr	r1, [r7, #8]
 800e7a2:	68f8      	ldr	r0, [r7, #12]
 800e7a4:	f000 f80e 	bl	800e7c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e7a8:	69f8      	ldr	r0, [r7, #28]
 800e7aa:	f000 f893 	bl	800e8d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	61bb      	str	r3, [r7, #24]
 800e7b2:	e002      	b.n	800e7ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e7b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e7b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e7ba:	69bb      	ldr	r3, [r7, #24]
	}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3720      	adds	r7, #32
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b088      	sub	sp, #32
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	607a      	str	r2, [r7, #4]
 800e7d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e7dc:	3b01      	subs	r3, #1
 800e7de:	009b      	lsls	r3, r3, #2
 800e7e0:	4413      	add	r3, r2
 800e7e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	f023 0307 	bic.w	r3, r3, #7
 800e7ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e7ec:	69bb      	ldr	r3, [r7, #24]
 800e7ee:	f003 0307 	and.w	r3, r3, #7
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d00a      	beq.n	800e80c <prvInitialiseNewTask+0x48>
	__asm volatile
 800e7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7fa:	f383 8811 	msr	BASEPRI, r3
 800e7fe:	f3bf 8f6f 	isb	sy
 800e802:	f3bf 8f4f 	dsb	sy
 800e806:	617b      	str	r3, [r7, #20]
}
 800e808:	bf00      	nop
 800e80a:	e7fe      	b.n	800e80a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d01f      	beq.n	800e852 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e812:	2300      	movs	r3, #0
 800e814:	61fb      	str	r3, [r7, #28]
 800e816:	e012      	b.n	800e83e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e818:	68ba      	ldr	r2, [r7, #8]
 800e81a:	69fb      	ldr	r3, [r7, #28]
 800e81c:	4413      	add	r3, r2
 800e81e:	7819      	ldrb	r1, [r3, #0]
 800e820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e822:	69fb      	ldr	r3, [r7, #28]
 800e824:	4413      	add	r3, r2
 800e826:	3334      	adds	r3, #52	; 0x34
 800e828:	460a      	mov	r2, r1
 800e82a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e82c:	68ba      	ldr	r2, [r7, #8]
 800e82e:	69fb      	ldr	r3, [r7, #28]
 800e830:	4413      	add	r3, r2
 800e832:	781b      	ldrb	r3, [r3, #0]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d006      	beq.n	800e846 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e838:	69fb      	ldr	r3, [r7, #28]
 800e83a:	3301      	adds	r3, #1
 800e83c:	61fb      	str	r3, [r7, #28]
 800e83e:	69fb      	ldr	r3, [r7, #28]
 800e840:	2b0f      	cmp	r3, #15
 800e842:	d9e9      	bls.n	800e818 <prvInitialiseNewTask+0x54>
 800e844:	e000      	b.n	800e848 <prvInitialiseNewTask+0x84>
			{
				break;
 800e846:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e84a:	2200      	movs	r2, #0
 800e84c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e850:	e003      	b.n	800e85a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e854:	2200      	movs	r2, #0
 800e856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85c:	2b06      	cmp	r3, #6
 800e85e:	d901      	bls.n	800e864 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e860:	2306      	movs	r3, #6
 800e862:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e868:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e86c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e86e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e872:	2200      	movs	r2, #0
 800e874:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e878:	3304      	adds	r3, #4
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7fe fea1 	bl	800d5c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e882:	3318      	adds	r3, #24
 800e884:	4618      	mov	r0, r3
 800e886:	f7fe fe9c 	bl	800d5c2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e88c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e88e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e892:	f1c3 0207 	rsb	r2, r3, #7
 800e896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e898:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e89c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e89e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e8ae:	683a      	ldr	r2, [r7, #0]
 800e8b0:	68f9      	ldr	r1, [r7, #12]
 800e8b2:	69b8      	ldr	r0, [r7, #24]
 800e8b4:	f000 feba 	bl	800f62c <pxPortInitialiseStack>
 800e8b8:	4602      	mov	r2, r0
 800e8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d002      	beq.n	800e8ca <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e8ca:	bf00      	nop
 800e8cc:	3720      	adds	r7, #32
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
	...

0800e8d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b082      	sub	sp, #8
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e8dc:	f000 ffd2 	bl	800f884 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e8e0:	4b2a      	ldr	r3, [pc, #168]	; (800e98c <prvAddNewTaskToReadyList+0xb8>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	4a29      	ldr	r2, [pc, #164]	; (800e98c <prvAddNewTaskToReadyList+0xb8>)
 800e8e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e8ea:	4b29      	ldr	r3, [pc, #164]	; (800e990 <prvAddNewTaskToReadyList+0xbc>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d109      	bne.n	800e906 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e8f2:	4a27      	ldr	r2, [pc, #156]	; (800e990 <prvAddNewTaskToReadyList+0xbc>)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e8f8:	4b24      	ldr	r3, [pc, #144]	; (800e98c <prvAddNewTaskToReadyList+0xb8>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	d110      	bne.n	800e922 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e900:	f000 fbb4 	bl	800f06c <prvInitialiseTaskLists>
 800e904:	e00d      	b.n	800e922 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e906:	4b23      	ldr	r3, [pc, #140]	; (800e994 <prvAddNewTaskToReadyList+0xc0>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d109      	bne.n	800e922 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e90e:	4b20      	ldr	r3, [pc, #128]	; (800e990 <prvAddNewTaskToReadyList+0xbc>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e918:	429a      	cmp	r2, r3
 800e91a:	d802      	bhi.n	800e922 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e91c:	4a1c      	ldr	r2, [pc, #112]	; (800e990 <prvAddNewTaskToReadyList+0xbc>)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e922:	4b1d      	ldr	r3, [pc, #116]	; (800e998 <prvAddNewTaskToReadyList+0xc4>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	3301      	adds	r3, #1
 800e928:	4a1b      	ldr	r2, [pc, #108]	; (800e998 <prvAddNewTaskToReadyList+0xc4>)
 800e92a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e930:	2201      	movs	r2, #1
 800e932:	409a      	lsls	r2, r3
 800e934:	4b19      	ldr	r3, [pc, #100]	; (800e99c <prvAddNewTaskToReadyList+0xc8>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4313      	orrs	r3, r2
 800e93a:	4a18      	ldr	r2, [pc, #96]	; (800e99c <prvAddNewTaskToReadyList+0xc8>)
 800e93c:	6013      	str	r3, [r2, #0]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e942:	4613      	mov	r3, r2
 800e944:	009b      	lsls	r3, r3, #2
 800e946:	4413      	add	r3, r2
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	4a15      	ldr	r2, [pc, #84]	; (800e9a0 <prvAddNewTaskToReadyList+0xcc>)
 800e94c:	441a      	add	r2, r3
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	3304      	adds	r3, #4
 800e952:	4619      	mov	r1, r3
 800e954:	4610      	mov	r0, r2
 800e956:	f7fe fe41 	bl	800d5dc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e95a:	f000 ffc3 	bl	800f8e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e95e:	4b0d      	ldr	r3, [pc, #52]	; (800e994 <prvAddNewTaskToReadyList+0xc0>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d00e      	beq.n	800e984 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e966:	4b0a      	ldr	r3, [pc, #40]	; (800e990 <prvAddNewTaskToReadyList+0xbc>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e970:	429a      	cmp	r2, r3
 800e972:	d207      	bcs.n	800e984 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e974:	4b0b      	ldr	r3, [pc, #44]	; (800e9a4 <prvAddNewTaskToReadyList+0xd0>)
 800e976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e97a:	601a      	str	r2, [r3, #0]
 800e97c:	f3bf 8f4f 	dsb	sy
 800e980:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e984:	bf00      	nop
 800e986:	3708      	adds	r7, #8
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	2000068c 	.word	0x2000068c
 800e990:	2000058c 	.word	0x2000058c
 800e994:	20000698 	.word	0x20000698
 800e998:	200006a8 	.word	0x200006a8
 800e99c:	20000694 	.word	0x20000694
 800e9a0:	20000590 	.word	0x20000590
 800e9a4:	e000ed04 	.word	0xe000ed04

0800e9a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b08a      	sub	sp, #40	; 0x28
 800e9ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e9b6:	463a      	mov	r2, r7
 800e9b8:	1d39      	adds	r1, r7, #4
 800e9ba:	f107 0308 	add.w	r3, r7, #8
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7f2 fba0 	bl	8001104 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e9c4:	6839      	ldr	r1, [r7, #0]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	68ba      	ldr	r2, [r7, #8]
 800e9ca:	9202      	str	r2, [sp, #8]
 800e9cc:	9301      	str	r3, [sp, #4]
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	9300      	str	r3, [sp, #0]
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	460a      	mov	r2, r1
 800e9d6:	491e      	ldr	r1, [pc, #120]	; (800ea50 <vTaskStartScheduler+0xa8>)
 800e9d8:	481e      	ldr	r0, [pc, #120]	; (800ea54 <vTaskStartScheduler+0xac>)
 800e9da:	f7ff fe51 	bl	800e680 <xTaskCreateStatic>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	4a1d      	ldr	r2, [pc, #116]	; (800ea58 <vTaskStartScheduler+0xb0>)
 800e9e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e9e4:	4b1c      	ldr	r3, [pc, #112]	; (800ea58 <vTaskStartScheduler+0xb0>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d002      	beq.n	800e9f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	617b      	str	r3, [r7, #20]
 800e9f0:	e001      	b.n	800e9f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	2b01      	cmp	r3, #1
 800e9fa:	d116      	bne.n	800ea2a <vTaskStartScheduler+0x82>
	__asm volatile
 800e9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea00:	f383 8811 	msr	BASEPRI, r3
 800ea04:	f3bf 8f6f 	isb	sy
 800ea08:	f3bf 8f4f 	dsb	sy
 800ea0c:	613b      	str	r3, [r7, #16]
}
 800ea0e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ea10:	4b12      	ldr	r3, [pc, #72]	; (800ea5c <vTaskStartScheduler+0xb4>)
 800ea12:	f04f 32ff 	mov.w	r2, #4294967295
 800ea16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ea18:	4b11      	ldr	r3, [pc, #68]	; (800ea60 <vTaskStartScheduler+0xb8>)
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ea1e:	4b11      	ldr	r3, [pc, #68]	; (800ea64 <vTaskStartScheduler+0xbc>)
 800ea20:	2200      	movs	r2, #0
 800ea22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ea24:	f000 fe8c 	bl	800f740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ea28:	e00e      	b.n	800ea48 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea30:	d10a      	bne.n	800ea48 <vTaskStartScheduler+0xa0>
	__asm volatile
 800ea32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea36:	f383 8811 	msr	BASEPRI, r3
 800ea3a:	f3bf 8f6f 	isb	sy
 800ea3e:	f3bf 8f4f 	dsb	sy
 800ea42:	60fb      	str	r3, [r7, #12]
}
 800ea44:	bf00      	nop
 800ea46:	e7fe      	b.n	800ea46 <vTaskStartScheduler+0x9e>
}
 800ea48:	bf00      	nop
 800ea4a:	3718      	adds	r7, #24
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}
 800ea50:	08022e54 	.word	0x08022e54
 800ea54:	0800f03d 	.word	0x0800f03d
 800ea58:	200006b0 	.word	0x200006b0
 800ea5c:	200006ac 	.word	0x200006ac
 800ea60:	20000698 	.word	0x20000698
 800ea64:	20000690 	.word	0x20000690

0800ea68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ea68:	b480      	push	{r7}
 800ea6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ea6c:	4b04      	ldr	r3, [pc, #16]	; (800ea80 <vTaskSuspendAll+0x18>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	3301      	adds	r3, #1
 800ea72:	4a03      	ldr	r2, [pc, #12]	; (800ea80 <vTaskSuspendAll+0x18>)
 800ea74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ea76:	bf00      	nop
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr
 800ea80:	200006b4 	.word	0x200006b4

0800ea84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b084      	sub	sp, #16
 800ea88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ea92:	4b41      	ldr	r3, [pc, #260]	; (800eb98 <xTaskResumeAll+0x114>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d10a      	bne.n	800eab0 <xTaskResumeAll+0x2c>
	__asm volatile
 800ea9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea9e:	f383 8811 	msr	BASEPRI, r3
 800eaa2:	f3bf 8f6f 	isb	sy
 800eaa6:	f3bf 8f4f 	dsb	sy
 800eaaa:	603b      	str	r3, [r7, #0]
}
 800eaac:	bf00      	nop
 800eaae:	e7fe      	b.n	800eaae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800eab0:	f000 fee8 	bl	800f884 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800eab4:	4b38      	ldr	r3, [pc, #224]	; (800eb98 <xTaskResumeAll+0x114>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	3b01      	subs	r3, #1
 800eaba:	4a37      	ldr	r2, [pc, #220]	; (800eb98 <xTaskResumeAll+0x114>)
 800eabc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eabe:	4b36      	ldr	r3, [pc, #216]	; (800eb98 <xTaskResumeAll+0x114>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d161      	bne.n	800eb8a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800eac6:	4b35      	ldr	r3, [pc, #212]	; (800eb9c <xTaskResumeAll+0x118>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d05d      	beq.n	800eb8a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eace:	e02e      	b.n	800eb2e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ead0:	4b33      	ldr	r3, [pc, #204]	; (800eba0 <xTaskResumeAll+0x11c>)
 800ead2:	68db      	ldr	r3, [r3, #12]
 800ead4:	68db      	ldr	r3, [r3, #12]
 800ead6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	3318      	adds	r3, #24
 800eadc:	4618      	mov	r0, r3
 800eade:	f7fe fdda 	bl	800d696 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	3304      	adds	r3, #4
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7fe fdd5 	bl	800d696 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaf0:	2201      	movs	r2, #1
 800eaf2:	409a      	lsls	r2, r3
 800eaf4:	4b2b      	ldr	r3, [pc, #172]	; (800eba4 <xTaskResumeAll+0x120>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4313      	orrs	r3, r2
 800eafa:	4a2a      	ldr	r2, [pc, #168]	; (800eba4 <xTaskResumeAll+0x120>)
 800eafc:	6013      	str	r3, [r2, #0]
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb02:	4613      	mov	r3, r2
 800eb04:	009b      	lsls	r3, r3, #2
 800eb06:	4413      	add	r3, r2
 800eb08:	009b      	lsls	r3, r3, #2
 800eb0a:	4a27      	ldr	r2, [pc, #156]	; (800eba8 <xTaskResumeAll+0x124>)
 800eb0c:	441a      	add	r2, r3
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	3304      	adds	r3, #4
 800eb12:	4619      	mov	r1, r3
 800eb14:	4610      	mov	r0, r2
 800eb16:	f7fe fd61 	bl	800d5dc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb1e:	4b23      	ldr	r3, [pc, #140]	; (800ebac <xTaskResumeAll+0x128>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d302      	bcc.n	800eb2e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800eb28:	4b21      	ldr	r3, [pc, #132]	; (800ebb0 <xTaskResumeAll+0x12c>)
 800eb2a:	2201      	movs	r2, #1
 800eb2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eb2e:	4b1c      	ldr	r3, [pc, #112]	; (800eba0 <xTaskResumeAll+0x11c>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d1cc      	bne.n	800ead0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d001      	beq.n	800eb40 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800eb3c:	f000 fb34 	bl	800f1a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800eb40:	4b1c      	ldr	r3, [pc, #112]	; (800ebb4 <xTaskResumeAll+0x130>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d010      	beq.n	800eb6e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800eb4c:	f000 f858 	bl	800ec00 <xTaskIncrementTick>
 800eb50:	4603      	mov	r3, r0
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d002      	beq.n	800eb5c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800eb56:	4b16      	ldr	r3, [pc, #88]	; (800ebb0 <xTaskResumeAll+0x12c>)
 800eb58:	2201      	movs	r2, #1
 800eb5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	3b01      	subs	r3, #1
 800eb60:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d1f1      	bne.n	800eb4c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800eb68:	4b12      	ldr	r3, [pc, #72]	; (800ebb4 <xTaskResumeAll+0x130>)
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eb6e:	4b10      	ldr	r3, [pc, #64]	; (800ebb0 <xTaskResumeAll+0x12c>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d009      	beq.n	800eb8a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eb76:	2301      	movs	r3, #1
 800eb78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eb7a:	4b0f      	ldr	r3, [pc, #60]	; (800ebb8 <xTaskResumeAll+0x134>)
 800eb7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb80:	601a      	str	r2, [r3, #0]
 800eb82:	f3bf 8f4f 	dsb	sy
 800eb86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eb8a:	f000 feab 	bl	800f8e4 <vPortExitCritical>

	return xAlreadyYielded;
 800eb8e:	68bb      	ldr	r3, [r7, #8]
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3710      	adds	r7, #16
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}
 800eb98:	200006b4 	.word	0x200006b4
 800eb9c:	2000068c 	.word	0x2000068c
 800eba0:	2000064c 	.word	0x2000064c
 800eba4:	20000694 	.word	0x20000694
 800eba8:	20000590 	.word	0x20000590
 800ebac:	2000058c 	.word	0x2000058c
 800ebb0:	200006a0 	.word	0x200006a0
 800ebb4:	2000069c 	.word	0x2000069c
 800ebb8:	e000ed04 	.word	0xe000ed04

0800ebbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b083      	sub	sp, #12
 800ebc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ebc2:	4b05      	ldr	r3, [pc, #20]	; (800ebd8 <xTaskGetTickCount+0x1c>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ebc8:	687b      	ldr	r3, [r7, #4]
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	370c      	adds	r7, #12
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop
 800ebd8:	20000690 	.word	0x20000690

0800ebdc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ebe2:	f000 ff31 	bl	800fa48 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ebea:	4b04      	ldr	r3, [pc, #16]	; (800ebfc <xTaskGetTickCountFromISR+0x20>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ebf0:	683b      	ldr	r3, [r7, #0]
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3708      	adds	r7, #8
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	20000690 	.word	0x20000690

0800ec00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b086      	sub	sp, #24
 800ec04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ec06:	2300      	movs	r3, #0
 800ec08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec0a:	4b4e      	ldr	r3, [pc, #312]	; (800ed44 <xTaskIncrementTick+0x144>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	f040 808e 	bne.w	800ed30 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ec14:	4b4c      	ldr	r3, [pc, #304]	; (800ed48 <xTaskIncrementTick+0x148>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	3301      	adds	r3, #1
 800ec1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ec1c:	4a4a      	ldr	r2, [pc, #296]	; (800ed48 <xTaskIncrementTick+0x148>)
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d120      	bne.n	800ec6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ec28:	4b48      	ldr	r3, [pc, #288]	; (800ed4c <xTaskIncrementTick+0x14c>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d00a      	beq.n	800ec48 <xTaskIncrementTick+0x48>
	__asm volatile
 800ec32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec36:	f383 8811 	msr	BASEPRI, r3
 800ec3a:	f3bf 8f6f 	isb	sy
 800ec3e:	f3bf 8f4f 	dsb	sy
 800ec42:	603b      	str	r3, [r7, #0]
}
 800ec44:	bf00      	nop
 800ec46:	e7fe      	b.n	800ec46 <xTaskIncrementTick+0x46>
 800ec48:	4b40      	ldr	r3, [pc, #256]	; (800ed4c <xTaskIncrementTick+0x14c>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	60fb      	str	r3, [r7, #12]
 800ec4e:	4b40      	ldr	r3, [pc, #256]	; (800ed50 <xTaskIncrementTick+0x150>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	4a3e      	ldr	r2, [pc, #248]	; (800ed4c <xTaskIncrementTick+0x14c>)
 800ec54:	6013      	str	r3, [r2, #0]
 800ec56:	4a3e      	ldr	r2, [pc, #248]	; (800ed50 <xTaskIncrementTick+0x150>)
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	6013      	str	r3, [r2, #0]
 800ec5c:	4b3d      	ldr	r3, [pc, #244]	; (800ed54 <xTaskIncrementTick+0x154>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	3301      	adds	r3, #1
 800ec62:	4a3c      	ldr	r2, [pc, #240]	; (800ed54 <xTaskIncrementTick+0x154>)
 800ec64:	6013      	str	r3, [r2, #0]
 800ec66:	f000 fa9f 	bl	800f1a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ec6a:	4b3b      	ldr	r3, [pc, #236]	; (800ed58 <xTaskIncrementTick+0x158>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	693a      	ldr	r2, [r7, #16]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d348      	bcc.n	800ed06 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec74:	4b35      	ldr	r3, [pc, #212]	; (800ed4c <xTaskIncrementTick+0x14c>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d104      	bne.n	800ec88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec7e:	4b36      	ldr	r3, [pc, #216]	; (800ed58 <xTaskIncrementTick+0x158>)
 800ec80:	f04f 32ff 	mov.w	r2, #4294967295
 800ec84:	601a      	str	r2, [r3, #0]
					break;
 800ec86:	e03e      	b.n	800ed06 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec88:	4b30      	ldr	r3, [pc, #192]	; (800ed4c <xTaskIncrementTick+0x14c>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	68db      	ldr	r3, [r3, #12]
 800ec8e:	68db      	ldr	r3, [r3, #12]
 800ec90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	685b      	ldr	r3, [r3, #4]
 800ec96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ec98:	693a      	ldr	r2, [r7, #16]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d203      	bcs.n	800eca8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800eca0:	4a2d      	ldr	r2, [pc, #180]	; (800ed58 <xTaskIncrementTick+0x158>)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800eca6:	e02e      	b.n	800ed06 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	3304      	adds	r3, #4
 800ecac:	4618      	mov	r0, r3
 800ecae:	f7fe fcf2 	bl	800d696 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d004      	beq.n	800ecc4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	3318      	adds	r3, #24
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7fe fce9 	bl	800d696 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecc8:	2201      	movs	r2, #1
 800ecca:	409a      	lsls	r2, r3
 800eccc:	4b23      	ldr	r3, [pc, #140]	; (800ed5c <xTaskIncrementTick+0x15c>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	4313      	orrs	r3, r2
 800ecd2:	4a22      	ldr	r2, [pc, #136]	; (800ed5c <xTaskIncrementTick+0x15c>)
 800ecd4:	6013      	str	r3, [r2, #0]
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecda:	4613      	mov	r3, r2
 800ecdc:	009b      	lsls	r3, r3, #2
 800ecde:	4413      	add	r3, r2
 800ece0:	009b      	lsls	r3, r3, #2
 800ece2:	4a1f      	ldr	r2, [pc, #124]	; (800ed60 <xTaskIncrementTick+0x160>)
 800ece4:	441a      	add	r2, r3
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	3304      	adds	r3, #4
 800ecea:	4619      	mov	r1, r3
 800ecec:	4610      	mov	r0, r2
 800ecee:	f7fe fc75 	bl	800d5dc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecf6:	4b1b      	ldr	r3, [pc, #108]	; (800ed64 <xTaskIncrementTick+0x164>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d3b9      	bcc.n	800ec74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ed00:	2301      	movs	r3, #1
 800ed02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed04:	e7b6      	b.n	800ec74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ed06:	4b17      	ldr	r3, [pc, #92]	; (800ed64 <xTaskIncrementTick+0x164>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed0c:	4914      	ldr	r1, [pc, #80]	; (800ed60 <xTaskIncrementTick+0x160>)
 800ed0e:	4613      	mov	r3, r2
 800ed10:	009b      	lsls	r3, r3, #2
 800ed12:	4413      	add	r3, r2
 800ed14:	009b      	lsls	r3, r3, #2
 800ed16:	440b      	add	r3, r1
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	2b01      	cmp	r3, #1
 800ed1c:	d901      	bls.n	800ed22 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ed1e:	2301      	movs	r3, #1
 800ed20:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ed22:	4b11      	ldr	r3, [pc, #68]	; (800ed68 <xTaskIncrementTick+0x168>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d007      	beq.n	800ed3a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	617b      	str	r3, [r7, #20]
 800ed2e:	e004      	b.n	800ed3a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ed30:	4b0e      	ldr	r3, [pc, #56]	; (800ed6c <xTaskIncrementTick+0x16c>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	3301      	adds	r3, #1
 800ed36:	4a0d      	ldr	r2, [pc, #52]	; (800ed6c <xTaskIncrementTick+0x16c>)
 800ed38:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ed3a:	697b      	ldr	r3, [r7, #20]
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3718      	adds	r7, #24
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	200006b4 	.word	0x200006b4
 800ed48:	20000690 	.word	0x20000690
 800ed4c:	20000644 	.word	0x20000644
 800ed50:	20000648 	.word	0x20000648
 800ed54:	200006a4 	.word	0x200006a4
 800ed58:	200006ac 	.word	0x200006ac
 800ed5c:	20000694 	.word	0x20000694
 800ed60:	20000590 	.word	0x20000590
 800ed64:	2000058c 	.word	0x2000058c
 800ed68:	200006a0 	.word	0x200006a0
 800ed6c:	2000069c 	.word	0x2000069c

0800ed70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ed70:	b480      	push	{r7}
 800ed72:	b087      	sub	sp, #28
 800ed74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ed76:	4b27      	ldr	r3, [pc, #156]	; (800ee14 <vTaskSwitchContext+0xa4>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d003      	beq.n	800ed86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ed7e:	4b26      	ldr	r3, [pc, #152]	; (800ee18 <vTaskSwitchContext+0xa8>)
 800ed80:	2201      	movs	r2, #1
 800ed82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ed84:	e03f      	b.n	800ee06 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800ed86:	4b24      	ldr	r3, [pc, #144]	; (800ee18 <vTaskSwitchContext+0xa8>)
 800ed88:	2200      	movs	r2, #0
 800ed8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed8c:	4b23      	ldr	r3, [pc, #140]	; (800ee1c <vTaskSwitchContext+0xac>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	fab3 f383 	clz	r3, r3
 800ed98:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ed9a:	7afb      	ldrb	r3, [r7, #11]
 800ed9c:	f1c3 031f 	rsb	r3, r3, #31
 800eda0:	617b      	str	r3, [r7, #20]
 800eda2:	491f      	ldr	r1, [pc, #124]	; (800ee20 <vTaskSwitchContext+0xb0>)
 800eda4:	697a      	ldr	r2, [r7, #20]
 800eda6:	4613      	mov	r3, r2
 800eda8:	009b      	lsls	r3, r3, #2
 800edaa:	4413      	add	r3, r2
 800edac:	009b      	lsls	r3, r3, #2
 800edae:	440b      	add	r3, r1
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d10a      	bne.n	800edcc <vTaskSwitchContext+0x5c>
	__asm volatile
 800edb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edba:	f383 8811 	msr	BASEPRI, r3
 800edbe:	f3bf 8f6f 	isb	sy
 800edc2:	f3bf 8f4f 	dsb	sy
 800edc6:	607b      	str	r3, [r7, #4]
}
 800edc8:	bf00      	nop
 800edca:	e7fe      	b.n	800edca <vTaskSwitchContext+0x5a>
 800edcc:	697a      	ldr	r2, [r7, #20]
 800edce:	4613      	mov	r3, r2
 800edd0:	009b      	lsls	r3, r3, #2
 800edd2:	4413      	add	r3, r2
 800edd4:	009b      	lsls	r3, r3, #2
 800edd6:	4a12      	ldr	r2, [pc, #72]	; (800ee20 <vTaskSwitchContext+0xb0>)
 800edd8:	4413      	add	r3, r2
 800edda:	613b      	str	r3, [r7, #16]
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	685b      	ldr	r3, [r3, #4]
 800ede0:	685a      	ldr	r2, [r3, #4]
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	605a      	str	r2, [r3, #4]
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	685a      	ldr	r2, [r3, #4]
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	3308      	adds	r3, #8
 800edee:	429a      	cmp	r2, r3
 800edf0:	d104      	bne.n	800edfc <vTaskSwitchContext+0x8c>
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	685b      	ldr	r3, [r3, #4]
 800edf6:	685a      	ldr	r2, [r3, #4]
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	605a      	str	r2, [r3, #4]
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	68db      	ldr	r3, [r3, #12]
 800ee02:	4a08      	ldr	r2, [pc, #32]	; (800ee24 <vTaskSwitchContext+0xb4>)
 800ee04:	6013      	str	r3, [r2, #0]
}
 800ee06:	bf00      	nop
 800ee08:	371c      	adds	r7, #28
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee10:	4770      	bx	lr
 800ee12:	bf00      	nop
 800ee14:	200006b4 	.word	0x200006b4
 800ee18:	200006a0 	.word	0x200006a0
 800ee1c:	20000694 	.word	0x20000694
 800ee20:	20000590 	.word	0x20000590
 800ee24:	2000058c 	.word	0x2000058c

0800ee28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b084      	sub	sp, #16
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d10a      	bne.n	800ee4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ee38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee3c:	f383 8811 	msr	BASEPRI, r3
 800ee40:	f3bf 8f6f 	isb	sy
 800ee44:	f3bf 8f4f 	dsb	sy
 800ee48:	60fb      	str	r3, [r7, #12]
}
 800ee4a:	bf00      	nop
 800ee4c:	e7fe      	b.n	800ee4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ee4e:	4b07      	ldr	r3, [pc, #28]	; (800ee6c <vTaskPlaceOnEventList+0x44>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	3318      	adds	r3, #24
 800ee54:	4619      	mov	r1, r3
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f7fe fbe4 	bl	800d624 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ee5c:	2101      	movs	r1, #1
 800ee5e:	6838      	ldr	r0, [r7, #0]
 800ee60:	f000 fb7e 	bl	800f560 <prvAddCurrentTaskToDelayedList>
}
 800ee64:	bf00      	nop
 800ee66:	3710      	adds	r7, #16
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}
 800ee6c:	2000058c 	.word	0x2000058c

0800ee70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b086      	sub	sp, #24
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	68db      	ldr	r3, [r3, #12]
 800ee7c:	68db      	ldr	r3, [r3, #12]
 800ee7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d10a      	bne.n	800ee9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ee86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8a:	f383 8811 	msr	BASEPRI, r3
 800ee8e:	f3bf 8f6f 	isb	sy
 800ee92:	f3bf 8f4f 	dsb	sy
 800ee96:	60fb      	str	r3, [r7, #12]
}
 800ee98:	bf00      	nop
 800ee9a:	e7fe      	b.n	800ee9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ee9c:	693b      	ldr	r3, [r7, #16]
 800ee9e:	3318      	adds	r3, #24
 800eea0:	4618      	mov	r0, r3
 800eea2:	f7fe fbf8 	bl	800d696 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eea6:	4b1d      	ldr	r3, [pc, #116]	; (800ef1c <xTaskRemoveFromEventList+0xac>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d11c      	bne.n	800eee8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	3304      	adds	r3, #4
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7fe fbef 	bl	800d696 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eebc:	2201      	movs	r2, #1
 800eebe:	409a      	lsls	r2, r3
 800eec0:	4b17      	ldr	r3, [pc, #92]	; (800ef20 <xTaskRemoveFromEventList+0xb0>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	4313      	orrs	r3, r2
 800eec6:	4a16      	ldr	r2, [pc, #88]	; (800ef20 <xTaskRemoveFromEventList+0xb0>)
 800eec8:	6013      	str	r3, [r2, #0]
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eece:	4613      	mov	r3, r2
 800eed0:	009b      	lsls	r3, r3, #2
 800eed2:	4413      	add	r3, r2
 800eed4:	009b      	lsls	r3, r3, #2
 800eed6:	4a13      	ldr	r2, [pc, #76]	; (800ef24 <xTaskRemoveFromEventList+0xb4>)
 800eed8:	441a      	add	r2, r3
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	3304      	adds	r3, #4
 800eede:	4619      	mov	r1, r3
 800eee0:	4610      	mov	r0, r2
 800eee2:	f7fe fb7b 	bl	800d5dc <vListInsertEnd>
 800eee6:	e005      	b.n	800eef4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eee8:	693b      	ldr	r3, [r7, #16]
 800eeea:	3318      	adds	r3, #24
 800eeec:	4619      	mov	r1, r3
 800eeee:	480e      	ldr	r0, [pc, #56]	; (800ef28 <xTaskRemoveFromEventList+0xb8>)
 800eef0:	f7fe fb74 	bl	800d5dc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eef8:	4b0c      	ldr	r3, [pc, #48]	; (800ef2c <xTaskRemoveFromEventList+0xbc>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d905      	bls.n	800ef0e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ef02:	2301      	movs	r3, #1
 800ef04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ef06:	4b0a      	ldr	r3, [pc, #40]	; (800ef30 <xTaskRemoveFromEventList+0xc0>)
 800ef08:	2201      	movs	r2, #1
 800ef0a:	601a      	str	r2, [r3, #0]
 800ef0c:	e001      	b.n	800ef12 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ef12:	697b      	ldr	r3, [r7, #20]
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3718      	adds	r7, #24
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	200006b4 	.word	0x200006b4
 800ef20:	20000694 	.word	0x20000694
 800ef24:	20000590 	.word	0x20000590
 800ef28:	2000064c 	.word	0x2000064c
 800ef2c:	2000058c 	.word	0x2000058c
 800ef30:	200006a0 	.word	0x200006a0

0800ef34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ef3c:	4b06      	ldr	r3, [pc, #24]	; (800ef58 <vTaskInternalSetTimeOutState+0x24>)
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ef44:	4b05      	ldr	r3, [pc, #20]	; (800ef5c <vTaskInternalSetTimeOutState+0x28>)
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	605a      	str	r2, [r3, #4]
}
 800ef4c:	bf00      	nop
 800ef4e:	370c      	adds	r7, #12
 800ef50:	46bd      	mov	sp, r7
 800ef52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef56:	4770      	bx	lr
 800ef58:	200006a4 	.word	0x200006a4
 800ef5c:	20000690 	.word	0x20000690

0800ef60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b088      	sub	sp, #32
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d10a      	bne.n	800ef86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ef70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef74:	f383 8811 	msr	BASEPRI, r3
 800ef78:	f3bf 8f6f 	isb	sy
 800ef7c:	f3bf 8f4f 	dsb	sy
 800ef80:	613b      	str	r3, [r7, #16]
}
 800ef82:	bf00      	nop
 800ef84:	e7fe      	b.n	800ef84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d10a      	bne.n	800efa2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ef8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef90:	f383 8811 	msr	BASEPRI, r3
 800ef94:	f3bf 8f6f 	isb	sy
 800ef98:	f3bf 8f4f 	dsb	sy
 800ef9c:	60fb      	str	r3, [r7, #12]
}
 800ef9e:	bf00      	nop
 800efa0:	e7fe      	b.n	800efa0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800efa2:	f000 fc6f 	bl	800f884 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800efa6:	4b1d      	ldr	r3, [pc, #116]	; (800f01c <xTaskCheckForTimeOut+0xbc>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	69ba      	ldr	r2, [r7, #24]
 800efb2:	1ad3      	subs	r3, r2, r3
 800efb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efbe:	d102      	bne.n	800efc6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800efc0:	2300      	movs	r3, #0
 800efc2:	61fb      	str	r3, [r7, #28]
 800efc4:	e023      	b.n	800f00e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681a      	ldr	r2, [r3, #0]
 800efca:	4b15      	ldr	r3, [pc, #84]	; (800f020 <xTaskCheckForTimeOut+0xc0>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	429a      	cmp	r2, r3
 800efd0:	d007      	beq.n	800efe2 <xTaskCheckForTimeOut+0x82>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	685b      	ldr	r3, [r3, #4]
 800efd6:	69ba      	ldr	r2, [r7, #24]
 800efd8:	429a      	cmp	r2, r3
 800efda:	d302      	bcc.n	800efe2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800efdc:	2301      	movs	r3, #1
 800efde:	61fb      	str	r3, [r7, #28]
 800efe0:	e015      	b.n	800f00e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	697a      	ldr	r2, [r7, #20]
 800efe8:	429a      	cmp	r2, r3
 800efea:	d20b      	bcs.n	800f004 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	681a      	ldr	r2, [r3, #0]
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	1ad2      	subs	r2, r2, r3
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f7ff ff9b 	bl	800ef34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800effe:	2300      	movs	r3, #0
 800f000:	61fb      	str	r3, [r7, #28]
 800f002:	e004      	b.n	800f00e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	2200      	movs	r2, #0
 800f008:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f00a:	2301      	movs	r3, #1
 800f00c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f00e:	f000 fc69 	bl	800f8e4 <vPortExitCritical>

	return xReturn;
 800f012:	69fb      	ldr	r3, [r7, #28]
}
 800f014:	4618      	mov	r0, r3
 800f016:	3720      	adds	r7, #32
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}
 800f01c:	20000690 	.word	0x20000690
 800f020:	200006a4 	.word	0x200006a4

0800f024 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f024:	b480      	push	{r7}
 800f026:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f028:	4b03      	ldr	r3, [pc, #12]	; (800f038 <vTaskMissedYield+0x14>)
 800f02a:	2201      	movs	r2, #1
 800f02c:	601a      	str	r2, [r3, #0]
}
 800f02e:	bf00      	nop
 800f030:	46bd      	mov	sp, r7
 800f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f036:	4770      	bx	lr
 800f038:	200006a0 	.word	0x200006a0

0800f03c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b082      	sub	sp, #8
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f044:	f000 f852 	bl	800f0ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f048:	4b06      	ldr	r3, [pc, #24]	; (800f064 <prvIdleTask+0x28>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	d9f9      	bls.n	800f044 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f050:	4b05      	ldr	r3, [pc, #20]	; (800f068 <prvIdleTask+0x2c>)
 800f052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f056:	601a      	str	r2, [r3, #0]
 800f058:	f3bf 8f4f 	dsb	sy
 800f05c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f060:	e7f0      	b.n	800f044 <prvIdleTask+0x8>
 800f062:	bf00      	nop
 800f064:	20000590 	.word	0x20000590
 800f068:	e000ed04 	.word	0xe000ed04

0800f06c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b082      	sub	sp, #8
 800f070:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f072:	2300      	movs	r3, #0
 800f074:	607b      	str	r3, [r7, #4]
 800f076:	e00c      	b.n	800f092 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f078:	687a      	ldr	r2, [r7, #4]
 800f07a:	4613      	mov	r3, r2
 800f07c:	009b      	lsls	r3, r3, #2
 800f07e:	4413      	add	r3, r2
 800f080:	009b      	lsls	r3, r3, #2
 800f082:	4a12      	ldr	r2, [pc, #72]	; (800f0cc <prvInitialiseTaskLists+0x60>)
 800f084:	4413      	add	r3, r2
 800f086:	4618      	mov	r0, r3
 800f088:	f7fe fa7b 	bl	800d582 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	3301      	adds	r3, #1
 800f090:	607b      	str	r3, [r7, #4]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2b06      	cmp	r3, #6
 800f096:	d9ef      	bls.n	800f078 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f098:	480d      	ldr	r0, [pc, #52]	; (800f0d0 <prvInitialiseTaskLists+0x64>)
 800f09a:	f7fe fa72 	bl	800d582 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f09e:	480d      	ldr	r0, [pc, #52]	; (800f0d4 <prvInitialiseTaskLists+0x68>)
 800f0a0:	f7fe fa6f 	bl	800d582 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f0a4:	480c      	ldr	r0, [pc, #48]	; (800f0d8 <prvInitialiseTaskLists+0x6c>)
 800f0a6:	f7fe fa6c 	bl	800d582 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f0aa:	480c      	ldr	r0, [pc, #48]	; (800f0dc <prvInitialiseTaskLists+0x70>)
 800f0ac:	f7fe fa69 	bl	800d582 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f0b0:	480b      	ldr	r0, [pc, #44]	; (800f0e0 <prvInitialiseTaskLists+0x74>)
 800f0b2:	f7fe fa66 	bl	800d582 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f0b6:	4b0b      	ldr	r3, [pc, #44]	; (800f0e4 <prvInitialiseTaskLists+0x78>)
 800f0b8:	4a05      	ldr	r2, [pc, #20]	; (800f0d0 <prvInitialiseTaskLists+0x64>)
 800f0ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f0bc:	4b0a      	ldr	r3, [pc, #40]	; (800f0e8 <prvInitialiseTaskLists+0x7c>)
 800f0be:	4a05      	ldr	r2, [pc, #20]	; (800f0d4 <prvInitialiseTaskLists+0x68>)
 800f0c0:	601a      	str	r2, [r3, #0]
}
 800f0c2:	bf00      	nop
 800f0c4:	3708      	adds	r7, #8
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}
 800f0ca:	bf00      	nop
 800f0cc:	20000590 	.word	0x20000590
 800f0d0:	2000061c 	.word	0x2000061c
 800f0d4:	20000630 	.word	0x20000630
 800f0d8:	2000064c 	.word	0x2000064c
 800f0dc:	20000660 	.word	0x20000660
 800f0e0:	20000678 	.word	0x20000678
 800f0e4:	20000644 	.word	0x20000644
 800f0e8:	20000648 	.word	0x20000648

0800f0ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b082      	sub	sp, #8
 800f0f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f0f2:	e019      	b.n	800f128 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f0f4:	f000 fbc6 	bl	800f884 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0f8:	4b10      	ldr	r3, [pc, #64]	; (800f13c <prvCheckTasksWaitingTermination+0x50>)
 800f0fa:	68db      	ldr	r3, [r3, #12]
 800f0fc:	68db      	ldr	r3, [r3, #12]
 800f0fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	3304      	adds	r3, #4
 800f104:	4618      	mov	r0, r3
 800f106:	f7fe fac6 	bl	800d696 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f10a:	4b0d      	ldr	r3, [pc, #52]	; (800f140 <prvCheckTasksWaitingTermination+0x54>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	3b01      	subs	r3, #1
 800f110:	4a0b      	ldr	r2, [pc, #44]	; (800f140 <prvCheckTasksWaitingTermination+0x54>)
 800f112:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f114:	4b0b      	ldr	r3, [pc, #44]	; (800f144 <prvCheckTasksWaitingTermination+0x58>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	3b01      	subs	r3, #1
 800f11a:	4a0a      	ldr	r2, [pc, #40]	; (800f144 <prvCheckTasksWaitingTermination+0x58>)
 800f11c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f11e:	f000 fbe1 	bl	800f8e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f000 f810 	bl	800f148 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f128:	4b06      	ldr	r3, [pc, #24]	; (800f144 <prvCheckTasksWaitingTermination+0x58>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d1e1      	bne.n	800f0f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f130:	bf00      	nop
 800f132:	bf00      	nop
 800f134:	3708      	adds	r7, #8
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
 800f13a:	bf00      	nop
 800f13c:	20000660 	.word	0x20000660
 800f140:	2000068c 	.word	0x2000068c
 800f144:	20000674 	.word	0x20000674

0800f148 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b084      	sub	sp, #16
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f156:	2b00      	cmp	r3, #0
 800f158:	d108      	bne.n	800f16c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f15e:	4618      	mov	r0, r3
 800f160:	f000 fd7e 	bl	800fc60 <vPortFree>
				vPortFree( pxTCB );
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f000 fd7b 	bl	800fc60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f16a:	e018      	b.n	800f19e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f172:	2b01      	cmp	r3, #1
 800f174:	d103      	bne.n	800f17e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f000 fd72 	bl	800fc60 <vPortFree>
	}
 800f17c:	e00f      	b.n	800f19e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f184:	2b02      	cmp	r3, #2
 800f186:	d00a      	beq.n	800f19e <prvDeleteTCB+0x56>
	__asm volatile
 800f188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f18c:	f383 8811 	msr	BASEPRI, r3
 800f190:	f3bf 8f6f 	isb	sy
 800f194:	f3bf 8f4f 	dsb	sy
 800f198:	60fb      	str	r3, [r7, #12]
}
 800f19a:	bf00      	nop
 800f19c:	e7fe      	b.n	800f19c <prvDeleteTCB+0x54>
	}
 800f19e:	bf00      	nop
 800f1a0:	3710      	adds	r7, #16
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
	...

0800f1a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1ae:	4b0c      	ldr	r3, [pc, #48]	; (800f1e0 <prvResetNextTaskUnblockTime+0x38>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d104      	bne.n	800f1c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f1b8:	4b0a      	ldr	r3, [pc, #40]	; (800f1e4 <prvResetNextTaskUnblockTime+0x3c>)
 800f1ba:	f04f 32ff 	mov.w	r2, #4294967295
 800f1be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f1c0:	e008      	b.n	800f1d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1c2:	4b07      	ldr	r3, [pc, #28]	; (800f1e0 <prvResetNextTaskUnblockTime+0x38>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	68db      	ldr	r3, [r3, #12]
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	4a04      	ldr	r2, [pc, #16]	; (800f1e4 <prvResetNextTaskUnblockTime+0x3c>)
 800f1d2:	6013      	str	r3, [r2, #0]
}
 800f1d4:	bf00      	nop
 800f1d6:	370c      	adds	r7, #12
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1de:	4770      	bx	lr
 800f1e0:	20000644 	.word	0x20000644
 800f1e4:	200006ac 	.word	0x200006ac

0800f1e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b083      	sub	sp, #12
 800f1ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f1ee:	4b0b      	ldr	r3, [pc, #44]	; (800f21c <xTaskGetSchedulerState+0x34>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d102      	bne.n	800f1fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	607b      	str	r3, [r7, #4]
 800f1fa:	e008      	b.n	800f20e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1fc:	4b08      	ldr	r3, [pc, #32]	; (800f220 <xTaskGetSchedulerState+0x38>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d102      	bne.n	800f20a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f204:	2302      	movs	r3, #2
 800f206:	607b      	str	r3, [r7, #4]
 800f208:	e001      	b.n	800f20e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f20a:	2300      	movs	r3, #0
 800f20c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f20e:	687b      	ldr	r3, [r7, #4]
	}
 800f210:	4618      	mov	r0, r3
 800f212:	370c      	adds	r7, #12
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr
 800f21c:	20000698 	.word	0x20000698
 800f220:	200006b4 	.word	0x200006b4

0800f224 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f224:	b580      	push	{r7, lr}
 800f226:	b084      	sub	sp, #16
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f230:	2300      	movs	r3, #0
 800f232:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d05e      	beq.n	800f2f8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f23e:	4b31      	ldr	r3, [pc, #196]	; (800f304 <xTaskPriorityInherit+0xe0>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f244:	429a      	cmp	r2, r3
 800f246:	d24e      	bcs.n	800f2e6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	699b      	ldr	r3, [r3, #24]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	db06      	blt.n	800f25e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f250:	4b2c      	ldr	r3, [pc, #176]	; (800f304 <xTaskPriorityInherit+0xe0>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f256:	f1c3 0207 	rsb	r2, r3, #7
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	6959      	ldr	r1, [r3, #20]
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f266:	4613      	mov	r3, r2
 800f268:	009b      	lsls	r3, r3, #2
 800f26a:	4413      	add	r3, r2
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	4a26      	ldr	r2, [pc, #152]	; (800f308 <xTaskPriorityInherit+0xe4>)
 800f270:	4413      	add	r3, r2
 800f272:	4299      	cmp	r1, r3
 800f274:	d12f      	bne.n	800f2d6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	3304      	adds	r3, #4
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7fe fa0b 	bl	800d696 <uxListRemove>
 800f280:	4603      	mov	r3, r0
 800f282:	2b00      	cmp	r3, #0
 800f284:	d10a      	bne.n	800f29c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f28a:	2201      	movs	r2, #1
 800f28c:	fa02 f303 	lsl.w	r3, r2, r3
 800f290:	43da      	mvns	r2, r3
 800f292:	4b1e      	ldr	r3, [pc, #120]	; (800f30c <xTaskPriorityInherit+0xe8>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	4013      	ands	r3, r2
 800f298:	4a1c      	ldr	r2, [pc, #112]	; (800f30c <xTaskPriorityInherit+0xe8>)
 800f29a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f29c:	4b19      	ldr	r3, [pc, #100]	; (800f304 <xTaskPriorityInherit+0xe0>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	409a      	lsls	r2, r3
 800f2ae:	4b17      	ldr	r3, [pc, #92]	; (800f30c <xTaskPriorityInherit+0xe8>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	4313      	orrs	r3, r2
 800f2b4:	4a15      	ldr	r2, [pc, #84]	; (800f30c <xTaskPriorityInherit+0xe8>)
 800f2b6:	6013      	str	r3, [r2, #0]
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2bc:	4613      	mov	r3, r2
 800f2be:	009b      	lsls	r3, r3, #2
 800f2c0:	4413      	add	r3, r2
 800f2c2:	009b      	lsls	r3, r3, #2
 800f2c4:	4a10      	ldr	r2, [pc, #64]	; (800f308 <xTaskPriorityInherit+0xe4>)
 800f2c6:	441a      	add	r2, r3
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	3304      	adds	r3, #4
 800f2cc:	4619      	mov	r1, r3
 800f2ce:	4610      	mov	r0, r2
 800f2d0:	f7fe f984 	bl	800d5dc <vListInsertEnd>
 800f2d4:	e004      	b.n	800f2e0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f2d6:	4b0b      	ldr	r3, [pc, #44]	; (800f304 <xTaskPriorityInherit+0xe0>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	60fb      	str	r3, [r7, #12]
 800f2e4:	e008      	b.n	800f2f8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2ea:	4b06      	ldr	r3, [pc, #24]	; (800f304 <xTaskPriorityInherit+0xe0>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d201      	bcs.n	800f2f8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
	}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3710      	adds	r7, #16
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}
 800f302:	bf00      	nop
 800f304:	2000058c 	.word	0x2000058c
 800f308:	20000590 	.word	0x20000590
 800f30c:	20000694 	.word	0x20000694

0800f310 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f310:	b580      	push	{r7, lr}
 800f312:	b086      	sub	sp, #24
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f31c:	2300      	movs	r3, #0
 800f31e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d06e      	beq.n	800f404 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f326:	4b3a      	ldr	r3, [pc, #232]	; (800f410 <xTaskPriorityDisinherit+0x100>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	693a      	ldr	r2, [r7, #16]
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d00a      	beq.n	800f346 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f334:	f383 8811 	msr	BASEPRI, r3
 800f338:	f3bf 8f6f 	isb	sy
 800f33c:	f3bf 8f4f 	dsb	sy
 800f340:	60fb      	str	r3, [r7, #12]
}
 800f342:	bf00      	nop
 800f344:	e7fe      	b.n	800f344 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d10a      	bne.n	800f364 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f352:	f383 8811 	msr	BASEPRI, r3
 800f356:	f3bf 8f6f 	isb	sy
 800f35a:	f3bf 8f4f 	dsb	sy
 800f35e:	60bb      	str	r3, [r7, #8]
}
 800f360:	bf00      	nop
 800f362:	e7fe      	b.n	800f362 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f368:	1e5a      	subs	r2, r3, #1
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f372:	693b      	ldr	r3, [r7, #16]
 800f374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f376:	429a      	cmp	r2, r3
 800f378:	d044      	beq.n	800f404 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d140      	bne.n	800f404 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	3304      	adds	r3, #4
 800f386:	4618      	mov	r0, r3
 800f388:	f7fe f985 	bl	800d696 <uxListRemove>
 800f38c:	4603      	mov	r3, r0
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d115      	bne.n	800f3be <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f396:	491f      	ldr	r1, [pc, #124]	; (800f414 <xTaskPriorityDisinherit+0x104>)
 800f398:	4613      	mov	r3, r2
 800f39a:	009b      	lsls	r3, r3, #2
 800f39c:	4413      	add	r3, r2
 800f39e:	009b      	lsls	r3, r3, #2
 800f3a0:	440b      	add	r3, r1
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d10a      	bne.n	800f3be <xTaskPriorityDisinherit+0xae>
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ac:	2201      	movs	r2, #1
 800f3ae:	fa02 f303 	lsl.w	r3, r2, r3
 800f3b2:	43da      	mvns	r2, r3
 800f3b4:	4b18      	ldr	r3, [pc, #96]	; (800f418 <xTaskPriorityDisinherit+0x108>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	4013      	ands	r3, r2
 800f3ba:	4a17      	ldr	r2, [pc, #92]	; (800f418 <xTaskPriorityDisinherit+0x108>)
 800f3bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f3be:	693b      	ldr	r3, [r7, #16]
 800f3c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3c6:	693b      	ldr	r3, [r7, #16]
 800f3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ca:	f1c3 0207 	rsb	r2, r3, #7
 800f3ce:	693b      	ldr	r3, [r7, #16]
 800f3d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3d6:	2201      	movs	r2, #1
 800f3d8:	409a      	lsls	r2, r3
 800f3da:	4b0f      	ldr	r3, [pc, #60]	; (800f418 <xTaskPriorityDisinherit+0x108>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	4313      	orrs	r3, r2
 800f3e0:	4a0d      	ldr	r2, [pc, #52]	; (800f418 <xTaskPriorityDisinherit+0x108>)
 800f3e2:	6013      	str	r3, [r2, #0]
 800f3e4:	693b      	ldr	r3, [r7, #16]
 800f3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3e8:	4613      	mov	r3, r2
 800f3ea:	009b      	lsls	r3, r3, #2
 800f3ec:	4413      	add	r3, r2
 800f3ee:	009b      	lsls	r3, r3, #2
 800f3f0:	4a08      	ldr	r2, [pc, #32]	; (800f414 <xTaskPriorityDisinherit+0x104>)
 800f3f2:	441a      	add	r2, r3
 800f3f4:	693b      	ldr	r3, [r7, #16]
 800f3f6:	3304      	adds	r3, #4
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	4610      	mov	r0, r2
 800f3fc:	f7fe f8ee 	bl	800d5dc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f400:	2301      	movs	r3, #1
 800f402:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f404:	697b      	ldr	r3, [r7, #20]
	}
 800f406:	4618      	mov	r0, r3
 800f408:	3718      	adds	r7, #24
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}
 800f40e:	bf00      	nop
 800f410:	2000058c 	.word	0x2000058c
 800f414:	20000590 	.word	0x20000590
 800f418:	20000694 	.word	0x20000694

0800f41c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b088      	sub	sp, #32
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f42a:	2301      	movs	r3, #1
 800f42c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d077      	beq.n	800f524 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f434:	69bb      	ldr	r3, [r7, #24]
 800f436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d10a      	bne.n	800f452 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f440:	f383 8811 	msr	BASEPRI, r3
 800f444:	f3bf 8f6f 	isb	sy
 800f448:	f3bf 8f4f 	dsb	sy
 800f44c:	60fb      	str	r3, [r7, #12]
}
 800f44e:	bf00      	nop
 800f450:	e7fe      	b.n	800f450 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f452:	69bb      	ldr	r3, [r7, #24]
 800f454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f456:	683a      	ldr	r2, [r7, #0]
 800f458:	429a      	cmp	r2, r3
 800f45a:	d902      	bls.n	800f462 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	61fb      	str	r3, [r7, #28]
 800f460:	e002      	b.n	800f468 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f462:	69bb      	ldr	r3, [r7, #24]
 800f464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f466:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f468:	69bb      	ldr	r3, [r7, #24]
 800f46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f46c:	69fa      	ldr	r2, [r7, #28]
 800f46e:	429a      	cmp	r2, r3
 800f470:	d058      	beq.n	800f524 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f472:	69bb      	ldr	r3, [r7, #24]
 800f474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f476:	697a      	ldr	r2, [r7, #20]
 800f478:	429a      	cmp	r2, r3
 800f47a:	d153      	bne.n	800f524 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f47c:	4b2b      	ldr	r3, [pc, #172]	; (800f52c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	69ba      	ldr	r2, [r7, #24]
 800f482:	429a      	cmp	r2, r3
 800f484:	d10a      	bne.n	800f49c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f48a:	f383 8811 	msr	BASEPRI, r3
 800f48e:	f3bf 8f6f 	isb	sy
 800f492:	f3bf 8f4f 	dsb	sy
 800f496:	60bb      	str	r3, [r7, #8]
}
 800f498:	bf00      	nop
 800f49a:	e7fe      	b.n	800f49a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f49c:	69bb      	ldr	r3, [r7, #24]
 800f49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f4a2:	69bb      	ldr	r3, [r7, #24]
 800f4a4:	69fa      	ldr	r2, [r7, #28]
 800f4a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f4a8:	69bb      	ldr	r3, [r7, #24]
 800f4aa:	699b      	ldr	r3, [r3, #24]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	db04      	blt.n	800f4ba <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4b0:	69fb      	ldr	r3, [r7, #28]
 800f4b2:	f1c3 0207 	rsb	r2, r3, #7
 800f4b6:	69bb      	ldr	r3, [r7, #24]
 800f4b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f4ba:	69bb      	ldr	r3, [r7, #24]
 800f4bc:	6959      	ldr	r1, [r3, #20]
 800f4be:	693a      	ldr	r2, [r7, #16]
 800f4c0:	4613      	mov	r3, r2
 800f4c2:	009b      	lsls	r3, r3, #2
 800f4c4:	4413      	add	r3, r2
 800f4c6:	009b      	lsls	r3, r3, #2
 800f4c8:	4a19      	ldr	r2, [pc, #100]	; (800f530 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800f4ca:	4413      	add	r3, r2
 800f4cc:	4299      	cmp	r1, r3
 800f4ce:	d129      	bne.n	800f524 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4d0:	69bb      	ldr	r3, [r7, #24]
 800f4d2:	3304      	adds	r3, #4
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7fe f8de 	bl	800d696 <uxListRemove>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d10a      	bne.n	800f4f6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800f4e0:	69bb      	ldr	r3, [r7, #24]
 800f4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	fa02 f303 	lsl.w	r3, r2, r3
 800f4ea:	43da      	mvns	r2, r3
 800f4ec:	4b11      	ldr	r3, [pc, #68]	; (800f534 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	4013      	ands	r3, r2
 800f4f2:	4a10      	ldr	r2, [pc, #64]	; (800f534 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f4f4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f4f6:	69bb      	ldr	r3, [r7, #24]
 800f4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	409a      	lsls	r2, r3
 800f4fe:	4b0d      	ldr	r3, [pc, #52]	; (800f534 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	4313      	orrs	r3, r2
 800f504:	4a0b      	ldr	r2, [pc, #44]	; (800f534 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f506:	6013      	str	r3, [r2, #0]
 800f508:	69bb      	ldr	r3, [r7, #24]
 800f50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f50c:	4613      	mov	r3, r2
 800f50e:	009b      	lsls	r3, r3, #2
 800f510:	4413      	add	r3, r2
 800f512:	009b      	lsls	r3, r3, #2
 800f514:	4a06      	ldr	r2, [pc, #24]	; (800f530 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800f516:	441a      	add	r2, r3
 800f518:	69bb      	ldr	r3, [r7, #24]
 800f51a:	3304      	adds	r3, #4
 800f51c:	4619      	mov	r1, r3
 800f51e:	4610      	mov	r0, r2
 800f520:	f7fe f85c 	bl	800d5dc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f524:	bf00      	nop
 800f526:	3720      	adds	r7, #32
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}
 800f52c:	2000058c 	.word	0x2000058c
 800f530:	20000590 	.word	0x20000590
 800f534:	20000694 	.word	0x20000694

0800f538 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f538:	b480      	push	{r7}
 800f53a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f53c:	4b07      	ldr	r3, [pc, #28]	; (800f55c <pvTaskIncrementMutexHeldCount+0x24>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d004      	beq.n	800f54e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f544:	4b05      	ldr	r3, [pc, #20]	; (800f55c <pvTaskIncrementMutexHeldCount+0x24>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f54a:	3201      	adds	r2, #1
 800f54c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800f54e:	4b03      	ldr	r3, [pc, #12]	; (800f55c <pvTaskIncrementMutexHeldCount+0x24>)
 800f550:	681b      	ldr	r3, [r3, #0]
	}
 800f552:	4618      	mov	r0, r3
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr
 800f55c:	2000058c 	.word	0x2000058c

0800f560 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b084      	sub	sp, #16
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f56a:	4b29      	ldr	r3, [pc, #164]	; (800f610 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f570:	4b28      	ldr	r3, [pc, #160]	; (800f614 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	3304      	adds	r3, #4
 800f576:	4618      	mov	r0, r3
 800f578:	f7fe f88d 	bl	800d696 <uxListRemove>
 800f57c:	4603      	mov	r3, r0
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d10b      	bne.n	800f59a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f582:	4b24      	ldr	r3, [pc, #144]	; (800f614 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f588:	2201      	movs	r2, #1
 800f58a:	fa02 f303 	lsl.w	r3, r2, r3
 800f58e:	43da      	mvns	r2, r3
 800f590:	4b21      	ldr	r3, [pc, #132]	; (800f618 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	4013      	ands	r3, r2
 800f596:	4a20      	ldr	r2, [pc, #128]	; (800f618 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f598:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5a0:	d10a      	bne.n	800f5b8 <prvAddCurrentTaskToDelayedList+0x58>
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d007      	beq.n	800f5b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f5a8:	4b1a      	ldr	r3, [pc, #104]	; (800f614 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	3304      	adds	r3, #4
 800f5ae:	4619      	mov	r1, r3
 800f5b0:	481a      	ldr	r0, [pc, #104]	; (800f61c <prvAddCurrentTaskToDelayedList+0xbc>)
 800f5b2:	f7fe f813 	bl	800d5dc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f5b6:	e026      	b.n	800f606 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f5b8:	68fa      	ldr	r2, [r7, #12]
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	4413      	add	r3, r2
 800f5be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f5c0:	4b14      	ldr	r3, [pc, #80]	; (800f614 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	68ba      	ldr	r2, [r7, #8]
 800f5c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f5c8:	68ba      	ldr	r2, [r7, #8]
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	d209      	bcs.n	800f5e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f5d0:	4b13      	ldr	r3, [pc, #76]	; (800f620 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f5d2:	681a      	ldr	r2, [r3, #0]
 800f5d4:	4b0f      	ldr	r3, [pc, #60]	; (800f614 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	3304      	adds	r3, #4
 800f5da:	4619      	mov	r1, r3
 800f5dc:	4610      	mov	r0, r2
 800f5de:	f7fe f821 	bl	800d624 <vListInsert>
}
 800f5e2:	e010      	b.n	800f606 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f5e4:	4b0f      	ldr	r3, [pc, #60]	; (800f624 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f5e6:	681a      	ldr	r2, [r3, #0]
 800f5e8:	4b0a      	ldr	r3, [pc, #40]	; (800f614 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	3304      	adds	r3, #4
 800f5ee:	4619      	mov	r1, r3
 800f5f0:	4610      	mov	r0, r2
 800f5f2:	f7fe f817 	bl	800d624 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f5f6:	4b0c      	ldr	r3, [pc, #48]	; (800f628 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	68ba      	ldr	r2, [r7, #8]
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	d202      	bcs.n	800f606 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f600:	4a09      	ldr	r2, [pc, #36]	; (800f628 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	6013      	str	r3, [r2, #0]
}
 800f606:	bf00      	nop
 800f608:	3710      	adds	r7, #16
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop
 800f610:	20000690 	.word	0x20000690
 800f614:	2000058c 	.word	0x2000058c
 800f618:	20000694 	.word	0x20000694
 800f61c:	20000678 	.word	0x20000678
 800f620:	20000648 	.word	0x20000648
 800f624:	20000644 	.word	0x20000644
 800f628:	200006ac 	.word	0x200006ac

0800f62c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f62c:	b480      	push	{r7}
 800f62e:	b085      	sub	sp, #20
 800f630:	af00      	add	r7, sp, #0
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	60b9      	str	r1, [r7, #8]
 800f636:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	3b04      	subs	r3, #4
 800f63c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f644:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	3b04      	subs	r3, #4
 800f64a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	f023 0201 	bic.w	r2, r3, #1
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	3b04      	subs	r3, #4
 800f65a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f65c:	4a0c      	ldr	r2, [pc, #48]	; (800f690 <pxPortInitialiseStack+0x64>)
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	3b14      	subs	r3, #20
 800f666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f668:	687a      	ldr	r2, [r7, #4]
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	3b04      	subs	r3, #4
 800f672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	f06f 0202 	mvn.w	r2, #2
 800f67a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	3b20      	subs	r3, #32
 800f680:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f682:	68fb      	ldr	r3, [r7, #12]
}
 800f684:	4618      	mov	r0, r3
 800f686:	3714      	adds	r7, #20
 800f688:	46bd      	mov	sp, r7
 800f68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68e:	4770      	bx	lr
 800f690:	0800f695 	.word	0x0800f695

0800f694 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f694:	b480      	push	{r7}
 800f696:	b085      	sub	sp, #20
 800f698:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f69a:	2300      	movs	r3, #0
 800f69c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f69e:	4b12      	ldr	r3, [pc, #72]	; (800f6e8 <prvTaskExitError+0x54>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6a6:	d00a      	beq.n	800f6be <prvTaskExitError+0x2a>
	__asm volatile
 800f6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ac:	f383 8811 	msr	BASEPRI, r3
 800f6b0:	f3bf 8f6f 	isb	sy
 800f6b4:	f3bf 8f4f 	dsb	sy
 800f6b8:	60fb      	str	r3, [r7, #12]
}
 800f6ba:	bf00      	nop
 800f6bc:	e7fe      	b.n	800f6bc <prvTaskExitError+0x28>
	__asm volatile
 800f6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6c2:	f383 8811 	msr	BASEPRI, r3
 800f6c6:	f3bf 8f6f 	isb	sy
 800f6ca:	f3bf 8f4f 	dsb	sy
 800f6ce:	60bb      	str	r3, [r7, #8]
}
 800f6d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f6d2:	bf00      	nop
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d0fc      	beq.n	800f6d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f6da:	bf00      	nop
 800f6dc:	bf00      	nop
 800f6de:	3714      	adds	r7, #20
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e6:	4770      	bx	lr
 800f6e8:	20000138 	.word	0x20000138
 800f6ec:	00000000 	.word	0x00000000

0800f6f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f6f0:	4b07      	ldr	r3, [pc, #28]	; (800f710 <pxCurrentTCBConst2>)
 800f6f2:	6819      	ldr	r1, [r3, #0]
 800f6f4:	6808      	ldr	r0, [r1, #0]
 800f6f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6fa:	f380 8809 	msr	PSP, r0
 800f6fe:	f3bf 8f6f 	isb	sy
 800f702:	f04f 0000 	mov.w	r0, #0
 800f706:	f380 8811 	msr	BASEPRI, r0
 800f70a:	4770      	bx	lr
 800f70c:	f3af 8000 	nop.w

0800f710 <pxCurrentTCBConst2>:
 800f710:	2000058c 	.word	0x2000058c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f714:	bf00      	nop
 800f716:	bf00      	nop

0800f718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f718:	4808      	ldr	r0, [pc, #32]	; (800f73c <prvPortStartFirstTask+0x24>)
 800f71a:	6800      	ldr	r0, [r0, #0]
 800f71c:	6800      	ldr	r0, [r0, #0]
 800f71e:	f380 8808 	msr	MSP, r0
 800f722:	f04f 0000 	mov.w	r0, #0
 800f726:	f380 8814 	msr	CONTROL, r0
 800f72a:	b662      	cpsie	i
 800f72c:	b661      	cpsie	f
 800f72e:	f3bf 8f4f 	dsb	sy
 800f732:	f3bf 8f6f 	isb	sy
 800f736:	df00      	svc	0
 800f738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f73a:	bf00      	nop
 800f73c:	e000ed08 	.word	0xe000ed08

0800f740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b086      	sub	sp, #24
 800f744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f746:	4b46      	ldr	r3, [pc, #280]	; (800f860 <xPortStartScheduler+0x120>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	4a46      	ldr	r2, [pc, #280]	; (800f864 <xPortStartScheduler+0x124>)
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d10a      	bne.n	800f766 <xPortStartScheduler+0x26>
	__asm volatile
 800f750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f754:	f383 8811 	msr	BASEPRI, r3
 800f758:	f3bf 8f6f 	isb	sy
 800f75c:	f3bf 8f4f 	dsb	sy
 800f760:	613b      	str	r3, [r7, #16]
}
 800f762:	bf00      	nop
 800f764:	e7fe      	b.n	800f764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f766:	4b3e      	ldr	r3, [pc, #248]	; (800f860 <xPortStartScheduler+0x120>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	4a3f      	ldr	r2, [pc, #252]	; (800f868 <xPortStartScheduler+0x128>)
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d10a      	bne.n	800f786 <xPortStartScheduler+0x46>
	__asm volatile
 800f770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f774:	f383 8811 	msr	BASEPRI, r3
 800f778:	f3bf 8f6f 	isb	sy
 800f77c:	f3bf 8f4f 	dsb	sy
 800f780:	60fb      	str	r3, [r7, #12]
}
 800f782:	bf00      	nop
 800f784:	e7fe      	b.n	800f784 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f786:	4b39      	ldr	r3, [pc, #228]	; (800f86c <xPortStartScheduler+0x12c>)
 800f788:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f78a:	697b      	ldr	r3, [r7, #20]
 800f78c:	781b      	ldrb	r3, [r3, #0]
 800f78e:	b2db      	uxtb	r3, r3
 800f790:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	22ff      	movs	r2, #255	; 0xff
 800f796:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	781b      	ldrb	r3, [r3, #0]
 800f79c:	b2db      	uxtb	r3, r3
 800f79e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f7a0:	78fb      	ldrb	r3, [r7, #3]
 800f7a2:	b2db      	uxtb	r3, r3
 800f7a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f7a8:	b2da      	uxtb	r2, r3
 800f7aa:	4b31      	ldr	r3, [pc, #196]	; (800f870 <xPortStartScheduler+0x130>)
 800f7ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f7ae:	4b31      	ldr	r3, [pc, #196]	; (800f874 <xPortStartScheduler+0x134>)
 800f7b0:	2207      	movs	r2, #7
 800f7b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f7b4:	e009      	b.n	800f7ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f7b6:	4b2f      	ldr	r3, [pc, #188]	; (800f874 <xPortStartScheduler+0x134>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	3b01      	subs	r3, #1
 800f7bc:	4a2d      	ldr	r2, [pc, #180]	; (800f874 <xPortStartScheduler+0x134>)
 800f7be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f7c0:	78fb      	ldrb	r3, [r7, #3]
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	005b      	lsls	r3, r3, #1
 800f7c6:	b2db      	uxtb	r3, r3
 800f7c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f7ca:	78fb      	ldrb	r3, [r7, #3]
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7d2:	2b80      	cmp	r3, #128	; 0x80
 800f7d4:	d0ef      	beq.n	800f7b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f7d6:	4b27      	ldr	r3, [pc, #156]	; (800f874 <xPortStartScheduler+0x134>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	f1c3 0307 	rsb	r3, r3, #7
 800f7de:	2b04      	cmp	r3, #4
 800f7e0:	d00a      	beq.n	800f7f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e6:	f383 8811 	msr	BASEPRI, r3
 800f7ea:	f3bf 8f6f 	isb	sy
 800f7ee:	f3bf 8f4f 	dsb	sy
 800f7f2:	60bb      	str	r3, [r7, #8]
}
 800f7f4:	bf00      	nop
 800f7f6:	e7fe      	b.n	800f7f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f7f8:	4b1e      	ldr	r3, [pc, #120]	; (800f874 <xPortStartScheduler+0x134>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	021b      	lsls	r3, r3, #8
 800f7fe:	4a1d      	ldr	r2, [pc, #116]	; (800f874 <xPortStartScheduler+0x134>)
 800f800:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f802:	4b1c      	ldr	r3, [pc, #112]	; (800f874 <xPortStartScheduler+0x134>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f80a:	4a1a      	ldr	r2, [pc, #104]	; (800f874 <xPortStartScheduler+0x134>)
 800f80c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	b2da      	uxtb	r2, r3
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f816:	4b18      	ldr	r3, [pc, #96]	; (800f878 <xPortStartScheduler+0x138>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	4a17      	ldr	r2, [pc, #92]	; (800f878 <xPortStartScheduler+0x138>)
 800f81c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f820:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f822:	4b15      	ldr	r3, [pc, #84]	; (800f878 <xPortStartScheduler+0x138>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	4a14      	ldr	r2, [pc, #80]	; (800f878 <xPortStartScheduler+0x138>)
 800f828:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f82c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f82e:	f000 f8dd 	bl	800f9ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f832:	4b12      	ldr	r3, [pc, #72]	; (800f87c <xPortStartScheduler+0x13c>)
 800f834:	2200      	movs	r2, #0
 800f836:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f838:	f000 f8fc 	bl	800fa34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f83c:	4b10      	ldr	r3, [pc, #64]	; (800f880 <xPortStartScheduler+0x140>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	4a0f      	ldr	r2, [pc, #60]	; (800f880 <xPortStartScheduler+0x140>)
 800f842:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f846:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f848:	f7ff ff66 	bl	800f718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f84c:	f7ff fa90 	bl	800ed70 <vTaskSwitchContext>
	prvTaskExitError();
 800f850:	f7ff ff20 	bl	800f694 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f854:	2300      	movs	r3, #0
}
 800f856:	4618      	mov	r0, r3
 800f858:	3718      	adds	r7, #24
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}
 800f85e:	bf00      	nop
 800f860:	e000ed00 	.word	0xe000ed00
 800f864:	410fc271 	.word	0x410fc271
 800f868:	410fc270 	.word	0x410fc270
 800f86c:	e000e400 	.word	0xe000e400
 800f870:	200006b8 	.word	0x200006b8
 800f874:	200006bc 	.word	0x200006bc
 800f878:	e000ed20 	.word	0xe000ed20
 800f87c:	20000138 	.word	0x20000138
 800f880:	e000ef34 	.word	0xe000ef34

0800f884 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f884:	b480      	push	{r7}
 800f886:	b083      	sub	sp, #12
 800f888:	af00      	add	r7, sp, #0
	__asm volatile
 800f88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f88e:	f383 8811 	msr	BASEPRI, r3
 800f892:	f3bf 8f6f 	isb	sy
 800f896:	f3bf 8f4f 	dsb	sy
 800f89a:	607b      	str	r3, [r7, #4]
}
 800f89c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f89e:	4b0f      	ldr	r3, [pc, #60]	; (800f8dc <vPortEnterCritical+0x58>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	3301      	adds	r3, #1
 800f8a4:	4a0d      	ldr	r2, [pc, #52]	; (800f8dc <vPortEnterCritical+0x58>)
 800f8a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f8a8:	4b0c      	ldr	r3, [pc, #48]	; (800f8dc <vPortEnterCritical+0x58>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	2b01      	cmp	r3, #1
 800f8ae:	d10f      	bne.n	800f8d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f8b0:	4b0b      	ldr	r3, [pc, #44]	; (800f8e0 <vPortEnterCritical+0x5c>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	b2db      	uxtb	r3, r3
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d00a      	beq.n	800f8d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8be:	f383 8811 	msr	BASEPRI, r3
 800f8c2:	f3bf 8f6f 	isb	sy
 800f8c6:	f3bf 8f4f 	dsb	sy
 800f8ca:	603b      	str	r3, [r7, #0]
}
 800f8cc:	bf00      	nop
 800f8ce:	e7fe      	b.n	800f8ce <vPortEnterCritical+0x4a>
	}
}
 800f8d0:	bf00      	nop
 800f8d2:	370c      	adds	r7, #12
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8da:	4770      	bx	lr
 800f8dc:	20000138 	.word	0x20000138
 800f8e0:	e000ed04 	.word	0xe000ed04

0800f8e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b083      	sub	sp, #12
 800f8e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f8ea:	4b12      	ldr	r3, [pc, #72]	; (800f934 <vPortExitCritical+0x50>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d10a      	bne.n	800f908 <vPortExitCritical+0x24>
	__asm volatile
 800f8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8f6:	f383 8811 	msr	BASEPRI, r3
 800f8fa:	f3bf 8f6f 	isb	sy
 800f8fe:	f3bf 8f4f 	dsb	sy
 800f902:	607b      	str	r3, [r7, #4]
}
 800f904:	bf00      	nop
 800f906:	e7fe      	b.n	800f906 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f908:	4b0a      	ldr	r3, [pc, #40]	; (800f934 <vPortExitCritical+0x50>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	3b01      	subs	r3, #1
 800f90e:	4a09      	ldr	r2, [pc, #36]	; (800f934 <vPortExitCritical+0x50>)
 800f910:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f912:	4b08      	ldr	r3, [pc, #32]	; (800f934 <vPortExitCritical+0x50>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d105      	bne.n	800f926 <vPortExitCritical+0x42>
 800f91a:	2300      	movs	r3, #0
 800f91c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	f383 8811 	msr	BASEPRI, r3
}
 800f924:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f926:	bf00      	nop
 800f928:	370c      	adds	r7, #12
 800f92a:	46bd      	mov	sp, r7
 800f92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f930:	4770      	bx	lr
 800f932:	bf00      	nop
 800f934:	20000138 	.word	0x20000138
	...

0800f940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f940:	f3ef 8009 	mrs	r0, PSP
 800f944:	f3bf 8f6f 	isb	sy
 800f948:	4b15      	ldr	r3, [pc, #84]	; (800f9a0 <pxCurrentTCBConst>)
 800f94a:	681a      	ldr	r2, [r3, #0]
 800f94c:	f01e 0f10 	tst.w	lr, #16
 800f950:	bf08      	it	eq
 800f952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f95a:	6010      	str	r0, [r2, #0]
 800f95c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f960:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f964:	f380 8811 	msr	BASEPRI, r0
 800f968:	f3bf 8f4f 	dsb	sy
 800f96c:	f3bf 8f6f 	isb	sy
 800f970:	f7ff f9fe 	bl	800ed70 <vTaskSwitchContext>
 800f974:	f04f 0000 	mov.w	r0, #0
 800f978:	f380 8811 	msr	BASEPRI, r0
 800f97c:	bc09      	pop	{r0, r3}
 800f97e:	6819      	ldr	r1, [r3, #0]
 800f980:	6808      	ldr	r0, [r1, #0]
 800f982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f986:	f01e 0f10 	tst.w	lr, #16
 800f98a:	bf08      	it	eq
 800f98c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f990:	f380 8809 	msr	PSP, r0
 800f994:	f3bf 8f6f 	isb	sy
 800f998:	4770      	bx	lr
 800f99a:	bf00      	nop
 800f99c:	f3af 8000 	nop.w

0800f9a0 <pxCurrentTCBConst>:
 800f9a0:	2000058c 	.word	0x2000058c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f9a4:	bf00      	nop
 800f9a6:	bf00      	nop

0800f9a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
	__asm volatile
 800f9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b2:	f383 8811 	msr	BASEPRI, r3
 800f9b6:	f3bf 8f6f 	isb	sy
 800f9ba:	f3bf 8f4f 	dsb	sy
 800f9be:	607b      	str	r3, [r7, #4]
}
 800f9c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f9c2:	f7ff f91d 	bl	800ec00 <xTaskIncrementTick>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d003      	beq.n	800f9d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f9cc:	4b06      	ldr	r3, [pc, #24]	; (800f9e8 <SysTick_Handler+0x40>)
 800f9ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9d2:	601a      	str	r2, [r3, #0]
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	f383 8811 	msr	BASEPRI, r3
}
 800f9de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f9e0:	bf00      	nop
 800f9e2:	3708      	adds	r7, #8
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	e000ed04 	.word	0xe000ed04

0800f9ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f9ec:	b480      	push	{r7}
 800f9ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f9f0:	4b0b      	ldr	r3, [pc, #44]	; (800fa20 <vPortSetupTimerInterrupt+0x34>)
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f9f6:	4b0b      	ldr	r3, [pc, #44]	; (800fa24 <vPortSetupTimerInterrupt+0x38>)
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f9fc:	4b0a      	ldr	r3, [pc, #40]	; (800fa28 <vPortSetupTimerInterrupt+0x3c>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	4a0a      	ldr	r2, [pc, #40]	; (800fa2c <vPortSetupTimerInterrupt+0x40>)
 800fa02:	fba2 2303 	umull	r2, r3, r2, r3
 800fa06:	099b      	lsrs	r3, r3, #6
 800fa08:	4a09      	ldr	r2, [pc, #36]	; (800fa30 <vPortSetupTimerInterrupt+0x44>)
 800fa0a:	3b01      	subs	r3, #1
 800fa0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fa0e:	4b04      	ldr	r3, [pc, #16]	; (800fa20 <vPortSetupTimerInterrupt+0x34>)
 800fa10:	2207      	movs	r2, #7
 800fa12:	601a      	str	r2, [r3, #0]
}
 800fa14:	bf00      	nop
 800fa16:	46bd      	mov	sp, r7
 800fa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1c:	4770      	bx	lr
 800fa1e:	bf00      	nop
 800fa20:	e000e010 	.word	0xe000e010
 800fa24:	e000e018 	.word	0xe000e018
 800fa28:	2000001c 	.word	0x2000001c
 800fa2c:	10624dd3 	.word	0x10624dd3
 800fa30:	e000e014 	.word	0xe000e014

0800fa34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fa34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fa44 <vPortEnableVFP+0x10>
 800fa38:	6801      	ldr	r1, [r0, #0]
 800fa3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fa3e:	6001      	str	r1, [r0, #0]
 800fa40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fa42:	bf00      	nop
 800fa44:	e000ed88 	.word	0xe000ed88

0800fa48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fa48:	b480      	push	{r7}
 800fa4a:	b085      	sub	sp, #20
 800fa4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fa4e:	f3ef 8305 	mrs	r3, IPSR
 800fa52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	2b0f      	cmp	r3, #15
 800fa58:	d914      	bls.n	800fa84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fa5a:	4a17      	ldr	r2, [pc, #92]	; (800fab8 <vPortValidateInterruptPriority+0x70>)
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	4413      	add	r3, r2
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fa64:	4b15      	ldr	r3, [pc, #84]	; (800fabc <vPortValidateInterruptPriority+0x74>)
 800fa66:	781b      	ldrb	r3, [r3, #0]
 800fa68:	7afa      	ldrb	r2, [r7, #11]
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	d20a      	bcs.n	800fa84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fa6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa72:	f383 8811 	msr	BASEPRI, r3
 800fa76:	f3bf 8f6f 	isb	sy
 800fa7a:	f3bf 8f4f 	dsb	sy
 800fa7e:	607b      	str	r3, [r7, #4]
}
 800fa80:	bf00      	nop
 800fa82:	e7fe      	b.n	800fa82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fa84:	4b0e      	ldr	r3, [pc, #56]	; (800fac0 <vPortValidateInterruptPriority+0x78>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fa8c:	4b0d      	ldr	r3, [pc, #52]	; (800fac4 <vPortValidateInterruptPriority+0x7c>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d90a      	bls.n	800faaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fa94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa98:	f383 8811 	msr	BASEPRI, r3
 800fa9c:	f3bf 8f6f 	isb	sy
 800faa0:	f3bf 8f4f 	dsb	sy
 800faa4:	603b      	str	r3, [r7, #0]
}
 800faa6:	bf00      	nop
 800faa8:	e7fe      	b.n	800faa8 <vPortValidateInterruptPriority+0x60>
	}
 800faaa:	bf00      	nop
 800faac:	3714      	adds	r7, #20
 800faae:	46bd      	mov	sp, r7
 800fab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab4:	4770      	bx	lr
 800fab6:	bf00      	nop
 800fab8:	e000e3f0 	.word	0xe000e3f0
 800fabc:	200006b8 	.word	0x200006b8
 800fac0:	e000ed0c 	.word	0xe000ed0c
 800fac4:	200006bc 	.word	0x200006bc

0800fac8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b08a      	sub	sp, #40	; 0x28
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fad0:	2300      	movs	r3, #0
 800fad2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fad4:	f7fe ffc8 	bl	800ea68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fad8:	4b5b      	ldr	r3, [pc, #364]	; (800fc48 <pvPortMalloc+0x180>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d101      	bne.n	800fae4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fae0:	f000 f920 	bl	800fd24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fae4:	4b59      	ldr	r3, [pc, #356]	; (800fc4c <pvPortMalloc+0x184>)
 800fae6:	681a      	ldr	r2, [r3, #0]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	4013      	ands	r3, r2
 800faec:	2b00      	cmp	r3, #0
 800faee:	f040 8093 	bne.w	800fc18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d01d      	beq.n	800fb34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800faf8:	2208      	movs	r2, #8
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	4413      	add	r3, r2
 800fafe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f003 0307 	and.w	r3, r3, #7
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d014      	beq.n	800fb34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f023 0307 	bic.w	r3, r3, #7
 800fb10:	3308      	adds	r3, #8
 800fb12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f003 0307 	and.w	r3, r3, #7
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d00a      	beq.n	800fb34 <pvPortMalloc+0x6c>
	__asm volatile
 800fb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb22:	f383 8811 	msr	BASEPRI, r3
 800fb26:	f3bf 8f6f 	isb	sy
 800fb2a:	f3bf 8f4f 	dsb	sy
 800fb2e:	617b      	str	r3, [r7, #20]
}
 800fb30:	bf00      	nop
 800fb32:	e7fe      	b.n	800fb32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d06e      	beq.n	800fc18 <pvPortMalloc+0x150>
 800fb3a:	4b45      	ldr	r3, [pc, #276]	; (800fc50 <pvPortMalloc+0x188>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	687a      	ldr	r2, [r7, #4]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d869      	bhi.n	800fc18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fb44:	4b43      	ldr	r3, [pc, #268]	; (800fc54 <pvPortMalloc+0x18c>)
 800fb46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fb48:	4b42      	ldr	r3, [pc, #264]	; (800fc54 <pvPortMalloc+0x18c>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fb4e:	e004      	b.n	800fb5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	687a      	ldr	r2, [r7, #4]
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d903      	bls.n	800fb6c <pvPortMalloc+0xa4>
 800fb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d1f1      	bne.n	800fb50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fb6c:	4b36      	ldr	r3, [pc, #216]	; (800fc48 <pvPortMalloc+0x180>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb72:	429a      	cmp	r2, r3
 800fb74:	d050      	beq.n	800fc18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fb76:	6a3b      	ldr	r3, [r7, #32]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	2208      	movs	r2, #8
 800fb7c:	4413      	add	r3, r2
 800fb7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb82:	681a      	ldr	r2, [r3, #0]
 800fb84:	6a3b      	ldr	r3, [r7, #32]
 800fb86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb8a:	685a      	ldr	r2, [r3, #4]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	1ad2      	subs	r2, r2, r3
 800fb90:	2308      	movs	r3, #8
 800fb92:	005b      	lsls	r3, r3, #1
 800fb94:	429a      	cmp	r2, r3
 800fb96:	d91f      	bls.n	800fbd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fb98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	4413      	add	r3, r2
 800fb9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fba0:	69bb      	ldr	r3, [r7, #24]
 800fba2:	f003 0307 	and.w	r3, r3, #7
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d00a      	beq.n	800fbc0 <pvPortMalloc+0xf8>
	__asm volatile
 800fbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbae:	f383 8811 	msr	BASEPRI, r3
 800fbb2:	f3bf 8f6f 	isb	sy
 800fbb6:	f3bf 8f4f 	dsb	sy
 800fbba:	613b      	str	r3, [r7, #16]
}
 800fbbc:	bf00      	nop
 800fbbe:	e7fe      	b.n	800fbbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc2:	685a      	ldr	r2, [r3, #4]
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	1ad2      	subs	r2, r2, r3
 800fbc8:	69bb      	ldr	r3, [r7, #24]
 800fbca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbce:	687a      	ldr	r2, [r7, #4]
 800fbd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fbd2:	69b8      	ldr	r0, [r7, #24]
 800fbd4:	f000 f908 	bl	800fde8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fbd8:	4b1d      	ldr	r3, [pc, #116]	; (800fc50 <pvPortMalloc+0x188>)
 800fbda:	681a      	ldr	r2, [r3, #0]
 800fbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	1ad3      	subs	r3, r2, r3
 800fbe2:	4a1b      	ldr	r2, [pc, #108]	; (800fc50 <pvPortMalloc+0x188>)
 800fbe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fbe6:	4b1a      	ldr	r3, [pc, #104]	; (800fc50 <pvPortMalloc+0x188>)
 800fbe8:	681a      	ldr	r2, [r3, #0]
 800fbea:	4b1b      	ldr	r3, [pc, #108]	; (800fc58 <pvPortMalloc+0x190>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	d203      	bcs.n	800fbfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fbf2:	4b17      	ldr	r3, [pc, #92]	; (800fc50 <pvPortMalloc+0x188>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	4a18      	ldr	r2, [pc, #96]	; (800fc58 <pvPortMalloc+0x190>)
 800fbf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfc:	685a      	ldr	r2, [r3, #4]
 800fbfe:	4b13      	ldr	r3, [pc, #76]	; (800fc4c <pvPortMalloc+0x184>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	431a      	orrs	r2, r3
 800fc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fc0e:	4b13      	ldr	r3, [pc, #76]	; (800fc5c <pvPortMalloc+0x194>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	3301      	adds	r3, #1
 800fc14:	4a11      	ldr	r2, [pc, #68]	; (800fc5c <pvPortMalloc+0x194>)
 800fc16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fc18:	f7fe ff34 	bl	800ea84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc1c:	69fb      	ldr	r3, [r7, #28]
 800fc1e:	f003 0307 	and.w	r3, r3, #7
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d00a      	beq.n	800fc3c <pvPortMalloc+0x174>
	__asm volatile
 800fc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc2a:	f383 8811 	msr	BASEPRI, r3
 800fc2e:	f3bf 8f6f 	isb	sy
 800fc32:	f3bf 8f4f 	dsb	sy
 800fc36:	60fb      	str	r3, [r7, #12]
}
 800fc38:	bf00      	nop
 800fc3a:	e7fe      	b.n	800fc3a <pvPortMalloc+0x172>
	return pvReturn;
 800fc3c:	69fb      	ldr	r3, [r7, #28]
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3728      	adds	r7, #40	; 0x28
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}
 800fc46:	bf00      	nop
 800fc48:	200042c8 	.word	0x200042c8
 800fc4c:	200042dc 	.word	0x200042dc
 800fc50:	200042cc 	.word	0x200042cc
 800fc54:	200042c0 	.word	0x200042c0
 800fc58:	200042d0 	.word	0x200042d0
 800fc5c:	200042d4 	.word	0x200042d4

0800fc60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b086      	sub	sp, #24
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d04d      	beq.n	800fd0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fc72:	2308      	movs	r3, #8
 800fc74:	425b      	negs	r3, r3
 800fc76:	697a      	ldr	r2, [r7, #20]
 800fc78:	4413      	add	r3, r2
 800fc7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fc80:	693b      	ldr	r3, [r7, #16]
 800fc82:	685a      	ldr	r2, [r3, #4]
 800fc84:	4b24      	ldr	r3, [pc, #144]	; (800fd18 <vPortFree+0xb8>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	4013      	ands	r3, r2
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d10a      	bne.n	800fca4 <vPortFree+0x44>
	__asm volatile
 800fc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc92:	f383 8811 	msr	BASEPRI, r3
 800fc96:	f3bf 8f6f 	isb	sy
 800fc9a:	f3bf 8f4f 	dsb	sy
 800fc9e:	60fb      	str	r3, [r7, #12]
}
 800fca0:	bf00      	nop
 800fca2:	e7fe      	b.n	800fca2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fca4:	693b      	ldr	r3, [r7, #16]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d00a      	beq.n	800fcc2 <vPortFree+0x62>
	__asm volatile
 800fcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb0:	f383 8811 	msr	BASEPRI, r3
 800fcb4:	f3bf 8f6f 	isb	sy
 800fcb8:	f3bf 8f4f 	dsb	sy
 800fcbc:	60bb      	str	r3, [r7, #8]
}
 800fcbe:	bf00      	nop
 800fcc0:	e7fe      	b.n	800fcc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fcc2:	693b      	ldr	r3, [r7, #16]
 800fcc4:	685a      	ldr	r2, [r3, #4]
 800fcc6:	4b14      	ldr	r3, [pc, #80]	; (800fd18 <vPortFree+0xb8>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	4013      	ands	r3, r2
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d01e      	beq.n	800fd0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fcd0:	693b      	ldr	r3, [r7, #16]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d11a      	bne.n	800fd0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	685a      	ldr	r2, [r3, #4]
 800fcdc:	4b0e      	ldr	r3, [pc, #56]	; (800fd18 <vPortFree+0xb8>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	43db      	mvns	r3, r3
 800fce2:	401a      	ands	r2, r3
 800fce4:	693b      	ldr	r3, [r7, #16]
 800fce6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fce8:	f7fe febe 	bl	800ea68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fcec:	693b      	ldr	r3, [r7, #16]
 800fcee:	685a      	ldr	r2, [r3, #4]
 800fcf0:	4b0a      	ldr	r3, [pc, #40]	; (800fd1c <vPortFree+0xbc>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4413      	add	r3, r2
 800fcf6:	4a09      	ldr	r2, [pc, #36]	; (800fd1c <vPortFree+0xbc>)
 800fcf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fcfa:	6938      	ldr	r0, [r7, #16]
 800fcfc:	f000 f874 	bl	800fde8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fd00:	4b07      	ldr	r3, [pc, #28]	; (800fd20 <vPortFree+0xc0>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	3301      	adds	r3, #1
 800fd06:	4a06      	ldr	r2, [pc, #24]	; (800fd20 <vPortFree+0xc0>)
 800fd08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fd0a:	f7fe febb 	bl	800ea84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fd0e:	bf00      	nop
 800fd10:	3718      	adds	r7, #24
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}
 800fd16:	bf00      	nop
 800fd18:	200042dc 	.word	0x200042dc
 800fd1c:	200042cc 	.word	0x200042cc
 800fd20:	200042d8 	.word	0x200042d8

0800fd24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fd24:	b480      	push	{r7}
 800fd26:	b085      	sub	sp, #20
 800fd28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fd2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fd2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fd30:	4b27      	ldr	r3, [pc, #156]	; (800fdd0 <prvHeapInit+0xac>)
 800fd32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	f003 0307 	and.w	r3, r3, #7
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d00c      	beq.n	800fd58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	3307      	adds	r3, #7
 800fd42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	f023 0307 	bic.w	r3, r3, #7
 800fd4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fd4c:	68ba      	ldr	r2, [r7, #8]
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	1ad3      	subs	r3, r2, r3
 800fd52:	4a1f      	ldr	r2, [pc, #124]	; (800fdd0 <prvHeapInit+0xac>)
 800fd54:	4413      	add	r3, r2
 800fd56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fd5c:	4a1d      	ldr	r2, [pc, #116]	; (800fdd4 <prvHeapInit+0xb0>)
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fd62:	4b1c      	ldr	r3, [pc, #112]	; (800fdd4 <prvHeapInit+0xb0>)
 800fd64:	2200      	movs	r2, #0
 800fd66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	68ba      	ldr	r2, [r7, #8]
 800fd6c:	4413      	add	r3, r2
 800fd6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fd70:	2208      	movs	r2, #8
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	1a9b      	subs	r3, r3, r2
 800fd76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f023 0307 	bic.w	r3, r3, #7
 800fd7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	4a15      	ldr	r2, [pc, #84]	; (800fdd8 <prvHeapInit+0xb4>)
 800fd84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fd86:	4b14      	ldr	r3, [pc, #80]	; (800fdd8 <prvHeapInit+0xb4>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fd8e:	4b12      	ldr	r3, [pc, #72]	; (800fdd8 <prvHeapInit+0xb4>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	2200      	movs	r2, #0
 800fd94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	68fa      	ldr	r2, [r7, #12]
 800fd9e:	1ad2      	subs	r2, r2, r3
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fda4:	4b0c      	ldr	r3, [pc, #48]	; (800fdd8 <prvHeapInit+0xb4>)
 800fda6:	681a      	ldr	r2, [r3, #0]
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	685b      	ldr	r3, [r3, #4]
 800fdb0:	4a0a      	ldr	r2, [pc, #40]	; (800fddc <prvHeapInit+0xb8>)
 800fdb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	685b      	ldr	r3, [r3, #4]
 800fdb8:	4a09      	ldr	r2, [pc, #36]	; (800fde0 <prvHeapInit+0xbc>)
 800fdba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fdbc:	4b09      	ldr	r3, [pc, #36]	; (800fde4 <prvHeapInit+0xc0>)
 800fdbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fdc2:	601a      	str	r2, [r3, #0]
}
 800fdc4:	bf00      	nop
 800fdc6:	3714      	adds	r7, #20
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdce:	4770      	bx	lr
 800fdd0:	200006c0 	.word	0x200006c0
 800fdd4:	200042c0 	.word	0x200042c0
 800fdd8:	200042c8 	.word	0x200042c8
 800fddc:	200042d0 	.word	0x200042d0
 800fde0:	200042cc 	.word	0x200042cc
 800fde4:	200042dc 	.word	0x200042dc

0800fde8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fde8:	b480      	push	{r7}
 800fdea:	b085      	sub	sp, #20
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fdf0:	4b28      	ldr	r3, [pc, #160]	; (800fe94 <prvInsertBlockIntoFreeList+0xac>)
 800fdf2:	60fb      	str	r3, [r7, #12]
 800fdf4:	e002      	b.n	800fdfc <prvInsertBlockIntoFreeList+0x14>
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	60fb      	str	r3, [r7, #12]
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	687a      	ldr	r2, [r7, #4]
 800fe02:	429a      	cmp	r2, r3
 800fe04:	d8f7      	bhi.n	800fdf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	685b      	ldr	r3, [r3, #4]
 800fe0e:	68ba      	ldr	r2, [r7, #8]
 800fe10:	4413      	add	r3, r2
 800fe12:	687a      	ldr	r2, [r7, #4]
 800fe14:	429a      	cmp	r2, r3
 800fe16:	d108      	bne.n	800fe2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	685a      	ldr	r2, [r3, #4]
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	441a      	add	r2, r3
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	685b      	ldr	r3, [r3, #4]
 800fe32:	68ba      	ldr	r2, [r7, #8]
 800fe34:	441a      	add	r2, r3
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	d118      	bne.n	800fe70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	681a      	ldr	r2, [r3, #0]
 800fe42:	4b15      	ldr	r3, [pc, #84]	; (800fe98 <prvInsertBlockIntoFreeList+0xb0>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d00d      	beq.n	800fe66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	685a      	ldr	r2, [r3, #4]
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	685b      	ldr	r3, [r3, #4]
 800fe54:	441a      	add	r2, r3
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	681a      	ldr	r2, [r3, #0]
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	601a      	str	r2, [r3, #0]
 800fe64:	e008      	b.n	800fe78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fe66:	4b0c      	ldr	r3, [pc, #48]	; (800fe98 <prvInsertBlockIntoFreeList+0xb0>)
 800fe68:	681a      	ldr	r2, [r3, #0]
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	601a      	str	r2, [r3, #0]
 800fe6e:	e003      	b.n	800fe78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	681a      	ldr	r2, [r3, #0]
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fe78:	68fa      	ldr	r2, [r7, #12]
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d002      	beq.n	800fe86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	687a      	ldr	r2, [r7, #4]
 800fe84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe86:	bf00      	nop
 800fe88:	3714      	adds	r7, #20
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe90:	4770      	bx	lr
 800fe92:	bf00      	nop
 800fe94:	200042c0 	.word	0x200042c0
 800fe98:	200042c8 	.word	0x200042c8

0800fe9c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b084      	sub	sp, #16
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	330c      	adds	r3, #12
 800feac:	461a      	mov	r2, r3
 800feae:	6839      	ldr	r1, [r7, #0]
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f001 ffa3 	bl	8011dfc <tcpip_send_msg_wait_sem>
 800feb6:	4603      	mov	r3, r0
 800feb8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800feba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d103      	bne.n	800feca <netconn_apimsg+0x2e>
    return apimsg->err;
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fec8:	e001      	b.n	800fece <netconn_apimsg+0x32>
  }
  return err;
 800feca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fece:	4618      	mov	r0, r3
 800fed0:	3710      	adds	r7, #16
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}
	...

0800fed8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b08c      	sub	sp, #48	; 0x30
 800fedc:	af00      	add	r7, sp, #0
 800fede:	4603      	mov	r3, r0
 800fee0:	603a      	str	r2, [r7, #0]
 800fee2:	71fb      	strb	r3, [r7, #7]
 800fee4:	460b      	mov	r3, r1
 800fee6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800fee8:	79fb      	ldrb	r3, [r7, #7]
 800feea:	6839      	ldr	r1, [r7, #0]
 800feec:	4618      	mov	r0, r3
 800feee:	f000 feff 	bl	8010cf0 <netconn_alloc>
 800fef2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800fef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d054      	beq.n	800ffa4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800fefa:	79bb      	ldrb	r3, [r7, #6]
 800fefc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800fefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff00:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800ff02:	f107 0308 	add.w	r3, r7, #8
 800ff06:	4619      	mov	r1, r3
 800ff08:	4829      	ldr	r0, [pc, #164]	; (800ffb0 <netconn_new_with_proto_and_callback+0xd8>)
 800ff0a:	f7ff ffc7 	bl	800fe9c <netconn_apimsg>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800ff14:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d043      	beq.n	800ffa4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800ff1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d005      	beq.n	800ff30 <netconn_new_with_proto_and_callback+0x58>
 800ff24:	4b23      	ldr	r3, [pc, #140]	; (800ffb4 <netconn_new_with_proto_and_callback+0xdc>)
 800ff26:	22a3      	movs	r2, #163	; 0xa3
 800ff28:	4923      	ldr	r1, [pc, #140]	; (800ffb8 <netconn_new_with_proto_and_callback+0xe0>)
 800ff2a:	4824      	ldr	r0, [pc, #144]	; (800ffbc <netconn_new_with_proto_and_callback+0xe4>)
 800ff2c:	f00f fbc8 	bl	801f6c0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800ff30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff32:	3310      	adds	r3, #16
 800ff34:	4618      	mov	r0, r3
 800ff36:	f00e f9ae 	bl	801e296 <sys_mbox_valid>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d105      	bne.n	800ff4c <netconn_new_with_proto_and_callback+0x74>
 800ff40:	4b1c      	ldr	r3, [pc, #112]	; (800ffb4 <netconn_new_with_proto_and_callback+0xdc>)
 800ff42:	22a4      	movs	r2, #164	; 0xa4
 800ff44:	491e      	ldr	r1, [pc, #120]	; (800ffc0 <netconn_new_with_proto_and_callback+0xe8>)
 800ff46:	481d      	ldr	r0, [pc, #116]	; (800ffbc <netconn_new_with_proto_and_callback+0xe4>)
 800ff48:	f00f fbba 	bl	801f6c0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800ff4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff4e:	3314      	adds	r3, #20
 800ff50:	4618      	mov	r0, r3
 800ff52:	f00e f9a0 	bl	801e296 <sys_mbox_valid>
 800ff56:	4603      	mov	r3, r0
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d005      	beq.n	800ff68 <netconn_new_with_proto_and_callback+0x90>
 800ff5c:	4b15      	ldr	r3, [pc, #84]	; (800ffb4 <netconn_new_with_proto_and_callback+0xdc>)
 800ff5e:	22a6      	movs	r2, #166	; 0xa6
 800ff60:	4918      	ldr	r1, [pc, #96]	; (800ffc4 <netconn_new_with_proto_and_callback+0xec>)
 800ff62:	4816      	ldr	r0, [pc, #88]	; (800ffbc <netconn_new_with_proto_and_callback+0xe4>)
 800ff64:	f00f fbac 	bl	801f6c0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800ff68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff6a:	330c      	adds	r3, #12
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f00e fa23 	bl	801e3b8 <sys_sem_valid>
 800ff72:	4603      	mov	r3, r0
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d105      	bne.n	800ff84 <netconn_new_with_proto_and_callback+0xac>
 800ff78:	4b0e      	ldr	r3, [pc, #56]	; (800ffb4 <netconn_new_with_proto_and_callback+0xdc>)
 800ff7a:	22a9      	movs	r2, #169	; 0xa9
 800ff7c:	4912      	ldr	r1, [pc, #72]	; (800ffc8 <netconn_new_with_proto_and_callback+0xf0>)
 800ff7e:	480f      	ldr	r0, [pc, #60]	; (800ffbc <netconn_new_with_proto_and_callback+0xe4>)
 800ff80:	f00f fb9e 	bl	801f6c0 <iprintf>
      sys_sem_free(&conn->op_completed);
 800ff84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff86:	330c      	adds	r3, #12
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f00e fa08 	bl	801e39e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800ff8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff90:	3310      	adds	r3, #16
 800ff92:	4618      	mov	r0, r3
 800ff94:	f00e f8f8 	bl	801e188 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800ff98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff9a:	2007      	movs	r0, #7
 800ff9c:	f003 fcaa 	bl	80138f4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	e000      	b.n	800ffa6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800ffa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3730      	adds	r7, #48	; 0x30
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}
 800ffae:	bf00      	nop
 800ffb0:	08010cc5 	.word	0x08010cc5
 800ffb4:	08022e5c 	.word	0x08022e5c
 800ffb8:	08022e90 	.word	0x08022e90
 800ffbc:	08022eb4 	.word	0x08022eb4
 800ffc0:	08022edc 	.word	0x08022edc
 800ffc4:	08022ef4 	.word	0x08022ef4
 800ffc8:	08022f18 	.word	0x08022f18

0800ffcc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b08c      	sub	sp, #48	; 0x30
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d101      	bne.n	800ffde <netconn_prepare_delete+0x12>
    return ERR_OK;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	e014      	b.n	8010008 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ffe2:	2329      	movs	r3, #41	; 0x29
 800ffe4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800ffe6:	f107 030c 	add.w	r3, r7, #12
 800ffea:	4619      	mov	r1, r3
 800ffec:	4808      	ldr	r0, [pc, #32]	; (8010010 <netconn_prepare_delete+0x44>)
 800ffee:	f7ff ff55 	bl	800fe9c <netconn_apimsg>
 800fff2:	4603      	mov	r3, r0
 800fff4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800fff8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d002      	beq.n	8010006 <netconn_prepare_delete+0x3a>
    return err;
 8010000:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8010004:	e000      	b.n	8010008 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8010006:	2300      	movs	r3, #0
}
 8010008:	4618      	mov	r0, r3
 801000a:	3730      	adds	r7, #48	; 0x30
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}
 8010010:	08011229 	.word	0x08011229

08010014 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b084      	sub	sp, #16
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d101      	bne.n	8010026 <netconn_delete+0x12>
    return ERR_OK;
 8010022:	2300      	movs	r3, #0
 8010024:	e00d      	b.n	8010042 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f7ff ffd0 	bl	800ffcc <netconn_prepare_delete>
 801002c:	4603      	mov	r3, r0
 801002e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8010030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d102      	bne.n	801003e <netconn_delete+0x2a>
    netconn_free(conn);
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f000 fec7 	bl	8010dcc <netconn_free>
  }
  return err;
 801003e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010042:	4618      	mov	r0, r3
 8010044:	3710      	adds	r7, #16
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}
	...

0801004c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b08e      	sub	sp, #56	; 0x38
 8010050:	af00      	add	r7, sp, #0
 8010052:	60f8      	str	r0, [r7, #12]
 8010054:	60b9      	str	r1, [r7, #8]
 8010056:	4613      	mov	r3, r2
 8010058:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d109      	bne.n	8010074 <netconn_bind+0x28>
 8010060:	4b11      	ldr	r3, [pc, #68]	; (80100a8 <netconn_bind+0x5c>)
 8010062:	f44f 729c 	mov.w	r2, #312	; 0x138
 8010066:	4911      	ldr	r1, [pc, #68]	; (80100ac <netconn_bind+0x60>)
 8010068:	4811      	ldr	r0, [pc, #68]	; (80100b0 <netconn_bind+0x64>)
 801006a:	f00f fb29 	bl	801f6c0 <iprintf>
 801006e:	f06f 030f 	mvn.w	r3, #15
 8010072:	e015      	b.n	80100a0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d101      	bne.n	801007e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 801007a:	4b0e      	ldr	r3, [pc, #56]	; (80100b4 <netconn_bind+0x68>)
 801007c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8010086:	88fb      	ldrh	r3, [r7, #6]
 8010088:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 801008a:	f107 0314 	add.w	r3, r7, #20
 801008e:	4619      	mov	r1, r3
 8010090:	4809      	ldr	r0, [pc, #36]	; (80100b8 <netconn_bind+0x6c>)
 8010092:	f7ff ff03 	bl	800fe9c <netconn_apimsg>
 8010096:	4603      	mov	r3, r0
 8010098:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 801009c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	3738      	adds	r7, #56	; 0x38
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}
 80100a8:	08022e5c 	.word	0x08022e5c
 80100ac:	08022f94 	.word	0x08022f94
 80100b0:	08022eb4 	.word	0x08022eb4
 80100b4:	08027630 	.word	0x08027630
 80100b8:	080113f1 	.word	0x080113f1

080100bc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b088      	sub	sp, #32
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	60f8      	str	r0, [r7, #12]
 80100c4:	60b9      	str	r1, [r7, #8]
 80100c6:	4613      	mov	r3, r2
 80100c8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80100ca:	2300      	movs	r3, #0
 80100cc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d109      	bne.n	80100e8 <netconn_recv_data+0x2c>
 80100d4:	4b58      	ldr	r3, [pc, #352]	; (8010238 <netconn_recv_data+0x17c>)
 80100d6:	f44f 7212 	mov.w	r2, #584	; 0x248
 80100da:	4958      	ldr	r1, [pc, #352]	; (801023c <netconn_recv_data+0x180>)
 80100dc:	4858      	ldr	r0, [pc, #352]	; (8010240 <netconn_recv_data+0x184>)
 80100de:	f00f faef 	bl	801f6c0 <iprintf>
 80100e2:	f06f 030f 	mvn.w	r3, #15
 80100e6:	e0a2      	b.n	801022e <netconn_recv_data+0x172>
  *new_buf = NULL;
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	2200      	movs	r2, #0
 80100ec:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d109      	bne.n	8010108 <netconn_recv_data+0x4c>
 80100f4:	4b50      	ldr	r3, [pc, #320]	; (8010238 <netconn_recv_data+0x17c>)
 80100f6:	f240 224a 	movw	r2, #586	; 0x24a
 80100fa:	4952      	ldr	r1, [pc, #328]	; (8010244 <netconn_recv_data+0x188>)
 80100fc:	4850      	ldr	r0, [pc, #320]	; (8010240 <netconn_recv_data+0x184>)
 80100fe:	f00f fadf 	bl	801f6c0 <iprintf>
 8010102:	f06f 030f 	mvn.w	r3, #15
 8010106:	e092      	b.n	801022e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	3310      	adds	r3, #16
 801010c:	4618      	mov	r0, r3
 801010e:	f00e f8c2 	bl	801e296 <sys_mbox_valid>
 8010112:	4603      	mov	r3, r0
 8010114:	2b00      	cmp	r3, #0
 8010116:	d10e      	bne.n	8010136 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8010118:	68f8      	ldr	r0, [r7, #12]
 801011a:	f000 fa23 	bl	8010564 <netconn_err>
 801011e:	4603      	mov	r3, r0
 8010120:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8010122:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d002      	beq.n	8010130 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 801012a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801012e:	e07e      	b.n	801022e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8010130:	f06f 030a 	mvn.w	r3, #10
 8010134:	e07b      	b.n	801022e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	7f1b      	ldrb	r3, [r3, #28]
 801013a:	f003 0302 	and.w	r3, r3, #2
 801013e:	2b00      	cmp	r3, #0
 8010140:	d10f      	bne.n	8010162 <netconn_recv_data+0xa6>
 8010142:	79fb      	ldrb	r3, [r7, #7]
 8010144:	f003 0304 	and.w	r3, r3, #4
 8010148:	2b00      	cmp	r3, #0
 801014a:	d10a      	bne.n	8010162 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	7f1b      	ldrb	r3, [r3, #28]
 8010150:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8010154:	2b00      	cmp	r3, #0
 8010156:	d104      	bne.n	8010162 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d023      	beq.n	80101aa <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	3310      	adds	r3, #16
 8010166:	f107 0218 	add.w	r2, r7, #24
 801016a:	4611      	mov	r1, r2
 801016c:	4618      	mov	r0, r3
 801016e:	f00e f876 	bl	801e25e <sys_arch_mbox_tryfetch>
 8010172:	4603      	mov	r3, r0
 8010174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010178:	d11f      	bne.n	80101ba <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 801017a:	68f8      	ldr	r0, [r7, #12]
 801017c:	f000 f9f2 	bl	8010564 <netconn_err>
 8010180:	4603      	mov	r3, r0
 8010182:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8010184:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d002      	beq.n	8010192 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 801018c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010190:	e04d      	b.n	801022e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	7f1b      	ldrb	r3, [r3, #28]
 8010196:	f003 0301 	and.w	r3, r3, #1
 801019a:	2b00      	cmp	r3, #0
 801019c:	d002      	beq.n	80101a4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 801019e:	f06f 030a 	mvn.w	r3, #10
 80101a2:	e044      	b.n	801022e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80101a4:	f06f 0306 	mvn.w	r3, #6
 80101a8:	e041      	b.n	801022e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	3310      	adds	r3, #16
 80101ae:	f107 0118 	add.w	r1, r7, #24
 80101b2:	2200      	movs	r2, #0
 80101b4:	4618      	mov	r0, r3
 80101b6:	f00e f813 	bl	801e1e0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	781b      	ldrb	r3, [r3, #0]
 80101be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80101c2:	2b10      	cmp	r3, #16
 80101c4:	d117      	bne.n	80101f6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80101c6:	69bb      	ldr	r3, [r7, #24]
 80101c8:	f107 0217 	add.w	r2, r7, #23
 80101cc:	4611      	mov	r1, r2
 80101ce:	4618      	mov	r0, r3
 80101d0:	f000 fa1a 	bl	8010608 <lwip_netconn_is_err_msg>
 80101d4:	4603      	mov	r3, r0
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d009      	beq.n	80101ee <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80101da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80101de:	f113 0f0f 	cmn.w	r3, #15
 80101e2:	d101      	bne.n	80101e8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80101e4:	2300      	movs	r3, #0
 80101e6:	e022      	b.n	801022e <netconn_recv_data+0x172>
      }
      return err;
 80101e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80101ec:	e01f      	b.n	801022e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80101ee:	69bb      	ldr	r3, [r7, #24]
 80101f0:	891b      	ldrh	r3, [r3, #8]
 80101f2:	83fb      	strh	r3, [r7, #30]
 80101f4:	e00d      	b.n	8010212 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80101f6:	69bb      	ldr	r3, [r7, #24]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d106      	bne.n	801020a <netconn_recv_data+0x14e>
 80101fc:	4b0e      	ldr	r3, [pc, #56]	; (8010238 <netconn_recv_data+0x17c>)
 80101fe:	f240 2291 	movw	r2, #657	; 0x291
 8010202:	4911      	ldr	r1, [pc, #68]	; (8010248 <netconn_recv_data+0x18c>)
 8010204:	480e      	ldr	r0, [pc, #56]	; (8010240 <netconn_recv_data+0x184>)
 8010206:	f00f fa5b 	bl	801f6c0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 801020a:	69bb      	ldr	r3, [r7, #24]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	891b      	ldrh	r3, [r3, #8]
 8010210:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010216:	2b00      	cmp	r3, #0
 8010218:	d005      	beq.n	8010226 <netconn_recv_data+0x16a>
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801021e:	8bfa      	ldrh	r2, [r7, #30]
 8010220:	2101      	movs	r1, #1
 8010222:	68f8      	ldr	r0, [r7, #12]
 8010224:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8010226:	69ba      	ldr	r2, [r7, #24]
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 801022c:	2300      	movs	r3, #0
}
 801022e:	4618      	mov	r0, r3
 8010230:	3720      	adds	r7, #32
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
 8010236:	bf00      	nop
 8010238:	08022e5c 	.word	0x08022e5c
 801023c:	08023074 	.word	0x08023074
 8010240:	08022eb4 	.word	0x08022eb4
 8010244:	08023094 	.word	0x08023094
 8010248:	080230b0 	.word	0x080230b0

0801024c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0
 8010252:	60f8      	str	r0, [r7, #12]
 8010254:	60b9      	str	r1, [r7, #8]
 8010256:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d005      	beq.n	801026a <netconn_tcp_recvd_msg+0x1e>
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	781b      	ldrb	r3, [r3, #0]
 8010262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010266:	2b10      	cmp	r3, #16
 8010268:	d009      	beq.n	801027e <netconn_tcp_recvd_msg+0x32>
 801026a:	4b0c      	ldr	r3, [pc, #48]	; (801029c <netconn_tcp_recvd_msg+0x50>)
 801026c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8010270:	490b      	ldr	r1, [pc, #44]	; (80102a0 <netconn_tcp_recvd_msg+0x54>)
 8010272:	480c      	ldr	r0, [pc, #48]	; (80102a4 <netconn_tcp_recvd_msg+0x58>)
 8010274:	f00f fa24 	bl	801f6c0 <iprintf>
 8010278:	f06f 030f 	mvn.w	r3, #15
 801027c:	e00a      	b.n	8010294 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	68fa      	ldr	r2, [r7, #12]
 8010282:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	68ba      	ldr	r2, [r7, #8]
 8010288:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 801028a:	6879      	ldr	r1, [r7, #4]
 801028c:	4806      	ldr	r0, [pc, #24]	; (80102a8 <netconn_tcp_recvd_msg+0x5c>)
 801028e:	f7ff fe05 	bl	800fe9c <netconn_apimsg>
 8010292:	4603      	mov	r3, r0
}
 8010294:	4618      	mov	r0, r3
 8010296:	3710      	adds	r7, #16
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}
 801029c:	08022e5c 	.word	0x08022e5c
 80102a0:	080230bc 	.word	0x080230bc
 80102a4:	08022eb4 	.word	0x08022eb4
 80102a8:	080114ff 	.word	0x080114ff

080102ac <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b090      	sub	sp, #64	; 0x40
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	60f8      	str	r0, [r7, #12]
 80102b4:	60b9      	str	r1, [r7, #8]
 80102b6:	4613      	mov	r3, r2
 80102b8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	3310      	adds	r3, #16
 80102be:	4618      	mov	r0, r3
 80102c0:	f00d ffe9 	bl	801e296 <sys_mbox_valid>
 80102c4:	4603      	mov	r3, r0
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d102      	bne.n	80102d0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80102ca:	f06f 030a 	mvn.w	r3, #10
 80102ce:	e06d      	b.n	80103ac <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	7f1b      	ldrb	r3, [r3, #28]
 80102d4:	b25b      	sxtb	r3, r3
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	da07      	bge.n	80102ea <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	7f1b      	ldrb	r3, [r3, #28]
 80102de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102e2:	b2da      	uxtb	r2, r3
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80102e8:	e039      	b.n	801035e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80102ea:	79fb      	ldrb	r3, [r7, #7]
 80102ec:	461a      	mov	r2, r3
 80102ee:	68b9      	ldr	r1, [r7, #8]
 80102f0:	68f8      	ldr	r0, [r7, #12]
 80102f2:	f7ff fee3 	bl	80100bc <netconn_recv_data>
 80102f6:	4603      	mov	r3, r0
 80102f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80102fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010300:	2b00      	cmp	r3, #0
 8010302:	d002      	beq.n	801030a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8010304:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010308:	e050      	b.n	80103ac <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8010310:	79fb      	ldrb	r3, [r7, #7]
 8010312:	f003 0308 	and.w	r3, r3, #8
 8010316:	2b00      	cmp	r3, #0
 8010318:	d10e      	bne.n	8010338 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 801031a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801031c:	2b00      	cmp	r3, #0
 801031e:	d002      	beq.n	8010326 <netconn_recv_data_tcp+0x7a>
 8010320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010322:	891b      	ldrh	r3, [r3, #8]
 8010324:	e000      	b.n	8010328 <netconn_recv_data_tcp+0x7c>
 8010326:	2301      	movs	r3, #1
 8010328:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 801032a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801032c:	f107 0214 	add.w	r2, r7, #20
 8010330:	4619      	mov	r1, r3
 8010332:	68f8      	ldr	r0, [r7, #12]
 8010334:	f7ff ff8a 	bl	801024c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8010338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801033a:	2b00      	cmp	r3, #0
 801033c:	d134      	bne.n	80103a8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 801033e:	79fb      	ldrb	r3, [r7, #7]
 8010340:	f003 0310 	and.w	r3, r3, #16
 8010344:	2b00      	cmp	r3, #0
 8010346:	d009      	beq.n	801035c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	7f1b      	ldrb	r3, [r3, #28]
 801034c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010350:	b2da      	uxtb	r2, r3
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8010356:	f06f 0306 	mvn.w	r3, #6
 801035a:	e027      	b.n	80103ac <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 801035c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010362:	2b00      	cmp	r3, #0
 8010364:	d005      	beq.n	8010372 <netconn_recv_data_tcp+0xc6>
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801036a:	2200      	movs	r2, #0
 801036c:	2101      	movs	r1, #1
 801036e:	68f8      	ldr	r0, [r7, #12]
 8010370:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d10f      	bne.n	801039a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 801037a:	68f8      	ldr	r0, [r7, #12]
 801037c:	f000 f8f2 	bl	8010564 <netconn_err>
 8010380:	4603      	mov	r3, r0
 8010382:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8010386:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801038a:	2b00      	cmp	r3, #0
 801038c:	d002      	beq.n	8010394 <netconn_recv_data_tcp+0xe8>
          return err;
 801038e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010392:	e00b      	b.n	80103ac <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8010394:	f06f 030d 	mvn.w	r3, #13
 8010398:	e008      	b.n	80103ac <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 801039a:	2101      	movs	r1, #1
 801039c:	68f8      	ldr	r0, [r7, #12]
 801039e:	f000 f8b1 	bl	8010504 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80103a2:	f06f 030e 	mvn.w	r3, #14
 80103a6:	e001      	b.n	80103ac <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80103a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	3740      	adds	r7, #64	; 0x40
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}

080103b4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b086      	sub	sp, #24
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80103be:	2300      	movs	r3, #0
 80103c0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d109      	bne.n	80103dc <netconn_recv+0x28>
 80103c8:	4b32      	ldr	r3, [pc, #200]	; (8010494 <netconn_recv+0xe0>)
 80103ca:	f240 3263 	movw	r2, #867	; 0x363
 80103ce:	4932      	ldr	r1, [pc, #200]	; (8010498 <netconn_recv+0xe4>)
 80103d0:	4832      	ldr	r0, [pc, #200]	; (801049c <netconn_recv+0xe8>)
 80103d2:	f00f f975 	bl	801f6c0 <iprintf>
 80103d6:	f06f 030f 	mvn.w	r3, #15
 80103da:	e056      	b.n	801048a <netconn_recv+0xd6>
  *new_buf = NULL;
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	2200      	movs	r2, #0
 80103e0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d109      	bne.n	80103fc <netconn_recv+0x48>
 80103e8:	4b2a      	ldr	r3, [pc, #168]	; (8010494 <netconn_recv+0xe0>)
 80103ea:	f240 3265 	movw	r2, #869	; 0x365
 80103ee:	492c      	ldr	r1, [pc, #176]	; (80104a0 <netconn_recv+0xec>)
 80103f0:	482a      	ldr	r0, [pc, #168]	; (801049c <netconn_recv+0xe8>)
 80103f2:	f00f f965 	bl	801f6c0 <iprintf>
 80103f6:	f06f 030f 	mvn.w	r3, #15
 80103fa:	e046      	b.n	801048a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	781b      	ldrb	r3, [r3, #0]
 8010400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010404:	2b10      	cmp	r3, #16
 8010406:	d13a      	bne.n	801047e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8010408:	2300      	movs	r3, #0
 801040a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801040c:	2006      	movs	r0, #6
 801040e:	f003 fa1f 	bl	8013850 <memp_malloc>
 8010412:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8010414:	697b      	ldr	r3, [r7, #20]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d102      	bne.n	8010420 <netconn_recv+0x6c>
      return ERR_MEM;
 801041a:	f04f 33ff 	mov.w	r3, #4294967295
 801041e:	e034      	b.n	801048a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8010420:	f107 030c 	add.w	r3, r7, #12
 8010424:	2200      	movs	r2, #0
 8010426:	4619      	mov	r1, r3
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f7ff ff3f 	bl	80102ac <netconn_recv_data_tcp>
 801042e:	4603      	mov	r3, r0
 8010430:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010432:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d006      	beq.n	8010448 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 801043a:	6979      	ldr	r1, [r7, #20]
 801043c:	2006      	movs	r0, #6
 801043e:	f003 fa59 	bl	80138f4 <memp_free>
      return err;
 8010442:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010446:	e020      	b.n	801048a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d106      	bne.n	801045c <netconn_recv+0xa8>
 801044e:	4b11      	ldr	r3, [pc, #68]	; (8010494 <netconn_recv+0xe0>)
 8010450:	f240 3279 	movw	r2, #889	; 0x379
 8010454:	4913      	ldr	r1, [pc, #76]	; (80104a4 <netconn_recv+0xf0>)
 8010456:	4811      	ldr	r0, [pc, #68]	; (801049c <netconn_recv+0xe8>)
 8010458:	f00f f932 	bl	801f6c0 <iprintf>

    buf->p = p;
 801045c:	68fa      	ldr	r2, [r7, #12]
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8010462:	68fa      	ldr	r2, [r7, #12]
 8010464:	697b      	ldr	r3, [r7, #20]
 8010466:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	2200      	movs	r2, #0
 801046c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	2200      	movs	r2, #0
 8010472:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	697a      	ldr	r2, [r7, #20]
 8010478:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 801047a:	2300      	movs	r3, #0
 801047c:	e005      	b.n	801048a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 801047e:	2200      	movs	r2, #0
 8010480:	6839      	ldr	r1, [r7, #0]
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f7ff fe1a 	bl	80100bc <netconn_recv_data>
 8010488:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 801048a:	4618      	mov	r0, r3
 801048c:	3718      	adds	r7, #24
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
 8010492:	bf00      	nop
 8010494:	08022e5c 	.word	0x08022e5c
 8010498:	08023074 	.word	0x08023074
 801049c:	08022eb4 	.word	0x08022eb4
 80104a0:	08023094 	.word	0x08023094
 80104a4:	0802310c 	.word	0x0802310c

080104a8 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b08c      	sub	sp, #48	; 0x30
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
 80104b0:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d109      	bne.n	80104cc <netconn_send+0x24>
 80104b8:	4b0e      	ldr	r3, [pc, #56]	; (80104f4 <netconn_send+0x4c>)
 80104ba:	f240 32b2 	movw	r2, #946	; 0x3b2
 80104be:	490e      	ldr	r1, [pc, #56]	; (80104f8 <netconn_send+0x50>)
 80104c0:	480e      	ldr	r0, [pc, #56]	; (80104fc <netconn_send+0x54>)
 80104c2:	f00f f8fd 	bl	801f6c0 <iprintf>
 80104c6:	f06f 030f 	mvn.w	r3, #15
 80104ca:	e00e      	b.n	80104ea <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 80104d4:	f107 030c 	add.w	r3, r7, #12
 80104d8:	4619      	mov	r1, r3
 80104da:	4809      	ldr	r0, [pc, #36]	; (8010500 <netconn_send+0x58>)
 80104dc:	f7ff fcde 	bl	800fe9c <netconn_apimsg>
 80104e0:	4603      	mov	r3, r0
 80104e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80104e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3730      	adds	r7, #48	; 0x30
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
 80104f2:	bf00      	nop
 80104f4:	08022e5c 	.word	0x08022e5c
 80104f8:	08023118 	.word	0x08023118
 80104fc:	08022eb4 	.word	0x08022eb4
 8010500:	08011465 	.word	0x08011465

08010504 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b08c      	sub	sp, #48	; 0x30
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	460b      	mov	r3, r1
 801050e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d109      	bne.n	801052a <netconn_close_shutdown+0x26>
 8010516:	4b0f      	ldr	r3, [pc, #60]	; (8010554 <netconn_close_shutdown+0x50>)
 8010518:	f240 4247 	movw	r2, #1095	; 0x447
 801051c:	490e      	ldr	r1, [pc, #56]	; (8010558 <netconn_close_shutdown+0x54>)
 801051e:	480f      	ldr	r0, [pc, #60]	; (801055c <netconn_close_shutdown+0x58>)
 8010520:	f00f f8ce 	bl	801f6c0 <iprintf>
 8010524:	f06f 030f 	mvn.w	r3, #15
 8010528:	e010      	b.n	801054c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 801052e:	78fb      	ldrb	r3, [r7, #3]
 8010530:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8010532:	2329      	movs	r3, #41	; 0x29
 8010534:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8010536:	f107 030c 	add.w	r3, r7, #12
 801053a:	4619      	mov	r1, r3
 801053c:	4808      	ldr	r0, [pc, #32]	; (8010560 <netconn_close_shutdown+0x5c>)
 801053e:	f7ff fcad 	bl	800fe9c <netconn_apimsg>
 8010542:	4603      	mov	r3, r0
 8010544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8010548:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 801054c:	4618      	mov	r0, r3
 801054e:	3730      	adds	r7, #48	; 0x30
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}
 8010554:	08022e5c 	.word	0x08022e5c
 8010558:	08023198 	.word	0x08023198
 801055c:	08022eb4 	.word	0x08022eb4
 8010560:	08011901 	.word	0x08011901

08010564 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b084      	sub	sp, #16
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d101      	bne.n	8010576 <netconn_err+0x12>
    return ERR_OK;
 8010572:	2300      	movs	r3, #0
 8010574:	e00d      	b.n	8010592 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8010576:	f00d ffa9 	bl	801e4cc <sys_arch_protect>
 801057a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	7a1b      	ldrb	r3, [r3, #8]
 8010580:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2200      	movs	r2, #0
 8010586:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8010588:	68f8      	ldr	r0, [r7, #12]
 801058a:	f00d ffad 	bl	801e4e8 <sys_arch_unprotect>
  return err;
 801058e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010592:	4618      	mov	r0, r3
 8010594:	3710      	adds	r7, #16
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
	...

0801059c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b082      	sub	sp, #8
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	4603      	mov	r3, r0
 80105a4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80105a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80105aa:	f113 0f0d 	cmn.w	r3, #13
 80105ae:	d009      	beq.n	80105c4 <lwip_netconn_err_to_msg+0x28>
 80105b0:	f113 0f0d 	cmn.w	r3, #13
 80105b4:	dc0c      	bgt.n	80105d0 <lwip_netconn_err_to_msg+0x34>
 80105b6:	f113 0f0f 	cmn.w	r3, #15
 80105ba:	d007      	beq.n	80105cc <lwip_netconn_err_to_msg+0x30>
 80105bc:	f113 0f0e 	cmn.w	r3, #14
 80105c0:	d002      	beq.n	80105c8 <lwip_netconn_err_to_msg+0x2c>
 80105c2:	e005      	b.n	80105d0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80105c4:	4b0a      	ldr	r3, [pc, #40]	; (80105f0 <lwip_netconn_err_to_msg+0x54>)
 80105c6:	e00e      	b.n	80105e6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80105c8:	4b0a      	ldr	r3, [pc, #40]	; (80105f4 <lwip_netconn_err_to_msg+0x58>)
 80105ca:	e00c      	b.n	80105e6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80105cc:	4b0a      	ldr	r3, [pc, #40]	; (80105f8 <lwip_netconn_err_to_msg+0x5c>)
 80105ce:	e00a      	b.n	80105e6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80105d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d005      	beq.n	80105e4 <lwip_netconn_err_to_msg+0x48>
 80105d8:	4b08      	ldr	r3, [pc, #32]	; (80105fc <lwip_netconn_err_to_msg+0x60>)
 80105da:	227d      	movs	r2, #125	; 0x7d
 80105dc:	4908      	ldr	r1, [pc, #32]	; (8010600 <lwip_netconn_err_to_msg+0x64>)
 80105de:	4809      	ldr	r0, [pc, #36]	; (8010604 <lwip_netconn_err_to_msg+0x68>)
 80105e0:	f00f f86e 	bl	801f6c0 <iprintf>
      return NULL;
 80105e4:	2300      	movs	r3, #0
  }
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	3708      	adds	r7, #8
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}
 80105ee:	bf00      	nop
 80105f0:	080266c0 	.word	0x080266c0
 80105f4:	080266c1 	.word	0x080266c1
 80105f8:	080266c2 	.word	0x080266c2
 80105fc:	080231b4 	.word	0x080231b4
 8010600:	080231e8 	.word	0x080231e8
 8010604:	080231f8 	.word	0x080231f8

08010608 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b082      	sub	sp, #8
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d105      	bne.n	8010624 <lwip_netconn_is_err_msg+0x1c>
 8010618:	4b12      	ldr	r3, [pc, #72]	; (8010664 <lwip_netconn_is_err_msg+0x5c>)
 801061a:	2285      	movs	r2, #133	; 0x85
 801061c:	4912      	ldr	r1, [pc, #72]	; (8010668 <lwip_netconn_is_err_msg+0x60>)
 801061e:	4813      	ldr	r0, [pc, #76]	; (801066c <lwip_netconn_is_err_msg+0x64>)
 8010620:	f00f f84e 	bl	801f6c0 <iprintf>

  if (msg == &netconn_aborted) {
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	4a12      	ldr	r2, [pc, #72]	; (8010670 <lwip_netconn_is_err_msg+0x68>)
 8010628:	4293      	cmp	r3, r2
 801062a:	d104      	bne.n	8010636 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	22f3      	movs	r2, #243	; 0xf3
 8010630:	701a      	strb	r2, [r3, #0]
    return 1;
 8010632:	2301      	movs	r3, #1
 8010634:	e012      	b.n	801065c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	4a0e      	ldr	r2, [pc, #56]	; (8010674 <lwip_netconn_is_err_msg+0x6c>)
 801063a:	4293      	cmp	r3, r2
 801063c:	d104      	bne.n	8010648 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 801063e:	683b      	ldr	r3, [r7, #0]
 8010640:	22f2      	movs	r2, #242	; 0xf2
 8010642:	701a      	strb	r2, [r3, #0]
    return 1;
 8010644:	2301      	movs	r3, #1
 8010646:	e009      	b.n	801065c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	4a0b      	ldr	r2, [pc, #44]	; (8010678 <lwip_netconn_is_err_msg+0x70>)
 801064c:	4293      	cmp	r3, r2
 801064e:	d104      	bne.n	801065a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	22f1      	movs	r2, #241	; 0xf1
 8010654:	701a      	strb	r2, [r3, #0]
    return 1;
 8010656:	2301      	movs	r3, #1
 8010658:	e000      	b.n	801065c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 801065a:	2300      	movs	r3, #0
}
 801065c:	4618      	mov	r0, r3
 801065e:	3708      	adds	r7, #8
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}
 8010664:	080231b4 	.word	0x080231b4
 8010668:	08023220 	.word	0x08023220
 801066c:	080231f8 	.word	0x080231f8
 8010670:	080266c0 	.word	0x080266c0
 8010674:	080266c1 	.word	0x080266c1
 8010678:	080266c2 	.word	0x080266c2

0801067c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b088      	sub	sp, #32
 8010680:	af00      	add	r7, sp, #0
 8010682:	60f8      	str	r0, [r7, #12]
 8010684:	60b9      	str	r1, [r7, #8]
 8010686:	607a      	str	r2, [r7, #4]
 8010688:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d105      	bne.n	801069c <recv_udp+0x20>
 8010690:	4b34      	ldr	r3, [pc, #208]	; (8010764 <recv_udp+0xe8>)
 8010692:	22e5      	movs	r2, #229	; 0xe5
 8010694:	4934      	ldr	r1, [pc, #208]	; (8010768 <recv_udp+0xec>)
 8010696:	4835      	ldr	r0, [pc, #212]	; (801076c <recv_udp+0xf0>)
 8010698:	f00f f812 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d105      	bne.n	80106ae <recv_udp+0x32>
 80106a2:	4b30      	ldr	r3, [pc, #192]	; (8010764 <recv_udp+0xe8>)
 80106a4:	22e6      	movs	r2, #230	; 0xe6
 80106a6:	4932      	ldr	r1, [pc, #200]	; (8010770 <recv_udp+0xf4>)
 80106a8:	4830      	ldr	r0, [pc, #192]	; (801076c <recv_udp+0xf0>)
 80106aa:	f00f f809 	bl	801f6c0 <iprintf>
  conn = (struct netconn *)arg;
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80106b2:	69fb      	ldr	r3, [r7, #28]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d103      	bne.n	80106c0 <recv_udp+0x44>
    pbuf_free(p);
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f003 ff99 	bl	80145f0 <pbuf_free>
    return;
 80106be:	e04d      	b.n	801075c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80106c0:	69fb      	ldr	r3, [r7, #28]
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	68ba      	ldr	r2, [r7, #8]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d005      	beq.n	80106d6 <recv_udp+0x5a>
 80106ca:	4b26      	ldr	r3, [pc, #152]	; (8010764 <recv_udp+0xe8>)
 80106cc:	22ee      	movs	r2, #238	; 0xee
 80106ce:	4929      	ldr	r1, [pc, #164]	; (8010774 <recv_udp+0xf8>)
 80106d0:	4826      	ldr	r0, [pc, #152]	; (801076c <recv_udp+0xf0>)
 80106d2:	f00e fff5 	bl	801f6c0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80106d6:	69fb      	ldr	r3, [r7, #28]
 80106d8:	3310      	adds	r3, #16
 80106da:	4618      	mov	r0, r3
 80106dc:	f00d fddb 	bl	801e296 <sys_mbox_valid>
 80106e0:	4603      	mov	r3, r0
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d103      	bne.n	80106ee <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f003 ff82 	bl	80145f0 <pbuf_free>
    return;
 80106ec:	e036      	b.n	801075c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80106ee:	2006      	movs	r0, #6
 80106f0:	f003 f8ae 	bl	8013850 <memp_malloc>
 80106f4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80106f6:	69bb      	ldr	r3, [r7, #24]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d103      	bne.n	8010704 <recv_udp+0x88>
    pbuf_free(p);
 80106fc:	6878      	ldr	r0, [r7, #4]
 80106fe:	f003 ff77 	bl	80145f0 <pbuf_free>
    return;
 8010702:	e02b      	b.n	801075c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8010704:	69bb      	ldr	r3, [r7, #24]
 8010706:	687a      	ldr	r2, [r7, #4]
 8010708:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801070a:	69bb      	ldr	r3, [r7, #24]
 801070c:	687a      	ldr	r2, [r7, #4]
 801070e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d002      	beq.n	801071c <recv_udp+0xa0>
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	e000      	b.n	801071e <recv_udp+0xa2>
 801071c:	2300      	movs	r3, #0
 801071e:	69ba      	ldr	r2, [r7, #24]
 8010720:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8010722:	69bb      	ldr	r3, [r7, #24]
 8010724:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010726:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	891b      	ldrh	r3, [r3, #8]
 801072c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 801072e:	69fb      	ldr	r3, [r7, #28]
 8010730:	3310      	adds	r3, #16
 8010732:	69b9      	ldr	r1, [r7, #24]
 8010734:	4618      	mov	r0, r3
 8010736:	f00d fd39 	bl	801e1ac <sys_mbox_trypost>
 801073a:	4603      	mov	r3, r0
 801073c:	2b00      	cmp	r3, #0
 801073e:	d003      	beq.n	8010748 <recv_udp+0xcc>
    netbuf_delete(buf);
 8010740:	69b8      	ldr	r0, [r7, #24]
 8010742:	f001 f969 	bl	8011a18 <netbuf_delete>
    return;
 8010746:	e009      	b.n	801075c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8010748:	69fb      	ldr	r3, [r7, #28]
 801074a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801074c:	2b00      	cmp	r3, #0
 801074e:	d005      	beq.n	801075c <recv_udp+0xe0>
 8010750:	69fb      	ldr	r3, [r7, #28]
 8010752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010754:	8afa      	ldrh	r2, [r7, #22]
 8010756:	2100      	movs	r1, #0
 8010758:	69f8      	ldr	r0, [r7, #28]
 801075a:	4798      	blx	r3
  }
}
 801075c:	3720      	adds	r7, #32
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}
 8010762:	bf00      	nop
 8010764:	080231b4 	.word	0x080231b4
 8010768:	0802322c 	.word	0x0802322c
 801076c:	080231f8 	.word	0x080231f8
 8010770:	08023250 	.word	0x08023250
 8010774:	08023270 	.word	0x08023270

08010778 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b088      	sub	sp, #32
 801077c:	af00      	add	r7, sp, #0
 801077e:	60f8      	str	r0, [r7, #12]
 8010780:	60b9      	str	r1, [r7, #8]
 8010782:	607a      	str	r2, [r7, #4]
 8010784:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d106      	bne.n	801079a <recv_tcp+0x22>
 801078c:	4b36      	ldr	r3, [pc, #216]	; (8010868 <recv_tcp+0xf0>)
 801078e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8010792:	4936      	ldr	r1, [pc, #216]	; (801086c <recv_tcp+0xf4>)
 8010794:	4836      	ldr	r0, [pc, #216]	; (8010870 <recv_tcp+0xf8>)
 8010796:	f00e ff93 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d106      	bne.n	80107ae <recv_tcp+0x36>
 80107a0:	4b31      	ldr	r3, [pc, #196]	; (8010868 <recv_tcp+0xf0>)
 80107a2:	f240 122d 	movw	r2, #301	; 0x12d
 80107a6:	4933      	ldr	r1, [pc, #204]	; (8010874 <recv_tcp+0xfc>)
 80107a8:	4831      	ldr	r0, [pc, #196]	; (8010870 <recv_tcp+0xf8>)
 80107aa:	f00e ff89 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80107ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d006      	beq.n	80107c4 <recv_tcp+0x4c>
 80107b6:	4b2c      	ldr	r3, [pc, #176]	; (8010868 <recv_tcp+0xf0>)
 80107b8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80107bc:	492e      	ldr	r1, [pc, #184]	; (8010878 <recv_tcp+0x100>)
 80107be:	482c      	ldr	r0, [pc, #176]	; (8010870 <recv_tcp+0xf8>)
 80107c0:	f00e ff7e 	bl	801f6c0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d102      	bne.n	80107d4 <recv_tcp+0x5c>
    return ERR_VAL;
 80107ce:	f06f 0305 	mvn.w	r3, #5
 80107d2:	e045      	b.n	8010860 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	685b      	ldr	r3, [r3, #4]
 80107d8:	68ba      	ldr	r2, [r7, #8]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d006      	beq.n	80107ec <recv_tcp+0x74>
 80107de:	4b22      	ldr	r3, [pc, #136]	; (8010868 <recv_tcp+0xf0>)
 80107e0:	f240 1235 	movw	r2, #309	; 0x135
 80107e4:	4925      	ldr	r1, [pc, #148]	; (801087c <recv_tcp+0x104>)
 80107e6:	4822      	ldr	r0, [pc, #136]	; (8010870 <recv_tcp+0xf8>)
 80107e8:	f00e ff6a 	bl	801f6c0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	3310      	adds	r3, #16
 80107f0:	4618      	mov	r0, r3
 80107f2:	f00d fd50 	bl	801e296 <sys_mbox_valid>
 80107f6:	4603      	mov	r3, r0
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d10d      	bne.n	8010818 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d008      	beq.n	8010814 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	891b      	ldrh	r3, [r3, #8]
 8010806:	4619      	mov	r1, r3
 8010808:	68b8      	ldr	r0, [r7, #8]
 801080a:	f004 fecb 	bl	80155a4 <tcp_recved>
      pbuf_free(p);
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f003 feee 	bl	80145f0 <pbuf_free>
    }
    return ERR_OK;
 8010814:	2300      	movs	r3, #0
 8010816:	e023      	b.n	8010860 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d005      	beq.n	801082a <recv_tcp+0xb2>
    msg = p;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	891b      	ldrh	r3, [r3, #8]
 8010826:	83fb      	strh	r3, [r7, #30]
 8010828:	e003      	b.n	8010832 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 801082a:	4b15      	ldr	r3, [pc, #84]	; (8010880 <recv_tcp+0x108>)
 801082c:	61bb      	str	r3, [r7, #24]
    len = 0;
 801082e:	2300      	movs	r3, #0
 8010830:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8010832:	697b      	ldr	r3, [r7, #20]
 8010834:	3310      	adds	r3, #16
 8010836:	69b9      	ldr	r1, [r7, #24]
 8010838:	4618      	mov	r0, r3
 801083a:	f00d fcb7 	bl	801e1ac <sys_mbox_trypost>
 801083e:	4603      	mov	r3, r0
 8010840:	2b00      	cmp	r3, #0
 8010842:	d002      	beq.n	801084a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8010844:	f04f 33ff 	mov.w	r3, #4294967295
 8010848:	e00a      	b.n	8010860 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801084e:	2b00      	cmp	r3, #0
 8010850:	d005      	beq.n	801085e <recv_tcp+0xe6>
 8010852:	697b      	ldr	r3, [r7, #20]
 8010854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010856:	8bfa      	ldrh	r2, [r7, #30]
 8010858:	2100      	movs	r1, #0
 801085a:	6978      	ldr	r0, [r7, #20]
 801085c:	4798      	blx	r3
  }

  return ERR_OK;
 801085e:	2300      	movs	r3, #0
}
 8010860:	4618      	mov	r0, r3
 8010862:	3720      	adds	r7, #32
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}
 8010868:	080231b4 	.word	0x080231b4
 801086c:	08023290 	.word	0x08023290
 8010870:	080231f8 	.word	0x080231f8
 8010874:	080232b4 	.word	0x080232b4
 8010878:	080232d4 	.word	0x080232d4
 801087c:	080232ec 	.word	0x080232ec
 8010880:	080266c2 	.word	0x080266c2

08010884 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b084      	sub	sp, #16
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
 801088c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d106      	bne.n	80108a6 <poll_tcp+0x22>
 8010898:	4b29      	ldr	r3, [pc, #164]	; (8010940 <poll_tcp+0xbc>)
 801089a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 801089e:	4929      	ldr	r1, [pc, #164]	; (8010944 <poll_tcp+0xc0>)
 80108a0:	4829      	ldr	r0, [pc, #164]	; (8010948 <poll_tcp+0xc4>)
 80108a2:	f00e ff0d 	bl	801f6c0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	785b      	ldrb	r3, [r3, #1]
 80108aa:	2b01      	cmp	r3, #1
 80108ac:	d104      	bne.n	80108b8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80108ae:	2101      	movs	r1, #1
 80108b0:	68f8      	ldr	r0, [r7, #12]
 80108b2:	f000 fe59 	bl	8011568 <lwip_netconn_do_writemore>
 80108b6:	e016      	b.n	80108e6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	785b      	ldrb	r3, [r3, #1]
 80108bc:	2b04      	cmp	r3, #4
 80108be:	d112      	bne.n	80108e6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	6a1b      	ldr	r3, [r3, #32]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d00a      	beq.n	80108de <poll_tcp+0x5a>
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	6a1b      	ldr	r3, [r3, #32]
 80108cc:	7a5b      	ldrb	r3, [r3, #9]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d005      	beq.n	80108de <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	6a1b      	ldr	r3, [r3, #32]
 80108d6:	7a5a      	ldrb	r2, [r3, #9]
 80108d8:	3a01      	subs	r2, #1
 80108da:	b2d2      	uxtb	r2, r2
 80108dc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80108de:	2101      	movs	r1, #1
 80108e0:	68f8      	ldr	r0, [r7, #12]
 80108e2:	f000 fb3b 	bl	8010f5c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	7f1b      	ldrb	r3, [r3, #28]
 80108ea:	f003 0310 	and.w	r3, r3, #16
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d021      	beq.n	8010936 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	685b      	ldr	r3, [r3, #4]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d01d      	beq.n	8010936 <poll_tcp+0xb2>
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	685b      	ldr	r3, [r3, #4]
 80108fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010902:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8010906:	d316      	bcc.n	8010936 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	685b      	ldr	r3, [r3, #4]
 801090c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010910:	2b04      	cmp	r3, #4
 8010912:	d810      	bhi.n	8010936 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	7f1b      	ldrb	r3, [r3, #28]
 8010918:	f023 0310 	bic.w	r3, r3, #16
 801091c:	b2da      	uxtb	r2, r3
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010926:	2b00      	cmp	r3, #0
 8010928:	d005      	beq.n	8010936 <poll_tcp+0xb2>
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801092e:	2200      	movs	r2, #0
 8010930:	2102      	movs	r1, #2
 8010932:	68f8      	ldr	r0, [r7, #12]
 8010934:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8010936:	2300      	movs	r3, #0
}
 8010938:	4618      	mov	r0, r3
 801093a:	3710      	adds	r7, #16
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}
 8010940:	080231b4 	.word	0x080231b4
 8010944:	0802330c 	.word	0x0802330c
 8010948:	080231f8 	.word	0x080231f8

0801094c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b086      	sub	sp, #24
 8010950:	af00      	add	r7, sp, #0
 8010952:	60f8      	str	r0, [r7, #12]
 8010954:	60b9      	str	r1, [r7, #8]
 8010956:	4613      	mov	r3, r2
 8010958:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d106      	bne.n	8010972 <sent_tcp+0x26>
 8010964:	4b20      	ldr	r3, [pc, #128]	; (80109e8 <sent_tcp+0x9c>)
 8010966:	f240 1293 	movw	r2, #403	; 0x193
 801096a:	4920      	ldr	r1, [pc, #128]	; (80109ec <sent_tcp+0xa0>)
 801096c:	4820      	ldr	r0, [pc, #128]	; (80109f0 <sent_tcp+0xa4>)
 801096e:	f00e fea7 	bl	801f6c0 <iprintf>

  if (conn) {
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d032      	beq.n	80109de <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	785b      	ldrb	r3, [r3, #1]
 801097c:	2b01      	cmp	r3, #1
 801097e:	d104      	bne.n	801098a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8010980:	2101      	movs	r1, #1
 8010982:	6978      	ldr	r0, [r7, #20]
 8010984:	f000 fdf0 	bl	8011568 <lwip_netconn_do_writemore>
 8010988:	e007      	b.n	801099a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 801098a:	697b      	ldr	r3, [r7, #20]
 801098c:	785b      	ldrb	r3, [r3, #1]
 801098e:	2b04      	cmp	r3, #4
 8010990:	d103      	bne.n	801099a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8010992:	2101      	movs	r1, #1
 8010994:	6978      	ldr	r0, [r7, #20]
 8010996:	f000 fae1 	bl	8010f5c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	685b      	ldr	r3, [r3, #4]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d01d      	beq.n	80109de <sent_tcp+0x92>
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	685b      	ldr	r3, [r3, #4]
 80109a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80109aa:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80109ae:	d316      	bcc.n	80109de <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	685b      	ldr	r3, [r3, #4]
 80109b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80109b8:	2b04      	cmp	r3, #4
 80109ba:	d810      	bhi.n	80109de <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80109bc:	697b      	ldr	r3, [r7, #20]
 80109be:	7f1b      	ldrb	r3, [r3, #28]
 80109c0:	f023 0310 	bic.w	r3, r3, #16
 80109c4:	b2da      	uxtb	r2, r3
 80109c6:	697b      	ldr	r3, [r7, #20]
 80109c8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d005      	beq.n	80109de <sent_tcp+0x92>
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109d6:	88fa      	ldrh	r2, [r7, #6]
 80109d8:	2102      	movs	r1, #2
 80109da:	6978      	ldr	r0, [r7, #20]
 80109dc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80109de:	2300      	movs	r3, #0
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3718      	adds	r7, #24
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}
 80109e8:	080231b4 	.word	0x080231b4
 80109ec:	0802330c 	.word	0x0802330c
 80109f0:	080231f8 	.word	0x080231f8

080109f4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b088      	sub	sp, #32
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
 80109fc:	460b      	mov	r3, r1
 80109fe:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8010a04:	69fb      	ldr	r3, [r7, #28]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d106      	bne.n	8010a18 <err_tcp+0x24>
 8010a0a:	4b5f      	ldr	r3, [pc, #380]	; (8010b88 <err_tcp+0x194>)
 8010a0c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8010a10:	495e      	ldr	r1, [pc, #376]	; (8010b8c <err_tcp+0x198>)
 8010a12:	485f      	ldr	r0, [pc, #380]	; (8010b90 <err_tcp+0x19c>)
 8010a14:	f00e fe54 	bl	801f6c0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8010a18:	f00d fd58 	bl	801e4cc <sys_arch_protect>
 8010a1c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8010a1e:	69fb      	ldr	r3, [r7, #28]
 8010a20:	2200      	movs	r2, #0
 8010a22:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8010a24:	69fb      	ldr	r3, [r7, #28]
 8010a26:	78fa      	ldrb	r2, [r7, #3]
 8010a28:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8010a2a:	69fb      	ldr	r3, [r7, #28]
 8010a2c:	7f1b      	ldrb	r3, [r3, #28]
 8010a2e:	f043 0301 	orr.w	r3, r3, #1
 8010a32:	b2da      	uxtb	r2, r3
 8010a34:	69fb      	ldr	r3, [r7, #28]
 8010a36:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8010a38:	69fb      	ldr	r3, [r7, #28]
 8010a3a:	785b      	ldrb	r3, [r3, #1]
 8010a3c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8010a3e:	69fb      	ldr	r3, [r7, #28]
 8010a40:	2200      	movs	r2, #0
 8010a42:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8010a44:	69b8      	ldr	r0, [r7, #24]
 8010a46:	f00d fd4f 	bl	801e4e8 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8010a4a:	69fb      	ldr	r3, [r7, #28]
 8010a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d005      	beq.n	8010a5e <err_tcp+0x6a>
 8010a52:	69fb      	ldr	r3, [r7, #28]
 8010a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a56:	2200      	movs	r2, #0
 8010a58:	2104      	movs	r1, #4
 8010a5a:	69f8      	ldr	r0, [r7, #28]
 8010a5c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010a5e:	69fb      	ldr	r3, [r7, #28]
 8010a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d005      	beq.n	8010a72 <err_tcp+0x7e>
 8010a66:	69fb      	ldr	r3, [r7, #28]
 8010a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	2100      	movs	r1, #0
 8010a6e:	69f8      	ldr	r0, [r7, #28]
 8010a70:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010a72:	69fb      	ldr	r3, [r7, #28]
 8010a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d005      	beq.n	8010a86 <err_tcp+0x92>
 8010a7a:	69fb      	ldr	r3, [r7, #28]
 8010a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a7e:	2200      	movs	r2, #0
 8010a80:	2102      	movs	r1, #2
 8010a82:	69f8      	ldr	r0, [r7, #28]
 8010a84:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8010a86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7ff fd86 	bl	801059c <lwip_netconn_err_to_msg>
 8010a90:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010a92:	69fb      	ldr	r3, [r7, #28]
 8010a94:	3310      	adds	r3, #16
 8010a96:	4618      	mov	r0, r3
 8010a98:	f00d fbfd 	bl	801e296 <sys_mbox_valid>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d005      	beq.n	8010aae <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8010aa2:	69fb      	ldr	r3, [r7, #28]
 8010aa4:	3310      	adds	r3, #16
 8010aa6:	6939      	ldr	r1, [r7, #16]
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f00d fb7f 	bl	801e1ac <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8010aae:	69fb      	ldr	r3, [r7, #28]
 8010ab0:	3314      	adds	r3, #20
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f00d fbef 	bl	801e296 <sys_mbox_valid>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d005      	beq.n	8010aca <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8010abe:	69fb      	ldr	r3, [r7, #28]
 8010ac0:	3314      	adds	r3, #20
 8010ac2:	6939      	ldr	r1, [r7, #16]
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f00d fb71 	bl	801e1ac <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8010aca:	7dfb      	ldrb	r3, [r7, #23]
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	d005      	beq.n	8010adc <err_tcp+0xe8>
 8010ad0:	7dfb      	ldrb	r3, [r7, #23]
 8010ad2:	2b04      	cmp	r3, #4
 8010ad4:	d002      	beq.n	8010adc <err_tcp+0xe8>
 8010ad6:	7dfb      	ldrb	r3, [r7, #23]
 8010ad8:	2b03      	cmp	r3, #3
 8010ada:	d143      	bne.n	8010b64 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8010adc:	69fb      	ldr	r3, [r7, #28]
 8010ade:	7f1b      	ldrb	r3, [r3, #28]
 8010ae0:	f003 0304 	and.w	r3, r3, #4
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	bf14      	ite	ne
 8010ae8:	2301      	movne	r3, #1
 8010aea:	2300      	moveq	r3, #0
 8010aec:	b2db      	uxtb	r3, r3
 8010aee:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8010af0:	69fb      	ldr	r3, [r7, #28]
 8010af2:	7f1b      	ldrb	r3, [r3, #28]
 8010af4:	f023 0304 	bic.w	r3, r3, #4
 8010af8:	b2da      	uxtb	r2, r3
 8010afa:	69fb      	ldr	r3, [r7, #28]
 8010afc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d13b      	bne.n	8010b7c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010b04:	69fb      	ldr	r3, [r7, #28]
 8010b06:	6a1b      	ldr	r3, [r3, #32]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d106      	bne.n	8010b1a <err_tcp+0x126>
 8010b0c:	4b1e      	ldr	r3, [pc, #120]	; (8010b88 <err_tcp+0x194>)
 8010b0e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010b12:	4920      	ldr	r1, [pc, #128]	; (8010b94 <err_tcp+0x1a0>)
 8010b14:	481e      	ldr	r0, [pc, #120]	; (8010b90 <err_tcp+0x19c>)
 8010b16:	f00e fdd3 	bl	801f6c0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8010b1a:	7dfb      	ldrb	r3, [r7, #23]
 8010b1c:	2b04      	cmp	r3, #4
 8010b1e:	d104      	bne.n	8010b2a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8010b20:	69fb      	ldr	r3, [r7, #28]
 8010b22:	6a1b      	ldr	r3, [r3, #32]
 8010b24:	2200      	movs	r2, #0
 8010b26:	711a      	strb	r2, [r3, #4]
 8010b28:	e003      	b.n	8010b32 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8010b2a:	69fb      	ldr	r3, [r7, #28]
 8010b2c:	6a1b      	ldr	r3, [r3, #32]
 8010b2e:	78fa      	ldrb	r2, [r7, #3]
 8010b30:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010b32:	69fb      	ldr	r3, [r7, #28]
 8010b34:	6a1b      	ldr	r3, [r3, #32]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	330c      	adds	r3, #12
 8010b3a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8010b3c:	68b8      	ldr	r0, [r7, #8]
 8010b3e:	f00d fc3b 	bl	801e3b8 <sys_sem_valid>
 8010b42:	4603      	mov	r3, r0
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d106      	bne.n	8010b56 <err_tcp+0x162>
 8010b48:	4b0f      	ldr	r3, [pc, #60]	; (8010b88 <err_tcp+0x194>)
 8010b4a:	f240 12ef 	movw	r2, #495	; 0x1ef
 8010b4e:	4912      	ldr	r1, [pc, #72]	; (8010b98 <err_tcp+0x1a4>)
 8010b50:	480f      	ldr	r0, [pc, #60]	; (8010b90 <err_tcp+0x19c>)
 8010b52:	f00e fdb5 	bl	801f6c0 <iprintf>
      conn->current_msg = NULL;
 8010b56:	69fb      	ldr	r3, [r7, #28]
 8010b58:	2200      	movs	r2, #0
 8010b5a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8010b5c:	68b8      	ldr	r0, [r7, #8]
 8010b5e:	f00d fc11 	bl	801e384 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8010b62:	e00b      	b.n	8010b7c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8010b64:	69fb      	ldr	r3, [r7, #28]
 8010b66:	6a1b      	ldr	r3, [r3, #32]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d008      	beq.n	8010b7e <err_tcp+0x18a>
 8010b6c:	4b06      	ldr	r3, [pc, #24]	; (8010b88 <err_tcp+0x194>)
 8010b6e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8010b72:	490a      	ldr	r1, [pc, #40]	; (8010b9c <err_tcp+0x1a8>)
 8010b74:	4806      	ldr	r0, [pc, #24]	; (8010b90 <err_tcp+0x19c>)
 8010b76:	f00e fda3 	bl	801f6c0 <iprintf>
  }
}
 8010b7a:	e000      	b.n	8010b7e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8010b7c:	bf00      	nop
}
 8010b7e:	bf00      	nop
 8010b80:	3720      	adds	r7, #32
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}
 8010b86:	bf00      	nop
 8010b88:	080231b4 	.word	0x080231b4
 8010b8c:	0802330c 	.word	0x0802330c
 8010b90:	080231f8 	.word	0x080231f8
 8010b94:	0802331c 	.word	0x0802331c
 8010b98:	08023338 	.word	0x08023338
 8010b9c:	08023354 	.word	0x08023354

08010ba0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b084      	sub	sp, #16
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	685b      	ldr	r3, [r3, #4]
 8010bac:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8010bae:	6879      	ldr	r1, [r7, #4]
 8010bb0:	68f8      	ldr	r0, [r7, #12]
 8010bb2:	f005 fbdb 	bl	801636c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8010bb6:	490a      	ldr	r1, [pc, #40]	; (8010be0 <setup_tcp+0x40>)
 8010bb8:	68f8      	ldr	r0, [r7, #12]
 8010bba:	f005 fbe9 	bl	8016390 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8010bbe:	4909      	ldr	r1, [pc, #36]	; (8010be4 <setup_tcp+0x44>)
 8010bc0:	68f8      	ldr	r0, [r7, #12]
 8010bc2:	f005 fc07 	bl	80163d4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8010bc6:	2202      	movs	r2, #2
 8010bc8:	4907      	ldr	r1, [pc, #28]	; (8010be8 <setup_tcp+0x48>)
 8010bca:	68f8      	ldr	r0, [r7, #12]
 8010bcc:	f005 fc5e 	bl	801648c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8010bd0:	4906      	ldr	r1, [pc, #24]	; (8010bec <setup_tcp+0x4c>)
 8010bd2:	68f8      	ldr	r0, [r7, #12]
 8010bd4:	f005 fc20 	bl	8016418 <tcp_err>
}
 8010bd8:	bf00      	nop
 8010bda:	3710      	adds	r7, #16
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}
 8010be0:	08010779 	.word	0x08010779
 8010be4:	0801094d 	.word	0x0801094d
 8010be8:	08010885 	.word	0x08010885
 8010bec:	080109f5 	.word	0x080109f5

08010bf0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8010bf0:	b590      	push	{r4, r7, lr}
 8010bf2:	b085      	sub	sp, #20
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	685b      	ldr	r3, [r3, #4]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d006      	beq.n	8010c14 <pcb_new+0x24>
 8010c06:	4b2b      	ldr	r3, [pc, #172]	; (8010cb4 <pcb_new+0xc4>)
 8010c08:	f240 2265 	movw	r2, #613	; 0x265
 8010c0c:	492a      	ldr	r1, [pc, #168]	; (8010cb8 <pcb_new+0xc8>)
 8010c0e:	482b      	ldr	r0, [pc, #172]	; (8010cbc <pcb_new+0xcc>)
 8010c10:	f00e fd56 	bl	801f6c0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	781b      	ldrb	r3, [r3, #0]
 8010c1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010c1e:	2b10      	cmp	r3, #16
 8010c20:	d022      	beq.n	8010c68 <pcb_new+0x78>
 8010c22:	2b20      	cmp	r3, #32
 8010c24:	d133      	bne.n	8010c8e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681c      	ldr	r4, [r3, #0]
 8010c2a:	7bfb      	ldrb	r3, [r7, #15]
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f00a fe62 	bl	801b8f6 <udp_new_ip_type>
 8010c32:	4603      	mov	r3, r0
 8010c34:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	685b      	ldr	r3, [r3, #4]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d02a      	beq.n	8010c96 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	781b      	ldrb	r3, [r3, #0]
 8010c46:	2b22      	cmp	r3, #34	; 0x22
 8010c48:	d104      	bne.n	8010c54 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	685b      	ldr	r3, [r3, #4]
 8010c50:	2201      	movs	r2, #1
 8010c52:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	6858      	ldr	r0, [r3, #4]
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	461a      	mov	r2, r3
 8010c60:	4917      	ldr	r1, [pc, #92]	; (8010cc0 <pcb_new+0xd0>)
 8010c62:	f00a fdcf 	bl	801b804 <udp_recv>
      }
      break;
 8010c66:	e016      	b.n	8010c96 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	681c      	ldr	r4, [r3, #0]
 8010c6c:	7bfb      	ldrb	r3, [r7, #15]
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f005 fb6e 	bl	8016350 <tcp_new_ip_type>
 8010c74:	4603      	mov	r3, r0
 8010c76:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	685b      	ldr	r3, [r3, #4]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d00b      	beq.n	8010c9a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	4618      	mov	r0, r3
 8010c88:	f7ff ff8a 	bl	8010ba0 <setup_tcp>
      }
      break;
 8010c8c:	e005      	b.n	8010c9a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	22fa      	movs	r2, #250	; 0xfa
 8010c92:	711a      	strb	r2, [r3, #4]
      return;
 8010c94:	e00a      	b.n	8010cac <pcb_new+0xbc>
      break;
 8010c96:	bf00      	nop
 8010c98:	e000      	b.n	8010c9c <pcb_new+0xac>
      break;
 8010c9a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	685b      	ldr	r3, [r3, #4]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d102      	bne.n	8010cac <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	22ff      	movs	r2, #255	; 0xff
 8010caa:	711a      	strb	r2, [r3, #4]
  }
}
 8010cac:	3714      	adds	r7, #20
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd90      	pop	{r4, r7, pc}
 8010cb2:	bf00      	nop
 8010cb4:	080231b4 	.word	0x080231b4
 8010cb8:	08023398 	.word	0x08023398
 8010cbc:	080231f8 	.word	0x080231f8
 8010cc0:	0801067d 	.word	0x0801067d

08010cc4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b084      	sub	sp, #16
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	685b      	ldr	r3, [r3, #4]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d102      	bne.n	8010ce6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8010ce0:	68f8      	ldr	r0, [r7, #12]
 8010ce2:	f7ff ff85 	bl	8010bf0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8010ce6:	bf00      	nop
 8010ce8:	3710      	adds	r7, #16
 8010cea:	46bd      	mov	sp, r7
 8010cec:	bd80      	pop	{r7, pc}
	...

08010cf0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b086      	sub	sp, #24
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	6039      	str	r1, [r7, #0]
 8010cfa:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8010d00:	2007      	movs	r0, #7
 8010d02:	f002 fda5 	bl	8013850 <memp_malloc>
 8010d06:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d101      	bne.n	8010d12 <netconn_alloc+0x22>
    return NULL;
 8010d0e:	2300      	movs	r3, #0
 8010d10:	e052      	b.n	8010db8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	2200      	movs	r2, #0
 8010d16:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	79fa      	ldrb	r2, [r7, #7]
 8010d1c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	2200      	movs	r2, #0
 8010d22:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8010d24:	79fb      	ldrb	r3, [r7, #7]
 8010d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010d2a:	2b10      	cmp	r3, #16
 8010d2c:	d004      	beq.n	8010d38 <netconn_alloc+0x48>
 8010d2e:	2b20      	cmp	r3, #32
 8010d30:	d105      	bne.n	8010d3e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8010d32:	2306      	movs	r3, #6
 8010d34:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8010d36:	e00a      	b.n	8010d4e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8010d38:	2306      	movs	r3, #6
 8010d3a:	617b      	str	r3, [r7, #20]
      break;
 8010d3c:	e007      	b.n	8010d4e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8010d3e:	4b20      	ldr	r3, [pc, #128]	; (8010dc0 <netconn_alloc+0xd0>)
 8010d40:	f240 22e5 	movw	r2, #741	; 0x2e5
 8010d44:	491f      	ldr	r1, [pc, #124]	; (8010dc4 <netconn_alloc+0xd4>)
 8010d46:	4820      	ldr	r0, [pc, #128]	; (8010dc8 <netconn_alloc+0xd8>)
 8010d48:	f00e fcba 	bl	801f6c0 <iprintf>
      goto free_and_return;
 8010d4c:	e02f      	b.n	8010dae <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	3310      	adds	r3, #16
 8010d52:	6979      	ldr	r1, [r7, #20]
 8010d54:	4618      	mov	r0, r3
 8010d56:	f00d f9f5 	bl	801e144 <sys_mbox_new>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d125      	bne.n	8010dac <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	330c      	adds	r3, #12
 8010d64:	2100      	movs	r1, #0
 8010d66:	4618      	mov	r0, r3
 8010d68:	f00d fab3 	bl	801e2d2 <sys_sem_new>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d005      	beq.n	8010d7e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	3310      	adds	r3, #16
 8010d76:	4618      	mov	r0, r3
 8010d78:	f00d fa06 	bl	801e188 <sys_mbox_free>
    goto free_and_return;
 8010d7c:	e017      	b.n	8010dae <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	3314      	adds	r3, #20
 8010d82:	4618      	mov	r0, r3
 8010d84:	f00d fa98 	bl	801e2b8 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	f04f 32ff 	mov.w	r2, #4294967295
 8010d94:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	683a      	ldr	r2, [r7, #0]
 8010d9a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	2200      	movs	r2, #0
 8010da0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	7cfa      	ldrb	r2, [r7, #19]
 8010da6:	771a      	strb	r2, [r3, #28]
  return conn;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	e005      	b.n	8010db8 <netconn_alloc+0xc8>
    goto free_and_return;
 8010dac:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8010dae:	68f9      	ldr	r1, [r7, #12]
 8010db0:	2007      	movs	r0, #7
 8010db2:	f002 fd9f 	bl	80138f4 <memp_free>
  return NULL;
 8010db6:	2300      	movs	r3, #0
}
 8010db8:	4618      	mov	r0, r3
 8010dba:	3718      	adds	r7, #24
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}
 8010dc0:	080231b4 	.word	0x080231b4
 8010dc4:	080233b8 	.word	0x080233b8
 8010dc8:	080231f8 	.word	0x080231f8

08010dcc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b082      	sub	sp, #8
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d006      	beq.n	8010dea <netconn_free+0x1e>
 8010ddc:	4b1b      	ldr	r3, [pc, #108]	; (8010e4c <netconn_free+0x80>)
 8010dde:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010de2:	491b      	ldr	r1, [pc, #108]	; (8010e50 <netconn_free+0x84>)
 8010de4:	481b      	ldr	r0, [pc, #108]	; (8010e54 <netconn_free+0x88>)
 8010de6:	f00e fc6b 	bl	801f6c0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	3310      	adds	r3, #16
 8010dee:	4618      	mov	r0, r3
 8010df0:	f00d fa51 	bl	801e296 <sys_mbox_valid>
 8010df4:	4603      	mov	r3, r0
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d006      	beq.n	8010e08 <netconn_free+0x3c>
 8010dfa:	4b14      	ldr	r3, [pc, #80]	; (8010e4c <netconn_free+0x80>)
 8010dfc:	f240 3223 	movw	r2, #803	; 0x323
 8010e00:	4915      	ldr	r1, [pc, #84]	; (8010e58 <netconn_free+0x8c>)
 8010e02:	4814      	ldr	r0, [pc, #80]	; (8010e54 <netconn_free+0x88>)
 8010e04:	f00e fc5c 	bl	801f6c0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	3314      	adds	r3, #20
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f00d fa42 	bl	801e296 <sys_mbox_valid>
 8010e12:	4603      	mov	r3, r0
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d006      	beq.n	8010e26 <netconn_free+0x5a>
 8010e18:	4b0c      	ldr	r3, [pc, #48]	; (8010e4c <netconn_free+0x80>)
 8010e1a:	f240 3226 	movw	r2, #806	; 0x326
 8010e1e:	490f      	ldr	r1, [pc, #60]	; (8010e5c <netconn_free+0x90>)
 8010e20:	480c      	ldr	r0, [pc, #48]	; (8010e54 <netconn_free+0x88>)
 8010e22:	f00e fc4d 	bl	801f6c0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	330c      	adds	r3, #12
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f00d fab7 	bl	801e39e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	330c      	adds	r3, #12
 8010e34:	4618      	mov	r0, r3
 8010e36:	f00d fad0 	bl	801e3da <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8010e3a:	6879      	ldr	r1, [r7, #4]
 8010e3c:	2007      	movs	r0, #7
 8010e3e:	f002 fd59 	bl	80138f4 <memp_free>
}
 8010e42:	bf00      	nop
 8010e44:	3708      	adds	r7, #8
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}
 8010e4a:	bf00      	nop
 8010e4c:	080231b4 	.word	0x080231b4
 8010e50:	080233e0 	.word	0x080233e0
 8010e54:	080231f8 	.word	0x080231f8
 8010e58:	08023410 	.word	0x08023410
 8010e5c:	0802344c 	.word	0x0802344c

08010e60 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b086      	sub	sp, #24
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	3310      	adds	r3, #16
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f00d fa12 	bl	801e296 <sys_mbox_valid>
 8010e72:	4603      	mov	r3, r0
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d02f      	beq.n	8010ed8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8010e78:	e018      	b.n	8010eac <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	781b      	ldrb	r3, [r3, #0]
 8010e7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010e82:	2b10      	cmp	r3, #16
 8010e84:	d10e      	bne.n	8010ea4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8010e86:	693b      	ldr	r3, [r7, #16]
 8010e88:	f107 020f 	add.w	r2, r7, #15
 8010e8c:	4611      	mov	r1, r2
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7ff fbba 	bl	8010608 <lwip_netconn_is_err_msg>
 8010e94:	4603      	mov	r3, r0
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d108      	bne.n	8010eac <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f003 fba7 	bl	80145f0 <pbuf_free>
 8010ea2:	e003      	b.n	8010eac <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8010ea4:	693b      	ldr	r3, [r7, #16]
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f000 fdb6 	bl	8011a18 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	3310      	adds	r3, #16
 8010eb0:	f107 0210 	add.w	r2, r7, #16
 8010eb4:	4611      	mov	r1, r2
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f00d f9d1 	bl	801e25e <sys_arch_mbox_tryfetch>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ec2:	d1da      	bne.n	8010e7a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	3310      	adds	r3, #16
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f00d f95d 	bl	801e188 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	3310      	adds	r3, #16
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f00d f9f0 	bl	801e2b8 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	3314      	adds	r3, #20
 8010edc:	4618      	mov	r0, r3
 8010ede:	f00d f9da 	bl	801e296 <sys_mbox_valid>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d034      	beq.n	8010f52 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8010ee8:	e01d      	b.n	8010f26 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8010eea:	693b      	ldr	r3, [r7, #16]
 8010eec:	f107 020e 	add.w	r2, r7, #14
 8010ef0:	4611      	mov	r1, r2
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f7ff fb88 	bl	8010608 <lwip_netconn_is_err_msg>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d113      	bne.n	8010f26 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8010f02:	6978      	ldr	r0, [r7, #20]
 8010f04:	f7ff ffac 	bl	8010e60 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	685b      	ldr	r3, [r3, #4]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d007      	beq.n	8010f20 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	685b      	ldr	r3, [r3, #4]
 8010f14:	4618      	mov	r0, r3
 8010f16:	f004 f96b 	bl	80151f0 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8010f20:	6978      	ldr	r0, [r7, #20]
 8010f22:	f7ff ff53 	bl	8010dcc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	3314      	adds	r3, #20
 8010f2a:	f107 0210 	add.w	r2, r7, #16
 8010f2e:	4611      	mov	r1, r2
 8010f30:	4618      	mov	r0, r3
 8010f32:	f00d f994 	bl	801e25e <sys_arch_mbox_tryfetch>
 8010f36:	4603      	mov	r3, r0
 8010f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f3c:	d1d5      	bne.n	8010eea <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	3314      	adds	r3, #20
 8010f42:	4618      	mov	r0, r3
 8010f44:	f00d f920 	bl	801e188 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	3314      	adds	r3, #20
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f00d f9b3 	bl	801e2b8 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8010f52:	bf00      	nop
 8010f54:	3718      	adds	r7, #24
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}
	...

08010f5c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b086      	sub	sp, #24
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
 8010f64:	460b      	mov	r3, r1
 8010f66:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8010f68:	2300      	movs	r3, #0
 8010f6a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d106      	bne.n	8010f80 <lwip_netconn_do_close_internal+0x24>
 8010f72:	4ba1      	ldr	r3, [pc, #644]	; (80111f8 <lwip_netconn_do_close_internal+0x29c>)
 8010f74:	f240 32a2 	movw	r2, #930	; 0x3a2
 8010f78:	49a0      	ldr	r1, [pc, #640]	; (80111fc <lwip_netconn_do_close_internal+0x2a0>)
 8010f7a:	48a1      	ldr	r0, [pc, #644]	; (8011200 <lwip_netconn_do_close_internal+0x2a4>)
 8010f7c:	f00e fba0 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	781b      	ldrb	r3, [r3, #0]
 8010f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010f88:	2b10      	cmp	r3, #16
 8010f8a:	d006      	beq.n	8010f9a <lwip_netconn_do_close_internal+0x3e>
 8010f8c:	4b9a      	ldr	r3, [pc, #616]	; (80111f8 <lwip_netconn_do_close_internal+0x29c>)
 8010f8e:	f240 32a3 	movw	r2, #931	; 0x3a3
 8010f92:	499c      	ldr	r1, [pc, #624]	; (8011204 <lwip_netconn_do_close_internal+0x2a8>)
 8010f94:	489a      	ldr	r0, [pc, #616]	; (8011200 <lwip_netconn_do_close_internal+0x2a4>)
 8010f96:	f00e fb93 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	785b      	ldrb	r3, [r3, #1]
 8010f9e:	2b04      	cmp	r3, #4
 8010fa0:	d006      	beq.n	8010fb0 <lwip_netconn_do_close_internal+0x54>
 8010fa2:	4b95      	ldr	r3, [pc, #596]	; (80111f8 <lwip_netconn_do_close_internal+0x29c>)
 8010fa4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8010fa8:	4997      	ldr	r1, [pc, #604]	; (8011208 <lwip_netconn_do_close_internal+0x2ac>)
 8010faa:	4895      	ldr	r0, [pc, #596]	; (8011200 <lwip_netconn_do_close_internal+0x2a4>)
 8010fac:	f00e fb88 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	685b      	ldr	r3, [r3, #4]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d106      	bne.n	8010fc6 <lwip_netconn_do_close_internal+0x6a>
 8010fb8:	4b8f      	ldr	r3, [pc, #572]	; (80111f8 <lwip_netconn_do_close_internal+0x29c>)
 8010fba:	f240 32a5 	movw	r2, #933	; 0x3a5
 8010fbe:	4993      	ldr	r1, [pc, #588]	; (801120c <lwip_netconn_do_close_internal+0x2b0>)
 8010fc0:	488f      	ldr	r0, [pc, #572]	; (8011200 <lwip_netconn_do_close_internal+0x2a4>)
 8010fc2:	f00e fb7d 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6a1b      	ldr	r3, [r3, #32]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d106      	bne.n	8010fdc <lwip_netconn_do_close_internal+0x80>
 8010fce:	4b8a      	ldr	r3, [pc, #552]	; (80111f8 <lwip_netconn_do_close_internal+0x29c>)
 8010fd0:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010fd4:	498e      	ldr	r1, [pc, #568]	; (8011210 <lwip_netconn_do_close_internal+0x2b4>)
 8010fd6:	488a      	ldr	r0, [pc, #552]	; (8011200 <lwip_netconn_do_close_internal+0x2a4>)
 8010fd8:	f00e fb72 	bl	801f6c0 <iprintf>

  tpcb = conn->pcb.tcp;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	685b      	ldr	r3, [r3, #4]
 8010fe0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	6a1b      	ldr	r3, [r3, #32]
 8010fe6:	7a1b      	ldrb	r3, [r3, #8]
 8010fe8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8010fea:	7bfb      	ldrb	r3, [r7, #15]
 8010fec:	f003 0301 	and.w	r3, r3, #1
 8010ff0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8010ff2:	7bfb      	ldrb	r3, [r7, #15]
 8010ff4:	f003 0302 	and.w	r3, r3, #2
 8010ff8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8010ffa:	7bfb      	ldrb	r3, [r7, #15]
 8010ffc:	2b03      	cmp	r3, #3
 8010ffe:	d102      	bne.n	8011006 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8011000:	2301      	movs	r3, #1
 8011002:	75bb      	strb	r3, [r7, #22]
 8011004:	e01f      	b.n	8011046 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8011006:	7bbb      	ldrb	r3, [r7, #14]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d00e      	beq.n	801102a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 801100c:	693b      	ldr	r3, [r7, #16]
 801100e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8011010:	2b05      	cmp	r3, #5
 8011012:	d007      	beq.n	8011024 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8011018:	2b06      	cmp	r3, #6
 801101a:	d003      	beq.n	8011024 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 801101c:	693b      	ldr	r3, [r7, #16]
 801101e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8011020:	2b08      	cmp	r3, #8
 8011022:	d102      	bne.n	801102a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8011024:	2301      	movs	r3, #1
 8011026:	75bb      	strb	r3, [r7, #22]
 8011028:	e00d      	b.n	8011046 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 801102a:	7b7b      	ldrb	r3, [r7, #13]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d008      	beq.n	8011042 <lwip_netconn_do_close_internal+0xe6>
 8011030:	693b      	ldr	r3, [r7, #16]
 8011032:	8b5b      	ldrh	r3, [r3, #26]
 8011034:	f003 0310 	and.w	r3, r3, #16
 8011038:	2b00      	cmp	r3, #0
 801103a:	d002      	beq.n	8011042 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 801103c:	2301      	movs	r3, #1
 801103e:	75bb      	strb	r3, [r7, #22]
 8011040:	e001      	b.n	8011046 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8011042:	2300      	movs	r3, #0
 8011044:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8011046:	7dbb      	ldrb	r3, [r7, #22]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d003      	beq.n	8011054 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 801104c:	2100      	movs	r1, #0
 801104e:	6938      	ldr	r0, [r7, #16]
 8011050:	f005 f98c 	bl	801636c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	7d1b      	ldrb	r3, [r3, #20]
 8011058:	2b01      	cmp	r3, #1
 801105a:	d104      	bne.n	8011066 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 801105c:	2100      	movs	r1, #0
 801105e:	6938      	ldr	r0, [r7, #16]
 8011060:	f005 f9fc 	bl	801645c <tcp_accept>
 8011064:	e01d      	b.n	80110a2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8011066:	7bbb      	ldrb	r3, [r7, #14]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d007      	beq.n	801107c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 801106c:	2100      	movs	r1, #0
 801106e:	6938      	ldr	r0, [r7, #16]
 8011070:	f005 f98e 	bl	8016390 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8011074:	2100      	movs	r1, #0
 8011076:	6938      	ldr	r0, [r7, #16]
 8011078:	f005 f9f0 	bl	801645c <tcp_accept>
    }
    if (shut_tx) {
 801107c:	7b7b      	ldrb	r3, [r7, #13]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d003      	beq.n	801108a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8011082:	2100      	movs	r1, #0
 8011084:	6938      	ldr	r0, [r7, #16]
 8011086:	f005 f9a5 	bl	80163d4 <tcp_sent>
    }
    if (shut_close) {
 801108a:	7dbb      	ldrb	r3, [r7, #22]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d008      	beq.n	80110a2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8011090:	2200      	movs	r2, #0
 8011092:	2100      	movs	r1, #0
 8011094:	6938      	ldr	r0, [r7, #16]
 8011096:	f005 f9f9 	bl	801648c <tcp_poll>
      tcp_err(tpcb, NULL);
 801109a:	2100      	movs	r1, #0
 801109c:	6938      	ldr	r0, [r7, #16]
 801109e:	f005 f9bb 	bl	8016418 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80110a2:	7dbb      	ldrb	r3, [r7, #22]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d005      	beq.n	80110b4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80110a8:	6938      	ldr	r0, [r7, #16]
 80110aa:	f003 ff5b 	bl	8014f64 <tcp_close>
 80110ae:	4603      	mov	r3, r0
 80110b0:	75fb      	strb	r3, [r7, #23]
 80110b2:	e007      	b.n	80110c4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80110b4:	7bbb      	ldrb	r3, [r7, #14]
 80110b6:	7b7a      	ldrb	r2, [r7, #13]
 80110b8:	4619      	mov	r1, r3
 80110ba:	6938      	ldr	r0, [r7, #16]
 80110bc:	f003 ff7e 	bl	8014fbc <tcp_shutdown>
 80110c0:	4603      	mov	r3, r0
 80110c2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80110c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d102      	bne.n	80110d2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80110cc:	2301      	movs	r3, #1
 80110ce:	757b      	strb	r3, [r7, #21]
 80110d0:	e016      	b.n	8011100 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80110d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80110d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110da:	d10f      	bne.n	80110fc <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	6a1b      	ldr	r3, [r3, #32]
 80110e0:	7a5b      	ldrb	r3, [r3, #9]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d10c      	bne.n	8011100 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80110e6:	2301      	movs	r3, #1
 80110e8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80110ea:	7dbb      	ldrb	r3, [r7, #22]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d007      	beq.n	8011100 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80110f0:	6938      	ldr	r0, [r7, #16]
 80110f2:	f004 f87d 	bl	80151f0 <tcp_abort>
          err = ERR_OK;
 80110f6:	2300      	movs	r3, #0
 80110f8:	75fb      	strb	r3, [r7, #23]
 80110fa:	e001      	b.n	8011100 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80110fc:	2301      	movs	r3, #1
 80110fe:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8011100:	7d7b      	ldrb	r3, [r7, #21]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d044      	beq.n	8011190 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	6a1b      	ldr	r3, [r3, #32]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	330c      	adds	r3, #12
 801110e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	6a1b      	ldr	r3, [r3, #32]
 8011114:	7dfa      	ldrb	r2, [r7, #23]
 8011116:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2200      	movs	r2, #0
 801111c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2200      	movs	r2, #0
 8011122:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8011124:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d129      	bne.n	8011180 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 801112c:	7dbb      	ldrb	r3, [r7, #22]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d00c      	beq.n	801114c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2200      	movs	r2, #0
 8011136:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801113c:	2b00      	cmp	r3, #0
 801113e:	d005      	beq.n	801114c <lwip_netconn_do_close_internal+0x1f0>
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011144:	2200      	movs	r2, #0
 8011146:	2104      	movs	r1, #4
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	4798      	blx	r3
      }
      if (shut_rx) {
 801114c:	7bbb      	ldrb	r3, [r7, #14]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d009      	beq.n	8011166 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011156:	2b00      	cmp	r3, #0
 8011158:	d005      	beq.n	8011166 <lwip_netconn_do_close_internal+0x20a>
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801115e:	2200      	movs	r2, #0
 8011160:	2100      	movs	r1, #0
 8011162:	6878      	ldr	r0, [r7, #4]
 8011164:	4798      	blx	r3
      }
      if (shut_tx) {
 8011166:	7b7b      	ldrb	r3, [r7, #13]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d009      	beq.n	8011180 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011170:	2b00      	cmp	r3, #0
 8011172:	d005      	beq.n	8011180 <lwip_netconn_do_close_internal+0x224>
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011178:	2200      	movs	r2, #0
 801117a:	2102      	movs	r1, #2
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8011180:	78fb      	ldrb	r3, [r7, #3]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d002      	beq.n	801118c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8011186:	68b8      	ldr	r0, [r7, #8]
 8011188:	f00d f8fc 	bl	801e384 <sys_sem_signal>
    }
    return ERR_OK;
 801118c:	2300      	movs	r3, #0
 801118e:	e02e      	b.n	80111ee <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8011190:	7d7b      	ldrb	r3, [r7, #21]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d11e      	bne.n	80111d4 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8011196:	693b      	ldr	r3, [r7, #16]
 8011198:	7d1b      	ldrb	r3, [r3, #20]
 801119a:	2b01      	cmp	r3, #1
 801119c:	d106      	bne.n	80111ac <lwip_netconn_do_close_internal+0x250>
 801119e:	4b16      	ldr	r3, [pc, #88]	; (80111f8 <lwip_netconn_do_close_internal+0x29c>)
 80111a0:	f240 4241 	movw	r2, #1089	; 0x441
 80111a4:	491b      	ldr	r1, [pc, #108]	; (8011214 <lwip_netconn_do_close_internal+0x2b8>)
 80111a6:	4816      	ldr	r0, [pc, #88]	; (8011200 <lwip_netconn_do_close_internal+0x2a4>)
 80111a8:	f00e fa8a 	bl	801f6c0 <iprintf>
    if (shut_tx) {
 80111ac:	7b7b      	ldrb	r3, [r7, #13]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d003      	beq.n	80111ba <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 80111b2:	4919      	ldr	r1, [pc, #100]	; (8011218 <lwip_netconn_do_close_internal+0x2bc>)
 80111b4:	6938      	ldr	r0, [r7, #16]
 80111b6:	f005 f90d 	bl	80163d4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80111ba:	2201      	movs	r2, #1
 80111bc:	4917      	ldr	r1, [pc, #92]	; (801121c <lwip_netconn_do_close_internal+0x2c0>)
 80111be:	6938      	ldr	r0, [r7, #16]
 80111c0:	f005 f964 	bl	801648c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80111c4:	4916      	ldr	r1, [pc, #88]	; (8011220 <lwip_netconn_do_close_internal+0x2c4>)
 80111c6:	6938      	ldr	r0, [r7, #16]
 80111c8:	f005 f926 	bl	8016418 <tcp_err>
    tcp_arg(tpcb, conn);
 80111cc:	6879      	ldr	r1, [r7, #4]
 80111ce:	6938      	ldr	r0, [r7, #16]
 80111d0:	f005 f8cc 	bl	801636c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80111d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d106      	bne.n	80111ea <lwip_netconn_do_close_internal+0x28e>
 80111dc:	4b06      	ldr	r3, [pc, #24]	; (80111f8 <lwip_netconn_do_close_internal+0x29c>)
 80111de:	f240 424d 	movw	r2, #1101	; 0x44d
 80111e2:	4910      	ldr	r1, [pc, #64]	; (8011224 <lwip_netconn_do_close_internal+0x2c8>)
 80111e4:	4806      	ldr	r0, [pc, #24]	; (8011200 <lwip_netconn_do_close_internal+0x2a4>)
 80111e6:	f00e fa6b 	bl	801f6c0 <iprintf>
  return err;
 80111ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	3718      	adds	r7, #24
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}
 80111f6:	bf00      	nop
 80111f8:	080231b4 	.word	0x080231b4
 80111fc:	08023488 	.word	0x08023488
 8011200:	080231f8 	.word	0x080231f8
 8011204:	08023498 	.word	0x08023498
 8011208:	080234b8 	.word	0x080234b8
 801120c:	080234dc 	.word	0x080234dc
 8011210:	0802331c 	.word	0x0802331c
 8011214:	080234f0 	.word	0x080234f0
 8011218:	0801094d 	.word	0x0801094d
 801121c:	08010885 	.word	0x08010885
 8011220:	080109f5 	.word	0x080109f5
 8011224:	08023514 	.word	0x08023514

08011228 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b084      	sub	sp, #16
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	785b      	ldrb	r3, [r3, #1]
 801123a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 801123c:	7afb      	ldrb	r3, [r7, #11]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d00d      	beq.n	801125e <lwip_netconn_do_delconn+0x36>
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801124c:	2b10      	cmp	r3, #16
 801124e:	d006      	beq.n	801125e <lwip_netconn_do_delconn+0x36>
 8011250:	4b60      	ldr	r3, [pc, #384]	; (80113d4 <lwip_netconn_do_delconn+0x1ac>)
 8011252:	f240 425e 	movw	r2, #1118	; 0x45e
 8011256:	4960      	ldr	r1, [pc, #384]	; (80113d8 <lwip_netconn_do_delconn+0x1b0>)
 8011258:	4860      	ldr	r0, [pc, #384]	; (80113dc <lwip_netconn_do_delconn+0x1b4>)
 801125a:	f00e fa31 	bl	801f6c0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 801125e:	7afb      	ldrb	r3, [r7, #11]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d005      	beq.n	8011270 <lwip_netconn_do_delconn+0x48>
 8011264:	7afb      	ldrb	r3, [r7, #11]
 8011266:	2b02      	cmp	r3, #2
 8011268:	d002      	beq.n	8011270 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 801126a:	7afb      	ldrb	r3, [r7, #11]
 801126c:	2b03      	cmp	r3, #3
 801126e:	d109      	bne.n	8011284 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8011270:	7afb      	ldrb	r3, [r7, #11]
 8011272:	2b03      	cmp	r3, #3
 8011274:	d10a      	bne.n	801128c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	7f1b      	ldrb	r3, [r3, #28]
 801127c:	f003 0304 	and.w	r3, r3, #4
 8011280:	2b00      	cmp	r3, #0
 8011282:	d103      	bne.n	801128c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	22fb      	movs	r2, #251	; 0xfb
 8011288:	711a      	strb	r2, [r3, #4]
 801128a:	e097      	b.n	80113bc <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 801128c:	7afb      	ldrb	r3, [r7, #11]
 801128e:	2b03      	cmp	r3, #3
 8011290:	d10d      	bne.n	80112ae <lwip_netconn_do_delconn+0x86>
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	7f1b      	ldrb	r3, [r3, #28]
 8011298:	f003 0304 	and.w	r3, r3, #4
 801129c:	2b00      	cmp	r3, #0
 801129e:	d106      	bne.n	80112ae <lwip_netconn_do_delconn+0x86>
 80112a0:	4b4c      	ldr	r3, [pc, #304]	; (80113d4 <lwip_netconn_do_delconn+0x1ac>)
 80112a2:	f240 427a 	movw	r2, #1146	; 0x47a
 80112a6:	494e      	ldr	r1, [pc, #312]	; (80113e0 <lwip_netconn_do_delconn+0x1b8>)
 80112a8:	484c      	ldr	r0, [pc, #304]	; (80113dc <lwip_netconn_do_delconn+0x1b4>)
 80112aa:	f00e fa09 	bl	801f6c0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	2200      	movs	r2, #0
 80112b2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	4618      	mov	r0, r3
 80112ba:	f7ff fdd1 	bl	8010e60 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	685b      	ldr	r3, [r3, #4]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d05f      	beq.n	8011388 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	781b      	ldrb	r3, [r3, #0]
 80112ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80112d2:	2b10      	cmp	r3, #16
 80112d4:	d00d      	beq.n	80112f2 <lwip_netconn_do_delconn+0xca>
 80112d6:	2b20      	cmp	r3, #32
 80112d8:	d151      	bne.n	801137e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	685b      	ldr	r3, [r3, #4]
 80112e0:	2200      	movs	r2, #0
 80112e2:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	685b      	ldr	r3, [r3, #4]
 80112ea:	4618      	mov	r0, r3
 80112ec:	f00a faaa 	bl	801b844 <udp_remove>
          break;
 80112f0:	e046      	b.n	8011380 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	6a1b      	ldr	r3, [r3, #32]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d006      	beq.n	801130a <lwip_netconn_do_delconn+0xe2>
 80112fc:	4b35      	ldr	r3, [pc, #212]	; (80113d4 <lwip_netconn_do_delconn+0x1ac>)
 80112fe:	f240 4294 	movw	r2, #1172	; 0x494
 8011302:	4938      	ldr	r1, [pc, #224]	; (80113e4 <lwip_netconn_do_delconn+0x1bc>)
 8011304:	4835      	ldr	r0, [pc, #212]	; (80113dc <lwip_netconn_do_delconn+0x1b4>)
 8011306:	f00e f9db 	bl	801f6c0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	2204      	movs	r2, #4
 8011310:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	2203      	movs	r2, #3
 8011316:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	68fa      	ldr	r2, [r7, #12]
 801131e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	2100      	movs	r1, #0
 8011326:	4618      	mov	r0, r3
 8011328:	f7ff fe18 	bl	8010f5c <lwip_netconn_do_close_internal>
 801132c:	4603      	mov	r3, r0
 801132e:	2b00      	cmp	r3, #0
 8011330:	d04b      	beq.n	80113ca <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	785b      	ldrb	r3, [r3, #1]
 8011338:	2b04      	cmp	r3, #4
 801133a:	d006      	beq.n	801134a <lwip_netconn_do_delconn+0x122>
 801133c:	4b25      	ldr	r3, [pc, #148]	; (80113d4 <lwip_netconn_do_delconn+0x1ac>)
 801133e:	f240 429a 	movw	r2, #1178	; 0x49a
 8011342:	4929      	ldr	r1, [pc, #164]	; (80113e8 <lwip_netconn_do_delconn+0x1c0>)
 8011344:	4825      	ldr	r0, [pc, #148]	; (80113dc <lwip_netconn_do_delconn+0x1b4>)
 8011346:	f00e f9bb 	bl	801f6c0 <iprintf>
            UNLOCK_TCPIP_CORE();
 801134a:	4828      	ldr	r0, [pc, #160]	; (80113ec <lwip_netconn_do_delconn+0x1c4>)
 801134c:	f00d f88b 	bl	801e466 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	330c      	adds	r3, #12
 8011356:	2100      	movs	r1, #0
 8011358:	4618      	mov	r0, r3
 801135a:	f00c ffe2 	bl	801e322 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 801135e:	4823      	ldr	r0, [pc, #140]	; (80113ec <lwip_netconn_do_delconn+0x1c4>)
 8011360:	f00d f872 	bl	801e448 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	785b      	ldrb	r3, [r3, #1]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d02d      	beq.n	80113ca <lwip_netconn_do_delconn+0x1a2>
 801136e:	4b19      	ldr	r3, [pc, #100]	; (80113d4 <lwip_netconn_do_delconn+0x1ac>)
 8011370:	f240 429e 	movw	r2, #1182	; 0x49e
 8011374:	491c      	ldr	r1, [pc, #112]	; (80113e8 <lwip_netconn_do_delconn+0x1c0>)
 8011376:	4819      	ldr	r0, [pc, #100]	; (80113dc <lwip_netconn_do_delconn+0x1b4>)
 8011378:	f00e f9a2 	bl	801f6c0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 801137c:	e025      	b.n	80113ca <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 801137e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	2200      	movs	r2, #0
 8011386:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801138e:	2b00      	cmp	r3, #0
 8011390:	d007      	beq.n	80113a2 <lwip_netconn_do_delconn+0x17a>
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011398:	68fa      	ldr	r2, [r7, #12]
 801139a:	6810      	ldr	r0, [r2, #0]
 801139c:	2200      	movs	r2, #0
 801139e:	2100      	movs	r1, #0
 80113a0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d007      	beq.n	80113bc <lwip_netconn_do_delconn+0x194>
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b2:	68fa      	ldr	r2, [r7, #12]
 80113b4:	6810      	ldr	r0, [r2, #0]
 80113b6:	2200      	movs	r2, #0
 80113b8:	2102      	movs	r1, #2
 80113ba:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	330c      	adds	r3, #12
 80113c2:	4618      	mov	r0, r3
 80113c4:	f00c fff8 	bl	801e3b8 <sys_sem_valid>
 80113c8:	e000      	b.n	80113cc <lwip_netconn_do_delconn+0x1a4>
          return;
 80113ca:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80113cc:	3710      	adds	r7, #16
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}
 80113d2:	bf00      	nop
 80113d4:	080231b4 	.word	0x080231b4
 80113d8:	08023524 	.word	0x08023524
 80113dc:	080231f8 	.word	0x080231f8
 80113e0:	08023538 	.word	0x08023538
 80113e4:	08023558 	.word	0x08023558
 80113e8:	08023574 	.word	0x08023574
 80113ec:	200081bc 	.word	0x200081bc

080113f0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b084      	sub	sp, #16
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	685b      	ldr	r3, [r3, #4]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d025      	beq.n	8011452 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	781b      	ldrb	r3, [r3, #0]
 801140c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011410:	2b10      	cmp	r3, #16
 8011412:	d00e      	beq.n	8011432 <lwip_netconn_do_bind+0x42>
 8011414:	2b20      	cmp	r3, #32
 8011416:	d119      	bne.n	801144c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	6858      	ldr	r0, [r3, #4]
 801141e:	68bb      	ldr	r3, [r7, #8]
 8011420:	6899      	ldr	r1, [r3, #8]
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	899b      	ldrh	r3, [r3, #12]
 8011426:	461a      	mov	r2, r3
 8011428:	f00a f964 	bl	801b6f4 <udp_bind>
 801142c:	4603      	mov	r3, r0
 801142e:	73fb      	strb	r3, [r7, #15]
        break;
 8011430:	e011      	b.n	8011456 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	6858      	ldr	r0, [r3, #4]
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	6899      	ldr	r1, [r3, #8]
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	899b      	ldrh	r3, [r3, #12]
 8011440:	461a      	mov	r2, r3
 8011442:	f003 fee1 	bl	8015208 <tcp_bind>
 8011446:	4603      	mov	r3, r0
 8011448:	73fb      	strb	r3, [r7, #15]
        break;
 801144a:	e004      	b.n	8011456 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 801144c:	23fa      	movs	r3, #250	; 0xfa
 801144e:	73fb      	strb	r3, [r7, #15]
        break;
 8011450:	e001      	b.n	8011456 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8011452:	23fa      	movs	r3, #250	; 0xfa
 8011454:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	7bfa      	ldrb	r2, [r7, #15]
 801145a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801145c:	bf00      	nop
 801145e:	3710      	adds	r7, #16
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}

08011464 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b084      	sub	sp, #16
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	4618      	mov	r0, r3
 8011476:	f7ff f875 	bl	8010564 <netconn_err>
 801147a:	4603      	mov	r3, r0
 801147c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 801147e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d134      	bne.n	80114f0 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	685b      	ldr	r3, [r3, #4]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d02d      	beq.n	80114ec <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	781b      	ldrb	r3, [r3, #0]
 8011496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801149a:	2b20      	cmp	r3, #32
 801149c:	d123      	bne.n	80114e6 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	689b      	ldr	r3, [r3, #8]
 80114a2:	689b      	ldr	r3, [r3, #8]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d10c      	bne.n	80114c2 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	685a      	ldr	r2, [r3, #4]
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	689b      	ldr	r3, [r3, #8]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	4619      	mov	r1, r3
 80114b6:	4610      	mov	r0, r2
 80114b8:	f009 ff32 	bl	801b320 <udp_send>
 80114bc:	4603      	mov	r3, r0
 80114be:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 80114c0:	e016      	b.n	80114f0 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	6858      	ldr	r0, [r3, #4]
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	689b      	ldr	r3, [r3, #8]
 80114cc:	6819      	ldr	r1, [r3, #0]
 80114ce:	68bb      	ldr	r3, [r7, #8]
 80114d0:	689b      	ldr	r3, [r3, #8]
 80114d2:	f103 0208 	add.w	r2, r3, #8
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	689b      	ldr	r3, [r3, #8]
 80114da:	899b      	ldrh	r3, [r3, #12]
 80114dc:	f009 ff54 	bl	801b388 <udp_sendto>
 80114e0:	4603      	mov	r3, r0
 80114e2:	73fb      	strb	r3, [r7, #15]
          break;
 80114e4:	e004      	b.n	80114f0 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 80114e6:	23f5      	movs	r3, #245	; 0xf5
 80114e8:	73fb      	strb	r3, [r7, #15]
          break;
 80114ea:	e001      	b.n	80114f0 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 80114ec:	23f5      	movs	r3, #245	; 0xf5
 80114ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	7bfa      	ldrb	r2, [r7, #15]
 80114f4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80114f6:	bf00      	nop
 80114f8:	3710      	adds	r7, #16
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}

080114fe <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80114fe:	b580      	push	{r7, lr}
 8011500:	b086      	sub	sp, #24
 8011502:	af00      	add	r7, sp, #0
 8011504:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 801150a:	693b      	ldr	r3, [r7, #16]
 801150c:	2200      	movs	r2, #0
 801150e:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8011510:	693b      	ldr	r3, [r7, #16]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	685b      	ldr	r3, [r3, #4]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d022      	beq.n	8011560 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	781b      	ldrb	r3, [r3, #0]
 8011520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011524:	2b10      	cmp	r3, #16
 8011526:	d11b      	bne.n	8011560 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8011528:	693b      	ldr	r3, [r7, #16]
 801152a:	689b      	ldr	r3, [r3, #8]
 801152c:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 801152e:	697b      	ldr	r3, [r7, #20]
 8011530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011534:	d202      	bcs.n	801153c <lwip_netconn_do_recv+0x3e>
 8011536:	697b      	ldr	r3, [r7, #20]
 8011538:	b29b      	uxth	r3, r3
 801153a:	e001      	b.n	8011540 <lwip_netconn_do_recv+0x42>
 801153c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011540:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8011542:	693b      	ldr	r3, [r7, #16]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	685b      	ldr	r3, [r3, #4]
 8011548:	89fa      	ldrh	r2, [r7, #14]
 801154a:	4611      	mov	r1, r2
 801154c:	4618      	mov	r0, r3
 801154e:	f004 f829 	bl	80155a4 <tcp_recved>
        remaining -= recved;
 8011552:	89fb      	ldrh	r3, [r7, #14]
 8011554:	697a      	ldr	r2, [r7, #20]
 8011556:	1ad3      	subs	r3, r2, r3
 8011558:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 801155a:	697b      	ldr	r3, [r7, #20]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d1e6      	bne.n	801152e <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011560:	bf00      	nop
 8011562:	3718      	adds	r7, #24
 8011564:	46bd      	mov	sp, r7
 8011566:	bd80      	pop	{r7, pc}

08011568 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b088      	sub	sp, #32
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
 8011570:	460b      	mov	r3, r1
 8011572:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8011574:	2300      	movs	r3, #0
 8011576:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d106      	bne.n	801158c <lwip_netconn_do_writemore+0x24>
 801157e:	4b96      	ldr	r3, [pc, #600]	; (80117d8 <lwip_netconn_do_writemore+0x270>)
 8011580:	f240 6273 	movw	r2, #1651	; 0x673
 8011584:	4995      	ldr	r1, [pc, #596]	; (80117dc <lwip_netconn_do_writemore+0x274>)
 8011586:	4896      	ldr	r0, [pc, #600]	; (80117e0 <lwip_netconn_do_writemore+0x278>)
 8011588:	f00e f89a 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	785b      	ldrb	r3, [r3, #1]
 8011590:	2b01      	cmp	r3, #1
 8011592:	d006      	beq.n	80115a2 <lwip_netconn_do_writemore+0x3a>
 8011594:	4b90      	ldr	r3, [pc, #576]	; (80117d8 <lwip_netconn_do_writemore+0x270>)
 8011596:	f240 6274 	movw	r2, #1652	; 0x674
 801159a:	4992      	ldr	r1, [pc, #584]	; (80117e4 <lwip_netconn_do_writemore+0x27c>)
 801159c:	4890      	ldr	r0, [pc, #576]	; (80117e0 <lwip_netconn_do_writemore+0x278>)
 801159e:	f00e f88f 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6a1b      	ldr	r3, [r3, #32]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d106      	bne.n	80115b8 <lwip_netconn_do_writemore+0x50>
 80115aa:	4b8b      	ldr	r3, [pc, #556]	; (80117d8 <lwip_netconn_do_writemore+0x270>)
 80115ac:	f240 6275 	movw	r2, #1653	; 0x675
 80115b0:	498d      	ldr	r1, [pc, #564]	; (80117e8 <lwip_netconn_do_writemore+0x280>)
 80115b2:	488b      	ldr	r0, [pc, #556]	; (80117e0 <lwip_netconn_do_writemore+0x278>)
 80115b4:	f00e f884 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d106      	bne.n	80115ce <lwip_netconn_do_writemore+0x66>
 80115c0:	4b85      	ldr	r3, [pc, #532]	; (80117d8 <lwip_netconn_do_writemore+0x270>)
 80115c2:	f240 6276 	movw	r2, #1654	; 0x676
 80115c6:	4989      	ldr	r1, [pc, #548]	; (80117ec <lwip_netconn_do_writemore+0x284>)
 80115c8:	4885      	ldr	r0, [pc, #532]	; (80117e0 <lwip_netconn_do_writemore+0x278>)
 80115ca:	f00e f879 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6a1b      	ldr	r3, [r3, #32]
 80115d2:	699a      	ldr	r2, [r3, #24]
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	6a1b      	ldr	r3, [r3, #32]
 80115d8:	695b      	ldr	r3, [r3, #20]
 80115da:	429a      	cmp	r2, r3
 80115dc:	d306      	bcc.n	80115ec <lwip_netconn_do_writemore+0x84>
 80115de:	4b7e      	ldr	r3, [pc, #504]	; (80117d8 <lwip_netconn_do_writemore+0x270>)
 80115e0:	f240 6277 	movw	r2, #1655	; 0x677
 80115e4:	4982      	ldr	r1, [pc, #520]	; (80117f0 <lwip_netconn_do_writemore+0x288>)
 80115e6:	487e      	ldr	r0, [pc, #504]	; (80117e0 <lwip_netconn_do_writemore+0x278>)
 80115e8:	f00e f86a 	bl	801f6c0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	6a1b      	ldr	r3, [r3, #32]
 80115f0:	899b      	ldrh	r3, [r3, #12]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d106      	bne.n	8011604 <lwip_netconn_do_writemore+0x9c>
 80115f6:	4b78      	ldr	r3, [pc, #480]	; (80117d8 <lwip_netconn_do_writemore+0x270>)
 80115f8:	f240 6279 	movw	r2, #1657	; 0x679
 80115fc:	497d      	ldr	r1, [pc, #500]	; (80117f4 <lwip_netconn_do_writemore+0x28c>)
 80115fe:	4878      	ldr	r0, [pc, #480]	; (80117e0 <lwip_netconn_do_writemore+0x278>)
 8011600:	f00e f85e 	bl	801f6c0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	6a1b      	ldr	r3, [r3, #32]
 8011608:	7f1b      	ldrb	r3, [r3, #28]
 801160a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	7f1b      	ldrb	r3, [r3, #28]
 8011610:	f003 0302 	and.w	r3, r3, #2
 8011614:	2b00      	cmp	r3, #0
 8011616:	d104      	bne.n	8011622 <lwip_netconn_do_writemore+0xba>
 8011618:	7ebb      	ldrb	r3, [r7, #26]
 801161a:	f003 0304 	and.w	r3, r3, #4
 801161e:	2b00      	cmp	r3, #0
 8011620:	d001      	beq.n	8011626 <lwip_netconn_do_writemore+0xbe>
 8011622:	2301      	movs	r3, #1
 8011624:	e000      	b.n	8011628 <lwip_netconn_do_writemore+0xc0>
 8011626:	2300      	movs	r3, #0
 8011628:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6a1b      	ldr	r3, [r3, #32]
 801162e:	689b      	ldr	r3, [r3, #8]
 8011630:	681a      	ldr	r2, [r3, #0]
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	6a1b      	ldr	r3, [r3, #32]
 8011636:	691b      	ldr	r3, [r3, #16]
 8011638:	4413      	add	r3, r2
 801163a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	6a1b      	ldr	r3, [r3, #32]
 8011640:	689b      	ldr	r3, [r3, #8]
 8011642:	685a      	ldr	r2, [r3, #4]
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6a1b      	ldr	r3, [r3, #32]
 8011648:	691b      	ldr	r3, [r3, #16]
 801164a:	1ad3      	subs	r3, r2, r3
 801164c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 801164e:	693b      	ldr	r3, [r7, #16]
 8011650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011654:	d307      	bcc.n	8011666 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8011656:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801165a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 801165c:	7ebb      	ldrb	r3, [r7, #26]
 801165e:	f043 0302 	orr.w	r3, r3, #2
 8011662:	76bb      	strb	r3, [r7, #26]
 8011664:	e001      	b.n	801166a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	685b      	ldr	r3, [r3, #4]
 801166e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011672:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8011674:	89fa      	ldrh	r2, [r7, #14]
 8011676:	8bbb      	ldrh	r3, [r7, #28]
 8011678:	429a      	cmp	r2, r3
 801167a:	d216      	bcs.n	80116aa <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 801167c:	89fb      	ldrh	r3, [r7, #14]
 801167e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8011680:	7e3b      	ldrb	r3, [r7, #24]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d00d      	beq.n	80116a2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8011686:	8bbb      	ldrh	r3, [r7, #28]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d10e      	bne.n	80116aa <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	6a1b      	ldr	r3, [r3, #32]
 8011690:	699b      	ldr	r3, [r3, #24]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d102      	bne.n	801169c <lwip_netconn_do_writemore+0x134>
 8011696:	f06f 0306 	mvn.w	r3, #6
 801169a:	e000      	b.n	801169e <lwip_netconn_do_writemore+0x136>
 801169c:	2300      	movs	r3, #0
 801169e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80116a0:	e07d      	b.n	801179e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80116a2:	7ebb      	ldrb	r3, [r7, #26]
 80116a4:	f043 0302 	orr.w	r3, r3, #2
 80116a8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	6a1b      	ldr	r3, [r3, #32]
 80116ae:	691a      	ldr	r2, [r3, #16]
 80116b0:	8bbb      	ldrh	r3, [r7, #28]
 80116b2:	441a      	add	r2, r3
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	6a1b      	ldr	r3, [r3, #32]
 80116b8:	689b      	ldr	r3, [r3, #8]
 80116ba:	685b      	ldr	r3, [r3, #4]
 80116bc:	429a      	cmp	r2, r3
 80116be:	d906      	bls.n	80116ce <lwip_netconn_do_writemore+0x166>
 80116c0:	4b45      	ldr	r3, [pc, #276]	; (80117d8 <lwip_netconn_do_writemore+0x270>)
 80116c2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80116c6:	494c      	ldr	r1, [pc, #304]	; (80117f8 <lwip_netconn_do_writemore+0x290>)
 80116c8:	4845      	ldr	r0, [pc, #276]	; (80117e0 <lwip_netconn_do_writemore+0x278>)
 80116ca:	f00d fff9 	bl	801f6c0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80116ce:	8bbb      	ldrh	r3, [r7, #28]
 80116d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116d4:	4293      	cmp	r3, r2
 80116d6:	d103      	bne.n	80116e0 <lwip_netconn_do_writemore+0x178>
 80116d8:	693b      	ldr	r3, [r7, #16]
 80116da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80116de:	d209      	bcs.n	80116f4 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80116e0:	693b      	ldr	r3, [r7, #16]
 80116e2:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80116e4:	8bba      	ldrh	r2, [r7, #28]
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d10b      	bne.n	8011702 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	6a1b      	ldr	r3, [r3, #32]
 80116ee:	899b      	ldrh	r3, [r3, #12]
 80116f0:	2b01      	cmp	r3, #1
 80116f2:	d906      	bls.n	8011702 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80116f4:	2301      	movs	r3, #1
 80116f6:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80116f8:	7ebb      	ldrb	r3, [r7, #26]
 80116fa:	f043 0302 	orr.w	r3, r3, #2
 80116fe:	76bb      	strb	r3, [r7, #26]
 8011700:	e001      	b.n	8011706 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8011702:	2300      	movs	r3, #0
 8011704:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6858      	ldr	r0, [r3, #4]
 801170a:	7ebb      	ldrb	r3, [r7, #26]
 801170c:	8bba      	ldrh	r2, [r7, #28]
 801170e:	6979      	ldr	r1, [r7, #20]
 8011710:	f007 fd6a 	bl	80191e8 <tcp_write>
 8011714:	4603      	mov	r3, r0
 8011716:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8011718:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d12c      	bne.n	801177a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	6a1b      	ldr	r3, [r3, #32]
 8011724:	6999      	ldr	r1, [r3, #24]
 8011726:	8bba      	ldrh	r2, [r7, #28]
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	6a1b      	ldr	r3, [r3, #32]
 801172c:	440a      	add	r2, r1
 801172e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	6a1b      	ldr	r3, [r3, #32]
 8011734:	6919      	ldr	r1, [r3, #16]
 8011736:	8bba      	ldrh	r2, [r7, #28]
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	6a1b      	ldr	r3, [r3, #32]
 801173c:	440a      	add	r2, r1
 801173e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	6a1b      	ldr	r3, [r3, #32]
 8011744:	691a      	ldr	r2, [r3, #16]
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	6a1b      	ldr	r3, [r3, #32]
 801174a:	689b      	ldr	r3, [r3, #8]
 801174c:	685b      	ldr	r3, [r3, #4]
 801174e:	429a      	cmp	r2, r3
 8011750:	d113      	bne.n	801177a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	6a1b      	ldr	r3, [r3, #32]
 8011756:	899a      	ldrh	r2, [r3, #12]
 8011758:	3a01      	subs	r2, #1
 801175a:	b292      	uxth	r2, r2
 801175c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6a1b      	ldr	r3, [r3, #32]
 8011762:	899b      	ldrh	r3, [r3, #12]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d008      	beq.n	801177a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	6a1b      	ldr	r3, [r3, #32]
 801176c:	689a      	ldr	r2, [r3, #8]
 801176e:	3208      	adds	r2, #8
 8011770:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	6a1b      	ldr	r3, [r3, #32]
 8011776:	2200      	movs	r2, #0
 8011778:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 801177a:	7e7b      	ldrb	r3, [r7, #25]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d004      	beq.n	801178a <lwip_netconn_do_writemore+0x222>
 8011780:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011784:	2b00      	cmp	r3, #0
 8011786:	f43f af50 	beq.w	801162a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 801178a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d004      	beq.n	801179c <lwip_netconn_do_writemore+0x234>
 8011792:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011796:	f1b3 3fff 	cmp.w	r3, #4294967295
 801179a:	d146      	bne.n	801182a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 801179c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 801179e:	7e3b      	ldrb	r3, [r7, #24]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d02b      	beq.n	80117fc <lwip_netconn_do_writemore+0x294>
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	6a1b      	ldr	r3, [r3, #32]
 80117a8:	699a      	ldr	r2, [r3, #24]
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6a1b      	ldr	r3, [r3, #32]
 80117ae:	695b      	ldr	r3, [r3, #20]
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d223      	bcs.n	80117fc <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d005      	beq.n	80117c8 <lwip_netconn_do_writemore+0x260>
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117c0:	2200      	movs	r2, #0
 80117c2:	2103      	movs	r1, #3
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	7f1b      	ldrb	r3, [r3, #28]
 80117cc:	f043 0310 	orr.w	r3, r3, #16
 80117d0:	b2da      	uxtb	r2, r3
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	771a      	strb	r2, [r3, #28]
 80117d6:	e028      	b.n	801182a <lwip_netconn_do_writemore+0x2c2>
 80117d8:	080231b4 	.word	0x080231b4
 80117dc:	0802330c 	.word	0x0802330c
 80117e0:	080231f8 	.word	0x080231f8
 80117e4:	08023614 	.word	0x08023614
 80117e8:	0802331c 	.word	0x0802331c
 80117ec:	08023634 	.word	0x08023634
 80117f0:	0802364c 	.word	0x0802364c
 80117f4:	0802368c 	.word	0x0802368c
 80117f8:	080236b4 	.word	0x080236b4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	685b      	ldr	r3, [r3, #4]
 8011800:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011804:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8011808:	d305      	bcc.n	8011816 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	685b      	ldr	r3, [r3, #4]
 801180e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8011812:	2b04      	cmp	r3, #4
 8011814:	d909      	bls.n	801182a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801181a:	2b00      	cmp	r3, #0
 801181c:	d005      	beq.n	801182a <lwip_netconn_do_writemore+0x2c2>
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011822:	2200      	movs	r2, #0
 8011824:	2103      	movs	r1, #3
 8011826:	6878      	ldr	r0, [r7, #4]
 8011828:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 801182a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d11d      	bne.n	801186e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	6a1b      	ldr	r3, [r3, #32]
 8011836:	699a      	ldr	r2, [r3, #24]
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	6a1b      	ldr	r3, [r3, #32]
 801183c:	695b      	ldr	r3, [r3, #20]
 801183e:	429a      	cmp	r2, r3
 8011840:	d002      	beq.n	8011848 <lwip_netconn_do_writemore+0x2e0>
 8011842:	7e3b      	ldrb	r3, [r7, #24]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d001      	beq.n	801184c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8011848:	2301      	movs	r3, #1
 801184a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	685b      	ldr	r3, [r3, #4]
 8011850:	4618      	mov	r0, r3
 8011852:	f008 fab3 	bl	8019dbc <tcp_output>
 8011856:	4603      	mov	r3, r0
 8011858:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 801185a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801185e:	f113 0f04 	cmn.w	r3, #4
 8011862:	d12c      	bne.n	80118be <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8011864:	7b3b      	ldrb	r3, [r7, #12]
 8011866:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011868:	2301      	movs	r3, #1
 801186a:	76fb      	strb	r3, [r7, #27]
 801186c:	e027      	b.n	80118be <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 801186e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011876:	d120      	bne.n	80118ba <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	685b      	ldr	r3, [r3, #4]
 801187c:	4618      	mov	r0, r3
 801187e:	f008 fa9d 	bl	8019dbc <tcp_output>
 8011882:	4603      	mov	r3, r0
 8011884:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8011886:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801188a:	f113 0f04 	cmn.w	r3, #4
 801188e:	d104      	bne.n	801189a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8011890:	7b7b      	ldrb	r3, [r7, #13]
 8011892:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011894:	2301      	movs	r3, #1
 8011896:	76fb      	strb	r3, [r7, #27]
 8011898:	e011      	b.n	80118be <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 801189a:	7e3b      	ldrb	r3, [r7, #24]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d00e      	beq.n	80118be <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	6a1b      	ldr	r3, [r3, #32]
 80118a4:	699b      	ldr	r3, [r3, #24]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d102      	bne.n	80118b0 <lwip_netconn_do_writemore+0x348>
 80118aa:	f06f 0306 	mvn.w	r3, #6
 80118ae:	e000      	b.n	80118b2 <lwip_netconn_do_writemore+0x34a>
 80118b0:	2300      	movs	r3, #0
 80118b2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80118b4:	2301      	movs	r3, #1
 80118b6:	76fb      	strb	r3, [r7, #27]
 80118b8:	e001      	b.n	80118be <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80118ba:	2301      	movs	r3, #1
 80118bc:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80118be:	7efb      	ldrb	r3, [r7, #27]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d015      	beq.n	80118f0 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	6a1b      	ldr	r3, [r3, #32]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	330c      	adds	r3, #12
 80118cc:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	6a1b      	ldr	r3, [r3, #32]
 80118d2:	7ffa      	ldrb	r2, [r7, #31]
 80118d4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2200      	movs	r2, #0
 80118da:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2200      	movs	r2, #0
 80118e0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80118e2:	78fb      	ldrb	r3, [r7, #3]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d006      	beq.n	80118f6 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80118e8:	68b8      	ldr	r0, [r7, #8]
 80118ea:	f00c fd4b 	bl	801e384 <sys_sem_signal>
 80118ee:	e002      	b.n	80118f6 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80118f0:	f04f 33ff 	mov.w	r3, #4294967295
 80118f4:	e000      	b.n	80118f8 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 80118f6:	2300      	movs	r3, #0
}
 80118f8:	4618      	mov	r0, r3
 80118fa:	3720      	adds	r7, #32
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd80      	pop	{r7, pc}

08011900 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b084      	sub	sp, #16
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	785b      	ldrb	r3, [r3, #1]
 8011912:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	685b      	ldr	r3, [r3, #4]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d069      	beq.n	80119f2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8011928:	2b10      	cmp	r3, #16
 801192a:	d162      	bne.n	80119f2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8011930:	2b03      	cmp	r3, #3
 8011932:	d002      	beq.n	801193a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8011934:	7afb      	ldrb	r3, [r7, #11]
 8011936:	2b02      	cmp	r3, #2
 8011938:	d05b      	beq.n	80119f2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 801193a:	7afb      	ldrb	r3, [r7, #11]
 801193c:	2b03      	cmp	r3, #3
 801193e:	d103      	bne.n	8011948 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	22f5      	movs	r2, #245	; 0xf5
 8011944:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8011946:	e059      	b.n	80119fc <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8011948:	7afb      	ldrb	r3, [r7, #11]
 801194a:	2b01      	cmp	r3, #1
 801194c:	d103      	bne.n	8011956 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	22fb      	movs	r2, #251	; 0xfb
 8011952:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8011954:	e052      	b.n	80119fc <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	7a1b      	ldrb	r3, [r3, #8]
 801195a:	f003 0301 	and.w	r3, r3, #1
 801195e:	2b00      	cmp	r3, #0
 8011960:	d004      	beq.n	801196c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	4618      	mov	r0, r3
 8011968:	f7ff fa7a 	bl	8010e60 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	6a1b      	ldr	r3, [r3, #32]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d006      	beq.n	8011984 <lwip_netconn_do_close+0x84>
 8011976:	4b23      	ldr	r3, [pc, #140]	; (8011a04 <lwip_netconn_do_close+0x104>)
 8011978:	f240 72bd 	movw	r2, #1981	; 0x7bd
 801197c:	4922      	ldr	r1, [pc, #136]	; (8011a08 <lwip_netconn_do_close+0x108>)
 801197e:	4823      	ldr	r0, [pc, #140]	; (8011a0c <lwip_netconn_do_close+0x10c>)
 8011980:	f00d fe9e 	bl	801f6c0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	2204      	movs	r2, #4
 801198a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	68fa      	ldr	r2, [r7, #12]
 8011992:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	2100      	movs	r1, #0
 801199a:	4618      	mov	r0, r3
 801199c:	f7ff fade 	bl	8010f5c <lwip_netconn_do_close_internal>
 80119a0:	4603      	mov	r3, r0
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d029      	beq.n	80119fa <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	785b      	ldrb	r3, [r3, #1]
 80119ac:	2b04      	cmp	r3, #4
 80119ae:	d006      	beq.n	80119be <lwip_netconn_do_close+0xbe>
 80119b0:	4b14      	ldr	r3, [pc, #80]	; (8011a04 <lwip_netconn_do_close+0x104>)
 80119b2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 80119b6:	4916      	ldr	r1, [pc, #88]	; (8011a10 <lwip_netconn_do_close+0x110>)
 80119b8:	4814      	ldr	r0, [pc, #80]	; (8011a0c <lwip_netconn_do_close+0x10c>)
 80119ba:	f00d fe81 	bl	801f6c0 <iprintf>
        UNLOCK_TCPIP_CORE();
 80119be:	4815      	ldr	r0, [pc, #84]	; (8011a14 <lwip_netconn_do_close+0x114>)
 80119c0:	f00c fd51 	bl	801e466 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	330c      	adds	r3, #12
 80119ca:	2100      	movs	r1, #0
 80119cc:	4618      	mov	r0, r3
 80119ce:	f00c fca8 	bl	801e322 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80119d2:	4810      	ldr	r0, [pc, #64]	; (8011a14 <lwip_netconn_do_close+0x114>)
 80119d4:	f00c fd38 	bl	801e448 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	785b      	ldrb	r3, [r3, #1]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d00b      	beq.n	80119fa <lwip_netconn_do_close+0xfa>
 80119e2:	4b08      	ldr	r3, [pc, #32]	; (8011a04 <lwip_netconn_do_close+0x104>)
 80119e4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80119e8:	4909      	ldr	r1, [pc, #36]	; (8011a10 <lwip_netconn_do_close+0x110>)
 80119ea:	4808      	ldr	r0, [pc, #32]	; (8011a0c <lwip_netconn_do_close+0x10c>)
 80119ec:	f00d fe68 	bl	801f6c0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80119f0:	e003      	b.n	80119fa <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	22f5      	movs	r2, #245	; 0xf5
 80119f6:	711a      	strb	r2, [r3, #4]
 80119f8:	e000      	b.n	80119fc <lwip_netconn_do_close+0xfc>
      return;
 80119fa:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80119fc:	3710      	adds	r7, #16
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bd80      	pop	{r7, pc}
 8011a02:	bf00      	nop
 8011a04:	080231b4 	.word	0x080231b4
 8011a08:	08023558 	.word	0x08023558
 8011a0c:	080231f8 	.word	0x080231f8
 8011a10:	08023574 	.word	0x08023574
 8011a14:	200081bc 	.word	0x200081bc

08011a18 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b082      	sub	sp, #8
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d013      	beq.n	8011a4e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d00b      	beq.n	8011a46 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	4618      	mov	r0, r3
 8011a34:	f002 fddc 	bl	80145f0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	605a      	str	r2, [r3, #4]
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	685a      	ldr	r2, [r3, #4]
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8011a46:	6879      	ldr	r1, [r7, #4]
 8011a48:	2006      	movs	r0, #6
 8011a4a:	f001 ff53 	bl	80138f4 <memp_free>
  }
}
 8011a4e:	bf00      	nop
 8011a50:	3708      	adds	r7, #8
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}
	...

08011a58 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b084      	sub	sp, #16
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	60f8      	str	r0, [r7, #12]
 8011a60:	60b9      	str	r1, [r7, #8]
 8011a62:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d108      	bne.n	8011a7c <netbuf_data+0x24>
 8011a6a:	4b1b      	ldr	r3, [pc, #108]	; (8011ad8 <netbuf_data+0x80>)
 8011a6c:	22c6      	movs	r2, #198	; 0xc6
 8011a6e:	491b      	ldr	r1, [pc, #108]	; (8011adc <netbuf_data+0x84>)
 8011a70:	481b      	ldr	r0, [pc, #108]	; (8011ae0 <netbuf_data+0x88>)
 8011a72:	f00d fe25 	bl	801f6c0 <iprintf>
 8011a76:	f06f 030f 	mvn.w	r3, #15
 8011a7a:	e029      	b.n	8011ad0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8011a7c:	68bb      	ldr	r3, [r7, #8]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d108      	bne.n	8011a94 <netbuf_data+0x3c>
 8011a82:	4b15      	ldr	r3, [pc, #84]	; (8011ad8 <netbuf_data+0x80>)
 8011a84:	22c7      	movs	r2, #199	; 0xc7
 8011a86:	4917      	ldr	r1, [pc, #92]	; (8011ae4 <netbuf_data+0x8c>)
 8011a88:	4815      	ldr	r0, [pc, #84]	; (8011ae0 <netbuf_data+0x88>)
 8011a8a:	f00d fe19 	bl	801f6c0 <iprintf>
 8011a8e:	f06f 030f 	mvn.w	r3, #15
 8011a92:	e01d      	b.n	8011ad0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d108      	bne.n	8011aac <netbuf_data+0x54>
 8011a9a:	4b0f      	ldr	r3, [pc, #60]	; (8011ad8 <netbuf_data+0x80>)
 8011a9c:	22c8      	movs	r2, #200	; 0xc8
 8011a9e:	4912      	ldr	r1, [pc, #72]	; (8011ae8 <netbuf_data+0x90>)
 8011aa0:	480f      	ldr	r0, [pc, #60]	; (8011ae0 <netbuf_data+0x88>)
 8011aa2:	f00d fe0d 	bl	801f6c0 <iprintf>
 8011aa6:	f06f 030f 	mvn.w	r3, #15
 8011aaa:	e011      	b.n	8011ad0 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	685b      	ldr	r3, [r3, #4]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d102      	bne.n	8011aba <netbuf_data+0x62>
    return ERR_BUF;
 8011ab4:	f06f 0301 	mvn.w	r3, #1
 8011ab8:	e00a      	b.n	8011ad0 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	685b      	ldr	r3, [r3, #4]
 8011abe:	685a      	ldr	r2, [r3, #4]
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	685b      	ldr	r3, [r3, #4]
 8011ac8:	895a      	ldrh	r2, [r3, #10]
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8011ace:	2300      	movs	r3, #0
}
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	3710      	adds	r7, #16
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd80      	pop	{r7, pc}
 8011ad8:	0802370c 	.word	0x0802370c
 8011adc:	08023814 	.word	0x08023814
 8011ae0:	0802375c 	.word	0x0802375c
 8011ae4:	08023830 	.word	0x08023830
 8011ae8:	08023850 	.word	0x08023850

08011aec <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b082      	sub	sp, #8
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d108      	bne.n	8011b0c <netbuf_next+0x20>
 8011afa:	4b11      	ldr	r3, [pc, #68]	; (8011b40 <netbuf_next+0x54>)
 8011afc:	22e0      	movs	r2, #224	; 0xe0
 8011afe:	4911      	ldr	r1, [pc, #68]	; (8011b44 <netbuf_next+0x58>)
 8011b00:	4811      	ldr	r0, [pc, #68]	; (8011b48 <netbuf_next+0x5c>)
 8011b02:	f00d fddd 	bl	801f6c0 <iprintf>
 8011b06:	f04f 33ff 	mov.w	r3, #4294967295
 8011b0a:	e014      	b.n	8011b36 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	685b      	ldr	r3, [r3, #4]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d102      	bne.n	8011b1c <netbuf_next+0x30>
    return -1;
 8011b16:	f04f 33ff 	mov.w	r3, #4294967295
 8011b1a:	e00c      	b.n	8011b36 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	685b      	ldr	r3, [r3, #4]
 8011b20:	681a      	ldr	r2, [r3, #0]
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	685b      	ldr	r3, [r3, #4]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d101      	bne.n	8011b34 <netbuf_next+0x48>
    return 1;
 8011b30:	2301      	movs	r3, #1
 8011b32:	e000      	b.n	8011b36 <netbuf_next+0x4a>
  }
  return 0;
 8011b34:	2300      	movs	r3, #0
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	3708      	adds	r7, #8
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bd80      	pop	{r7, pc}
 8011b3e:	bf00      	nop
 8011b40:	0802370c 	.word	0x0802370c
 8011b44:	0802386c 	.word	0x0802386c
 8011b48:	0802375c 	.word	0x0802375c

08011b4c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b084      	sub	sp, #16
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
 8011b54:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8011b56:	f009 f9e9 	bl	801af2c <sys_timeouts_sleeptime>
 8011b5a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b62:	d10b      	bne.n	8011b7c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8011b64:	4813      	ldr	r0, [pc, #76]	; (8011bb4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011b66:	f00c fc7e 	bl	801e466 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	6839      	ldr	r1, [r7, #0]
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f00c fb36 	bl	801e1e0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8011b74:	480f      	ldr	r0, [pc, #60]	; (8011bb4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011b76:	f00c fc67 	bl	801e448 <sys_mutex_lock>
    return;
 8011b7a:	e018      	b.n	8011bae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d102      	bne.n	8011b88 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8011b82:	f009 f999 	bl	801aeb8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011b86:	e7e6      	b.n	8011b56 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8011b88:	480a      	ldr	r0, [pc, #40]	; (8011bb4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011b8a:	f00c fc6c 	bl	801e466 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8011b8e:	68fa      	ldr	r2, [r7, #12]
 8011b90:	6839      	ldr	r1, [r7, #0]
 8011b92:	6878      	ldr	r0, [r7, #4]
 8011b94:	f00c fb24 	bl	801e1e0 <sys_arch_mbox_fetch>
 8011b98:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8011b9a:	4806      	ldr	r0, [pc, #24]	; (8011bb4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011b9c:	f00c fc54 	bl	801e448 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ba6:	d102      	bne.n	8011bae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011ba8:	f009 f986 	bl	801aeb8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011bac:	e7d3      	b.n	8011b56 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8011bae:	3710      	adds	r7, #16
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}
 8011bb4:	200081bc 	.word	0x200081bc

08011bb8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b084      	sub	sp, #16
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8011bc0:	4810      	ldr	r0, [pc, #64]	; (8011c04 <tcpip_thread+0x4c>)
 8011bc2:	f00c fc41 	bl	801e448 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8011bc6:	4b10      	ldr	r3, [pc, #64]	; (8011c08 <tcpip_thread+0x50>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d005      	beq.n	8011bda <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8011bce:	4b0e      	ldr	r3, [pc, #56]	; (8011c08 <tcpip_thread+0x50>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	4a0e      	ldr	r2, [pc, #56]	; (8011c0c <tcpip_thread+0x54>)
 8011bd4:	6812      	ldr	r2, [r2, #0]
 8011bd6:	4610      	mov	r0, r2
 8011bd8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011bda:	f107 030c 	add.w	r3, r7, #12
 8011bde:	4619      	mov	r1, r3
 8011be0:	480b      	ldr	r0, [pc, #44]	; (8011c10 <tcpip_thread+0x58>)
 8011be2:	f7ff ffb3 	bl	8011b4c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d106      	bne.n	8011bfa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011bec:	4b09      	ldr	r3, [pc, #36]	; (8011c14 <tcpip_thread+0x5c>)
 8011bee:	2291      	movs	r2, #145	; 0x91
 8011bf0:	4909      	ldr	r1, [pc, #36]	; (8011c18 <tcpip_thread+0x60>)
 8011bf2:	480a      	ldr	r0, [pc, #40]	; (8011c1c <tcpip_thread+0x64>)
 8011bf4:	f00d fd64 	bl	801f6c0 <iprintf>
      continue;
 8011bf8:	e003      	b.n	8011c02 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f000 f80f 	bl	8011c20 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011c02:	e7ea      	b.n	8011bda <tcpip_thread+0x22>
 8011c04:	200081bc 	.word	0x200081bc
 8011c08:	200042e0 	.word	0x200042e0
 8011c0c:	200042e4 	.word	0x200042e4
 8011c10:	200042e8 	.word	0x200042e8
 8011c14:	080238a4 	.word	0x080238a4
 8011c18:	080238d4 	.word	0x080238d4
 8011c1c:	080238f4 	.word	0x080238f4

08011c20 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b082      	sub	sp, #8
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	781b      	ldrb	r3, [r3, #0]
 8011c2c:	2b02      	cmp	r3, #2
 8011c2e:	d026      	beq.n	8011c7e <tcpip_thread_handle_msg+0x5e>
 8011c30:	2b02      	cmp	r3, #2
 8011c32:	dc2b      	bgt.n	8011c8c <tcpip_thread_handle_msg+0x6c>
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d002      	beq.n	8011c3e <tcpip_thread_handle_msg+0x1e>
 8011c38:	2b01      	cmp	r3, #1
 8011c3a:	d015      	beq.n	8011c68 <tcpip_thread_handle_msg+0x48>
 8011c3c:	e026      	b.n	8011c8c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	68db      	ldr	r3, [r3, #12]
 8011c42:	687a      	ldr	r2, [r7, #4]
 8011c44:	6850      	ldr	r0, [r2, #4]
 8011c46:	687a      	ldr	r2, [r7, #4]
 8011c48:	6892      	ldr	r2, [r2, #8]
 8011c4a:	4611      	mov	r1, r2
 8011c4c:	4798      	blx	r3
 8011c4e:	4603      	mov	r3, r0
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d004      	beq.n	8011c5e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	685b      	ldr	r3, [r3, #4]
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f002 fcc9 	bl	80145f0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011c5e:	6879      	ldr	r1, [r7, #4]
 8011c60:	2009      	movs	r0, #9
 8011c62:	f001 fe47 	bl	80138f4 <memp_free>
      break;
 8011c66:	e018      	b.n	8011c9a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	685b      	ldr	r3, [r3, #4]
 8011c6c:	687a      	ldr	r2, [r7, #4]
 8011c6e:	6892      	ldr	r2, [r2, #8]
 8011c70:	4610      	mov	r0, r2
 8011c72:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8011c74:	6879      	ldr	r1, [r7, #4]
 8011c76:	2008      	movs	r0, #8
 8011c78:	f001 fe3c 	bl	80138f4 <memp_free>
      break;
 8011c7c:	e00d      	b.n	8011c9a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	685b      	ldr	r3, [r3, #4]
 8011c82:	687a      	ldr	r2, [r7, #4]
 8011c84:	6892      	ldr	r2, [r2, #8]
 8011c86:	4610      	mov	r0, r2
 8011c88:	4798      	blx	r3
      break;
 8011c8a:	e006      	b.n	8011c9a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011c8c:	4b05      	ldr	r3, [pc, #20]	; (8011ca4 <tcpip_thread_handle_msg+0x84>)
 8011c8e:	22cf      	movs	r2, #207	; 0xcf
 8011c90:	4905      	ldr	r1, [pc, #20]	; (8011ca8 <tcpip_thread_handle_msg+0x88>)
 8011c92:	4806      	ldr	r0, [pc, #24]	; (8011cac <tcpip_thread_handle_msg+0x8c>)
 8011c94:	f00d fd14 	bl	801f6c0 <iprintf>
      break;
 8011c98:	bf00      	nop
  }
}
 8011c9a:	bf00      	nop
 8011c9c:	3708      	adds	r7, #8
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}
 8011ca2:	bf00      	nop
 8011ca4:	080238a4 	.word	0x080238a4
 8011ca8:	080238d4 	.word	0x080238d4
 8011cac:	080238f4 	.word	0x080238f4

08011cb0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b086      	sub	sp, #24
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	60f8      	str	r0, [r7, #12]
 8011cb8:	60b9      	str	r1, [r7, #8]
 8011cba:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011cbc:	481a      	ldr	r0, [pc, #104]	; (8011d28 <tcpip_inpkt+0x78>)
 8011cbe:	f00c faea 	bl	801e296 <sys_mbox_valid>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d105      	bne.n	8011cd4 <tcpip_inpkt+0x24>
 8011cc8:	4b18      	ldr	r3, [pc, #96]	; (8011d2c <tcpip_inpkt+0x7c>)
 8011cca:	22fc      	movs	r2, #252	; 0xfc
 8011ccc:	4918      	ldr	r1, [pc, #96]	; (8011d30 <tcpip_inpkt+0x80>)
 8011cce:	4819      	ldr	r0, [pc, #100]	; (8011d34 <tcpip_inpkt+0x84>)
 8011cd0:	f00d fcf6 	bl	801f6c0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8011cd4:	2009      	movs	r0, #9
 8011cd6:	f001 fdbb 	bl	8013850 <memp_malloc>
 8011cda:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8011cdc:	697b      	ldr	r3, [r7, #20]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d102      	bne.n	8011ce8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8011ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8011ce6:	e01a      	b.n	8011d1e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8011ce8:	697b      	ldr	r3, [r7, #20]
 8011cea:	2200      	movs	r2, #0
 8011cec:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8011cee:	697b      	ldr	r3, [r7, #20]
 8011cf0:	68fa      	ldr	r2, [r7, #12]
 8011cf2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	68ba      	ldr	r2, [r7, #8]
 8011cf8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8011cfa:	697b      	ldr	r3, [r7, #20]
 8011cfc:	687a      	ldr	r2, [r7, #4]
 8011cfe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011d00:	6979      	ldr	r1, [r7, #20]
 8011d02:	4809      	ldr	r0, [pc, #36]	; (8011d28 <tcpip_inpkt+0x78>)
 8011d04:	f00c fa52 	bl	801e1ac <sys_mbox_trypost>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d006      	beq.n	8011d1c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011d0e:	6979      	ldr	r1, [r7, #20]
 8011d10:	2009      	movs	r0, #9
 8011d12:	f001 fdef 	bl	80138f4 <memp_free>
    return ERR_MEM;
 8011d16:	f04f 33ff 	mov.w	r3, #4294967295
 8011d1a:	e000      	b.n	8011d1e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8011d1c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8011d1e:	4618      	mov	r0, r3
 8011d20:	3718      	adds	r7, #24
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd80      	pop	{r7, pc}
 8011d26:	bf00      	nop
 8011d28:	200042e8 	.word	0x200042e8
 8011d2c:	080238a4 	.word	0x080238a4
 8011d30:	0802391c 	.word	0x0802391c
 8011d34:	080238f4 	.word	0x080238f4

08011d38 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b082      	sub	sp, #8
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8011d48:	f003 0318 	and.w	r3, r3, #24
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d006      	beq.n	8011d5e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8011d50:	4a08      	ldr	r2, [pc, #32]	; (8011d74 <tcpip_input+0x3c>)
 8011d52:	6839      	ldr	r1, [r7, #0]
 8011d54:	6878      	ldr	r0, [r7, #4]
 8011d56:	f7ff ffab 	bl	8011cb0 <tcpip_inpkt>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	e005      	b.n	8011d6a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8011d5e:	4a06      	ldr	r2, [pc, #24]	; (8011d78 <tcpip_input+0x40>)
 8011d60:	6839      	ldr	r1, [r7, #0]
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f7ff ffa4 	bl	8011cb0 <tcpip_inpkt>
 8011d68:	4603      	mov	r3, r0
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3708      	adds	r7, #8
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}
 8011d72:	bf00      	nop
 8011d74:	0801df99 	.word	0x0801df99
 8011d78:	0801cc59 	.word	0x0801cc59

08011d7c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b084      	sub	sp, #16
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
 8011d84:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011d86:	4819      	ldr	r0, [pc, #100]	; (8011dec <tcpip_try_callback+0x70>)
 8011d88:	f00c fa85 	bl	801e296 <sys_mbox_valid>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d106      	bne.n	8011da0 <tcpip_try_callback+0x24>
 8011d92:	4b17      	ldr	r3, [pc, #92]	; (8011df0 <tcpip_try_callback+0x74>)
 8011d94:	f240 125d 	movw	r2, #349	; 0x15d
 8011d98:	4916      	ldr	r1, [pc, #88]	; (8011df4 <tcpip_try_callback+0x78>)
 8011d9a:	4817      	ldr	r0, [pc, #92]	; (8011df8 <tcpip_try_callback+0x7c>)
 8011d9c:	f00d fc90 	bl	801f6c0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8011da0:	2008      	movs	r0, #8
 8011da2:	f001 fd55 	bl	8013850 <memp_malloc>
 8011da6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d102      	bne.n	8011db4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8011dae:	f04f 33ff 	mov.w	r3, #4294967295
 8011db2:	e017      	b.n	8011de4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	2201      	movs	r2, #1
 8011db8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	687a      	ldr	r2, [r7, #4]
 8011dbe:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	683a      	ldr	r2, [r7, #0]
 8011dc4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011dc6:	68f9      	ldr	r1, [r7, #12]
 8011dc8:	4808      	ldr	r0, [pc, #32]	; (8011dec <tcpip_try_callback+0x70>)
 8011dca:	f00c f9ef 	bl	801e1ac <sys_mbox_trypost>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d006      	beq.n	8011de2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8011dd4:	68f9      	ldr	r1, [r7, #12]
 8011dd6:	2008      	movs	r0, #8
 8011dd8:	f001 fd8c 	bl	80138f4 <memp_free>
    return ERR_MEM;
 8011ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8011de0:	e000      	b.n	8011de4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8011de2:	2300      	movs	r3, #0
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3710      	adds	r7, #16
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}
 8011dec:	200042e8 	.word	0x200042e8
 8011df0:	080238a4 	.word	0x080238a4
 8011df4:	0802391c 	.word	0x0802391c
 8011df8:	080238f4 	.word	0x080238f4

08011dfc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b084      	sub	sp, #16
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	60f8      	str	r0, [r7, #12]
 8011e04:	60b9      	str	r1, [r7, #8]
 8011e06:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8011e08:	4806      	ldr	r0, [pc, #24]	; (8011e24 <tcpip_send_msg_wait_sem+0x28>)
 8011e0a:	f00c fb1d 	bl	801e448 <sys_mutex_lock>
  fn(apimsg);
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	68b8      	ldr	r0, [r7, #8]
 8011e12:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8011e14:	4803      	ldr	r0, [pc, #12]	; (8011e24 <tcpip_send_msg_wait_sem+0x28>)
 8011e16:	f00c fb26 	bl	801e466 <sys_mutex_unlock>
  return ERR_OK;
 8011e1a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	3710      	adds	r7, #16
 8011e20:	46bd      	mov	sp, r7
 8011e22:	bd80      	pop	{r7, pc}
 8011e24:	200081bc 	.word	0x200081bc

08011e28 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b084      	sub	sp, #16
 8011e2c:	af02      	add	r7, sp, #8
 8011e2e:	6078      	str	r0, [r7, #4]
 8011e30:	6039      	str	r1, [r7, #0]
  lwip_init();
 8011e32:	f001 f885 	bl	8012f40 <lwip_init>

  tcpip_init_done = initfunc;
 8011e36:	4a17      	ldr	r2, [pc, #92]	; (8011e94 <tcpip_init+0x6c>)
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8011e3c:	4a16      	ldr	r2, [pc, #88]	; (8011e98 <tcpip_init+0x70>)
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8011e42:	2106      	movs	r1, #6
 8011e44:	4815      	ldr	r0, [pc, #84]	; (8011e9c <tcpip_init+0x74>)
 8011e46:	f00c f97d 	bl	801e144 <sys_mbox_new>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d006      	beq.n	8011e5e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8011e50:	4b13      	ldr	r3, [pc, #76]	; (8011ea0 <tcpip_init+0x78>)
 8011e52:	f240 2261 	movw	r2, #609	; 0x261
 8011e56:	4913      	ldr	r1, [pc, #76]	; (8011ea4 <tcpip_init+0x7c>)
 8011e58:	4813      	ldr	r0, [pc, #76]	; (8011ea8 <tcpip_init+0x80>)
 8011e5a:	f00d fc31 	bl	801f6c0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8011e5e:	4813      	ldr	r0, [pc, #76]	; (8011eac <tcpip_init+0x84>)
 8011e60:	f00c fad6 	bl	801e410 <sys_mutex_new>
 8011e64:	4603      	mov	r3, r0
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d006      	beq.n	8011e78 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8011e6a:	4b0d      	ldr	r3, [pc, #52]	; (8011ea0 <tcpip_init+0x78>)
 8011e6c:	f240 2265 	movw	r2, #613	; 0x265
 8011e70:	490f      	ldr	r1, [pc, #60]	; (8011eb0 <tcpip_init+0x88>)
 8011e72:	480d      	ldr	r0, [pc, #52]	; (8011ea8 <tcpip_init+0x80>)
 8011e74:	f00d fc24 	bl	801f6c0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8011e78:	2300      	movs	r3, #0
 8011e7a:	9300      	str	r3, [sp, #0]
 8011e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e80:	2200      	movs	r2, #0
 8011e82:	490c      	ldr	r1, [pc, #48]	; (8011eb4 <tcpip_init+0x8c>)
 8011e84:	480c      	ldr	r0, [pc, #48]	; (8011eb8 <tcpip_init+0x90>)
 8011e86:	f00c fafb 	bl	801e480 <sys_thread_new>
}
 8011e8a:	bf00      	nop
 8011e8c:	3708      	adds	r7, #8
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bd80      	pop	{r7, pc}
 8011e92:	bf00      	nop
 8011e94:	200042e0 	.word	0x200042e0
 8011e98:	200042e4 	.word	0x200042e4
 8011e9c:	200042e8 	.word	0x200042e8
 8011ea0:	080238a4 	.word	0x080238a4
 8011ea4:	0802392c 	.word	0x0802392c
 8011ea8:	080238f4 	.word	0x080238f4
 8011eac:	200081bc 	.word	0x200081bc
 8011eb0:	08023950 	.word	0x08023950
 8011eb4:	08011bb9 	.word	0x08011bb9
 8011eb8:	08023974 	.word	0x08023974

08011ebc <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b084      	sub	sp, #16
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
 8011ec4:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d002      	beq.n	8011ed2 <fs_open+0x16>
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d102      	bne.n	8011ed8 <fs_open+0x1c>
    return ERR_ARG;
 8011ed2:	f06f 030f 	mvn.w	r3, #15
 8011ed6:	e037      	b.n	8011f48 <fs_open+0x8c>
  }

#if LWIP_HTTPD_CUSTOM_FILES
  if (fs_open_custom(file, name)) {
 8011ed8:	6839      	ldr	r1, [r7, #0]
 8011eda:	6878      	ldr	r0, [r7, #4]
 8011edc:	f7f0 faf4 	bl	80024c8 <fs_open_custom>
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d004      	beq.n	8011ef0 <fs_open+0x34>
    file->is_custom_file = 1;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	2201      	movs	r2, #1
 8011eea:	745a      	strb	r2, [r3, #17]
    return ERR_OK;
 8011eec:	2300      	movs	r3, #0
 8011eee:	e02b      	b.n	8011f48 <fs_open+0x8c>
  }
  file->is_custom_file = 0;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	745a      	strb	r2, [r3, #17]
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8011ef6:	4b16      	ldr	r3, [pc, #88]	; (8011f50 <fs_open+0x94>)
 8011ef8:	60fb      	str	r3, [r7, #12]
 8011efa:	e020      	b.n	8011f3e <fs_open+0x82>
    if (!strcmp(name, (const char *)f->name)) {
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	685b      	ldr	r3, [r3, #4]
 8011f00:	4619      	mov	r1, r3
 8011f02:	6838      	ldr	r0, [r7, #0]
 8011f04:	f7ee f964 	bl	80001d0 <strcmp>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d114      	bne.n	8011f38 <fs_open+0x7c>
      file->data = (const char *)f->data;
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	689a      	ldr	r2, [r3, #8]
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	68da      	ldr	r2, [r3, #12]
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	68da      	ldr	r2, [r3, #12]
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	2200      	movs	r2, #0
 8011f2a:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	7c1a      	ldrb	r2, [r3, #16]
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8011f34:	2300      	movs	r3, #0
 8011f36:	e007      	b.n	8011f48 <fs_open+0x8c>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	60fb      	str	r3, [r7, #12]
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d1db      	bne.n	8011efc <fs_open+0x40>
    }
  }
  /* file not found */
  return ERR_VAL;
 8011f44:	f06f 0305 	mvn.w	r3, #5
}
 8011f48:	4618      	mov	r0, r3
 8011f4a:	3710      	adds	r7, #16
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}
 8011f50:	080274e4 	.word	0x080274e4

08011f54 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b082      	sub	sp, #8
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
#if LWIP_HTTPD_CUSTOM_FILES
  if (file->is_custom_file) {
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	7c5b      	ldrb	r3, [r3, #17]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d002      	beq.n	8011f6a <fs_close+0x16>
    fs_close_custom(file);
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f7f0 fc2b 	bl	80027c0 <fs_close_custom>
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8011f6a:	bf00      	nop
 8011f6c:	3708      	adds	r7, #8
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}

08011f72 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8011f72:	b480      	push	{r7}
 8011f74:	b083      	sub	sp, #12
 8011f76:	af00      	add	r7, sp, #0
 8011f78:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	685a      	ldr	r2, [r3, #4]
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	689b      	ldr	r3, [r3, #8]
 8011f82:	1ad3      	subs	r3, r2, r3
}
 8011f84:	4618      	mov	r0, r3
 8011f86:	370c      	adds	r7, #12
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8e:	4770      	bx	lr

08011f90 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b082      	sub	sp, #8
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8011f98:	2230      	movs	r2, #48	; 0x30
 8011f9a:	2100      	movs	r1, #0
 8011f9c:	6878      	ldr	r0, [r7, #4]
 8011f9e:	f00d f909 	bl	801f1b4 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8011fa2:	bf00      	nop
 8011fa4:	3708      	adds	r7, #8
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}

08011faa <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8011faa:	b580      	push	{r7, lr}
 8011fac:	b082      	sub	sp, #8
 8011fae:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8011fb0:	2030      	movs	r0, #48	; 0x30
 8011fb2:	f001 facb 	bl	801354c <mem_malloc>
 8011fb6:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d002      	beq.n	8011fc4 <http_state_alloc+0x1a>
    http_state_init(ret);
 8011fbe:	6878      	ldr	r0, [r7, #4]
 8011fc0:	f7ff ffe6 	bl	8011f90 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8011fc4:	687b      	ldr	r3, [r7, #4]
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	3708      	adds	r7, #8
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}

08011fce <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8011fce:	b580      	push	{r7, lr}
 8011fd0:	b082      	sub	sp, #8
 8011fd2:	af00      	add	r7, sp, #0
 8011fd4:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	695b      	ldr	r3, [r3, #20]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d007      	beq.n	8011fee <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	695b      	ldr	r3, [r3, #20]
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f7ff ffb6 	bl	8011f54 <fs_close>
    hs->handle = NULL;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2200      	movs	r2, #0
 8011fec:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	6a1b      	ldr	r3, [r3, #32]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d007      	beq.n	8012006 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	6a1b      	ldr	r3, [r3, #32]
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f002 faf8 	bl	80145f0 <pbuf_free>
    hs->req = NULL;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2200      	movs	r2, #0
 8012004:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8012006:	bf00      	nop
 8012008:	3708      	adds	r7, #8
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}

0801200e <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 801200e:	b580      	push	{r7, lr}
 8012010:	b082      	sub	sp, #8
 8012012:	af00      	add	r7, sp, #0
 8012014:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d005      	beq.n	8012028 <http_state_free+0x1a>
    http_state_eof(hs);
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f7ff ffd6 	bl	8011fce <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8012022:	6878      	ldr	r0, [r7, #4]
 8012024:	f001 f8f8 	bl	8013218 <mem_free>
  }
}
 8012028:	bf00      	nop
 801202a:	3708      	adds	r7, #8
 801202c:	46bd      	mov	sp, r7
 801202e:	bd80      	pop	{r7, pc}

08012030 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b086      	sub	sp, #24
 8012034:	af00      	add	r7, sp, #0
 8012036:	60f8      	str	r0, [r7, #12]
 8012038:	60b9      	str	r1, [r7, #8]
 801203a:	607a      	str	r2, [r7, #4]
 801203c:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d106      	bne.n	8012052 <http_write+0x22>
 8012044:	4b2c      	ldr	r3, [pc, #176]	; (80120f8 <http_write+0xc8>)
 8012046:	f240 2219 	movw	r2, #537	; 0x219
 801204a:	492c      	ldr	r1, [pc, #176]	; (80120fc <http_write+0xcc>)
 801204c:	482c      	ldr	r0, [pc, #176]	; (8012100 <http_write+0xd0>)
 801204e:	f00d fb37 	bl	801f6c0 <iprintf>
  len = *length;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	881b      	ldrh	r3, [r3, #0]
 8012056:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8012058:	8afb      	ldrh	r3, [r7, #22]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d101      	bne.n	8012062 <http_write+0x32>
    return ERR_OK;
 801205e:	2300      	movs	r3, #0
 8012060:	e045      	b.n	80120ee <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012068:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 801206a:	8aba      	ldrh	r2, [r7, #20]
 801206c:	8afb      	ldrh	r3, [r7, #22]
 801206e:	429a      	cmp	r2, r3
 8012070:	d201      	bcs.n	8012076 <http_write+0x46>
    len = max_len;
 8012072:	8abb      	ldrh	r3, [r7, #20]
 8012074:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801207a:	005b      	lsls	r3, r3, #1
 801207c:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 801207e:	8afa      	ldrh	r2, [r7, #22]
 8012080:	8abb      	ldrh	r3, [r7, #20]
 8012082:	429a      	cmp	r2, r3
 8012084:	d901      	bls.n	801208a <http_write+0x5a>
    len = max_len;
 8012086:	8abb      	ldrh	r3, [r7, #20]
 8012088:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 801208a:	78fb      	ldrb	r3, [r7, #3]
 801208c:	8afa      	ldrh	r2, [r7, #22]
 801208e:	68b9      	ldr	r1, [r7, #8]
 8012090:	68f8      	ldr	r0, [r7, #12]
 8012092:	f007 f8a9 	bl	80191e8 <tcp_write>
 8012096:	4603      	mov	r3, r0
 8012098:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 801209a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801209e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120a2:	d10f      	bne.n	80120c4 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d004      	beq.n	80120b8 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 80120b4:	2b08      	cmp	r3, #8
 80120b6:	d902      	bls.n	80120be <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 80120b8:	2301      	movs	r3, #1
 80120ba:	82fb      	strh	r3, [r7, #22]
 80120bc:	e002      	b.n	80120c4 <http_write+0x94>
      } else {
        len /= 2;
 80120be:	8afb      	ldrh	r3, [r7, #22]
 80120c0:	085b      	lsrs	r3, r3, #1
 80120c2:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 80120c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80120c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120cc:	d102      	bne.n	80120d4 <http_write+0xa4>
 80120ce:	8afb      	ldrh	r3, [r7, #22]
 80120d0:	2b01      	cmp	r3, #1
 80120d2:	d8da      	bhi.n	801208a <http_write+0x5a>

  if (err == ERR_OK) {
 80120d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d103      	bne.n	80120e4 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	8afa      	ldrh	r2, [r7, #22]
 80120e0:	801a      	strh	r2, [r3, #0]
 80120e2:	e002      	b.n	80120ea <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2200      	movs	r2, #0
 80120e8:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 80120ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80120ee:	4618      	mov	r0, r3
 80120f0:	3718      	adds	r7, #24
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}
 80120f6:	bf00      	nop
 80120f8:	080239c4 	.word	0x080239c4
 80120fc:	080239fc 	.word	0x080239fc
 8012100:	08023a0c 	.word	0x08023a0c

08012104 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b086      	sub	sp, #24
 8012108:	af00      	add	r7, sp, #0
 801210a:	60f8      	str	r0, [r7, #12]
 801210c:	60b9      	str	r1, [r7, #8]
 801210e:	4613      	mov	r3, r2
 8012110:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 8012112:	68bb      	ldr	r3, [r7, #8]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d00b      	beq.n	8012130 <http_close_or_abort_conn+0x2c>
    if ((hs->post_content_len_left != 0)
 8012118:	68bb      	ldr	r3, [r7, #8]
 801211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801211c:	2b00      	cmp	r3, #0
 801211e:	d007      	beq.n	8012130 <http_close_or_abort_conn+0x2c>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 8012120:	4b1f      	ldr	r3, [pc, #124]	; (80121a0 <http_close_or_abort_conn+0x9c>)
 8012122:	2200      	movs	r2, #0
 8012124:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8012126:	223f      	movs	r2, #63	; 0x3f
 8012128:	491d      	ldr	r1, [pc, #116]	; (80121a0 <http_close_or_abort_conn+0x9c>)
 801212a:	68b8      	ldr	r0, [r7, #8]
 801212c:	f7f1 f9fa 	bl	8003524 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8012130:	2100      	movs	r1, #0
 8012132:	68f8      	ldr	r0, [r7, #12]
 8012134:	f004 f91a 	bl	801636c <tcp_arg>
  altcp_recv(pcb, NULL);
 8012138:	2100      	movs	r1, #0
 801213a:	68f8      	ldr	r0, [r7, #12]
 801213c:	f004 f928 	bl	8016390 <tcp_recv>
  altcp_err(pcb, NULL);
 8012140:	2100      	movs	r1, #0
 8012142:	68f8      	ldr	r0, [r7, #12]
 8012144:	f004 f968 	bl	8016418 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8012148:	2200      	movs	r2, #0
 801214a:	2100      	movs	r1, #0
 801214c:	68f8      	ldr	r0, [r7, #12]
 801214e:	f004 f99d 	bl	801648c <tcp_poll>
  altcp_sent(pcb, NULL);
 8012152:	2100      	movs	r1, #0
 8012154:	68f8      	ldr	r0, [r7, #12]
 8012156:	f004 f93d 	bl	80163d4 <tcp_sent>
  if (hs != NULL) {
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d002      	beq.n	8012166 <http_close_or_abort_conn+0x62>
    http_state_free(hs);
 8012160:	68b8      	ldr	r0, [r7, #8]
 8012162:	f7ff ff54 	bl	801200e <http_state_free>
  }

  if (abort_conn) {
 8012166:	79fb      	ldrb	r3, [r7, #7]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d004      	beq.n	8012176 <http_close_or_abort_conn+0x72>
    altcp_abort(pcb);
 801216c:	68f8      	ldr	r0, [r7, #12]
 801216e:	f003 f83f 	bl	80151f0 <tcp_abort>
    return ERR_OK;
 8012172:	2300      	movs	r3, #0
 8012174:	e00f      	b.n	8012196 <http_close_or_abort_conn+0x92>
  }
  err = altcp_close(pcb);
 8012176:	68f8      	ldr	r0, [r7, #12]
 8012178:	f002 fef4 	bl	8014f64 <tcp_close>
 801217c:	4603      	mov	r3, r0
 801217e:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8012180:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d004      	beq.n	8012192 <http_close_or_abort_conn+0x8e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8012188:	2204      	movs	r2, #4
 801218a:	4906      	ldr	r1, [pc, #24]	; (80121a4 <http_close_or_abort_conn+0xa0>)
 801218c:	68f8      	ldr	r0, [r7, #12]
 801218e:	f004 f97d 	bl	801648c <tcp_poll>
  }
  return err;
 8012192:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012196:	4618      	mov	r0, r3
 8012198:	3718      	adds	r7, #24
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}
 801219e:	bf00      	nop
 80121a0:	200046ec 	.word	0x200046ec
 80121a4:	08012b77 	.word	0x08012b77

080121a8 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b082      	sub	sp, #8
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
 80121b0:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 80121b2:	2200      	movs	r2, #0
 80121b4:	6839      	ldr	r1, [r7, #0]
 80121b6:	6878      	ldr	r0, [r7, #4]
 80121b8:	f7ff ffa4 	bl	8012104 <http_close_or_abort_conn>
 80121bc:	4603      	mov	r3, r0
}
 80121be:	4618      	mov	r0, r3
 80121c0:	3708      	adds	r7, #8
 80121c2:	46bd      	mov	sp, r7
 80121c4:	bd80      	pop	{r7, pc}

080121c6 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 80121c6:	b580      	push	{r7, lr}
 80121c8:	b082      	sub	sp, #8
 80121ca:	af00      	add	r7, sp, #0
 80121cc:	6078      	str	r0, [r7, #4]
 80121ce:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 80121d0:	6839      	ldr	r1, [r7, #0]
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	f7ff ffe8 	bl	80121a8 <http_close_conn>
  }
}
 80121d8:	bf00      	nop
 80121da:	3708      	adds	r7, #8
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}

080121e0 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b084      	sub	sp, #16
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
 80121e8:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	695b      	ldr	r3, [r3, #20]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d105      	bne.n	80121fe <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 80121f2:	6839      	ldr	r1, [r7, #0]
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f7ff ffe6 	bl	80121c6 <http_eof>
    return 0;
 80121fa:	2300      	movs	r3, #0
 80121fc:	e016      	b.n	801222c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	695b      	ldr	r3, [r3, #20]
 8012202:	4618      	mov	r0, r3
 8012204:	f7ff feb5 	bl	8011f72 <fs_bytes_left>
 8012208:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	2b00      	cmp	r3, #0
 801220e:	dc05      	bgt.n	801221c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8012210:	6839      	ldr	r1, [r7, #0]
 8012212:	6878      	ldr	r0, [r7, #4]
 8012214:	f7ff ffd7 	bl	80121c6 <http_eof>
    return 0;
 8012218:	2300      	movs	r3, #0
 801221a:	e007      	b.n	801222c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 801221c:	4b05      	ldr	r3, [pc, #20]	; (8012234 <http_check_eof+0x54>)
 801221e:	f240 429d 	movw	r2, #1181	; 0x49d
 8012222:	4905      	ldr	r1, [pc, #20]	; (8012238 <http_check_eof+0x58>)
 8012224:	4805      	ldr	r0, [pc, #20]	; (801223c <http_check_eof+0x5c>)
 8012226:	f00d fa4b 	bl	801f6c0 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 801222a:	2301      	movs	r3, #1
}
 801222c:	4618      	mov	r0, r3
 801222e:	3710      	adds	r7, #16
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}
 8012234:	080239c4 	.word	0x080239c4
 8012238:	08023a34 	.word	0x08023a34
 801223c:	08023a0c 	.word	0x08023a0c

08012240 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b084      	sub	sp, #16
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
 8012248:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 801224a:	2300      	movs	r3, #0
 801224c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012252:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012256:	4293      	cmp	r3, r2
 8012258:	d803      	bhi.n	8012262 <http_send_data_nonssi+0x22>
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801225e:	b29b      	uxth	r3, r3
 8012260:	e001      	b.n	8012266 <http_send_data_nonssi+0x26>
 8012262:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012266:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	6999      	ldr	r1, [r3, #24]
 801226c:	f107 020c 	add.w	r2, r7, #12
 8012270:	2300      	movs	r3, #0
 8012272:	6878      	ldr	r0, [r7, #4]
 8012274:	f7ff fedc 	bl	8012030 <http_write>
 8012278:	4603      	mov	r3, r0
 801227a:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 801227c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d10d      	bne.n	80122a0 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8012284:	2301      	movs	r3, #1
 8012286:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	699b      	ldr	r3, [r3, #24]
 801228c:	89ba      	ldrh	r2, [r7, #12]
 801228e:	441a      	add	r2, r3
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012298:	89ba      	ldrh	r2, [r7, #12]
 801229a:	1a9a      	subs	r2, r3, r2
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 80122a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3710      	adds	r7, #16
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}

080122aa <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 80122aa:	b580      	push	{r7, lr}
 80122ac:	b084      	sub	sp, #16
 80122ae:	af00      	add	r7, sp, #0
 80122b0:	6078      	str	r0, [r7, #4]
 80122b2:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80122b4:	2300      	movs	r3, #0
 80122b6:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 80122b8:	683b      	ldr	r3, [r7, #0]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d101      	bne.n	80122c2 <http_send+0x18>
    return 0;
 80122be:	2300      	movs	r3, #0
 80122c0:	e025      	b.n	801230e <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 80122c2:	683b      	ldr	r3, [r7, #0]
 80122c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d108      	bne.n	80122dc <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 80122ca:	6839      	ldr	r1, [r7, #0]
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f7ff ff87 	bl	80121e0 <http_check_eof>
 80122d2:	4603      	mov	r3, r0
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d101      	bne.n	80122dc <http_send+0x32>
      return 0;
 80122d8:	2300      	movs	r3, #0
 80122da:	e018      	b.n	801230e <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 80122dc:	6839      	ldr	r1, [r7, #0]
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f7ff ffae 	bl	8012240 <http_send_data_nonssi>
 80122e4:	4603      	mov	r3, r0
 80122e6:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d10d      	bne.n	801230c <http_send+0x62>
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	695b      	ldr	r3, [r3, #20]
 80122f4:	4618      	mov	r0, r3
 80122f6:	f7ff fe3c 	bl	8011f72 <fs_bytes_left>
 80122fa:	4603      	mov	r3, r0
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	dc05      	bgt.n	801230c <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8012300:	6839      	ldr	r1, [r7, #0]
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f7ff ff5f 	bl	80121c6 <http_eof>
    return 0;
 8012308:	2300      	movs	r3, #0
 801230a:	e000      	b.n	801230e <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 801230c:	7bfb      	ldrb	r3, [r7, #15]
}
 801230e:	4618      	mov	r0, r3
 8012310:	3710      	adds	r7, #16
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
	...

08012318 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b084      	sub	sp, #16
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
 8012320:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	4a1c      	ldr	r2, [pc, #112]	; (8012398 <http_get_404_file+0x80>)
 8012326:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8012328:	687a      	ldr	r2, [r7, #4]
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	4619      	mov	r1, r3
 8012330:	4610      	mov	r0, r2
 8012332:	f7ff fdc3 	bl	8011ebc <fs_open>
 8012336:	4603      	mov	r3, r0
 8012338:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801233a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d024      	beq.n	801238c <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	4a15      	ldr	r2, [pc, #84]	; (801239c <http_get_404_file+0x84>)
 8012346:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8012348:	687a      	ldr	r2, [r7, #4]
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	4619      	mov	r1, r3
 8012350:	4610      	mov	r0, r2
 8012352:	f7ff fdb3 	bl	8011ebc <fs_open>
 8012356:	4603      	mov	r3, r0
 8012358:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801235a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d014      	beq.n	801238c <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	4a0e      	ldr	r2, [pc, #56]	; (80123a0 <http_get_404_file+0x88>)
 8012366:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8012368:	687a      	ldr	r2, [r7, #4]
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	4619      	mov	r1, r3
 8012370:	4610      	mov	r0, r2
 8012372:	f7ff fda3 	bl	8011ebc <fs_open>
 8012376:	4603      	mov	r3, r0
 8012378:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 801237a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d004      	beq.n	801238c <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8012382:	683b      	ldr	r3, [r7, #0]
 8012384:	2200      	movs	r2, #0
 8012386:	601a      	str	r2, [r3, #0]
        return NULL;
 8012388:	2300      	movs	r3, #0
 801238a:	e000      	b.n	801238e <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 801238c:	687b      	ldr	r3, [r7, #4]
}
 801238e:	4618      	mov	r0, r3
 8012390:	3710      	adds	r7, #16
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}
 8012396:	bf00      	nop
 8012398:	08023a6c 	.word	0x08023a6c
 801239c:	08023a78 	.word	0x08023a78
 80123a0:	08023a84 	.word	0x08023a84

080123a4 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 80123ac:	4b08      	ldr	r3, [pc, #32]	; (80123d0 <http_handle_post_finished+0x2c>)
 80123ae:	2200      	movs	r2, #0
 80123b0:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80123b2:	223f      	movs	r2, #63	; 0x3f
 80123b4:	4906      	ldr	r1, [pc, #24]	; (80123d0 <http_handle_post_finished+0x2c>)
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f7f1 f8b4 	bl	8003524 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 80123bc:	2200      	movs	r2, #0
 80123be:	4904      	ldr	r1, [pc, #16]	; (80123d0 <http_handle_post_finished+0x2c>)
 80123c0:	6878      	ldr	r0, [r7, #4]
 80123c2:	f000 fa51 	bl	8012868 <http_find_file>
 80123c6:	4603      	mov	r3, r0
}
 80123c8:	4618      	mov	r0, r3
 80123ca:	3708      	adds	r7, #8
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}
 80123d0:	200046ec 	.word	0x200046ec

080123d4 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b084      	sub	sp, #16
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
 80123dc:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d010      	beq.n	8012406 <http_post_rxpbuf+0x32>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123e8:	683a      	ldr	r2, [r7, #0]
 80123ea:	8912      	ldrh	r2, [r2, #8]
 80123ec:	4293      	cmp	r3, r2
 80123ee:	d203      	bcs.n	80123f8 <http_post_rxpbuf+0x24>
      hs->post_content_len_left = 0;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2200      	movs	r2, #0
 80123f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80123f6:	e006      	b.n	8012406 <http_post_rxpbuf+0x32>
    } else {
      hs->post_content_len_left -= p->tot_len;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123fc:	683a      	ldr	r2, [r7, #0]
 80123fe:	8912      	ldrh	r2, [r2, #8]
 8012400:	1a9a      	subs	r2, r3, r2
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 8012406:	683b      	ldr	r3, [r7, #0]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d006      	beq.n	801241a <http_post_rxpbuf+0x46>
    err = httpd_post_receive_data(hs, p);
 801240c:	6839      	ldr	r1, [r7, #0]
 801240e:	6878      	ldr	r0, [r7, #4]
 8012410:	f7f0 fe82 	bl	8003118 <httpd_post_receive_data>
 8012414:	4603      	mov	r3, r0
 8012416:	73fb      	strb	r3, [r7, #15]
 8012418:	e001      	b.n	801241e <http_post_rxpbuf+0x4a>
  } else {
    err = ERR_OK;
 801241a:	2300      	movs	r3, #0
 801241c:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 801241e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d002      	beq.n	801242c <http_post_rxpbuf+0x58>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2200      	movs	r2, #0
 801242a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  if (hs->post_content_len_left == 0) {
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012430:	2b00      	cmp	r3, #0
 8012432:	d104      	bne.n	801243e <http_post_rxpbuf+0x6a>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	f7ff ffb5 	bl	80123a4 <http_handle_post_finished>
 801243a:	4603      	mov	r3, r0
 801243c:	e000      	b.n	8012440 <http_post_rxpbuf+0x6c>
  }

  return ERR_OK;
 801243e:	2300      	movs	r3, #0
}
 8012440:	4618      	mov	r0, r3
 8012442:	3710      	adds	r7, #16
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}

08012448 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b092      	sub	sp, #72	; 0x48
 801244c:	af04      	add	r7, sp, #16
 801244e:	60f8      	str	r0, [r7, #12]
 8012450:	60b9      	str	r1, [r7, #8]
 8012452:	607a      	str	r2, [r7, #4]
 8012454:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8012456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012458:	1c58      	adds	r0, r3, #1
 801245a:	887a      	ldrh	r2, [r7, #2]
 801245c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801245e:	1c59      	adds	r1, r3, #1
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	1acb      	subs	r3, r1, r3
 8012464:	1ad3      	subs	r3, r2, r3
 8012466:	461a      	mov	r2, r3
 8012468:	4964      	ldr	r1, [pc, #400]	; (80125fc <http_post_request+0x1b4>)
 801246a:	f000 fd33 	bl	8012ed4 <lwip_strnstr>
 801246e:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 8012470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012472:	2b00      	cmp	r3, #0
 8012474:	f000 80bc 	beq.w	80125f0 <http_post_request+0x1a8>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8012478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801247a:	1c58      	adds	r0, r3, #1
 801247c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801247e:	3301      	adds	r3, #1
 8012480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012482:	1ad3      	subs	r3, r2, r3
 8012484:	461a      	mov	r2, r3
 8012486:	495e      	ldr	r1, [pc, #376]	; (8012600 <http_post_request+0x1b8>)
 8012488:	f000 fd24 	bl	8012ed4 <lwip_strnstr>
 801248c:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 801248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012490:	2b00      	cmp	r3, #0
 8012492:	f000 80aa 	beq.w	80125ea <http_post_request+0x1a2>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8012496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012498:	3310      	adds	r3, #16
 801249a:	220a      	movs	r2, #10
 801249c:	4959      	ldr	r1, [pc, #356]	; (8012604 <http_post_request+0x1bc>)
 801249e:	4618      	mov	r0, r3
 80124a0:	f000 fd18 	bl	8012ed4 <lwip_strnstr>
 80124a4:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 80124a6:	6a3b      	ldr	r3, [r7, #32]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	f000 809e 	beq.w	80125ea <http_post_request+0x1a2>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 80124ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b0:	3310      	adds	r3, #16
 80124b2:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 80124b4:	69f8      	ldr	r0, [r7, #28]
 80124b6:	f00c fd29 	bl	801ef0c <atoi>
 80124ba:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 80124bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d10b      	bne.n	80124da <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 80124c2:	69fb      	ldr	r3, [r7, #28]
 80124c4:	781b      	ldrb	r3, [r3, #0]
 80124c6:	2b30      	cmp	r3, #48	; 0x30
 80124c8:	d104      	bne.n	80124d4 <http_post_request+0x8c>
 80124ca:	69fb      	ldr	r3, [r7, #28]
 80124cc:	3301      	adds	r3, #1
 80124ce:	781b      	ldrb	r3, [r3, #0]
 80124d0:	2b0d      	cmp	r3, #13
 80124d2:	d002      	beq.n	80124da <http_post_request+0x92>
            content_len = -1;
 80124d4:	f04f 33ff 	mov.w	r3, #4294967295
 80124d8:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 80124da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124dc:	2b00      	cmp	r3, #0
 80124de:	f2c0 8081 	blt.w	80125e4 <http_post_request+0x19c>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 80124e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124e4:	3301      	adds	r3, #1
 80124e6:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 80124e8:	887a      	ldrh	r2, [r7, #2]
 80124ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ec:	1d19      	adds	r1, r3, #4
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	1acb      	subs	r3, r1, r3
 80124f2:	429a      	cmp	r2, r3
 80124f4:	db05      	blt.n	8012502 <http_post_request+0xba>
 80124f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f8:	1d1a      	adds	r2, r3, #4
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	1ad3      	subs	r3, r2, r3
 80124fe:	b29b      	uxth	r3, r3
 8012500:	e000      	b.n	8012504 <http_post_request+0xbc>
 8012502:	887b      	ldrh	r3, [r7, #2]
 8012504:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8012506:	887a      	ldrh	r2, [r7, #2]
 8012508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801250a:	1d19      	adds	r1, r3, #4
 801250c:	69bb      	ldr	r3, [r7, #24]
 801250e:	1acb      	subs	r3, r1, r3
 8012510:	429a      	cmp	r2, r3
 8012512:	db05      	blt.n	8012520 <http_post_request+0xd8>
 8012514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012516:	1d1a      	adds	r2, r3, #4
 8012518:	69bb      	ldr	r3, [r7, #24]
 801251a:	1ad3      	subs	r3, r2, r3
 801251c:	b29b      	uxth	r3, r3
 801251e:	e000      	b.n	8012522 <http_post_request+0xda>
 8012520:	887b      	ldrh	r3, [r7, #2]
 8012522:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 8012524:	2301      	movs	r3, #1
 8012526:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 8012528:	4b37      	ldr	r3, [pc, #220]	; (8012608 <http_post_request+0x1c0>)
 801252a:	2200      	movs	r2, #0
 801252c:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 801252e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012530:	2200      	movs	r2, #0
 8012532:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8012534:	8aba      	ldrh	r2, [r7, #20]
 8012536:	f107 0312 	add.w	r3, r7, #18
 801253a:	9303      	str	r3, [sp, #12]
 801253c:	233f      	movs	r3, #63	; 0x3f
 801253e:	9302      	str	r3, [sp, #8]
 8012540:	4b31      	ldr	r3, [pc, #196]	; (8012608 <http_post_request+0x1c0>)
 8012542:	9301      	str	r3, [sp, #4]
 8012544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012546:	9300      	str	r3, [sp, #0]
 8012548:	4613      	mov	r3, r2
 801254a:	69ba      	ldr	r2, [r7, #24]
 801254c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801254e:	68b8      	ldr	r0, [r7, #8]
 8012550:	f7f0 fda4 	bl	800309c <httpd_post_begin>
 8012554:	4603      	mov	r3, r0
 8012556:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 8012558:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d13a      	bne.n	80125d6 <http_post_request+0x18e>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 8012564:	8afb      	ldrh	r3, [r7, #22]
 8012566:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 8012568:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801256a:	68bb      	ldr	r3, [r7, #8]
 801256c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 801256e:	e007      	b.n	8012580 <http_post_request+0x138>
              start_offset -= q->len;
 8012570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012572:	895b      	ldrh	r3, [r3, #10]
 8012574:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012576:	1ad3      	subs	r3, r2, r3
 8012578:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 801257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 8012580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012582:	2b00      	cmp	r3, #0
 8012584:	d004      	beq.n	8012590 <http_post_request+0x148>
 8012586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012588:	895b      	ldrh	r3, [r3, #10]
 801258a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801258c:	429a      	cmp	r2, r3
 801258e:	d2ef      	bcs.n	8012570 <http_post_request+0x128>
            }
            if (q != NULL) {
 8012590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012592:	2b00      	cmp	r3, #0
 8012594:	d00d      	beq.n	80125b2 <http_post_request+0x16a>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 8012596:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012598:	4619      	mov	r1, r3
 801259a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801259c:	f001 ffa2 	bl	80144e4 <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 80125a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125a2:	f002 f8cb 	bl	801473c <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 80125a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80125a8:	68b8      	ldr	r0, [r7, #8]
 80125aa:	f7ff ff13 	bl	80123d4 <http_post_rxpbuf>
 80125ae:	4603      	mov	r3, r0
 80125b0:	e020      	b.n	80125f4 <http_post_request+0x1ac>
            } else if (hs->post_content_len_left == 0) {
 80125b2:	68bb      	ldr	r3, [r7, #8]
 80125b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d10b      	bne.n	80125d2 <http_post_request+0x18a>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 80125ba:	2241      	movs	r2, #65	; 0x41
 80125bc:	2100      	movs	r1, #0
 80125be:	2000      	movs	r0, #0
 80125c0:	f001 fd32 	bl	8014028 <pbuf_alloc>
 80125c4:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 80125c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80125c8:	68b8      	ldr	r0, [r7, #8]
 80125ca:	f7ff ff03 	bl	80123d4 <http_post_rxpbuf>
 80125ce:	4603      	mov	r3, r0
 80125d0:	e010      	b.n	80125f4 <http_post_request+0x1ac>
            } else {
              return ERR_OK;
 80125d2:	2300      	movs	r3, #0
 80125d4:	e00e      	b.n	80125f4 <http_post_request+0x1ac>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 80125d6:	2200      	movs	r2, #0
 80125d8:	490b      	ldr	r1, [pc, #44]	; (8012608 <http_post_request+0x1c0>)
 80125da:	68b8      	ldr	r0, [r7, #8]
 80125dc:	f000 f944 	bl	8012868 <http_find_file>
 80125e0:	4603      	mov	r3, r0
 80125e2:	e007      	b.n	80125f4 <http_post_request+0x1ac>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 80125e4:	f06f 030f 	mvn.w	r3, #15
 80125e8:	e004      	b.n	80125f4 <http_post_request+0x1ac>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 80125ea:	f06f 030f 	mvn.w	r3, #15
 80125ee:	e001      	b.n	80125f4 <http_post_request+0x1ac>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 80125f0:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 80125f4:	4618      	mov	r0, r3
 80125f6:	3738      	adds	r7, #56	; 0x38
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}
 80125fc:	08023a90 	.word	0x08023a90
 8012600:	08023a98 	.word	0x08023a98
 8012604:	08023aac 	.word	0x08023aac
 8012608:	200046ec 	.word	0x200046ec

0801260c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b092      	sub	sp, #72	; 0x48
 8012610:	af02      	add	r7, sp, #8
 8012612:	60f8      	str	r0, [r7, #12]
 8012614:	60b9      	str	r1, [r7, #8]
 8012616:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 801261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801261e:	2b00      	cmp	r3, #0
 8012620:	d106      	bne.n	8012630 <http_parse_request+0x24>
 8012622:	4b87      	ldr	r3, [pc, #540]	; (8012840 <http_parse_request+0x234>)
 8012624:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8012628:	4986      	ldr	r1, [pc, #536]	; (8012844 <http_parse_request+0x238>)
 801262a:	4887      	ldr	r0, [pc, #540]	; (8012848 <http_parse_request+0x23c>)
 801262c:	f00d f848 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d106      	bne.n	8012644 <http_parse_request+0x38>
 8012636:	4b82      	ldr	r3, [pc, #520]	; (8012840 <http_parse_request+0x234>)
 8012638:	f240 72af 	movw	r2, #1967	; 0x7af
 801263c:	4983      	ldr	r1, [pc, #524]	; (801284c <http_parse_request+0x240>)
 801263e:	4882      	ldr	r0, [pc, #520]	; (8012848 <http_parse_request+0x23c>)
 8012640:	f00d f83e 	bl	801f6c0 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8012644:	68bb      	ldr	r3, [r7, #8]
 8012646:	695b      	ldr	r3, [r3, #20]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d103      	bne.n	8012654 <http_parse_request+0x48>
 801264c:	68bb      	ldr	r3, [r7, #8]
 801264e:	699b      	ldr	r3, [r3, #24]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d002      	beq.n	801265a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8012654:	f06f 0307 	mvn.w	r3, #7
 8012658:	e0ed      	b.n	8012836 <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 801265a:	68bb      	ldr	r3, [r7, #8]
 801265c:	6a1b      	ldr	r3, [r3, #32]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d103      	bne.n	801266a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8012662:	68bb      	ldr	r3, [r7, #8]
 8012664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012666:	621a      	str	r2, [r3, #32]
 8012668:	e005      	b.n	8012676 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 801266a:	68bb      	ldr	r3, [r7, #8]
 801266c:	6a1b      	ldr	r3, [r3, #32]
 801266e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012670:	4618      	mov	r0, r3
 8012672:	f002 f88b 	bl	801478c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8012676:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012678:	f002 f860 	bl	801473c <pbuf_ref>

  if (hs->req->next != NULL) {
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	6a1b      	ldr	r3, [r3, #32]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d012      	beq.n	80126ac <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	6a1b      	ldr	r3, [r3, #32]
 801268a:	891b      	ldrh	r3, [r3, #8]
 801268c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8012690:	4293      	cmp	r3, r2
 8012692:	bf28      	it	cs
 8012694:	4613      	movcs	r3, r2
 8012696:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8012698:	68bb      	ldr	r3, [r7, #8]
 801269a:	6a18      	ldr	r0, [r3, #32]
 801269c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801269e:	2300      	movs	r3, #0
 80126a0:	496b      	ldr	r1, [pc, #428]	; (8012850 <http_parse_request+0x244>)
 80126a2:	f002 f9ab 	bl	80149fc <pbuf_copy_partial>
    data = httpd_req_buf;
 80126a6:	4b6a      	ldr	r3, [pc, #424]	; (8012850 <http_parse_request+0x244>)
 80126a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80126aa:	e005      	b.n	80126b8 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 80126ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ae:	685b      	ldr	r3, [r3, #4]
 80126b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 80126b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126b4:	895b      	ldrh	r3, [r3, #10]
 80126b6:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 80126b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80126ba:	2b06      	cmp	r3, #6
 80126bc:	f240 80a1 	bls.w	8012802 <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 80126c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80126c2:	461a      	mov	r2, r3
 80126c4:	4963      	ldr	r1, [pc, #396]	; (8012854 <http_parse_request+0x248>)
 80126c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80126c8:	f000 fc04 	bl	8012ed4 <lwip_strnstr>
 80126cc:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 80126ce:	6a3b      	ldr	r3, [r7, #32]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	f000 8096 	beq.w	8012802 <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 80126d6:	2300      	movs	r3, #0
 80126d8:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 80126da:	2300      	movs	r3, #0
 80126dc:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 80126de:	2204      	movs	r2, #4
 80126e0:	495d      	ldr	r1, [pc, #372]	; (8012858 <http_parse_request+0x24c>)
 80126e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80126e4:	f00d f8a5 	bl	801f832 <strncmp>
 80126e8:	4603      	mov	r3, r0
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d103      	bne.n	80126f6 <http_parse_request+0xea>
        sp1 = data + 3;
 80126ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126f0:	3303      	adds	r3, #3
 80126f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80126f4:	e014      	b.n	8012720 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 80126f6:	2205      	movs	r2, #5
 80126f8:	4958      	ldr	r1, [pc, #352]	; (801285c <http_parse_request+0x250>)
 80126fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80126fc:	f00d f899 	bl	801f832 <strncmp>
 8012700:	4603      	mov	r3, r0
 8012702:	2b00      	cmp	r3, #0
 8012704:	d105      	bne.n	8012712 <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 8012706:	2301      	movs	r3, #1
 8012708:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 801270a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801270c:	3304      	adds	r3, #4
 801270e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012710:	e006      	b.n	8012720 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 8012712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012714:	3304      	adds	r3, #4
 8012716:	2200      	movs	r2, #0
 8012718:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 801271a:	f06f 030f 	mvn.w	r3, #15
 801271e:	e08a      	b.n	8012836 <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8012720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012722:	1c5a      	adds	r2, r3, #1
 8012724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012726:	1ad3      	subs	r3, r2, r3
 8012728:	b29b      	uxth	r3, r3
 801272a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801272c:	1ad3      	subs	r3, r2, r3
 801272e:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8012730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012732:	3301      	adds	r3, #1
 8012734:	8bfa      	ldrh	r2, [r7, #30]
 8012736:	494a      	ldr	r1, [pc, #296]	; (8012860 <http_parse_request+0x254>)
 8012738:	4618      	mov	r0, r3
 801273a:	f000 fbcb 	bl	8012ed4 <lwip_strnstr>
 801273e:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8012740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012742:	2b00      	cmp	r3, #0
 8012744:	d10c      	bne.n	8012760 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8012746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012748:	3301      	adds	r3, #1
 801274a:	8bfa      	ldrh	r2, [r7, #30]
 801274c:	4941      	ldr	r1, [pc, #260]	; (8012854 <http_parse_request+0x248>)
 801274e:	4618      	mov	r0, r3
 8012750:	f000 fbc0 	bl	8012ed4 <lwip_strnstr>
 8012754:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8012756:	2301      	movs	r3, #1
 8012758:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 801275a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801275c:	2b00      	cmp	r3, #0
 801275e:	d163      	bne.n	8012828 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8012760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012762:	3301      	adds	r3, #1
 8012764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012766:	1ad3      	subs	r3, r2, r3
 8012768:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 801276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801276c:	2b00      	cmp	r3, #0
 801276e:	d048      	beq.n	8012802 <http_parse_request+0x1f6>
 8012770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012774:	429a      	cmp	r2, r3
 8012776:	d944      	bls.n	8012802 <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8012778:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801277a:	461a      	mov	r2, r3
 801277c:	4939      	ldr	r1, [pc, #228]	; (8012864 <http_parse_request+0x258>)
 801277e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012780:	f000 fba8 	bl	8012ed4 <lwip_strnstr>
 8012784:	4603      	mov	r3, r0
 8012786:	2b00      	cmp	r3, #0
 8012788:	d03b      	beq.n	8012802 <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 801278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801278c:	3301      	adds	r3, #1
 801278e:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8012790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012792:	2200      	movs	r2, #0
 8012794:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8012796:	8bbb      	ldrh	r3, [r7, #28]
 8012798:	69ba      	ldr	r2, [r7, #24]
 801279a:	4413      	add	r3, r2
 801279c:	2200      	movs	r2, #0
 801279e:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 80127a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d026      	beq.n	80127f4 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 80127a6:	68bb      	ldr	r3, [r7, #8]
 80127a8:	6a1b      	ldr	r3, [r3, #32]
 80127aa:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 80127ac:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80127ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b0:	9301      	str	r3, [sp, #4]
 80127b2:	69bb      	ldr	r3, [r7, #24]
 80127b4:	9300      	str	r3, [sp, #0]
 80127b6:	4613      	mov	r3, r2
 80127b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80127ba:	68b9      	ldr	r1, [r7, #8]
 80127bc:	6978      	ldr	r0, [r7, #20]
 80127be:	f7ff fe43 	bl	8012448 <http_post_request>
 80127c2:	4603      	mov	r3, r0
 80127c4:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 80127c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d00a      	beq.n	80127e4 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 80127ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d0:	2220      	movs	r2, #32
 80127d2:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 80127d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127d6:	2220      	movs	r2, #32
 80127d8:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 80127da:	8bbb      	ldrh	r3, [r7, #28]
 80127dc:	69ba      	ldr	r2, [r7, #24]
 80127de:	4413      	add	r3, r2
 80127e0:	2220      	movs	r2, #32
 80127e2:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 80127e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80127e8:	f113 0f10 	cmn.w	r3, #16
 80127ec:	d01e      	beq.n	801282c <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 80127ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80127f2:	e020      	b.n	8012836 <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 80127f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127f6:	69b9      	ldr	r1, [r7, #24]
 80127f8:	68b8      	ldr	r0, [r7, #8]
 80127fa:	f000 f835 	bl	8012868 <http_find_file>
 80127fe:	4603      	mov	r3, r0
 8012800:	e019      	b.n	8012836 <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	6a1b      	ldr	r3, [r3, #32]
 8012806:	4618      	mov	r0, r3
 8012808:	f001 ff80 	bl	801470c <pbuf_clen>
 801280c:	4603      	mov	r3, r0
 801280e:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	6a1b      	ldr	r3, [r3, #32]
 8012814:	891b      	ldrh	r3, [r3, #8]
 8012816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801281a:	d209      	bcs.n	8012830 <http_parse_request+0x224>
 801281c:	8a3b      	ldrh	r3, [r7, #16]
 801281e:	2b05      	cmp	r3, #5
 8012820:	d806      	bhi.n	8012830 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8012822:	f06f 0304 	mvn.w	r3, #4
 8012826:	e006      	b.n	8012836 <http_parse_request+0x22a>
          goto badrequest;
 8012828:	bf00      	nop
 801282a:	e002      	b.n	8012832 <http_parse_request+0x226>
              goto badrequest;
 801282c:	bf00      	nop
 801282e:	e000      	b.n	8012832 <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 8012830:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8012832:	f06f 030f 	mvn.w	r3, #15
  }
}
 8012836:	4618      	mov	r0, r3
 8012838:	3740      	adds	r7, #64	; 0x40
 801283a:	46bd      	mov	sp, r7
 801283c:	bd80      	pop	{r7, pc}
 801283e:	bf00      	nop
 8012840:	080239c4 	.word	0x080239c4
 8012844:	08023ab0 	.word	0x08023ab0
 8012848:	08023a0c 	.word	0x08023a0c
 801284c:	08023abc 	.word	0x08023abc
 8012850:	200042ec 	.word	0x200042ec
 8012854:	08023aac 	.word	0x08023aac
 8012858:	08023ac8 	.word	0x08023ac8
 801285c:	08023ad0 	.word	0x08023ad0
 8012860:	08023ad8 	.word	0x08023ad8
 8012864:	08023a90 	.word	0x08023a90

08012868 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b092      	sub	sp, #72	; 0x48
 801286c:	af02      	add	r7, sp, #8
 801286e:	60f8      	str	r0, [r7, #12]
 8012870:	60b9      	str	r1, [r7, #8]
 8012872:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8012874:	2300      	movs	r3, #0
 8012876:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8012878:	2300      	movs	r3, #0
 801287a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 801287c:	2300      	movs	r3, #0
 801287e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8012882:	68bb      	ldr	r3, [r7, #8]
 8012884:	4618      	mov	r0, r3
 8012886:	f7ed fcad 	bl	80001e4 <strlen>
 801288a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 801288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801288e:	2b00      	cmp	r3, #0
 8012890:	d06b      	beq.n	801296a <http_find_file+0x102>
 8012892:	68ba      	ldr	r2, [r7, #8]
 8012894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012896:	3b01      	subs	r3, #1
 8012898:	4413      	add	r3, r2
 801289a:	781b      	ldrb	r3, [r3, #0]
 801289c:	2b2f      	cmp	r3, #47	; 0x2f
 801289e:	d164      	bne.n	801296a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80128a0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80128a2:	4a53      	ldr	r2, [pc, #332]	; (80129f0 <http_find_file+0x188>)
 80128a4:	4293      	cmp	r3, r2
 80128a6:	d102      	bne.n	80128ae <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80128a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128aa:	2b01      	cmp	r3, #1
 80128ac:	d15d      	bne.n	801296a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80128ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128b0:	3b01      	subs	r3, #1
 80128b2:	2b3f      	cmp	r3, #63	; 0x3f
 80128b4:	bf28      	it	cs
 80128b6:	233f      	movcs	r3, #63	; 0x3f
 80128b8:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 80128ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d00a      	beq.n	80128d6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 80128c0:	68bb      	ldr	r3, [r7, #8]
 80128c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128c4:	4619      	mov	r1, r3
 80128c6:	484a      	ldr	r0, [pc, #296]	; (80129f0 <http_find_file+0x188>)
 80128c8:	f00c fc4c 	bl	801f164 <memcpy>
      http_uri_buf[copy_len] = 0;
 80128cc:	4a48      	ldr	r2, [pc, #288]	; (80129f0 <http_find_file+0x188>)
 80128ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128d0:	4413      	add	r3, r2
 80128d2:	2200      	movs	r2, #0
 80128d4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80128d6:	2300      	movs	r3, #0
 80128d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80128da:	e043      	b.n	8012964 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 80128dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d028      	beq.n	8012934 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 80128e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128e4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80128e8:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 80128ea:	6a3b      	ldr	r3, [r7, #32]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d01e      	beq.n	801292e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80128f0:	4a40      	ldr	r2, [pc, #256]	; (80129f4 <http_find_file+0x18c>)
 80128f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80128f8:	4618      	mov	r0, r3
 80128fa:	f7ed fc73 	bl	80001e4 <strlen>
 80128fe:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8012900:	69fa      	ldr	r2, [r7, #28]
 8012902:	6a3b      	ldr	r3, [r7, #32]
 8012904:	4293      	cmp	r3, r2
 8012906:	bf28      	it	cs
 8012908:	4613      	movcs	r3, r2
 801290a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 801290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801290e:	4a38      	ldr	r2, [pc, #224]	; (80129f0 <http_find_file+0x188>)
 8012910:	1898      	adds	r0, r3, r2
 8012912:	4a38      	ldr	r2, [pc, #224]	; (80129f4 <http_find_file+0x18c>)
 8012914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012916:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801291a:	69ba      	ldr	r2, [r7, #24]
 801291c:	4619      	mov	r1, r3
 801291e:	f00c fc21 	bl	801f164 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8012922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012924:	69bb      	ldr	r3, [r7, #24]
 8012926:	4413      	add	r3, r2
 8012928:	4a31      	ldr	r2, [pc, #196]	; (80129f0 <http_find_file+0x188>)
 801292a:	2100      	movs	r1, #0
 801292c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 801292e:	4b30      	ldr	r3, [pc, #192]	; (80129f0 <http_find_file+0x188>)
 8012930:	633b      	str	r3, [r7, #48]	; 0x30
 8012932:	e004      	b.n	801293e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8012934:	4a2f      	ldr	r2, [pc, #188]	; (80129f4 <http_find_file+0x18c>)
 8012936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012938:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801293c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012942:	4618      	mov	r0, r3
 8012944:	f7ff faba 	bl	8011ebc <fs_open>
 8012948:	4603      	mov	r3, r0
 801294a:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 801294c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d104      	bne.n	801295e <http_find_file+0xf6>
        uri = file_name;
 8012954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012956:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 801295c:	e005      	b.n	801296a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 801295e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012960:	3301      	adds	r3, #1
 8012962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012966:	2b04      	cmp	r3, #4
 8012968:	d9b8      	bls.n	80128dc <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 801296a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801296c:	2b00      	cmp	r3, #0
 801296e:	d124      	bne.n	80129ba <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8012970:	68bb      	ldr	r3, [r7, #8]
 8012972:	213f      	movs	r1, #63	; 0x3f
 8012974:	4618      	mov	r0, r3
 8012976:	f00c ff4f 	bl	801f818 <strchr>
 801297a:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 801297c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801297e:	2b00      	cmp	r3, #0
 8012980:	d005      	beq.n	801298e <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8012982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012984:	2200      	movs	r2, #0
 8012986:	701a      	strb	r2, [r3, #0]
      params++;
 8012988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801298a:	3301      	adds	r3, #1
 801298c:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	68ba      	ldr	r2, [r7, #8]
 8012992:	4611      	mov	r1, r2
 8012994:	4618      	mov	r0, r3
 8012996:	f7ff fa91 	bl	8011ebc <fs_open>
 801299a:	4603      	mov	r3, r0
 801299c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 801299e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d102      	bne.n	80129ac <http_find_file+0x144>
      file = &hs->file_handle;
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80129aa:	e006      	b.n	80129ba <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 80129ac:	f107 0308 	add.w	r3, r7, #8
 80129b0:	4619      	mov	r1, r3
 80129b2:	68f8      	ldr	r0, [r7, #12]
 80129b4:	f7ff fcb0 	bl	8012318 <http_get_404_file>
 80129b8:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80129ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d106      	bne.n	80129ce <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80129c0:	f107 0308 	add.w	r3, r7, #8
 80129c4:	4619      	mov	r1, r3
 80129c6:	68f8      	ldr	r0, [r7, #12]
 80129c8:	f7ff fca6 	bl	8012318 <http_get_404_file>
 80129cc:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80129ce:	68ba      	ldr	r2, [r7, #8]
 80129d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129d2:	9301      	str	r3, [sp, #4]
 80129d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129d8:	9300      	str	r3, [sp, #0]
 80129da:	4613      	mov	r3, r2
 80129dc:	687a      	ldr	r2, [r7, #4]
 80129de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80129e0:	68f8      	ldr	r0, [r7, #12]
 80129e2:	f000 f809 	bl	80129f8 <http_init_file>
 80129e6:	4603      	mov	r3, r0
}
 80129e8:	4618      	mov	r0, r3
 80129ea:	3740      	adds	r7, #64	; 0x40
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bd80      	pop	{r7, pc}
 80129f0:	200046ec 	.word	0x200046ec
 80129f4:	080274f8 	.word	0x080274f8

080129f8 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b086      	sub	sp, #24
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	60f8      	str	r0, [r7, #12]
 8012a00:	60b9      	str	r1, [r7, #8]
 8012a02:	607a      	str	r2, [r7, #4]
 8012a04:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8012a06:	68bb      	ldr	r3, [r7, #8]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d068      	beq.n	8012ade <http_init_file+0xe6>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d106      	bne.n	8012a22 <http_init_file+0x2a>
 8012a14:	4b3b      	ldr	r3, [pc, #236]	; (8012b04 <http_init_file+0x10c>)
 8012a16:	f640 120b 	movw	r2, #2315	; 0x90b
 8012a1a:	493b      	ldr	r1, [pc, #236]	; (8012b08 <http_init_file+0x110>)
 8012a1c:	483b      	ldr	r0, [pc, #236]	; (8012b0c <http_init_file+0x114>)
 8012a1e:	f00c fe4f 	bl	801f6c0 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	68ba      	ldr	r2, [r7, #8]
 8012a26:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	681a      	ldr	r2, [r3, #0]
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8012a30:	68bb      	ldr	r3, [r7, #8]
 8012a32:	685b      	ldr	r3, [r3, #4]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	da06      	bge.n	8012a46 <http_init_file+0x4e>
 8012a38:	4b32      	ldr	r3, [pc, #200]	; (8012b04 <http_init_file+0x10c>)
 8012a3a:	f640 1234 	movw	r2, #2356	; 0x934
 8012a3e:	4934      	ldr	r1, [pc, #208]	; (8012b10 <http_init_file+0x118>)
 8012a40:	4832      	ldr	r0, [pc, #200]	; (8012b0c <http_init_file+0x114>)
 8012a42:	f00c fe3d 	bl	801f6c0 <iprintf>
#if LWIP_HTTPD_CUSTOM_FILES
    if (file->is_custom_file && (file->data == NULL)) {
 8012a46:	68bb      	ldr	r3, [r7, #8]
 8012a48:	7c5b      	ldrb	r3, [r3, #17]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d007      	beq.n	8012a5e <http_init_file+0x66>
 8012a4e:	68bb      	ldr	r3, [r7, #8]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d103      	bne.n	8012a5e <http_init_file+0x66>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	2200      	movs	r2, #0
 8012a5a:	625a      	str	r2, [r3, #36]	; 0x24
 8012a5c:	e004      	b.n	8012a68 <http_init_file+0x70>
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	685b      	ldr	r3, [r3, #4]
 8012a62:	461a      	mov	r2, r3
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	695b      	ldr	r3, [r3, #20]
 8012a74:	7c1b      	ldrb	r3, [r3, #16]
 8012a76:	f003 0301 	and.w	r3, r3, #1
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d106      	bne.n	8012a8c <http_init_file+0x94>
 8012a7e:	4b21      	ldr	r3, [pc, #132]	; (8012b04 <http_init_file+0x10c>)
 8012a80:	f640 1243 	movw	r2, #2371	; 0x943
 8012a84:	4923      	ldr	r1, [pc, #140]	; (8012b14 <http_init_file+0x11c>)
 8012a86:	4821      	ldr	r0, [pc, #132]	; (8012b0c <http_init_file+0x114>)
 8012a88:	f00c fe1a 	bl	801f6c0 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d032      	beq.n	8012af8 <http_init_file+0x100>
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	695b      	ldr	r3, [r3, #20]
 8012a96:	7c1b      	ldrb	r3, [r3, #16]
 8012a98:	f003 0301 	and.w	r3, r3, #1
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d02b      	beq.n	8012af8 <http_init_file+0x100>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	6998      	ldr	r0, [r3, #24]
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aa8:	461a      	mov	r2, r3
 8012aaa:	491b      	ldr	r1, [pc, #108]	; (8012b18 <http_init_file+0x120>)
 8012aac:	f000 fa12 	bl	8012ed4 <lwip_strnstr>
 8012ab0:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d01f      	beq.n	8012af8 <http_init_file+0x100>
        int diff = file_start + 4 - hs->file;
 8012ab8:	697b      	ldr	r3, [r7, #20]
 8012aba:	1d1a      	adds	r2, r3, #4
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	699b      	ldr	r3, [r3, #24]
 8012ac0:	1ad3      	subs	r3, r2, r3
 8012ac2:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	699a      	ldr	r2, [r3, #24]
 8012ac8:	693b      	ldr	r3, [r7, #16]
 8012aca:	441a      	add	r2, r3
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ad4:	693b      	ldr	r3, [r7, #16]
 8012ad6:	1ad2      	subs	r2, r2, r3
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	625a      	str	r2, [r3, #36]	; 0x24
 8012adc:	e00c      	b.n	8012af8 <http_init_file+0x100>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	2200      	movs	r2, #0
 8012aee:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	2200      	movs	r2, #0
 8012af4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8012af8:	2300      	movs	r3, #0
}
 8012afa:	4618      	mov	r0, r3
 8012afc:	3718      	adds	r7, #24
 8012afe:	46bd      	mov	sp, r7
 8012b00:	bd80      	pop	{r7, pc}
 8012b02:	bf00      	nop
 8012b04:	080239c4 	.word	0x080239c4
 8012b08:	08023adc 	.word	0x08023adc
 8012b0c:	08023a0c 	.word	0x08023a0c
 8012b10:	08023af0 	.word	0x08023af0
 8012b14:	08023b10 	.word	0x08023b10
 8012b18:	08023a90 	.word	0x08023a90

08012b1c <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b084      	sub	sp, #16
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
 8012b24:	460b      	mov	r3, r1
 8012b26:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d002      	beq.n	8012b38 <http_err+0x1c>
    http_state_free(hs);
 8012b32:	68f8      	ldr	r0, [r7, #12]
 8012b34:	f7ff fa6b 	bl	801200e <http_state_free>
  }
}
 8012b38:	bf00      	nop
 8012b3a:	3710      	adds	r7, #16
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	bd80      	pop	{r7, pc}

08012b40 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b086      	sub	sp, #24
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	60f8      	str	r0, [r7, #12]
 8012b48:	60b9      	str	r1, [r7, #8]
 8012b4a:	4613      	mov	r3, r2
 8012b4c:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8012b52:	697b      	ldr	r3, [r7, #20]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d101      	bne.n	8012b5c <http_sent+0x1c>
    return ERR_OK;
 8012b58:	2300      	movs	r3, #0
 8012b5a:	e008      	b.n	8012b6e <http_sent+0x2e>
  }

  hs->retries = 0;
 8012b5c:	697b      	ldr	r3, [r7, #20]
 8012b5e:	2200      	movs	r2, #0
 8012b60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8012b64:	6979      	ldr	r1, [r7, #20]
 8012b66:	68b8      	ldr	r0, [r7, #8]
 8012b68:	f7ff fb9f 	bl	80122aa <http_send>

  return ERR_OK;
 8012b6c:	2300      	movs	r3, #0
}
 8012b6e:	4618      	mov	r0, r3
 8012b70:	3718      	adds	r7, #24
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd80      	pop	{r7, pc}

08012b76 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8012b76:	b580      	push	{r7, lr}
 8012b78:	b084      	sub	sp, #16
 8012b7a:	af00      	add	r7, sp, #0
 8012b7c:	6078      	str	r0, [r7, #4]
 8012b7e:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d107      	bne.n	8012b9a <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8012b8a:	2100      	movs	r1, #0
 8012b8c:	6838      	ldr	r0, [r7, #0]
 8012b8e:	f7ff fb0b 	bl	80121a8 <http_close_conn>
 8012b92:	4603      	mov	r3, r0
 8012b94:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8012b96:	2300      	movs	r3, #0
 8012b98:	e021      	b.n	8012bde <http_poll+0x68>
  } else {
    hs->retries++;
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ba0:	3301      	adds	r3, #1
 8012ba2:	b2da      	uxtb	r2, r3
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012bb0:	2b04      	cmp	r3, #4
 8012bb2:	d105      	bne.n	8012bc0 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8012bb4:	68f9      	ldr	r1, [r7, #12]
 8012bb6:	6838      	ldr	r0, [r7, #0]
 8012bb8:	f7ff faf6 	bl	80121a8 <http_close_conn>
      return ERR_OK;
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	e00e      	b.n	8012bde <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	695b      	ldr	r3, [r3, #20]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d009      	beq.n	8012bdc <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8012bc8:	68f9      	ldr	r1, [r7, #12]
 8012bca:	6838      	ldr	r0, [r7, #0]
 8012bcc:	f7ff fb6d 	bl	80122aa <http_send>
 8012bd0:	4603      	mov	r3, r0
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d002      	beq.n	8012bdc <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8012bd6:	6838      	ldr	r0, [r7, #0]
 8012bd8:	f007 f8f0 	bl	8019dbc <tcp_output>
      }
    }
  }

  return ERR_OK;
 8012bdc:	2300      	movs	r3, #0
}
 8012bde:	4618      	mov	r0, r3
 8012be0:	3710      	adds	r7, #16
 8012be2:	46bd      	mov	sp, r7
 8012be4:	bd80      	pop	{r7, pc}
	...

08012be8 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b086      	sub	sp, #24
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	60f8      	str	r0, [r7, #12]
 8012bf0:	60b9      	str	r1, [r7, #8]
 8012bf2:	607a      	str	r2, [r7, #4]
 8012bf4:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8012bfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d105      	bne.n	8012c0e <http_recv+0x26>
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d002      	beq.n	8012c0e <http_recv+0x26>
 8012c08:	697b      	ldr	r3, [r7, #20]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d111      	bne.n	8012c32 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d008      	beq.n	8012c26 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	891b      	ldrh	r3, [r3, #8]
 8012c18:	4619      	mov	r1, r3
 8012c1a:	68b8      	ldr	r0, [r7, #8]
 8012c1c:	f002 fcc2 	bl	80155a4 <tcp_recved>
      pbuf_free(p);
 8012c20:	6878      	ldr	r0, [r7, #4]
 8012c22:	f001 fce5 	bl	80145f0 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8012c26:	6979      	ldr	r1, [r7, #20]
 8012c28:	68b8      	ldr	r0, [r7, #8]
 8012c2a:	f7ff fabd 	bl	80121a8 <http_close_conn>
    return ERR_OK;
 8012c2e:	2300      	movs	r3, #0
 8012c30:	e06f      	b.n	8012d12 <http_recv+0x12a>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	891b      	ldrh	r3, [r3, #8]
 8012c36:	4619      	mov	r1, r3
 8012c38:	68b8      	ldr	r0, [r7, #8]
 8012c3a:	f002 fcb3 	bl	80155a4 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 8012c3e:	697b      	ldr	r3, [r7, #20]
 8012c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d011      	beq.n	8012c6a <http_recv+0x82>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 8012c46:	697b      	ldr	r3, [r7, #20]
 8012c48:	2200      	movs	r2, #0
 8012c4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 8012c4e:	6879      	ldr	r1, [r7, #4]
 8012c50:	6978      	ldr	r0, [r7, #20]
 8012c52:	f7ff fbbf 	bl	80123d4 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 8012c56:	697b      	ldr	r3, [r7, #20]
 8012c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d103      	bne.n	8012c66 <http_recv+0x7e>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 8012c5e:	6979      	ldr	r1, [r7, #20]
 8012c60:	68b8      	ldr	r0, [r7, #8]
 8012c62:	f7ff fb22 	bl	80122aa <http_send>
    }
    return ERR_OK;
 8012c66:	2300      	movs	r3, #0
 8012c68:	e053      	b.n	8012d12 <http_recv+0x12a>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8012c6a:	697b      	ldr	r3, [r7, #20]
 8012c6c:	695b      	ldr	r3, [r3, #20]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d14b      	bne.n	8012d0a <http_recv+0x122>
      err_t parsed = http_parse_request(p, hs, pcb);
 8012c72:	68ba      	ldr	r2, [r7, #8]
 8012c74:	6979      	ldr	r1, [r7, #20]
 8012c76:	6878      	ldr	r0, [r7, #4]
 8012c78:	f7ff fcc8 	bl	801260c <http_parse_request>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8012c80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d015      	beq.n	8012cb4 <http_recv+0xcc>
 8012c88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012c8c:	f113 0f05 	cmn.w	r3, #5
 8012c90:	d010      	beq.n	8012cb4 <http_recv+0xcc>
 8012c92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012c96:	f113 0f10 	cmn.w	r3, #16
 8012c9a:	d00b      	beq.n	8012cb4 <http_recv+0xcc>
 8012c9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012ca0:	f113 0f08 	cmn.w	r3, #8
 8012ca4:	d006      	beq.n	8012cb4 <http_recv+0xcc>
 8012ca6:	4b1d      	ldr	r3, [pc, #116]	; (8012d1c <http_recv+0x134>)
 8012ca8:	f640 2204 	movw	r2, #2564	; 0xa04
 8012cac:	491c      	ldr	r1, [pc, #112]	; (8012d20 <http_recv+0x138>)
 8012cae:	481d      	ldr	r0, [pc, #116]	; (8012d24 <http_recv+0x13c>)
 8012cb0:	f00c fd06 	bl	801f6c0 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8012cb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012cb8:	f113 0f05 	cmn.w	r3, #5
 8012cbc:	d00b      	beq.n	8012cd6 <http_recv+0xee>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	6a1b      	ldr	r3, [r3, #32]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d007      	beq.n	8012cd6 <http_recv+0xee>
          pbuf_free(hs->req);
 8012cc6:	697b      	ldr	r3, [r7, #20]
 8012cc8:	6a1b      	ldr	r3, [r3, #32]
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f001 fc90 	bl	80145f0 <pbuf_free>
          hs->req = NULL;
 8012cd0:	697b      	ldr	r3, [r7, #20]
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	f001 fc8a 	bl	80145f0 <pbuf_free>
      if (parsed == ERR_OK) {
 8012cdc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d108      	bne.n	8012cf6 <http_recv+0x10e>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 8012ce4:	697b      	ldr	r3, [r7, #20]
 8012ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d111      	bne.n	8012d10 <http_recv+0x128>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8012cec:	6979      	ldr	r1, [r7, #20]
 8012cee:	68b8      	ldr	r0, [r7, #8]
 8012cf0:	f7ff fadb 	bl	80122aa <http_send>
 8012cf4:	e00c      	b.n	8012d10 <http_recv+0x128>
        }
      } else if (parsed == ERR_ARG) {
 8012cf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012cfa:	f113 0f10 	cmn.w	r3, #16
 8012cfe:	d107      	bne.n	8012d10 <http_recv+0x128>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8012d00:	6979      	ldr	r1, [r7, #20]
 8012d02:	68b8      	ldr	r0, [r7, #8]
 8012d04:	f7ff fa50 	bl	80121a8 <http_close_conn>
 8012d08:	e002      	b.n	8012d10 <http_recv+0x128>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8012d0a:	6878      	ldr	r0, [r7, #4]
 8012d0c:	f001 fc70 	bl	80145f0 <pbuf_free>
    }
  }
  return ERR_OK;
 8012d10:	2300      	movs	r3, #0
}
 8012d12:	4618      	mov	r0, r3
 8012d14:	3718      	adds	r7, #24
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bd80      	pop	{r7, pc}
 8012d1a:	bf00      	nop
 8012d1c:	080239c4 	.word	0x080239c4
 8012d20:	08023b3c 	.word	0x08023b3c
 8012d24:	08023a0c 	.word	0x08023a0c

08012d28 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b086      	sub	sp, #24
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	60f8      	str	r0, [r7, #12]
 8012d30:	60b9      	str	r1, [r7, #8]
 8012d32:	4613      	mov	r3, r2
 8012d34:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8012d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d102      	bne.n	8012d44 <http_accept+0x1c>
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d102      	bne.n	8012d4a <http_accept+0x22>
    return ERR_VAL;
 8012d44:	f06f 0305 	mvn.w	r3, #5
 8012d48:	e025      	b.n	8012d96 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8012d4a:	2101      	movs	r1, #1
 8012d4c:	68b8      	ldr	r0, [r7, #8]
 8012d4e:	f003 f90d 	bl	8015f6c <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8012d52:	f7ff f92a 	bl	8011faa <http_state_alloc>
 8012d56:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8012d58:	697b      	ldr	r3, [r7, #20]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d102      	bne.n	8012d64 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8012d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8012d62:	e018      	b.n	8012d96 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8012d64:	697b      	ldr	r3, [r7, #20]
 8012d66:	68ba      	ldr	r2, [r7, #8]
 8012d68:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8012d6a:	6979      	ldr	r1, [r7, #20]
 8012d6c:	68b8      	ldr	r0, [r7, #8]
 8012d6e:	f003 fafd 	bl	801636c <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8012d72:	490b      	ldr	r1, [pc, #44]	; (8012da0 <http_accept+0x78>)
 8012d74:	68b8      	ldr	r0, [r7, #8]
 8012d76:	f003 fb0b 	bl	8016390 <tcp_recv>
  altcp_err(pcb, http_err);
 8012d7a:	490a      	ldr	r1, [pc, #40]	; (8012da4 <http_accept+0x7c>)
 8012d7c:	68b8      	ldr	r0, [r7, #8]
 8012d7e:	f003 fb4b 	bl	8016418 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8012d82:	2204      	movs	r2, #4
 8012d84:	4908      	ldr	r1, [pc, #32]	; (8012da8 <http_accept+0x80>)
 8012d86:	68b8      	ldr	r0, [r7, #8]
 8012d88:	f003 fb80 	bl	801648c <tcp_poll>
  altcp_sent(pcb, http_sent);
 8012d8c:	4907      	ldr	r1, [pc, #28]	; (8012dac <http_accept+0x84>)
 8012d8e:	68b8      	ldr	r0, [r7, #8]
 8012d90:	f003 fb20 	bl	80163d4 <tcp_sent>

  return ERR_OK;
 8012d94:	2300      	movs	r3, #0
}
 8012d96:	4618      	mov	r0, r3
 8012d98:	3718      	adds	r7, #24
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	bd80      	pop	{r7, pc}
 8012d9e:	bf00      	nop
 8012da0:	08012be9 	.word	0x08012be9
 8012da4:	08012b1d 	.word	0x08012b1d
 8012da8:	08012b77 	.word	0x08012b77
 8012dac:	08012b41 	.word	0x08012b41

08012db0 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b084      	sub	sp, #16
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
 8012db8:	460b      	mov	r3, r1
 8012dba:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d029      	beq.n	8012e16 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8012dc2:	2101      	movs	r1, #1
 8012dc4:	6878      	ldr	r0, [r7, #4]
 8012dc6:	f003 f8d1 	bl	8015f6c <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8012dca:	887b      	ldrh	r3, [r7, #2]
 8012dcc:	461a      	mov	r2, r3
 8012dce:	4914      	ldr	r1, [pc, #80]	; (8012e20 <httpd_init_pcb+0x70>)
 8012dd0:	6878      	ldr	r0, [r7, #4]
 8012dd2:	f002 fa19 	bl	8015208 <tcp_bind>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8012dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d006      	beq.n	8012df0 <httpd_init_pcb+0x40>
 8012de2:	4b10      	ldr	r3, [pc, #64]	; (8012e24 <httpd_init_pcb+0x74>)
 8012de4:	f640 2257 	movw	r2, #2647	; 0xa57
 8012de8:	490f      	ldr	r1, [pc, #60]	; (8012e28 <httpd_init_pcb+0x78>)
 8012dea:	4810      	ldr	r0, [pc, #64]	; (8012e2c <httpd_init_pcb+0x7c>)
 8012dec:	f00c fc68 	bl	801f6c0 <iprintf>
    pcb = altcp_listen(pcb);
 8012df0:	21ff      	movs	r1, #255	; 0xff
 8012df2:	6878      	ldr	r0, [r7, #4]
 8012df4:	f002 fac0 	bl	8015378 <tcp_listen_with_backlog>
 8012df8:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d106      	bne.n	8012e0e <httpd_init_pcb+0x5e>
 8012e00:	4b08      	ldr	r3, [pc, #32]	; (8012e24 <httpd_init_pcb+0x74>)
 8012e02:	f640 2259 	movw	r2, #2649	; 0xa59
 8012e06:	490a      	ldr	r1, [pc, #40]	; (8012e30 <httpd_init_pcb+0x80>)
 8012e08:	4808      	ldr	r0, [pc, #32]	; (8012e2c <httpd_init_pcb+0x7c>)
 8012e0a:	f00c fc59 	bl	801f6c0 <iprintf>
    altcp_accept(pcb, http_accept);
 8012e0e:	4909      	ldr	r1, [pc, #36]	; (8012e34 <httpd_init_pcb+0x84>)
 8012e10:	6878      	ldr	r0, [r7, #4]
 8012e12:	f003 fb23 	bl	801645c <tcp_accept>
  }
}
 8012e16:	bf00      	nop
 8012e18:	3710      	adds	r7, #16
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	bd80      	pop	{r7, pc}
 8012e1e:	bf00      	nop
 8012e20:	08027630 	.word	0x08027630
 8012e24:	080239c4 	.word	0x080239c4
 8012e28:	08023b68 	.word	0x08023b68
 8012e2c:	08023a0c 	.word	0x08023a0c
 8012e30:	08023b84 	.word	0x08023b84
 8012e34:	08012d29 	.word	0x08012d29

08012e38 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b082      	sub	sp, #8
 8012e3c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8012e3e:	202e      	movs	r0, #46	; 0x2e
 8012e40:	f003 fa86 	bl	8016350 <tcp_new_ip_type>
 8012e44:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d106      	bne.n	8012e5a <httpd_init+0x22>
 8012e4c:	4b07      	ldr	r3, [pc, #28]	; (8012e6c <httpd_init+0x34>)
 8012e4e:	f640 2272 	movw	r2, #2674	; 0xa72
 8012e52:	4907      	ldr	r1, [pc, #28]	; (8012e70 <httpd_init+0x38>)
 8012e54:	4807      	ldr	r0, [pc, #28]	; (8012e74 <httpd_init+0x3c>)
 8012e56:	f00c fc33 	bl	801f6c0 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8012e5a:	2150      	movs	r1, #80	; 0x50
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f7ff ffa7 	bl	8012db0 <httpd_init_pcb>
}
 8012e62:	bf00      	nop
 8012e64:	3708      	adds	r7, #8
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bd80      	pop	{r7, pc}
 8012e6a:	bf00      	nop
 8012e6c:	080239c4 	.word	0x080239c4
 8012e70:	08023ba4 	.word	0x08023ba4
 8012e74:	08023a0c 	.word	0x08023a0c

08012e78 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8012e78:	b480      	push	{r7}
 8012e7a:	b083      	sub	sp, #12
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	4603      	mov	r3, r0
 8012e80:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012e82:	88fb      	ldrh	r3, [r7, #6]
 8012e84:	021b      	lsls	r3, r3, #8
 8012e86:	b21a      	sxth	r2, r3
 8012e88:	88fb      	ldrh	r3, [r7, #6]
 8012e8a:	0a1b      	lsrs	r3, r3, #8
 8012e8c:	b29b      	uxth	r3, r3
 8012e8e:	b21b      	sxth	r3, r3
 8012e90:	4313      	orrs	r3, r2
 8012e92:	b21b      	sxth	r3, r3
 8012e94:	b29b      	uxth	r3, r3
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	370c      	adds	r7, #12
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea0:	4770      	bx	lr

08012ea2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012ea2:	b480      	push	{r7}
 8012ea4:	b083      	sub	sp, #12
 8012ea6:	af00      	add	r7, sp, #0
 8012ea8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	061a      	lsls	r2, r3, #24
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	021b      	lsls	r3, r3, #8
 8012eb2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012eb6:	431a      	orrs	r2, r3
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	0a1b      	lsrs	r3, r3, #8
 8012ebc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012ec0:	431a      	orrs	r2, r3
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	0e1b      	lsrs	r3, r3, #24
 8012ec6:	4313      	orrs	r3, r2
}
 8012ec8:	4618      	mov	r0, r3
 8012eca:	370c      	adds	r7, #12
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed2:	4770      	bx	lr

08012ed4 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b086      	sub	sp, #24
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	60f8      	str	r0, [r7, #12]
 8012edc:	60b9      	str	r1, [r7, #8]
 8012ede:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8012ee0:	68b8      	ldr	r0, [r7, #8]
 8012ee2:	f7ed f97f 	bl	80001e4 <strlen>
 8012ee6:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8012ee8:	693b      	ldr	r3, [r7, #16]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d101      	bne.n	8012ef2 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	e022      	b.n	8012f38 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	617b      	str	r3, [r7, #20]
 8012ef6:	e012      	b.n	8012f1e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8012ef8:	697b      	ldr	r3, [r7, #20]
 8012efa:	781a      	ldrb	r2, [r3, #0]
 8012efc:	68bb      	ldr	r3, [r7, #8]
 8012efe:	781b      	ldrb	r3, [r3, #0]
 8012f00:	429a      	cmp	r2, r3
 8012f02:	d109      	bne.n	8012f18 <lwip_strnstr+0x44>
 8012f04:	693a      	ldr	r2, [r7, #16]
 8012f06:	68b9      	ldr	r1, [r7, #8]
 8012f08:	6978      	ldr	r0, [r7, #20]
 8012f0a:	f00c fc92 	bl	801f832 <strncmp>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d101      	bne.n	8012f18 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8012f14:	697b      	ldr	r3, [r7, #20]
 8012f16:	e00f      	b.n	8012f38 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	3301      	adds	r3, #1
 8012f1c:	617b      	str	r3, [r7, #20]
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	781b      	ldrb	r3, [r3, #0]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d007      	beq.n	8012f36 <lwip_strnstr+0x62>
 8012f26:	697a      	ldr	r2, [r7, #20]
 8012f28:	693b      	ldr	r3, [r7, #16]
 8012f2a:	441a      	add	r2, r3
 8012f2c:	68f9      	ldr	r1, [r7, #12]
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	440b      	add	r3, r1
 8012f32:	429a      	cmp	r2, r3
 8012f34:	d9e0      	bls.n	8012ef8 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8012f36:	2300      	movs	r3, #0
}
 8012f38:	4618      	mov	r0, r3
 8012f3a:	3718      	adds	r7, #24
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}

08012f40 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b082      	sub	sp, #8
 8012f44:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012f46:	2300      	movs	r3, #0
 8012f48:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8012f4a:	f00b fa53 	bl	801e3f4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8012f4e:	f000 f8d5 	bl	80130fc <mem_init>
  memp_init();
 8012f52:	f000 fc31 	bl	80137b8 <memp_init>
  pbuf_init();
  netif_init();
 8012f56:	f000 fcf7 	bl	8013948 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8012f5a:	f008 f81f 	bl	801af9c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8012f5e:	f001 fdf1 	bl	8014b44 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012f62:	f007 ff61 	bl	801ae28 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8012f66:	bf00      	nop
 8012f68:	3708      	adds	r7, #8
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}
	...

08012f70 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012f70:	b480      	push	{r7}
 8012f72:	b083      	sub	sp, #12
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	4603      	mov	r3, r0
 8012f78:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8012f7a:	4b05      	ldr	r3, [pc, #20]	; (8012f90 <ptr_to_mem+0x20>)
 8012f7c:	681a      	ldr	r2, [r3, #0]
 8012f7e:	88fb      	ldrh	r3, [r7, #6]
 8012f80:	4413      	add	r3, r2
}
 8012f82:	4618      	mov	r0, r3
 8012f84:	370c      	adds	r7, #12
 8012f86:	46bd      	mov	sp, r7
 8012f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8c:	4770      	bx	lr
 8012f8e:	bf00      	nop
 8012f90:	2000472c 	.word	0x2000472c

08012f94 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012f94:	b480      	push	{r7}
 8012f96:	b083      	sub	sp, #12
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012f9c:	4b05      	ldr	r3, [pc, #20]	; (8012fb4 <mem_to_ptr+0x20>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	687a      	ldr	r2, [r7, #4]
 8012fa2:	1ad3      	subs	r3, r2, r3
 8012fa4:	b29b      	uxth	r3, r3
}
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	370c      	adds	r7, #12
 8012faa:	46bd      	mov	sp, r7
 8012fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb0:	4770      	bx	lr
 8012fb2:	bf00      	nop
 8012fb4:	2000472c 	.word	0x2000472c

08012fb8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8012fb8:	b590      	push	{r4, r7, lr}
 8012fba:	b085      	sub	sp, #20
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012fc0:	4b45      	ldr	r3, [pc, #276]	; (80130d8 <plug_holes+0x120>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	687a      	ldr	r2, [r7, #4]
 8012fc6:	429a      	cmp	r2, r3
 8012fc8:	d206      	bcs.n	8012fd8 <plug_holes+0x20>
 8012fca:	4b44      	ldr	r3, [pc, #272]	; (80130dc <plug_holes+0x124>)
 8012fcc:	f240 12df 	movw	r2, #479	; 0x1df
 8012fd0:	4943      	ldr	r1, [pc, #268]	; (80130e0 <plug_holes+0x128>)
 8012fd2:	4844      	ldr	r0, [pc, #272]	; (80130e4 <plug_holes+0x12c>)
 8012fd4:	f00c fb74 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012fd8:	4b43      	ldr	r3, [pc, #268]	; (80130e8 <plug_holes+0x130>)
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	687a      	ldr	r2, [r7, #4]
 8012fde:	429a      	cmp	r2, r3
 8012fe0:	d306      	bcc.n	8012ff0 <plug_holes+0x38>
 8012fe2:	4b3e      	ldr	r3, [pc, #248]	; (80130dc <plug_holes+0x124>)
 8012fe4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012fe8:	4940      	ldr	r1, [pc, #256]	; (80130ec <plug_holes+0x134>)
 8012fea:	483e      	ldr	r0, [pc, #248]	; (80130e4 <plug_holes+0x12c>)
 8012fec:	f00c fb68 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	791b      	ldrb	r3, [r3, #4]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d006      	beq.n	8013006 <plug_holes+0x4e>
 8012ff8:	4b38      	ldr	r3, [pc, #224]	; (80130dc <plug_holes+0x124>)
 8012ffa:	f240 12e1 	movw	r2, #481	; 0x1e1
 8012ffe:	493c      	ldr	r1, [pc, #240]	; (80130f0 <plug_holes+0x138>)
 8013000:	4838      	ldr	r0, [pc, #224]	; (80130e4 <plug_holes+0x12c>)
 8013002:	f00c fb5d 	bl	801f6c0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	881b      	ldrh	r3, [r3, #0]
 801300a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801300e:	d906      	bls.n	801301e <plug_holes+0x66>
 8013010:	4b32      	ldr	r3, [pc, #200]	; (80130dc <plug_holes+0x124>)
 8013012:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8013016:	4937      	ldr	r1, [pc, #220]	; (80130f4 <plug_holes+0x13c>)
 8013018:	4832      	ldr	r0, [pc, #200]	; (80130e4 <plug_holes+0x12c>)
 801301a:	f00c fb51 	bl	801f6c0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	881b      	ldrh	r3, [r3, #0]
 8013022:	4618      	mov	r0, r3
 8013024:	f7ff ffa4 	bl	8012f70 <ptr_to_mem>
 8013028:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801302a:	687a      	ldr	r2, [r7, #4]
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	429a      	cmp	r2, r3
 8013030:	d024      	beq.n	801307c <plug_holes+0xc4>
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	791b      	ldrb	r3, [r3, #4]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d120      	bne.n	801307c <plug_holes+0xc4>
 801303a:	4b2b      	ldr	r3, [pc, #172]	; (80130e8 <plug_holes+0x130>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	68fa      	ldr	r2, [r7, #12]
 8013040:	429a      	cmp	r2, r3
 8013042:	d01b      	beq.n	801307c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8013044:	4b2c      	ldr	r3, [pc, #176]	; (80130f8 <plug_holes+0x140>)
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	68fa      	ldr	r2, [r7, #12]
 801304a:	429a      	cmp	r2, r3
 801304c:	d102      	bne.n	8013054 <plug_holes+0x9c>
      lfree = mem;
 801304e:	4a2a      	ldr	r2, [pc, #168]	; (80130f8 <plug_holes+0x140>)
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	881a      	ldrh	r2, [r3, #0]
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	881b      	ldrh	r3, [r3, #0]
 8013060:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013064:	d00a      	beq.n	801307c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	881b      	ldrh	r3, [r3, #0]
 801306a:	4618      	mov	r0, r3
 801306c:	f7ff ff80 	bl	8012f70 <ptr_to_mem>
 8013070:	4604      	mov	r4, r0
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	f7ff ff8e 	bl	8012f94 <mem_to_ptr>
 8013078:	4603      	mov	r3, r0
 801307a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	885b      	ldrh	r3, [r3, #2]
 8013080:	4618      	mov	r0, r3
 8013082:	f7ff ff75 	bl	8012f70 <ptr_to_mem>
 8013086:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8013088:	68ba      	ldr	r2, [r7, #8]
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	429a      	cmp	r2, r3
 801308e:	d01f      	beq.n	80130d0 <plug_holes+0x118>
 8013090:	68bb      	ldr	r3, [r7, #8]
 8013092:	791b      	ldrb	r3, [r3, #4]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d11b      	bne.n	80130d0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8013098:	4b17      	ldr	r3, [pc, #92]	; (80130f8 <plug_holes+0x140>)
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	687a      	ldr	r2, [r7, #4]
 801309e:	429a      	cmp	r2, r3
 80130a0:	d102      	bne.n	80130a8 <plug_holes+0xf0>
      lfree = pmem;
 80130a2:	4a15      	ldr	r2, [pc, #84]	; (80130f8 <plug_holes+0x140>)
 80130a4:	68bb      	ldr	r3, [r7, #8]
 80130a6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	881a      	ldrh	r2, [r3, #0]
 80130ac:	68bb      	ldr	r3, [r7, #8]
 80130ae:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	881b      	ldrh	r3, [r3, #0]
 80130b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80130b8:	d00a      	beq.n	80130d0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	881b      	ldrh	r3, [r3, #0]
 80130be:	4618      	mov	r0, r3
 80130c0:	f7ff ff56 	bl	8012f70 <ptr_to_mem>
 80130c4:	4604      	mov	r4, r0
 80130c6:	68b8      	ldr	r0, [r7, #8]
 80130c8:	f7ff ff64 	bl	8012f94 <mem_to_ptr>
 80130cc:	4603      	mov	r3, r0
 80130ce:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80130d0:	bf00      	nop
 80130d2:	3714      	adds	r7, #20
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd90      	pop	{r4, r7, pc}
 80130d8:	2000472c 	.word	0x2000472c
 80130dc:	08023bc0 	.word	0x08023bc0
 80130e0:	08023bf0 	.word	0x08023bf0
 80130e4:	08023c08 	.word	0x08023c08
 80130e8:	20004730 	.word	0x20004730
 80130ec:	08023c30 	.word	0x08023c30
 80130f0:	08023c4c 	.word	0x08023c4c
 80130f4:	08023c68 	.word	0x08023c68
 80130f8:	20004738 	.word	0x20004738

080130fc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b082      	sub	sp, #8
 8013100:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013102:	4b1f      	ldr	r3, [pc, #124]	; (8013180 <mem_init+0x84>)
 8013104:	3303      	adds	r3, #3
 8013106:	f023 0303 	bic.w	r3, r3, #3
 801310a:	461a      	mov	r2, r3
 801310c:	4b1d      	ldr	r3, [pc, #116]	; (8013184 <mem_init+0x88>)
 801310e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8013110:	4b1c      	ldr	r3, [pc, #112]	; (8013184 <mem_init+0x88>)
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801311c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	2200      	movs	r2, #0
 8013122:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	2200      	movs	r2, #0
 8013128:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801312a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801312e:	f7ff ff1f 	bl	8012f70 <ptr_to_mem>
 8013132:	4603      	mov	r3, r0
 8013134:	4a14      	ldr	r2, [pc, #80]	; (8013188 <mem_init+0x8c>)
 8013136:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8013138:	4b13      	ldr	r3, [pc, #76]	; (8013188 <mem_init+0x8c>)
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	2201      	movs	r2, #1
 801313e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013140:	4b11      	ldr	r3, [pc, #68]	; (8013188 <mem_init+0x8c>)
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8013148:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801314a:	4b0f      	ldr	r3, [pc, #60]	; (8013188 <mem_init+0x8c>)
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8013152:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8013154:	4b0b      	ldr	r3, [pc, #44]	; (8013184 <mem_init+0x88>)
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	4a0c      	ldr	r2, [pc, #48]	; (801318c <mem_init+0x90>)
 801315a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801315c:	480c      	ldr	r0, [pc, #48]	; (8013190 <mem_init+0x94>)
 801315e:	f00b f957 	bl	801e410 <sys_mutex_new>
 8013162:	4603      	mov	r3, r0
 8013164:	2b00      	cmp	r3, #0
 8013166:	d006      	beq.n	8013176 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8013168:	4b0a      	ldr	r3, [pc, #40]	; (8013194 <mem_init+0x98>)
 801316a:	f240 221f 	movw	r2, #543	; 0x21f
 801316e:	490a      	ldr	r1, [pc, #40]	; (8013198 <mem_init+0x9c>)
 8013170:	480a      	ldr	r0, [pc, #40]	; (801319c <mem_init+0xa0>)
 8013172:	f00c faa5 	bl	801f6c0 <iprintf>
  }
}
 8013176:	bf00      	nop
 8013178:	3708      	adds	r7, #8
 801317a:	46bd      	mov	sp, r7
 801317c:	bd80      	pop	{r7, pc}
 801317e:	bf00      	nop
 8013180:	200081d8 	.word	0x200081d8
 8013184:	2000472c 	.word	0x2000472c
 8013188:	20004730 	.word	0x20004730
 801318c:	20004738 	.word	0x20004738
 8013190:	20004734 	.word	0x20004734
 8013194:	08023bc0 	.word	0x08023bc0
 8013198:	08023c94 	.word	0x08023c94
 801319c:	08023c08 	.word	0x08023c08

080131a0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b086      	sub	sp, #24
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f7ff fef3 	bl	8012f94 <mem_to_ptr>
 80131ae:	4603      	mov	r3, r0
 80131b0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	881b      	ldrh	r3, [r3, #0]
 80131b6:	4618      	mov	r0, r3
 80131b8:	f7ff feda 	bl	8012f70 <ptr_to_mem>
 80131bc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	885b      	ldrh	r3, [r3, #2]
 80131c2:	4618      	mov	r0, r3
 80131c4:	f7ff fed4 	bl	8012f70 <ptr_to_mem>
 80131c8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	881b      	ldrh	r3, [r3, #0]
 80131ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80131d2:	d818      	bhi.n	8013206 <mem_link_valid+0x66>
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	885b      	ldrh	r3, [r3, #2]
 80131d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80131dc:	d813      	bhi.n	8013206 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80131e2:	8afa      	ldrh	r2, [r7, #22]
 80131e4:	429a      	cmp	r2, r3
 80131e6:	d004      	beq.n	80131f2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	881b      	ldrh	r3, [r3, #0]
 80131ec:	8afa      	ldrh	r2, [r7, #22]
 80131ee:	429a      	cmp	r2, r3
 80131f0:	d109      	bne.n	8013206 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80131f2:	4b08      	ldr	r3, [pc, #32]	; (8013214 <mem_link_valid+0x74>)
 80131f4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80131f6:	693a      	ldr	r2, [r7, #16]
 80131f8:	429a      	cmp	r2, r3
 80131fa:	d006      	beq.n	801320a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80131fc:	693b      	ldr	r3, [r7, #16]
 80131fe:	885b      	ldrh	r3, [r3, #2]
 8013200:	8afa      	ldrh	r2, [r7, #22]
 8013202:	429a      	cmp	r2, r3
 8013204:	d001      	beq.n	801320a <mem_link_valid+0x6a>
    return 0;
 8013206:	2300      	movs	r3, #0
 8013208:	e000      	b.n	801320c <mem_link_valid+0x6c>
  }
  return 1;
 801320a:	2301      	movs	r3, #1
}
 801320c:	4618      	mov	r0, r3
 801320e:	3718      	adds	r7, #24
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}
 8013214:	20004730 	.word	0x20004730

08013218 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b088      	sub	sp, #32
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d070      	beq.n	8013308 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	f003 0303 	and.w	r3, r3, #3
 801322c:	2b00      	cmp	r3, #0
 801322e:	d00d      	beq.n	801324c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013230:	4b37      	ldr	r3, [pc, #220]	; (8013310 <mem_free+0xf8>)
 8013232:	f240 2273 	movw	r2, #627	; 0x273
 8013236:	4937      	ldr	r1, [pc, #220]	; (8013314 <mem_free+0xfc>)
 8013238:	4837      	ldr	r0, [pc, #220]	; (8013318 <mem_free+0x100>)
 801323a:	f00c fa41 	bl	801f6c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801323e:	f00b f945 	bl	801e4cc <sys_arch_protect>
 8013242:	60f8      	str	r0, [r7, #12]
 8013244:	68f8      	ldr	r0, [r7, #12]
 8013246:	f00b f94f 	bl	801e4e8 <sys_arch_unprotect>
    return;
 801324a:	e05e      	b.n	801330a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	3b08      	subs	r3, #8
 8013250:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8013252:	4b32      	ldr	r3, [pc, #200]	; (801331c <mem_free+0x104>)
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	69fa      	ldr	r2, [r7, #28]
 8013258:	429a      	cmp	r2, r3
 801325a:	d306      	bcc.n	801326a <mem_free+0x52>
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	f103 020c 	add.w	r2, r3, #12
 8013262:	4b2f      	ldr	r3, [pc, #188]	; (8013320 <mem_free+0x108>)
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	429a      	cmp	r2, r3
 8013268:	d90d      	bls.n	8013286 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801326a:	4b29      	ldr	r3, [pc, #164]	; (8013310 <mem_free+0xf8>)
 801326c:	f240 227f 	movw	r2, #639	; 0x27f
 8013270:	492c      	ldr	r1, [pc, #176]	; (8013324 <mem_free+0x10c>)
 8013272:	4829      	ldr	r0, [pc, #164]	; (8013318 <mem_free+0x100>)
 8013274:	f00c fa24 	bl	801f6c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013278:	f00b f928 	bl	801e4cc <sys_arch_protect>
 801327c:	6138      	str	r0, [r7, #16]
 801327e:	6938      	ldr	r0, [r7, #16]
 8013280:	f00b f932 	bl	801e4e8 <sys_arch_unprotect>
    return;
 8013284:	e041      	b.n	801330a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013286:	4828      	ldr	r0, [pc, #160]	; (8013328 <mem_free+0x110>)
 8013288:	f00b f8de 	bl	801e448 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 801328c:	69fb      	ldr	r3, [r7, #28]
 801328e:	791b      	ldrb	r3, [r3, #4]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d110      	bne.n	80132b6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8013294:	4b1e      	ldr	r3, [pc, #120]	; (8013310 <mem_free+0xf8>)
 8013296:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801329a:	4924      	ldr	r1, [pc, #144]	; (801332c <mem_free+0x114>)
 801329c:	481e      	ldr	r0, [pc, #120]	; (8013318 <mem_free+0x100>)
 801329e:	f00c fa0f 	bl	801f6c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80132a2:	4821      	ldr	r0, [pc, #132]	; (8013328 <mem_free+0x110>)
 80132a4:	f00b f8df 	bl	801e466 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80132a8:	f00b f910 	bl	801e4cc <sys_arch_protect>
 80132ac:	6178      	str	r0, [r7, #20]
 80132ae:	6978      	ldr	r0, [r7, #20]
 80132b0:	f00b f91a 	bl	801e4e8 <sys_arch_unprotect>
    return;
 80132b4:	e029      	b.n	801330a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80132b6:	69f8      	ldr	r0, [r7, #28]
 80132b8:	f7ff ff72 	bl	80131a0 <mem_link_valid>
 80132bc:	4603      	mov	r3, r0
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d110      	bne.n	80132e4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80132c2:	4b13      	ldr	r3, [pc, #76]	; (8013310 <mem_free+0xf8>)
 80132c4:	f240 2295 	movw	r2, #661	; 0x295
 80132c8:	4919      	ldr	r1, [pc, #100]	; (8013330 <mem_free+0x118>)
 80132ca:	4813      	ldr	r0, [pc, #76]	; (8013318 <mem_free+0x100>)
 80132cc:	f00c f9f8 	bl	801f6c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80132d0:	4815      	ldr	r0, [pc, #84]	; (8013328 <mem_free+0x110>)
 80132d2:	f00b f8c8 	bl	801e466 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80132d6:	f00b f8f9 	bl	801e4cc <sys_arch_protect>
 80132da:	61b8      	str	r0, [r7, #24]
 80132dc:	69b8      	ldr	r0, [r7, #24]
 80132de:	f00b f903 	bl	801e4e8 <sys_arch_unprotect>
    return;
 80132e2:	e012      	b.n	801330a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80132e4:	69fb      	ldr	r3, [r7, #28]
 80132e6:	2200      	movs	r2, #0
 80132e8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80132ea:	4b12      	ldr	r3, [pc, #72]	; (8013334 <mem_free+0x11c>)
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	69fa      	ldr	r2, [r7, #28]
 80132f0:	429a      	cmp	r2, r3
 80132f2:	d202      	bcs.n	80132fa <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80132f4:	4a0f      	ldr	r2, [pc, #60]	; (8013334 <mem_free+0x11c>)
 80132f6:	69fb      	ldr	r3, [r7, #28]
 80132f8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80132fa:	69f8      	ldr	r0, [r7, #28]
 80132fc:	f7ff fe5c 	bl	8012fb8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013300:	4809      	ldr	r0, [pc, #36]	; (8013328 <mem_free+0x110>)
 8013302:	f00b f8b0 	bl	801e466 <sys_mutex_unlock>
 8013306:	e000      	b.n	801330a <mem_free+0xf2>
    return;
 8013308:	bf00      	nop
}
 801330a:	3720      	adds	r7, #32
 801330c:	46bd      	mov	sp, r7
 801330e:	bd80      	pop	{r7, pc}
 8013310:	08023bc0 	.word	0x08023bc0
 8013314:	08023cb0 	.word	0x08023cb0
 8013318:	08023c08 	.word	0x08023c08
 801331c:	2000472c 	.word	0x2000472c
 8013320:	20004730 	.word	0x20004730
 8013324:	08023cd4 	.word	0x08023cd4
 8013328:	20004734 	.word	0x20004734
 801332c:	08023cf0 	.word	0x08023cf0
 8013330:	08023d18 	.word	0x08023d18
 8013334:	20004738 	.word	0x20004738

08013338 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b088      	sub	sp, #32
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
 8013340:	460b      	mov	r3, r1
 8013342:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8013344:	887b      	ldrh	r3, [r7, #2]
 8013346:	3303      	adds	r3, #3
 8013348:	b29b      	uxth	r3, r3
 801334a:	f023 0303 	bic.w	r3, r3, #3
 801334e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8013350:	8bfb      	ldrh	r3, [r7, #30]
 8013352:	2b0b      	cmp	r3, #11
 8013354:	d801      	bhi.n	801335a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8013356:	230c      	movs	r3, #12
 8013358:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801335a:	8bfb      	ldrh	r3, [r7, #30]
 801335c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013360:	d803      	bhi.n	801336a <mem_trim+0x32>
 8013362:	8bfa      	ldrh	r2, [r7, #30]
 8013364:	887b      	ldrh	r3, [r7, #2]
 8013366:	429a      	cmp	r2, r3
 8013368:	d201      	bcs.n	801336e <mem_trim+0x36>
    return NULL;
 801336a:	2300      	movs	r3, #0
 801336c:	e0d8      	b.n	8013520 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801336e:	4b6e      	ldr	r3, [pc, #440]	; (8013528 <mem_trim+0x1f0>)
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	687a      	ldr	r2, [r7, #4]
 8013374:	429a      	cmp	r2, r3
 8013376:	d304      	bcc.n	8013382 <mem_trim+0x4a>
 8013378:	4b6c      	ldr	r3, [pc, #432]	; (801352c <mem_trim+0x1f4>)
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	687a      	ldr	r2, [r7, #4]
 801337e:	429a      	cmp	r2, r3
 8013380:	d306      	bcc.n	8013390 <mem_trim+0x58>
 8013382:	4b6b      	ldr	r3, [pc, #428]	; (8013530 <mem_trim+0x1f8>)
 8013384:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013388:	496a      	ldr	r1, [pc, #424]	; (8013534 <mem_trim+0x1fc>)
 801338a:	486b      	ldr	r0, [pc, #428]	; (8013538 <mem_trim+0x200>)
 801338c:	f00c f998 	bl	801f6c0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013390:	4b65      	ldr	r3, [pc, #404]	; (8013528 <mem_trim+0x1f0>)
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	687a      	ldr	r2, [r7, #4]
 8013396:	429a      	cmp	r2, r3
 8013398:	d304      	bcc.n	80133a4 <mem_trim+0x6c>
 801339a:	4b64      	ldr	r3, [pc, #400]	; (801352c <mem_trim+0x1f4>)
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	687a      	ldr	r2, [r7, #4]
 80133a0:	429a      	cmp	r2, r3
 80133a2:	d307      	bcc.n	80133b4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80133a4:	f00b f892 	bl	801e4cc <sys_arch_protect>
 80133a8:	60b8      	str	r0, [r7, #8]
 80133aa:	68b8      	ldr	r0, [r7, #8]
 80133ac:	f00b f89c 	bl	801e4e8 <sys_arch_unprotect>
    return rmem;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	e0b5      	b.n	8013520 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	3b08      	subs	r3, #8
 80133b8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80133ba:	69b8      	ldr	r0, [r7, #24]
 80133bc:	f7ff fdea 	bl	8012f94 <mem_to_ptr>
 80133c0:	4603      	mov	r3, r0
 80133c2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80133c4:	69bb      	ldr	r3, [r7, #24]
 80133c6:	881a      	ldrh	r2, [r3, #0]
 80133c8:	8afb      	ldrh	r3, [r7, #22]
 80133ca:	1ad3      	subs	r3, r2, r3
 80133cc:	b29b      	uxth	r3, r3
 80133ce:	3b08      	subs	r3, #8
 80133d0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80133d2:	8bfa      	ldrh	r2, [r7, #30]
 80133d4:	8abb      	ldrh	r3, [r7, #20]
 80133d6:	429a      	cmp	r2, r3
 80133d8:	d906      	bls.n	80133e8 <mem_trim+0xb0>
 80133da:	4b55      	ldr	r3, [pc, #340]	; (8013530 <mem_trim+0x1f8>)
 80133dc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80133e0:	4956      	ldr	r1, [pc, #344]	; (801353c <mem_trim+0x204>)
 80133e2:	4855      	ldr	r0, [pc, #340]	; (8013538 <mem_trim+0x200>)
 80133e4:	f00c f96c 	bl	801f6c0 <iprintf>
  if (newsize > size) {
 80133e8:	8bfa      	ldrh	r2, [r7, #30]
 80133ea:	8abb      	ldrh	r3, [r7, #20]
 80133ec:	429a      	cmp	r2, r3
 80133ee:	d901      	bls.n	80133f4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80133f0:	2300      	movs	r3, #0
 80133f2:	e095      	b.n	8013520 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80133f4:	8bfa      	ldrh	r2, [r7, #30]
 80133f6:	8abb      	ldrh	r3, [r7, #20]
 80133f8:	429a      	cmp	r2, r3
 80133fa:	d101      	bne.n	8013400 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	e08f      	b.n	8013520 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013400:	484f      	ldr	r0, [pc, #316]	; (8013540 <mem_trim+0x208>)
 8013402:	f00b f821 	bl	801e448 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8013406:	69bb      	ldr	r3, [r7, #24]
 8013408:	881b      	ldrh	r3, [r3, #0]
 801340a:	4618      	mov	r0, r3
 801340c:	f7ff fdb0 	bl	8012f70 <ptr_to_mem>
 8013410:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8013412:	693b      	ldr	r3, [r7, #16]
 8013414:	791b      	ldrb	r3, [r3, #4]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d13f      	bne.n	801349a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801341a:	69bb      	ldr	r3, [r7, #24]
 801341c:	881b      	ldrh	r3, [r3, #0]
 801341e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013422:	d106      	bne.n	8013432 <mem_trim+0xfa>
 8013424:	4b42      	ldr	r3, [pc, #264]	; (8013530 <mem_trim+0x1f8>)
 8013426:	f240 22f5 	movw	r2, #757	; 0x2f5
 801342a:	4946      	ldr	r1, [pc, #280]	; (8013544 <mem_trim+0x20c>)
 801342c:	4842      	ldr	r0, [pc, #264]	; (8013538 <mem_trim+0x200>)
 801342e:	f00c f947 	bl	801f6c0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8013432:	693b      	ldr	r3, [r7, #16]
 8013434:	881b      	ldrh	r3, [r3, #0]
 8013436:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013438:	8afa      	ldrh	r2, [r7, #22]
 801343a:	8bfb      	ldrh	r3, [r7, #30]
 801343c:	4413      	add	r3, r2
 801343e:	b29b      	uxth	r3, r3
 8013440:	3308      	adds	r3, #8
 8013442:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8013444:	4b40      	ldr	r3, [pc, #256]	; (8013548 <mem_trim+0x210>)
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	693a      	ldr	r2, [r7, #16]
 801344a:	429a      	cmp	r2, r3
 801344c:	d106      	bne.n	801345c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801344e:	89fb      	ldrh	r3, [r7, #14]
 8013450:	4618      	mov	r0, r3
 8013452:	f7ff fd8d 	bl	8012f70 <ptr_to_mem>
 8013456:	4603      	mov	r3, r0
 8013458:	4a3b      	ldr	r2, [pc, #236]	; (8013548 <mem_trim+0x210>)
 801345a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801345c:	89fb      	ldrh	r3, [r7, #14]
 801345e:	4618      	mov	r0, r3
 8013460:	f7ff fd86 	bl	8012f70 <ptr_to_mem>
 8013464:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8013466:	693b      	ldr	r3, [r7, #16]
 8013468:	2200      	movs	r2, #0
 801346a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	89ba      	ldrh	r2, [r7, #12]
 8013470:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8013472:	693b      	ldr	r3, [r7, #16]
 8013474:	8afa      	ldrh	r2, [r7, #22]
 8013476:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013478:	69bb      	ldr	r3, [r7, #24]
 801347a:	89fa      	ldrh	r2, [r7, #14]
 801347c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801347e:	693b      	ldr	r3, [r7, #16]
 8013480:	881b      	ldrh	r3, [r3, #0]
 8013482:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013486:	d047      	beq.n	8013518 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013488:	693b      	ldr	r3, [r7, #16]
 801348a:	881b      	ldrh	r3, [r3, #0]
 801348c:	4618      	mov	r0, r3
 801348e:	f7ff fd6f 	bl	8012f70 <ptr_to_mem>
 8013492:	4602      	mov	r2, r0
 8013494:	89fb      	ldrh	r3, [r7, #14]
 8013496:	8053      	strh	r3, [r2, #2]
 8013498:	e03e      	b.n	8013518 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801349a:	8bfb      	ldrh	r3, [r7, #30]
 801349c:	f103 0214 	add.w	r2, r3, #20
 80134a0:	8abb      	ldrh	r3, [r7, #20]
 80134a2:	429a      	cmp	r2, r3
 80134a4:	d838      	bhi.n	8013518 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80134a6:	8afa      	ldrh	r2, [r7, #22]
 80134a8:	8bfb      	ldrh	r3, [r7, #30]
 80134aa:	4413      	add	r3, r2
 80134ac:	b29b      	uxth	r3, r3
 80134ae:	3308      	adds	r3, #8
 80134b0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80134b2:	69bb      	ldr	r3, [r7, #24]
 80134b4:	881b      	ldrh	r3, [r3, #0]
 80134b6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80134ba:	d106      	bne.n	80134ca <mem_trim+0x192>
 80134bc:	4b1c      	ldr	r3, [pc, #112]	; (8013530 <mem_trim+0x1f8>)
 80134be:	f240 3216 	movw	r2, #790	; 0x316
 80134c2:	4920      	ldr	r1, [pc, #128]	; (8013544 <mem_trim+0x20c>)
 80134c4:	481c      	ldr	r0, [pc, #112]	; (8013538 <mem_trim+0x200>)
 80134c6:	f00c f8fb 	bl	801f6c0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80134ca:	89fb      	ldrh	r3, [r7, #14]
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7ff fd4f 	bl	8012f70 <ptr_to_mem>
 80134d2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80134d4:	4b1c      	ldr	r3, [pc, #112]	; (8013548 <mem_trim+0x210>)
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	693a      	ldr	r2, [r7, #16]
 80134da:	429a      	cmp	r2, r3
 80134dc:	d202      	bcs.n	80134e4 <mem_trim+0x1ac>
      lfree = mem2;
 80134de:	4a1a      	ldr	r2, [pc, #104]	; (8013548 <mem_trim+0x210>)
 80134e0:	693b      	ldr	r3, [r7, #16]
 80134e2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80134e4:	693b      	ldr	r3, [r7, #16]
 80134e6:	2200      	movs	r2, #0
 80134e8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80134ea:	69bb      	ldr	r3, [r7, #24]
 80134ec:	881a      	ldrh	r2, [r3, #0]
 80134ee:	693b      	ldr	r3, [r7, #16]
 80134f0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80134f2:	693b      	ldr	r3, [r7, #16]
 80134f4:	8afa      	ldrh	r2, [r7, #22]
 80134f6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80134f8:	69bb      	ldr	r3, [r7, #24]
 80134fa:	89fa      	ldrh	r2, [r7, #14]
 80134fc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80134fe:	693b      	ldr	r3, [r7, #16]
 8013500:	881b      	ldrh	r3, [r3, #0]
 8013502:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013506:	d007      	beq.n	8013518 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013508:	693b      	ldr	r3, [r7, #16]
 801350a:	881b      	ldrh	r3, [r3, #0]
 801350c:	4618      	mov	r0, r3
 801350e:	f7ff fd2f 	bl	8012f70 <ptr_to_mem>
 8013512:	4602      	mov	r2, r0
 8013514:	89fb      	ldrh	r3, [r7, #14]
 8013516:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013518:	4809      	ldr	r0, [pc, #36]	; (8013540 <mem_trim+0x208>)
 801351a:	f00a ffa4 	bl	801e466 <sys_mutex_unlock>
  return rmem;
 801351e:	687b      	ldr	r3, [r7, #4]
}
 8013520:	4618      	mov	r0, r3
 8013522:	3720      	adds	r7, #32
 8013524:	46bd      	mov	sp, r7
 8013526:	bd80      	pop	{r7, pc}
 8013528:	2000472c 	.word	0x2000472c
 801352c:	20004730 	.word	0x20004730
 8013530:	08023bc0 	.word	0x08023bc0
 8013534:	08023d4c 	.word	0x08023d4c
 8013538:	08023c08 	.word	0x08023c08
 801353c:	08023d64 	.word	0x08023d64
 8013540:	20004734 	.word	0x20004734
 8013544:	08023d84 	.word	0x08023d84
 8013548:	20004738 	.word	0x20004738

0801354c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801354c:	b580      	push	{r7, lr}
 801354e:	b088      	sub	sp, #32
 8013550:	af00      	add	r7, sp, #0
 8013552:	4603      	mov	r3, r0
 8013554:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8013556:	88fb      	ldrh	r3, [r7, #6]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d101      	bne.n	8013560 <mem_malloc+0x14>
    return NULL;
 801355c:	2300      	movs	r3, #0
 801355e:	e0e2      	b.n	8013726 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013560:	88fb      	ldrh	r3, [r7, #6]
 8013562:	3303      	adds	r3, #3
 8013564:	b29b      	uxth	r3, r3
 8013566:	f023 0303 	bic.w	r3, r3, #3
 801356a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801356c:	8bbb      	ldrh	r3, [r7, #28]
 801356e:	2b0b      	cmp	r3, #11
 8013570:	d801      	bhi.n	8013576 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013572:	230c      	movs	r3, #12
 8013574:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8013576:	8bbb      	ldrh	r3, [r7, #28]
 8013578:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801357c:	d803      	bhi.n	8013586 <mem_malloc+0x3a>
 801357e:	8bba      	ldrh	r2, [r7, #28]
 8013580:	88fb      	ldrh	r3, [r7, #6]
 8013582:	429a      	cmp	r2, r3
 8013584:	d201      	bcs.n	801358a <mem_malloc+0x3e>
    return NULL;
 8013586:	2300      	movs	r3, #0
 8013588:	e0cd      	b.n	8013726 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801358a:	4869      	ldr	r0, [pc, #420]	; (8013730 <mem_malloc+0x1e4>)
 801358c:	f00a ff5c 	bl	801e448 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013590:	4b68      	ldr	r3, [pc, #416]	; (8013734 <mem_malloc+0x1e8>)
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	4618      	mov	r0, r3
 8013596:	f7ff fcfd 	bl	8012f94 <mem_to_ptr>
 801359a:	4603      	mov	r3, r0
 801359c:	83fb      	strh	r3, [r7, #30]
 801359e:	e0b7      	b.n	8013710 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80135a0:	8bfb      	ldrh	r3, [r7, #30]
 80135a2:	4618      	mov	r0, r3
 80135a4:	f7ff fce4 	bl	8012f70 <ptr_to_mem>
 80135a8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80135aa:	697b      	ldr	r3, [r7, #20]
 80135ac:	791b      	ldrb	r3, [r3, #4]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	f040 80a7 	bne.w	8013702 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80135b4:	697b      	ldr	r3, [r7, #20]
 80135b6:	881b      	ldrh	r3, [r3, #0]
 80135b8:	461a      	mov	r2, r3
 80135ba:	8bfb      	ldrh	r3, [r7, #30]
 80135bc:	1ad3      	subs	r3, r2, r3
 80135be:	f1a3 0208 	sub.w	r2, r3, #8
 80135c2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80135c4:	429a      	cmp	r2, r3
 80135c6:	f0c0 809c 	bcc.w	8013702 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80135ca:	697b      	ldr	r3, [r7, #20]
 80135cc:	881b      	ldrh	r3, [r3, #0]
 80135ce:	461a      	mov	r2, r3
 80135d0:	8bfb      	ldrh	r3, [r7, #30]
 80135d2:	1ad3      	subs	r3, r2, r3
 80135d4:	f1a3 0208 	sub.w	r2, r3, #8
 80135d8:	8bbb      	ldrh	r3, [r7, #28]
 80135da:	3314      	adds	r3, #20
 80135dc:	429a      	cmp	r2, r3
 80135de:	d333      	bcc.n	8013648 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80135e0:	8bfa      	ldrh	r2, [r7, #30]
 80135e2:	8bbb      	ldrh	r3, [r7, #28]
 80135e4:	4413      	add	r3, r2
 80135e6:	b29b      	uxth	r3, r3
 80135e8:	3308      	adds	r3, #8
 80135ea:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80135ec:	8a7b      	ldrh	r3, [r7, #18]
 80135ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80135f2:	d106      	bne.n	8013602 <mem_malloc+0xb6>
 80135f4:	4b50      	ldr	r3, [pc, #320]	; (8013738 <mem_malloc+0x1ec>)
 80135f6:	f240 3287 	movw	r2, #903	; 0x387
 80135fa:	4950      	ldr	r1, [pc, #320]	; (801373c <mem_malloc+0x1f0>)
 80135fc:	4850      	ldr	r0, [pc, #320]	; (8013740 <mem_malloc+0x1f4>)
 80135fe:	f00c f85f 	bl	801f6c0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013602:	8a7b      	ldrh	r3, [r7, #18]
 8013604:	4618      	mov	r0, r3
 8013606:	f7ff fcb3 	bl	8012f70 <ptr_to_mem>
 801360a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	2200      	movs	r2, #0
 8013610:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013612:	697b      	ldr	r3, [r7, #20]
 8013614:	881a      	ldrh	r2, [r3, #0]
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	8bfa      	ldrh	r2, [r7, #30]
 801361e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013620:	697b      	ldr	r3, [r7, #20]
 8013622:	8a7a      	ldrh	r2, [r7, #18]
 8013624:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8013626:	697b      	ldr	r3, [r7, #20]
 8013628:	2201      	movs	r2, #1
 801362a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	881b      	ldrh	r3, [r3, #0]
 8013630:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013634:	d00b      	beq.n	801364e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	881b      	ldrh	r3, [r3, #0]
 801363a:	4618      	mov	r0, r3
 801363c:	f7ff fc98 	bl	8012f70 <ptr_to_mem>
 8013640:	4602      	mov	r2, r0
 8013642:	8a7b      	ldrh	r3, [r7, #18]
 8013644:	8053      	strh	r3, [r2, #2]
 8013646:	e002      	b.n	801364e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013648:	697b      	ldr	r3, [r7, #20]
 801364a:	2201      	movs	r2, #1
 801364c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801364e:	4b39      	ldr	r3, [pc, #228]	; (8013734 <mem_malloc+0x1e8>)
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	697a      	ldr	r2, [r7, #20]
 8013654:	429a      	cmp	r2, r3
 8013656:	d127      	bne.n	80136a8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8013658:	4b36      	ldr	r3, [pc, #216]	; (8013734 <mem_malloc+0x1e8>)
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801365e:	e005      	b.n	801366c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013660:	69bb      	ldr	r3, [r7, #24]
 8013662:	881b      	ldrh	r3, [r3, #0]
 8013664:	4618      	mov	r0, r3
 8013666:	f7ff fc83 	bl	8012f70 <ptr_to_mem>
 801366a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801366c:	69bb      	ldr	r3, [r7, #24]
 801366e:	791b      	ldrb	r3, [r3, #4]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d004      	beq.n	801367e <mem_malloc+0x132>
 8013674:	4b33      	ldr	r3, [pc, #204]	; (8013744 <mem_malloc+0x1f8>)
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	69ba      	ldr	r2, [r7, #24]
 801367a:	429a      	cmp	r2, r3
 801367c:	d1f0      	bne.n	8013660 <mem_malloc+0x114>
          }
          lfree = cur;
 801367e:	4a2d      	ldr	r2, [pc, #180]	; (8013734 <mem_malloc+0x1e8>)
 8013680:	69bb      	ldr	r3, [r7, #24]
 8013682:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013684:	4b2b      	ldr	r3, [pc, #172]	; (8013734 <mem_malloc+0x1e8>)
 8013686:	681a      	ldr	r2, [r3, #0]
 8013688:	4b2e      	ldr	r3, [pc, #184]	; (8013744 <mem_malloc+0x1f8>)
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	429a      	cmp	r2, r3
 801368e:	d00b      	beq.n	80136a8 <mem_malloc+0x15c>
 8013690:	4b28      	ldr	r3, [pc, #160]	; (8013734 <mem_malloc+0x1e8>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	791b      	ldrb	r3, [r3, #4]
 8013696:	2b00      	cmp	r3, #0
 8013698:	d006      	beq.n	80136a8 <mem_malloc+0x15c>
 801369a:	4b27      	ldr	r3, [pc, #156]	; (8013738 <mem_malloc+0x1ec>)
 801369c:	f240 32b5 	movw	r2, #949	; 0x3b5
 80136a0:	4929      	ldr	r1, [pc, #164]	; (8013748 <mem_malloc+0x1fc>)
 80136a2:	4827      	ldr	r0, [pc, #156]	; (8013740 <mem_malloc+0x1f4>)
 80136a4:	f00c f80c 	bl	801f6c0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80136a8:	4821      	ldr	r0, [pc, #132]	; (8013730 <mem_malloc+0x1e4>)
 80136aa:	f00a fedc 	bl	801e466 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80136ae:	8bba      	ldrh	r2, [r7, #28]
 80136b0:	697b      	ldr	r3, [r7, #20]
 80136b2:	4413      	add	r3, r2
 80136b4:	3308      	adds	r3, #8
 80136b6:	4a23      	ldr	r2, [pc, #140]	; (8013744 <mem_malloc+0x1f8>)
 80136b8:	6812      	ldr	r2, [r2, #0]
 80136ba:	4293      	cmp	r3, r2
 80136bc:	d906      	bls.n	80136cc <mem_malloc+0x180>
 80136be:	4b1e      	ldr	r3, [pc, #120]	; (8013738 <mem_malloc+0x1ec>)
 80136c0:	f240 32b9 	movw	r2, #953	; 0x3b9
 80136c4:	4921      	ldr	r1, [pc, #132]	; (801374c <mem_malloc+0x200>)
 80136c6:	481e      	ldr	r0, [pc, #120]	; (8013740 <mem_malloc+0x1f4>)
 80136c8:	f00b fffa 	bl	801f6c0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80136cc:	697b      	ldr	r3, [r7, #20]
 80136ce:	f003 0303 	and.w	r3, r3, #3
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d006      	beq.n	80136e4 <mem_malloc+0x198>
 80136d6:	4b18      	ldr	r3, [pc, #96]	; (8013738 <mem_malloc+0x1ec>)
 80136d8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80136dc:	491c      	ldr	r1, [pc, #112]	; (8013750 <mem_malloc+0x204>)
 80136de:	4818      	ldr	r0, [pc, #96]	; (8013740 <mem_malloc+0x1f4>)
 80136e0:	f00b ffee 	bl	801f6c0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80136e4:	697b      	ldr	r3, [r7, #20]
 80136e6:	f003 0303 	and.w	r3, r3, #3
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d006      	beq.n	80136fc <mem_malloc+0x1b0>
 80136ee:	4b12      	ldr	r3, [pc, #72]	; (8013738 <mem_malloc+0x1ec>)
 80136f0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80136f4:	4917      	ldr	r1, [pc, #92]	; (8013754 <mem_malloc+0x208>)
 80136f6:	4812      	ldr	r0, [pc, #72]	; (8013740 <mem_malloc+0x1f4>)
 80136f8:	f00b ffe2 	bl	801f6c0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80136fc:	697b      	ldr	r3, [r7, #20]
 80136fe:	3308      	adds	r3, #8
 8013700:	e011      	b.n	8013726 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8013702:	8bfb      	ldrh	r3, [r7, #30]
 8013704:	4618      	mov	r0, r3
 8013706:	f7ff fc33 	bl	8012f70 <ptr_to_mem>
 801370a:	4603      	mov	r3, r0
 801370c:	881b      	ldrh	r3, [r3, #0]
 801370e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013710:	8bfa      	ldrh	r2, [r7, #30]
 8013712:	8bbb      	ldrh	r3, [r7, #28]
 8013714:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8013718:	429a      	cmp	r2, r3
 801371a:	f4ff af41 	bcc.w	80135a0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801371e:	4804      	ldr	r0, [pc, #16]	; (8013730 <mem_malloc+0x1e4>)
 8013720:	f00a fea1 	bl	801e466 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013724:	2300      	movs	r3, #0
}
 8013726:	4618      	mov	r0, r3
 8013728:	3720      	adds	r7, #32
 801372a:	46bd      	mov	sp, r7
 801372c:	bd80      	pop	{r7, pc}
 801372e:	bf00      	nop
 8013730:	20004734 	.word	0x20004734
 8013734:	20004738 	.word	0x20004738
 8013738:	08023bc0 	.word	0x08023bc0
 801373c:	08023d84 	.word	0x08023d84
 8013740:	08023c08 	.word	0x08023c08
 8013744:	20004730 	.word	0x20004730
 8013748:	08023d98 	.word	0x08023d98
 801374c:	08023db4 	.word	0x08023db4
 8013750:	08023de4 	.word	0x08023de4
 8013754:	08023e14 	.word	0x08023e14

08013758 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013758:	b480      	push	{r7}
 801375a:	b085      	sub	sp, #20
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	689b      	ldr	r3, [r3, #8]
 8013764:	2200      	movs	r2, #0
 8013766:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	685b      	ldr	r3, [r3, #4]
 801376c:	3303      	adds	r3, #3
 801376e:	f023 0303 	bic.w	r3, r3, #3
 8013772:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013774:	2300      	movs	r3, #0
 8013776:	60fb      	str	r3, [r7, #12]
 8013778:	e011      	b.n	801379e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	689b      	ldr	r3, [r3, #8]
 801377e:	681a      	ldr	r2, [r3, #0]
 8013780:	68bb      	ldr	r3, [r7, #8]
 8013782:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	689b      	ldr	r3, [r3, #8]
 8013788:	68ba      	ldr	r2, [r7, #8]
 801378a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	881b      	ldrh	r3, [r3, #0]
 8013790:	461a      	mov	r2, r3
 8013792:	68bb      	ldr	r3, [r7, #8]
 8013794:	4413      	add	r3, r2
 8013796:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	3301      	adds	r3, #1
 801379c:	60fb      	str	r3, [r7, #12]
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	885b      	ldrh	r3, [r3, #2]
 80137a2:	461a      	mov	r2, r3
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	4293      	cmp	r3, r2
 80137a8:	dbe7      	blt.n	801377a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80137aa:	bf00      	nop
 80137ac:	bf00      	nop
 80137ae:	3714      	adds	r7, #20
 80137b0:	46bd      	mov	sp, r7
 80137b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b6:	4770      	bx	lr

080137b8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b082      	sub	sp, #8
 80137bc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80137be:	2300      	movs	r3, #0
 80137c0:	80fb      	strh	r3, [r7, #6]
 80137c2:	e009      	b.n	80137d8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80137c4:	88fb      	ldrh	r3, [r7, #6]
 80137c6:	4a08      	ldr	r2, [pc, #32]	; (80137e8 <memp_init+0x30>)
 80137c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137cc:	4618      	mov	r0, r3
 80137ce:	f7ff ffc3 	bl	8013758 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80137d2:	88fb      	ldrh	r3, [r7, #6]
 80137d4:	3301      	adds	r3, #1
 80137d6:	80fb      	strh	r3, [r7, #6]
 80137d8:	88fb      	ldrh	r3, [r7, #6]
 80137da:	2b0c      	cmp	r3, #12
 80137dc:	d9f2      	bls.n	80137c4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80137de:	bf00      	nop
 80137e0:	bf00      	nop
 80137e2:	3708      	adds	r7, #8
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd80      	pop	{r7, pc}
 80137e8:	080275bc 	.word	0x080275bc

080137ec <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b084      	sub	sp, #16
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80137f4:	f00a fe6a 	bl	801e4cc <sys_arch_protect>
 80137f8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	689b      	ldr	r3, [r3, #8]
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013802:	68bb      	ldr	r3, [r7, #8]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d015      	beq.n	8013834 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	689b      	ldr	r3, [r3, #8]
 801380c:	68ba      	ldr	r2, [r7, #8]
 801380e:	6812      	ldr	r2, [r2, #0]
 8013810:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013812:	68bb      	ldr	r3, [r7, #8]
 8013814:	f003 0303 	and.w	r3, r3, #3
 8013818:	2b00      	cmp	r3, #0
 801381a:	d006      	beq.n	801382a <do_memp_malloc_pool+0x3e>
 801381c:	4b09      	ldr	r3, [pc, #36]	; (8013844 <do_memp_malloc_pool+0x58>)
 801381e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8013822:	4909      	ldr	r1, [pc, #36]	; (8013848 <do_memp_malloc_pool+0x5c>)
 8013824:	4809      	ldr	r0, [pc, #36]	; (801384c <do_memp_malloc_pool+0x60>)
 8013826:	f00b ff4b 	bl	801f6c0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801382a:	68f8      	ldr	r0, [r7, #12]
 801382c:	f00a fe5c 	bl	801e4e8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	e003      	b.n	801383c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013834:	68f8      	ldr	r0, [r7, #12]
 8013836:	f00a fe57 	bl	801e4e8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801383a:	2300      	movs	r3, #0
}
 801383c:	4618      	mov	r0, r3
 801383e:	3710      	adds	r7, #16
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}
 8013844:	08023e38 	.word	0x08023e38
 8013848:	08023e68 	.word	0x08023e68
 801384c:	08023e8c 	.word	0x08023e8c

08013850 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013850:	b580      	push	{r7, lr}
 8013852:	b084      	sub	sp, #16
 8013854:	af00      	add	r7, sp, #0
 8013856:	4603      	mov	r3, r0
 8013858:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801385a:	79fb      	ldrb	r3, [r7, #7]
 801385c:	2b0c      	cmp	r3, #12
 801385e:	d908      	bls.n	8013872 <memp_malloc+0x22>
 8013860:	4b0a      	ldr	r3, [pc, #40]	; (801388c <memp_malloc+0x3c>)
 8013862:	f240 1257 	movw	r2, #343	; 0x157
 8013866:	490a      	ldr	r1, [pc, #40]	; (8013890 <memp_malloc+0x40>)
 8013868:	480a      	ldr	r0, [pc, #40]	; (8013894 <memp_malloc+0x44>)
 801386a:	f00b ff29 	bl	801f6c0 <iprintf>
 801386e:	2300      	movs	r3, #0
 8013870:	e008      	b.n	8013884 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013872:	79fb      	ldrb	r3, [r7, #7]
 8013874:	4a08      	ldr	r2, [pc, #32]	; (8013898 <memp_malloc+0x48>)
 8013876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801387a:	4618      	mov	r0, r3
 801387c:	f7ff ffb6 	bl	80137ec <do_memp_malloc_pool>
 8013880:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8013882:	68fb      	ldr	r3, [r7, #12]
}
 8013884:	4618      	mov	r0, r3
 8013886:	3710      	adds	r7, #16
 8013888:	46bd      	mov	sp, r7
 801388a:	bd80      	pop	{r7, pc}
 801388c:	08023e38 	.word	0x08023e38
 8013890:	08023ec8 	.word	0x08023ec8
 8013894:	08023e8c 	.word	0x08023e8c
 8013898:	080275bc 	.word	0x080275bc

0801389c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801389c:	b580      	push	{r7, lr}
 801389e:	b084      	sub	sp, #16
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
 80138a4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80138a6:	683b      	ldr	r3, [r7, #0]
 80138a8:	f003 0303 	and.w	r3, r3, #3
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d006      	beq.n	80138be <do_memp_free_pool+0x22>
 80138b0:	4b0d      	ldr	r3, [pc, #52]	; (80138e8 <do_memp_free_pool+0x4c>)
 80138b2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80138b6:	490d      	ldr	r1, [pc, #52]	; (80138ec <do_memp_free_pool+0x50>)
 80138b8:	480d      	ldr	r0, [pc, #52]	; (80138f0 <do_memp_free_pool+0x54>)
 80138ba:	f00b ff01 	bl	801f6c0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80138be:	683b      	ldr	r3, [r7, #0]
 80138c0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80138c2:	f00a fe03 	bl	801e4cc <sys_arch_protect>
 80138c6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	689b      	ldr	r3, [r3, #8]
 80138cc:	681a      	ldr	r2, [r3, #0]
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	689b      	ldr	r3, [r3, #8]
 80138d6:	68fa      	ldr	r2, [r7, #12]
 80138d8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80138da:	68b8      	ldr	r0, [r7, #8]
 80138dc:	f00a fe04 	bl	801e4e8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80138e0:	bf00      	nop
 80138e2:	3710      	adds	r7, #16
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bd80      	pop	{r7, pc}
 80138e8:	08023e38 	.word	0x08023e38
 80138ec:	08023ee8 	.word	0x08023ee8
 80138f0:	08023e8c 	.word	0x08023e8c

080138f4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b082      	sub	sp, #8
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	4603      	mov	r3, r0
 80138fc:	6039      	str	r1, [r7, #0]
 80138fe:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013900:	79fb      	ldrb	r3, [r7, #7]
 8013902:	2b0c      	cmp	r3, #12
 8013904:	d907      	bls.n	8013916 <memp_free+0x22>
 8013906:	4b0c      	ldr	r3, [pc, #48]	; (8013938 <memp_free+0x44>)
 8013908:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801390c:	490b      	ldr	r1, [pc, #44]	; (801393c <memp_free+0x48>)
 801390e:	480c      	ldr	r0, [pc, #48]	; (8013940 <memp_free+0x4c>)
 8013910:	f00b fed6 	bl	801f6c0 <iprintf>
 8013914:	e00c      	b.n	8013930 <memp_free+0x3c>

  if (mem == NULL) {
 8013916:	683b      	ldr	r3, [r7, #0]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d008      	beq.n	801392e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801391c:	79fb      	ldrb	r3, [r7, #7]
 801391e:	4a09      	ldr	r2, [pc, #36]	; (8013944 <memp_free+0x50>)
 8013920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013924:	6839      	ldr	r1, [r7, #0]
 8013926:	4618      	mov	r0, r3
 8013928:	f7ff ffb8 	bl	801389c <do_memp_free_pool>
 801392c:	e000      	b.n	8013930 <memp_free+0x3c>
    return;
 801392e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013930:	3708      	adds	r7, #8
 8013932:	46bd      	mov	sp, r7
 8013934:	bd80      	pop	{r7, pc}
 8013936:	bf00      	nop
 8013938:	08023e38 	.word	0x08023e38
 801393c:	08023f08 	.word	0x08023f08
 8013940:	08023e8c 	.word	0x08023e8c
 8013944:	080275bc 	.word	0x080275bc

08013948 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013948:	b480      	push	{r7}
 801394a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801394c:	bf00      	nop
 801394e:	46bd      	mov	sp, r7
 8013950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013954:	4770      	bx	lr
	...

08013958 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b086      	sub	sp, #24
 801395c:	af00      	add	r7, sp, #0
 801395e:	60f8      	str	r0, [r7, #12]
 8013960:	60b9      	str	r1, [r7, #8]
 8013962:	607a      	str	r2, [r7, #4]
 8013964:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d108      	bne.n	801397e <netif_add+0x26>
 801396c:	4b56      	ldr	r3, [pc, #344]	; (8013ac8 <netif_add+0x170>)
 801396e:	f240 1227 	movw	r2, #295	; 0x127
 8013972:	4956      	ldr	r1, [pc, #344]	; (8013acc <netif_add+0x174>)
 8013974:	4856      	ldr	r0, [pc, #344]	; (8013ad0 <netif_add+0x178>)
 8013976:	f00b fea3 	bl	801f6c0 <iprintf>
 801397a:	2300      	movs	r3, #0
 801397c:	e09f      	b.n	8013abe <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013980:	2b00      	cmp	r3, #0
 8013982:	d108      	bne.n	8013996 <netif_add+0x3e>
 8013984:	4b50      	ldr	r3, [pc, #320]	; (8013ac8 <netif_add+0x170>)
 8013986:	f44f 7294 	mov.w	r2, #296	; 0x128
 801398a:	4952      	ldr	r1, [pc, #328]	; (8013ad4 <netif_add+0x17c>)
 801398c:	4850      	ldr	r0, [pc, #320]	; (8013ad0 <netif_add+0x178>)
 801398e:	f00b fe97 	bl	801f6c0 <iprintf>
 8013992:	2300      	movs	r3, #0
 8013994:	e093      	b.n	8013abe <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013996:	68bb      	ldr	r3, [r7, #8]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d101      	bne.n	80139a0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801399c:	4b4e      	ldr	r3, [pc, #312]	; (8013ad8 <netif_add+0x180>)
 801399e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d101      	bne.n	80139aa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80139a6:	4b4c      	ldr	r3, [pc, #304]	; (8013ad8 <netif_add+0x180>)
 80139a8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d101      	bne.n	80139b4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80139b0:	4b49      	ldr	r3, [pc, #292]	; (8013ad8 <netif_add+0x180>)
 80139b2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	2200      	movs	r2, #0
 80139b8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	2200      	movs	r2, #0
 80139be:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	2200      	movs	r2, #0
 80139c4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	4a44      	ldr	r2, [pc, #272]	; (8013adc <netif_add+0x184>)
 80139ca:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	2200      	movs	r2, #0
 80139d0:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	2200      	movs	r2, #0
 80139d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	6a3a      	ldr	r2, [r7, #32]
 80139de:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 80139e0:	4b3f      	ldr	r3, [pc, #252]	; (8013ae0 <netif_add+0x188>)
 80139e2:	781a      	ldrb	r2, [r3, #0]
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139ee:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80139f0:	683b      	ldr	r3, [r7, #0]
 80139f2:	687a      	ldr	r2, [r7, #4]
 80139f4:	68b9      	ldr	r1, [r7, #8]
 80139f6:	68f8      	ldr	r0, [r7, #12]
 80139f8:	f000 f966 	bl	8013cc8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80139fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139fe:	68f8      	ldr	r0, [r7, #12]
 8013a00:	4798      	blx	r3
 8013a02:	4603      	mov	r3, r0
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d001      	beq.n	8013a0c <netif_add+0xb4>
    return NULL;
 8013a08:	2300      	movs	r3, #0
 8013a0a:	e058      	b.n	8013abe <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013a12:	2bff      	cmp	r3, #255	; 0xff
 8013a14:	d103      	bne.n	8013a1e <netif_add+0xc6>
        netif->num = 0;
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	2200      	movs	r2, #0
 8013a1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 8013a1e:	2300      	movs	r3, #0
 8013a20:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013a22:	4b30      	ldr	r3, [pc, #192]	; (8013ae4 <netif_add+0x18c>)
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	617b      	str	r3, [r7, #20]
 8013a28:	e02b      	b.n	8013a82 <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8013a2a:	697a      	ldr	r2, [r7, #20]
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	429a      	cmp	r2, r3
 8013a30:	d106      	bne.n	8013a40 <netif_add+0xe8>
 8013a32:	4b25      	ldr	r3, [pc, #148]	; (8013ac8 <netif_add+0x170>)
 8013a34:	f240 128b 	movw	r2, #395	; 0x18b
 8013a38:	492b      	ldr	r1, [pc, #172]	; (8013ae8 <netif_add+0x190>)
 8013a3a:	4825      	ldr	r0, [pc, #148]	; (8013ad0 <netif_add+0x178>)
 8013a3c:	f00b fe40 	bl	801f6c0 <iprintf>
        num_netifs++;
 8013a40:	693b      	ldr	r3, [r7, #16]
 8013a42:	3301      	adds	r3, #1
 8013a44:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8013a46:	693b      	ldr	r3, [r7, #16]
 8013a48:	2bff      	cmp	r3, #255	; 0xff
 8013a4a:	dd06      	ble.n	8013a5a <netif_add+0x102>
 8013a4c:	4b1e      	ldr	r3, [pc, #120]	; (8013ac8 <netif_add+0x170>)
 8013a4e:	f240 128d 	movw	r2, #397	; 0x18d
 8013a52:	4926      	ldr	r1, [pc, #152]	; (8013aec <netif_add+0x194>)
 8013a54:	481e      	ldr	r0, [pc, #120]	; (8013ad0 <netif_add+0x178>)
 8013a56:	f00b fe33 	bl	801f6c0 <iprintf>
        if (netif2->num == netif->num) {
 8013a5a:	697b      	ldr	r3, [r7, #20]
 8013a5c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013a66:	429a      	cmp	r2, r3
 8013a68:	d108      	bne.n	8013a7c <netif_add+0x124>
          netif->num++;
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013a70:	3301      	adds	r3, #1
 8013a72:	b2da      	uxtb	r2, r3
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 8013a7a:	e005      	b.n	8013a88 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013a7c:	697b      	ldr	r3, [r7, #20]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	617b      	str	r3, [r7, #20]
 8013a82:	697b      	ldr	r3, [r7, #20]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d1d0      	bne.n	8013a2a <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 8013a88:	697b      	ldr	r3, [r7, #20]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d1be      	bne.n	8013a0c <netif_add+0xb4>
  }
  if (netif->num == 254) {
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013a94:	2bfe      	cmp	r3, #254	; 0xfe
 8013a96:	d103      	bne.n	8013aa0 <netif_add+0x148>
    netif_num = 0;
 8013a98:	4b11      	ldr	r3, [pc, #68]	; (8013ae0 <netif_add+0x188>)
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	701a      	strb	r2, [r3, #0]
 8013a9e:	e006      	b.n	8013aae <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013aa6:	3301      	adds	r3, #1
 8013aa8:	b2da      	uxtb	r2, r3
 8013aaa:	4b0d      	ldr	r3, [pc, #52]	; (8013ae0 <netif_add+0x188>)
 8013aac:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013aae:	4b0d      	ldr	r3, [pc, #52]	; (8013ae4 <netif_add+0x18c>)
 8013ab0:	681a      	ldr	r2, [r3, #0]
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8013ab6:	4a0b      	ldr	r2, [pc, #44]	; (8013ae4 <netif_add+0x18c>)
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013abc:	68fb      	ldr	r3, [r7, #12]
}
 8013abe:	4618      	mov	r0, r3
 8013ac0:	3718      	adds	r7, #24
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	bd80      	pop	{r7, pc}
 8013ac6:	bf00      	nop
 8013ac8:	08023f24 	.word	0x08023f24
 8013acc:	08023fb8 	.word	0x08023fb8
 8013ad0:	08023f74 	.word	0x08023f74
 8013ad4:	08023fd4 	.word	0x08023fd4
 8013ad8:	08027630 	.word	0x08027630
 8013adc:	08013eb9 	.word	0x08013eb9
 8013ae0:	20004770 	.word	0x20004770
 8013ae4:	2000b8c4 	.word	0x2000b8c4
 8013ae8:	08023ff8 	.word	0x08023ff8
 8013aec:	0802400c 	.word	0x0802400c

08013af0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b082      	sub	sp, #8
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8013afa:	6839      	ldr	r1, [r7, #0]
 8013afc:	6878      	ldr	r0, [r7, #4]
 8013afe:	f002 fe6b 	bl	80167d8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8013b02:	6839      	ldr	r1, [r7, #0]
 8013b04:	6878      	ldr	r0, [r7, #4]
 8013b06:	f007 ff03 	bl	801b910 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8013b0a:	bf00      	nop
 8013b0c:	3708      	adds	r7, #8
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd80      	pop	{r7, pc}
	...

08013b14 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b086      	sub	sp, #24
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	60f8      	str	r0, [r7, #12]
 8013b1c:	60b9      	str	r1, [r7, #8]
 8013b1e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8013b20:	68bb      	ldr	r3, [r7, #8]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d106      	bne.n	8013b34 <netif_do_set_ipaddr+0x20>
 8013b26:	4b1d      	ldr	r3, [pc, #116]	; (8013b9c <netif_do_set_ipaddr+0x88>)
 8013b28:	f240 12cb 	movw	r2, #459	; 0x1cb
 8013b2c:	491c      	ldr	r1, [pc, #112]	; (8013ba0 <netif_do_set_ipaddr+0x8c>)
 8013b2e:	481d      	ldr	r0, [pc, #116]	; (8013ba4 <netif_do_set_ipaddr+0x90>)
 8013b30:	f00b fdc6 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d106      	bne.n	8013b48 <netif_do_set_ipaddr+0x34>
 8013b3a:	4b18      	ldr	r3, [pc, #96]	; (8013b9c <netif_do_set_ipaddr+0x88>)
 8013b3c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8013b40:	4917      	ldr	r1, [pc, #92]	; (8013ba0 <netif_do_set_ipaddr+0x8c>)
 8013b42:	4818      	ldr	r0, [pc, #96]	; (8013ba4 <netif_do_set_ipaddr+0x90>)
 8013b44:	f00b fdbc 	bl	801f6c0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8013b48:	68bb      	ldr	r3, [r7, #8]
 8013b4a:	681a      	ldr	r2, [r3, #0]
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	3304      	adds	r3, #4
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	429a      	cmp	r2, r3
 8013b54:	d01c      	beq.n	8013b90 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8013b56:	68bb      	ldr	r3, [r7, #8]
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	3304      	adds	r3, #4
 8013b60:	681a      	ldr	r2, [r3, #0]
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8013b66:	f107 0314 	add.w	r3, r7, #20
 8013b6a:	4619      	mov	r1, r3
 8013b6c:	6878      	ldr	r0, [r7, #4]
 8013b6e:	f7ff ffbf 	bl	8013af0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013b72:	68bb      	ldr	r3, [r7, #8]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d002      	beq.n	8013b7e <netif_do_set_ipaddr+0x6a>
 8013b78:	68bb      	ldr	r3, [r7, #8]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	e000      	b.n	8013b80 <netif_do_set_ipaddr+0x6c>
 8013b7e:	2300      	movs	r3, #0
 8013b80:	68fa      	ldr	r2, [r7, #12]
 8013b82:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013b84:	2101      	movs	r1, #1
 8013b86:	68f8      	ldr	r0, [r7, #12]
 8013b88:	f000 f924 	bl	8013dd4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8013b8c:	2301      	movs	r3, #1
 8013b8e:	e000      	b.n	8013b92 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8013b90:	2300      	movs	r3, #0
}
 8013b92:	4618      	mov	r0, r3
 8013b94:	3718      	adds	r7, #24
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}
 8013b9a:	bf00      	nop
 8013b9c:	08023f24 	.word	0x08023f24
 8013ba0:	0802403c 	.word	0x0802403c
 8013ba4:	08023f74 	.word	0x08023f74

08013ba8 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b084      	sub	sp, #16
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
 8013bb0:	6039      	str	r1, [r7, #0]
  ip_addr_t old_addr;

  LWIP_ERROR("netif_set_ipaddr: invalid netif", netif != NULL, return);
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d107      	bne.n	8013bc8 <netif_set_ipaddr+0x20>
 8013bb8:	4b0b      	ldr	r3, [pc, #44]	; (8013be8 <netif_set_ipaddr+0x40>)
 8013bba:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8013bbe:	490b      	ldr	r1, [pc, #44]	; (8013bec <netif_set_ipaddr+0x44>)
 8013bc0:	480b      	ldr	r0, [pc, #44]	; (8013bf0 <netif_set_ipaddr+0x48>)
 8013bc2:	f00b fd7d 	bl	801f6c0 <iprintf>
 8013bc6:	e00b      	b.n	8013be0 <netif_set_ipaddr+0x38>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013bc8:	683b      	ldr	r3, [r7, #0]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d101      	bne.n	8013bd2 <netif_set_ipaddr+0x2a>
    ipaddr = IP4_ADDR_ANY4;
 8013bce:	4b09      	ldr	r3, [pc, #36]	; (8013bf4 <netif_set_ipaddr+0x4c>)
 8013bd0:	603b      	str	r3, [r7, #0]
  }

  LWIP_ASSERT_CORE_LOCKED();

  if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013bd2:	f107 030c 	add.w	r3, r7, #12
 8013bd6:	461a      	mov	r2, r3
 8013bd8:	6839      	ldr	r1, [r7, #0]
 8013bda:	6878      	ldr	r0, [r7, #4]
 8013bdc:	f7ff ff9a 	bl	8013b14 <netif_do_set_ipaddr>
    netif_ext_callback_args_t args;
    args.ipv4_changed.old_address = &old_addr;
    netif_invoke_ext_callback(netif, LWIP_NSC_IPV4_ADDRESS_CHANGED, &args);
#endif
  }
}
 8013be0:	3710      	adds	r7, #16
 8013be2:	46bd      	mov	sp, r7
 8013be4:	bd80      	pop	{r7, pc}
 8013be6:	bf00      	nop
 8013be8:	08023f24 	.word	0x08023f24
 8013bec:	0802404c 	.word	0x0802404c
 8013bf0:	08023f74 	.word	0x08023f74
 8013bf4:	08027630 	.word	0x08027630

08013bf8 <netif_do_set_netmask>:

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8013bf8:	b480      	push	{r7}
 8013bfa:	b085      	sub	sp, #20
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	60f8      	str	r0, [r7, #12]
 8013c00:	60b9      	str	r1, [r7, #8]
 8013c02:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013c04:	68bb      	ldr	r3, [r7, #8]
 8013c06:	681a      	ldr	r2, [r3, #0]
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	3308      	adds	r3, #8
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	429a      	cmp	r2, r3
 8013c10:	d00a      	beq.n	8013c28 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013c12:	68bb      	ldr	r3, [r7, #8]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d002      	beq.n	8013c1e <netif_do_set_netmask+0x26>
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	e000      	b.n	8013c20 <netif_do_set_netmask+0x28>
 8013c1e:	2300      	movs	r3, #0
 8013c20:	68fa      	ldr	r2, [r7, #12]
 8013c22:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013c24:	2301      	movs	r3, #1
 8013c26:	e000      	b.n	8013c2a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8013c28:	2300      	movs	r3, #0
}
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	3714      	adds	r7, #20
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c34:	4770      	bx	lr
	...

08013c38 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b084      	sub	sp, #16
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]
 8013c40:	6039      	str	r1, [r7, #0]
#if LWIP_NETIF_EXT_STATUS_CALLBACK
  ip_addr_t old_nm_val;
  ip_addr_t *old_nm = &old_nm_val;
#else
  ip_addr_t *old_nm = NULL;
 8013c42:	2300      	movs	r3, #0
 8013c44:	60fb      	str	r3, [r7, #12]
#endif
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_netmask: invalid netif", netif != NULL, return);
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d107      	bne.n	8013c5c <netif_set_netmask+0x24>
 8013c4c:	4b0a      	ldr	r3, [pc, #40]	; (8013c78 <netif_set_netmask+0x40>)
 8013c4e:	f240 223a 	movw	r2, #570	; 0x23a
 8013c52:	490a      	ldr	r1, [pc, #40]	; (8013c7c <netif_set_netmask+0x44>)
 8013c54:	480a      	ldr	r0, [pc, #40]	; (8013c80 <netif_set_netmask+0x48>)
 8013c56:	f00b fd33 	bl	801f6c0 <iprintf>
 8013c5a:	e009      	b.n	8013c70 <netif_set_netmask+0x38>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (netmask == NULL) {
 8013c5c:	683b      	ldr	r3, [r7, #0]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d101      	bne.n	8013c66 <netif_set_netmask+0x2e>
    netmask = IP4_ADDR_ANY4;
 8013c62:	4b08      	ldr	r3, [pc, #32]	; (8013c84 <netif_set_netmask+0x4c>)
 8013c64:	603b      	str	r3, [r7, #0]
  }

  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013c66:	68fa      	ldr	r2, [r7, #12]
 8013c68:	6839      	ldr	r1, [r7, #0]
 8013c6a:	6878      	ldr	r0, [r7, #4]
 8013c6c:	f7ff ffc4 	bl	8013bf8 <netif_do_set_netmask>
    netif_ext_callback_args_t args;
    args.ipv4_changed.old_netmask = old_nm;
    netif_invoke_ext_callback(netif, LWIP_NSC_IPV4_NETMASK_CHANGED, &args);
#endif
  }
}
 8013c70:	3710      	adds	r7, #16
 8013c72:	46bd      	mov	sp, r7
 8013c74:	bd80      	pop	{r7, pc}
 8013c76:	bf00      	nop
 8013c78:	08023f24 	.word	0x08023f24
 8013c7c:	0802406c 	.word	0x0802406c
 8013c80:	08023f74 	.word	0x08023f74
 8013c84:	08027630 	.word	0x08027630

08013c88 <netif_do_set_gw>:

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8013c88:	b480      	push	{r7}
 8013c8a:	b085      	sub	sp, #20
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	60f8      	str	r0, [r7, #12]
 8013c90:	60b9      	str	r1, [r7, #8]
 8013c92:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8013c94:	68bb      	ldr	r3, [r7, #8]
 8013c96:	681a      	ldr	r2, [r3, #0]
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	330c      	adds	r3, #12
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d00a      	beq.n	8013cb8 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013ca2:	68bb      	ldr	r3, [r7, #8]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d002      	beq.n	8013cae <netif_do_set_gw+0x26>
 8013ca8:	68bb      	ldr	r3, [r7, #8]
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	e000      	b.n	8013cb0 <netif_do_set_gw+0x28>
 8013cae:	2300      	movs	r3, #0
 8013cb0:	68fa      	ldr	r2, [r7, #12]
 8013cb2:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8013cb4:	2301      	movs	r3, #1
 8013cb6:	e000      	b.n	8013cba <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8013cb8:	2300      	movs	r3, #0
}
 8013cba:	4618      	mov	r0, r3
 8013cbc:	3714      	adds	r7, #20
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc4:	4770      	bx	lr
	...

08013cc8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b088      	sub	sp, #32
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	60f8      	str	r0, [r7, #12]
 8013cd0:	60b9      	str	r1, [r7, #8]
 8013cd2:	607a      	str	r2, [r7, #4]
 8013cd4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8013cda:	2300      	movs	r3, #0
 8013cdc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013cde:	68bb      	ldr	r3, [r7, #8]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d101      	bne.n	8013ce8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013ce4:	4b1c      	ldr	r3, [pc, #112]	; (8013d58 <netif_set_addr+0x90>)
 8013ce6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d101      	bne.n	8013cf2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8013cee:	4b1a      	ldr	r3, [pc, #104]	; (8013d58 <netif_set_addr+0x90>)
 8013cf0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013cf2:	683b      	ldr	r3, [r7, #0]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d101      	bne.n	8013cfc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013cf8:	4b17      	ldr	r3, [pc, #92]	; (8013d58 <netif_set_addr+0x90>)
 8013cfa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8013cfc:	68bb      	ldr	r3, [r7, #8]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d003      	beq.n	8013d0a <netif_set_addr+0x42>
 8013d02:	68bb      	ldr	r3, [r7, #8]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d101      	bne.n	8013d0e <netif_set_addr+0x46>
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	e000      	b.n	8013d10 <netif_set_addr+0x48>
 8013d0e:	2300      	movs	r3, #0
 8013d10:	617b      	str	r3, [r7, #20]
  if (remove) {
 8013d12:	697b      	ldr	r3, [r7, #20]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d006      	beq.n	8013d26 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013d18:	f107 0310 	add.w	r3, r7, #16
 8013d1c:	461a      	mov	r2, r3
 8013d1e:	68b9      	ldr	r1, [r7, #8]
 8013d20:	68f8      	ldr	r0, [r7, #12]
 8013d22:	f7ff fef7 	bl	8013b14 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013d26:	69fa      	ldr	r2, [r7, #28]
 8013d28:	6879      	ldr	r1, [r7, #4]
 8013d2a:	68f8      	ldr	r0, [r7, #12]
 8013d2c:	f7ff ff64 	bl	8013bf8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8013d30:	69ba      	ldr	r2, [r7, #24]
 8013d32:	6839      	ldr	r1, [r7, #0]
 8013d34:	68f8      	ldr	r0, [r7, #12]
 8013d36:	f7ff ffa7 	bl	8013c88 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8013d3a:	697b      	ldr	r3, [r7, #20]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d106      	bne.n	8013d4e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013d40:	f107 0310 	add.w	r3, r7, #16
 8013d44:	461a      	mov	r2, r3
 8013d46:	68b9      	ldr	r1, [r7, #8]
 8013d48:	68f8      	ldr	r0, [r7, #12]
 8013d4a:	f7ff fee3 	bl	8013b14 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8013d4e:	bf00      	nop
 8013d50:	3720      	adds	r7, #32
 8013d52:	46bd      	mov	sp, r7
 8013d54:	bd80      	pop	{r7, pc}
 8013d56:	bf00      	nop
 8013d58:	08027630 	.word	0x08027630

08013d5c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013d5c:	b480      	push	{r7}
 8013d5e:	b083      	sub	sp, #12
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013d64:	4a04      	ldr	r2, [pc, #16]	; (8013d78 <netif_set_default+0x1c>)
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8013d6a:	bf00      	nop
 8013d6c:	370c      	adds	r7, #12
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d74:	4770      	bx	lr
 8013d76:	bf00      	nop
 8013d78:	2000b8c8 	.word	0x2000b8c8

08013d7c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b082      	sub	sp, #8
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d107      	bne.n	8013d9a <netif_set_up+0x1e>
 8013d8a:	4b0f      	ldr	r3, [pc, #60]	; (8013dc8 <netif_set_up+0x4c>)
 8013d8c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8013d90:	490e      	ldr	r1, [pc, #56]	; (8013dcc <netif_set_up+0x50>)
 8013d92:	480f      	ldr	r0, [pc, #60]	; (8013dd0 <netif_set_up+0x54>)
 8013d94:	f00b fc94 	bl	801f6c0 <iprintf>
 8013d98:	e013      	b.n	8013dc2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8013da0:	f003 0301 	and.w	r3, r3, #1
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d10c      	bne.n	8013dc2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8013dae:	f043 0301 	orr.w	r3, r3, #1
 8013db2:	b2da      	uxtb	r2, r3
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013dba:	2103      	movs	r1, #3
 8013dbc:	6878      	ldr	r0, [r7, #4]
 8013dbe:	f000 f809 	bl	8013dd4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8013dc2:	3708      	adds	r7, #8
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	bd80      	pop	{r7, pc}
 8013dc8:	08023f24 	.word	0x08023f24
 8013dcc:	080240ac 	.word	0x080240ac
 8013dd0:	08023f74 	.word	0x08023f74

08013dd4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b082      	sub	sp, #8
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
 8013ddc:	460b      	mov	r3, r1
 8013dde:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d106      	bne.n	8013df4 <netif_issue_reports+0x20>
 8013de6:	4b18      	ldr	r3, [pc, #96]	; (8013e48 <netif_issue_reports+0x74>)
 8013de8:	f240 326d 	movw	r2, #877	; 0x36d
 8013dec:	4917      	ldr	r1, [pc, #92]	; (8013e4c <netif_issue_reports+0x78>)
 8013dee:	4818      	ldr	r0, [pc, #96]	; (8013e50 <netif_issue_reports+0x7c>)
 8013df0:	f00b fc66 	bl	801f6c0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8013dfa:	f003 0304 	and.w	r3, r3, #4
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d01e      	beq.n	8013e40 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8013e08:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d017      	beq.n	8013e40 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013e10:	78fb      	ldrb	r3, [r7, #3]
 8013e12:	f003 0301 	and.w	r3, r3, #1
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d013      	beq.n	8013e42 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	3304      	adds	r3, #4
 8013e1e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d00e      	beq.n	8013e42 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8013e2a:	f003 0308 	and.w	r3, r3, #8
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d007      	beq.n	8013e42 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	3304      	adds	r3, #4
 8013e36:	4619      	mov	r1, r3
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f008 fcd3 	bl	801c7e4 <etharp_request>
 8013e3e:	e000      	b.n	8013e42 <netif_issue_reports+0x6e>
    return;
 8013e40:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8013e42:	3708      	adds	r7, #8
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}
 8013e48:	08023f24 	.word	0x08023f24
 8013e4c:	080240c8 	.word	0x080240c8
 8013e50:	08023f74 	.word	0x08023f74

08013e54 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b082      	sub	sp, #8
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d107      	bne.n	8013e72 <netif_set_down+0x1e>
 8013e62:	4b12      	ldr	r3, [pc, #72]	; (8013eac <netif_set_down+0x58>)
 8013e64:	f240 329b 	movw	r2, #923	; 0x39b
 8013e68:	4911      	ldr	r1, [pc, #68]	; (8013eb0 <netif_set_down+0x5c>)
 8013e6a:	4812      	ldr	r0, [pc, #72]	; (8013eb4 <netif_set_down+0x60>)
 8013e6c:	f00b fc28 	bl	801f6c0 <iprintf>
 8013e70:	e019      	b.n	8013ea6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8013e78:	f003 0301 	and.w	r3, r3, #1
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d012      	beq.n	8013ea6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8013e86:	f023 0301 	bic.w	r3, r3, #1
 8013e8a:	b2da      	uxtb	r2, r3
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8013e98:	f003 0308 	and.w	r3, r3, #8
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d002      	beq.n	8013ea6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8013ea0:	6878      	ldr	r0, [r7, #4]
 8013ea2:	f008 f85d 	bl	801bf60 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8013ea6:	3708      	adds	r7, #8
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd80      	pop	{r7, pc}
 8013eac:	08023f24 	.word	0x08023f24
 8013eb0:	080240ec 	.word	0x080240ec
 8013eb4:	08023f74 	.word	0x08023f74

08013eb8 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8013eb8:	b480      	push	{r7}
 8013eba:	b085      	sub	sp, #20
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	60f8      	str	r0, [r7, #12]
 8013ec0:	60b9      	str	r1, [r7, #8]
 8013ec2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8013ec4:	f06f 030b 	mvn.w	r3, #11
}
 8013ec8:	4618      	mov	r0, r3
 8013eca:	3714      	adds	r7, #20
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed2:	4770      	bx	lr

08013ed4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8013ed4:	b480      	push	{r7}
 8013ed6:	b085      	sub	sp, #20
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	4603      	mov	r3, r0
 8013edc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8013ede:	79fb      	ldrb	r3, [r7, #7]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d013      	beq.n	8013f0c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8013ee4:	4b0d      	ldr	r3, [pc, #52]	; (8013f1c <netif_get_by_index+0x48>)
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	60fb      	str	r3, [r7, #12]
 8013eea:	e00c      	b.n	8013f06 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013ef2:	3301      	adds	r3, #1
 8013ef4:	b2db      	uxtb	r3, r3
 8013ef6:	79fa      	ldrb	r2, [r7, #7]
 8013ef8:	429a      	cmp	r2, r3
 8013efa:	d101      	bne.n	8013f00 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	e006      	b.n	8013f0e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	60fb      	str	r3, [r7, #12]
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d1ef      	bne.n	8013eec <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8013f0c:	2300      	movs	r3, #0
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	3714      	adds	r7, #20
 8013f12:	46bd      	mov	sp, r7
 8013f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f18:	4770      	bx	lr
 8013f1a:	bf00      	nop
 8013f1c:	2000b8c4 	.word	0x2000b8c4

08013f20 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b082      	sub	sp, #8
 8013f24:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8013f26:	f00a fad1 	bl	801e4cc <sys_arch_protect>
 8013f2a:	6038      	str	r0, [r7, #0]
 8013f2c:	4b0d      	ldr	r3, [pc, #52]	; (8013f64 <pbuf_free_ooseq+0x44>)
 8013f2e:	2200      	movs	r2, #0
 8013f30:	701a      	strb	r2, [r3, #0]
 8013f32:	6838      	ldr	r0, [r7, #0]
 8013f34:	f00a fad8 	bl	801e4e8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013f38:	4b0b      	ldr	r3, [pc, #44]	; (8013f68 <pbuf_free_ooseq+0x48>)
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	607b      	str	r3, [r7, #4]
 8013f3e:	e00a      	b.n	8013f56 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d003      	beq.n	8013f50 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013f48:	6878      	ldr	r0, [r7, #4]
 8013f4a:	f002 fc83 	bl	8016854 <tcp_free_ooseq>
      return;
 8013f4e:	e005      	b.n	8013f5c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	68db      	ldr	r3, [r3, #12]
 8013f54:	607b      	str	r3, [r7, #4]
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d1f1      	bne.n	8013f40 <pbuf_free_ooseq+0x20>
    }
  }
}
 8013f5c:	3708      	adds	r7, #8
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd80      	pop	{r7, pc}
 8013f62:	bf00      	nop
 8013f64:	2000b8cc 	.word	0x2000b8cc
 8013f68:	2000b8d4 	.word	0x2000b8d4

08013f6c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b082      	sub	sp, #8
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013f74:	f7ff ffd4 	bl	8013f20 <pbuf_free_ooseq>
}
 8013f78:	bf00      	nop
 8013f7a:	3708      	adds	r7, #8
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	bd80      	pop	{r7, pc}

08013f80 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b082      	sub	sp, #8
 8013f84:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013f86:	f00a faa1 	bl	801e4cc <sys_arch_protect>
 8013f8a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013f8c:	4b0f      	ldr	r3, [pc, #60]	; (8013fcc <pbuf_pool_is_empty+0x4c>)
 8013f8e:	781b      	ldrb	r3, [r3, #0]
 8013f90:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013f92:	4b0e      	ldr	r3, [pc, #56]	; (8013fcc <pbuf_pool_is_empty+0x4c>)
 8013f94:	2201      	movs	r2, #1
 8013f96:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013f98:	6878      	ldr	r0, [r7, #4]
 8013f9a:	f00a faa5 	bl	801e4e8 <sys_arch_unprotect>

  if (!queued) {
 8013f9e:	78fb      	ldrb	r3, [r7, #3]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d10f      	bne.n	8013fc4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013fa4:	2100      	movs	r1, #0
 8013fa6:	480a      	ldr	r0, [pc, #40]	; (8013fd0 <pbuf_pool_is_empty+0x50>)
 8013fa8:	f7fd fee8 	bl	8011d7c <tcpip_try_callback>
 8013fac:	4603      	mov	r3, r0
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d008      	beq.n	8013fc4 <pbuf_pool_is_empty+0x44>
 8013fb2:	f00a fa8b 	bl	801e4cc <sys_arch_protect>
 8013fb6:	6078      	str	r0, [r7, #4]
 8013fb8:	4b04      	ldr	r3, [pc, #16]	; (8013fcc <pbuf_pool_is_empty+0x4c>)
 8013fba:	2200      	movs	r2, #0
 8013fbc:	701a      	strb	r2, [r3, #0]
 8013fbe:	6878      	ldr	r0, [r7, #4]
 8013fc0:	f00a fa92 	bl	801e4e8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013fc4:	bf00      	nop
 8013fc6:	3708      	adds	r7, #8
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	bd80      	pop	{r7, pc}
 8013fcc:	2000b8cc 	.word	0x2000b8cc
 8013fd0:	08013f6d 	.word	0x08013f6d

08013fd4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8013fd4:	b480      	push	{r7}
 8013fd6:	b085      	sub	sp, #20
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	60f8      	str	r0, [r7, #12]
 8013fdc:	60b9      	str	r1, [r7, #8]
 8013fde:	4611      	mov	r1, r2
 8013fe0:	461a      	mov	r2, r3
 8013fe2:	460b      	mov	r3, r1
 8013fe4:	80fb      	strh	r3, [r7, #6]
 8013fe6:	4613      	mov	r3, r2
 8013fe8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	2200      	movs	r2, #0
 8013fee:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	68ba      	ldr	r2, [r7, #8]
 8013ff4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	88fa      	ldrh	r2, [r7, #6]
 8013ffa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	88ba      	ldrh	r2, [r7, #4]
 8014000:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8014002:	8b3b      	ldrh	r3, [r7, #24]
 8014004:	b2da      	uxtb	r2, r3
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	7f3a      	ldrb	r2, [r7, #28]
 801400e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	2201      	movs	r2, #1
 8014014:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	2200      	movs	r2, #0
 801401a:	73da      	strb	r2, [r3, #15]
}
 801401c:	bf00      	nop
 801401e:	3714      	adds	r7, #20
 8014020:	46bd      	mov	sp, r7
 8014022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014026:	4770      	bx	lr

08014028 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b08c      	sub	sp, #48	; 0x30
 801402c:	af02      	add	r7, sp, #8
 801402e:	4603      	mov	r3, r0
 8014030:	71fb      	strb	r3, [r7, #7]
 8014032:	460b      	mov	r3, r1
 8014034:	80bb      	strh	r3, [r7, #4]
 8014036:	4613      	mov	r3, r2
 8014038:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801403a:	79fb      	ldrb	r3, [r7, #7]
 801403c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801403e:	887b      	ldrh	r3, [r7, #2]
 8014040:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8014044:	d07f      	beq.n	8014146 <pbuf_alloc+0x11e>
 8014046:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801404a:	f300 80c8 	bgt.w	80141de <pbuf_alloc+0x1b6>
 801404e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8014052:	d010      	beq.n	8014076 <pbuf_alloc+0x4e>
 8014054:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8014058:	f300 80c1 	bgt.w	80141de <pbuf_alloc+0x1b6>
 801405c:	2b01      	cmp	r3, #1
 801405e:	d002      	beq.n	8014066 <pbuf_alloc+0x3e>
 8014060:	2b41      	cmp	r3, #65	; 0x41
 8014062:	f040 80bc 	bne.w	80141de <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8014066:	887a      	ldrh	r2, [r7, #2]
 8014068:	88bb      	ldrh	r3, [r7, #4]
 801406a:	4619      	mov	r1, r3
 801406c:	2000      	movs	r0, #0
 801406e:	f000 f8d1 	bl	8014214 <pbuf_alloc_reference>
 8014072:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8014074:	e0bd      	b.n	80141f2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8014076:	2300      	movs	r3, #0
 8014078:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801407a:	2300      	movs	r3, #0
 801407c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801407e:	88bb      	ldrh	r3, [r7, #4]
 8014080:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8014082:	200c      	movs	r0, #12
 8014084:	f7ff fbe4 	bl	8013850 <memp_malloc>
 8014088:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801408a:	693b      	ldr	r3, [r7, #16]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d109      	bne.n	80140a4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8014090:	f7ff ff76 	bl	8013f80 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8014094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014096:	2b00      	cmp	r3, #0
 8014098:	d002      	beq.n	80140a0 <pbuf_alloc+0x78>
            pbuf_free(p);
 801409a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801409c:	f000 faa8 	bl	80145f0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80140a0:	2300      	movs	r3, #0
 80140a2:	e0a7      	b.n	80141f4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80140a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80140a6:	3303      	adds	r3, #3
 80140a8:	b29b      	uxth	r3, r3
 80140aa:	f023 0303 	bic.w	r3, r3, #3
 80140ae:	b29b      	uxth	r3, r3
 80140b0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80140b4:	b29b      	uxth	r3, r3
 80140b6:	8b7a      	ldrh	r2, [r7, #26]
 80140b8:	4293      	cmp	r3, r2
 80140ba:	bf28      	it	cs
 80140bc:	4613      	movcs	r3, r2
 80140be:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80140c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80140c2:	3310      	adds	r3, #16
 80140c4:	693a      	ldr	r2, [r7, #16]
 80140c6:	4413      	add	r3, r2
 80140c8:	3303      	adds	r3, #3
 80140ca:	f023 0303 	bic.w	r3, r3, #3
 80140ce:	4618      	mov	r0, r3
 80140d0:	89f9      	ldrh	r1, [r7, #14]
 80140d2:	8b7a      	ldrh	r2, [r7, #26]
 80140d4:	2300      	movs	r3, #0
 80140d6:	9301      	str	r3, [sp, #4]
 80140d8:	887b      	ldrh	r3, [r7, #2]
 80140da:	9300      	str	r3, [sp, #0]
 80140dc:	460b      	mov	r3, r1
 80140de:	4601      	mov	r1, r0
 80140e0:	6938      	ldr	r0, [r7, #16]
 80140e2:	f7ff ff77 	bl	8013fd4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80140e6:	693b      	ldr	r3, [r7, #16]
 80140e8:	685b      	ldr	r3, [r3, #4]
 80140ea:	f003 0303 	and.w	r3, r3, #3
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d006      	beq.n	8014100 <pbuf_alloc+0xd8>
 80140f2:	4b42      	ldr	r3, [pc, #264]	; (80141fc <pbuf_alloc+0x1d4>)
 80140f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80140f8:	4941      	ldr	r1, [pc, #260]	; (8014200 <pbuf_alloc+0x1d8>)
 80140fa:	4842      	ldr	r0, [pc, #264]	; (8014204 <pbuf_alloc+0x1dc>)
 80140fc:	f00b fae0 	bl	801f6c0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8014100:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014102:	3303      	adds	r3, #3
 8014104:	f023 0303 	bic.w	r3, r3, #3
 8014108:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801410c:	d106      	bne.n	801411c <pbuf_alloc+0xf4>
 801410e:	4b3b      	ldr	r3, [pc, #236]	; (80141fc <pbuf_alloc+0x1d4>)
 8014110:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014114:	493c      	ldr	r1, [pc, #240]	; (8014208 <pbuf_alloc+0x1e0>)
 8014116:	483b      	ldr	r0, [pc, #236]	; (8014204 <pbuf_alloc+0x1dc>)
 8014118:	f00b fad2 	bl	801f6c0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801411e:	2b00      	cmp	r3, #0
 8014120:	d102      	bne.n	8014128 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8014122:	693b      	ldr	r3, [r7, #16]
 8014124:	627b      	str	r3, [r7, #36]	; 0x24
 8014126:	e002      	b.n	801412e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8014128:	69fb      	ldr	r3, [r7, #28]
 801412a:	693a      	ldr	r2, [r7, #16]
 801412c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801412e:	693b      	ldr	r3, [r7, #16]
 8014130:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8014132:	8b7a      	ldrh	r2, [r7, #26]
 8014134:	89fb      	ldrh	r3, [r7, #14]
 8014136:	1ad3      	subs	r3, r2, r3
 8014138:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801413a:	2300      	movs	r3, #0
 801413c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801413e:	8b7b      	ldrh	r3, [r7, #26]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d19e      	bne.n	8014082 <pbuf_alloc+0x5a>
      break;
 8014144:	e055      	b.n	80141f2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8014146:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014148:	3303      	adds	r3, #3
 801414a:	b29b      	uxth	r3, r3
 801414c:	f023 0303 	bic.w	r3, r3, #3
 8014150:	b29a      	uxth	r2, r3
 8014152:	88bb      	ldrh	r3, [r7, #4]
 8014154:	3303      	adds	r3, #3
 8014156:	b29b      	uxth	r3, r3
 8014158:	f023 0303 	bic.w	r3, r3, #3
 801415c:	b29b      	uxth	r3, r3
 801415e:	4413      	add	r3, r2
 8014160:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8014162:	8b3b      	ldrh	r3, [r7, #24]
 8014164:	3310      	adds	r3, #16
 8014166:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014168:	8b3a      	ldrh	r2, [r7, #24]
 801416a:	88bb      	ldrh	r3, [r7, #4]
 801416c:	3303      	adds	r3, #3
 801416e:	f023 0303 	bic.w	r3, r3, #3
 8014172:	429a      	cmp	r2, r3
 8014174:	d306      	bcc.n	8014184 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8014176:	8afa      	ldrh	r2, [r7, #22]
 8014178:	88bb      	ldrh	r3, [r7, #4]
 801417a:	3303      	adds	r3, #3
 801417c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014180:	429a      	cmp	r2, r3
 8014182:	d201      	bcs.n	8014188 <pbuf_alloc+0x160>
        return NULL;
 8014184:	2300      	movs	r3, #0
 8014186:	e035      	b.n	80141f4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8014188:	8afb      	ldrh	r3, [r7, #22]
 801418a:	4618      	mov	r0, r3
 801418c:	f7ff f9de 	bl	801354c <mem_malloc>
 8014190:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8014192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014194:	2b00      	cmp	r3, #0
 8014196:	d101      	bne.n	801419c <pbuf_alloc+0x174>
        return NULL;
 8014198:	2300      	movs	r3, #0
 801419a:	e02b      	b.n	80141f4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801419c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801419e:	3310      	adds	r3, #16
 80141a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141a2:	4413      	add	r3, r2
 80141a4:	3303      	adds	r3, #3
 80141a6:	f023 0303 	bic.w	r3, r3, #3
 80141aa:	4618      	mov	r0, r3
 80141ac:	88b9      	ldrh	r1, [r7, #4]
 80141ae:	88ba      	ldrh	r2, [r7, #4]
 80141b0:	2300      	movs	r3, #0
 80141b2:	9301      	str	r3, [sp, #4]
 80141b4:	887b      	ldrh	r3, [r7, #2]
 80141b6:	9300      	str	r3, [sp, #0]
 80141b8:	460b      	mov	r3, r1
 80141ba:	4601      	mov	r1, r0
 80141bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80141be:	f7ff ff09 	bl	8013fd4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80141c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c4:	685b      	ldr	r3, [r3, #4]
 80141c6:	f003 0303 	and.w	r3, r3, #3
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d010      	beq.n	80141f0 <pbuf_alloc+0x1c8>
 80141ce:	4b0b      	ldr	r3, [pc, #44]	; (80141fc <pbuf_alloc+0x1d4>)
 80141d0:	f44f 7291 	mov.w	r2, #290	; 0x122
 80141d4:	490d      	ldr	r1, [pc, #52]	; (801420c <pbuf_alloc+0x1e4>)
 80141d6:	480b      	ldr	r0, [pc, #44]	; (8014204 <pbuf_alloc+0x1dc>)
 80141d8:	f00b fa72 	bl	801f6c0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80141dc:	e008      	b.n	80141f0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80141de:	4b07      	ldr	r3, [pc, #28]	; (80141fc <pbuf_alloc+0x1d4>)
 80141e0:	f240 1227 	movw	r2, #295	; 0x127
 80141e4:	490a      	ldr	r1, [pc, #40]	; (8014210 <pbuf_alloc+0x1e8>)
 80141e6:	4807      	ldr	r0, [pc, #28]	; (8014204 <pbuf_alloc+0x1dc>)
 80141e8:	f00b fa6a 	bl	801f6c0 <iprintf>
      return NULL;
 80141ec:	2300      	movs	r3, #0
 80141ee:	e001      	b.n	80141f4 <pbuf_alloc+0x1cc>
      break;
 80141f0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80141f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80141f4:	4618      	mov	r0, r3
 80141f6:	3728      	adds	r7, #40	; 0x28
 80141f8:	46bd      	mov	sp, r7
 80141fa:	bd80      	pop	{r7, pc}
 80141fc:	08024154 	.word	0x08024154
 8014200:	08024184 	.word	0x08024184
 8014204:	080241b4 	.word	0x080241b4
 8014208:	080241dc 	.word	0x080241dc
 801420c:	08024210 	.word	0x08024210
 8014210:	0802423c 	.word	0x0802423c

08014214 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b086      	sub	sp, #24
 8014218:	af02      	add	r7, sp, #8
 801421a:	6078      	str	r0, [r7, #4]
 801421c:	460b      	mov	r3, r1
 801421e:	807b      	strh	r3, [r7, #2]
 8014220:	4613      	mov	r3, r2
 8014222:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8014224:	883b      	ldrh	r3, [r7, #0]
 8014226:	2b41      	cmp	r3, #65	; 0x41
 8014228:	d009      	beq.n	801423e <pbuf_alloc_reference+0x2a>
 801422a:	883b      	ldrh	r3, [r7, #0]
 801422c:	2b01      	cmp	r3, #1
 801422e:	d006      	beq.n	801423e <pbuf_alloc_reference+0x2a>
 8014230:	4b0f      	ldr	r3, [pc, #60]	; (8014270 <pbuf_alloc_reference+0x5c>)
 8014232:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8014236:	490f      	ldr	r1, [pc, #60]	; (8014274 <pbuf_alloc_reference+0x60>)
 8014238:	480f      	ldr	r0, [pc, #60]	; (8014278 <pbuf_alloc_reference+0x64>)
 801423a:	f00b fa41 	bl	801f6c0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801423e:	200b      	movs	r0, #11
 8014240:	f7ff fb06 	bl	8013850 <memp_malloc>
 8014244:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d101      	bne.n	8014250 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801424c:	2300      	movs	r3, #0
 801424e:	e00b      	b.n	8014268 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8014250:	8879      	ldrh	r1, [r7, #2]
 8014252:	887a      	ldrh	r2, [r7, #2]
 8014254:	2300      	movs	r3, #0
 8014256:	9301      	str	r3, [sp, #4]
 8014258:	883b      	ldrh	r3, [r7, #0]
 801425a:	9300      	str	r3, [sp, #0]
 801425c:	460b      	mov	r3, r1
 801425e:	6879      	ldr	r1, [r7, #4]
 8014260:	68f8      	ldr	r0, [r7, #12]
 8014262:	f7ff feb7 	bl	8013fd4 <pbuf_init_alloced_pbuf>
  return p;
 8014266:	68fb      	ldr	r3, [r7, #12]
}
 8014268:	4618      	mov	r0, r3
 801426a:	3710      	adds	r7, #16
 801426c:	46bd      	mov	sp, r7
 801426e:	bd80      	pop	{r7, pc}
 8014270:	08024154 	.word	0x08024154
 8014274:	08024258 	.word	0x08024258
 8014278:	080241b4 	.word	0x080241b4

0801427c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801427c:	b580      	push	{r7, lr}
 801427e:	b088      	sub	sp, #32
 8014280:	af02      	add	r7, sp, #8
 8014282:	607b      	str	r3, [r7, #4]
 8014284:	4603      	mov	r3, r0
 8014286:	73fb      	strb	r3, [r7, #15]
 8014288:	460b      	mov	r3, r1
 801428a:	81bb      	strh	r3, [r7, #12]
 801428c:	4613      	mov	r3, r2
 801428e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8014290:	7bfb      	ldrb	r3, [r7, #15]
 8014292:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8014294:	8a7b      	ldrh	r3, [r7, #18]
 8014296:	3303      	adds	r3, #3
 8014298:	f023 0203 	bic.w	r2, r3, #3
 801429c:	89bb      	ldrh	r3, [r7, #12]
 801429e:	441a      	add	r2, r3
 80142a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80142a2:	429a      	cmp	r2, r3
 80142a4:	d901      	bls.n	80142aa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80142a6:	2300      	movs	r3, #0
 80142a8:	e018      	b.n	80142dc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80142aa:	6a3b      	ldr	r3, [r7, #32]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d007      	beq.n	80142c0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80142b0:	8a7b      	ldrh	r3, [r7, #18]
 80142b2:	3303      	adds	r3, #3
 80142b4:	f023 0303 	bic.w	r3, r3, #3
 80142b8:	6a3a      	ldr	r2, [r7, #32]
 80142ba:	4413      	add	r3, r2
 80142bc:	617b      	str	r3, [r7, #20]
 80142be:	e001      	b.n	80142c4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80142c0:	2300      	movs	r3, #0
 80142c2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80142c4:	6878      	ldr	r0, [r7, #4]
 80142c6:	89b9      	ldrh	r1, [r7, #12]
 80142c8:	89ba      	ldrh	r2, [r7, #12]
 80142ca:	2302      	movs	r3, #2
 80142cc:	9301      	str	r3, [sp, #4]
 80142ce:	897b      	ldrh	r3, [r7, #10]
 80142d0:	9300      	str	r3, [sp, #0]
 80142d2:	460b      	mov	r3, r1
 80142d4:	6979      	ldr	r1, [r7, #20]
 80142d6:	f7ff fe7d 	bl	8013fd4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80142da:	687b      	ldr	r3, [r7, #4]
}
 80142dc:	4618      	mov	r0, r3
 80142de:	3718      	adds	r7, #24
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd80      	pop	{r7, pc}

080142e4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b084      	sub	sp, #16
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
 80142ec:	460b      	mov	r3, r1
 80142ee:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d106      	bne.n	8014304 <pbuf_realloc+0x20>
 80142f6:	4b3a      	ldr	r3, [pc, #232]	; (80143e0 <pbuf_realloc+0xfc>)
 80142f8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80142fc:	4939      	ldr	r1, [pc, #228]	; (80143e4 <pbuf_realloc+0x100>)
 80142fe:	483a      	ldr	r0, [pc, #232]	; (80143e8 <pbuf_realloc+0x104>)
 8014300:	f00b f9de 	bl	801f6c0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	891b      	ldrh	r3, [r3, #8]
 8014308:	887a      	ldrh	r2, [r7, #2]
 801430a:	429a      	cmp	r2, r3
 801430c:	d263      	bcs.n	80143d6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	891a      	ldrh	r2, [r3, #8]
 8014312:	887b      	ldrh	r3, [r7, #2]
 8014314:	1ad3      	subs	r3, r2, r3
 8014316:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8014318:	887b      	ldrh	r3, [r7, #2]
 801431a:	817b      	strh	r3, [r7, #10]
  q = p;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014320:	e018      	b.n	8014354 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	895b      	ldrh	r3, [r3, #10]
 8014326:	897a      	ldrh	r2, [r7, #10]
 8014328:	1ad3      	subs	r3, r2, r3
 801432a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	891a      	ldrh	r2, [r3, #8]
 8014330:	893b      	ldrh	r3, [r7, #8]
 8014332:	1ad3      	subs	r3, r2, r3
 8014334:	b29a      	uxth	r2, r3
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d106      	bne.n	8014354 <pbuf_realloc+0x70>
 8014346:	4b26      	ldr	r3, [pc, #152]	; (80143e0 <pbuf_realloc+0xfc>)
 8014348:	f240 12af 	movw	r2, #431	; 0x1af
 801434c:	4927      	ldr	r1, [pc, #156]	; (80143ec <pbuf_realloc+0x108>)
 801434e:	4826      	ldr	r0, [pc, #152]	; (80143e8 <pbuf_realloc+0x104>)
 8014350:	f00b f9b6 	bl	801f6c0 <iprintf>
  while (rem_len > q->len) {
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	895b      	ldrh	r3, [r3, #10]
 8014358:	897a      	ldrh	r2, [r7, #10]
 801435a:	429a      	cmp	r2, r3
 801435c:	d8e1      	bhi.n	8014322 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	7b1b      	ldrb	r3, [r3, #12]
 8014362:	f003 030f 	and.w	r3, r3, #15
 8014366:	2b00      	cmp	r3, #0
 8014368:	d121      	bne.n	80143ae <pbuf_realloc+0xca>
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	895b      	ldrh	r3, [r3, #10]
 801436e:	897a      	ldrh	r2, [r7, #10]
 8014370:	429a      	cmp	r2, r3
 8014372:	d01c      	beq.n	80143ae <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	7b5b      	ldrb	r3, [r3, #13]
 8014378:	f003 0302 	and.w	r3, r3, #2
 801437c:	2b00      	cmp	r3, #0
 801437e:	d116      	bne.n	80143ae <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	685a      	ldr	r2, [r3, #4]
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	1ad3      	subs	r3, r2, r3
 8014388:	b29a      	uxth	r2, r3
 801438a:	897b      	ldrh	r3, [r7, #10]
 801438c:	4413      	add	r3, r2
 801438e:	b29b      	uxth	r3, r3
 8014390:	4619      	mov	r1, r3
 8014392:	68f8      	ldr	r0, [r7, #12]
 8014394:	f7fe ffd0 	bl	8013338 <mem_trim>
 8014398:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d106      	bne.n	80143ae <pbuf_realloc+0xca>
 80143a0:	4b0f      	ldr	r3, [pc, #60]	; (80143e0 <pbuf_realloc+0xfc>)
 80143a2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80143a6:	4912      	ldr	r1, [pc, #72]	; (80143f0 <pbuf_realloc+0x10c>)
 80143a8:	480f      	ldr	r0, [pc, #60]	; (80143e8 <pbuf_realloc+0x104>)
 80143aa:	f00b f989 	bl	801f6c0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	897a      	ldrh	r2, [r7, #10]
 80143b2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	895a      	ldrh	r2, [r3, #10]
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d004      	beq.n	80143ce <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	4618      	mov	r0, r3
 80143ca:	f000 f911 	bl	80145f0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	2200      	movs	r2, #0
 80143d2:	601a      	str	r2, [r3, #0]
 80143d4:	e000      	b.n	80143d8 <pbuf_realloc+0xf4>
    return;
 80143d6:	bf00      	nop

}
 80143d8:	3710      	adds	r7, #16
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd80      	pop	{r7, pc}
 80143de:	bf00      	nop
 80143e0:	08024154 	.word	0x08024154
 80143e4:	0802426c 	.word	0x0802426c
 80143e8:	080241b4 	.word	0x080241b4
 80143ec:	08024284 	.word	0x08024284
 80143f0:	0802429c 	.word	0x0802429c

080143f4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b086      	sub	sp, #24
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	60f8      	str	r0, [r7, #12]
 80143fc:	60b9      	str	r1, [r7, #8]
 80143fe:	4613      	mov	r3, r2
 8014400:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d106      	bne.n	8014416 <pbuf_add_header_impl+0x22>
 8014408:	4b2b      	ldr	r3, [pc, #172]	; (80144b8 <pbuf_add_header_impl+0xc4>)
 801440a:	f240 12df 	movw	r2, #479	; 0x1df
 801440e:	492b      	ldr	r1, [pc, #172]	; (80144bc <pbuf_add_header_impl+0xc8>)
 8014410:	482b      	ldr	r0, [pc, #172]	; (80144c0 <pbuf_add_header_impl+0xcc>)
 8014412:	f00b f955 	bl	801f6c0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d003      	beq.n	8014424 <pbuf_add_header_impl+0x30>
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014422:	d301      	bcc.n	8014428 <pbuf_add_header_impl+0x34>
    return 1;
 8014424:	2301      	movs	r3, #1
 8014426:	e043      	b.n	80144b0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8014428:	68bb      	ldr	r3, [r7, #8]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d101      	bne.n	8014432 <pbuf_add_header_impl+0x3e>
    return 0;
 801442e:	2300      	movs	r3, #0
 8014430:	e03e      	b.n	80144b0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8014432:	68bb      	ldr	r3, [r7, #8]
 8014434:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	891a      	ldrh	r2, [r3, #8]
 801443a:	8a7b      	ldrh	r3, [r7, #18]
 801443c:	4413      	add	r3, r2
 801443e:	b29b      	uxth	r3, r3
 8014440:	8a7a      	ldrh	r2, [r7, #18]
 8014442:	429a      	cmp	r2, r3
 8014444:	d901      	bls.n	801444a <pbuf_add_header_impl+0x56>
    return 1;
 8014446:	2301      	movs	r3, #1
 8014448:	e032      	b.n	80144b0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	7b1b      	ldrb	r3, [r3, #12]
 801444e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8014450:	8a3b      	ldrh	r3, [r7, #16]
 8014452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014456:	2b00      	cmp	r3, #0
 8014458:	d00c      	beq.n	8014474 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	685a      	ldr	r2, [r3, #4]
 801445e:	68bb      	ldr	r3, [r7, #8]
 8014460:	425b      	negs	r3, r3
 8014462:	4413      	add	r3, r2
 8014464:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	3310      	adds	r3, #16
 801446a:	697a      	ldr	r2, [r7, #20]
 801446c:	429a      	cmp	r2, r3
 801446e:	d20d      	bcs.n	801448c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8014470:	2301      	movs	r3, #1
 8014472:	e01d      	b.n	80144b0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8014474:	79fb      	ldrb	r3, [r7, #7]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d006      	beq.n	8014488 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	685a      	ldr	r2, [r3, #4]
 801447e:	68bb      	ldr	r3, [r7, #8]
 8014480:	425b      	negs	r3, r3
 8014482:	4413      	add	r3, r2
 8014484:	617b      	str	r3, [r7, #20]
 8014486:	e001      	b.n	801448c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014488:	2301      	movs	r3, #1
 801448a:	e011      	b.n	80144b0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	697a      	ldr	r2, [r7, #20]
 8014490:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	895a      	ldrh	r2, [r3, #10]
 8014496:	8a7b      	ldrh	r3, [r7, #18]
 8014498:	4413      	add	r3, r2
 801449a:	b29a      	uxth	r2, r3
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	891a      	ldrh	r2, [r3, #8]
 80144a4:	8a7b      	ldrh	r3, [r7, #18]
 80144a6:	4413      	add	r3, r2
 80144a8:	b29a      	uxth	r2, r3
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	811a      	strh	r2, [r3, #8]


  return 0;
 80144ae:	2300      	movs	r3, #0
}
 80144b0:	4618      	mov	r0, r3
 80144b2:	3718      	adds	r7, #24
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}
 80144b8:	08024154 	.word	0x08024154
 80144bc:	080242b8 	.word	0x080242b8
 80144c0:	080241b4 	.word	0x080241b4

080144c4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b082      	sub	sp, #8
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
 80144cc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80144ce:	2200      	movs	r2, #0
 80144d0:	6839      	ldr	r1, [r7, #0]
 80144d2:	6878      	ldr	r0, [r7, #4]
 80144d4:	f7ff ff8e 	bl	80143f4 <pbuf_add_header_impl>
 80144d8:	4603      	mov	r3, r0
}
 80144da:	4618      	mov	r0, r3
 80144dc:	3708      	adds	r7, #8
 80144de:	46bd      	mov	sp, r7
 80144e0:	bd80      	pop	{r7, pc}
	...

080144e4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80144e4:	b580      	push	{r7, lr}
 80144e6:	b084      	sub	sp, #16
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
 80144ec:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d106      	bne.n	8014502 <pbuf_remove_header+0x1e>
 80144f4:	4b20      	ldr	r3, [pc, #128]	; (8014578 <pbuf_remove_header+0x94>)
 80144f6:	f240 224b 	movw	r2, #587	; 0x24b
 80144fa:	4920      	ldr	r1, [pc, #128]	; (801457c <pbuf_remove_header+0x98>)
 80144fc:	4820      	ldr	r0, [pc, #128]	; (8014580 <pbuf_remove_header+0x9c>)
 80144fe:	f00b f8df 	bl	801f6c0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d003      	beq.n	8014510 <pbuf_remove_header+0x2c>
 8014508:	683b      	ldr	r3, [r7, #0]
 801450a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801450e:	d301      	bcc.n	8014514 <pbuf_remove_header+0x30>
    return 1;
 8014510:	2301      	movs	r3, #1
 8014512:	e02c      	b.n	801456e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014514:	683b      	ldr	r3, [r7, #0]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d101      	bne.n	801451e <pbuf_remove_header+0x3a>
    return 0;
 801451a:	2300      	movs	r3, #0
 801451c:	e027      	b.n	801456e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	895b      	ldrh	r3, [r3, #10]
 8014526:	89fa      	ldrh	r2, [r7, #14]
 8014528:	429a      	cmp	r2, r3
 801452a:	d908      	bls.n	801453e <pbuf_remove_header+0x5a>
 801452c:	4b12      	ldr	r3, [pc, #72]	; (8014578 <pbuf_remove_header+0x94>)
 801452e:	f240 2255 	movw	r2, #597	; 0x255
 8014532:	4914      	ldr	r1, [pc, #80]	; (8014584 <pbuf_remove_header+0xa0>)
 8014534:	4812      	ldr	r0, [pc, #72]	; (8014580 <pbuf_remove_header+0x9c>)
 8014536:	f00b f8c3 	bl	801f6c0 <iprintf>
 801453a:	2301      	movs	r3, #1
 801453c:	e017      	b.n	801456e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	685b      	ldr	r3, [r3, #4]
 8014542:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	685a      	ldr	r2, [r3, #4]
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	441a      	add	r2, r3
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	895a      	ldrh	r2, [r3, #10]
 8014554:	89fb      	ldrh	r3, [r7, #14]
 8014556:	1ad3      	subs	r3, r2, r3
 8014558:	b29a      	uxth	r2, r3
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	891a      	ldrh	r2, [r3, #8]
 8014562:	89fb      	ldrh	r3, [r7, #14]
 8014564:	1ad3      	subs	r3, r2, r3
 8014566:	b29a      	uxth	r2, r3
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801456c:	2300      	movs	r3, #0
}
 801456e:	4618      	mov	r0, r3
 8014570:	3710      	adds	r7, #16
 8014572:	46bd      	mov	sp, r7
 8014574:	bd80      	pop	{r7, pc}
 8014576:	bf00      	nop
 8014578:	08024154 	.word	0x08024154
 801457c:	080242b8 	.word	0x080242b8
 8014580:	080241b4 	.word	0x080241b4
 8014584:	080242c4 	.word	0x080242c4

08014588 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014588:	b580      	push	{r7, lr}
 801458a:	b082      	sub	sp, #8
 801458c:	af00      	add	r7, sp, #0
 801458e:	6078      	str	r0, [r7, #4]
 8014590:	460b      	mov	r3, r1
 8014592:	807b      	strh	r3, [r7, #2]
 8014594:	4613      	mov	r3, r2
 8014596:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014598:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801459c:	2b00      	cmp	r3, #0
 801459e:	da08      	bge.n	80145b2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80145a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80145a4:	425b      	negs	r3, r3
 80145a6:	4619      	mov	r1, r3
 80145a8:	6878      	ldr	r0, [r7, #4]
 80145aa:	f7ff ff9b 	bl	80144e4 <pbuf_remove_header>
 80145ae:	4603      	mov	r3, r0
 80145b0:	e007      	b.n	80145c2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80145b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80145b6:	787a      	ldrb	r2, [r7, #1]
 80145b8:	4619      	mov	r1, r3
 80145ba:	6878      	ldr	r0, [r7, #4]
 80145bc:	f7ff ff1a 	bl	80143f4 <pbuf_add_header_impl>
 80145c0:	4603      	mov	r3, r0
  }
}
 80145c2:	4618      	mov	r0, r3
 80145c4:	3708      	adds	r7, #8
 80145c6:	46bd      	mov	sp, r7
 80145c8:	bd80      	pop	{r7, pc}

080145ca <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80145ca:	b580      	push	{r7, lr}
 80145cc:	b082      	sub	sp, #8
 80145ce:	af00      	add	r7, sp, #0
 80145d0:	6078      	str	r0, [r7, #4]
 80145d2:	460b      	mov	r3, r1
 80145d4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80145d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80145da:	2201      	movs	r2, #1
 80145dc:	4619      	mov	r1, r3
 80145de:	6878      	ldr	r0, [r7, #4]
 80145e0:	f7ff ffd2 	bl	8014588 <pbuf_header_impl>
 80145e4:	4603      	mov	r3, r0
}
 80145e6:	4618      	mov	r0, r3
 80145e8:	3708      	adds	r7, #8
 80145ea:	46bd      	mov	sp, r7
 80145ec:	bd80      	pop	{r7, pc}
	...

080145f0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b088      	sub	sp, #32
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d10b      	bne.n	8014616 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d106      	bne.n	8014612 <pbuf_free+0x22>
 8014604:	4b3b      	ldr	r3, [pc, #236]	; (80146f4 <pbuf_free+0x104>)
 8014606:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801460a:	493b      	ldr	r1, [pc, #236]	; (80146f8 <pbuf_free+0x108>)
 801460c:	483b      	ldr	r0, [pc, #236]	; (80146fc <pbuf_free+0x10c>)
 801460e:	f00b f857 	bl	801f6c0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014612:	2300      	movs	r3, #0
 8014614:	e069      	b.n	80146ea <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014616:	2300      	movs	r3, #0
 8014618:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801461a:	e062      	b.n	80146e2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801461c:	f009 ff56 	bl	801e4cc <sys_arch_protect>
 8014620:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	7b9b      	ldrb	r3, [r3, #14]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d106      	bne.n	8014638 <pbuf_free+0x48>
 801462a:	4b32      	ldr	r3, [pc, #200]	; (80146f4 <pbuf_free+0x104>)
 801462c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8014630:	4933      	ldr	r1, [pc, #204]	; (8014700 <pbuf_free+0x110>)
 8014632:	4832      	ldr	r0, [pc, #200]	; (80146fc <pbuf_free+0x10c>)
 8014634:	f00b f844 	bl	801f6c0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	7b9b      	ldrb	r3, [r3, #14]
 801463c:	3b01      	subs	r3, #1
 801463e:	b2da      	uxtb	r2, r3
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	739a      	strb	r2, [r3, #14]
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	7b9b      	ldrb	r3, [r3, #14]
 8014648:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801464a:	69b8      	ldr	r0, [r7, #24]
 801464c:	f009 ff4c 	bl	801e4e8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014650:	7dfb      	ldrb	r3, [r7, #23]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d143      	bne.n	80146de <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	7b1b      	ldrb	r3, [r3, #12]
 8014660:	f003 030f 	and.w	r3, r3, #15
 8014664:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	7b5b      	ldrb	r3, [r3, #13]
 801466a:	f003 0302 	and.w	r3, r3, #2
 801466e:	2b00      	cmp	r3, #0
 8014670:	d011      	beq.n	8014696 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014676:	68bb      	ldr	r3, [r7, #8]
 8014678:	691b      	ldr	r3, [r3, #16]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d106      	bne.n	801468c <pbuf_free+0x9c>
 801467e:	4b1d      	ldr	r3, [pc, #116]	; (80146f4 <pbuf_free+0x104>)
 8014680:	f240 22ff 	movw	r2, #767	; 0x2ff
 8014684:	491f      	ldr	r1, [pc, #124]	; (8014704 <pbuf_free+0x114>)
 8014686:	481d      	ldr	r0, [pc, #116]	; (80146fc <pbuf_free+0x10c>)
 8014688:	f00b f81a 	bl	801f6c0 <iprintf>
        pc->custom_free_function(p);
 801468c:	68bb      	ldr	r3, [r7, #8]
 801468e:	691b      	ldr	r3, [r3, #16]
 8014690:	6878      	ldr	r0, [r7, #4]
 8014692:	4798      	blx	r3
 8014694:	e01d      	b.n	80146d2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014696:	7bfb      	ldrb	r3, [r7, #15]
 8014698:	2b02      	cmp	r3, #2
 801469a:	d104      	bne.n	80146a6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801469c:	6879      	ldr	r1, [r7, #4]
 801469e:	200c      	movs	r0, #12
 80146a0:	f7ff f928 	bl	80138f4 <memp_free>
 80146a4:	e015      	b.n	80146d2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80146a6:	7bfb      	ldrb	r3, [r7, #15]
 80146a8:	2b01      	cmp	r3, #1
 80146aa:	d104      	bne.n	80146b6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80146ac:	6879      	ldr	r1, [r7, #4]
 80146ae:	200b      	movs	r0, #11
 80146b0:	f7ff f920 	bl	80138f4 <memp_free>
 80146b4:	e00d      	b.n	80146d2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80146b6:	7bfb      	ldrb	r3, [r7, #15]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d103      	bne.n	80146c4 <pbuf_free+0xd4>
          mem_free(p);
 80146bc:	6878      	ldr	r0, [r7, #4]
 80146be:	f7fe fdab 	bl	8013218 <mem_free>
 80146c2:	e006      	b.n	80146d2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80146c4:	4b0b      	ldr	r3, [pc, #44]	; (80146f4 <pbuf_free+0x104>)
 80146c6:	f240 320f 	movw	r2, #783	; 0x30f
 80146ca:	490f      	ldr	r1, [pc, #60]	; (8014708 <pbuf_free+0x118>)
 80146cc:	480b      	ldr	r0, [pc, #44]	; (80146fc <pbuf_free+0x10c>)
 80146ce:	f00a fff7 	bl	801f6c0 <iprintf>
        }
      }
      count++;
 80146d2:	7ffb      	ldrb	r3, [r7, #31]
 80146d4:	3301      	adds	r3, #1
 80146d6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80146d8:	693b      	ldr	r3, [r7, #16]
 80146da:	607b      	str	r3, [r7, #4]
 80146dc:	e001      	b.n	80146e2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80146de:	2300      	movs	r3, #0
 80146e0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d199      	bne.n	801461c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80146e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80146ea:	4618      	mov	r0, r3
 80146ec:	3720      	adds	r7, #32
 80146ee:	46bd      	mov	sp, r7
 80146f0:	bd80      	pop	{r7, pc}
 80146f2:	bf00      	nop
 80146f4:	08024154 	.word	0x08024154
 80146f8:	080242b8 	.word	0x080242b8
 80146fc:	080241b4 	.word	0x080241b4
 8014700:	080242e4 	.word	0x080242e4
 8014704:	080242fc 	.word	0x080242fc
 8014708:	08024320 	.word	0x08024320

0801470c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801470c:	b480      	push	{r7}
 801470e:	b085      	sub	sp, #20
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014714:	2300      	movs	r3, #0
 8014716:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014718:	e005      	b.n	8014726 <pbuf_clen+0x1a>
    ++len;
 801471a:	89fb      	ldrh	r3, [r7, #14]
 801471c:	3301      	adds	r3, #1
 801471e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d1f6      	bne.n	801471a <pbuf_clen+0xe>
  }
  return len;
 801472c:	89fb      	ldrh	r3, [r7, #14]
}
 801472e:	4618      	mov	r0, r3
 8014730:	3714      	adds	r7, #20
 8014732:	46bd      	mov	sp, r7
 8014734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014738:	4770      	bx	lr
	...

0801473c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b084      	sub	sp, #16
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d016      	beq.n	8014778 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801474a:	f009 febf 	bl	801e4cc <sys_arch_protect>
 801474e:	60f8      	str	r0, [r7, #12]
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	7b9b      	ldrb	r3, [r3, #14]
 8014754:	3301      	adds	r3, #1
 8014756:	b2da      	uxtb	r2, r3
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	739a      	strb	r2, [r3, #14]
 801475c:	68f8      	ldr	r0, [r7, #12]
 801475e:	f009 fec3 	bl	801e4e8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	7b9b      	ldrb	r3, [r3, #14]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d106      	bne.n	8014778 <pbuf_ref+0x3c>
 801476a:	4b05      	ldr	r3, [pc, #20]	; (8014780 <pbuf_ref+0x44>)
 801476c:	f240 3242 	movw	r2, #834	; 0x342
 8014770:	4904      	ldr	r1, [pc, #16]	; (8014784 <pbuf_ref+0x48>)
 8014772:	4805      	ldr	r0, [pc, #20]	; (8014788 <pbuf_ref+0x4c>)
 8014774:	f00a ffa4 	bl	801f6c0 <iprintf>
  }
}
 8014778:	bf00      	nop
 801477a:	3710      	adds	r7, #16
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}
 8014780:	08024154 	.word	0x08024154
 8014784:	08024334 	.word	0x08024334
 8014788:	080241b4 	.word	0x080241b4

0801478c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801478c:	b580      	push	{r7, lr}
 801478e:	b084      	sub	sp, #16
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
 8014794:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d002      	beq.n	80147a2 <pbuf_cat+0x16>
 801479c:	683b      	ldr	r3, [r7, #0]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d107      	bne.n	80147b2 <pbuf_cat+0x26>
 80147a2:	4b20      	ldr	r3, [pc, #128]	; (8014824 <pbuf_cat+0x98>)
 80147a4:	f240 3259 	movw	r2, #857	; 0x359
 80147a8:	491f      	ldr	r1, [pc, #124]	; (8014828 <pbuf_cat+0x9c>)
 80147aa:	4820      	ldr	r0, [pc, #128]	; (801482c <pbuf_cat+0xa0>)
 80147ac:	f00a ff88 	bl	801f6c0 <iprintf>
 80147b0:	e034      	b.n	801481c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	60fb      	str	r3, [r7, #12]
 80147b6:	e00a      	b.n	80147ce <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	891a      	ldrh	r2, [r3, #8]
 80147bc:	683b      	ldr	r3, [r7, #0]
 80147be:	891b      	ldrh	r3, [r3, #8]
 80147c0:	4413      	add	r3, r2
 80147c2:	b29a      	uxth	r2, r3
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	60fb      	str	r3, [r7, #12]
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d1f0      	bne.n	80147b8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	891a      	ldrh	r2, [r3, #8]
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	895b      	ldrh	r3, [r3, #10]
 80147de:	429a      	cmp	r2, r3
 80147e0:	d006      	beq.n	80147f0 <pbuf_cat+0x64>
 80147e2:	4b10      	ldr	r3, [pc, #64]	; (8014824 <pbuf_cat+0x98>)
 80147e4:	f240 3262 	movw	r2, #866	; 0x362
 80147e8:	4911      	ldr	r1, [pc, #68]	; (8014830 <pbuf_cat+0xa4>)
 80147ea:	4810      	ldr	r0, [pc, #64]	; (801482c <pbuf_cat+0xa0>)
 80147ec:	f00a ff68 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d006      	beq.n	8014806 <pbuf_cat+0x7a>
 80147f8:	4b0a      	ldr	r3, [pc, #40]	; (8014824 <pbuf_cat+0x98>)
 80147fa:	f240 3263 	movw	r2, #867	; 0x363
 80147fe:	490d      	ldr	r1, [pc, #52]	; (8014834 <pbuf_cat+0xa8>)
 8014800:	480a      	ldr	r0, [pc, #40]	; (801482c <pbuf_cat+0xa0>)
 8014802:	f00a ff5d 	bl	801f6c0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	891a      	ldrh	r2, [r3, #8]
 801480a:	683b      	ldr	r3, [r7, #0]
 801480c:	891b      	ldrh	r3, [r3, #8]
 801480e:	4413      	add	r3, r2
 8014810:	b29a      	uxth	r2, r3
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	683a      	ldr	r2, [r7, #0]
 801481a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801481c:	3710      	adds	r7, #16
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}
 8014822:	bf00      	nop
 8014824:	08024154 	.word	0x08024154
 8014828:	08024348 	.word	0x08024348
 801482c:	080241b4 	.word	0x080241b4
 8014830:	08024380 	.word	0x08024380
 8014834:	080243b0 	.word	0x080243b0

08014838 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b082      	sub	sp, #8
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
 8014840:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8014842:	6839      	ldr	r1, [r7, #0]
 8014844:	6878      	ldr	r0, [r7, #4]
 8014846:	f7ff ffa1 	bl	801478c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801484a:	6838      	ldr	r0, [r7, #0]
 801484c:	f7ff ff76 	bl	801473c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8014850:	bf00      	nop
 8014852:	3708      	adds	r7, #8
 8014854:	46bd      	mov	sp, r7
 8014856:	bd80      	pop	{r7, pc}

08014858 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b086      	sub	sp, #24
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
 8014860:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8014862:	2300      	movs	r3, #0
 8014864:	617b      	str	r3, [r7, #20]
 8014866:	2300      	movs	r3, #0
 8014868:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d008      	beq.n	8014882 <pbuf_copy+0x2a>
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d005      	beq.n	8014882 <pbuf_copy+0x2a>
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	891a      	ldrh	r2, [r3, #8]
 801487a:	683b      	ldr	r3, [r7, #0]
 801487c:	891b      	ldrh	r3, [r3, #8]
 801487e:	429a      	cmp	r2, r3
 8014880:	d209      	bcs.n	8014896 <pbuf_copy+0x3e>
 8014882:	4b57      	ldr	r3, [pc, #348]	; (80149e0 <pbuf_copy+0x188>)
 8014884:	f240 32c9 	movw	r2, #969	; 0x3c9
 8014888:	4956      	ldr	r1, [pc, #344]	; (80149e4 <pbuf_copy+0x18c>)
 801488a:	4857      	ldr	r0, [pc, #348]	; (80149e8 <pbuf_copy+0x190>)
 801488c:	f00a ff18 	bl	801f6c0 <iprintf>
 8014890:	f06f 030f 	mvn.w	r3, #15
 8014894:	e09f      	b.n	80149d6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	895b      	ldrh	r3, [r3, #10]
 801489a:	461a      	mov	r2, r3
 801489c:	697b      	ldr	r3, [r7, #20]
 801489e:	1ad2      	subs	r2, r2, r3
 80148a0:	683b      	ldr	r3, [r7, #0]
 80148a2:	895b      	ldrh	r3, [r3, #10]
 80148a4:	4619      	mov	r1, r3
 80148a6:	693b      	ldr	r3, [r7, #16]
 80148a8:	1acb      	subs	r3, r1, r3
 80148aa:	429a      	cmp	r2, r3
 80148ac:	d306      	bcc.n	80148bc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	895b      	ldrh	r3, [r3, #10]
 80148b2:	461a      	mov	r2, r3
 80148b4:	693b      	ldr	r3, [r7, #16]
 80148b6:	1ad3      	subs	r3, r2, r3
 80148b8:	60fb      	str	r3, [r7, #12]
 80148ba:	e005      	b.n	80148c8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	895b      	ldrh	r3, [r3, #10]
 80148c0:	461a      	mov	r2, r3
 80148c2:	697b      	ldr	r3, [r7, #20]
 80148c4:	1ad3      	subs	r3, r2, r3
 80148c6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	685a      	ldr	r2, [r3, #4]
 80148cc:	697b      	ldr	r3, [r7, #20]
 80148ce:	18d0      	adds	r0, r2, r3
 80148d0:	683b      	ldr	r3, [r7, #0]
 80148d2:	685a      	ldr	r2, [r3, #4]
 80148d4:	693b      	ldr	r3, [r7, #16]
 80148d6:	4413      	add	r3, r2
 80148d8:	68fa      	ldr	r2, [r7, #12]
 80148da:	4619      	mov	r1, r3
 80148dc:	f00a fc42 	bl	801f164 <memcpy>
    offset_to += len;
 80148e0:	697a      	ldr	r2, [r7, #20]
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	4413      	add	r3, r2
 80148e6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80148e8:	693a      	ldr	r2, [r7, #16]
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	4413      	add	r3, r2
 80148ee:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	895b      	ldrh	r3, [r3, #10]
 80148f4:	461a      	mov	r2, r3
 80148f6:	697b      	ldr	r3, [r7, #20]
 80148f8:	4293      	cmp	r3, r2
 80148fa:	d906      	bls.n	801490a <pbuf_copy+0xb2>
 80148fc:	4b38      	ldr	r3, [pc, #224]	; (80149e0 <pbuf_copy+0x188>)
 80148fe:	f240 32d9 	movw	r2, #985	; 0x3d9
 8014902:	493a      	ldr	r1, [pc, #232]	; (80149ec <pbuf_copy+0x194>)
 8014904:	4838      	ldr	r0, [pc, #224]	; (80149e8 <pbuf_copy+0x190>)
 8014906:	f00a fedb 	bl	801f6c0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	895b      	ldrh	r3, [r3, #10]
 801490e:	461a      	mov	r2, r3
 8014910:	693b      	ldr	r3, [r7, #16]
 8014912:	4293      	cmp	r3, r2
 8014914:	d906      	bls.n	8014924 <pbuf_copy+0xcc>
 8014916:	4b32      	ldr	r3, [pc, #200]	; (80149e0 <pbuf_copy+0x188>)
 8014918:	f240 32da 	movw	r2, #986	; 0x3da
 801491c:	4934      	ldr	r1, [pc, #208]	; (80149f0 <pbuf_copy+0x198>)
 801491e:	4832      	ldr	r0, [pc, #200]	; (80149e8 <pbuf_copy+0x190>)
 8014920:	f00a fece 	bl	801f6c0 <iprintf>
    if (offset_from >= p_from->len) {
 8014924:	683b      	ldr	r3, [r7, #0]
 8014926:	895b      	ldrh	r3, [r3, #10]
 8014928:	461a      	mov	r2, r3
 801492a:	693b      	ldr	r3, [r7, #16]
 801492c:	4293      	cmp	r3, r2
 801492e:	d304      	bcc.n	801493a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8014930:	2300      	movs	r3, #0
 8014932:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014934:	683b      	ldr	r3, [r7, #0]
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	895b      	ldrh	r3, [r3, #10]
 801493e:	461a      	mov	r2, r3
 8014940:	697b      	ldr	r3, [r7, #20]
 8014942:	4293      	cmp	r3, r2
 8014944:	d114      	bne.n	8014970 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014946:	2300      	movs	r3, #0
 8014948:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d10c      	bne.n	8014970 <pbuf_copy+0x118>
 8014956:	683b      	ldr	r3, [r7, #0]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d009      	beq.n	8014970 <pbuf_copy+0x118>
 801495c:	4b20      	ldr	r3, [pc, #128]	; (80149e0 <pbuf_copy+0x188>)
 801495e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8014962:	4924      	ldr	r1, [pc, #144]	; (80149f4 <pbuf_copy+0x19c>)
 8014964:	4820      	ldr	r0, [pc, #128]	; (80149e8 <pbuf_copy+0x190>)
 8014966:	f00a feab 	bl	801f6c0 <iprintf>
 801496a:	f06f 030f 	mvn.w	r3, #15
 801496e:	e032      	b.n	80149d6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014970:	683b      	ldr	r3, [r7, #0]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d013      	beq.n	801499e <pbuf_copy+0x146>
 8014976:	683b      	ldr	r3, [r7, #0]
 8014978:	895a      	ldrh	r2, [r3, #10]
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	891b      	ldrh	r3, [r3, #8]
 801497e:	429a      	cmp	r2, r3
 8014980:	d10d      	bne.n	801499e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014982:	683b      	ldr	r3, [r7, #0]
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d009      	beq.n	801499e <pbuf_copy+0x146>
 801498a:	4b15      	ldr	r3, [pc, #84]	; (80149e0 <pbuf_copy+0x188>)
 801498c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8014990:	4919      	ldr	r1, [pc, #100]	; (80149f8 <pbuf_copy+0x1a0>)
 8014992:	4815      	ldr	r0, [pc, #84]	; (80149e8 <pbuf_copy+0x190>)
 8014994:	f00a fe94 	bl	801f6c0 <iprintf>
 8014998:	f06f 0305 	mvn.w	r3, #5
 801499c:	e01b      	b.n	80149d6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d013      	beq.n	80149cc <pbuf_copy+0x174>
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	895a      	ldrh	r2, [r3, #10]
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	891b      	ldrh	r3, [r3, #8]
 80149ac:	429a      	cmp	r2, r3
 80149ae:	d10d      	bne.n	80149cc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d009      	beq.n	80149cc <pbuf_copy+0x174>
 80149b8:	4b09      	ldr	r3, [pc, #36]	; (80149e0 <pbuf_copy+0x188>)
 80149ba:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80149be:	490e      	ldr	r1, [pc, #56]	; (80149f8 <pbuf_copy+0x1a0>)
 80149c0:	4809      	ldr	r0, [pc, #36]	; (80149e8 <pbuf_copy+0x190>)
 80149c2:	f00a fe7d 	bl	801f6c0 <iprintf>
 80149c6:	f06f 0305 	mvn.w	r3, #5
 80149ca:	e004      	b.n	80149d6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80149cc:	683b      	ldr	r3, [r7, #0]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	f47f af61 	bne.w	8014896 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80149d4:	2300      	movs	r3, #0
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	3718      	adds	r7, #24
 80149da:	46bd      	mov	sp, r7
 80149dc:	bd80      	pop	{r7, pc}
 80149de:	bf00      	nop
 80149e0:	08024154 	.word	0x08024154
 80149e4:	080243fc 	.word	0x080243fc
 80149e8:	080241b4 	.word	0x080241b4
 80149ec:	0802442c 	.word	0x0802442c
 80149f0:	08024444 	.word	0x08024444
 80149f4:	08024460 	.word	0x08024460
 80149f8:	08024470 	.word	0x08024470

080149fc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b088      	sub	sp, #32
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	60f8      	str	r0, [r7, #12]
 8014a04:	60b9      	str	r1, [r7, #8]
 8014a06:	4611      	mov	r1, r2
 8014a08:	461a      	mov	r2, r3
 8014a0a:	460b      	mov	r3, r1
 8014a0c:	80fb      	strh	r3, [r7, #6]
 8014a0e:	4613      	mov	r3, r2
 8014a10:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8014a12:	2300      	movs	r3, #0
 8014a14:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014a16:	2300      	movs	r3, #0
 8014a18:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d108      	bne.n	8014a32 <pbuf_copy_partial+0x36>
 8014a20:	4b2b      	ldr	r3, [pc, #172]	; (8014ad0 <pbuf_copy_partial+0xd4>)
 8014a22:	f240 420a 	movw	r2, #1034	; 0x40a
 8014a26:	492b      	ldr	r1, [pc, #172]	; (8014ad4 <pbuf_copy_partial+0xd8>)
 8014a28:	482b      	ldr	r0, [pc, #172]	; (8014ad8 <pbuf_copy_partial+0xdc>)
 8014a2a:	f00a fe49 	bl	801f6c0 <iprintf>
 8014a2e:	2300      	movs	r3, #0
 8014a30:	e04a      	b.n	8014ac8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8014a32:	68bb      	ldr	r3, [r7, #8]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d108      	bne.n	8014a4a <pbuf_copy_partial+0x4e>
 8014a38:	4b25      	ldr	r3, [pc, #148]	; (8014ad0 <pbuf_copy_partial+0xd4>)
 8014a3a:	f240 420b 	movw	r2, #1035	; 0x40b
 8014a3e:	4927      	ldr	r1, [pc, #156]	; (8014adc <pbuf_copy_partial+0xe0>)
 8014a40:	4825      	ldr	r0, [pc, #148]	; (8014ad8 <pbuf_copy_partial+0xdc>)
 8014a42:	f00a fe3d 	bl	801f6c0 <iprintf>
 8014a46:	2300      	movs	r3, #0
 8014a48:	e03e      	b.n	8014ac8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	61fb      	str	r3, [r7, #28]
 8014a4e:	e034      	b.n	8014aba <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8014a50:	88bb      	ldrh	r3, [r7, #4]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d00a      	beq.n	8014a6c <pbuf_copy_partial+0x70>
 8014a56:	69fb      	ldr	r3, [r7, #28]
 8014a58:	895b      	ldrh	r3, [r3, #10]
 8014a5a:	88ba      	ldrh	r2, [r7, #4]
 8014a5c:	429a      	cmp	r2, r3
 8014a5e:	d305      	bcc.n	8014a6c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8014a60:	69fb      	ldr	r3, [r7, #28]
 8014a62:	895b      	ldrh	r3, [r3, #10]
 8014a64:	88ba      	ldrh	r2, [r7, #4]
 8014a66:	1ad3      	subs	r3, r2, r3
 8014a68:	80bb      	strh	r3, [r7, #4]
 8014a6a:	e023      	b.n	8014ab4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8014a6c:	69fb      	ldr	r3, [r7, #28]
 8014a6e:	895a      	ldrh	r2, [r3, #10]
 8014a70:	88bb      	ldrh	r3, [r7, #4]
 8014a72:	1ad3      	subs	r3, r2, r3
 8014a74:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8014a76:	8b3a      	ldrh	r2, [r7, #24]
 8014a78:	88fb      	ldrh	r3, [r7, #6]
 8014a7a:	429a      	cmp	r2, r3
 8014a7c:	d901      	bls.n	8014a82 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8014a7e:	88fb      	ldrh	r3, [r7, #6]
 8014a80:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8014a82:	8b7b      	ldrh	r3, [r7, #26]
 8014a84:	68ba      	ldr	r2, [r7, #8]
 8014a86:	18d0      	adds	r0, r2, r3
 8014a88:	69fb      	ldr	r3, [r7, #28]
 8014a8a:	685a      	ldr	r2, [r3, #4]
 8014a8c:	88bb      	ldrh	r3, [r7, #4]
 8014a8e:	4413      	add	r3, r2
 8014a90:	8b3a      	ldrh	r2, [r7, #24]
 8014a92:	4619      	mov	r1, r3
 8014a94:	f00a fb66 	bl	801f164 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8014a98:	8afa      	ldrh	r2, [r7, #22]
 8014a9a:	8b3b      	ldrh	r3, [r7, #24]
 8014a9c:	4413      	add	r3, r2
 8014a9e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8014aa0:	8b7a      	ldrh	r2, [r7, #26]
 8014aa2:	8b3b      	ldrh	r3, [r7, #24]
 8014aa4:	4413      	add	r3, r2
 8014aa6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8014aa8:	88fa      	ldrh	r2, [r7, #6]
 8014aaa:	8b3b      	ldrh	r3, [r7, #24]
 8014aac:	1ad3      	subs	r3, r2, r3
 8014aae:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014ab4:	69fb      	ldr	r3, [r7, #28]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	61fb      	str	r3, [r7, #28]
 8014aba:	88fb      	ldrh	r3, [r7, #6]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d002      	beq.n	8014ac6 <pbuf_copy_partial+0xca>
 8014ac0:	69fb      	ldr	r3, [r7, #28]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d1c4      	bne.n	8014a50 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8014ac6:	8afb      	ldrh	r3, [r7, #22]
}
 8014ac8:	4618      	mov	r0, r3
 8014aca:	3720      	adds	r7, #32
 8014acc:	46bd      	mov	sp, r7
 8014ace:	bd80      	pop	{r7, pc}
 8014ad0:	08024154 	.word	0x08024154
 8014ad4:	0802449c 	.word	0x0802449c
 8014ad8:	080241b4 	.word	0x080241b4
 8014adc:	080244bc 	.word	0x080244bc

08014ae0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	b084      	sub	sp, #16
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	603a      	str	r2, [r7, #0]
 8014aea:	71fb      	strb	r3, [r7, #7]
 8014aec:	460b      	mov	r3, r1
 8014aee:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8014af0:	683b      	ldr	r3, [r7, #0]
 8014af2:	8919      	ldrh	r1, [r3, #8]
 8014af4:	88ba      	ldrh	r2, [r7, #4]
 8014af6:	79fb      	ldrb	r3, [r7, #7]
 8014af8:	4618      	mov	r0, r3
 8014afa:	f7ff fa95 	bl	8014028 <pbuf_alloc>
 8014afe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d101      	bne.n	8014b0a <pbuf_clone+0x2a>
    return NULL;
 8014b06:	2300      	movs	r3, #0
 8014b08:	e011      	b.n	8014b2e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8014b0a:	6839      	ldr	r1, [r7, #0]
 8014b0c:	68f8      	ldr	r0, [r7, #12]
 8014b0e:	f7ff fea3 	bl	8014858 <pbuf_copy>
 8014b12:	4603      	mov	r3, r0
 8014b14:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8014b16:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d006      	beq.n	8014b2c <pbuf_clone+0x4c>
 8014b1e:	4b06      	ldr	r3, [pc, #24]	; (8014b38 <pbuf_clone+0x58>)
 8014b20:	f240 5224 	movw	r2, #1316	; 0x524
 8014b24:	4905      	ldr	r1, [pc, #20]	; (8014b3c <pbuf_clone+0x5c>)
 8014b26:	4806      	ldr	r0, [pc, #24]	; (8014b40 <pbuf_clone+0x60>)
 8014b28:	f00a fdca 	bl	801f6c0 <iprintf>
  return q;
 8014b2c:	68fb      	ldr	r3, [r7, #12]
}
 8014b2e:	4618      	mov	r0, r3
 8014b30:	3710      	adds	r7, #16
 8014b32:	46bd      	mov	sp, r7
 8014b34:	bd80      	pop	{r7, pc}
 8014b36:	bf00      	nop
 8014b38:	08024154 	.word	0x08024154
 8014b3c:	080245c8 	.word	0x080245c8
 8014b40:	080241b4 	.word	0x080241b4

08014b44 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014b48:	f00a fdd2 	bl	801f6f0 <rand>
 8014b4c:	4603      	mov	r3, r0
 8014b4e:	b29b      	uxth	r3, r3
 8014b50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014b54:	b29b      	uxth	r3, r3
 8014b56:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014b5a:	b29a      	uxth	r2, r3
 8014b5c:	4b01      	ldr	r3, [pc, #4]	; (8014b64 <tcp_init+0x20>)
 8014b5e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014b60:	bf00      	nop
 8014b62:	bd80      	pop	{r7, pc}
 8014b64:	2000013c 	.word	0x2000013c

08014b68 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b082      	sub	sp, #8
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	7d1b      	ldrb	r3, [r3, #20]
 8014b74:	2b01      	cmp	r3, #1
 8014b76:	d105      	bne.n	8014b84 <tcp_free+0x1c>
 8014b78:	4b06      	ldr	r3, [pc, #24]	; (8014b94 <tcp_free+0x2c>)
 8014b7a:	22d4      	movs	r2, #212	; 0xd4
 8014b7c:	4906      	ldr	r1, [pc, #24]	; (8014b98 <tcp_free+0x30>)
 8014b7e:	4807      	ldr	r0, [pc, #28]	; (8014b9c <tcp_free+0x34>)
 8014b80:	f00a fd9e 	bl	801f6c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8014b84:	6879      	ldr	r1, [r7, #4]
 8014b86:	2001      	movs	r0, #1
 8014b88:	f7fe feb4 	bl	80138f4 <memp_free>
}
 8014b8c:	bf00      	nop
 8014b8e:	3708      	adds	r7, #8
 8014b90:	46bd      	mov	sp, r7
 8014b92:	bd80      	pop	{r7, pc}
 8014b94:	08024654 	.word	0x08024654
 8014b98:	08024684 	.word	0x08024684
 8014b9c:	08024698 	.word	0x08024698

08014ba0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b082      	sub	sp, #8
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	7d1b      	ldrb	r3, [r3, #20]
 8014bac:	2b01      	cmp	r3, #1
 8014bae:	d105      	bne.n	8014bbc <tcp_free_listen+0x1c>
 8014bb0:	4b06      	ldr	r3, [pc, #24]	; (8014bcc <tcp_free_listen+0x2c>)
 8014bb2:	22df      	movs	r2, #223	; 0xdf
 8014bb4:	4906      	ldr	r1, [pc, #24]	; (8014bd0 <tcp_free_listen+0x30>)
 8014bb6:	4807      	ldr	r0, [pc, #28]	; (8014bd4 <tcp_free_listen+0x34>)
 8014bb8:	f00a fd82 	bl	801f6c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8014bbc:	6879      	ldr	r1, [r7, #4]
 8014bbe:	2002      	movs	r0, #2
 8014bc0:	f7fe fe98 	bl	80138f4 <memp_free>
}
 8014bc4:	bf00      	nop
 8014bc6:	3708      	adds	r7, #8
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bd80      	pop	{r7, pc}
 8014bcc:	08024654 	.word	0x08024654
 8014bd0:	080246c0 	.word	0x080246c0
 8014bd4:	08024698 	.word	0x08024698

08014bd8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8014bdc:	f001 f8b8 	bl	8015d50 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8014be0:	4b07      	ldr	r3, [pc, #28]	; (8014c00 <tcp_tmr+0x28>)
 8014be2:	781b      	ldrb	r3, [r3, #0]
 8014be4:	3301      	adds	r3, #1
 8014be6:	b2da      	uxtb	r2, r3
 8014be8:	4b05      	ldr	r3, [pc, #20]	; (8014c00 <tcp_tmr+0x28>)
 8014bea:	701a      	strb	r2, [r3, #0]
 8014bec:	4b04      	ldr	r3, [pc, #16]	; (8014c00 <tcp_tmr+0x28>)
 8014bee:	781b      	ldrb	r3, [r3, #0]
 8014bf0:	f003 0301 	and.w	r3, r3, #1
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d001      	beq.n	8014bfc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014bf8:	f000 fd6a 	bl	80156d0 <tcp_slowtmr>
  }
}
 8014bfc:	bf00      	nop
 8014bfe:	bd80      	pop	{r7, pc}
 8014c00:	20004771 	.word	0x20004771

08014c04 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b084      	sub	sp, #16
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
 8014c0c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8014c0e:	683b      	ldr	r3, [r7, #0]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d105      	bne.n	8014c20 <tcp_remove_listener+0x1c>
 8014c14:	4b0d      	ldr	r3, [pc, #52]	; (8014c4c <tcp_remove_listener+0x48>)
 8014c16:	22ff      	movs	r2, #255	; 0xff
 8014c18:	490d      	ldr	r1, [pc, #52]	; (8014c50 <tcp_remove_listener+0x4c>)
 8014c1a:	480e      	ldr	r0, [pc, #56]	; (8014c54 <tcp_remove_listener+0x50>)
 8014c1c:	f00a fd50 	bl	801f6c0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	60fb      	str	r3, [r7, #12]
 8014c24:	e00a      	b.n	8014c3c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c2a:	683a      	ldr	r2, [r7, #0]
 8014c2c:	429a      	cmp	r2, r3
 8014c2e:	d102      	bne.n	8014c36 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	2200      	movs	r2, #0
 8014c34:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	68db      	ldr	r3, [r3, #12]
 8014c3a:	60fb      	str	r3, [r7, #12]
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d1f1      	bne.n	8014c26 <tcp_remove_listener+0x22>
    }
  }
}
 8014c42:	bf00      	nop
 8014c44:	bf00      	nop
 8014c46:	3710      	adds	r7, #16
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	bd80      	pop	{r7, pc}
 8014c4c:	08024654 	.word	0x08024654
 8014c50:	080246dc 	.word	0x080246dc
 8014c54:	08024698 	.word	0x08024698

08014c58 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b084      	sub	sp, #16
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d106      	bne.n	8014c74 <tcp_listen_closed+0x1c>
 8014c66:	4b14      	ldr	r3, [pc, #80]	; (8014cb8 <tcp_listen_closed+0x60>)
 8014c68:	f240 1211 	movw	r2, #273	; 0x111
 8014c6c:	4913      	ldr	r1, [pc, #76]	; (8014cbc <tcp_listen_closed+0x64>)
 8014c6e:	4814      	ldr	r0, [pc, #80]	; (8014cc0 <tcp_listen_closed+0x68>)
 8014c70:	f00a fd26 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	7d1b      	ldrb	r3, [r3, #20]
 8014c78:	2b01      	cmp	r3, #1
 8014c7a:	d006      	beq.n	8014c8a <tcp_listen_closed+0x32>
 8014c7c:	4b0e      	ldr	r3, [pc, #56]	; (8014cb8 <tcp_listen_closed+0x60>)
 8014c7e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8014c82:	4910      	ldr	r1, [pc, #64]	; (8014cc4 <tcp_listen_closed+0x6c>)
 8014c84:	480e      	ldr	r0, [pc, #56]	; (8014cc0 <tcp_listen_closed+0x68>)
 8014c86:	f00a fd1b 	bl	801f6c0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014c8a:	2301      	movs	r3, #1
 8014c8c:	60fb      	str	r3, [r7, #12]
 8014c8e:	e00b      	b.n	8014ca8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8014c90:	4a0d      	ldr	r2, [pc, #52]	; (8014cc8 <tcp_listen_closed+0x70>)
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	6879      	ldr	r1, [r7, #4]
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	f7ff ffb1 	bl	8014c04 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	3301      	adds	r3, #1
 8014ca6:	60fb      	str	r3, [r7, #12]
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	2b03      	cmp	r3, #3
 8014cac:	d9f0      	bls.n	8014c90 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8014cae:	bf00      	nop
 8014cb0:	bf00      	nop
 8014cb2:	3710      	adds	r7, #16
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	bd80      	pop	{r7, pc}
 8014cb8:	08024654 	.word	0x08024654
 8014cbc:	08024704 	.word	0x08024704
 8014cc0:	08024698 	.word	0x08024698
 8014cc4:	08024710 	.word	0x08024710
 8014cc8:	08027608 	.word	0x08027608

08014ccc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8014ccc:	b5b0      	push	{r4, r5, r7, lr}
 8014cce:	b088      	sub	sp, #32
 8014cd0:	af04      	add	r7, sp, #16
 8014cd2:	6078      	str	r0, [r7, #4]
 8014cd4:	460b      	mov	r3, r1
 8014cd6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d106      	bne.n	8014cec <tcp_close_shutdown+0x20>
 8014cde:	4b63      	ldr	r3, [pc, #396]	; (8014e6c <tcp_close_shutdown+0x1a0>)
 8014ce0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8014ce4:	4962      	ldr	r1, [pc, #392]	; (8014e70 <tcp_close_shutdown+0x1a4>)
 8014ce6:	4863      	ldr	r0, [pc, #396]	; (8014e74 <tcp_close_shutdown+0x1a8>)
 8014ce8:	f00a fcea 	bl	801f6c0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8014cec:	78fb      	ldrb	r3, [r7, #3]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d066      	beq.n	8014dc0 <tcp_close_shutdown+0xf4>
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	7d1b      	ldrb	r3, [r3, #20]
 8014cf6:	2b04      	cmp	r3, #4
 8014cf8:	d003      	beq.n	8014d02 <tcp_close_shutdown+0x36>
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	7d1b      	ldrb	r3, [r3, #20]
 8014cfe:	2b07      	cmp	r3, #7
 8014d00:	d15e      	bne.n	8014dc0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d104      	bne.n	8014d14 <tcp_close_shutdown+0x48>
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d0e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014d12:	d055      	beq.n	8014dc0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	8b5b      	ldrh	r3, [r3, #26]
 8014d18:	f003 0310 	and.w	r3, r3, #16
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d106      	bne.n	8014d2e <tcp_close_shutdown+0x62>
 8014d20:	4b52      	ldr	r3, [pc, #328]	; (8014e6c <tcp_close_shutdown+0x1a0>)
 8014d22:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8014d26:	4954      	ldr	r1, [pc, #336]	; (8014e78 <tcp_close_shutdown+0x1ac>)
 8014d28:	4852      	ldr	r0, [pc, #328]	; (8014e74 <tcp_close_shutdown+0x1a8>)
 8014d2a:	f00a fcc9 	bl	801f6c0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014d36:	687d      	ldr	r5, [r7, #4]
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	3304      	adds	r3, #4
 8014d3c:	687a      	ldr	r2, [r7, #4]
 8014d3e:	8ad2      	ldrh	r2, [r2, #22]
 8014d40:	6879      	ldr	r1, [r7, #4]
 8014d42:	8b09      	ldrh	r1, [r1, #24]
 8014d44:	9102      	str	r1, [sp, #8]
 8014d46:	9201      	str	r2, [sp, #4]
 8014d48:	9300      	str	r3, [sp, #0]
 8014d4a:	462b      	mov	r3, r5
 8014d4c:	4622      	mov	r2, r4
 8014d4e:	4601      	mov	r1, r0
 8014d50:	6878      	ldr	r0, [r7, #4]
 8014d52:	f005 fde7 	bl	801a924 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014d56:	6878      	ldr	r0, [r7, #4]
 8014d58:	f001 fbc8 	bl	80164ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014d5c:	4b47      	ldr	r3, [pc, #284]	; (8014e7c <tcp_close_shutdown+0x1b0>)
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	687a      	ldr	r2, [r7, #4]
 8014d62:	429a      	cmp	r2, r3
 8014d64:	d105      	bne.n	8014d72 <tcp_close_shutdown+0xa6>
 8014d66:	4b45      	ldr	r3, [pc, #276]	; (8014e7c <tcp_close_shutdown+0x1b0>)
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	68db      	ldr	r3, [r3, #12]
 8014d6c:	4a43      	ldr	r2, [pc, #268]	; (8014e7c <tcp_close_shutdown+0x1b0>)
 8014d6e:	6013      	str	r3, [r2, #0]
 8014d70:	e013      	b.n	8014d9a <tcp_close_shutdown+0xce>
 8014d72:	4b42      	ldr	r3, [pc, #264]	; (8014e7c <tcp_close_shutdown+0x1b0>)
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	60fb      	str	r3, [r7, #12]
 8014d78:	e00c      	b.n	8014d94 <tcp_close_shutdown+0xc8>
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	68db      	ldr	r3, [r3, #12]
 8014d7e:	687a      	ldr	r2, [r7, #4]
 8014d80:	429a      	cmp	r2, r3
 8014d82:	d104      	bne.n	8014d8e <tcp_close_shutdown+0xc2>
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	68da      	ldr	r2, [r3, #12]
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	60da      	str	r2, [r3, #12]
 8014d8c:	e005      	b.n	8014d9a <tcp_close_shutdown+0xce>
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	68db      	ldr	r3, [r3, #12]
 8014d92:	60fb      	str	r3, [r7, #12]
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d1ef      	bne.n	8014d7a <tcp_close_shutdown+0xae>
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	60da      	str	r2, [r3, #12]
 8014da0:	4b37      	ldr	r3, [pc, #220]	; (8014e80 <tcp_close_shutdown+0x1b4>)
 8014da2:	2201      	movs	r2, #1
 8014da4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8014da6:	4b37      	ldr	r3, [pc, #220]	; (8014e84 <tcp_close_shutdown+0x1b8>)
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	687a      	ldr	r2, [r7, #4]
 8014dac:	429a      	cmp	r2, r3
 8014dae:	d102      	bne.n	8014db6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8014db0:	f004 f85c 	bl	8018e6c <tcp_trigger_input_pcb_close>
 8014db4:	e002      	b.n	8014dbc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8014db6:	6878      	ldr	r0, [r7, #4]
 8014db8:	f7ff fed6 	bl	8014b68 <tcp_free>
      }
      return ERR_OK;
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	e050      	b.n	8014e62 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	7d1b      	ldrb	r3, [r3, #20]
 8014dc4:	2b02      	cmp	r3, #2
 8014dc6:	d03b      	beq.n	8014e40 <tcp_close_shutdown+0x174>
 8014dc8:	2b02      	cmp	r3, #2
 8014dca:	dc44      	bgt.n	8014e56 <tcp_close_shutdown+0x18a>
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d002      	beq.n	8014dd6 <tcp_close_shutdown+0x10a>
 8014dd0:	2b01      	cmp	r3, #1
 8014dd2:	d02a      	beq.n	8014e2a <tcp_close_shutdown+0x15e>
 8014dd4:	e03f      	b.n	8014e56 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	8adb      	ldrh	r3, [r3, #22]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d021      	beq.n	8014e22 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014dde:	4b2a      	ldr	r3, [pc, #168]	; (8014e88 <tcp_close_shutdown+0x1bc>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	687a      	ldr	r2, [r7, #4]
 8014de4:	429a      	cmp	r2, r3
 8014de6:	d105      	bne.n	8014df4 <tcp_close_shutdown+0x128>
 8014de8:	4b27      	ldr	r3, [pc, #156]	; (8014e88 <tcp_close_shutdown+0x1bc>)
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	68db      	ldr	r3, [r3, #12]
 8014dee:	4a26      	ldr	r2, [pc, #152]	; (8014e88 <tcp_close_shutdown+0x1bc>)
 8014df0:	6013      	str	r3, [r2, #0]
 8014df2:	e013      	b.n	8014e1c <tcp_close_shutdown+0x150>
 8014df4:	4b24      	ldr	r3, [pc, #144]	; (8014e88 <tcp_close_shutdown+0x1bc>)
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	60bb      	str	r3, [r7, #8]
 8014dfa:	e00c      	b.n	8014e16 <tcp_close_shutdown+0x14a>
 8014dfc:	68bb      	ldr	r3, [r7, #8]
 8014dfe:	68db      	ldr	r3, [r3, #12]
 8014e00:	687a      	ldr	r2, [r7, #4]
 8014e02:	429a      	cmp	r2, r3
 8014e04:	d104      	bne.n	8014e10 <tcp_close_shutdown+0x144>
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	68da      	ldr	r2, [r3, #12]
 8014e0a:	68bb      	ldr	r3, [r7, #8]
 8014e0c:	60da      	str	r2, [r3, #12]
 8014e0e:	e005      	b.n	8014e1c <tcp_close_shutdown+0x150>
 8014e10:	68bb      	ldr	r3, [r7, #8]
 8014e12:	68db      	ldr	r3, [r3, #12]
 8014e14:	60bb      	str	r3, [r7, #8]
 8014e16:	68bb      	ldr	r3, [r7, #8]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d1ef      	bne.n	8014dfc <tcp_close_shutdown+0x130>
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	2200      	movs	r2, #0
 8014e20:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8014e22:	6878      	ldr	r0, [r7, #4]
 8014e24:	f7ff fea0 	bl	8014b68 <tcp_free>
      break;
 8014e28:	e01a      	b.n	8014e60 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8014e2a:	6878      	ldr	r0, [r7, #4]
 8014e2c:	f7ff ff14 	bl	8014c58 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014e30:	6879      	ldr	r1, [r7, #4]
 8014e32:	4816      	ldr	r0, [pc, #88]	; (8014e8c <tcp_close_shutdown+0x1c0>)
 8014e34:	f001 fbaa 	bl	801658c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014e38:	6878      	ldr	r0, [r7, #4]
 8014e3a:	f7ff feb1 	bl	8014ba0 <tcp_free_listen>
      break;
 8014e3e:	e00f      	b.n	8014e60 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014e40:	6879      	ldr	r1, [r7, #4]
 8014e42:	480e      	ldr	r0, [pc, #56]	; (8014e7c <tcp_close_shutdown+0x1b0>)
 8014e44:	f001 fba2 	bl	801658c <tcp_pcb_remove>
 8014e48:	4b0d      	ldr	r3, [pc, #52]	; (8014e80 <tcp_close_shutdown+0x1b4>)
 8014e4a:	2201      	movs	r2, #1
 8014e4c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8014e4e:	6878      	ldr	r0, [r7, #4]
 8014e50:	f7ff fe8a 	bl	8014b68 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014e54:	e004      	b.n	8014e60 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014e56:	6878      	ldr	r0, [r7, #4]
 8014e58:	f000 f81a 	bl	8014e90 <tcp_close_shutdown_fin>
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	e000      	b.n	8014e62 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8014e60:	2300      	movs	r3, #0
}
 8014e62:	4618      	mov	r0, r3
 8014e64:	3710      	adds	r7, #16
 8014e66:	46bd      	mov	sp, r7
 8014e68:	bdb0      	pop	{r4, r5, r7, pc}
 8014e6a:	bf00      	nop
 8014e6c:	08024654 	.word	0x08024654
 8014e70:	08024728 	.word	0x08024728
 8014e74:	08024698 	.word	0x08024698
 8014e78:	08024748 	.word	0x08024748
 8014e7c:	2000b8d4 	.word	0x2000b8d4
 8014e80:	2000b8d0 	.word	0x2000b8d0
 8014e84:	2000b8e8 	.word	0x2000b8e8
 8014e88:	2000b8e0 	.word	0x2000b8e0
 8014e8c:	2000b8dc 	.word	0x2000b8dc

08014e90 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b084      	sub	sp, #16
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d106      	bne.n	8014eac <tcp_close_shutdown_fin+0x1c>
 8014e9e:	4b2e      	ldr	r3, [pc, #184]	; (8014f58 <tcp_close_shutdown_fin+0xc8>)
 8014ea0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8014ea4:	492d      	ldr	r1, [pc, #180]	; (8014f5c <tcp_close_shutdown_fin+0xcc>)
 8014ea6:	482e      	ldr	r0, [pc, #184]	; (8014f60 <tcp_close_shutdown_fin+0xd0>)
 8014ea8:	f00a fc0a 	bl	801f6c0 <iprintf>

  switch (pcb->state) {
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	7d1b      	ldrb	r3, [r3, #20]
 8014eb0:	2b07      	cmp	r3, #7
 8014eb2:	d020      	beq.n	8014ef6 <tcp_close_shutdown_fin+0x66>
 8014eb4:	2b07      	cmp	r3, #7
 8014eb6:	dc2b      	bgt.n	8014f10 <tcp_close_shutdown_fin+0x80>
 8014eb8:	2b03      	cmp	r3, #3
 8014eba:	d002      	beq.n	8014ec2 <tcp_close_shutdown_fin+0x32>
 8014ebc:	2b04      	cmp	r3, #4
 8014ebe:	d00d      	beq.n	8014edc <tcp_close_shutdown_fin+0x4c>
 8014ec0:	e026      	b.n	8014f10 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8014ec2:	6878      	ldr	r0, [r7, #4]
 8014ec4:	f004 fe3c 	bl	8019b40 <tcp_send_fin>
 8014ec8:	4603      	mov	r3, r0
 8014eca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d11f      	bne.n	8014f14 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	2205      	movs	r2, #5
 8014ed8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014eda:	e01b      	b.n	8014f14 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8014edc:	6878      	ldr	r0, [r7, #4]
 8014ede:	f004 fe2f 	bl	8019b40 <tcp_send_fin>
 8014ee2:	4603      	mov	r3, r0
 8014ee4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d114      	bne.n	8014f18 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	2205      	movs	r2, #5
 8014ef2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014ef4:	e010      	b.n	8014f18 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014ef6:	6878      	ldr	r0, [r7, #4]
 8014ef8:	f004 fe22 	bl	8019b40 <tcp_send_fin>
 8014efc:	4603      	mov	r3, r0
 8014efe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d109      	bne.n	8014f1c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	2209      	movs	r2, #9
 8014f0c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014f0e:	e005      	b.n	8014f1c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8014f10:	2300      	movs	r3, #0
 8014f12:	e01c      	b.n	8014f4e <tcp_close_shutdown_fin+0xbe>
      break;
 8014f14:	bf00      	nop
 8014f16:	e002      	b.n	8014f1e <tcp_close_shutdown_fin+0x8e>
      break;
 8014f18:	bf00      	nop
 8014f1a:	e000      	b.n	8014f1e <tcp_close_shutdown_fin+0x8e>
      break;
 8014f1c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8014f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d103      	bne.n	8014f2e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8014f26:	6878      	ldr	r0, [r7, #4]
 8014f28:	f004 ff48 	bl	8019dbc <tcp_output>
 8014f2c:	e00d      	b.n	8014f4a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8014f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f36:	d108      	bne.n	8014f4a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	8b5b      	ldrh	r3, [r3, #26]
 8014f3c:	f043 0308 	orr.w	r3, r3, #8
 8014f40:	b29a      	uxth	r2, r3
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014f46:	2300      	movs	r3, #0
 8014f48:	e001      	b.n	8014f4e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014f4e:	4618      	mov	r0, r3
 8014f50:	3710      	adds	r7, #16
 8014f52:	46bd      	mov	sp, r7
 8014f54:	bd80      	pop	{r7, pc}
 8014f56:	bf00      	nop
 8014f58:	08024654 	.word	0x08024654
 8014f5c:	08024704 	.word	0x08024704
 8014f60:	08024698 	.word	0x08024698

08014f64 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b082      	sub	sp, #8
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d109      	bne.n	8014f86 <tcp_close+0x22>
 8014f72:	4b0f      	ldr	r3, [pc, #60]	; (8014fb0 <tcp_close+0x4c>)
 8014f74:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8014f78:	490e      	ldr	r1, [pc, #56]	; (8014fb4 <tcp_close+0x50>)
 8014f7a:	480f      	ldr	r0, [pc, #60]	; (8014fb8 <tcp_close+0x54>)
 8014f7c:	f00a fba0 	bl	801f6c0 <iprintf>
 8014f80:	f06f 030f 	mvn.w	r3, #15
 8014f84:	e00f      	b.n	8014fa6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	7d1b      	ldrb	r3, [r3, #20]
 8014f8a:	2b01      	cmp	r3, #1
 8014f8c:	d006      	beq.n	8014f9c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	8b5b      	ldrh	r3, [r3, #26]
 8014f92:	f043 0310 	orr.w	r3, r3, #16
 8014f96:	b29a      	uxth	r2, r3
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8014f9c:	2101      	movs	r1, #1
 8014f9e:	6878      	ldr	r0, [r7, #4]
 8014fa0:	f7ff fe94 	bl	8014ccc <tcp_close_shutdown>
 8014fa4:	4603      	mov	r3, r0
}
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	3708      	adds	r7, #8
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bd80      	pop	{r7, pc}
 8014fae:	bf00      	nop
 8014fb0:	08024654 	.word	0x08024654
 8014fb4:	08024764 	.word	0x08024764
 8014fb8:	08024698 	.word	0x08024698

08014fbc <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	b084      	sub	sp, #16
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	60f8      	str	r0, [r7, #12]
 8014fc4:	60b9      	str	r1, [r7, #8]
 8014fc6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d109      	bne.n	8014fe2 <tcp_shutdown+0x26>
 8014fce:	4b26      	ldr	r3, [pc, #152]	; (8015068 <tcp_shutdown+0xac>)
 8014fd0:	f240 2207 	movw	r2, #519	; 0x207
 8014fd4:	4925      	ldr	r1, [pc, #148]	; (801506c <tcp_shutdown+0xb0>)
 8014fd6:	4826      	ldr	r0, [pc, #152]	; (8015070 <tcp_shutdown+0xb4>)
 8014fd8:	f00a fb72 	bl	801f6c0 <iprintf>
 8014fdc:	f06f 030f 	mvn.w	r3, #15
 8014fe0:	e03d      	b.n	801505e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	7d1b      	ldrb	r3, [r3, #20]
 8014fe6:	2b01      	cmp	r3, #1
 8014fe8:	d102      	bne.n	8014ff0 <tcp_shutdown+0x34>
    return ERR_CONN;
 8014fea:	f06f 030a 	mvn.w	r3, #10
 8014fee:	e036      	b.n	801505e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8014ff0:	68bb      	ldr	r3, [r7, #8]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d01b      	beq.n	801502e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	8b5b      	ldrh	r3, [r3, #26]
 8014ffa:	f043 0310 	orr.w	r3, r3, #16
 8014ffe:	b29a      	uxth	r2, r3
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d005      	beq.n	8015016 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801500a:	2101      	movs	r1, #1
 801500c:	68f8      	ldr	r0, [r7, #12]
 801500e:	f7ff fe5d 	bl	8014ccc <tcp_close_shutdown>
 8015012:	4603      	mov	r3, r0
 8015014:	e023      	b.n	801505e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801501a:	2b00      	cmp	r3, #0
 801501c:	d007      	beq.n	801502e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015022:	4618      	mov	r0, r3
 8015024:	f7ff fae4 	bl	80145f0 <pbuf_free>
      pcb->refused_data = NULL;
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	2200      	movs	r2, #0
 801502c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d013      	beq.n	801505c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	7d1b      	ldrb	r3, [r3, #20]
 8015038:	2b04      	cmp	r3, #4
 801503a:	dc02      	bgt.n	8015042 <tcp_shutdown+0x86>
 801503c:	2b03      	cmp	r3, #3
 801503e:	da02      	bge.n	8015046 <tcp_shutdown+0x8a>
 8015040:	e009      	b.n	8015056 <tcp_shutdown+0x9a>
 8015042:	2b07      	cmp	r3, #7
 8015044:	d107      	bne.n	8015056 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8015046:	68bb      	ldr	r3, [r7, #8]
 8015048:	b2db      	uxtb	r3, r3
 801504a:	4619      	mov	r1, r3
 801504c:	68f8      	ldr	r0, [r7, #12]
 801504e:	f7ff fe3d 	bl	8014ccc <tcp_close_shutdown>
 8015052:	4603      	mov	r3, r0
 8015054:	e003      	b.n	801505e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8015056:	f06f 030a 	mvn.w	r3, #10
 801505a:	e000      	b.n	801505e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 801505c:	2300      	movs	r3, #0
}
 801505e:	4618      	mov	r0, r3
 8015060:	3710      	adds	r7, #16
 8015062:	46bd      	mov	sp, r7
 8015064:	bd80      	pop	{r7, pc}
 8015066:	bf00      	nop
 8015068:	08024654 	.word	0x08024654
 801506c:	0802477c 	.word	0x0802477c
 8015070:	08024698 	.word	0x08024698

08015074 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b08e      	sub	sp, #56	; 0x38
 8015078:	af04      	add	r7, sp, #16
 801507a:	6078      	str	r0, [r7, #4]
 801507c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d107      	bne.n	8015094 <tcp_abandon+0x20>
 8015084:	4b52      	ldr	r3, [pc, #328]	; (80151d0 <tcp_abandon+0x15c>)
 8015086:	f240 223d 	movw	r2, #573	; 0x23d
 801508a:	4952      	ldr	r1, [pc, #328]	; (80151d4 <tcp_abandon+0x160>)
 801508c:	4852      	ldr	r0, [pc, #328]	; (80151d8 <tcp_abandon+0x164>)
 801508e:	f00a fb17 	bl	801f6c0 <iprintf>
 8015092:	e099      	b.n	80151c8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	7d1b      	ldrb	r3, [r3, #20]
 8015098:	2b01      	cmp	r3, #1
 801509a:	d106      	bne.n	80150aa <tcp_abandon+0x36>
 801509c:	4b4c      	ldr	r3, [pc, #304]	; (80151d0 <tcp_abandon+0x15c>)
 801509e:	f44f 7210 	mov.w	r2, #576	; 0x240
 80150a2:	494e      	ldr	r1, [pc, #312]	; (80151dc <tcp_abandon+0x168>)
 80150a4:	484c      	ldr	r0, [pc, #304]	; (80151d8 <tcp_abandon+0x164>)
 80150a6:	f00a fb0b 	bl	801f6c0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	7d1b      	ldrb	r3, [r3, #20]
 80150ae:	2b0a      	cmp	r3, #10
 80150b0:	d107      	bne.n	80150c2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80150b2:	6879      	ldr	r1, [r7, #4]
 80150b4:	484a      	ldr	r0, [pc, #296]	; (80151e0 <tcp_abandon+0x16c>)
 80150b6:	f001 fa69 	bl	801658c <tcp_pcb_remove>
    tcp_free(pcb);
 80150ba:	6878      	ldr	r0, [r7, #4]
 80150bc:	f7ff fd54 	bl	8014b68 <tcp_free>
 80150c0:	e082      	b.n	80151c8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80150c2:	2300      	movs	r3, #0
 80150c4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80150c6:	2300      	movs	r3, #0
 80150c8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80150ce:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150d4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80150dc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	691b      	ldr	r3, [r3, #16]
 80150e2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	7d1b      	ldrb	r3, [r3, #20]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d126      	bne.n	801513a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	8adb      	ldrh	r3, [r3, #22]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d02e      	beq.n	8015152 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80150f4:	4b3b      	ldr	r3, [pc, #236]	; (80151e4 <tcp_abandon+0x170>)
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	687a      	ldr	r2, [r7, #4]
 80150fa:	429a      	cmp	r2, r3
 80150fc:	d105      	bne.n	801510a <tcp_abandon+0x96>
 80150fe:	4b39      	ldr	r3, [pc, #228]	; (80151e4 <tcp_abandon+0x170>)
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	68db      	ldr	r3, [r3, #12]
 8015104:	4a37      	ldr	r2, [pc, #220]	; (80151e4 <tcp_abandon+0x170>)
 8015106:	6013      	str	r3, [r2, #0]
 8015108:	e013      	b.n	8015132 <tcp_abandon+0xbe>
 801510a:	4b36      	ldr	r3, [pc, #216]	; (80151e4 <tcp_abandon+0x170>)
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	61fb      	str	r3, [r7, #28]
 8015110:	e00c      	b.n	801512c <tcp_abandon+0xb8>
 8015112:	69fb      	ldr	r3, [r7, #28]
 8015114:	68db      	ldr	r3, [r3, #12]
 8015116:	687a      	ldr	r2, [r7, #4]
 8015118:	429a      	cmp	r2, r3
 801511a:	d104      	bne.n	8015126 <tcp_abandon+0xb2>
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	68da      	ldr	r2, [r3, #12]
 8015120:	69fb      	ldr	r3, [r7, #28]
 8015122:	60da      	str	r2, [r3, #12]
 8015124:	e005      	b.n	8015132 <tcp_abandon+0xbe>
 8015126:	69fb      	ldr	r3, [r7, #28]
 8015128:	68db      	ldr	r3, [r3, #12]
 801512a:	61fb      	str	r3, [r7, #28]
 801512c:	69fb      	ldr	r3, [r7, #28]
 801512e:	2b00      	cmp	r3, #0
 8015130:	d1ef      	bne.n	8015112 <tcp_abandon+0x9e>
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	2200      	movs	r2, #0
 8015136:	60da      	str	r2, [r3, #12]
 8015138:	e00b      	b.n	8015152 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801513a:	683b      	ldr	r3, [r7, #0]
 801513c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	8adb      	ldrh	r3, [r3, #22]
 8015142:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015144:	6879      	ldr	r1, [r7, #4]
 8015146:	4828      	ldr	r0, [pc, #160]	; (80151e8 <tcp_abandon+0x174>)
 8015148:	f001 fa20 	bl	801658c <tcp_pcb_remove>
 801514c:	4b27      	ldr	r3, [pc, #156]	; (80151ec <tcp_abandon+0x178>)
 801514e:	2201      	movs	r2, #1
 8015150:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015156:	2b00      	cmp	r3, #0
 8015158:	d004      	beq.n	8015164 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801515e:	4618      	mov	r0, r3
 8015160:	f000 fed6 	bl	8015f10 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015168:	2b00      	cmp	r3, #0
 801516a:	d004      	beq.n	8015176 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015170:	4618      	mov	r0, r3
 8015172:	f000 fecd 	bl	8015f10 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801517a:	2b00      	cmp	r3, #0
 801517c:	d004      	beq.n	8015188 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015182:	4618      	mov	r0, r3
 8015184:	f000 fec4 	bl	8015f10 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8015188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801518a:	2b00      	cmp	r3, #0
 801518c:	d00e      	beq.n	80151ac <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801518e:	6879      	ldr	r1, [r7, #4]
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	3304      	adds	r3, #4
 8015194:	687a      	ldr	r2, [r7, #4]
 8015196:	8b12      	ldrh	r2, [r2, #24]
 8015198:	9202      	str	r2, [sp, #8]
 801519a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801519c:	9201      	str	r2, [sp, #4]
 801519e:	9300      	str	r3, [sp, #0]
 80151a0:	460b      	mov	r3, r1
 80151a2:	697a      	ldr	r2, [r7, #20]
 80151a4:	69b9      	ldr	r1, [r7, #24]
 80151a6:	6878      	ldr	r0, [r7, #4]
 80151a8:	f005 fbbc 	bl	801a924 <tcp_rst>
    }
    last_state = pcb->state;
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	7d1b      	ldrb	r3, [r3, #20]
 80151b0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80151b2:	6878      	ldr	r0, [r7, #4]
 80151b4:	f7ff fcd8 	bl	8014b68 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80151b8:	693b      	ldr	r3, [r7, #16]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d004      	beq.n	80151c8 <tcp_abandon+0x154>
 80151be:	693b      	ldr	r3, [r7, #16]
 80151c0:	f06f 010c 	mvn.w	r1, #12
 80151c4:	68f8      	ldr	r0, [r7, #12]
 80151c6:	4798      	blx	r3
  }
}
 80151c8:	3728      	adds	r7, #40	; 0x28
 80151ca:	46bd      	mov	sp, r7
 80151cc:	bd80      	pop	{r7, pc}
 80151ce:	bf00      	nop
 80151d0:	08024654 	.word	0x08024654
 80151d4:	08024798 	.word	0x08024798
 80151d8:	08024698 	.word	0x08024698
 80151dc:	080247b4 	.word	0x080247b4
 80151e0:	2000b8e4 	.word	0x2000b8e4
 80151e4:	2000b8e0 	.word	0x2000b8e0
 80151e8:	2000b8d4 	.word	0x2000b8d4
 80151ec:	2000b8d0 	.word	0x2000b8d0

080151f0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b082      	sub	sp, #8
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80151f8:	2101      	movs	r1, #1
 80151fa:	6878      	ldr	r0, [r7, #4]
 80151fc:	f7ff ff3a 	bl	8015074 <tcp_abandon>
}
 8015200:	bf00      	nop
 8015202:	3708      	adds	r7, #8
 8015204:	46bd      	mov	sp, r7
 8015206:	bd80      	pop	{r7, pc}

08015208 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b088      	sub	sp, #32
 801520c:	af00      	add	r7, sp, #0
 801520e:	60f8      	str	r0, [r7, #12]
 8015210:	60b9      	str	r1, [r7, #8]
 8015212:	4613      	mov	r3, r2
 8015214:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8015216:	2304      	movs	r3, #4
 8015218:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801521a:	68bb      	ldr	r3, [r7, #8]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d101      	bne.n	8015224 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8015220:	4b3e      	ldr	r3, [pc, #248]	; (801531c <tcp_bind+0x114>)
 8015222:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d109      	bne.n	801523e <tcp_bind+0x36>
 801522a:	4b3d      	ldr	r3, [pc, #244]	; (8015320 <tcp_bind+0x118>)
 801522c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8015230:	493c      	ldr	r1, [pc, #240]	; (8015324 <tcp_bind+0x11c>)
 8015232:	483d      	ldr	r0, [pc, #244]	; (8015328 <tcp_bind+0x120>)
 8015234:	f00a fa44 	bl	801f6c0 <iprintf>
 8015238:	f06f 030f 	mvn.w	r3, #15
 801523c:	e06a      	b.n	8015314 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	7d1b      	ldrb	r3, [r3, #20]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d009      	beq.n	801525a <tcp_bind+0x52>
 8015246:	4b36      	ldr	r3, [pc, #216]	; (8015320 <tcp_bind+0x118>)
 8015248:	f240 22ab 	movw	r2, #683	; 0x2ab
 801524c:	4937      	ldr	r1, [pc, #220]	; (801532c <tcp_bind+0x124>)
 801524e:	4836      	ldr	r0, [pc, #216]	; (8015328 <tcp_bind+0x120>)
 8015250:	f00a fa36 	bl	801f6c0 <iprintf>
 8015254:	f06f 0305 	mvn.w	r3, #5
 8015258:	e05c      	b.n	8015314 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801525a:	88fb      	ldrh	r3, [r7, #6]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d109      	bne.n	8015274 <tcp_bind+0x6c>
    port = tcp_new_port();
 8015260:	f000 f9f0 	bl	8015644 <tcp_new_port>
 8015264:	4603      	mov	r3, r0
 8015266:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015268:	88fb      	ldrh	r3, [r7, #6]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d135      	bne.n	80152da <tcp_bind+0xd2>
      return ERR_BUF;
 801526e:	f06f 0301 	mvn.w	r3, #1
 8015272:	e04f      	b.n	8015314 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8015274:	2300      	movs	r3, #0
 8015276:	61fb      	str	r3, [r7, #28]
 8015278:	e02b      	b.n	80152d2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801527a:	4a2d      	ldr	r2, [pc, #180]	; (8015330 <tcp_bind+0x128>)
 801527c:	69fb      	ldr	r3, [r7, #28]
 801527e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	61bb      	str	r3, [r7, #24]
 8015286:	e01e      	b.n	80152c6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8015288:	69bb      	ldr	r3, [r7, #24]
 801528a:	8adb      	ldrh	r3, [r3, #22]
 801528c:	88fa      	ldrh	r2, [r7, #6]
 801528e:	429a      	cmp	r2, r3
 8015290:	d116      	bne.n	80152c0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8015292:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015294:	2b00      	cmp	r3, #0
 8015296:	d010      	beq.n	80152ba <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8015298:	69bb      	ldr	r3, [r7, #24]
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d00c      	beq.n	80152ba <tcp_bind+0xb2>
 80152a0:	68bb      	ldr	r3, [r7, #8]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d009      	beq.n	80152ba <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80152a6:	68bb      	ldr	r3, [r7, #8]
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d005      	beq.n	80152ba <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80152ae:	69bb      	ldr	r3, [r7, #24]
 80152b0:	681a      	ldr	r2, [r3, #0]
 80152b2:	68bb      	ldr	r3, [r7, #8]
 80152b4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80152b6:	429a      	cmp	r2, r3
 80152b8:	d102      	bne.n	80152c0 <tcp_bind+0xb8>
              return ERR_USE;
 80152ba:	f06f 0307 	mvn.w	r3, #7
 80152be:	e029      	b.n	8015314 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80152c0:	69bb      	ldr	r3, [r7, #24]
 80152c2:	68db      	ldr	r3, [r3, #12]
 80152c4:	61bb      	str	r3, [r7, #24]
 80152c6:	69bb      	ldr	r3, [r7, #24]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d1dd      	bne.n	8015288 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80152cc:	69fb      	ldr	r3, [r7, #28]
 80152ce:	3301      	adds	r3, #1
 80152d0:	61fb      	str	r3, [r7, #28]
 80152d2:	69fa      	ldr	r2, [r7, #28]
 80152d4:	697b      	ldr	r3, [r7, #20]
 80152d6:	429a      	cmp	r2, r3
 80152d8:	dbcf      	blt.n	801527a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80152da:	68bb      	ldr	r3, [r7, #8]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d00c      	beq.n	80152fa <tcp_bind+0xf2>
 80152e0:	68bb      	ldr	r3, [r7, #8]
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d008      	beq.n	80152fa <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80152e8:	68bb      	ldr	r3, [r7, #8]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d002      	beq.n	80152f4 <tcp_bind+0xec>
 80152ee:	68bb      	ldr	r3, [r7, #8]
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	e000      	b.n	80152f6 <tcp_bind+0xee>
 80152f4:	2300      	movs	r3, #0
 80152f6:	68fa      	ldr	r2, [r7, #12]
 80152f8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	88fa      	ldrh	r2, [r7, #6]
 80152fe:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8015300:	4b0c      	ldr	r3, [pc, #48]	; (8015334 <tcp_bind+0x12c>)
 8015302:	681a      	ldr	r2, [r3, #0]
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	60da      	str	r2, [r3, #12]
 8015308:	4a0a      	ldr	r2, [pc, #40]	; (8015334 <tcp_bind+0x12c>)
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	6013      	str	r3, [r2, #0]
 801530e:	f005 fccb 	bl	801aca8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8015312:	2300      	movs	r3, #0
}
 8015314:	4618      	mov	r0, r3
 8015316:	3720      	adds	r7, #32
 8015318:	46bd      	mov	sp, r7
 801531a:	bd80      	pop	{r7, pc}
 801531c:	08027630 	.word	0x08027630
 8015320:	08024654 	.word	0x08024654
 8015324:	080247e8 	.word	0x080247e8
 8015328:	08024698 	.word	0x08024698
 801532c:	08024800 	.word	0x08024800
 8015330:	08027608 	.word	0x08027608
 8015334:	2000b8e0 	.word	0x2000b8e0

08015338 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b084      	sub	sp, #16
 801533c:	af00      	add	r7, sp, #0
 801533e:	60f8      	str	r0, [r7, #12]
 8015340:	60b9      	str	r1, [r7, #8]
 8015342:	4613      	mov	r3, r2
 8015344:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8015346:	68bb      	ldr	r3, [r7, #8]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d106      	bne.n	801535a <tcp_accept_null+0x22>
 801534c:	4b07      	ldr	r3, [pc, #28]	; (801536c <tcp_accept_null+0x34>)
 801534e:	f240 320f 	movw	r2, #783	; 0x30f
 8015352:	4907      	ldr	r1, [pc, #28]	; (8015370 <tcp_accept_null+0x38>)
 8015354:	4807      	ldr	r0, [pc, #28]	; (8015374 <tcp_accept_null+0x3c>)
 8015356:	f00a f9b3 	bl	801f6c0 <iprintf>

  tcp_abort(pcb);
 801535a:	68b8      	ldr	r0, [r7, #8]
 801535c:	f7ff ff48 	bl	80151f0 <tcp_abort>

  return ERR_ABRT;
 8015360:	f06f 030c 	mvn.w	r3, #12
}
 8015364:	4618      	mov	r0, r3
 8015366:	3710      	adds	r7, #16
 8015368:	46bd      	mov	sp, r7
 801536a:	bd80      	pop	{r7, pc}
 801536c:	08024654 	.word	0x08024654
 8015370:	08024828 	.word	0x08024828
 8015374:	08024698 	.word	0x08024698

08015378 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8015378:	b580      	push	{r7, lr}
 801537a:	b082      	sub	sp, #8
 801537c:	af00      	add	r7, sp, #0
 801537e:	6078      	str	r0, [r7, #4]
 8015380:	460b      	mov	r3, r1
 8015382:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8015384:	78fb      	ldrb	r3, [r7, #3]
 8015386:	2200      	movs	r2, #0
 8015388:	4619      	mov	r1, r3
 801538a:	6878      	ldr	r0, [r7, #4]
 801538c:	f000 f806 	bl	801539c <tcp_listen_with_backlog_and_err>
 8015390:	4603      	mov	r3, r0
}
 8015392:	4618      	mov	r0, r3
 8015394:	3708      	adds	r7, #8
 8015396:	46bd      	mov	sp, r7
 8015398:	bd80      	pop	{r7, pc}
	...

0801539c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 801539c:	b580      	push	{r7, lr}
 801539e:	b088      	sub	sp, #32
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	60f8      	str	r0, [r7, #12]
 80153a4:	460b      	mov	r3, r1
 80153a6:	607a      	str	r2, [r7, #4]
 80153a8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80153aa:	2300      	movs	r3, #0
 80153ac:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d109      	bne.n	80153c8 <tcp_listen_with_backlog_and_err+0x2c>
 80153b4:	4b47      	ldr	r3, [pc, #284]	; (80154d4 <tcp_listen_with_backlog_and_err+0x138>)
 80153b6:	f240 3259 	movw	r2, #857	; 0x359
 80153ba:	4947      	ldr	r1, [pc, #284]	; (80154d8 <tcp_listen_with_backlog_and_err+0x13c>)
 80153bc:	4847      	ldr	r0, [pc, #284]	; (80154dc <tcp_listen_with_backlog_and_err+0x140>)
 80153be:	f00a f97f 	bl	801f6c0 <iprintf>
 80153c2:	23f0      	movs	r3, #240	; 0xf0
 80153c4:	76fb      	strb	r3, [r7, #27]
 80153c6:	e079      	b.n	80154bc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	7d1b      	ldrb	r3, [r3, #20]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d009      	beq.n	80153e4 <tcp_listen_with_backlog_and_err+0x48>
 80153d0:	4b40      	ldr	r3, [pc, #256]	; (80154d4 <tcp_listen_with_backlog_and_err+0x138>)
 80153d2:	f240 325a 	movw	r2, #858	; 0x35a
 80153d6:	4942      	ldr	r1, [pc, #264]	; (80154e0 <tcp_listen_with_backlog_and_err+0x144>)
 80153d8:	4840      	ldr	r0, [pc, #256]	; (80154dc <tcp_listen_with_backlog_and_err+0x140>)
 80153da:	f00a f971 	bl	801f6c0 <iprintf>
 80153de:	23f1      	movs	r3, #241	; 0xf1
 80153e0:	76fb      	strb	r3, [r7, #27]
 80153e2:	e06b      	b.n	80154bc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	7d1b      	ldrb	r3, [r3, #20]
 80153e8:	2b01      	cmp	r3, #1
 80153ea:	d104      	bne.n	80153f6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80153f0:	23f7      	movs	r3, #247	; 0xf7
 80153f2:	76fb      	strb	r3, [r7, #27]
    goto done;
 80153f4:	e062      	b.n	80154bc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80153f6:	2002      	movs	r0, #2
 80153f8:	f7fe fa2a 	bl	8013850 <memp_malloc>
 80153fc:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80153fe:	69fb      	ldr	r3, [r7, #28]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d102      	bne.n	801540a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8015404:	23ff      	movs	r3, #255	; 0xff
 8015406:	76fb      	strb	r3, [r7, #27]
    goto done;
 8015408:	e058      	b.n	80154bc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	691a      	ldr	r2, [r3, #16]
 801540e:	69fb      	ldr	r3, [r7, #28]
 8015410:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	8ada      	ldrh	r2, [r3, #22]
 8015416:	69fb      	ldr	r3, [r7, #28]
 8015418:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801541a:	69fb      	ldr	r3, [r7, #28]
 801541c:	2201      	movs	r2, #1
 801541e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	7d5a      	ldrb	r2, [r3, #21]
 8015424:	69fb      	ldr	r3, [r7, #28]
 8015426:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	7a5a      	ldrb	r2, [r3, #9]
 801542c:	69fb      	ldr	r3, [r7, #28]
 801542e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8015430:	69fb      	ldr	r3, [r7, #28]
 8015432:	2200      	movs	r2, #0
 8015434:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	7ada      	ldrb	r2, [r3, #11]
 801543a:	69fb      	ldr	r3, [r7, #28]
 801543c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	7a9a      	ldrb	r2, [r3, #10]
 8015442:	69fb      	ldr	r3, [r7, #28]
 8015444:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	681a      	ldr	r2, [r3, #0]
 801544a:	69fb      	ldr	r3, [r7, #28]
 801544c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	8adb      	ldrh	r3, [r3, #22]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d021      	beq.n	801549a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8015456:	4b23      	ldr	r3, [pc, #140]	; (80154e4 <tcp_listen_with_backlog_and_err+0x148>)
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	68fa      	ldr	r2, [r7, #12]
 801545c:	429a      	cmp	r2, r3
 801545e:	d105      	bne.n	801546c <tcp_listen_with_backlog_and_err+0xd0>
 8015460:	4b20      	ldr	r3, [pc, #128]	; (80154e4 <tcp_listen_with_backlog_and_err+0x148>)
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	68db      	ldr	r3, [r3, #12]
 8015466:	4a1f      	ldr	r2, [pc, #124]	; (80154e4 <tcp_listen_with_backlog_and_err+0x148>)
 8015468:	6013      	str	r3, [r2, #0]
 801546a:	e013      	b.n	8015494 <tcp_listen_with_backlog_and_err+0xf8>
 801546c:	4b1d      	ldr	r3, [pc, #116]	; (80154e4 <tcp_listen_with_backlog_and_err+0x148>)
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	617b      	str	r3, [r7, #20]
 8015472:	e00c      	b.n	801548e <tcp_listen_with_backlog_and_err+0xf2>
 8015474:	697b      	ldr	r3, [r7, #20]
 8015476:	68db      	ldr	r3, [r3, #12]
 8015478:	68fa      	ldr	r2, [r7, #12]
 801547a:	429a      	cmp	r2, r3
 801547c:	d104      	bne.n	8015488 <tcp_listen_with_backlog_and_err+0xec>
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	68da      	ldr	r2, [r3, #12]
 8015482:	697b      	ldr	r3, [r7, #20]
 8015484:	60da      	str	r2, [r3, #12]
 8015486:	e005      	b.n	8015494 <tcp_listen_with_backlog_and_err+0xf8>
 8015488:	697b      	ldr	r3, [r7, #20]
 801548a:	68db      	ldr	r3, [r3, #12]
 801548c:	617b      	str	r3, [r7, #20]
 801548e:	697b      	ldr	r3, [r7, #20]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d1ef      	bne.n	8015474 <tcp_listen_with_backlog_and_err+0xd8>
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	2200      	movs	r2, #0
 8015498:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801549a:	68f8      	ldr	r0, [r7, #12]
 801549c:	f7ff fb64 	bl	8014b68 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80154a0:	69fb      	ldr	r3, [r7, #28]
 80154a2:	4a11      	ldr	r2, [pc, #68]	; (80154e8 <tcp_listen_with_backlog_and_err+0x14c>)
 80154a4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80154a6:	4b11      	ldr	r3, [pc, #68]	; (80154ec <tcp_listen_with_backlog_and_err+0x150>)
 80154a8:	681a      	ldr	r2, [r3, #0]
 80154aa:	69fb      	ldr	r3, [r7, #28]
 80154ac:	60da      	str	r2, [r3, #12]
 80154ae:	4a0f      	ldr	r2, [pc, #60]	; (80154ec <tcp_listen_with_backlog_and_err+0x150>)
 80154b0:	69fb      	ldr	r3, [r7, #28]
 80154b2:	6013      	str	r3, [r2, #0]
 80154b4:	f005 fbf8 	bl	801aca8 <tcp_timer_needed>
  res = ERR_OK;
 80154b8:	2300      	movs	r3, #0
 80154ba:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d002      	beq.n	80154c8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	7efa      	ldrb	r2, [r7, #27]
 80154c6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80154c8:	69fb      	ldr	r3, [r7, #28]
}
 80154ca:	4618      	mov	r0, r3
 80154cc:	3720      	adds	r7, #32
 80154ce:	46bd      	mov	sp, r7
 80154d0:	bd80      	pop	{r7, pc}
 80154d2:	bf00      	nop
 80154d4:	08024654 	.word	0x08024654
 80154d8:	08024848 	.word	0x08024848
 80154dc:	08024698 	.word	0x08024698
 80154e0:	08024878 	.word	0x08024878
 80154e4:	2000b8e0 	.word	0x2000b8e0
 80154e8:	08015339 	.word	0x08015339
 80154ec:	2000b8dc 	.word	0x2000b8dc

080154f0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b084      	sub	sp, #16
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d106      	bne.n	801550c <tcp_update_rcv_ann_wnd+0x1c>
 80154fe:	4b25      	ldr	r3, [pc, #148]	; (8015594 <tcp_update_rcv_ann_wnd+0xa4>)
 8015500:	f240 32a6 	movw	r2, #934	; 0x3a6
 8015504:	4924      	ldr	r1, [pc, #144]	; (8015598 <tcp_update_rcv_ann_wnd+0xa8>)
 8015506:	4825      	ldr	r0, [pc, #148]	; (801559c <tcp_update_rcv_ann_wnd+0xac>)
 8015508:	f00a f8da 	bl	801f6c0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015510:	687a      	ldr	r2, [r7, #4]
 8015512:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8015514:	4413      	add	r3, r2
 8015516:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801551c:	687a      	ldr	r2, [r7, #4]
 801551e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8015520:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8015524:	bf28      	it	cs
 8015526:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801552a:	b292      	uxth	r2, r2
 801552c:	4413      	add	r3, r2
 801552e:	68fa      	ldr	r2, [r7, #12]
 8015530:	1ad3      	subs	r3, r2, r3
 8015532:	2b00      	cmp	r3, #0
 8015534:	db08      	blt.n	8015548 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015542:	68fa      	ldr	r2, [r7, #12]
 8015544:	1ad3      	subs	r3, r2, r3
 8015546:	e020      	b.n	801558a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015550:	1ad3      	subs	r3, r2, r3
 8015552:	2b00      	cmp	r3, #0
 8015554:	dd03      	ble.n	801555e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	2200      	movs	r2, #0
 801555a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801555c:	e014      	b.n	8015588 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015566:	1ad3      	subs	r3, r2, r3
 8015568:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801556a:	68bb      	ldr	r3, [r7, #8]
 801556c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015570:	d306      	bcc.n	8015580 <tcp_update_rcv_ann_wnd+0x90>
 8015572:	4b08      	ldr	r3, [pc, #32]	; (8015594 <tcp_update_rcv_ann_wnd+0xa4>)
 8015574:	f240 32b6 	movw	r2, #950	; 0x3b6
 8015578:	4909      	ldr	r1, [pc, #36]	; (80155a0 <tcp_update_rcv_ann_wnd+0xb0>)
 801557a:	4808      	ldr	r0, [pc, #32]	; (801559c <tcp_update_rcv_ann_wnd+0xac>)
 801557c:	f00a f8a0 	bl	801f6c0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8015580:	68bb      	ldr	r3, [r7, #8]
 8015582:	b29a      	uxth	r2, r3
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8015588:	2300      	movs	r3, #0
  }
}
 801558a:	4618      	mov	r0, r3
 801558c:	3710      	adds	r7, #16
 801558e:	46bd      	mov	sp, r7
 8015590:	bd80      	pop	{r7, pc}
 8015592:	bf00      	nop
 8015594:	08024654 	.word	0x08024654
 8015598:	080248b0 	.word	0x080248b0
 801559c:	08024698 	.word	0x08024698
 80155a0:	080248d4 	.word	0x080248d4

080155a4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80155a4:	b580      	push	{r7, lr}
 80155a6:	b084      	sub	sp, #16
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	6078      	str	r0, [r7, #4]
 80155ac:	460b      	mov	r3, r1
 80155ae:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d107      	bne.n	80155c6 <tcp_recved+0x22>
 80155b6:	4b1f      	ldr	r3, [pc, #124]	; (8015634 <tcp_recved+0x90>)
 80155b8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80155bc:	491e      	ldr	r1, [pc, #120]	; (8015638 <tcp_recved+0x94>)
 80155be:	481f      	ldr	r0, [pc, #124]	; (801563c <tcp_recved+0x98>)
 80155c0:	f00a f87e 	bl	801f6c0 <iprintf>
 80155c4:	e032      	b.n	801562c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	7d1b      	ldrb	r3, [r3, #20]
 80155ca:	2b01      	cmp	r3, #1
 80155cc:	d106      	bne.n	80155dc <tcp_recved+0x38>
 80155ce:	4b19      	ldr	r3, [pc, #100]	; (8015634 <tcp_recved+0x90>)
 80155d0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80155d4:	491a      	ldr	r1, [pc, #104]	; (8015640 <tcp_recved+0x9c>)
 80155d6:	4819      	ldr	r0, [pc, #100]	; (801563c <tcp_recved+0x98>)
 80155d8:	f00a f872 	bl	801f6c0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80155e0:	887b      	ldrh	r3, [r7, #2]
 80155e2:	4413      	add	r3, r2
 80155e4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80155e6:	89fb      	ldrh	r3, [r7, #14]
 80155e8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80155ec:	d804      	bhi.n	80155f8 <tcp_recved+0x54>
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80155f2:	89fa      	ldrh	r2, [r7, #14]
 80155f4:	429a      	cmp	r2, r3
 80155f6:	d204      	bcs.n	8015602 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80155fe:	851a      	strh	r2, [r3, #40]	; 0x28
 8015600:	e002      	b.n	8015608 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	89fa      	ldrh	r2, [r7, #14]
 8015606:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015608:	6878      	ldr	r0, [r7, #4]
 801560a:	f7ff ff71 	bl	80154f0 <tcp_update_rcv_ann_wnd>
 801560e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8015610:	68bb      	ldr	r3, [r7, #8]
 8015612:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015616:	d309      	bcc.n	801562c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	8b5b      	ldrh	r3, [r3, #26]
 801561c:	f043 0302 	orr.w	r3, r3, #2
 8015620:	b29a      	uxth	r2, r3
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015626:	6878      	ldr	r0, [r7, #4]
 8015628:	f004 fbc8 	bl	8019dbc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801562c:	3710      	adds	r7, #16
 801562e:	46bd      	mov	sp, r7
 8015630:	bd80      	pop	{r7, pc}
 8015632:	bf00      	nop
 8015634:	08024654 	.word	0x08024654
 8015638:	080248f0 	.word	0x080248f0
 801563c:	08024698 	.word	0x08024698
 8015640:	08024908 	.word	0x08024908

08015644 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8015644:	b480      	push	{r7}
 8015646:	b083      	sub	sp, #12
 8015648:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801564a:	2300      	movs	r3, #0
 801564c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801564e:	4b1e      	ldr	r3, [pc, #120]	; (80156c8 <tcp_new_port+0x84>)
 8015650:	881b      	ldrh	r3, [r3, #0]
 8015652:	3301      	adds	r3, #1
 8015654:	b29a      	uxth	r2, r3
 8015656:	4b1c      	ldr	r3, [pc, #112]	; (80156c8 <tcp_new_port+0x84>)
 8015658:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801565a:	4b1b      	ldr	r3, [pc, #108]	; (80156c8 <tcp_new_port+0x84>)
 801565c:	881b      	ldrh	r3, [r3, #0]
 801565e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015662:	4293      	cmp	r3, r2
 8015664:	d103      	bne.n	801566e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8015666:	4b18      	ldr	r3, [pc, #96]	; (80156c8 <tcp_new_port+0x84>)
 8015668:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801566c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801566e:	2300      	movs	r3, #0
 8015670:	71fb      	strb	r3, [r7, #7]
 8015672:	e01e      	b.n	80156b2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015674:	79fb      	ldrb	r3, [r7, #7]
 8015676:	4a15      	ldr	r2, [pc, #84]	; (80156cc <tcp_new_port+0x88>)
 8015678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	603b      	str	r3, [r7, #0]
 8015680:	e011      	b.n	80156a6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8015682:	683b      	ldr	r3, [r7, #0]
 8015684:	8ada      	ldrh	r2, [r3, #22]
 8015686:	4b10      	ldr	r3, [pc, #64]	; (80156c8 <tcp_new_port+0x84>)
 8015688:	881b      	ldrh	r3, [r3, #0]
 801568a:	429a      	cmp	r2, r3
 801568c:	d108      	bne.n	80156a0 <tcp_new_port+0x5c>
        n++;
 801568e:	88bb      	ldrh	r3, [r7, #4]
 8015690:	3301      	adds	r3, #1
 8015692:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8015694:	88bb      	ldrh	r3, [r7, #4]
 8015696:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801569a:	d3d8      	bcc.n	801564e <tcp_new_port+0xa>
          return 0;
 801569c:	2300      	movs	r3, #0
 801569e:	e00d      	b.n	80156bc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80156a0:	683b      	ldr	r3, [r7, #0]
 80156a2:	68db      	ldr	r3, [r3, #12]
 80156a4:	603b      	str	r3, [r7, #0]
 80156a6:	683b      	ldr	r3, [r7, #0]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d1ea      	bne.n	8015682 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80156ac:	79fb      	ldrb	r3, [r7, #7]
 80156ae:	3301      	adds	r3, #1
 80156b0:	71fb      	strb	r3, [r7, #7]
 80156b2:	79fb      	ldrb	r3, [r7, #7]
 80156b4:	2b03      	cmp	r3, #3
 80156b6:	d9dd      	bls.n	8015674 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80156b8:	4b03      	ldr	r3, [pc, #12]	; (80156c8 <tcp_new_port+0x84>)
 80156ba:	881b      	ldrh	r3, [r3, #0]
}
 80156bc:	4618      	mov	r0, r3
 80156be:	370c      	adds	r7, #12
 80156c0:	46bd      	mov	sp, r7
 80156c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c6:	4770      	bx	lr
 80156c8:	2000013c 	.word	0x2000013c
 80156cc:	08027608 	.word	0x08027608

080156d0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80156d0:	b5b0      	push	{r4, r5, r7, lr}
 80156d2:	b090      	sub	sp, #64	; 0x40
 80156d4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80156d6:	2300      	movs	r3, #0
 80156d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80156dc:	4b94      	ldr	r3, [pc, #592]	; (8015930 <tcp_slowtmr+0x260>)
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	3301      	adds	r3, #1
 80156e2:	4a93      	ldr	r2, [pc, #588]	; (8015930 <tcp_slowtmr+0x260>)
 80156e4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80156e6:	4b93      	ldr	r3, [pc, #588]	; (8015934 <tcp_slowtmr+0x264>)
 80156e8:	781b      	ldrb	r3, [r3, #0]
 80156ea:	3301      	adds	r3, #1
 80156ec:	b2da      	uxtb	r2, r3
 80156ee:	4b91      	ldr	r3, [pc, #580]	; (8015934 <tcp_slowtmr+0x264>)
 80156f0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80156f2:	2300      	movs	r3, #0
 80156f4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80156f6:	4b90      	ldr	r3, [pc, #576]	; (8015938 <tcp_slowtmr+0x268>)
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80156fc:	e29f      	b.n	8015c3e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80156fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015700:	7d1b      	ldrb	r3, [r3, #20]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d106      	bne.n	8015714 <tcp_slowtmr+0x44>
 8015706:	4b8d      	ldr	r3, [pc, #564]	; (801593c <tcp_slowtmr+0x26c>)
 8015708:	f240 42be 	movw	r2, #1214	; 0x4be
 801570c:	498c      	ldr	r1, [pc, #560]	; (8015940 <tcp_slowtmr+0x270>)
 801570e:	488d      	ldr	r0, [pc, #564]	; (8015944 <tcp_slowtmr+0x274>)
 8015710:	f009 ffd6 	bl	801f6c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015716:	7d1b      	ldrb	r3, [r3, #20]
 8015718:	2b01      	cmp	r3, #1
 801571a:	d106      	bne.n	801572a <tcp_slowtmr+0x5a>
 801571c:	4b87      	ldr	r3, [pc, #540]	; (801593c <tcp_slowtmr+0x26c>)
 801571e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8015722:	4989      	ldr	r1, [pc, #548]	; (8015948 <tcp_slowtmr+0x278>)
 8015724:	4887      	ldr	r0, [pc, #540]	; (8015944 <tcp_slowtmr+0x274>)
 8015726:	f009 ffcb 	bl	801f6c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801572a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801572c:	7d1b      	ldrb	r3, [r3, #20]
 801572e:	2b0a      	cmp	r3, #10
 8015730:	d106      	bne.n	8015740 <tcp_slowtmr+0x70>
 8015732:	4b82      	ldr	r3, [pc, #520]	; (801593c <tcp_slowtmr+0x26c>)
 8015734:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8015738:	4984      	ldr	r1, [pc, #528]	; (801594c <tcp_slowtmr+0x27c>)
 801573a:	4882      	ldr	r0, [pc, #520]	; (8015944 <tcp_slowtmr+0x274>)
 801573c:	f009 ffc0 	bl	801f6c0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015742:	7f9a      	ldrb	r2, [r3, #30]
 8015744:	4b7b      	ldr	r3, [pc, #492]	; (8015934 <tcp_slowtmr+0x264>)
 8015746:	781b      	ldrb	r3, [r3, #0]
 8015748:	429a      	cmp	r2, r3
 801574a:	d105      	bne.n	8015758 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801574c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801574e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015752:	68db      	ldr	r3, [r3, #12]
 8015754:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8015756:	e272      	b.n	8015c3e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8015758:	4b76      	ldr	r3, [pc, #472]	; (8015934 <tcp_slowtmr+0x264>)
 801575a:	781a      	ldrb	r2, [r3, #0]
 801575c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801575e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8015760:	2300      	movs	r3, #0
 8015762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8015766:	2300      	movs	r3, #0
 8015768:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801576e:	7d1b      	ldrb	r3, [r3, #20]
 8015770:	2b02      	cmp	r3, #2
 8015772:	d10a      	bne.n	801578a <tcp_slowtmr+0xba>
 8015774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015776:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801577a:	2b05      	cmp	r3, #5
 801577c:	d905      	bls.n	801578a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801577e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015782:	3301      	adds	r3, #1
 8015784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015788:	e11e      	b.n	80159c8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801578a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801578c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015790:	2b0b      	cmp	r3, #11
 8015792:	d905      	bls.n	80157a0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8015794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015798:	3301      	adds	r3, #1
 801579a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801579e:	e113      	b.n	80159c8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80157a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d075      	beq.n	8015896 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80157aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d006      	beq.n	80157c0 <tcp_slowtmr+0xf0>
 80157b2:	4b62      	ldr	r3, [pc, #392]	; (801593c <tcp_slowtmr+0x26c>)
 80157b4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80157b8:	4965      	ldr	r1, [pc, #404]	; (8015950 <tcp_slowtmr+0x280>)
 80157ba:	4862      	ldr	r0, [pc, #392]	; (8015944 <tcp_slowtmr+0x274>)
 80157bc:	f009 ff80 	bl	801f6c0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80157c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d106      	bne.n	80157d6 <tcp_slowtmr+0x106>
 80157c8:	4b5c      	ldr	r3, [pc, #368]	; (801593c <tcp_slowtmr+0x26c>)
 80157ca:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80157ce:	4961      	ldr	r1, [pc, #388]	; (8015954 <tcp_slowtmr+0x284>)
 80157d0:	485c      	ldr	r0, [pc, #368]	; (8015944 <tcp_slowtmr+0x274>)
 80157d2:	f009 ff75 	bl	801f6c0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80157d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157d8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80157dc:	2b0b      	cmp	r3, #11
 80157de:	d905      	bls.n	80157ec <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80157e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80157e4:	3301      	adds	r3, #1
 80157e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80157ea:	e0ed      	b.n	80159c8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80157ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80157f2:	3b01      	subs	r3, #1
 80157f4:	4a58      	ldr	r2, [pc, #352]	; (8015958 <tcp_slowtmr+0x288>)
 80157f6:	5cd3      	ldrb	r3, [r2, r3]
 80157f8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80157fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015800:	7c7a      	ldrb	r2, [r7, #17]
 8015802:	429a      	cmp	r2, r3
 8015804:	d907      	bls.n	8015816 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8015806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015808:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801580c:	3301      	adds	r3, #1
 801580e:	b2da      	uxtb	r2, r3
 8015810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015812:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8015816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015818:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801581c:	7c7a      	ldrb	r2, [r7, #17]
 801581e:	429a      	cmp	r2, r3
 8015820:	f200 80d2 	bhi.w	80159c8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8015824:	2301      	movs	r3, #1
 8015826:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8015828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801582a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801582e:	2b00      	cmp	r3, #0
 8015830:	d108      	bne.n	8015844 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8015832:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015834:	f005 f96a 	bl	801ab0c <tcp_zero_window_probe>
 8015838:	4603      	mov	r3, r0
 801583a:	2b00      	cmp	r3, #0
 801583c:	d014      	beq.n	8015868 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801583e:	2300      	movs	r3, #0
 8015840:	623b      	str	r3, [r7, #32]
 8015842:	e011      	b.n	8015868 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8015844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015846:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801584a:	4619      	mov	r1, r3
 801584c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801584e:	f004 f82f 	bl	80198b0 <tcp_split_unsent_seg>
 8015852:	4603      	mov	r3, r0
 8015854:	2b00      	cmp	r3, #0
 8015856:	d107      	bne.n	8015868 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8015858:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801585a:	f004 faaf 	bl	8019dbc <tcp_output>
 801585e:	4603      	mov	r3, r0
 8015860:	2b00      	cmp	r3, #0
 8015862:	d101      	bne.n	8015868 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8015864:	2300      	movs	r3, #0
 8015866:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8015868:	6a3b      	ldr	r3, [r7, #32]
 801586a:	2b00      	cmp	r3, #0
 801586c:	f000 80ac 	beq.w	80159c8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8015870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015872:	2200      	movs	r2, #0
 8015874:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8015878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801587a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801587e:	2b06      	cmp	r3, #6
 8015880:	f200 80a2 	bhi.w	80159c8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8015884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015886:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801588a:	3301      	adds	r3, #1
 801588c:	b2da      	uxtb	r2, r3
 801588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015890:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8015894:	e098      	b.n	80159c8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8015896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015898:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801589c:	2b00      	cmp	r3, #0
 801589e:	db0f      	blt.n	80158c0 <tcp_slowtmr+0x1f0>
 80158a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80158a6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80158aa:	4293      	cmp	r3, r2
 80158ac:	d008      	beq.n	80158c0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80158ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80158b4:	b29b      	uxth	r3, r3
 80158b6:	3301      	adds	r3, #1
 80158b8:	b29b      	uxth	r3, r3
 80158ba:	b21a      	sxth	r2, r3
 80158bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158be:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80158c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80158c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80158cc:	429a      	cmp	r2, r3
 80158ce:	db7b      	blt.n	80159c8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80158d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80158d2:	f004 fd65 	bl	801a3a0 <tcp_rexmit_rto_prepare>
 80158d6:	4603      	mov	r3, r0
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d007      	beq.n	80158ec <tcp_slowtmr+0x21c>
 80158dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d171      	bne.n	80159c8 <tcp_slowtmr+0x2f8>
 80158e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d06d      	beq.n	80159c8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80158ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ee:	7d1b      	ldrb	r3, [r3, #20]
 80158f0:	2b02      	cmp	r3, #2
 80158f2:	d03a      	beq.n	801596a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80158f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80158fa:	2b0c      	cmp	r3, #12
 80158fc:	bf28      	it	cs
 80158fe:	230c      	movcs	r3, #12
 8015900:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8015902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015904:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015908:	10db      	asrs	r3, r3, #3
 801590a:	b21b      	sxth	r3, r3
 801590c:	461a      	mov	r2, r3
 801590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015910:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015914:	4413      	add	r3, r2
 8015916:	7efa      	ldrb	r2, [r7, #27]
 8015918:	4910      	ldr	r1, [pc, #64]	; (801595c <tcp_slowtmr+0x28c>)
 801591a:	5c8a      	ldrb	r2, [r1, r2]
 801591c:	4093      	lsls	r3, r2
 801591e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015920:	697b      	ldr	r3, [r7, #20]
 8015922:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8015926:	4293      	cmp	r3, r2
 8015928:	dc1a      	bgt.n	8015960 <tcp_slowtmr+0x290>
 801592a:	697b      	ldr	r3, [r7, #20]
 801592c:	b21a      	sxth	r2, r3
 801592e:	e019      	b.n	8015964 <tcp_slowtmr+0x294>
 8015930:	2000b8d8 	.word	0x2000b8d8
 8015934:	20004772 	.word	0x20004772
 8015938:	2000b8d4 	.word	0x2000b8d4
 801593c:	08024654 	.word	0x08024654
 8015940:	08024998 	.word	0x08024998
 8015944:	08024698 	.word	0x08024698
 8015948:	080249c4 	.word	0x080249c4
 801594c:	080249f0 	.word	0x080249f0
 8015950:	08024a20 	.word	0x08024a20
 8015954:	08024a54 	.word	0x08024a54
 8015958:	08027600 	.word	0x08027600
 801595c:	080275f0 	.word	0x080275f0
 8015960:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015966:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801596a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801596c:	2200      	movs	r2, #0
 801596e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015972:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015978:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801597c:	4293      	cmp	r3, r2
 801597e:	bf28      	it	cs
 8015980:	4613      	movcs	r3, r2
 8015982:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015984:	8a7b      	ldrh	r3, [r7, #18]
 8015986:	085b      	lsrs	r3, r3, #1
 8015988:	b29a      	uxth	r2, r3
 801598a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801598c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015992:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801599a:	005b      	lsls	r3, r3, #1
 801599c:	b29b      	uxth	r3, r3
 801599e:	429a      	cmp	r2, r3
 80159a0:	d206      	bcs.n	80159b0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80159a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80159a6:	005b      	lsls	r3, r3, #1
 80159a8:	b29a      	uxth	r2, r3
 80159aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80159b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159b2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80159b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80159ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159bc:	2200      	movs	r2, #0
 80159be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80159c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80159c4:	f004 fd5c 	bl	801a480 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80159c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ca:	7d1b      	ldrb	r3, [r3, #20]
 80159cc:	2b06      	cmp	r3, #6
 80159ce:	d111      	bne.n	80159f4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80159d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159d2:	8b5b      	ldrh	r3, [r3, #26]
 80159d4:	f003 0310 	and.w	r3, r3, #16
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d00b      	beq.n	80159f4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80159dc:	4b9d      	ldr	r3, [pc, #628]	; (8015c54 <tcp_slowtmr+0x584>)
 80159de:	681a      	ldr	r2, [r3, #0]
 80159e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159e2:	6a1b      	ldr	r3, [r3, #32]
 80159e4:	1ad3      	subs	r3, r2, r3
 80159e6:	2b28      	cmp	r3, #40	; 0x28
 80159e8:	d904      	bls.n	80159f4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80159ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159ee:	3301      	adds	r3, #1
 80159f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80159f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159f6:	7a5b      	ldrb	r3, [r3, #9]
 80159f8:	f003 0308 	and.w	r3, r3, #8
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d04c      	beq.n	8015a9a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8015a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a02:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015a04:	2b04      	cmp	r3, #4
 8015a06:	d003      	beq.n	8015a10 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8015a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a0a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8015a0c:	2b07      	cmp	r3, #7
 8015a0e:	d144      	bne.n	8015a9a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015a10:	4b90      	ldr	r3, [pc, #576]	; (8015c54 <tcp_slowtmr+0x584>)
 8015a12:	681a      	ldr	r2, [r3, #0]
 8015a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a16:	6a1b      	ldr	r3, [r3, #32]
 8015a18:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8015a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015a20:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8015a24:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8015a28:	498b      	ldr	r1, [pc, #556]	; (8015c58 <tcp_slowtmr+0x588>)
 8015a2a:	fba1 1303 	umull	r1, r3, r1, r3
 8015a2e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015a30:	429a      	cmp	r2, r3
 8015a32:	d90a      	bls.n	8015a4a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8015a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a38:	3301      	adds	r3, #1
 8015a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8015a3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015a42:	3301      	adds	r3, #1
 8015a44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015a48:	e027      	b.n	8015a9a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015a4a:	4b82      	ldr	r3, [pc, #520]	; (8015c54 <tcp_slowtmr+0x584>)
 8015a4c:	681a      	ldr	r2, [r3, #0]
 8015a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a50:	6a1b      	ldr	r3, [r3, #32]
 8015a52:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8015a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a56:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8015a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a5c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8015a60:	4618      	mov	r0, r3
 8015a62:	4b7e      	ldr	r3, [pc, #504]	; (8015c5c <tcp_slowtmr+0x58c>)
 8015a64:	fb03 f300 	mul.w	r3, r3, r0
 8015a68:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8015a6a:	497b      	ldr	r1, [pc, #492]	; (8015c58 <tcp_slowtmr+0x588>)
 8015a6c:	fba1 1303 	umull	r1, r3, r1, r3
 8015a70:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015a72:	429a      	cmp	r2, r3
 8015a74:	d911      	bls.n	8015a9a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8015a76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a78:	f005 f808 	bl	801aa8c <tcp_keepalive>
 8015a7c:	4603      	mov	r3, r0
 8015a7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8015a82:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d107      	bne.n	8015a9a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8015a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a8c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8015a90:	3301      	adds	r3, #1
 8015a92:	b2da      	uxtb	r2, r3
 8015a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a96:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8015a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d011      	beq.n	8015ac6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8015aa2:	4b6c      	ldr	r3, [pc, #432]	; (8015c54 <tcp_slowtmr+0x584>)
 8015aa4:	681a      	ldr	r2, [r3, #0]
 8015aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aa8:	6a1b      	ldr	r3, [r3, #32]
 8015aaa:	1ad2      	subs	r2, r2, r3
 8015aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aae:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8015ab2:	4619      	mov	r1, r3
 8015ab4:	460b      	mov	r3, r1
 8015ab6:	005b      	lsls	r3, r3, #1
 8015ab8:	440b      	add	r3, r1
 8015aba:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8015abc:	429a      	cmp	r2, r3
 8015abe:	d302      	bcc.n	8015ac6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8015ac0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015ac2:	f000 fec7 	bl	8016854 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8015ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ac8:	7d1b      	ldrb	r3, [r3, #20]
 8015aca:	2b03      	cmp	r3, #3
 8015acc:	d10b      	bne.n	8015ae6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015ace:	4b61      	ldr	r3, [pc, #388]	; (8015c54 <tcp_slowtmr+0x584>)
 8015ad0:	681a      	ldr	r2, [r3, #0]
 8015ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ad4:	6a1b      	ldr	r3, [r3, #32]
 8015ad6:	1ad3      	subs	r3, r2, r3
 8015ad8:	2b28      	cmp	r3, #40	; 0x28
 8015ada:	d904      	bls.n	8015ae6 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8015adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ae0:	3301      	adds	r3, #1
 8015ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8015ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ae8:	7d1b      	ldrb	r3, [r3, #20]
 8015aea:	2b09      	cmp	r3, #9
 8015aec:	d10b      	bne.n	8015b06 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015aee:	4b59      	ldr	r3, [pc, #356]	; (8015c54 <tcp_slowtmr+0x584>)
 8015af0:	681a      	ldr	r2, [r3, #0]
 8015af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015af4:	6a1b      	ldr	r3, [r3, #32]
 8015af6:	1ad3      	subs	r3, r2, r3
 8015af8:	2bf0      	cmp	r3, #240	; 0xf0
 8015afa:	d904      	bls.n	8015b06 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8015afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b00:	3301      	adds	r3, #1
 8015b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015b06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d060      	beq.n	8015bd0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8015b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015b14:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8015b16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015b18:	f000 fce8 	bl	80164ec <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8015b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d010      	beq.n	8015b44 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8015b22:	4b4f      	ldr	r3, [pc, #316]	; (8015c60 <tcp_slowtmr+0x590>)
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015b28:	429a      	cmp	r2, r3
 8015b2a:	d106      	bne.n	8015b3a <tcp_slowtmr+0x46a>
 8015b2c:	4b4d      	ldr	r3, [pc, #308]	; (8015c64 <tcp_slowtmr+0x594>)
 8015b2e:	f240 526d 	movw	r2, #1389	; 0x56d
 8015b32:	494d      	ldr	r1, [pc, #308]	; (8015c68 <tcp_slowtmr+0x598>)
 8015b34:	484d      	ldr	r0, [pc, #308]	; (8015c6c <tcp_slowtmr+0x59c>)
 8015b36:	f009 fdc3 	bl	801f6c0 <iprintf>
        prev->next = pcb->next;
 8015b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b3c:	68da      	ldr	r2, [r3, #12]
 8015b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b40:	60da      	str	r2, [r3, #12]
 8015b42:	e00f      	b.n	8015b64 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8015b44:	4b46      	ldr	r3, [pc, #280]	; (8015c60 <tcp_slowtmr+0x590>)
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015b4a:	429a      	cmp	r2, r3
 8015b4c:	d006      	beq.n	8015b5c <tcp_slowtmr+0x48c>
 8015b4e:	4b45      	ldr	r3, [pc, #276]	; (8015c64 <tcp_slowtmr+0x594>)
 8015b50:	f240 5271 	movw	r2, #1393	; 0x571
 8015b54:	4946      	ldr	r1, [pc, #280]	; (8015c70 <tcp_slowtmr+0x5a0>)
 8015b56:	4845      	ldr	r0, [pc, #276]	; (8015c6c <tcp_slowtmr+0x59c>)
 8015b58:	f009 fdb2 	bl	801f6c0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8015b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b5e:	68db      	ldr	r3, [r3, #12]
 8015b60:	4a3f      	ldr	r2, [pc, #252]	; (8015c60 <tcp_slowtmr+0x590>)
 8015b62:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8015b64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d013      	beq.n	8015b94 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b6e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b72:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015b74:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8015b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b78:	3304      	adds	r3, #4
 8015b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015b7c:	8ad2      	ldrh	r2, [r2, #22]
 8015b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015b80:	8b09      	ldrh	r1, [r1, #24]
 8015b82:	9102      	str	r1, [sp, #8]
 8015b84:	9201      	str	r2, [sp, #4]
 8015b86:	9300      	str	r3, [sp, #0]
 8015b88:	462b      	mov	r3, r5
 8015b8a:	4622      	mov	r2, r4
 8015b8c:	4601      	mov	r1, r0
 8015b8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015b90:	f004 fec8 	bl	801a924 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8015b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b96:	691b      	ldr	r3, [r3, #16]
 8015b98:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8015b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b9c:	7d1b      	ldrb	r3, [r3, #20]
 8015b9e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8015ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ba2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8015ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ba6:	68db      	ldr	r3, [r3, #12]
 8015ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8015baa:	6838      	ldr	r0, [r7, #0]
 8015bac:	f7fe ffdc 	bl	8014b68 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8015bb0:	4b30      	ldr	r3, [pc, #192]	; (8015c74 <tcp_slowtmr+0x5a4>)
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d004      	beq.n	8015bc6 <tcp_slowtmr+0x4f6>
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	f06f 010c 	mvn.w	r1, #12
 8015bc2:	68b8      	ldr	r0, [r7, #8]
 8015bc4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8015bc6:	4b2b      	ldr	r3, [pc, #172]	; (8015c74 <tcp_slowtmr+0x5a4>)
 8015bc8:	781b      	ldrb	r3, [r3, #0]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d037      	beq.n	8015c3e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8015bce:	e590      	b.n	80156f2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8015bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bd2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bd6:	68db      	ldr	r3, [r3, #12]
 8015bd8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8015bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bdc:	7f1b      	ldrb	r3, [r3, #28]
 8015bde:	3301      	adds	r3, #1
 8015be0:	b2da      	uxtb	r2, r3
 8015be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015be4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8015be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015be8:	7f1a      	ldrb	r2, [r3, #28]
 8015bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bec:	7f5b      	ldrb	r3, [r3, #29]
 8015bee:	429a      	cmp	r2, r3
 8015bf0:	d325      	bcc.n	8015c3e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8015bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8015bf8:	4b1e      	ldr	r3, [pc, #120]	; (8015c74 <tcp_slowtmr+0x5a4>)
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8015bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d00b      	beq.n	8015c20 <tcp_slowtmr+0x550>
 8015c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015c10:	6912      	ldr	r2, [r2, #16]
 8015c12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015c14:	4610      	mov	r0, r2
 8015c16:	4798      	blx	r3
 8015c18:	4603      	mov	r3, r0
 8015c1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8015c1e:	e002      	b.n	8015c26 <tcp_slowtmr+0x556>
 8015c20:	2300      	movs	r3, #0
 8015c22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8015c26:	4b13      	ldr	r3, [pc, #76]	; (8015c74 <tcp_slowtmr+0x5a4>)
 8015c28:	781b      	ldrb	r3, [r3, #0]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d000      	beq.n	8015c30 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8015c2e:	e560      	b.n	80156f2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015c30:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d102      	bne.n	8015c3e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8015c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015c3a:	f004 f8bf 	bl	8019dbc <tcp_output>
  while (pcb != NULL) {
 8015c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	f47f ad5c 	bne.w	80156fe <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8015c46:	2300      	movs	r3, #0
 8015c48:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8015c4a:	4b0b      	ldr	r3, [pc, #44]	; (8015c78 <tcp_slowtmr+0x5a8>)
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8015c50:	e067      	b.n	8015d22 <tcp_slowtmr+0x652>
 8015c52:	bf00      	nop
 8015c54:	2000b8d8 	.word	0x2000b8d8
 8015c58:	10624dd3 	.word	0x10624dd3
 8015c5c:	000124f8 	.word	0x000124f8
 8015c60:	2000b8d4 	.word	0x2000b8d4
 8015c64:	08024654 	.word	0x08024654
 8015c68:	08024a8c 	.word	0x08024a8c
 8015c6c:	08024698 	.word	0x08024698
 8015c70:	08024ab8 	.word	0x08024ab8
 8015c74:	2000b8d0 	.word	0x2000b8d0
 8015c78:	2000b8e4 	.word	0x2000b8e4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c7e:	7d1b      	ldrb	r3, [r3, #20]
 8015c80:	2b0a      	cmp	r3, #10
 8015c82:	d006      	beq.n	8015c92 <tcp_slowtmr+0x5c2>
 8015c84:	4b2b      	ldr	r3, [pc, #172]	; (8015d34 <tcp_slowtmr+0x664>)
 8015c86:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8015c8a:	492b      	ldr	r1, [pc, #172]	; (8015d38 <tcp_slowtmr+0x668>)
 8015c8c:	482b      	ldr	r0, [pc, #172]	; (8015d3c <tcp_slowtmr+0x66c>)
 8015c8e:	f009 fd17 	bl	801f6c0 <iprintf>
    pcb_remove = 0;
 8015c92:	2300      	movs	r3, #0
 8015c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015c98:	4b29      	ldr	r3, [pc, #164]	; (8015d40 <tcp_slowtmr+0x670>)
 8015c9a:	681a      	ldr	r2, [r3, #0]
 8015c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c9e:	6a1b      	ldr	r3, [r3, #32]
 8015ca0:	1ad3      	subs	r3, r2, r3
 8015ca2:	2bf0      	cmp	r3, #240	; 0xf0
 8015ca4:	d904      	bls.n	8015cb0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8015ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015caa:	3301      	adds	r3, #1
 8015cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d02f      	beq.n	8015d18 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8015cb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015cba:	f000 fc17 	bl	80164ec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8015cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d010      	beq.n	8015ce6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015cc4:	4b1f      	ldr	r3, [pc, #124]	; (8015d44 <tcp_slowtmr+0x674>)
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015cca:	429a      	cmp	r2, r3
 8015ccc:	d106      	bne.n	8015cdc <tcp_slowtmr+0x60c>
 8015cce:	4b19      	ldr	r3, [pc, #100]	; (8015d34 <tcp_slowtmr+0x664>)
 8015cd0:	f240 52af 	movw	r2, #1455	; 0x5af
 8015cd4:	491c      	ldr	r1, [pc, #112]	; (8015d48 <tcp_slowtmr+0x678>)
 8015cd6:	4819      	ldr	r0, [pc, #100]	; (8015d3c <tcp_slowtmr+0x66c>)
 8015cd8:	f009 fcf2 	bl	801f6c0 <iprintf>
        prev->next = pcb->next;
 8015cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cde:	68da      	ldr	r2, [r3, #12]
 8015ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce2:	60da      	str	r2, [r3, #12]
 8015ce4:	e00f      	b.n	8015d06 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8015ce6:	4b17      	ldr	r3, [pc, #92]	; (8015d44 <tcp_slowtmr+0x674>)
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015cec:	429a      	cmp	r2, r3
 8015cee:	d006      	beq.n	8015cfe <tcp_slowtmr+0x62e>
 8015cf0:	4b10      	ldr	r3, [pc, #64]	; (8015d34 <tcp_slowtmr+0x664>)
 8015cf2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8015cf6:	4915      	ldr	r1, [pc, #84]	; (8015d4c <tcp_slowtmr+0x67c>)
 8015cf8:	4810      	ldr	r0, [pc, #64]	; (8015d3c <tcp_slowtmr+0x66c>)
 8015cfa:	f009 fce1 	bl	801f6c0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8015cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d00:	68db      	ldr	r3, [r3, #12]
 8015d02:	4a10      	ldr	r2, [pc, #64]	; (8015d44 <tcp_slowtmr+0x674>)
 8015d04:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8015d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d08:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8015d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d0c:	68db      	ldr	r3, [r3, #12]
 8015d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8015d10:	69f8      	ldr	r0, [r7, #28]
 8015d12:	f7fe ff29 	bl	8014b68 <tcp_free>
 8015d16:	e004      	b.n	8015d22 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8015d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d1a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d1e:	68db      	ldr	r3, [r3, #12]
 8015d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8015d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d1a9      	bne.n	8015c7c <tcp_slowtmr+0x5ac>
    }
  }
}
 8015d28:	bf00      	nop
 8015d2a:	bf00      	nop
 8015d2c:	3730      	adds	r7, #48	; 0x30
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bdb0      	pop	{r4, r5, r7, pc}
 8015d32:	bf00      	nop
 8015d34:	08024654 	.word	0x08024654
 8015d38:	08024ae4 	.word	0x08024ae4
 8015d3c:	08024698 	.word	0x08024698
 8015d40:	2000b8d8 	.word	0x2000b8d8
 8015d44:	2000b8e4 	.word	0x2000b8e4
 8015d48:	08024b14 	.word	0x08024b14
 8015d4c:	08024b3c 	.word	0x08024b3c

08015d50 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8015d50:	b580      	push	{r7, lr}
 8015d52:	b082      	sub	sp, #8
 8015d54:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8015d56:	4b2d      	ldr	r3, [pc, #180]	; (8015e0c <tcp_fasttmr+0xbc>)
 8015d58:	781b      	ldrb	r3, [r3, #0]
 8015d5a:	3301      	adds	r3, #1
 8015d5c:	b2da      	uxtb	r2, r3
 8015d5e:	4b2b      	ldr	r3, [pc, #172]	; (8015e0c <tcp_fasttmr+0xbc>)
 8015d60:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8015d62:	4b2b      	ldr	r3, [pc, #172]	; (8015e10 <tcp_fasttmr+0xc0>)
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015d68:	e048      	b.n	8015dfc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	7f9a      	ldrb	r2, [r3, #30]
 8015d6e:	4b27      	ldr	r3, [pc, #156]	; (8015e0c <tcp_fasttmr+0xbc>)
 8015d70:	781b      	ldrb	r3, [r3, #0]
 8015d72:	429a      	cmp	r2, r3
 8015d74:	d03f      	beq.n	8015df6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8015d76:	4b25      	ldr	r3, [pc, #148]	; (8015e0c <tcp_fasttmr+0xbc>)
 8015d78:	781a      	ldrb	r2, [r3, #0]
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	8b5b      	ldrh	r3, [r3, #26]
 8015d82:	f003 0301 	and.w	r3, r3, #1
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d010      	beq.n	8015dac <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	8b5b      	ldrh	r3, [r3, #26]
 8015d8e:	f043 0302 	orr.w	r3, r3, #2
 8015d92:	b29a      	uxth	r2, r3
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8015d98:	6878      	ldr	r0, [r7, #4]
 8015d9a:	f004 f80f 	bl	8019dbc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	8b5b      	ldrh	r3, [r3, #26]
 8015da2:	f023 0303 	bic.w	r3, r3, #3
 8015da6:	b29a      	uxth	r2, r3
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	8b5b      	ldrh	r3, [r3, #26]
 8015db0:	f003 0308 	and.w	r3, r3, #8
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d009      	beq.n	8015dcc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	8b5b      	ldrh	r3, [r3, #26]
 8015dbc:	f023 0308 	bic.w	r3, r3, #8
 8015dc0:	b29a      	uxth	r2, r3
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8015dc6:	6878      	ldr	r0, [r7, #4]
 8015dc8:	f7ff f862 	bl	8014e90 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	68db      	ldr	r3, [r3, #12]
 8015dd0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d00a      	beq.n	8015df0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8015dda:	4b0e      	ldr	r3, [pc, #56]	; (8015e14 <tcp_fasttmr+0xc4>)
 8015ddc:	2200      	movs	r2, #0
 8015dde:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8015de0:	6878      	ldr	r0, [r7, #4]
 8015de2:	f000 f819 	bl	8015e18 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8015de6:	4b0b      	ldr	r3, [pc, #44]	; (8015e14 <tcp_fasttmr+0xc4>)
 8015de8:	781b      	ldrb	r3, [r3, #0]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d000      	beq.n	8015df0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8015dee:	e7b8      	b.n	8015d62 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8015df0:	683b      	ldr	r3, [r7, #0]
 8015df2:	607b      	str	r3, [r7, #4]
 8015df4:	e002      	b.n	8015dfc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	68db      	ldr	r3, [r3, #12]
 8015dfa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d1b3      	bne.n	8015d6a <tcp_fasttmr+0x1a>
    }
  }
}
 8015e02:	bf00      	nop
 8015e04:	bf00      	nop
 8015e06:	3708      	adds	r7, #8
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	bd80      	pop	{r7, pc}
 8015e0c:	20004772 	.word	0x20004772
 8015e10:	2000b8d4 	.word	0x2000b8d4
 8015e14:	2000b8d0 	.word	0x2000b8d0

08015e18 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8015e18:	b590      	push	{r4, r7, lr}
 8015e1a:	b085      	sub	sp, #20
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d109      	bne.n	8015e3a <tcp_process_refused_data+0x22>
 8015e26:	4b37      	ldr	r3, [pc, #220]	; (8015f04 <tcp_process_refused_data+0xec>)
 8015e28:	f240 6209 	movw	r2, #1545	; 0x609
 8015e2c:	4936      	ldr	r1, [pc, #216]	; (8015f08 <tcp_process_refused_data+0xf0>)
 8015e2e:	4837      	ldr	r0, [pc, #220]	; (8015f0c <tcp_process_refused_data+0xf4>)
 8015e30:	f009 fc46 	bl	801f6c0 <iprintf>
 8015e34:	f06f 030f 	mvn.w	r3, #15
 8015e38:	e060      	b.n	8015efc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015e3e:	7b5b      	ldrb	r3, [r3, #13]
 8015e40:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015e46:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d00b      	beq.n	8015e70 <tcp_process_refused_data+0x58>
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	6918      	ldr	r0, [r3, #16]
 8015e62:	2300      	movs	r3, #0
 8015e64:	68ba      	ldr	r2, [r7, #8]
 8015e66:	6879      	ldr	r1, [r7, #4]
 8015e68:	47a0      	blx	r4
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	73fb      	strb	r3, [r7, #15]
 8015e6e:	e007      	b.n	8015e80 <tcp_process_refused_data+0x68>
 8015e70:	2300      	movs	r3, #0
 8015e72:	68ba      	ldr	r2, [r7, #8]
 8015e74:	6879      	ldr	r1, [r7, #4]
 8015e76:	2000      	movs	r0, #0
 8015e78:	f000 f8c2 	bl	8016000 <tcp_recv_null>
 8015e7c:	4603      	mov	r3, r0
 8015e7e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8015e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d12a      	bne.n	8015ede <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8015e88:	7bbb      	ldrb	r3, [r7, #14]
 8015e8a:	f003 0320 	and.w	r3, r3, #32
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d033      	beq.n	8015efa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e96:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015e9a:	d005      	beq.n	8015ea8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ea0:	3301      	adds	r3, #1
 8015ea2:	b29a      	uxth	r2, r3
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d00b      	beq.n	8015eca <tcp_process_refused_data+0xb2>
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	6918      	ldr	r0, [r3, #16]
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	2200      	movs	r2, #0
 8015ec0:	6879      	ldr	r1, [r7, #4]
 8015ec2:	47a0      	blx	r4
 8015ec4:	4603      	mov	r3, r0
 8015ec6:	73fb      	strb	r3, [r7, #15]
 8015ec8:	e001      	b.n	8015ece <tcp_process_refused_data+0xb6>
 8015eca:	2300      	movs	r3, #0
 8015ecc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8015ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ed2:	f113 0f0d 	cmn.w	r3, #13
 8015ed6:	d110      	bne.n	8015efa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8015ed8:	f06f 030c 	mvn.w	r3, #12
 8015edc:	e00e      	b.n	8015efc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8015ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ee2:	f113 0f0d 	cmn.w	r3, #13
 8015ee6:	d102      	bne.n	8015eee <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8015ee8:	f06f 030c 	mvn.w	r3, #12
 8015eec:	e006      	b.n	8015efc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	68ba      	ldr	r2, [r7, #8]
 8015ef2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8015ef4:	f06f 0304 	mvn.w	r3, #4
 8015ef8:	e000      	b.n	8015efc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8015efa:	2300      	movs	r3, #0
}
 8015efc:	4618      	mov	r0, r3
 8015efe:	3714      	adds	r7, #20
 8015f00:	46bd      	mov	sp, r7
 8015f02:	bd90      	pop	{r4, r7, pc}
 8015f04:	08024654 	.word	0x08024654
 8015f08:	08024b64 	.word	0x08024b64
 8015f0c:	08024698 	.word	0x08024698

08015f10 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015f10:	b580      	push	{r7, lr}
 8015f12:	b084      	sub	sp, #16
 8015f14:	af00      	add	r7, sp, #0
 8015f16:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015f18:	e007      	b.n	8015f2a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015f20:	6878      	ldr	r0, [r7, #4]
 8015f22:	f000 f80a 	bl	8015f3a <tcp_seg_free>
    seg = next;
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d1f4      	bne.n	8015f1a <tcp_segs_free+0xa>
  }
}
 8015f30:	bf00      	nop
 8015f32:	bf00      	nop
 8015f34:	3710      	adds	r7, #16
 8015f36:	46bd      	mov	sp, r7
 8015f38:	bd80      	pop	{r7, pc}

08015f3a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8015f3a:	b580      	push	{r7, lr}
 8015f3c:	b082      	sub	sp, #8
 8015f3e:	af00      	add	r7, sp, #0
 8015f40:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d00c      	beq.n	8015f62 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	685b      	ldr	r3, [r3, #4]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d004      	beq.n	8015f5a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	685b      	ldr	r3, [r3, #4]
 8015f54:	4618      	mov	r0, r3
 8015f56:	f7fe fb4b 	bl	80145f0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8015f5a:	6879      	ldr	r1, [r7, #4]
 8015f5c:	2003      	movs	r0, #3
 8015f5e:	f7fd fcc9 	bl	80138f4 <memp_free>
  }
}
 8015f62:	bf00      	nop
 8015f64:	3708      	adds	r7, #8
 8015f66:	46bd      	mov	sp, r7
 8015f68:	bd80      	pop	{r7, pc}
	...

08015f6c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b082      	sub	sp, #8
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	6078      	str	r0, [r7, #4]
 8015f74:	460b      	mov	r3, r1
 8015f76:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d107      	bne.n	8015f8e <tcp_setprio+0x22>
 8015f7e:	4b07      	ldr	r3, [pc, #28]	; (8015f9c <tcp_setprio+0x30>)
 8015f80:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8015f84:	4906      	ldr	r1, [pc, #24]	; (8015fa0 <tcp_setprio+0x34>)
 8015f86:	4807      	ldr	r0, [pc, #28]	; (8015fa4 <tcp_setprio+0x38>)
 8015f88:	f009 fb9a 	bl	801f6c0 <iprintf>
 8015f8c:	e002      	b.n	8015f94 <tcp_setprio+0x28>

  pcb->prio = prio;
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	78fa      	ldrb	r2, [r7, #3]
 8015f92:	755a      	strb	r2, [r3, #21]
}
 8015f94:	3708      	adds	r7, #8
 8015f96:	46bd      	mov	sp, r7
 8015f98:	bd80      	pop	{r7, pc}
 8015f9a:	bf00      	nop
 8015f9c:	08024654 	.word	0x08024654
 8015fa0:	08024b8c 	.word	0x08024b8c
 8015fa4:	08024698 	.word	0x08024698

08015fa8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b084      	sub	sp, #16
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d106      	bne.n	8015fc4 <tcp_seg_copy+0x1c>
 8015fb6:	4b0f      	ldr	r3, [pc, #60]	; (8015ff4 <tcp_seg_copy+0x4c>)
 8015fb8:	f240 6282 	movw	r2, #1666	; 0x682
 8015fbc:	490e      	ldr	r1, [pc, #56]	; (8015ff8 <tcp_seg_copy+0x50>)
 8015fbe:	480f      	ldr	r0, [pc, #60]	; (8015ffc <tcp_seg_copy+0x54>)
 8015fc0:	f009 fb7e 	bl	801f6c0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015fc4:	2003      	movs	r0, #3
 8015fc6:	f7fd fc43 	bl	8013850 <memp_malloc>
 8015fca:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d101      	bne.n	8015fd6 <tcp_seg_copy+0x2e>
    return NULL;
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	e00a      	b.n	8015fec <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015fd6:	2210      	movs	r2, #16
 8015fd8:	6879      	ldr	r1, [r7, #4]
 8015fda:	68f8      	ldr	r0, [r7, #12]
 8015fdc:	f009 f8c2 	bl	801f164 <memcpy>
  pbuf_ref(cseg->p);
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	685b      	ldr	r3, [r3, #4]
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	f7fe fba9 	bl	801473c <pbuf_ref>
  return cseg;
 8015fea:	68fb      	ldr	r3, [r7, #12]
}
 8015fec:	4618      	mov	r0, r3
 8015fee:	3710      	adds	r7, #16
 8015ff0:	46bd      	mov	sp, r7
 8015ff2:	bd80      	pop	{r7, pc}
 8015ff4:	08024654 	.word	0x08024654
 8015ff8:	08024ba8 	.word	0x08024ba8
 8015ffc:	08024698 	.word	0x08024698

08016000 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016000:	b580      	push	{r7, lr}
 8016002:	b084      	sub	sp, #16
 8016004:	af00      	add	r7, sp, #0
 8016006:	60f8      	str	r0, [r7, #12]
 8016008:	60b9      	str	r1, [r7, #8]
 801600a:	607a      	str	r2, [r7, #4]
 801600c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801600e:	68bb      	ldr	r3, [r7, #8]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d109      	bne.n	8016028 <tcp_recv_null+0x28>
 8016014:	4b12      	ldr	r3, [pc, #72]	; (8016060 <tcp_recv_null+0x60>)
 8016016:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801601a:	4912      	ldr	r1, [pc, #72]	; (8016064 <tcp_recv_null+0x64>)
 801601c:	4812      	ldr	r0, [pc, #72]	; (8016068 <tcp_recv_null+0x68>)
 801601e:	f009 fb4f 	bl	801f6c0 <iprintf>
 8016022:	f06f 030f 	mvn.w	r3, #15
 8016026:	e016      	b.n	8016056 <tcp_recv_null+0x56>

  if (p != NULL) {
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d009      	beq.n	8016042 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	891b      	ldrh	r3, [r3, #8]
 8016032:	4619      	mov	r1, r3
 8016034:	68b8      	ldr	r0, [r7, #8]
 8016036:	f7ff fab5 	bl	80155a4 <tcp_recved>
    pbuf_free(p);
 801603a:	6878      	ldr	r0, [r7, #4]
 801603c:	f7fe fad8 	bl	80145f0 <pbuf_free>
 8016040:	e008      	b.n	8016054 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8016042:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d104      	bne.n	8016054 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801604a:	68b8      	ldr	r0, [r7, #8]
 801604c:	f7fe ff8a 	bl	8014f64 <tcp_close>
 8016050:	4603      	mov	r3, r0
 8016052:	e000      	b.n	8016056 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8016054:	2300      	movs	r3, #0
}
 8016056:	4618      	mov	r0, r3
 8016058:	3710      	adds	r7, #16
 801605a:	46bd      	mov	sp, r7
 801605c:	bd80      	pop	{r7, pc}
 801605e:	bf00      	nop
 8016060:	08024654 	.word	0x08024654
 8016064:	08024bc4 	.word	0x08024bc4
 8016068:	08024698 	.word	0x08024698

0801606c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801606c:	b580      	push	{r7, lr}
 801606e:	b086      	sub	sp, #24
 8016070:	af00      	add	r7, sp, #0
 8016072:	4603      	mov	r3, r0
 8016074:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8016076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801607a:	2b00      	cmp	r3, #0
 801607c:	db01      	blt.n	8016082 <tcp_kill_prio+0x16>
 801607e:	79fb      	ldrb	r3, [r7, #7]
 8016080:	e000      	b.n	8016084 <tcp_kill_prio+0x18>
 8016082:	237f      	movs	r3, #127	; 0x7f
 8016084:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8016086:	7afb      	ldrb	r3, [r7, #11]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d034      	beq.n	80160f6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801608c:	7afb      	ldrb	r3, [r7, #11]
 801608e:	3b01      	subs	r3, #1
 8016090:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8016092:	2300      	movs	r3, #0
 8016094:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016096:	2300      	movs	r3, #0
 8016098:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801609a:	4b19      	ldr	r3, [pc, #100]	; (8016100 <tcp_kill_prio+0x94>)
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	617b      	str	r3, [r7, #20]
 80160a0:	e01f      	b.n	80160e2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80160a2:	697b      	ldr	r3, [r7, #20]
 80160a4:	7d5b      	ldrb	r3, [r3, #21]
 80160a6:	7afa      	ldrb	r2, [r7, #11]
 80160a8:	429a      	cmp	r2, r3
 80160aa:	d80c      	bhi.n	80160c6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80160ac:	697b      	ldr	r3, [r7, #20]
 80160ae:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80160b0:	7afa      	ldrb	r2, [r7, #11]
 80160b2:	429a      	cmp	r2, r3
 80160b4:	d112      	bne.n	80160dc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80160b6:	4b13      	ldr	r3, [pc, #76]	; (8016104 <tcp_kill_prio+0x98>)
 80160b8:	681a      	ldr	r2, [r3, #0]
 80160ba:	697b      	ldr	r3, [r7, #20]
 80160bc:	6a1b      	ldr	r3, [r3, #32]
 80160be:	1ad3      	subs	r3, r2, r3
 80160c0:	68fa      	ldr	r2, [r7, #12]
 80160c2:	429a      	cmp	r2, r3
 80160c4:	d80a      	bhi.n	80160dc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80160c6:	4b0f      	ldr	r3, [pc, #60]	; (8016104 <tcp_kill_prio+0x98>)
 80160c8:	681a      	ldr	r2, [r3, #0]
 80160ca:	697b      	ldr	r3, [r7, #20]
 80160cc:	6a1b      	ldr	r3, [r3, #32]
 80160ce:	1ad3      	subs	r3, r2, r3
 80160d0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80160d2:	697b      	ldr	r3, [r7, #20]
 80160d4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80160d6:	697b      	ldr	r3, [r7, #20]
 80160d8:	7d5b      	ldrb	r3, [r3, #21]
 80160da:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80160dc:	697b      	ldr	r3, [r7, #20]
 80160de:	68db      	ldr	r3, [r3, #12]
 80160e0:	617b      	str	r3, [r7, #20]
 80160e2:	697b      	ldr	r3, [r7, #20]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d1dc      	bne.n	80160a2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80160e8:	693b      	ldr	r3, [r7, #16]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d004      	beq.n	80160f8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80160ee:	6938      	ldr	r0, [r7, #16]
 80160f0:	f7ff f87e 	bl	80151f0 <tcp_abort>
 80160f4:	e000      	b.n	80160f8 <tcp_kill_prio+0x8c>
    return;
 80160f6:	bf00      	nop
  }
}
 80160f8:	3718      	adds	r7, #24
 80160fa:	46bd      	mov	sp, r7
 80160fc:	bd80      	pop	{r7, pc}
 80160fe:	bf00      	nop
 8016100:	2000b8d4 	.word	0x2000b8d4
 8016104:	2000b8d8 	.word	0x2000b8d8

08016108 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8016108:	b580      	push	{r7, lr}
 801610a:	b086      	sub	sp, #24
 801610c:	af00      	add	r7, sp, #0
 801610e:	4603      	mov	r3, r0
 8016110:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8016112:	79fb      	ldrb	r3, [r7, #7]
 8016114:	2b08      	cmp	r3, #8
 8016116:	d009      	beq.n	801612c <tcp_kill_state+0x24>
 8016118:	79fb      	ldrb	r3, [r7, #7]
 801611a:	2b09      	cmp	r3, #9
 801611c:	d006      	beq.n	801612c <tcp_kill_state+0x24>
 801611e:	4b1a      	ldr	r3, [pc, #104]	; (8016188 <tcp_kill_state+0x80>)
 8016120:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8016124:	4919      	ldr	r1, [pc, #100]	; (801618c <tcp_kill_state+0x84>)
 8016126:	481a      	ldr	r0, [pc, #104]	; (8016190 <tcp_kill_state+0x88>)
 8016128:	f009 faca 	bl	801f6c0 <iprintf>

  inactivity = 0;
 801612c:	2300      	movs	r3, #0
 801612e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016130:	2300      	movs	r3, #0
 8016132:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016134:	4b17      	ldr	r3, [pc, #92]	; (8016194 <tcp_kill_state+0x8c>)
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	617b      	str	r3, [r7, #20]
 801613a:	e017      	b.n	801616c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801613c:	697b      	ldr	r3, [r7, #20]
 801613e:	7d1b      	ldrb	r3, [r3, #20]
 8016140:	79fa      	ldrb	r2, [r7, #7]
 8016142:	429a      	cmp	r2, r3
 8016144:	d10f      	bne.n	8016166 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016146:	4b14      	ldr	r3, [pc, #80]	; (8016198 <tcp_kill_state+0x90>)
 8016148:	681a      	ldr	r2, [r3, #0]
 801614a:	697b      	ldr	r3, [r7, #20]
 801614c:	6a1b      	ldr	r3, [r3, #32]
 801614e:	1ad3      	subs	r3, r2, r3
 8016150:	68fa      	ldr	r2, [r7, #12]
 8016152:	429a      	cmp	r2, r3
 8016154:	d807      	bhi.n	8016166 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8016156:	4b10      	ldr	r3, [pc, #64]	; (8016198 <tcp_kill_state+0x90>)
 8016158:	681a      	ldr	r2, [r3, #0]
 801615a:	697b      	ldr	r3, [r7, #20]
 801615c:	6a1b      	ldr	r3, [r3, #32]
 801615e:	1ad3      	subs	r3, r2, r3
 8016160:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8016162:	697b      	ldr	r3, [r7, #20]
 8016164:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016166:	697b      	ldr	r3, [r7, #20]
 8016168:	68db      	ldr	r3, [r3, #12]
 801616a:	617b      	str	r3, [r7, #20]
 801616c:	697b      	ldr	r3, [r7, #20]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d1e4      	bne.n	801613c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8016172:	693b      	ldr	r3, [r7, #16]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d003      	beq.n	8016180 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8016178:	2100      	movs	r1, #0
 801617a:	6938      	ldr	r0, [r7, #16]
 801617c:	f7fe ff7a 	bl	8015074 <tcp_abandon>
  }
}
 8016180:	bf00      	nop
 8016182:	3718      	adds	r7, #24
 8016184:	46bd      	mov	sp, r7
 8016186:	bd80      	pop	{r7, pc}
 8016188:	08024654 	.word	0x08024654
 801618c:	08024be0 	.word	0x08024be0
 8016190:	08024698 	.word	0x08024698
 8016194:	2000b8d4 	.word	0x2000b8d4
 8016198:	2000b8d8 	.word	0x2000b8d8

0801619c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b084      	sub	sp, #16
 80161a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80161a2:	2300      	movs	r3, #0
 80161a4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80161a6:	2300      	movs	r3, #0
 80161a8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80161aa:	4b12      	ldr	r3, [pc, #72]	; (80161f4 <tcp_kill_timewait+0x58>)
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	60fb      	str	r3, [r7, #12]
 80161b0:	e012      	b.n	80161d8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80161b2:	4b11      	ldr	r3, [pc, #68]	; (80161f8 <tcp_kill_timewait+0x5c>)
 80161b4:	681a      	ldr	r2, [r3, #0]
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	6a1b      	ldr	r3, [r3, #32]
 80161ba:	1ad3      	subs	r3, r2, r3
 80161bc:	687a      	ldr	r2, [r7, #4]
 80161be:	429a      	cmp	r2, r3
 80161c0:	d807      	bhi.n	80161d2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80161c2:	4b0d      	ldr	r3, [pc, #52]	; (80161f8 <tcp_kill_timewait+0x5c>)
 80161c4:	681a      	ldr	r2, [r3, #0]
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	6a1b      	ldr	r3, [r3, #32]
 80161ca:	1ad3      	subs	r3, r2, r3
 80161cc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	68db      	ldr	r3, [r3, #12]
 80161d6:	60fb      	str	r3, [r7, #12]
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d1e9      	bne.n	80161b2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80161de:	68bb      	ldr	r3, [r7, #8]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d002      	beq.n	80161ea <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80161e4:	68b8      	ldr	r0, [r7, #8]
 80161e6:	f7ff f803 	bl	80151f0 <tcp_abort>
  }
}
 80161ea:	bf00      	nop
 80161ec:	3710      	adds	r7, #16
 80161ee:	46bd      	mov	sp, r7
 80161f0:	bd80      	pop	{r7, pc}
 80161f2:	bf00      	nop
 80161f4:	2000b8e4 	.word	0x2000b8e4
 80161f8:	2000b8d8 	.word	0x2000b8d8

080161fc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80161fc:	b580      	push	{r7, lr}
 80161fe:	b082      	sub	sp, #8
 8016200:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8016202:	4b10      	ldr	r3, [pc, #64]	; (8016244 <tcp_handle_closepend+0x48>)
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016208:	e014      	b.n	8016234 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	68db      	ldr	r3, [r3, #12]
 801620e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	8b5b      	ldrh	r3, [r3, #26]
 8016214:	f003 0308 	and.w	r3, r3, #8
 8016218:	2b00      	cmp	r3, #0
 801621a:	d009      	beq.n	8016230 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	8b5b      	ldrh	r3, [r3, #26]
 8016220:	f023 0308 	bic.w	r3, r3, #8
 8016224:	b29a      	uxth	r2, r3
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801622a:	6878      	ldr	r0, [r7, #4]
 801622c:	f7fe fe30 	bl	8014e90 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8016230:	683b      	ldr	r3, [r7, #0]
 8016232:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d1e7      	bne.n	801620a <tcp_handle_closepend+0xe>
  }
}
 801623a:	bf00      	nop
 801623c:	bf00      	nop
 801623e:	3708      	adds	r7, #8
 8016240:	46bd      	mov	sp, r7
 8016242:	bd80      	pop	{r7, pc}
 8016244:	2000b8d4 	.word	0x2000b8d4

08016248 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8016248:	b580      	push	{r7, lr}
 801624a:	b084      	sub	sp, #16
 801624c:	af00      	add	r7, sp, #0
 801624e:	4603      	mov	r3, r0
 8016250:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016252:	2001      	movs	r0, #1
 8016254:	f7fd fafc 	bl	8013850 <memp_malloc>
 8016258:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d126      	bne.n	80162ae <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8016260:	f7ff ffcc 	bl	80161fc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8016264:	f7ff ff9a 	bl	801619c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016268:	2001      	movs	r0, #1
 801626a:	f7fd faf1 	bl	8013850 <memp_malloc>
 801626e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d11b      	bne.n	80162ae <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8016276:	2009      	movs	r0, #9
 8016278:	f7ff ff46 	bl	8016108 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801627c:	2001      	movs	r0, #1
 801627e:	f7fd fae7 	bl	8013850 <memp_malloc>
 8016282:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d111      	bne.n	80162ae <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801628a:	2008      	movs	r0, #8
 801628c:	f7ff ff3c 	bl	8016108 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016290:	2001      	movs	r0, #1
 8016292:	f7fd fadd 	bl	8013850 <memp_malloc>
 8016296:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d107      	bne.n	80162ae <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801629e:	79fb      	ldrb	r3, [r7, #7]
 80162a0:	4618      	mov	r0, r3
 80162a2:	f7ff fee3 	bl	801606c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80162a6:	2001      	movs	r0, #1
 80162a8:	f7fd fad2 	bl	8013850 <memp_malloc>
 80162ac:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d03f      	beq.n	8016334 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80162b4:	229c      	movs	r2, #156	; 0x9c
 80162b6:	2100      	movs	r1, #0
 80162b8:	68f8      	ldr	r0, [r7, #12]
 80162ba:	f008 ff7b 	bl	801f1b4 <memset>
    pcb->prio = prio;
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	79fa      	ldrb	r2, [r7, #7]
 80162c2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80162ca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80162d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	22ff      	movs	r2, #255	; 0xff
 80162e2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80162ea:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	2206      	movs	r2, #6
 80162f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	2206      	movs	r2, #6
 80162f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016300:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	2201      	movs	r2, #1
 8016306:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801630a:	4b0d      	ldr	r3, [pc, #52]	; (8016340 <tcp_alloc+0xf8>)
 801630c:	681a      	ldr	r2, [r3, #0]
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8016312:	4b0c      	ldr	r3, [pc, #48]	; (8016344 <tcp_alloc+0xfc>)
 8016314:	781a      	ldrb	r2, [r3, #0]
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8016320:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	4a08      	ldr	r2, [pc, #32]	; (8016348 <tcp_alloc+0x100>)
 8016328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	4a07      	ldr	r2, [pc, #28]	; (801634c <tcp_alloc+0x104>)
 8016330:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8016334:	68fb      	ldr	r3, [r7, #12]
}
 8016336:	4618      	mov	r0, r3
 8016338:	3710      	adds	r7, #16
 801633a:	46bd      	mov	sp, r7
 801633c:	bd80      	pop	{r7, pc}
 801633e:	bf00      	nop
 8016340:	2000b8d8 	.word	0x2000b8d8
 8016344:	20004772 	.word	0x20004772
 8016348:	08016001 	.word	0x08016001
 801634c:	006ddd00 	.word	0x006ddd00

08016350 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8016350:	b580      	push	{r7, lr}
 8016352:	b084      	sub	sp, #16
 8016354:	af00      	add	r7, sp, #0
 8016356:	4603      	mov	r3, r0
 8016358:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801635a:	2040      	movs	r0, #64	; 0x40
 801635c:	f7ff ff74 	bl	8016248 <tcp_alloc>
 8016360:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016362:	68fb      	ldr	r3, [r7, #12]
}
 8016364:	4618      	mov	r0, r3
 8016366:	3710      	adds	r7, #16
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}

0801636c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801636c:	b480      	push	{r7}
 801636e:	b083      	sub	sp, #12
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]
 8016374:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d002      	beq.n	8016382 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	683a      	ldr	r2, [r7, #0]
 8016380:	611a      	str	r2, [r3, #16]
  }
}
 8016382:	bf00      	nop
 8016384:	370c      	adds	r7, #12
 8016386:	46bd      	mov	sp, r7
 8016388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801638c:	4770      	bx	lr
	...

08016390 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8016390:	b580      	push	{r7, lr}
 8016392:	b082      	sub	sp, #8
 8016394:	af00      	add	r7, sp, #0
 8016396:	6078      	str	r0, [r7, #4]
 8016398:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d00e      	beq.n	80163be <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	7d1b      	ldrb	r3, [r3, #20]
 80163a4:	2b01      	cmp	r3, #1
 80163a6:	d106      	bne.n	80163b6 <tcp_recv+0x26>
 80163a8:	4b07      	ldr	r3, [pc, #28]	; (80163c8 <tcp_recv+0x38>)
 80163aa:	f240 72df 	movw	r2, #2015	; 0x7df
 80163ae:	4907      	ldr	r1, [pc, #28]	; (80163cc <tcp_recv+0x3c>)
 80163b0:	4807      	ldr	r0, [pc, #28]	; (80163d0 <tcp_recv+0x40>)
 80163b2:	f009 f985 	bl	801f6c0 <iprintf>
    pcb->recv = recv;
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	683a      	ldr	r2, [r7, #0]
 80163ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80163be:	bf00      	nop
 80163c0:	3708      	adds	r7, #8
 80163c2:	46bd      	mov	sp, r7
 80163c4:	bd80      	pop	{r7, pc}
 80163c6:	bf00      	nop
 80163c8:	08024654 	.word	0x08024654
 80163cc:	08024bf0 	.word	0x08024bf0
 80163d0:	08024698 	.word	0x08024698

080163d4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80163d4:	b580      	push	{r7, lr}
 80163d6:	b082      	sub	sp, #8
 80163d8:	af00      	add	r7, sp, #0
 80163da:	6078      	str	r0, [r7, #4]
 80163dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d00e      	beq.n	8016402 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	7d1b      	ldrb	r3, [r3, #20]
 80163e8:	2b01      	cmp	r3, #1
 80163ea:	d106      	bne.n	80163fa <tcp_sent+0x26>
 80163ec:	4b07      	ldr	r3, [pc, #28]	; (801640c <tcp_sent+0x38>)
 80163ee:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80163f2:	4907      	ldr	r1, [pc, #28]	; (8016410 <tcp_sent+0x3c>)
 80163f4:	4807      	ldr	r0, [pc, #28]	; (8016414 <tcp_sent+0x40>)
 80163f6:	f009 f963 	bl	801f6c0 <iprintf>
    pcb->sent = sent;
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	683a      	ldr	r2, [r7, #0]
 80163fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8016402:	bf00      	nop
 8016404:	3708      	adds	r7, #8
 8016406:	46bd      	mov	sp, r7
 8016408:	bd80      	pop	{r7, pc}
 801640a:	bf00      	nop
 801640c:	08024654 	.word	0x08024654
 8016410:	08024c18 	.word	0x08024c18
 8016414:	08024698 	.word	0x08024698

08016418 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b082      	sub	sp, #8
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
 8016420:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d00e      	beq.n	8016446 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	7d1b      	ldrb	r3, [r3, #20]
 801642c:	2b01      	cmp	r3, #1
 801642e:	d106      	bne.n	801643e <tcp_err+0x26>
 8016430:	4b07      	ldr	r3, [pc, #28]	; (8016450 <tcp_err+0x38>)
 8016432:	f640 020d 	movw	r2, #2061	; 0x80d
 8016436:	4907      	ldr	r1, [pc, #28]	; (8016454 <tcp_err+0x3c>)
 8016438:	4807      	ldr	r0, [pc, #28]	; (8016458 <tcp_err+0x40>)
 801643a:	f009 f941 	bl	801f6c0 <iprintf>
    pcb->errf = err;
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	683a      	ldr	r2, [r7, #0]
 8016442:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8016446:	bf00      	nop
 8016448:	3708      	adds	r7, #8
 801644a:	46bd      	mov	sp, r7
 801644c:	bd80      	pop	{r7, pc}
 801644e:	bf00      	nop
 8016450:	08024654 	.word	0x08024654
 8016454:	08024c40 	.word	0x08024c40
 8016458:	08024698 	.word	0x08024698

0801645c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801645c:	b480      	push	{r7}
 801645e:	b085      	sub	sp, #20
 8016460:	af00      	add	r7, sp, #0
 8016462:	6078      	str	r0, [r7, #4]
 8016464:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d008      	beq.n	801647e <tcp_accept+0x22>
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	7d1b      	ldrb	r3, [r3, #20]
 8016470:	2b01      	cmp	r3, #1
 8016472:	d104      	bne.n	801647e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	683a      	ldr	r2, [r7, #0]
 801647c:	619a      	str	r2, [r3, #24]
  }
}
 801647e:	bf00      	nop
 8016480:	3714      	adds	r7, #20
 8016482:	46bd      	mov	sp, r7
 8016484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016488:	4770      	bx	lr
	...

0801648c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801648c:	b580      	push	{r7, lr}
 801648e:	b084      	sub	sp, #16
 8016490:	af00      	add	r7, sp, #0
 8016492:	60f8      	str	r0, [r7, #12]
 8016494:	60b9      	str	r1, [r7, #8]
 8016496:	4613      	mov	r3, r2
 8016498:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	2b00      	cmp	r3, #0
 801649e:	d107      	bne.n	80164b0 <tcp_poll+0x24>
 80164a0:	4b0e      	ldr	r3, [pc, #56]	; (80164dc <tcp_poll+0x50>)
 80164a2:	f640 023d 	movw	r2, #2109	; 0x83d
 80164a6:	490e      	ldr	r1, [pc, #56]	; (80164e0 <tcp_poll+0x54>)
 80164a8:	480e      	ldr	r0, [pc, #56]	; (80164e4 <tcp_poll+0x58>)
 80164aa:	f009 f909 	bl	801f6c0 <iprintf>
 80164ae:	e011      	b.n	80164d4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	7d1b      	ldrb	r3, [r3, #20]
 80164b4:	2b01      	cmp	r3, #1
 80164b6:	d106      	bne.n	80164c6 <tcp_poll+0x3a>
 80164b8:	4b08      	ldr	r3, [pc, #32]	; (80164dc <tcp_poll+0x50>)
 80164ba:	f640 023e 	movw	r2, #2110	; 0x83e
 80164be:	490a      	ldr	r1, [pc, #40]	; (80164e8 <tcp_poll+0x5c>)
 80164c0:	4808      	ldr	r0, [pc, #32]	; (80164e4 <tcp_poll+0x58>)
 80164c2:	f009 f8fd 	bl	801f6c0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	68ba      	ldr	r2, [r7, #8]
 80164ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	79fa      	ldrb	r2, [r7, #7]
 80164d2:	775a      	strb	r2, [r3, #29]
}
 80164d4:	3710      	adds	r7, #16
 80164d6:	46bd      	mov	sp, r7
 80164d8:	bd80      	pop	{r7, pc}
 80164da:	bf00      	nop
 80164dc:	08024654 	.word	0x08024654
 80164e0:	08024c68 	.word	0x08024c68
 80164e4:	08024698 	.word	0x08024698
 80164e8:	08024c80 	.word	0x08024c80

080164ec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	b082      	sub	sp, #8
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d107      	bne.n	801650a <tcp_pcb_purge+0x1e>
 80164fa:	4b21      	ldr	r3, [pc, #132]	; (8016580 <tcp_pcb_purge+0x94>)
 80164fc:	f640 0251 	movw	r2, #2129	; 0x851
 8016500:	4920      	ldr	r1, [pc, #128]	; (8016584 <tcp_pcb_purge+0x98>)
 8016502:	4821      	ldr	r0, [pc, #132]	; (8016588 <tcp_pcb_purge+0x9c>)
 8016504:	f009 f8dc 	bl	801f6c0 <iprintf>
 8016508:	e037      	b.n	801657a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	7d1b      	ldrb	r3, [r3, #20]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d033      	beq.n	801657a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8016516:	2b0a      	cmp	r3, #10
 8016518:	d02f      	beq.n	801657a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801651e:	2b01      	cmp	r3, #1
 8016520:	d02b      	beq.n	801657a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016526:	2b00      	cmp	r3, #0
 8016528:	d007      	beq.n	801653a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801652e:	4618      	mov	r0, r3
 8016530:	f7fe f85e 	bl	80145f0 <pbuf_free>
      pcb->refused_data = NULL;
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	2200      	movs	r2, #0
 8016538:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801653e:	2b00      	cmp	r3, #0
 8016540:	d002      	beq.n	8016548 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8016542:	6878      	ldr	r0, [r7, #4]
 8016544:	f000 f986 	bl	8016854 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801654e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016554:	4618      	mov	r0, r3
 8016556:	f7ff fcdb 	bl	8015f10 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801655e:	4618      	mov	r0, r3
 8016560:	f7ff fcd6 	bl	8015f10 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	2200      	movs	r2, #0
 8016568:	66da      	str	r2, [r3, #108]	; 0x6c
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	2200      	movs	r2, #0
 8016576:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801657a:	3708      	adds	r7, #8
 801657c:	46bd      	mov	sp, r7
 801657e:	bd80      	pop	{r7, pc}
 8016580:	08024654 	.word	0x08024654
 8016584:	08024ca0 	.word	0x08024ca0
 8016588:	08024698 	.word	0x08024698

0801658c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801658c:	b580      	push	{r7, lr}
 801658e:	b084      	sub	sp, #16
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]
 8016594:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8016596:	683b      	ldr	r3, [r7, #0]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d106      	bne.n	80165aa <tcp_pcb_remove+0x1e>
 801659c:	4b3e      	ldr	r3, [pc, #248]	; (8016698 <tcp_pcb_remove+0x10c>)
 801659e:	f640 0283 	movw	r2, #2179	; 0x883
 80165a2:	493e      	ldr	r1, [pc, #248]	; (801669c <tcp_pcb_remove+0x110>)
 80165a4:	483e      	ldr	r0, [pc, #248]	; (80166a0 <tcp_pcb_remove+0x114>)
 80165a6:	f009 f88b 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d106      	bne.n	80165be <tcp_pcb_remove+0x32>
 80165b0:	4b39      	ldr	r3, [pc, #228]	; (8016698 <tcp_pcb_remove+0x10c>)
 80165b2:	f640 0284 	movw	r2, #2180	; 0x884
 80165b6:	493b      	ldr	r1, [pc, #236]	; (80166a4 <tcp_pcb_remove+0x118>)
 80165b8:	4839      	ldr	r0, [pc, #228]	; (80166a0 <tcp_pcb_remove+0x114>)
 80165ba:	f009 f881 	bl	801f6c0 <iprintf>

  TCP_RMV(pcblist, pcb);
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	683a      	ldr	r2, [r7, #0]
 80165c4:	429a      	cmp	r2, r3
 80165c6:	d105      	bne.n	80165d4 <tcp_pcb_remove+0x48>
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	68da      	ldr	r2, [r3, #12]
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	601a      	str	r2, [r3, #0]
 80165d2:	e013      	b.n	80165fc <tcp_pcb_remove+0x70>
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	60fb      	str	r3, [r7, #12]
 80165da:	e00c      	b.n	80165f6 <tcp_pcb_remove+0x6a>
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	68db      	ldr	r3, [r3, #12]
 80165e0:	683a      	ldr	r2, [r7, #0]
 80165e2:	429a      	cmp	r2, r3
 80165e4:	d104      	bne.n	80165f0 <tcp_pcb_remove+0x64>
 80165e6:	683b      	ldr	r3, [r7, #0]
 80165e8:	68da      	ldr	r2, [r3, #12]
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	60da      	str	r2, [r3, #12]
 80165ee:	e005      	b.n	80165fc <tcp_pcb_remove+0x70>
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	68db      	ldr	r3, [r3, #12]
 80165f4:	60fb      	str	r3, [r7, #12]
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d1ef      	bne.n	80165dc <tcp_pcb_remove+0x50>
 80165fc:	683b      	ldr	r3, [r7, #0]
 80165fe:	2200      	movs	r2, #0
 8016600:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8016602:	6838      	ldr	r0, [r7, #0]
 8016604:	f7ff ff72 	bl	80164ec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8016608:	683b      	ldr	r3, [r7, #0]
 801660a:	7d1b      	ldrb	r3, [r3, #20]
 801660c:	2b0a      	cmp	r3, #10
 801660e:	d013      	beq.n	8016638 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8016610:	683b      	ldr	r3, [r7, #0]
 8016612:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8016614:	2b01      	cmp	r3, #1
 8016616:	d00f      	beq.n	8016638 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8016618:	683b      	ldr	r3, [r7, #0]
 801661a:	8b5b      	ldrh	r3, [r3, #26]
 801661c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8016620:	2b00      	cmp	r3, #0
 8016622:	d009      	beq.n	8016638 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8016624:	683b      	ldr	r3, [r7, #0]
 8016626:	8b5b      	ldrh	r3, [r3, #26]
 8016628:	f043 0302 	orr.w	r3, r3, #2
 801662c:	b29a      	uxth	r2, r3
 801662e:	683b      	ldr	r3, [r7, #0]
 8016630:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016632:	6838      	ldr	r0, [r7, #0]
 8016634:	f003 fbc2 	bl	8019dbc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8016638:	683b      	ldr	r3, [r7, #0]
 801663a:	7d1b      	ldrb	r3, [r3, #20]
 801663c:	2b01      	cmp	r3, #1
 801663e:	d020      	beq.n	8016682 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8016640:	683b      	ldr	r3, [r7, #0]
 8016642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016644:	2b00      	cmp	r3, #0
 8016646:	d006      	beq.n	8016656 <tcp_pcb_remove+0xca>
 8016648:	4b13      	ldr	r3, [pc, #76]	; (8016698 <tcp_pcb_remove+0x10c>)
 801664a:	f640 0293 	movw	r2, #2195	; 0x893
 801664e:	4916      	ldr	r1, [pc, #88]	; (80166a8 <tcp_pcb_remove+0x11c>)
 8016650:	4813      	ldr	r0, [pc, #76]	; (80166a0 <tcp_pcb_remove+0x114>)
 8016652:	f009 f835 	bl	801f6c0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8016656:	683b      	ldr	r3, [r7, #0]
 8016658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801665a:	2b00      	cmp	r3, #0
 801665c:	d006      	beq.n	801666c <tcp_pcb_remove+0xe0>
 801665e:	4b0e      	ldr	r3, [pc, #56]	; (8016698 <tcp_pcb_remove+0x10c>)
 8016660:	f640 0294 	movw	r2, #2196	; 0x894
 8016664:	4911      	ldr	r1, [pc, #68]	; (80166ac <tcp_pcb_remove+0x120>)
 8016666:	480e      	ldr	r0, [pc, #56]	; (80166a0 <tcp_pcb_remove+0x114>)
 8016668:	f009 f82a 	bl	801f6c0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801666c:	683b      	ldr	r3, [r7, #0]
 801666e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016670:	2b00      	cmp	r3, #0
 8016672:	d006      	beq.n	8016682 <tcp_pcb_remove+0xf6>
 8016674:	4b08      	ldr	r3, [pc, #32]	; (8016698 <tcp_pcb_remove+0x10c>)
 8016676:	f640 0296 	movw	r2, #2198	; 0x896
 801667a:	490d      	ldr	r1, [pc, #52]	; (80166b0 <tcp_pcb_remove+0x124>)
 801667c:	4808      	ldr	r0, [pc, #32]	; (80166a0 <tcp_pcb_remove+0x114>)
 801667e:	f009 f81f 	bl	801f6c0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8016682:	683b      	ldr	r3, [r7, #0]
 8016684:	2200      	movs	r2, #0
 8016686:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8016688:	683b      	ldr	r3, [r7, #0]
 801668a:	2200      	movs	r2, #0
 801668c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801668e:	bf00      	nop
 8016690:	3710      	adds	r7, #16
 8016692:	46bd      	mov	sp, r7
 8016694:	bd80      	pop	{r7, pc}
 8016696:	bf00      	nop
 8016698:	08024654 	.word	0x08024654
 801669c:	08024cbc 	.word	0x08024cbc
 80166a0:	08024698 	.word	0x08024698
 80166a4:	08024cd8 	.word	0x08024cd8
 80166a8:	08024cf8 	.word	0x08024cf8
 80166ac:	08024d10 	.word	0x08024d10
 80166b0:	08024d2c 	.word	0x08024d2c

080166b4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80166b4:	b580      	push	{r7, lr}
 80166b6:	b082      	sub	sp, #8
 80166b8:	af00      	add	r7, sp, #0
 80166ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d106      	bne.n	80166d0 <tcp_next_iss+0x1c>
 80166c2:	4b0a      	ldr	r3, [pc, #40]	; (80166ec <tcp_next_iss+0x38>)
 80166c4:	f640 02af 	movw	r2, #2223	; 0x8af
 80166c8:	4909      	ldr	r1, [pc, #36]	; (80166f0 <tcp_next_iss+0x3c>)
 80166ca:	480a      	ldr	r0, [pc, #40]	; (80166f4 <tcp_next_iss+0x40>)
 80166cc:	f008 fff8 	bl	801f6c0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80166d0:	4b09      	ldr	r3, [pc, #36]	; (80166f8 <tcp_next_iss+0x44>)
 80166d2:	681a      	ldr	r2, [r3, #0]
 80166d4:	4b09      	ldr	r3, [pc, #36]	; (80166fc <tcp_next_iss+0x48>)
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	4413      	add	r3, r2
 80166da:	4a07      	ldr	r2, [pc, #28]	; (80166f8 <tcp_next_iss+0x44>)
 80166dc:	6013      	str	r3, [r2, #0]
  return iss;
 80166de:	4b06      	ldr	r3, [pc, #24]	; (80166f8 <tcp_next_iss+0x44>)
 80166e0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80166e2:	4618      	mov	r0, r3
 80166e4:	3708      	adds	r7, #8
 80166e6:	46bd      	mov	sp, r7
 80166e8:	bd80      	pop	{r7, pc}
 80166ea:	bf00      	nop
 80166ec:	08024654 	.word	0x08024654
 80166f0:	08024d44 	.word	0x08024d44
 80166f4:	08024698 	.word	0x08024698
 80166f8:	20000140 	.word	0x20000140
 80166fc:	2000b8d8 	.word	0x2000b8d8

08016700 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8016700:	b580      	push	{r7, lr}
 8016702:	b086      	sub	sp, #24
 8016704:	af00      	add	r7, sp, #0
 8016706:	4603      	mov	r3, r0
 8016708:	60b9      	str	r1, [r7, #8]
 801670a:	607a      	str	r2, [r7, #4]
 801670c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d106      	bne.n	8016722 <tcp_eff_send_mss_netif+0x22>
 8016714:	4b14      	ldr	r3, [pc, #80]	; (8016768 <tcp_eff_send_mss_netif+0x68>)
 8016716:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801671a:	4914      	ldr	r1, [pc, #80]	; (801676c <tcp_eff_send_mss_netif+0x6c>)
 801671c:	4814      	ldr	r0, [pc, #80]	; (8016770 <tcp_eff_send_mss_netif+0x70>)
 801671e:	f008 ffcf 	bl	801f6c0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8016722:	68bb      	ldr	r3, [r7, #8]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d101      	bne.n	801672c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8016728:	89fb      	ldrh	r3, [r7, #14]
 801672a:	e019      	b.n	8016760 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801672c:	68bb      	ldr	r3, [r7, #8]
 801672e:	8c1b      	ldrh	r3, [r3, #32]
 8016730:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8016732:	8afb      	ldrh	r3, [r7, #22]
 8016734:	2b00      	cmp	r3, #0
 8016736:	d012      	beq.n	801675e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016738:	2328      	movs	r3, #40	; 0x28
 801673a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801673c:	8afa      	ldrh	r2, [r7, #22]
 801673e:	8abb      	ldrh	r3, [r7, #20]
 8016740:	429a      	cmp	r2, r3
 8016742:	d904      	bls.n	801674e <tcp_eff_send_mss_netif+0x4e>
 8016744:	8afa      	ldrh	r2, [r7, #22]
 8016746:	8abb      	ldrh	r3, [r7, #20]
 8016748:	1ad3      	subs	r3, r2, r3
 801674a:	b29b      	uxth	r3, r3
 801674c:	e000      	b.n	8016750 <tcp_eff_send_mss_netif+0x50>
 801674e:	2300      	movs	r3, #0
 8016750:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016752:	8a7a      	ldrh	r2, [r7, #18]
 8016754:	89fb      	ldrh	r3, [r7, #14]
 8016756:	4293      	cmp	r3, r2
 8016758:	bf28      	it	cs
 801675a:	4613      	movcs	r3, r2
 801675c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801675e:	89fb      	ldrh	r3, [r7, #14]
}
 8016760:	4618      	mov	r0, r3
 8016762:	3718      	adds	r7, #24
 8016764:	46bd      	mov	sp, r7
 8016766:	bd80      	pop	{r7, pc}
 8016768:	08024654 	.word	0x08024654
 801676c:	08024d60 	.word	0x08024d60
 8016770:	08024698 	.word	0x08024698

08016774 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016774:	b580      	push	{r7, lr}
 8016776:	b084      	sub	sp, #16
 8016778:	af00      	add	r7, sp, #0
 801677a:	6078      	str	r0, [r7, #4]
 801677c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801677e:	683b      	ldr	r3, [r7, #0]
 8016780:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	2b00      	cmp	r3, #0
 8016786:	d119      	bne.n	80167bc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8016788:	4b10      	ldr	r3, [pc, #64]	; (80167cc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801678a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801678e:	4910      	ldr	r1, [pc, #64]	; (80167d0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8016790:	4810      	ldr	r0, [pc, #64]	; (80167d4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8016792:	f008 ff95 	bl	801f6c0 <iprintf>

  while (pcb != NULL) {
 8016796:	e011      	b.n	80167bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	681a      	ldr	r2, [r3, #0]
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	429a      	cmp	r2, r3
 80167a2:	d108      	bne.n	80167b6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	68db      	ldr	r3, [r3, #12]
 80167a8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80167aa:	68f8      	ldr	r0, [r7, #12]
 80167ac:	f7fe fd20 	bl	80151f0 <tcp_abort>
      pcb = next;
 80167b0:	68bb      	ldr	r3, [r7, #8]
 80167b2:	60fb      	str	r3, [r7, #12]
 80167b4:	e002      	b.n	80167bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	68db      	ldr	r3, [r3, #12]
 80167ba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d1ea      	bne.n	8016798 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80167c2:	bf00      	nop
 80167c4:	bf00      	nop
 80167c6:	3710      	adds	r7, #16
 80167c8:	46bd      	mov	sp, r7
 80167ca:	bd80      	pop	{r7, pc}
 80167cc:	08024654 	.word	0x08024654
 80167d0:	08024d88 	.word	0x08024d88
 80167d4:	08024698 	.word	0x08024698

080167d8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b084      	sub	sp, #16
 80167dc:	af00      	add	r7, sp, #0
 80167de:	6078      	str	r0, [r7, #4]
 80167e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d02a      	beq.n	801683e <tcp_netif_ip_addr_changed+0x66>
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d026      	beq.n	801683e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80167f0:	4b15      	ldr	r3, [pc, #84]	; (8016848 <tcp_netif_ip_addr_changed+0x70>)
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	4619      	mov	r1, r3
 80167f6:	6878      	ldr	r0, [r7, #4]
 80167f8:	f7ff ffbc 	bl	8016774 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80167fc:	4b13      	ldr	r3, [pc, #76]	; (801684c <tcp_netif_ip_addr_changed+0x74>)
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	4619      	mov	r1, r3
 8016802:	6878      	ldr	r0, [r7, #4]
 8016804:	f7ff ffb6 	bl	8016774 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8016808:	683b      	ldr	r3, [r7, #0]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d017      	beq.n	801683e <tcp_netif_ip_addr_changed+0x66>
 801680e:	683b      	ldr	r3, [r7, #0]
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d013      	beq.n	801683e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016816:	4b0e      	ldr	r3, [pc, #56]	; (8016850 <tcp_netif_ip_addr_changed+0x78>)
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	60fb      	str	r3, [r7, #12]
 801681c:	e00c      	b.n	8016838 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	681a      	ldr	r2, [r3, #0]
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	429a      	cmp	r2, r3
 8016828:	d103      	bne.n	8016832 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801682a:	683b      	ldr	r3, [r7, #0]
 801682c:	681a      	ldr	r2, [r3, #0]
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	68db      	ldr	r3, [r3, #12]
 8016836:	60fb      	str	r3, [r7, #12]
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d1ef      	bne.n	801681e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801683e:	bf00      	nop
 8016840:	3710      	adds	r7, #16
 8016842:	46bd      	mov	sp, r7
 8016844:	bd80      	pop	{r7, pc}
 8016846:	bf00      	nop
 8016848:	2000b8d4 	.word	0x2000b8d4
 801684c:	2000b8e0 	.word	0x2000b8e0
 8016850:	2000b8dc 	.word	0x2000b8dc

08016854 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016854:	b580      	push	{r7, lr}
 8016856:	b082      	sub	sp, #8
 8016858:	af00      	add	r7, sp, #0
 801685a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016860:	2b00      	cmp	r3, #0
 8016862:	d007      	beq.n	8016874 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016868:	4618      	mov	r0, r3
 801686a:	f7ff fb51 	bl	8015f10 <tcp_segs_free>
    pcb->ooseq = NULL;
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	2200      	movs	r2, #0
 8016872:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8016874:	bf00      	nop
 8016876:	3708      	adds	r7, #8
 8016878:	46bd      	mov	sp, r7
 801687a:	bd80      	pop	{r7, pc}

0801687c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801687c:	b590      	push	{r4, r7, lr}
 801687e:	b08d      	sub	sp, #52	; 0x34
 8016880:	af04      	add	r7, sp, #16
 8016882:	6078      	str	r0, [r7, #4]
 8016884:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	2b00      	cmp	r3, #0
 801688a:	d105      	bne.n	8016898 <tcp_input+0x1c>
 801688c:	4b9b      	ldr	r3, [pc, #620]	; (8016afc <tcp_input+0x280>)
 801688e:	2283      	movs	r2, #131	; 0x83
 8016890:	499b      	ldr	r1, [pc, #620]	; (8016b00 <tcp_input+0x284>)
 8016892:	489c      	ldr	r0, [pc, #624]	; (8016b04 <tcp_input+0x288>)
 8016894:	f008 ff14 	bl	801f6c0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	685b      	ldr	r3, [r3, #4]
 801689c:	4a9a      	ldr	r2, [pc, #616]	; (8016b08 <tcp_input+0x28c>)
 801689e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	895b      	ldrh	r3, [r3, #10]
 80168a4:	2b13      	cmp	r3, #19
 80168a6:	f240 83c4 	bls.w	8017032 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80168aa:	4b98      	ldr	r3, [pc, #608]	; (8016b0c <tcp_input+0x290>)
 80168ac:	695b      	ldr	r3, [r3, #20]
 80168ae:	4a97      	ldr	r2, [pc, #604]	; (8016b0c <tcp_input+0x290>)
 80168b0:	6812      	ldr	r2, [r2, #0]
 80168b2:	4611      	mov	r1, r2
 80168b4:	4618      	mov	r0, r3
 80168b6:	f006 fbcb 	bl	801d050 <ip4_addr_isbroadcast_u32>
 80168ba:	4603      	mov	r3, r0
 80168bc:	2b00      	cmp	r3, #0
 80168be:	f040 83ba 	bne.w	8017036 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80168c2:	4b92      	ldr	r3, [pc, #584]	; (8016b0c <tcp_input+0x290>)
 80168c4:	695b      	ldr	r3, [r3, #20]
 80168c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80168ca:	2be0      	cmp	r3, #224	; 0xe0
 80168cc:	f000 83b3 	beq.w	8017036 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80168d0:	4b8d      	ldr	r3, [pc, #564]	; (8016b08 <tcp_input+0x28c>)
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	899b      	ldrh	r3, [r3, #12]
 80168d6:	b29b      	uxth	r3, r3
 80168d8:	4618      	mov	r0, r3
 80168da:	f7fc facd 	bl	8012e78 <lwip_htons>
 80168de:	4603      	mov	r3, r0
 80168e0:	0b1b      	lsrs	r3, r3, #12
 80168e2:	b29b      	uxth	r3, r3
 80168e4:	b2db      	uxtb	r3, r3
 80168e6:	009b      	lsls	r3, r3, #2
 80168e8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80168ea:	7cbb      	ldrb	r3, [r7, #18]
 80168ec:	2b13      	cmp	r3, #19
 80168ee:	f240 83a4 	bls.w	801703a <tcp_input+0x7be>
 80168f2:	7cbb      	ldrb	r3, [r7, #18]
 80168f4:	b29a      	uxth	r2, r3
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	891b      	ldrh	r3, [r3, #8]
 80168fa:	429a      	cmp	r2, r3
 80168fc:	f200 839d 	bhi.w	801703a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8016900:	7cbb      	ldrb	r3, [r7, #18]
 8016902:	b29b      	uxth	r3, r3
 8016904:	3b14      	subs	r3, #20
 8016906:	b29a      	uxth	r2, r3
 8016908:	4b81      	ldr	r3, [pc, #516]	; (8016b10 <tcp_input+0x294>)
 801690a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801690c:	4b81      	ldr	r3, [pc, #516]	; (8016b14 <tcp_input+0x298>)
 801690e:	2200      	movs	r2, #0
 8016910:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	895a      	ldrh	r2, [r3, #10]
 8016916:	7cbb      	ldrb	r3, [r7, #18]
 8016918:	b29b      	uxth	r3, r3
 801691a:	429a      	cmp	r2, r3
 801691c:	d309      	bcc.n	8016932 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801691e:	4b7c      	ldr	r3, [pc, #496]	; (8016b10 <tcp_input+0x294>)
 8016920:	881a      	ldrh	r2, [r3, #0]
 8016922:	4b7d      	ldr	r3, [pc, #500]	; (8016b18 <tcp_input+0x29c>)
 8016924:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016926:	7cbb      	ldrb	r3, [r7, #18]
 8016928:	4619      	mov	r1, r3
 801692a:	6878      	ldr	r0, [r7, #4]
 801692c:	f7fd fdda 	bl	80144e4 <pbuf_remove_header>
 8016930:	e04e      	b.n	80169d0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	2b00      	cmp	r3, #0
 8016938:	d105      	bne.n	8016946 <tcp_input+0xca>
 801693a:	4b70      	ldr	r3, [pc, #448]	; (8016afc <tcp_input+0x280>)
 801693c:	22c2      	movs	r2, #194	; 0xc2
 801693e:	4977      	ldr	r1, [pc, #476]	; (8016b1c <tcp_input+0x2a0>)
 8016940:	4870      	ldr	r0, [pc, #448]	; (8016b04 <tcp_input+0x288>)
 8016942:	f008 febd 	bl	801f6c0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8016946:	2114      	movs	r1, #20
 8016948:	6878      	ldr	r0, [r7, #4]
 801694a:	f7fd fdcb 	bl	80144e4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	895a      	ldrh	r2, [r3, #10]
 8016952:	4b71      	ldr	r3, [pc, #452]	; (8016b18 <tcp_input+0x29c>)
 8016954:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016956:	4b6e      	ldr	r3, [pc, #440]	; (8016b10 <tcp_input+0x294>)
 8016958:	881a      	ldrh	r2, [r3, #0]
 801695a:	4b6f      	ldr	r3, [pc, #444]	; (8016b18 <tcp_input+0x29c>)
 801695c:	881b      	ldrh	r3, [r3, #0]
 801695e:	1ad3      	subs	r3, r2, r3
 8016960:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8016962:	4b6d      	ldr	r3, [pc, #436]	; (8016b18 <tcp_input+0x29c>)
 8016964:	881b      	ldrh	r3, [r3, #0]
 8016966:	4619      	mov	r1, r3
 8016968:	6878      	ldr	r0, [r7, #4]
 801696a:	f7fd fdbb 	bl	80144e4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	895b      	ldrh	r3, [r3, #10]
 8016974:	8a3a      	ldrh	r2, [r7, #16]
 8016976:	429a      	cmp	r2, r3
 8016978:	f200 8361 	bhi.w	801703e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	685b      	ldr	r3, [r3, #4]
 8016982:	4a64      	ldr	r2, [pc, #400]	; (8016b14 <tcp_input+0x298>)
 8016984:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	8a3a      	ldrh	r2, [r7, #16]
 801698c:	4611      	mov	r1, r2
 801698e:	4618      	mov	r0, r3
 8016990:	f7fd fda8 	bl	80144e4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	891a      	ldrh	r2, [r3, #8]
 8016998:	8a3b      	ldrh	r3, [r7, #16]
 801699a:	1ad3      	subs	r3, r2, r3
 801699c:	b29a      	uxth	r2, r3
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	895b      	ldrh	r3, [r3, #10]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d005      	beq.n	80169b6 <tcp_input+0x13a>
 80169aa:	4b54      	ldr	r3, [pc, #336]	; (8016afc <tcp_input+0x280>)
 80169ac:	22df      	movs	r2, #223	; 0xdf
 80169ae:	495c      	ldr	r1, [pc, #368]	; (8016b20 <tcp_input+0x2a4>)
 80169b0:	4854      	ldr	r0, [pc, #336]	; (8016b04 <tcp_input+0x288>)
 80169b2:	f008 fe85 	bl	801f6c0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	891a      	ldrh	r2, [r3, #8]
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	891b      	ldrh	r3, [r3, #8]
 80169c0:	429a      	cmp	r2, r3
 80169c2:	d005      	beq.n	80169d0 <tcp_input+0x154>
 80169c4:	4b4d      	ldr	r3, [pc, #308]	; (8016afc <tcp_input+0x280>)
 80169c6:	22e0      	movs	r2, #224	; 0xe0
 80169c8:	4956      	ldr	r1, [pc, #344]	; (8016b24 <tcp_input+0x2a8>)
 80169ca:	484e      	ldr	r0, [pc, #312]	; (8016b04 <tcp_input+0x288>)
 80169cc:	f008 fe78 	bl	801f6c0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80169d0:	4b4d      	ldr	r3, [pc, #308]	; (8016b08 <tcp_input+0x28c>)
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	881b      	ldrh	r3, [r3, #0]
 80169d6:	b29b      	uxth	r3, r3
 80169d8:	4a4b      	ldr	r2, [pc, #300]	; (8016b08 <tcp_input+0x28c>)
 80169da:	6814      	ldr	r4, [r2, #0]
 80169dc:	4618      	mov	r0, r3
 80169de:	f7fc fa4b 	bl	8012e78 <lwip_htons>
 80169e2:	4603      	mov	r3, r0
 80169e4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80169e6:	4b48      	ldr	r3, [pc, #288]	; (8016b08 <tcp_input+0x28c>)
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	885b      	ldrh	r3, [r3, #2]
 80169ec:	b29b      	uxth	r3, r3
 80169ee:	4a46      	ldr	r2, [pc, #280]	; (8016b08 <tcp_input+0x28c>)
 80169f0:	6814      	ldr	r4, [r2, #0]
 80169f2:	4618      	mov	r0, r3
 80169f4:	f7fc fa40 	bl	8012e78 <lwip_htons>
 80169f8:	4603      	mov	r3, r0
 80169fa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80169fc:	4b42      	ldr	r3, [pc, #264]	; (8016b08 <tcp_input+0x28c>)
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	685b      	ldr	r3, [r3, #4]
 8016a02:	4a41      	ldr	r2, [pc, #260]	; (8016b08 <tcp_input+0x28c>)
 8016a04:	6814      	ldr	r4, [r2, #0]
 8016a06:	4618      	mov	r0, r3
 8016a08:	f7fc fa4b 	bl	8012ea2 <lwip_htonl>
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	6063      	str	r3, [r4, #4]
 8016a10:	6863      	ldr	r3, [r4, #4]
 8016a12:	4a45      	ldr	r2, [pc, #276]	; (8016b28 <tcp_input+0x2ac>)
 8016a14:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8016a16:	4b3c      	ldr	r3, [pc, #240]	; (8016b08 <tcp_input+0x28c>)
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	689b      	ldr	r3, [r3, #8]
 8016a1c:	4a3a      	ldr	r2, [pc, #232]	; (8016b08 <tcp_input+0x28c>)
 8016a1e:	6814      	ldr	r4, [r2, #0]
 8016a20:	4618      	mov	r0, r3
 8016a22:	f7fc fa3e 	bl	8012ea2 <lwip_htonl>
 8016a26:	4603      	mov	r3, r0
 8016a28:	60a3      	str	r3, [r4, #8]
 8016a2a:	68a3      	ldr	r3, [r4, #8]
 8016a2c:	4a3f      	ldr	r2, [pc, #252]	; (8016b2c <tcp_input+0x2b0>)
 8016a2e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8016a30:	4b35      	ldr	r3, [pc, #212]	; (8016b08 <tcp_input+0x28c>)
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	89db      	ldrh	r3, [r3, #14]
 8016a36:	b29b      	uxth	r3, r3
 8016a38:	4a33      	ldr	r2, [pc, #204]	; (8016b08 <tcp_input+0x28c>)
 8016a3a:	6814      	ldr	r4, [r2, #0]
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	f7fc fa1b 	bl	8012e78 <lwip_htons>
 8016a42:	4603      	mov	r3, r0
 8016a44:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8016a46:	4b30      	ldr	r3, [pc, #192]	; (8016b08 <tcp_input+0x28c>)
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	899b      	ldrh	r3, [r3, #12]
 8016a4c:	b29b      	uxth	r3, r3
 8016a4e:	4618      	mov	r0, r3
 8016a50:	f7fc fa12 	bl	8012e78 <lwip_htons>
 8016a54:	4603      	mov	r3, r0
 8016a56:	b2db      	uxtb	r3, r3
 8016a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016a5c:	b2da      	uxtb	r2, r3
 8016a5e:	4b34      	ldr	r3, [pc, #208]	; (8016b30 <tcp_input+0x2b4>)
 8016a60:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	891a      	ldrh	r2, [r3, #8]
 8016a66:	4b33      	ldr	r3, [pc, #204]	; (8016b34 <tcp_input+0x2b8>)
 8016a68:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8016a6a:	4b31      	ldr	r3, [pc, #196]	; (8016b30 <tcp_input+0x2b4>)
 8016a6c:	781b      	ldrb	r3, [r3, #0]
 8016a6e:	f003 0303 	and.w	r3, r3, #3
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d00c      	beq.n	8016a90 <tcp_input+0x214>
    tcplen++;
 8016a76:	4b2f      	ldr	r3, [pc, #188]	; (8016b34 <tcp_input+0x2b8>)
 8016a78:	881b      	ldrh	r3, [r3, #0]
 8016a7a:	3301      	adds	r3, #1
 8016a7c:	b29a      	uxth	r2, r3
 8016a7e:	4b2d      	ldr	r3, [pc, #180]	; (8016b34 <tcp_input+0x2b8>)
 8016a80:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	891a      	ldrh	r2, [r3, #8]
 8016a86:	4b2b      	ldr	r3, [pc, #172]	; (8016b34 <tcp_input+0x2b8>)
 8016a88:	881b      	ldrh	r3, [r3, #0]
 8016a8a:	429a      	cmp	r2, r3
 8016a8c:	f200 82d9 	bhi.w	8017042 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8016a90:	2300      	movs	r3, #0
 8016a92:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016a94:	4b28      	ldr	r3, [pc, #160]	; (8016b38 <tcp_input+0x2bc>)
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	61fb      	str	r3, [r7, #28]
 8016a9a:	e09d      	b.n	8016bd8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8016a9c:	69fb      	ldr	r3, [r7, #28]
 8016a9e:	7d1b      	ldrb	r3, [r3, #20]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d105      	bne.n	8016ab0 <tcp_input+0x234>
 8016aa4:	4b15      	ldr	r3, [pc, #84]	; (8016afc <tcp_input+0x280>)
 8016aa6:	22fb      	movs	r2, #251	; 0xfb
 8016aa8:	4924      	ldr	r1, [pc, #144]	; (8016b3c <tcp_input+0x2c0>)
 8016aaa:	4816      	ldr	r0, [pc, #88]	; (8016b04 <tcp_input+0x288>)
 8016aac:	f008 fe08 	bl	801f6c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8016ab0:	69fb      	ldr	r3, [r7, #28]
 8016ab2:	7d1b      	ldrb	r3, [r3, #20]
 8016ab4:	2b0a      	cmp	r3, #10
 8016ab6:	d105      	bne.n	8016ac4 <tcp_input+0x248>
 8016ab8:	4b10      	ldr	r3, [pc, #64]	; (8016afc <tcp_input+0x280>)
 8016aba:	22fc      	movs	r2, #252	; 0xfc
 8016abc:	4920      	ldr	r1, [pc, #128]	; (8016b40 <tcp_input+0x2c4>)
 8016abe:	4811      	ldr	r0, [pc, #68]	; (8016b04 <tcp_input+0x288>)
 8016ac0:	f008 fdfe 	bl	801f6c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8016ac4:	69fb      	ldr	r3, [r7, #28]
 8016ac6:	7d1b      	ldrb	r3, [r3, #20]
 8016ac8:	2b01      	cmp	r3, #1
 8016aca:	d105      	bne.n	8016ad8 <tcp_input+0x25c>
 8016acc:	4b0b      	ldr	r3, [pc, #44]	; (8016afc <tcp_input+0x280>)
 8016ace:	22fd      	movs	r2, #253	; 0xfd
 8016ad0:	491c      	ldr	r1, [pc, #112]	; (8016b44 <tcp_input+0x2c8>)
 8016ad2:	480c      	ldr	r0, [pc, #48]	; (8016b04 <tcp_input+0x288>)
 8016ad4:	f008 fdf4 	bl	801f6c0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016ad8:	69fb      	ldr	r3, [r7, #28]
 8016ada:	7a1b      	ldrb	r3, [r3, #8]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d033      	beq.n	8016b48 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016ae0:	69fb      	ldr	r3, [r7, #28]
 8016ae2:	7a1a      	ldrb	r2, [r3, #8]
 8016ae4:	4b09      	ldr	r3, [pc, #36]	; (8016b0c <tcp_input+0x290>)
 8016ae6:	685b      	ldr	r3, [r3, #4]
 8016ae8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016aec:	3301      	adds	r3, #1
 8016aee:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016af0:	429a      	cmp	r2, r3
 8016af2:	d029      	beq.n	8016b48 <tcp_input+0x2cc>
      prev = pcb;
 8016af4:	69fb      	ldr	r3, [r7, #28]
 8016af6:	61bb      	str	r3, [r7, #24]
      continue;
 8016af8:	e06b      	b.n	8016bd2 <tcp_input+0x356>
 8016afa:	bf00      	nop
 8016afc:	08024dbc 	.word	0x08024dbc
 8016b00:	08024df0 	.word	0x08024df0
 8016b04:	08024e08 	.word	0x08024e08
 8016b08:	20004784 	.word	0x20004784
 8016b0c:	200081c0 	.word	0x200081c0
 8016b10:	20004788 	.word	0x20004788
 8016b14:	2000478c 	.word	0x2000478c
 8016b18:	2000478a 	.word	0x2000478a
 8016b1c:	08024e30 	.word	0x08024e30
 8016b20:	08024e40 	.word	0x08024e40
 8016b24:	08024e4c 	.word	0x08024e4c
 8016b28:	20004794 	.word	0x20004794
 8016b2c:	20004798 	.word	0x20004798
 8016b30:	200047a0 	.word	0x200047a0
 8016b34:	2000479e 	.word	0x2000479e
 8016b38:	2000b8d4 	.word	0x2000b8d4
 8016b3c:	08024e6c 	.word	0x08024e6c
 8016b40:	08024e94 	.word	0x08024e94
 8016b44:	08024ec0 	.word	0x08024ec0
    }

    if (pcb->remote_port == tcphdr->src &&
 8016b48:	69fb      	ldr	r3, [r7, #28]
 8016b4a:	8b1a      	ldrh	r2, [r3, #24]
 8016b4c:	4b94      	ldr	r3, [pc, #592]	; (8016da0 <tcp_input+0x524>)
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	881b      	ldrh	r3, [r3, #0]
 8016b52:	b29b      	uxth	r3, r3
 8016b54:	429a      	cmp	r2, r3
 8016b56:	d13a      	bne.n	8016bce <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8016b58:	69fb      	ldr	r3, [r7, #28]
 8016b5a:	8ada      	ldrh	r2, [r3, #22]
 8016b5c:	4b90      	ldr	r3, [pc, #576]	; (8016da0 <tcp_input+0x524>)
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	885b      	ldrh	r3, [r3, #2]
 8016b62:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8016b64:	429a      	cmp	r2, r3
 8016b66:	d132      	bne.n	8016bce <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016b68:	69fb      	ldr	r3, [r7, #28]
 8016b6a:	685a      	ldr	r2, [r3, #4]
 8016b6c:	4b8d      	ldr	r3, [pc, #564]	; (8016da4 <tcp_input+0x528>)
 8016b6e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8016b70:	429a      	cmp	r2, r3
 8016b72:	d12c      	bne.n	8016bce <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016b74:	69fb      	ldr	r3, [r7, #28]
 8016b76:	681a      	ldr	r2, [r3, #0]
 8016b78:	4b8a      	ldr	r3, [pc, #552]	; (8016da4 <tcp_input+0x528>)
 8016b7a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016b7c:	429a      	cmp	r2, r3
 8016b7e:	d126      	bne.n	8016bce <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016b80:	69fb      	ldr	r3, [r7, #28]
 8016b82:	68db      	ldr	r3, [r3, #12]
 8016b84:	69fa      	ldr	r2, [r7, #28]
 8016b86:	429a      	cmp	r2, r3
 8016b88:	d106      	bne.n	8016b98 <tcp_input+0x31c>
 8016b8a:	4b87      	ldr	r3, [pc, #540]	; (8016da8 <tcp_input+0x52c>)
 8016b8c:	f240 120d 	movw	r2, #269	; 0x10d
 8016b90:	4986      	ldr	r1, [pc, #536]	; (8016dac <tcp_input+0x530>)
 8016b92:	4887      	ldr	r0, [pc, #540]	; (8016db0 <tcp_input+0x534>)
 8016b94:	f008 fd94 	bl	801f6c0 <iprintf>
      if (prev != NULL) {
 8016b98:	69bb      	ldr	r3, [r7, #24]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d00a      	beq.n	8016bb4 <tcp_input+0x338>
        prev->next = pcb->next;
 8016b9e:	69fb      	ldr	r3, [r7, #28]
 8016ba0:	68da      	ldr	r2, [r3, #12]
 8016ba2:	69bb      	ldr	r3, [r7, #24]
 8016ba4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8016ba6:	4b83      	ldr	r3, [pc, #524]	; (8016db4 <tcp_input+0x538>)
 8016ba8:	681a      	ldr	r2, [r3, #0]
 8016baa:	69fb      	ldr	r3, [r7, #28]
 8016bac:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8016bae:	4a81      	ldr	r2, [pc, #516]	; (8016db4 <tcp_input+0x538>)
 8016bb0:	69fb      	ldr	r3, [r7, #28]
 8016bb2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8016bb4:	69fb      	ldr	r3, [r7, #28]
 8016bb6:	68db      	ldr	r3, [r3, #12]
 8016bb8:	69fa      	ldr	r2, [r7, #28]
 8016bba:	429a      	cmp	r2, r3
 8016bbc:	d111      	bne.n	8016be2 <tcp_input+0x366>
 8016bbe:	4b7a      	ldr	r3, [pc, #488]	; (8016da8 <tcp_input+0x52c>)
 8016bc0:	f240 1215 	movw	r2, #277	; 0x115
 8016bc4:	497c      	ldr	r1, [pc, #496]	; (8016db8 <tcp_input+0x53c>)
 8016bc6:	487a      	ldr	r0, [pc, #488]	; (8016db0 <tcp_input+0x534>)
 8016bc8:	f008 fd7a 	bl	801f6c0 <iprintf>
      break;
 8016bcc:	e009      	b.n	8016be2 <tcp_input+0x366>
    }
    prev = pcb;
 8016bce:	69fb      	ldr	r3, [r7, #28]
 8016bd0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016bd2:	69fb      	ldr	r3, [r7, #28]
 8016bd4:	68db      	ldr	r3, [r3, #12]
 8016bd6:	61fb      	str	r3, [r7, #28]
 8016bd8:	69fb      	ldr	r3, [r7, #28]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	f47f af5e 	bne.w	8016a9c <tcp_input+0x220>
 8016be0:	e000      	b.n	8016be4 <tcp_input+0x368>
      break;
 8016be2:	bf00      	nop
  }

  if (pcb == NULL) {
 8016be4:	69fb      	ldr	r3, [r7, #28]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	f040 8095 	bne.w	8016d16 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016bec:	4b73      	ldr	r3, [pc, #460]	; (8016dbc <tcp_input+0x540>)
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	61fb      	str	r3, [r7, #28]
 8016bf2:	e03f      	b.n	8016c74 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016bf4:	69fb      	ldr	r3, [r7, #28]
 8016bf6:	7d1b      	ldrb	r3, [r3, #20]
 8016bf8:	2b0a      	cmp	r3, #10
 8016bfa:	d006      	beq.n	8016c0a <tcp_input+0x38e>
 8016bfc:	4b6a      	ldr	r3, [pc, #424]	; (8016da8 <tcp_input+0x52c>)
 8016bfe:	f240 121f 	movw	r2, #287	; 0x11f
 8016c02:	496f      	ldr	r1, [pc, #444]	; (8016dc0 <tcp_input+0x544>)
 8016c04:	486a      	ldr	r0, [pc, #424]	; (8016db0 <tcp_input+0x534>)
 8016c06:	f008 fd5b 	bl	801f6c0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016c0a:	69fb      	ldr	r3, [r7, #28]
 8016c0c:	7a1b      	ldrb	r3, [r3, #8]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d009      	beq.n	8016c26 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016c12:	69fb      	ldr	r3, [r7, #28]
 8016c14:	7a1a      	ldrb	r2, [r3, #8]
 8016c16:	4b63      	ldr	r3, [pc, #396]	; (8016da4 <tcp_input+0x528>)
 8016c18:	685b      	ldr	r3, [r3, #4]
 8016c1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016c1e:	3301      	adds	r3, #1
 8016c20:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016c22:	429a      	cmp	r2, r3
 8016c24:	d122      	bne.n	8016c6c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8016c26:	69fb      	ldr	r3, [r7, #28]
 8016c28:	8b1a      	ldrh	r2, [r3, #24]
 8016c2a:	4b5d      	ldr	r3, [pc, #372]	; (8016da0 <tcp_input+0x524>)
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	881b      	ldrh	r3, [r3, #0]
 8016c30:	b29b      	uxth	r3, r3
 8016c32:	429a      	cmp	r2, r3
 8016c34:	d11b      	bne.n	8016c6e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8016c36:	69fb      	ldr	r3, [r7, #28]
 8016c38:	8ada      	ldrh	r2, [r3, #22]
 8016c3a:	4b59      	ldr	r3, [pc, #356]	; (8016da0 <tcp_input+0x524>)
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	885b      	ldrh	r3, [r3, #2]
 8016c40:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8016c42:	429a      	cmp	r2, r3
 8016c44:	d113      	bne.n	8016c6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016c46:	69fb      	ldr	r3, [r7, #28]
 8016c48:	685a      	ldr	r2, [r3, #4]
 8016c4a:	4b56      	ldr	r3, [pc, #344]	; (8016da4 <tcp_input+0x528>)
 8016c4c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8016c4e:	429a      	cmp	r2, r3
 8016c50:	d10d      	bne.n	8016c6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016c52:	69fb      	ldr	r3, [r7, #28]
 8016c54:	681a      	ldr	r2, [r3, #0]
 8016c56:	4b53      	ldr	r3, [pc, #332]	; (8016da4 <tcp_input+0x528>)
 8016c58:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016c5a:	429a      	cmp	r2, r3
 8016c5c:	d107      	bne.n	8016c6e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8016c5e:	69f8      	ldr	r0, [r7, #28]
 8016c60:	f000 fb54 	bl	801730c <tcp_timewait_input>
        }
        pbuf_free(p);
 8016c64:	6878      	ldr	r0, [r7, #4]
 8016c66:	f7fd fcc3 	bl	80145f0 <pbuf_free>
        return;
 8016c6a:	e1f0      	b.n	801704e <tcp_input+0x7d2>
        continue;
 8016c6c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016c6e:	69fb      	ldr	r3, [r7, #28]
 8016c70:	68db      	ldr	r3, [r3, #12]
 8016c72:	61fb      	str	r3, [r7, #28]
 8016c74:	69fb      	ldr	r3, [r7, #28]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d1bc      	bne.n	8016bf4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016c7e:	4b51      	ldr	r3, [pc, #324]	; (8016dc4 <tcp_input+0x548>)
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	617b      	str	r3, [r7, #20]
 8016c84:	e02a      	b.n	8016cdc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016c86:	697b      	ldr	r3, [r7, #20]
 8016c88:	7a1b      	ldrb	r3, [r3, #8]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d00c      	beq.n	8016ca8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016c8e:	697b      	ldr	r3, [r7, #20]
 8016c90:	7a1a      	ldrb	r2, [r3, #8]
 8016c92:	4b44      	ldr	r3, [pc, #272]	; (8016da4 <tcp_input+0x528>)
 8016c94:	685b      	ldr	r3, [r3, #4]
 8016c96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016c9a:	3301      	adds	r3, #1
 8016c9c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016c9e:	429a      	cmp	r2, r3
 8016ca0:	d002      	beq.n	8016ca8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8016ca2:	697b      	ldr	r3, [r7, #20]
 8016ca4:	61bb      	str	r3, [r7, #24]
        continue;
 8016ca6:	e016      	b.n	8016cd6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016ca8:	697b      	ldr	r3, [r7, #20]
 8016caa:	8ada      	ldrh	r2, [r3, #22]
 8016cac:	4b3c      	ldr	r3, [pc, #240]	; (8016da0 <tcp_input+0x524>)
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	885b      	ldrh	r3, [r3, #2]
 8016cb2:	b29b      	uxth	r3, r3
 8016cb4:	429a      	cmp	r2, r3
 8016cb6:	d10c      	bne.n	8016cd2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016cb8:	697b      	ldr	r3, [r7, #20]
 8016cba:	681a      	ldr	r2, [r3, #0]
 8016cbc:	4b39      	ldr	r3, [pc, #228]	; (8016da4 <tcp_input+0x528>)
 8016cbe:	695b      	ldr	r3, [r3, #20]
 8016cc0:	429a      	cmp	r2, r3
 8016cc2:	d00f      	beq.n	8016ce4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8016cc4:	697b      	ldr	r3, [r7, #20]
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d00d      	beq.n	8016ce6 <tcp_input+0x46a>
 8016cca:	697b      	ldr	r3, [r7, #20]
 8016ccc:	681b      	ldr	r3, [r3, #0]
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d009      	beq.n	8016ce6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8016cd2:	697b      	ldr	r3, [r7, #20]
 8016cd4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016cd6:	697b      	ldr	r3, [r7, #20]
 8016cd8:	68db      	ldr	r3, [r3, #12]
 8016cda:	617b      	str	r3, [r7, #20]
 8016cdc:	697b      	ldr	r3, [r7, #20]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d1d1      	bne.n	8016c86 <tcp_input+0x40a>
 8016ce2:	e000      	b.n	8016ce6 <tcp_input+0x46a>
            break;
 8016ce4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8016ce6:	697b      	ldr	r3, [r7, #20]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d014      	beq.n	8016d16 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8016cec:	69bb      	ldr	r3, [r7, #24]
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d00a      	beq.n	8016d08 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8016cf2:	697b      	ldr	r3, [r7, #20]
 8016cf4:	68da      	ldr	r2, [r3, #12]
 8016cf6:	69bb      	ldr	r3, [r7, #24]
 8016cf8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8016cfa:	4b32      	ldr	r3, [pc, #200]	; (8016dc4 <tcp_input+0x548>)
 8016cfc:	681a      	ldr	r2, [r3, #0]
 8016cfe:	697b      	ldr	r3, [r7, #20]
 8016d00:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8016d02:	4a30      	ldr	r2, [pc, #192]	; (8016dc4 <tcp_input+0x548>)
 8016d04:	697b      	ldr	r3, [r7, #20]
 8016d06:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8016d08:	6978      	ldr	r0, [r7, #20]
 8016d0a:	f000 fa01 	bl	8017110 <tcp_listen_input>
      }
      pbuf_free(p);
 8016d0e:	6878      	ldr	r0, [r7, #4]
 8016d10:	f7fd fc6e 	bl	80145f0 <pbuf_free>
      return;
 8016d14:	e19b      	b.n	801704e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8016d16:	69fb      	ldr	r3, [r7, #28]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	f000 8160 	beq.w	8016fde <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8016d1e:	4b2a      	ldr	r3, [pc, #168]	; (8016dc8 <tcp_input+0x54c>)
 8016d20:	2200      	movs	r2, #0
 8016d22:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	891a      	ldrh	r2, [r3, #8]
 8016d28:	4b27      	ldr	r3, [pc, #156]	; (8016dc8 <tcp_input+0x54c>)
 8016d2a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8016d2c:	4a26      	ldr	r2, [pc, #152]	; (8016dc8 <tcp_input+0x54c>)
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016d32:	4b1b      	ldr	r3, [pc, #108]	; (8016da0 <tcp_input+0x524>)
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	4a24      	ldr	r2, [pc, #144]	; (8016dc8 <tcp_input+0x54c>)
 8016d38:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8016d3a:	4b24      	ldr	r3, [pc, #144]	; (8016dcc <tcp_input+0x550>)
 8016d3c:	2200      	movs	r2, #0
 8016d3e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016d40:	4b23      	ldr	r3, [pc, #140]	; (8016dd0 <tcp_input+0x554>)
 8016d42:	2200      	movs	r2, #0
 8016d44:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8016d46:	4b23      	ldr	r3, [pc, #140]	; (8016dd4 <tcp_input+0x558>)
 8016d48:	2200      	movs	r2, #0
 8016d4a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8016d4c:	4b22      	ldr	r3, [pc, #136]	; (8016dd8 <tcp_input+0x55c>)
 8016d4e:	781b      	ldrb	r3, [r3, #0]
 8016d50:	f003 0308 	and.w	r3, r3, #8
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d006      	beq.n	8016d66 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	7b5b      	ldrb	r3, [r3, #13]
 8016d5c:	f043 0301 	orr.w	r3, r3, #1
 8016d60:	b2da      	uxtb	r2, r3
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8016d66:	69fb      	ldr	r3, [r7, #28]
 8016d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d038      	beq.n	8016de0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016d6e:	69f8      	ldr	r0, [r7, #28]
 8016d70:	f7ff f852 	bl	8015e18 <tcp_process_refused_data>
 8016d74:	4603      	mov	r3, r0
 8016d76:	f113 0f0d 	cmn.w	r3, #13
 8016d7a:	d007      	beq.n	8016d8c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016d7c:	69fb      	ldr	r3, [r7, #28]
 8016d7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d02d      	beq.n	8016de0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016d84:	4b15      	ldr	r3, [pc, #84]	; (8016ddc <tcp_input+0x560>)
 8016d86:	881b      	ldrh	r3, [r3, #0]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d029      	beq.n	8016de0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8016d8c:	69fb      	ldr	r3, [r7, #28]
 8016d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	f040 8104 	bne.w	8016f9e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8016d96:	69f8      	ldr	r0, [r7, #28]
 8016d98:	f003 fe16 	bl	801a9c8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8016d9c:	e0ff      	b.n	8016f9e <tcp_input+0x722>
 8016d9e:	bf00      	nop
 8016da0:	20004784 	.word	0x20004784
 8016da4:	200081c0 	.word	0x200081c0
 8016da8:	08024dbc 	.word	0x08024dbc
 8016dac:	08024ee8 	.word	0x08024ee8
 8016db0:	08024e08 	.word	0x08024e08
 8016db4:	2000b8d4 	.word	0x2000b8d4
 8016db8:	08024f14 	.word	0x08024f14
 8016dbc:	2000b8e4 	.word	0x2000b8e4
 8016dc0:	08024f40 	.word	0x08024f40
 8016dc4:	2000b8dc 	.word	0x2000b8dc
 8016dc8:	20004774 	.word	0x20004774
 8016dcc:	200047a4 	.word	0x200047a4
 8016dd0:	200047a1 	.word	0x200047a1
 8016dd4:	2000479c 	.word	0x2000479c
 8016dd8:	200047a0 	.word	0x200047a0
 8016ddc:	2000479e 	.word	0x2000479e
      }
    }
    tcp_input_pcb = pcb;
 8016de0:	4a9c      	ldr	r2, [pc, #624]	; (8017054 <tcp_input+0x7d8>)
 8016de2:	69fb      	ldr	r3, [r7, #28]
 8016de4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8016de6:	69f8      	ldr	r0, [r7, #28]
 8016de8:	f000 fb0a 	bl	8017400 <tcp_process>
 8016dec:	4603      	mov	r3, r0
 8016dee:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8016df0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016df4:	f113 0f0d 	cmn.w	r3, #13
 8016df8:	f000 80d3 	beq.w	8016fa2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8016dfc:	4b96      	ldr	r3, [pc, #600]	; (8017058 <tcp_input+0x7dc>)
 8016dfe:	781b      	ldrb	r3, [r3, #0]
 8016e00:	f003 0308 	and.w	r3, r3, #8
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d015      	beq.n	8016e34 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8016e08:	69fb      	ldr	r3, [r7, #28]
 8016e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d008      	beq.n	8016e24 <tcp_input+0x5a8>
 8016e12:	69fb      	ldr	r3, [r7, #28]
 8016e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016e18:	69fa      	ldr	r2, [r7, #28]
 8016e1a:	6912      	ldr	r2, [r2, #16]
 8016e1c:	f06f 010d 	mvn.w	r1, #13
 8016e20:	4610      	mov	r0, r2
 8016e22:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016e24:	69f9      	ldr	r1, [r7, #28]
 8016e26:	488d      	ldr	r0, [pc, #564]	; (801705c <tcp_input+0x7e0>)
 8016e28:	f7ff fbb0 	bl	801658c <tcp_pcb_remove>
        tcp_free(pcb);
 8016e2c:	69f8      	ldr	r0, [r7, #28]
 8016e2e:	f7fd fe9b 	bl	8014b68 <tcp_free>
 8016e32:	e0c1      	b.n	8016fb8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8016e34:	2300      	movs	r3, #0
 8016e36:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8016e38:	4b89      	ldr	r3, [pc, #548]	; (8017060 <tcp_input+0x7e4>)
 8016e3a:	881b      	ldrh	r3, [r3, #0]
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d01d      	beq.n	8016e7c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8016e40:	4b87      	ldr	r3, [pc, #540]	; (8017060 <tcp_input+0x7e4>)
 8016e42:	881b      	ldrh	r3, [r3, #0]
 8016e44:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8016e46:	69fb      	ldr	r3, [r7, #28]
 8016e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d00a      	beq.n	8016e66 <tcp_input+0x5ea>
 8016e50:	69fb      	ldr	r3, [r7, #28]
 8016e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016e56:	69fa      	ldr	r2, [r7, #28]
 8016e58:	6910      	ldr	r0, [r2, #16]
 8016e5a:	89fa      	ldrh	r2, [r7, #14]
 8016e5c:	69f9      	ldr	r1, [r7, #28]
 8016e5e:	4798      	blx	r3
 8016e60:	4603      	mov	r3, r0
 8016e62:	74fb      	strb	r3, [r7, #19]
 8016e64:	e001      	b.n	8016e6a <tcp_input+0x5ee>
 8016e66:	2300      	movs	r3, #0
 8016e68:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016e6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016e6e:	f113 0f0d 	cmn.w	r3, #13
 8016e72:	f000 8098 	beq.w	8016fa6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8016e76:	4b7a      	ldr	r3, [pc, #488]	; (8017060 <tcp_input+0x7e4>)
 8016e78:	2200      	movs	r2, #0
 8016e7a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8016e7c:	69f8      	ldr	r0, [r7, #28]
 8016e7e:	f000 f907 	bl	8017090 <tcp_input_delayed_close>
 8016e82:	4603      	mov	r3, r0
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	f040 8090 	bne.w	8016faa <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8016e8a:	4b76      	ldr	r3, [pc, #472]	; (8017064 <tcp_input+0x7e8>)
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d041      	beq.n	8016f16 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016e92:	69fb      	ldr	r3, [r7, #28]
 8016e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d006      	beq.n	8016ea8 <tcp_input+0x62c>
 8016e9a:	4b73      	ldr	r3, [pc, #460]	; (8017068 <tcp_input+0x7ec>)
 8016e9c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016ea0:	4972      	ldr	r1, [pc, #456]	; (801706c <tcp_input+0x7f0>)
 8016ea2:	4873      	ldr	r0, [pc, #460]	; (8017070 <tcp_input+0x7f4>)
 8016ea4:	f008 fc0c 	bl	801f6c0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8016ea8:	69fb      	ldr	r3, [r7, #28]
 8016eaa:	8b5b      	ldrh	r3, [r3, #26]
 8016eac:	f003 0310 	and.w	r3, r3, #16
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d008      	beq.n	8016ec6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016eb4:	4b6b      	ldr	r3, [pc, #428]	; (8017064 <tcp_input+0x7e8>)
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	4618      	mov	r0, r3
 8016eba:	f7fd fb99 	bl	80145f0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8016ebe:	69f8      	ldr	r0, [r7, #28]
 8016ec0:	f7fe f996 	bl	80151f0 <tcp_abort>
            goto aborted;
 8016ec4:	e078      	b.n	8016fb8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8016ec6:	69fb      	ldr	r3, [r7, #28]
 8016ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d00c      	beq.n	8016eea <tcp_input+0x66e>
 8016ed0:	69fb      	ldr	r3, [r7, #28]
 8016ed2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016ed6:	69fb      	ldr	r3, [r7, #28]
 8016ed8:	6918      	ldr	r0, [r3, #16]
 8016eda:	4b62      	ldr	r3, [pc, #392]	; (8017064 <tcp_input+0x7e8>)
 8016edc:	681a      	ldr	r2, [r3, #0]
 8016ede:	2300      	movs	r3, #0
 8016ee0:	69f9      	ldr	r1, [r7, #28]
 8016ee2:	47a0      	blx	r4
 8016ee4:	4603      	mov	r3, r0
 8016ee6:	74fb      	strb	r3, [r7, #19]
 8016ee8:	e008      	b.n	8016efc <tcp_input+0x680>
 8016eea:	4b5e      	ldr	r3, [pc, #376]	; (8017064 <tcp_input+0x7e8>)
 8016eec:	681a      	ldr	r2, [r3, #0]
 8016eee:	2300      	movs	r3, #0
 8016ef0:	69f9      	ldr	r1, [r7, #28]
 8016ef2:	2000      	movs	r0, #0
 8016ef4:	f7ff f884 	bl	8016000 <tcp_recv_null>
 8016ef8:	4603      	mov	r3, r0
 8016efa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8016efc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016f00:	f113 0f0d 	cmn.w	r3, #13
 8016f04:	d053      	beq.n	8016fae <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8016f06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d003      	beq.n	8016f16 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8016f0e:	4b55      	ldr	r3, [pc, #340]	; (8017064 <tcp_input+0x7e8>)
 8016f10:	681a      	ldr	r2, [r3, #0]
 8016f12:	69fb      	ldr	r3, [r7, #28]
 8016f14:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8016f16:	4b50      	ldr	r3, [pc, #320]	; (8017058 <tcp_input+0x7dc>)
 8016f18:	781b      	ldrb	r3, [r3, #0]
 8016f1a:	f003 0320 	and.w	r3, r3, #32
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d030      	beq.n	8016f84 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8016f22:	69fb      	ldr	r3, [r7, #28]
 8016f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d009      	beq.n	8016f3e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8016f2a:	69fb      	ldr	r3, [r7, #28]
 8016f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016f2e:	7b5a      	ldrb	r2, [r3, #13]
 8016f30:	69fb      	ldr	r3, [r7, #28]
 8016f32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016f34:	f042 0220 	orr.w	r2, r2, #32
 8016f38:	b2d2      	uxtb	r2, r2
 8016f3a:	735a      	strb	r2, [r3, #13]
 8016f3c:	e022      	b.n	8016f84 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016f3e:	69fb      	ldr	r3, [r7, #28]
 8016f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f42:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016f46:	d005      	beq.n	8016f54 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8016f48:	69fb      	ldr	r3, [r7, #28]
 8016f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f4c:	3301      	adds	r3, #1
 8016f4e:	b29a      	uxth	r2, r3
 8016f50:	69fb      	ldr	r3, [r7, #28]
 8016f52:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016f54:	69fb      	ldr	r3, [r7, #28]
 8016f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d00b      	beq.n	8016f76 <tcp_input+0x6fa>
 8016f5e:	69fb      	ldr	r3, [r7, #28]
 8016f60:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016f64:	69fb      	ldr	r3, [r7, #28]
 8016f66:	6918      	ldr	r0, [r3, #16]
 8016f68:	2300      	movs	r3, #0
 8016f6a:	2200      	movs	r2, #0
 8016f6c:	69f9      	ldr	r1, [r7, #28]
 8016f6e:	47a0      	blx	r4
 8016f70:	4603      	mov	r3, r0
 8016f72:	74fb      	strb	r3, [r7, #19]
 8016f74:	e001      	b.n	8016f7a <tcp_input+0x6fe>
 8016f76:	2300      	movs	r3, #0
 8016f78:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016f7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016f7e:	f113 0f0d 	cmn.w	r3, #13
 8016f82:	d016      	beq.n	8016fb2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016f84:	4b33      	ldr	r3, [pc, #204]	; (8017054 <tcp_input+0x7d8>)
 8016f86:	2200      	movs	r2, #0
 8016f88:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8016f8a:	69f8      	ldr	r0, [r7, #28]
 8016f8c:	f000 f880 	bl	8017090 <tcp_input_delayed_close>
 8016f90:	4603      	mov	r3, r0
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d10f      	bne.n	8016fb6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016f96:	69f8      	ldr	r0, [r7, #28]
 8016f98:	f002 ff10 	bl	8019dbc <tcp_output>
 8016f9c:	e00c      	b.n	8016fb8 <tcp_input+0x73c>
        goto aborted;
 8016f9e:	bf00      	nop
 8016fa0:	e00a      	b.n	8016fb8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016fa2:	bf00      	nop
 8016fa4:	e008      	b.n	8016fb8 <tcp_input+0x73c>
              goto aborted;
 8016fa6:	bf00      	nop
 8016fa8:	e006      	b.n	8016fb8 <tcp_input+0x73c>
          goto aborted;
 8016faa:	bf00      	nop
 8016fac:	e004      	b.n	8016fb8 <tcp_input+0x73c>
            goto aborted;
 8016fae:	bf00      	nop
 8016fb0:	e002      	b.n	8016fb8 <tcp_input+0x73c>
              goto aborted;
 8016fb2:	bf00      	nop
 8016fb4:	e000      	b.n	8016fb8 <tcp_input+0x73c>
          goto aborted;
 8016fb6:	bf00      	nop
    tcp_input_pcb = NULL;
 8016fb8:	4b26      	ldr	r3, [pc, #152]	; (8017054 <tcp_input+0x7d8>)
 8016fba:	2200      	movs	r2, #0
 8016fbc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8016fbe:	4b29      	ldr	r3, [pc, #164]	; (8017064 <tcp_input+0x7e8>)
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8016fc4:	4b2b      	ldr	r3, [pc, #172]	; (8017074 <tcp_input+0x7f8>)
 8016fc6:	685b      	ldr	r3, [r3, #4]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d03f      	beq.n	801704c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8016fcc:	4b29      	ldr	r3, [pc, #164]	; (8017074 <tcp_input+0x7f8>)
 8016fce:	685b      	ldr	r3, [r3, #4]
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	f7fd fb0d 	bl	80145f0 <pbuf_free>
      inseg.p = NULL;
 8016fd6:	4b27      	ldr	r3, [pc, #156]	; (8017074 <tcp_input+0x7f8>)
 8016fd8:	2200      	movs	r2, #0
 8016fda:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8016fdc:	e036      	b.n	801704c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8016fde:	4b26      	ldr	r3, [pc, #152]	; (8017078 <tcp_input+0x7fc>)
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	899b      	ldrh	r3, [r3, #12]
 8016fe4:	b29b      	uxth	r3, r3
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	f7fb ff46 	bl	8012e78 <lwip_htons>
 8016fec:	4603      	mov	r3, r0
 8016fee:	b2db      	uxtb	r3, r3
 8016ff0:	f003 0304 	and.w	r3, r3, #4
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d118      	bne.n	801702a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016ff8:	4b20      	ldr	r3, [pc, #128]	; (801707c <tcp_input+0x800>)
 8016ffa:	6819      	ldr	r1, [r3, #0]
 8016ffc:	4b20      	ldr	r3, [pc, #128]	; (8017080 <tcp_input+0x804>)
 8016ffe:	881b      	ldrh	r3, [r3, #0]
 8017000:	461a      	mov	r2, r3
 8017002:	4b20      	ldr	r3, [pc, #128]	; (8017084 <tcp_input+0x808>)
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017008:	4b1b      	ldr	r3, [pc, #108]	; (8017078 <tcp_input+0x7fc>)
 801700a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801700c:	885b      	ldrh	r3, [r3, #2]
 801700e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017010:	4a19      	ldr	r2, [pc, #100]	; (8017078 <tcp_input+0x7fc>)
 8017012:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017014:	8812      	ldrh	r2, [r2, #0]
 8017016:	b292      	uxth	r2, r2
 8017018:	9202      	str	r2, [sp, #8]
 801701a:	9301      	str	r3, [sp, #4]
 801701c:	4b1a      	ldr	r3, [pc, #104]	; (8017088 <tcp_input+0x80c>)
 801701e:	9300      	str	r3, [sp, #0]
 8017020:	4b1a      	ldr	r3, [pc, #104]	; (801708c <tcp_input+0x810>)
 8017022:	4602      	mov	r2, r0
 8017024:	2000      	movs	r0, #0
 8017026:	f003 fc7d 	bl	801a924 <tcp_rst>
    pbuf_free(p);
 801702a:	6878      	ldr	r0, [r7, #4]
 801702c:	f7fd fae0 	bl	80145f0 <pbuf_free>
  return;
 8017030:	e00c      	b.n	801704c <tcp_input+0x7d0>
    goto dropped;
 8017032:	bf00      	nop
 8017034:	e006      	b.n	8017044 <tcp_input+0x7c8>
    goto dropped;
 8017036:	bf00      	nop
 8017038:	e004      	b.n	8017044 <tcp_input+0x7c8>
    goto dropped;
 801703a:	bf00      	nop
 801703c:	e002      	b.n	8017044 <tcp_input+0x7c8>
      goto dropped;
 801703e:	bf00      	nop
 8017040:	e000      	b.n	8017044 <tcp_input+0x7c8>
      goto dropped;
 8017042:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8017044:	6878      	ldr	r0, [r7, #4]
 8017046:	f7fd fad3 	bl	80145f0 <pbuf_free>
 801704a:	e000      	b.n	801704e <tcp_input+0x7d2>
  return;
 801704c:	bf00      	nop
}
 801704e:	3724      	adds	r7, #36	; 0x24
 8017050:	46bd      	mov	sp, r7
 8017052:	bd90      	pop	{r4, r7, pc}
 8017054:	2000b8e8 	.word	0x2000b8e8
 8017058:	200047a1 	.word	0x200047a1
 801705c:	2000b8d4 	.word	0x2000b8d4
 8017060:	2000479c 	.word	0x2000479c
 8017064:	200047a4 	.word	0x200047a4
 8017068:	08024dbc 	.word	0x08024dbc
 801706c:	08024f70 	.word	0x08024f70
 8017070:	08024e08 	.word	0x08024e08
 8017074:	20004774 	.word	0x20004774
 8017078:	20004784 	.word	0x20004784
 801707c:	20004798 	.word	0x20004798
 8017080:	2000479e 	.word	0x2000479e
 8017084:	20004794 	.word	0x20004794
 8017088:	200081d0 	.word	0x200081d0
 801708c:	200081d4 	.word	0x200081d4

08017090 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8017090:	b580      	push	{r7, lr}
 8017092:	b082      	sub	sp, #8
 8017094:	af00      	add	r7, sp, #0
 8017096:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	2b00      	cmp	r3, #0
 801709c:	d106      	bne.n	80170ac <tcp_input_delayed_close+0x1c>
 801709e:	4b17      	ldr	r3, [pc, #92]	; (80170fc <tcp_input_delayed_close+0x6c>)
 80170a0:	f240 225a 	movw	r2, #602	; 0x25a
 80170a4:	4916      	ldr	r1, [pc, #88]	; (8017100 <tcp_input_delayed_close+0x70>)
 80170a6:	4817      	ldr	r0, [pc, #92]	; (8017104 <tcp_input_delayed_close+0x74>)
 80170a8:	f008 fb0a 	bl	801f6c0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80170ac:	4b16      	ldr	r3, [pc, #88]	; (8017108 <tcp_input_delayed_close+0x78>)
 80170ae:	781b      	ldrb	r3, [r3, #0]
 80170b0:	f003 0310 	and.w	r3, r3, #16
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d01c      	beq.n	80170f2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	8b5b      	ldrh	r3, [r3, #26]
 80170bc:	f003 0310 	and.w	r3, r3, #16
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d10d      	bne.n	80170e0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d008      	beq.n	80170e0 <tcp_input_delayed_close+0x50>
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80170d4:	687a      	ldr	r2, [r7, #4]
 80170d6:	6912      	ldr	r2, [r2, #16]
 80170d8:	f06f 010e 	mvn.w	r1, #14
 80170dc:	4610      	mov	r0, r2
 80170de:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80170e0:	6879      	ldr	r1, [r7, #4]
 80170e2:	480a      	ldr	r0, [pc, #40]	; (801710c <tcp_input_delayed_close+0x7c>)
 80170e4:	f7ff fa52 	bl	801658c <tcp_pcb_remove>
    tcp_free(pcb);
 80170e8:	6878      	ldr	r0, [r7, #4]
 80170ea:	f7fd fd3d 	bl	8014b68 <tcp_free>
    return 1;
 80170ee:	2301      	movs	r3, #1
 80170f0:	e000      	b.n	80170f4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80170f2:	2300      	movs	r3, #0
}
 80170f4:	4618      	mov	r0, r3
 80170f6:	3708      	adds	r7, #8
 80170f8:	46bd      	mov	sp, r7
 80170fa:	bd80      	pop	{r7, pc}
 80170fc:	08024dbc 	.word	0x08024dbc
 8017100:	08024f8c 	.word	0x08024f8c
 8017104:	08024e08 	.word	0x08024e08
 8017108:	200047a1 	.word	0x200047a1
 801710c:	2000b8d4 	.word	0x2000b8d4

08017110 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8017110:	b590      	push	{r4, r7, lr}
 8017112:	b08b      	sub	sp, #44	; 0x2c
 8017114:	af04      	add	r7, sp, #16
 8017116:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8017118:	4b6f      	ldr	r3, [pc, #444]	; (80172d8 <tcp_listen_input+0x1c8>)
 801711a:	781b      	ldrb	r3, [r3, #0]
 801711c:	f003 0304 	and.w	r3, r3, #4
 8017120:	2b00      	cmp	r3, #0
 8017122:	f040 80d2 	bne.w	80172ca <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	2b00      	cmp	r3, #0
 801712a:	d106      	bne.n	801713a <tcp_listen_input+0x2a>
 801712c:	4b6b      	ldr	r3, [pc, #428]	; (80172dc <tcp_listen_input+0x1cc>)
 801712e:	f240 2281 	movw	r2, #641	; 0x281
 8017132:	496b      	ldr	r1, [pc, #428]	; (80172e0 <tcp_listen_input+0x1d0>)
 8017134:	486b      	ldr	r0, [pc, #428]	; (80172e4 <tcp_listen_input+0x1d4>)
 8017136:	f008 fac3 	bl	801f6c0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801713a:	4b67      	ldr	r3, [pc, #412]	; (80172d8 <tcp_listen_input+0x1c8>)
 801713c:	781b      	ldrb	r3, [r3, #0]
 801713e:	f003 0310 	and.w	r3, r3, #16
 8017142:	2b00      	cmp	r3, #0
 8017144:	d019      	beq.n	801717a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017146:	4b68      	ldr	r3, [pc, #416]	; (80172e8 <tcp_listen_input+0x1d8>)
 8017148:	6819      	ldr	r1, [r3, #0]
 801714a:	4b68      	ldr	r3, [pc, #416]	; (80172ec <tcp_listen_input+0x1dc>)
 801714c:	881b      	ldrh	r3, [r3, #0]
 801714e:	461a      	mov	r2, r3
 8017150:	4b67      	ldr	r3, [pc, #412]	; (80172f0 <tcp_listen_input+0x1e0>)
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017156:	4b67      	ldr	r3, [pc, #412]	; (80172f4 <tcp_listen_input+0x1e4>)
 8017158:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801715a:	885b      	ldrh	r3, [r3, #2]
 801715c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801715e:	4a65      	ldr	r2, [pc, #404]	; (80172f4 <tcp_listen_input+0x1e4>)
 8017160:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017162:	8812      	ldrh	r2, [r2, #0]
 8017164:	b292      	uxth	r2, r2
 8017166:	9202      	str	r2, [sp, #8]
 8017168:	9301      	str	r3, [sp, #4]
 801716a:	4b63      	ldr	r3, [pc, #396]	; (80172f8 <tcp_listen_input+0x1e8>)
 801716c:	9300      	str	r3, [sp, #0]
 801716e:	4b63      	ldr	r3, [pc, #396]	; (80172fc <tcp_listen_input+0x1ec>)
 8017170:	4602      	mov	r2, r0
 8017172:	6878      	ldr	r0, [r7, #4]
 8017174:	f003 fbd6 	bl	801a924 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8017178:	e0a9      	b.n	80172ce <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801717a:	4b57      	ldr	r3, [pc, #348]	; (80172d8 <tcp_listen_input+0x1c8>)
 801717c:	781b      	ldrb	r3, [r3, #0]
 801717e:	f003 0302 	and.w	r3, r3, #2
 8017182:	2b00      	cmp	r3, #0
 8017184:	f000 80a3 	beq.w	80172ce <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	7d5b      	ldrb	r3, [r3, #21]
 801718c:	4618      	mov	r0, r3
 801718e:	f7ff f85b 	bl	8016248 <tcp_alloc>
 8017192:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8017194:	697b      	ldr	r3, [r7, #20]
 8017196:	2b00      	cmp	r3, #0
 8017198:	d111      	bne.n	80171be <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	699b      	ldr	r3, [r3, #24]
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d00a      	beq.n	80171b8 <tcp_listen_input+0xa8>
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	699b      	ldr	r3, [r3, #24]
 80171a6:	687a      	ldr	r2, [r7, #4]
 80171a8:	6910      	ldr	r0, [r2, #16]
 80171aa:	f04f 32ff 	mov.w	r2, #4294967295
 80171ae:	2100      	movs	r1, #0
 80171b0:	4798      	blx	r3
 80171b2:	4603      	mov	r3, r0
 80171b4:	73bb      	strb	r3, [r7, #14]
      return;
 80171b6:	e08b      	b.n	80172d0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80171b8:	23f0      	movs	r3, #240	; 0xf0
 80171ba:	73bb      	strb	r3, [r7, #14]
      return;
 80171bc:	e088      	b.n	80172d0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80171be:	4b50      	ldr	r3, [pc, #320]	; (8017300 <tcp_listen_input+0x1f0>)
 80171c0:	695a      	ldr	r2, [r3, #20]
 80171c2:	697b      	ldr	r3, [r7, #20]
 80171c4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80171c6:	4b4e      	ldr	r3, [pc, #312]	; (8017300 <tcp_listen_input+0x1f0>)
 80171c8:	691a      	ldr	r2, [r3, #16]
 80171ca:	697b      	ldr	r3, [r7, #20]
 80171cc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	8ada      	ldrh	r2, [r3, #22]
 80171d2:	697b      	ldr	r3, [r7, #20]
 80171d4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80171d6:	4b47      	ldr	r3, [pc, #284]	; (80172f4 <tcp_listen_input+0x1e4>)
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	881b      	ldrh	r3, [r3, #0]
 80171dc:	b29a      	uxth	r2, r3
 80171de:	697b      	ldr	r3, [r7, #20]
 80171e0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80171e2:	697b      	ldr	r3, [r7, #20]
 80171e4:	2203      	movs	r2, #3
 80171e6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80171e8:	4b41      	ldr	r3, [pc, #260]	; (80172f0 <tcp_listen_input+0x1e0>)
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	1c5a      	adds	r2, r3, #1
 80171ee:	697b      	ldr	r3, [r7, #20]
 80171f0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80171f2:	697b      	ldr	r3, [r7, #20]
 80171f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80171f6:	697b      	ldr	r3, [r7, #20]
 80171f8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80171fa:	6978      	ldr	r0, [r7, #20]
 80171fc:	f7ff fa5a 	bl	80166b4 <tcp_next_iss>
 8017200:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8017202:	697b      	ldr	r3, [r7, #20]
 8017204:	693a      	ldr	r2, [r7, #16]
 8017206:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8017208:	697b      	ldr	r3, [r7, #20]
 801720a:	693a      	ldr	r2, [r7, #16]
 801720c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801720e:	697b      	ldr	r3, [r7, #20]
 8017210:	693a      	ldr	r2, [r7, #16]
 8017212:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8017214:	697b      	ldr	r3, [r7, #20]
 8017216:	693a      	ldr	r2, [r7, #16]
 8017218:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801721a:	4b35      	ldr	r3, [pc, #212]	; (80172f0 <tcp_listen_input+0x1e0>)
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	1e5a      	subs	r2, r3, #1
 8017220:	697b      	ldr	r3, [r7, #20]
 8017222:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	691a      	ldr	r2, [r3, #16]
 8017228:	697b      	ldr	r3, [r7, #20]
 801722a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801722c:	697b      	ldr	r3, [r7, #20]
 801722e:	687a      	ldr	r2, [r7, #4]
 8017230:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	7a5b      	ldrb	r3, [r3, #9]
 8017236:	f003 030c 	and.w	r3, r3, #12
 801723a:	b2da      	uxtb	r2, r3
 801723c:	697b      	ldr	r3, [r7, #20]
 801723e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	7a1a      	ldrb	r2, [r3, #8]
 8017244:	697b      	ldr	r3, [r7, #20]
 8017246:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8017248:	4b2e      	ldr	r3, [pc, #184]	; (8017304 <tcp_listen_input+0x1f4>)
 801724a:	681a      	ldr	r2, [r3, #0]
 801724c:	697b      	ldr	r3, [r7, #20]
 801724e:	60da      	str	r2, [r3, #12]
 8017250:	4a2c      	ldr	r2, [pc, #176]	; (8017304 <tcp_listen_input+0x1f4>)
 8017252:	697b      	ldr	r3, [r7, #20]
 8017254:	6013      	str	r3, [r2, #0]
 8017256:	f003 fd27 	bl	801aca8 <tcp_timer_needed>
 801725a:	4b2b      	ldr	r3, [pc, #172]	; (8017308 <tcp_listen_input+0x1f8>)
 801725c:	2201      	movs	r2, #1
 801725e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8017260:	6978      	ldr	r0, [r7, #20]
 8017262:	f001 fd8d 	bl	8018d80 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8017266:	4b23      	ldr	r3, [pc, #140]	; (80172f4 <tcp_listen_input+0x1e4>)
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	89db      	ldrh	r3, [r3, #14]
 801726c:	b29a      	uxth	r2, r3
 801726e:	697b      	ldr	r3, [r7, #20]
 8017270:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8017274:	697b      	ldr	r3, [r7, #20]
 8017276:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801727a:	697b      	ldr	r3, [r7, #20]
 801727c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017280:	697b      	ldr	r3, [r7, #20]
 8017282:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8017284:	697b      	ldr	r3, [r7, #20]
 8017286:	3304      	adds	r3, #4
 8017288:	4618      	mov	r0, r3
 801728a:	f005 fc4b 	bl	801cb24 <ip4_route>
 801728e:	4601      	mov	r1, r0
 8017290:	697b      	ldr	r3, [r7, #20]
 8017292:	3304      	adds	r3, #4
 8017294:	461a      	mov	r2, r3
 8017296:	4620      	mov	r0, r4
 8017298:	f7ff fa32 	bl	8016700 <tcp_eff_send_mss_netif>
 801729c:	4603      	mov	r3, r0
 801729e:	461a      	mov	r2, r3
 80172a0:	697b      	ldr	r3, [r7, #20]
 80172a2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80172a4:	2112      	movs	r1, #18
 80172a6:	6978      	ldr	r0, [r7, #20]
 80172a8:	f002 fc9a 	bl	8019be0 <tcp_enqueue_flags>
 80172ac:	4603      	mov	r3, r0
 80172ae:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80172b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d004      	beq.n	80172c2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80172b8:	2100      	movs	r1, #0
 80172ba:	6978      	ldr	r0, [r7, #20]
 80172bc:	f7fd feda 	bl	8015074 <tcp_abandon>
      return;
 80172c0:	e006      	b.n	80172d0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80172c2:	6978      	ldr	r0, [r7, #20]
 80172c4:	f002 fd7a 	bl	8019dbc <tcp_output>
  return;
 80172c8:	e001      	b.n	80172ce <tcp_listen_input+0x1be>
    return;
 80172ca:	bf00      	nop
 80172cc:	e000      	b.n	80172d0 <tcp_listen_input+0x1c0>
  return;
 80172ce:	bf00      	nop
}
 80172d0:	371c      	adds	r7, #28
 80172d2:	46bd      	mov	sp, r7
 80172d4:	bd90      	pop	{r4, r7, pc}
 80172d6:	bf00      	nop
 80172d8:	200047a0 	.word	0x200047a0
 80172dc:	08024dbc 	.word	0x08024dbc
 80172e0:	08024fb4 	.word	0x08024fb4
 80172e4:	08024e08 	.word	0x08024e08
 80172e8:	20004798 	.word	0x20004798
 80172ec:	2000479e 	.word	0x2000479e
 80172f0:	20004794 	.word	0x20004794
 80172f4:	20004784 	.word	0x20004784
 80172f8:	200081d0 	.word	0x200081d0
 80172fc:	200081d4 	.word	0x200081d4
 8017300:	200081c0 	.word	0x200081c0
 8017304:	2000b8d4 	.word	0x2000b8d4
 8017308:	2000b8d0 	.word	0x2000b8d0

0801730c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801730c:	b580      	push	{r7, lr}
 801730e:	b086      	sub	sp, #24
 8017310:	af04      	add	r7, sp, #16
 8017312:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8017314:	4b2f      	ldr	r3, [pc, #188]	; (80173d4 <tcp_timewait_input+0xc8>)
 8017316:	781b      	ldrb	r3, [r3, #0]
 8017318:	f003 0304 	and.w	r3, r3, #4
 801731c:	2b00      	cmp	r3, #0
 801731e:	d153      	bne.n	80173c8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d106      	bne.n	8017334 <tcp_timewait_input+0x28>
 8017326:	4b2c      	ldr	r3, [pc, #176]	; (80173d8 <tcp_timewait_input+0xcc>)
 8017328:	f240 22ee 	movw	r2, #750	; 0x2ee
 801732c:	492b      	ldr	r1, [pc, #172]	; (80173dc <tcp_timewait_input+0xd0>)
 801732e:	482c      	ldr	r0, [pc, #176]	; (80173e0 <tcp_timewait_input+0xd4>)
 8017330:	f008 f9c6 	bl	801f6c0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8017334:	4b27      	ldr	r3, [pc, #156]	; (80173d4 <tcp_timewait_input+0xc8>)
 8017336:	781b      	ldrb	r3, [r3, #0]
 8017338:	f003 0302 	and.w	r3, r3, #2
 801733c:	2b00      	cmp	r3, #0
 801733e:	d02a      	beq.n	8017396 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8017340:	4b28      	ldr	r3, [pc, #160]	; (80173e4 <tcp_timewait_input+0xd8>)
 8017342:	681a      	ldr	r2, [r3, #0]
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017348:	1ad3      	subs	r3, r2, r3
 801734a:	2b00      	cmp	r3, #0
 801734c:	db2d      	blt.n	80173aa <tcp_timewait_input+0x9e>
 801734e:	4b25      	ldr	r3, [pc, #148]	; (80173e4 <tcp_timewait_input+0xd8>)
 8017350:	681a      	ldr	r2, [r3, #0]
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017356:	6879      	ldr	r1, [r7, #4]
 8017358:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801735a:	440b      	add	r3, r1
 801735c:	1ad3      	subs	r3, r2, r3
 801735e:	2b00      	cmp	r3, #0
 8017360:	dc23      	bgt.n	80173aa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017362:	4b21      	ldr	r3, [pc, #132]	; (80173e8 <tcp_timewait_input+0xdc>)
 8017364:	6819      	ldr	r1, [r3, #0]
 8017366:	4b21      	ldr	r3, [pc, #132]	; (80173ec <tcp_timewait_input+0xe0>)
 8017368:	881b      	ldrh	r3, [r3, #0]
 801736a:	461a      	mov	r2, r3
 801736c:	4b1d      	ldr	r3, [pc, #116]	; (80173e4 <tcp_timewait_input+0xd8>)
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017372:	4b1f      	ldr	r3, [pc, #124]	; (80173f0 <tcp_timewait_input+0xe4>)
 8017374:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017376:	885b      	ldrh	r3, [r3, #2]
 8017378:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801737a:	4a1d      	ldr	r2, [pc, #116]	; (80173f0 <tcp_timewait_input+0xe4>)
 801737c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801737e:	8812      	ldrh	r2, [r2, #0]
 8017380:	b292      	uxth	r2, r2
 8017382:	9202      	str	r2, [sp, #8]
 8017384:	9301      	str	r3, [sp, #4]
 8017386:	4b1b      	ldr	r3, [pc, #108]	; (80173f4 <tcp_timewait_input+0xe8>)
 8017388:	9300      	str	r3, [sp, #0]
 801738a:	4b1b      	ldr	r3, [pc, #108]	; (80173f8 <tcp_timewait_input+0xec>)
 801738c:	4602      	mov	r2, r0
 801738e:	6878      	ldr	r0, [r7, #4]
 8017390:	f003 fac8 	bl	801a924 <tcp_rst>
      return;
 8017394:	e01b      	b.n	80173ce <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8017396:	4b0f      	ldr	r3, [pc, #60]	; (80173d4 <tcp_timewait_input+0xc8>)
 8017398:	781b      	ldrb	r3, [r3, #0]
 801739a:	f003 0301 	and.w	r3, r3, #1
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d003      	beq.n	80173aa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80173a2:	4b16      	ldr	r3, [pc, #88]	; (80173fc <tcp_timewait_input+0xf0>)
 80173a4:	681a      	ldr	r2, [r3, #0]
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80173aa:	4b10      	ldr	r3, [pc, #64]	; (80173ec <tcp_timewait_input+0xe0>)
 80173ac:	881b      	ldrh	r3, [r3, #0]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d00c      	beq.n	80173cc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	8b5b      	ldrh	r3, [r3, #26]
 80173b6:	f043 0302 	orr.w	r3, r3, #2
 80173ba:	b29a      	uxth	r2, r3
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80173c0:	6878      	ldr	r0, [r7, #4]
 80173c2:	f002 fcfb 	bl	8019dbc <tcp_output>
  }
  return;
 80173c6:	e001      	b.n	80173cc <tcp_timewait_input+0xc0>
    return;
 80173c8:	bf00      	nop
 80173ca:	e000      	b.n	80173ce <tcp_timewait_input+0xc2>
  return;
 80173cc:	bf00      	nop
}
 80173ce:	3708      	adds	r7, #8
 80173d0:	46bd      	mov	sp, r7
 80173d2:	bd80      	pop	{r7, pc}
 80173d4:	200047a0 	.word	0x200047a0
 80173d8:	08024dbc 	.word	0x08024dbc
 80173dc:	08024fd4 	.word	0x08024fd4
 80173e0:	08024e08 	.word	0x08024e08
 80173e4:	20004794 	.word	0x20004794
 80173e8:	20004798 	.word	0x20004798
 80173ec:	2000479e 	.word	0x2000479e
 80173f0:	20004784 	.word	0x20004784
 80173f4:	200081d0 	.word	0x200081d0
 80173f8:	200081d4 	.word	0x200081d4
 80173fc:	2000b8d8 	.word	0x2000b8d8

08017400 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8017400:	b590      	push	{r4, r7, lr}
 8017402:	b08d      	sub	sp, #52	; 0x34
 8017404:	af04      	add	r7, sp, #16
 8017406:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8017408:	2300      	movs	r3, #0
 801740a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801740c:	2300      	movs	r3, #0
 801740e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	2b00      	cmp	r3, #0
 8017414:	d106      	bne.n	8017424 <tcp_process+0x24>
 8017416:	4ba5      	ldr	r3, [pc, #660]	; (80176ac <tcp_process+0x2ac>)
 8017418:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801741c:	49a4      	ldr	r1, [pc, #656]	; (80176b0 <tcp_process+0x2b0>)
 801741e:	48a5      	ldr	r0, [pc, #660]	; (80176b4 <tcp_process+0x2b4>)
 8017420:	f008 f94e 	bl	801f6c0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8017424:	4ba4      	ldr	r3, [pc, #656]	; (80176b8 <tcp_process+0x2b8>)
 8017426:	781b      	ldrb	r3, [r3, #0]
 8017428:	f003 0304 	and.w	r3, r3, #4
 801742c:	2b00      	cmp	r3, #0
 801742e:	d04e      	beq.n	80174ce <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	7d1b      	ldrb	r3, [r3, #20]
 8017434:	2b02      	cmp	r3, #2
 8017436:	d108      	bne.n	801744a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801743c:	4b9f      	ldr	r3, [pc, #636]	; (80176bc <tcp_process+0x2bc>)
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	429a      	cmp	r2, r3
 8017442:	d123      	bne.n	801748c <tcp_process+0x8c>
        acceptable = 1;
 8017444:	2301      	movs	r3, #1
 8017446:	76fb      	strb	r3, [r7, #27]
 8017448:	e020      	b.n	801748c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801744e:	4b9c      	ldr	r3, [pc, #624]	; (80176c0 <tcp_process+0x2c0>)
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	429a      	cmp	r2, r3
 8017454:	d102      	bne.n	801745c <tcp_process+0x5c>
        acceptable = 1;
 8017456:	2301      	movs	r3, #1
 8017458:	76fb      	strb	r3, [r7, #27]
 801745a:	e017      	b.n	801748c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801745c:	4b98      	ldr	r3, [pc, #608]	; (80176c0 <tcp_process+0x2c0>)
 801745e:	681a      	ldr	r2, [r3, #0]
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017464:	1ad3      	subs	r3, r2, r3
 8017466:	2b00      	cmp	r3, #0
 8017468:	db10      	blt.n	801748c <tcp_process+0x8c>
 801746a:	4b95      	ldr	r3, [pc, #596]	; (80176c0 <tcp_process+0x2c0>)
 801746c:	681a      	ldr	r2, [r3, #0]
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017472:	6879      	ldr	r1, [r7, #4]
 8017474:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017476:	440b      	add	r3, r1
 8017478:	1ad3      	subs	r3, r2, r3
 801747a:	2b00      	cmp	r3, #0
 801747c:	dc06      	bgt.n	801748c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	8b5b      	ldrh	r3, [r3, #26]
 8017482:	f043 0302 	orr.w	r3, r3, #2
 8017486:	b29a      	uxth	r2, r3
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801748c:	7efb      	ldrb	r3, [r7, #27]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d01b      	beq.n	80174ca <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	7d1b      	ldrb	r3, [r3, #20]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d106      	bne.n	80174a8 <tcp_process+0xa8>
 801749a:	4b84      	ldr	r3, [pc, #528]	; (80176ac <tcp_process+0x2ac>)
 801749c:	f44f 724e 	mov.w	r2, #824	; 0x338
 80174a0:	4988      	ldr	r1, [pc, #544]	; (80176c4 <tcp_process+0x2c4>)
 80174a2:	4884      	ldr	r0, [pc, #528]	; (80176b4 <tcp_process+0x2b4>)
 80174a4:	f008 f90c 	bl	801f6c0 <iprintf>
      recv_flags |= TF_RESET;
 80174a8:	4b87      	ldr	r3, [pc, #540]	; (80176c8 <tcp_process+0x2c8>)
 80174aa:	781b      	ldrb	r3, [r3, #0]
 80174ac:	f043 0308 	orr.w	r3, r3, #8
 80174b0:	b2da      	uxtb	r2, r3
 80174b2:	4b85      	ldr	r3, [pc, #532]	; (80176c8 <tcp_process+0x2c8>)
 80174b4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	8b5b      	ldrh	r3, [r3, #26]
 80174ba:	f023 0301 	bic.w	r3, r3, #1
 80174be:	b29a      	uxth	r2, r3
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80174c4:	f06f 030d 	mvn.w	r3, #13
 80174c8:	e37a      	b.n	8017bc0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80174ca:	2300      	movs	r3, #0
 80174cc:	e378      	b.n	8017bc0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80174ce:	4b7a      	ldr	r3, [pc, #488]	; (80176b8 <tcp_process+0x2b8>)
 80174d0:	781b      	ldrb	r3, [r3, #0]
 80174d2:	f003 0302 	and.w	r3, r3, #2
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d010      	beq.n	80174fc <tcp_process+0xfc>
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	7d1b      	ldrb	r3, [r3, #20]
 80174de:	2b02      	cmp	r3, #2
 80174e0:	d00c      	beq.n	80174fc <tcp_process+0xfc>
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	7d1b      	ldrb	r3, [r3, #20]
 80174e6:	2b03      	cmp	r3, #3
 80174e8:	d008      	beq.n	80174fc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	8b5b      	ldrh	r3, [r3, #26]
 80174ee:	f043 0302 	orr.w	r3, r3, #2
 80174f2:	b29a      	uxth	r2, r3
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80174f8:	2300      	movs	r3, #0
 80174fa:	e361      	b.n	8017bc0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	8b5b      	ldrh	r3, [r3, #26]
 8017500:	f003 0310 	and.w	r3, r3, #16
 8017504:	2b00      	cmp	r3, #0
 8017506:	d103      	bne.n	8017510 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8017508:	4b70      	ldr	r3, [pc, #448]	; (80176cc <tcp_process+0x2cc>)
 801750a:	681a      	ldr	r2, [r3, #0]
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	2200      	movs	r2, #0
 8017514:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	2200      	movs	r2, #0
 801751c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8017520:	6878      	ldr	r0, [r7, #4]
 8017522:	f001 fc2d 	bl	8018d80 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	7d1b      	ldrb	r3, [r3, #20]
 801752a:	3b02      	subs	r3, #2
 801752c:	2b07      	cmp	r3, #7
 801752e:	f200 8337 	bhi.w	8017ba0 <tcp_process+0x7a0>
 8017532:	a201      	add	r2, pc, #4	; (adr r2, 8017538 <tcp_process+0x138>)
 8017534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017538:	08017559 	.word	0x08017559
 801753c:	08017789 	.word	0x08017789
 8017540:	08017901 	.word	0x08017901
 8017544:	0801792b 	.word	0x0801792b
 8017548:	08017a4f 	.word	0x08017a4f
 801754c:	08017901 	.word	0x08017901
 8017550:	08017adb 	.word	0x08017adb
 8017554:	08017b6b 	.word	0x08017b6b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8017558:	4b57      	ldr	r3, [pc, #348]	; (80176b8 <tcp_process+0x2b8>)
 801755a:	781b      	ldrb	r3, [r3, #0]
 801755c:	f003 0310 	and.w	r3, r3, #16
 8017560:	2b00      	cmp	r3, #0
 8017562:	f000 80e4 	beq.w	801772e <tcp_process+0x32e>
 8017566:	4b54      	ldr	r3, [pc, #336]	; (80176b8 <tcp_process+0x2b8>)
 8017568:	781b      	ldrb	r3, [r3, #0]
 801756a:	f003 0302 	and.w	r3, r3, #2
 801756e:	2b00      	cmp	r3, #0
 8017570:	f000 80dd 	beq.w	801772e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017578:	1c5a      	adds	r2, r3, #1
 801757a:	4b50      	ldr	r3, [pc, #320]	; (80176bc <tcp_process+0x2bc>)
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	429a      	cmp	r2, r3
 8017580:	f040 80d5 	bne.w	801772e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8017584:	4b4e      	ldr	r3, [pc, #312]	; (80176c0 <tcp_process+0x2c0>)
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	1c5a      	adds	r2, r3, #1
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8017596:	4b49      	ldr	r3, [pc, #292]	; (80176bc <tcp_process+0x2bc>)
 8017598:	681a      	ldr	r2, [r3, #0]
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801759e:	4b4c      	ldr	r3, [pc, #304]	; (80176d0 <tcp_process+0x2d0>)
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	89db      	ldrh	r3, [r3, #14]
 80175a4:	b29a      	uxth	r2, r3
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80175b8:	4b41      	ldr	r3, [pc, #260]	; (80176c0 <tcp_process+0x2c0>)
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	1e5a      	subs	r2, r3, #1
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	2204      	movs	r2, #4
 80175c6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	3304      	adds	r3, #4
 80175d0:	4618      	mov	r0, r3
 80175d2:	f005 faa7 	bl	801cb24 <ip4_route>
 80175d6:	4601      	mov	r1, r0
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	3304      	adds	r3, #4
 80175dc:	461a      	mov	r2, r3
 80175de:	4620      	mov	r0, r4
 80175e0:	f7ff f88e 	bl	8016700 <tcp_eff_send_mss_netif>
 80175e4:	4603      	mov	r3, r0
 80175e6:	461a      	mov	r2, r3
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80175f0:	009a      	lsls	r2, r3, #2
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80175f6:	005b      	lsls	r3, r3, #1
 80175f8:	f241 111c 	movw	r1, #4380	; 0x111c
 80175fc:	428b      	cmp	r3, r1
 80175fe:	bf38      	it	cc
 8017600:	460b      	movcc	r3, r1
 8017602:	429a      	cmp	r2, r3
 8017604:	d204      	bcs.n	8017610 <tcp_process+0x210>
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801760a:	009b      	lsls	r3, r3, #2
 801760c:	b29b      	uxth	r3, r3
 801760e:	e00d      	b.n	801762c <tcp_process+0x22c>
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017614:	005b      	lsls	r3, r3, #1
 8017616:	f241 121c 	movw	r2, #4380	; 0x111c
 801761a:	4293      	cmp	r3, r2
 801761c:	d904      	bls.n	8017628 <tcp_process+0x228>
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017622:	005b      	lsls	r3, r3, #1
 8017624:	b29b      	uxth	r3, r3
 8017626:	e001      	b.n	801762c <tcp_process+0x22c>
 8017628:	f241 131c 	movw	r3, #4380	; 0x111c
 801762c:	687a      	ldr	r2, [r7, #4]
 801762e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017638:	2b00      	cmp	r3, #0
 801763a:	d106      	bne.n	801764a <tcp_process+0x24a>
 801763c:	4b1b      	ldr	r3, [pc, #108]	; (80176ac <tcp_process+0x2ac>)
 801763e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8017642:	4924      	ldr	r1, [pc, #144]	; (80176d4 <tcp_process+0x2d4>)
 8017644:	481b      	ldr	r0, [pc, #108]	; (80176b4 <tcp_process+0x2b4>)
 8017646:	f008 f83b 	bl	801f6c0 <iprintf>
        --pcb->snd_queuelen;
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017650:	3b01      	subs	r3, #1
 8017652:	b29a      	uxth	r2, r3
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801765e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8017660:	69fb      	ldr	r3, [r7, #28]
 8017662:	2b00      	cmp	r3, #0
 8017664:	d111      	bne.n	801768a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801766a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801766c:	69fb      	ldr	r3, [r7, #28]
 801766e:	2b00      	cmp	r3, #0
 8017670:	d106      	bne.n	8017680 <tcp_process+0x280>
 8017672:	4b0e      	ldr	r3, [pc, #56]	; (80176ac <tcp_process+0x2ac>)
 8017674:	f44f 725d 	mov.w	r2, #884	; 0x374
 8017678:	4917      	ldr	r1, [pc, #92]	; (80176d8 <tcp_process+0x2d8>)
 801767a:	480e      	ldr	r0, [pc, #56]	; (80176b4 <tcp_process+0x2b4>)
 801767c:	f008 f820 	bl	801f6c0 <iprintf>
          pcb->unsent = rseg->next;
 8017680:	69fb      	ldr	r3, [r7, #28]
 8017682:	681a      	ldr	r2, [r3, #0]
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	66da      	str	r2, [r3, #108]	; 0x6c
 8017688:	e003      	b.n	8017692 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801768a:	69fb      	ldr	r3, [r7, #28]
 801768c:	681a      	ldr	r2, [r3, #0]
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8017692:	69f8      	ldr	r0, [r7, #28]
 8017694:	f7fe fc51 	bl	8015f3a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801769c:	2b00      	cmp	r3, #0
 801769e:	d11d      	bne.n	80176dc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80176a6:	861a      	strh	r2, [r3, #48]	; 0x30
 80176a8:	e01f      	b.n	80176ea <tcp_process+0x2ea>
 80176aa:	bf00      	nop
 80176ac:	08024dbc 	.word	0x08024dbc
 80176b0:	08024ff4 	.word	0x08024ff4
 80176b4:	08024e08 	.word	0x08024e08
 80176b8:	200047a0 	.word	0x200047a0
 80176bc:	20004798 	.word	0x20004798
 80176c0:	20004794 	.word	0x20004794
 80176c4:	08025010 	.word	0x08025010
 80176c8:	200047a1 	.word	0x200047a1
 80176cc:	2000b8d8 	.word	0x2000b8d8
 80176d0:	20004784 	.word	0x20004784
 80176d4:	08025030 	.word	0x08025030
 80176d8:	08025048 	.word	0x08025048
        } else {
          pcb->rtime = 0;
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	2200      	movs	r2, #0
 80176e0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	2200      	movs	r2, #0
 80176e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d00a      	beq.n	801770a <tcp_process+0x30a>
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80176fa:	687a      	ldr	r2, [r7, #4]
 80176fc:	6910      	ldr	r0, [r2, #16]
 80176fe:	2200      	movs	r2, #0
 8017700:	6879      	ldr	r1, [r7, #4]
 8017702:	4798      	blx	r3
 8017704:	4603      	mov	r3, r0
 8017706:	76bb      	strb	r3, [r7, #26]
 8017708:	e001      	b.n	801770e <tcp_process+0x30e>
 801770a:	2300      	movs	r3, #0
 801770c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801770e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017712:	f113 0f0d 	cmn.w	r3, #13
 8017716:	d102      	bne.n	801771e <tcp_process+0x31e>
          return ERR_ABRT;
 8017718:	f06f 030c 	mvn.w	r3, #12
 801771c:	e250      	b.n	8017bc0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	8b5b      	ldrh	r3, [r3, #26]
 8017722:	f043 0302 	orr.w	r3, r3, #2
 8017726:	b29a      	uxth	r2, r3
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801772c:	e23a      	b.n	8017ba4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801772e:	4b9d      	ldr	r3, [pc, #628]	; (80179a4 <tcp_process+0x5a4>)
 8017730:	781b      	ldrb	r3, [r3, #0]
 8017732:	f003 0310 	and.w	r3, r3, #16
 8017736:	2b00      	cmp	r3, #0
 8017738:	f000 8234 	beq.w	8017ba4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801773c:	4b9a      	ldr	r3, [pc, #616]	; (80179a8 <tcp_process+0x5a8>)
 801773e:	6819      	ldr	r1, [r3, #0]
 8017740:	4b9a      	ldr	r3, [pc, #616]	; (80179ac <tcp_process+0x5ac>)
 8017742:	881b      	ldrh	r3, [r3, #0]
 8017744:	461a      	mov	r2, r3
 8017746:	4b9a      	ldr	r3, [pc, #616]	; (80179b0 <tcp_process+0x5b0>)
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801774c:	4b99      	ldr	r3, [pc, #612]	; (80179b4 <tcp_process+0x5b4>)
 801774e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017750:	885b      	ldrh	r3, [r3, #2]
 8017752:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017754:	4a97      	ldr	r2, [pc, #604]	; (80179b4 <tcp_process+0x5b4>)
 8017756:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017758:	8812      	ldrh	r2, [r2, #0]
 801775a:	b292      	uxth	r2, r2
 801775c:	9202      	str	r2, [sp, #8]
 801775e:	9301      	str	r3, [sp, #4]
 8017760:	4b95      	ldr	r3, [pc, #596]	; (80179b8 <tcp_process+0x5b8>)
 8017762:	9300      	str	r3, [sp, #0]
 8017764:	4b95      	ldr	r3, [pc, #596]	; (80179bc <tcp_process+0x5bc>)
 8017766:	4602      	mov	r2, r0
 8017768:	6878      	ldr	r0, [r7, #4]
 801776a:	f003 f8db 	bl	801a924 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017774:	2b05      	cmp	r3, #5
 8017776:	f200 8215 	bhi.w	8017ba4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	2200      	movs	r2, #0
 801777e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8017780:	6878      	ldr	r0, [r7, #4]
 8017782:	f002 fea5 	bl	801a4d0 <tcp_rexmit_rto>
      break;
 8017786:	e20d      	b.n	8017ba4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017788:	4b86      	ldr	r3, [pc, #536]	; (80179a4 <tcp_process+0x5a4>)
 801778a:	781b      	ldrb	r3, [r3, #0]
 801778c:	f003 0310 	and.w	r3, r3, #16
 8017790:	2b00      	cmp	r3, #0
 8017792:	f000 80a1 	beq.w	80178d8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017796:	4b84      	ldr	r3, [pc, #528]	; (80179a8 <tcp_process+0x5a8>)
 8017798:	681a      	ldr	r2, [r3, #0]
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801779e:	1ad3      	subs	r3, r2, r3
 80177a0:	3b01      	subs	r3, #1
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	db7e      	blt.n	80178a4 <tcp_process+0x4a4>
 80177a6:	4b80      	ldr	r3, [pc, #512]	; (80179a8 <tcp_process+0x5a8>)
 80177a8:	681a      	ldr	r2, [r3, #0]
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80177ae:	1ad3      	subs	r3, r2, r3
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	dc77      	bgt.n	80178a4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	2204      	movs	r2, #4
 80177b8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d102      	bne.n	80177c8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80177c2:	23fa      	movs	r3, #250	; 0xfa
 80177c4:	76bb      	strb	r3, [r7, #26]
 80177c6:	e01d      	b.n	8017804 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80177cc:	699b      	ldr	r3, [r3, #24]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d106      	bne.n	80177e0 <tcp_process+0x3e0>
 80177d2:	4b7b      	ldr	r3, [pc, #492]	; (80179c0 <tcp_process+0x5c0>)
 80177d4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80177d8:	497a      	ldr	r1, [pc, #488]	; (80179c4 <tcp_process+0x5c4>)
 80177da:	487b      	ldr	r0, [pc, #492]	; (80179c8 <tcp_process+0x5c8>)
 80177dc:	f007 ff70 	bl	801f6c0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80177e4:	699b      	ldr	r3, [r3, #24]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d00a      	beq.n	8017800 <tcp_process+0x400>
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80177ee:	699b      	ldr	r3, [r3, #24]
 80177f0:	687a      	ldr	r2, [r7, #4]
 80177f2:	6910      	ldr	r0, [r2, #16]
 80177f4:	2200      	movs	r2, #0
 80177f6:	6879      	ldr	r1, [r7, #4]
 80177f8:	4798      	blx	r3
 80177fa:	4603      	mov	r3, r0
 80177fc:	76bb      	strb	r3, [r7, #26]
 80177fe:	e001      	b.n	8017804 <tcp_process+0x404>
 8017800:	23f0      	movs	r3, #240	; 0xf0
 8017802:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8017804:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017808:	2b00      	cmp	r3, #0
 801780a:	d00a      	beq.n	8017822 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801780c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017810:	f113 0f0d 	cmn.w	r3, #13
 8017814:	d002      	beq.n	801781c <tcp_process+0x41c>
              tcp_abort(pcb);
 8017816:	6878      	ldr	r0, [r7, #4]
 8017818:	f7fd fcea 	bl	80151f0 <tcp_abort>
            }
            return ERR_ABRT;
 801781c:	f06f 030c 	mvn.w	r3, #12
 8017820:	e1ce      	b.n	8017bc0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8017822:	6878      	ldr	r0, [r7, #4]
 8017824:	f000 fae0 	bl	8017de8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017828:	4b68      	ldr	r3, [pc, #416]	; (80179cc <tcp_process+0x5cc>)
 801782a:	881b      	ldrh	r3, [r3, #0]
 801782c:	2b00      	cmp	r3, #0
 801782e:	d005      	beq.n	801783c <tcp_process+0x43c>
            recv_acked--;
 8017830:	4b66      	ldr	r3, [pc, #408]	; (80179cc <tcp_process+0x5cc>)
 8017832:	881b      	ldrh	r3, [r3, #0]
 8017834:	3b01      	subs	r3, #1
 8017836:	b29a      	uxth	r2, r3
 8017838:	4b64      	ldr	r3, [pc, #400]	; (80179cc <tcp_process+0x5cc>)
 801783a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017840:	009a      	lsls	r2, r3, #2
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017846:	005b      	lsls	r3, r3, #1
 8017848:	f241 111c 	movw	r1, #4380	; 0x111c
 801784c:	428b      	cmp	r3, r1
 801784e:	bf38      	it	cc
 8017850:	460b      	movcc	r3, r1
 8017852:	429a      	cmp	r2, r3
 8017854:	d204      	bcs.n	8017860 <tcp_process+0x460>
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801785a:	009b      	lsls	r3, r3, #2
 801785c:	b29b      	uxth	r3, r3
 801785e:	e00d      	b.n	801787c <tcp_process+0x47c>
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017864:	005b      	lsls	r3, r3, #1
 8017866:	f241 121c 	movw	r2, #4380	; 0x111c
 801786a:	4293      	cmp	r3, r2
 801786c:	d904      	bls.n	8017878 <tcp_process+0x478>
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017872:	005b      	lsls	r3, r3, #1
 8017874:	b29b      	uxth	r3, r3
 8017876:	e001      	b.n	801787c <tcp_process+0x47c>
 8017878:	f241 131c 	movw	r3, #4380	; 0x111c
 801787c:	687a      	ldr	r2, [r7, #4]
 801787e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8017882:	4b53      	ldr	r3, [pc, #332]	; (80179d0 <tcp_process+0x5d0>)
 8017884:	781b      	ldrb	r3, [r3, #0]
 8017886:	f003 0320 	and.w	r3, r3, #32
 801788a:	2b00      	cmp	r3, #0
 801788c:	d037      	beq.n	80178fe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	8b5b      	ldrh	r3, [r3, #26]
 8017892:	f043 0302 	orr.w	r3, r3, #2
 8017896:	b29a      	uxth	r2, r3
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	2207      	movs	r2, #7
 80178a0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80178a2:	e02c      	b.n	80178fe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80178a4:	4b40      	ldr	r3, [pc, #256]	; (80179a8 <tcp_process+0x5a8>)
 80178a6:	6819      	ldr	r1, [r3, #0]
 80178a8:	4b40      	ldr	r3, [pc, #256]	; (80179ac <tcp_process+0x5ac>)
 80178aa:	881b      	ldrh	r3, [r3, #0]
 80178ac:	461a      	mov	r2, r3
 80178ae:	4b40      	ldr	r3, [pc, #256]	; (80179b0 <tcp_process+0x5b0>)
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80178b4:	4b3f      	ldr	r3, [pc, #252]	; (80179b4 <tcp_process+0x5b4>)
 80178b6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80178b8:	885b      	ldrh	r3, [r3, #2]
 80178ba:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80178bc:	4a3d      	ldr	r2, [pc, #244]	; (80179b4 <tcp_process+0x5b4>)
 80178be:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80178c0:	8812      	ldrh	r2, [r2, #0]
 80178c2:	b292      	uxth	r2, r2
 80178c4:	9202      	str	r2, [sp, #8]
 80178c6:	9301      	str	r3, [sp, #4]
 80178c8:	4b3b      	ldr	r3, [pc, #236]	; (80179b8 <tcp_process+0x5b8>)
 80178ca:	9300      	str	r3, [sp, #0]
 80178cc:	4b3b      	ldr	r3, [pc, #236]	; (80179bc <tcp_process+0x5bc>)
 80178ce:	4602      	mov	r2, r0
 80178d0:	6878      	ldr	r0, [r7, #4]
 80178d2:	f003 f827 	bl	801a924 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80178d6:	e167      	b.n	8017ba8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80178d8:	4b32      	ldr	r3, [pc, #200]	; (80179a4 <tcp_process+0x5a4>)
 80178da:	781b      	ldrb	r3, [r3, #0]
 80178dc:	f003 0302 	and.w	r3, r3, #2
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	f000 8161 	beq.w	8017ba8 <tcp_process+0x7a8>
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178ea:	1e5a      	subs	r2, r3, #1
 80178ec:	4b30      	ldr	r3, [pc, #192]	; (80179b0 <tcp_process+0x5b0>)
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	429a      	cmp	r2, r3
 80178f2:	f040 8159 	bne.w	8017ba8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80178f6:	6878      	ldr	r0, [r7, #4]
 80178f8:	f002 fe0c 	bl	801a514 <tcp_rexmit>
      break;
 80178fc:	e154      	b.n	8017ba8 <tcp_process+0x7a8>
 80178fe:	e153      	b.n	8017ba8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8017900:	6878      	ldr	r0, [r7, #4]
 8017902:	f000 fa71 	bl	8017de8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8017906:	4b32      	ldr	r3, [pc, #200]	; (80179d0 <tcp_process+0x5d0>)
 8017908:	781b      	ldrb	r3, [r3, #0]
 801790a:	f003 0320 	and.w	r3, r3, #32
 801790e:	2b00      	cmp	r3, #0
 8017910:	f000 814c 	beq.w	8017bac <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	8b5b      	ldrh	r3, [r3, #26]
 8017918:	f043 0302 	orr.w	r3, r3, #2
 801791c:	b29a      	uxth	r2, r3
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	2207      	movs	r2, #7
 8017926:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017928:	e140      	b.n	8017bac <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801792a:	6878      	ldr	r0, [r7, #4]
 801792c:	f000 fa5c 	bl	8017de8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017930:	4b27      	ldr	r3, [pc, #156]	; (80179d0 <tcp_process+0x5d0>)
 8017932:	781b      	ldrb	r3, [r3, #0]
 8017934:	f003 0320 	and.w	r3, r3, #32
 8017938:	2b00      	cmp	r3, #0
 801793a:	d071      	beq.n	8017a20 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801793c:	4b19      	ldr	r3, [pc, #100]	; (80179a4 <tcp_process+0x5a4>)
 801793e:	781b      	ldrb	r3, [r3, #0]
 8017940:	f003 0310 	and.w	r3, r3, #16
 8017944:	2b00      	cmp	r3, #0
 8017946:	d060      	beq.n	8017a0a <tcp_process+0x60a>
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801794c:	4b16      	ldr	r3, [pc, #88]	; (80179a8 <tcp_process+0x5a8>)
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	429a      	cmp	r2, r3
 8017952:	d15a      	bne.n	8017a0a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017958:	2b00      	cmp	r3, #0
 801795a:	d156      	bne.n	8017a0a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	8b5b      	ldrh	r3, [r3, #26]
 8017960:	f043 0302 	orr.w	r3, r3, #2
 8017964:	b29a      	uxth	r2, r3
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801796a:	6878      	ldr	r0, [r7, #4]
 801796c:	f7fe fdbe 	bl	80164ec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8017970:	4b18      	ldr	r3, [pc, #96]	; (80179d4 <tcp_process+0x5d4>)
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	687a      	ldr	r2, [r7, #4]
 8017976:	429a      	cmp	r2, r3
 8017978:	d105      	bne.n	8017986 <tcp_process+0x586>
 801797a:	4b16      	ldr	r3, [pc, #88]	; (80179d4 <tcp_process+0x5d4>)
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	68db      	ldr	r3, [r3, #12]
 8017980:	4a14      	ldr	r2, [pc, #80]	; (80179d4 <tcp_process+0x5d4>)
 8017982:	6013      	str	r3, [r2, #0]
 8017984:	e02e      	b.n	80179e4 <tcp_process+0x5e4>
 8017986:	4b13      	ldr	r3, [pc, #76]	; (80179d4 <tcp_process+0x5d4>)
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	617b      	str	r3, [r7, #20]
 801798c:	e027      	b.n	80179de <tcp_process+0x5de>
 801798e:	697b      	ldr	r3, [r7, #20]
 8017990:	68db      	ldr	r3, [r3, #12]
 8017992:	687a      	ldr	r2, [r7, #4]
 8017994:	429a      	cmp	r2, r3
 8017996:	d11f      	bne.n	80179d8 <tcp_process+0x5d8>
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	68da      	ldr	r2, [r3, #12]
 801799c:	697b      	ldr	r3, [r7, #20]
 801799e:	60da      	str	r2, [r3, #12]
 80179a0:	e020      	b.n	80179e4 <tcp_process+0x5e4>
 80179a2:	bf00      	nop
 80179a4:	200047a0 	.word	0x200047a0
 80179a8:	20004798 	.word	0x20004798
 80179ac:	2000479e 	.word	0x2000479e
 80179b0:	20004794 	.word	0x20004794
 80179b4:	20004784 	.word	0x20004784
 80179b8:	200081d0 	.word	0x200081d0
 80179bc:	200081d4 	.word	0x200081d4
 80179c0:	08024dbc 	.word	0x08024dbc
 80179c4:	0802505c 	.word	0x0802505c
 80179c8:	08024e08 	.word	0x08024e08
 80179cc:	2000479c 	.word	0x2000479c
 80179d0:	200047a1 	.word	0x200047a1
 80179d4:	2000b8d4 	.word	0x2000b8d4
 80179d8:	697b      	ldr	r3, [r7, #20]
 80179da:	68db      	ldr	r3, [r3, #12]
 80179dc:	617b      	str	r3, [r7, #20]
 80179de:	697b      	ldr	r3, [r7, #20]
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d1d4      	bne.n	801798e <tcp_process+0x58e>
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	2200      	movs	r2, #0
 80179e8:	60da      	str	r2, [r3, #12]
 80179ea:	4b77      	ldr	r3, [pc, #476]	; (8017bc8 <tcp_process+0x7c8>)
 80179ec:	2201      	movs	r2, #1
 80179ee:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	220a      	movs	r2, #10
 80179f4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80179f6:	4b75      	ldr	r3, [pc, #468]	; (8017bcc <tcp_process+0x7cc>)
 80179f8:	681a      	ldr	r2, [r3, #0]
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	60da      	str	r2, [r3, #12]
 80179fe:	4a73      	ldr	r2, [pc, #460]	; (8017bcc <tcp_process+0x7cc>)
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	6013      	str	r3, [r2, #0]
 8017a04:	f003 f950 	bl	801aca8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8017a08:	e0d2      	b.n	8017bb0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	8b5b      	ldrh	r3, [r3, #26]
 8017a0e:	f043 0302 	orr.w	r3, r3, #2
 8017a12:	b29a      	uxth	r2, r3
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	2208      	movs	r2, #8
 8017a1c:	751a      	strb	r2, [r3, #20]
      break;
 8017a1e:	e0c7      	b.n	8017bb0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017a20:	4b6b      	ldr	r3, [pc, #428]	; (8017bd0 <tcp_process+0x7d0>)
 8017a22:	781b      	ldrb	r3, [r3, #0]
 8017a24:	f003 0310 	and.w	r3, r3, #16
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	f000 80c1 	beq.w	8017bb0 <tcp_process+0x7b0>
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017a32:	4b68      	ldr	r3, [pc, #416]	; (8017bd4 <tcp_process+0x7d4>)
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	429a      	cmp	r2, r3
 8017a38:	f040 80ba 	bne.w	8017bb0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	f040 80b5 	bne.w	8017bb0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	2206      	movs	r2, #6
 8017a4a:	751a      	strb	r2, [r3, #20]
      break;
 8017a4c:	e0b0      	b.n	8017bb0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8017a4e:	6878      	ldr	r0, [r7, #4]
 8017a50:	f000 f9ca 	bl	8017de8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017a54:	4b60      	ldr	r3, [pc, #384]	; (8017bd8 <tcp_process+0x7d8>)
 8017a56:	781b      	ldrb	r3, [r3, #0]
 8017a58:	f003 0320 	and.w	r3, r3, #32
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	f000 80a9 	beq.w	8017bb4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	8b5b      	ldrh	r3, [r3, #26]
 8017a66:	f043 0302 	orr.w	r3, r3, #2
 8017a6a:	b29a      	uxth	r2, r3
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8017a70:	6878      	ldr	r0, [r7, #4]
 8017a72:	f7fe fd3b 	bl	80164ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017a76:	4b59      	ldr	r3, [pc, #356]	; (8017bdc <tcp_process+0x7dc>)
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	687a      	ldr	r2, [r7, #4]
 8017a7c:	429a      	cmp	r2, r3
 8017a7e:	d105      	bne.n	8017a8c <tcp_process+0x68c>
 8017a80:	4b56      	ldr	r3, [pc, #344]	; (8017bdc <tcp_process+0x7dc>)
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	68db      	ldr	r3, [r3, #12]
 8017a86:	4a55      	ldr	r2, [pc, #340]	; (8017bdc <tcp_process+0x7dc>)
 8017a88:	6013      	str	r3, [r2, #0]
 8017a8a:	e013      	b.n	8017ab4 <tcp_process+0x6b4>
 8017a8c:	4b53      	ldr	r3, [pc, #332]	; (8017bdc <tcp_process+0x7dc>)
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	613b      	str	r3, [r7, #16]
 8017a92:	e00c      	b.n	8017aae <tcp_process+0x6ae>
 8017a94:	693b      	ldr	r3, [r7, #16]
 8017a96:	68db      	ldr	r3, [r3, #12]
 8017a98:	687a      	ldr	r2, [r7, #4]
 8017a9a:	429a      	cmp	r2, r3
 8017a9c:	d104      	bne.n	8017aa8 <tcp_process+0x6a8>
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	68da      	ldr	r2, [r3, #12]
 8017aa2:	693b      	ldr	r3, [r7, #16]
 8017aa4:	60da      	str	r2, [r3, #12]
 8017aa6:	e005      	b.n	8017ab4 <tcp_process+0x6b4>
 8017aa8:	693b      	ldr	r3, [r7, #16]
 8017aaa:	68db      	ldr	r3, [r3, #12]
 8017aac:	613b      	str	r3, [r7, #16]
 8017aae:	693b      	ldr	r3, [r7, #16]
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d1ef      	bne.n	8017a94 <tcp_process+0x694>
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	60da      	str	r2, [r3, #12]
 8017aba:	4b43      	ldr	r3, [pc, #268]	; (8017bc8 <tcp_process+0x7c8>)
 8017abc:	2201      	movs	r2, #1
 8017abe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	220a      	movs	r2, #10
 8017ac4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017ac6:	4b41      	ldr	r3, [pc, #260]	; (8017bcc <tcp_process+0x7cc>)
 8017ac8:	681a      	ldr	r2, [r3, #0]
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	60da      	str	r2, [r3, #12]
 8017ace:	4a3f      	ldr	r2, [pc, #252]	; (8017bcc <tcp_process+0x7cc>)
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	6013      	str	r3, [r2, #0]
 8017ad4:	f003 f8e8 	bl	801aca8 <tcp_timer_needed>
      }
      break;
 8017ad8:	e06c      	b.n	8017bb4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8017ada:	6878      	ldr	r0, [r7, #4]
 8017adc:	f000 f984 	bl	8017de8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017ae0:	4b3b      	ldr	r3, [pc, #236]	; (8017bd0 <tcp_process+0x7d0>)
 8017ae2:	781b      	ldrb	r3, [r3, #0]
 8017ae4:	f003 0310 	and.w	r3, r3, #16
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d065      	beq.n	8017bb8 <tcp_process+0x7b8>
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017af0:	4b38      	ldr	r3, [pc, #224]	; (8017bd4 <tcp_process+0x7d4>)
 8017af2:	681b      	ldr	r3, [r3, #0]
 8017af4:	429a      	cmp	r2, r3
 8017af6:	d15f      	bne.n	8017bb8 <tcp_process+0x7b8>
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d15b      	bne.n	8017bb8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8017b00:	6878      	ldr	r0, [r7, #4]
 8017b02:	f7fe fcf3 	bl	80164ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017b06:	4b35      	ldr	r3, [pc, #212]	; (8017bdc <tcp_process+0x7dc>)
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	687a      	ldr	r2, [r7, #4]
 8017b0c:	429a      	cmp	r2, r3
 8017b0e:	d105      	bne.n	8017b1c <tcp_process+0x71c>
 8017b10:	4b32      	ldr	r3, [pc, #200]	; (8017bdc <tcp_process+0x7dc>)
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	68db      	ldr	r3, [r3, #12]
 8017b16:	4a31      	ldr	r2, [pc, #196]	; (8017bdc <tcp_process+0x7dc>)
 8017b18:	6013      	str	r3, [r2, #0]
 8017b1a:	e013      	b.n	8017b44 <tcp_process+0x744>
 8017b1c:	4b2f      	ldr	r3, [pc, #188]	; (8017bdc <tcp_process+0x7dc>)
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	60fb      	str	r3, [r7, #12]
 8017b22:	e00c      	b.n	8017b3e <tcp_process+0x73e>
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	68db      	ldr	r3, [r3, #12]
 8017b28:	687a      	ldr	r2, [r7, #4]
 8017b2a:	429a      	cmp	r2, r3
 8017b2c:	d104      	bne.n	8017b38 <tcp_process+0x738>
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	68da      	ldr	r2, [r3, #12]
 8017b32:	68fb      	ldr	r3, [r7, #12]
 8017b34:	60da      	str	r2, [r3, #12]
 8017b36:	e005      	b.n	8017b44 <tcp_process+0x744>
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	68db      	ldr	r3, [r3, #12]
 8017b3c:	60fb      	str	r3, [r7, #12]
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d1ef      	bne.n	8017b24 <tcp_process+0x724>
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	2200      	movs	r2, #0
 8017b48:	60da      	str	r2, [r3, #12]
 8017b4a:	4b1f      	ldr	r3, [pc, #124]	; (8017bc8 <tcp_process+0x7c8>)
 8017b4c:	2201      	movs	r2, #1
 8017b4e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	220a      	movs	r2, #10
 8017b54:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017b56:	4b1d      	ldr	r3, [pc, #116]	; (8017bcc <tcp_process+0x7cc>)
 8017b58:	681a      	ldr	r2, [r3, #0]
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	60da      	str	r2, [r3, #12]
 8017b5e:	4a1b      	ldr	r2, [pc, #108]	; (8017bcc <tcp_process+0x7cc>)
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	6013      	str	r3, [r2, #0]
 8017b64:	f003 f8a0 	bl	801aca8 <tcp_timer_needed>
      }
      break;
 8017b68:	e026      	b.n	8017bb8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8017b6a:	6878      	ldr	r0, [r7, #4]
 8017b6c:	f000 f93c 	bl	8017de8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017b70:	4b17      	ldr	r3, [pc, #92]	; (8017bd0 <tcp_process+0x7d0>)
 8017b72:	781b      	ldrb	r3, [r3, #0]
 8017b74:	f003 0310 	and.w	r3, r3, #16
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d01f      	beq.n	8017bbc <tcp_process+0x7bc>
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017b80:	4b14      	ldr	r3, [pc, #80]	; (8017bd4 <tcp_process+0x7d4>)
 8017b82:	681b      	ldr	r3, [r3, #0]
 8017b84:	429a      	cmp	r2, r3
 8017b86:	d119      	bne.n	8017bbc <tcp_process+0x7bc>
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d115      	bne.n	8017bbc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8017b90:	4b11      	ldr	r3, [pc, #68]	; (8017bd8 <tcp_process+0x7d8>)
 8017b92:	781b      	ldrb	r3, [r3, #0]
 8017b94:	f043 0310 	orr.w	r3, r3, #16
 8017b98:	b2da      	uxtb	r2, r3
 8017b9a:	4b0f      	ldr	r3, [pc, #60]	; (8017bd8 <tcp_process+0x7d8>)
 8017b9c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8017b9e:	e00d      	b.n	8017bbc <tcp_process+0x7bc>
    default:
      break;
 8017ba0:	bf00      	nop
 8017ba2:	e00c      	b.n	8017bbe <tcp_process+0x7be>
      break;
 8017ba4:	bf00      	nop
 8017ba6:	e00a      	b.n	8017bbe <tcp_process+0x7be>
      break;
 8017ba8:	bf00      	nop
 8017baa:	e008      	b.n	8017bbe <tcp_process+0x7be>
      break;
 8017bac:	bf00      	nop
 8017bae:	e006      	b.n	8017bbe <tcp_process+0x7be>
      break;
 8017bb0:	bf00      	nop
 8017bb2:	e004      	b.n	8017bbe <tcp_process+0x7be>
      break;
 8017bb4:	bf00      	nop
 8017bb6:	e002      	b.n	8017bbe <tcp_process+0x7be>
      break;
 8017bb8:	bf00      	nop
 8017bba:	e000      	b.n	8017bbe <tcp_process+0x7be>
      break;
 8017bbc:	bf00      	nop
  }
  return ERR_OK;
 8017bbe:	2300      	movs	r3, #0
}
 8017bc0:	4618      	mov	r0, r3
 8017bc2:	3724      	adds	r7, #36	; 0x24
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	bd90      	pop	{r4, r7, pc}
 8017bc8:	2000b8d0 	.word	0x2000b8d0
 8017bcc:	2000b8e4 	.word	0x2000b8e4
 8017bd0:	200047a0 	.word	0x200047a0
 8017bd4:	20004798 	.word	0x20004798
 8017bd8:	200047a1 	.word	0x200047a1
 8017bdc:	2000b8d4 	.word	0x2000b8d4

08017be0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8017be0:	b590      	push	{r4, r7, lr}
 8017be2:	b085      	sub	sp, #20
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	6078      	str	r0, [r7, #4]
 8017be8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d106      	bne.n	8017bfe <tcp_oos_insert_segment+0x1e>
 8017bf0:	4b3b      	ldr	r3, [pc, #236]	; (8017ce0 <tcp_oos_insert_segment+0x100>)
 8017bf2:	f240 421f 	movw	r2, #1055	; 0x41f
 8017bf6:	493b      	ldr	r1, [pc, #236]	; (8017ce4 <tcp_oos_insert_segment+0x104>)
 8017bf8:	483b      	ldr	r0, [pc, #236]	; (8017ce8 <tcp_oos_insert_segment+0x108>)
 8017bfa:	f007 fd61 	bl	801f6c0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	68db      	ldr	r3, [r3, #12]
 8017c02:	899b      	ldrh	r3, [r3, #12]
 8017c04:	b29b      	uxth	r3, r3
 8017c06:	4618      	mov	r0, r3
 8017c08:	f7fb f936 	bl	8012e78 <lwip_htons>
 8017c0c:	4603      	mov	r3, r0
 8017c0e:	b2db      	uxtb	r3, r3
 8017c10:	f003 0301 	and.w	r3, r3, #1
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d028      	beq.n	8017c6a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8017c18:	6838      	ldr	r0, [r7, #0]
 8017c1a:	f7fe f979 	bl	8015f10 <tcp_segs_free>
    next = NULL;
 8017c1e:	2300      	movs	r3, #0
 8017c20:	603b      	str	r3, [r7, #0]
 8017c22:	e056      	b.n	8017cd2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017c24:	683b      	ldr	r3, [r7, #0]
 8017c26:	68db      	ldr	r3, [r3, #12]
 8017c28:	899b      	ldrh	r3, [r3, #12]
 8017c2a:	b29b      	uxth	r3, r3
 8017c2c:	4618      	mov	r0, r3
 8017c2e:	f7fb f923 	bl	8012e78 <lwip_htons>
 8017c32:	4603      	mov	r3, r0
 8017c34:	b2db      	uxtb	r3, r3
 8017c36:	f003 0301 	and.w	r3, r3, #1
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d00d      	beq.n	8017c5a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	68db      	ldr	r3, [r3, #12]
 8017c42:	899b      	ldrh	r3, [r3, #12]
 8017c44:	b29c      	uxth	r4, r3
 8017c46:	2001      	movs	r0, #1
 8017c48:	f7fb f916 	bl	8012e78 <lwip_htons>
 8017c4c:	4603      	mov	r3, r0
 8017c4e:	461a      	mov	r2, r3
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	68db      	ldr	r3, [r3, #12]
 8017c54:	4322      	orrs	r2, r4
 8017c56:	b292      	uxth	r2, r2
 8017c58:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8017c5a:	683b      	ldr	r3, [r7, #0]
 8017c5c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8017c5e:	683b      	ldr	r3, [r7, #0]
 8017c60:	681b      	ldr	r3, [r3, #0]
 8017c62:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017c64:	68f8      	ldr	r0, [r7, #12]
 8017c66:	f7fe f968 	bl	8015f3a <tcp_seg_free>
    while (next &&
 8017c6a:	683b      	ldr	r3, [r7, #0]
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d00e      	beq.n	8017c8e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	891b      	ldrh	r3, [r3, #8]
 8017c74:	461a      	mov	r2, r3
 8017c76:	4b1d      	ldr	r3, [pc, #116]	; (8017cec <tcp_oos_insert_segment+0x10c>)
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	441a      	add	r2, r3
 8017c7c:	683b      	ldr	r3, [r7, #0]
 8017c7e:	68db      	ldr	r3, [r3, #12]
 8017c80:	685b      	ldr	r3, [r3, #4]
 8017c82:	6839      	ldr	r1, [r7, #0]
 8017c84:	8909      	ldrh	r1, [r1, #8]
 8017c86:	440b      	add	r3, r1
 8017c88:	1ad3      	subs	r3, r2, r3
    while (next &&
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	daca      	bge.n	8017c24 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8017c8e:	683b      	ldr	r3, [r7, #0]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d01e      	beq.n	8017cd2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	891b      	ldrh	r3, [r3, #8]
 8017c98:	461a      	mov	r2, r3
 8017c9a:	4b14      	ldr	r3, [pc, #80]	; (8017cec <tcp_oos_insert_segment+0x10c>)
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	441a      	add	r2, r3
 8017ca0:	683b      	ldr	r3, [r7, #0]
 8017ca2:	68db      	ldr	r3, [r3, #12]
 8017ca4:	685b      	ldr	r3, [r3, #4]
 8017ca6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	dd12      	ble.n	8017cd2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8017cac:	683b      	ldr	r3, [r7, #0]
 8017cae:	68db      	ldr	r3, [r3, #12]
 8017cb0:	685b      	ldr	r3, [r3, #4]
 8017cb2:	b29a      	uxth	r2, r3
 8017cb4:	4b0d      	ldr	r3, [pc, #52]	; (8017cec <tcp_oos_insert_segment+0x10c>)
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	b29b      	uxth	r3, r3
 8017cba:	1ad3      	subs	r3, r2, r3
 8017cbc:	b29a      	uxth	r2, r3
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	685a      	ldr	r2, [r3, #4]
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	891b      	ldrh	r3, [r3, #8]
 8017cca:	4619      	mov	r1, r3
 8017ccc:	4610      	mov	r0, r2
 8017cce:	f7fc fb09 	bl	80142e4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	683a      	ldr	r2, [r7, #0]
 8017cd6:	601a      	str	r2, [r3, #0]
}
 8017cd8:	bf00      	nop
 8017cda:	3714      	adds	r7, #20
 8017cdc:	46bd      	mov	sp, r7
 8017cde:	bd90      	pop	{r4, r7, pc}
 8017ce0:	08024dbc 	.word	0x08024dbc
 8017ce4:	0802507c 	.word	0x0802507c
 8017ce8:	08024e08 	.word	0x08024e08
 8017cec:	20004794 	.word	0x20004794

08017cf0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8017cf0:	b5b0      	push	{r4, r5, r7, lr}
 8017cf2:	b086      	sub	sp, #24
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	60f8      	str	r0, [r7, #12]
 8017cf8:	60b9      	str	r1, [r7, #8]
 8017cfa:	607a      	str	r2, [r7, #4]
 8017cfc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8017cfe:	e03e      	b.n	8017d7e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8017d00:	68bb      	ldr	r3, [r7, #8]
 8017d02:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8017d04:	68bb      	ldr	r3, [r7, #8]
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8017d0a:	697b      	ldr	r3, [r7, #20]
 8017d0c:	685b      	ldr	r3, [r3, #4]
 8017d0e:	4618      	mov	r0, r3
 8017d10:	f7fc fcfc 	bl	801470c <pbuf_clen>
 8017d14:	4603      	mov	r3, r0
 8017d16:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017d1e:	8a7a      	ldrh	r2, [r7, #18]
 8017d20:	429a      	cmp	r2, r3
 8017d22:	d906      	bls.n	8017d32 <tcp_free_acked_segments+0x42>
 8017d24:	4b2a      	ldr	r3, [pc, #168]	; (8017dd0 <tcp_free_acked_segments+0xe0>)
 8017d26:	f240 4257 	movw	r2, #1111	; 0x457
 8017d2a:	492a      	ldr	r1, [pc, #168]	; (8017dd4 <tcp_free_acked_segments+0xe4>)
 8017d2c:	482a      	ldr	r0, [pc, #168]	; (8017dd8 <tcp_free_acked_segments+0xe8>)
 8017d2e:	f007 fcc7 	bl	801f6c0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8017d38:	8a7b      	ldrh	r3, [r7, #18]
 8017d3a:	1ad3      	subs	r3, r2, r3
 8017d3c:	b29a      	uxth	r2, r3
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017d44:	697b      	ldr	r3, [r7, #20]
 8017d46:	891a      	ldrh	r2, [r3, #8]
 8017d48:	4b24      	ldr	r3, [pc, #144]	; (8017ddc <tcp_free_acked_segments+0xec>)
 8017d4a:	881b      	ldrh	r3, [r3, #0]
 8017d4c:	4413      	add	r3, r2
 8017d4e:	b29a      	uxth	r2, r3
 8017d50:	4b22      	ldr	r3, [pc, #136]	; (8017ddc <tcp_free_acked_segments+0xec>)
 8017d52:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017d54:	6978      	ldr	r0, [r7, #20]
 8017d56:	f7fe f8f0 	bl	8015f3a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d00c      	beq.n	8017d7e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017d64:	68bb      	ldr	r3, [r7, #8]
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d109      	bne.n	8017d7e <tcp_free_acked_segments+0x8e>
 8017d6a:	683b      	ldr	r3, [r7, #0]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d106      	bne.n	8017d7e <tcp_free_acked_segments+0x8e>
 8017d70:	4b17      	ldr	r3, [pc, #92]	; (8017dd0 <tcp_free_acked_segments+0xe0>)
 8017d72:	f240 4261 	movw	r2, #1121	; 0x461
 8017d76:	491a      	ldr	r1, [pc, #104]	; (8017de0 <tcp_free_acked_segments+0xf0>)
 8017d78:	4817      	ldr	r0, [pc, #92]	; (8017dd8 <tcp_free_acked_segments+0xe8>)
 8017d7a:	f007 fca1 	bl	801f6c0 <iprintf>
  while (seg_list != NULL &&
 8017d7e:	68bb      	ldr	r3, [r7, #8]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d020      	beq.n	8017dc6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017d84:	68bb      	ldr	r3, [r7, #8]
 8017d86:	68db      	ldr	r3, [r3, #12]
 8017d88:	685b      	ldr	r3, [r3, #4]
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	f7fb f889 	bl	8012ea2 <lwip_htonl>
 8017d90:	4604      	mov	r4, r0
 8017d92:	68bb      	ldr	r3, [r7, #8]
 8017d94:	891b      	ldrh	r3, [r3, #8]
 8017d96:	461d      	mov	r5, r3
 8017d98:	68bb      	ldr	r3, [r7, #8]
 8017d9a:	68db      	ldr	r3, [r3, #12]
 8017d9c:	899b      	ldrh	r3, [r3, #12]
 8017d9e:	b29b      	uxth	r3, r3
 8017da0:	4618      	mov	r0, r3
 8017da2:	f7fb f869 	bl	8012e78 <lwip_htons>
 8017da6:	4603      	mov	r3, r0
 8017da8:	b2db      	uxtb	r3, r3
 8017daa:	f003 0303 	and.w	r3, r3, #3
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d001      	beq.n	8017db6 <tcp_free_acked_segments+0xc6>
 8017db2:	2301      	movs	r3, #1
 8017db4:	e000      	b.n	8017db8 <tcp_free_acked_segments+0xc8>
 8017db6:	2300      	movs	r3, #0
 8017db8:	442b      	add	r3, r5
 8017dba:	18e2      	adds	r2, r4, r3
 8017dbc:	4b09      	ldr	r3, [pc, #36]	; (8017de4 <tcp_free_acked_segments+0xf4>)
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	dd9c      	ble.n	8017d00 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8017dc6:	68bb      	ldr	r3, [r7, #8]
}
 8017dc8:	4618      	mov	r0, r3
 8017dca:	3718      	adds	r7, #24
 8017dcc:	46bd      	mov	sp, r7
 8017dce:	bdb0      	pop	{r4, r5, r7, pc}
 8017dd0:	08024dbc 	.word	0x08024dbc
 8017dd4:	080250a4 	.word	0x080250a4
 8017dd8:	08024e08 	.word	0x08024e08
 8017ddc:	2000479c 	.word	0x2000479c
 8017de0:	080250cc 	.word	0x080250cc
 8017de4:	20004798 	.word	0x20004798

08017de8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8017de8:	b5b0      	push	{r4, r5, r7, lr}
 8017dea:	b094      	sub	sp, #80	; 0x50
 8017dec:	af00      	add	r7, sp, #0
 8017dee:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8017df0:	2300      	movs	r3, #0
 8017df2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d106      	bne.n	8017e08 <tcp_receive+0x20>
 8017dfa:	4ba6      	ldr	r3, [pc, #664]	; (8018094 <tcp_receive+0x2ac>)
 8017dfc:	f240 427b 	movw	r2, #1147	; 0x47b
 8017e00:	49a5      	ldr	r1, [pc, #660]	; (8018098 <tcp_receive+0x2b0>)
 8017e02:	48a6      	ldr	r0, [pc, #664]	; (801809c <tcp_receive+0x2b4>)
 8017e04:	f007 fc5c 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	7d1b      	ldrb	r3, [r3, #20]
 8017e0c:	2b03      	cmp	r3, #3
 8017e0e:	d806      	bhi.n	8017e1e <tcp_receive+0x36>
 8017e10:	4ba0      	ldr	r3, [pc, #640]	; (8018094 <tcp_receive+0x2ac>)
 8017e12:	f240 427c 	movw	r2, #1148	; 0x47c
 8017e16:	49a2      	ldr	r1, [pc, #648]	; (80180a0 <tcp_receive+0x2b8>)
 8017e18:	48a0      	ldr	r0, [pc, #640]	; (801809c <tcp_receive+0x2b4>)
 8017e1a:	f007 fc51 	bl	801f6c0 <iprintf>

  if (flags & TCP_ACK) {
 8017e1e:	4ba1      	ldr	r3, [pc, #644]	; (80180a4 <tcp_receive+0x2bc>)
 8017e20:	781b      	ldrb	r3, [r3, #0]
 8017e22:	f003 0310 	and.w	r3, r3, #16
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	f000 8263 	beq.w	80182f2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017e32:	461a      	mov	r2, r3
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017e38:	4413      	add	r3, r2
 8017e3a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017e40:	4b99      	ldr	r3, [pc, #612]	; (80180a8 <tcp_receive+0x2c0>)
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	1ad3      	subs	r3, r2, r3
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	db1b      	blt.n	8017e82 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017e4e:	4b96      	ldr	r3, [pc, #600]	; (80180a8 <tcp_receive+0x2c0>)
 8017e50:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017e52:	429a      	cmp	r2, r3
 8017e54:	d106      	bne.n	8017e64 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017e5a:	4b94      	ldr	r3, [pc, #592]	; (80180ac <tcp_receive+0x2c4>)
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	1ad3      	subs	r3, r2, r3
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	db0e      	blt.n	8017e82 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017e68:	4b90      	ldr	r3, [pc, #576]	; (80180ac <tcp_receive+0x2c4>)
 8017e6a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017e6c:	429a      	cmp	r2, r3
 8017e6e:	d125      	bne.n	8017ebc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017e70:	4b8f      	ldr	r3, [pc, #572]	; (80180b0 <tcp_receive+0x2c8>)
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	89db      	ldrh	r3, [r3, #14]
 8017e76:	b29a      	uxth	r2, r3
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017e7e:	429a      	cmp	r2, r3
 8017e80:	d91c      	bls.n	8017ebc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8017e82:	4b8b      	ldr	r3, [pc, #556]	; (80180b0 <tcp_receive+0x2c8>)
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	89db      	ldrh	r3, [r3, #14]
 8017e88:	b29a      	uxth	r2, r3
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017e9c:	429a      	cmp	r2, r3
 8017e9e:	d205      	bcs.n	8017eac <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8017eac:	4b7e      	ldr	r3, [pc, #504]	; (80180a8 <tcp_receive+0x2c0>)
 8017eae:	681a      	ldr	r2, [r3, #0]
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8017eb4:	4b7d      	ldr	r3, [pc, #500]	; (80180ac <tcp_receive+0x2c4>)
 8017eb6:	681a      	ldr	r2, [r3, #0]
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8017ebc:	4b7b      	ldr	r3, [pc, #492]	; (80180ac <tcp_receive+0x2c4>)
 8017ebe:	681a      	ldr	r2, [r3, #0]
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ec4:	1ad3      	subs	r3, r2, r3
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	dc58      	bgt.n	8017f7c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8017eca:	4b7a      	ldr	r3, [pc, #488]	; (80180b4 <tcp_receive+0x2cc>)
 8017ecc:	881b      	ldrh	r3, [r3, #0]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d14b      	bne.n	8017f6a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017ed6:	687a      	ldr	r2, [r7, #4]
 8017ed8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8017edc:	4413      	add	r3, r2
 8017ede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ee0:	429a      	cmp	r2, r3
 8017ee2:	d142      	bne.n	8017f6a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	db3d      	blt.n	8017f6a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017ef2:	4b6e      	ldr	r3, [pc, #440]	; (80180ac <tcp_receive+0x2c4>)
 8017ef4:	681b      	ldr	r3, [r3, #0]
 8017ef6:	429a      	cmp	r2, r3
 8017ef8:	d137      	bne.n	8017f6a <tcp_receive+0x182>
              found_dupack = 1;
 8017efa:	2301      	movs	r3, #1
 8017efc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017f04:	2bff      	cmp	r3, #255	; 0xff
 8017f06:	d007      	beq.n	8017f18 <tcp_receive+0x130>
                ++pcb->dupacks;
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017f0e:	3301      	adds	r3, #1
 8017f10:	b2da      	uxtb	r2, r3
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017f1e:	2b03      	cmp	r3, #3
 8017f20:	d91b      	bls.n	8017f5a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f2c:	4413      	add	r3, r2
 8017f2e:	b29a      	uxth	r2, r3
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017f36:	429a      	cmp	r2, r3
 8017f38:	d30a      	bcc.n	8017f50 <tcp_receive+0x168>
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f44:	4413      	add	r3, r2
 8017f46:	b29a      	uxth	r2, r3
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017f4e:	e004      	b.n	8017f5a <tcp_receive+0x172>
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017f56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017f60:	2b02      	cmp	r3, #2
 8017f62:	d902      	bls.n	8017f6a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017f64:	6878      	ldr	r0, [r7, #4]
 8017f66:	f002 fb41 	bl	801a5ec <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8017f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	f040 8160 	bne.w	8018232 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	2200      	movs	r2, #0
 8017f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017f7a:	e15a      	b.n	8018232 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017f7c:	4b4b      	ldr	r3, [pc, #300]	; (80180ac <tcp_receive+0x2c4>)
 8017f7e:	681a      	ldr	r2, [r3, #0]
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f84:	1ad3      	subs	r3, r2, r3
 8017f86:	3b01      	subs	r3, #1
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	f2c0 814d 	blt.w	8018228 <tcp_receive+0x440>
 8017f8e:	4b47      	ldr	r3, [pc, #284]	; (80180ac <tcp_receive+0x2c4>)
 8017f90:	681a      	ldr	r2, [r3, #0]
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f96:	1ad3      	subs	r3, r2, r3
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	f300 8145 	bgt.w	8018228 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	8b5b      	ldrh	r3, [r3, #26]
 8017fa2:	f003 0304 	and.w	r3, r3, #4
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d010      	beq.n	8017fcc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	8b5b      	ldrh	r3, [r3, #26]
 8017fae:	f023 0304 	bic.w	r3, r3, #4
 8017fb2:	b29a      	uxth	r2, r3
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	2200      	movs	r2, #0
 8017fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	2200      	movs	r2, #0
 8017fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017fda:	10db      	asrs	r3, r3, #3
 8017fdc:	b21b      	sxth	r3, r3
 8017fde:	b29a      	uxth	r2, r3
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017fe6:	b29b      	uxth	r3, r3
 8017fe8:	4413      	add	r3, r2
 8017fea:	b29b      	uxth	r3, r3
 8017fec:	b21a      	sxth	r2, r3
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8017ff4:	4b2d      	ldr	r3, [pc, #180]	; (80180ac <tcp_receive+0x2c4>)
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	b29a      	uxth	r2, r3
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ffe:	b29b      	uxth	r3, r3
 8018000:	1ad3      	subs	r3, r2, r3
 8018002:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	2200      	movs	r2, #0
 8018008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801800c:	4b27      	ldr	r3, [pc, #156]	; (80180ac <tcp_receive+0x2c4>)
 801800e:	681a      	ldr	r2, [r3, #0]
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	7d1b      	ldrb	r3, [r3, #20]
 8018018:	2b03      	cmp	r3, #3
 801801a:	f240 8096 	bls.w	801814a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801802a:	429a      	cmp	r2, r3
 801802c:	d244      	bcs.n	80180b8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	8b5b      	ldrh	r3, [r3, #26]
 8018032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018036:	2b00      	cmp	r3, #0
 8018038:	d001      	beq.n	801803e <tcp_receive+0x256>
 801803a:	2301      	movs	r3, #1
 801803c:	e000      	b.n	8018040 <tcp_receive+0x258>
 801803e:	2302      	movs	r3, #2
 8018040:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8018044:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8018048:	b29a      	uxth	r2, r3
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801804e:	fb12 f303 	smulbb	r3, r2, r3
 8018052:	b29b      	uxth	r3, r3
 8018054:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018056:	4293      	cmp	r3, r2
 8018058:	bf28      	it	cs
 801805a:	4613      	movcs	r3, r2
 801805c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018064:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018066:	4413      	add	r3, r2
 8018068:	b29a      	uxth	r2, r3
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018070:	429a      	cmp	r2, r3
 8018072:	d309      	bcc.n	8018088 <tcp_receive+0x2a0>
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801807a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801807c:	4413      	add	r3, r2
 801807e:	b29a      	uxth	r2, r3
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018086:	e060      	b.n	801814a <tcp_receive+0x362>
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801808e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018092:	e05a      	b.n	801814a <tcp_receive+0x362>
 8018094:	08024dbc 	.word	0x08024dbc
 8018098:	080250ec 	.word	0x080250ec
 801809c:	08024e08 	.word	0x08024e08
 80180a0:	08025108 	.word	0x08025108
 80180a4:	200047a0 	.word	0x200047a0
 80180a8:	20004794 	.word	0x20004794
 80180ac:	20004798 	.word	0x20004798
 80180b0:	20004784 	.word	0x20004784
 80180b4:	2000479e 	.word	0x2000479e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80180be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80180c0:	4413      	add	r3, r2
 80180c2:	b29a      	uxth	r2, r3
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80180ca:	429a      	cmp	r2, r3
 80180cc:	d309      	bcc.n	80180e2 <tcp_receive+0x2fa>
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80180d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80180d6:	4413      	add	r3, r2
 80180d8:	b29a      	uxth	r2, r3
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80180e0:	e004      	b.n	80180ec <tcp_receive+0x304>
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80180e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80180f8:	429a      	cmp	r2, r3
 80180fa:	d326      	bcc.n	801814a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018108:	1ad3      	subs	r3, r2, r3
 801810a:	b29a      	uxth	r2, r3
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801811c:	4413      	add	r3, r2
 801811e:	b29a      	uxth	r2, r3
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018126:	429a      	cmp	r2, r3
 8018128:	d30a      	bcc.n	8018140 <tcp_receive+0x358>
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018134:	4413      	add	r3, r2
 8018136:	b29a      	uxth	r2, r3
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801813e:	e004      	b.n	801814a <tcp_receive+0x362>
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018146:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018152:	4a98      	ldr	r2, [pc, #608]	; (80183b4 <tcp_receive+0x5cc>)
 8018154:	6878      	ldr	r0, [r7, #4]
 8018156:	f7ff fdcb 	bl	8017cf0 <tcp_free_acked_segments>
 801815a:	4602      	mov	r2, r0
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018168:	4a93      	ldr	r2, [pc, #588]	; (80183b8 <tcp_receive+0x5d0>)
 801816a:	6878      	ldr	r0, [r7, #4]
 801816c:	f7ff fdc0 	bl	8017cf0 <tcp_free_acked_segments>
 8018170:	4602      	mov	r2, r0
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801817a:	2b00      	cmp	r3, #0
 801817c:	d104      	bne.n	8018188 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018184:	861a      	strh	r2, [r3, #48]	; 0x30
 8018186:	e002      	b.n	801818e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	2200      	movs	r2, #0
 801818c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	2200      	movs	r2, #0
 8018192:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018198:	2b00      	cmp	r3, #0
 801819a:	d103      	bne.n	80181a4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	2200      	movs	r2, #0
 80181a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80181aa:	4b84      	ldr	r3, [pc, #528]	; (80183bc <tcp_receive+0x5d4>)
 80181ac:	881b      	ldrh	r3, [r3, #0]
 80181ae:	4413      	add	r3, r2
 80181b0:	b29a      	uxth	r2, r3
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	8b5b      	ldrh	r3, [r3, #26]
 80181bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d035      	beq.n	8018230 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d118      	bne.n	80181fe <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d00c      	beq.n	80181ee <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80181dc:	68db      	ldr	r3, [r3, #12]
 80181de:	685b      	ldr	r3, [r3, #4]
 80181e0:	4618      	mov	r0, r3
 80181e2:	f7fa fe5e 	bl	8012ea2 <lwip_htonl>
 80181e6:	4603      	mov	r3, r0
 80181e8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	dc20      	bgt.n	8018230 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	8b5b      	ldrh	r3, [r3, #26]
 80181f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80181f6:	b29a      	uxth	r2, r3
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80181fc:	e018      	b.n	8018230 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018206:	68db      	ldr	r3, [r3, #12]
 8018208:	685b      	ldr	r3, [r3, #4]
 801820a:	4618      	mov	r0, r3
 801820c:	f7fa fe49 	bl	8012ea2 <lwip_htonl>
 8018210:	4603      	mov	r3, r0
 8018212:	1ae3      	subs	r3, r4, r3
 8018214:	2b00      	cmp	r3, #0
 8018216:	dc0b      	bgt.n	8018230 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	8b5b      	ldrh	r3, [r3, #26]
 801821c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018220:	b29a      	uxth	r2, r3
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018226:	e003      	b.n	8018230 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8018228:	6878      	ldr	r0, [r7, #4]
 801822a:	f002 fbcd 	bl	801a9c8 <tcp_send_empty_ack>
 801822e:	e000      	b.n	8018232 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018230:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018236:	2b00      	cmp	r3, #0
 8018238:	d05b      	beq.n	80182f2 <tcp_receive+0x50a>
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801823e:	4b60      	ldr	r3, [pc, #384]	; (80183c0 <tcp_receive+0x5d8>)
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	1ad3      	subs	r3, r2, r3
 8018244:	2b00      	cmp	r3, #0
 8018246:	da54      	bge.n	80182f2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018248:	4b5e      	ldr	r3, [pc, #376]	; (80183c4 <tcp_receive+0x5dc>)
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	b29a      	uxth	r2, r3
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018252:	b29b      	uxth	r3, r3
 8018254:	1ad3      	subs	r3, r2, r3
 8018256:	b29b      	uxth	r3, r3
 8018258:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801825c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018266:	10db      	asrs	r3, r3, #3
 8018268:	b21b      	sxth	r3, r3
 801826a:	b29b      	uxth	r3, r3
 801826c:	1ad3      	subs	r3, r2, r3
 801826e:	b29b      	uxth	r3, r3
 8018270:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801827a:	b29a      	uxth	r2, r3
 801827c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018280:	4413      	add	r3, r2
 8018282:	b29b      	uxth	r3, r3
 8018284:	b21a      	sxth	r2, r3
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801828a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801828e:	2b00      	cmp	r3, #0
 8018290:	da05      	bge.n	801829e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8018292:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018296:	425b      	negs	r3, r3
 8018298:	b29b      	uxth	r3, r3
 801829a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801829e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80182a8:	109b      	asrs	r3, r3, #2
 80182aa:	b21b      	sxth	r3, r3
 80182ac:	b29b      	uxth	r3, r3
 80182ae:	1ad3      	subs	r3, r2, r3
 80182b0:	b29b      	uxth	r3, r3
 80182b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80182bc:	b29a      	uxth	r2, r3
 80182be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80182c2:	4413      	add	r3, r2
 80182c4:	b29b      	uxth	r3, r3
 80182c6:	b21a      	sxth	r2, r3
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80182d2:	10db      	asrs	r3, r3, #3
 80182d4:	b21b      	sxth	r3, r3
 80182d6:	b29a      	uxth	r2, r3
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80182de:	b29b      	uxth	r3, r3
 80182e0:	4413      	add	r3, r2
 80182e2:	b29b      	uxth	r3, r3
 80182e4:	b21a      	sxth	r2, r3
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	2200      	movs	r2, #0
 80182f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80182f2:	4b35      	ldr	r3, [pc, #212]	; (80183c8 <tcp_receive+0x5e0>)
 80182f4:	881b      	ldrh	r3, [r3, #0]
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	f000 84e1 	beq.w	8018cbe <tcp_receive+0xed6>
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	7d1b      	ldrb	r3, [r3, #20]
 8018300:	2b06      	cmp	r3, #6
 8018302:	f200 84dc 	bhi.w	8018cbe <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801830a:	4b30      	ldr	r3, [pc, #192]	; (80183cc <tcp_receive+0x5e4>)
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	1ad3      	subs	r3, r2, r3
 8018310:	3b01      	subs	r3, #1
 8018312:	2b00      	cmp	r3, #0
 8018314:	f2c0 808e 	blt.w	8018434 <tcp_receive+0x64c>
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801831c:	4b2a      	ldr	r3, [pc, #168]	; (80183c8 <tcp_receive+0x5e0>)
 801831e:	881b      	ldrh	r3, [r3, #0]
 8018320:	4619      	mov	r1, r3
 8018322:	4b2a      	ldr	r3, [pc, #168]	; (80183cc <tcp_receive+0x5e4>)
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	440b      	add	r3, r1
 8018328:	1ad3      	subs	r3, r2, r3
 801832a:	3301      	adds	r3, #1
 801832c:	2b00      	cmp	r3, #0
 801832e:	f300 8081 	bgt.w	8018434 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8018332:	4b27      	ldr	r3, [pc, #156]	; (80183d0 <tcp_receive+0x5e8>)
 8018334:	685b      	ldr	r3, [r3, #4]
 8018336:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801833c:	4b23      	ldr	r3, [pc, #140]	; (80183cc <tcp_receive+0x5e4>)
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	1ad3      	subs	r3, r2, r3
 8018342:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8018344:	4b22      	ldr	r3, [pc, #136]	; (80183d0 <tcp_receive+0x5e8>)
 8018346:	685b      	ldr	r3, [r3, #4]
 8018348:	2b00      	cmp	r3, #0
 801834a:	d106      	bne.n	801835a <tcp_receive+0x572>
 801834c:	4b21      	ldr	r3, [pc, #132]	; (80183d4 <tcp_receive+0x5ec>)
 801834e:	f240 5294 	movw	r2, #1428	; 0x594
 8018352:	4921      	ldr	r1, [pc, #132]	; (80183d8 <tcp_receive+0x5f0>)
 8018354:	4821      	ldr	r0, [pc, #132]	; (80183dc <tcp_receive+0x5f4>)
 8018356:	f007 f9b3 	bl	801f6c0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801835c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018360:	4293      	cmp	r3, r2
 8018362:	d906      	bls.n	8018372 <tcp_receive+0x58a>
 8018364:	4b1b      	ldr	r3, [pc, #108]	; (80183d4 <tcp_receive+0x5ec>)
 8018366:	f240 5295 	movw	r2, #1429	; 0x595
 801836a:	491d      	ldr	r1, [pc, #116]	; (80183e0 <tcp_receive+0x5f8>)
 801836c:	481b      	ldr	r0, [pc, #108]	; (80183dc <tcp_receive+0x5f4>)
 801836e:	f007 f9a7 	bl	801f6c0 <iprintf>
      off = (u16_t)off32;
 8018372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018374:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018378:	4b15      	ldr	r3, [pc, #84]	; (80183d0 <tcp_receive+0x5e8>)
 801837a:	685b      	ldr	r3, [r3, #4]
 801837c:	891b      	ldrh	r3, [r3, #8]
 801837e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018382:	429a      	cmp	r2, r3
 8018384:	d906      	bls.n	8018394 <tcp_receive+0x5ac>
 8018386:	4b13      	ldr	r3, [pc, #76]	; (80183d4 <tcp_receive+0x5ec>)
 8018388:	f240 5297 	movw	r2, #1431	; 0x597
 801838c:	4915      	ldr	r1, [pc, #84]	; (80183e4 <tcp_receive+0x5fc>)
 801838e:	4813      	ldr	r0, [pc, #76]	; (80183dc <tcp_receive+0x5f4>)
 8018390:	f007 f996 	bl	801f6c0 <iprintf>
      inseg.len -= off;
 8018394:	4b0e      	ldr	r3, [pc, #56]	; (80183d0 <tcp_receive+0x5e8>)
 8018396:	891a      	ldrh	r2, [r3, #8]
 8018398:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801839c:	1ad3      	subs	r3, r2, r3
 801839e:	b29a      	uxth	r2, r3
 80183a0:	4b0b      	ldr	r3, [pc, #44]	; (80183d0 <tcp_receive+0x5e8>)
 80183a2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80183a4:	4b0a      	ldr	r3, [pc, #40]	; (80183d0 <tcp_receive+0x5e8>)
 80183a6:	685b      	ldr	r3, [r3, #4]
 80183a8:	891a      	ldrh	r2, [r3, #8]
 80183aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80183ae:	1ad3      	subs	r3, r2, r3
 80183b0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80183b2:	e029      	b.n	8018408 <tcp_receive+0x620>
 80183b4:	08025124 	.word	0x08025124
 80183b8:	0802512c 	.word	0x0802512c
 80183bc:	2000479c 	.word	0x2000479c
 80183c0:	20004798 	.word	0x20004798
 80183c4:	2000b8d8 	.word	0x2000b8d8
 80183c8:	2000479e 	.word	0x2000479e
 80183cc:	20004794 	.word	0x20004794
 80183d0:	20004774 	.word	0x20004774
 80183d4:	08024dbc 	.word	0x08024dbc
 80183d8:	08025134 	.word	0x08025134
 80183dc:	08024e08 	.word	0x08024e08
 80183e0:	08025144 	.word	0x08025144
 80183e4:	08025154 	.word	0x08025154
        off -= p->len;
 80183e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80183ea:	895b      	ldrh	r3, [r3, #10]
 80183ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80183f0:	1ad3      	subs	r3, r2, r3
 80183f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80183f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80183f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80183fa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80183fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80183fe:	2200      	movs	r2, #0
 8018400:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8018402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8018408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801840a:	895b      	ldrh	r3, [r3, #10]
 801840c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018410:	429a      	cmp	r2, r3
 8018412:	d8e9      	bhi.n	80183e8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8018414:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018418:	4619      	mov	r1, r3
 801841a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801841c:	f7fc f862 	bl	80144e4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018424:	4a91      	ldr	r2, [pc, #580]	; (801866c <tcp_receive+0x884>)
 8018426:	6013      	str	r3, [r2, #0]
 8018428:	4b91      	ldr	r3, [pc, #580]	; (8018670 <tcp_receive+0x888>)
 801842a:	68db      	ldr	r3, [r3, #12]
 801842c:	4a8f      	ldr	r2, [pc, #572]	; (801866c <tcp_receive+0x884>)
 801842e:	6812      	ldr	r2, [r2, #0]
 8018430:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018432:	e00d      	b.n	8018450 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8018434:	4b8d      	ldr	r3, [pc, #564]	; (801866c <tcp_receive+0x884>)
 8018436:	681a      	ldr	r2, [r3, #0]
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801843c:	1ad3      	subs	r3, r2, r3
 801843e:	2b00      	cmp	r3, #0
 8018440:	da06      	bge.n	8018450 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	8b5b      	ldrh	r3, [r3, #26]
 8018446:	f043 0302 	orr.w	r3, r3, #2
 801844a:	b29a      	uxth	r2, r3
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018450:	4b86      	ldr	r3, [pc, #536]	; (801866c <tcp_receive+0x884>)
 8018452:	681a      	ldr	r2, [r3, #0]
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018458:	1ad3      	subs	r3, r2, r3
 801845a:	2b00      	cmp	r3, #0
 801845c:	f2c0 842a 	blt.w	8018cb4 <tcp_receive+0xecc>
 8018460:	4b82      	ldr	r3, [pc, #520]	; (801866c <tcp_receive+0x884>)
 8018462:	681a      	ldr	r2, [r3, #0]
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018468:	6879      	ldr	r1, [r7, #4]
 801846a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801846c:	440b      	add	r3, r1
 801846e:	1ad3      	subs	r3, r2, r3
 8018470:	3301      	adds	r3, #1
 8018472:	2b00      	cmp	r3, #0
 8018474:	f300 841e 	bgt.w	8018cb4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801847c:	4b7b      	ldr	r3, [pc, #492]	; (801866c <tcp_receive+0x884>)
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	429a      	cmp	r2, r3
 8018482:	f040 829a 	bne.w	80189ba <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8018486:	4b7a      	ldr	r3, [pc, #488]	; (8018670 <tcp_receive+0x888>)
 8018488:	891c      	ldrh	r4, [r3, #8]
 801848a:	4b79      	ldr	r3, [pc, #484]	; (8018670 <tcp_receive+0x888>)
 801848c:	68db      	ldr	r3, [r3, #12]
 801848e:	899b      	ldrh	r3, [r3, #12]
 8018490:	b29b      	uxth	r3, r3
 8018492:	4618      	mov	r0, r3
 8018494:	f7fa fcf0 	bl	8012e78 <lwip_htons>
 8018498:	4603      	mov	r3, r0
 801849a:	b2db      	uxtb	r3, r3
 801849c:	f003 0303 	and.w	r3, r3, #3
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d001      	beq.n	80184a8 <tcp_receive+0x6c0>
 80184a4:	2301      	movs	r3, #1
 80184a6:	e000      	b.n	80184aa <tcp_receive+0x6c2>
 80184a8:	2300      	movs	r3, #0
 80184aa:	4423      	add	r3, r4
 80184ac:	b29a      	uxth	r2, r3
 80184ae:	4b71      	ldr	r3, [pc, #452]	; (8018674 <tcp_receive+0x88c>)
 80184b0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80184b6:	4b6f      	ldr	r3, [pc, #444]	; (8018674 <tcp_receive+0x88c>)
 80184b8:	881b      	ldrh	r3, [r3, #0]
 80184ba:	429a      	cmp	r2, r3
 80184bc:	d275      	bcs.n	80185aa <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80184be:	4b6c      	ldr	r3, [pc, #432]	; (8018670 <tcp_receive+0x888>)
 80184c0:	68db      	ldr	r3, [r3, #12]
 80184c2:	899b      	ldrh	r3, [r3, #12]
 80184c4:	b29b      	uxth	r3, r3
 80184c6:	4618      	mov	r0, r3
 80184c8:	f7fa fcd6 	bl	8012e78 <lwip_htons>
 80184cc:	4603      	mov	r3, r0
 80184ce:	b2db      	uxtb	r3, r3
 80184d0:	f003 0301 	and.w	r3, r3, #1
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d01f      	beq.n	8018518 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80184d8:	4b65      	ldr	r3, [pc, #404]	; (8018670 <tcp_receive+0x888>)
 80184da:	68db      	ldr	r3, [r3, #12]
 80184dc:	899b      	ldrh	r3, [r3, #12]
 80184de:	b29b      	uxth	r3, r3
 80184e0:	b21b      	sxth	r3, r3
 80184e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80184e6:	b21c      	sxth	r4, r3
 80184e8:	4b61      	ldr	r3, [pc, #388]	; (8018670 <tcp_receive+0x888>)
 80184ea:	68db      	ldr	r3, [r3, #12]
 80184ec:	899b      	ldrh	r3, [r3, #12]
 80184ee:	b29b      	uxth	r3, r3
 80184f0:	4618      	mov	r0, r3
 80184f2:	f7fa fcc1 	bl	8012e78 <lwip_htons>
 80184f6:	4603      	mov	r3, r0
 80184f8:	b2db      	uxtb	r3, r3
 80184fa:	b29b      	uxth	r3, r3
 80184fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8018500:	b29b      	uxth	r3, r3
 8018502:	4618      	mov	r0, r3
 8018504:	f7fa fcb8 	bl	8012e78 <lwip_htons>
 8018508:	4603      	mov	r3, r0
 801850a:	b21b      	sxth	r3, r3
 801850c:	4323      	orrs	r3, r4
 801850e:	b21a      	sxth	r2, r3
 8018510:	4b57      	ldr	r3, [pc, #348]	; (8018670 <tcp_receive+0x888>)
 8018512:	68db      	ldr	r3, [r3, #12]
 8018514:	b292      	uxth	r2, r2
 8018516:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801851c:	4b54      	ldr	r3, [pc, #336]	; (8018670 <tcp_receive+0x888>)
 801851e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018520:	4b53      	ldr	r3, [pc, #332]	; (8018670 <tcp_receive+0x888>)
 8018522:	68db      	ldr	r3, [r3, #12]
 8018524:	899b      	ldrh	r3, [r3, #12]
 8018526:	b29b      	uxth	r3, r3
 8018528:	4618      	mov	r0, r3
 801852a:	f7fa fca5 	bl	8012e78 <lwip_htons>
 801852e:	4603      	mov	r3, r0
 8018530:	b2db      	uxtb	r3, r3
 8018532:	f003 0302 	and.w	r3, r3, #2
 8018536:	2b00      	cmp	r3, #0
 8018538:	d005      	beq.n	8018546 <tcp_receive+0x75e>
            inseg.len -= 1;
 801853a:	4b4d      	ldr	r3, [pc, #308]	; (8018670 <tcp_receive+0x888>)
 801853c:	891b      	ldrh	r3, [r3, #8]
 801853e:	3b01      	subs	r3, #1
 8018540:	b29a      	uxth	r2, r3
 8018542:	4b4b      	ldr	r3, [pc, #300]	; (8018670 <tcp_receive+0x888>)
 8018544:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8018546:	4b4a      	ldr	r3, [pc, #296]	; (8018670 <tcp_receive+0x888>)
 8018548:	685b      	ldr	r3, [r3, #4]
 801854a:	4a49      	ldr	r2, [pc, #292]	; (8018670 <tcp_receive+0x888>)
 801854c:	8912      	ldrh	r2, [r2, #8]
 801854e:	4611      	mov	r1, r2
 8018550:	4618      	mov	r0, r3
 8018552:	f7fb fec7 	bl	80142e4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8018556:	4b46      	ldr	r3, [pc, #280]	; (8018670 <tcp_receive+0x888>)
 8018558:	891c      	ldrh	r4, [r3, #8]
 801855a:	4b45      	ldr	r3, [pc, #276]	; (8018670 <tcp_receive+0x888>)
 801855c:	68db      	ldr	r3, [r3, #12]
 801855e:	899b      	ldrh	r3, [r3, #12]
 8018560:	b29b      	uxth	r3, r3
 8018562:	4618      	mov	r0, r3
 8018564:	f7fa fc88 	bl	8012e78 <lwip_htons>
 8018568:	4603      	mov	r3, r0
 801856a:	b2db      	uxtb	r3, r3
 801856c:	f003 0303 	and.w	r3, r3, #3
 8018570:	2b00      	cmp	r3, #0
 8018572:	d001      	beq.n	8018578 <tcp_receive+0x790>
 8018574:	2301      	movs	r3, #1
 8018576:	e000      	b.n	801857a <tcp_receive+0x792>
 8018578:	2300      	movs	r3, #0
 801857a:	4423      	add	r3, r4
 801857c:	b29a      	uxth	r2, r3
 801857e:	4b3d      	ldr	r3, [pc, #244]	; (8018674 <tcp_receive+0x88c>)
 8018580:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018582:	4b3c      	ldr	r3, [pc, #240]	; (8018674 <tcp_receive+0x88c>)
 8018584:	881b      	ldrh	r3, [r3, #0]
 8018586:	461a      	mov	r2, r3
 8018588:	4b38      	ldr	r3, [pc, #224]	; (801866c <tcp_receive+0x884>)
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	441a      	add	r2, r3
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018592:	6879      	ldr	r1, [r7, #4]
 8018594:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018596:	440b      	add	r3, r1
 8018598:	429a      	cmp	r2, r3
 801859a:	d006      	beq.n	80185aa <tcp_receive+0x7c2>
 801859c:	4b36      	ldr	r3, [pc, #216]	; (8018678 <tcp_receive+0x890>)
 801859e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80185a2:	4936      	ldr	r1, [pc, #216]	; (801867c <tcp_receive+0x894>)
 80185a4:	4836      	ldr	r0, [pc, #216]	; (8018680 <tcp_receive+0x898>)
 80185a6:	f007 f88b 	bl	801f6c0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	f000 80e7 	beq.w	8018782 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80185b4:	4b2e      	ldr	r3, [pc, #184]	; (8018670 <tcp_receive+0x888>)
 80185b6:	68db      	ldr	r3, [r3, #12]
 80185b8:	899b      	ldrh	r3, [r3, #12]
 80185ba:	b29b      	uxth	r3, r3
 80185bc:	4618      	mov	r0, r3
 80185be:	f7fa fc5b 	bl	8012e78 <lwip_htons>
 80185c2:	4603      	mov	r3, r0
 80185c4:	b2db      	uxtb	r3, r3
 80185c6:	f003 0301 	and.w	r3, r3, #1
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d010      	beq.n	80185f0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80185ce:	e00a      	b.n	80185e6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80185d4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80185da:	681a      	ldr	r2, [r3, #0]
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80185e0:	68f8      	ldr	r0, [r7, #12]
 80185e2:	f7fd fcaa 	bl	8015f3a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d1f0      	bne.n	80185d0 <tcp_receive+0x7e8>
 80185ee:	e0c8      	b.n	8018782 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80185f4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80185f6:	e052      	b.n	801869e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80185f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185fa:	68db      	ldr	r3, [r3, #12]
 80185fc:	899b      	ldrh	r3, [r3, #12]
 80185fe:	b29b      	uxth	r3, r3
 8018600:	4618      	mov	r0, r3
 8018602:	f7fa fc39 	bl	8012e78 <lwip_htons>
 8018606:	4603      	mov	r3, r0
 8018608:	b2db      	uxtb	r3, r3
 801860a:	f003 0301 	and.w	r3, r3, #1
 801860e:	2b00      	cmp	r3, #0
 8018610:	d03d      	beq.n	801868e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8018612:	4b17      	ldr	r3, [pc, #92]	; (8018670 <tcp_receive+0x888>)
 8018614:	68db      	ldr	r3, [r3, #12]
 8018616:	899b      	ldrh	r3, [r3, #12]
 8018618:	b29b      	uxth	r3, r3
 801861a:	4618      	mov	r0, r3
 801861c:	f7fa fc2c 	bl	8012e78 <lwip_htons>
 8018620:	4603      	mov	r3, r0
 8018622:	b2db      	uxtb	r3, r3
 8018624:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018628:	2b00      	cmp	r3, #0
 801862a:	d130      	bne.n	801868e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801862c:	4b10      	ldr	r3, [pc, #64]	; (8018670 <tcp_receive+0x888>)
 801862e:	68db      	ldr	r3, [r3, #12]
 8018630:	899b      	ldrh	r3, [r3, #12]
 8018632:	b29c      	uxth	r4, r3
 8018634:	2001      	movs	r0, #1
 8018636:	f7fa fc1f 	bl	8012e78 <lwip_htons>
 801863a:	4603      	mov	r3, r0
 801863c:	461a      	mov	r2, r3
 801863e:	4b0c      	ldr	r3, [pc, #48]	; (8018670 <tcp_receive+0x888>)
 8018640:	68db      	ldr	r3, [r3, #12]
 8018642:	4322      	orrs	r2, r4
 8018644:	b292      	uxth	r2, r2
 8018646:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018648:	4b09      	ldr	r3, [pc, #36]	; (8018670 <tcp_receive+0x888>)
 801864a:	891c      	ldrh	r4, [r3, #8]
 801864c:	4b08      	ldr	r3, [pc, #32]	; (8018670 <tcp_receive+0x888>)
 801864e:	68db      	ldr	r3, [r3, #12]
 8018650:	899b      	ldrh	r3, [r3, #12]
 8018652:	b29b      	uxth	r3, r3
 8018654:	4618      	mov	r0, r3
 8018656:	f7fa fc0f 	bl	8012e78 <lwip_htons>
 801865a:	4603      	mov	r3, r0
 801865c:	b2db      	uxtb	r3, r3
 801865e:	f003 0303 	and.w	r3, r3, #3
 8018662:	2b00      	cmp	r3, #0
 8018664:	d00e      	beq.n	8018684 <tcp_receive+0x89c>
 8018666:	2301      	movs	r3, #1
 8018668:	e00d      	b.n	8018686 <tcp_receive+0x89e>
 801866a:	bf00      	nop
 801866c:	20004794 	.word	0x20004794
 8018670:	20004774 	.word	0x20004774
 8018674:	2000479e 	.word	0x2000479e
 8018678:	08024dbc 	.word	0x08024dbc
 801867c:	08025164 	.word	0x08025164
 8018680:	08024e08 	.word	0x08024e08
 8018684:	2300      	movs	r3, #0
 8018686:	4423      	add	r3, r4
 8018688:	b29a      	uxth	r2, r3
 801868a:	4b98      	ldr	r3, [pc, #608]	; (80188ec <tcp_receive+0xb04>)
 801868c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801868e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018690:	613b      	str	r3, [r7, #16]
              next = next->next;
 8018692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8018698:	6938      	ldr	r0, [r7, #16]
 801869a:	f7fd fc4e 	bl	8015f3a <tcp_seg_free>
            while (next &&
 801869e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d00e      	beq.n	80186c2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80186a4:	4b91      	ldr	r3, [pc, #580]	; (80188ec <tcp_receive+0xb04>)
 80186a6:	881b      	ldrh	r3, [r3, #0]
 80186a8:	461a      	mov	r2, r3
 80186aa:	4b91      	ldr	r3, [pc, #580]	; (80188f0 <tcp_receive+0xb08>)
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	441a      	add	r2, r3
 80186b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186b2:	68db      	ldr	r3, [r3, #12]
 80186b4:	685b      	ldr	r3, [r3, #4]
 80186b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80186b8:	8909      	ldrh	r1, [r1, #8]
 80186ba:	440b      	add	r3, r1
 80186bc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80186be:	2b00      	cmp	r3, #0
 80186c0:	da9a      	bge.n	80185f8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80186c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d059      	beq.n	801877c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80186c8:	4b88      	ldr	r3, [pc, #544]	; (80188ec <tcp_receive+0xb04>)
 80186ca:	881b      	ldrh	r3, [r3, #0]
 80186cc:	461a      	mov	r2, r3
 80186ce:	4b88      	ldr	r3, [pc, #544]	; (80188f0 <tcp_receive+0xb08>)
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	441a      	add	r2, r3
 80186d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186d6:	68db      	ldr	r3, [r3, #12]
 80186d8:	685b      	ldr	r3, [r3, #4]
 80186da:	1ad3      	subs	r3, r2, r3
            if (next &&
 80186dc:	2b00      	cmp	r3, #0
 80186de:	dd4d      	ble.n	801877c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80186e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186e2:	68db      	ldr	r3, [r3, #12]
 80186e4:	685b      	ldr	r3, [r3, #4]
 80186e6:	b29a      	uxth	r2, r3
 80186e8:	4b81      	ldr	r3, [pc, #516]	; (80188f0 <tcp_receive+0xb08>)
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	b29b      	uxth	r3, r3
 80186ee:	1ad3      	subs	r3, r2, r3
 80186f0:	b29a      	uxth	r2, r3
 80186f2:	4b80      	ldr	r3, [pc, #512]	; (80188f4 <tcp_receive+0xb0c>)
 80186f4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80186f6:	4b7f      	ldr	r3, [pc, #508]	; (80188f4 <tcp_receive+0xb0c>)
 80186f8:	68db      	ldr	r3, [r3, #12]
 80186fa:	899b      	ldrh	r3, [r3, #12]
 80186fc:	b29b      	uxth	r3, r3
 80186fe:	4618      	mov	r0, r3
 8018700:	f7fa fbba 	bl	8012e78 <lwip_htons>
 8018704:	4603      	mov	r3, r0
 8018706:	b2db      	uxtb	r3, r3
 8018708:	f003 0302 	and.w	r3, r3, #2
 801870c:	2b00      	cmp	r3, #0
 801870e:	d005      	beq.n	801871c <tcp_receive+0x934>
                inseg.len -= 1;
 8018710:	4b78      	ldr	r3, [pc, #480]	; (80188f4 <tcp_receive+0xb0c>)
 8018712:	891b      	ldrh	r3, [r3, #8]
 8018714:	3b01      	subs	r3, #1
 8018716:	b29a      	uxth	r2, r3
 8018718:	4b76      	ldr	r3, [pc, #472]	; (80188f4 <tcp_receive+0xb0c>)
 801871a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801871c:	4b75      	ldr	r3, [pc, #468]	; (80188f4 <tcp_receive+0xb0c>)
 801871e:	685b      	ldr	r3, [r3, #4]
 8018720:	4a74      	ldr	r2, [pc, #464]	; (80188f4 <tcp_receive+0xb0c>)
 8018722:	8912      	ldrh	r2, [r2, #8]
 8018724:	4611      	mov	r1, r2
 8018726:	4618      	mov	r0, r3
 8018728:	f7fb fddc 	bl	80142e4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801872c:	4b71      	ldr	r3, [pc, #452]	; (80188f4 <tcp_receive+0xb0c>)
 801872e:	891c      	ldrh	r4, [r3, #8]
 8018730:	4b70      	ldr	r3, [pc, #448]	; (80188f4 <tcp_receive+0xb0c>)
 8018732:	68db      	ldr	r3, [r3, #12]
 8018734:	899b      	ldrh	r3, [r3, #12]
 8018736:	b29b      	uxth	r3, r3
 8018738:	4618      	mov	r0, r3
 801873a:	f7fa fb9d 	bl	8012e78 <lwip_htons>
 801873e:	4603      	mov	r3, r0
 8018740:	b2db      	uxtb	r3, r3
 8018742:	f003 0303 	and.w	r3, r3, #3
 8018746:	2b00      	cmp	r3, #0
 8018748:	d001      	beq.n	801874e <tcp_receive+0x966>
 801874a:	2301      	movs	r3, #1
 801874c:	e000      	b.n	8018750 <tcp_receive+0x968>
 801874e:	2300      	movs	r3, #0
 8018750:	4423      	add	r3, r4
 8018752:	b29a      	uxth	r2, r3
 8018754:	4b65      	ldr	r3, [pc, #404]	; (80188ec <tcp_receive+0xb04>)
 8018756:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018758:	4b64      	ldr	r3, [pc, #400]	; (80188ec <tcp_receive+0xb04>)
 801875a:	881b      	ldrh	r3, [r3, #0]
 801875c:	461a      	mov	r2, r3
 801875e:	4b64      	ldr	r3, [pc, #400]	; (80188f0 <tcp_receive+0xb08>)
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	441a      	add	r2, r3
 8018764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018766:	68db      	ldr	r3, [r3, #12]
 8018768:	685b      	ldr	r3, [r3, #4]
 801876a:	429a      	cmp	r2, r3
 801876c:	d006      	beq.n	801877c <tcp_receive+0x994>
 801876e:	4b62      	ldr	r3, [pc, #392]	; (80188f8 <tcp_receive+0xb10>)
 8018770:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8018774:	4961      	ldr	r1, [pc, #388]	; (80188fc <tcp_receive+0xb14>)
 8018776:	4862      	ldr	r0, [pc, #392]	; (8018900 <tcp_receive+0xb18>)
 8018778:	f006 ffa2 	bl	801f6c0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018780:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8018782:	4b5a      	ldr	r3, [pc, #360]	; (80188ec <tcp_receive+0xb04>)
 8018784:	881b      	ldrh	r3, [r3, #0]
 8018786:	461a      	mov	r2, r3
 8018788:	4b59      	ldr	r3, [pc, #356]	; (80188f0 <tcp_receive+0xb08>)
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	441a      	add	r2, r3
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018796:	4b55      	ldr	r3, [pc, #340]	; (80188ec <tcp_receive+0xb04>)
 8018798:	881b      	ldrh	r3, [r3, #0]
 801879a:	429a      	cmp	r2, r3
 801879c:	d206      	bcs.n	80187ac <tcp_receive+0x9c4>
 801879e:	4b56      	ldr	r3, [pc, #344]	; (80188f8 <tcp_receive+0xb10>)
 80187a0:	f240 6207 	movw	r2, #1543	; 0x607
 80187a4:	4957      	ldr	r1, [pc, #348]	; (8018904 <tcp_receive+0xb1c>)
 80187a6:	4856      	ldr	r0, [pc, #344]	; (8018900 <tcp_receive+0xb18>)
 80187a8:	f006 ff8a 	bl	801f6c0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80187b0:	4b4e      	ldr	r3, [pc, #312]	; (80188ec <tcp_receive+0xb04>)
 80187b2:	881b      	ldrh	r3, [r3, #0]
 80187b4:	1ad3      	subs	r3, r2, r3
 80187b6:	b29a      	uxth	r2, r3
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80187bc:	6878      	ldr	r0, [r7, #4]
 80187be:	f7fc fe97 	bl	80154f0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80187c2:	4b4c      	ldr	r3, [pc, #304]	; (80188f4 <tcp_receive+0xb0c>)
 80187c4:	685b      	ldr	r3, [r3, #4]
 80187c6:	891b      	ldrh	r3, [r3, #8]
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d006      	beq.n	80187da <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80187cc:	4b49      	ldr	r3, [pc, #292]	; (80188f4 <tcp_receive+0xb0c>)
 80187ce:	685b      	ldr	r3, [r3, #4]
 80187d0:	4a4d      	ldr	r2, [pc, #308]	; (8018908 <tcp_receive+0xb20>)
 80187d2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80187d4:	4b47      	ldr	r3, [pc, #284]	; (80188f4 <tcp_receive+0xb0c>)
 80187d6:	2200      	movs	r2, #0
 80187d8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80187da:	4b46      	ldr	r3, [pc, #280]	; (80188f4 <tcp_receive+0xb0c>)
 80187dc:	68db      	ldr	r3, [r3, #12]
 80187de:	899b      	ldrh	r3, [r3, #12]
 80187e0:	b29b      	uxth	r3, r3
 80187e2:	4618      	mov	r0, r3
 80187e4:	f7fa fb48 	bl	8012e78 <lwip_htons>
 80187e8:	4603      	mov	r3, r0
 80187ea:	b2db      	uxtb	r3, r3
 80187ec:	f003 0301 	and.w	r3, r3, #1
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	f000 80b8 	beq.w	8018966 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80187f6:	4b45      	ldr	r3, [pc, #276]	; (801890c <tcp_receive+0xb24>)
 80187f8:	781b      	ldrb	r3, [r3, #0]
 80187fa:	f043 0320 	orr.w	r3, r3, #32
 80187fe:	b2da      	uxtb	r2, r3
 8018800:	4b42      	ldr	r3, [pc, #264]	; (801890c <tcp_receive+0xb24>)
 8018802:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8018804:	e0af      	b.n	8018966 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801880a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018810:	68db      	ldr	r3, [r3, #12]
 8018812:	685b      	ldr	r3, [r3, #4]
 8018814:	4a36      	ldr	r2, [pc, #216]	; (80188f0 <tcp_receive+0xb08>)
 8018816:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018818:	68bb      	ldr	r3, [r7, #8]
 801881a:	891b      	ldrh	r3, [r3, #8]
 801881c:	461c      	mov	r4, r3
 801881e:	68bb      	ldr	r3, [r7, #8]
 8018820:	68db      	ldr	r3, [r3, #12]
 8018822:	899b      	ldrh	r3, [r3, #12]
 8018824:	b29b      	uxth	r3, r3
 8018826:	4618      	mov	r0, r3
 8018828:	f7fa fb26 	bl	8012e78 <lwip_htons>
 801882c:	4603      	mov	r3, r0
 801882e:	b2db      	uxtb	r3, r3
 8018830:	f003 0303 	and.w	r3, r3, #3
 8018834:	2b00      	cmp	r3, #0
 8018836:	d001      	beq.n	801883c <tcp_receive+0xa54>
 8018838:	2301      	movs	r3, #1
 801883a:	e000      	b.n	801883e <tcp_receive+0xa56>
 801883c:	2300      	movs	r3, #0
 801883e:	191a      	adds	r2, r3, r4
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018844:	441a      	add	r2, r3
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801884e:	461c      	mov	r4, r3
 8018850:	68bb      	ldr	r3, [r7, #8]
 8018852:	891b      	ldrh	r3, [r3, #8]
 8018854:	461d      	mov	r5, r3
 8018856:	68bb      	ldr	r3, [r7, #8]
 8018858:	68db      	ldr	r3, [r3, #12]
 801885a:	899b      	ldrh	r3, [r3, #12]
 801885c:	b29b      	uxth	r3, r3
 801885e:	4618      	mov	r0, r3
 8018860:	f7fa fb0a 	bl	8012e78 <lwip_htons>
 8018864:	4603      	mov	r3, r0
 8018866:	b2db      	uxtb	r3, r3
 8018868:	f003 0303 	and.w	r3, r3, #3
 801886c:	2b00      	cmp	r3, #0
 801886e:	d001      	beq.n	8018874 <tcp_receive+0xa8c>
 8018870:	2301      	movs	r3, #1
 8018872:	e000      	b.n	8018876 <tcp_receive+0xa8e>
 8018874:	2300      	movs	r3, #0
 8018876:	442b      	add	r3, r5
 8018878:	429c      	cmp	r4, r3
 801887a:	d206      	bcs.n	801888a <tcp_receive+0xaa2>
 801887c:	4b1e      	ldr	r3, [pc, #120]	; (80188f8 <tcp_receive+0xb10>)
 801887e:	f240 622b 	movw	r2, #1579	; 0x62b
 8018882:	4923      	ldr	r1, [pc, #140]	; (8018910 <tcp_receive+0xb28>)
 8018884:	481e      	ldr	r0, [pc, #120]	; (8018900 <tcp_receive+0xb18>)
 8018886:	f006 ff1b 	bl	801f6c0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801888a:	68bb      	ldr	r3, [r7, #8]
 801888c:	891b      	ldrh	r3, [r3, #8]
 801888e:	461c      	mov	r4, r3
 8018890:	68bb      	ldr	r3, [r7, #8]
 8018892:	68db      	ldr	r3, [r3, #12]
 8018894:	899b      	ldrh	r3, [r3, #12]
 8018896:	b29b      	uxth	r3, r3
 8018898:	4618      	mov	r0, r3
 801889a:	f7fa faed 	bl	8012e78 <lwip_htons>
 801889e:	4603      	mov	r3, r0
 80188a0:	b2db      	uxtb	r3, r3
 80188a2:	f003 0303 	and.w	r3, r3, #3
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	d001      	beq.n	80188ae <tcp_receive+0xac6>
 80188aa:	2301      	movs	r3, #1
 80188ac:	e000      	b.n	80188b0 <tcp_receive+0xac8>
 80188ae:	2300      	movs	r3, #0
 80188b0:	1919      	adds	r1, r3, r4
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80188b6:	b28b      	uxth	r3, r1
 80188b8:	1ad3      	subs	r3, r2, r3
 80188ba:	b29a      	uxth	r2, r3
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80188c0:	6878      	ldr	r0, [r7, #4]
 80188c2:	f7fc fe15 	bl	80154f0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80188c6:	68bb      	ldr	r3, [r7, #8]
 80188c8:	685b      	ldr	r3, [r3, #4]
 80188ca:	891b      	ldrh	r3, [r3, #8]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d028      	beq.n	8018922 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80188d0:	4b0d      	ldr	r3, [pc, #52]	; (8018908 <tcp_receive+0xb20>)
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d01d      	beq.n	8018914 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80188d8:	4b0b      	ldr	r3, [pc, #44]	; (8018908 <tcp_receive+0xb20>)
 80188da:	681a      	ldr	r2, [r3, #0]
 80188dc:	68bb      	ldr	r3, [r7, #8]
 80188de:	685b      	ldr	r3, [r3, #4]
 80188e0:	4619      	mov	r1, r3
 80188e2:	4610      	mov	r0, r2
 80188e4:	f7fb ff52 	bl	801478c <pbuf_cat>
 80188e8:	e018      	b.n	801891c <tcp_receive+0xb34>
 80188ea:	bf00      	nop
 80188ec:	2000479e 	.word	0x2000479e
 80188f0:	20004794 	.word	0x20004794
 80188f4:	20004774 	.word	0x20004774
 80188f8:	08024dbc 	.word	0x08024dbc
 80188fc:	0802519c 	.word	0x0802519c
 8018900:	08024e08 	.word	0x08024e08
 8018904:	080251d8 	.word	0x080251d8
 8018908:	200047a4 	.word	0x200047a4
 801890c:	200047a1 	.word	0x200047a1
 8018910:	080251f8 	.word	0x080251f8
            } else {
              recv_data = cseg->p;
 8018914:	68bb      	ldr	r3, [r7, #8]
 8018916:	685b      	ldr	r3, [r3, #4]
 8018918:	4a70      	ldr	r2, [pc, #448]	; (8018adc <tcp_receive+0xcf4>)
 801891a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801891c:	68bb      	ldr	r3, [r7, #8]
 801891e:	2200      	movs	r2, #0
 8018920:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018922:	68bb      	ldr	r3, [r7, #8]
 8018924:	68db      	ldr	r3, [r3, #12]
 8018926:	899b      	ldrh	r3, [r3, #12]
 8018928:	b29b      	uxth	r3, r3
 801892a:	4618      	mov	r0, r3
 801892c:	f7fa faa4 	bl	8012e78 <lwip_htons>
 8018930:	4603      	mov	r3, r0
 8018932:	b2db      	uxtb	r3, r3
 8018934:	f003 0301 	and.w	r3, r3, #1
 8018938:	2b00      	cmp	r3, #0
 801893a:	d00d      	beq.n	8018958 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801893c:	4b68      	ldr	r3, [pc, #416]	; (8018ae0 <tcp_receive+0xcf8>)
 801893e:	781b      	ldrb	r3, [r3, #0]
 8018940:	f043 0320 	orr.w	r3, r3, #32
 8018944:	b2da      	uxtb	r2, r3
 8018946:	4b66      	ldr	r3, [pc, #408]	; (8018ae0 <tcp_receive+0xcf8>)
 8018948:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	7d1b      	ldrb	r3, [r3, #20]
 801894e:	2b04      	cmp	r3, #4
 8018950:	d102      	bne.n	8018958 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	2207      	movs	r2, #7
 8018956:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018958:	68bb      	ldr	r3, [r7, #8]
 801895a:	681a      	ldr	r2, [r3, #0]
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8018960:	68b8      	ldr	r0, [r7, #8]
 8018962:	f7fd faea 	bl	8015f3a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801896a:	2b00      	cmp	r3, #0
 801896c:	d008      	beq.n	8018980 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018972:	68db      	ldr	r3, [r3, #12]
 8018974:	685a      	ldr	r2, [r3, #4]
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801897a:	429a      	cmp	r2, r3
 801897c:	f43f af43 	beq.w	8018806 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	8b5b      	ldrh	r3, [r3, #26]
 8018984:	f003 0301 	and.w	r3, r3, #1
 8018988:	2b00      	cmp	r3, #0
 801898a:	d00e      	beq.n	80189aa <tcp_receive+0xbc2>
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	8b5b      	ldrh	r3, [r3, #26]
 8018990:	f023 0301 	bic.w	r3, r3, #1
 8018994:	b29a      	uxth	r2, r3
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	835a      	strh	r2, [r3, #26]
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	8b5b      	ldrh	r3, [r3, #26]
 801899e:	f043 0302 	orr.w	r3, r3, #2
 80189a2:	b29a      	uxth	r2, r3
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80189a8:	e188      	b.n	8018cbc <tcp_receive+0xed4>
        tcp_ack(pcb);
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	8b5b      	ldrh	r3, [r3, #26]
 80189ae:	f043 0301 	orr.w	r3, r3, #1
 80189b2:	b29a      	uxth	r2, r3
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80189b8:	e180      	b.n	8018cbc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d106      	bne.n	80189d0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80189c2:	4848      	ldr	r0, [pc, #288]	; (8018ae4 <tcp_receive+0xcfc>)
 80189c4:	f7fd faf0 	bl	8015fa8 <tcp_seg_copy>
 80189c8:	4602      	mov	r2, r0
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	675a      	str	r2, [r3, #116]	; 0x74
 80189ce:	e16d      	b.n	8018cac <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80189d0:	2300      	movs	r3, #0
 80189d2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80189d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80189da:	e157      	b.n	8018c8c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80189dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189de:	68db      	ldr	r3, [r3, #12]
 80189e0:	685a      	ldr	r2, [r3, #4]
 80189e2:	4b41      	ldr	r3, [pc, #260]	; (8018ae8 <tcp_receive+0xd00>)
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	429a      	cmp	r2, r3
 80189e8:	d11d      	bne.n	8018a26 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80189ea:	4b3e      	ldr	r3, [pc, #248]	; (8018ae4 <tcp_receive+0xcfc>)
 80189ec:	891a      	ldrh	r2, [r3, #8]
 80189ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189f0:	891b      	ldrh	r3, [r3, #8]
 80189f2:	429a      	cmp	r2, r3
 80189f4:	f240 814f 	bls.w	8018c96 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80189f8:	483a      	ldr	r0, [pc, #232]	; (8018ae4 <tcp_receive+0xcfc>)
 80189fa:	f7fd fad5 	bl	8015fa8 <tcp_seg_copy>
 80189fe:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8018a00:	697b      	ldr	r3, [r7, #20]
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	f000 8149 	beq.w	8018c9a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8018a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d003      	beq.n	8018a16 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8018a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a10:	697a      	ldr	r2, [r7, #20]
 8018a12:	601a      	str	r2, [r3, #0]
 8018a14:	e002      	b.n	8018a1c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	697a      	ldr	r2, [r7, #20]
 8018a1a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8018a1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018a1e:	6978      	ldr	r0, [r7, #20]
 8018a20:	f7ff f8de 	bl	8017be0 <tcp_oos_insert_segment>
                }
                break;
 8018a24:	e139      	b.n	8018c9a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8018a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d117      	bne.n	8018a5c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8018a2c:	4b2e      	ldr	r3, [pc, #184]	; (8018ae8 <tcp_receive+0xd00>)
 8018a2e:	681a      	ldr	r2, [r3, #0]
 8018a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a32:	68db      	ldr	r3, [r3, #12]
 8018a34:	685b      	ldr	r3, [r3, #4]
 8018a36:	1ad3      	subs	r3, r2, r3
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	da57      	bge.n	8018aec <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018a3c:	4829      	ldr	r0, [pc, #164]	; (8018ae4 <tcp_receive+0xcfc>)
 8018a3e:	f7fd fab3 	bl	8015fa8 <tcp_seg_copy>
 8018a42:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018a44:	69bb      	ldr	r3, [r7, #24]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	f000 8129 	beq.w	8018c9e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	69ba      	ldr	r2, [r7, #24]
 8018a50:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8018a52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018a54:	69b8      	ldr	r0, [r7, #24]
 8018a56:	f7ff f8c3 	bl	8017be0 <tcp_oos_insert_segment>
                  }
                  break;
 8018a5a:	e120      	b.n	8018c9e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018a5c:	4b22      	ldr	r3, [pc, #136]	; (8018ae8 <tcp_receive+0xd00>)
 8018a5e:	681a      	ldr	r2, [r3, #0]
 8018a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a62:	68db      	ldr	r3, [r3, #12]
 8018a64:	685b      	ldr	r3, [r3, #4]
 8018a66:	1ad3      	subs	r3, r2, r3
 8018a68:	3b01      	subs	r3, #1
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	db3e      	blt.n	8018aec <tcp_receive+0xd04>
 8018a6e:	4b1e      	ldr	r3, [pc, #120]	; (8018ae8 <tcp_receive+0xd00>)
 8018a70:	681a      	ldr	r2, [r3, #0]
 8018a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a74:	68db      	ldr	r3, [r3, #12]
 8018a76:	685b      	ldr	r3, [r3, #4]
 8018a78:	1ad3      	subs	r3, r2, r3
 8018a7a:	3301      	adds	r3, #1
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	dc35      	bgt.n	8018aec <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018a80:	4818      	ldr	r0, [pc, #96]	; (8018ae4 <tcp_receive+0xcfc>)
 8018a82:	f7fd fa91 	bl	8015fa8 <tcp_seg_copy>
 8018a86:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8018a88:	69fb      	ldr	r3, [r7, #28]
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	f000 8109 	beq.w	8018ca2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a92:	68db      	ldr	r3, [r3, #12]
 8018a94:	685b      	ldr	r3, [r3, #4]
 8018a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018a98:	8912      	ldrh	r2, [r2, #8]
 8018a9a:	441a      	add	r2, r3
 8018a9c:	4b12      	ldr	r3, [pc, #72]	; (8018ae8 <tcp_receive+0xd00>)
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	1ad3      	subs	r3, r2, r3
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	dd12      	ble.n	8018acc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018aa6:	4b10      	ldr	r3, [pc, #64]	; (8018ae8 <tcp_receive+0xd00>)
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	b29a      	uxth	r2, r3
 8018aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018aae:	68db      	ldr	r3, [r3, #12]
 8018ab0:	685b      	ldr	r3, [r3, #4]
 8018ab2:	b29b      	uxth	r3, r3
 8018ab4:	1ad3      	subs	r3, r2, r3
 8018ab6:	b29a      	uxth	r2, r3
 8018ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018aba:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8018abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018abe:	685a      	ldr	r2, [r3, #4]
 8018ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ac2:	891b      	ldrh	r3, [r3, #8]
 8018ac4:	4619      	mov	r1, r3
 8018ac6:	4610      	mov	r0, r2
 8018ac8:	f7fb fc0c 	bl	80142e4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8018acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ace:	69fa      	ldr	r2, [r7, #28]
 8018ad0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8018ad2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018ad4:	69f8      	ldr	r0, [r7, #28]
 8018ad6:	f7ff f883 	bl	8017be0 <tcp_oos_insert_segment>
                  }
                  break;
 8018ada:	e0e2      	b.n	8018ca2 <tcp_receive+0xeba>
 8018adc:	200047a4 	.word	0x200047a4
 8018ae0:	200047a1 	.word	0x200047a1
 8018ae4:	20004774 	.word	0x20004774
 8018ae8:	20004794 	.word	0x20004794
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8018aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018aee:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8018af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	f040 80c6 	bne.w	8018c86 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8018afa:	4b80      	ldr	r3, [pc, #512]	; (8018cfc <tcp_receive+0xf14>)
 8018afc:	681a      	ldr	r2, [r3, #0]
 8018afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b00:	68db      	ldr	r3, [r3, #12]
 8018b02:	685b      	ldr	r3, [r3, #4]
 8018b04:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	f340 80bd 	ble.w	8018c86 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b0e:	68db      	ldr	r3, [r3, #12]
 8018b10:	899b      	ldrh	r3, [r3, #12]
 8018b12:	b29b      	uxth	r3, r3
 8018b14:	4618      	mov	r0, r3
 8018b16:	f7fa f9af 	bl	8012e78 <lwip_htons>
 8018b1a:	4603      	mov	r3, r0
 8018b1c:	b2db      	uxtb	r3, r3
 8018b1e:	f003 0301 	and.w	r3, r3, #1
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	f040 80bf 	bne.w	8018ca6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8018b28:	4875      	ldr	r0, [pc, #468]	; (8018d00 <tcp_receive+0xf18>)
 8018b2a:	f7fd fa3d 	bl	8015fa8 <tcp_seg_copy>
 8018b2e:	4602      	mov	r2, r0
 8018b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b32:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	f000 80b6 	beq.w	8018caa <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8018b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b40:	68db      	ldr	r3, [r3, #12]
 8018b42:	685b      	ldr	r3, [r3, #4]
 8018b44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018b46:	8912      	ldrh	r2, [r2, #8]
 8018b48:	441a      	add	r2, r3
 8018b4a:	4b6c      	ldr	r3, [pc, #432]	; (8018cfc <tcp_receive+0xf14>)
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	1ad3      	subs	r3, r2, r3
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	dd12      	ble.n	8018b7a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018b54:	4b69      	ldr	r3, [pc, #420]	; (8018cfc <tcp_receive+0xf14>)
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	b29a      	uxth	r2, r3
 8018b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b5c:	68db      	ldr	r3, [r3, #12]
 8018b5e:	685b      	ldr	r3, [r3, #4]
 8018b60:	b29b      	uxth	r3, r3
 8018b62:	1ad3      	subs	r3, r2, r3
 8018b64:	b29a      	uxth	r2, r3
 8018b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b68:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8018b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b6c:	685a      	ldr	r2, [r3, #4]
 8018b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b70:	891b      	ldrh	r3, [r3, #8]
 8018b72:	4619      	mov	r1, r3
 8018b74:	4610      	mov	r0, r2
 8018b76:	f7fb fbb5 	bl	80142e4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8018b7a:	4b62      	ldr	r3, [pc, #392]	; (8018d04 <tcp_receive+0xf1c>)
 8018b7c:	881b      	ldrh	r3, [r3, #0]
 8018b7e:	461a      	mov	r2, r3
 8018b80:	4b5e      	ldr	r3, [pc, #376]	; (8018cfc <tcp_receive+0xf14>)
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	441a      	add	r2, r3
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b8a:	6879      	ldr	r1, [r7, #4]
 8018b8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018b8e:	440b      	add	r3, r1
 8018b90:	1ad3      	subs	r3, r2, r3
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	f340 8089 	ble.w	8018caa <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	68db      	ldr	r3, [r3, #12]
 8018b9e:	899b      	ldrh	r3, [r3, #12]
 8018ba0:	b29b      	uxth	r3, r3
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	f7fa f968 	bl	8012e78 <lwip_htons>
 8018ba8:	4603      	mov	r3, r0
 8018baa:	b2db      	uxtb	r3, r3
 8018bac:	f003 0301 	and.w	r3, r3, #1
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d022      	beq.n	8018bfa <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8018bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	68db      	ldr	r3, [r3, #12]
 8018bba:	899b      	ldrh	r3, [r3, #12]
 8018bbc:	b29b      	uxth	r3, r3
 8018bbe:	b21b      	sxth	r3, r3
 8018bc0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018bc4:	b21c      	sxth	r4, r3
 8018bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	68db      	ldr	r3, [r3, #12]
 8018bcc:	899b      	ldrh	r3, [r3, #12]
 8018bce:	b29b      	uxth	r3, r3
 8018bd0:	4618      	mov	r0, r3
 8018bd2:	f7fa f951 	bl	8012e78 <lwip_htons>
 8018bd6:	4603      	mov	r3, r0
 8018bd8:	b2db      	uxtb	r3, r3
 8018bda:	b29b      	uxth	r3, r3
 8018bdc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8018be0:	b29b      	uxth	r3, r3
 8018be2:	4618      	mov	r0, r3
 8018be4:	f7fa f948 	bl	8012e78 <lwip_htons>
 8018be8:	4603      	mov	r3, r0
 8018bea:	b21b      	sxth	r3, r3
 8018bec:	4323      	orrs	r3, r4
 8018bee:	b21a      	sxth	r2, r3
 8018bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	68db      	ldr	r3, [r3, #12]
 8018bf6:	b292      	uxth	r2, r2
 8018bf8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bfe:	b29a      	uxth	r2, r3
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018c04:	4413      	add	r3, r2
 8018c06:	b299      	uxth	r1, r3
 8018c08:	4b3c      	ldr	r3, [pc, #240]	; (8018cfc <tcp_receive+0xf14>)
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	b29a      	uxth	r2, r3
 8018c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	1a8a      	subs	r2, r1, r2
 8018c14:	b292      	uxth	r2, r2
 8018c16:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	685a      	ldr	r2, [r3, #4]
 8018c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	891b      	ldrh	r3, [r3, #8]
 8018c24:	4619      	mov	r1, r3
 8018c26:	4610      	mov	r0, r2
 8018c28:	f7fb fb5c 	bl	80142e4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8018c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	891c      	ldrh	r4, [r3, #8]
 8018c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	68db      	ldr	r3, [r3, #12]
 8018c38:	899b      	ldrh	r3, [r3, #12]
 8018c3a:	b29b      	uxth	r3, r3
 8018c3c:	4618      	mov	r0, r3
 8018c3e:	f7fa f91b 	bl	8012e78 <lwip_htons>
 8018c42:	4603      	mov	r3, r0
 8018c44:	b2db      	uxtb	r3, r3
 8018c46:	f003 0303 	and.w	r3, r3, #3
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d001      	beq.n	8018c52 <tcp_receive+0xe6a>
 8018c4e:	2301      	movs	r3, #1
 8018c50:	e000      	b.n	8018c54 <tcp_receive+0xe6c>
 8018c52:	2300      	movs	r3, #0
 8018c54:	4423      	add	r3, r4
 8018c56:	b29a      	uxth	r2, r3
 8018c58:	4b2a      	ldr	r3, [pc, #168]	; (8018d04 <tcp_receive+0xf1c>)
 8018c5a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018c5c:	4b29      	ldr	r3, [pc, #164]	; (8018d04 <tcp_receive+0xf1c>)
 8018c5e:	881b      	ldrh	r3, [r3, #0]
 8018c60:	461a      	mov	r2, r3
 8018c62:	4b26      	ldr	r3, [pc, #152]	; (8018cfc <tcp_receive+0xf14>)
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	441a      	add	r2, r3
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c6c:	6879      	ldr	r1, [r7, #4]
 8018c6e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018c70:	440b      	add	r3, r1
 8018c72:	429a      	cmp	r2, r3
 8018c74:	d019      	beq.n	8018caa <tcp_receive+0xec2>
 8018c76:	4b24      	ldr	r3, [pc, #144]	; (8018d08 <tcp_receive+0xf20>)
 8018c78:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8018c7c:	4923      	ldr	r1, [pc, #140]	; (8018d0c <tcp_receive+0xf24>)
 8018c7e:	4824      	ldr	r0, [pc, #144]	; (8018d10 <tcp_receive+0xf28>)
 8018c80:	f006 fd1e 	bl	801f6c0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8018c84:	e011      	b.n	8018caa <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8018c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	f47f aea4 	bne.w	80189dc <tcp_receive+0xbf4>
 8018c94:	e00a      	b.n	8018cac <tcp_receive+0xec4>
                break;
 8018c96:	bf00      	nop
 8018c98:	e008      	b.n	8018cac <tcp_receive+0xec4>
                break;
 8018c9a:	bf00      	nop
 8018c9c:	e006      	b.n	8018cac <tcp_receive+0xec4>
                  break;
 8018c9e:	bf00      	nop
 8018ca0:	e004      	b.n	8018cac <tcp_receive+0xec4>
                  break;
 8018ca2:	bf00      	nop
 8018ca4:	e002      	b.n	8018cac <tcp_receive+0xec4>
                  break;
 8018ca6:	bf00      	nop
 8018ca8:	e000      	b.n	8018cac <tcp_receive+0xec4>
                break;
 8018caa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8018cac:	6878      	ldr	r0, [r7, #4]
 8018cae:	f001 fe8b 	bl	801a9c8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8018cb2:	e003      	b.n	8018cbc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8018cb4:	6878      	ldr	r0, [r7, #4]
 8018cb6:	f001 fe87 	bl	801a9c8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018cba:	e01a      	b.n	8018cf2 <tcp_receive+0xf0a>
 8018cbc:	e019      	b.n	8018cf2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8018cbe:	4b0f      	ldr	r3, [pc, #60]	; (8018cfc <tcp_receive+0xf14>)
 8018cc0:	681a      	ldr	r2, [r3, #0]
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cc6:	1ad3      	subs	r3, r2, r3
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	db0a      	blt.n	8018ce2 <tcp_receive+0xefa>
 8018ccc:	4b0b      	ldr	r3, [pc, #44]	; (8018cfc <tcp_receive+0xf14>)
 8018cce:	681a      	ldr	r2, [r3, #0]
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cd4:	6879      	ldr	r1, [r7, #4]
 8018cd6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018cd8:	440b      	add	r3, r1
 8018cda:	1ad3      	subs	r3, r2, r3
 8018cdc:	3301      	adds	r3, #1
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	dd07      	ble.n	8018cf2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	8b5b      	ldrh	r3, [r3, #26]
 8018ce6:	f043 0302 	orr.w	r3, r3, #2
 8018cea:	b29a      	uxth	r2, r3
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8018cf0:	e7ff      	b.n	8018cf2 <tcp_receive+0xf0a>
 8018cf2:	bf00      	nop
 8018cf4:	3750      	adds	r7, #80	; 0x50
 8018cf6:	46bd      	mov	sp, r7
 8018cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8018cfa:	bf00      	nop
 8018cfc:	20004794 	.word	0x20004794
 8018d00:	20004774 	.word	0x20004774
 8018d04:	2000479e 	.word	0x2000479e
 8018d08:	08024dbc 	.word	0x08024dbc
 8018d0c:	08025164 	.word	0x08025164
 8018d10:	08024e08 	.word	0x08024e08

08018d14 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8018d14:	b480      	push	{r7}
 8018d16:	b083      	sub	sp, #12
 8018d18:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8018d1a:	4b15      	ldr	r3, [pc, #84]	; (8018d70 <tcp_get_next_optbyte+0x5c>)
 8018d1c:	881b      	ldrh	r3, [r3, #0]
 8018d1e:	1c5a      	adds	r2, r3, #1
 8018d20:	b291      	uxth	r1, r2
 8018d22:	4a13      	ldr	r2, [pc, #76]	; (8018d70 <tcp_get_next_optbyte+0x5c>)
 8018d24:	8011      	strh	r1, [r2, #0]
 8018d26:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018d28:	4b12      	ldr	r3, [pc, #72]	; (8018d74 <tcp_get_next_optbyte+0x60>)
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d004      	beq.n	8018d3a <tcp_get_next_optbyte+0x26>
 8018d30:	4b11      	ldr	r3, [pc, #68]	; (8018d78 <tcp_get_next_optbyte+0x64>)
 8018d32:	881b      	ldrh	r3, [r3, #0]
 8018d34:	88fa      	ldrh	r2, [r7, #6]
 8018d36:	429a      	cmp	r2, r3
 8018d38:	d208      	bcs.n	8018d4c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018d3a:	4b10      	ldr	r3, [pc, #64]	; (8018d7c <tcp_get_next_optbyte+0x68>)
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	3314      	adds	r3, #20
 8018d40:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8018d42:	88fb      	ldrh	r3, [r7, #6]
 8018d44:	683a      	ldr	r2, [r7, #0]
 8018d46:	4413      	add	r3, r2
 8018d48:	781b      	ldrb	r3, [r3, #0]
 8018d4a:	e00b      	b.n	8018d64 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018d4c:	88fb      	ldrh	r3, [r7, #6]
 8018d4e:	b2da      	uxtb	r2, r3
 8018d50:	4b09      	ldr	r3, [pc, #36]	; (8018d78 <tcp_get_next_optbyte+0x64>)
 8018d52:	881b      	ldrh	r3, [r3, #0]
 8018d54:	b2db      	uxtb	r3, r3
 8018d56:	1ad3      	subs	r3, r2, r3
 8018d58:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8018d5a:	4b06      	ldr	r3, [pc, #24]	; (8018d74 <tcp_get_next_optbyte+0x60>)
 8018d5c:	681a      	ldr	r2, [r3, #0]
 8018d5e:	797b      	ldrb	r3, [r7, #5]
 8018d60:	4413      	add	r3, r2
 8018d62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018d64:	4618      	mov	r0, r3
 8018d66:	370c      	adds	r7, #12
 8018d68:	46bd      	mov	sp, r7
 8018d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d6e:	4770      	bx	lr
 8018d70:	20004790 	.word	0x20004790
 8018d74:	2000478c 	.word	0x2000478c
 8018d78:	2000478a 	.word	0x2000478a
 8018d7c:	20004784 	.word	0x20004784

08018d80 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8018d80:	b580      	push	{r7, lr}
 8018d82:	b084      	sub	sp, #16
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d106      	bne.n	8018d9c <tcp_parseopt+0x1c>
 8018d8e:	4b32      	ldr	r3, [pc, #200]	; (8018e58 <tcp_parseopt+0xd8>)
 8018d90:	f240 727d 	movw	r2, #1917	; 0x77d
 8018d94:	4931      	ldr	r1, [pc, #196]	; (8018e5c <tcp_parseopt+0xdc>)
 8018d96:	4832      	ldr	r0, [pc, #200]	; (8018e60 <tcp_parseopt+0xe0>)
 8018d98:	f006 fc92 	bl	801f6c0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8018d9c:	4b31      	ldr	r3, [pc, #196]	; (8018e64 <tcp_parseopt+0xe4>)
 8018d9e:	881b      	ldrh	r3, [r3, #0]
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d055      	beq.n	8018e50 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018da4:	4b30      	ldr	r3, [pc, #192]	; (8018e68 <tcp_parseopt+0xe8>)
 8018da6:	2200      	movs	r2, #0
 8018da8:	801a      	strh	r2, [r3, #0]
 8018daa:	e045      	b.n	8018e38 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8018dac:	f7ff ffb2 	bl	8018d14 <tcp_get_next_optbyte>
 8018db0:	4603      	mov	r3, r0
 8018db2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8018db4:	7bfb      	ldrb	r3, [r7, #15]
 8018db6:	2b02      	cmp	r3, #2
 8018db8:	d006      	beq.n	8018dc8 <tcp_parseopt+0x48>
 8018dba:	2b02      	cmp	r3, #2
 8018dbc:	dc2b      	bgt.n	8018e16 <tcp_parseopt+0x96>
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d041      	beq.n	8018e46 <tcp_parseopt+0xc6>
 8018dc2:	2b01      	cmp	r3, #1
 8018dc4:	d127      	bne.n	8018e16 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8018dc6:	e037      	b.n	8018e38 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8018dc8:	f7ff ffa4 	bl	8018d14 <tcp_get_next_optbyte>
 8018dcc:	4603      	mov	r3, r0
 8018dce:	2b04      	cmp	r3, #4
 8018dd0:	d13b      	bne.n	8018e4a <tcp_parseopt+0xca>
 8018dd2:	4b25      	ldr	r3, [pc, #148]	; (8018e68 <tcp_parseopt+0xe8>)
 8018dd4:	881b      	ldrh	r3, [r3, #0]
 8018dd6:	3301      	adds	r3, #1
 8018dd8:	4a22      	ldr	r2, [pc, #136]	; (8018e64 <tcp_parseopt+0xe4>)
 8018dda:	8812      	ldrh	r2, [r2, #0]
 8018ddc:	4293      	cmp	r3, r2
 8018dde:	da34      	bge.n	8018e4a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018de0:	f7ff ff98 	bl	8018d14 <tcp_get_next_optbyte>
 8018de4:	4603      	mov	r3, r0
 8018de6:	b29b      	uxth	r3, r3
 8018de8:	021b      	lsls	r3, r3, #8
 8018dea:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8018dec:	f7ff ff92 	bl	8018d14 <tcp_get_next_optbyte>
 8018df0:	4603      	mov	r3, r0
 8018df2:	b29a      	uxth	r2, r3
 8018df4:	89bb      	ldrh	r3, [r7, #12]
 8018df6:	4313      	orrs	r3, r2
 8018df8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8018dfa:	89bb      	ldrh	r3, [r7, #12]
 8018dfc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8018e00:	d804      	bhi.n	8018e0c <tcp_parseopt+0x8c>
 8018e02:	89bb      	ldrh	r3, [r7, #12]
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d001      	beq.n	8018e0c <tcp_parseopt+0x8c>
 8018e08:	89ba      	ldrh	r2, [r7, #12]
 8018e0a:	e001      	b.n	8018e10 <tcp_parseopt+0x90>
 8018e0c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8018e14:	e010      	b.n	8018e38 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8018e16:	f7ff ff7d 	bl	8018d14 <tcp_get_next_optbyte>
 8018e1a:	4603      	mov	r3, r0
 8018e1c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8018e1e:	7afb      	ldrb	r3, [r7, #11]
 8018e20:	2b01      	cmp	r3, #1
 8018e22:	d914      	bls.n	8018e4e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8018e24:	7afb      	ldrb	r3, [r7, #11]
 8018e26:	b29a      	uxth	r2, r3
 8018e28:	4b0f      	ldr	r3, [pc, #60]	; (8018e68 <tcp_parseopt+0xe8>)
 8018e2a:	881b      	ldrh	r3, [r3, #0]
 8018e2c:	4413      	add	r3, r2
 8018e2e:	b29b      	uxth	r3, r3
 8018e30:	3b02      	subs	r3, #2
 8018e32:	b29a      	uxth	r2, r3
 8018e34:	4b0c      	ldr	r3, [pc, #48]	; (8018e68 <tcp_parseopt+0xe8>)
 8018e36:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018e38:	4b0b      	ldr	r3, [pc, #44]	; (8018e68 <tcp_parseopt+0xe8>)
 8018e3a:	881a      	ldrh	r2, [r3, #0]
 8018e3c:	4b09      	ldr	r3, [pc, #36]	; (8018e64 <tcp_parseopt+0xe4>)
 8018e3e:	881b      	ldrh	r3, [r3, #0]
 8018e40:	429a      	cmp	r2, r3
 8018e42:	d3b3      	bcc.n	8018dac <tcp_parseopt+0x2c>
 8018e44:	e004      	b.n	8018e50 <tcp_parseopt+0xd0>
          return;
 8018e46:	bf00      	nop
 8018e48:	e002      	b.n	8018e50 <tcp_parseopt+0xd0>
            return;
 8018e4a:	bf00      	nop
 8018e4c:	e000      	b.n	8018e50 <tcp_parseopt+0xd0>
            return;
 8018e4e:	bf00      	nop
      }
    }
  }
}
 8018e50:	3710      	adds	r7, #16
 8018e52:	46bd      	mov	sp, r7
 8018e54:	bd80      	pop	{r7, pc}
 8018e56:	bf00      	nop
 8018e58:	08024dbc 	.word	0x08024dbc
 8018e5c:	08025220 	.word	0x08025220
 8018e60:	08024e08 	.word	0x08024e08
 8018e64:	20004788 	.word	0x20004788
 8018e68:	20004790 	.word	0x20004790

08018e6c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018e6c:	b480      	push	{r7}
 8018e6e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8018e70:	4b05      	ldr	r3, [pc, #20]	; (8018e88 <tcp_trigger_input_pcb_close+0x1c>)
 8018e72:	781b      	ldrb	r3, [r3, #0]
 8018e74:	f043 0310 	orr.w	r3, r3, #16
 8018e78:	b2da      	uxtb	r2, r3
 8018e7a:	4b03      	ldr	r3, [pc, #12]	; (8018e88 <tcp_trigger_input_pcb_close+0x1c>)
 8018e7c:	701a      	strb	r2, [r3, #0]
}
 8018e7e:	bf00      	nop
 8018e80:	46bd      	mov	sp, r7
 8018e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e86:	4770      	bx	lr
 8018e88:	200047a1 	.word	0x200047a1

08018e8c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b084      	sub	sp, #16
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	60f8      	str	r0, [r7, #12]
 8018e94:	60b9      	str	r1, [r7, #8]
 8018e96:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8018e98:	68fb      	ldr	r3, [r7, #12]
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d00a      	beq.n	8018eb4 <tcp_route+0x28>
 8018e9e:	68fb      	ldr	r3, [r7, #12]
 8018ea0:	7a1b      	ldrb	r3, [r3, #8]
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	d006      	beq.n	8018eb4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8018ea6:	68fb      	ldr	r3, [r7, #12]
 8018ea8:	7a1b      	ldrb	r3, [r3, #8]
 8018eaa:	4618      	mov	r0, r3
 8018eac:	f7fb f812 	bl	8013ed4 <netif_get_by_index>
 8018eb0:	4603      	mov	r3, r0
 8018eb2:	e003      	b.n	8018ebc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8018eb4:	6878      	ldr	r0, [r7, #4]
 8018eb6:	f003 fe35 	bl	801cb24 <ip4_route>
 8018eba:	4603      	mov	r3, r0
  }
}
 8018ebc:	4618      	mov	r0, r3
 8018ebe:	3710      	adds	r7, #16
 8018ec0:	46bd      	mov	sp, r7
 8018ec2:	bd80      	pop	{r7, pc}

08018ec4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8018ec4:	b590      	push	{r4, r7, lr}
 8018ec6:	b087      	sub	sp, #28
 8018ec8:	af00      	add	r7, sp, #0
 8018eca:	60f8      	str	r0, [r7, #12]
 8018ecc:	60b9      	str	r1, [r7, #8]
 8018ece:	603b      	str	r3, [r7, #0]
 8018ed0:	4613      	mov	r3, r2
 8018ed2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8018ed4:	68fb      	ldr	r3, [r7, #12]
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	d105      	bne.n	8018ee6 <tcp_create_segment+0x22>
 8018eda:	4b44      	ldr	r3, [pc, #272]	; (8018fec <tcp_create_segment+0x128>)
 8018edc:	22a3      	movs	r2, #163	; 0xa3
 8018ede:	4944      	ldr	r1, [pc, #272]	; (8018ff0 <tcp_create_segment+0x12c>)
 8018ee0:	4844      	ldr	r0, [pc, #272]	; (8018ff4 <tcp_create_segment+0x130>)
 8018ee2:	f006 fbed 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8018ee6:	68bb      	ldr	r3, [r7, #8]
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d105      	bne.n	8018ef8 <tcp_create_segment+0x34>
 8018eec:	4b3f      	ldr	r3, [pc, #252]	; (8018fec <tcp_create_segment+0x128>)
 8018eee:	22a4      	movs	r2, #164	; 0xa4
 8018ef0:	4941      	ldr	r1, [pc, #260]	; (8018ff8 <tcp_create_segment+0x134>)
 8018ef2:	4840      	ldr	r0, [pc, #256]	; (8018ff4 <tcp_create_segment+0x130>)
 8018ef4:	f006 fbe4 	bl	801f6c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018ef8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018efc:	009b      	lsls	r3, r3, #2
 8018efe:	b2db      	uxtb	r3, r3
 8018f00:	f003 0304 	and.w	r3, r3, #4
 8018f04:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8018f06:	2003      	movs	r0, #3
 8018f08:	f7fa fca2 	bl	8013850 <memp_malloc>
 8018f0c:	6138      	str	r0, [r7, #16]
 8018f0e:	693b      	ldr	r3, [r7, #16]
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d104      	bne.n	8018f1e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8018f14:	68b8      	ldr	r0, [r7, #8]
 8018f16:	f7fb fb6b 	bl	80145f0 <pbuf_free>
    return NULL;
 8018f1a:	2300      	movs	r3, #0
 8018f1c:	e061      	b.n	8018fe2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8018f1e:	693b      	ldr	r3, [r7, #16]
 8018f20:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018f24:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8018f26:	693b      	ldr	r3, [r7, #16]
 8018f28:	2200      	movs	r2, #0
 8018f2a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8018f2c:	693b      	ldr	r3, [r7, #16]
 8018f2e:	68ba      	ldr	r2, [r7, #8]
 8018f30:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8018f32:	68bb      	ldr	r3, [r7, #8]
 8018f34:	891a      	ldrh	r2, [r3, #8]
 8018f36:	7dfb      	ldrb	r3, [r7, #23]
 8018f38:	b29b      	uxth	r3, r3
 8018f3a:	429a      	cmp	r2, r3
 8018f3c:	d205      	bcs.n	8018f4a <tcp_create_segment+0x86>
 8018f3e:	4b2b      	ldr	r3, [pc, #172]	; (8018fec <tcp_create_segment+0x128>)
 8018f40:	22b0      	movs	r2, #176	; 0xb0
 8018f42:	492e      	ldr	r1, [pc, #184]	; (8018ffc <tcp_create_segment+0x138>)
 8018f44:	482b      	ldr	r0, [pc, #172]	; (8018ff4 <tcp_create_segment+0x130>)
 8018f46:	f006 fbbb 	bl	801f6c0 <iprintf>
  seg->len = p->tot_len - optlen;
 8018f4a:	68bb      	ldr	r3, [r7, #8]
 8018f4c:	891a      	ldrh	r2, [r3, #8]
 8018f4e:	7dfb      	ldrb	r3, [r7, #23]
 8018f50:	b29b      	uxth	r3, r3
 8018f52:	1ad3      	subs	r3, r2, r3
 8018f54:	b29a      	uxth	r2, r3
 8018f56:	693b      	ldr	r3, [r7, #16]
 8018f58:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018f5a:	2114      	movs	r1, #20
 8018f5c:	68b8      	ldr	r0, [r7, #8]
 8018f5e:	f7fb fab1 	bl	80144c4 <pbuf_add_header>
 8018f62:	4603      	mov	r3, r0
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d004      	beq.n	8018f72 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018f68:	6938      	ldr	r0, [r7, #16]
 8018f6a:	f7fc ffe6 	bl	8015f3a <tcp_seg_free>
    return NULL;
 8018f6e:	2300      	movs	r3, #0
 8018f70:	e037      	b.n	8018fe2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8018f72:	693b      	ldr	r3, [r7, #16]
 8018f74:	685b      	ldr	r3, [r3, #4]
 8018f76:	685a      	ldr	r2, [r3, #4]
 8018f78:	693b      	ldr	r3, [r7, #16]
 8018f7a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018f7c:	68fb      	ldr	r3, [r7, #12]
 8018f7e:	8ada      	ldrh	r2, [r3, #22]
 8018f80:	693b      	ldr	r3, [r7, #16]
 8018f82:	68dc      	ldr	r4, [r3, #12]
 8018f84:	4610      	mov	r0, r2
 8018f86:	f7f9 ff77 	bl	8012e78 <lwip_htons>
 8018f8a:	4603      	mov	r3, r0
 8018f8c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	8b1a      	ldrh	r2, [r3, #24]
 8018f92:	693b      	ldr	r3, [r7, #16]
 8018f94:	68dc      	ldr	r4, [r3, #12]
 8018f96:	4610      	mov	r0, r2
 8018f98:	f7f9 ff6e 	bl	8012e78 <lwip_htons>
 8018f9c:	4603      	mov	r3, r0
 8018f9e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8018fa0:	693b      	ldr	r3, [r7, #16]
 8018fa2:	68dc      	ldr	r4, [r3, #12]
 8018fa4:	6838      	ldr	r0, [r7, #0]
 8018fa6:	f7f9 ff7c 	bl	8012ea2 <lwip_htonl>
 8018faa:	4603      	mov	r3, r0
 8018fac:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8018fae:	7dfb      	ldrb	r3, [r7, #23]
 8018fb0:	089b      	lsrs	r3, r3, #2
 8018fb2:	b2db      	uxtb	r3, r3
 8018fb4:	b29b      	uxth	r3, r3
 8018fb6:	3305      	adds	r3, #5
 8018fb8:	b29b      	uxth	r3, r3
 8018fba:	031b      	lsls	r3, r3, #12
 8018fbc:	b29a      	uxth	r2, r3
 8018fbe:	79fb      	ldrb	r3, [r7, #7]
 8018fc0:	b29b      	uxth	r3, r3
 8018fc2:	4313      	orrs	r3, r2
 8018fc4:	b29a      	uxth	r2, r3
 8018fc6:	693b      	ldr	r3, [r7, #16]
 8018fc8:	68dc      	ldr	r4, [r3, #12]
 8018fca:	4610      	mov	r0, r2
 8018fcc:	f7f9 ff54 	bl	8012e78 <lwip_htons>
 8018fd0:	4603      	mov	r3, r0
 8018fd2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8018fd4:	693b      	ldr	r3, [r7, #16]
 8018fd6:	68db      	ldr	r3, [r3, #12]
 8018fd8:	2200      	movs	r2, #0
 8018fda:	749a      	strb	r2, [r3, #18]
 8018fdc:	2200      	movs	r2, #0
 8018fde:	74da      	strb	r2, [r3, #19]
  return seg;
 8018fe0:	693b      	ldr	r3, [r7, #16]
}
 8018fe2:	4618      	mov	r0, r3
 8018fe4:	371c      	adds	r7, #28
 8018fe6:	46bd      	mov	sp, r7
 8018fe8:	bd90      	pop	{r4, r7, pc}
 8018fea:	bf00      	nop
 8018fec:	0802523c 	.word	0x0802523c
 8018ff0:	08025270 	.word	0x08025270
 8018ff4:	08025290 	.word	0x08025290
 8018ff8:	080252b8 	.word	0x080252b8
 8018ffc:	080252dc 	.word	0x080252dc

08019000 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8019000:	b580      	push	{r7, lr}
 8019002:	b086      	sub	sp, #24
 8019004:	af00      	add	r7, sp, #0
 8019006:	607b      	str	r3, [r7, #4]
 8019008:	4603      	mov	r3, r0
 801900a:	73fb      	strb	r3, [r7, #15]
 801900c:	460b      	mov	r3, r1
 801900e:	81bb      	strh	r3, [r7, #12]
 8019010:	4613      	mov	r3, r2
 8019012:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8019014:	89bb      	ldrh	r3, [r7, #12]
 8019016:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	2b00      	cmp	r3, #0
 801901c:	d105      	bne.n	801902a <tcp_pbuf_prealloc+0x2a>
 801901e:	4b30      	ldr	r3, [pc, #192]	; (80190e0 <tcp_pbuf_prealloc+0xe0>)
 8019020:	22e8      	movs	r2, #232	; 0xe8
 8019022:	4930      	ldr	r1, [pc, #192]	; (80190e4 <tcp_pbuf_prealloc+0xe4>)
 8019024:	4830      	ldr	r0, [pc, #192]	; (80190e8 <tcp_pbuf_prealloc+0xe8>)
 8019026:	f006 fb4b 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801902a:	6a3b      	ldr	r3, [r7, #32]
 801902c:	2b00      	cmp	r3, #0
 801902e:	d105      	bne.n	801903c <tcp_pbuf_prealloc+0x3c>
 8019030:	4b2b      	ldr	r3, [pc, #172]	; (80190e0 <tcp_pbuf_prealloc+0xe0>)
 8019032:	22e9      	movs	r2, #233	; 0xe9
 8019034:	492d      	ldr	r1, [pc, #180]	; (80190ec <tcp_pbuf_prealloc+0xec>)
 8019036:	482c      	ldr	r0, [pc, #176]	; (80190e8 <tcp_pbuf_prealloc+0xe8>)
 8019038:	f006 fb42 	bl	801f6c0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801903c:	89ba      	ldrh	r2, [r7, #12]
 801903e:	897b      	ldrh	r3, [r7, #10]
 8019040:	429a      	cmp	r2, r3
 8019042:	d221      	bcs.n	8019088 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019044:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019048:	f003 0302 	and.w	r3, r3, #2
 801904c:	2b00      	cmp	r3, #0
 801904e:	d111      	bne.n	8019074 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8019050:	6a3b      	ldr	r3, [r7, #32]
 8019052:	8b5b      	ldrh	r3, [r3, #26]
 8019054:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019058:	2b00      	cmp	r3, #0
 801905a:	d115      	bne.n	8019088 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801905c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019060:	2b00      	cmp	r3, #0
 8019062:	d007      	beq.n	8019074 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8019064:	6a3b      	ldr	r3, [r7, #32]
 8019066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8019068:	2b00      	cmp	r3, #0
 801906a:	d103      	bne.n	8019074 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801906c:	6a3b      	ldr	r3, [r7, #32]
 801906e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8019070:	2b00      	cmp	r3, #0
 8019072:	d009      	beq.n	8019088 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8019074:	89bb      	ldrh	r3, [r7, #12]
 8019076:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801907a:	f023 0203 	bic.w	r2, r3, #3
 801907e:	897b      	ldrh	r3, [r7, #10]
 8019080:	4293      	cmp	r3, r2
 8019082:	bf28      	it	cs
 8019084:	4613      	movcs	r3, r2
 8019086:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8019088:	8af9      	ldrh	r1, [r7, #22]
 801908a:	7bfb      	ldrb	r3, [r7, #15]
 801908c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019090:	4618      	mov	r0, r3
 8019092:	f7fa ffc9 	bl	8014028 <pbuf_alloc>
 8019096:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019098:	693b      	ldr	r3, [r7, #16]
 801909a:	2b00      	cmp	r3, #0
 801909c:	d101      	bne.n	80190a2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801909e:	2300      	movs	r3, #0
 80190a0:	e019      	b.n	80190d6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80190a2:	693b      	ldr	r3, [r7, #16]
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d006      	beq.n	80190b8 <tcp_pbuf_prealloc+0xb8>
 80190aa:	4b0d      	ldr	r3, [pc, #52]	; (80190e0 <tcp_pbuf_prealloc+0xe0>)
 80190ac:	f240 120b 	movw	r2, #267	; 0x10b
 80190b0:	490f      	ldr	r1, [pc, #60]	; (80190f0 <tcp_pbuf_prealloc+0xf0>)
 80190b2:	480d      	ldr	r0, [pc, #52]	; (80190e8 <tcp_pbuf_prealloc+0xe8>)
 80190b4:	f006 fb04 	bl	801f6c0 <iprintf>
  *oversize = p->len - length;
 80190b8:	693b      	ldr	r3, [r7, #16]
 80190ba:	895a      	ldrh	r2, [r3, #10]
 80190bc:	89bb      	ldrh	r3, [r7, #12]
 80190be:	1ad3      	subs	r3, r2, r3
 80190c0:	b29a      	uxth	r2, r3
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80190c6:	693b      	ldr	r3, [r7, #16]
 80190c8:	89ba      	ldrh	r2, [r7, #12]
 80190ca:	811a      	strh	r2, [r3, #8]
 80190cc:	693b      	ldr	r3, [r7, #16]
 80190ce:	891a      	ldrh	r2, [r3, #8]
 80190d0:	693b      	ldr	r3, [r7, #16]
 80190d2:	815a      	strh	r2, [r3, #10]
  return p;
 80190d4:	693b      	ldr	r3, [r7, #16]
}
 80190d6:	4618      	mov	r0, r3
 80190d8:	3718      	adds	r7, #24
 80190da:	46bd      	mov	sp, r7
 80190dc:	bd80      	pop	{r7, pc}
 80190de:	bf00      	nop
 80190e0:	0802523c 	.word	0x0802523c
 80190e4:	080252f4 	.word	0x080252f4
 80190e8:	08025290 	.word	0x08025290
 80190ec:	08025318 	.word	0x08025318
 80190f0:	08025338 	.word	0x08025338

080190f4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80190f4:	b580      	push	{r7, lr}
 80190f6:	b082      	sub	sp, #8
 80190f8:	af00      	add	r7, sp, #0
 80190fa:	6078      	str	r0, [r7, #4]
 80190fc:	460b      	mov	r3, r1
 80190fe:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	2b00      	cmp	r3, #0
 8019104:	d106      	bne.n	8019114 <tcp_write_checks+0x20>
 8019106:	4b33      	ldr	r3, [pc, #204]	; (80191d4 <tcp_write_checks+0xe0>)
 8019108:	f240 1233 	movw	r2, #307	; 0x133
 801910c:	4932      	ldr	r1, [pc, #200]	; (80191d8 <tcp_write_checks+0xe4>)
 801910e:	4833      	ldr	r0, [pc, #204]	; (80191dc <tcp_write_checks+0xe8>)
 8019110:	f006 fad6 	bl	801f6c0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	7d1b      	ldrb	r3, [r3, #20]
 8019118:	2b04      	cmp	r3, #4
 801911a:	d00e      	beq.n	801913a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8019120:	2b07      	cmp	r3, #7
 8019122:	d00a      	beq.n	801913a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8019128:	2b02      	cmp	r3, #2
 801912a:	d006      	beq.n	801913a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8019130:	2b03      	cmp	r3, #3
 8019132:	d002      	beq.n	801913a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8019134:	f06f 030a 	mvn.w	r3, #10
 8019138:	e048      	b.n	80191cc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801913a:	887b      	ldrh	r3, [r7, #2]
 801913c:	2b00      	cmp	r3, #0
 801913e:	d101      	bne.n	8019144 <tcp_write_checks+0x50>
    return ERR_OK;
 8019140:	2300      	movs	r3, #0
 8019142:	e043      	b.n	80191cc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801914a:	887a      	ldrh	r2, [r7, #2]
 801914c:	429a      	cmp	r2, r3
 801914e:	d909      	bls.n	8019164 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	8b5b      	ldrh	r3, [r3, #26]
 8019154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019158:	b29a      	uxth	r2, r3
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801915e:	f04f 33ff 	mov.w	r3, #4294967295
 8019162:	e033      	b.n	80191cc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801916a:	2b08      	cmp	r3, #8
 801916c:	d909      	bls.n	8019182 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	8b5b      	ldrh	r3, [r3, #26]
 8019172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019176:	b29a      	uxth	r2, r3
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801917c:	f04f 33ff 	mov.w	r3, #4294967295
 8019180:	e024      	b.n	80191cc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019188:	2b00      	cmp	r3, #0
 801918a:	d00f      	beq.n	80191ac <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019190:	2b00      	cmp	r3, #0
 8019192:	d11a      	bne.n	80191ca <tcp_write_checks+0xd6>
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019198:	2b00      	cmp	r3, #0
 801919a:	d116      	bne.n	80191ca <tcp_write_checks+0xd6>
 801919c:	4b0d      	ldr	r3, [pc, #52]	; (80191d4 <tcp_write_checks+0xe0>)
 801919e:	f240 1255 	movw	r2, #341	; 0x155
 80191a2:	490f      	ldr	r1, [pc, #60]	; (80191e0 <tcp_write_checks+0xec>)
 80191a4:	480d      	ldr	r0, [pc, #52]	; (80191dc <tcp_write_checks+0xe8>)
 80191a6:	f006 fa8b 	bl	801f6c0 <iprintf>
 80191aa:	e00e      	b.n	80191ca <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d103      	bne.n	80191bc <tcp_write_checks+0xc8>
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	d006      	beq.n	80191ca <tcp_write_checks+0xd6>
 80191bc:	4b05      	ldr	r3, [pc, #20]	; (80191d4 <tcp_write_checks+0xe0>)
 80191be:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80191c2:	4908      	ldr	r1, [pc, #32]	; (80191e4 <tcp_write_checks+0xf0>)
 80191c4:	4805      	ldr	r0, [pc, #20]	; (80191dc <tcp_write_checks+0xe8>)
 80191c6:	f006 fa7b 	bl	801f6c0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80191ca:	2300      	movs	r3, #0
}
 80191cc:	4618      	mov	r0, r3
 80191ce:	3708      	adds	r7, #8
 80191d0:	46bd      	mov	sp, r7
 80191d2:	bd80      	pop	{r7, pc}
 80191d4:	0802523c 	.word	0x0802523c
 80191d8:	0802534c 	.word	0x0802534c
 80191dc:	08025290 	.word	0x08025290
 80191e0:	0802536c 	.word	0x0802536c
 80191e4:	080253a8 	.word	0x080253a8

080191e8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80191e8:	b590      	push	{r4, r7, lr}
 80191ea:	b09b      	sub	sp, #108	; 0x6c
 80191ec:	af04      	add	r7, sp, #16
 80191ee:	60f8      	str	r0, [r7, #12]
 80191f0:	60b9      	str	r1, [r7, #8]
 80191f2:	4611      	mov	r1, r2
 80191f4:	461a      	mov	r2, r3
 80191f6:	460b      	mov	r3, r1
 80191f8:	80fb      	strh	r3, [r7, #6]
 80191fa:	4613      	mov	r3, r2
 80191fc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80191fe:	2300      	movs	r3, #0
 8019200:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8019202:	2300      	movs	r3, #0
 8019204:	653b      	str	r3, [r7, #80]	; 0x50
 8019206:	2300      	movs	r3, #0
 8019208:	64fb      	str	r3, [r7, #76]	; 0x4c
 801920a:	2300      	movs	r3, #0
 801920c:	64bb      	str	r3, [r7, #72]	; 0x48
 801920e:	2300      	movs	r3, #0
 8019210:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8019212:	2300      	movs	r3, #0
 8019214:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8019218:	2300      	movs	r3, #0
 801921a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801921e:	2300      	movs	r3, #0
 8019220:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8019222:	2300      	movs	r3, #0
 8019224:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8019226:	2300      	movs	r3, #0
 8019228:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	2b00      	cmp	r3, #0
 801922e:	d109      	bne.n	8019244 <tcp_write+0x5c>
 8019230:	4ba4      	ldr	r3, [pc, #656]	; (80194c4 <tcp_write+0x2dc>)
 8019232:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8019236:	49a4      	ldr	r1, [pc, #656]	; (80194c8 <tcp_write+0x2e0>)
 8019238:	48a4      	ldr	r0, [pc, #656]	; (80194cc <tcp_write+0x2e4>)
 801923a:	f006 fa41 	bl	801f6c0 <iprintf>
 801923e:	f06f 030f 	mvn.w	r3, #15
 8019242:	e32a      	b.n	801989a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801924a:	085b      	lsrs	r3, r3, #1
 801924c:	b29a      	uxth	r2, r3
 801924e:	68fb      	ldr	r3, [r7, #12]
 8019250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019252:	4293      	cmp	r3, r2
 8019254:	bf28      	it	cs
 8019256:	4613      	movcs	r3, r2
 8019258:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801925a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801925c:	2b00      	cmp	r3, #0
 801925e:	d102      	bne.n	8019266 <tcp_write+0x7e>
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019264:	e000      	b.n	8019268 <tcp_write+0x80>
 8019266:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019268:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801926a:	68bb      	ldr	r3, [r7, #8]
 801926c:	2b00      	cmp	r3, #0
 801926e:	d109      	bne.n	8019284 <tcp_write+0x9c>
 8019270:	4b94      	ldr	r3, [pc, #592]	; (80194c4 <tcp_write+0x2dc>)
 8019272:	f240 12ad 	movw	r2, #429	; 0x1ad
 8019276:	4996      	ldr	r1, [pc, #600]	; (80194d0 <tcp_write+0x2e8>)
 8019278:	4894      	ldr	r0, [pc, #592]	; (80194cc <tcp_write+0x2e4>)
 801927a:	f006 fa21 	bl	801f6c0 <iprintf>
 801927e:	f06f 030f 	mvn.w	r3, #15
 8019282:	e30a      	b.n	801989a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8019284:	88fb      	ldrh	r3, [r7, #6]
 8019286:	4619      	mov	r1, r3
 8019288:	68f8      	ldr	r0, [r7, #12]
 801928a:	f7ff ff33 	bl	80190f4 <tcp_write_checks>
 801928e:	4603      	mov	r3, r0
 8019290:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8019294:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8019298:	2b00      	cmp	r3, #0
 801929a:	d002      	beq.n	80192a2 <tcp_write+0xba>
    return err;
 801929c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80192a0:	e2fb      	b.n	801989a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80192a2:	68fb      	ldr	r3, [r7, #12]
 80192a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80192a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80192ac:	2300      	movs	r3, #0
 80192ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	f000 80f6 	beq.w	80194a8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80192bc:	68fb      	ldr	r3, [r7, #12]
 80192be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80192c0:	653b      	str	r3, [r7, #80]	; 0x50
 80192c2:	e002      	b.n	80192ca <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80192c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80192ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	d1f8      	bne.n	80192c4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80192d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192d4:	7a9b      	ldrb	r3, [r3, #10]
 80192d6:	009b      	lsls	r3, r3, #2
 80192d8:	b29b      	uxth	r3, r3
 80192da:	f003 0304 	and.w	r3, r3, #4
 80192de:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80192e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80192e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192e4:	891b      	ldrh	r3, [r3, #8]
 80192e6:	4619      	mov	r1, r3
 80192e8:	8c3b      	ldrh	r3, [r7, #32]
 80192ea:	440b      	add	r3, r1
 80192ec:	429a      	cmp	r2, r3
 80192ee:	da06      	bge.n	80192fe <tcp_write+0x116>
 80192f0:	4b74      	ldr	r3, [pc, #464]	; (80194c4 <tcp_write+0x2dc>)
 80192f2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80192f6:	4977      	ldr	r1, [pc, #476]	; (80194d4 <tcp_write+0x2ec>)
 80192f8:	4874      	ldr	r0, [pc, #464]	; (80194cc <tcp_write+0x2e4>)
 80192fa:	f006 f9e1 	bl	801f6c0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80192fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019300:	891a      	ldrh	r2, [r3, #8]
 8019302:	8c3b      	ldrh	r3, [r7, #32]
 8019304:	4413      	add	r3, r2
 8019306:	b29b      	uxth	r3, r3
 8019308:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801930a:	1ad3      	subs	r3, r2, r3
 801930c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019314:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8019316:	8a7b      	ldrh	r3, [r7, #18]
 8019318:	2b00      	cmp	r3, #0
 801931a:	d026      	beq.n	801936a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801931c:	8a7b      	ldrh	r3, [r7, #18]
 801931e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019320:	429a      	cmp	r2, r3
 8019322:	d206      	bcs.n	8019332 <tcp_write+0x14a>
 8019324:	4b67      	ldr	r3, [pc, #412]	; (80194c4 <tcp_write+0x2dc>)
 8019326:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801932a:	496b      	ldr	r1, [pc, #428]	; (80194d8 <tcp_write+0x2f0>)
 801932c:	4867      	ldr	r0, [pc, #412]	; (80194cc <tcp_write+0x2e4>)
 801932e:	f006 f9c7 	bl	801f6c0 <iprintf>
      seg = last_unsent;
 8019332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019334:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8019336:	8a7b      	ldrh	r3, [r7, #18]
 8019338:	88fa      	ldrh	r2, [r7, #6]
 801933a:	4293      	cmp	r3, r2
 801933c:	bf28      	it	cs
 801933e:	4613      	movcs	r3, r2
 8019340:	b29b      	uxth	r3, r3
 8019342:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019344:	4293      	cmp	r3, r2
 8019346:	bf28      	it	cs
 8019348:	4613      	movcs	r3, r2
 801934a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801934c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019350:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019352:	4413      	add	r3, r2
 8019354:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8019358:	8a7a      	ldrh	r2, [r7, #18]
 801935a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801935c:	1ad3      	subs	r3, r2, r3
 801935e:	b29b      	uxth	r3, r3
 8019360:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8019362:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019364:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019366:	1ad3      	subs	r3, r2, r3
 8019368:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801936a:	8a7b      	ldrh	r3, [r7, #18]
 801936c:	2b00      	cmp	r3, #0
 801936e:	d00b      	beq.n	8019388 <tcp_write+0x1a0>
 8019370:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019374:	88fb      	ldrh	r3, [r7, #6]
 8019376:	429a      	cmp	r2, r3
 8019378:	d006      	beq.n	8019388 <tcp_write+0x1a0>
 801937a:	4b52      	ldr	r3, [pc, #328]	; (80194c4 <tcp_write+0x2dc>)
 801937c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019380:	4956      	ldr	r1, [pc, #344]	; (80194dc <tcp_write+0x2f4>)
 8019382:	4852      	ldr	r0, [pc, #328]	; (80194cc <tcp_write+0x2e4>)
 8019384:	f006 f99c 	bl	801f6c0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8019388:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801938c:	88fb      	ldrh	r3, [r7, #6]
 801938e:	429a      	cmp	r2, r3
 8019390:	f080 8167 	bcs.w	8019662 <tcp_write+0x47a>
 8019394:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019396:	2b00      	cmp	r3, #0
 8019398:	f000 8163 	beq.w	8019662 <tcp_write+0x47a>
 801939c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801939e:	891b      	ldrh	r3, [r3, #8]
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	f000 815e 	beq.w	8019662 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80193a6:	88fa      	ldrh	r2, [r7, #6]
 80193a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80193ac:	1ad2      	subs	r2, r2, r3
 80193ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80193b0:	4293      	cmp	r3, r2
 80193b2:	bfa8      	it	ge
 80193b4:	4613      	movge	r3, r2
 80193b6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80193b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80193ba:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80193bc:	797b      	ldrb	r3, [r7, #5]
 80193be:	f003 0301 	and.w	r3, r3, #1
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d027      	beq.n	8019416 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80193c6:	f107 0012 	add.w	r0, r7, #18
 80193ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80193cc:	8bf9      	ldrh	r1, [r7, #30]
 80193ce:	2301      	movs	r3, #1
 80193d0:	9302      	str	r3, [sp, #8]
 80193d2:	797b      	ldrb	r3, [r7, #5]
 80193d4:	9301      	str	r3, [sp, #4]
 80193d6:	68fb      	ldr	r3, [r7, #12]
 80193d8:	9300      	str	r3, [sp, #0]
 80193da:	4603      	mov	r3, r0
 80193dc:	2000      	movs	r0, #0
 80193de:	f7ff fe0f 	bl	8019000 <tcp_pbuf_prealloc>
 80193e2:	6578      	str	r0, [r7, #84]	; 0x54
 80193e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	f000 8225 	beq.w	8019836 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80193ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80193ee:	6858      	ldr	r0, [r3, #4]
 80193f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80193f4:	68ba      	ldr	r2, [r7, #8]
 80193f6:	4413      	add	r3, r2
 80193f8:	8bfa      	ldrh	r2, [r7, #30]
 80193fa:	4619      	mov	r1, r3
 80193fc:	f005 feb2 	bl	801f164 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8019400:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019402:	f7fb f983 	bl	801470c <pbuf_clen>
 8019406:	4603      	mov	r3, r0
 8019408:	461a      	mov	r2, r3
 801940a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801940e:	4413      	add	r3, r2
 8019410:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8019414:	e041      	b.n	801949a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8019416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019418:	685b      	ldr	r3, [r3, #4]
 801941a:	637b      	str	r3, [r7, #52]	; 0x34
 801941c:	e002      	b.n	8019424 <tcp_write+0x23c>
 801941e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019420:	681b      	ldr	r3, [r3, #0]
 8019422:	637b      	str	r3, [r7, #52]	; 0x34
 8019424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	2b00      	cmp	r3, #0
 801942a:	d1f8      	bne.n	801941e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801942c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801942e:	7b1b      	ldrb	r3, [r3, #12]
 8019430:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8019434:	2b00      	cmp	r3, #0
 8019436:	d115      	bne.n	8019464 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8019438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801943a:	685b      	ldr	r3, [r3, #4]
 801943c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801943e:	8952      	ldrh	r2, [r2, #10]
 8019440:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019442:	68ba      	ldr	r2, [r7, #8]
 8019444:	429a      	cmp	r2, r3
 8019446:	d10d      	bne.n	8019464 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8019448:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801944c:	2b00      	cmp	r3, #0
 801944e:	d006      	beq.n	801945e <tcp_write+0x276>
 8019450:	4b1c      	ldr	r3, [pc, #112]	; (80194c4 <tcp_write+0x2dc>)
 8019452:	f240 2231 	movw	r2, #561	; 0x231
 8019456:	4922      	ldr	r1, [pc, #136]	; (80194e0 <tcp_write+0x2f8>)
 8019458:	481c      	ldr	r0, [pc, #112]	; (80194cc <tcp_write+0x2e4>)
 801945a:	f006 f931 	bl	801f6c0 <iprintf>
          extendlen = seglen;
 801945e:	8bfb      	ldrh	r3, [r7, #30]
 8019460:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8019462:	e01a      	b.n	801949a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8019464:	8bfb      	ldrh	r3, [r7, #30]
 8019466:	2201      	movs	r2, #1
 8019468:	4619      	mov	r1, r3
 801946a:	2000      	movs	r0, #0
 801946c:	f7fa fddc 	bl	8014028 <pbuf_alloc>
 8019470:	6578      	str	r0, [r7, #84]	; 0x54
 8019472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019474:	2b00      	cmp	r3, #0
 8019476:	f000 81e0 	beq.w	801983a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801947a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801947e:	68ba      	ldr	r2, [r7, #8]
 8019480:	441a      	add	r2, r3
 8019482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019484:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8019486:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019488:	f7fb f940 	bl	801470c <pbuf_clen>
 801948c:	4603      	mov	r3, r0
 801948e:	461a      	mov	r2, r3
 8019490:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019494:	4413      	add	r3, r2
 8019496:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801949a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801949e:	8bfb      	ldrh	r3, [r7, #30]
 80194a0:	4413      	add	r3, r2
 80194a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80194a6:	e0dc      	b.n	8019662 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80194a8:	68fb      	ldr	r3, [r7, #12]
 80194aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	f000 80d7 	beq.w	8019662 <tcp_write+0x47a>
 80194b4:	4b03      	ldr	r3, [pc, #12]	; (80194c4 <tcp_write+0x2dc>)
 80194b6:	f240 224a 	movw	r2, #586	; 0x24a
 80194ba:	490a      	ldr	r1, [pc, #40]	; (80194e4 <tcp_write+0x2fc>)
 80194bc:	4803      	ldr	r0, [pc, #12]	; (80194cc <tcp_write+0x2e4>)
 80194be:	f006 f8ff 	bl	801f6c0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80194c2:	e0ce      	b.n	8019662 <tcp_write+0x47a>
 80194c4:	0802523c 	.word	0x0802523c
 80194c8:	080253dc 	.word	0x080253dc
 80194cc:	08025290 	.word	0x08025290
 80194d0:	080253f4 	.word	0x080253f4
 80194d4:	08025428 	.word	0x08025428
 80194d8:	08025440 	.word	0x08025440
 80194dc:	08025460 	.word	0x08025460
 80194e0:	08025480 	.word	0x08025480
 80194e4:	080254ac 	.word	0x080254ac
    struct pbuf *p;
    u16_t left = len - pos;
 80194e8:	88fa      	ldrh	r2, [r7, #6]
 80194ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80194ee:	1ad3      	subs	r3, r2, r3
 80194f0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80194f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80194f6:	b29b      	uxth	r3, r3
 80194f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80194fa:	1ad3      	subs	r3, r2, r3
 80194fc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80194fe:	8b7a      	ldrh	r2, [r7, #26]
 8019500:	8bbb      	ldrh	r3, [r7, #28]
 8019502:	4293      	cmp	r3, r2
 8019504:	bf28      	it	cs
 8019506:	4613      	movcs	r3, r2
 8019508:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801950a:	797b      	ldrb	r3, [r7, #5]
 801950c:	f003 0301 	and.w	r3, r3, #1
 8019510:	2b00      	cmp	r3, #0
 8019512:	d036      	beq.n	8019582 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8019514:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019518:	b29a      	uxth	r2, r3
 801951a:	8b3b      	ldrh	r3, [r7, #24]
 801951c:	4413      	add	r3, r2
 801951e:	b299      	uxth	r1, r3
 8019520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019522:	2b00      	cmp	r3, #0
 8019524:	bf0c      	ite	eq
 8019526:	2301      	moveq	r3, #1
 8019528:	2300      	movne	r3, #0
 801952a:	b2db      	uxtb	r3, r3
 801952c:	f107 0012 	add.w	r0, r7, #18
 8019530:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019532:	9302      	str	r3, [sp, #8]
 8019534:	797b      	ldrb	r3, [r7, #5]
 8019536:	9301      	str	r3, [sp, #4]
 8019538:	68fb      	ldr	r3, [r7, #12]
 801953a:	9300      	str	r3, [sp, #0]
 801953c:	4603      	mov	r3, r0
 801953e:	2036      	movs	r0, #54	; 0x36
 8019540:	f7ff fd5e 	bl	8019000 <tcp_pbuf_prealloc>
 8019544:	6338      	str	r0, [r7, #48]	; 0x30
 8019546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019548:	2b00      	cmp	r3, #0
 801954a:	f000 8178 	beq.w	801983e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019550:	895b      	ldrh	r3, [r3, #10]
 8019552:	8b3a      	ldrh	r2, [r7, #24]
 8019554:	429a      	cmp	r2, r3
 8019556:	d906      	bls.n	8019566 <tcp_write+0x37e>
 8019558:	4b8c      	ldr	r3, [pc, #560]	; (801978c <tcp_write+0x5a4>)
 801955a:	f240 2266 	movw	r2, #614	; 0x266
 801955e:	498c      	ldr	r1, [pc, #560]	; (8019790 <tcp_write+0x5a8>)
 8019560:	488c      	ldr	r0, [pc, #560]	; (8019794 <tcp_write+0x5ac>)
 8019562:	f006 f8ad 	bl	801f6c0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8019566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019568:	685a      	ldr	r2, [r3, #4]
 801956a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801956e:	18d0      	adds	r0, r2, r3
 8019570:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019574:	68ba      	ldr	r2, [r7, #8]
 8019576:	4413      	add	r3, r2
 8019578:	8b3a      	ldrh	r2, [r7, #24]
 801957a:	4619      	mov	r1, r3
 801957c:	f005 fdf2 	bl	801f164 <memcpy>
 8019580:	e02f      	b.n	80195e2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8019582:	8a7b      	ldrh	r3, [r7, #18]
 8019584:	2b00      	cmp	r3, #0
 8019586:	d006      	beq.n	8019596 <tcp_write+0x3ae>
 8019588:	4b80      	ldr	r3, [pc, #512]	; (801978c <tcp_write+0x5a4>)
 801958a:	f240 2271 	movw	r2, #625	; 0x271
 801958e:	4982      	ldr	r1, [pc, #520]	; (8019798 <tcp_write+0x5b0>)
 8019590:	4880      	ldr	r0, [pc, #512]	; (8019794 <tcp_write+0x5ac>)
 8019592:	f006 f895 	bl	801f6c0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8019596:	8b3b      	ldrh	r3, [r7, #24]
 8019598:	2201      	movs	r2, #1
 801959a:	4619      	mov	r1, r3
 801959c:	2036      	movs	r0, #54	; 0x36
 801959e:	f7fa fd43 	bl	8014028 <pbuf_alloc>
 80195a2:	6178      	str	r0, [r7, #20]
 80195a4:	697b      	ldr	r3, [r7, #20]
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	f000 814b 	beq.w	8019842 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80195ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80195b0:	68ba      	ldr	r2, [r7, #8]
 80195b2:	441a      	add	r2, r3
 80195b4:	697b      	ldr	r3, [r7, #20]
 80195b6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80195b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80195bc:	b29b      	uxth	r3, r3
 80195be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80195c2:	4619      	mov	r1, r3
 80195c4:	2036      	movs	r0, #54	; 0x36
 80195c6:	f7fa fd2f 	bl	8014028 <pbuf_alloc>
 80195ca:	6338      	str	r0, [r7, #48]	; 0x30
 80195cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d103      	bne.n	80195da <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80195d2:	6978      	ldr	r0, [r7, #20]
 80195d4:	f7fb f80c 	bl	80145f0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80195d8:	e136      	b.n	8019848 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80195da:	6979      	ldr	r1, [r7, #20]
 80195dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80195de:	f7fb f8d5 	bl	801478c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80195e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80195e4:	f7fb f892 	bl	801470c <pbuf_clen>
 80195e8:	4603      	mov	r3, r0
 80195ea:	461a      	mov	r2, r3
 80195ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80195f0:	4413      	add	r3, r2
 80195f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80195f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80195fa:	2b09      	cmp	r3, #9
 80195fc:	d903      	bls.n	8019606 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80195fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019600:	f7fa fff6 	bl	80145f0 <pbuf_free>
      goto memerr;
 8019604:	e120      	b.n	8019848 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801960a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801960e:	441a      	add	r2, r3
 8019610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019614:	9300      	str	r3, [sp, #0]
 8019616:	4613      	mov	r3, r2
 8019618:	2200      	movs	r2, #0
 801961a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801961c:	68f8      	ldr	r0, [r7, #12]
 801961e:	f7ff fc51 	bl	8018ec4 <tcp_create_segment>
 8019622:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019626:	2b00      	cmp	r3, #0
 8019628:	f000 810d 	beq.w	8019846 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801962c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801962e:	2b00      	cmp	r3, #0
 8019630:	d102      	bne.n	8019638 <tcp_write+0x450>
      queue = seg;
 8019632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019634:	647b      	str	r3, [r7, #68]	; 0x44
 8019636:	e00c      	b.n	8019652 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8019638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801963a:	2b00      	cmp	r3, #0
 801963c:	d106      	bne.n	801964c <tcp_write+0x464>
 801963e:	4b53      	ldr	r3, [pc, #332]	; (801978c <tcp_write+0x5a4>)
 8019640:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019644:	4955      	ldr	r1, [pc, #340]	; (801979c <tcp_write+0x5b4>)
 8019646:	4853      	ldr	r0, [pc, #332]	; (8019794 <tcp_write+0x5ac>)
 8019648:	f006 f83a 	bl	801f6c0 <iprintf>
      prev_seg->next = seg;
 801964c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801964e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019650:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8019652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019654:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8019656:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801965a:	8b3b      	ldrh	r3, [r7, #24]
 801965c:	4413      	add	r3, r2
 801965e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8019662:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019666:	88fb      	ldrh	r3, [r7, #6]
 8019668:	429a      	cmp	r2, r3
 801966a:	f4ff af3d 	bcc.w	80194e8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801966e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019670:	2b00      	cmp	r3, #0
 8019672:	d02c      	beq.n	80196ce <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8019674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019676:	685b      	ldr	r3, [r3, #4]
 8019678:	62fb      	str	r3, [r7, #44]	; 0x2c
 801967a:	e01e      	b.n	80196ba <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801967c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801967e:	891a      	ldrh	r2, [r3, #8]
 8019680:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019682:	4413      	add	r3, r2
 8019684:	b29a      	uxth	r2, r3
 8019686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019688:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801968a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	2b00      	cmp	r3, #0
 8019690:	d110      	bne.n	80196b4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8019692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019694:	685b      	ldr	r3, [r3, #4]
 8019696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019698:	8952      	ldrh	r2, [r2, #10]
 801969a:	4413      	add	r3, r2
 801969c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801969e:	68b9      	ldr	r1, [r7, #8]
 80196a0:	4618      	mov	r0, r3
 80196a2:	f005 fd5f 	bl	801f164 <memcpy>
        p->len += oversize_used;
 80196a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196a8:	895a      	ldrh	r2, [r3, #10]
 80196aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80196ac:	4413      	add	r3, r2
 80196ae:	b29a      	uxth	r2, r3
 80196b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196b2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80196b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196b6:	681b      	ldr	r3, [r3, #0]
 80196b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80196ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d1dd      	bne.n	801967c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80196c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196c2:	891a      	ldrh	r2, [r3, #8]
 80196c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80196c6:	4413      	add	r3, r2
 80196c8:	b29a      	uxth	r2, r3
 80196ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196cc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80196ce:	8a7a      	ldrh	r2, [r7, #18]
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80196d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d018      	beq.n	801970e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80196dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d106      	bne.n	80196f0 <tcp_write+0x508>
 80196e2:	4b2a      	ldr	r3, [pc, #168]	; (801978c <tcp_write+0x5a4>)
 80196e4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80196e8:	492d      	ldr	r1, [pc, #180]	; (80197a0 <tcp_write+0x5b8>)
 80196ea:	482a      	ldr	r0, [pc, #168]	; (8019794 <tcp_write+0x5ac>)
 80196ec:	f005 ffe8 	bl	801f6c0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80196f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196f2:	685b      	ldr	r3, [r3, #4]
 80196f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80196f6:	4618      	mov	r0, r3
 80196f8:	f7fb f848 	bl	801478c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80196fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196fe:	891a      	ldrh	r2, [r3, #8]
 8019700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019702:	891b      	ldrh	r3, [r3, #8]
 8019704:	4413      	add	r3, r2
 8019706:	b29a      	uxth	r2, r3
 8019708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801970a:	811a      	strh	r2, [r3, #8]
 801970c:	e037      	b.n	801977e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801970e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019710:	2b00      	cmp	r3, #0
 8019712:	d034      	beq.n	801977e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8019714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019716:	2b00      	cmp	r3, #0
 8019718:	d003      	beq.n	8019722 <tcp_write+0x53a>
 801971a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801971c:	685b      	ldr	r3, [r3, #4]
 801971e:	2b00      	cmp	r3, #0
 8019720:	d106      	bne.n	8019730 <tcp_write+0x548>
 8019722:	4b1a      	ldr	r3, [pc, #104]	; (801978c <tcp_write+0x5a4>)
 8019724:	f240 22e6 	movw	r2, #742	; 0x2e6
 8019728:	491e      	ldr	r1, [pc, #120]	; (80197a4 <tcp_write+0x5bc>)
 801972a:	481a      	ldr	r0, [pc, #104]	; (8019794 <tcp_write+0x5ac>)
 801972c:	f005 ffc8 	bl	801f6c0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019732:	685b      	ldr	r3, [r3, #4]
 8019734:	62bb      	str	r3, [r7, #40]	; 0x28
 8019736:	e009      	b.n	801974c <tcp_write+0x564>
      p->tot_len += extendlen;
 8019738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801973a:	891a      	ldrh	r2, [r3, #8]
 801973c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801973e:	4413      	add	r3, r2
 8019740:	b29a      	uxth	r2, r3
 8019742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019744:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	62bb      	str	r3, [r7, #40]	; 0x28
 801974c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	2b00      	cmp	r3, #0
 8019752:	d1f1      	bne.n	8019738 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8019754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019756:	891a      	ldrh	r2, [r3, #8]
 8019758:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801975a:	4413      	add	r3, r2
 801975c:	b29a      	uxth	r2, r3
 801975e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019760:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8019762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019764:	895a      	ldrh	r2, [r3, #10]
 8019766:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019768:	4413      	add	r3, r2
 801976a:	b29a      	uxth	r2, r3
 801976c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801976e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8019770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019772:	891a      	ldrh	r2, [r3, #8]
 8019774:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019776:	4413      	add	r3, r2
 8019778:	b29a      	uxth	r2, r3
 801977a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801977c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801977e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019780:	2b00      	cmp	r3, #0
 8019782:	d111      	bne.n	80197a8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8019784:	68fb      	ldr	r3, [r7, #12]
 8019786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019788:	66da      	str	r2, [r3, #108]	; 0x6c
 801978a:	e010      	b.n	80197ae <tcp_write+0x5c6>
 801978c:	0802523c 	.word	0x0802523c
 8019790:	080254dc 	.word	0x080254dc
 8019794:	08025290 	.word	0x08025290
 8019798:	0802551c 	.word	0x0802551c
 801979c:	0802552c 	.word	0x0802552c
 80197a0:	08025540 	.word	0x08025540
 80197a4:	08025578 	.word	0x08025578
  } else {
    last_unsent->next = queue;
 80197a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80197aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80197ac:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80197b2:	88fb      	ldrh	r3, [r7, #6]
 80197b4:	441a      	add	r2, r3
 80197b6:	68fb      	ldr	r3, [r7, #12]
 80197b8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80197c0:	88fb      	ldrh	r3, [r7, #6]
 80197c2:	1ad3      	subs	r3, r2, r3
 80197c4:	b29a      	uxth	r2, r3
 80197c6:	68fb      	ldr	r3, [r7, #12]
 80197c8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80197cc:	68fb      	ldr	r3, [r7, #12]
 80197ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80197d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d00e      	beq.n	80197fe <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80197e0:	68fb      	ldr	r3, [r7, #12]
 80197e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d10a      	bne.n	80197fe <tcp_write+0x616>
 80197e8:	68fb      	ldr	r3, [r7, #12]
 80197ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d106      	bne.n	80197fe <tcp_write+0x616>
 80197f0:	4b2c      	ldr	r3, [pc, #176]	; (80198a4 <tcp_write+0x6bc>)
 80197f2:	f240 3212 	movw	r2, #786	; 0x312
 80197f6:	492c      	ldr	r1, [pc, #176]	; (80198a8 <tcp_write+0x6c0>)
 80197f8:	482c      	ldr	r0, [pc, #176]	; (80198ac <tcp_write+0x6c4>)
 80197fa:	f005 ff61 	bl	801f6c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80197fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019800:	2b00      	cmp	r3, #0
 8019802:	d016      	beq.n	8019832 <tcp_write+0x64a>
 8019804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019806:	68db      	ldr	r3, [r3, #12]
 8019808:	2b00      	cmp	r3, #0
 801980a:	d012      	beq.n	8019832 <tcp_write+0x64a>
 801980c:	797b      	ldrb	r3, [r7, #5]
 801980e:	f003 0302 	and.w	r3, r3, #2
 8019812:	2b00      	cmp	r3, #0
 8019814:	d10d      	bne.n	8019832 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8019816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019818:	68db      	ldr	r3, [r3, #12]
 801981a:	899b      	ldrh	r3, [r3, #12]
 801981c:	b29c      	uxth	r4, r3
 801981e:	2008      	movs	r0, #8
 8019820:	f7f9 fb2a 	bl	8012e78 <lwip_htons>
 8019824:	4603      	mov	r3, r0
 8019826:	461a      	mov	r2, r3
 8019828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801982a:	68db      	ldr	r3, [r3, #12]
 801982c:	4322      	orrs	r2, r4
 801982e:	b292      	uxth	r2, r2
 8019830:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8019832:	2300      	movs	r3, #0
 8019834:	e031      	b.n	801989a <tcp_write+0x6b2>
          goto memerr;
 8019836:	bf00      	nop
 8019838:	e006      	b.n	8019848 <tcp_write+0x660>
            goto memerr;
 801983a:	bf00      	nop
 801983c:	e004      	b.n	8019848 <tcp_write+0x660>
        goto memerr;
 801983e:	bf00      	nop
 8019840:	e002      	b.n	8019848 <tcp_write+0x660>
        goto memerr;
 8019842:	bf00      	nop
 8019844:	e000      	b.n	8019848 <tcp_write+0x660>
      goto memerr;
 8019846:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019848:	68fb      	ldr	r3, [r7, #12]
 801984a:	8b5b      	ldrh	r3, [r3, #26]
 801984c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019850:	b29a      	uxth	r2, r3
 8019852:	68fb      	ldr	r3, [r7, #12]
 8019854:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8019856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019858:	2b00      	cmp	r3, #0
 801985a:	d002      	beq.n	8019862 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801985c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801985e:	f7fa fec7 	bl	80145f0 <pbuf_free>
  }
  if (queue != NULL) {
 8019862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019864:	2b00      	cmp	r3, #0
 8019866:	d002      	beq.n	801986e <tcp_write+0x686>
    tcp_segs_free(queue);
 8019868:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801986a:	f7fc fb51 	bl	8015f10 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801986e:	68fb      	ldr	r3, [r7, #12]
 8019870:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019874:	2b00      	cmp	r3, #0
 8019876:	d00e      	beq.n	8019896 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8019878:	68fb      	ldr	r3, [r7, #12]
 801987a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801987c:	2b00      	cmp	r3, #0
 801987e:	d10a      	bne.n	8019896 <tcp_write+0x6ae>
 8019880:	68fb      	ldr	r3, [r7, #12]
 8019882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019884:	2b00      	cmp	r3, #0
 8019886:	d106      	bne.n	8019896 <tcp_write+0x6ae>
 8019888:	4b06      	ldr	r3, [pc, #24]	; (80198a4 <tcp_write+0x6bc>)
 801988a:	f240 3227 	movw	r2, #807	; 0x327
 801988e:	4906      	ldr	r1, [pc, #24]	; (80198a8 <tcp_write+0x6c0>)
 8019890:	4806      	ldr	r0, [pc, #24]	; (80198ac <tcp_write+0x6c4>)
 8019892:	f005 ff15 	bl	801f6c0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8019896:	f04f 33ff 	mov.w	r3, #4294967295
}
 801989a:	4618      	mov	r0, r3
 801989c:	375c      	adds	r7, #92	; 0x5c
 801989e:	46bd      	mov	sp, r7
 80198a0:	bd90      	pop	{r4, r7, pc}
 80198a2:	bf00      	nop
 80198a4:	0802523c 	.word	0x0802523c
 80198a8:	080255b0 	.word	0x080255b0
 80198ac:	08025290 	.word	0x08025290

080198b0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80198b0:	b590      	push	{r4, r7, lr}
 80198b2:	b08b      	sub	sp, #44	; 0x2c
 80198b4:	af02      	add	r7, sp, #8
 80198b6:	6078      	str	r0, [r7, #4]
 80198b8:	460b      	mov	r3, r1
 80198ba:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80198bc:	2300      	movs	r3, #0
 80198be:	61fb      	str	r3, [r7, #28]
 80198c0:	2300      	movs	r3, #0
 80198c2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80198c4:	2300      	movs	r3, #0
 80198c6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d106      	bne.n	80198dc <tcp_split_unsent_seg+0x2c>
 80198ce:	4b95      	ldr	r3, [pc, #596]	; (8019b24 <tcp_split_unsent_seg+0x274>)
 80198d0:	f240 324b 	movw	r2, #843	; 0x34b
 80198d4:	4994      	ldr	r1, [pc, #592]	; (8019b28 <tcp_split_unsent_seg+0x278>)
 80198d6:	4895      	ldr	r0, [pc, #596]	; (8019b2c <tcp_split_unsent_seg+0x27c>)
 80198d8:	f005 fef2 	bl	801f6c0 <iprintf>

  useg = pcb->unsent;
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80198e0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80198e2:	697b      	ldr	r3, [r7, #20]
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d102      	bne.n	80198ee <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80198e8:	f04f 33ff 	mov.w	r3, #4294967295
 80198ec:	e116      	b.n	8019b1c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80198ee:	887b      	ldrh	r3, [r7, #2]
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d109      	bne.n	8019908 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80198f4:	4b8b      	ldr	r3, [pc, #556]	; (8019b24 <tcp_split_unsent_seg+0x274>)
 80198f6:	f240 3253 	movw	r2, #851	; 0x353
 80198fa:	498d      	ldr	r1, [pc, #564]	; (8019b30 <tcp_split_unsent_seg+0x280>)
 80198fc:	488b      	ldr	r0, [pc, #556]	; (8019b2c <tcp_split_unsent_seg+0x27c>)
 80198fe:	f005 fedf 	bl	801f6c0 <iprintf>
    return ERR_VAL;
 8019902:	f06f 0305 	mvn.w	r3, #5
 8019906:	e109      	b.n	8019b1c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8019908:	697b      	ldr	r3, [r7, #20]
 801990a:	891b      	ldrh	r3, [r3, #8]
 801990c:	887a      	ldrh	r2, [r7, #2]
 801990e:	429a      	cmp	r2, r3
 8019910:	d301      	bcc.n	8019916 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8019912:	2300      	movs	r3, #0
 8019914:	e102      	b.n	8019b1c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801991a:	887a      	ldrh	r2, [r7, #2]
 801991c:	429a      	cmp	r2, r3
 801991e:	d906      	bls.n	801992e <tcp_split_unsent_seg+0x7e>
 8019920:	4b80      	ldr	r3, [pc, #512]	; (8019b24 <tcp_split_unsent_seg+0x274>)
 8019922:	f240 325b 	movw	r2, #859	; 0x35b
 8019926:	4983      	ldr	r1, [pc, #524]	; (8019b34 <tcp_split_unsent_seg+0x284>)
 8019928:	4880      	ldr	r0, [pc, #512]	; (8019b2c <tcp_split_unsent_seg+0x27c>)
 801992a:	f005 fec9 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801992e:	697b      	ldr	r3, [r7, #20]
 8019930:	891b      	ldrh	r3, [r3, #8]
 8019932:	2b00      	cmp	r3, #0
 8019934:	d106      	bne.n	8019944 <tcp_split_unsent_seg+0x94>
 8019936:	4b7b      	ldr	r3, [pc, #492]	; (8019b24 <tcp_split_unsent_seg+0x274>)
 8019938:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801993c:	497e      	ldr	r1, [pc, #504]	; (8019b38 <tcp_split_unsent_seg+0x288>)
 801993e:	487b      	ldr	r0, [pc, #492]	; (8019b2c <tcp_split_unsent_seg+0x27c>)
 8019940:	f005 febe 	bl	801f6c0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8019944:	697b      	ldr	r3, [r7, #20]
 8019946:	7a9b      	ldrb	r3, [r3, #10]
 8019948:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801994a:	7bfb      	ldrb	r3, [r7, #15]
 801994c:	009b      	lsls	r3, r3, #2
 801994e:	b2db      	uxtb	r3, r3
 8019950:	f003 0304 	and.w	r3, r3, #4
 8019954:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8019956:	697b      	ldr	r3, [r7, #20]
 8019958:	891a      	ldrh	r2, [r3, #8]
 801995a:	887b      	ldrh	r3, [r7, #2]
 801995c:	1ad3      	subs	r3, r2, r3
 801995e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8019960:	7bbb      	ldrb	r3, [r7, #14]
 8019962:	b29a      	uxth	r2, r3
 8019964:	89bb      	ldrh	r3, [r7, #12]
 8019966:	4413      	add	r3, r2
 8019968:	b29b      	uxth	r3, r3
 801996a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801996e:	4619      	mov	r1, r3
 8019970:	2036      	movs	r0, #54	; 0x36
 8019972:	f7fa fb59 	bl	8014028 <pbuf_alloc>
 8019976:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019978:	693b      	ldr	r3, [r7, #16]
 801997a:	2b00      	cmp	r3, #0
 801997c:	f000 80b7 	beq.w	8019aee <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8019980:	697b      	ldr	r3, [r7, #20]
 8019982:	685b      	ldr	r3, [r3, #4]
 8019984:	891a      	ldrh	r2, [r3, #8]
 8019986:	697b      	ldr	r3, [r7, #20]
 8019988:	891b      	ldrh	r3, [r3, #8]
 801998a:	1ad3      	subs	r3, r2, r3
 801998c:	b29a      	uxth	r2, r3
 801998e:	887b      	ldrh	r3, [r7, #2]
 8019990:	4413      	add	r3, r2
 8019992:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8019994:	697b      	ldr	r3, [r7, #20]
 8019996:	6858      	ldr	r0, [r3, #4]
 8019998:	693b      	ldr	r3, [r7, #16]
 801999a:	685a      	ldr	r2, [r3, #4]
 801999c:	7bbb      	ldrb	r3, [r7, #14]
 801999e:	18d1      	adds	r1, r2, r3
 80199a0:	897b      	ldrh	r3, [r7, #10]
 80199a2:	89ba      	ldrh	r2, [r7, #12]
 80199a4:	f7fb f82a 	bl	80149fc <pbuf_copy_partial>
 80199a8:	4603      	mov	r3, r0
 80199aa:	461a      	mov	r2, r3
 80199ac:	89bb      	ldrh	r3, [r7, #12]
 80199ae:	4293      	cmp	r3, r2
 80199b0:	f040 809f 	bne.w	8019af2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80199b4:	697b      	ldr	r3, [r7, #20]
 80199b6:	68db      	ldr	r3, [r3, #12]
 80199b8:	899b      	ldrh	r3, [r3, #12]
 80199ba:	b29b      	uxth	r3, r3
 80199bc:	4618      	mov	r0, r3
 80199be:	f7f9 fa5b 	bl	8012e78 <lwip_htons>
 80199c2:	4603      	mov	r3, r0
 80199c4:	b2db      	uxtb	r3, r3
 80199c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80199ca:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80199cc:	2300      	movs	r3, #0
 80199ce:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80199d0:	7efb      	ldrb	r3, [r7, #27]
 80199d2:	f003 0308 	and.w	r3, r3, #8
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d007      	beq.n	80199ea <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80199da:	7efb      	ldrb	r3, [r7, #27]
 80199dc:	f023 0308 	bic.w	r3, r3, #8
 80199e0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80199e2:	7ebb      	ldrb	r3, [r7, #26]
 80199e4:	f043 0308 	orr.w	r3, r3, #8
 80199e8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80199ea:	7efb      	ldrb	r3, [r7, #27]
 80199ec:	f003 0301 	and.w	r3, r3, #1
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d007      	beq.n	8019a04 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80199f4:	7efb      	ldrb	r3, [r7, #27]
 80199f6:	f023 0301 	bic.w	r3, r3, #1
 80199fa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80199fc:	7ebb      	ldrb	r3, [r7, #26]
 80199fe:	f043 0301 	orr.w	r3, r3, #1
 8019a02:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8019a04:	697b      	ldr	r3, [r7, #20]
 8019a06:	68db      	ldr	r3, [r3, #12]
 8019a08:	685b      	ldr	r3, [r3, #4]
 8019a0a:	4618      	mov	r0, r3
 8019a0c:	f7f9 fa49 	bl	8012ea2 <lwip_htonl>
 8019a10:	4602      	mov	r2, r0
 8019a12:	887b      	ldrh	r3, [r7, #2]
 8019a14:	18d1      	adds	r1, r2, r3
 8019a16:	7eba      	ldrb	r2, [r7, #26]
 8019a18:	7bfb      	ldrb	r3, [r7, #15]
 8019a1a:	9300      	str	r3, [sp, #0]
 8019a1c:	460b      	mov	r3, r1
 8019a1e:	6939      	ldr	r1, [r7, #16]
 8019a20:	6878      	ldr	r0, [r7, #4]
 8019a22:	f7ff fa4f 	bl	8018ec4 <tcp_create_segment>
 8019a26:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8019a28:	69fb      	ldr	r3, [r7, #28]
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d063      	beq.n	8019af6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8019a2e:	697b      	ldr	r3, [r7, #20]
 8019a30:	685b      	ldr	r3, [r3, #4]
 8019a32:	4618      	mov	r0, r3
 8019a34:	f7fa fe6a 	bl	801470c <pbuf_clen>
 8019a38:	4603      	mov	r3, r0
 8019a3a:	461a      	mov	r2, r3
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019a42:	1a9b      	subs	r3, r3, r2
 8019a44:	b29a      	uxth	r2, r3
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8019a4c:	697b      	ldr	r3, [r7, #20]
 8019a4e:	6858      	ldr	r0, [r3, #4]
 8019a50:	697b      	ldr	r3, [r7, #20]
 8019a52:	685b      	ldr	r3, [r3, #4]
 8019a54:	891a      	ldrh	r2, [r3, #8]
 8019a56:	89bb      	ldrh	r3, [r7, #12]
 8019a58:	1ad3      	subs	r3, r2, r3
 8019a5a:	b29b      	uxth	r3, r3
 8019a5c:	4619      	mov	r1, r3
 8019a5e:	f7fa fc41 	bl	80142e4 <pbuf_realloc>
  useg->len -= remainder;
 8019a62:	697b      	ldr	r3, [r7, #20]
 8019a64:	891a      	ldrh	r2, [r3, #8]
 8019a66:	89bb      	ldrh	r3, [r7, #12]
 8019a68:	1ad3      	subs	r3, r2, r3
 8019a6a:	b29a      	uxth	r2, r3
 8019a6c:	697b      	ldr	r3, [r7, #20]
 8019a6e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8019a70:	697b      	ldr	r3, [r7, #20]
 8019a72:	68db      	ldr	r3, [r3, #12]
 8019a74:	899b      	ldrh	r3, [r3, #12]
 8019a76:	b29c      	uxth	r4, r3
 8019a78:	7efb      	ldrb	r3, [r7, #27]
 8019a7a:	b29b      	uxth	r3, r3
 8019a7c:	4618      	mov	r0, r3
 8019a7e:	f7f9 f9fb 	bl	8012e78 <lwip_htons>
 8019a82:	4603      	mov	r3, r0
 8019a84:	461a      	mov	r2, r3
 8019a86:	697b      	ldr	r3, [r7, #20]
 8019a88:	68db      	ldr	r3, [r3, #12]
 8019a8a:	4322      	orrs	r2, r4
 8019a8c:	b292      	uxth	r2, r2
 8019a8e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8019a90:	697b      	ldr	r3, [r7, #20]
 8019a92:	685b      	ldr	r3, [r3, #4]
 8019a94:	4618      	mov	r0, r3
 8019a96:	f7fa fe39 	bl	801470c <pbuf_clen>
 8019a9a:	4603      	mov	r3, r0
 8019a9c:	461a      	mov	r2, r3
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019aa4:	4413      	add	r3, r2
 8019aa6:	b29a      	uxth	r2, r3
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019aae:	69fb      	ldr	r3, [r7, #28]
 8019ab0:	685b      	ldr	r3, [r3, #4]
 8019ab2:	4618      	mov	r0, r3
 8019ab4:	f7fa fe2a 	bl	801470c <pbuf_clen>
 8019ab8:	4603      	mov	r3, r0
 8019aba:	461a      	mov	r2, r3
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019ac2:	4413      	add	r3, r2
 8019ac4:	b29a      	uxth	r2, r3
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8019acc:	697b      	ldr	r3, [r7, #20]
 8019ace:	681a      	ldr	r2, [r3, #0]
 8019ad0:	69fb      	ldr	r3, [r7, #28]
 8019ad2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8019ad4:	697b      	ldr	r3, [r7, #20]
 8019ad6:	69fa      	ldr	r2, [r7, #28]
 8019ad8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8019ada:	69fb      	ldr	r3, [r7, #28]
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d103      	bne.n	8019aea <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	2200      	movs	r2, #0
 8019ae6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8019aea:	2300      	movs	r3, #0
 8019aec:	e016      	b.n	8019b1c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8019aee:	bf00      	nop
 8019af0:	e002      	b.n	8019af8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8019af2:	bf00      	nop
 8019af4:	e000      	b.n	8019af8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8019af6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8019af8:	69fb      	ldr	r3, [r7, #28]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d006      	beq.n	8019b0c <tcp_split_unsent_seg+0x25c>
 8019afe:	4b09      	ldr	r3, [pc, #36]	; (8019b24 <tcp_split_unsent_seg+0x274>)
 8019b00:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8019b04:	490d      	ldr	r1, [pc, #52]	; (8019b3c <tcp_split_unsent_seg+0x28c>)
 8019b06:	4809      	ldr	r0, [pc, #36]	; (8019b2c <tcp_split_unsent_seg+0x27c>)
 8019b08:	f005 fdda 	bl	801f6c0 <iprintf>
  if (p != NULL) {
 8019b0c:	693b      	ldr	r3, [r7, #16]
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	d002      	beq.n	8019b18 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8019b12:	6938      	ldr	r0, [r7, #16]
 8019b14:	f7fa fd6c 	bl	80145f0 <pbuf_free>
  }

  return ERR_MEM;
 8019b18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	3724      	adds	r7, #36	; 0x24
 8019b20:	46bd      	mov	sp, r7
 8019b22:	bd90      	pop	{r4, r7, pc}
 8019b24:	0802523c 	.word	0x0802523c
 8019b28:	080255d0 	.word	0x080255d0
 8019b2c:	08025290 	.word	0x08025290
 8019b30:	080255f4 	.word	0x080255f4
 8019b34:	08025618 	.word	0x08025618
 8019b38:	08025628 	.word	0x08025628
 8019b3c:	08025638 	.word	0x08025638

08019b40 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8019b40:	b590      	push	{r4, r7, lr}
 8019b42:	b085      	sub	sp, #20
 8019b44:	af00      	add	r7, sp, #0
 8019b46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d106      	bne.n	8019b5c <tcp_send_fin+0x1c>
 8019b4e:	4b21      	ldr	r3, [pc, #132]	; (8019bd4 <tcp_send_fin+0x94>)
 8019b50:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8019b54:	4920      	ldr	r1, [pc, #128]	; (8019bd8 <tcp_send_fin+0x98>)
 8019b56:	4821      	ldr	r0, [pc, #132]	; (8019bdc <tcp_send_fin+0x9c>)
 8019b58:	f005 fdb2 	bl	801f6c0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d02e      	beq.n	8019bc2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b68:	60fb      	str	r3, [r7, #12]
 8019b6a:	e002      	b.n	8019b72 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	681b      	ldr	r3, [r3, #0]
 8019b70:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	d1f8      	bne.n	8019b6c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8019b7a:	68fb      	ldr	r3, [r7, #12]
 8019b7c:	68db      	ldr	r3, [r3, #12]
 8019b7e:	899b      	ldrh	r3, [r3, #12]
 8019b80:	b29b      	uxth	r3, r3
 8019b82:	4618      	mov	r0, r3
 8019b84:	f7f9 f978 	bl	8012e78 <lwip_htons>
 8019b88:	4603      	mov	r3, r0
 8019b8a:	b2db      	uxtb	r3, r3
 8019b8c:	f003 0307 	and.w	r3, r3, #7
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d116      	bne.n	8019bc2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8019b94:	68fb      	ldr	r3, [r7, #12]
 8019b96:	68db      	ldr	r3, [r3, #12]
 8019b98:	899b      	ldrh	r3, [r3, #12]
 8019b9a:	b29c      	uxth	r4, r3
 8019b9c:	2001      	movs	r0, #1
 8019b9e:	f7f9 f96b 	bl	8012e78 <lwip_htons>
 8019ba2:	4603      	mov	r3, r0
 8019ba4:	461a      	mov	r2, r3
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	68db      	ldr	r3, [r3, #12]
 8019baa:	4322      	orrs	r2, r4
 8019bac:	b292      	uxth	r2, r2
 8019bae:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	8b5b      	ldrh	r3, [r3, #26]
 8019bb4:	f043 0320 	orr.w	r3, r3, #32
 8019bb8:	b29a      	uxth	r2, r3
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8019bbe:	2300      	movs	r3, #0
 8019bc0:	e004      	b.n	8019bcc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8019bc2:	2101      	movs	r1, #1
 8019bc4:	6878      	ldr	r0, [r7, #4]
 8019bc6:	f000 f80b 	bl	8019be0 <tcp_enqueue_flags>
 8019bca:	4603      	mov	r3, r0
}
 8019bcc:	4618      	mov	r0, r3
 8019bce:	3714      	adds	r7, #20
 8019bd0:	46bd      	mov	sp, r7
 8019bd2:	bd90      	pop	{r4, r7, pc}
 8019bd4:	0802523c 	.word	0x0802523c
 8019bd8:	08025644 	.word	0x08025644
 8019bdc:	08025290 	.word	0x08025290

08019be0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8019be0:	b580      	push	{r7, lr}
 8019be2:	b08a      	sub	sp, #40	; 0x28
 8019be4:	af02      	add	r7, sp, #8
 8019be6:	6078      	str	r0, [r7, #4]
 8019be8:	460b      	mov	r3, r1
 8019bea:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8019bec:	2300      	movs	r3, #0
 8019bee:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8019bf0:	2300      	movs	r3, #0
 8019bf2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8019bf4:	78fb      	ldrb	r3, [r7, #3]
 8019bf6:	f003 0303 	and.w	r3, r3, #3
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d106      	bne.n	8019c0c <tcp_enqueue_flags+0x2c>
 8019bfe:	4b67      	ldr	r3, [pc, #412]	; (8019d9c <tcp_enqueue_flags+0x1bc>)
 8019c00:	f240 4211 	movw	r2, #1041	; 0x411
 8019c04:	4966      	ldr	r1, [pc, #408]	; (8019da0 <tcp_enqueue_flags+0x1c0>)
 8019c06:	4867      	ldr	r0, [pc, #412]	; (8019da4 <tcp_enqueue_flags+0x1c4>)
 8019c08:	f005 fd5a 	bl	801f6c0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d106      	bne.n	8019c20 <tcp_enqueue_flags+0x40>
 8019c12:	4b62      	ldr	r3, [pc, #392]	; (8019d9c <tcp_enqueue_flags+0x1bc>)
 8019c14:	f240 4213 	movw	r2, #1043	; 0x413
 8019c18:	4963      	ldr	r1, [pc, #396]	; (8019da8 <tcp_enqueue_flags+0x1c8>)
 8019c1a:	4862      	ldr	r0, [pc, #392]	; (8019da4 <tcp_enqueue_flags+0x1c4>)
 8019c1c:	f005 fd50 	bl	801f6c0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8019c20:	78fb      	ldrb	r3, [r7, #3]
 8019c22:	f003 0302 	and.w	r3, r3, #2
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d001      	beq.n	8019c2e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8019c2a:	2301      	movs	r3, #1
 8019c2c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019c2e:	7ffb      	ldrb	r3, [r7, #31]
 8019c30:	009b      	lsls	r3, r3, #2
 8019c32:	b2db      	uxtb	r3, r3
 8019c34:	f003 0304 	and.w	r3, r3, #4
 8019c38:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019c3a:	7dfb      	ldrb	r3, [r7, #23]
 8019c3c:	b29b      	uxth	r3, r3
 8019c3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019c42:	4619      	mov	r1, r3
 8019c44:	2036      	movs	r0, #54	; 0x36
 8019c46:	f7fa f9ef 	bl	8014028 <pbuf_alloc>
 8019c4a:	6138      	str	r0, [r7, #16]
 8019c4c:	693b      	ldr	r3, [r7, #16]
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d109      	bne.n	8019c66 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	8b5b      	ldrh	r3, [r3, #26]
 8019c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019c5a:	b29a      	uxth	r2, r3
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019c60:	f04f 33ff 	mov.w	r3, #4294967295
 8019c64:	e095      	b.n	8019d92 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8019c66:	693b      	ldr	r3, [r7, #16]
 8019c68:	895a      	ldrh	r2, [r3, #10]
 8019c6a:	7dfb      	ldrb	r3, [r7, #23]
 8019c6c:	b29b      	uxth	r3, r3
 8019c6e:	429a      	cmp	r2, r3
 8019c70:	d206      	bcs.n	8019c80 <tcp_enqueue_flags+0xa0>
 8019c72:	4b4a      	ldr	r3, [pc, #296]	; (8019d9c <tcp_enqueue_flags+0x1bc>)
 8019c74:	f240 4239 	movw	r2, #1081	; 0x439
 8019c78:	494c      	ldr	r1, [pc, #304]	; (8019dac <tcp_enqueue_flags+0x1cc>)
 8019c7a:	484a      	ldr	r0, [pc, #296]	; (8019da4 <tcp_enqueue_flags+0x1c4>)
 8019c7c:	f005 fd20 	bl	801f6c0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8019c84:	78fa      	ldrb	r2, [r7, #3]
 8019c86:	7ffb      	ldrb	r3, [r7, #31]
 8019c88:	9300      	str	r3, [sp, #0]
 8019c8a:	460b      	mov	r3, r1
 8019c8c:	6939      	ldr	r1, [r7, #16]
 8019c8e:	6878      	ldr	r0, [r7, #4]
 8019c90:	f7ff f918 	bl	8018ec4 <tcp_create_segment>
 8019c94:	60f8      	str	r0, [r7, #12]
 8019c96:	68fb      	ldr	r3, [r7, #12]
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d109      	bne.n	8019cb0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	8b5b      	ldrh	r3, [r3, #26]
 8019ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019ca4:	b29a      	uxth	r2, r3
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019caa:	f04f 33ff 	mov.w	r3, #4294967295
 8019cae:	e070      	b.n	8019d92 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8019cb0:	68fb      	ldr	r3, [r7, #12]
 8019cb2:	68db      	ldr	r3, [r3, #12]
 8019cb4:	f003 0303 	and.w	r3, r3, #3
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d006      	beq.n	8019cca <tcp_enqueue_flags+0xea>
 8019cbc:	4b37      	ldr	r3, [pc, #220]	; (8019d9c <tcp_enqueue_flags+0x1bc>)
 8019cbe:	f240 4242 	movw	r2, #1090	; 0x442
 8019cc2:	493b      	ldr	r1, [pc, #236]	; (8019db0 <tcp_enqueue_flags+0x1d0>)
 8019cc4:	4837      	ldr	r0, [pc, #220]	; (8019da4 <tcp_enqueue_flags+0x1c4>)
 8019cc6:	f005 fcfb 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	891b      	ldrh	r3, [r3, #8]
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d006      	beq.n	8019ce0 <tcp_enqueue_flags+0x100>
 8019cd2:	4b32      	ldr	r3, [pc, #200]	; (8019d9c <tcp_enqueue_flags+0x1bc>)
 8019cd4:	f240 4243 	movw	r2, #1091	; 0x443
 8019cd8:	4936      	ldr	r1, [pc, #216]	; (8019db4 <tcp_enqueue_flags+0x1d4>)
 8019cda:	4832      	ldr	r0, [pc, #200]	; (8019da4 <tcp_enqueue_flags+0x1c4>)
 8019cdc:	f005 fcf0 	bl	801f6c0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d103      	bne.n	8019cf0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	68fa      	ldr	r2, [r7, #12]
 8019cec:	66da      	str	r2, [r3, #108]	; 0x6c
 8019cee:	e00d      	b.n	8019d0c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019cf4:	61bb      	str	r3, [r7, #24]
 8019cf6:	e002      	b.n	8019cfe <tcp_enqueue_flags+0x11e>
 8019cf8:	69bb      	ldr	r3, [r7, #24]
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	61bb      	str	r3, [r7, #24]
 8019cfe:	69bb      	ldr	r3, [r7, #24]
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d1f8      	bne.n	8019cf8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8019d06:	69bb      	ldr	r3, [r7, #24]
 8019d08:	68fa      	ldr	r2, [r7, #12]
 8019d0a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	2200      	movs	r2, #0
 8019d10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8019d14:	78fb      	ldrb	r3, [r7, #3]
 8019d16:	f003 0302 	and.w	r3, r3, #2
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	d104      	bne.n	8019d28 <tcp_enqueue_flags+0x148>
 8019d1e:	78fb      	ldrb	r3, [r7, #3]
 8019d20:	f003 0301 	and.w	r3, r3, #1
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d004      	beq.n	8019d32 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019d2c:	1c5a      	adds	r2, r3, #1
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8019d32:	78fb      	ldrb	r3, [r7, #3]
 8019d34:	f003 0301 	and.w	r3, r3, #1
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d006      	beq.n	8019d4a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	8b5b      	ldrh	r3, [r3, #26]
 8019d40:	f043 0320 	orr.w	r3, r3, #32
 8019d44:	b29a      	uxth	r2, r3
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019d4a:	68fb      	ldr	r3, [r7, #12]
 8019d4c:	685b      	ldr	r3, [r3, #4]
 8019d4e:	4618      	mov	r0, r3
 8019d50:	f7fa fcdc 	bl	801470c <pbuf_clen>
 8019d54:	4603      	mov	r3, r0
 8019d56:	461a      	mov	r2, r3
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019d5e:	4413      	add	r3, r2
 8019d60:	b29a      	uxth	r2, r3
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	d00e      	beq.n	8019d90 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d10a      	bne.n	8019d90 <tcp_enqueue_flags+0x1b0>
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d106      	bne.n	8019d90 <tcp_enqueue_flags+0x1b0>
 8019d82:	4b06      	ldr	r3, [pc, #24]	; (8019d9c <tcp_enqueue_flags+0x1bc>)
 8019d84:	f240 4265 	movw	r2, #1125	; 0x465
 8019d88:	490b      	ldr	r1, [pc, #44]	; (8019db8 <tcp_enqueue_flags+0x1d8>)
 8019d8a:	4806      	ldr	r0, [pc, #24]	; (8019da4 <tcp_enqueue_flags+0x1c4>)
 8019d8c:	f005 fc98 	bl	801f6c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8019d90:	2300      	movs	r3, #0
}
 8019d92:	4618      	mov	r0, r3
 8019d94:	3720      	adds	r7, #32
 8019d96:	46bd      	mov	sp, r7
 8019d98:	bd80      	pop	{r7, pc}
 8019d9a:	bf00      	nop
 8019d9c:	0802523c 	.word	0x0802523c
 8019da0:	08025660 	.word	0x08025660
 8019da4:	08025290 	.word	0x08025290
 8019da8:	080256b8 	.word	0x080256b8
 8019dac:	080256d8 	.word	0x080256d8
 8019db0:	08025714 	.word	0x08025714
 8019db4:	0802572c 	.word	0x0802572c
 8019db8:	08025758 	.word	0x08025758

08019dbc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8019dbc:	b5b0      	push	{r4, r5, r7, lr}
 8019dbe:	b08a      	sub	sp, #40	; 0x28
 8019dc0:	af00      	add	r7, sp, #0
 8019dc2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	d106      	bne.n	8019dd8 <tcp_output+0x1c>
 8019dca:	4b9e      	ldr	r3, [pc, #632]	; (801a044 <tcp_output+0x288>)
 8019dcc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8019dd0:	499d      	ldr	r1, [pc, #628]	; (801a048 <tcp_output+0x28c>)
 8019dd2:	489e      	ldr	r0, [pc, #632]	; (801a04c <tcp_output+0x290>)
 8019dd4:	f005 fc74 	bl	801f6c0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	7d1b      	ldrb	r3, [r3, #20]
 8019ddc:	2b01      	cmp	r3, #1
 8019dde:	d106      	bne.n	8019dee <tcp_output+0x32>
 8019de0:	4b98      	ldr	r3, [pc, #608]	; (801a044 <tcp_output+0x288>)
 8019de2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8019de6:	499a      	ldr	r1, [pc, #616]	; (801a050 <tcp_output+0x294>)
 8019de8:	4898      	ldr	r0, [pc, #608]	; (801a04c <tcp_output+0x290>)
 8019dea:	f005 fc69 	bl	801f6c0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8019dee:	4b99      	ldr	r3, [pc, #612]	; (801a054 <tcp_output+0x298>)
 8019df0:	681b      	ldr	r3, [r3, #0]
 8019df2:	687a      	ldr	r2, [r7, #4]
 8019df4:	429a      	cmp	r2, r3
 8019df6:	d101      	bne.n	8019dfc <tcp_output+0x40>
    return ERR_OK;
 8019df8:	2300      	movs	r3, #0
 8019dfa:	e1ce      	b.n	801a19a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019e08:	4293      	cmp	r3, r2
 8019e0a:	bf28      	it	cs
 8019e0c:	4613      	movcs	r3, r2
 8019e0e:	b29b      	uxth	r3, r3
 8019e10:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019e16:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8019e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d10b      	bne.n	8019e36 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	8b5b      	ldrh	r3, [r3, #26]
 8019e22:	f003 0302 	and.w	r3, r3, #2
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	f000 81aa 	beq.w	801a180 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8019e2c:	6878      	ldr	r0, [r7, #4]
 8019e2e:	f000 fdcb 	bl	801a9c8 <tcp_send_empty_ack>
 8019e32:	4603      	mov	r3, r0
 8019e34:	e1b1      	b.n	801a19a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8019e36:	6879      	ldr	r1, [r7, #4]
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	3304      	adds	r3, #4
 8019e3c:	461a      	mov	r2, r3
 8019e3e:	6878      	ldr	r0, [r7, #4]
 8019e40:	f7ff f824 	bl	8018e8c <tcp_route>
 8019e44:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8019e46:	697b      	ldr	r3, [r7, #20]
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d102      	bne.n	8019e52 <tcp_output+0x96>
    return ERR_RTE;
 8019e4c:	f06f 0303 	mvn.w	r3, #3
 8019e50:	e1a3      	b.n	801a19a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d003      	beq.n	8019e60 <tcp_output+0xa4>
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	2b00      	cmp	r3, #0
 8019e5e:	d111      	bne.n	8019e84 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8019e60:	697b      	ldr	r3, [r7, #20]
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	d002      	beq.n	8019e6c <tcp_output+0xb0>
 8019e66:	697b      	ldr	r3, [r7, #20]
 8019e68:	3304      	adds	r3, #4
 8019e6a:	e000      	b.n	8019e6e <tcp_output+0xb2>
 8019e6c:	2300      	movs	r3, #0
 8019e6e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8019e70:	693b      	ldr	r3, [r7, #16]
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d102      	bne.n	8019e7c <tcp_output+0xc0>
      return ERR_RTE;
 8019e76:	f06f 0303 	mvn.w	r3, #3
 8019e7a:	e18e      	b.n	801a19a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019e7c:	693b      	ldr	r3, [r7, #16]
 8019e7e:	681a      	ldr	r2, [r3, #0]
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8019e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e86:	68db      	ldr	r3, [r3, #12]
 8019e88:	685b      	ldr	r3, [r3, #4]
 8019e8a:	4618      	mov	r0, r3
 8019e8c:	f7f9 f809 	bl	8012ea2 <lwip_htonl>
 8019e90:	4602      	mov	r2, r0
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019e96:	1ad3      	subs	r3, r2, r3
 8019e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e9a:	8912      	ldrh	r2, [r2, #8]
 8019e9c:	4413      	add	r3, r2
 8019e9e:	69ba      	ldr	r2, [r7, #24]
 8019ea0:	429a      	cmp	r2, r3
 8019ea2:	d227      	bcs.n	8019ef4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019eaa:	461a      	mov	r2, r3
 8019eac:	69bb      	ldr	r3, [r7, #24]
 8019eae:	4293      	cmp	r3, r2
 8019eb0:	d114      	bne.n	8019edc <tcp_output+0x120>
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d110      	bne.n	8019edc <tcp_output+0x120>
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d10b      	bne.n	8019edc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	2200      	movs	r2, #0
 8019ec8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	2201      	movs	r2, #1
 8019ed0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	2200      	movs	r2, #0
 8019ed8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	8b5b      	ldrh	r3, [r3, #26]
 8019ee0:	f003 0302 	and.w	r3, r3, #2
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	f000 814d 	beq.w	801a184 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8019eea:	6878      	ldr	r0, [r7, #4]
 8019eec:	f000 fd6c 	bl	801a9c8 <tcp_send_empty_ack>
 8019ef0:	4603      	mov	r3, r0
 8019ef2:	e152      	b.n	801a19a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	2200      	movs	r2, #0
 8019ef8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019f00:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8019f02:	6a3b      	ldr	r3, [r7, #32]
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	f000 811c 	beq.w	801a142 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8019f0a:	e002      	b.n	8019f12 <tcp_output+0x156>
 8019f0c:	6a3b      	ldr	r3, [r7, #32]
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	623b      	str	r3, [r7, #32]
 8019f12:	6a3b      	ldr	r3, [r7, #32]
 8019f14:	681b      	ldr	r3, [r3, #0]
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d1f8      	bne.n	8019f0c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8019f1a:	e112      	b.n	801a142 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8019f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f1e:	68db      	ldr	r3, [r3, #12]
 8019f20:	899b      	ldrh	r3, [r3, #12]
 8019f22:	b29b      	uxth	r3, r3
 8019f24:	4618      	mov	r0, r3
 8019f26:	f7f8 ffa7 	bl	8012e78 <lwip_htons>
 8019f2a:	4603      	mov	r3, r0
 8019f2c:	b2db      	uxtb	r3, r3
 8019f2e:	f003 0304 	and.w	r3, r3, #4
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d006      	beq.n	8019f44 <tcp_output+0x188>
 8019f36:	4b43      	ldr	r3, [pc, #268]	; (801a044 <tcp_output+0x288>)
 8019f38:	f240 5236 	movw	r2, #1334	; 0x536
 8019f3c:	4946      	ldr	r1, [pc, #280]	; (801a058 <tcp_output+0x29c>)
 8019f3e:	4843      	ldr	r0, [pc, #268]	; (801a04c <tcp_output+0x290>)
 8019f40:	f005 fbbe 	bl	801f6c0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d01f      	beq.n	8019f8c <tcp_output+0x1d0>
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	8b5b      	ldrh	r3, [r3, #26]
 8019f50:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d119      	bne.n	8019f8c <tcp_output+0x1d0>
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d00b      	beq.n	8019f78 <tcp_output+0x1bc>
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	d110      	bne.n	8019f8c <tcp_output+0x1d0>
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019f6e:	891a      	ldrh	r2, [r3, #8]
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019f74:	429a      	cmp	r2, r3
 8019f76:	d209      	bcs.n	8019f8c <tcp_output+0x1d0>
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d004      	beq.n	8019f8c <tcp_output+0x1d0>
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019f88:	2b08      	cmp	r3, #8
 8019f8a:	d901      	bls.n	8019f90 <tcp_output+0x1d4>
 8019f8c:	2301      	movs	r3, #1
 8019f8e:	e000      	b.n	8019f92 <tcp_output+0x1d6>
 8019f90:	2300      	movs	r3, #0
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d106      	bne.n	8019fa4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	8b5b      	ldrh	r3, [r3, #26]
 8019f9a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	f000 80e4 	beq.w	801a16c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	7d1b      	ldrb	r3, [r3, #20]
 8019fa8:	2b02      	cmp	r3, #2
 8019faa:	d00d      	beq.n	8019fc8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8019fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fae:	68db      	ldr	r3, [r3, #12]
 8019fb0:	899b      	ldrh	r3, [r3, #12]
 8019fb2:	b29c      	uxth	r4, r3
 8019fb4:	2010      	movs	r0, #16
 8019fb6:	f7f8 ff5f 	bl	8012e78 <lwip_htons>
 8019fba:	4603      	mov	r3, r0
 8019fbc:	461a      	mov	r2, r3
 8019fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fc0:	68db      	ldr	r3, [r3, #12]
 8019fc2:	4322      	orrs	r2, r4
 8019fc4:	b292      	uxth	r2, r2
 8019fc6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8019fc8:	697a      	ldr	r2, [r7, #20]
 8019fca:	6879      	ldr	r1, [r7, #4]
 8019fcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019fce:	f000 f909 	bl	801a1e4 <tcp_output_segment>
 8019fd2:	4603      	mov	r3, r0
 8019fd4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8019fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d009      	beq.n	8019ff2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	8b5b      	ldrh	r3, [r3, #26]
 8019fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019fe6:	b29a      	uxth	r2, r3
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	835a      	strh	r2, [r3, #26]
      return err;
 8019fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019ff0:	e0d3      	b.n	801a19a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8019ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ff4:	681a      	ldr	r2, [r3, #0]
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	7d1b      	ldrb	r3, [r3, #20]
 8019ffe:	2b02      	cmp	r3, #2
 801a000:	d006      	beq.n	801a010 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	8b5b      	ldrh	r3, [r3, #26]
 801a006:	f023 0303 	bic.w	r3, r3, #3
 801a00a:	b29a      	uxth	r2, r3
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a012:	68db      	ldr	r3, [r3, #12]
 801a014:	685b      	ldr	r3, [r3, #4]
 801a016:	4618      	mov	r0, r3
 801a018:	f7f8 ff43 	bl	8012ea2 <lwip_htonl>
 801a01c:	4604      	mov	r4, r0
 801a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a020:	891b      	ldrh	r3, [r3, #8]
 801a022:	461d      	mov	r5, r3
 801a024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a026:	68db      	ldr	r3, [r3, #12]
 801a028:	899b      	ldrh	r3, [r3, #12]
 801a02a:	b29b      	uxth	r3, r3
 801a02c:	4618      	mov	r0, r3
 801a02e:	f7f8 ff23 	bl	8012e78 <lwip_htons>
 801a032:	4603      	mov	r3, r0
 801a034:	b2db      	uxtb	r3, r3
 801a036:	f003 0303 	and.w	r3, r3, #3
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d00e      	beq.n	801a05c <tcp_output+0x2a0>
 801a03e:	2301      	movs	r3, #1
 801a040:	e00d      	b.n	801a05e <tcp_output+0x2a2>
 801a042:	bf00      	nop
 801a044:	0802523c 	.word	0x0802523c
 801a048:	08025780 	.word	0x08025780
 801a04c:	08025290 	.word	0x08025290
 801a050:	08025798 	.word	0x08025798
 801a054:	2000b8e8 	.word	0x2000b8e8
 801a058:	080257c0 	.word	0x080257c0
 801a05c:	2300      	movs	r3, #0
 801a05e:	442b      	add	r3, r5
 801a060:	4423      	add	r3, r4
 801a062:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a068:	68bb      	ldr	r3, [r7, #8]
 801a06a:	1ad3      	subs	r3, r2, r3
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	da02      	bge.n	801a076 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	68ba      	ldr	r2, [r7, #8]
 801a074:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801a076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a078:	891b      	ldrh	r3, [r3, #8]
 801a07a:	461c      	mov	r4, r3
 801a07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a07e:	68db      	ldr	r3, [r3, #12]
 801a080:	899b      	ldrh	r3, [r3, #12]
 801a082:	b29b      	uxth	r3, r3
 801a084:	4618      	mov	r0, r3
 801a086:	f7f8 fef7 	bl	8012e78 <lwip_htons>
 801a08a:	4603      	mov	r3, r0
 801a08c:	b2db      	uxtb	r3, r3
 801a08e:	f003 0303 	and.w	r3, r3, #3
 801a092:	2b00      	cmp	r3, #0
 801a094:	d001      	beq.n	801a09a <tcp_output+0x2de>
 801a096:	2301      	movs	r3, #1
 801a098:	e000      	b.n	801a09c <tcp_output+0x2e0>
 801a09a:	2300      	movs	r3, #0
 801a09c:	4423      	add	r3, r4
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d049      	beq.n	801a136 <tcp_output+0x37a>
      seg->next = NULL;
 801a0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0a4:	2200      	movs	r2, #0
 801a0a6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a0ac:	2b00      	cmp	r3, #0
 801a0ae:	d105      	bne.n	801a0bc <tcp_output+0x300>
        pcb->unacked = seg;
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a0b4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0b8:	623b      	str	r3, [r7, #32]
 801a0ba:	e03f      	b.n	801a13c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0be:	68db      	ldr	r3, [r3, #12]
 801a0c0:	685b      	ldr	r3, [r3, #4]
 801a0c2:	4618      	mov	r0, r3
 801a0c4:	f7f8 feed 	bl	8012ea2 <lwip_htonl>
 801a0c8:	4604      	mov	r4, r0
 801a0ca:	6a3b      	ldr	r3, [r7, #32]
 801a0cc:	68db      	ldr	r3, [r3, #12]
 801a0ce:	685b      	ldr	r3, [r3, #4]
 801a0d0:	4618      	mov	r0, r3
 801a0d2:	f7f8 fee6 	bl	8012ea2 <lwip_htonl>
 801a0d6:	4603      	mov	r3, r0
 801a0d8:	1ae3      	subs	r3, r4, r3
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	da24      	bge.n	801a128 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	3370      	adds	r3, #112	; 0x70
 801a0e2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a0e4:	e002      	b.n	801a0ec <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801a0e6:	69fb      	ldr	r3, [r7, #28]
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a0ec:	69fb      	ldr	r3, [r7, #28]
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d011      	beq.n	801a118 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a0f4:	69fb      	ldr	r3, [r7, #28]
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	68db      	ldr	r3, [r3, #12]
 801a0fa:	685b      	ldr	r3, [r3, #4]
 801a0fc:	4618      	mov	r0, r3
 801a0fe:	f7f8 fed0 	bl	8012ea2 <lwip_htonl>
 801a102:	4604      	mov	r4, r0
 801a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a106:	68db      	ldr	r3, [r3, #12]
 801a108:	685b      	ldr	r3, [r3, #4]
 801a10a:	4618      	mov	r0, r3
 801a10c:	f7f8 fec9 	bl	8012ea2 <lwip_htonl>
 801a110:	4603      	mov	r3, r0
 801a112:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801a114:	2b00      	cmp	r3, #0
 801a116:	dbe6      	blt.n	801a0e6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801a118:	69fb      	ldr	r3, [r7, #28]
 801a11a:	681a      	ldr	r2, [r3, #0]
 801a11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a11e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801a120:	69fb      	ldr	r3, [r7, #28]
 801a122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a124:	601a      	str	r2, [r3, #0]
 801a126:	e009      	b.n	801a13c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801a128:	6a3b      	ldr	r3, [r7, #32]
 801a12a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a12c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801a12e:	6a3b      	ldr	r3, [r7, #32]
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	623b      	str	r3, [r7, #32]
 801a134:	e002      	b.n	801a13c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801a136:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a138:	f7fb feff 	bl	8015f3a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a140:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801a142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a144:	2b00      	cmp	r3, #0
 801a146:	d012      	beq.n	801a16e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a14a:	68db      	ldr	r3, [r3, #12]
 801a14c:	685b      	ldr	r3, [r3, #4]
 801a14e:	4618      	mov	r0, r3
 801a150:	f7f8 fea7 	bl	8012ea2 <lwip_htonl>
 801a154:	4602      	mov	r2, r0
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a15a:	1ad3      	subs	r3, r2, r3
 801a15c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a15e:	8912      	ldrh	r2, [r2, #8]
 801a160:	4413      	add	r3, r2
  while (seg != NULL &&
 801a162:	69ba      	ldr	r2, [r7, #24]
 801a164:	429a      	cmp	r2, r3
 801a166:	f4bf aed9 	bcs.w	8019f1c <tcp_output+0x160>
 801a16a:	e000      	b.n	801a16e <tcp_output+0x3b2>
      break;
 801a16c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a172:	2b00      	cmp	r3, #0
 801a174:	d108      	bne.n	801a188 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	2200      	movs	r2, #0
 801a17a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801a17e:	e004      	b.n	801a18a <tcp_output+0x3ce>
    goto output_done;
 801a180:	bf00      	nop
 801a182:	e002      	b.n	801a18a <tcp_output+0x3ce>
    goto output_done;
 801a184:	bf00      	nop
 801a186:	e000      	b.n	801a18a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801a188:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	8b5b      	ldrh	r3, [r3, #26]
 801a18e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801a192:	b29a      	uxth	r2, r3
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801a198:	2300      	movs	r3, #0
}
 801a19a:	4618      	mov	r0, r3
 801a19c:	3728      	adds	r7, #40	; 0x28
 801a19e:	46bd      	mov	sp, r7
 801a1a0:	bdb0      	pop	{r4, r5, r7, pc}
 801a1a2:	bf00      	nop

0801a1a4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801a1a4:	b580      	push	{r7, lr}
 801a1a6:	b082      	sub	sp, #8
 801a1a8:	af00      	add	r7, sp, #0
 801a1aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d106      	bne.n	801a1c0 <tcp_output_segment_busy+0x1c>
 801a1b2:	4b09      	ldr	r3, [pc, #36]	; (801a1d8 <tcp_output_segment_busy+0x34>)
 801a1b4:	f240 529a 	movw	r2, #1434	; 0x59a
 801a1b8:	4908      	ldr	r1, [pc, #32]	; (801a1dc <tcp_output_segment_busy+0x38>)
 801a1ba:	4809      	ldr	r0, [pc, #36]	; (801a1e0 <tcp_output_segment_busy+0x3c>)
 801a1bc:	f005 fa80 	bl	801f6c0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	685b      	ldr	r3, [r3, #4]
 801a1c4:	7b9b      	ldrb	r3, [r3, #14]
 801a1c6:	2b01      	cmp	r3, #1
 801a1c8:	d001      	beq.n	801a1ce <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801a1ca:	2301      	movs	r3, #1
 801a1cc:	e000      	b.n	801a1d0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801a1ce:	2300      	movs	r3, #0
}
 801a1d0:	4618      	mov	r0, r3
 801a1d2:	3708      	adds	r7, #8
 801a1d4:	46bd      	mov	sp, r7
 801a1d6:	bd80      	pop	{r7, pc}
 801a1d8:	0802523c 	.word	0x0802523c
 801a1dc:	080257d8 	.word	0x080257d8
 801a1e0:	08025290 	.word	0x08025290

0801a1e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801a1e4:	b5b0      	push	{r4, r5, r7, lr}
 801a1e6:	b08c      	sub	sp, #48	; 0x30
 801a1e8:	af04      	add	r7, sp, #16
 801a1ea:	60f8      	str	r0, [r7, #12]
 801a1ec:	60b9      	str	r1, [r7, #8]
 801a1ee:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801a1f0:	68fb      	ldr	r3, [r7, #12]
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d106      	bne.n	801a204 <tcp_output_segment+0x20>
 801a1f6:	4b63      	ldr	r3, [pc, #396]	; (801a384 <tcp_output_segment+0x1a0>)
 801a1f8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801a1fc:	4962      	ldr	r1, [pc, #392]	; (801a388 <tcp_output_segment+0x1a4>)
 801a1fe:	4863      	ldr	r0, [pc, #396]	; (801a38c <tcp_output_segment+0x1a8>)
 801a200:	f005 fa5e 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801a204:	68bb      	ldr	r3, [r7, #8]
 801a206:	2b00      	cmp	r3, #0
 801a208:	d106      	bne.n	801a218 <tcp_output_segment+0x34>
 801a20a:	4b5e      	ldr	r3, [pc, #376]	; (801a384 <tcp_output_segment+0x1a0>)
 801a20c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801a210:	495f      	ldr	r1, [pc, #380]	; (801a390 <tcp_output_segment+0x1ac>)
 801a212:	485e      	ldr	r0, [pc, #376]	; (801a38c <tcp_output_segment+0x1a8>)
 801a214:	f005 fa54 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d106      	bne.n	801a22c <tcp_output_segment+0x48>
 801a21e:	4b59      	ldr	r3, [pc, #356]	; (801a384 <tcp_output_segment+0x1a0>)
 801a220:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801a224:	495b      	ldr	r1, [pc, #364]	; (801a394 <tcp_output_segment+0x1b0>)
 801a226:	4859      	ldr	r0, [pc, #356]	; (801a38c <tcp_output_segment+0x1a8>)
 801a228:	f005 fa4a 	bl	801f6c0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801a22c:	68f8      	ldr	r0, [r7, #12]
 801a22e:	f7ff ffb9 	bl	801a1a4 <tcp_output_segment_busy>
 801a232:	4603      	mov	r3, r0
 801a234:	2b00      	cmp	r3, #0
 801a236:	d001      	beq.n	801a23c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801a238:	2300      	movs	r3, #0
 801a23a:	e09f      	b.n	801a37c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a23c:	68bb      	ldr	r3, [r7, #8]
 801a23e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	68dc      	ldr	r4, [r3, #12]
 801a244:	4610      	mov	r0, r2
 801a246:	f7f8 fe2c 	bl	8012ea2 <lwip_htonl>
 801a24a:	4603      	mov	r3, r0
 801a24c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a24e:	68bb      	ldr	r3, [r7, #8]
 801a250:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a252:	68fb      	ldr	r3, [r7, #12]
 801a254:	68dc      	ldr	r4, [r3, #12]
 801a256:	4610      	mov	r0, r2
 801a258:	f7f8 fe0e 	bl	8012e78 <lwip_htons>
 801a25c:	4603      	mov	r3, r0
 801a25e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a260:	68bb      	ldr	r3, [r7, #8]
 801a262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a264:	68ba      	ldr	r2, [r7, #8]
 801a266:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a268:	441a      	add	r2, r3
 801a26a:	68bb      	ldr	r3, [r7, #8]
 801a26c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	68db      	ldr	r3, [r3, #12]
 801a272:	3314      	adds	r3, #20
 801a274:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801a276:	68fb      	ldr	r3, [r7, #12]
 801a278:	7a9b      	ldrb	r3, [r3, #10]
 801a27a:	f003 0301 	and.w	r3, r3, #1
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d015      	beq.n	801a2ae <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801a282:	68bb      	ldr	r3, [r7, #8]
 801a284:	3304      	adds	r3, #4
 801a286:	461a      	mov	r2, r3
 801a288:	6879      	ldr	r1, [r7, #4]
 801a28a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801a28e:	f7fc fa37 	bl	8016700 <tcp_eff_send_mss_netif>
 801a292:	4603      	mov	r3, r0
 801a294:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801a296:	8b7b      	ldrh	r3, [r7, #26]
 801a298:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801a29c:	4618      	mov	r0, r3
 801a29e:	f7f8 fe00 	bl	8012ea2 <lwip_htonl>
 801a2a2:	4602      	mov	r2, r0
 801a2a4:	69fb      	ldr	r3, [r7, #28]
 801a2a6:	601a      	str	r2, [r3, #0]
    opts += 1;
 801a2a8:	69fb      	ldr	r3, [r7, #28]
 801a2aa:	3304      	adds	r3, #4
 801a2ac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801a2ae:	68bb      	ldr	r3, [r7, #8]
 801a2b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	da02      	bge.n	801a2be <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801a2b8:	68bb      	ldr	r3, [r7, #8]
 801a2ba:	2200      	movs	r2, #0
 801a2bc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801a2be:	68bb      	ldr	r3, [r7, #8]
 801a2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d10c      	bne.n	801a2e0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801a2c6:	4b34      	ldr	r3, [pc, #208]	; (801a398 <tcp_output_segment+0x1b4>)
 801a2c8:	681a      	ldr	r2, [r3, #0]
 801a2ca:	68bb      	ldr	r3, [r7, #8]
 801a2cc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801a2ce:	68fb      	ldr	r3, [r7, #12]
 801a2d0:	68db      	ldr	r3, [r3, #12]
 801a2d2:	685b      	ldr	r3, [r3, #4]
 801a2d4:	4618      	mov	r0, r3
 801a2d6:	f7f8 fde4 	bl	8012ea2 <lwip_htonl>
 801a2da:	4602      	mov	r2, r0
 801a2dc:	68bb      	ldr	r3, [r7, #8]
 801a2de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801a2e0:	68fb      	ldr	r3, [r7, #12]
 801a2e2:	68da      	ldr	r2, [r3, #12]
 801a2e4:	68fb      	ldr	r3, [r7, #12]
 801a2e6:	685b      	ldr	r3, [r3, #4]
 801a2e8:	685b      	ldr	r3, [r3, #4]
 801a2ea:	1ad3      	subs	r3, r2, r3
 801a2ec:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801a2ee:	68fb      	ldr	r3, [r7, #12]
 801a2f0:	685b      	ldr	r3, [r3, #4]
 801a2f2:	8959      	ldrh	r1, [r3, #10]
 801a2f4:	68fb      	ldr	r3, [r7, #12]
 801a2f6:	685b      	ldr	r3, [r3, #4]
 801a2f8:	8b3a      	ldrh	r2, [r7, #24]
 801a2fa:	1a8a      	subs	r2, r1, r2
 801a2fc:	b292      	uxth	r2, r2
 801a2fe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	685b      	ldr	r3, [r3, #4]
 801a304:	8919      	ldrh	r1, [r3, #8]
 801a306:	68fb      	ldr	r3, [r7, #12]
 801a308:	685b      	ldr	r3, [r3, #4]
 801a30a:	8b3a      	ldrh	r2, [r7, #24]
 801a30c:	1a8a      	subs	r2, r1, r2
 801a30e:	b292      	uxth	r2, r2
 801a310:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801a312:	68fb      	ldr	r3, [r7, #12]
 801a314:	685b      	ldr	r3, [r3, #4]
 801a316:	68fa      	ldr	r2, [r7, #12]
 801a318:	68d2      	ldr	r2, [r2, #12]
 801a31a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801a31c:	68fb      	ldr	r3, [r7, #12]
 801a31e:	68db      	ldr	r3, [r3, #12]
 801a320:	2200      	movs	r2, #0
 801a322:	741a      	strb	r2, [r3, #16]
 801a324:	2200      	movs	r2, #0
 801a326:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801a328:	68fb      	ldr	r3, [r7, #12]
 801a32a:	68db      	ldr	r3, [r3, #12]
 801a32c:	f103 0214 	add.w	r2, r3, #20
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	7a9b      	ldrb	r3, [r3, #10]
 801a334:	009b      	lsls	r3, r3, #2
 801a336:	f003 0304 	and.w	r3, r3, #4
 801a33a:	4413      	add	r3, r2
 801a33c:	69fa      	ldr	r2, [r7, #28]
 801a33e:	429a      	cmp	r2, r3
 801a340:	d006      	beq.n	801a350 <tcp_output_segment+0x16c>
 801a342:	4b10      	ldr	r3, [pc, #64]	; (801a384 <tcp_output_segment+0x1a0>)
 801a344:	f240 621c 	movw	r2, #1564	; 0x61c
 801a348:	4914      	ldr	r1, [pc, #80]	; (801a39c <tcp_output_segment+0x1b8>)
 801a34a:	4810      	ldr	r0, [pc, #64]	; (801a38c <tcp_output_segment+0x1a8>)
 801a34c:	f005 f9b8 	bl	801f6c0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801a350:	68fb      	ldr	r3, [r7, #12]
 801a352:	6858      	ldr	r0, [r3, #4]
 801a354:	68b9      	ldr	r1, [r7, #8]
 801a356:	68bb      	ldr	r3, [r7, #8]
 801a358:	1d1c      	adds	r4, r3, #4
 801a35a:	68bb      	ldr	r3, [r7, #8]
 801a35c:	7add      	ldrb	r5, [r3, #11]
 801a35e:	68bb      	ldr	r3, [r7, #8]
 801a360:	7a9b      	ldrb	r3, [r3, #10]
 801a362:	687a      	ldr	r2, [r7, #4]
 801a364:	9202      	str	r2, [sp, #8]
 801a366:	2206      	movs	r2, #6
 801a368:	9201      	str	r2, [sp, #4]
 801a36a:	9300      	str	r3, [sp, #0]
 801a36c:	462b      	mov	r3, r5
 801a36e:	4622      	mov	r2, r4
 801a370:	f002 fd96 	bl	801cea0 <ip4_output_if>
 801a374:	4603      	mov	r3, r0
 801a376:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801a378:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a37c:	4618      	mov	r0, r3
 801a37e:	3720      	adds	r7, #32
 801a380:	46bd      	mov	sp, r7
 801a382:	bdb0      	pop	{r4, r5, r7, pc}
 801a384:	0802523c 	.word	0x0802523c
 801a388:	08025800 	.word	0x08025800
 801a38c:	08025290 	.word	0x08025290
 801a390:	08025820 	.word	0x08025820
 801a394:	08025840 	.word	0x08025840
 801a398:	2000b8d8 	.word	0x2000b8d8
 801a39c:	08025864 	.word	0x08025864

0801a3a0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801a3a0:	b5b0      	push	{r4, r5, r7, lr}
 801a3a2:	b084      	sub	sp, #16
 801a3a4:	af00      	add	r7, sp, #0
 801a3a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d106      	bne.n	801a3bc <tcp_rexmit_rto_prepare+0x1c>
 801a3ae:	4b31      	ldr	r3, [pc, #196]	; (801a474 <tcp_rexmit_rto_prepare+0xd4>)
 801a3b0:	f240 6263 	movw	r2, #1635	; 0x663
 801a3b4:	4930      	ldr	r1, [pc, #192]	; (801a478 <tcp_rexmit_rto_prepare+0xd8>)
 801a3b6:	4831      	ldr	r0, [pc, #196]	; (801a47c <tcp_rexmit_rto_prepare+0xdc>)
 801a3b8:	f005 f982 	bl	801f6c0 <iprintf>

  if (pcb->unacked == NULL) {
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	d102      	bne.n	801a3ca <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801a3c4:	f06f 0305 	mvn.w	r3, #5
 801a3c8:	e050      	b.n	801a46c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a3ce:	60fb      	str	r3, [r7, #12]
 801a3d0:	e00b      	b.n	801a3ea <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801a3d2:	68f8      	ldr	r0, [r7, #12]
 801a3d4:	f7ff fee6 	bl	801a1a4 <tcp_output_segment_busy>
 801a3d8:	4603      	mov	r3, r0
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	d002      	beq.n	801a3e4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801a3de:	f06f 0305 	mvn.w	r3, #5
 801a3e2:	e043      	b.n	801a46c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a3e4:	68fb      	ldr	r3, [r7, #12]
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	60fb      	str	r3, [r7, #12]
 801a3ea:	68fb      	ldr	r3, [r7, #12]
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d1ef      	bne.n	801a3d2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801a3f2:	68f8      	ldr	r0, [r7, #12]
 801a3f4:	f7ff fed6 	bl	801a1a4 <tcp_output_segment_busy>
 801a3f8:	4603      	mov	r3, r0
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d002      	beq.n	801a404 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801a3fe:	f06f 0305 	mvn.w	r3, #5
 801a402:	e033      	b.n	801a46c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	2200      	movs	r2, #0
 801a418:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	8b5b      	ldrh	r3, [r3, #26]
 801a41e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a422:	b29a      	uxth	r2, r3
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a428:	68fb      	ldr	r3, [r7, #12]
 801a42a:	68db      	ldr	r3, [r3, #12]
 801a42c:	685b      	ldr	r3, [r3, #4]
 801a42e:	4618      	mov	r0, r3
 801a430:	f7f8 fd37 	bl	8012ea2 <lwip_htonl>
 801a434:	4604      	mov	r4, r0
 801a436:	68fb      	ldr	r3, [r7, #12]
 801a438:	891b      	ldrh	r3, [r3, #8]
 801a43a:	461d      	mov	r5, r3
 801a43c:	68fb      	ldr	r3, [r7, #12]
 801a43e:	68db      	ldr	r3, [r3, #12]
 801a440:	899b      	ldrh	r3, [r3, #12]
 801a442:	b29b      	uxth	r3, r3
 801a444:	4618      	mov	r0, r3
 801a446:	f7f8 fd17 	bl	8012e78 <lwip_htons>
 801a44a:	4603      	mov	r3, r0
 801a44c:	b2db      	uxtb	r3, r3
 801a44e:	f003 0303 	and.w	r3, r3, #3
 801a452:	2b00      	cmp	r3, #0
 801a454:	d001      	beq.n	801a45a <tcp_rexmit_rto_prepare+0xba>
 801a456:	2301      	movs	r3, #1
 801a458:	e000      	b.n	801a45c <tcp_rexmit_rto_prepare+0xbc>
 801a45a:	2300      	movs	r3, #0
 801a45c:	442b      	add	r3, r5
 801a45e:	18e2      	adds	r2, r4, r3
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	2200      	movs	r2, #0
 801a468:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801a46a:	2300      	movs	r3, #0
}
 801a46c:	4618      	mov	r0, r3
 801a46e:	3710      	adds	r7, #16
 801a470:	46bd      	mov	sp, r7
 801a472:	bdb0      	pop	{r4, r5, r7, pc}
 801a474:	0802523c 	.word	0x0802523c
 801a478:	08025878 	.word	0x08025878
 801a47c:	08025290 	.word	0x08025290

0801a480 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801a480:	b580      	push	{r7, lr}
 801a482:	b082      	sub	sp, #8
 801a484:	af00      	add	r7, sp, #0
 801a486:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d106      	bne.n	801a49c <tcp_rexmit_rto_commit+0x1c>
 801a48e:	4b0d      	ldr	r3, [pc, #52]	; (801a4c4 <tcp_rexmit_rto_commit+0x44>)
 801a490:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801a494:	490c      	ldr	r1, [pc, #48]	; (801a4c8 <tcp_rexmit_rto_commit+0x48>)
 801a496:	480d      	ldr	r0, [pc, #52]	; (801a4cc <tcp_rexmit_rto_commit+0x4c>)
 801a498:	f005 f912 	bl	801f6c0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a4a2:	2bff      	cmp	r3, #255	; 0xff
 801a4a4:	d007      	beq.n	801a4b6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a4ac:	3301      	adds	r3, #1
 801a4ae:	b2da      	uxtb	r2, r3
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801a4b6:	6878      	ldr	r0, [r7, #4]
 801a4b8:	f7ff fc80 	bl	8019dbc <tcp_output>
}
 801a4bc:	bf00      	nop
 801a4be:	3708      	adds	r7, #8
 801a4c0:	46bd      	mov	sp, r7
 801a4c2:	bd80      	pop	{r7, pc}
 801a4c4:	0802523c 	.word	0x0802523c
 801a4c8:	0802589c 	.word	0x0802589c
 801a4cc:	08025290 	.word	0x08025290

0801a4d0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801a4d0:	b580      	push	{r7, lr}
 801a4d2:	b082      	sub	sp, #8
 801a4d4:	af00      	add	r7, sp, #0
 801a4d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d106      	bne.n	801a4ec <tcp_rexmit_rto+0x1c>
 801a4de:	4b0a      	ldr	r3, [pc, #40]	; (801a508 <tcp_rexmit_rto+0x38>)
 801a4e0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801a4e4:	4909      	ldr	r1, [pc, #36]	; (801a50c <tcp_rexmit_rto+0x3c>)
 801a4e6:	480a      	ldr	r0, [pc, #40]	; (801a510 <tcp_rexmit_rto+0x40>)
 801a4e8:	f005 f8ea 	bl	801f6c0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801a4ec:	6878      	ldr	r0, [r7, #4]
 801a4ee:	f7ff ff57 	bl	801a3a0 <tcp_rexmit_rto_prepare>
 801a4f2:	4603      	mov	r3, r0
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d102      	bne.n	801a4fe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801a4f8:	6878      	ldr	r0, [r7, #4]
 801a4fa:	f7ff ffc1 	bl	801a480 <tcp_rexmit_rto_commit>
  }
}
 801a4fe:	bf00      	nop
 801a500:	3708      	adds	r7, #8
 801a502:	46bd      	mov	sp, r7
 801a504:	bd80      	pop	{r7, pc}
 801a506:	bf00      	nop
 801a508:	0802523c 	.word	0x0802523c
 801a50c:	080258c0 	.word	0x080258c0
 801a510:	08025290 	.word	0x08025290

0801a514 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801a514:	b590      	push	{r4, r7, lr}
 801a516:	b085      	sub	sp, #20
 801a518:	af00      	add	r7, sp, #0
 801a51a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d106      	bne.n	801a530 <tcp_rexmit+0x1c>
 801a522:	4b2f      	ldr	r3, [pc, #188]	; (801a5e0 <tcp_rexmit+0xcc>)
 801a524:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801a528:	492e      	ldr	r1, [pc, #184]	; (801a5e4 <tcp_rexmit+0xd0>)
 801a52a:	482f      	ldr	r0, [pc, #188]	; (801a5e8 <tcp_rexmit+0xd4>)
 801a52c:	f005 f8c8 	bl	801f6c0 <iprintf>

  if (pcb->unacked == NULL) {
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a534:	2b00      	cmp	r3, #0
 801a536:	d102      	bne.n	801a53e <tcp_rexmit+0x2a>
    return ERR_VAL;
 801a538:	f06f 0305 	mvn.w	r3, #5
 801a53c:	e04c      	b.n	801a5d8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a542:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801a544:	68b8      	ldr	r0, [r7, #8]
 801a546:	f7ff fe2d 	bl	801a1a4 <tcp_output_segment_busy>
 801a54a:	4603      	mov	r3, r0
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d002      	beq.n	801a556 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801a550:	f06f 0305 	mvn.w	r3, #5
 801a554:	e040      	b.n	801a5d8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801a556:	68bb      	ldr	r3, [r7, #8]
 801a558:	681a      	ldr	r2, [r3, #0]
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	336c      	adds	r3, #108	; 0x6c
 801a562:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a564:	e002      	b.n	801a56c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	681b      	ldr	r3, [r3, #0]
 801a56a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a56c:	68fb      	ldr	r3, [r7, #12]
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	2b00      	cmp	r3, #0
 801a572:	d011      	beq.n	801a598 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a574:	68fb      	ldr	r3, [r7, #12]
 801a576:	681b      	ldr	r3, [r3, #0]
 801a578:	68db      	ldr	r3, [r3, #12]
 801a57a:	685b      	ldr	r3, [r3, #4]
 801a57c:	4618      	mov	r0, r3
 801a57e:	f7f8 fc90 	bl	8012ea2 <lwip_htonl>
 801a582:	4604      	mov	r4, r0
 801a584:	68bb      	ldr	r3, [r7, #8]
 801a586:	68db      	ldr	r3, [r3, #12]
 801a588:	685b      	ldr	r3, [r3, #4]
 801a58a:	4618      	mov	r0, r3
 801a58c:	f7f8 fc89 	bl	8012ea2 <lwip_htonl>
 801a590:	4603      	mov	r3, r0
 801a592:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801a594:	2b00      	cmp	r3, #0
 801a596:	dbe6      	blt.n	801a566 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801a598:	68fb      	ldr	r3, [r7, #12]
 801a59a:	681a      	ldr	r2, [r3, #0]
 801a59c:	68bb      	ldr	r3, [r7, #8]
 801a59e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801a5a0:	68fb      	ldr	r3, [r7, #12]
 801a5a2:	68ba      	ldr	r2, [r7, #8]
 801a5a4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801a5a6:	68bb      	ldr	r3, [r7, #8]
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d103      	bne.n	801a5b6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	2200      	movs	r2, #0
 801a5b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a5bc:	2bff      	cmp	r3, #255	; 0xff
 801a5be:	d007      	beq.n	801a5d0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a5c6:	3301      	adds	r3, #1
 801a5c8:	b2da      	uxtb	r2, r3
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	2200      	movs	r2, #0
 801a5d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801a5d6:	2300      	movs	r3, #0
}
 801a5d8:	4618      	mov	r0, r3
 801a5da:	3714      	adds	r7, #20
 801a5dc:	46bd      	mov	sp, r7
 801a5de:	bd90      	pop	{r4, r7, pc}
 801a5e0:	0802523c 	.word	0x0802523c
 801a5e4:	080258dc 	.word	0x080258dc
 801a5e8:	08025290 	.word	0x08025290

0801a5ec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801a5ec:	b580      	push	{r7, lr}
 801a5ee:	b082      	sub	sp, #8
 801a5f0:	af00      	add	r7, sp, #0
 801a5f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d106      	bne.n	801a608 <tcp_rexmit_fast+0x1c>
 801a5fa:	4b2a      	ldr	r3, [pc, #168]	; (801a6a4 <tcp_rexmit_fast+0xb8>)
 801a5fc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801a600:	4929      	ldr	r1, [pc, #164]	; (801a6a8 <tcp_rexmit_fast+0xbc>)
 801a602:	482a      	ldr	r0, [pc, #168]	; (801a6ac <tcp_rexmit_fast+0xc0>)
 801a604:	f005 f85c 	bl	801f6c0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	d044      	beq.n	801a69a <tcp_rexmit_fast+0xae>
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	8b5b      	ldrh	r3, [r3, #26]
 801a614:	f003 0304 	and.w	r3, r3, #4
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d13e      	bne.n	801a69a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801a61c:	6878      	ldr	r0, [r7, #4]
 801a61e:	f7ff ff79 	bl	801a514 <tcp_rexmit>
 801a622:	4603      	mov	r3, r0
 801a624:	2b00      	cmp	r3, #0
 801a626:	d138      	bne.n	801a69a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a634:	4293      	cmp	r3, r2
 801a636:	bf28      	it	cs
 801a638:	4613      	movcs	r3, r2
 801a63a:	b29b      	uxth	r3, r3
 801a63c:	0fda      	lsrs	r2, r3, #31
 801a63e:	4413      	add	r3, r2
 801a640:	105b      	asrs	r3, r3, #1
 801a642:	b29a      	uxth	r2, r3
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801a650:	461a      	mov	r2, r3
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a656:	005b      	lsls	r3, r3, #1
 801a658:	429a      	cmp	r2, r3
 801a65a:	d206      	bcs.n	801a66a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a660:	005b      	lsls	r3, r3, #1
 801a662:	b29a      	uxth	r2, r3
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a674:	4619      	mov	r1, r3
 801a676:	0049      	lsls	r1, r1, #1
 801a678:	440b      	add	r3, r1
 801a67a:	b29b      	uxth	r3, r3
 801a67c:	4413      	add	r3, r2
 801a67e:	b29a      	uxth	r2, r3
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	8b5b      	ldrh	r3, [r3, #26]
 801a68a:	f043 0304 	orr.w	r3, r3, #4
 801a68e:	b29a      	uxth	r2, r3
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	2200      	movs	r2, #0
 801a698:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801a69a:	bf00      	nop
 801a69c:	3708      	adds	r7, #8
 801a69e:	46bd      	mov	sp, r7
 801a6a0:	bd80      	pop	{r7, pc}
 801a6a2:	bf00      	nop
 801a6a4:	0802523c 	.word	0x0802523c
 801a6a8:	080258f4 	.word	0x080258f4
 801a6ac:	08025290 	.word	0x08025290

0801a6b0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801a6b0:	b580      	push	{r7, lr}
 801a6b2:	b086      	sub	sp, #24
 801a6b4:	af00      	add	r7, sp, #0
 801a6b6:	60f8      	str	r0, [r7, #12]
 801a6b8:	607b      	str	r3, [r7, #4]
 801a6ba:	460b      	mov	r3, r1
 801a6bc:	817b      	strh	r3, [r7, #10]
 801a6be:	4613      	mov	r3, r2
 801a6c0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a6c2:	897a      	ldrh	r2, [r7, #10]
 801a6c4:	893b      	ldrh	r3, [r7, #8]
 801a6c6:	4413      	add	r3, r2
 801a6c8:	b29b      	uxth	r3, r3
 801a6ca:	3314      	adds	r3, #20
 801a6cc:	b29b      	uxth	r3, r3
 801a6ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a6d2:	4619      	mov	r1, r3
 801a6d4:	2022      	movs	r0, #34	; 0x22
 801a6d6:	f7f9 fca7 	bl	8014028 <pbuf_alloc>
 801a6da:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801a6dc:	697b      	ldr	r3, [r7, #20]
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	d04d      	beq.n	801a77e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a6e2:	897b      	ldrh	r3, [r7, #10]
 801a6e4:	3313      	adds	r3, #19
 801a6e6:	697a      	ldr	r2, [r7, #20]
 801a6e8:	8952      	ldrh	r2, [r2, #10]
 801a6ea:	4293      	cmp	r3, r2
 801a6ec:	db06      	blt.n	801a6fc <tcp_output_alloc_header_common+0x4c>
 801a6ee:	4b26      	ldr	r3, [pc, #152]	; (801a788 <tcp_output_alloc_header_common+0xd8>)
 801a6f0:	f240 7223 	movw	r2, #1827	; 0x723
 801a6f4:	4925      	ldr	r1, [pc, #148]	; (801a78c <tcp_output_alloc_header_common+0xdc>)
 801a6f6:	4826      	ldr	r0, [pc, #152]	; (801a790 <tcp_output_alloc_header_common+0xe0>)
 801a6f8:	f004 ffe2 	bl	801f6c0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801a6fc:	697b      	ldr	r3, [r7, #20]
 801a6fe:	685b      	ldr	r3, [r3, #4]
 801a700:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801a702:	8c3b      	ldrh	r3, [r7, #32]
 801a704:	4618      	mov	r0, r3
 801a706:	f7f8 fbb7 	bl	8012e78 <lwip_htons>
 801a70a:	4603      	mov	r3, r0
 801a70c:	461a      	mov	r2, r3
 801a70e:	693b      	ldr	r3, [r7, #16]
 801a710:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801a712:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a714:	4618      	mov	r0, r3
 801a716:	f7f8 fbaf 	bl	8012e78 <lwip_htons>
 801a71a:	4603      	mov	r3, r0
 801a71c:	461a      	mov	r2, r3
 801a71e:	693b      	ldr	r3, [r7, #16]
 801a720:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801a722:	693b      	ldr	r3, [r7, #16]
 801a724:	687a      	ldr	r2, [r7, #4]
 801a726:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801a728:	68f8      	ldr	r0, [r7, #12]
 801a72a:	f7f8 fbba 	bl	8012ea2 <lwip_htonl>
 801a72e:	4602      	mov	r2, r0
 801a730:	693b      	ldr	r3, [r7, #16]
 801a732:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801a734:	897b      	ldrh	r3, [r7, #10]
 801a736:	089b      	lsrs	r3, r3, #2
 801a738:	b29b      	uxth	r3, r3
 801a73a:	3305      	adds	r3, #5
 801a73c:	b29b      	uxth	r3, r3
 801a73e:	031b      	lsls	r3, r3, #12
 801a740:	b29a      	uxth	r2, r3
 801a742:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a746:	b29b      	uxth	r3, r3
 801a748:	4313      	orrs	r3, r2
 801a74a:	b29b      	uxth	r3, r3
 801a74c:	4618      	mov	r0, r3
 801a74e:	f7f8 fb93 	bl	8012e78 <lwip_htons>
 801a752:	4603      	mov	r3, r0
 801a754:	461a      	mov	r2, r3
 801a756:	693b      	ldr	r3, [r7, #16]
 801a758:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801a75a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a75c:	4618      	mov	r0, r3
 801a75e:	f7f8 fb8b 	bl	8012e78 <lwip_htons>
 801a762:	4603      	mov	r3, r0
 801a764:	461a      	mov	r2, r3
 801a766:	693b      	ldr	r3, [r7, #16]
 801a768:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801a76a:	693b      	ldr	r3, [r7, #16]
 801a76c:	2200      	movs	r2, #0
 801a76e:	741a      	strb	r2, [r3, #16]
 801a770:	2200      	movs	r2, #0
 801a772:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801a774:	693b      	ldr	r3, [r7, #16]
 801a776:	2200      	movs	r2, #0
 801a778:	749a      	strb	r2, [r3, #18]
 801a77a:	2200      	movs	r2, #0
 801a77c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801a77e:	697b      	ldr	r3, [r7, #20]
}
 801a780:	4618      	mov	r0, r3
 801a782:	3718      	adds	r7, #24
 801a784:	46bd      	mov	sp, r7
 801a786:	bd80      	pop	{r7, pc}
 801a788:	0802523c 	.word	0x0802523c
 801a78c:	08025914 	.word	0x08025914
 801a790:	08025290 	.word	0x08025290

0801a794 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801a794:	b5b0      	push	{r4, r5, r7, lr}
 801a796:	b08a      	sub	sp, #40	; 0x28
 801a798:	af04      	add	r7, sp, #16
 801a79a:	60f8      	str	r0, [r7, #12]
 801a79c:	607b      	str	r3, [r7, #4]
 801a79e:	460b      	mov	r3, r1
 801a7a0:	817b      	strh	r3, [r7, #10]
 801a7a2:	4613      	mov	r3, r2
 801a7a4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	d106      	bne.n	801a7ba <tcp_output_alloc_header+0x26>
 801a7ac:	4b15      	ldr	r3, [pc, #84]	; (801a804 <tcp_output_alloc_header+0x70>)
 801a7ae:	f240 7242 	movw	r2, #1858	; 0x742
 801a7b2:	4915      	ldr	r1, [pc, #84]	; (801a808 <tcp_output_alloc_header+0x74>)
 801a7b4:	4815      	ldr	r0, [pc, #84]	; (801a80c <tcp_output_alloc_header+0x78>)
 801a7b6:	f004 ff83 	bl	801f6c0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801a7ba:	68fb      	ldr	r3, [r7, #12]
 801a7bc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801a7be:	68fb      	ldr	r3, [r7, #12]
 801a7c0:	8adb      	ldrh	r3, [r3, #22]
 801a7c2:	68fa      	ldr	r2, [r7, #12]
 801a7c4:	8b12      	ldrh	r2, [r2, #24]
 801a7c6:	68f9      	ldr	r1, [r7, #12]
 801a7c8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801a7ca:	893d      	ldrh	r5, [r7, #8]
 801a7cc:	897c      	ldrh	r4, [r7, #10]
 801a7ce:	9103      	str	r1, [sp, #12]
 801a7d0:	2110      	movs	r1, #16
 801a7d2:	9102      	str	r1, [sp, #8]
 801a7d4:	9201      	str	r2, [sp, #4]
 801a7d6:	9300      	str	r3, [sp, #0]
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	462a      	mov	r2, r5
 801a7dc:	4621      	mov	r1, r4
 801a7de:	f7ff ff67 	bl	801a6b0 <tcp_output_alloc_header_common>
 801a7e2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801a7e4:	697b      	ldr	r3, [r7, #20]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d006      	beq.n	801a7f8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a7ea:	68fb      	ldr	r3, [r7, #12]
 801a7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7ee:	68fa      	ldr	r2, [r7, #12]
 801a7f0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a7f2:	441a      	add	r2, r3
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801a7f8:	697b      	ldr	r3, [r7, #20]
}
 801a7fa:	4618      	mov	r0, r3
 801a7fc:	3718      	adds	r7, #24
 801a7fe:	46bd      	mov	sp, r7
 801a800:	bdb0      	pop	{r4, r5, r7, pc}
 801a802:	bf00      	nop
 801a804:	0802523c 	.word	0x0802523c
 801a808:	08025944 	.word	0x08025944
 801a80c:	08025290 	.word	0x08025290

0801a810 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801a810:	b580      	push	{r7, lr}
 801a812:	b088      	sub	sp, #32
 801a814:	af00      	add	r7, sp, #0
 801a816:	60f8      	str	r0, [r7, #12]
 801a818:	60b9      	str	r1, [r7, #8]
 801a81a:	4611      	mov	r1, r2
 801a81c:	461a      	mov	r2, r3
 801a81e:	460b      	mov	r3, r1
 801a820:	71fb      	strb	r3, [r7, #7]
 801a822:	4613      	mov	r3, r2
 801a824:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801a826:	2300      	movs	r3, #0
 801a828:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a82a:	68bb      	ldr	r3, [r7, #8]
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d106      	bne.n	801a83e <tcp_output_fill_options+0x2e>
 801a830:	4b13      	ldr	r3, [pc, #76]	; (801a880 <tcp_output_fill_options+0x70>)
 801a832:	f240 7256 	movw	r2, #1878	; 0x756
 801a836:	4913      	ldr	r1, [pc, #76]	; (801a884 <tcp_output_fill_options+0x74>)
 801a838:	4813      	ldr	r0, [pc, #76]	; (801a888 <tcp_output_fill_options+0x78>)
 801a83a:	f004 ff41 	bl	801f6c0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801a83e:	68bb      	ldr	r3, [r7, #8]
 801a840:	685b      	ldr	r3, [r3, #4]
 801a842:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801a844:	69bb      	ldr	r3, [r7, #24]
 801a846:	3314      	adds	r3, #20
 801a848:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801a84a:	69bb      	ldr	r3, [r7, #24]
 801a84c:	f103 0214 	add.w	r2, r3, #20
 801a850:	8bfb      	ldrh	r3, [r7, #30]
 801a852:	009b      	lsls	r3, r3, #2
 801a854:	4619      	mov	r1, r3
 801a856:	79fb      	ldrb	r3, [r7, #7]
 801a858:	009b      	lsls	r3, r3, #2
 801a85a:	f003 0304 	and.w	r3, r3, #4
 801a85e:	440b      	add	r3, r1
 801a860:	4413      	add	r3, r2
 801a862:	697a      	ldr	r2, [r7, #20]
 801a864:	429a      	cmp	r2, r3
 801a866:	d006      	beq.n	801a876 <tcp_output_fill_options+0x66>
 801a868:	4b05      	ldr	r3, [pc, #20]	; (801a880 <tcp_output_fill_options+0x70>)
 801a86a:	f240 7275 	movw	r2, #1909	; 0x775
 801a86e:	4907      	ldr	r1, [pc, #28]	; (801a88c <tcp_output_fill_options+0x7c>)
 801a870:	4805      	ldr	r0, [pc, #20]	; (801a888 <tcp_output_fill_options+0x78>)
 801a872:	f004 ff25 	bl	801f6c0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801a876:	bf00      	nop
 801a878:	3720      	adds	r7, #32
 801a87a:	46bd      	mov	sp, r7
 801a87c:	bd80      	pop	{r7, pc}
 801a87e:	bf00      	nop
 801a880:	0802523c 	.word	0x0802523c
 801a884:	0802596c 	.word	0x0802596c
 801a888:	08025290 	.word	0x08025290
 801a88c:	08025864 	.word	0x08025864

0801a890 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801a890:	b580      	push	{r7, lr}
 801a892:	b08a      	sub	sp, #40	; 0x28
 801a894:	af04      	add	r7, sp, #16
 801a896:	60f8      	str	r0, [r7, #12]
 801a898:	60b9      	str	r1, [r7, #8]
 801a89a:	607a      	str	r2, [r7, #4]
 801a89c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a89e:	68bb      	ldr	r3, [r7, #8]
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d106      	bne.n	801a8b2 <tcp_output_control_segment+0x22>
 801a8a4:	4b1c      	ldr	r3, [pc, #112]	; (801a918 <tcp_output_control_segment+0x88>)
 801a8a6:	f240 7287 	movw	r2, #1927	; 0x787
 801a8aa:	491c      	ldr	r1, [pc, #112]	; (801a91c <tcp_output_control_segment+0x8c>)
 801a8ac:	481c      	ldr	r0, [pc, #112]	; (801a920 <tcp_output_control_segment+0x90>)
 801a8ae:	f004 ff07 	bl	801f6c0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801a8b2:	683a      	ldr	r2, [r7, #0]
 801a8b4:	6879      	ldr	r1, [r7, #4]
 801a8b6:	68f8      	ldr	r0, [r7, #12]
 801a8b8:	f7fe fae8 	bl	8018e8c <tcp_route>
 801a8bc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801a8be:	693b      	ldr	r3, [r7, #16]
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d102      	bne.n	801a8ca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801a8c4:	23fc      	movs	r3, #252	; 0xfc
 801a8c6:	75fb      	strb	r3, [r7, #23]
 801a8c8:	e01c      	b.n	801a904 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801a8ca:	68fb      	ldr	r3, [r7, #12]
 801a8cc:	2b00      	cmp	r3, #0
 801a8ce:	d006      	beq.n	801a8de <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801a8d0:	68fb      	ldr	r3, [r7, #12]
 801a8d2:	7adb      	ldrb	r3, [r3, #11]
 801a8d4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801a8d6:	68fb      	ldr	r3, [r7, #12]
 801a8d8:	7a9b      	ldrb	r3, [r3, #10]
 801a8da:	757b      	strb	r3, [r7, #21]
 801a8dc:	e003      	b.n	801a8e6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801a8de:	23ff      	movs	r3, #255	; 0xff
 801a8e0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801a8e2:	2300      	movs	r3, #0
 801a8e4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a8e6:	7dba      	ldrb	r2, [r7, #22]
 801a8e8:	693b      	ldr	r3, [r7, #16]
 801a8ea:	9302      	str	r3, [sp, #8]
 801a8ec:	2306      	movs	r3, #6
 801a8ee:	9301      	str	r3, [sp, #4]
 801a8f0:	7d7b      	ldrb	r3, [r7, #21]
 801a8f2:	9300      	str	r3, [sp, #0]
 801a8f4:	4613      	mov	r3, r2
 801a8f6:	683a      	ldr	r2, [r7, #0]
 801a8f8:	6879      	ldr	r1, [r7, #4]
 801a8fa:	68b8      	ldr	r0, [r7, #8]
 801a8fc:	f002 fad0 	bl	801cea0 <ip4_output_if>
 801a900:	4603      	mov	r3, r0
 801a902:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801a904:	68b8      	ldr	r0, [r7, #8]
 801a906:	f7f9 fe73 	bl	80145f0 <pbuf_free>
  return err;
 801a90a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a90e:	4618      	mov	r0, r3
 801a910:	3718      	adds	r7, #24
 801a912:	46bd      	mov	sp, r7
 801a914:	bd80      	pop	{r7, pc}
 801a916:	bf00      	nop
 801a918:	0802523c 	.word	0x0802523c
 801a91c:	08025994 	.word	0x08025994
 801a920:	08025290 	.word	0x08025290

0801a924 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801a924:	b590      	push	{r4, r7, lr}
 801a926:	b08b      	sub	sp, #44	; 0x2c
 801a928:	af04      	add	r7, sp, #16
 801a92a:	60f8      	str	r0, [r7, #12]
 801a92c:	60b9      	str	r1, [r7, #8]
 801a92e:	607a      	str	r2, [r7, #4]
 801a930:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a932:	683b      	ldr	r3, [r7, #0]
 801a934:	2b00      	cmp	r3, #0
 801a936:	d106      	bne.n	801a946 <tcp_rst+0x22>
 801a938:	4b1f      	ldr	r3, [pc, #124]	; (801a9b8 <tcp_rst+0x94>)
 801a93a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801a93e:	491f      	ldr	r1, [pc, #124]	; (801a9bc <tcp_rst+0x98>)
 801a940:	481f      	ldr	r0, [pc, #124]	; (801a9c0 <tcp_rst+0x9c>)
 801a942:	f004 febd 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801a946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d106      	bne.n	801a95a <tcp_rst+0x36>
 801a94c:	4b1a      	ldr	r3, [pc, #104]	; (801a9b8 <tcp_rst+0x94>)
 801a94e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801a952:	491c      	ldr	r1, [pc, #112]	; (801a9c4 <tcp_rst+0xa0>)
 801a954:	481a      	ldr	r0, [pc, #104]	; (801a9c0 <tcp_rst+0x9c>)
 801a956:	f004 feb3 	bl	801f6c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a95a:	2300      	movs	r3, #0
 801a95c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801a95e:	f246 0308 	movw	r3, #24584	; 0x6008
 801a962:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801a964:	7dfb      	ldrb	r3, [r7, #23]
 801a966:	b29c      	uxth	r4, r3
 801a968:	68b8      	ldr	r0, [r7, #8]
 801a96a:	f7f8 fa9a 	bl	8012ea2 <lwip_htonl>
 801a96e:	4602      	mov	r2, r0
 801a970:	8abb      	ldrh	r3, [r7, #20]
 801a972:	9303      	str	r3, [sp, #12]
 801a974:	2314      	movs	r3, #20
 801a976:	9302      	str	r3, [sp, #8]
 801a978:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801a97a:	9301      	str	r3, [sp, #4]
 801a97c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a97e:	9300      	str	r3, [sp, #0]
 801a980:	4613      	mov	r3, r2
 801a982:	2200      	movs	r2, #0
 801a984:	4621      	mov	r1, r4
 801a986:	6878      	ldr	r0, [r7, #4]
 801a988:	f7ff fe92 	bl	801a6b0 <tcp_output_alloc_header_common>
 801a98c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801a98e:	693b      	ldr	r3, [r7, #16]
 801a990:	2b00      	cmp	r3, #0
 801a992:	d00c      	beq.n	801a9ae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a994:	7dfb      	ldrb	r3, [r7, #23]
 801a996:	2200      	movs	r2, #0
 801a998:	6939      	ldr	r1, [r7, #16]
 801a99a:	68f8      	ldr	r0, [r7, #12]
 801a99c:	f7ff ff38 	bl	801a810 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9a2:	683a      	ldr	r2, [r7, #0]
 801a9a4:	6939      	ldr	r1, [r7, #16]
 801a9a6:	68f8      	ldr	r0, [r7, #12]
 801a9a8:	f7ff ff72 	bl	801a890 <tcp_output_control_segment>
 801a9ac:	e000      	b.n	801a9b0 <tcp_rst+0x8c>
    return;
 801a9ae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a9b0:	371c      	adds	r7, #28
 801a9b2:	46bd      	mov	sp, r7
 801a9b4:	bd90      	pop	{r4, r7, pc}
 801a9b6:	bf00      	nop
 801a9b8:	0802523c 	.word	0x0802523c
 801a9bc:	080259c0 	.word	0x080259c0
 801a9c0:	08025290 	.word	0x08025290
 801a9c4:	080259dc 	.word	0x080259dc

0801a9c8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801a9c8:	b590      	push	{r4, r7, lr}
 801a9ca:	b087      	sub	sp, #28
 801a9cc:	af00      	add	r7, sp, #0
 801a9ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801a9d0:	2300      	movs	r3, #0
 801a9d2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801a9d4:	2300      	movs	r3, #0
 801a9d6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d106      	bne.n	801a9ec <tcp_send_empty_ack+0x24>
 801a9de:	4b28      	ldr	r3, [pc, #160]	; (801aa80 <tcp_send_empty_ack+0xb8>)
 801a9e0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801a9e4:	4927      	ldr	r1, [pc, #156]	; (801aa84 <tcp_send_empty_ack+0xbc>)
 801a9e6:	4828      	ldr	r0, [pc, #160]	; (801aa88 <tcp_send_empty_ack+0xc0>)
 801a9e8:	f004 fe6a 	bl	801f6c0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a9ec:	7dfb      	ldrb	r3, [r7, #23]
 801a9ee:	009b      	lsls	r3, r3, #2
 801a9f0:	b2db      	uxtb	r3, r3
 801a9f2:	f003 0304 	and.w	r3, r3, #4
 801a9f6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801a9f8:	7d7b      	ldrb	r3, [r7, #21]
 801a9fa:	b29c      	uxth	r4, r3
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aa00:	4618      	mov	r0, r3
 801aa02:	f7f8 fa4e 	bl	8012ea2 <lwip_htonl>
 801aa06:	4603      	mov	r3, r0
 801aa08:	2200      	movs	r2, #0
 801aa0a:	4621      	mov	r1, r4
 801aa0c:	6878      	ldr	r0, [r7, #4]
 801aa0e:	f7ff fec1 	bl	801a794 <tcp_output_alloc_header>
 801aa12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801aa14:	693b      	ldr	r3, [r7, #16]
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d109      	bne.n	801aa2e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	8b5b      	ldrh	r3, [r3, #26]
 801aa1e:	f043 0303 	orr.w	r3, r3, #3
 801aa22:	b29a      	uxth	r2, r3
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801aa28:	f06f 0301 	mvn.w	r3, #1
 801aa2c:	e023      	b.n	801aa76 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801aa2e:	7dbb      	ldrb	r3, [r7, #22]
 801aa30:	7dfa      	ldrb	r2, [r7, #23]
 801aa32:	6939      	ldr	r1, [r7, #16]
 801aa34:	6878      	ldr	r0, [r7, #4]
 801aa36:	f7ff feeb 	bl	801a810 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801aa3a:	687a      	ldr	r2, [r7, #4]
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	3304      	adds	r3, #4
 801aa40:	6939      	ldr	r1, [r7, #16]
 801aa42:	6878      	ldr	r0, [r7, #4]
 801aa44:	f7ff ff24 	bl	801a890 <tcp_output_control_segment>
 801aa48:	4603      	mov	r3, r0
 801aa4a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801aa4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d007      	beq.n	801aa64 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	8b5b      	ldrh	r3, [r3, #26]
 801aa58:	f043 0303 	orr.w	r3, r3, #3
 801aa5c:	b29a      	uxth	r2, r3
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	835a      	strh	r2, [r3, #26]
 801aa62:	e006      	b.n	801aa72 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	8b5b      	ldrh	r3, [r3, #26]
 801aa68:	f023 0303 	bic.w	r3, r3, #3
 801aa6c:	b29a      	uxth	r2, r3
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801aa72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801aa76:	4618      	mov	r0, r3
 801aa78:	371c      	adds	r7, #28
 801aa7a:	46bd      	mov	sp, r7
 801aa7c:	bd90      	pop	{r4, r7, pc}
 801aa7e:	bf00      	nop
 801aa80:	0802523c 	.word	0x0802523c
 801aa84:	080259f8 	.word	0x080259f8
 801aa88:	08025290 	.word	0x08025290

0801aa8c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801aa8c:	b590      	push	{r4, r7, lr}
 801aa8e:	b087      	sub	sp, #28
 801aa90:	af00      	add	r7, sp, #0
 801aa92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801aa94:	2300      	movs	r3, #0
 801aa96:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d106      	bne.n	801aaac <tcp_keepalive+0x20>
 801aa9e:	4b18      	ldr	r3, [pc, #96]	; (801ab00 <tcp_keepalive+0x74>)
 801aaa0:	f640 0224 	movw	r2, #2084	; 0x824
 801aaa4:	4917      	ldr	r1, [pc, #92]	; (801ab04 <tcp_keepalive+0x78>)
 801aaa6:	4818      	ldr	r0, [pc, #96]	; (801ab08 <tcp_keepalive+0x7c>)
 801aaa8:	f004 fe0a 	bl	801f6c0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801aaac:	7dfb      	ldrb	r3, [r7, #23]
 801aaae:	b29c      	uxth	r4, r3
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aab4:	3b01      	subs	r3, #1
 801aab6:	4618      	mov	r0, r3
 801aab8:	f7f8 f9f3 	bl	8012ea2 <lwip_htonl>
 801aabc:	4603      	mov	r3, r0
 801aabe:	2200      	movs	r2, #0
 801aac0:	4621      	mov	r1, r4
 801aac2:	6878      	ldr	r0, [r7, #4]
 801aac4:	f7ff fe66 	bl	801a794 <tcp_output_alloc_header>
 801aac8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801aaca:	693b      	ldr	r3, [r7, #16]
 801aacc:	2b00      	cmp	r3, #0
 801aace:	d102      	bne.n	801aad6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801aad0:	f04f 33ff 	mov.w	r3, #4294967295
 801aad4:	e010      	b.n	801aaf8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801aad6:	7dfb      	ldrb	r3, [r7, #23]
 801aad8:	2200      	movs	r2, #0
 801aada:	6939      	ldr	r1, [r7, #16]
 801aadc:	6878      	ldr	r0, [r7, #4]
 801aade:	f7ff fe97 	bl	801a810 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801aae2:	687a      	ldr	r2, [r7, #4]
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	3304      	adds	r3, #4
 801aae8:	6939      	ldr	r1, [r7, #16]
 801aaea:	6878      	ldr	r0, [r7, #4]
 801aaec:	f7ff fed0 	bl	801a890 <tcp_output_control_segment>
 801aaf0:	4603      	mov	r3, r0
 801aaf2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801aaf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801aaf8:	4618      	mov	r0, r3
 801aafa:	371c      	adds	r7, #28
 801aafc:	46bd      	mov	sp, r7
 801aafe:	bd90      	pop	{r4, r7, pc}
 801ab00:	0802523c 	.word	0x0802523c
 801ab04:	08025a18 	.word	0x08025a18
 801ab08:	08025290 	.word	0x08025290

0801ab0c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801ab0c:	b590      	push	{r4, r7, lr}
 801ab0e:	b08b      	sub	sp, #44	; 0x2c
 801ab10:	af00      	add	r7, sp, #0
 801ab12:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ab14:	2300      	movs	r3, #0
 801ab16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	d106      	bne.n	801ab2e <tcp_zero_window_probe+0x22>
 801ab20:	4b4c      	ldr	r3, [pc, #304]	; (801ac54 <tcp_zero_window_probe+0x148>)
 801ab22:	f640 024f 	movw	r2, #2127	; 0x84f
 801ab26:	494c      	ldr	r1, [pc, #304]	; (801ac58 <tcp_zero_window_probe+0x14c>)
 801ab28:	484c      	ldr	r0, [pc, #304]	; (801ac5c <tcp_zero_window_probe+0x150>)
 801ab2a:	f004 fdc9 	bl	801f6c0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab32:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801ab34:	6a3b      	ldr	r3, [r7, #32]
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d101      	bne.n	801ab3e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801ab3a:	2300      	movs	r3, #0
 801ab3c:	e086      	b.n	801ac4c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801ab44:	2bff      	cmp	r3, #255	; 0xff
 801ab46:	d007      	beq.n	801ab58 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801ab4e:	3301      	adds	r3, #1
 801ab50:	b2da      	uxtb	r2, r3
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801ab58:	6a3b      	ldr	r3, [r7, #32]
 801ab5a:	68db      	ldr	r3, [r3, #12]
 801ab5c:	899b      	ldrh	r3, [r3, #12]
 801ab5e:	b29b      	uxth	r3, r3
 801ab60:	4618      	mov	r0, r3
 801ab62:	f7f8 f989 	bl	8012e78 <lwip_htons>
 801ab66:	4603      	mov	r3, r0
 801ab68:	b2db      	uxtb	r3, r3
 801ab6a:	f003 0301 	and.w	r3, r3, #1
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d005      	beq.n	801ab7e <tcp_zero_window_probe+0x72>
 801ab72:	6a3b      	ldr	r3, [r7, #32]
 801ab74:	891b      	ldrh	r3, [r3, #8]
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d101      	bne.n	801ab7e <tcp_zero_window_probe+0x72>
 801ab7a:	2301      	movs	r3, #1
 801ab7c:	e000      	b.n	801ab80 <tcp_zero_window_probe+0x74>
 801ab7e:	2300      	movs	r3, #0
 801ab80:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801ab82:	7ffb      	ldrb	r3, [r7, #31]
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	bf0c      	ite	eq
 801ab88:	2301      	moveq	r3, #1
 801ab8a:	2300      	movne	r3, #0
 801ab8c:	b2db      	uxtb	r3, r3
 801ab8e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801ab90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ab94:	b299      	uxth	r1, r3
 801ab96:	6a3b      	ldr	r3, [r7, #32]
 801ab98:	68db      	ldr	r3, [r3, #12]
 801ab9a:	685b      	ldr	r3, [r3, #4]
 801ab9c:	8bba      	ldrh	r2, [r7, #28]
 801ab9e:	6878      	ldr	r0, [r7, #4]
 801aba0:	f7ff fdf8 	bl	801a794 <tcp_output_alloc_header>
 801aba4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801aba6:	69bb      	ldr	r3, [r7, #24]
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d102      	bne.n	801abb2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801abac:	f04f 33ff 	mov.w	r3, #4294967295
 801abb0:	e04c      	b.n	801ac4c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801abb2:	69bb      	ldr	r3, [r7, #24]
 801abb4:	685b      	ldr	r3, [r3, #4]
 801abb6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801abb8:	7ffb      	ldrb	r3, [r7, #31]
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d011      	beq.n	801abe2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801abbe:	697b      	ldr	r3, [r7, #20]
 801abc0:	899b      	ldrh	r3, [r3, #12]
 801abc2:	b29b      	uxth	r3, r3
 801abc4:	b21b      	sxth	r3, r3
 801abc6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801abca:	b21c      	sxth	r4, r3
 801abcc:	2011      	movs	r0, #17
 801abce:	f7f8 f953 	bl	8012e78 <lwip_htons>
 801abd2:	4603      	mov	r3, r0
 801abd4:	b21b      	sxth	r3, r3
 801abd6:	4323      	orrs	r3, r4
 801abd8:	b21b      	sxth	r3, r3
 801abda:	b29a      	uxth	r2, r3
 801abdc:	697b      	ldr	r3, [r7, #20]
 801abde:	819a      	strh	r2, [r3, #12]
 801abe0:	e010      	b.n	801ac04 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801abe2:	69bb      	ldr	r3, [r7, #24]
 801abe4:	685b      	ldr	r3, [r3, #4]
 801abe6:	3314      	adds	r3, #20
 801abe8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801abea:	6a3b      	ldr	r3, [r7, #32]
 801abec:	6858      	ldr	r0, [r3, #4]
 801abee:	6a3b      	ldr	r3, [r7, #32]
 801abf0:	685b      	ldr	r3, [r3, #4]
 801abf2:	891a      	ldrh	r2, [r3, #8]
 801abf4:	6a3b      	ldr	r3, [r7, #32]
 801abf6:	891b      	ldrh	r3, [r3, #8]
 801abf8:	1ad3      	subs	r3, r2, r3
 801abfa:	b29b      	uxth	r3, r3
 801abfc:	2201      	movs	r2, #1
 801abfe:	6939      	ldr	r1, [r7, #16]
 801ac00:	f7f9 fefc 	bl	80149fc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801ac04:	6a3b      	ldr	r3, [r7, #32]
 801ac06:	68db      	ldr	r3, [r3, #12]
 801ac08:	685b      	ldr	r3, [r3, #4]
 801ac0a:	4618      	mov	r0, r3
 801ac0c:	f7f8 f949 	bl	8012ea2 <lwip_htonl>
 801ac10:	4603      	mov	r3, r0
 801ac12:	3301      	adds	r3, #1
 801ac14:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ac1a:	68fb      	ldr	r3, [r7, #12]
 801ac1c:	1ad3      	subs	r3, r2, r3
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	da02      	bge.n	801ac28 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	68fa      	ldr	r2, [r7, #12]
 801ac26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ac28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ac2c:	2200      	movs	r2, #0
 801ac2e:	69b9      	ldr	r1, [r7, #24]
 801ac30:	6878      	ldr	r0, [r7, #4]
 801ac32:	f7ff fded 	bl	801a810 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ac36:	687a      	ldr	r2, [r7, #4]
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	3304      	adds	r3, #4
 801ac3c:	69b9      	ldr	r1, [r7, #24]
 801ac3e:	6878      	ldr	r0, [r7, #4]
 801ac40:	f7ff fe26 	bl	801a890 <tcp_output_control_segment>
 801ac44:	4603      	mov	r3, r0
 801ac46:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801ac48:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801ac4c:	4618      	mov	r0, r3
 801ac4e:	372c      	adds	r7, #44	; 0x2c
 801ac50:	46bd      	mov	sp, r7
 801ac52:	bd90      	pop	{r4, r7, pc}
 801ac54:	0802523c 	.word	0x0802523c
 801ac58:	08025a34 	.word	0x08025a34
 801ac5c:	08025290 	.word	0x08025290

0801ac60 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801ac60:	b580      	push	{r7, lr}
 801ac62:	b082      	sub	sp, #8
 801ac64:	af00      	add	r7, sp, #0
 801ac66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801ac68:	f7f9 ffb6 	bl	8014bd8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801ac6c:	4b0a      	ldr	r3, [pc, #40]	; (801ac98 <tcpip_tcp_timer+0x38>)
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	2b00      	cmp	r3, #0
 801ac72:	d103      	bne.n	801ac7c <tcpip_tcp_timer+0x1c>
 801ac74:	4b09      	ldr	r3, [pc, #36]	; (801ac9c <tcpip_tcp_timer+0x3c>)
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	d005      	beq.n	801ac88 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801ac7c:	2200      	movs	r2, #0
 801ac7e:	4908      	ldr	r1, [pc, #32]	; (801aca0 <tcpip_tcp_timer+0x40>)
 801ac80:	20fa      	movs	r0, #250	; 0xfa
 801ac82:	f000 f8f3 	bl	801ae6c <sys_timeout>
 801ac86:	e003      	b.n	801ac90 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801ac88:	4b06      	ldr	r3, [pc, #24]	; (801aca4 <tcpip_tcp_timer+0x44>)
 801ac8a:	2200      	movs	r2, #0
 801ac8c:	601a      	str	r2, [r3, #0]
  }
}
 801ac8e:	bf00      	nop
 801ac90:	bf00      	nop
 801ac92:	3708      	adds	r7, #8
 801ac94:	46bd      	mov	sp, r7
 801ac96:	bd80      	pop	{r7, pc}
 801ac98:	2000b8d4 	.word	0x2000b8d4
 801ac9c:	2000b8e4 	.word	0x2000b8e4
 801aca0:	0801ac61 	.word	0x0801ac61
 801aca4:	200047b0 	.word	0x200047b0

0801aca8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801aca8:	b580      	push	{r7, lr}
 801acaa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801acac:	4b0a      	ldr	r3, [pc, #40]	; (801acd8 <tcp_timer_needed+0x30>)
 801acae:	681b      	ldr	r3, [r3, #0]
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d10f      	bne.n	801acd4 <tcp_timer_needed+0x2c>
 801acb4:	4b09      	ldr	r3, [pc, #36]	; (801acdc <tcp_timer_needed+0x34>)
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	2b00      	cmp	r3, #0
 801acba:	d103      	bne.n	801acc4 <tcp_timer_needed+0x1c>
 801acbc:	4b08      	ldr	r3, [pc, #32]	; (801ace0 <tcp_timer_needed+0x38>)
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	d007      	beq.n	801acd4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801acc4:	4b04      	ldr	r3, [pc, #16]	; (801acd8 <tcp_timer_needed+0x30>)
 801acc6:	2201      	movs	r2, #1
 801acc8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801acca:	2200      	movs	r2, #0
 801accc:	4905      	ldr	r1, [pc, #20]	; (801ace4 <tcp_timer_needed+0x3c>)
 801acce:	20fa      	movs	r0, #250	; 0xfa
 801acd0:	f000 f8cc 	bl	801ae6c <sys_timeout>
  }
}
 801acd4:	bf00      	nop
 801acd6:	bd80      	pop	{r7, pc}
 801acd8:	200047b0 	.word	0x200047b0
 801acdc:	2000b8d4 	.word	0x2000b8d4
 801ace0:	2000b8e4 	.word	0x2000b8e4
 801ace4:	0801ac61 	.word	0x0801ac61

0801ace8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801ace8:	b580      	push	{r7, lr}
 801acea:	b086      	sub	sp, #24
 801acec:	af00      	add	r7, sp, #0
 801acee:	60f8      	str	r0, [r7, #12]
 801acf0:	60b9      	str	r1, [r7, #8]
 801acf2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801acf4:	200a      	movs	r0, #10
 801acf6:	f7f8 fdab 	bl	8013850 <memp_malloc>
 801acfa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801acfc:	693b      	ldr	r3, [r7, #16]
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	d109      	bne.n	801ad16 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801ad02:	693b      	ldr	r3, [r7, #16]
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d151      	bne.n	801adac <sys_timeout_abs+0xc4>
 801ad08:	4b2a      	ldr	r3, [pc, #168]	; (801adb4 <sys_timeout_abs+0xcc>)
 801ad0a:	22be      	movs	r2, #190	; 0xbe
 801ad0c:	492a      	ldr	r1, [pc, #168]	; (801adb8 <sys_timeout_abs+0xd0>)
 801ad0e:	482b      	ldr	r0, [pc, #172]	; (801adbc <sys_timeout_abs+0xd4>)
 801ad10:	f004 fcd6 	bl	801f6c0 <iprintf>
    return;
 801ad14:	e04a      	b.n	801adac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801ad16:	693b      	ldr	r3, [r7, #16]
 801ad18:	2200      	movs	r2, #0
 801ad1a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801ad1c:	693b      	ldr	r3, [r7, #16]
 801ad1e:	68ba      	ldr	r2, [r7, #8]
 801ad20:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801ad22:	693b      	ldr	r3, [r7, #16]
 801ad24:	687a      	ldr	r2, [r7, #4]
 801ad26:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801ad28:	693b      	ldr	r3, [r7, #16]
 801ad2a:	68fa      	ldr	r2, [r7, #12]
 801ad2c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801ad2e:	4b24      	ldr	r3, [pc, #144]	; (801adc0 <sys_timeout_abs+0xd8>)
 801ad30:	681b      	ldr	r3, [r3, #0]
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d103      	bne.n	801ad3e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801ad36:	4a22      	ldr	r2, [pc, #136]	; (801adc0 <sys_timeout_abs+0xd8>)
 801ad38:	693b      	ldr	r3, [r7, #16]
 801ad3a:	6013      	str	r3, [r2, #0]
    return;
 801ad3c:	e037      	b.n	801adae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801ad3e:	693b      	ldr	r3, [r7, #16]
 801ad40:	685a      	ldr	r2, [r3, #4]
 801ad42:	4b1f      	ldr	r3, [pc, #124]	; (801adc0 <sys_timeout_abs+0xd8>)
 801ad44:	681b      	ldr	r3, [r3, #0]
 801ad46:	685b      	ldr	r3, [r3, #4]
 801ad48:	1ad3      	subs	r3, r2, r3
 801ad4a:	0fdb      	lsrs	r3, r3, #31
 801ad4c:	f003 0301 	and.w	r3, r3, #1
 801ad50:	b2db      	uxtb	r3, r3
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	d007      	beq.n	801ad66 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801ad56:	4b1a      	ldr	r3, [pc, #104]	; (801adc0 <sys_timeout_abs+0xd8>)
 801ad58:	681a      	ldr	r2, [r3, #0]
 801ad5a:	693b      	ldr	r3, [r7, #16]
 801ad5c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801ad5e:	4a18      	ldr	r2, [pc, #96]	; (801adc0 <sys_timeout_abs+0xd8>)
 801ad60:	693b      	ldr	r3, [r7, #16]
 801ad62:	6013      	str	r3, [r2, #0]
 801ad64:	e023      	b.n	801adae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801ad66:	4b16      	ldr	r3, [pc, #88]	; (801adc0 <sys_timeout_abs+0xd8>)
 801ad68:	681b      	ldr	r3, [r3, #0]
 801ad6a:	617b      	str	r3, [r7, #20]
 801ad6c:	e01a      	b.n	801ada4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801ad6e:	697b      	ldr	r3, [r7, #20]
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d00b      	beq.n	801ad8e <sys_timeout_abs+0xa6>
 801ad76:	693b      	ldr	r3, [r7, #16]
 801ad78:	685a      	ldr	r2, [r3, #4]
 801ad7a:	697b      	ldr	r3, [r7, #20]
 801ad7c:	681b      	ldr	r3, [r3, #0]
 801ad7e:	685b      	ldr	r3, [r3, #4]
 801ad80:	1ad3      	subs	r3, r2, r3
 801ad82:	0fdb      	lsrs	r3, r3, #31
 801ad84:	f003 0301 	and.w	r3, r3, #1
 801ad88:	b2db      	uxtb	r3, r3
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d007      	beq.n	801ad9e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801ad8e:	697b      	ldr	r3, [r7, #20]
 801ad90:	681a      	ldr	r2, [r3, #0]
 801ad92:	693b      	ldr	r3, [r7, #16]
 801ad94:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801ad96:	697b      	ldr	r3, [r7, #20]
 801ad98:	693a      	ldr	r2, [r7, #16]
 801ad9a:	601a      	str	r2, [r3, #0]
        break;
 801ad9c:	e007      	b.n	801adae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801ad9e:	697b      	ldr	r3, [r7, #20]
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	617b      	str	r3, [r7, #20]
 801ada4:	697b      	ldr	r3, [r7, #20]
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d1e1      	bne.n	801ad6e <sys_timeout_abs+0x86>
 801adaa:	e000      	b.n	801adae <sys_timeout_abs+0xc6>
    return;
 801adac:	bf00      	nop
      }
    }
  }
}
 801adae:	3718      	adds	r7, #24
 801adb0:	46bd      	mov	sp, r7
 801adb2:	bd80      	pop	{r7, pc}
 801adb4:	08025a58 	.word	0x08025a58
 801adb8:	08025a8c 	.word	0x08025a8c
 801adbc:	08025acc 	.word	0x08025acc
 801adc0:	200047a8 	.word	0x200047a8

0801adc4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801adc4:	b580      	push	{r7, lr}
 801adc6:	b086      	sub	sp, #24
 801adc8:	af00      	add	r7, sp, #0
 801adca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801add0:	697b      	ldr	r3, [r7, #20]
 801add2:	685b      	ldr	r3, [r3, #4]
 801add4:	4798      	blx	r3

  now = sys_now();
 801add6:	f7f0 fc77 	bl	800b6c8 <sys_now>
 801adda:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801addc:	697b      	ldr	r3, [r7, #20]
 801adde:	681a      	ldr	r2, [r3, #0]
 801ade0:	4b0f      	ldr	r3, [pc, #60]	; (801ae20 <lwip_cyclic_timer+0x5c>)
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	4413      	add	r3, r2
 801ade6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801ade8:	68fa      	ldr	r2, [r7, #12]
 801adea:	693b      	ldr	r3, [r7, #16]
 801adec:	1ad3      	subs	r3, r2, r3
 801adee:	0fdb      	lsrs	r3, r3, #31
 801adf0:	f003 0301 	and.w	r3, r3, #1
 801adf4:	b2db      	uxtb	r3, r3
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	d009      	beq.n	801ae0e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801adfa:	697b      	ldr	r3, [r7, #20]
 801adfc:	681a      	ldr	r2, [r3, #0]
 801adfe:	693b      	ldr	r3, [r7, #16]
 801ae00:	4413      	add	r3, r2
 801ae02:	687a      	ldr	r2, [r7, #4]
 801ae04:	4907      	ldr	r1, [pc, #28]	; (801ae24 <lwip_cyclic_timer+0x60>)
 801ae06:	4618      	mov	r0, r3
 801ae08:	f7ff ff6e 	bl	801ace8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801ae0c:	e004      	b.n	801ae18 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801ae0e:	687a      	ldr	r2, [r7, #4]
 801ae10:	4904      	ldr	r1, [pc, #16]	; (801ae24 <lwip_cyclic_timer+0x60>)
 801ae12:	68f8      	ldr	r0, [r7, #12]
 801ae14:	f7ff ff68 	bl	801ace8 <sys_timeout_abs>
}
 801ae18:	bf00      	nop
 801ae1a:	3718      	adds	r7, #24
 801ae1c:	46bd      	mov	sp, r7
 801ae1e:	bd80      	pop	{r7, pc}
 801ae20:	200047ac 	.word	0x200047ac
 801ae24:	0801adc5 	.word	0x0801adc5

0801ae28 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801ae28:	b580      	push	{r7, lr}
 801ae2a:	b082      	sub	sp, #8
 801ae2c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ae2e:	2301      	movs	r3, #1
 801ae30:	607b      	str	r3, [r7, #4]
 801ae32:	e00e      	b.n	801ae52 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801ae34:	4a0b      	ldr	r2, [pc, #44]	; (801ae64 <sys_timeouts_init+0x3c>)
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	00db      	lsls	r3, r3, #3
 801ae40:	4a08      	ldr	r2, [pc, #32]	; (801ae64 <sys_timeouts_init+0x3c>)
 801ae42:	4413      	add	r3, r2
 801ae44:	461a      	mov	r2, r3
 801ae46:	4908      	ldr	r1, [pc, #32]	; (801ae68 <sys_timeouts_init+0x40>)
 801ae48:	f000 f810 	bl	801ae6c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	3301      	adds	r3, #1
 801ae50:	607b      	str	r3, [r7, #4]
 801ae52:	687b      	ldr	r3, [r7, #4]
 801ae54:	2b02      	cmp	r3, #2
 801ae56:	d9ed      	bls.n	801ae34 <sys_timeouts_init+0xc>
  }
}
 801ae58:	bf00      	nop
 801ae5a:	bf00      	nop
 801ae5c:	3708      	adds	r7, #8
 801ae5e:	46bd      	mov	sp, r7
 801ae60:	bd80      	pop	{r7, pc}
 801ae62:	bf00      	nop
 801ae64:	08027618 	.word	0x08027618
 801ae68:	0801adc5 	.word	0x0801adc5

0801ae6c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801ae6c:	b580      	push	{r7, lr}
 801ae6e:	b086      	sub	sp, #24
 801ae70:	af00      	add	r7, sp, #0
 801ae72:	60f8      	str	r0, [r7, #12]
 801ae74:	60b9      	str	r1, [r7, #8]
 801ae76:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801ae78:	68fb      	ldr	r3, [r7, #12]
 801ae7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ae7e:	d306      	bcc.n	801ae8e <sys_timeout+0x22>
 801ae80:	4b0a      	ldr	r3, [pc, #40]	; (801aeac <sys_timeout+0x40>)
 801ae82:	f240 1229 	movw	r2, #297	; 0x129
 801ae86:	490a      	ldr	r1, [pc, #40]	; (801aeb0 <sys_timeout+0x44>)
 801ae88:	480a      	ldr	r0, [pc, #40]	; (801aeb4 <sys_timeout+0x48>)
 801ae8a:	f004 fc19 	bl	801f6c0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801ae8e:	f7f0 fc1b 	bl	800b6c8 <sys_now>
 801ae92:	4602      	mov	r2, r0
 801ae94:	68fb      	ldr	r3, [r7, #12]
 801ae96:	4413      	add	r3, r2
 801ae98:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801ae9a:	687a      	ldr	r2, [r7, #4]
 801ae9c:	68b9      	ldr	r1, [r7, #8]
 801ae9e:	6978      	ldr	r0, [r7, #20]
 801aea0:	f7ff ff22 	bl	801ace8 <sys_timeout_abs>
#endif
}
 801aea4:	bf00      	nop
 801aea6:	3718      	adds	r7, #24
 801aea8:	46bd      	mov	sp, r7
 801aeaa:	bd80      	pop	{r7, pc}
 801aeac:	08025a58 	.word	0x08025a58
 801aeb0:	08025af4 	.word	0x08025af4
 801aeb4:	08025acc 	.word	0x08025acc

0801aeb8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801aeb8:	b580      	push	{r7, lr}
 801aeba:	b084      	sub	sp, #16
 801aebc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801aebe:	f7f0 fc03 	bl	800b6c8 <sys_now>
 801aec2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801aec4:	4b17      	ldr	r3, [pc, #92]	; (801af24 <sys_check_timeouts+0x6c>)
 801aec6:	681b      	ldr	r3, [r3, #0]
 801aec8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801aeca:	68bb      	ldr	r3, [r7, #8]
 801aecc:	2b00      	cmp	r3, #0
 801aece:	d022      	beq.n	801af16 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801aed0:	68bb      	ldr	r3, [r7, #8]
 801aed2:	685b      	ldr	r3, [r3, #4]
 801aed4:	68fa      	ldr	r2, [r7, #12]
 801aed6:	1ad3      	subs	r3, r2, r3
 801aed8:	0fdb      	lsrs	r3, r3, #31
 801aeda:	f003 0301 	and.w	r3, r3, #1
 801aede:	b2db      	uxtb	r3, r3
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	d11a      	bne.n	801af1a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801aee4:	68bb      	ldr	r3, [r7, #8]
 801aee6:	681b      	ldr	r3, [r3, #0]
 801aee8:	4a0e      	ldr	r2, [pc, #56]	; (801af24 <sys_check_timeouts+0x6c>)
 801aeea:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801aeec:	68bb      	ldr	r3, [r7, #8]
 801aeee:	689b      	ldr	r3, [r3, #8]
 801aef0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801aef2:	68bb      	ldr	r3, [r7, #8]
 801aef4:	68db      	ldr	r3, [r3, #12]
 801aef6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801aef8:	68bb      	ldr	r3, [r7, #8]
 801aefa:	685b      	ldr	r3, [r3, #4]
 801aefc:	4a0a      	ldr	r2, [pc, #40]	; (801af28 <sys_check_timeouts+0x70>)
 801aefe:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801af00:	68b9      	ldr	r1, [r7, #8]
 801af02:	200a      	movs	r0, #10
 801af04:	f7f8 fcf6 	bl	80138f4 <memp_free>
    if (handler != NULL) {
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	d0da      	beq.n	801aec4 <sys_check_timeouts+0xc>
      handler(arg);
 801af0e:	687b      	ldr	r3, [r7, #4]
 801af10:	6838      	ldr	r0, [r7, #0]
 801af12:	4798      	blx	r3
  do {
 801af14:	e7d6      	b.n	801aec4 <sys_check_timeouts+0xc>
      return;
 801af16:	bf00      	nop
 801af18:	e000      	b.n	801af1c <sys_check_timeouts+0x64>
      return;
 801af1a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801af1c:	3710      	adds	r7, #16
 801af1e:	46bd      	mov	sp, r7
 801af20:	bd80      	pop	{r7, pc}
 801af22:	bf00      	nop
 801af24:	200047a8 	.word	0x200047a8
 801af28:	200047ac 	.word	0x200047ac

0801af2c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801af2c:	b580      	push	{r7, lr}
 801af2e:	b082      	sub	sp, #8
 801af30:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801af32:	4b16      	ldr	r3, [pc, #88]	; (801af8c <sys_timeouts_sleeptime+0x60>)
 801af34:	681b      	ldr	r3, [r3, #0]
 801af36:	2b00      	cmp	r3, #0
 801af38:	d102      	bne.n	801af40 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801af3a:	f04f 33ff 	mov.w	r3, #4294967295
 801af3e:	e020      	b.n	801af82 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801af40:	f7f0 fbc2 	bl	800b6c8 <sys_now>
 801af44:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801af46:	4b11      	ldr	r3, [pc, #68]	; (801af8c <sys_timeouts_sleeptime+0x60>)
 801af48:	681b      	ldr	r3, [r3, #0]
 801af4a:	685a      	ldr	r2, [r3, #4]
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	1ad3      	subs	r3, r2, r3
 801af50:	0fdb      	lsrs	r3, r3, #31
 801af52:	f003 0301 	and.w	r3, r3, #1
 801af56:	b2db      	uxtb	r3, r3
 801af58:	2b00      	cmp	r3, #0
 801af5a:	d001      	beq.n	801af60 <sys_timeouts_sleeptime+0x34>
    return 0;
 801af5c:	2300      	movs	r3, #0
 801af5e:	e010      	b.n	801af82 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801af60:	4b0a      	ldr	r3, [pc, #40]	; (801af8c <sys_timeouts_sleeptime+0x60>)
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	685a      	ldr	r2, [r3, #4]
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	1ad3      	subs	r3, r2, r3
 801af6a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801af6c:	683b      	ldr	r3, [r7, #0]
 801af6e:	2b00      	cmp	r3, #0
 801af70:	da06      	bge.n	801af80 <sys_timeouts_sleeptime+0x54>
 801af72:	4b07      	ldr	r3, [pc, #28]	; (801af90 <sys_timeouts_sleeptime+0x64>)
 801af74:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801af78:	4906      	ldr	r1, [pc, #24]	; (801af94 <sys_timeouts_sleeptime+0x68>)
 801af7a:	4807      	ldr	r0, [pc, #28]	; (801af98 <sys_timeouts_sleeptime+0x6c>)
 801af7c:	f004 fba0 	bl	801f6c0 <iprintf>
    return ret;
 801af80:	683b      	ldr	r3, [r7, #0]
  }
}
 801af82:	4618      	mov	r0, r3
 801af84:	3708      	adds	r7, #8
 801af86:	46bd      	mov	sp, r7
 801af88:	bd80      	pop	{r7, pc}
 801af8a:	bf00      	nop
 801af8c:	200047a8 	.word	0x200047a8
 801af90:	08025a58 	.word	0x08025a58
 801af94:	08025b2c 	.word	0x08025b2c
 801af98:	08025acc 	.word	0x08025acc

0801af9c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801af9c:	b580      	push	{r7, lr}
 801af9e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801afa0:	f004 fba6 	bl	801f6f0 <rand>
 801afa4:	4603      	mov	r3, r0
 801afa6:	b29b      	uxth	r3, r3
 801afa8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801afac:	b29b      	uxth	r3, r3
 801afae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801afb2:	b29a      	uxth	r2, r3
 801afb4:	4b01      	ldr	r3, [pc, #4]	; (801afbc <udp_init+0x20>)
 801afb6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801afb8:	bf00      	nop
 801afba:	bd80      	pop	{r7, pc}
 801afbc:	20000144 	.word	0x20000144

0801afc0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801afc0:	b480      	push	{r7}
 801afc2:	b083      	sub	sp, #12
 801afc4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801afc6:	2300      	movs	r3, #0
 801afc8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801afca:	4b17      	ldr	r3, [pc, #92]	; (801b028 <udp_new_port+0x68>)
 801afcc:	881b      	ldrh	r3, [r3, #0]
 801afce:	1c5a      	adds	r2, r3, #1
 801afd0:	b291      	uxth	r1, r2
 801afd2:	4a15      	ldr	r2, [pc, #84]	; (801b028 <udp_new_port+0x68>)
 801afd4:	8011      	strh	r1, [r2, #0]
 801afd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801afda:	4293      	cmp	r3, r2
 801afdc:	d103      	bne.n	801afe6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801afde:	4b12      	ldr	r3, [pc, #72]	; (801b028 <udp_new_port+0x68>)
 801afe0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801afe4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801afe6:	4b11      	ldr	r3, [pc, #68]	; (801b02c <udp_new_port+0x6c>)
 801afe8:	681b      	ldr	r3, [r3, #0]
 801afea:	603b      	str	r3, [r7, #0]
 801afec:	e011      	b.n	801b012 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801afee:	683b      	ldr	r3, [r7, #0]
 801aff0:	8a5a      	ldrh	r2, [r3, #18]
 801aff2:	4b0d      	ldr	r3, [pc, #52]	; (801b028 <udp_new_port+0x68>)
 801aff4:	881b      	ldrh	r3, [r3, #0]
 801aff6:	429a      	cmp	r2, r3
 801aff8:	d108      	bne.n	801b00c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801affa:	88fb      	ldrh	r3, [r7, #6]
 801affc:	3301      	adds	r3, #1
 801affe:	80fb      	strh	r3, [r7, #6]
 801b000:	88fb      	ldrh	r3, [r7, #6]
 801b002:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b006:	d3e0      	bcc.n	801afca <udp_new_port+0xa>
        return 0;
 801b008:	2300      	movs	r3, #0
 801b00a:	e007      	b.n	801b01c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b00c:	683b      	ldr	r3, [r7, #0]
 801b00e:	68db      	ldr	r3, [r3, #12]
 801b010:	603b      	str	r3, [r7, #0]
 801b012:	683b      	ldr	r3, [r7, #0]
 801b014:	2b00      	cmp	r3, #0
 801b016:	d1ea      	bne.n	801afee <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801b018:	4b03      	ldr	r3, [pc, #12]	; (801b028 <udp_new_port+0x68>)
 801b01a:	881b      	ldrh	r3, [r3, #0]
}
 801b01c:	4618      	mov	r0, r3
 801b01e:	370c      	adds	r7, #12
 801b020:	46bd      	mov	sp, r7
 801b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b026:	4770      	bx	lr
 801b028:	20000144 	.word	0x20000144
 801b02c:	2000b8ec 	.word	0x2000b8ec

0801b030 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801b030:	b580      	push	{r7, lr}
 801b032:	b084      	sub	sp, #16
 801b034:	af00      	add	r7, sp, #0
 801b036:	60f8      	str	r0, [r7, #12]
 801b038:	60b9      	str	r1, [r7, #8]
 801b03a:	4613      	mov	r3, r2
 801b03c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801b03e:	68fb      	ldr	r3, [r7, #12]
 801b040:	2b00      	cmp	r3, #0
 801b042:	d105      	bne.n	801b050 <udp_input_local_match+0x20>
 801b044:	4b27      	ldr	r3, [pc, #156]	; (801b0e4 <udp_input_local_match+0xb4>)
 801b046:	2287      	movs	r2, #135	; 0x87
 801b048:	4927      	ldr	r1, [pc, #156]	; (801b0e8 <udp_input_local_match+0xb8>)
 801b04a:	4828      	ldr	r0, [pc, #160]	; (801b0ec <udp_input_local_match+0xbc>)
 801b04c:	f004 fb38 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801b050:	68bb      	ldr	r3, [r7, #8]
 801b052:	2b00      	cmp	r3, #0
 801b054:	d105      	bne.n	801b062 <udp_input_local_match+0x32>
 801b056:	4b23      	ldr	r3, [pc, #140]	; (801b0e4 <udp_input_local_match+0xb4>)
 801b058:	2288      	movs	r2, #136	; 0x88
 801b05a:	4925      	ldr	r1, [pc, #148]	; (801b0f0 <udp_input_local_match+0xc0>)
 801b05c:	4823      	ldr	r0, [pc, #140]	; (801b0ec <udp_input_local_match+0xbc>)
 801b05e:	f004 fb2f 	bl	801f6c0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b062:	68fb      	ldr	r3, [r7, #12]
 801b064:	7a1b      	ldrb	r3, [r3, #8]
 801b066:	2b00      	cmp	r3, #0
 801b068:	d00b      	beq.n	801b082 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b06a:	68fb      	ldr	r3, [r7, #12]
 801b06c:	7a1a      	ldrb	r2, [r3, #8]
 801b06e:	4b21      	ldr	r3, [pc, #132]	; (801b0f4 <udp_input_local_match+0xc4>)
 801b070:	685b      	ldr	r3, [r3, #4]
 801b072:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b076:	3301      	adds	r3, #1
 801b078:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b07a:	429a      	cmp	r2, r3
 801b07c:	d001      	beq.n	801b082 <udp_input_local_match+0x52>
    return 0;
 801b07e:	2300      	movs	r3, #0
 801b080:	e02b      	b.n	801b0da <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801b082:	79fb      	ldrb	r3, [r7, #7]
 801b084:	2b00      	cmp	r3, #0
 801b086:	d018      	beq.n	801b0ba <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b088:	68fb      	ldr	r3, [r7, #12]
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d013      	beq.n	801b0b6 <udp_input_local_match+0x86>
 801b08e:	68fb      	ldr	r3, [r7, #12]
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	2b00      	cmp	r3, #0
 801b094:	d00f      	beq.n	801b0b6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b096:	4b17      	ldr	r3, [pc, #92]	; (801b0f4 <udp_input_local_match+0xc4>)
 801b098:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b09e:	d00a      	beq.n	801b0b6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801b0a0:	68fb      	ldr	r3, [r7, #12]
 801b0a2:	681a      	ldr	r2, [r3, #0]
 801b0a4:	4b13      	ldr	r3, [pc, #76]	; (801b0f4 <udp_input_local_match+0xc4>)
 801b0a6:	695b      	ldr	r3, [r3, #20]
 801b0a8:	405a      	eors	r2, r3
 801b0aa:	68bb      	ldr	r3, [r7, #8]
 801b0ac:	3308      	adds	r3, #8
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	d110      	bne.n	801b0d8 <udp_input_local_match+0xa8>
          return 1;
 801b0b6:	2301      	movs	r3, #1
 801b0b8:	e00f      	b.n	801b0da <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b0ba:	68fb      	ldr	r3, [r7, #12]
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	d009      	beq.n	801b0d4 <udp_input_local_match+0xa4>
 801b0c0:	68fb      	ldr	r3, [r7, #12]
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d005      	beq.n	801b0d4 <udp_input_local_match+0xa4>
 801b0c8:	68fb      	ldr	r3, [r7, #12]
 801b0ca:	681a      	ldr	r2, [r3, #0]
 801b0cc:	4b09      	ldr	r3, [pc, #36]	; (801b0f4 <udp_input_local_match+0xc4>)
 801b0ce:	695b      	ldr	r3, [r3, #20]
 801b0d0:	429a      	cmp	r2, r3
 801b0d2:	d101      	bne.n	801b0d8 <udp_input_local_match+0xa8>
        return 1;
 801b0d4:	2301      	movs	r3, #1
 801b0d6:	e000      	b.n	801b0da <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801b0d8:	2300      	movs	r3, #0
}
 801b0da:	4618      	mov	r0, r3
 801b0dc:	3710      	adds	r7, #16
 801b0de:	46bd      	mov	sp, r7
 801b0e0:	bd80      	pop	{r7, pc}
 801b0e2:	bf00      	nop
 801b0e4:	08025b40 	.word	0x08025b40
 801b0e8:	08025b70 	.word	0x08025b70
 801b0ec:	08025b94 	.word	0x08025b94
 801b0f0:	08025bbc 	.word	0x08025bbc
 801b0f4:	200081c0 	.word	0x200081c0

0801b0f8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801b0f8:	b590      	push	{r4, r7, lr}
 801b0fa:	b08d      	sub	sp, #52	; 0x34
 801b0fc:	af02      	add	r7, sp, #8
 801b0fe:	6078      	str	r0, [r7, #4]
 801b100:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801b102:	2300      	movs	r3, #0
 801b104:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	2b00      	cmp	r3, #0
 801b10a:	d105      	bne.n	801b118 <udp_input+0x20>
 801b10c:	4b7c      	ldr	r3, [pc, #496]	; (801b300 <udp_input+0x208>)
 801b10e:	22cf      	movs	r2, #207	; 0xcf
 801b110:	497c      	ldr	r1, [pc, #496]	; (801b304 <udp_input+0x20c>)
 801b112:	487d      	ldr	r0, [pc, #500]	; (801b308 <udp_input+0x210>)
 801b114:	f004 fad4 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801b118:	683b      	ldr	r3, [r7, #0]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d105      	bne.n	801b12a <udp_input+0x32>
 801b11e:	4b78      	ldr	r3, [pc, #480]	; (801b300 <udp_input+0x208>)
 801b120:	22d0      	movs	r2, #208	; 0xd0
 801b122:	497a      	ldr	r1, [pc, #488]	; (801b30c <udp_input+0x214>)
 801b124:	4878      	ldr	r0, [pc, #480]	; (801b308 <udp_input+0x210>)
 801b126:	f004 facb 	bl	801f6c0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	895b      	ldrh	r3, [r3, #10]
 801b12e:	2b07      	cmp	r3, #7
 801b130:	d803      	bhi.n	801b13a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801b132:	6878      	ldr	r0, [r7, #4]
 801b134:	f7f9 fa5c 	bl	80145f0 <pbuf_free>
    goto end;
 801b138:	e0de      	b.n	801b2f8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	685b      	ldr	r3, [r3, #4]
 801b13e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b140:	4b73      	ldr	r3, [pc, #460]	; (801b310 <udp_input+0x218>)
 801b142:	695b      	ldr	r3, [r3, #20]
 801b144:	4a72      	ldr	r2, [pc, #456]	; (801b310 <udp_input+0x218>)
 801b146:	6812      	ldr	r2, [r2, #0]
 801b148:	4611      	mov	r1, r2
 801b14a:	4618      	mov	r0, r3
 801b14c:	f001 ff80 	bl	801d050 <ip4_addr_isbroadcast_u32>
 801b150:	4603      	mov	r3, r0
 801b152:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801b154:	697b      	ldr	r3, [r7, #20]
 801b156:	881b      	ldrh	r3, [r3, #0]
 801b158:	b29b      	uxth	r3, r3
 801b15a:	4618      	mov	r0, r3
 801b15c:	f7f7 fe8c 	bl	8012e78 <lwip_htons>
 801b160:	4603      	mov	r3, r0
 801b162:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801b164:	697b      	ldr	r3, [r7, #20]
 801b166:	885b      	ldrh	r3, [r3, #2]
 801b168:	b29b      	uxth	r3, r3
 801b16a:	4618      	mov	r0, r3
 801b16c:	f7f7 fe84 	bl	8012e78 <lwip_htons>
 801b170:	4603      	mov	r3, r0
 801b172:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801b174:	2300      	movs	r3, #0
 801b176:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801b178:	2300      	movs	r3, #0
 801b17a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801b17c:	2300      	movs	r3, #0
 801b17e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b180:	4b64      	ldr	r3, [pc, #400]	; (801b314 <udp_input+0x21c>)
 801b182:	681b      	ldr	r3, [r3, #0]
 801b184:	627b      	str	r3, [r7, #36]	; 0x24
 801b186:	e054      	b.n	801b232 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801b188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b18a:	8a5b      	ldrh	r3, [r3, #18]
 801b18c:	89fa      	ldrh	r2, [r7, #14]
 801b18e:	429a      	cmp	r2, r3
 801b190:	d14a      	bne.n	801b228 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801b192:	7cfb      	ldrb	r3, [r7, #19]
 801b194:	461a      	mov	r2, r3
 801b196:	6839      	ldr	r1, [r7, #0]
 801b198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b19a:	f7ff ff49 	bl	801b030 <udp_input_local_match>
 801b19e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d041      	beq.n	801b228 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801b1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1a6:	7c1b      	ldrb	r3, [r3, #16]
 801b1a8:	f003 0304 	and.w	r3, r3, #4
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	d11d      	bne.n	801b1ec <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801b1b0:	69fb      	ldr	r3, [r7, #28]
 801b1b2:	2b00      	cmp	r3, #0
 801b1b4:	d102      	bne.n	801b1bc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801b1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1b8:	61fb      	str	r3, [r7, #28]
 801b1ba:	e017      	b.n	801b1ec <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801b1bc:	7cfb      	ldrb	r3, [r7, #19]
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d014      	beq.n	801b1ec <udp_input+0xf4>
 801b1c2:	4b53      	ldr	r3, [pc, #332]	; (801b310 <udp_input+0x218>)
 801b1c4:	695b      	ldr	r3, [r3, #20]
 801b1c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b1ca:	d10f      	bne.n	801b1ec <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b1cc:	69fb      	ldr	r3, [r7, #28]
 801b1ce:	681a      	ldr	r2, [r3, #0]
 801b1d0:	683b      	ldr	r3, [r7, #0]
 801b1d2:	3304      	adds	r3, #4
 801b1d4:	681b      	ldr	r3, [r3, #0]
 801b1d6:	429a      	cmp	r2, r3
 801b1d8:	d008      	beq.n	801b1ec <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801b1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1dc:	681a      	ldr	r2, [r3, #0]
 801b1de:	683b      	ldr	r3, [r7, #0]
 801b1e0:	3304      	adds	r3, #4
 801b1e2:	681b      	ldr	r3, [r3, #0]
 801b1e4:	429a      	cmp	r2, r3
 801b1e6:	d101      	bne.n	801b1ec <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801b1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1ea:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801b1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1ee:	8a9b      	ldrh	r3, [r3, #20]
 801b1f0:	8a3a      	ldrh	r2, [r7, #16]
 801b1f2:	429a      	cmp	r2, r3
 801b1f4:	d118      	bne.n	801b228 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1f8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d005      	beq.n	801b20a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801b1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b200:	685a      	ldr	r2, [r3, #4]
 801b202:	4b43      	ldr	r3, [pc, #268]	; (801b310 <udp_input+0x218>)
 801b204:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b206:	429a      	cmp	r2, r3
 801b208:	d10e      	bne.n	801b228 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801b20a:	6a3b      	ldr	r3, [r7, #32]
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	d014      	beq.n	801b23a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801b210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b212:	68da      	ldr	r2, [r3, #12]
 801b214:	6a3b      	ldr	r3, [r7, #32]
 801b216:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801b218:	4b3e      	ldr	r3, [pc, #248]	; (801b314 <udp_input+0x21c>)
 801b21a:	681a      	ldr	r2, [r3, #0]
 801b21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b21e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801b220:	4a3c      	ldr	r2, [pc, #240]	; (801b314 <udp_input+0x21c>)
 801b222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b224:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801b226:	e008      	b.n	801b23a <udp_input+0x142>
      }
    }

    prev = pcb;
 801b228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b22a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b22e:	68db      	ldr	r3, [r3, #12]
 801b230:	627b      	str	r3, [r7, #36]	; 0x24
 801b232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b234:	2b00      	cmp	r3, #0
 801b236:	d1a7      	bne.n	801b188 <udp_input+0x90>
 801b238:	e000      	b.n	801b23c <udp_input+0x144>
        break;
 801b23a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801b23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b23e:	2b00      	cmp	r3, #0
 801b240:	d101      	bne.n	801b246 <udp_input+0x14e>
    pcb = uncon_pcb;
 801b242:	69fb      	ldr	r3, [r7, #28]
 801b244:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801b246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b248:	2b00      	cmp	r3, #0
 801b24a:	d002      	beq.n	801b252 <udp_input+0x15a>
    for_us = 1;
 801b24c:	2301      	movs	r3, #1
 801b24e:	76fb      	strb	r3, [r7, #27]
 801b250:	e00a      	b.n	801b268 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801b252:	683b      	ldr	r3, [r7, #0]
 801b254:	3304      	adds	r3, #4
 801b256:	681a      	ldr	r2, [r3, #0]
 801b258:	4b2d      	ldr	r3, [pc, #180]	; (801b310 <udp_input+0x218>)
 801b25a:	695b      	ldr	r3, [r3, #20]
 801b25c:	429a      	cmp	r2, r3
 801b25e:	bf0c      	ite	eq
 801b260:	2301      	moveq	r3, #1
 801b262:	2300      	movne	r3, #0
 801b264:	b2db      	uxtb	r3, r3
 801b266:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801b268:	7efb      	ldrb	r3, [r7, #27]
 801b26a:	2b00      	cmp	r3, #0
 801b26c:	d041      	beq.n	801b2f2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b26e:	2108      	movs	r1, #8
 801b270:	6878      	ldr	r0, [r7, #4]
 801b272:	f7f9 f937 	bl	80144e4 <pbuf_remove_header>
 801b276:	4603      	mov	r3, r0
 801b278:	2b00      	cmp	r3, #0
 801b27a:	d00a      	beq.n	801b292 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801b27c:	4b20      	ldr	r3, [pc, #128]	; (801b300 <udp_input+0x208>)
 801b27e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801b282:	4925      	ldr	r1, [pc, #148]	; (801b318 <udp_input+0x220>)
 801b284:	4820      	ldr	r0, [pc, #128]	; (801b308 <udp_input+0x210>)
 801b286:	f004 fa1b 	bl	801f6c0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801b28a:	6878      	ldr	r0, [r7, #4]
 801b28c:	f7f9 f9b0 	bl	80145f0 <pbuf_free>
      goto end;
 801b290:	e032      	b.n	801b2f8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801b292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b294:	2b00      	cmp	r3, #0
 801b296:	d012      	beq.n	801b2be <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801b298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b29a:	699b      	ldr	r3, [r3, #24]
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	d00a      	beq.n	801b2b6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801b2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2a2:	699c      	ldr	r4, [r3, #24]
 801b2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2a6:	69d8      	ldr	r0, [r3, #28]
 801b2a8:	8a3b      	ldrh	r3, [r7, #16]
 801b2aa:	9300      	str	r3, [sp, #0]
 801b2ac:	4b1b      	ldr	r3, [pc, #108]	; (801b31c <udp_input+0x224>)
 801b2ae:	687a      	ldr	r2, [r7, #4]
 801b2b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b2b2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801b2b4:	e021      	b.n	801b2fa <udp_input+0x202>
        pbuf_free(p);
 801b2b6:	6878      	ldr	r0, [r7, #4]
 801b2b8:	f7f9 f99a 	bl	80145f0 <pbuf_free>
        goto end;
 801b2bc:	e01c      	b.n	801b2f8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801b2be:	7cfb      	ldrb	r3, [r7, #19]
 801b2c0:	2b00      	cmp	r3, #0
 801b2c2:	d112      	bne.n	801b2ea <udp_input+0x1f2>
 801b2c4:	4b12      	ldr	r3, [pc, #72]	; (801b310 <udp_input+0x218>)
 801b2c6:	695b      	ldr	r3, [r3, #20]
 801b2c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b2cc:	2be0      	cmp	r3, #224	; 0xe0
 801b2ce:	d00c      	beq.n	801b2ea <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801b2d0:	4b0f      	ldr	r3, [pc, #60]	; (801b310 <udp_input+0x218>)
 801b2d2:	899b      	ldrh	r3, [r3, #12]
 801b2d4:	3308      	adds	r3, #8
 801b2d6:	b29b      	uxth	r3, r3
 801b2d8:	b21b      	sxth	r3, r3
 801b2da:	4619      	mov	r1, r3
 801b2dc:	6878      	ldr	r0, [r7, #4]
 801b2de:	f7f9 f974 	bl	80145ca <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801b2e2:	2103      	movs	r1, #3
 801b2e4:	6878      	ldr	r0, [r7, #4]
 801b2e6:	f001 fb93 	bl	801ca10 <icmp_dest_unreach>
      pbuf_free(p);
 801b2ea:	6878      	ldr	r0, [r7, #4]
 801b2ec:	f7f9 f980 	bl	80145f0 <pbuf_free>
  return;
 801b2f0:	e003      	b.n	801b2fa <udp_input+0x202>
    pbuf_free(p);
 801b2f2:	6878      	ldr	r0, [r7, #4]
 801b2f4:	f7f9 f97c 	bl	80145f0 <pbuf_free>
  return;
 801b2f8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801b2fa:	372c      	adds	r7, #44	; 0x2c
 801b2fc:	46bd      	mov	sp, r7
 801b2fe:	bd90      	pop	{r4, r7, pc}
 801b300:	08025b40 	.word	0x08025b40
 801b304:	08025be4 	.word	0x08025be4
 801b308:	08025b94 	.word	0x08025b94
 801b30c:	08025bfc 	.word	0x08025bfc
 801b310:	200081c0 	.word	0x200081c0
 801b314:	2000b8ec 	.word	0x2000b8ec
 801b318:	08025c18 	.word	0x08025c18
 801b31c:	200081d0 	.word	0x200081d0

0801b320 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801b320:	b580      	push	{r7, lr}
 801b322:	b082      	sub	sp, #8
 801b324:	af00      	add	r7, sp, #0
 801b326:	6078      	str	r0, [r7, #4]
 801b328:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	d109      	bne.n	801b344 <udp_send+0x24>
 801b330:	4b11      	ldr	r3, [pc, #68]	; (801b378 <udp_send+0x58>)
 801b332:	f240 12d5 	movw	r2, #469	; 0x1d5
 801b336:	4911      	ldr	r1, [pc, #68]	; (801b37c <udp_send+0x5c>)
 801b338:	4811      	ldr	r0, [pc, #68]	; (801b380 <udp_send+0x60>)
 801b33a:	f004 f9c1 	bl	801f6c0 <iprintf>
 801b33e:	f06f 030f 	mvn.w	r3, #15
 801b342:	e015      	b.n	801b370 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801b344:	683b      	ldr	r3, [r7, #0]
 801b346:	2b00      	cmp	r3, #0
 801b348:	d109      	bne.n	801b35e <udp_send+0x3e>
 801b34a:	4b0b      	ldr	r3, [pc, #44]	; (801b378 <udp_send+0x58>)
 801b34c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801b350:	490c      	ldr	r1, [pc, #48]	; (801b384 <udp_send+0x64>)
 801b352:	480b      	ldr	r0, [pc, #44]	; (801b380 <udp_send+0x60>)
 801b354:	f004 f9b4 	bl	801f6c0 <iprintf>
 801b358:	f06f 030f 	mvn.w	r3, #15
 801b35c:	e008      	b.n	801b370 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	1d1a      	adds	r2, r3, #4
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	8a9b      	ldrh	r3, [r3, #20]
 801b366:	6839      	ldr	r1, [r7, #0]
 801b368:	6878      	ldr	r0, [r7, #4]
 801b36a:	f000 f80d 	bl	801b388 <udp_sendto>
 801b36e:	4603      	mov	r3, r0
}
 801b370:	4618      	mov	r0, r3
 801b372:	3708      	adds	r7, #8
 801b374:	46bd      	mov	sp, r7
 801b376:	bd80      	pop	{r7, pc}
 801b378:	08025b40 	.word	0x08025b40
 801b37c:	08025c34 	.word	0x08025c34
 801b380:	08025b94 	.word	0x08025b94
 801b384:	08025c4c 	.word	0x08025c4c

0801b388 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801b388:	b580      	push	{r7, lr}
 801b38a:	b088      	sub	sp, #32
 801b38c:	af02      	add	r7, sp, #8
 801b38e:	60f8      	str	r0, [r7, #12]
 801b390:	60b9      	str	r1, [r7, #8]
 801b392:	607a      	str	r2, [r7, #4]
 801b394:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801b396:	68fb      	ldr	r3, [r7, #12]
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d109      	bne.n	801b3b0 <udp_sendto+0x28>
 801b39c:	4b23      	ldr	r3, [pc, #140]	; (801b42c <udp_sendto+0xa4>)
 801b39e:	f44f 7206 	mov.w	r2, #536	; 0x218
 801b3a2:	4923      	ldr	r1, [pc, #140]	; (801b430 <udp_sendto+0xa8>)
 801b3a4:	4823      	ldr	r0, [pc, #140]	; (801b434 <udp_sendto+0xac>)
 801b3a6:	f004 f98b 	bl	801f6c0 <iprintf>
 801b3aa:	f06f 030f 	mvn.w	r3, #15
 801b3ae:	e038      	b.n	801b422 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801b3b0:	68bb      	ldr	r3, [r7, #8]
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	d109      	bne.n	801b3ca <udp_sendto+0x42>
 801b3b6:	4b1d      	ldr	r3, [pc, #116]	; (801b42c <udp_sendto+0xa4>)
 801b3b8:	f240 2219 	movw	r2, #537	; 0x219
 801b3bc:	491e      	ldr	r1, [pc, #120]	; (801b438 <udp_sendto+0xb0>)
 801b3be:	481d      	ldr	r0, [pc, #116]	; (801b434 <udp_sendto+0xac>)
 801b3c0:	f004 f97e 	bl	801f6c0 <iprintf>
 801b3c4:	f06f 030f 	mvn.w	r3, #15
 801b3c8:	e02b      	b.n	801b422 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d109      	bne.n	801b3e4 <udp_sendto+0x5c>
 801b3d0:	4b16      	ldr	r3, [pc, #88]	; (801b42c <udp_sendto+0xa4>)
 801b3d2:	f240 221a 	movw	r2, #538	; 0x21a
 801b3d6:	4919      	ldr	r1, [pc, #100]	; (801b43c <udp_sendto+0xb4>)
 801b3d8:	4816      	ldr	r0, [pc, #88]	; (801b434 <udp_sendto+0xac>)
 801b3da:	f004 f971 	bl	801f6c0 <iprintf>
 801b3de:	f06f 030f 	mvn.w	r3, #15
 801b3e2:	e01e      	b.n	801b422 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801b3e4:	68fb      	ldr	r3, [r7, #12]
 801b3e6:	7a1b      	ldrb	r3, [r3, #8]
 801b3e8:	2b00      	cmp	r3, #0
 801b3ea:	d006      	beq.n	801b3fa <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801b3ec:	68fb      	ldr	r3, [r7, #12]
 801b3ee:	7a1b      	ldrb	r3, [r3, #8]
 801b3f0:	4618      	mov	r0, r3
 801b3f2:	f7f8 fd6f 	bl	8013ed4 <netif_get_by_index>
 801b3f6:	6178      	str	r0, [r7, #20]
 801b3f8:	e003      	b.n	801b402 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801b3fa:	6878      	ldr	r0, [r7, #4]
 801b3fc:	f001 fb92 	bl	801cb24 <ip4_route>
 801b400:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801b402:	697b      	ldr	r3, [r7, #20]
 801b404:	2b00      	cmp	r3, #0
 801b406:	d102      	bne.n	801b40e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801b408:	f06f 0303 	mvn.w	r3, #3
 801b40c:	e009      	b.n	801b422 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801b40e:	887a      	ldrh	r2, [r7, #2]
 801b410:	697b      	ldr	r3, [r7, #20]
 801b412:	9300      	str	r3, [sp, #0]
 801b414:	4613      	mov	r3, r2
 801b416:	687a      	ldr	r2, [r7, #4]
 801b418:	68b9      	ldr	r1, [r7, #8]
 801b41a:	68f8      	ldr	r0, [r7, #12]
 801b41c:	f000 f810 	bl	801b440 <udp_sendto_if>
 801b420:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801b422:	4618      	mov	r0, r3
 801b424:	3718      	adds	r7, #24
 801b426:	46bd      	mov	sp, r7
 801b428:	bd80      	pop	{r7, pc}
 801b42a:	bf00      	nop
 801b42c:	08025b40 	.word	0x08025b40
 801b430:	08025c64 	.word	0x08025c64
 801b434:	08025b94 	.word	0x08025b94
 801b438:	08025c7c 	.word	0x08025c7c
 801b43c:	08025c98 	.word	0x08025c98

0801b440 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801b440:	b580      	push	{r7, lr}
 801b442:	b088      	sub	sp, #32
 801b444:	af02      	add	r7, sp, #8
 801b446:	60f8      	str	r0, [r7, #12]
 801b448:	60b9      	str	r1, [r7, #8]
 801b44a:	607a      	str	r2, [r7, #4]
 801b44c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801b44e:	68fb      	ldr	r3, [r7, #12]
 801b450:	2b00      	cmp	r3, #0
 801b452:	d109      	bne.n	801b468 <udp_sendto_if+0x28>
 801b454:	4b2e      	ldr	r3, [pc, #184]	; (801b510 <udp_sendto_if+0xd0>)
 801b456:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b45a:	492e      	ldr	r1, [pc, #184]	; (801b514 <udp_sendto_if+0xd4>)
 801b45c:	482e      	ldr	r0, [pc, #184]	; (801b518 <udp_sendto_if+0xd8>)
 801b45e:	f004 f92f 	bl	801f6c0 <iprintf>
 801b462:	f06f 030f 	mvn.w	r3, #15
 801b466:	e04f      	b.n	801b508 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801b468:	68bb      	ldr	r3, [r7, #8]
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d109      	bne.n	801b482 <udp_sendto_if+0x42>
 801b46e:	4b28      	ldr	r3, [pc, #160]	; (801b510 <udp_sendto_if+0xd0>)
 801b470:	f240 2281 	movw	r2, #641	; 0x281
 801b474:	4929      	ldr	r1, [pc, #164]	; (801b51c <udp_sendto_if+0xdc>)
 801b476:	4828      	ldr	r0, [pc, #160]	; (801b518 <udp_sendto_if+0xd8>)
 801b478:	f004 f922 	bl	801f6c0 <iprintf>
 801b47c:	f06f 030f 	mvn.w	r3, #15
 801b480:	e042      	b.n	801b508 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	2b00      	cmp	r3, #0
 801b486:	d109      	bne.n	801b49c <udp_sendto_if+0x5c>
 801b488:	4b21      	ldr	r3, [pc, #132]	; (801b510 <udp_sendto_if+0xd0>)
 801b48a:	f240 2282 	movw	r2, #642	; 0x282
 801b48e:	4924      	ldr	r1, [pc, #144]	; (801b520 <udp_sendto_if+0xe0>)
 801b490:	4821      	ldr	r0, [pc, #132]	; (801b518 <udp_sendto_if+0xd8>)
 801b492:	f004 f915 	bl	801f6c0 <iprintf>
 801b496:	f06f 030f 	mvn.w	r3, #15
 801b49a:	e035      	b.n	801b508 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801b49c:	6a3b      	ldr	r3, [r7, #32]
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	d109      	bne.n	801b4b6 <udp_sendto_if+0x76>
 801b4a2:	4b1b      	ldr	r3, [pc, #108]	; (801b510 <udp_sendto_if+0xd0>)
 801b4a4:	f240 2283 	movw	r2, #643	; 0x283
 801b4a8:	491e      	ldr	r1, [pc, #120]	; (801b524 <udp_sendto_if+0xe4>)
 801b4aa:	481b      	ldr	r0, [pc, #108]	; (801b518 <udp_sendto_if+0xd8>)
 801b4ac:	f004 f908 	bl	801f6c0 <iprintf>
 801b4b0:	f06f 030f 	mvn.w	r3, #15
 801b4b4:	e028      	b.n	801b508 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b4b6:	68fb      	ldr	r3, [r7, #12]
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	d009      	beq.n	801b4d0 <udp_sendto_if+0x90>
 801b4bc:	68fb      	ldr	r3, [r7, #12]
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	2b00      	cmp	r3, #0
 801b4c2:	d005      	beq.n	801b4d0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801b4c4:	68fb      	ldr	r3, [r7, #12]
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b4cc:	2be0      	cmp	r3, #224	; 0xe0
 801b4ce:	d103      	bne.n	801b4d8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801b4d0:	6a3b      	ldr	r3, [r7, #32]
 801b4d2:	3304      	adds	r3, #4
 801b4d4:	617b      	str	r3, [r7, #20]
 801b4d6:	e00b      	b.n	801b4f0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801b4d8:	68fb      	ldr	r3, [r7, #12]
 801b4da:	681a      	ldr	r2, [r3, #0]
 801b4dc:	6a3b      	ldr	r3, [r7, #32]
 801b4de:	3304      	adds	r3, #4
 801b4e0:	681b      	ldr	r3, [r3, #0]
 801b4e2:	429a      	cmp	r2, r3
 801b4e4:	d002      	beq.n	801b4ec <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801b4e6:	f06f 0303 	mvn.w	r3, #3
 801b4ea:	e00d      	b.n	801b508 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801b4ec:	68fb      	ldr	r3, [r7, #12]
 801b4ee:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801b4f0:	887a      	ldrh	r2, [r7, #2]
 801b4f2:	697b      	ldr	r3, [r7, #20]
 801b4f4:	9301      	str	r3, [sp, #4]
 801b4f6:	6a3b      	ldr	r3, [r7, #32]
 801b4f8:	9300      	str	r3, [sp, #0]
 801b4fa:	4613      	mov	r3, r2
 801b4fc:	687a      	ldr	r2, [r7, #4]
 801b4fe:	68b9      	ldr	r1, [r7, #8]
 801b500:	68f8      	ldr	r0, [r7, #12]
 801b502:	f000 f811 	bl	801b528 <udp_sendto_if_src>
 801b506:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801b508:	4618      	mov	r0, r3
 801b50a:	3718      	adds	r7, #24
 801b50c:	46bd      	mov	sp, r7
 801b50e:	bd80      	pop	{r7, pc}
 801b510:	08025b40 	.word	0x08025b40
 801b514:	08025cb4 	.word	0x08025cb4
 801b518:	08025b94 	.word	0x08025b94
 801b51c:	08025cd0 	.word	0x08025cd0
 801b520:	08025cec 	.word	0x08025cec
 801b524:	08025d0c 	.word	0x08025d0c

0801b528 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801b528:	b580      	push	{r7, lr}
 801b52a:	b08c      	sub	sp, #48	; 0x30
 801b52c:	af04      	add	r7, sp, #16
 801b52e:	60f8      	str	r0, [r7, #12]
 801b530:	60b9      	str	r1, [r7, #8]
 801b532:	607a      	str	r2, [r7, #4]
 801b534:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801b536:	68fb      	ldr	r3, [r7, #12]
 801b538:	2b00      	cmp	r3, #0
 801b53a:	d109      	bne.n	801b550 <udp_sendto_if_src+0x28>
 801b53c:	4b65      	ldr	r3, [pc, #404]	; (801b6d4 <udp_sendto_if_src+0x1ac>)
 801b53e:	f240 22d1 	movw	r2, #721	; 0x2d1
 801b542:	4965      	ldr	r1, [pc, #404]	; (801b6d8 <udp_sendto_if_src+0x1b0>)
 801b544:	4865      	ldr	r0, [pc, #404]	; (801b6dc <udp_sendto_if_src+0x1b4>)
 801b546:	f004 f8bb 	bl	801f6c0 <iprintf>
 801b54a:	f06f 030f 	mvn.w	r3, #15
 801b54e:	e0bc      	b.n	801b6ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801b550:	68bb      	ldr	r3, [r7, #8]
 801b552:	2b00      	cmp	r3, #0
 801b554:	d109      	bne.n	801b56a <udp_sendto_if_src+0x42>
 801b556:	4b5f      	ldr	r3, [pc, #380]	; (801b6d4 <udp_sendto_if_src+0x1ac>)
 801b558:	f240 22d2 	movw	r2, #722	; 0x2d2
 801b55c:	4960      	ldr	r1, [pc, #384]	; (801b6e0 <udp_sendto_if_src+0x1b8>)
 801b55e:	485f      	ldr	r0, [pc, #380]	; (801b6dc <udp_sendto_if_src+0x1b4>)
 801b560:	f004 f8ae 	bl	801f6c0 <iprintf>
 801b564:	f06f 030f 	mvn.w	r3, #15
 801b568:	e0af      	b.n	801b6ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	2b00      	cmp	r3, #0
 801b56e:	d109      	bne.n	801b584 <udp_sendto_if_src+0x5c>
 801b570:	4b58      	ldr	r3, [pc, #352]	; (801b6d4 <udp_sendto_if_src+0x1ac>)
 801b572:	f240 22d3 	movw	r2, #723	; 0x2d3
 801b576:	495b      	ldr	r1, [pc, #364]	; (801b6e4 <udp_sendto_if_src+0x1bc>)
 801b578:	4858      	ldr	r0, [pc, #352]	; (801b6dc <udp_sendto_if_src+0x1b4>)
 801b57a:	f004 f8a1 	bl	801f6c0 <iprintf>
 801b57e:	f06f 030f 	mvn.w	r3, #15
 801b582:	e0a2      	b.n	801b6ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801b584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b586:	2b00      	cmp	r3, #0
 801b588:	d109      	bne.n	801b59e <udp_sendto_if_src+0x76>
 801b58a:	4b52      	ldr	r3, [pc, #328]	; (801b6d4 <udp_sendto_if_src+0x1ac>)
 801b58c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801b590:	4955      	ldr	r1, [pc, #340]	; (801b6e8 <udp_sendto_if_src+0x1c0>)
 801b592:	4852      	ldr	r0, [pc, #328]	; (801b6dc <udp_sendto_if_src+0x1b4>)
 801b594:	f004 f894 	bl	801f6c0 <iprintf>
 801b598:	f06f 030f 	mvn.w	r3, #15
 801b59c:	e095      	b.n	801b6ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801b59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	d109      	bne.n	801b5b8 <udp_sendto_if_src+0x90>
 801b5a4:	4b4b      	ldr	r3, [pc, #300]	; (801b6d4 <udp_sendto_if_src+0x1ac>)
 801b5a6:	f240 22d5 	movw	r2, #725	; 0x2d5
 801b5aa:	4950      	ldr	r1, [pc, #320]	; (801b6ec <udp_sendto_if_src+0x1c4>)
 801b5ac:	484b      	ldr	r0, [pc, #300]	; (801b6dc <udp_sendto_if_src+0x1b4>)
 801b5ae:	f004 f887 	bl	801f6c0 <iprintf>
 801b5b2:	f06f 030f 	mvn.w	r3, #15
 801b5b6:	e088      	b.n	801b6ca <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801b5b8:	68fb      	ldr	r3, [r7, #12]
 801b5ba:	8a5b      	ldrh	r3, [r3, #18]
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d10f      	bne.n	801b5e0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b5c0:	68f9      	ldr	r1, [r7, #12]
 801b5c2:	68fb      	ldr	r3, [r7, #12]
 801b5c4:	8a5b      	ldrh	r3, [r3, #18]
 801b5c6:	461a      	mov	r2, r3
 801b5c8:	68f8      	ldr	r0, [r7, #12]
 801b5ca:	f000 f893 	bl	801b6f4 <udp_bind>
 801b5ce:	4603      	mov	r3, r0
 801b5d0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801b5d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b5d6:	2b00      	cmp	r3, #0
 801b5d8:	d002      	beq.n	801b5e0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801b5da:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b5de:	e074      	b.n	801b6ca <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801b5e0:	68bb      	ldr	r3, [r7, #8]
 801b5e2:	891b      	ldrh	r3, [r3, #8]
 801b5e4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801b5e8:	4293      	cmp	r3, r2
 801b5ea:	d902      	bls.n	801b5f2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801b5ec:	f04f 33ff 	mov.w	r3, #4294967295
 801b5f0:	e06b      	b.n	801b6ca <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801b5f2:	2108      	movs	r1, #8
 801b5f4:	68b8      	ldr	r0, [r7, #8]
 801b5f6:	f7f8 ff65 	bl	80144c4 <pbuf_add_header>
 801b5fa:	4603      	mov	r3, r0
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	d015      	beq.n	801b62c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801b600:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b604:	2108      	movs	r1, #8
 801b606:	2022      	movs	r0, #34	; 0x22
 801b608:	f7f8 fd0e 	bl	8014028 <pbuf_alloc>
 801b60c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801b60e:	69fb      	ldr	r3, [r7, #28]
 801b610:	2b00      	cmp	r3, #0
 801b612:	d102      	bne.n	801b61a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801b614:	f04f 33ff 	mov.w	r3, #4294967295
 801b618:	e057      	b.n	801b6ca <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801b61a:	68bb      	ldr	r3, [r7, #8]
 801b61c:	891b      	ldrh	r3, [r3, #8]
 801b61e:	2b00      	cmp	r3, #0
 801b620:	d006      	beq.n	801b630 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801b622:	68b9      	ldr	r1, [r7, #8]
 801b624:	69f8      	ldr	r0, [r7, #28]
 801b626:	f7f9 f907 	bl	8014838 <pbuf_chain>
 801b62a:	e001      	b.n	801b630 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801b62c:	68bb      	ldr	r3, [r7, #8]
 801b62e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801b630:	69fb      	ldr	r3, [r7, #28]
 801b632:	895b      	ldrh	r3, [r3, #10]
 801b634:	2b07      	cmp	r3, #7
 801b636:	d806      	bhi.n	801b646 <udp_sendto_if_src+0x11e>
 801b638:	4b26      	ldr	r3, [pc, #152]	; (801b6d4 <udp_sendto_if_src+0x1ac>)
 801b63a:	f240 320d 	movw	r2, #781	; 0x30d
 801b63e:	492c      	ldr	r1, [pc, #176]	; (801b6f0 <udp_sendto_if_src+0x1c8>)
 801b640:	4826      	ldr	r0, [pc, #152]	; (801b6dc <udp_sendto_if_src+0x1b4>)
 801b642:	f004 f83d 	bl	801f6c0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801b646:	69fb      	ldr	r3, [r7, #28]
 801b648:	685b      	ldr	r3, [r3, #4]
 801b64a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801b64c:	68fb      	ldr	r3, [r7, #12]
 801b64e:	8a5b      	ldrh	r3, [r3, #18]
 801b650:	4618      	mov	r0, r3
 801b652:	f7f7 fc11 	bl	8012e78 <lwip_htons>
 801b656:	4603      	mov	r3, r0
 801b658:	461a      	mov	r2, r3
 801b65a:	697b      	ldr	r3, [r7, #20]
 801b65c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801b65e:	887b      	ldrh	r3, [r7, #2]
 801b660:	4618      	mov	r0, r3
 801b662:	f7f7 fc09 	bl	8012e78 <lwip_htons>
 801b666:	4603      	mov	r3, r0
 801b668:	461a      	mov	r2, r3
 801b66a:	697b      	ldr	r3, [r7, #20]
 801b66c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801b66e:	697b      	ldr	r3, [r7, #20]
 801b670:	2200      	movs	r2, #0
 801b672:	719a      	strb	r2, [r3, #6]
 801b674:	2200      	movs	r2, #0
 801b676:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801b678:	69fb      	ldr	r3, [r7, #28]
 801b67a:	891b      	ldrh	r3, [r3, #8]
 801b67c:	4618      	mov	r0, r3
 801b67e:	f7f7 fbfb 	bl	8012e78 <lwip_htons>
 801b682:	4603      	mov	r3, r0
 801b684:	461a      	mov	r2, r3
 801b686:	697b      	ldr	r3, [r7, #20]
 801b688:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801b68a:	2311      	movs	r3, #17
 801b68c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801b68e:	68fb      	ldr	r3, [r7, #12]
 801b690:	7adb      	ldrb	r3, [r3, #11]
 801b692:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801b694:	68fb      	ldr	r3, [r7, #12]
 801b696:	7a9b      	ldrb	r3, [r3, #10]
 801b698:	7cb9      	ldrb	r1, [r7, #18]
 801b69a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b69c:	9202      	str	r2, [sp, #8]
 801b69e:	7cfa      	ldrb	r2, [r7, #19]
 801b6a0:	9201      	str	r2, [sp, #4]
 801b6a2:	9300      	str	r3, [sp, #0]
 801b6a4:	460b      	mov	r3, r1
 801b6a6:	687a      	ldr	r2, [r7, #4]
 801b6a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b6aa:	69f8      	ldr	r0, [r7, #28]
 801b6ac:	f001 fc22 	bl	801cef4 <ip4_output_if_src>
 801b6b0:	4603      	mov	r3, r0
 801b6b2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801b6b4:	69fa      	ldr	r2, [r7, #28]
 801b6b6:	68bb      	ldr	r3, [r7, #8]
 801b6b8:	429a      	cmp	r2, r3
 801b6ba:	d004      	beq.n	801b6c6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801b6bc:	69f8      	ldr	r0, [r7, #28]
 801b6be:	f7f8 ff97 	bl	80145f0 <pbuf_free>
    q = NULL;
 801b6c2:	2300      	movs	r3, #0
 801b6c4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801b6c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801b6ca:	4618      	mov	r0, r3
 801b6cc:	3720      	adds	r7, #32
 801b6ce:	46bd      	mov	sp, r7
 801b6d0:	bd80      	pop	{r7, pc}
 801b6d2:	bf00      	nop
 801b6d4:	08025b40 	.word	0x08025b40
 801b6d8:	08025d2c 	.word	0x08025d2c
 801b6dc:	08025b94 	.word	0x08025b94
 801b6e0:	08025d4c 	.word	0x08025d4c
 801b6e4:	08025d6c 	.word	0x08025d6c
 801b6e8:	08025d90 	.word	0x08025d90
 801b6ec:	08025db4 	.word	0x08025db4
 801b6f0:	08025dd8 	.word	0x08025dd8

0801b6f4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b6f4:	b580      	push	{r7, lr}
 801b6f6:	b086      	sub	sp, #24
 801b6f8:	af00      	add	r7, sp, #0
 801b6fa:	60f8      	str	r0, [r7, #12]
 801b6fc:	60b9      	str	r1, [r7, #8]
 801b6fe:	4613      	mov	r3, r2
 801b700:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b702:	68bb      	ldr	r3, [r7, #8]
 801b704:	2b00      	cmp	r3, #0
 801b706:	d101      	bne.n	801b70c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801b708:	4b39      	ldr	r3, [pc, #228]	; (801b7f0 <udp_bind+0xfc>)
 801b70a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b70c:	68fb      	ldr	r3, [r7, #12]
 801b70e:	2b00      	cmp	r3, #0
 801b710:	d109      	bne.n	801b726 <udp_bind+0x32>
 801b712:	4b38      	ldr	r3, [pc, #224]	; (801b7f4 <udp_bind+0x100>)
 801b714:	f240 32b7 	movw	r2, #951	; 0x3b7
 801b718:	4937      	ldr	r1, [pc, #220]	; (801b7f8 <udp_bind+0x104>)
 801b71a:	4838      	ldr	r0, [pc, #224]	; (801b7fc <udp_bind+0x108>)
 801b71c:	f003 ffd0 	bl	801f6c0 <iprintf>
 801b720:	f06f 030f 	mvn.w	r3, #15
 801b724:	e060      	b.n	801b7e8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801b726:	2300      	movs	r3, #0
 801b728:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b72a:	4b35      	ldr	r3, [pc, #212]	; (801b800 <udp_bind+0x10c>)
 801b72c:	681b      	ldr	r3, [r3, #0]
 801b72e:	617b      	str	r3, [r7, #20]
 801b730:	e009      	b.n	801b746 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801b732:	68fa      	ldr	r2, [r7, #12]
 801b734:	697b      	ldr	r3, [r7, #20]
 801b736:	429a      	cmp	r2, r3
 801b738:	d102      	bne.n	801b740 <udp_bind+0x4c>
      rebind = 1;
 801b73a:	2301      	movs	r3, #1
 801b73c:	74fb      	strb	r3, [r7, #19]
      break;
 801b73e:	e005      	b.n	801b74c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b740:	697b      	ldr	r3, [r7, #20]
 801b742:	68db      	ldr	r3, [r3, #12]
 801b744:	617b      	str	r3, [r7, #20]
 801b746:	697b      	ldr	r3, [r7, #20]
 801b748:	2b00      	cmp	r3, #0
 801b74a:	d1f2      	bne.n	801b732 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801b74c:	88fb      	ldrh	r3, [r7, #6]
 801b74e:	2b00      	cmp	r3, #0
 801b750:	d109      	bne.n	801b766 <udp_bind+0x72>
    port = udp_new_port();
 801b752:	f7ff fc35 	bl	801afc0 <udp_new_port>
 801b756:	4603      	mov	r3, r0
 801b758:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b75a:	88fb      	ldrh	r3, [r7, #6]
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	d12c      	bne.n	801b7ba <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801b760:	f06f 0307 	mvn.w	r3, #7
 801b764:	e040      	b.n	801b7e8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b766:	4b26      	ldr	r3, [pc, #152]	; (801b800 <udp_bind+0x10c>)
 801b768:	681b      	ldr	r3, [r3, #0]
 801b76a:	617b      	str	r3, [r7, #20]
 801b76c:	e022      	b.n	801b7b4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801b76e:	68fa      	ldr	r2, [r7, #12]
 801b770:	697b      	ldr	r3, [r7, #20]
 801b772:	429a      	cmp	r2, r3
 801b774:	d01b      	beq.n	801b7ae <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801b776:	697b      	ldr	r3, [r7, #20]
 801b778:	8a5b      	ldrh	r3, [r3, #18]
 801b77a:	88fa      	ldrh	r2, [r7, #6]
 801b77c:	429a      	cmp	r2, r3
 801b77e:	d116      	bne.n	801b7ae <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b780:	697b      	ldr	r3, [r7, #20]
 801b782:	681a      	ldr	r2, [r3, #0]
 801b784:	68bb      	ldr	r3, [r7, #8]
 801b786:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801b788:	429a      	cmp	r2, r3
 801b78a:	d00d      	beq.n	801b7a8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b78c:	68bb      	ldr	r3, [r7, #8]
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d00a      	beq.n	801b7a8 <udp_bind+0xb4>
 801b792:	68bb      	ldr	r3, [r7, #8]
 801b794:	681b      	ldr	r3, [r3, #0]
 801b796:	2b00      	cmp	r3, #0
 801b798:	d006      	beq.n	801b7a8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b79a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d003      	beq.n	801b7a8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b7a0:	697b      	ldr	r3, [r7, #20]
 801b7a2:	681b      	ldr	r3, [r3, #0]
 801b7a4:	2b00      	cmp	r3, #0
 801b7a6:	d102      	bne.n	801b7ae <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801b7a8:	f06f 0307 	mvn.w	r3, #7
 801b7ac:	e01c      	b.n	801b7e8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b7ae:	697b      	ldr	r3, [r7, #20]
 801b7b0:	68db      	ldr	r3, [r3, #12]
 801b7b2:	617b      	str	r3, [r7, #20]
 801b7b4:	697b      	ldr	r3, [r7, #20]
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d1d9      	bne.n	801b76e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801b7ba:	68bb      	ldr	r3, [r7, #8]
 801b7bc:	2b00      	cmp	r3, #0
 801b7be:	d002      	beq.n	801b7c6 <udp_bind+0xd2>
 801b7c0:	68bb      	ldr	r3, [r7, #8]
 801b7c2:	681b      	ldr	r3, [r3, #0]
 801b7c4:	e000      	b.n	801b7c8 <udp_bind+0xd4>
 801b7c6:	2300      	movs	r3, #0
 801b7c8:	68fa      	ldr	r2, [r7, #12]
 801b7ca:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801b7cc:	68fb      	ldr	r3, [r7, #12]
 801b7ce:	88fa      	ldrh	r2, [r7, #6]
 801b7d0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801b7d2:	7cfb      	ldrb	r3, [r7, #19]
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	d106      	bne.n	801b7e6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801b7d8:	4b09      	ldr	r3, [pc, #36]	; (801b800 <udp_bind+0x10c>)
 801b7da:	681a      	ldr	r2, [r3, #0]
 801b7dc:	68fb      	ldr	r3, [r7, #12]
 801b7de:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801b7e0:	4a07      	ldr	r2, [pc, #28]	; (801b800 <udp_bind+0x10c>)
 801b7e2:	68fb      	ldr	r3, [r7, #12]
 801b7e4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801b7e6:	2300      	movs	r3, #0
}
 801b7e8:	4618      	mov	r0, r3
 801b7ea:	3718      	adds	r7, #24
 801b7ec:	46bd      	mov	sp, r7
 801b7ee:	bd80      	pop	{r7, pc}
 801b7f0:	08027630 	.word	0x08027630
 801b7f4:	08025b40 	.word	0x08025b40
 801b7f8:	08025e08 	.word	0x08025e08
 801b7fc:	08025b94 	.word	0x08025b94
 801b800:	2000b8ec 	.word	0x2000b8ec

0801b804 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801b804:	b580      	push	{r7, lr}
 801b806:	b084      	sub	sp, #16
 801b808:	af00      	add	r7, sp, #0
 801b80a:	60f8      	str	r0, [r7, #12]
 801b80c:	60b9      	str	r1, [r7, #8]
 801b80e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801b810:	68fb      	ldr	r3, [r7, #12]
 801b812:	2b00      	cmp	r3, #0
 801b814:	d107      	bne.n	801b826 <udp_recv+0x22>
 801b816:	4b08      	ldr	r3, [pc, #32]	; (801b838 <udp_recv+0x34>)
 801b818:	f240 428a 	movw	r2, #1162	; 0x48a
 801b81c:	4907      	ldr	r1, [pc, #28]	; (801b83c <udp_recv+0x38>)
 801b81e:	4808      	ldr	r0, [pc, #32]	; (801b840 <udp_recv+0x3c>)
 801b820:	f003 ff4e 	bl	801f6c0 <iprintf>
 801b824:	e005      	b.n	801b832 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801b826:	68fb      	ldr	r3, [r7, #12]
 801b828:	68ba      	ldr	r2, [r7, #8]
 801b82a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801b82c:	68fb      	ldr	r3, [r7, #12]
 801b82e:	687a      	ldr	r2, [r7, #4]
 801b830:	61da      	str	r2, [r3, #28]
}
 801b832:	3710      	adds	r7, #16
 801b834:	46bd      	mov	sp, r7
 801b836:	bd80      	pop	{r7, pc}
 801b838:	08025b40 	.word	0x08025b40
 801b83c:	08025e74 	.word	0x08025e74
 801b840:	08025b94 	.word	0x08025b94

0801b844 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801b844:	b580      	push	{r7, lr}
 801b846:	b084      	sub	sp, #16
 801b848:	af00      	add	r7, sp, #0
 801b84a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801b84c:	687b      	ldr	r3, [r7, #4]
 801b84e:	2b00      	cmp	r3, #0
 801b850:	d107      	bne.n	801b862 <udp_remove+0x1e>
 801b852:	4b19      	ldr	r3, [pc, #100]	; (801b8b8 <udp_remove+0x74>)
 801b854:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801b858:	4918      	ldr	r1, [pc, #96]	; (801b8bc <udp_remove+0x78>)
 801b85a:	4819      	ldr	r0, [pc, #100]	; (801b8c0 <udp_remove+0x7c>)
 801b85c:	f003 ff30 	bl	801f6c0 <iprintf>
 801b860:	e026      	b.n	801b8b0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801b862:	4b18      	ldr	r3, [pc, #96]	; (801b8c4 <udp_remove+0x80>)
 801b864:	681b      	ldr	r3, [r3, #0]
 801b866:	687a      	ldr	r2, [r7, #4]
 801b868:	429a      	cmp	r2, r3
 801b86a:	d105      	bne.n	801b878 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801b86c:	4b15      	ldr	r3, [pc, #84]	; (801b8c4 <udp_remove+0x80>)
 801b86e:	681b      	ldr	r3, [r3, #0]
 801b870:	68db      	ldr	r3, [r3, #12]
 801b872:	4a14      	ldr	r2, [pc, #80]	; (801b8c4 <udp_remove+0x80>)
 801b874:	6013      	str	r3, [r2, #0]
 801b876:	e017      	b.n	801b8a8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b878:	4b12      	ldr	r3, [pc, #72]	; (801b8c4 <udp_remove+0x80>)
 801b87a:	681b      	ldr	r3, [r3, #0]
 801b87c:	60fb      	str	r3, [r7, #12]
 801b87e:	e010      	b.n	801b8a2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801b880:	68fb      	ldr	r3, [r7, #12]
 801b882:	68db      	ldr	r3, [r3, #12]
 801b884:	2b00      	cmp	r3, #0
 801b886:	d009      	beq.n	801b89c <udp_remove+0x58>
 801b888:	68fb      	ldr	r3, [r7, #12]
 801b88a:	68db      	ldr	r3, [r3, #12]
 801b88c:	687a      	ldr	r2, [r7, #4]
 801b88e:	429a      	cmp	r2, r3
 801b890:	d104      	bne.n	801b89c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	68da      	ldr	r2, [r3, #12]
 801b896:	68fb      	ldr	r3, [r7, #12]
 801b898:	60da      	str	r2, [r3, #12]
        break;
 801b89a:	e005      	b.n	801b8a8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b89c:	68fb      	ldr	r3, [r7, #12]
 801b89e:	68db      	ldr	r3, [r3, #12]
 801b8a0:	60fb      	str	r3, [r7, #12]
 801b8a2:	68fb      	ldr	r3, [r7, #12]
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d1eb      	bne.n	801b880 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801b8a8:	6879      	ldr	r1, [r7, #4]
 801b8aa:	2000      	movs	r0, #0
 801b8ac:	f7f8 f822 	bl	80138f4 <memp_free>
}
 801b8b0:	3710      	adds	r7, #16
 801b8b2:	46bd      	mov	sp, r7
 801b8b4:	bd80      	pop	{r7, pc}
 801b8b6:	bf00      	nop
 801b8b8:	08025b40 	.word	0x08025b40
 801b8bc:	08025e8c 	.word	0x08025e8c
 801b8c0:	08025b94 	.word	0x08025b94
 801b8c4:	2000b8ec 	.word	0x2000b8ec

0801b8c8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801b8c8:	b580      	push	{r7, lr}
 801b8ca:	b082      	sub	sp, #8
 801b8cc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801b8ce:	2000      	movs	r0, #0
 801b8d0:	f7f7 ffbe 	bl	8013850 <memp_malloc>
 801b8d4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	2b00      	cmp	r3, #0
 801b8da:	d007      	beq.n	801b8ec <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801b8dc:	2220      	movs	r2, #32
 801b8de:	2100      	movs	r1, #0
 801b8e0:	6878      	ldr	r0, [r7, #4]
 801b8e2:	f003 fc67 	bl	801f1b4 <memset>
    pcb->ttl = UDP_TTL;
 801b8e6:	687b      	ldr	r3, [r7, #4]
 801b8e8:	22ff      	movs	r2, #255	; 0xff
 801b8ea:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801b8ec:	687b      	ldr	r3, [r7, #4]
}
 801b8ee:	4618      	mov	r0, r3
 801b8f0:	3708      	adds	r7, #8
 801b8f2:	46bd      	mov	sp, r7
 801b8f4:	bd80      	pop	{r7, pc}

0801b8f6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801b8f6:	b580      	push	{r7, lr}
 801b8f8:	b084      	sub	sp, #16
 801b8fa:	af00      	add	r7, sp, #0
 801b8fc:	4603      	mov	r3, r0
 801b8fe:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801b900:	f7ff ffe2 	bl	801b8c8 <udp_new>
 801b904:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801b906:	68fb      	ldr	r3, [r7, #12]
}
 801b908:	4618      	mov	r0, r3
 801b90a:	3710      	adds	r7, #16
 801b90c:	46bd      	mov	sp, r7
 801b90e:	bd80      	pop	{r7, pc}

0801b910 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801b910:	b480      	push	{r7}
 801b912:	b085      	sub	sp, #20
 801b914:	af00      	add	r7, sp, #0
 801b916:	6078      	str	r0, [r7, #4]
 801b918:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	d01e      	beq.n	801b95e <udp_netif_ip_addr_changed+0x4e>
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	681b      	ldr	r3, [r3, #0]
 801b924:	2b00      	cmp	r3, #0
 801b926:	d01a      	beq.n	801b95e <udp_netif_ip_addr_changed+0x4e>
 801b928:	683b      	ldr	r3, [r7, #0]
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d017      	beq.n	801b95e <udp_netif_ip_addr_changed+0x4e>
 801b92e:	683b      	ldr	r3, [r7, #0]
 801b930:	681b      	ldr	r3, [r3, #0]
 801b932:	2b00      	cmp	r3, #0
 801b934:	d013      	beq.n	801b95e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b936:	4b0d      	ldr	r3, [pc, #52]	; (801b96c <udp_netif_ip_addr_changed+0x5c>)
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	60fb      	str	r3, [r7, #12]
 801b93c:	e00c      	b.n	801b958 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801b93e:	68fb      	ldr	r3, [r7, #12]
 801b940:	681a      	ldr	r2, [r3, #0]
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	681b      	ldr	r3, [r3, #0]
 801b946:	429a      	cmp	r2, r3
 801b948:	d103      	bne.n	801b952 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801b94a:	683b      	ldr	r3, [r7, #0]
 801b94c:	681a      	ldr	r2, [r3, #0]
 801b94e:	68fb      	ldr	r3, [r7, #12]
 801b950:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b952:	68fb      	ldr	r3, [r7, #12]
 801b954:	68db      	ldr	r3, [r3, #12]
 801b956:	60fb      	str	r3, [r7, #12]
 801b958:	68fb      	ldr	r3, [r7, #12]
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d1ef      	bne.n	801b93e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801b95e:	bf00      	nop
 801b960:	3714      	adds	r7, #20
 801b962:	46bd      	mov	sp, r7
 801b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b968:	4770      	bx	lr
 801b96a:	bf00      	nop
 801b96c:	2000b8ec 	.word	0x2000b8ec

0801b970 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801b970:	b580      	push	{r7, lr}
 801b972:	b082      	sub	sp, #8
 801b974:	af00      	add	r7, sp, #0
 801b976:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801b978:	4915      	ldr	r1, [pc, #84]	; (801b9d0 <etharp_free_entry+0x60>)
 801b97a:	687a      	ldr	r2, [r7, #4]
 801b97c:	4613      	mov	r3, r2
 801b97e:	005b      	lsls	r3, r3, #1
 801b980:	4413      	add	r3, r2
 801b982:	00db      	lsls	r3, r3, #3
 801b984:	440b      	add	r3, r1
 801b986:	681b      	ldr	r3, [r3, #0]
 801b988:	2b00      	cmp	r3, #0
 801b98a:	d013      	beq.n	801b9b4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801b98c:	4910      	ldr	r1, [pc, #64]	; (801b9d0 <etharp_free_entry+0x60>)
 801b98e:	687a      	ldr	r2, [r7, #4]
 801b990:	4613      	mov	r3, r2
 801b992:	005b      	lsls	r3, r3, #1
 801b994:	4413      	add	r3, r2
 801b996:	00db      	lsls	r3, r3, #3
 801b998:	440b      	add	r3, r1
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	4618      	mov	r0, r3
 801b99e:	f7f8 fe27 	bl	80145f0 <pbuf_free>
    arp_table[i].q = NULL;
 801b9a2:	490b      	ldr	r1, [pc, #44]	; (801b9d0 <etharp_free_entry+0x60>)
 801b9a4:	687a      	ldr	r2, [r7, #4]
 801b9a6:	4613      	mov	r3, r2
 801b9a8:	005b      	lsls	r3, r3, #1
 801b9aa:	4413      	add	r3, r2
 801b9ac:	00db      	lsls	r3, r3, #3
 801b9ae:	440b      	add	r3, r1
 801b9b0:	2200      	movs	r2, #0
 801b9b2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801b9b4:	4906      	ldr	r1, [pc, #24]	; (801b9d0 <etharp_free_entry+0x60>)
 801b9b6:	687a      	ldr	r2, [r7, #4]
 801b9b8:	4613      	mov	r3, r2
 801b9ba:	005b      	lsls	r3, r3, #1
 801b9bc:	4413      	add	r3, r2
 801b9be:	00db      	lsls	r3, r3, #3
 801b9c0:	440b      	add	r3, r1
 801b9c2:	3314      	adds	r3, #20
 801b9c4:	2200      	movs	r2, #0
 801b9c6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801b9c8:	bf00      	nop
 801b9ca:	3708      	adds	r7, #8
 801b9cc:	46bd      	mov	sp, r7
 801b9ce:	bd80      	pop	{r7, pc}
 801b9d0:	200047b4 	.word	0x200047b4

0801b9d4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801b9d4:	b580      	push	{r7, lr}
 801b9d6:	b082      	sub	sp, #8
 801b9d8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b9da:	2300      	movs	r3, #0
 801b9dc:	607b      	str	r3, [r7, #4]
 801b9de:	e096      	b.n	801bb0e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801b9e0:	494f      	ldr	r1, [pc, #316]	; (801bb20 <etharp_tmr+0x14c>)
 801b9e2:	687a      	ldr	r2, [r7, #4]
 801b9e4:	4613      	mov	r3, r2
 801b9e6:	005b      	lsls	r3, r3, #1
 801b9e8:	4413      	add	r3, r2
 801b9ea:	00db      	lsls	r3, r3, #3
 801b9ec:	440b      	add	r3, r1
 801b9ee:	3314      	adds	r3, #20
 801b9f0:	781b      	ldrb	r3, [r3, #0]
 801b9f2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801b9f4:	78fb      	ldrb	r3, [r7, #3]
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	f000 8086 	beq.w	801bb08 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801b9fc:	4948      	ldr	r1, [pc, #288]	; (801bb20 <etharp_tmr+0x14c>)
 801b9fe:	687a      	ldr	r2, [r7, #4]
 801ba00:	4613      	mov	r3, r2
 801ba02:	005b      	lsls	r3, r3, #1
 801ba04:	4413      	add	r3, r2
 801ba06:	00db      	lsls	r3, r3, #3
 801ba08:	440b      	add	r3, r1
 801ba0a:	3312      	adds	r3, #18
 801ba0c:	881b      	ldrh	r3, [r3, #0]
 801ba0e:	3301      	adds	r3, #1
 801ba10:	b298      	uxth	r0, r3
 801ba12:	4943      	ldr	r1, [pc, #268]	; (801bb20 <etharp_tmr+0x14c>)
 801ba14:	687a      	ldr	r2, [r7, #4]
 801ba16:	4613      	mov	r3, r2
 801ba18:	005b      	lsls	r3, r3, #1
 801ba1a:	4413      	add	r3, r2
 801ba1c:	00db      	lsls	r3, r3, #3
 801ba1e:	440b      	add	r3, r1
 801ba20:	3312      	adds	r3, #18
 801ba22:	4602      	mov	r2, r0
 801ba24:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801ba26:	493e      	ldr	r1, [pc, #248]	; (801bb20 <etharp_tmr+0x14c>)
 801ba28:	687a      	ldr	r2, [r7, #4]
 801ba2a:	4613      	mov	r3, r2
 801ba2c:	005b      	lsls	r3, r3, #1
 801ba2e:	4413      	add	r3, r2
 801ba30:	00db      	lsls	r3, r3, #3
 801ba32:	440b      	add	r3, r1
 801ba34:	3312      	adds	r3, #18
 801ba36:	881b      	ldrh	r3, [r3, #0]
 801ba38:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801ba3c:	d215      	bcs.n	801ba6a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ba3e:	4938      	ldr	r1, [pc, #224]	; (801bb20 <etharp_tmr+0x14c>)
 801ba40:	687a      	ldr	r2, [r7, #4]
 801ba42:	4613      	mov	r3, r2
 801ba44:	005b      	lsls	r3, r3, #1
 801ba46:	4413      	add	r3, r2
 801ba48:	00db      	lsls	r3, r3, #3
 801ba4a:	440b      	add	r3, r1
 801ba4c:	3314      	adds	r3, #20
 801ba4e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801ba50:	2b01      	cmp	r3, #1
 801ba52:	d10e      	bne.n	801ba72 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801ba54:	4932      	ldr	r1, [pc, #200]	; (801bb20 <etharp_tmr+0x14c>)
 801ba56:	687a      	ldr	r2, [r7, #4]
 801ba58:	4613      	mov	r3, r2
 801ba5a:	005b      	lsls	r3, r3, #1
 801ba5c:	4413      	add	r3, r2
 801ba5e:	00db      	lsls	r3, r3, #3
 801ba60:	440b      	add	r3, r1
 801ba62:	3312      	adds	r3, #18
 801ba64:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ba66:	2b04      	cmp	r3, #4
 801ba68:	d903      	bls.n	801ba72 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801ba6a:	6878      	ldr	r0, [r7, #4]
 801ba6c:	f7ff ff80 	bl	801b970 <etharp_free_entry>
 801ba70:	e04a      	b.n	801bb08 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801ba72:	492b      	ldr	r1, [pc, #172]	; (801bb20 <etharp_tmr+0x14c>)
 801ba74:	687a      	ldr	r2, [r7, #4]
 801ba76:	4613      	mov	r3, r2
 801ba78:	005b      	lsls	r3, r3, #1
 801ba7a:	4413      	add	r3, r2
 801ba7c:	00db      	lsls	r3, r3, #3
 801ba7e:	440b      	add	r3, r1
 801ba80:	3314      	adds	r3, #20
 801ba82:	781b      	ldrb	r3, [r3, #0]
 801ba84:	2b03      	cmp	r3, #3
 801ba86:	d10a      	bne.n	801ba9e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801ba88:	4925      	ldr	r1, [pc, #148]	; (801bb20 <etharp_tmr+0x14c>)
 801ba8a:	687a      	ldr	r2, [r7, #4]
 801ba8c:	4613      	mov	r3, r2
 801ba8e:	005b      	lsls	r3, r3, #1
 801ba90:	4413      	add	r3, r2
 801ba92:	00db      	lsls	r3, r3, #3
 801ba94:	440b      	add	r3, r1
 801ba96:	3314      	adds	r3, #20
 801ba98:	2204      	movs	r2, #4
 801ba9a:	701a      	strb	r2, [r3, #0]
 801ba9c:	e034      	b.n	801bb08 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801ba9e:	4920      	ldr	r1, [pc, #128]	; (801bb20 <etharp_tmr+0x14c>)
 801baa0:	687a      	ldr	r2, [r7, #4]
 801baa2:	4613      	mov	r3, r2
 801baa4:	005b      	lsls	r3, r3, #1
 801baa6:	4413      	add	r3, r2
 801baa8:	00db      	lsls	r3, r3, #3
 801baaa:	440b      	add	r3, r1
 801baac:	3314      	adds	r3, #20
 801baae:	781b      	ldrb	r3, [r3, #0]
 801bab0:	2b04      	cmp	r3, #4
 801bab2:	d10a      	bne.n	801baca <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801bab4:	491a      	ldr	r1, [pc, #104]	; (801bb20 <etharp_tmr+0x14c>)
 801bab6:	687a      	ldr	r2, [r7, #4]
 801bab8:	4613      	mov	r3, r2
 801baba:	005b      	lsls	r3, r3, #1
 801babc:	4413      	add	r3, r2
 801babe:	00db      	lsls	r3, r3, #3
 801bac0:	440b      	add	r3, r1
 801bac2:	3314      	adds	r3, #20
 801bac4:	2202      	movs	r2, #2
 801bac6:	701a      	strb	r2, [r3, #0]
 801bac8:	e01e      	b.n	801bb08 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801baca:	4915      	ldr	r1, [pc, #84]	; (801bb20 <etharp_tmr+0x14c>)
 801bacc:	687a      	ldr	r2, [r7, #4]
 801bace:	4613      	mov	r3, r2
 801bad0:	005b      	lsls	r3, r3, #1
 801bad2:	4413      	add	r3, r2
 801bad4:	00db      	lsls	r3, r3, #3
 801bad6:	440b      	add	r3, r1
 801bad8:	3314      	adds	r3, #20
 801bada:	781b      	ldrb	r3, [r3, #0]
 801badc:	2b01      	cmp	r3, #1
 801bade:	d113      	bne.n	801bb08 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801bae0:	490f      	ldr	r1, [pc, #60]	; (801bb20 <etharp_tmr+0x14c>)
 801bae2:	687a      	ldr	r2, [r7, #4]
 801bae4:	4613      	mov	r3, r2
 801bae6:	005b      	lsls	r3, r3, #1
 801bae8:	4413      	add	r3, r2
 801baea:	00db      	lsls	r3, r3, #3
 801baec:	440b      	add	r3, r1
 801baee:	3308      	adds	r3, #8
 801baf0:	6818      	ldr	r0, [r3, #0]
 801baf2:	687a      	ldr	r2, [r7, #4]
 801baf4:	4613      	mov	r3, r2
 801baf6:	005b      	lsls	r3, r3, #1
 801baf8:	4413      	add	r3, r2
 801bafa:	00db      	lsls	r3, r3, #3
 801bafc:	4a08      	ldr	r2, [pc, #32]	; (801bb20 <etharp_tmr+0x14c>)
 801bafe:	4413      	add	r3, r2
 801bb00:	3304      	adds	r3, #4
 801bb02:	4619      	mov	r1, r3
 801bb04:	f000 fe6e 	bl	801c7e4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	3301      	adds	r3, #1
 801bb0c:	607b      	str	r3, [r7, #4]
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	2b09      	cmp	r3, #9
 801bb12:	f77f af65 	ble.w	801b9e0 <etharp_tmr+0xc>
      }
    }
  }
}
 801bb16:	bf00      	nop
 801bb18:	bf00      	nop
 801bb1a:	3708      	adds	r7, #8
 801bb1c:	46bd      	mov	sp, r7
 801bb1e:	bd80      	pop	{r7, pc}
 801bb20:	200047b4 	.word	0x200047b4

0801bb24 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801bb24:	b580      	push	{r7, lr}
 801bb26:	b08a      	sub	sp, #40	; 0x28
 801bb28:	af00      	add	r7, sp, #0
 801bb2a:	60f8      	str	r0, [r7, #12]
 801bb2c:	460b      	mov	r3, r1
 801bb2e:	607a      	str	r2, [r7, #4]
 801bb30:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801bb32:	230a      	movs	r3, #10
 801bb34:	84fb      	strh	r3, [r7, #38]	; 0x26
 801bb36:	230a      	movs	r3, #10
 801bb38:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801bb3a:	230a      	movs	r3, #10
 801bb3c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801bb3e:	2300      	movs	r3, #0
 801bb40:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801bb42:	230a      	movs	r3, #10
 801bb44:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801bb46:	2300      	movs	r3, #0
 801bb48:	83bb      	strh	r3, [r7, #28]
 801bb4a:	2300      	movs	r3, #0
 801bb4c:	837b      	strh	r3, [r7, #26]
 801bb4e:	2300      	movs	r3, #0
 801bb50:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bb52:	2300      	movs	r3, #0
 801bb54:	843b      	strh	r3, [r7, #32]
 801bb56:	e0ae      	b.n	801bcb6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801bb58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bb5c:	49a6      	ldr	r1, [pc, #664]	; (801bdf8 <etharp_find_entry+0x2d4>)
 801bb5e:	4613      	mov	r3, r2
 801bb60:	005b      	lsls	r3, r3, #1
 801bb62:	4413      	add	r3, r2
 801bb64:	00db      	lsls	r3, r3, #3
 801bb66:	440b      	add	r3, r1
 801bb68:	3314      	adds	r3, #20
 801bb6a:	781b      	ldrb	r3, [r3, #0]
 801bb6c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801bb6e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801bb72:	2b0a      	cmp	r3, #10
 801bb74:	d105      	bne.n	801bb82 <etharp_find_entry+0x5e>
 801bb76:	7dfb      	ldrb	r3, [r7, #23]
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	d102      	bne.n	801bb82 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801bb7c:	8c3b      	ldrh	r3, [r7, #32]
 801bb7e:	847b      	strh	r3, [r7, #34]	; 0x22
 801bb80:	e095      	b.n	801bcae <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801bb82:	7dfb      	ldrb	r3, [r7, #23]
 801bb84:	2b00      	cmp	r3, #0
 801bb86:	f000 8092 	beq.w	801bcae <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801bb8a:	7dfb      	ldrb	r3, [r7, #23]
 801bb8c:	2b01      	cmp	r3, #1
 801bb8e:	d009      	beq.n	801bba4 <etharp_find_entry+0x80>
 801bb90:	7dfb      	ldrb	r3, [r7, #23]
 801bb92:	2b01      	cmp	r3, #1
 801bb94:	d806      	bhi.n	801bba4 <etharp_find_entry+0x80>
 801bb96:	4b99      	ldr	r3, [pc, #612]	; (801bdfc <etharp_find_entry+0x2d8>)
 801bb98:	f240 1223 	movw	r2, #291	; 0x123
 801bb9c:	4998      	ldr	r1, [pc, #608]	; (801be00 <etharp_find_entry+0x2dc>)
 801bb9e:	4899      	ldr	r0, [pc, #612]	; (801be04 <etharp_find_entry+0x2e0>)
 801bba0:	f003 fd8e 	bl	801f6c0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801bba4:	68fb      	ldr	r3, [r7, #12]
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d020      	beq.n	801bbec <etharp_find_entry+0xc8>
 801bbaa:	68fb      	ldr	r3, [r7, #12]
 801bbac:	6819      	ldr	r1, [r3, #0]
 801bbae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bbb2:	4891      	ldr	r0, [pc, #580]	; (801bdf8 <etharp_find_entry+0x2d4>)
 801bbb4:	4613      	mov	r3, r2
 801bbb6:	005b      	lsls	r3, r3, #1
 801bbb8:	4413      	add	r3, r2
 801bbba:	00db      	lsls	r3, r3, #3
 801bbbc:	4403      	add	r3, r0
 801bbbe:	3304      	adds	r3, #4
 801bbc0:	681b      	ldr	r3, [r3, #0]
 801bbc2:	4299      	cmp	r1, r3
 801bbc4:	d112      	bne.n	801bbec <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d00c      	beq.n	801bbe6 <etharp_find_entry+0xc2>
 801bbcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bbd0:	4989      	ldr	r1, [pc, #548]	; (801bdf8 <etharp_find_entry+0x2d4>)
 801bbd2:	4613      	mov	r3, r2
 801bbd4:	005b      	lsls	r3, r3, #1
 801bbd6:	4413      	add	r3, r2
 801bbd8:	00db      	lsls	r3, r3, #3
 801bbda:	440b      	add	r3, r1
 801bbdc:	3308      	adds	r3, #8
 801bbde:	681b      	ldr	r3, [r3, #0]
 801bbe0:	687a      	ldr	r2, [r7, #4]
 801bbe2:	429a      	cmp	r2, r3
 801bbe4:	d102      	bne.n	801bbec <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801bbe6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bbea:	e100      	b.n	801bdee <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801bbec:	7dfb      	ldrb	r3, [r7, #23]
 801bbee:	2b01      	cmp	r3, #1
 801bbf0:	d140      	bne.n	801bc74 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801bbf2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bbf6:	4980      	ldr	r1, [pc, #512]	; (801bdf8 <etharp_find_entry+0x2d4>)
 801bbf8:	4613      	mov	r3, r2
 801bbfa:	005b      	lsls	r3, r3, #1
 801bbfc:	4413      	add	r3, r2
 801bbfe:	00db      	lsls	r3, r3, #3
 801bc00:	440b      	add	r3, r1
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	d01a      	beq.n	801bc3e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801bc08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bc0c:	497a      	ldr	r1, [pc, #488]	; (801bdf8 <etharp_find_entry+0x2d4>)
 801bc0e:	4613      	mov	r3, r2
 801bc10:	005b      	lsls	r3, r3, #1
 801bc12:	4413      	add	r3, r2
 801bc14:	00db      	lsls	r3, r3, #3
 801bc16:	440b      	add	r3, r1
 801bc18:	3312      	adds	r3, #18
 801bc1a:	881b      	ldrh	r3, [r3, #0]
 801bc1c:	8bba      	ldrh	r2, [r7, #28]
 801bc1e:	429a      	cmp	r2, r3
 801bc20:	d845      	bhi.n	801bcae <etharp_find_entry+0x18a>
            old_queue = i;
 801bc22:	8c3b      	ldrh	r3, [r7, #32]
 801bc24:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801bc26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bc2a:	4973      	ldr	r1, [pc, #460]	; (801bdf8 <etharp_find_entry+0x2d4>)
 801bc2c:	4613      	mov	r3, r2
 801bc2e:	005b      	lsls	r3, r3, #1
 801bc30:	4413      	add	r3, r2
 801bc32:	00db      	lsls	r3, r3, #3
 801bc34:	440b      	add	r3, r1
 801bc36:	3312      	adds	r3, #18
 801bc38:	881b      	ldrh	r3, [r3, #0]
 801bc3a:	83bb      	strh	r3, [r7, #28]
 801bc3c:	e037      	b.n	801bcae <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801bc3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bc42:	496d      	ldr	r1, [pc, #436]	; (801bdf8 <etharp_find_entry+0x2d4>)
 801bc44:	4613      	mov	r3, r2
 801bc46:	005b      	lsls	r3, r3, #1
 801bc48:	4413      	add	r3, r2
 801bc4a:	00db      	lsls	r3, r3, #3
 801bc4c:	440b      	add	r3, r1
 801bc4e:	3312      	adds	r3, #18
 801bc50:	881b      	ldrh	r3, [r3, #0]
 801bc52:	8b7a      	ldrh	r2, [r7, #26]
 801bc54:	429a      	cmp	r2, r3
 801bc56:	d82a      	bhi.n	801bcae <etharp_find_entry+0x18a>
            old_pending = i;
 801bc58:	8c3b      	ldrh	r3, [r7, #32]
 801bc5a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801bc5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bc60:	4965      	ldr	r1, [pc, #404]	; (801bdf8 <etharp_find_entry+0x2d4>)
 801bc62:	4613      	mov	r3, r2
 801bc64:	005b      	lsls	r3, r3, #1
 801bc66:	4413      	add	r3, r2
 801bc68:	00db      	lsls	r3, r3, #3
 801bc6a:	440b      	add	r3, r1
 801bc6c:	3312      	adds	r3, #18
 801bc6e:	881b      	ldrh	r3, [r3, #0]
 801bc70:	837b      	strh	r3, [r7, #26]
 801bc72:	e01c      	b.n	801bcae <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801bc74:	7dfb      	ldrb	r3, [r7, #23]
 801bc76:	2b01      	cmp	r3, #1
 801bc78:	d919      	bls.n	801bcae <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801bc7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bc7e:	495e      	ldr	r1, [pc, #376]	; (801bdf8 <etharp_find_entry+0x2d4>)
 801bc80:	4613      	mov	r3, r2
 801bc82:	005b      	lsls	r3, r3, #1
 801bc84:	4413      	add	r3, r2
 801bc86:	00db      	lsls	r3, r3, #3
 801bc88:	440b      	add	r3, r1
 801bc8a:	3312      	adds	r3, #18
 801bc8c:	881b      	ldrh	r3, [r3, #0]
 801bc8e:	8b3a      	ldrh	r2, [r7, #24]
 801bc90:	429a      	cmp	r2, r3
 801bc92:	d80c      	bhi.n	801bcae <etharp_find_entry+0x18a>
            old_stable = i;
 801bc94:	8c3b      	ldrh	r3, [r7, #32]
 801bc96:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801bc98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bc9c:	4956      	ldr	r1, [pc, #344]	; (801bdf8 <etharp_find_entry+0x2d4>)
 801bc9e:	4613      	mov	r3, r2
 801bca0:	005b      	lsls	r3, r3, #1
 801bca2:	4413      	add	r3, r2
 801bca4:	00db      	lsls	r3, r3, #3
 801bca6:	440b      	add	r3, r1
 801bca8:	3312      	adds	r3, #18
 801bcaa:	881b      	ldrh	r3, [r3, #0]
 801bcac:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bcae:	8c3b      	ldrh	r3, [r7, #32]
 801bcb0:	3301      	adds	r3, #1
 801bcb2:	b29b      	uxth	r3, r3
 801bcb4:	843b      	strh	r3, [r7, #32]
 801bcb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bcba:	2b09      	cmp	r3, #9
 801bcbc:	f77f af4c 	ble.w	801bb58 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801bcc0:	7afb      	ldrb	r3, [r7, #11]
 801bcc2:	f003 0302 	and.w	r3, r3, #2
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	d108      	bne.n	801bcdc <etharp_find_entry+0x1b8>
 801bcca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801bcce:	2b0a      	cmp	r3, #10
 801bcd0:	d107      	bne.n	801bce2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801bcd2:	7afb      	ldrb	r3, [r7, #11]
 801bcd4:	f003 0301 	and.w	r3, r3, #1
 801bcd8:	2b00      	cmp	r3, #0
 801bcda:	d102      	bne.n	801bce2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801bcdc:	f04f 33ff 	mov.w	r3, #4294967295
 801bce0:	e085      	b.n	801bdee <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801bce2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801bce6:	2b09      	cmp	r3, #9
 801bce8:	dc02      	bgt.n	801bcf0 <etharp_find_entry+0x1cc>
    i = empty;
 801bcea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801bcec:	843b      	strh	r3, [r7, #32]
 801bcee:	e039      	b.n	801bd64 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801bcf0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801bcf4:	2b09      	cmp	r3, #9
 801bcf6:	dc14      	bgt.n	801bd22 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801bcf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bcfa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801bcfc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bd00:	493d      	ldr	r1, [pc, #244]	; (801bdf8 <etharp_find_entry+0x2d4>)
 801bd02:	4613      	mov	r3, r2
 801bd04:	005b      	lsls	r3, r3, #1
 801bd06:	4413      	add	r3, r2
 801bd08:	00db      	lsls	r3, r3, #3
 801bd0a:	440b      	add	r3, r1
 801bd0c:	681b      	ldr	r3, [r3, #0]
 801bd0e:	2b00      	cmp	r3, #0
 801bd10:	d018      	beq.n	801bd44 <etharp_find_entry+0x220>
 801bd12:	4b3a      	ldr	r3, [pc, #232]	; (801bdfc <etharp_find_entry+0x2d8>)
 801bd14:	f240 126d 	movw	r2, #365	; 0x16d
 801bd18:	493b      	ldr	r1, [pc, #236]	; (801be08 <etharp_find_entry+0x2e4>)
 801bd1a:	483a      	ldr	r0, [pc, #232]	; (801be04 <etharp_find_entry+0x2e0>)
 801bd1c:	f003 fcd0 	bl	801f6c0 <iprintf>
 801bd20:	e010      	b.n	801bd44 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801bd22:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801bd26:	2b09      	cmp	r3, #9
 801bd28:	dc02      	bgt.n	801bd30 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801bd2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bd2c:	843b      	strh	r3, [r7, #32]
 801bd2e:	e009      	b.n	801bd44 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801bd30:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801bd34:	2b09      	cmp	r3, #9
 801bd36:	dc02      	bgt.n	801bd3e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801bd38:	8bfb      	ldrh	r3, [r7, #30]
 801bd3a:	843b      	strh	r3, [r7, #32]
 801bd3c:	e002      	b.n	801bd44 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801bd3e:	f04f 33ff 	mov.w	r3, #4294967295
 801bd42:	e054      	b.n	801bdee <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801bd44:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bd48:	2b09      	cmp	r3, #9
 801bd4a:	dd06      	ble.n	801bd5a <etharp_find_entry+0x236>
 801bd4c:	4b2b      	ldr	r3, [pc, #172]	; (801bdfc <etharp_find_entry+0x2d8>)
 801bd4e:	f240 127f 	movw	r2, #383	; 0x17f
 801bd52:	492e      	ldr	r1, [pc, #184]	; (801be0c <etharp_find_entry+0x2e8>)
 801bd54:	482b      	ldr	r0, [pc, #172]	; (801be04 <etharp_find_entry+0x2e0>)
 801bd56:	f003 fcb3 	bl	801f6c0 <iprintf>
    etharp_free_entry(i);
 801bd5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bd5e:	4618      	mov	r0, r3
 801bd60:	f7ff fe06 	bl	801b970 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801bd64:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bd68:	2b09      	cmp	r3, #9
 801bd6a:	dd06      	ble.n	801bd7a <etharp_find_entry+0x256>
 801bd6c:	4b23      	ldr	r3, [pc, #140]	; (801bdfc <etharp_find_entry+0x2d8>)
 801bd6e:	f240 1283 	movw	r2, #387	; 0x183
 801bd72:	4926      	ldr	r1, [pc, #152]	; (801be0c <etharp_find_entry+0x2e8>)
 801bd74:	4823      	ldr	r0, [pc, #140]	; (801be04 <etharp_find_entry+0x2e0>)
 801bd76:	f003 fca3 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801bd7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bd7e:	491e      	ldr	r1, [pc, #120]	; (801bdf8 <etharp_find_entry+0x2d4>)
 801bd80:	4613      	mov	r3, r2
 801bd82:	005b      	lsls	r3, r3, #1
 801bd84:	4413      	add	r3, r2
 801bd86:	00db      	lsls	r3, r3, #3
 801bd88:	440b      	add	r3, r1
 801bd8a:	3314      	adds	r3, #20
 801bd8c:	781b      	ldrb	r3, [r3, #0]
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	d006      	beq.n	801bda0 <etharp_find_entry+0x27c>
 801bd92:	4b1a      	ldr	r3, [pc, #104]	; (801bdfc <etharp_find_entry+0x2d8>)
 801bd94:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801bd98:	491d      	ldr	r1, [pc, #116]	; (801be10 <etharp_find_entry+0x2ec>)
 801bd9a:	481a      	ldr	r0, [pc, #104]	; (801be04 <etharp_find_entry+0x2e0>)
 801bd9c:	f003 fc90 	bl	801f6c0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801bda0:	68fb      	ldr	r3, [r7, #12]
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	d00b      	beq.n	801bdbe <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801bda6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bdaa:	68fb      	ldr	r3, [r7, #12]
 801bdac:	6819      	ldr	r1, [r3, #0]
 801bdae:	4812      	ldr	r0, [pc, #72]	; (801bdf8 <etharp_find_entry+0x2d4>)
 801bdb0:	4613      	mov	r3, r2
 801bdb2:	005b      	lsls	r3, r3, #1
 801bdb4:	4413      	add	r3, r2
 801bdb6:	00db      	lsls	r3, r3, #3
 801bdb8:	4403      	add	r3, r0
 801bdba:	3304      	adds	r3, #4
 801bdbc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801bdbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bdc2:	490d      	ldr	r1, [pc, #52]	; (801bdf8 <etharp_find_entry+0x2d4>)
 801bdc4:	4613      	mov	r3, r2
 801bdc6:	005b      	lsls	r3, r3, #1
 801bdc8:	4413      	add	r3, r2
 801bdca:	00db      	lsls	r3, r3, #3
 801bdcc:	440b      	add	r3, r1
 801bdce:	3312      	adds	r3, #18
 801bdd0:	2200      	movs	r2, #0
 801bdd2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801bdd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bdd8:	4907      	ldr	r1, [pc, #28]	; (801bdf8 <etharp_find_entry+0x2d4>)
 801bdda:	4613      	mov	r3, r2
 801bddc:	005b      	lsls	r3, r3, #1
 801bdde:	4413      	add	r3, r2
 801bde0:	00db      	lsls	r3, r3, #3
 801bde2:	440b      	add	r3, r1
 801bde4:	3308      	adds	r3, #8
 801bde6:	687a      	ldr	r2, [r7, #4]
 801bde8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801bdea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801bdee:	4618      	mov	r0, r3
 801bdf0:	3728      	adds	r7, #40	; 0x28
 801bdf2:	46bd      	mov	sp, r7
 801bdf4:	bd80      	pop	{r7, pc}
 801bdf6:	bf00      	nop
 801bdf8:	200047b4 	.word	0x200047b4
 801bdfc:	08025ea4 	.word	0x08025ea4
 801be00:	08025edc 	.word	0x08025edc
 801be04:	08025f1c 	.word	0x08025f1c
 801be08:	08025f44 	.word	0x08025f44
 801be0c:	08025f5c 	.word	0x08025f5c
 801be10:	08025f70 	.word	0x08025f70

0801be14 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801be14:	b580      	push	{r7, lr}
 801be16:	b088      	sub	sp, #32
 801be18:	af02      	add	r7, sp, #8
 801be1a:	60f8      	str	r0, [r7, #12]
 801be1c:	60b9      	str	r1, [r7, #8]
 801be1e:	607a      	str	r2, [r7, #4]
 801be20:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801be22:	68fb      	ldr	r3, [r7, #12]
 801be24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801be28:	2b06      	cmp	r3, #6
 801be2a:	d006      	beq.n	801be3a <etharp_update_arp_entry+0x26>
 801be2c:	4b48      	ldr	r3, [pc, #288]	; (801bf50 <etharp_update_arp_entry+0x13c>)
 801be2e:	f240 12a9 	movw	r2, #425	; 0x1a9
 801be32:	4948      	ldr	r1, [pc, #288]	; (801bf54 <etharp_update_arp_entry+0x140>)
 801be34:	4848      	ldr	r0, [pc, #288]	; (801bf58 <etharp_update_arp_entry+0x144>)
 801be36:	f003 fc43 	bl	801f6c0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801be3a:	68bb      	ldr	r3, [r7, #8]
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d012      	beq.n	801be66 <etharp_update_arp_entry+0x52>
 801be40:	68bb      	ldr	r3, [r7, #8]
 801be42:	681b      	ldr	r3, [r3, #0]
 801be44:	2b00      	cmp	r3, #0
 801be46:	d00e      	beq.n	801be66 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801be48:	68bb      	ldr	r3, [r7, #8]
 801be4a:	681b      	ldr	r3, [r3, #0]
 801be4c:	68f9      	ldr	r1, [r7, #12]
 801be4e:	4618      	mov	r0, r3
 801be50:	f001 f8fe 	bl	801d050 <ip4_addr_isbroadcast_u32>
 801be54:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801be56:	2b00      	cmp	r3, #0
 801be58:	d105      	bne.n	801be66 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801be5a:	68bb      	ldr	r3, [r7, #8]
 801be5c:	681b      	ldr	r3, [r3, #0]
 801be5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801be62:	2be0      	cmp	r3, #224	; 0xe0
 801be64:	d102      	bne.n	801be6c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801be66:	f06f 030f 	mvn.w	r3, #15
 801be6a:	e06c      	b.n	801bf46 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801be6c:	78fb      	ldrb	r3, [r7, #3]
 801be6e:	68fa      	ldr	r2, [r7, #12]
 801be70:	4619      	mov	r1, r3
 801be72:	68b8      	ldr	r0, [r7, #8]
 801be74:	f7ff fe56 	bl	801bb24 <etharp_find_entry>
 801be78:	4603      	mov	r3, r0
 801be7a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801be7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801be80:	2b00      	cmp	r3, #0
 801be82:	da02      	bge.n	801be8a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801be84:	8afb      	ldrh	r3, [r7, #22]
 801be86:	b25b      	sxtb	r3, r3
 801be88:	e05d      	b.n	801bf46 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801be8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801be8e:	4933      	ldr	r1, [pc, #204]	; (801bf5c <etharp_update_arp_entry+0x148>)
 801be90:	4613      	mov	r3, r2
 801be92:	005b      	lsls	r3, r3, #1
 801be94:	4413      	add	r3, r2
 801be96:	00db      	lsls	r3, r3, #3
 801be98:	440b      	add	r3, r1
 801be9a:	3314      	adds	r3, #20
 801be9c:	2202      	movs	r2, #2
 801be9e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801bea0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bea4:	492d      	ldr	r1, [pc, #180]	; (801bf5c <etharp_update_arp_entry+0x148>)
 801bea6:	4613      	mov	r3, r2
 801bea8:	005b      	lsls	r3, r3, #1
 801beaa:	4413      	add	r3, r2
 801beac:	00db      	lsls	r3, r3, #3
 801beae:	440b      	add	r3, r1
 801beb0:	3308      	adds	r3, #8
 801beb2:	68fa      	ldr	r2, [r7, #12]
 801beb4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801beb6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801beba:	4613      	mov	r3, r2
 801bebc:	005b      	lsls	r3, r3, #1
 801bebe:	4413      	add	r3, r2
 801bec0:	00db      	lsls	r3, r3, #3
 801bec2:	3308      	adds	r3, #8
 801bec4:	4a25      	ldr	r2, [pc, #148]	; (801bf5c <etharp_update_arp_entry+0x148>)
 801bec6:	4413      	add	r3, r2
 801bec8:	3304      	adds	r3, #4
 801beca:	2206      	movs	r2, #6
 801becc:	6879      	ldr	r1, [r7, #4]
 801bece:	4618      	mov	r0, r3
 801bed0:	f003 f948 	bl	801f164 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801bed4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bed8:	4920      	ldr	r1, [pc, #128]	; (801bf5c <etharp_update_arp_entry+0x148>)
 801beda:	4613      	mov	r3, r2
 801bedc:	005b      	lsls	r3, r3, #1
 801bede:	4413      	add	r3, r2
 801bee0:	00db      	lsls	r3, r3, #3
 801bee2:	440b      	add	r3, r1
 801bee4:	3312      	adds	r3, #18
 801bee6:	2200      	movs	r2, #0
 801bee8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801beea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801beee:	491b      	ldr	r1, [pc, #108]	; (801bf5c <etharp_update_arp_entry+0x148>)
 801bef0:	4613      	mov	r3, r2
 801bef2:	005b      	lsls	r3, r3, #1
 801bef4:	4413      	add	r3, r2
 801bef6:	00db      	lsls	r3, r3, #3
 801bef8:	440b      	add	r3, r1
 801befa:	681b      	ldr	r3, [r3, #0]
 801befc:	2b00      	cmp	r3, #0
 801befe:	d021      	beq.n	801bf44 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801bf00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bf04:	4915      	ldr	r1, [pc, #84]	; (801bf5c <etharp_update_arp_entry+0x148>)
 801bf06:	4613      	mov	r3, r2
 801bf08:	005b      	lsls	r3, r3, #1
 801bf0a:	4413      	add	r3, r2
 801bf0c:	00db      	lsls	r3, r3, #3
 801bf0e:	440b      	add	r3, r1
 801bf10:	681b      	ldr	r3, [r3, #0]
 801bf12:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801bf14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bf18:	4910      	ldr	r1, [pc, #64]	; (801bf5c <etharp_update_arp_entry+0x148>)
 801bf1a:	4613      	mov	r3, r2
 801bf1c:	005b      	lsls	r3, r3, #1
 801bf1e:	4413      	add	r3, r2
 801bf20:	00db      	lsls	r3, r3, #3
 801bf22:	440b      	add	r3, r1
 801bf24:	2200      	movs	r2, #0
 801bf26:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801bf28:	68fb      	ldr	r3, [r7, #12]
 801bf2a:	f103 0222 	add.w	r2, r3, #34	; 0x22
 801bf2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801bf32:	9300      	str	r3, [sp, #0]
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	6939      	ldr	r1, [r7, #16]
 801bf38:	68f8      	ldr	r0, [r7, #12]
 801bf3a:	f002 f8bb 	bl	801e0b4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801bf3e:	6938      	ldr	r0, [r7, #16]
 801bf40:	f7f8 fb56 	bl	80145f0 <pbuf_free>
  }
  return ERR_OK;
 801bf44:	2300      	movs	r3, #0
}
 801bf46:	4618      	mov	r0, r3
 801bf48:	3718      	adds	r7, #24
 801bf4a:	46bd      	mov	sp, r7
 801bf4c:	bd80      	pop	{r7, pc}
 801bf4e:	bf00      	nop
 801bf50:	08025ea4 	.word	0x08025ea4
 801bf54:	08025f9c 	.word	0x08025f9c
 801bf58:	08025f1c 	.word	0x08025f1c
 801bf5c:	200047b4 	.word	0x200047b4

0801bf60 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801bf60:	b580      	push	{r7, lr}
 801bf62:	b084      	sub	sp, #16
 801bf64:	af00      	add	r7, sp, #0
 801bf66:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bf68:	2300      	movs	r3, #0
 801bf6a:	60fb      	str	r3, [r7, #12]
 801bf6c:	e01e      	b.n	801bfac <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801bf6e:	4913      	ldr	r1, [pc, #76]	; (801bfbc <etharp_cleanup_netif+0x5c>)
 801bf70:	68fa      	ldr	r2, [r7, #12]
 801bf72:	4613      	mov	r3, r2
 801bf74:	005b      	lsls	r3, r3, #1
 801bf76:	4413      	add	r3, r2
 801bf78:	00db      	lsls	r3, r3, #3
 801bf7a:	440b      	add	r3, r1
 801bf7c:	3314      	adds	r3, #20
 801bf7e:	781b      	ldrb	r3, [r3, #0]
 801bf80:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801bf82:	7afb      	ldrb	r3, [r7, #11]
 801bf84:	2b00      	cmp	r3, #0
 801bf86:	d00e      	beq.n	801bfa6 <etharp_cleanup_netif+0x46>
 801bf88:	490c      	ldr	r1, [pc, #48]	; (801bfbc <etharp_cleanup_netif+0x5c>)
 801bf8a:	68fa      	ldr	r2, [r7, #12]
 801bf8c:	4613      	mov	r3, r2
 801bf8e:	005b      	lsls	r3, r3, #1
 801bf90:	4413      	add	r3, r2
 801bf92:	00db      	lsls	r3, r3, #3
 801bf94:	440b      	add	r3, r1
 801bf96:	3308      	adds	r3, #8
 801bf98:	681b      	ldr	r3, [r3, #0]
 801bf9a:	687a      	ldr	r2, [r7, #4]
 801bf9c:	429a      	cmp	r2, r3
 801bf9e:	d102      	bne.n	801bfa6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801bfa0:	68f8      	ldr	r0, [r7, #12]
 801bfa2:	f7ff fce5 	bl	801b970 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bfa6:	68fb      	ldr	r3, [r7, #12]
 801bfa8:	3301      	adds	r3, #1
 801bfaa:	60fb      	str	r3, [r7, #12]
 801bfac:	68fb      	ldr	r3, [r7, #12]
 801bfae:	2b09      	cmp	r3, #9
 801bfb0:	dddd      	ble.n	801bf6e <etharp_cleanup_netif+0xe>
    }
  }
}
 801bfb2:	bf00      	nop
 801bfb4:	bf00      	nop
 801bfb6:	3710      	adds	r7, #16
 801bfb8:	46bd      	mov	sp, r7
 801bfba:	bd80      	pop	{r7, pc}
 801bfbc:	200047b4 	.word	0x200047b4

0801bfc0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801bfc0:	b5b0      	push	{r4, r5, r7, lr}
 801bfc2:	b08a      	sub	sp, #40	; 0x28
 801bfc4:	af04      	add	r7, sp, #16
 801bfc6:	6078      	str	r0, [r7, #4]
 801bfc8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801bfca:	683b      	ldr	r3, [r7, #0]
 801bfcc:	2b00      	cmp	r3, #0
 801bfce:	d107      	bne.n	801bfe0 <etharp_input+0x20>
 801bfd0:	4b3d      	ldr	r3, [pc, #244]	; (801c0c8 <etharp_input+0x108>)
 801bfd2:	f240 228a 	movw	r2, #650	; 0x28a
 801bfd6:	493d      	ldr	r1, [pc, #244]	; (801c0cc <etharp_input+0x10c>)
 801bfd8:	483d      	ldr	r0, [pc, #244]	; (801c0d0 <etharp_input+0x110>)
 801bfda:	f003 fb71 	bl	801f6c0 <iprintf>
 801bfde:	e06f      	b.n	801c0c0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	685b      	ldr	r3, [r3, #4]
 801bfe4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801bfe6:	693b      	ldr	r3, [r7, #16]
 801bfe8:	881b      	ldrh	r3, [r3, #0]
 801bfea:	b29b      	uxth	r3, r3
 801bfec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bff0:	d10c      	bne.n	801c00c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801bff2:	693b      	ldr	r3, [r7, #16]
 801bff4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801bff6:	2b06      	cmp	r3, #6
 801bff8:	d108      	bne.n	801c00c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801bffa:	693b      	ldr	r3, [r7, #16]
 801bffc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801bffe:	2b04      	cmp	r3, #4
 801c000:	d104      	bne.n	801c00c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801c002:	693b      	ldr	r3, [r7, #16]
 801c004:	885b      	ldrh	r3, [r3, #2]
 801c006:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c008:	2b08      	cmp	r3, #8
 801c00a:	d003      	beq.n	801c014 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801c00c:	6878      	ldr	r0, [r7, #4]
 801c00e:	f7f8 faef 	bl	80145f0 <pbuf_free>
    return;
 801c012:	e055      	b.n	801c0c0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801c014:	693b      	ldr	r3, [r7, #16]
 801c016:	330e      	adds	r3, #14
 801c018:	681b      	ldr	r3, [r3, #0]
 801c01a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801c01c:	693b      	ldr	r3, [r7, #16]
 801c01e:	3318      	adds	r3, #24
 801c020:	681b      	ldr	r3, [r3, #0]
 801c022:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c024:	683b      	ldr	r3, [r7, #0]
 801c026:	3304      	adds	r3, #4
 801c028:	681b      	ldr	r3, [r3, #0]
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	d102      	bne.n	801c034 <etharp_input+0x74>
    for_us = 0;
 801c02e:	2300      	movs	r3, #0
 801c030:	75fb      	strb	r3, [r7, #23]
 801c032:	e009      	b.n	801c048 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801c034:	68ba      	ldr	r2, [r7, #8]
 801c036:	683b      	ldr	r3, [r7, #0]
 801c038:	3304      	adds	r3, #4
 801c03a:	681b      	ldr	r3, [r3, #0]
 801c03c:	429a      	cmp	r2, r3
 801c03e:	bf0c      	ite	eq
 801c040:	2301      	moveq	r3, #1
 801c042:	2300      	movne	r3, #0
 801c044:	b2db      	uxtb	r3, r3
 801c046:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801c048:	693b      	ldr	r3, [r7, #16]
 801c04a:	f103 0208 	add.w	r2, r3, #8
 801c04e:	7dfb      	ldrb	r3, [r7, #23]
 801c050:	2b00      	cmp	r3, #0
 801c052:	d001      	beq.n	801c058 <etharp_input+0x98>
 801c054:	2301      	movs	r3, #1
 801c056:	e000      	b.n	801c05a <etharp_input+0x9a>
 801c058:	2302      	movs	r3, #2
 801c05a:	f107 010c 	add.w	r1, r7, #12
 801c05e:	6838      	ldr	r0, [r7, #0]
 801c060:	f7ff fed8 	bl	801be14 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801c064:	693b      	ldr	r3, [r7, #16]
 801c066:	88db      	ldrh	r3, [r3, #6]
 801c068:	b29b      	uxth	r3, r3
 801c06a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c06e:	d003      	beq.n	801c078 <etharp_input+0xb8>
 801c070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c074:	d01e      	beq.n	801c0b4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801c076:	e020      	b.n	801c0ba <etharp_input+0xfa>
      if (for_us) {
 801c078:	7dfb      	ldrb	r3, [r7, #23]
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d01c      	beq.n	801c0b8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801c07e:	683b      	ldr	r3, [r7, #0]
 801c080:	f103 0022 	add.w	r0, r3, #34	; 0x22
 801c084:	693b      	ldr	r3, [r7, #16]
 801c086:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801c08a:	683b      	ldr	r3, [r7, #0]
 801c08c:	f103 0522 	add.w	r5, r3, #34	; 0x22
 801c090:	683b      	ldr	r3, [r7, #0]
 801c092:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801c094:	693a      	ldr	r2, [r7, #16]
 801c096:	3208      	adds	r2, #8
        etharp_raw(netif,
 801c098:	2102      	movs	r1, #2
 801c09a:	9103      	str	r1, [sp, #12]
 801c09c:	f107 010c 	add.w	r1, r7, #12
 801c0a0:	9102      	str	r1, [sp, #8]
 801c0a2:	9201      	str	r2, [sp, #4]
 801c0a4:	9300      	str	r3, [sp, #0]
 801c0a6:	462b      	mov	r3, r5
 801c0a8:	4622      	mov	r2, r4
 801c0aa:	4601      	mov	r1, r0
 801c0ac:	6838      	ldr	r0, [r7, #0]
 801c0ae:	f000 faeb 	bl	801c688 <etharp_raw>
      break;
 801c0b2:	e001      	b.n	801c0b8 <etharp_input+0xf8>
      break;
 801c0b4:	bf00      	nop
 801c0b6:	e000      	b.n	801c0ba <etharp_input+0xfa>
      break;
 801c0b8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801c0ba:	6878      	ldr	r0, [r7, #4]
 801c0bc:	f7f8 fa98 	bl	80145f0 <pbuf_free>
}
 801c0c0:	3718      	adds	r7, #24
 801c0c2:	46bd      	mov	sp, r7
 801c0c4:	bdb0      	pop	{r4, r5, r7, pc}
 801c0c6:	bf00      	nop
 801c0c8:	08025ea4 	.word	0x08025ea4
 801c0cc:	08025ff4 	.word	0x08025ff4
 801c0d0:	08025f1c 	.word	0x08025f1c

0801c0d4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801c0d4:	b580      	push	{r7, lr}
 801c0d6:	b086      	sub	sp, #24
 801c0d8:	af02      	add	r7, sp, #8
 801c0da:	60f8      	str	r0, [r7, #12]
 801c0dc:	60b9      	str	r1, [r7, #8]
 801c0de:	4613      	mov	r3, r2
 801c0e0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801c0e2:	79fa      	ldrb	r2, [r7, #7]
 801c0e4:	4944      	ldr	r1, [pc, #272]	; (801c1f8 <etharp_output_to_arp_index+0x124>)
 801c0e6:	4613      	mov	r3, r2
 801c0e8:	005b      	lsls	r3, r3, #1
 801c0ea:	4413      	add	r3, r2
 801c0ec:	00db      	lsls	r3, r3, #3
 801c0ee:	440b      	add	r3, r1
 801c0f0:	3314      	adds	r3, #20
 801c0f2:	781b      	ldrb	r3, [r3, #0]
 801c0f4:	2b01      	cmp	r3, #1
 801c0f6:	d806      	bhi.n	801c106 <etharp_output_to_arp_index+0x32>
 801c0f8:	4b40      	ldr	r3, [pc, #256]	; (801c1fc <etharp_output_to_arp_index+0x128>)
 801c0fa:	f240 22ee 	movw	r2, #750	; 0x2ee
 801c0fe:	4940      	ldr	r1, [pc, #256]	; (801c200 <etharp_output_to_arp_index+0x12c>)
 801c100:	4840      	ldr	r0, [pc, #256]	; (801c204 <etharp_output_to_arp_index+0x130>)
 801c102:	f003 fadd 	bl	801f6c0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801c106:	79fa      	ldrb	r2, [r7, #7]
 801c108:	493b      	ldr	r1, [pc, #236]	; (801c1f8 <etharp_output_to_arp_index+0x124>)
 801c10a:	4613      	mov	r3, r2
 801c10c:	005b      	lsls	r3, r3, #1
 801c10e:	4413      	add	r3, r2
 801c110:	00db      	lsls	r3, r3, #3
 801c112:	440b      	add	r3, r1
 801c114:	3314      	adds	r3, #20
 801c116:	781b      	ldrb	r3, [r3, #0]
 801c118:	2b02      	cmp	r3, #2
 801c11a:	d153      	bne.n	801c1c4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801c11c:	79fa      	ldrb	r2, [r7, #7]
 801c11e:	4936      	ldr	r1, [pc, #216]	; (801c1f8 <etharp_output_to_arp_index+0x124>)
 801c120:	4613      	mov	r3, r2
 801c122:	005b      	lsls	r3, r3, #1
 801c124:	4413      	add	r3, r2
 801c126:	00db      	lsls	r3, r3, #3
 801c128:	440b      	add	r3, r1
 801c12a:	3312      	adds	r3, #18
 801c12c:	881b      	ldrh	r3, [r3, #0]
 801c12e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801c132:	d919      	bls.n	801c168 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801c134:	79fa      	ldrb	r2, [r7, #7]
 801c136:	4613      	mov	r3, r2
 801c138:	005b      	lsls	r3, r3, #1
 801c13a:	4413      	add	r3, r2
 801c13c:	00db      	lsls	r3, r3, #3
 801c13e:	4a2e      	ldr	r2, [pc, #184]	; (801c1f8 <etharp_output_to_arp_index+0x124>)
 801c140:	4413      	add	r3, r2
 801c142:	3304      	adds	r3, #4
 801c144:	4619      	mov	r1, r3
 801c146:	68f8      	ldr	r0, [r7, #12]
 801c148:	f000 fb4c 	bl	801c7e4 <etharp_request>
 801c14c:	4603      	mov	r3, r0
 801c14e:	2b00      	cmp	r3, #0
 801c150:	d138      	bne.n	801c1c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c152:	79fa      	ldrb	r2, [r7, #7]
 801c154:	4928      	ldr	r1, [pc, #160]	; (801c1f8 <etharp_output_to_arp_index+0x124>)
 801c156:	4613      	mov	r3, r2
 801c158:	005b      	lsls	r3, r3, #1
 801c15a:	4413      	add	r3, r2
 801c15c:	00db      	lsls	r3, r3, #3
 801c15e:	440b      	add	r3, r1
 801c160:	3314      	adds	r3, #20
 801c162:	2203      	movs	r2, #3
 801c164:	701a      	strb	r2, [r3, #0]
 801c166:	e02d      	b.n	801c1c4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801c168:	79fa      	ldrb	r2, [r7, #7]
 801c16a:	4923      	ldr	r1, [pc, #140]	; (801c1f8 <etharp_output_to_arp_index+0x124>)
 801c16c:	4613      	mov	r3, r2
 801c16e:	005b      	lsls	r3, r3, #1
 801c170:	4413      	add	r3, r2
 801c172:	00db      	lsls	r3, r3, #3
 801c174:	440b      	add	r3, r1
 801c176:	3312      	adds	r3, #18
 801c178:	881b      	ldrh	r3, [r3, #0]
 801c17a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801c17e:	d321      	bcc.n	801c1c4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801c180:	79fa      	ldrb	r2, [r7, #7]
 801c182:	4613      	mov	r3, r2
 801c184:	005b      	lsls	r3, r3, #1
 801c186:	4413      	add	r3, r2
 801c188:	00db      	lsls	r3, r3, #3
 801c18a:	4a1b      	ldr	r2, [pc, #108]	; (801c1f8 <etharp_output_to_arp_index+0x124>)
 801c18c:	4413      	add	r3, r2
 801c18e:	1d19      	adds	r1, r3, #4
 801c190:	79fa      	ldrb	r2, [r7, #7]
 801c192:	4613      	mov	r3, r2
 801c194:	005b      	lsls	r3, r3, #1
 801c196:	4413      	add	r3, r2
 801c198:	00db      	lsls	r3, r3, #3
 801c19a:	3308      	adds	r3, #8
 801c19c:	4a16      	ldr	r2, [pc, #88]	; (801c1f8 <etharp_output_to_arp_index+0x124>)
 801c19e:	4413      	add	r3, r2
 801c1a0:	3304      	adds	r3, #4
 801c1a2:	461a      	mov	r2, r3
 801c1a4:	68f8      	ldr	r0, [r7, #12]
 801c1a6:	f000 fafb 	bl	801c7a0 <etharp_request_dst>
 801c1aa:	4603      	mov	r3, r0
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	d109      	bne.n	801c1c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c1b0:	79fa      	ldrb	r2, [r7, #7]
 801c1b2:	4911      	ldr	r1, [pc, #68]	; (801c1f8 <etharp_output_to_arp_index+0x124>)
 801c1b4:	4613      	mov	r3, r2
 801c1b6:	005b      	lsls	r3, r3, #1
 801c1b8:	4413      	add	r3, r2
 801c1ba:	00db      	lsls	r3, r3, #3
 801c1bc:	440b      	add	r3, r1
 801c1be:	3314      	adds	r3, #20
 801c1c0:	2203      	movs	r2, #3
 801c1c2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801c1c4:	68fb      	ldr	r3, [r7, #12]
 801c1c6:	f103 0122 	add.w	r1, r3, #34	; 0x22
 801c1ca:	79fa      	ldrb	r2, [r7, #7]
 801c1cc:	4613      	mov	r3, r2
 801c1ce:	005b      	lsls	r3, r3, #1
 801c1d0:	4413      	add	r3, r2
 801c1d2:	00db      	lsls	r3, r3, #3
 801c1d4:	3308      	adds	r3, #8
 801c1d6:	4a08      	ldr	r2, [pc, #32]	; (801c1f8 <etharp_output_to_arp_index+0x124>)
 801c1d8:	4413      	add	r3, r2
 801c1da:	3304      	adds	r3, #4
 801c1dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c1e0:	9200      	str	r2, [sp, #0]
 801c1e2:	460a      	mov	r2, r1
 801c1e4:	68b9      	ldr	r1, [r7, #8]
 801c1e6:	68f8      	ldr	r0, [r7, #12]
 801c1e8:	f001 ff64 	bl	801e0b4 <ethernet_output>
 801c1ec:	4603      	mov	r3, r0
}
 801c1ee:	4618      	mov	r0, r3
 801c1f0:	3710      	adds	r7, #16
 801c1f2:	46bd      	mov	sp, r7
 801c1f4:	bd80      	pop	{r7, pc}
 801c1f6:	bf00      	nop
 801c1f8:	200047b4 	.word	0x200047b4
 801c1fc:	08025ea4 	.word	0x08025ea4
 801c200:	08026014 	.word	0x08026014
 801c204:	08025f1c 	.word	0x08025f1c

0801c208 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801c208:	b580      	push	{r7, lr}
 801c20a:	b08a      	sub	sp, #40	; 0x28
 801c20c:	af02      	add	r7, sp, #8
 801c20e:	60f8      	str	r0, [r7, #12]
 801c210:	60b9      	str	r1, [r7, #8]
 801c212:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801c214:	687b      	ldr	r3, [r7, #4]
 801c216:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c218:	68fb      	ldr	r3, [r7, #12]
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	d106      	bne.n	801c22c <etharp_output+0x24>
 801c21e:	4b73      	ldr	r3, [pc, #460]	; (801c3ec <etharp_output+0x1e4>)
 801c220:	f240 321e 	movw	r2, #798	; 0x31e
 801c224:	4972      	ldr	r1, [pc, #456]	; (801c3f0 <etharp_output+0x1e8>)
 801c226:	4873      	ldr	r0, [pc, #460]	; (801c3f4 <etharp_output+0x1ec>)
 801c228:	f003 fa4a 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801c22c:	68bb      	ldr	r3, [r7, #8]
 801c22e:	2b00      	cmp	r3, #0
 801c230:	d106      	bne.n	801c240 <etharp_output+0x38>
 801c232:	4b6e      	ldr	r3, [pc, #440]	; (801c3ec <etharp_output+0x1e4>)
 801c234:	f240 321f 	movw	r2, #799	; 0x31f
 801c238:	496f      	ldr	r1, [pc, #444]	; (801c3f8 <etharp_output+0x1f0>)
 801c23a:	486e      	ldr	r0, [pc, #440]	; (801c3f4 <etharp_output+0x1ec>)
 801c23c:	f003 fa40 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	2b00      	cmp	r3, #0
 801c244:	d106      	bne.n	801c254 <etharp_output+0x4c>
 801c246:	4b69      	ldr	r3, [pc, #420]	; (801c3ec <etharp_output+0x1e4>)
 801c248:	f44f 7248 	mov.w	r2, #800	; 0x320
 801c24c:	496b      	ldr	r1, [pc, #428]	; (801c3fc <etharp_output+0x1f4>)
 801c24e:	4869      	ldr	r0, [pc, #420]	; (801c3f4 <etharp_output+0x1ec>)
 801c250:	f003 fa36 	bl	801f6c0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801c254:	687b      	ldr	r3, [r7, #4]
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	68f9      	ldr	r1, [r7, #12]
 801c25a:	4618      	mov	r0, r3
 801c25c:	f000 fef8 	bl	801d050 <ip4_addr_isbroadcast_u32>
 801c260:	4603      	mov	r3, r0
 801c262:	2b00      	cmp	r3, #0
 801c264:	d002      	beq.n	801c26c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801c266:	4b66      	ldr	r3, [pc, #408]	; (801c400 <etharp_output+0x1f8>)
 801c268:	61fb      	str	r3, [r7, #28]
 801c26a:	e0af      	b.n	801c3cc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	681b      	ldr	r3, [r3, #0]
 801c270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c274:	2be0      	cmp	r3, #224	; 0xe0
 801c276:	d118      	bne.n	801c2aa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801c278:	2301      	movs	r3, #1
 801c27a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801c27c:	2300      	movs	r3, #0
 801c27e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801c280:	235e      	movs	r3, #94	; 0x5e
 801c282:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801c284:	687b      	ldr	r3, [r7, #4]
 801c286:	3301      	adds	r3, #1
 801c288:	781b      	ldrb	r3, [r3, #0]
 801c28a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c28e:	b2db      	uxtb	r3, r3
 801c290:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	3302      	adds	r3, #2
 801c296:	781b      	ldrb	r3, [r3, #0]
 801c298:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	3303      	adds	r3, #3
 801c29e:	781b      	ldrb	r3, [r3, #0]
 801c2a0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801c2a2:	f107 0310 	add.w	r3, r7, #16
 801c2a6:	61fb      	str	r3, [r7, #28]
 801c2a8:	e090      	b.n	801c3cc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c2aa:	687b      	ldr	r3, [r7, #4]
 801c2ac:	681a      	ldr	r2, [r3, #0]
 801c2ae:	68fb      	ldr	r3, [r7, #12]
 801c2b0:	3304      	adds	r3, #4
 801c2b2:	681b      	ldr	r3, [r3, #0]
 801c2b4:	405a      	eors	r2, r3
 801c2b6:	68fb      	ldr	r3, [r7, #12]
 801c2b8:	3308      	adds	r3, #8
 801c2ba:	681b      	ldr	r3, [r3, #0]
 801c2bc:	4013      	ands	r3, r2
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d012      	beq.n	801c2e8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801c2c2:	687b      	ldr	r3, [r7, #4]
 801c2c4:	681b      	ldr	r3, [r3, #0]
 801c2c6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c2c8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801c2cc:	4293      	cmp	r3, r2
 801c2ce:	d00b      	beq.n	801c2e8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801c2d0:	68fb      	ldr	r3, [r7, #12]
 801c2d2:	330c      	adds	r3, #12
 801c2d4:	681b      	ldr	r3, [r3, #0]
 801c2d6:	2b00      	cmp	r3, #0
 801c2d8:	d003      	beq.n	801c2e2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801c2da:	68fb      	ldr	r3, [r7, #12]
 801c2dc:	330c      	adds	r3, #12
 801c2de:	61bb      	str	r3, [r7, #24]
 801c2e0:	e002      	b.n	801c2e8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801c2e2:	f06f 0303 	mvn.w	r3, #3
 801c2e6:	e07d      	b.n	801c3e4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c2e8:	4b46      	ldr	r3, [pc, #280]	; (801c404 <etharp_output+0x1fc>)
 801c2ea:	781b      	ldrb	r3, [r3, #0]
 801c2ec:	4619      	mov	r1, r3
 801c2ee:	4a46      	ldr	r2, [pc, #280]	; (801c408 <etharp_output+0x200>)
 801c2f0:	460b      	mov	r3, r1
 801c2f2:	005b      	lsls	r3, r3, #1
 801c2f4:	440b      	add	r3, r1
 801c2f6:	00db      	lsls	r3, r3, #3
 801c2f8:	4413      	add	r3, r2
 801c2fa:	3314      	adds	r3, #20
 801c2fc:	781b      	ldrb	r3, [r3, #0]
 801c2fe:	2b01      	cmp	r3, #1
 801c300:	d925      	bls.n	801c34e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c302:	4b40      	ldr	r3, [pc, #256]	; (801c404 <etharp_output+0x1fc>)
 801c304:	781b      	ldrb	r3, [r3, #0]
 801c306:	4619      	mov	r1, r3
 801c308:	4a3f      	ldr	r2, [pc, #252]	; (801c408 <etharp_output+0x200>)
 801c30a:	460b      	mov	r3, r1
 801c30c:	005b      	lsls	r3, r3, #1
 801c30e:	440b      	add	r3, r1
 801c310:	00db      	lsls	r3, r3, #3
 801c312:	4413      	add	r3, r2
 801c314:	3308      	adds	r3, #8
 801c316:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c318:	68fa      	ldr	r2, [r7, #12]
 801c31a:	429a      	cmp	r2, r3
 801c31c:	d117      	bne.n	801c34e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801c31e:	69bb      	ldr	r3, [r7, #24]
 801c320:	681a      	ldr	r2, [r3, #0]
 801c322:	4b38      	ldr	r3, [pc, #224]	; (801c404 <etharp_output+0x1fc>)
 801c324:	781b      	ldrb	r3, [r3, #0]
 801c326:	4618      	mov	r0, r3
 801c328:	4937      	ldr	r1, [pc, #220]	; (801c408 <etharp_output+0x200>)
 801c32a:	4603      	mov	r3, r0
 801c32c:	005b      	lsls	r3, r3, #1
 801c32e:	4403      	add	r3, r0
 801c330:	00db      	lsls	r3, r3, #3
 801c332:	440b      	add	r3, r1
 801c334:	3304      	adds	r3, #4
 801c336:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c338:	429a      	cmp	r2, r3
 801c33a:	d108      	bne.n	801c34e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801c33c:	4b31      	ldr	r3, [pc, #196]	; (801c404 <etharp_output+0x1fc>)
 801c33e:	781b      	ldrb	r3, [r3, #0]
 801c340:	461a      	mov	r2, r3
 801c342:	68b9      	ldr	r1, [r7, #8]
 801c344:	68f8      	ldr	r0, [r7, #12]
 801c346:	f7ff fec5 	bl	801c0d4 <etharp_output_to_arp_index>
 801c34a:	4603      	mov	r3, r0
 801c34c:	e04a      	b.n	801c3e4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c34e:	2300      	movs	r3, #0
 801c350:	75fb      	strb	r3, [r7, #23]
 801c352:	e031      	b.n	801c3b8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c354:	7dfa      	ldrb	r2, [r7, #23]
 801c356:	492c      	ldr	r1, [pc, #176]	; (801c408 <etharp_output+0x200>)
 801c358:	4613      	mov	r3, r2
 801c35a:	005b      	lsls	r3, r3, #1
 801c35c:	4413      	add	r3, r2
 801c35e:	00db      	lsls	r3, r3, #3
 801c360:	440b      	add	r3, r1
 801c362:	3314      	adds	r3, #20
 801c364:	781b      	ldrb	r3, [r3, #0]
 801c366:	2b01      	cmp	r3, #1
 801c368:	d923      	bls.n	801c3b2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801c36a:	7dfa      	ldrb	r2, [r7, #23]
 801c36c:	4926      	ldr	r1, [pc, #152]	; (801c408 <etharp_output+0x200>)
 801c36e:	4613      	mov	r3, r2
 801c370:	005b      	lsls	r3, r3, #1
 801c372:	4413      	add	r3, r2
 801c374:	00db      	lsls	r3, r3, #3
 801c376:	440b      	add	r3, r1
 801c378:	3308      	adds	r3, #8
 801c37a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c37c:	68fa      	ldr	r2, [r7, #12]
 801c37e:	429a      	cmp	r2, r3
 801c380:	d117      	bne.n	801c3b2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801c382:	69bb      	ldr	r3, [r7, #24]
 801c384:	6819      	ldr	r1, [r3, #0]
 801c386:	7dfa      	ldrb	r2, [r7, #23]
 801c388:	481f      	ldr	r0, [pc, #124]	; (801c408 <etharp_output+0x200>)
 801c38a:	4613      	mov	r3, r2
 801c38c:	005b      	lsls	r3, r3, #1
 801c38e:	4413      	add	r3, r2
 801c390:	00db      	lsls	r3, r3, #3
 801c392:	4403      	add	r3, r0
 801c394:	3304      	adds	r3, #4
 801c396:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801c398:	4299      	cmp	r1, r3
 801c39a:	d10a      	bne.n	801c3b2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801c39c:	4a19      	ldr	r2, [pc, #100]	; (801c404 <etharp_output+0x1fc>)
 801c39e:	7dfb      	ldrb	r3, [r7, #23]
 801c3a0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801c3a2:	7dfb      	ldrb	r3, [r7, #23]
 801c3a4:	461a      	mov	r2, r3
 801c3a6:	68b9      	ldr	r1, [r7, #8]
 801c3a8:	68f8      	ldr	r0, [r7, #12]
 801c3aa:	f7ff fe93 	bl	801c0d4 <etharp_output_to_arp_index>
 801c3ae:	4603      	mov	r3, r0
 801c3b0:	e018      	b.n	801c3e4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c3b2:	7dfb      	ldrb	r3, [r7, #23]
 801c3b4:	3301      	adds	r3, #1
 801c3b6:	75fb      	strb	r3, [r7, #23]
 801c3b8:	7dfb      	ldrb	r3, [r7, #23]
 801c3ba:	2b09      	cmp	r3, #9
 801c3bc:	d9ca      	bls.n	801c354 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801c3be:	68ba      	ldr	r2, [r7, #8]
 801c3c0:	69b9      	ldr	r1, [r7, #24]
 801c3c2:	68f8      	ldr	r0, [r7, #12]
 801c3c4:	f000 f822 	bl	801c40c <etharp_query>
 801c3c8:	4603      	mov	r3, r0
 801c3ca:	e00b      	b.n	801c3e4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801c3cc:	68fb      	ldr	r3, [r7, #12]
 801c3ce:	f103 0222 	add.w	r2, r3, #34	; 0x22
 801c3d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c3d6:	9300      	str	r3, [sp, #0]
 801c3d8:	69fb      	ldr	r3, [r7, #28]
 801c3da:	68b9      	ldr	r1, [r7, #8]
 801c3dc:	68f8      	ldr	r0, [r7, #12]
 801c3de:	f001 fe69 	bl	801e0b4 <ethernet_output>
 801c3e2:	4603      	mov	r3, r0
}
 801c3e4:	4618      	mov	r0, r3
 801c3e6:	3720      	adds	r7, #32
 801c3e8:	46bd      	mov	sp, r7
 801c3ea:	bd80      	pop	{r7, pc}
 801c3ec:	08025ea4 	.word	0x08025ea4
 801c3f0:	08025ff4 	.word	0x08025ff4
 801c3f4:	08025f1c 	.word	0x08025f1c
 801c3f8:	08026044 	.word	0x08026044
 801c3fc:	08025fe4 	.word	0x08025fe4
 801c400:	08027634 	.word	0x08027634
 801c404:	200048a4 	.word	0x200048a4
 801c408:	200047b4 	.word	0x200047b4

0801c40c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801c40c:	b580      	push	{r7, lr}
 801c40e:	b08c      	sub	sp, #48	; 0x30
 801c410:	af02      	add	r7, sp, #8
 801c412:	60f8      	str	r0, [r7, #12]
 801c414:	60b9      	str	r1, [r7, #8]
 801c416:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801c418:	68fb      	ldr	r3, [r7, #12]
 801c41a:	3322      	adds	r3, #34	; 0x22
 801c41c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801c41e:	23ff      	movs	r3, #255	; 0xff
 801c420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801c424:	2300      	movs	r3, #0
 801c426:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c428:	68bb      	ldr	r3, [r7, #8]
 801c42a:	681b      	ldr	r3, [r3, #0]
 801c42c:	68f9      	ldr	r1, [r7, #12]
 801c42e:	4618      	mov	r0, r3
 801c430:	f000 fe0e 	bl	801d050 <ip4_addr_isbroadcast_u32>
 801c434:	4603      	mov	r3, r0
 801c436:	2b00      	cmp	r3, #0
 801c438:	d10c      	bne.n	801c454 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c43a:	68bb      	ldr	r3, [r7, #8]
 801c43c:	681b      	ldr	r3, [r3, #0]
 801c43e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c442:	2be0      	cmp	r3, #224	; 0xe0
 801c444:	d006      	beq.n	801c454 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c446:	68bb      	ldr	r3, [r7, #8]
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d003      	beq.n	801c454 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801c44c:	68bb      	ldr	r3, [r7, #8]
 801c44e:	681b      	ldr	r3, [r3, #0]
 801c450:	2b00      	cmp	r3, #0
 801c452:	d102      	bne.n	801c45a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c454:	f06f 030f 	mvn.w	r3, #15
 801c458:	e101      	b.n	801c65e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801c45a:	68fa      	ldr	r2, [r7, #12]
 801c45c:	2101      	movs	r1, #1
 801c45e:	68b8      	ldr	r0, [r7, #8]
 801c460:	f7ff fb60 	bl	801bb24 <etharp_find_entry>
 801c464:	4603      	mov	r3, r0
 801c466:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801c468:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	da02      	bge.n	801c476 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801c470:	8a7b      	ldrh	r3, [r7, #18]
 801c472:	b25b      	sxtb	r3, r3
 801c474:	e0f3      	b.n	801c65e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801c476:	8a7b      	ldrh	r3, [r7, #18]
 801c478:	2b7e      	cmp	r3, #126	; 0x7e
 801c47a:	d906      	bls.n	801c48a <etharp_query+0x7e>
 801c47c:	4b7a      	ldr	r3, [pc, #488]	; (801c668 <etharp_query+0x25c>)
 801c47e:	f240 32c1 	movw	r2, #961	; 0x3c1
 801c482:	497a      	ldr	r1, [pc, #488]	; (801c66c <etharp_query+0x260>)
 801c484:	487a      	ldr	r0, [pc, #488]	; (801c670 <etharp_query+0x264>)
 801c486:	f003 f91b 	bl	801f6c0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801c48a:	8a7b      	ldrh	r3, [r7, #18]
 801c48c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801c48e:	7c7a      	ldrb	r2, [r7, #17]
 801c490:	4978      	ldr	r1, [pc, #480]	; (801c674 <etharp_query+0x268>)
 801c492:	4613      	mov	r3, r2
 801c494:	005b      	lsls	r3, r3, #1
 801c496:	4413      	add	r3, r2
 801c498:	00db      	lsls	r3, r3, #3
 801c49a:	440b      	add	r3, r1
 801c49c:	3314      	adds	r3, #20
 801c49e:	781b      	ldrb	r3, [r3, #0]
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	d115      	bne.n	801c4d0 <etharp_query+0xc4>
    is_new_entry = 1;
 801c4a4:	2301      	movs	r3, #1
 801c4a6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801c4a8:	7c7a      	ldrb	r2, [r7, #17]
 801c4aa:	4972      	ldr	r1, [pc, #456]	; (801c674 <etharp_query+0x268>)
 801c4ac:	4613      	mov	r3, r2
 801c4ae:	005b      	lsls	r3, r3, #1
 801c4b0:	4413      	add	r3, r2
 801c4b2:	00db      	lsls	r3, r3, #3
 801c4b4:	440b      	add	r3, r1
 801c4b6:	3314      	adds	r3, #20
 801c4b8:	2201      	movs	r2, #1
 801c4ba:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801c4bc:	7c7a      	ldrb	r2, [r7, #17]
 801c4be:	496d      	ldr	r1, [pc, #436]	; (801c674 <etharp_query+0x268>)
 801c4c0:	4613      	mov	r3, r2
 801c4c2:	005b      	lsls	r3, r3, #1
 801c4c4:	4413      	add	r3, r2
 801c4c6:	00db      	lsls	r3, r3, #3
 801c4c8:	440b      	add	r3, r1
 801c4ca:	3308      	adds	r3, #8
 801c4cc:	68fa      	ldr	r2, [r7, #12]
 801c4ce:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801c4d0:	7c7a      	ldrb	r2, [r7, #17]
 801c4d2:	4968      	ldr	r1, [pc, #416]	; (801c674 <etharp_query+0x268>)
 801c4d4:	4613      	mov	r3, r2
 801c4d6:	005b      	lsls	r3, r3, #1
 801c4d8:	4413      	add	r3, r2
 801c4da:	00db      	lsls	r3, r3, #3
 801c4dc:	440b      	add	r3, r1
 801c4de:	3314      	adds	r3, #20
 801c4e0:	781b      	ldrb	r3, [r3, #0]
 801c4e2:	2b01      	cmp	r3, #1
 801c4e4:	d011      	beq.n	801c50a <etharp_query+0xfe>
 801c4e6:	7c7a      	ldrb	r2, [r7, #17]
 801c4e8:	4962      	ldr	r1, [pc, #392]	; (801c674 <etharp_query+0x268>)
 801c4ea:	4613      	mov	r3, r2
 801c4ec:	005b      	lsls	r3, r3, #1
 801c4ee:	4413      	add	r3, r2
 801c4f0:	00db      	lsls	r3, r3, #3
 801c4f2:	440b      	add	r3, r1
 801c4f4:	3314      	adds	r3, #20
 801c4f6:	781b      	ldrb	r3, [r3, #0]
 801c4f8:	2b01      	cmp	r3, #1
 801c4fa:	d806      	bhi.n	801c50a <etharp_query+0xfe>
 801c4fc:	4b5a      	ldr	r3, [pc, #360]	; (801c668 <etharp_query+0x25c>)
 801c4fe:	f240 32cd 	movw	r2, #973	; 0x3cd
 801c502:	495d      	ldr	r1, [pc, #372]	; (801c678 <etharp_query+0x26c>)
 801c504:	485a      	ldr	r0, [pc, #360]	; (801c670 <etharp_query+0x264>)
 801c506:	f003 f8db 	bl	801f6c0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801c50a:	6a3b      	ldr	r3, [r7, #32]
 801c50c:	2b00      	cmp	r3, #0
 801c50e:	d102      	bne.n	801c516 <etharp_query+0x10a>
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	2b00      	cmp	r3, #0
 801c514:	d10c      	bne.n	801c530 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801c516:	68b9      	ldr	r1, [r7, #8]
 801c518:	68f8      	ldr	r0, [r7, #12]
 801c51a:	f000 f963 	bl	801c7e4 <etharp_request>
 801c51e:	4603      	mov	r3, r0
 801c520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	2b00      	cmp	r3, #0
 801c528:	d102      	bne.n	801c530 <etharp_query+0x124>
      return result;
 801c52a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801c52e:	e096      	b.n	801c65e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	2b00      	cmp	r3, #0
 801c534:	d106      	bne.n	801c544 <etharp_query+0x138>
 801c536:	4b4c      	ldr	r3, [pc, #304]	; (801c668 <etharp_query+0x25c>)
 801c538:	f240 32e1 	movw	r2, #993	; 0x3e1
 801c53c:	494f      	ldr	r1, [pc, #316]	; (801c67c <etharp_query+0x270>)
 801c53e:	484c      	ldr	r0, [pc, #304]	; (801c670 <etharp_query+0x264>)
 801c540:	f003 f8be 	bl	801f6c0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801c544:	7c7a      	ldrb	r2, [r7, #17]
 801c546:	494b      	ldr	r1, [pc, #300]	; (801c674 <etharp_query+0x268>)
 801c548:	4613      	mov	r3, r2
 801c54a:	005b      	lsls	r3, r3, #1
 801c54c:	4413      	add	r3, r2
 801c54e:	00db      	lsls	r3, r3, #3
 801c550:	440b      	add	r3, r1
 801c552:	3314      	adds	r3, #20
 801c554:	781b      	ldrb	r3, [r3, #0]
 801c556:	2b01      	cmp	r3, #1
 801c558:	d917      	bls.n	801c58a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801c55a:	4a49      	ldr	r2, [pc, #292]	; (801c680 <etharp_query+0x274>)
 801c55c:	7c7b      	ldrb	r3, [r7, #17]
 801c55e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801c560:	7c7a      	ldrb	r2, [r7, #17]
 801c562:	4613      	mov	r3, r2
 801c564:	005b      	lsls	r3, r3, #1
 801c566:	4413      	add	r3, r2
 801c568:	00db      	lsls	r3, r3, #3
 801c56a:	3308      	adds	r3, #8
 801c56c:	4a41      	ldr	r2, [pc, #260]	; (801c674 <etharp_query+0x268>)
 801c56e:	4413      	add	r3, r2
 801c570:	3304      	adds	r3, #4
 801c572:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c576:	9200      	str	r2, [sp, #0]
 801c578:	697a      	ldr	r2, [r7, #20]
 801c57a:	6879      	ldr	r1, [r7, #4]
 801c57c:	68f8      	ldr	r0, [r7, #12]
 801c57e:	f001 fd99 	bl	801e0b4 <ethernet_output>
 801c582:	4603      	mov	r3, r0
 801c584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c588:	e067      	b.n	801c65a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c58a:	7c7a      	ldrb	r2, [r7, #17]
 801c58c:	4939      	ldr	r1, [pc, #228]	; (801c674 <etharp_query+0x268>)
 801c58e:	4613      	mov	r3, r2
 801c590:	005b      	lsls	r3, r3, #1
 801c592:	4413      	add	r3, r2
 801c594:	00db      	lsls	r3, r3, #3
 801c596:	440b      	add	r3, r1
 801c598:	3314      	adds	r3, #20
 801c59a:	781b      	ldrb	r3, [r3, #0]
 801c59c:	2b01      	cmp	r3, #1
 801c59e:	d15c      	bne.n	801c65a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801c5a0:	2300      	movs	r3, #0
 801c5a2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c5a8:	e01c      	b.n	801c5e4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801c5aa:	69fb      	ldr	r3, [r7, #28]
 801c5ac:	895a      	ldrh	r2, [r3, #10]
 801c5ae:	69fb      	ldr	r3, [r7, #28]
 801c5b0:	891b      	ldrh	r3, [r3, #8]
 801c5b2:	429a      	cmp	r2, r3
 801c5b4:	d10a      	bne.n	801c5cc <etharp_query+0x1c0>
 801c5b6:	69fb      	ldr	r3, [r7, #28]
 801c5b8:	681b      	ldr	r3, [r3, #0]
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d006      	beq.n	801c5cc <etharp_query+0x1c0>
 801c5be:	4b2a      	ldr	r3, [pc, #168]	; (801c668 <etharp_query+0x25c>)
 801c5c0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801c5c4:	492f      	ldr	r1, [pc, #188]	; (801c684 <etharp_query+0x278>)
 801c5c6:	482a      	ldr	r0, [pc, #168]	; (801c670 <etharp_query+0x264>)
 801c5c8:	f003 f87a 	bl	801f6c0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801c5cc:	69fb      	ldr	r3, [r7, #28]
 801c5ce:	7b1b      	ldrb	r3, [r3, #12]
 801c5d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c5d4:	2b00      	cmp	r3, #0
 801c5d6:	d002      	beq.n	801c5de <etharp_query+0x1d2>
        copy_needed = 1;
 801c5d8:	2301      	movs	r3, #1
 801c5da:	61bb      	str	r3, [r7, #24]
        break;
 801c5dc:	e005      	b.n	801c5ea <etharp_query+0x1de>
      }
      p = p->next;
 801c5de:	69fb      	ldr	r3, [r7, #28]
 801c5e0:	681b      	ldr	r3, [r3, #0]
 801c5e2:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c5e4:	69fb      	ldr	r3, [r7, #28]
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	d1df      	bne.n	801c5aa <etharp_query+0x19e>
    }
    if (copy_needed) {
 801c5ea:	69bb      	ldr	r3, [r7, #24]
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	d007      	beq.n	801c600 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801c5f0:	687a      	ldr	r2, [r7, #4]
 801c5f2:	f44f 7120 	mov.w	r1, #640	; 0x280
 801c5f6:	200e      	movs	r0, #14
 801c5f8:	f7f8 fa72 	bl	8014ae0 <pbuf_clone>
 801c5fc:	61f8      	str	r0, [r7, #28]
 801c5fe:	e004      	b.n	801c60a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801c600:	687b      	ldr	r3, [r7, #4]
 801c602:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801c604:	69f8      	ldr	r0, [r7, #28]
 801c606:	f7f8 f899 	bl	801473c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801c60a:	69fb      	ldr	r3, [r7, #28]
 801c60c:	2b00      	cmp	r3, #0
 801c60e:	d021      	beq.n	801c654 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801c610:	7c7a      	ldrb	r2, [r7, #17]
 801c612:	4918      	ldr	r1, [pc, #96]	; (801c674 <etharp_query+0x268>)
 801c614:	4613      	mov	r3, r2
 801c616:	005b      	lsls	r3, r3, #1
 801c618:	4413      	add	r3, r2
 801c61a:	00db      	lsls	r3, r3, #3
 801c61c:	440b      	add	r3, r1
 801c61e:	681b      	ldr	r3, [r3, #0]
 801c620:	2b00      	cmp	r3, #0
 801c622:	d00a      	beq.n	801c63a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801c624:	7c7a      	ldrb	r2, [r7, #17]
 801c626:	4913      	ldr	r1, [pc, #76]	; (801c674 <etharp_query+0x268>)
 801c628:	4613      	mov	r3, r2
 801c62a:	005b      	lsls	r3, r3, #1
 801c62c:	4413      	add	r3, r2
 801c62e:	00db      	lsls	r3, r3, #3
 801c630:	440b      	add	r3, r1
 801c632:	681b      	ldr	r3, [r3, #0]
 801c634:	4618      	mov	r0, r3
 801c636:	f7f7 ffdb 	bl	80145f0 <pbuf_free>
      }
      arp_table[i].q = p;
 801c63a:	7c7a      	ldrb	r2, [r7, #17]
 801c63c:	490d      	ldr	r1, [pc, #52]	; (801c674 <etharp_query+0x268>)
 801c63e:	4613      	mov	r3, r2
 801c640:	005b      	lsls	r3, r3, #1
 801c642:	4413      	add	r3, r2
 801c644:	00db      	lsls	r3, r3, #3
 801c646:	440b      	add	r3, r1
 801c648:	69fa      	ldr	r2, [r7, #28]
 801c64a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801c64c:	2300      	movs	r3, #0
 801c64e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c652:	e002      	b.n	801c65a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801c654:	23ff      	movs	r3, #255	; 0xff
 801c656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801c65a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801c65e:	4618      	mov	r0, r3
 801c660:	3728      	adds	r7, #40	; 0x28
 801c662:	46bd      	mov	sp, r7
 801c664:	bd80      	pop	{r7, pc}
 801c666:	bf00      	nop
 801c668:	08025ea4 	.word	0x08025ea4
 801c66c:	08026050 	.word	0x08026050
 801c670:	08025f1c 	.word	0x08025f1c
 801c674:	200047b4 	.word	0x200047b4
 801c678:	08026060 	.word	0x08026060
 801c67c:	08026044 	.word	0x08026044
 801c680:	200048a4 	.word	0x200048a4
 801c684:	08026088 	.word	0x08026088

0801c688 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801c688:	b580      	push	{r7, lr}
 801c68a:	b08a      	sub	sp, #40	; 0x28
 801c68c:	af02      	add	r7, sp, #8
 801c68e:	60f8      	str	r0, [r7, #12]
 801c690:	60b9      	str	r1, [r7, #8]
 801c692:	607a      	str	r2, [r7, #4]
 801c694:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801c696:	2300      	movs	r3, #0
 801c698:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c69a:	68fb      	ldr	r3, [r7, #12]
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	d106      	bne.n	801c6ae <etharp_raw+0x26>
 801c6a0:	4b3a      	ldr	r3, [pc, #232]	; (801c78c <etharp_raw+0x104>)
 801c6a2:	f240 4257 	movw	r2, #1111	; 0x457
 801c6a6:	493a      	ldr	r1, [pc, #232]	; (801c790 <etharp_raw+0x108>)
 801c6a8:	483a      	ldr	r0, [pc, #232]	; (801c794 <etharp_raw+0x10c>)
 801c6aa:	f003 f809 	bl	801f6c0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801c6ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c6b2:	211c      	movs	r1, #28
 801c6b4:	200e      	movs	r0, #14
 801c6b6:	f7f7 fcb7 	bl	8014028 <pbuf_alloc>
 801c6ba:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801c6bc:	69bb      	ldr	r3, [r7, #24]
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	d102      	bne.n	801c6c8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801c6c2:	f04f 33ff 	mov.w	r3, #4294967295
 801c6c6:	e05d      	b.n	801c784 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801c6c8:	69bb      	ldr	r3, [r7, #24]
 801c6ca:	895b      	ldrh	r3, [r3, #10]
 801c6cc:	2b1b      	cmp	r3, #27
 801c6ce:	d806      	bhi.n	801c6de <etharp_raw+0x56>
 801c6d0:	4b2e      	ldr	r3, [pc, #184]	; (801c78c <etharp_raw+0x104>)
 801c6d2:	f240 4262 	movw	r2, #1122	; 0x462
 801c6d6:	4930      	ldr	r1, [pc, #192]	; (801c798 <etharp_raw+0x110>)
 801c6d8:	482e      	ldr	r0, [pc, #184]	; (801c794 <etharp_raw+0x10c>)
 801c6da:	f002 fff1 	bl	801f6c0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801c6de:	69bb      	ldr	r3, [r7, #24]
 801c6e0:	685b      	ldr	r3, [r3, #4]
 801c6e2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801c6e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c6e6:	4618      	mov	r0, r3
 801c6e8:	f7f6 fbc6 	bl	8012e78 <lwip_htons>
 801c6ec:	4603      	mov	r3, r0
 801c6ee:	461a      	mov	r2, r3
 801c6f0:	697b      	ldr	r3, [r7, #20]
 801c6f2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801c6f4:	68fb      	ldr	r3, [r7, #12]
 801c6f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c6fa:	2b06      	cmp	r3, #6
 801c6fc:	d006      	beq.n	801c70c <etharp_raw+0x84>
 801c6fe:	4b23      	ldr	r3, [pc, #140]	; (801c78c <etharp_raw+0x104>)
 801c700:	f240 4269 	movw	r2, #1129	; 0x469
 801c704:	4925      	ldr	r1, [pc, #148]	; (801c79c <etharp_raw+0x114>)
 801c706:	4823      	ldr	r0, [pc, #140]	; (801c794 <etharp_raw+0x10c>)
 801c708:	f002 ffda 	bl	801f6c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801c70c:	697b      	ldr	r3, [r7, #20]
 801c70e:	3308      	adds	r3, #8
 801c710:	2206      	movs	r2, #6
 801c712:	6839      	ldr	r1, [r7, #0]
 801c714:	4618      	mov	r0, r3
 801c716:	f002 fd25 	bl	801f164 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801c71a:	697b      	ldr	r3, [r7, #20]
 801c71c:	3312      	adds	r3, #18
 801c71e:	2206      	movs	r2, #6
 801c720:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c722:	4618      	mov	r0, r3
 801c724:	f002 fd1e 	bl	801f164 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801c728:	697b      	ldr	r3, [r7, #20]
 801c72a:	330e      	adds	r3, #14
 801c72c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c72e:	6812      	ldr	r2, [r2, #0]
 801c730:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801c732:	697b      	ldr	r3, [r7, #20]
 801c734:	3318      	adds	r3, #24
 801c736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c738:	6812      	ldr	r2, [r2, #0]
 801c73a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801c73c:	697b      	ldr	r3, [r7, #20]
 801c73e:	2200      	movs	r2, #0
 801c740:	701a      	strb	r2, [r3, #0]
 801c742:	2200      	movs	r2, #0
 801c744:	f042 0201 	orr.w	r2, r2, #1
 801c748:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801c74a:	697b      	ldr	r3, [r7, #20]
 801c74c:	2200      	movs	r2, #0
 801c74e:	f042 0208 	orr.w	r2, r2, #8
 801c752:	709a      	strb	r2, [r3, #2]
 801c754:	2200      	movs	r2, #0
 801c756:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801c758:	697b      	ldr	r3, [r7, #20]
 801c75a:	2206      	movs	r2, #6
 801c75c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801c75e:	697b      	ldr	r3, [r7, #20]
 801c760:	2204      	movs	r2, #4
 801c762:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801c764:	f640 0306 	movw	r3, #2054	; 0x806
 801c768:	9300      	str	r3, [sp, #0]
 801c76a:	687b      	ldr	r3, [r7, #4]
 801c76c:	68ba      	ldr	r2, [r7, #8]
 801c76e:	69b9      	ldr	r1, [r7, #24]
 801c770:	68f8      	ldr	r0, [r7, #12]
 801c772:	f001 fc9f 	bl	801e0b4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801c776:	69b8      	ldr	r0, [r7, #24]
 801c778:	f7f7 ff3a 	bl	80145f0 <pbuf_free>
  p = NULL;
 801c77c:	2300      	movs	r3, #0
 801c77e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801c780:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c784:	4618      	mov	r0, r3
 801c786:	3720      	adds	r7, #32
 801c788:	46bd      	mov	sp, r7
 801c78a:	bd80      	pop	{r7, pc}
 801c78c:	08025ea4 	.word	0x08025ea4
 801c790:	08025ff4 	.word	0x08025ff4
 801c794:	08025f1c 	.word	0x08025f1c
 801c798:	080260a4 	.word	0x080260a4
 801c79c:	080260d8 	.word	0x080260d8

0801c7a0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801c7a0:	b580      	push	{r7, lr}
 801c7a2:	b088      	sub	sp, #32
 801c7a4:	af04      	add	r7, sp, #16
 801c7a6:	60f8      	str	r0, [r7, #12]
 801c7a8:	60b9      	str	r1, [r7, #8]
 801c7aa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c7ac:	68fb      	ldr	r3, [r7, #12]
 801c7ae:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	f103 0022 	add.w	r0, r3, #34	; 0x22
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c7bc:	2201      	movs	r2, #1
 801c7be:	9203      	str	r2, [sp, #12]
 801c7c0:	68ba      	ldr	r2, [r7, #8]
 801c7c2:	9202      	str	r2, [sp, #8]
 801c7c4:	4a06      	ldr	r2, [pc, #24]	; (801c7e0 <etharp_request_dst+0x40>)
 801c7c6:	9201      	str	r2, [sp, #4]
 801c7c8:	9300      	str	r3, [sp, #0]
 801c7ca:	4603      	mov	r3, r0
 801c7cc:	687a      	ldr	r2, [r7, #4]
 801c7ce:	68f8      	ldr	r0, [r7, #12]
 801c7d0:	f7ff ff5a 	bl	801c688 <etharp_raw>
 801c7d4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801c7d6:	4618      	mov	r0, r3
 801c7d8:	3710      	adds	r7, #16
 801c7da:	46bd      	mov	sp, r7
 801c7dc:	bd80      	pop	{r7, pc}
 801c7de:	bf00      	nop
 801c7e0:	0802763c 	.word	0x0802763c

0801c7e4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801c7e4:	b580      	push	{r7, lr}
 801c7e6:	b082      	sub	sp, #8
 801c7e8:	af00      	add	r7, sp, #0
 801c7ea:	6078      	str	r0, [r7, #4]
 801c7ec:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801c7ee:	4a05      	ldr	r2, [pc, #20]	; (801c804 <etharp_request+0x20>)
 801c7f0:	6839      	ldr	r1, [r7, #0]
 801c7f2:	6878      	ldr	r0, [r7, #4]
 801c7f4:	f7ff ffd4 	bl	801c7a0 <etharp_request_dst>
 801c7f8:	4603      	mov	r3, r0
}
 801c7fa:	4618      	mov	r0, r3
 801c7fc:	3708      	adds	r7, #8
 801c7fe:	46bd      	mov	sp, r7
 801c800:	bd80      	pop	{r7, pc}
 801c802:	bf00      	nop
 801c804:	08027634 	.word	0x08027634

0801c808 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801c808:	b580      	push	{r7, lr}
 801c80a:	b08e      	sub	sp, #56	; 0x38
 801c80c:	af04      	add	r7, sp, #16
 801c80e:	6078      	str	r0, [r7, #4]
 801c810:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801c812:	4b79      	ldr	r3, [pc, #484]	; (801c9f8 <icmp_input+0x1f0>)
 801c814:	689b      	ldr	r3, [r3, #8]
 801c816:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801c818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c81a:	781b      	ldrb	r3, [r3, #0]
 801c81c:	f003 030f 	and.w	r3, r3, #15
 801c820:	b2db      	uxtb	r3, r3
 801c822:	009b      	lsls	r3, r3, #2
 801c824:	b2db      	uxtb	r3, r3
 801c826:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801c828:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c82a:	2b13      	cmp	r3, #19
 801c82c:	f240 80cd 	bls.w	801c9ca <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801c830:	687b      	ldr	r3, [r7, #4]
 801c832:	895b      	ldrh	r3, [r3, #10]
 801c834:	2b03      	cmp	r3, #3
 801c836:	f240 80ca 	bls.w	801c9ce <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801c83a:	687b      	ldr	r3, [r7, #4]
 801c83c:	685b      	ldr	r3, [r3, #4]
 801c83e:	781b      	ldrb	r3, [r3, #0]
 801c840:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801c844:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801c848:	2b00      	cmp	r3, #0
 801c84a:	f000 80b7 	beq.w	801c9bc <icmp_input+0x1b4>
 801c84e:	2b08      	cmp	r3, #8
 801c850:	f040 80b7 	bne.w	801c9c2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801c854:	4b69      	ldr	r3, [pc, #420]	; (801c9fc <icmp_input+0x1f4>)
 801c856:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c858:	4b67      	ldr	r3, [pc, #412]	; (801c9f8 <icmp_input+0x1f0>)
 801c85a:	695b      	ldr	r3, [r3, #20]
 801c85c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c860:	2be0      	cmp	r3, #224	; 0xe0
 801c862:	f000 80bb 	beq.w	801c9dc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801c866:	4b64      	ldr	r3, [pc, #400]	; (801c9f8 <icmp_input+0x1f0>)
 801c868:	695b      	ldr	r3, [r3, #20]
 801c86a:	4a63      	ldr	r2, [pc, #396]	; (801c9f8 <icmp_input+0x1f0>)
 801c86c:	6812      	ldr	r2, [r2, #0]
 801c86e:	4611      	mov	r1, r2
 801c870:	4618      	mov	r0, r3
 801c872:	f000 fbed 	bl	801d050 <ip4_addr_isbroadcast_u32>
 801c876:	4603      	mov	r3, r0
 801c878:	2b00      	cmp	r3, #0
 801c87a:	f040 80b1 	bne.w	801c9e0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801c87e:	687b      	ldr	r3, [r7, #4]
 801c880:	891b      	ldrh	r3, [r3, #8]
 801c882:	2b07      	cmp	r3, #7
 801c884:	f240 80a5 	bls.w	801c9d2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c888:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c88a:	330e      	adds	r3, #14
 801c88c:	4619      	mov	r1, r3
 801c88e:	6878      	ldr	r0, [r7, #4]
 801c890:	f7f7 fe18 	bl	80144c4 <pbuf_add_header>
 801c894:	4603      	mov	r3, r0
 801c896:	2b00      	cmp	r3, #0
 801c898:	d04b      	beq.n	801c932 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801c89a:	687b      	ldr	r3, [r7, #4]
 801c89c:	891a      	ldrh	r2, [r3, #8]
 801c89e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c8a0:	4413      	add	r3, r2
 801c8a2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	891b      	ldrh	r3, [r3, #8]
 801c8a8:	8b7a      	ldrh	r2, [r7, #26]
 801c8aa:	429a      	cmp	r2, r3
 801c8ac:	f0c0 809a 	bcc.w	801c9e4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801c8b0:	8b7b      	ldrh	r3, [r7, #26]
 801c8b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c8b6:	4619      	mov	r1, r3
 801c8b8:	200e      	movs	r0, #14
 801c8ba:	f7f7 fbb5 	bl	8014028 <pbuf_alloc>
 801c8be:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801c8c0:	697b      	ldr	r3, [r7, #20]
 801c8c2:	2b00      	cmp	r3, #0
 801c8c4:	f000 8090 	beq.w	801c9e8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801c8c8:	697b      	ldr	r3, [r7, #20]
 801c8ca:	895b      	ldrh	r3, [r3, #10]
 801c8cc:	461a      	mov	r2, r3
 801c8ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c8d0:	3308      	adds	r3, #8
 801c8d2:	429a      	cmp	r2, r3
 801c8d4:	d203      	bcs.n	801c8de <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801c8d6:	6978      	ldr	r0, [r7, #20]
 801c8d8:	f7f7 fe8a 	bl	80145f0 <pbuf_free>
          goto icmperr;
 801c8dc:	e085      	b.n	801c9ea <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801c8de:	697b      	ldr	r3, [r7, #20]
 801c8e0:	685b      	ldr	r3, [r3, #4]
 801c8e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c8e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c8e6:	4618      	mov	r0, r3
 801c8e8:	f002 fc3c 	bl	801f164 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801c8ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c8ee:	4619      	mov	r1, r3
 801c8f0:	6978      	ldr	r0, [r7, #20]
 801c8f2:	f7f7 fdf7 	bl	80144e4 <pbuf_remove_header>
 801c8f6:	4603      	mov	r3, r0
 801c8f8:	2b00      	cmp	r3, #0
 801c8fa:	d009      	beq.n	801c910 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801c8fc:	4b40      	ldr	r3, [pc, #256]	; (801ca00 <icmp_input+0x1f8>)
 801c8fe:	22b6      	movs	r2, #182	; 0xb6
 801c900:	4940      	ldr	r1, [pc, #256]	; (801ca04 <icmp_input+0x1fc>)
 801c902:	4841      	ldr	r0, [pc, #260]	; (801ca08 <icmp_input+0x200>)
 801c904:	f002 fedc 	bl	801f6c0 <iprintf>
          pbuf_free(r);
 801c908:	6978      	ldr	r0, [r7, #20]
 801c90a:	f7f7 fe71 	bl	80145f0 <pbuf_free>
          goto icmperr;
 801c90e:	e06c      	b.n	801c9ea <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801c910:	6879      	ldr	r1, [r7, #4]
 801c912:	6978      	ldr	r0, [r7, #20]
 801c914:	f7f7 ffa0 	bl	8014858 <pbuf_copy>
 801c918:	4603      	mov	r3, r0
 801c91a:	2b00      	cmp	r3, #0
 801c91c:	d003      	beq.n	801c926 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801c91e:	6978      	ldr	r0, [r7, #20]
 801c920:	f7f7 fe66 	bl	80145f0 <pbuf_free>
          goto icmperr;
 801c924:	e061      	b.n	801c9ea <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801c926:	6878      	ldr	r0, [r7, #4]
 801c928:	f7f7 fe62 	bl	80145f0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801c92c:	697b      	ldr	r3, [r7, #20]
 801c92e:	607b      	str	r3, [r7, #4]
 801c930:	e00f      	b.n	801c952 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c932:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c934:	330e      	adds	r3, #14
 801c936:	4619      	mov	r1, r3
 801c938:	6878      	ldr	r0, [r7, #4]
 801c93a:	f7f7 fdd3 	bl	80144e4 <pbuf_remove_header>
 801c93e:	4603      	mov	r3, r0
 801c940:	2b00      	cmp	r3, #0
 801c942:	d006      	beq.n	801c952 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801c944:	4b2e      	ldr	r3, [pc, #184]	; (801ca00 <icmp_input+0x1f8>)
 801c946:	22c7      	movs	r2, #199	; 0xc7
 801c948:	4930      	ldr	r1, [pc, #192]	; (801ca0c <icmp_input+0x204>)
 801c94a:	482f      	ldr	r0, [pc, #188]	; (801ca08 <icmp_input+0x200>)
 801c94c:	f002 feb8 	bl	801f6c0 <iprintf>
          goto icmperr;
 801c950:	e04b      	b.n	801c9ea <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801c952:	687b      	ldr	r3, [r7, #4]
 801c954:	685b      	ldr	r3, [r3, #4]
 801c956:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801c958:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c95a:	4619      	mov	r1, r3
 801c95c:	6878      	ldr	r0, [r7, #4]
 801c95e:	f7f7 fdb1 	bl	80144c4 <pbuf_add_header>
 801c962:	4603      	mov	r3, r0
 801c964:	2b00      	cmp	r3, #0
 801c966:	d12b      	bne.n	801c9c0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	685b      	ldr	r3, [r3, #4]
 801c96c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801c96e:	69fb      	ldr	r3, [r7, #28]
 801c970:	681a      	ldr	r2, [r3, #0]
 801c972:	68fb      	ldr	r3, [r7, #12]
 801c974:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801c976:	4b20      	ldr	r3, [pc, #128]	; (801c9f8 <icmp_input+0x1f0>)
 801c978:	691a      	ldr	r2, [r3, #16]
 801c97a:	68fb      	ldr	r3, [r7, #12]
 801c97c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801c97e:	693b      	ldr	r3, [r7, #16]
 801c980:	2200      	movs	r2, #0
 801c982:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801c984:	693b      	ldr	r3, [r7, #16]
 801c986:	2200      	movs	r2, #0
 801c988:	709a      	strb	r2, [r3, #2]
 801c98a:	2200      	movs	r2, #0
 801c98c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801c98e:	68fb      	ldr	r3, [r7, #12]
 801c990:	22ff      	movs	r2, #255	; 0xff
 801c992:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801c994:	68fb      	ldr	r3, [r7, #12]
 801c996:	2200      	movs	r2, #0
 801c998:	729a      	strb	r2, [r3, #10]
 801c99a:	2200      	movs	r2, #0
 801c99c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801c99e:	683b      	ldr	r3, [r7, #0]
 801c9a0:	9302      	str	r3, [sp, #8]
 801c9a2:	2301      	movs	r3, #1
 801c9a4:	9301      	str	r3, [sp, #4]
 801c9a6:	2300      	movs	r3, #0
 801c9a8:	9300      	str	r3, [sp, #0]
 801c9aa:	23ff      	movs	r3, #255	; 0xff
 801c9ac:	2200      	movs	r2, #0
 801c9ae:	69f9      	ldr	r1, [r7, #28]
 801c9b0:	6878      	ldr	r0, [r7, #4]
 801c9b2:	f000 fa75 	bl	801cea0 <ip4_output_if>
 801c9b6:	4603      	mov	r3, r0
 801c9b8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801c9ba:	e001      	b.n	801c9c0 <icmp_input+0x1b8>
      break;
 801c9bc:	bf00      	nop
 801c9be:	e000      	b.n	801c9c2 <icmp_input+0x1ba>
      break;
 801c9c0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801c9c2:	6878      	ldr	r0, [r7, #4]
 801c9c4:	f7f7 fe14 	bl	80145f0 <pbuf_free>
  return;
 801c9c8:	e013      	b.n	801c9f2 <icmp_input+0x1ea>
    goto lenerr;
 801c9ca:	bf00      	nop
 801c9cc:	e002      	b.n	801c9d4 <icmp_input+0x1cc>
    goto lenerr;
 801c9ce:	bf00      	nop
 801c9d0:	e000      	b.n	801c9d4 <icmp_input+0x1cc>
        goto lenerr;
 801c9d2:	bf00      	nop
lenerr:
  pbuf_free(p);
 801c9d4:	6878      	ldr	r0, [r7, #4]
 801c9d6:	f7f7 fe0b 	bl	80145f0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c9da:	e00a      	b.n	801c9f2 <icmp_input+0x1ea>
        goto icmperr;
 801c9dc:	bf00      	nop
 801c9de:	e004      	b.n	801c9ea <icmp_input+0x1e2>
        goto icmperr;
 801c9e0:	bf00      	nop
 801c9e2:	e002      	b.n	801c9ea <icmp_input+0x1e2>
          goto icmperr;
 801c9e4:	bf00      	nop
 801c9e6:	e000      	b.n	801c9ea <icmp_input+0x1e2>
          goto icmperr;
 801c9e8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801c9ea:	6878      	ldr	r0, [r7, #4]
 801c9ec:	f7f7 fe00 	bl	80145f0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c9f0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801c9f2:	3728      	adds	r7, #40	; 0x28
 801c9f4:	46bd      	mov	sp, r7
 801c9f6:	bd80      	pop	{r7, pc}
 801c9f8:	200081c0 	.word	0x200081c0
 801c9fc:	200081d4 	.word	0x200081d4
 801ca00:	0802611c 	.word	0x0802611c
 801ca04:	08026154 	.word	0x08026154
 801ca08:	0802618c 	.word	0x0802618c
 801ca0c:	080261b4 	.word	0x080261b4

0801ca10 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801ca10:	b580      	push	{r7, lr}
 801ca12:	b082      	sub	sp, #8
 801ca14:	af00      	add	r7, sp, #0
 801ca16:	6078      	str	r0, [r7, #4]
 801ca18:	460b      	mov	r3, r1
 801ca1a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801ca1c:	78fb      	ldrb	r3, [r7, #3]
 801ca1e:	461a      	mov	r2, r3
 801ca20:	2103      	movs	r1, #3
 801ca22:	6878      	ldr	r0, [r7, #4]
 801ca24:	f000 f814 	bl	801ca50 <icmp_send_response>
}
 801ca28:	bf00      	nop
 801ca2a:	3708      	adds	r7, #8
 801ca2c:	46bd      	mov	sp, r7
 801ca2e:	bd80      	pop	{r7, pc}

0801ca30 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801ca30:	b580      	push	{r7, lr}
 801ca32:	b082      	sub	sp, #8
 801ca34:	af00      	add	r7, sp, #0
 801ca36:	6078      	str	r0, [r7, #4]
 801ca38:	460b      	mov	r3, r1
 801ca3a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801ca3c:	78fb      	ldrb	r3, [r7, #3]
 801ca3e:	461a      	mov	r2, r3
 801ca40:	210b      	movs	r1, #11
 801ca42:	6878      	ldr	r0, [r7, #4]
 801ca44:	f000 f804 	bl	801ca50 <icmp_send_response>
}
 801ca48:	bf00      	nop
 801ca4a:	3708      	adds	r7, #8
 801ca4c:	46bd      	mov	sp, r7
 801ca4e:	bd80      	pop	{r7, pc}

0801ca50 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801ca50:	b580      	push	{r7, lr}
 801ca52:	b08c      	sub	sp, #48	; 0x30
 801ca54:	af04      	add	r7, sp, #16
 801ca56:	6078      	str	r0, [r7, #4]
 801ca58:	460b      	mov	r3, r1
 801ca5a:	70fb      	strb	r3, [r7, #3]
 801ca5c:	4613      	mov	r3, r2
 801ca5e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801ca60:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ca64:	2124      	movs	r1, #36	; 0x24
 801ca66:	2022      	movs	r0, #34	; 0x22
 801ca68:	f7f7 fade 	bl	8014028 <pbuf_alloc>
 801ca6c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801ca6e:	69fb      	ldr	r3, [r7, #28]
 801ca70:	2b00      	cmp	r3, #0
 801ca72:	d04c      	beq.n	801cb0e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801ca74:	69fb      	ldr	r3, [r7, #28]
 801ca76:	895b      	ldrh	r3, [r3, #10]
 801ca78:	2b23      	cmp	r3, #35	; 0x23
 801ca7a:	d806      	bhi.n	801ca8a <icmp_send_response+0x3a>
 801ca7c:	4b26      	ldr	r3, [pc, #152]	; (801cb18 <icmp_send_response+0xc8>)
 801ca7e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801ca82:	4926      	ldr	r1, [pc, #152]	; (801cb1c <icmp_send_response+0xcc>)
 801ca84:	4826      	ldr	r0, [pc, #152]	; (801cb20 <icmp_send_response+0xd0>)
 801ca86:	f002 fe1b 	bl	801f6c0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	685b      	ldr	r3, [r3, #4]
 801ca8e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801ca90:	69fb      	ldr	r3, [r7, #28]
 801ca92:	685b      	ldr	r3, [r3, #4]
 801ca94:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801ca96:	697b      	ldr	r3, [r7, #20]
 801ca98:	78fa      	ldrb	r2, [r7, #3]
 801ca9a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801ca9c:	697b      	ldr	r3, [r7, #20]
 801ca9e:	78ba      	ldrb	r2, [r7, #2]
 801caa0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801caa2:	697b      	ldr	r3, [r7, #20]
 801caa4:	2200      	movs	r2, #0
 801caa6:	711a      	strb	r2, [r3, #4]
 801caa8:	2200      	movs	r2, #0
 801caaa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801caac:	697b      	ldr	r3, [r7, #20]
 801caae:	2200      	movs	r2, #0
 801cab0:	719a      	strb	r2, [r3, #6]
 801cab2:	2200      	movs	r2, #0
 801cab4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801cab6:	69fb      	ldr	r3, [r7, #28]
 801cab8:	685b      	ldr	r3, [r3, #4]
 801caba:	f103 0008 	add.w	r0, r3, #8
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	685b      	ldr	r3, [r3, #4]
 801cac2:	221c      	movs	r2, #28
 801cac4:	4619      	mov	r1, r3
 801cac6:	f002 fb4d 	bl	801f164 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801caca:	69bb      	ldr	r3, [r7, #24]
 801cacc:	68db      	ldr	r3, [r3, #12]
 801cace:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801cad0:	f107 030c 	add.w	r3, r7, #12
 801cad4:	4618      	mov	r0, r3
 801cad6:	f000 f825 	bl	801cb24 <ip4_route>
 801cada:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801cadc:	693b      	ldr	r3, [r7, #16]
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d011      	beq.n	801cb06 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801cae2:	697b      	ldr	r3, [r7, #20]
 801cae4:	2200      	movs	r2, #0
 801cae6:	709a      	strb	r2, [r3, #2]
 801cae8:	2200      	movs	r2, #0
 801caea:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801caec:	f107 020c 	add.w	r2, r7, #12
 801caf0:	693b      	ldr	r3, [r7, #16]
 801caf2:	9302      	str	r3, [sp, #8]
 801caf4:	2301      	movs	r3, #1
 801caf6:	9301      	str	r3, [sp, #4]
 801caf8:	2300      	movs	r3, #0
 801cafa:	9300      	str	r3, [sp, #0]
 801cafc:	23ff      	movs	r3, #255	; 0xff
 801cafe:	2100      	movs	r1, #0
 801cb00:	69f8      	ldr	r0, [r7, #28]
 801cb02:	f000 f9cd 	bl	801cea0 <ip4_output_if>
  }
  pbuf_free(q);
 801cb06:	69f8      	ldr	r0, [r7, #28]
 801cb08:	f7f7 fd72 	bl	80145f0 <pbuf_free>
 801cb0c:	e000      	b.n	801cb10 <icmp_send_response+0xc0>
    return;
 801cb0e:	bf00      	nop
}
 801cb10:	3720      	adds	r7, #32
 801cb12:	46bd      	mov	sp, r7
 801cb14:	bd80      	pop	{r7, pc}
 801cb16:	bf00      	nop
 801cb18:	0802611c 	.word	0x0802611c
 801cb1c:	080261e8 	.word	0x080261e8
 801cb20:	0802618c 	.word	0x0802618c

0801cb24 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801cb24:	b480      	push	{r7}
 801cb26:	b085      	sub	sp, #20
 801cb28:	af00      	add	r7, sp, #0
 801cb2a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801cb2c:	4b33      	ldr	r3, [pc, #204]	; (801cbfc <ip4_route+0xd8>)
 801cb2e:	681b      	ldr	r3, [r3, #0]
 801cb30:	60fb      	str	r3, [r7, #12]
 801cb32:	e036      	b.n	801cba2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801cb34:	68fb      	ldr	r3, [r7, #12]
 801cb36:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801cb3a:	f003 0301 	and.w	r3, r3, #1
 801cb3e:	b2db      	uxtb	r3, r3
 801cb40:	2b00      	cmp	r3, #0
 801cb42:	d02b      	beq.n	801cb9c <ip4_route+0x78>
 801cb44:	68fb      	ldr	r3, [r7, #12]
 801cb46:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801cb4a:	089b      	lsrs	r3, r3, #2
 801cb4c:	f003 0301 	and.w	r3, r3, #1
 801cb50:	b2db      	uxtb	r3, r3
 801cb52:	2b00      	cmp	r3, #0
 801cb54:	d022      	beq.n	801cb9c <ip4_route+0x78>
 801cb56:	68fb      	ldr	r3, [r7, #12]
 801cb58:	3304      	adds	r3, #4
 801cb5a:	681b      	ldr	r3, [r3, #0]
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	d01d      	beq.n	801cb9c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801cb60:	687b      	ldr	r3, [r7, #4]
 801cb62:	681a      	ldr	r2, [r3, #0]
 801cb64:	68fb      	ldr	r3, [r7, #12]
 801cb66:	3304      	adds	r3, #4
 801cb68:	681b      	ldr	r3, [r3, #0]
 801cb6a:	405a      	eors	r2, r3
 801cb6c:	68fb      	ldr	r3, [r7, #12]
 801cb6e:	3308      	adds	r3, #8
 801cb70:	681b      	ldr	r3, [r3, #0]
 801cb72:	4013      	ands	r3, r2
 801cb74:	2b00      	cmp	r3, #0
 801cb76:	d101      	bne.n	801cb7c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801cb78:	68fb      	ldr	r3, [r7, #12]
 801cb7a:	e038      	b.n	801cbee <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801cb7c:	68fb      	ldr	r3, [r7, #12]
 801cb7e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801cb82:	f003 0302 	and.w	r3, r3, #2
 801cb86:	2b00      	cmp	r3, #0
 801cb88:	d108      	bne.n	801cb9c <ip4_route+0x78>
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	681a      	ldr	r2, [r3, #0]
 801cb8e:	68fb      	ldr	r3, [r7, #12]
 801cb90:	330c      	adds	r3, #12
 801cb92:	681b      	ldr	r3, [r3, #0]
 801cb94:	429a      	cmp	r2, r3
 801cb96:	d101      	bne.n	801cb9c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801cb98:	68fb      	ldr	r3, [r7, #12]
 801cb9a:	e028      	b.n	801cbee <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801cb9c:	68fb      	ldr	r3, [r7, #12]
 801cb9e:	681b      	ldr	r3, [r3, #0]
 801cba0:	60fb      	str	r3, [r7, #12]
 801cba2:	68fb      	ldr	r3, [r7, #12]
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	d1c5      	bne.n	801cb34 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801cba8:	4b15      	ldr	r3, [pc, #84]	; (801cc00 <ip4_route+0xdc>)
 801cbaa:	681b      	ldr	r3, [r3, #0]
 801cbac:	2b00      	cmp	r3, #0
 801cbae:	d01a      	beq.n	801cbe6 <ip4_route+0xc2>
 801cbb0:	4b13      	ldr	r3, [pc, #76]	; (801cc00 <ip4_route+0xdc>)
 801cbb2:	681b      	ldr	r3, [r3, #0]
 801cbb4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801cbb8:	f003 0301 	and.w	r3, r3, #1
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	d012      	beq.n	801cbe6 <ip4_route+0xc2>
 801cbc0:	4b0f      	ldr	r3, [pc, #60]	; (801cc00 <ip4_route+0xdc>)
 801cbc2:	681b      	ldr	r3, [r3, #0]
 801cbc4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801cbc8:	f003 0304 	and.w	r3, r3, #4
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d00a      	beq.n	801cbe6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801cbd0:	4b0b      	ldr	r3, [pc, #44]	; (801cc00 <ip4_route+0xdc>)
 801cbd2:	681b      	ldr	r3, [r3, #0]
 801cbd4:	3304      	adds	r3, #4
 801cbd6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801cbd8:	2b00      	cmp	r3, #0
 801cbda:	d004      	beq.n	801cbe6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801cbdc:	687b      	ldr	r3, [r7, #4]
 801cbde:	681b      	ldr	r3, [r3, #0]
 801cbe0:	b2db      	uxtb	r3, r3
 801cbe2:	2b7f      	cmp	r3, #127	; 0x7f
 801cbe4:	d101      	bne.n	801cbea <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801cbe6:	2300      	movs	r3, #0
 801cbe8:	e001      	b.n	801cbee <ip4_route+0xca>
  }

  return netif_default;
 801cbea:	4b05      	ldr	r3, [pc, #20]	; (801cc00 <ip4_route+0xdc>)
 801cbec:	681b      	ldr	r3, [r3, #0]
}
 801cbee:	4618      	mov	r0, r3
 801cbf0:	3714      	adds	r7, #20
 801cbf2:	46bd      	mov	sp, r7
 801cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbf8:	4770      	bx	lr
 801cbfa:	bf00      	nop
 801cbfc:	2000b8c4 	.word	0x2000b8c4
 801cc00:	2000b8c8 	.word	0x2000b8c8

0801cc04 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801cc04:	b580      	push	{r7, lr}
 801cc06:	b082      	sub	sp, #8
 801cc08:	af00      	add	r7, sp, #0
 801cc0a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801cc0c:	687b      	ldr	r3, [r7, #4]
 801cc0e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801cc12:	f003 0301 	and.w	r3, r3, #1
 801cc16:	b2db      	uxtb	r3, r3
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	d016      	beq.n	801cc4a <ip4_input_accept+0x46>
 801cc1c:	687b      	ldr	r3, [r7, #4]
 801cc1e:	3304      	adds	r3, #4
 801cc20:	681b      	ldr	r3, [r3, #0]
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	d011      	beq.n	801cc4a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801cc26:	4b0b      	ldr	r3, [pc, #44]	; (801cc54 <ip4_input_accept+0x50>)
 801cc28:	695a      	ldr	r2, [r3, #20]
 801cc2a:	687b      	ldr	r3, [r7, #4]
 801cc2c:	3304      	adds	r3, #4
 801cc2e:	681b      	ldr	r3, [r3, #0]
 801cc30:	429a      	cmp	r2, r3
 801cc32:	d008      	beq.n	801cc46 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801cc34:	4b07      	ldr	r3, [pc, #28]	; (801cc54 <ip4_input_accept+0x50>)
 801cc36:	695b      	ldr	r3, [r3, #20]
 801cc38:	6879      	ldr	r1, [r7, #4]
 801cc3a:	4618      	mov	r0, r3
 801cc3c:	f000 fa08 	bl	801d050 <ip4_addr_isbroadcast_u32>
 801cc40:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801cc42:	2b00      	cmp	r3, #0
 801cc44:	d001      	beq.n	801cc4a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801cc46:	2301      	movs	r3, #1
 801cc48:	e000      	b.n	801cc4c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801cc4a:	2300      	movs	r3, #0
}
 801cc4c:	4618      	mov	r0, r3
 801cc4e:	3708      	adds	r7, #8
 801cc50:	46bd      	mov	sp, r7
 801cc52:	bd80      	pop	{r7, pc}
 801cc54:	200081c0 	.word	0x200081c0

0801cc58 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801cc58:	b580      	push	{r7, lr}
 801cc5a:	b086      	sub	sp, #24
 801cc5c:	af00      	add	r7, sp, #0
 801cc5e:	6078      	str	r0, [r7, #4]
 801cc60:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801cc62:	687b      	ldr	r3, [r7, #4]
 801cc64:	685b      	ldr	r3, [r3, #4]
 801cc66:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801cc68:	697b      	ldr	r3, [r7, #20]
 801cc6a:	781b      	ldrb	r3, [r3, #0]
 801cc6c:	091b      	lsrs	r3, r3, #4
 801cc6e:	b2db      	uxtb	r3, r3
 801cc70:	2b04      	cmp	r3, #4
 801cc72:	d004      	beq.n	801cc7e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801cc74:	6878      	ldr	r0, [r7, #4]
 801cc76:	f7f7 fcbb 	bl	80145f0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801cc7a:	2300      	movs	r3, #0
 801cc7c:	e107      	b.n	801ce8e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801cc7e:	697b      	ldr	r3, [r7, #20]
 801cc80:	781b      	ldrb	r3, [r3, #0]
 801cc82:	f003 030f 	and.w	r3, r3, #15
 801cc86:	b2db      	uxtb	r3, r3
 801cc88:	009b      	lsls	r3, r3, #2
 801cc8a:	b2db      	uxtb	r3, r3
 801cc8c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801cc8e:	697b      	ldr	r3, [r7, #20]
 801cc90:	885b      	ldrh	r3, [r3, #2]
 801cc92:	b29b      	uxth	r3, r3
 801cc94:	4618      	mov	r0, r3
 801cc96:	f7f6 f8ef 	bl	8012e78 <lwip_htons>
 801cc9a:	4603      	mov	r3, r0
 801cc9c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801cc9e:	687b      	ldr	r3, [r7, #4]
 801cca0:	891b      	ldrh	r3, [r3, #8]
 801cca2:	89ba      	ldrh	r2, [r7, #12]
 801cca4:	429a      	cmp	r2, r3
 801cca6:	d204      	bcs.n	801ccb2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801cca8:	89bb      	ldrh	r3, [r7, #12]
 801ccaa:	4619      	mov	r1, r3
 801ccac:	6878      	ldr	r0, [r7, #4]
 801ccae:	f7f7 fb19 	bl	80142e4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801ccb2:	687b      	ldr	r3, [r7, #4]
 801ccb4:	895b      	ldrh	r3, [r3, #10]
 801ccb6:	89fa      	ldrh	r2, [r7, #14]
 801ccb8:	429a      	cmp	r2, r3
 801ccba:	d807      	bhi.n	801cccc <ip4_input+0x74>
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	891b      	ldrh	r3, [r3, #8]
 801ccc0:	89ba      	ldrh	r2, [r7, #12]
 801ccc2:	429a      	cmp	r2, r3
 801ccc4:	d802      	bhi.n	801cccc <ip4_input+0x74>
 801ccc6:	89fb      	ldrh	r3, [r7, #14]
 801ccc8:	2b13      	cmp	r3, #19
 801ccca:	d804      	bhi.n	801ccd6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801cccc:	6878      	ldr	r0, [r7, #4]
 801ccce:	f7f7 fc8f 	bl	80145f0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801ccd2:	2300      	movs	r3, #0
 801ccd4:	e0db      	b.n	801ce8e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801ccd6:	697b      	ldr	r3, [r7, #20]
 801ccd8:	691b      	ldr	r3, [r3, #16]
 801ccda:	4a6f      	ldr	r2, [pc, #444]	; (801ce98 <ip4_input+0x240>)
 801ccdc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801ccde:	697b      	ldr	r3, [r7, #20]
 801cce0:	68db      	ldr	r3, [r3, #12]
 801cce2:	4a6d      	ldr	r2, [pc, #436]	; (801ce98 <ip4_input+0x240>)
 801cce4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801cce6:	4b6c      	ldr	r3, [pc, #432]	; (801ce98 <ip4_input+0x240>)
 801cce8:	695b      	ldr	r3, [r3, #20]
 801ccea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ccee:	2be0      	cmp	r3, #224	; 0xe0
 801ccf0:	d112      	bne.n	801cd18 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801ccf2:	683b      	ldr	r3, [r7, #0]
 801ccf4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801ccf8:	f003 0301 	and.w	r3, r3, #1
 801ccfc:	b2db      	uxtb	r3, r3
 801ccfe:	2b00      	cmp	r3, #0
 801cd00:	d007      	beq.n	801cd12 <ip4_input+0xba>
 801cd02:	683b      	ldr	r3, [r7, #0]
 801cd04:	3304      	adds	r3, #4
 801cd06:	681b      	ldr	r3, [r3, #0]
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	d002      	beq.n	801cd12 <ip4_input+0xba>
      netif = inp;
 801cd0c:	683b      	ldr	r3, [r7, #0]
 801cd0e:	613b      	str	r3, [r7, #16]
 801cd10:	e02a      	b.n	801cd68 <ip4_input+0x110>
    } else {
      netif = NULL;
 801cd12:	2300      	movs	r3, #0
 801cd14:	613b      	str	r3, [r7, #16]
 801cd16:	e027      	b.n	801cd68 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801cd18:	6838      	ldr	r0, [r7, #0]
 801cd1a:	f7ff ff73 	bl	801cc04 <ip4_input_accept>
 801cd1e:	4603      	mov	r3, r0
 801cd20:	2b00      	cmp	r3, #0
 801cd22:	d002      	beq.n	801cd2a <ip4_input+0xd2>
      netif = inp;
 801cd24:	683b      	ldr	r3, [r7, #0]
 801cd26:	613b      	str	r3, [r7, #16]
 801cd28:	e01e      	b.n	801cd68 <ip4_input+0x110>
    } else {
      netif = NULL;
 801cd2a:	2300      	movs	r3, #0
 801cd2c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801cd2e:	4b5a      	ldr	r3, [pc, #360]	; (801ce98 <ip4_input+0x240>)
 801cd30:	695b      	ldr	r3, [r3, #20]
 801cd32:	b2db      	uxtb	r3, r3
 801cd34:	2b7f      	cmp	r3, #127	; 0x7f
 801cd36:	d017      	beq.n	801cd68 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801cd38:	4b58      	ldr	r3, [pc, #352]	; (801ce9c <ip4_input+0x244>)
 801cd3a:	681b      	ldr	r3, [r3, #0]
 801cd3c:	613b      	str	r3, [r7, #16]
 801cd3e:	e00e      	b.n	801cd5e <ip4_input+0x106>
          if (netif == inp) {
 801cd40:	693a      	ldr	r2, [r7, #16]
 801cd42:	683b      	ldr	r3, [r7, #0]
 801cd44:	429a      	cmp	r2, r3
 801cd46:	d006      	beq.n	801cd56 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801cd48:	6938      	ldr	r0, [r7, #16]
 801cd4a:	f7ff ff5b 	bl	801cc04 <ip4_input_accept>
 801cd4e:	4603      	mov	r3, r0
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	d108      	bne.n	801cd66 <ip4_input+0x10e>
 801cd54:	e000      	b.n	801cd58 <ip4_input+0x100>
            continue;
 801cd56:	bf00      	nop
        NETIF_FOREACH(netif) {
 801cd58:	693b      	ldr	r3, [r7, #16]
 801cd5a:	681b      	ldr	r3, [r3, #0]
 801cd5c:	613b      	str	r3, [r7, #16]
 801cd5e:	693b      	ldr	r3, [r7, #16]
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	d1ed      	bne.n	801cd40 <ip4_input+0xe8>
 801cd64:	e000      	b.n	801cd68 <ip4_input+0x110>
            break;
 801cd66:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801cd68:	4b4b      	ldr	r3, [pc, #300]	; (801ce98 <ip4_input+0x240>)
 801cd6a:	691b      	ldr	r3, [r3, #16]
 801cd6c:	6839      	ldr	r1, [r7, #0]
 801cd6e:	4618      	mov	r0, r3
 801cd70:	f000 f96e 	bl	801d050 <ip4_addr_isbroadcast_u32>
 801cd74:	4603      	mov	r3, r0
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	d105      	bne.n	801cd86 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801cd7a:	4b47      	ldr	r3, [pc, #284]	; (801ce98 <ip4_input+0x240>)
 801cd7c:	691b      	ldr	r3, [r3, #16]
 801cd7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801cd82:	2be0      	cmp	r3, #224	; 0xe0
 801cd84:	d104      	bne.n	801cd90 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801cd86:	6878      	ldr	r0, [r7, #4]
 801cd88:	f7f7 fc32 	bl	80145f0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801cd8c:	2300      	movs	r3, #0
 801cd8e:	e07e      	b.n	801ce8e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801cd90:	693b      	ldr	r3, [r7, #16]
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	d104      	bne.n	801cda0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801cd96:	6878      	ldr	r0, [r7, #4]
 801cd98:	f7f7 fc2a 	bl	80145f0 <pbuf_free>
    return ERR_OK;
 801cd9c:	2300      	movs	r3, #0
 801cd9e:	e076      	b.n	801ce8e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801cda0:	697b      	ldr	r3, [r7, #20]
 801cda2:	88db      	ldrh	r3, [r3, #6]
 801cda4:	b29b      	uxth	r3, r3
 801cda6:	461a      	mov	r2, r3
 801cda8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801cdac:	4013      	ands	r3, r2
 801cdae:	2b00      	cmp	r3, #0
 801cdb0:	d00b      	beq.n	801cdca <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801cdb2:	6878      	ldr	r0, [r7, #4]
 801cdb4:	f000 fdbc 	bl	801d930 <ip4_reass>
 801cdb8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	d101      	bne.n	801cdc4 <ip4_input+0x16c>
      return ERR_OK;
 801cdc0:	2300      	movs	r3, #0
 801cdc2:	e064      	b.n	801ce8e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	685b      	ldr	r3, [r3, #4]
 801cdc8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801cdca:	4a33      	ldr	r2, [pc, #204]	; (801ce98 <ip4_input+0x240>)
 801cdcc:	693b      	ldr	r3, [r7, #16]
 801cdce:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801cdd0:	4a31      	ldr	r2, [pc, #196]	; (801ce98 <ip4_input+0x240>)
 801cdd2:	683b      	ldr	r3, [r7, #0]
 801cdd4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801cdd6:	4a30      	ldr	r2, [pc, #192]	; (801ce98 <ip4_input+0x240>)
 801cdd8:	697b      	ldr	r3, [r7, #20]
 801cdda:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801cddc:	697b      	ldr	r3, [r7, #20]
 801cdde:	781b      	ldrb	r3, [r3, #0]
 801cde0:	f003 030f 	and.w	r3, r3, #15
 801cde4:	b2db      	uxtb	r3, r3
 801cde6:	009b      	lsls	r3, r3, #2
 801cde8:	b2db      	uxtb	r3, r3
 801cdea:	b29a      	uxth	r2, r3
 801cdec:	4b2a      	ldr	r3, [pc, #168]	; (801ce98 <ip4_input+0x240>)
 801cdee:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801cdf0:	89fb      	ldrh	r3, [r7, #14]
 801cdf2:	4619      	mov	r1, r3
 801cdf4:	6878      	ldr	r0, [r7, #4]
 801cdf6:	f7f7 fb75 	bl	80144e4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801cdfa:	697b      	ldr	r3, [r7, #20]
 801cdfc:	7a5b      	ldrb	r3, [r3, #9]
 801cdfe:	2b11      	cmp	r3, #17
 801ce00:	d006      	beq.n	801ce10 <ip4_input+0x1b8>
 801ce02:	2b11      	cmp	r3, #17
 801ce04:	dc13      	bgt.n	801ce2e <ip4_input+0x1d6>
 801ce06:	2b01      	cmp	r3, #1
 801ce08:	d00c      	beq.n	801ce24 <ip4_input+0x1cc>
 801ce0a:	2b06      	cmp	r3, #6
 801ce0c:	d005      	beq.n	801ce1a <ip4_input+0x1c2>
 801ce0e:	e00e      	b.n	801ce2e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801ce10:	6839      	ldr	r1, [r7, #0]
 801ce12:	6878      	ldr	r0, [r7, #4]
 801ce14:	f7fe f970 	bl	801b0f8 <udp_input>
        break;
 801ce18:	e026      	b.n	801ce68 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801ce1a:	6839      	ldr	r1, [r7, #0]
 801ce1c:	6878      	ldr	r0, [r7, #4]
 801ce1e:	f7f9 fd2d 	bl	801687c <tcp_input>
        break;
 801ce22:	e021      	b.n	801ce68 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801ce24:	6839      	ldr	r1, [r7, #0]
 801ce26:	6878      	ldr	r0, [r7, #4]
 801ce28:	f7ff fcee 	bl	801c808 <icmp_input>
        break;
 801ce2c:	e01c      	b.n	801ce68 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ce2e:	4b1a      	ldr	r3, [pc, #104]	; (801ce98 <ip4_input+0x240>)
 801ce30:	695b      	ldr	r3, [r3, #20]
 801ce32:	6939      	ldr	r1, [r7, #16]
 801ce34:	4618      	mov	r0, r3
 801ce36:	f000 f90b 	bl	801d050 <ip4_addr_isbroadcast_u32>
 801ce3a:	4603      	mov	r3, r0
 801ce3c:	2b00      	cmp	r3, #0
 801ce3e:	d10f      	bne.n	801ce60 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ce40:	4b15      	ldr	r3, [pc, #84]	; (801ce98 <ip4_input+0x240>)
 801ce42:	695b      	ldr	r3, [r3, #20]
 801ce44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ce48:	2be0      	cmp	r3, #224	; 0xe0
 801ce4a:	d009      	beq.n	801ce60 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801ce4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ce50:	4619      	mov	r1, r3
 801ce52:	6878      	ldr	r0, [r7, #4]
 801ce54:	f7f7 fbb9 	bl	80145ca <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801ce58:	2102      	movs	r1, #2
 801ce5a:	6878      	ldr	r0, [r7, #4]
 801ce5c:	f7ff fdd8 	bl	801ca10 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801ce60:	6878      	ldr	r0, [r7, #4]
 801ce62:	f7f7 fbc5 	bl	80145f0 <pbuf_free>
        break;
 801ce66:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801ce68:	4b0b      	ldr	r3, [pc, #44]	; (801ce98 <ip4_input+0x240>)
 801ce6a:	2200      	movs	r2, #0
 801ce6c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801ce6e:	4b0a      	ldr	r3, [pc, #40]	; (801ce98 <ip4_input+0x240>)
 801ce70:	2200      	movs	r2, #0
 801ce72:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801ce74:	4b08      	ldr	r3, [pc, #32]	; (801ce98 <ip4_input+0x240>)
 801ce76:	2200      	movs	r2, #0
 801ce78:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801ce7a:	4b07      	ldr	r3, [pc, #28]	; (801ce98 <ip4_input+0x240>)
 801ce7c:	2200      	movs	r2, #0
 801ce7e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801ce80:	4b05      	ldr	r3, [pc, #20]	; (801ce98 <ip4_input+0x240>)
 801ce82:	2200      	movs	r2, #0
 801ce84:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801ce86:	4b04      	ldr	r3, [pc, #16]	; (801ce98 <ip4_input+0x240>)
 801ce88:	2200      	movs	r2, #0
 801ce8a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801ce8c:	2300      	movs	r3, #0
}
 801ce8e:	4618      	mov	r0, r3
 801ce90:	3718      	adds	r7, #24
 801ce92:	46bd      	mov	sp, r7
 801ce94:	bd80      	pop	{r7, pc}
 801ce96:	bf00      	nop
 801ce98:	200081c0 	.word	0x200081c0
 801ce9c:	2000b8c4 	.word	0x2000b8c4

0801cea0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801cea0:	b580      	push	{r7, lr}
 801cea2:	b08a      	sub	sp, #40	; 0x28
 801cea4:	af04      	add	r7, sp, #16
 801cea6:	60f8      	str	r0, [r7, #12]
 801cea8:	60b9      	str	r1, [r7, #8]
 801ceaa:	607a      	str	r2, [r7, #4]
 801ceac:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801ceae:	68bb      	ldr	r3, [r7, #8]
 801ceb0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801ceb2:	687b      	ldr	r3, [r7, #4]
 801ceb4:	2b00      	cmp	r3, #0
 801ceb6:	d009      	beq.n	801cecc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801ceb8:	68bb      	ldr	r3, [r7, #8]
 801ceba:	2b00      	cmp	r3, #0
 801cebc:	d003      	beq.n	801cec6 <ip4_output_if+0x26>
 801cebe:	68bb      	ldr	r3, [r7, #8]
 801cec0:	681b      	ldr	r3, [r3, #0]
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	d102      	bne.n	801cecc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801cec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cec8:	3304      	adds	r3, #4
 801ceca:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801cecc:	78fa      	ldrb	r2, [r7, #3]
 801cece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ced0:	9302      	str	r3, [sp, #8]
 801ced2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ced6:	9301      	str	r3, [sp, #4]
 801ced8:	f897 3020 	ldrb.w	r3, [r7, #32]
 801cedc:	9300      	str	r3, [sp, #0]
 801cede:	4613      	mov	r3, r2
 801cee0:	687a      	ldr	r2, [r7, #4]
 801cee2:	6979      	ldr	r1, [r7, #20]
 801cee4:	68f8      	ldr	r0, [r7, #12]
 801cee6:	f000 f805 	bl	801cef4 <ip4_output_if_src>
 801ceea:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801ceec:	4618      	mov	r0, r3
 801ceee:	3718      	adds	r7, #24
 801cef0:	46bd      	mov	sp, r7
 801cef2:	bd80      	pop	{r7, pc}

0801cef4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801cef4:	b580      	push	{r7, lr}
 801cef6:	b088      	sub	sp, #32
 801cef8:	af00      	add	r7, sp, #0
 801cefa:	60f8      	str	r0, [r7, #12]
 801cefc:	60b9      	str	r1, [r7, #8]
 801cefe:	607a      	str	r2, [r7, #4]
 801cf00:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801cf02:	68fb      	ldr	r3, [r7, #12]
 801cf04:	7b9b      	ldrb	r3, [r3, #14]
 801cf06:	2b01      	cmp	r3, #1
 801cf08:	d006      	beq.n	801cf18 <ip4_output_if_src+0x24>
 801cf0a:	4b4b      	ldr	r3, [pc, #300]	; (801d038 <ip4_output_if_src+0x144>)
 801cf0c:	f44f 7255 	mov.w	r2, #852	; 0x354
 801cf10:	494a      	ldr	r1, [pc, #296]	; (801d03c <ip4_output_if_src+0x148>)
 801cf12:	484b      	ldr	r0, [pc, #300]	; (801d040 <ip4_output_if_src+0x14c>)
 801cf14:	f002 fbd4 	bl	801f6c0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	2b00      	cmp	r3, #0
 801cf1c:	d060      	beq.n	801cfe0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801cf1e:	2314      	movs	r3, #20
 801cf20:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801cf22:	2114      	movs	r1, #20
 801cf24:	68f8      	ldr	r0, [r7, #12]
 801cf26:	f7f7 facd 	bl	80144c4 <pbuf_add_header>
 801cf2a:	4603      	mov	r3, r0
 801cf2c:	2b00      	cmp	r3, #0
 801cf2e:	d002      	beq.n	801cf36 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801cf30:	f06f 0301 	mvn.w	r3, #1
 801cf34:	e07c      	b.n	801d030 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801cf36:	68fb      	ldr	r3, [r7, #12]
 801cf38:	685b      	ldr	r3, [r3, #4]
 801cf3a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801cf3c:	68fb      	ldr	r3, [r7, #12]
 801cf3e:	895b      	ldrh	r3, [r3, #10]
 801cf40:	2b13      	cmp	r3, #19
 801cf42:	d806      	bhi.n	801cf52 <ip4_output_if_src+0x5e>
 801cf44:	4b3c      	ldr	r3, [pc, #240]	; (801d038 <ip4_output_if_src+0x144>)
 801cf46:	f44f 7262 	mov.w	r2, #904	; 0x388
 801cf4a:	493e      	ldr	r1, [pc, #248]	; (801d044 <ip4_output_if_src+0x150>)
 801cf4c:	483c      	ldr	r0, [pc, #240]	; (801d040 <ip4_output_if_src+0x14c>)
 801cf4e:	f002 fbb7 	bl	801f6c0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801cf52:	69fb      	ldr	r3, [r7, #28]
 801cf54:	78fa      	ldrb	r2, [r7, #3]
 801cf56:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801cf58:	69fb      	ldr	r3, [r7, #28]
 801cf5a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801cf5e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801cf60:	687b      	ldr	r3, [r7, #4]
 801cf62:	681a      	ldr	r2, [r3, #0]
 801cf64:	69fb      	ldr	r3, [r7, #28]
 801cf66:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801cf68:	8b7b      	ldrh	r3, [r7, #26]
 801cf6a:	089b      	lsrs	r3, r3, #2
 801cf6c:	b29b      	uxth	r3, r3
 801cf6e:	b2db      	uxtb	r3, r3
 801cf70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cf74:	b2da      	uxtb	r2, r3
 801cf76:	69fb      	ldr	r3, [r7, #28]
 801cf78:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801cf7a:	69fb      	ldr	r3, [r7, #28]
 801cf7c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801cf80:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801cf82:	68fb      	ldr	r3, [r7, #12]
 801cf84:	891b      	ldrh	r3, [r3, #8]
 801cf86:	4618      	mov	r0, r3
 801cf88:	f7f5 ff76 	bl	8012e78 <lwip_htons>
 801cf8c:	4603      	mov	r3, r0
 801cf8e:	461a      	mov	r2, r3
 801cf90:	69fb      	ldr	r3, [r7, #28]
 801cf92:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801cf94:	69fb      	ldr	r3, [r7, #28]
 801cf96:	2200      	movs	r2, #0
 801cf98:	719a      	strb	r2, [r3, #6]
 801cf9a:	2200      	movs	r2, #0
 801cf9c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801cf9e:	4b2a      	ldr	r3, [pc, #168]	; (801d048 <ip4_output_if_src+0x154>)
 801cfa0:	881b      	ldrh	r3, [r3, #0]
 801cfa2:	4618      	mov	r0, r3
 801cfa4:	f7f5 ff68 	bl	8012e78 <lwip_htons>
 801cfa8:	4603      	mov	r3, r0
 801cfaa:	461a      	mov	r2, r3
 801cfac:	69fb      	ldr	r3, [r7, #28]
 801cfae:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801cfb0:	4b25      	ldr	r3, [pc, #148]	; (801d048 <ip4_output_if_src+0x154>)
 801cfb2:	881b      	ldrh	r3, [r3, #0]
 801cfb4:	3301      	adds	r3, #1
 801cfb6:	b29a      	uxth	r2, r3
 801cfb8:	4b23      	ldr	r3, [pc, #140]	; (801d048 <ip4_output_if_src+0x154>)
 801cfba:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801cfbc:	68bb      	ldr	r3, [r7, #8]
 801cfbe:	2b00      	cmp	r3, #0
 801cfc0:	d104      	bne.n	801cfcc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801cfc2:	4b22      	ldr	r3, [pc, #136]	; (801d04c <ip4_output_if_src+0x158>)
 801cfc4:	681a      	ldr	r2, [r3, #0]
 801cfc6:	69fb      	ldr	r3, [r7, #28]
 801cfc8:	60da      	str	r2, [r3, #12]
 801cfca:	e003      	b.n	801cfd4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801cfcc:	68bb      	ldr	r3, [r7, #8]
 801cfce:	681a      	ldr	r2, [r3, #0]
 801cfd0:	69fb      	ldr	r3, [r7, #28]
 801cfd2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801cfd4:	69fb      	ldr	r3, [r7, #28]
 801cfd6:	2200      	movs	r2, #0
 801cfd8:	729a      	strb	r2, [r3, #10]
 801cfda:	2200      	movs	r2, #0
 801cfdc:	72da      	strb	r2, [r3, #11]
 801cfde:	e00f      	b.n	801d000 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801cfe0:	68fb      	ldr	r3, [r7, #12]
 801cfe2:	895b      	ldrh	r3, [r3, #10]
 801cfe4:	2b13      	cmp	r3, #19
 801cfe6:	d802      	bhi.n	801cfee <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801cfe8:	f06f 0301 	mvn.w	r3, #1
 801cfec:	e020      	b.n	801d030 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801cfee:	68fb      	ldr	r3, [r7, #12]
 801cff0:	685b      	ldr	r3, [r3, #4]
 801cff2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801cff4:	69fb      	ldr	r3, [r7, #28]
 801cff6:	691b      	ldr	r3, [r3, #16]
 801cff8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801cffa:	f107 0314 	add.w	r3, r7, #20
 801cffe:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801d000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d002:	8c1b      	ldrh	r3, [r3, #32]
 801d004:	2b00      	cmp	r3, #0
 801d006:	d00c      	beq.n	801d022 <ip4_output_if_src+0x12e>
 801d008:	68fb      	ldr	r3, [r7, #12]
 801d00a:	891a      	ldrh	r2, [r3, #8]
 801d00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d00e:	8c1b      	ldrh	r3, [r3, #32]
 801d010:	429a      	cmp	r2, r3
 801d012:	d906      	bls.n	801d022 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801d014:	687a      	ldr	r2, [r7, #4]
 801d016:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d018:	68f8      	ldr	r0, [r7, #12]
 801d01a:	f000 fe77 	bl	801dd0c <ip4_frag>
 801d01e:	4603      	mov	r3, r0
 801d020:	e006      	b.n	801d030 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801d022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d024:	695b      	ldr	r3, [r3, #20]
 801d026:	687a      	ldr	r2, [r7, #4]
 801d028:	68f9      	ldr	r1, [r7, #12]
 801d02a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d02c:	4798      	blx	r3
 801d02e:	4603      	mov	r3, r0
}
 801d030:	4618      	mov	r0, r3
 801d032:	3720      	adds	r7, #32
 801d034:	46bd      	mov	sp, r7
 801d036:	bd80      	pop	{r7, pc}
 801d038:	08026214 	.word	0x08026214
 801d03c:	08026248 	.word	0x08026248
 801d040:	08026254 	.word	0x08026254
 801d044:	0802627c 	.word	0x0802627c
 801d048:	200048a6 	.word	0x200048a6
 801d04c:	08027630 	.word	0x08027630

0801d050 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801d050:	b480      	push	{r7}
 801d052:	b085      	sub	sp, #20
 801d054:	af00      	add	r7, sp, #0
 801d056:	6078      	str	r0, [r7, #4]
 801d058:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d064:	d002      	beq.n	801d06c <ip4_addr_isbroadcast_u32+0x1c>
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	2b00      	cmp	r3, #0
 801d06a:	d101      	bne.n	801d070 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801d06c:	2301      	movs	r3, #1
 801d06e:	e02a      	b.n	801d0c6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801d070:	683b      	ldr	r3, [r7, #0]
 801d072:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801d076:	f003 0302 	and.w	r3, r3, #2
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	d101      	bne.n	801d082 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801d07e:	2300      	movs	r3, #0
 801d080:	e021      	b.n	801d0c6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801d082:	683b      	ldr	r3, [r7, #0]
 801d084:	3304      	adds	r3, #4
 801d086:	681b      	ldr	r3, [r3, #0]
 801d088:	687a      	ldr	r2, [r7, #4]
 801d08a:	429a      	cmp	r2, r3
 801d08c:	d101      	bne.n	801d092 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801d08e:	2300      	movs	r3, #0
 801d090:	e019      	b.n	801d0c6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801d092:	68fa      	ldr	r2, [r7, #12]
 801d094:	683b      	ldr	r3, [r7, #0]
 801d096:	3304      	adds	r3, #4
 801d098:	681b      	ldr	r3, [r3, #0]
 801d09a:	405a      	eors	r2, r3
 801d09c:	683b      	ldr	r3, [r7, #0]
 801d09e:	3308      	adds	r3, #8
 801d0a0:	681b      	ldr	r3, [r3, #0]
 801d0a2:	4013      	ands	r3, r2
 801d0a4:	2b00      	cmp	r3, #0
 801d0a6:	d10d      	bne.n	801d0c4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d0a8:	683b      	ldr	r3, [r7, #0]
 801d0aa:	3308      	adds	r3, #8
 801d0ac:	681b      	ldr	r3, [r3, #0]
 801d0ae:	43da      	mvns	r2, r3
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801d0b4:	683b      	ldr	r3, [r7, #0]
 801d0b6:	3308      	adds	r3, #8
 801d0b8:	681b      	ldr	r3, [r3, #0]
 801d0ba:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d0bc:	429a      	cmp	r2, r3
 801d0be:	d101      	bne.n	801d0c4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801d0c0:	2301      	movs	r3, #1
 801d0c2:	e000      	b.n	801d0c6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801d0c4:	2300      	movs	r3, #0
  }
}
 801d0c6:	4618      	mov	r0, r3
 801d0c8:	3714      	adds	r7, #20
 801d0ca:	46bd      	mov	sp, r7
 801d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0d0:	4770      	bx	lr
	...

0801d0d4 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801d0d4:	b580      	push	{r7, lr}
 801d0d6:	b08a      	sub	sp, #40	; 0x28
 801d0d8:	af00      	add	r7, sp, #0
 801d0da:	6078      	str	r0, [r7, #4]
 801d0dc:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801d0de:	f107 030c 	add.w	r3, r7, #12
 801d0e2:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	781b      	ldrb	r3, [r3, #0]
 801d0e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801d0ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d0f0:	3301      	adds	r3, #1
 801d0f2:	4a89      	ldr	r2, [pc, #548]	; (801d318 <ip4addr_aton+0x244>)
 801d0f4:	4413      	add	r3, r2
 801d0f6:	781b      	ldrb	r3, [r3, #0]
 801d0f8:	f003 0304 	and.w	r3, r3, #4
 801d0fc:	2b00      	cmp	r3, #0
 801d0fe:	d101      	bne.n	801d104 <ip4addr_aton+0x30>
      return 0;
 801d100:	2300      	movs	r3, #0
 801d102:	e105      	b.n	801d310 <ip4addr_aton+0x23c>
    }
    val = 0;
 801d104:	2300      	movs	r3, #0
 801d106:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801d108:	230a      	movs	r3, #10
 801d10a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801d10e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d112:	2b30      	cmp	r3, #48	; 0x30
 801d114:	d11c      	bne.n	801d150 <ip4addr_aton+0x7c>
      c = *++cp;
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	3301      	adds	r3, #1
 801d11a:	607b      	str	r3, [r7, #4]
 801d11c:	687b      	ldr	r3, [r7, #4]
 801d11e:	781b      	ldrb	r3, [r3, #0]
 801d120:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801d124:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d128:	2b78      	cmp	r3, #120	; 0x78
 801d12a:	d003      	beq.n	801d134 <ip4addr_aton+0x60>
 801d12c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d130:	2b58      	cmp	r3, #88	; 0x58
 801d132:	d10a      	bne.n	801d14a <ip4addr_aton+0x76>
        base = 16;
 801d134:	2310      	movs	r3, #16
 801d136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801d13a:	687b      	ldr	r3, [r7, #4]
 801d13c:	3301      	adds	r3, #1
 801d13e:	607b      	str	r3, [r7, #4]
 801d140:	687b      	ldr	r3, [r7, #4]
 801d142:	781b      	ldrb	r3, [r3, #0]
 801d144:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801d148:	e002      	b.n	801d150 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801d14a:	2308      	movs	r3, #8
 801d14c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801d150:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d154:	3301      	adds	r3, #1
 801d156:	4a70      	ldr	r2, [pc, #448]	; (801d318 <ip4addr_aton+0x244>)
 801d158:	4413      	add	r3, r2
 801d15a:	781b      	ldrb	r3, [r3, #0]
 801d15c:	f003 0304 	and.w	r3, r3, #4
 801d160:	2b00      	cmp	r3, #0
 801d162:	d011      	beq.n	801d188 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801d164:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d16a:	fb02 f203 	mul.w	r2, r2, r3
 801d16e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d172:	4413      	add	r3, r2
 801d174:	3b30      	subs	r3, #48	; 0x30
 801d176:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801d178:	687b      	ldr	r3, [r7, #4]
 801d17a:	3301      	adds	r3, #1
 801d17c:	607b      	str	r3, [r7, #4]
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	781b      	ldrb	r3, [r3, #0]
 801d182:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801d186:	e7e3      	b.n	801d150 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801d188:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d18c:	2b10      	cmp	r3, #16
 801d18e:	d127      	bne.n	801d1e0 <ip4addr_aton+0x10c>
 801d190:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d194:	3301      	adds	r3, #1
 801d196:	4a60      	ldr	r2, [pc, #384]	; (801d318 <ip4addr_aton+0x244>)
 801d198:	4413      	add	r3, r2
 801d19a:	781b      	ldrb	r3, [r3, #0]
 801d19c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801d1a0:	2b00      	cmp	r3, #0
 801d1a2:	d01d      	beq.n	801d1e0 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1a6:	011b      	lsls	r3, r3, #4
 801d1a8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801d1ac:	f102 010a 	add.w	r1, r2, #10
 801d1b0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801d1b4:	3201      	adds	r2, #1
 801d1b6:	4858      	ldr	r0, [pc, #352]	; (801d318 <ip4addr_aton+0x244>)
 801d1b8:	4402      	add	r2, r0
 801d1ba:	7812      	ldrb	r2, [r2, #0]
 801d1bc:	f002 0203 	and.w	r2, r2, #3
 801d1c0:	2a02      	cmp	r2, #2
 801d1c2:	d101      	bne.n	801d1c8 <ip4addr_aton+0xf4>
 801d1c4:	2261      	movs	r2, #97	; 0x61
 801d1c6:	e000      	b.n	801d1ca <ip4addr_aton+0xf6>
 801d1c8:	2241      	movs	r2, #65	; 0x41
 801d1ca:	1a8a      	subs	r2, r1, r2
 801d1cc:	4313      	orrs	r3, r2
 801d1ce:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801d1d0:	687b      	ldr	r3, [r7, #4]
 801d1d2:	3301      	adds	r3, #1
 801d1d4:	607b      	str	r3, [r7, #4]
 801d1d6:	687b      	ldr	r3, [r7, #4]
 801d1d8:	781b      	ldrb	r3, [r3, #0]
 801d1da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 801d1de:	e7b7      	b.n	801d150 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801d1e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d1e4:	2b2e      	cmp	r3, #46	; 0x2e
 801d1e6:	d114      	bne.n	801d212 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801d1e8:	f107 030c 	add.w	r3, r7, #12
 801d1ec:	330c      	adds	r3, #12
 801d1ee:	69fa      	ldr	r2, [r7, #28]
 801d1f0:	429a      	cmp	r2, r3
 801d1f2:	d301      	bcc.n	801d1f8 <ip4addr_aton+0x124>
        return 0;
 801d1f4:	2300      	movs	r3, #0
 801d1f6:	e08b      	b.n	801d310 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801d1f8:	69fb      	ldr	r3, [r7, #28]
 801d1fa:	1d1a      	adds	r2, r3, #4
 801d1fc:	61fa      	str	r2, [r7, #28]
 801d1fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d200:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801d202:	687b      	ldr	r3, [r7, #4]
 801d204:	3301      	adds	r3, #1
 801d206:	607b      	str	r3, [r7, #4]
 801d208:	687b      	ldr	r3, [r7, #4]
 801d20a:	781b      	ldrb	r3, [r3, #0]
 801d20c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 801d210:	e76c      	b.n	801d0ec <ip4addr_aton+0x18>
    } else {
      break;
 801d212:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801d214:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d218:	2b00      	cmp	r3, #0
 801d21a:	d00b      	beq.n	801d234 <ip4addr_aton+0x160>
 801d21c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d220:	3301      	adds	r3, #1
 801d222:	4a3d      	ldr	r2, [pc, #244]	; (801d318 <ip4addr_aton+0x244>)
 801d224:	4413      	add	r3, r2
 801d226:	781b      	ldrb	r3, [r3, #0]
 801d228:	f003 0308 	and.w	r3, r3, #8
 801d22c:	2b00      	cmp	r3, #0
 801d22e:	d101      	bne.n	801d234 <ip4addr_aton+0x160>
    return 0;
 801d230:	2300      	movs	r3, #0
 801d232:	e06d      	b.n	801d310 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801d234:	f107 030c 	add.w	r3, r7, #12
 801d238:	69fa      	ldr	r2, [r7, #28]
 801d23a:	1ad3      	subs	r3, r2, r3
 801d23c:	109b      	asrs	r3, r3, #2
 801d23e:	3301      	adds	r3, #1
 801d240:	2b04      	cmp	r3, #4
 801d242:	d853      	bhi.n	801d2ec <ip4addr_aton+0x218>
 801d244:	a201      	add	r2, pc, #4	; (adr r2, 801d24c <ip4addr_aton+0x178>)
 801d246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d24a:	bf00      	nop
 801d24c:	0801d261 	.word	0x0801d261
 801d250:	0801d2fb 	.word	0x0801d2fb
 801d254:	0801d265 	.word	0x0801d265
 801d258:	0801d287 	.word	0x0801d287
 801d25c:	0801d2b5 	.word	0x0801d2b5

    case 0:
      return 0;       /* initial nondigit */
 801d260:	2300      	movs	r3, #0
 801d262:	e055      	b.n	801d310 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801d264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d266:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801d26a:	d301      	bcc.n	801d270 <ip4addr_aton+0x19c>
        return 0;
 801d26c:	2300      	movs	r3, #0
 801d26e:	e04f      	b.n	801d310 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801d270:	68fb      	ldr	r3, [r7, #12]
 801d272:	2bff      	cmp	r3, #255	; 0xff
 801d274:	d901      	bls.n	801d27a <ip4addr_aton+0x1a6>
        return 0;
 801d276:	2300      	movs	r3, #0
 801d278:	e04a      	b.n	801d310 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801d27a:	68fb      	ldr	r3, [r7, #12]
 801d27c:	061b      	lsls	r3, r3, #24
 801d27e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d280:	4313      	orrs	r3, r2
 801d282:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801d284:	e03a      	b.n	801d2fc <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801d286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d28c:	d301      	bcc.n	801d292 <ip4addr_aton+0x1be>
        return 0;
 801d28e:	2300      	movs	r3, #0
 801d290:	e03e      	b.n	801d310 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801d292:	68fb      	ldr	r3, [r7, #12]
 801d294:	2bff      	cmp	r3, #255	; 0xff
 801d296:	d802      	bhi.n	801d29e <ip4addr_aton+0x1ca>
 801d298:	693b      	ldr	r3, [r7, #16]
 801d29a:	2bff      	cmp	r3, #255	; 0xff
 801d29c:	d901      	bls.n	801d2a2 <ip4addr_aton+0x1ce>
        return 0;
 801d29e:	2300      	movs	r3, #0
 801d2a0:	e036      	b.n	801d310 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801d2a2:	68fb      	ldr	r3, [r7, #12]
 801d2a4:	061a      	lsls	r2, r3, #24
 801d2a6:	693b      	ldr	r3, [r7, #16]
 801d2a8:	041b      	lsls	r3, r3, #16
 801d2aa:	4313      	orrs	r3, r2
 801d2ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d2ae:	4313      	orrs	r3, r2
 801d2b0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801d2b2:	e023      	b.n	801d2fc <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801d2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d2b6:	2bff      	cmp	r3, #255	; 0xff
 801d2b8:	d901      	bls.n	801d2be <ip4addr_aton+0x1ea>
        return 0;
 801d2ba:	2300      	movs	r3, #0
 801d2bc:	e028      	b.n	801d310 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801d2be:	68fb      	ldr	r3, [r7, #12]
 801d2c0:	2bff      	cmp	r3, #255	; 0xff
 801d2c2:	d805      	bhi.n	801d2d0 <ip4addr_aton+0x1fc>
 801d2c4:	693b      	ldr	r3, [r7, #16]
 801d2c6:	2bff      	cmp	r3, #255	; 0xff
 801d2c8:	d802      	bhi.n	801d2d0 <ip4addr_aton+0x1fc>
 801d2ca:	697b      	ldr	r3, [r7, #20]
 801d2cc:	2bff      	cmp	r3, #255	; 0xff
 801d2ce:	d901      	bls.n	801d2d4 <ip4addr_aton+0x200>
        return 0;
 801d2d0:	2300      	movs	r3, #0
 801d2d2:	e01d      	b.n	801d310 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801d2d4:	68fb      	ldr	r3, [r7, #12]
 801d2d6:	061a      	lsls	r2, r3, #24
 801d2d8:	693b      	ldr	r3, [r7, #16]
 801d2da:	041b      	lsls	r3, r3, #16
 801d2dc:	431a      	orrs	r2, r3
 801d2de:	697b      	ldr	r3, [r7, #20]
 801d2e0:	021b      	lsls	r3, r3, #8
 801d2e2:	4313      	orrs	r3, r2
 801d2e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d2e6:	4313      	orrs	r3, r2
 801d2e8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801d2ea:	e007      	b.n	801d2fc <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801d2ec:	4b0b      	ldr	r3, [pc, #44]	; (801d31c <ip4addr_aton+0x248>)
 801d2ee:	22f9      	movs	r2, #249	; 0xf9
 801d2f0:	490b      	ldr	r1, [pc, #44]	; (801d320 <ip4addr_aton+0x24c>)
 801d2f2:	480c      	ldr	r0, [pc, #48]	; (801d324 <ip4addr_aton+0x250>)
 801d2f4:	f002 f9e4 	bl	801f6c0 <iprintf>
      break;
 801d2f8:	e000      	b.n	801d2fc <ip4addr_aton+0x228>
      break;
 801d2fa:	bf00      	nop
  }
  if (addr) {
 801d2fc:	683b      	ldr	r3, [r7, #0]
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d005      	beq.n	801d30e <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801d302:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d304:	f7f5 fdcd 	bl	8012ea2 <lwip_htonl>
 801d308:	4602      	mov	r2, r0
 801d30a:	683b      	ldr	r3, [r7, #0]
 801d30c:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801d30e:	2301      	movs	r3, #1
}
 801d310:	4618      	mov	r0, r3
 801d312:	3728      	adds	r7, #40	; 0x28
 801d314:	46bd      	mov	sp, r7
 801d316:	bd80      	pop	{r7, pc}
 801d318:	0802764c 	.word	0x0802764c
 801d31c:	080262ac 	.word	0x080262ac
 801d320:	080262e8 	.word	0x080262e8
 801d324:	080262f4 	.word	0x080262f4

0801d328 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801d328:	b580      	push	{r7, lr}
 801d32a:	b084      	sub	sp, #16
 801d32c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801d32e:	2300      	movs	r3, #0
 801d330:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801d332:	4b12      	ldr	r3, [pc, #72]	; (801d37c <ip_reass_tmr+0x54>)
 801d334:	681b      	ldr	r3, [r3, #0]
 801d336:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801d338:	e018      	b.n	801d36c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801d33a:	68fb      	ldr	r3, [r7, #12]
 801d33c:	7fdb      	ldrb	r3, [r3, #31]
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d00b      	beq.n	801d35a <ip_reass_tmr+0x32>
      r->timer--;
 801d342:	68fb      	ldr	r3, [r7, #12]
 801d344:	7fdb      	ldrb	r3, [r3, #31]
 801d346:	3b01      	subs	r3, #1
 801d348:	b2da      	uxtb	r2, r3
 801d34a:	68fb      	ldr	r3, [r7, #12]
 801d34c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801d34e:	68fb      	ldr	r3, [r7, #12]
 801d350:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801d352:	68fb      	ldr	r3, [r7, #12]
 801d354:	681b      	ldr	r3, [r3, #0]
 801d356:	60fb      	str	r3, [r7, #12]
 801d358:	e008      	b.n	801d36c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801d35a:	68fb      	ldr	r3, [r7, #12]
 801d35c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801d35e:	68fb      	ldr	r3, [r7, #12]
 801d360:	681b      	ldr	r3, [r3, #0]
 801d362:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801d364:	68b9      	ldr	r1, [r7, #8]
 801d366:	6878      	ldr	r0, [r7, #4]
 801d368:	f000 f80a 	bl	801d380 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801d36c:	68fb      	ldr	r3, [r7, #12]
 801d36e:	2b00      	cmp	r3, #0
 801d370:	d1e3      	bne.n	801d33a <ip_reass_tmr+0x12>
    }
  }
}
 801d372:	bf00      	nop
 801d374:	bf00      	nop
 801d376:	3710      	adds	r7, #16
 801d378:	46bd      	mov	sp, r7
 801d37a:	bd80      	pop	{r7, pc}
 801d37c:	200048a8 	.word	0x200048a8

0801d380 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d380:	b580      	push	{r7, lr}
 801d382:	b088      	sub	sp, #32
 801d384:	af00      	add	r7, sp, #0
 801d386:	6078      	str	r0, [r7, #4]
 801d388:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801d38a:	2300      	movs	r3, #0
 801d38c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801d38e:	683a      	ldr	r2, [r7, #0]
 801d390:	687b      	ldr	r3, [r7, #4]
 801d392:	429a      	cmp	r2, r3
 801d394:	d105      	bne.n	801d3a2 <ip_reass_free_complete_datagram+0x22>
 801d396:	4b45      	ldr	r3, [pc, #276]	; (801d4ac <ip_reass_free_complete_datagram+0x12c>)
 801d398:	22ab      	movs	r2, #171	; 0xab
 801d39a:	4945      	ldr	r1, [pc, #276]	; (801d4b0 <ip_reass_free_complete_datagram+0x130>)
 801d39c:	4845      	ldr	r0, [pc, #276]	; (801d4b4 <ip_reass_free_complete_datagram+0x134>)
 801d39e:	f002 f98f 	bl	801f6c0 <iprintf>
  if (prev != NULL) {
 801d3a2:	683b      	ldr	r3, [r7, #0]
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	d00a      	beq.n	801d3be <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801d3a8:	683b      	ldr	r3, [r7, #0]
 801d3aa:	681b      	ldr	r3, [r3, #0]
 801d3ac:	687a      	ldr	r2, [r7, #4]
 801d3ae:	429a      	cmp	r2, r3
 801d3b0:	d005      	beq.n	801d3be <ip_reass_free_complete_datagram+0x3e>
 801d3b2:	4b3e      	ldr	r3, [pc, #248]	; (801d4ac <ip_reass_free_complete_datagram+0x12c>)
 801d3b4:	22ad      	movs	r2, #173	; 0xad
 801d3b6:	4940      	ldr	r1, [pc, #256]	; (801d4b8 <ip_reass_free_complete_datagram+0x138>)
 801d3b8:	483e      	ldr	r0, [pc, #248]	; (801d4b4 <ip_reass_free_complete_datagram+0x134>)
 801d3ba:	f002 f981 	bl	801f6c0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801d3be:	687b      	ldr	r3, [r7, #4]
 801d3c0:	685b      	ldr	r3, [r3, #4]
 801d3c2:	685b      	ldr	r3, [r3, #4]
 801d3c4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801d3c6:	697b      	ldr	r3, [r7, #20]
 801d3c8:	889b      	ldrh	r3, [r3, #4]
 801d3ca:	b29b      	uxth	r3, r3
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	d12a      	bne.n	801d426 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801d3d0:	687b      	ldr	r3, [r7, #4]
 801d3d2:	685b      	ldr	r3, [r3, #4]
 801d3d4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801d3d6:	697b      	ldr	r3, [r7, #20]
 801d3d8:	681a      	ldr	r2, [r3, #0]
 801d3da:	687b      	ldr	r3, [r7, #4]
 801d3dc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801d3de:	69bb      	ldr	r3, [r7, #24]
 801d3e0:	6858      	ldr	r0, [r3, #4]
 801d3e2:	687b      	ldr	r3, [r7, #4]
 801d3e4:	3308      	adds	r3, #8
 801d3e6:	2214      	movs	r2, #20
 801d3e8:	4619      	mov	r1, r3
 801d3ea:	f001 febb 	bl	801f164 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801d3ee:	2101      	movs	r1, #1
 801d3f0:	69b8      	ldr	r0, [r7, #24]
 801d3f2:	f7ff fb1d 	bl	801ca30 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801d3f6:	69b8      	ldr	r0, [r7, #24]
 801d3f8:	f7f7 f988 	bl	801470c <pbuf_clen>
 801d3fc:	4603      	mov	r3, r0
 801d3fe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d400:	8bfa      	ldrh	r2, [r7, #30]
 801d402:	8a7b      	ldrh	r3, [r7, #18]
 801d404:	4413      	add	r3, r2
 801d406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d40a:	db05      	blt.n	801d418 <ip_reass_free_complete_datagram+0x98>
 801d40c:	4b27      	ldr	r3, [pc, #156]	; (801d4ac <ip_reass_free_complete_datagram+0x12c>)
 801d40e:	22bc      	movs	r2, #188	; 0xbc
 801d410:	492a      	ldr	r1, [pc, #168]	; (801d4bc <ip_reass_free_complete_datagram+0x13c>)
 801d412:	4828      	ldr	r0, [pc, #160]	; (801d4b4 <ip_reass_free_complete_datagram+0x134>)
 801d414:	f002 f954 	bl	801f6c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d418:	8bfa      	ldrh	r2, [r7, #30]
 801d41a:	8a7b      	ldrh	r3, [r7, #18]
 801d41c:	4413      	add	r3, r2
 801d41e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801d420:	69b8      	ldr	r0, [r7, #24]
 801d422:	f7f7 f8e5 	bl	80145f0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801d426:	687b      	ldr	r3, [r7, #4]
 801d428:	685b      	ldr	r3, [r3, #4]
 801d42a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801d42c:	e01f      	b.n	801d46e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801d42e:	69bb      	ldr	r3, [r7, #24]
 801d430:	685b      	ldr	r3, [r3, #4]
 801d432:	617b      	str	r3, [r7, #20]
    pcur = p;
 801d434:	69bb      	ldr	r3, [r7, #24]
 801d436:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801d438:	697b      	ldr	r3, [r7, #20]
 801d43a:	681b      	ldr	r3, [r3, #0]
 801d43c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801d43e:	68f8      	ldr	r0, [r7, #12]
 801d440:	f7f7 f964 	bl	801470c <pbuf_clen>
 801d444:	4603      	mov	r3, r0
 801d446:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d448:	8bfa      	ldrh	r2, [r7, #30]
 801d44a:	8a7b      	ldrh	r3, [r7, #18]
 801d44c:	4413      	add	r3, r2
 801d44e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d452:	db05      	blt.n	801d460 <ip_reass_free_complete_datagram+0xe0>
 801d454:	4b15      	ldr	r3, [pc, #84]	; (801d4ac <ip_reass_free_complete_datagram+0x12c>)
 801d456:	22cc      	movs	r2, #204	; 0xcc
 801d458:	4918      	ldr	r1, [pc, #96]	; (801d4bc <ip_reass_free_complete_datagram+0x13c>)
 801d45a:	4816      	ldr	r0, [pc, #88]	; (801d4b4 <ip_reass_free_complete_datagram+0x134>)
 801d45c:	f002 f930 	bl	801f6c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d460:	8bfa      	ldrh	r2, [r7, #30]
 801d462:	8a7b      	ldrh	r3, [r7, #18]
 801d464:	4413      	add	r3, r2
 801d466:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801d468:	68f8      	ldr	r0, [r7, #12]
 801d46a:	f7f7 f8c1 	bl	80145f0 <pbuf_free>
  while (p != NULL) {
 801d46e:	69bb      	ldr	r3, [r7, #24]
 801d470:	2b00      	cmp	r3, #0
 801d472:	d1dc      	bne.n	801d42e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801d474:	6839      	ldr	r1, [r7, #0]
 801d476:	6878      	ldr	r0, [r7, #4]
 801d478:	f000 f8c2 	bl	801d600 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801d47c:	4b10      	ldr	r3, [pc, #64]	; (801d4c0 <ip_reass_free_complete_datagram+0x140>)
 801d47e:	881b      	ldrh	r3, [r3, #0]
 801d480:	8bfa      	ldrh	r2, [r7, #30]
 801d482:	429a      	cmp	r2, r3
 801d484:	d905      	bls.n	801d492 <ip_reass_free_complete_datagram+0x112>
 801d486:	4b09      	ldr	r3, [pc, #36]	; (801d4ac <ip_reass_free_complete_datagram+0x12c>)
 801d488:	22d2      	movs	r2, #210	; 0xd2
 801d48a:	490e      	ldr	r1, [pc, #56]	; (801d4c4 <ip_reass_free_complete_datagram+0x144>)
 801d48c:	4809      	ldr	r0, [pc, #36]	; (801d4b4 <ip_reass_free_complete_datagram+0x134>)
 801d48e:	f002 f917 	bl	801f6c0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801d492:	4b0b      	ldr	r3, [pc, #44]	; (801d4c0 <ip_reass_free_complete_datagram+0x140>)
 801d494:	881a      	ldrh	r2, [r3, #0]
 801d496:	8bfb      	ldrh	r3, [r7, #30]
 801d498:	1ad3      	subs	r3, r2, r3
 801d49a:	b29a      	uxth	r2, r3
 801d49c:	4b08      	ldr	r3, [pc, #32]	; (801d4c0 <ip_reass_free_complete_datagram+0x140>)
 801d49e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801d4a0:	8bfb      	ldrh	r3, [r7, #30]
}
 801d4a2:	4618      	mov	r0, r3
 801d4a4:	3720      	adds	r7, #32
 801d4a6:	46bd      	mov	sp, r7
 801d4a8:	bd80      	pop	{r7, pc}
 801d4aa:	bf00      	nop
 801d4ac:	0802631c 	.word	0x0802631c
 801d4b0:	08026358 	.word	0x08026358
 801d4b4:	08026364 	.word	0x08026364
 801d4b8:	0802638c 	.word	0x0802638c
 801d4bc:	080263a0 	.word	0x080263a0
 801d4c0:	200048ac 	.word	0x200048ac
 801d4c4:	080263c0 	.word	0x080263c0

0801d4c8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801d4c8:	b580      	push	{r7, lr}
 801d4ca:	b08a      	sub	sp, #40	; 0x28
 801d4cc:	af00      	add	r7, sp, #0
 801d4ce:	6078      	str	r0, [r7, #4]
 801d4d0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801d4d2:	2300      	movs	r3, #0
 801d4d4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801d4d6:	2300      	movs	r3, #0
 801d4d8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801d4da:	2300      	movs	r3, #0
 801d4dc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801d4de:	2300      	movs	r3, #0
 801d4e0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801d4e2:	2300      	movs	r3, #0
 801d4e4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801d4e6:	4b28      	ldr	r3, [pc, #160]	; (801d588 <ip_reass_remove_oldest_datagram+0xc0>)
 801d4e8:	681b      	ldr	r3, [r3, #0]
 801d4ea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801d4ec:	e030      	b.n	801d550 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801d4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4f0:	695a      	ldr	r2, [r3, #20]
 801d4f2:	687b      	ldr	r3, [r7, #4]
 801d4f4:	68db      	ldr	r3, [r3, #12]
 801d4f6:	429a      	cmp	r2, r3
 801d4f8:	d10c      	bne.n	801d514 <ip_reass_remove_oldest_datagram+0x4c>
 801d4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4fc:	699a      	ldr	r2, [r3, #24]
 801d4fe:	687b      	ldr	r3, [r7, #4]
 801d500:	691b      	ldr	r3, [r3, #16]
 801d502:	429a      	cmp	r2, r3
 801d504:	d106      	bne.n	801d514 <ip_reass_remove_oldest_datagram+0x4c>
 801d506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d508:	899a      	ldrh	r2, [r3, #12]
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	889b      	ldrh	r3, [r3, #4]
 801d50e:	b29b      	uxth	r3, r3
 801d510:	429a      	cmp	r2, r3
 801d512:	d014      	beq.n	801d53e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801d514:	693b      	ldr	r3, [r7, #16]
 801d516:	3301      	adds	r3, #1
 801d518:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801d51a:	6a3b      	ldr	r3, [r7, #32]
 801d51c:	2b00      	cmp	r3, #0
 801d51e:	d104      	bne.n	801d52a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801d520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d522:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d524:	69fb      	ldr	r3, [r7, #28]
 801d526:	61bb      	str	r3, [r7, #24]
 801d528:	e009      	b.n	801d53e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801d52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d52c:	7fda      	ldrb	r2, [r3, #31]
 801d52e:	6a3b      	ldr	r3, [r7, #32]
 801d530:	7fdb      	ldrb	r3, [r3, #31]
 801d532:	429a      	cmp	r2, r3
 801d534:	d803      	bhi.n	801d53e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801d536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d538:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d53a:	69fb      	ldr	r3, [r7, #28]
 801d53c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801d53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d540:	681b      	ldr	r3, [r3, #0]
 801d542:	2b00      	cmp	r3, #0
 801d544:	d001      	beq.n	801d54a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801d546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d548:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801d54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d54c:	681b      	ldr	r3, [r3, #0]
 801d54e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801d550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d552:	2b00      	cmp	r3, #0
 801d554:	d1cb      	bne.n	801d4ee <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801d556:	6a3b      	ldr	r3, [r7, #32]
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d008      	beq.n	801d56e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801d55c:	69b9      	ldr	r1, [r7, #24]
 801d55e:	6a38      	ldr	r0, [r7, #32]
 801d560:	f7ff ff0e 	bl	801d380 <ip_reass_free_complete_datagram>
 801d564:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801d566:	697a      	ldr	r2, [r7, #20]
 801d568:	68fb      	ldr	r3, [r7, #12]
 801d56a:	4413      	add	r3, r2
 801d56c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801d56e:	697a      	ldr	r2, [r7, #20]
 801d570:	683b      	ldr	r3, [r7, #0]
 801d572:	429a      	cmp	r2, r3
 801d574:	da02      	bge.n	801d57c <ip_reass_remove_oldest_datagram+0xb4>
 801d576:	693b      	ldr	r3, [r7, #16]
 801d578:	2b01      	cmp	r3, #1
 801d57a:	dcac      	bgt.n	801d4d6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801d57c:	697b      	ldr	r3, [r7, #20]
}
 801d57e:	4618      	mov	r0, r3
 801d580:	3728      	adds	r7, #40	; 0x28
 801d582:	46bd      	mov	sp, r7
 801d584:	bd80      	pop	{r7, pc}
 801d586:	bf00      	nop
 801d588:	200048a8 	.word	0x200048a8

0801d58c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801d58c:	b580      	push	{r7, lr}
 801d58e:	b084      	sub	sp, #16
 801d590:	af00      	add	r7, sp, #0
 801d592:	6078      	str	r0, [r7, #4]
 801d594:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d596:	2004      	movs	r0, #4
 801d598:	f7f6 f95a 	bl	8013850 <memp_malloc>
 801d59c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801d59e:	68fb      	ldr	r3, [r7, #12]
 801d5a0:	2b00      	cmp	r3, #0
 801d5a2:	d110      	bne.n	801d5c6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801d5a4:	6839      	ldr	r1, [r7, #0]
 801d5a6:	6878      	ldr	r0, [r7, #4]
 801d5a8:	f7ff ff8e 	bl	801d4c8 <ip_reass_remove_oldest_datagram>
 801d5ac:	4602      	mov	r2, r0
 801d5ae:	683b      	ldr	r3, [r7, #0]
 801d5b0:	4293      	cmp	r3, r2
 801d5b2:	dc03      	bgt.n	801d5bc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d5b4:	2004      	movs	r0, #4
 801d5b6:	f7f6 f94b 	bl	8013850 <memp_malloc>
 801d5ba:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801d5bc:	68fb      	ldr	r3, [r7, #12]
 801d5be:	2b00      	cmp	r3, #0
 801d5c0:	d101      	bne.n	801d5c6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801d5c2:	2300      	movs	r3, #0
 801d5c4:	e016      	b.n	801d5f4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801d5c6:	2220      	movs	r2, #32
 801d5c8:	2100      	movs	r1, #0
 801d5ca:	68f8      	ldr	r0, [r7, #12]
 801d5cc:	f001 fdf2 	bl	801f1b4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801d5d0:	68fb      	ldr	r3, [r7, #12]
 801d5d2:	220f      	movs	r2, #15
 801d5d4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801d5d6:	4b09      	ldr	r3, [pc, #36]	; (801d5fc <ip_reass_enqueue_new_datagram+0x70>)
 801d5d8:	681a      	ldr	r2, [r3, #0]
 801d5da:	68fb      	ldr	r3, [r7, #12]
 801d5dc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801d5de:	4a07      	ldr	r2, [pc, #28]	; (801d5fc <ip_reass_enqueue_new_datagram+0x70>)
 801d5e0:	68fb      	ldr	r3, [r7, #12]
 801d5e2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801d5e4:	68fb      	ldr	r3, [r7, #12]
 801d5e6:	3308      	adds	r3, #8
 801d5e8:	2214      	movs	r2, #20
 801d5ea:	6879      	ldr	r1, [r7, #4]
 801d5ec:	4618      	mov	r0, r3
 801d5ee:	f001 fdb9 	bl	801f164 <memcpy>
  return ipr;
 801d5f2:	68fb      	ldr	r3, [r7, #12]
}
 801d5f4:	4618      	mov	r0, r3
 801d5f6:	3710      	adds	r7, #16
 801d5f8:	46bd      	mov	sp, r7
 801d5fa:	bd80      	pop	{r7, pc}
 801d5fc:	200048a8 	.word	0x200048a8

0801d600 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d600:	b580      	push	{r7, lr}
 801d602:	b082      	sub	sp, #8
 801d604:	af00      	add	r7, sp, #0
 801d606:	6078      	str	r0, [r7, #4]
 801d608:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801d60a:	4b10      	ldr	r3, [pc, #64]	; (801d64c <ip_reass_dequeue_datagram+0x4c>)
 801d60c:	681b      	ldr	r3, [r3, #0]
 801d60e:	687a      	ldr	r2, [r7, #4]
 801d610:	429a      	cmp	r2, r3
 801d612:	d104      	bne.n	801d61e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	681b      	ldr	r3, [r3, #0]
 801d618:	4a0c      	ldr	r2, [pc, #48]	; (801d64c <ip_reass_dequeue_datagram+0x4c>)
 801d61a:	6013      	str	r3, [r2, #0]
 801d61c:	e00d      	b.n	801d63a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801d61e:	683b      	ldr	r3, [r7, #0]
 801d620:	2b00      	cmp	r3, #0
 801d622:	d106      	bne.n	801d632 <ip_reass_dequeue_datagram+0x32>
 801d624:	4b0a      	ldr	r3, [pc, #40]	; (801d650 <ip_reass_dequeue_datagram+0x50>)
 801d626:	f240 1245 	movw	r2, #325	; 0x145
 801d62a:	490a      	ldr	r1, [pc, #40]	; (801d654 <ip_reass_dequeue_datagram+0x54>)
 801d62c:	480a      	ldr	r0, [pc, #40]	; (801d658 <ip_reass_dequeue_datagram+0x58>)
 801d62e:	f002 f847 	bl	801f6c0 <iprintf>
    prev->next = ipr->next;
 801d632:	687b      	ldr	r3, [r7, #4]
 801d634:	681a      	ldr	r2, [r3, #0]
 801d636:	683b      	ldr	r3, [r7, #0]
 801d638:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801d63a:	6879      	ldr	r1, [r7, #4]
 801d63c:	2004      	movs	r0, #4
 801d63e:	f7f6 f959 	bl	80138f4 <memp_free>
}
 801d642:	bf00      	nop
 801d644:	3708      	adds	r7, #8
 801d646:	46bd      	mov	sp, r7
 801d648:	bd80      	pop	{r7, pc}
 801d64a:	bf00      	nop
 801d64c:	200048a8 	.word	0x200048a8
 801d650:	0802631c 	.word	0x0802631c
 801d654:	080263e4 	.word	0x080263e4
 801d658:	08026364 	.word	0x08026364

0801d65c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801d65c:	b580      	push	{r7, lr}
 801d65e:	b08c      	sub	sp, #48	; 0x30
 801d660:	af00      	add	r7, sp, #0
 801d662:	60f8      	str	r0, [r7, #12]
 801d664:	60b9      	str	r1, [r7, #8]
 801d666:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801d668:	2300      	movs	r3, #0
 801d66a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801d66c:	2301      	movs	r3, #1
 801d66e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801d670:	68bb      	ldr	r3, [r7, #8]
 801d672:	685b      	ldr	r3, [r3, #4]
 801d674:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d676:	69fb      	ldr	r3, [r7, #28]
 801d678:	885b      	ldrh	r3, [r3, #2]
 801d67a:	b29b      	uxth	r3, r3
 801d67c:	4618      	mov	r0, r3
 801d67e:	f7f5 fbfb 	bl	8012e78 <lwip_htons>
 801d682:	4603      	mov	r3, r0
 801d684:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801d686:	69fb      	ldr	r3, [r7, #28]
 801d688:	781b      	ldrb	r3, [r3, #0]
 801d68a:	f003 030f 	and.w	r3, r3, #15
 801d68e:	b2db      	uxtb	r3, r3
 801d690:	009b      	lsls	r3, r3, #2
 801d692:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801d694:	7e7b      	ldrb	r3, [r7, #25]
 801d696:	b29b      	uxth	r3, r3
 801d698:	8b7a      	ldrh	r2, [r7, #26]
 801d69a:	429a      	cmp	r2, r3
 801d69c:	d202      	bcs.n	801d6a4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d69e:	f04f 33ff 	mov.w	r3, #4294967295
 801d6a2:	e135      	b.n	801d910 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801d6a4:	7e7b      	ldrb	r3, [r7, #25]
 801d6a6:	b29b      	uxth	r3, r3
 801d6a8:	8b7a      	ldrh	r2, [r7, #26]
 801d6aa:	1ad3      	subs	r3, r2, r3
 801d6ac:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801d6ae:	69fb      	ldr	r3, [r7, #28]
 801d6b0:	88db      	ldrh	r3, [r3, #6]
 801d6b2:	b29b      	uxth	r3, r3
 801d6b4:	4618      	mov	r0, r3
 801d6b6:	f7f5 fbdf 	bl	8012e78 <lwip_htons>
 801d6ba:	4603      	mov	r3, r0
 801d6bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d6c0:	b29b      	uxth	r3, r3
 801d6c2:	00db      	lsls	r3, r3, #3
 801d6c4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801d6c6:	68bb      	ldr	r3, [r7, #8]
 801d6c8:	685b      	ldr	r3, [r3, #4]
 801d6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801d6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d6ce:	2200      	movs	r2, #0
 801d6d0:	701a      	strb	r2, [r3, #0]
 801d6d2:	2200      	movs	r2, #0
 801d6d4:	705a      	strb	r2, [r3, #1]
 801d6d6:	2200      	movs	r2, #0
 801d6d8:	709a      	strb	r2, [r3, #2]
 801d6da:	2200      	movs	r2, #0
 801d6dc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801d6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d6e0:	8afa      	ldrh	r2, [r7, #22]
 801d6e2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801d6e4:	8afa      	ldrh	r2, [r7, #22]
 801d6e6:	8b7b      	ldrh	r3, [r7, #26]
 801d6e8:	4413      	add	r3, r2
 801d6ea:	b29a      	uxth	r2, r3
 801d6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d6ee:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801d6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d6f2:	88db      	ldrh	r3, [r3, #6]
 801d6f4:	b29b      	uxth	r3, r3
 801d6f6:	8afa      	ldrh	r2, [r7, #22]
 801d6f8:	429a      	cmp	r2, r3
 801d6fa:	d902      	bls.n	801d702 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d6fc:	f04f 33ff 	mov.w	r3, #4294967295
 801d700:	e106      	b.n	801d910 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801d702:	68fb      	ldr	r3, [r7, #12]
 801d704:	685b      	ldr	r3, [r3, #4]
 801d706:	627b      	str	r3, [r7, #36]	; 0x24
 801d708:	e068      	b.n	801d7dc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801d70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d70c:	685b      	ldr	r3, [r3, #4]
 801d70e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801d710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d712:	889b      	ldrh	r3, [r3, #4]
 801d714:	b29a      	uxth	r2, r3
 801d716:	693b      	ldr	r3, [r7, #16]
 801d718:	889b      	ldrh	r3, [r3, #4]
 801d71a:	b29b      	uxth	r3, r3
 801d71c:	429a      	cmp	r2, r3
 801d71e:	d235      	bcs.n	801d78c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801d720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d724:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801d726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d728:	2b00      	cmp	r3, #0
 801d72a:	d020      	beq.n	801d76e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801d72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d72e:	889b      	ldrh	r3, [r3, #4]
 801d730:	b29a      	uxth	r2, r3
 801d732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d734:	88db      	ldrh	r3, [r3, #6]
 801d736:	b29b      	uxth	r3, r3
 801d738:	429a      	cmp	r2, r3
 801d73a:	d307      	bcc.n	801d74c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801d73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d73e:	88db      	ldrh	r3, [r3, #6]
 801d740:	b29a      	uxth	r2, r3
 801d742:	693b      	ldr	r3, [r7, #16]
 801d744:	889b      	ldrh	r3, [r3, #4]
 801d746:	b29b      	uxth	r3, r3
 801d748:	429a      	cmp	r2, r3
 801d74a:	d902      	bls.n	801d752 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d74c:	f04f 33ff 	mov.w	r3, #4294967295
 801d750:	e0de      	b.n	801d910 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801d752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d754:	68ba      	ldr	r2, [r7, #8]
 801d756:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801d758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d75a:	88db      	ldrh	r3, [r3, #6]
 801d75c:	b29a      	uxth	r2, r3
 801d75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d760:	889b      	ldrh	r3, [r3, #4]
 801d762:	b29b      	uxth	r3, r3
 801d764:	429a      	cmp	r2, r3
 801d766:	d03d      	beq.n	801d7e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d768:	2300      	movs	r3, #0
 801d76a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801d76c:	e03a      	b.n	801d7e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801d76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d770:	88db      	ldrh	r3, [r3, #6]
 801d772:	b29a      	uxth	r2, r3
 801d774:	693b      	ldr	r3, [r7, #16]
 801d776:	889b      	ldrh	r3, [r3, #4]
 801d778:	b29b      	uxth	r3, r3
 801d77a:	429a      	cmp	r2, r3
 801d77c:	d902      	bls.n	801d784 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d77e:	f04f 33ff 	mov.w	r3, #4294967295
 801d782:	e0c5      	b.n	801d910 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801d784:	68fb      	ldr	r3, [r7, #12]
 801d786:	68ba      	ldr	r2, [r7, #8]
 801d788:	605a      	str	r2, [r3, #4]
      break;
 801d78a:	e02b      	b.n	801d7e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801d78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d78e:	889b      	ldrh	r3, [r3, #4]
 801d790:	b29a      	uxth	r2, r3
 801d792:	693b      	ldr	r3, [r7, #16]
 801d794:	889b      	ldrh	r3, [r3, #4]
 801d796:	b29b      	uxth	r3, r3
 801d798:	429a      	cmp	r2, r3
 801d79a:	d102      	bne.n	801d7a2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d79c:	f04f 33ff 	mov.w	r3, #4294967295
 801d7a0:	e0b6      	b.n	801d910 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801d7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7a4:	889b      	ldrh	r3, [r3, #4]
 801d7a6:	b29a      	uxth	r2, r3
 801d7a8:	693b      	ldr	r3, [r7, #16]
 801d7aa:	88db      	ldrh	r3, [r3, #6]
 801d7ac:	b29b      	uxth	r3, r3
 801d7ae:	429a      	cmp	r2, r3
 801d7b0:	d202      	bcs.n	801d7b8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d7b2:	f04f 33ff 	mov.w	r3, #4294967295
 801d7b6:	e0ab      	b.n	801d910 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801d7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7ba:	2b00      	cmp	r3, #0
 801d7bc:	d009      	beq.n	801d7d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801d7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7c0:	88db      	ldrh	r3, [r3, #6]
 801d7c2:	b29a      	uxth	r2, r3
 801d7c4:	693b      	ldr	r3, [r7, #16]
 801d7c6:	889b      	ldrh	r3, [r3, #4]
 801d7c8:	b29b      	uxth	r3, r3
 801d7ca:	429a      	cmp	r2, r3
 801d7cc:	d001      	beq.n	801d7d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d7ce:	2300      	movs	r3, #0
 801d7d0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801d7d2:	693b      	ldr	r3, [r7, #16]
 801d7d4:	681b      	ldr	r3, [r3, #0]
 801d7d6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801d7d8:	693b      	ldr	r3, [r7, #16]
 801d7da:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801d7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7de:	2b00      	cmp	r3, #0
 801d7e0:	d193      	bne.n	801d70a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801d7e2:	e000      	b.n	801d7e6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801d7e4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801d7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	d12d      	bne.n	801d848 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801d7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7ee:	2b00      	cmp	r3, #0
 801d7f0:	d01c      	beq.n	801d82c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801d7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7f4:	88db      	ldrh	r3, [r3, #6]
 801d7f6:	b29a      	uxth	r2, r3
 801d7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7fa:	889b      	ldrh	r3, [r3, #4]
 801d7fc:	b29b      	uxth	r3, r3
 801d7fe:	429a      	cmp	r2, r3
 801d800:	d906      	bls.n	801d810 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801d802:	4b45      	ldr	r3, [pc, #276]	; (801d918 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d804:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801d808:	4944      	ldr	r1, [pc, #272]	; (801d91c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801d80a:	4845      	ldr	r0, [pc, #276]	; (801d920 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d80c:	f001 ff58 	bl	801f6c0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801d810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d812:	68ba      	ldr	r2, [r7, #8]
 801d814:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801d816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d818:	88db      	ldrh	r3, [r3, #6]
 801d81a:	b29a      	uxth	r2, r3
 801d81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d81e:	889b      	ldrh	r3, [r3, #4]
 801d820:	b29b      	uxth	r3, r3
 801d822:	429a      	cmp	r2, r3
 801d824:	d010      	beq.n	801d848 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801d826:	2300      	movs	r3, #0
 801d828:	623b      	str	r3, [r7, #32]
 801d82a:	e00d      	b.n	801d848 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801d82c:	68fb      	ldr	r3, [r7, #12]
 801d82e:	685b      	ldr	r3, [r3, #4]
 801d830:	2b00      	cmp	r3, #0
 801d832:	d006      	beq.n	801d842 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801d834:	4b38      	ldr	r3, [pc, #224]	; (801d918 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d836:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801d83a:	493a      	ldr	r1, [pc, #232]	; (801d924 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801d83c:	4838      	ldr	r0, [pc, #224]	; (801d920 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d83e:	f001 ff3f 	bl	801f6c0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801d842:	68fb      	ldr	r3, [r7, #12]
 801d844:	68ba      	ldr	r2, [r7, #8]
 801d846:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801d848:	687b      	ldr	r3, [r7, #4]
 801d84a:	2b00      	cmp	r3, #0
 801d84c:	d105      	bne.n	801d85a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801d84e:	68fb      	ldr	r3, [r7, #12]
 801d850:	7f9b      	ldrb	r3, [r3, #30]
 801d852:	f003 0301 	and.w	r3, r3, #1
 801d856:	2b00      	cmp	r3, #0
 801d858:	d059      	beq.n	801d90e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801d85a:	6a3b      	ldr	r3, [r7, #32]
 801d85c:	2b00      	cmp	r3, #0
 801d85e:	d04f      	beq.n	801d900 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801d860:	68fb      	ldr	r3, [r7, #12]
 801d862:	685b      	ldr	r3, [r3, #4]
 801d864:	2b00      	cmp	r3, #0
 801d866:	d006      	beq.n	801d876 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801d868:	68fb      	ldr	r3, [r7, #12]
 801d86a:	685b      	ldr	r3, [r3, #4]
 801d86c:	685b      	ldr	r3, [r3, #4]
 801d86e:	889b      	ldrh	r3, [r3, #4]
 801d870:	b29b      	uxth	r3, r3
 801d872:	2b00      	cmp	r3, #0
 801d874:	d002      	beq.n	801d87c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801d876:	2300      	movs	r3, #0
 801d878:	623b      	str	r3, [r7, #32]
 801d87a:	e041      	b.n	801d900 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801d87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d87e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801d880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d882:	681b      	ldr	r3, [r3, #0]
 801d884:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d886:	e012      	b.n	801d8ae <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801d888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d88a:	685b      	ldr	r3, [r3, #4]
 801d88c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801d88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d890:	88db      	ldrh	r3, [r3, #6]
 801d892:	b29a      	uxth	r2, r3
 801d894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d896:	889b      	ldrh	r3, [r3, #4]
 801d898:	b29b      	uxth	r3, r3
 801d89a:	429a      	cmp	r2, r3
 801d89c:	d002      	beq.n	801d8a4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801d89e:	2300      	movs	r3, #0
 801d8a0:	623b      	str	r3, [r7, #32]
            break;
 801d8a2:	e007      	b.n	801d8b4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801d8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8a6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801d8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8aa:	681b      	ldr	r3, [r3, #0]
 801d8ac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	d1e9      	bne.n	801d888 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801d8b4:	6a3b      	ldr	r3, [r7, #32]
 801d8b6:	2b00      	cmp	r3, #0
 801d8b8:	d022      	beq.n	801d900 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801d8ba:	68fb      	ldr	r3, [r7, #12]
 801d8bc:	685b      	ldr	r3, [r3, #4]
 801d8be:	2b00      	cmp	r3, #0
 801d8c0:	d106      	bne.n	801d8d0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801d8c2:	4b15      	ldr	r3, [pc, #84]	; (801d918 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d8c4:	f240 12df 	movw	r2, #479	; 0x1df
 801d8c8:	4917      	ldr	r1, [pc, #92]	; (801d928 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d8ca:	4815      	ldr	r0, [pc, #84]	; (801d920 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d8cc:	f001 fef8 	bl	801f6c0 <iprintf>
          LWIP_ASSERT("sanity check",
 801d8d0:	68fb      	ldr	r3, [r7, #12]
 801d8d2:	685b      	ldr	r3, [r3, #4]
 801d8d4:	685b      	ldr	r3, [r3, #4]
 801d8d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d8d8:	429a      	cmp	r2, r3
 801d8da:	d106      	bne.n	801d8ea <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801d8dc:	4b0e      	ldr	r3, [pc, #56]	; (801d918 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d8de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d8e2:	4911      	ldr	r1, [pc, #68]	; (801d928 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d8e4:	480e      	ldr	r0, [pc, #56]	; (801d920 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d8e6:	f001 feeb 	bl	801f6c0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801d8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8ec:	681b      	ldr	r3, [r3, #0]
 801d8ee:	2b00      	cmp	r3, #0
 801d8f0:	d006      	beq.n	801d900 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801d8f2:	4b09      	ldr	r3, [pc, #36]	; (801d918 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d8f4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801d8f8:	490c      	ldr	r1, [pc, #48]	; (801d92c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801d8fa:	4809      	ldr	r0, [pc, #36]	; (801d920 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d8fc:	f001 fee0 	bl	801f6c0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801d900:	6a3b      	ldr	r3, [r7, #32]
 801d902:	2b00      	cmp	r3, #0
 801d904:	bf14      	ite	ne
 801d906:	2301      	movne	r3, #1
 801d908:	2300      	moveq	r3, #0
 801d90a:	b2db      	uxtb	r3, r3
 801d90c:	e000      	b.n	801d910 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801d90e:	2300      	movs	r3, #0
}
 801d910:	4618      	mov	r0, r3
 801d912:	3730      	adds	r7, #48	; 0x30
 801d914:	46bd      	mov	sp, r7
 801d916:	bd80      	pop	{r7, pc}
 801d918:	0802631c 	.word	0x0802631c
 801d91c:	08026400 	.word	0x08026400
 801d920:	08026364 	.word	0x08026364
 801d924:	08026420 	.word	0x08026420
 801d928:	08026458 	.word	0x08026458
 801d92c:	08026468 	.word	0x08026468

0801d930 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801d930:	b580      	push	{r7, lr}
 801d932:	b08e      	sub	sp, #56	; 0x38
 801d934:	af00      	add	r7, sp, #0
 801d936:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801d938:	687b      	ldr	r3, [r7, #4]
 801d93a:	685b      	ldr	r3, [r3, #4]
 801d93c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801d93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d940:	781b      	ldrb	r3, [r3, #0]
 801d942:	f003 030f 	and.w	r3, r3, #15
 801d946:	b2db      	uxtb	r3, r3
 801d948:	009b      	lsls	r3, r3, #2
 801d94a:	b2db      	uxtb	r3, r3
 801d94c:	2b14      	cmp	r3, #20
 801d94e:	f040 8167 	bne.w	801dc20 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801d952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d954:	88db      	ldrh	r3, [r3, #6]
 801d956:	b29b      	uxth	r3, r3
 801d958:	4618      	mov	r0, r3
 801d95a:	f7f5 fa8d 	bl	8012e78 <lwip_htons>
 801d95e:	4603      	mov	r3, r0
 801d960:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d964:	b29b      	uxth	r3, r3
 801d966:	00db      	lsls	r3, r3, #3
 801d968:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d96c:	885b      	ldrh	r3, [r3, #2]
 801d96e:	b29b      	uxth	r3, r3
 801d970:	4618      	mov	r0, r3
 801d972:	f7f5 fa81 	bl	8012e78 <lwip_htons>
 801d976:	4603      	mov	r3, r0
 801d978:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801d97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d97c:	781b      	ldrb	r3, [r3, #0]
 801d97e:	f003 030f 	and.w	r3, r3, #15
 801d982:	b2db      	uxtb	r3, r3
 801d984:	009b      	lsls	r3, r3, #2
 801d986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801d98a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d98e:	b29b      	uxth	r3, r3
 801d990:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d992:	429a      	cmp	r2, r3
 801d994:	f0c0 8146 	bcc.w	801dc24 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801d998:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d99c:	b29b      	uxth	r3, r3
 801d99e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d9a0:	1ad3      	subs	r3, r2, r3
 801d9a2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801d9a4:	6878      	ldr	r0, [r7, #4]
 801d9a6:	f7f6 feb1 	bl	801470c <pbuf_clen>
 801d9aa:	4603      	mov	r3, r0
 801d9ac:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801d9ae:	4b9f      	ldr	r3, [pc, #636]	; (801dc2c <ip4_reass+0x2fc>)
 801d9b0:	881b      	ldrh	r3, [r3, #0]
 801d9b2:	461a      	mov	r2, r3
 801d9b4:	8c3b      	ldrh	r3, [r7, #32]
 801d9b6:	4413      	add	r3, r2
 801d9b8:	2b0a      	cmp	r3, #10
 801d9ba:	dd10      	ble.n	801d9de <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d9bc:	8c3b      	ldrh	r3, [r7, #32]
 801d9be:	4619      	mov	r1, r3
 801d9c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d9c2:	f7ff fd81 	bl	801d4c8 <ip_reass_remove_oldest_datagram>
 801d9c6:	4603      	mov	r3, r0
 801d9c8:	2b00      	cmp	r3, #0
 801d9ca:	f000 812d 	beq.w	801dc28 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801d9ce:	4b97      	ldr	r3, [pc, #604]	; (801dc2c <ip4_reass+0x2fc>)
 801d9d0:	881b      	ldrh	r3, [r3, #0]
 801d9d2:	461a      	mov	r2, r3
 801d9d4:	8c3b      	ldrh	r3, [r7, #32]
 801d9d6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d9d8:	2b0a      	cmp	r3, #10
 801d9da:	f300 8125 	bgt.w	801dc28 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d9de:	4b94      	ldr	r3, [pc, #592]	; (801dc30 <ip4_reass+0x300>)
 801d9e0:	681b      	ldr	r3, [r3, #0]
 801d9e2:	633b      	str	r3, [r7, #48]	; 0x30
 801d9e4:	e015      	b.n	801da12 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801d9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9e8:	695a      	ldr	r2, [r3, #20]
 801d9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d9ec:	68db      	ldr	r3, [r3, #12]
 801d9ee:	429a      	cmp	r2, r3
 801d9f0:	d10c      	bne.n	801da0c <ip4_reass+0xdc>
 801d9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9f4:	699a      	ldr	r2, [r3, #24]
 801d9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d9f8:	691b      	ldr	r3, [r3, #16]
 801d9fa:	429a      	cmp	r2, r3
 801d9fc:	d106      	bne.n	801da0c <ip4_reass+0xdc>
 801d9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da00:	899a      	ldrh	r2, [r3, #12]
 801da02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da04:	889b      	ldrh	r3, [r3, #4]
 801da06:	b29b      	uxth	r3, r3
 801da08:	429a      	cmp	r2, r3
 801da0a:	d006      	beq.n	801da1a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801da0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da0e:	681b      	ldr	r3, [r3, #0]
 801da10:	633b      	str	r3, [r7, #48]	; 0x30
 801da12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da14:	2b00      	cmp	r3, #0
 801da16:	d1e6      	bne.n	801d9e6 <ip4_reass+0xb6>
 801da18:	e000      	b.n	801da1c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801da1a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801da1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da1e:	2b00      	cmp	r3, #0
 801da20:	d109      	bne.n	801da36 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801da22:	8c3b      	ldrh	r3, [r7, #32]
 801da24:	4619      	mov	r1, r3
 801da26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801da28:	f7ff fdb0 	bl	801d58c <ip_reass_enqueue_new_datagram>
 801da2c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801da2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da30:	2b00      	cmp	r3, #0
 801da32:	d11c      	bne.n	801da6e <ip4_reass+0x13e>
      goto nullreturn;
 801da34:	e109      	b.n	801dc4a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801da36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da38:	88db      	ldrh	r3, [r3, #6]
 801da3a:	b29b      	uxth	r3, r3
 801da3c:	4618      	mov	r0, r3
 801da3e:	f7f5 fa1b 	bl	8012e78 <lwip_htons>
 801da42:	4603      	mov	r3, r0
 801da44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801da48:	2b00      	cmp	r3, #0
 801da4a:	d110      	bne.n	801da6e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801da4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da4e:	89db      	ldrh	r3, [r3, #14]
 801da50:	4618      	mov	r0, r3
 801da52:	f7f5 fa11 	bl	8012e78 <lwip_htons>
 801da56:	4603      	mov	r3, r0
 801da58:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801da5c:	2b00      	cmp	r3, #0
 801da5e:	d006      	beq.n	801da6e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801da60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da62:	3308      	adds	r3, #8
 801da64:	2214      	movs	r2, #20
 801da66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801da68:	4618      	mov	r0, r3
 801da6a:	f001 fb7b 	bl	801f164 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801da6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da70:	88db      	ldrh	r3, [r3, #6]
 801da72:	b29b      	uxth	r3, r3
 801da74:	f003 0320 	and.w	r3, r3, #32
 801da78:	2b00      	cmp	r3, #0
 801da7a:	bf0c      	ite	eq
 801da7c:	2301      	moveq	r3, #1
 801da7e:	2300      	movne	r3, #0
 801da80:	b2db      	uxtb	r3, r3
 801da82:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801da84:	69fb      	ldr	r3, [r7, #28]
 801da86:	2b00      	cmp	r3, #0
 801da88:	d00e      	beq.n	801daa8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801da8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801da8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801da8e:	4413      	add	r3, r2
 801da90:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801da92:	8b7a      	ldrh	r2, [r7, #26]
 801da94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801da96:	429a      	cmp	r2, r3
 801da98:	f0c0 80a0 	bcc.w	801dbdc <ip4_reass+0x2ac>
 801da9c:	8b7b      	ldrh	r3, [r7, #26]
 801da9e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801daa2:	4293      	cmp	r3, r2
 801daa4:	f200 809a 	bhi.w	801dbdc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801daa8:	69fa      	ldr	r2, [r7, #28]
 801daaa:	6879      	ldr	r1, [r7, #4]
 801daac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801daae:	f7ff fdd5 	bl	801d65c <ip_reass_chain_frag_into_datagram_and_validate>
 801dab2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801dab4:	697b      	ldr	r3, [r7, #20]
 801dab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801daba:	f000 8091 	beq.w	801dbe0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801dabe:	4b5b      	ldr	r3, [pc, #364]	; (801dc2c <ip4_reass+0x2fc>)
 801dac0:	881a      	ldrh	r2, [r3, #0]
 801dac2:	8c3b      	ldrh	r3, [r7, #32]
 801dac4:	4413      	add	r3, r2
 801dac6:	b29a      	uxth	r2, r3
 801dac8:	4b58      	ldr	r3, [pc, #352]	; (801dc2c <ip4_reass+0x2fc>)
 801daca:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801dacc:	69fb      	ldr	r3, [r7, #28]
 801dace:	2b00      	cmp	r3, #0
 801dad0:	d00d      	beq.n	801daee <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801dad2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801dad4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801dad6:	4413      	add	r3, r2
 801dad8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801dada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dadc:	8a7a      	ldrh	r2, [r7, #18]
 801dade:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801dae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dae2:	7f9b      	ldrb	r3, [r3, #30]
 801dae4:	f043 0301 	orr.w	r3, r3, #1
 801dae8:	b2da      	uxtb	r2, r3
 801daea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801daec:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801daee:	697b      	ldr	r3, [r7, #20]
 801daf0:	2b01      	cmp	r3, #1
 801daf2:	d171      	bne.n	801dbd8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801daf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801daf6:	8b9b      	ldrh	r3, [r3, #28]
 801daf8:	3314      	adds	r3, #20
 801dafa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801dafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dafe:	685b      	ldr	r3, [r3, #4]
 801db00:	685b      	ldr	r3, [r3, #4]
 801db02:	681b      	ldr	r3, [r3, #0]
 801db04:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801db06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db08:	685b      	ldr	r3, [r3, #4]
 801db0a:	685b      	ldr	r3, [r3, #4]
 801db0c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801db0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db10:	3308      	adds	r3, #8
 801db12:	2214      	movs	r2, #20
 801db14:	4619      	mov	r1, r3
 801db16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801db18:	f001 fb24 	bl	801f164 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801db1c:	8a3b      	ldrh	r3, [r7, #16]
 801db1e:	4618      	mov	r0, r3
 801db20:	f7f5 f9aa 	bl	8012e78 <lwip_htons>
 801db24:	4603      	mov	r3, r0
 801db26:	461a      	mov	r2, r3
 801db28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db2a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801db2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db2e:	2200      	movs	r2, #0
 801db30:	719a      	strb	r2, [r3, #6]
 801db32:	2200      	movs	r2, #0
 801db34:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801db36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db38:	2200      	movs	r2, #0
 801db3a:	729a      	strb	r2, [r3, #10]
 801db3c:	2200      	movs	r2, #0
 801db3e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801db40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db42:	685b      	ldr	r3, [r3, #4]
 801db44:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801db46:	e00d      	b.n	801db64 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801db48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db4a:	685b      	ldr	r3, [r3, #4]
 801db4c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801db4e:	2114      	movs	r1, #20
 801db50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801db52:	f7f6 fcc7 	bl	80144e4 <pbuf_remove_header>
      pbuf_cat(p, r);
 801db56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801db58:	6878      	ldr	r0, [r7, #4]
 801db5a:	f7f6 fe17 	bl	801478c <pbuf_cat>
      r = iprh->next_pbuf;
 801db5e:	68fb      	ldr	r3, [r7, #12]
 801db60:	681b      	ldr	r3, [r3, #0]
 801db62:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801db64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db66:	2b00      	cmp	r3, #0
 801db68:	d1ee      	bne.n	801db48 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801db6a:	4b31      	ldr	r3, [pc, #196]	; (801dc30 <ip4_reass+0x300>)
 801db6c:	681b      	ldr	r3, [r3, #0]
 801db6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801db70:	429a      	cmp	r2, r3
 801db72:	d102      	bne.n	801db7a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801db74:	2300      	movs	r3, #0
 801db76:	62fb      	str	r3, [r7, #44]	; 0x2c
 801db78:	e010      	b.n	801db9c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801db7a:	4b2d      	ldr	r3, [pc, #180]	; (801dc30 <ip4_reass+0x300>)
 801db7c:	681b      	ldr	r3, [r3, #0]
 801db7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801db80:	e007      	b.n	801db92 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801db82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db84:	681b      	ldr	r3, [r3, #0]
 801db86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801db88:	429a      	cmp	r2, r3
 801db8a:	d006      	beq.n	801db9a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801db8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db8e:	681b      	ldr	r3, [r3, #0]
 801db90:	62fb      	str	r3, [r7, #44]	; 0x2c
 801db92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db94:	2b00      	cmp	r3, #0
 801db96:	d1f4      	bne.n	801db82 <ip4_reass+0x252>
 801db98:	e000      	b.n	801db9c <ip4_reass+0x26c>
          break;
 801db9a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801db9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801db9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dba0:	f7ff fd2e 	bl	801d600 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801dba4:	6878      	ldr	r0, [r7, #4]
 801dba6:	f7f6 fdb1 	bl	801470c <pbuf_clen>
 801dbaa:	4603      	mov	r3, r0
 801dbac:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801dbae:	4b1f      	ldr	r3, [pc, #124]	; (801dc2c <ip4_reass+0x2fc>)
 801dbb0:	881b      	ldrh	r3, [r3, #0]
 801dbb2:	8c3a      	ldrh	r2, [r7, #32]
 801dbb4:	429a      	cmp	r2, r3
 801dbb6:	d906      	bls.n	801dbc6 <ip4_reass+0x296>
 801dbb8:	4b1e      	ldr	r3, [pc, #120]	; (801dc34 <ip4_reass+0x304>)
 801dbba:	f240 229b 	movw	r2, #667	; 0x29b
 801dbbe:	491e      	ldr	r1, [pc, #120]	; (801dc38 <ip4_reass+0x308>)
 801dbc0:	481e      	ldr	r0, [pc, #120]	; (801dc3c <ip4_reass+0x30c>)
 801dbc2:	f001 fd7d 	bl	801f6c0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801dbc6:	4b19      	ldr	r3, [pc, #100]	; (801dc2c <ip4_reass+0x2fc>)
 801dbc8:	881a      	ldrh	r2, [r3, #0]
 801dbca:	8c3b      	ldrh	r3, [r7, #32]
 801dbcc:	1ad3      	subs	r3, r2, r3
 801dbce:	b29a      	uxth	r2, r3
 801dbd0:	4b16      	ldr	r3, [pc, #88]	; (801dc2c <ip4_reass+0x2fc>)
 801dbd2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801dbd4:	687b      	ldr	r3, [r7, #4]
 801dbd6:	e03c      	b.n	801dc52 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801dbd8:	2300      	movs	r3, #0
 801dbda:	e03a      	b.n	801dc52 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801dbdc:	bf00      	nop
 801dbde:	e000      	b.n	801dbe2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801dbe0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801dbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbe4:	2b00      	cmp	r3, #0
 801dbe6:	d106      	bne.n	801dbf6 <ip4_reass+0x2c6>
 801dbe8:	4b12      	ldr	r3, [pc, #72]	; (801dc34 <ip4_reass+0x304>)
 801dbea:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801dbee:	4914      	ldr	r1, [pc, #80]	; (801dc40 <ip4_reass+0x310>)
 801dbf0:	4812      	ldr	r0, [pc, #72]	; (801dc3c <ip4_reass+0x30c>)
 801dbf2:	f001 fd65 	bl	801f6c0 <iprintf>
  if (ipr->p == NULL) {
 801dbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbf8:	685b      	ldr	r3, [r3, #4]
 801dbfa:	2b00      	cmp	r3, #0
 801dbfc:	d124      	bne.n	801dc48 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801dbfe:	4b0c      	ldr	r3, [pc, #48]	; (801dc30 <ip4_reass+0x300>)
 801dc00:	681b      	ldr	r3, [r3, #0]
 801dc02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dc04:	429a      	cmp	r2, r3
 801dc06:	d006      	beq.n	801dc16 <ip4_reass+0x2e6>
 801dc08:	4b0a      	ldr	r3, [pc, #40]	; (801dc34 <ip4_reass+0x304>)
 801dc0a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801dc0e:	490d      	ldr	r1, [pc, #52]	; (801dc44 <ip4_reass+0x314>)
 801dc10:	480a      	ldr	r0, [pc, #40]	; (801dc3c <ip4_reass+0x30c>)
 801dc12:	f001 fd55 	bl	801f6c0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801dc16:	2100      	movs	r1, #0
 801dc18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dc1a:	f7ff fcf1 	bl	801d600 <ip_reass_dequeue_datagram>
 801dc1e:	e014      	b.n	801dc4a <ip4_reass+0x31a>
    goto nullreturn;
 801dc20:	bf00      	nop
 801dc22:	e012      	b.n	801dc4a <ip4_reass+0x31a>
    goto nullreturn;
 801dc24:	bf00      	nop
 801dc26:	e010      	b.n	801dc4a <ip4_reass+0x31a>
      goto nullreturn;
 801dc28:	bf00      	nop
 801dc2a:	e00e      	b.n	801dc4a <ip4_reass+0x31a>
 801dc2c:	200048ac 	.word	0x200048ac
 801dc30:	200048a8 	.word	0x200048a8
 801dc34:	0802631c 	.word	0x0802631c
 801dc38:	0802648c 	.word	0x0802648c
 801dc3c:	08026364 	.word	0x08026364
 801dc40:	080264a8 	.word	0x080264a8
 801dc44:	080264b4 	.word	0x080264b4
  }

nullreturn:
 801dc48:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801dc4a:	6878      	ldr	r0, [r7, #4]
 801dc4c:	f7f6 fcd0 	bl	80145f0 <pbuf_free>
  return NULL;
 801dc50:	2300      	movs	r3, #0
}
 801dc52:	4618      	mov	r0, r3
 801dc54:	3738      	adds	r7, #56	; 0x38
 801dc56:	46bd      	mov	sp, r7
 801dc58:	bd80      	pop	{r7, pc}
 801dc5a:	bf00      	nop

0801dc5c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801dc5c:	b580      	push	{r7, lr}
 801dc5e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801dc60:	2005      	movs	r0, #5
 801dc62:	f7f5 fdf5 	bl	8013850 <memp_malloc>
 801dc66:	4603      	mov	r3, r0
}
 801dc68:	4618      	mov	r0, r3
 801dc6a:	bd80      	pop	{r7, pc}

0801dc6c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801dc6c:	b580      	push	{r7, lr}
 801dc6e:	b082      	sub	sp, #8
 801dc70:	af00      	add	r7, sp, #0
 801dc72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801dc74:	687b      	ldr	r3, [r7, #4]
 801dc76:	2b00      	cmp	r3, #0
 801dc78:	d106      	bne.n	801dc88 <ip_frag_free_pbuf_custom_ref+0x1c>
 801dc7a:	4b07      	ldr	r3, [pc, #28]	; (801dc98 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801dc7c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801dc80:	4906      	ldr	r1, [pc, #24]	; (801dc9c <ip_frag_free_pbuf_custom_ref+0x30>)
 801dc82:	4807      	ldr	r0, [pc, #28]	; (801dca0 <ip_frag_free_pbuf_custom_ref+0x34>)
 801dc84:	f001 fd1c 	bl	801f6c0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801dc88:	6879      	ldr	r1, [r7, #4]
 801dc8a:	2005      	movs	r0, #5
 801dc8c:	f7f5 fe32 	bl	80138f4 <memp_free>
}
 801dc90:	bf00      	nop
 801dc92:	3708      	adds	r7, #8
 801dc94:	46bd      	mov	sp, r7
 801dc96:	bd80      	pop	{r7, pc}
 801dc98:	0802631c 	.word	0x0802631c
 801dc9c:	080264d4 	.word	0x080264d4
 801dca0:	08026364 	.word	0x08026364

0801dca4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801dca4:	b580      	push	{r7, lr}
 801dca6:	b084      	sub	sp, #16
 801dca8:	af00      	add	r7, sp, #0
 801dcaa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801dcac:	687b      	ldr	r3, [r7, #4]
 801dcae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801dcb0:	68fb      	ldr	r3, [r7, #12]
 801dcb2:	2b00      	cmp	r3, #0
 801dcb4:	d106      	bne.n	801dcc4 <ipfrag_free_pbuf_custom+0x20>
 801dcb6:	4b11      	ldr	r3, [pc, #68]	; (801dcfc <ipfrag_free_pbuf_custom+0x58>)
 801dcb8:	f240 22ce 	movw	r2, #718	; 0x2ce
 801dcbc:	4910      	ldr	r1, [pc, #64]	; (801dd00 <ipfrag_free_pbuf_custom+0x5c>)
 801dcbe:	4811      	ldr	r0, [pc, #68]	; (801dd04 <ipfrag_free_pbuf_custom+0x60>)
 801dcc0:	f001 fcfe 	bl	801f6c0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801dcc4:	68fa      	ldr	r2, [r7, #12]
 801dcc6:	687b      	ldr	r3, [r7, #4]
 801dcc8:	429a      	cmp	r2, r3
 801dcca:	d006      	beq.n	801dcda <ipfrag_free_pbuf_custom+0x36>
 801dccc:	4b0b      	ldr	r3, [pc, #44]	; (801dcfc <ipfrag_free_pbuf_custom+0x58>)
 801dcce:	f240 22cf 	movw	r2, #719	; 0x2cf
 801dcd2:	490d      	ldr	r1, [pc, #52]	; (801dd08 <ipfrag_free_pbuf_custom+0x64>)
 801dcd4:	480b      	ldr	r0, [pc, #44]	; (801dd04 <ipfrag_free_pbuf_custom+0x60>)
 801dcd6:	f001 fcf3 	bl	801f6c0 <iprintf>
  if (pcr->original != NULL) {
 801dcda:	68fb      	ldr	r3, [r7, #12]
 801dcdc:	695b      	ldr	r3, [r3, #20]
 801dcde:	2b00      	cmp	r3, #0
 801dce0:	d004      	beq.n	801dcec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801dce2:	68fb      	ldr	r3, [r7, #12]
 801dce4:	695b      	ldr	r3, [r3, #20]
 801dce6:	4618      	mov	r0, r3
 801dce8:	f7f6 fc82 	bl	80145f0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801dcec:	68f8      	ldr	r0, [r7, #12]
 801dcee:	f7ff ffbd 	bl	801dc6c <ip_frag_free_pbuf_custom_ref>
}
 801dcf2:	bf00      	nop
 801dcf4:	3710      	adds	r7, #16
 801dcf6:	46bd      	mov	sp, r7
 801dcf8:	bd80      	pop	{r7, pc}
 801dcfa:	bf00      	nop
 801dcfc:	0802631c 	.word	0x0802631c
 801dd00:	080264e0 	.word	0x080264e0
 801dd04:	08026364 	.word	0x08026364
 801dd08:	080264ec 	.word	0x080264ec

0801dd0c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801dd0c:	b580      	push	{r7, lr}
 801dd0e:	b094      	sub	sp, #80	; 0x50
 801dd10:	af02      	add	r7, sp, #8
 801dd12:	60f8      	str	r0, [r7, #12]
 801dd14:	60b9      	str	r1, [r7, #8]
 801dd16:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801dd18:	2300      	movs	r3, #0
 801dd1a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801dd1e:	68bb      	ldr	r3, [r7, #8]
 801dd20:	8c1b      	ldrh	r3, [r3, #32]
 801dd22:	3b14      	subs	r3, #20
 801dd24:	2b00      	cmp	r3, #0
 801dd26:	da00      	bge.n	801dd2a <ip4_frag+0x1e>
 801dd28:	3307      	adds	r3, #7
 801dd2a:	10db      	asrs	r3, r3, #3
 801dd2c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801dd2e:	2314      	movs	r3, #20
 801dd30:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801dd32:	68fb      	ldr	r3, [r7, #12]
 801dd34:	685b      	ldr	r3, [r3, #4]
 801dd36:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801dd38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dd3a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801dd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd3e:	781b      	ldrb	r3, [r3, #0]
 801dd40:	f003 030f 	and.w	r3, r3, #15
 801dd44:	b2db      	uxtb	r3, r3
 801dd46:	009b      	lsls	r3, r3, #2
 801dd48:	b2db      	uxtb	r3, r3
 801dd4a:	2b14      	cmp	r3, #20
 801dd4c:	d002      	beq.n	801dd54 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801dd4e:	f06f 0305 	mvn.w	r3, #5
 801dd52:	e110      	b.n	801df76 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801dd54:	68fb      	ldr	r3, [r7, #12]
 801dd56:	895b      	ldrh	r3, [r3, #10]
 801dd58:	2b13      	cmp	r3, #19
 801dd5a:	d809      	bhi.n	801dd70 <ip4_frag+0x64>
 801dd5c:	4b88      	ldr	r3, [pc, #544]	; (801df80 <ip4_frag+0x274>)
 801dd5e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801dd62:	4988      	ldr	r1, [pc, #544]	; (801df84 <ip4_frag+0x278>)
 801dd64:	4888      	ldr	r0, [pc, #544]	; (801df88 <ip4_frag+0x27c>)
 801dd66:	f001 fcab 	bl	801f6c0 <iprintf>
 801dd6a:	f06f 0305 	mvn.w	r3, #5
 801dd6e:	e102      	b.n	801df76 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801dd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd72:	88db      	ldrh	r3, [r3, #6]
 801dd74:	b29b      	uxth	r3, r3
 801dd76:	4618      	mov	r0, r3
 801dd78:	f7f5 f87e 	bl	8012e78 <lwip_htons>
 801dd7c:	4603      	mov	r3, r0
 801dd7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801dd80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dd82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dd86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801dd8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dd8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801dd90:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801dd92:	68fb      	ldr	r3, [r7, #12]
 801dd94:	891b      	ldrh	r3, [r3, #8]
 801dd96:	3b14      	subs	r3, #20
 801dd98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801dd9c:	e0e1      	b.n	801df62 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801dd9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801dda0:	00db      	lsls	r3, r3, #3
 801dda2:	b29b      	uxth	r3, r3
 801dda4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801dda8:	4293      	cmp	r3, r2
 801ddaa:	bf28      	it	cs
 801ddac:	4613      	movcs	r3, r2
 801ddae:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ddb0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ddb4:	2114      	movs	r1, #20
 801ddb6:	200e      	movs	r0, #14
 801ddb8:	f7f6 f936 	bl	8014028 <pbuf_alloc>
 801ddbc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801ddbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddc0:	2b00      	cmp	r3, #0
 801ddc2:	f000 80d5 	beq.w	801df70 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ddc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddc8:	895b      	ldrh	r3, [r3, #10]
 801ddca:	2b13      	cmp	r3, #19
 801ddcc:	d806      	bhi.n	801dddc <ip4_frag+0xd0>
 801ddce:	4b6c      	ldr	r3, [pc, #432]	; (801df80 <ip4_frag+0x274>)
 801ddd0:	f44f 7249 	mov.w	r2, #804	; 0x324
 801ddd4:	496d      	ldr	r1, [pc, #436]	; (801df8c <ip4_frag+0x280>)
 801ddd6:	486c      	ldr	r0, [pc, #432]	; (801df88 <ip4_frag+0x27c>)
 801ddd8:	f001 fc72 	bl	801f6c0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801dddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddde:	685b      	ldr	r3, [r3, #4]
 801dde0:	2214      	movs	r2, #20
 801dde2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801dde4:	4618      	mov	r0, r3
 801dde6:	f001 f9bd 	bl	801f164 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801ddea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddec:	685b      	ldr	r3, [r3, #4]
 801ddee:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801ddf0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ddf2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801ddf6:	e064      	b.n	801dec2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801ddf8:	68fb      	ldr	r3, [r7, #12]
 801ddfa:	895a      	ldrh	r2, [r3, #10]
 801ddfc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ddfe:	1ad3      	subs	r3, r2, r3
 801de00:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801de02:	68fb      	ldr	r3, [r7, #12]
 801de04:	895b      	ldrh	r3, [r3, #10]
 801de06:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801de08:	429a      	cmp	r2, r3
 801de0a:	d906      	bls.n	801de1a <ip4_frag+0x10e>
 801de0c:	4b5c      	ldr	r3, [pc, #368]	; (801df80 <ip4_frag+0x274>)
 801de0e:	f240 322d 	movw	r2, #813	; 0x32d
 801de12:	495f      	ldr	r1, [pc, #380]	; (801df90 <ip4_frag+0x284>)
 801de14:	485c      	ldr	r0, [pc, #368]	; (801df88 <ip4_frag+0x27c>)
 801de16:	f001 fc53 	bl	801f6c0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801de1a:	8bfa      	ldrh	r2, [r7, #30]
 801de1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801de20:	4293      	cmp	r3, r2
 801de22:	bf28      	it	cs
 801de24:	4613      	movcs	r3, r2
 801de26:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801de2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801de2e:	2b00      	cmp	r3, #0
 801de30:	d105      	bne.n	801de3e <ip4_frag+0x132>
        poff = 0;
 801de32:	2300      	movs	r3, #0
 801de34:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801de36:	68fb      	ldr	r3, [r7, #12]
 801de38:	681b      	ldr	r3, [r3, #0]
 801de3a:	60fb      	str	r3, [r7, #12]
        continue;
 801de3c:	e041      	b.n	801dec2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801de3e:	f7ff ff0d 	bl	801dc5c <ip_frag_alloc_pbuf_custom_ref>
 801de42:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801de44:	69bb      	ldr	r3, [r7, #24]
 801de46:	2b00      	cmp	r3, #0
 801de48:	d103      	bne.n	801de52 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801de4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801de4c:	f7f6 fbd0 	bl	80145f0 <pbuf_free>
        goto memerr;
 801de50:	e08f      	b.n	801df72 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801de52:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801de54:	68fb      	ldr	r3, [r7, #12]
 801de56:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801de58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801de5a:	4413      	add	r3, r2
 801de5c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801de60:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801de64:	9201      	str	r2, [sp, #4]
 801de66:	9300      	str	r3, [sp, #0]
 801de68:	4603      	mov	r3, r0
 801de6a:	2241      	movs	r2, #65	; 0x41
 801de6c:	2000      	movs	r0, #0
 801de6e:	f7f6 fa05 	bl	801427c <pbuf_alloced_custom>
 801de72:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801de74:	697b      	ldr	r3, [r7, #20]
 801de76:	2b00      	cmp	r3, #0
 801de78:	d106      	bne.n	801de88 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801de7a:	69b8      	ldr	r0, [r7, #24]
 801de7c:	f7ff fef6 	bl	801dc6c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801de80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801de82:	f7f6 fbb5 	bl	80145f0 <pbuf_free>
        goto memerr;
 801de86:	e074      	b.n	801df72 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801de88:	68f8      	ldr	r0, [r7, #12]
 801de8a:	f7f6 fc57 	bl	801473c <pbuf_ref>
      pcr->original = p;
 801de8e:	69bb      	ldr	r3, [r7, #24]
 801de90:	68fa      	ldr	r2, [r7, #12]
 801de92:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801de94:	69bb      	ldr	r3, [r7, #24]
 801de96:	4a3f      	ldr	r2, [pc, #252]	; (801df94 <ip4_frag+0x288>)
 801de98:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801de9a:	6979      	ldr	r1, [r7, #20]
 801de9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801de9e:	f7f6 fc75 	bl	801478c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801dea2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801dea6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801deaa:	1ad3      	subs	r3, r2, r3
 801deac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801deb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801deb4:	2b00      	cmp	r3, #0
 801deb6:	d004      	beq.n	801dec2 <ip4_frag+0x1b6>
        poff = 0;
 801deb8:	2300      	movs	r3, #0
 801deba:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801debc:	68fb      	ldr	r3, [r7, #12]
 801debe:	681b      	ldr	r3, [r3, #0]
 801dec0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801dec2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801dec6:	2b00      	cmp	r3, #0
 801dec8:	d196      	bne.n	801ddf8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801deca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801decc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ded0:	4413      	add	r3, r2
 801ded2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801ded4:	68bb      	ldr	r3, [r7, #8]
 801ded6:	8c1b      	ldrh	r3, [r3, #32]
 801ded8:	f1a3 0213 	sub.w	r2, r3, #19
 801dedc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dee0:	429a      	cmp	r2, r3
 801dee2:	bfcc      	ite	gt
 801dee4:	2301      	movgt	r3, #1
 801dee6:	2300      	movle	r3, #0
 801dee8:	b2db      	uxtb	r3, r3
 801deea:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801deec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801def0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801def4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801def6:	6a3b      	ldr	r3, [r7, #32]
 801def8:	2b00      	cmp	r3, #0
 801defa:	d002      	beq.n	801df02 <ip4_frag+0x1f6>
 801defc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801defe:	2b00      	cmp	r3, #0
 801df00:	d003      	beq.n	801df0a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801df02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801df04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801df08:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801df0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801df0c:	4618      	mov	r0, r3
 801df0e:	f7f4 ffb3 	bl	8012e78 <lwip_htons>
 801df12:	4603      	mov	r3, r0
 801df14:	461a      	mov	r2, r3
 801df16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df18:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801df1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801df1c:	3314      	adds	r3, #20
 801df1e:	b29b      	uxth	r3, r3
 801df20:	4618      	mov	r0, r3
 801df22:	f7f4 ffa9 	bl	8012e78 <lwip_htons>
 801df26:	4603      	mov	r3, r0
 801df28:	461a      	mov	r2, r3
 801df2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df2c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801df2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df30:	2200      	movs	r2, #0
 801df32:	729a      	strb	r2, [r3, #10]
 801df34:	2200      	movs	r2, #0
 801df36:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801df38:	68bb      	ldr	r3, [r7, #8]
 801df3a:	695b      	ldr	r3, [r3, #20]
 801df3c:	687a      	ldr	r2, [r7, #4]
 801df3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801df40:	68b8      	ldr	r0, [r7, #8]
 801df42:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801df44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801df46:	f7f6 fb53 	bl	80145f0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801df4a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801df4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801df50:	1ad3      	subs	r3, r2, r3
 801df52:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801df56:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801df5a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801df5c:	4413      	add	r3, r2
 801df5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801df62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801df66:	2b00      	cmp	r3, #0
 801df68:	f47f af19 	bne.w	801dd9e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801df6c:	2300      	movs	r3, #0
 801df6e:	e002      	b.n	801df76 <ip4_frag+0x26a>
      goto memerr;
 801df70:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801df72:	f04f 33ff 	mov.w	r3, #4294967295
}
 801df76:	4618      	mov	r0, r3
 801df78:	3748      	adds	r7, #72	; 0x48
 801df7a:	46bd      	mov	sp, r7
 801df7c:	bd80      	pop	{r7, pc}
 801df7e:	bf00      	nop
 801df80:	0802631c 	.word	0x0802631c
 801df84:	080264f8 	.word	0x080264f8
 801df88:	08026364 	.word	0x08026364
 801df8c:	08026514 	.word	0x08026514
 801df90:	08026534 	.word	0x08026534
 801df94:	0801dca5 	.word	0x0801dca5

0801df98 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801df98:	b580      	push	{r7, lr}
 801df9a:	b086      	sub	sp, #24
 801df9c:	af00      	add	r7, sp, #0
 801df9e:	6078      	str	r0, [r7, #4]
 801dfa0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801dfa2:	230e      	movs	r3, #14
 801dfa4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801dfa6:	687b      	ldr	r3, [r7, #4]
 801dfa8:	895b      	ldrh	r3, [r3, #10]
 801dfaa:	2b0e      	cmp	r3, #14
 801dfac:	d96e      	bls.n	801e08c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801dfae:	687b      	ldr	r3, [r7, #4]
 801dfb0:	7bdb      	ldrb	r3, [r3, #15]
 801dfb2:	2b00      	cmp	r3, #0
 801dfb4:	d106      	bne.n	801dfc4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801dfb6:	683b      	ldr	r3, [r7, #0]
 801dfb8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801dfbc:	3301      	adds	r3, #1
 801dfbe:	b2da      	uxtb	r2, r3
 801dfc0:	687b      	ldr	r3, [r7, #4]
 801dfc2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801dfc4:	687b      	ldr	r3, [r7, #4]
 801dfc6:	685b      	ldr	r3, [r3, #4]
 801dfc8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801dfca:	693b      	ldr	r3, [r7, #16]
 801dfcc:	7b1a      	ldrb	r2, [r3, #12]
 801dfce:	7b5b      	ldrb	r3, [r3, #13]
 801dfd0:	021b      	lsls	r3, r3, #8
 801dfd2:	4313      	orrs	r3, r2
 801dfd4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801dfd6:	693b      	ldr	r3, [r7, #16]
 801dfd8:	781b      	ldrb	r3, [r3, #0]
 801dfda:	f003 0301 	and.w	r3, r3, #1
 801dfde:	2b00      	cmp	r3, #0
 801dfe0:	d023      	beq.n	801e02a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801dfe2:	693b      	ldr	r3, [r7, #16]
 801dfe4:	781b      	ldrb	r3, [r3, #0]
 801dfe6:	2b01      	cmp	r3, #1
 801dfe8:	d10f      	bne.n	801e00a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801dfea:	693b      	ldr	r3, [r7, #16]
 801dfec:	785b      	ldrb	r3, [r3, #1]
 801dfee:	2b00      	cmp	r3, #0
 801dff0:	d11b      	bne.n	801e02a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801dff2:	693b      	ldr	r3, [r7, #16]
 801dff4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801dff6:	2b5e      	cmp	r3, #94	; 0x5e
 801dff8:	d117      	bne.n	801e02a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801dffa:	687b      	ldr	r3, [r7, #4]
 801dffc:	7b5b      	ldrb	r3, [r3, #13]
 801dffe:	f043 0310 	orr.w	r3, r3, #16
 801e002:	b2da      	uxtb	r2, r3
 801e004:	687b      	ldr	r3, [r7, #4]
 801e006:	735a      	strb	r2, [r3, #13]
 801e008:	e00f      	b.n	801e02a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801e00a:	693b      	ldr	r3, [r7, #16]
 801e00c:	2206      	movs	r2, #6
 801e00e:	4928      	ldr	r1, [pc, #160]	; (801e0b0 <ethernet_input+0x118>)
 801e010:	4618      	mov	r0, r3
 801e012:	f001 f899 	bl	801f148 <memcmp>
 801e016:	4603      	mov	r3, r0
 801e018:	2b00      	cmp	r3, #0
 801e01a:	d106      	bne.n	801e02a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801e01c:	687b      	ldr	r3, [r7, #4]
 801e01e:	7b5b      	ldrb	r3, [r3, #13]
 801e020:	f043 0308 	orr.w	r3, r3, #8
 801e024:	b2da      	uxtb	r2, r3
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801e02a:	89fb      	ldrh	r3, [r7, #14]
 801e02c:	2b08      	cmp	r3, #8
 801e02e:	d003      	beq.n	801e038 <ethernet_input+0xa0>
 801e030:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801e034:	d014      	beq.n	801e060 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801e036:	e032      	b.n	801e09e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e038:	683b      	ldr	r3, [r7, #0]
 801e03a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801e03e:	f003 0308 	and.w	r3, r3, #8
 801e042:	2b00      	cmp	r3, #0
 801e044:	d024      	beq.n	801e090 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e046:	8afb      	ldrh	r3, [r7, #22]
 801e048:	4619      	mov	r1, r3
 801e04a:	6878      	ldr	r0, [r7, #4]
 801e04c:	f7f6 fa4a 	bl	80144e4 <pbuf_remove_header>
 801e050:	4603      	mov	r3, r0
 801e052:	2b00      	cmp	r3, #0
 801e054:	d11e      	bne.n	801e094 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801e056:	6839      	ldr	r1, [r7, #0]
 801e058:	6878      	ldr	r0, [r7, #4]
 801e05a:	f7fe fdfd 	bl	801cc58 <ip4_input>
      break;
 801e05e:	e013      	b.n	801e088 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e060:	683b      	ldr	r3, [r7, #0]
 801e062:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801e066:	f003 0308 	and.w	r3, r3, #8
 801e06a:	2b00      	cmp	r3, #0
 801e06c:	d014      	beq.n	801e098 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e06e:	8afb      	ldrh	r3, [r7, #22]
 801e070:	4619      	mov	r1, r3
 801e072:	6878      	ldr	r0, [r7, #4]
 801e074:	f7f6 fa36 	bl	80144e4 <pbuf_remove_header>
 801e078:	4603      	mov	r3, r0
 801e07a:	2b00      	cmp	r3, #0
 801e07c:	d10e      	bne.n	801e09c <ethernet_input+0x104>
        etharp_input(p, netif);
 801e07e:	6839      	ldr	r1, [r7, #0]
 801e080:	6878      	ldr	r0, [r7, #4]
 801e082:	f7fd ff9d 	bl	801bfc0 <etharp_input>
      break;
 801e086:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801e088:	2300      	movs	r3, #0
 801e08a:	e00c      	b.n	801e0a6 <ethernet_input+0x10e>
    goto free_and_return;
 801e08c:	bf00      	nop
 801e08e:	e006      	b.n	801e09e <ethernet_input+0x106>
        goto free_and_return;
 801e090:	bf00      	nop
 801e092:	e004      	b.n	801e09e <ethernet_input+0x106>
        goto free_and_return;
 801e094:	bf00      	nop
 801e096:	e002      	b.n	801e09e <ethernet_input+0x106>
        goto free_and_return;
 801e098:	bf00      	nop
 801e09a:	e000      	b.n	801e09e <ethernet_input+0x106>
        goto free_and_return;
 801e09c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801e09e:	6878      	ldr	r0, [r7, #4]
 801e0a0:	f7f6 faa6 	bl	80145f0 <pbuf_free>
  return ERR_OK;
 801e0a4:	2300      	movs	r3, #0
}
 801e0a6:	4618      	mov	r0, r3
 801e0a8:	3718      	adds	r7, #24
 801e0aa:	46bd      	mov	sp, r7
 801e0ac:	bd80      	pop	{r7, pc}
 801e0ae:	bf00      	nop
 801e0b0:	08027634 	.word	0x08027634

0801e0b4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801e0b4:	b580      	push	{r7, lr}
 801e0b6:	b086      	sub	sp, #24
 801e0b8:	af00      	add	r7, sp, #0
 801e0ba:	60f8      	str	r0, [r7, #12]
 801e0bc:	60b9      	str	r1, [r7, #8]
 801e0be:	607a      	str	r2, [r7, #4]
 801e0c0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801e0c2:	8c3b      	ldrh	r3, [r7, #32]
 801e0c4:	4618      	mov	r0, r3
 801e0c6:	f7f4 fed7 	bl	8012e78 <lwip_htons>
 801e0ca:	4603      	mov	r3, r0
 801e0cc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801e0ce:	210e      	movs	r1, #14
 801e0d0:	68b8      	ldr	r0, [r7, #8]
 801e0d2:	f7f6 f9f7 	bl	80144c4 <pbuf_add_header>
 801e0d6:	4603      	mov	r3, r0
 801e0d8:	2b00      	cmp	r3, #0
 801e0da:	d125      	bne.n	801e128 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801e0dc:	68bb      	ldr	r3, [r7, #8]
 801e0de:	685b      	ldr	r3, [r3, #4]
 801e0e0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801e0e2:	693b      	ldr	r3, [r7, #16]
 801e0e4:	8afa      	ldrh	r2, [r7, #22]
 801e0e6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801e0e8:	693b      	ldr	r3, [r7, #16]
 801e0ea:	2206      	movs	r2, #6
 801e0ec:	6839      	ldr	r1, [r7, #0]
 801e0ee:	4618      	mov	r0, r3
 801e0f0:	f001 f838 	bl	801f164 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801e0f4:	693b      	ldr	r3, [r7, #16]
 801e0f6:	3306      	adds	r3, #6
 801e0f8:	2206      	movs	r2, #6
 801e0fa:	6879      	ldr	r1, [r7, #4]
 801e0fc:	4618      	mov	r0, r3
 801e0fe:	f001 f831 	bl	801f164 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801e102:	68fb      	ldr	r3, [r7, #12]
 801e104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e108:	2b06      	cmp	r3, #6
 801e10a:	d006      	beq.n	801e11a <ethernet_output+0x66>
 801e10c:	4b0a      	ldr	r3, [pc, #40]	; (801e138 <ethernet_output+0x84>)
 801e10e:	f44f 7299 	mov.w	r2, #306	; 0x132
 801e112:	490a      	ldr	r1, [pc, #40]	; (801e13c <ethernet_output+0x88>)
 801e114:	480a      	ldr	r0, [pc, #40]	; (801e140 <ethernet_output+0x8c>)
 801e116:	f001 fad3 	bl	801f6c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801e11a:	68fb      	ldr	r3, [r7, #12]
 801e11c:	699b      	ldr	r3, [r3, #24]
 801e11e:	68b9      	ldr	r1, [r7, #8]
 801e120:	68f8      	ldr	r0, [r7, #12]
 801e122:	4798      	blx	r3
 801e124:	4603      	mov	r3, r0
 801e126:	e002      	b.n	801e12e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801e128:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801e12a:	f06f 0301 	mvn.w	r3, #1
}
 801e12e:	4618      	mov	r0, r3
 801e130:	3718      	adds	r7, #24
 801e132:	46bd      	mov	sp, r7
 801e134:	bd80      	pop	{r7, pc}
 801e136:	bf00      	nop
 801e138:	08026544 	.word	0x08026544
 801e13c:	0802657c 	.word	0x0802657c
 801e140:	080265b0 	.word	0x080265b0

0801e144 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801e144:	b580      	push	{r7, lr}
 801e146:	b086      	sub	sp, #24
 801e148:	af00      	add	r7, sp, #0
 801e14a:	6078      	str	r0, [r7, #4]
 801e14c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801e14e:	683b      	ldr	r3, [r7, #0]
 801e150:	60bb      	str	r3, [r7, #8]
 801e152:	2304      	movs	r3, #4
 801e154:	60fb      	str	r3, [r7, #12]
 801e156:	2300      	movs	r3, #0
 801e158:	613b      	str	r3, [r7, #16]
 801e15a:	2300      	movs	r3, #0
 801e15c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801e15e:	f107 0308 	add.w	r3, r7, #8
 801e162:	2100      	movs	r1, #0
 801e164:	4618      	mov	r0, r3
 801e166:	f7ef f906 	bl	800d376 <osMessageCreate>
 801e16a:	4602      	mov	r2, r0
 801e16c:	687b      	ldr	r3, [r7, #4]
 801e16e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801e170:	687b      	ldr	r3, [r7, #4]
 801e172:	681b      	ldr	r3, [r3, #0]
 801e174:	2b00      	cmp	r3, #0
 801e176:	d102      	bne.n	801e17e <sys_mbox_new+0x3a>
    return ERR_MEM;
 801e178:	f04f 33ff 	mov.w	r3, #4294967295
 801e17c:	e000      	b.n	801e180 <sys_mbox_new+0x3c>

  return ERR_OK;
 801e17e:	2300      	movs	r3, #0
}
 801e180:	4618      	mov	r0, r3
 801e182:	3718      	adds	r7, #24
 801e184:	46bd      	mov	sp, r7
 801e186:	bd80      	pop	{r7, pc}

0801e188 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801e188:	b580      	push	{r7, lr}
 801e18a:	b082      	sub	sp, #8
 801e18c:	af00      	add	r7, sp, #0
 801e18e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801e190:	687b      	ldr	r3, [r7, #4]
 801e192:	681b      	ldr	r3, [r3, #0]
 801e194:	4618      	mov	r0, r3
 801e196:	f7ef f9cb 	bl	800d530 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801e19a:	687b      	ldr	r3, [r7, #4]
 801e19c:	681b      	ldr	r3, [r3, #0]
 801e19e:	4618      	mov	r0, r3
 801e1a0:	f7ef f9dc 	bl	800d55c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801e1a4:	bf00      	nop
 801e1a6:	3708      	adds	r7, #8
 801e1a8:	46bd      	mov	sp, r7
 801e1aa:	bd80      	pop	{r7, pc}

0801e1ac <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801e1ac:	b580      	push	{r7, lr}
 801e1ae:	b084      	sub	sp, #16
 801e1b0:	af00      	add	r7, sp, #0
 801e1b2:	6078      	str	r0, [r7, #4]
 801e1b4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801e1b6:	687b      	ldr	r3, [r7, #4]
 801e1b8:	681b      	ldr	r3, [r3, #0]
 801e1ba:	6839      	ldr	r1, [r7, #0]
 801e1bc:	2200      	movs	r2, #0
 801e1be:	4618      	mov	r0, r3
 801e1c0:	f7ef f902 	bl	800d3c8 <osMessagePut>
 801e1c4:	4603      	mov	r3, r0
 801e1c6:	2b00      	cmp	r3, #0
 801e1c8:	d102      	bne.n	801e1d0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801e1ca:	2300      	movs	r3, #0
 801e1cc:	73fb      	strb	r3, [r7, #15]
 801e1ce:	e001      	b.n	801e1d4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801e1d0:	23ff      	movs	r3, #255	; 0xff
 801e1d2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801e1d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e1d8:	4618      	mov	r0, r3
 801e1da:	3710      	adds	r7, #16
 801e1dc:	46bd      	mov	sp, r7
 801e1de:	bd80      	pop	{r7, pc}

0801e1e0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801e1e0:	b580      	push	{r7, lr}
 801e1e2:	b08c      	sub	sp, #48	; 0x30
 801e1e4:	af00      	add	r7, sp, #0
 801e1e6:	61f8      	str	r0, [r7, #28]
 801e1e8:	61b9      	str	r1, [r7, #24]
 801e1ea:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801e1ec:	f7ee ff02 	bl	800cff4 <osKernelSysTick>
 801e1f0:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801e1f2:	697b      	ldr	r3, [r7, #20]
 801e1f4:	2b00      	cmp	r3, #0
 801e1f6:	d017      	beq.n	801e228 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801e1f8:	69fb      	ldr	r3, [r7, #28]
 801e1fa:	6819      	ldr	r1, [r3, #0]
 801e1fc:	f107 0320 	add.w	r3, r7, #32
 801e200:	697a      	ldr	r2, [r7, #20]
 801e202:	4618      	mov	r0, r3
 801e204:	f7ef f920 	bl	800d448 <osMessageGet>

    if(event.status == osEventMessage)
 801e208:	6a3b      	ldr	r3, [r7, #32]
 801e20a:	2b10      	cmp	r3, #16
 801e20c:	d109      	bne.n	801e222 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801e20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e210:	461a      	mov	r2, r3
 801e212:	69bb      	ldr	r3, [r7, #24]
 801e214:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801e216:	f7ee feed 	bl	800cff4 <osKernelSysTick>
 801e21a:	4602      	mov	r2, r0
 801e21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e21e:	1ad3      	subs	r3, r2, r3
 801e220:	e019      	b.n	801e256 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801e222:	f04f 33ff 	mov.w	r3, #4294967295
 801e226:	e016      	b.n	801e256 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801e228:	69fb      	ldr	r3, [r7, #28]
 801e22a:	6819      	ldr	r1, [r3, #0]
 801e22c:	463b      	mov	r3, r7
 801e22e:	f04f 32ff 	mov.w	r2, #4294967295
 801e232:	4618      	mov	r0, r3
 801e234:	f7ef f908 	bl	800d448 <osMessageGet>
 801e238:	f107 0320 	add.w	r3, r7, #32
 801e23c:	463a      	mov	r2, r7
 801e23e:	ca07      	ldmia	r2, {r0, r1, r2}
 801e240:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801e244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e246:	461a      	mov	r2, r3
 801e248:	69bb      	ldr	r3, [r7, #24]
 801e24a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801e24c:	f7ee fed2 	bl	800cff4 <osKernelSysTick>
 801e250:	4602      	mov	r2, r0
 801e252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e254:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801e256:	4618      	mov	r0, r3
 801e258:	3730      	adds	r7, #48	; 0x30
 801e25a:	46bd      	mov	sp, r7
 801e25c:	bd80      	pop	{r7, pc}

0801e25e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801e25e:	b580      	push	{r7, lr}
 801e260:	b086      	sub	sp, #24
 801e262:	af00      	add	r7, sp, #0
 801e264:	6078      	str	r0, [r7, #4]
 801e266:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801e268:	687b      	ldr	r3, [r7, #4]
 801e26a:	6819      	ldr	r1, [r3, #0]
 801e26c:	f107 030c 	add.w	r3, r7, #12
 801e270:	2200      	movs	r2, #0
 801e272:	4618      	mov	r0, r3
 801e274:	f7ef f8e8 	bl	800d448 <osMessageGet>

  if(event.status == osEventMessage)
 801e278:	68fb      	ldr	r3, [r7, #12]
 801e27a:	2b10      	cmp	r3, #16
 801e27c:	d105      	bne.n	801e28a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801e27e:	693b      	ldr	r3, [r7, #16]
 801e280:	461a      	mov	r2, r3
 801e282:	683b      	ldr	r3, [r7, #0]
 801e284:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801e286:	2300      	movs	r3, #0
 801e288:	e001      	b.n	801e28e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801e28a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801e28e:	4618      	mov	r0, r3
 801e290:	3718      	adds	r7, #24
 801e292:	46bd      	mov	sp, r7
 801e294:	bd80      	pop	{r7, pc}

0801e296 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801e296:	b480      	push	{r7}
 801e298:	b083      	sub	sp, #12
 801e29a:	af00      	add	r7, sp, #0
 801e29c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801e29e:	687b      	ldr	r3, [r7, #4]
 801e2a0:	681b      	ldr	r3, [r3, #0]
 801e2a2:	2b00      	cmp	r3, #0
 801e2a4:	d101      	bne.n	801e2aa <sys_mbox_valid+0x14>
    return 0;
 801e2a6:	2300      	movs	r3, #0
 801e2a8:	e000      	b.n	801e2ac <sys_mbox_valid+0x16>
  else
    return 1;
 801e2aa:	2301      	movs	r3, #1
}
 801e2ac:	4618      	mov	r0, r3
 801e2ae:	370c      	adds	r7, #12
 801e2b0:	46bd      	mov	sp, r7
 801e2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2b6:	4770      	bx	lr

0801e2b8 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801e2b8:	b480      	push	{r7}
 801e2ba:	b083      	sub	sp, #12
 801e2bc:	af00      	add	r7, sp, #0
 801e2be:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801e2c0:	687b      	ldr	r3, [r7, #4]
 801e2c2:	2200      	movs	r2, #0
 801e2c4:	601a      	str	r2, [r3, #0]
}
 801e2c6:	bf00      	nop
 801e2c8:	370c      	adds	r7, #12
 801e2ca:	46bd      	mov	sp, r7
 801e2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2d0:	4770      	bx	lr

0801e2d2 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801e2d2:	b580      	push	{r7, lr}
 801e2d4:	b084      	sub	sp, #16
 801e2d6:	af00      	add	r7, sp, #0
 801e2d8:	6078      	str	r0, [r7, #4]
 801e2da:	460b      	mov	r3, r1
 801e2dc:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801e2de:	2300      	movs	r3, #0
 801e2e0:	60bb      	str	r3, [r7, #8]
 801e2e2:	2300      	movs	r3, #0
 801e2e4:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801e2e6:	f107 0308 	add.w	r3, r7, #8
 801e2ea:	2101      	movs	r1, #1
 801e2ec:	4618      	mov	r0, r3
 801e2ee:	f7ee ff79 	bl	800d1e4 <osSemaphoreCreate>
 801e2f2:	4602      	mov	r2, r0
 801e2f4:	687b      	ldr	r3, [r7, #4]
 801e2f6:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801e2f8:	687b      	ldr	r3, [r7, #4]
 801e2fa:	681b      	ldr	r3, [r3, #0]
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	d102      	bne.n	801e306 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801e300:	f04f 33ff 	mov.w	r3, #4294967295
 801e304:	e009      	b.n	801e31a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801e306:	78fb      	ldrb	r3, [r7, #3]
 801e308:	2b00      	cmp	r3, #0
 801e30a:	d105      	bne.n	801e318 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801e30c:	687b      	ldr	r3, [r7, #4]
 801e30e:	681b      	ldr	r3, [r3, #0]
 801e310:	2100      	movs	r1, #0
 801e312:	4618      	mov	r0, r3
 801e314:	f7ee ff98 	bl	800d248 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801e318:	2300      	movs	r3, #0
}
 801e31a:	4618      	mov	r0, r3
 801e31c:	3710      	adds	r7, #16
 801e31e:	46bd      	mov	sp, r7
 801e320:	bd80      	pop	{r7, pc}

0801e322 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801e322:	b580      	push	{r7, lr}
 801e324:	b084      	sub	sp, #16
 801e326:	af00      	add	r7, sp, #0
 801e328:	6078      	str	r0, [r7, #4]
 801e32a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801e32c:	f7ee fe62 	bl	800cff4 <osKernelSysTick>
 801e330:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801e332:	683b      	ldr	r3, [r7, #0]
 801e334:	2b00      	cmp	r3, #0
 801e336:	d011      	beq.n	801e35c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801e338:	687b      	ldr	r3, [r7, #4]
 801e33a:	681b      	ldr	r3, [r3, #0]
 801e33c:	6839      	ldr	r1, [r7, #0]
 801e33e:	4618      	mov	r0, r3
 801e340:	f7ee ff82 	bl	800d248 <osSemaphoreWait>
 801e344:	4603      	mov	r3, r0
 801e346:	2b00      	cmp	r3, #0
 801e348:	d105      	bne.n	801e356 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801e34a:	f7ee fe53 	bl	800cff4 <osKernelSysTick>
 801e34e:	4602      	mov	r2, r0
 801e350:	68fb      	ldr	r3, [r7, #12]
 801e352:	1ad3      	subs	r3, r2, r3
 801e354:	e012      	b.n	801e37c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801e356:	f04f 33ff 	mov.w	r3, #4294967295
 801e35a:	e00f      	b.n	801e37c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801e35c:	bf00      	nop
 801e35e:	687b      	ldr	r3, [r7, #4]
 801e360:	681b      	ldr	r3, [r3, #0]
 801e362:	f04f 31ff 	mov.w	r1, #4294967295
 801e366:	4618      	mov	r0, r3
 801e368:	f7ee ff6e 	bl	800d248 <osSemaphoreWait>
 801e36c:	4603      	mov	r3, r0
 801e36e:	2b00      	cmp	r3, #0
 801e370:	d1f5      	bne.n	801e35e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801e372:	f7ee fe3f 	bl	800cff4 <osKernelSysTick>
 801e376:	4602      	mov	r2, r0
 801e378:	68fb      	ldr	r3, [r7, #12]
 801e37a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801e37c:	4618      	mov	r0, r3
 801e37e:	3710      	adds	r7, #16
 801e380:	46bd      	mov	sp, r7
 801e382:	bd80      	pop	{r7, pc}

0801e384 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801e384:	b580      	push	{r7, lr}
 801e386:	b082      	sub	sp, #8
 801e388:	af00      	add	r7, sp, #0
 801e38a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801e38c:	687b      	ldr	r3, [r7, #4]
 801e38e:	681b      	ldr	r3, [r3, #0]
 801e390:	4618      	mov	r0, r3
 801e392:	f7ee ffa7 	bl	800d2e4 <osSemaphoreRelease>
}
 801e396:	bf00      	nop
 801e398:	3708      	adds	r7, #8
 801e39a:	46bd      	mov	sp, r7
 801e39c:	bd80      	pop	{r7, pc}

0801e39e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801e39e:	b580      	push	{r7, lr}
 801e3a0:	b082      	sub	sp, #8
 801e3a2:	af00      	add	r7, sp, #0
 801e3a4:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801e3a6:	687b      	ldr	r3, [r7, #4]
 801e3a8:	681b      	ldr	r3, [r3, #0]
 801e3aa:	4618      	mov	r0, r3
 801e3ac:	f7ee ffd0 	bl	800d350 <osSemaphoreDelete>
}
 801e3b0:	bf00      	nop
 801e3b2:	3708      	adds	r7, #8
 801e3b4:	46bd      	mov	sp, r7
 801e3b6:	bd80      	pop	{r7, pc}

0801e3b8 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801e3b8:	b480      	push	{r7}
 801e3ba:	b083      	sub	sp, #12
 801e3bc:	af00      	add	r7, sp, #0
 801e3be:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801e3c0:	687b      	ldr	r3, [r7, #4]
 801e3c2:	681b      	ldr	r3, [r3, #0]
 801e3c4:	2b00      	cmp	r3, #0
 801e3c6:	d101      	bne.n	801e3cc <sys_sem_valid+0x14>
    return 0;
 801e3c8:	2300      	movs	r3, #0
 801e3ca:	e000      	b.n	801e3ce <sys_sem_valid+0x16>
  else
    return 1;
 801e3cc:	2301      	movs	r3, #1
}
 801e3ce:	4618      	mov	r0, r3
 801e3d0:	370c      	adds	r7, #12
 801e3d2:	46bd      	mov	sp, r7
 801e3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3d8:	4770      	bx	lr

0801e3da <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801e3da:	b480      	push	{r7}
 801e3dc:	b083      	sub	sp, #12
 801e3de:	af00      	add	r7, sp, #0
 801e3e0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801e3e2:	687b      	ldr	r3, [r7, #4]
 801e3e4:	2200      	movs	r2, #0
 801e3e6:	601a      	str	r2, [r3, #0]
}
 801e3e8:	bf00      	nop
 801e3ea:	370c      	adds	r7, #12
 801e3ec:	46bd      	mov	sp, r7
 801e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3f2:	4770      	bx	lr

0801e3f4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801e3f4:	b580      	push	{r7, lr}
 801e3f6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801e3f8:	4803      	ldr	r0, [pc, #12]	; (801e408 <sys_init+0x14>)
 801e3fa:	f7ee fe57 	bl	800d0ac <osMutexCreate>
 801e3fe:	4603      	mov	r3, r0
 801e400:	4a02      	ldr	r2, [pc, #8]	; (801e40c <sys_init+0x18>)
 801e402:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801e404:	bf00      	nop
 801e406:	bd80      	pop	{r7, pc}
 801e408:	08027644 	.word	0x08027644
 801e40c:	2000b8f4 	.word	0x2000b8f4

0801e410 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801e410:	b580      	push	{r7, lr}
 801e412:	b084      	sub	sp, #16
 801e414:	af00      	add	r7, sp, #0
 801e416:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801e418:	2300      	movs	r3, #0
 801e41a:	60bb      	str	r3, [r7, #8]
 801e41c:	2300      	movs	r3, #0
 801e41e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801e420:	f107 0308 	add.w	r3, r7, #8
 801e424:	4618      	mov	r0, r3
 801e426:	f7ee fe41 	bl	800d0ac <osMutexCreate>
 801e42a:	4602      	mov	r2, r0
 801e42c:	687b      	ldr	r3, [r7, #4]
 801e42e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801e430:	687b      	ldr	r3, [r7, #4]
 801e432:	681b      	ldr	r3, [r3, #0]
 801e434:	2b00      	cmp	r3, #0
 801e436:	d102      	bne.n	801e43e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801e438:	f04f 33ff 	mov.w	r3, #4294967295
 801e43c:	e000      	b.n	801e440 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801e43e:	2300      	movs	r3, #0
}
 801e440:	4618      	mov	r0, r3
 801e442:	3710      	adds	r7, #16
 801e444:	46bd      	mov	sp, r7
 801e446:	bd80      	pop	{r7, pc}

0801e448 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801e448:	b580      	push	{r7, lr}
 801e44a:	b082      	sub	sp, #8
 801e44c:	af00      	add	r7, sp, #0
 801e44e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	681b      	ldr	r3, [r3, #0]
 801e454:	f04f 31ff 	mov.w	r1, #4294967295
 801e458:	4618      	mov	r0, r3
 801e45a:	f7ee fe3f 	bl	800d0dc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801e45e:	bf00      	nop
 801e460:	3708      	adds	r7, #8
 801e462:	46bd      	mov	sp, r7
 801e464:	bd80      	pop	{r7, pc}

0801e466 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801e466:	b580      	push	{r7, lr}
 801e468:	b082      	sub	sp, #8
 801e46a:	af00      	add	r7, sp, #0
 801e46c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801e46e:	687b      	ldr	r3, [r7, #4]
 801e470:	681b      	ldr	r3, [r3, #0]
 801e472:	4618      	mov	r0, r3
 801e474:	f7ee fe80 	bl	800d178 <osMutexRelease>
}
 801e478:	bf00      	nop
 801e47a:	3708      	adds	r7, #8
 801e47c:	46bd      	mov	sp, r7
 801e47e:	bd80      	pop	{r7, pc}

0801e480 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801e480:	b580      	push	{r7, lr}
 801e482:	b08c      	sub	sp, #48	; 0x30
 801e484:	af00      	add	r7, sp, #0
 801e486:	60f8      	str	r0, [r7, #12]
 801e488:	60b9      	str	r1, [r7, #8]
 801e48a:	607a      	str	r2, [r7, #4]
 801e48c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801e48e:	f107 0314 	add.w	r3, r7, #20
 801e492:	2200      	movs	r2, #0
 801e494:	601a      	str	r2, [r3, #0]
 801e496:	605a      	str	r2, [r3, #4]
 801e498:	609a      	str	r2, [r3, #8]
 801e49a:	60da      	str	r2, [r3, #12]
 801e49c:	611a      	str	r2, [r3, #16]
 801e49e:	615a      	str	r2, [r3, #20]
 801e4a0:	619a      	str	r2, [r3, #24]
 801e4a2:	68fb      	ldr	r3, [r7, #12]
 801e4a4:	617b      	str	r3, [r7, #20]
 801e4a6:	68bb      	ldr	r3, [r7, #8]
 801e4a8:	61bb      	str	r3, [r7, #24]
 801e4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e4ac:	b21b      	sxth	r3, r3
 801e4ae:	83bb      	strh	r3, [r7, #28]
 801e4b0:	683b      	ldr	r3, [r7, #0]
 801e4b2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801e4b4:	f107 0314 	add.w	r3, r7, #20
 801e4b8:	6879      	ldr	r1, [r7, #4]
 801e4ba:	4618      	mov	r0, r3
 801e4bc:	f7ee fdaa 	bl	800d014 <osThreadCreate>
 801e4c0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801e4c2:	4618      	mov	r0, r3
 801e4c4:	3730      	adds	r7, #48	; 0x30
 801e4c6:	46bd      	mov	sp, r7
 801e4c8:	bd80      	pop	{r7, pc}
	...

0801e4cc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801e4cc:	b580      	push	{r7, lr}
 801e4ce:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801e4d0:	4b04      	ldr	r3, [pc, #16]	; (801e4e4 <sys_arch_protect+0x18>)
 801e4d2:	681b      	ldr	r3, [r3, #0]
 801e4d4:	f04f 31ff 	mov.w	r1, #4294967295
 801e4d8:	4618      	mov	r0, r3
 801e4da:	f7ee fdff 	bl	800d0dc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801e4de:	2301      	movs	r3, #1
}
 801e4e0:	4618      	mov	r0, r3
 801e4e2:	bd80      	pop	{r7, pc}
 801e4e4:	2000b8f4 	.word	0x2000b8f4

0801e4e8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801e4e8:	b580      	push	{r7, lr}
 801e4ea:	b082      	sub	sp, #8
 801e4ec:	af00      	add	r7, sp, #0
 801e4ee:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801e4f0:	4b04      	ldr	r3, [pc, #16]	; (801e504 <sys_arch_unprotect+0x1c>)
 801e4f2:	681b      	ldr	r3, [r3, #0]
 801e4f4:	4618      	mov	r0, r3
 801e4f6:	f7ee fe3f 	bl	800d178 <osMutexRelease>
}
 801e4fa:	bf00      	nop
 801e4fc:	3708      	adds	r7, #8
 801e4fe:	46bd      	mov	sp, r7
 801e500:	bd80      	pop	{r7, pc}
 801e502:	bf00      	nop
 801e504:	2000b8f4 	.word	0x2000b8f4

0801e508 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801e508:	b580      	push	{r7, lr}
 801e50a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801e50c:	2200      	movs	r2, #0
 801e50e:	4912      	ldr	r1, [pc, #72]	; (801e558 <MX_USB_DEVICE_Init+0x50>)
 801e510:	4812      	ldr	r0, [pc, #72]	; (801e55c <MX_USB_DEVICE_Init+0x54>)
 801e512:	f7ed fbd5 	bl	800bcc0 <USBD_Init>
 801e516:	4603      	mov	r3, r0
 801e518:	2b00      	cmp	r3, #0
 801e51a:	d001      	beq.n	801e520 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801e51c:	f7e3 ffce 	bl	80024bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801e520:	490f      	ldr	r1, [pc, #60]	; (801e560 <MX_USB_DEVICE_Init+0x58>)
 801e522:	480e      	ldr	r0, [pc, #56]	; (801e55c <MX_USB_DEVICE_Init+0x54>)
 801e524:	f7ed fbfc 	bl	800bd20 <USBD_RegisterClass>
 801e528:	4603      	mov	r3, r0
 801e52a:	2b00      	cmp	r3, #0
 801e52c:	d001      	beq.n	801e532 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801e52e:	f7e3 ffc5 	bl	80024bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801e532:	490c      	ldr	r1, [pc, #48]	; (801e564 <MX_USB_DEVICE_Init+0x5c>)
 801e534:	4809      	ldr	r0, [pc, #36]	; (801e55c <MX_USB_DEVICE_Init+0x54>)
 801e536:	f7ed fb4d 	bl	800bbd4 <USBD_CDC_RegisterInterface>
 801e53a:	4603      	mov	r3, r0
 801e53c:	2b00      	cmp	r3, #0
 801e53e:	d001      	beq.n	801e544 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801e540:	f7e3 ffbc 	bl	80024bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801e544:	4805      	ldr	r0, [pc, #20]	; (801e55c <MX_USB_DEVICE_Init+0x54>)
 801e546:	f7ed fc12 	bl	800bd6e <USBD_Start>
 801e54a:	4603      	mov	r3, r0
 801e54c:	2b00      	cmp	r3, #0
 801e54e:	d001      	beq.n	801e554 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801e550:	f7e3 ffb4 	bl	80024bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801e554:	bf00      	nop
 801e556:	bd80      	pop	{r7, pc}
 801e558:	2000015c 	.word	0x2000015c
 801e55c:	2000b8f8 	.word	0x2000b8f8
 801e560:	20000034 	.word	0x20000034
 801e564:	20000148 	.word	0x20000148

0801e568 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801e568:	b580      	push	{r7, lr}
 801e56a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801e56c:	2200      	movs	r2, #0
 801e56e:	4905      	ldr	r1, [pc, #20]	; (801e584 <CDC_Init_FS+0x1c>)
 801e570:	4805      	ldr	r0, [pc, #20]	; (801e588 <CDC_Init_FS+0x20>)
 801e572:	f7ed fb44 	bl	800bbfe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801e576:	4905      	ldr	r1, [pc, #20]	; (801e58c <CDC_Init_FS+0x24>)
 801e578:	4803      	ldr	r0, [pc, #12]	; (801e588 <CDC_Init_FS+0x20>)
 801e57a:	f7ed fb5e 	bl	800bc3a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801e57e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801e580:	4618      	mov	r0, r3
 801e582:	bd80      	pop	{r7, pc}
 801e584:	2000c3c8 	.word	0x2000c3c8
 801e588:	2000b8f8 	.word	0x2000b8f8
 801e58c:	2000bbc8 	.word	0x2000bbc8

0801e590 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801e590:	b480      	push	{r7}
 801e592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801e594:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801e596:	4618      	mov	r0, r3
 801e598:	46bd      	mov	sp, r7
 801e59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e59e:	4770      	bx	lr

0801e5a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801e5a0:	b480      	push	{r7}
 801e5a2:	b083      	sub	sp, #12
 801e5a4:	af00      	add	r7, sp, #0
 801e5a6:	4603      	mov	r3, r0
 801e5a8:	6039      	str	r1, [r7, #0]
 801e5aa:	71fb      	strb	r3, [r7, #7]
 801e5ac:	4613      	mov	r3, r2
 801e5ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801e5b0:	79fb      	ldrb	r3, [r7, #7]
 801e5b2:	2b23      	cmp	r3, #35	; 0x23
 801e5b4:	d84a      	bhi.n	801e64c <CDC_Control_FS+0xac>
 801e5b6:	a201      	add	r2, pc, #4	; (adr r2, 801e5bc <CDC_Control_FS+0x1c>)
 801e5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e5bc:	0801e64d 	.word	0x0801e64d
 801e5c0:	0801e64d 	.word	0x0801e64d
 801e5c4:	0801e64d 	.word	0x0801e64d
 801e5c8:	0801e64d 	.word	0x0801e64d
 801e5cc:	0801e64d 	.word	0x0801e64d
 801e5d0:	0801e64d 	.word	0x0801e64d
 801e5d4:	0801e64d 	.word	0x0801e64d
 801e5d8:	0801e64d 	.word	0x0801e64d
 801e5dc:	0801e64d 	.word	0x0801e64d
 801e5e0:	0801e64d 	.word	0x0801e64d
 801e5e4:	0801e64d 	.word	0x0801e64d
 801e5e8:	0801e64d 	.word	0x0801e64d
 801e5ec:	0801e64d 	.word	0x0801e64d
 801e5f0:	0801e64d 	.word	0x0801e64d
 801e5f4:	0801e64d 	.word	0x0801e64d
 801e5f8:	0801e64d 	.word	0x0801e64d
 801e5fc:	0801e64d 	.word	0x0801e64d
 801e600:	0801e64d 	.word	0x0801e64d
 801e604:	0801e64d 	.word	0x0801e64d
 801e608:	0801e64d 	.word	0x0801e64d
 801e60c:	0801e64d 	.word	0x0801e64d
 801e610:	0801e64d 	.word	0x0801e64d
 801e614:	0801e64d 	.word	0x0801e64d
 801e618:	0801e64d 	.word	0x0801e64d
 801e61c:	0801e64d 	.word	0x0801e64d
 801e620:	0801e64d 	.word	0x0801e64d
 801e624:	0801e64d 	.word	0x0801e64d
 801e628:	0801e64d 	.word	0x0801e64d
 801e62c:	0801e64d 	.word	0x0801e64d
 801e630:	0801e64d 	.word	0x0801e64d
 801e634:	0801e64d 	.word	0x0801e64d
 801e638:	0801e64d 	.word	0x0801e64d
 801e63c:	0801e64d 	.word	0x0801e64d
 801e640:	0801e64d 	.word	0x0801e64d
 801e644:	0801e64d 	.word	0x0801e64d
 801e648:	0801e64d 	.word	0x0801e64d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801e64c:	bf00      	nop
  }

  return (USBD_OK);
 801e64e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801e650:	4618      	mov	r0, r3
 801e652:	370c      	adds	r7, #12
 801e654:	46bd      	mov	sp, r7
 801e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e65a:	4770      	bx	lr

0801e65c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801e65c:	b580      	push	{r7, lr}
 801e65e:	b082      	sub	sp, #8
 801e660:	af00      	add	r7, sp, #0
 801e662:	6078      	str	r0, [r7, #4]
 801e664:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801e666:	6879      	ldr	r1, [r7, #4]
 801e668:	4805      	ldr	r0, [pc, #20]	; (801e680 <CDC_Receive_FS+0x24>)
 801e66a:	f7ed fae6 	bl	800bc3a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801e66e:	4804      	ldr	r0, [pc, #16]	; (801e680 <CDC_Receive_FS+0x24>)
 801e670:	f7ed fafc 	bl	800bc6c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801e674:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801e676:	4618      	mov	r0, r3
 801e678:	3708      	adds	r7, #8
 801e67a:	46bd      	mov	sp, r7
 801e67c:	bd80      	pop	{r7, pc}
 801e67e:	bf00      	nop
 801e680:	2000b8f8 	.word	0x2000b8f8

0801e684 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801e684:	b480      	push	{r7}
 801e686:	b087      	sub	sp, #28
 801e688:	af00      	add	r7, sp, #0
 801e68a:	60f8      	str	r0, [r7, #12]
 801e68c:	60b9      	str	r1, [r7, #8]
 801e68e:	4613      	mov	r3, r2
 801e690:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801e692:	2300      	movs	r3, #0
 801e694:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801e696:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801e69a:	4618      	mov	r0, r3
 801e69c:	371c      	adds	r7, #28
 801e69e:	46bd      	mov	sp, r7
 801e6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6a4:	4770      	bx	lr
	...

0801e6a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801e6a8:	b480      	push	{r7}
 801e6aa:	b083      	sub	sp, #12
 801e6ac:	af00      	add	r7, sp, #0
 801e6ae:	4603      	mov	r3, r0
 801e6b0:	6039      	str	r1, [r7, #0]
 801e6b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801e6b4:	683b      	ldr	r3, [r7, #0]
 801e6b6:	2212      	movs	r2, #18
 801e6b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801e6ba:	4b03      	ldr	r3, [pc, #12]	; (801e6c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 801e6bc:	4618      	mov	r0, r3
 801e6be:	370c      	adds	r7, #12
 801e6c0:	46bd      	mov	sp, r7
 801e6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6c6:	4770      	bx	lr
 801e6c8:	20000178 	.word	0x20000178

0801e6cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801e6cc:	b480      	push	{r7}
 801e6ce:	b083      	sub	sp, #12
 801e6d0:	af00      	add	r7, sp, #0
 801e6d2:	4603      	mov	r3, r0
 801e6d4:	6039      	str	r1, [r7, #0]
 801e6d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801e6d8:	683b      	ldr	r3, [r7, #0]
 801e6da:	2204      	movs	r2, #4
 801e6dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801e6de:	4b03      	ldr	r3, [pc, #12]	; (801e6ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801e6e0:	4618      	mov	r0, r3
 801e6e2:	370c      	adds	r7, #12
 801e6e4:	46bd      	mov	sp, r7
 801e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6ea:	4770      	bx	lr
 801e6ec:	2000018c 	.word	0x2000018c

0801e6f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801e6f0:	b580      	push	{r7, lr}
 801e6f2:	b082      	sub	sp, #8
 801e6f4:	af00      	add	r7, sp, #0
 801e6f6:	4603      	mov	r3, r0
 801e6f8:	6039      	str	r1, [r7, #0]
 801e6fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801e6fc:	79fb      	ldrb	r3, [r7, #7]
 801e6fe:	2b00      	cmp	r3, #0
 801e700:	d105      	bne.n	801e70e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801e702:	683a      	ldr	r2, [r7, #0]
 801e704:	4907      	ldr	r1, [pc, #28]	; (801e724 <USBD_FS_ProductStrDescriptor+0x34>)
 801e706:	4808      	ldr	r0, [pc, #32]	; (801e728 <USBD_FS_ProductStrDescriptor+0x38>)
 801e708:	f7ee fb63 	bl	800cdd2 <USBD_GetString>
 801e70c:	e004      	b.n	801e718 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801e70e:	683a      	ldr	r2, [r7, #0]
 801e710:	4904      	ldr	r1, [pc, #16]	; (801e724 <USBD_FS_ProductStrDescriptor+0x34>)
 801e712:	4805      	ldr	r0, [pc, #20]	; (801e728 <USBD_FS_ProductStrDescriptor+0x38>)
 801e714:	f7ee fb5d 	bl	800cdd2 <USBD_GetString>
  }
  return USBD_StrDesc;
 801e718:	4b02      	ldr	r3, [pc, #8]	; (801e724 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801e71a:	4618      	mov	r0, r3
 801e71c:	3708      	adds	r7, #8
 801e71e:	46bd      	mov	sp, r7
 801e720:	bd80      	pop	{r7, pc}
 801e722:	bf00      	nop
 801e724:	2000cbc8 	.word	0x2000cbc8
 801e728:	080265d8 	.word	0x080265d8

0801e72c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801e72c:	b580      	push	{r7, lr}
 801e72e:	b082      	sub	sp, #8
 801e730:	af00      	add	r7, sp, #0
 801e732:	4603      	mov	r3, r0
 801e734:	6039      	str	r1, [r7, #0]
 801e736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801e738:	683a      	ldr	r2, [r7, #0]
 801e73a:	4904      	ldr	r1, [pc, #16]	; (801e74c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801e73c:	4804      	ldr	r0, [pc, #16]	; (801e750 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801e73e:	f7ee fb48 	bl	800cdd2 <USBD_GetString>
  return USBD_StrDesc;
 801e742:	4b02      	ldr	r3, [pc, #8]	; (801e74c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801e744:	4618      	mov	r0, r3
 801e746:	3708      	adds	r7, #8
 801e748:	46bd      	mov	sp, r7
 801e74a:	bd80      	pop	{r7, pc}
 801e74c:	2000cbc8 	.word	0x2000cbc8
 801e750:	080265f0 	.word	0x080265f0

0801e754 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801e754:	b580      	push	{r7, lr}
 801e756:	b082      	sub	sp, #8
 801e758:	af00      	add	r7, sp, #0
 801e75a:	4603      	mov	r3, r0
 801e75c:	6039      	str	r1, [r7, #0]
 801e75e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801e760:	683b      	ldr	r3, [r7, #0]
 801e762:	221a      	movs	r2, #26
 801e764:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801e766:	f000 f843 	bl	801e7f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801e76a:	4b02      	ldr	r3, [pc, #8]	; (801e774 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801e76c:	4618      	mov	r0, r3
 801e76e:	3708      	adds	r7, #8
 801e770:	46bd      	mov	sp, r7
 801e772:	bd80      	pop	{r7, pc}
 801e774:	20000190 	.word	0x20000190

0801e778 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801e778:	b580      	push	{r7, lr}
 801e77a:	b082      	sub	sp, #8
 801e77c:	af00      	add	r7, sp, #0
 801e77e:	4603      	mov	r3, r0
 801e780:	6039      	str	r1, [r7, #0]
 801e782:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801e784:	79fb      	ldrb	r3, [r7, #7]
 801e786:	2b00      	cmp	r3, #0
 801e788:	d105      	bne.n	801e796 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801e78a:	683a      	ldr	r2, [r7, #0]
 801e78c:	4907      	ldr	r1, [pc, #28]	; (801e7ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801e78e:	4808      	ldr	r0, [pc, #32]	; (801e7b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801e790:	f7ee fb1f 	bl	800cdd2 <USBD_GetString>
 801e794:	e004      	b.n	801e7a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801e796:	683a      	ldr	r2, [r7, #0]
 801e798:	4904      	ldr	r1, [pc, #16]	; (801e7ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801e79a:	4805      	ldr	r0, [pc, #20]	; (801e7b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801e79c:	f7ee fb19 	bl	800cdd2 <USBD_GetString>
  }
  return USBD_StrDesc;
 801e7a0:	4b02      	ldr	r3, [pc, #8]	; (801e7ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801e7a2:	4618      	mov	r0, r3
 801e7a4:	3708      	adds	r7, #8
 801e7a6:	46bd      	mov	sp, r7
 801e7a8:	bd80      	pop	{r7, pc}
 801e7aa:	bf00      	nop
 801e7ac:	2000cbc8 	.word	0x2000cbc8
 801e7b0:	08026604 	.word	0x08026604

0801e7b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801e7b4:	b580      	push	{r7, lr}
 801e7b6:	b082      	sub	sp, #8
 801e7b8:	af00      	add	r7, sp, #0
 801e7ba:	4603      	mov	r3, r0
 801e7bc:	6039      	str	r1, [r7, #0]
 801e7be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801e7c0:	79fb      	ldrb	r3, [r7, #7]
 801e7c2:	2b00      	cmp	r3, #0
 801e7c4:	d105      	bne.n	801e7d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801e7c6:	683a      	ldr	r2, [r7, #0]
 801e7c8:	4907      	ldr	r1, [pc, #28]	; (801e7e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801e7ca:	4808      	ldr	r0, [pc, #32]	; (801e7ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 801e7cc:	f7ee fb01 	bl	800cdd2 <USBD_GetString>
 801e7d0:	e004      	b.n	801e7dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801e7d2:	683a      	ldr	r2, [r7, #0]
 801e7d4:	4904      	ldr	r1, [pc, #16]	; (801e7e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801e7d6:	4805      	ldr	r0, [pc, #20]	; (801e7ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 801e7d8:	f7ee fafb 	bl	800cdd2 <USBD_GetString>
  }
  return USBD_StrDesc;
 801e7dc:	4b02      	ldr	r3, [pc, #8]	; (801e7e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801e7de:	4618      	mov	r0, r3
 801e7e0:	3708      	adds	r7, #8
 801e7e2:	46bd      	mov	sp, r7
 801e7e4:	bd80      	pop	{r7, pc}
 801e7e6:	bf00      	nop
 801e7e8:	2000cbc8 	.word	0x2000cbc8
 801e7ec:	08026610 	.word	0x08026610

0801e7f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801e7f0:	b580      	push	{r7, lr}
 801e7f2:	b084      	sub	sp, #16
 801e7f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801e7f6:	4b0f      	ldr	r3, [pc, #60]	; (801e834 <Get_SerialNum+0x44>)
 801e7f8:	681b      	ldr	r3, [r3, #0]
 801e7fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801e7fc:	4b0e      	ldr	r3, [pc, #56]	; (801e838 <Get_SerialNum+0x48>)
 801e7fe:	681b      	ldr	r3, [r3, #0]
 801e800:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801e802:	4b0e      	ldr	r3, [pc, #56]	; (801e83c <Get_SerialNum+0x4c>)
 801e804:	681b      	ldr	r3, [r3, #0]
 801e806:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801e808:	68fa      	ldr	r2, [r7, #12]
 801e80a:	687b      	ldr	r3, [r7, #4]
 801e80c:	4413      	add	r3, r2
 801e80e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801e810:	68fb      	ldr	r3, [r7, #12]
 801e812:	2b00      	cmp	r3, #0
 801e814:	d009      	beq.n	801e82a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801e816:	2208      	movs	r2, #8
 801e818:	4909      	ldr	r1, [pc, #36]	; (801e840 <Get_SerialNum+0x50>)
 801e81a:	68f8      	ldr	r0, [r7, #12]
 801e81c:	f000 f814 	bl	801e848 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801e820:	2204      	movs	r2, #4
 801e822:	4908      	ldr	r1, [pc, #32]	; (801e844 <Get_SerialNum+0x54>)
 801e824:	68b8      	ldr	r0, [r7, #8]
 801e826:	f000 f80f 	bl	801e848 <IntToUnicode>
  }
}
 801e82a:	bf00      	nop
 801e82c:	3710      	adds	r7, #16
 801e82e:	46bd      	mov	sp, r7
 801e830:	bd80      	pop	{r7, pc}
 801e832:	bf00      	nop
 801e834:	1fff7a10 	.word	0x1fff7a10
 801e838:	1fff7a14 	.word	0x1fff7a14
 801e83c:	1fff7a18 	.word	0x1fff7a18
 801e840:	20000192 	.word	0x20000192
 801e844:	200001a2 	.word	0x200001a2

0801e848 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801e848:	b480      	push	{r7}
 801e84a:	b087      	sub	sp, #28
 801e84c:	af00      	add	r7, sp, #0
 801e84e:	60f8      	str	r0, [r7, #12]
 801e850:	60b9      	str	r1, [r7, #8]
 801e852:	4613      	mov	r3, r2
 801e854:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801e856:	2300      	movs	r3, #0
 801e858:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801e85a:	2300      	movs	r3, #0
 801e85c:	75fb      	strb	r3, [r7, #23]
 801e85e:	e027      	b.n	801e8b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801e860:	68fb      	ldr	r3, [r7, #12]
 801e862:	0f1b      	lsrs	r3, r3, #28
 801e864:	2b09      	cmp	r3, #9
 801e866:	d80b      	bhi.n	801e880 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801e868:	68fb      	ldr	r3, [r7, #12]
 801e86a:	0f1b      	lsrs	r3, r3, #28
 801e86c:	b2da      	uxtb	r2, r3
 801e86e:	7dfb      	ldrb	r3, [r7, #23]
 801e870:	005b      	lsls	r3, r3, #1
 801e872:	4619      	mov	r1, r3
 801e874:	68bb      	ldr	r3, [r7, #8]
 801e876:	440b      	add	r3, r1
 801e878:	3230      	adds	r2, #48	; 0x30
 801e87a:	b2d2      	uxtb	r2, r2
 801e87c:	701a      	strb	r2, [r3, #0]
 801e87e:	e00a      	b.n	801e896 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801e880:	68fb      	ldr	r3, [r7, #12]
 801e882:	0f1b      	lsrs	r3, r3, #28
 801e884:	b2da      	uxtb	r2, r3
 801e886:	7dfb      	ldrb	r3, [r7, #23]
 801e888:	005b      	lsls	r3, r3, #1
 801e88a:	4619      	mov	r1, r3
 801e88c:	68bb      	ldr	r3, [r7, #8]
 801e88e:	440b      	add	r3, r1
 801e890:	3237      	adds	r2, #55	; 0x37
 801e892:	b2d2      	uxtb	r2, r2
 801e894:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801e896:	68fb      	ldr	r3, [r7, #12]
 801e898:	011b      	lsls	r3, r3, #4
 801e89a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801e89c:	7dfb      	ldrb	r3, [r7, #23]
 801e89e:	005b      	lsls	r3, r3, #1
 801e8a0:	3301      	adds	r3, #1
 801e8a2:	68ba      	ldr	r2, [r7, #8]
 801e8a4:	4413      	add	r3, r2
 801e8a6:	2200      	movs	r2, #0
 801e8a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801e8aa:	7dfb      	ldrb	r3, [r7, #23]
 801e8ac:	3301      	adds	r3, #1
 801e8ae:	75fb      	strb	r3, [r7, #23]
 801e8b0:	7dfa      	ldrb	r2, [r7, #23]
 801e8b2:	79fb      	ldrb	r3, [r7, #7]
 801e8b4:	429a      	cmp	r2, r3
 801e8b6:	d3d3      	bcc.n	801e860 <IntToUnicode+0x18>
  }
}
 801e8b8:	bf00      	nop
 801e8ba:	bf00      	nop
 801e8bc:	371c      	adds	r7, #28
 801e8be:	46bd      	mov	sp, r7
 801e8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8c4:	4770      	bx	lr
	...

0801e8c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801e8c8:	b580      	push	{r7, lr}
 801e8ca:	b08a      	sub	sp, #40	; 0x28
 801e8cc:	af00      	add	r7, sp, #0
 801e8ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801e8d0:	f107 0314 	add.w	r3, r7, #20
 801e8d4:	2200      	movs	r2, #0
 801e8d6:	601a      	str	r2, [r3, #0]
 801e8d8:	605a      	str	r2, [r3, #4]
 801e8da:	609a      	str	r2, [r3, #8]
 801e8dc:	60da      	str	r2, [r3, #12]
 801e8de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801e8e0:	687b      	ldr	r3, [r7, #4]
 801e8e2:	681b      	ldr	r3, [r3, #0]
 801e8e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801e8e8:	d147      	bne.n	801e97a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801e8ea:	2300      	movs	r3, #0
 801e8ec:	613b      	str	r3, [r7, #16]
 801e8ee:	4b25      	ldr	r3, [pc, #148]	; (801e984 <HAL_PCD_MspInit+0xbc>)
 801e8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e8f2:	4a24      	ldr	r2, [pc, #144]	; (801e984 <HAL_PCD_MspInit+0xbc>)
 801e8f4:	f043 0301 	orr.w	r3, r3, #1
 801e8f8:	6313      	str	r3, [r2, #48]	; 0x30
 801e8fa:	4b22      	ldr	r3, [pc, #136]	; (801e984 <HAL_PCD_MspInit+0xbc>)
 801e8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e8fe:	f003 0301 	and.w	r3, r3, #1
 801e902:	613b      	str	r3, [r7, #16]
 801e904:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801e906:	f44f 7300 	mov.w	r3, #512	; 0x200
 801e90a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801e90c:	2300      	movs	r3, #0
 801e90e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e910:	2300      	movs	r3, #0
 801e912:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e914:	f107 0314 	add.w	r3, r7, #20
 801e918:	4619      	mov	r1, r3
 801e91a:	481b      	ldr	r0, [pc, #108]	; (801e988 <HAL_PCD_MspInit+0xc0>)
 801e91c:	f7e6 fddc 	bl	80054d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801e920:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801e924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e926:	2302      	movs	r3, #2
 801e928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e92a:	2300      	movs	r3, #0
 801e92c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801e92e:	2303      	movs	r3, #3
 801e930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801e932:	230a      	movs	r3, #10
 801e934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e936:	f107 0314 	add.w	r3, r7, #20
 801e93a:	4619      	mov	r1, r3
 801e93c:	4812      	ldr	r0, [pc, #72]	; (801e988 <HAL_PCD_MspInit+0xc0>)
 801e93e:	f7e6 fdcb 	bl	80054d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801e942:	4b10      	ldr	r3, [pc, #64]	; (801e984 <HAL_PCD_MspInit+0xbc>)
 801e944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e946:	4a0f      	ldr	r2, [pc, #60]	; (801e984 <HAL_PCD_MspInit+0xbc>)
 801e948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e94c:	6353      	str	r3, [r2, #52]	; 0x34
 801e94e:	2300      	movs	r3, #0
 801e950:	60fb      	str	r3, [r7, #12]
 801e952:	4b0c      	ldr	r3, [pc, #48]	; (801e984 <HAL_PCD_MspInit+0xbc>)
 801e954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e956:	4a0b      	ldr	r2, [pc, #44]	; (801e984 <HAL_PCD_MspInit+0xbc>)
 801e958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801e95c:	6453      	str	r3, [r2, #68]	; 0x44
 801e95e:	4b09      	ldr	r3, [pc, #36]	; (801e984 <HAL_PCD_MspInit+0xbc>)
 801e960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801e966:	60fb      	str	r3, [r7, #12]
 801e968:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801e96a:	2200      	movs	r2, #0
 801e96c:	2105      	movs	r1, #5
 801e96e:	2043      	movs	r0, #67	; 0x43
 801e970:	f7e5 fa0c 	bl	8003d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801e974:	2043      	movs	r0, #67	; 0x43
 801e976:	f7e5 fa25 	bl	8003dc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801e97a:	bf00      	nop
 801e97c:	3728      	adds	r7, #40	; 0x28
 801e97e:	46bd      	mov	sp, r7
 801e980:	bd80      	pop	{r7, pc}
 801e982:	bf00      	nop
 801e984:	40023800 	.word	0x40023800
 801e988:	40020000 	.word	0x40020000

0801e98c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e98c:	b580      	push	{r7, lr}
 801e98e:	b082      	sub	sp, #8
 801e990:	af00      	add	r7, sp, #0
 801e992:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801e994:	687b      	ldr	r3, [r7, #4]
 801e996:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801e99a:	687b      	ldr	r3, [r7, #4]
 801e99c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801e9a0:	4619      	mov	r1, r3
 801e9a2:	4610      	mov	r0, r2
 801e9a4:	f7ed fa2e 	bl	800be04 <USBD_LL_SetupStage>
}
 801e9a8:	bf00      	nop
 801e9aa:	3708      	adds	r7, #8
 801e9ac:	46bd      	mov	sp, r7
 801e9ae:	bd80      	pop	{r7, pc}

0801e9b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e9b0:	b580      	push	{r7, lr}
 801e9b2:	b082      	sub	sp, #8
 801e9b4:	af00      	add	r7, sp, #0
 801e9b6:	6078      	str	r0, [r7, #4]
 801e9b8:	460b      	mov	r3, r1
 801e9ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801e9bc:	687b      	ldr	r3, [r7, #4]
 801e9be:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801e9c2:	78fa      	ldrb	r2, [r7, #3]
 801e9c4:	6879      	ldr	r1, [r7, #4]
 801e9c6:	4613      	mov	r3, r2
 801e9c8:	00db      	lsls	r3, r3, #3
 801e9ca:	1a9b      	subs	r3, r3, r2
 801e9cc:	009b      	lsls	r3, r3, #2
 801e9ce:	440b      	add	r3, r1
 801e9d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801e9d4:	681a      	ldr	r2, [r3, #0]
 801e9d6:	78fb      	ldrb	r3, [r7, #3]
 801e9d8:	4619      	mov	r1, r3
 801e9da:	f7ed fa68 	bl	800beae <USBD_LL_DataOutStage>
}
 801e9de:	bf00      	nop
 801e9e0:	3708      	adds	r7, #8
 801e9e2:	46bd      	mov	sp, r7
 801e9e4:	bd80      	pop	{r7, pc}

0801e9e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e9e6:	b580      	push	{r7, lr}
 801e9e8:	b082      	sub	sp, #8
 801e9ea:	af00      	add	r7, sp, #0
 801e9ec:	6078      	str	r0, [r7, #4]
 801e9ee:	460b      	mov	r3, r1
 801e9f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801e9f2:	687b      	ldr	r3, [r7, #4]
 801e9f4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801e9f8:	78fa      	ldrb	r2, [r7, #3]
 801e9fa:	6879      	ldr	r1, [r7, #4]
 801e9fc:	4613      	mov	r3, r2
 801e9fe:	00db      	lsls	r3, r3, #3
 801ea00:	1a9b      	subs	r3, r3, r2
 801ea02:	009b      	lsls	r3, r3, #2
 801ea04:	440b      	add	r3, r1
 801ea06:	3348      	adds	r3, #72	; 0x48
 801ea08:	681a      	ldr	r2, [r3, #0]
 801ea0a:	78fb      	ldrb	r3, [r7, #3]
 801ea0c:	4619      	mov	r1, r3
 801ea0e:	f7ed fab1 	bl	800bf74 <USBD_LL_DataInStage>
}
 801ea12:	bf00      	nop
 801ea14:	3708      	adds	r7, #8
 801ea16:	46bd      	mov	sp, r7
 801ea18:	bd80      	pop	{r7, pc}

0801ea1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ea1a:	b580      	push	{r7, lr}
 801ea1c:	b082      	sub	sp, #8
 801ea1e:	af00      	add	r7, sp, #0
 801ea20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801ea22:	687b      	ldr	r3, [r7, #4]
 801ea24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801ea28:	4618      	mov	r0, r3
 801ea2a:	f7ed fbc5 	bl	800c1b8 <USBD_LL_SOF>
}
 801ea2e:	bf00      	nop
 801ea30:	3708      	adds	r7, #8
 801ea32:	46bd      	mov	sp, r7
 801ea34:	bd80      	pop	{r7, pc}

0801ea36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ea36:	b580      	push	{r7, lr}
 801ea38:	b084      	sub	sp, #16
 801ea3a:	af00      	add	r7, sp, #0
 801ea3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801ea3e:	2301      	movs	r3, #1
 801ea40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801ea42:	687b      	ldr	r3, [r7, #4]
 801ea44:	68db      	ldr	r3, [r3, #12]
 801ea46:	2b00      	cmp	r3, #0
 801ea48:	d102      	bne.n	801ea50 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801ea4a:	2300      	movs	r3, #0
 801ea4c:	73fb      	strb	r3, [r7, #15]
 801ea4e:	e008      	b.n	801ea62 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801ea50:	687b      	ldr	r3, [r7, #4]
 801ea52:	68db      	ldr	r3, [r3, #12]
 801ea54:	2b02      	cmp	r3, #2
 801ea56:	d102      	bne.n	801ea5e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801ea58:	2301      	movs	r3, #1
 801ea5a:	73fb      	strb	r3, [r7, #15]
 801ea5c:	e001      	b.n	801ea62 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801ea5e:	f7e3 fd2d 	bl	80024bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801ea62:	687b      	ldr	r3, [r7, #4]
 801ea64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801ea68:	7bfa      	ldrb	r2, [r7, #15]
 801ea6a:	4611      	mov	r1, r2
 801ea6c:	4618      	mov	r0, r3
 801ea6e:	f7ed fb65 	bl	800c13c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801ea72:	687b      	ldr	r3, [r7, #4]
 801ea74:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801ea78:	4618      	mov	r0, r3
 801ea7a:	f7ed fb11 	bl	800c0a0 <USBD_LL_Reset>
}
 801ea7e:	bf00      	nop
 801ea80:	3710      	adds	r7, #16
 801ea82:	46bd      	mov	sp, r7
 801ea84:	bd80      	pop	{r7, pc}
	...

0801ea88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ea88:	b580      	push	{r7, lr}
 801ea8a:	b082      	sub	sp, #8
 801ea8c:	af00      	add	r7, sp, #0
 801ea8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801ea90:	687b      	ldr	r3, [r7, #4]
 801ea92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801ea96:	4618      	mov	r0, r3
 801ea98:	f7ed fb60 	bl	800c15c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801ea9c:	687b      	ldr	r3, [r7, #4]
 801ea9e:	681b      	ldr	r3, [r3, #0]
 801eaa0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801eaa4:	681b      	ldr	r3, [r3, #0]
 801eaa6:	687a      	ldr	r2, [r7, #4]
 801eaa8:	6812      	ldr	r2, [r2, #0]
 801eaaa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801eaae:	f043 0301 	orr.w	r3, r3, #1
 801eab2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801eab4:	687b      	ldr	r3, [r7, #4]
 801eab6:	6a1b      	ldr	r3, [r3, #32]
 801eab8:	2b00      	cmp	r3, #0
 801eaba:	d005      	beq.n	801eac8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801eabc:	4b04      	ldr	r3, [pc, #16]	; (801ead0 <HAL_PCD_SuspendCallback+0x48>)
 801eabe:	691b      	ldr	r3, [r3, #16]
 801eac0:	4a03      	ldr	r2, [pc, #12]	; (801ead0 <HAL_PCD_SuspendCallback+0x48>)
 801eac2:	f043 0306 	orr.w	r3, r3, #6
 801eac6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801eac8:	bf00      	nop
 801eaca:	3708      	adds	r7, #8
 801eacc:	46bd      	mov	sp, r7
 801eace:	bd80      	pop	{r7, pc}
 801ead0:	e000ed00 	.word	0xe000ed00

0801ead4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ead4:	b580      	push	{r7, lr}
 801ead6:	b082      	sub	sp, #8
 801ead8:	af00      	add	r7, sp, #0
 801eada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801eadc:	687b      	ldr	r3, [r7, #4]
 801eade:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801eae2:	4618      	mov	r0, r3
 801eae4:	f7ed fb50 	bl	800c188 <USBD_LL_Resume>
}
 801eae8:	bf00      	nop
 801eaea:	3708      	adds	r7, #8
 801eaec:	46bd      	mov	sp, r7
 801eaee:	bd80      	pop	{r7, pc}

0801eaf0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801eaf0:	b580      	push	{r7, lr}
 801eaf2:	b082      	sub	sp, #8
 801eaf4:	af00      	add	r7, sp, #0
 801eaf6:	6078      	str	r0, [r7, #4]
 801eaf8:	460b      	mov	r3, r1
 801eafa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801eafc:	687b      	ldr	r3, [r7, #4]
 801eafe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801eb02:	78fa      	ldrb	r2, [r7, #3]
 801eb04:	4611      	mov	r1, r2
 801eb06:	4618      	mov	r0, r3
 801eb08:	f7ed fb9e 	bl	800c248 <USBD_LL_IsoOUTIncomplete>
}
 801eb0c:	bf00      	nop
 801eb0e:	3708      	adds	r7, #8
 801eb10:	46bd      	mov	sp, r7
 801eb12:	bd80      	pop	{r7, pc}

0801eb14 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801eb14:	b580      	push	{r7, lr}
 801eb16:	b082      	sub	sp, #8
 801eb18:	af00      	add	r7, sp, #0
 801eb1a:	6078      	str	r0, [r7, #4]
 801eb1c:	460b      	mov	r3, r1
 801eb1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801eb20:	687b      	ldr	r3, [r7, #4]
 801eb22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801eb26:	78fa      	ldrb	r2, [r7, #3]
 801eb28:	4611      	mov	r1, r2
 801eb2a:	4618      	mov	r0, r3
 801eb2c:	f7ed fb66 	bl	800c1fc <USBD_LL_IsoINIncomplete>
}
 801eb30:	bf00      	nop
 801eb32:	3708      	adds	r7, #8
 801eb34:	46bd      	mov	sp, r7
 801eb36:	bd80      	pop	{r7, pc}

0801eb38 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801eb38:	b580      	push	{r7, lr}
 801eb3a:	b082      	sub	sp, #8
 801eb3c:	af00      	add	r7, sp, #0
 801eb3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801eb46:	4618      	mov	r0, r3
 801eb48:	f7ed fba4 	bl	800c294 <USBD_LL_DevConnected>
}
 801eb4c:	bf00      	nop
 801eb4e:	3708      	adds	r7, #8
 801eb50:	46bd      	mov	sp, r7
 801eb52:	bd80      	pop	{r7, pc}

0801eb54 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801eb54:	b580      	push	{r7, lr}
 801eb56:	b082      	sub	sp, #8
 801eb58:	af00      	add	r7, sp, #0
 801eb5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801eb5c:	687b      	ldr	r3, [r7, #4]
 801eb5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801eb62:	4618      	mov	r0, r3
 801eb64:	f7ed fba1 	bl	800c2aa <USBD_LL_DevDisconnected>
}
 801eb68:	bf00      	nop
 801eb6a:	3708      	adds	r7, #8
 801eb6c:	46bd      	mov	sp, r7
 801eb6e:	bd80      	pop	{r7, pc}

0801eb70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801eb70:	b580      	push	{r7, lr}
 801eb72:	b082      	sub	sp, #8
 801eb74:	af00      	add	r7, sp, #0
 801eb76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801eb78:	687b      	ldr	r3, [r7, #4]
 801eb7a:	781b      	ldrb	r3, [r3, #0]
 801eb7c:	2b00      	cmp	r3, #0
 801eb7e:	d13c      	bne.n	801ebfa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801eb80:	4a20      	ldr	r2, [pc, #128]	; (801ec04 <USBD_LL_Init+0x94>)
 801eb82:	687b      	ldr	r3, [r7, #4]
 801eb84:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801eb88:	687b      	ldr	r3, [r7, #4]
 801eb8a:	4a1e      	ldr	r2, [pc, #120]	; (801ec04 <USBD_LL_Init+0x94>)
 801eb8c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801eb90:	4b1c      	ldr	r3, [pc, #112]	; (801ec04 <USBD_LL_Init+0x94>)
 801eb92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801eb96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801eb98:	4b1a      	ldr	r3, [pc, #104]	; (801ec04 <USBD_LL_Init+0x94>)
 801eb9a:	2204      	movs	r2, #4
 801eb9c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801eb9e:	4b19      	ldr	r3, [pc, #100]	; (801ec04 <USBD_LL_Init+0x94>)
 801eba0:	2202      	movs	r2, #2
 801eba2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801eba4:	4b17      	ldr	r3, [pc, #92]	; (801ec04 <USBD_LL_Init+0x94>)
 801eba6:	2200      	movs	r2, #0
 801eba8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801ebaa:	4b16      	ldr	r3, [pc, #88]	; (801ec04 <USBD_LL_Init+0x94>)
 801ebac:	2202      	movs	r2, #2
 801ebae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801ebb0:	4b14      	ldr	r3, [pc, #80]	; (801ec04 <USBD_LL_Init+0x94>)
 801ebb2:	2200      	movs	r2, #0
 801ebb4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801ebb6:	4b13      	ldr	r3, [pc, #76]	; (801ec04 <USBD_LL_Init+0x94>)
 801ebb8:	2200      	movs	r2, #0
 801ebba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801ebbc:	4b11      	ldr	r3, [pc, #68]	; (801ec04 <USBD_LL_Init+0x94>)
 801ebbe:	2200      	movs	r2, #0
 801ebc0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801ebc2:	4b10      	ldr	r3, [pc, #64]	; (801ec04 <USBD_LL_Init+0x94>)
 801ebc4:	2201      	movs	r2, #1
 801ebc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801ebc8:	4b0e      	ldr	r3, [pc, #56]	; (801ec04 <USBD_LL_Init+0x94>)
 801ebca:	2200      	movs	r2, #0
 801ebcc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801ebce:	480d      	ldr	r0, [pc, #52]	; (801ec04 <USBD_LL_Init+0x94>)
 801ebd0:	f7e6 fe50 	bl	8005874 <HAL_PCD_Init>
 801ebd4:	4603      	mov	r3, r0
 801ebd6:	2b00      	cmp	r3, #0
 801ebd8:	d001      	beq.n	801ebde <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801ebda:	f7e3 fc6f 	bl	80024bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801ebde:	2180      	movs	r1, #128	; 0x80
 801ebe0:	4808      	ldr	r0, [pc, #32]	; (801ec04 <USBD_LL_Init+0x94>)
 801ebe2:	f7e7 ffae 	bl	8006b42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801ebe6:	2240      	movs	r2, #64	; 0x40
 801ebe8:	2100      	movs	r1, #0
 801ebea:	4806      	ldr	r0, [pc, #24]	; (801ec04 <USBD_LL_Init+0x94>)
 801ebec:	f7e7 ff62 	bl	8006ab4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801ebf0:	2280      	movs	r2, #128	; 0x80
 801ebf2:	2101      	movs	r1, #1
 801ebf4:	4803      	ldr	r0, [pc, #12]	; (801ec04 <USBD_LL_Init+0x94>)
 801ebf6:	f7e7 ff5d 	bl	8006ab4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801ebfa:	2300      	movs	r3, #0
}
 801ebfc:	4618      	mov	r0, r3
 801ebfe:	3708      	adds	r7, #8
 801ec00:	46bd      	mov	sp, r7
 801ec02:	bd80      	pop	{r7, pc}
 801ec04:	2000cdc8 	.word	0x2000cdc8

0801ec08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801ec08:	b580      	push	{r7, lr}
 801ec0a:	b084      	sub	sp, #16
 801ec0c:	af00      	add	r7, sp, #0
 801ec0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ec10:	2300      	movs	r3, #0
 801ec12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ec14:	2300      	movs	r3, #0
 801ec16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801ec18:	687b      	ldr	r3, [r7, #4]
 801ec1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801ec1e:	4618      	mov	r0, r3
 801ec20:	f7e6 ff45 	bl	8005aae <HAL_PCD_Start>
 801ec24:	4603      	mov	r3, r0
 801ec26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ec28:	7bfb      	ldrb	r3, [r7, #15]
 801ec2a:	4618      	mov	r0, r3
 801ec2c:	f000 f942 	bl	801eeb4 <USBD_Get_USB_Status>
 801ec30:	4603      	mov	r3, r0
 801ec32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ec34:	7bbb      	ldrb	r3, [r7, #14]
}
 801ec36:	4618      	mov	r0, r3
 801ec38:	3710      	adds	r7, #16
 801ec3a:	46bd      	mov	sp, r7
 801ec3c:	bd80      	pop	{r7, pc}

0801ec3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801ec3e:	b580      	push	{r7, lr}
 801ec40:	b084      	sub	sp, #16
 801ec42:	af00      	add	r7, sp, #0
 801ec44:	6078      	str	r0, [r7, #4]
 801ec46:	4608      	mov	r0, r1
 801ec48:	4611      	mov	r1, r2
 801ec4a:	461a      	mov	r2, r3
 801ec4c:	4603      	mov	r3, r0
 801ec4e:	70fb      	strb	r3, [r7, #3]
 801ec50:	460b      	mov	r3, r1
 801ec52:	70bb      	strb	r3, [r7, #2]
 801ec54:	4613      	mov	r3, r2
 801ec56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ec58:	2300      	movs	r3, #0
 801ec5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ec5c:	2300      	movs	r3, #0
 801ec5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801ec60:	687b      	ldr	r3, [r7, #4]
 801ec62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801ec66:	78bb      	ldrb	r3, [r7, #2]
 801ec68:	883a      	ldrh	r2, [r7, #0]
 801ec6a:	78f9      	ldrb	r1, [r7, #3]
 801ec6c:	f7e7 fb29 	bl	80062c2 <HAL_PCD_EP_Open>
 801ec70:	4603      	mov	r3, r0
 801ec72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ec74:	7bfb      	ldrb	r3, [r7, #15]
 801ec76:	4618      	mov	r0, r3
 801ec78:	f000 f91c 	bl	801eeb4 <USBD_Get_USB_Status>
 801ec7c:	4603      	mov	r3, r0
 801ec7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ec80:	7bbb      	ldrb	r3, [r7, #14]
}
 801ec82:	4618      	mov	r0, r3
 801ec84:	3710      	adds	r7, #16
 801ec86:	46bd      	mov	sp, r7
 801ec88:	bd80      	pop	{r7, pc}

0801ec8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ec8a:	b580      	push	{r7, lr}
 801ec8c:	b084      	sub	sp, #16
 801ec8e:	af00      	add	r7, sp, #0
 801ec90:	6078      	str	r0, [r7, #4]
 801ec92:	460b      	mov	r3, r1
 801ec94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ec96:	2300      	movs	r3, #0
 801ec98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ec9a:	2300      	movs	r3, #0
 801ec9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801ec9e:	687b      	ldr	r3, [r7, #4]
 801eca0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801eca4:	78fa      	ldrb	r2, [r7, #3]
 801eca6:	4611      	mov	r1, r2
 801eca8:	4618      	mov	r0, r3
 801ecaa:	f7e7 fb72 	bl	8006392 <HAL_PCD_EP_Close>
 801ecae:	4603      	mov	r3, r0
 801ecb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ecb2:	7bfb      	ldrb	r3, [r7, #15]
 801ecb4:	4618      	mov	r0, r3
 801ecb6:	f000 f8fd 	bl	801eeb4 <USBD_Get_USB_Status>
 801ecba:	4603      	mov	r3, r0
 801ecbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ecbe:	7bbb      	ldrb	r3, [r7, #14]
}
 801ecc0:	4618      	mov	r0, r3
 801ecc2:	3710      	adds	r7, #16
 801ecc4:	46bd      	mov	sp, r7
 801ecc6:	bd80      	pop	{r7, pc}

0801ecc8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ecc8:	b580      	push	{r7, lr}
 801ecca:	b084      	sub	sp, #16
 801eccc:	af00      	add	r7, sp, #0
 801ecce:	6078      	str	r0, [r7, #4]
 801ecd0:	460b      	mov	r3, r1
 801ecd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ecd4:	2300      	movs	r3, #0
 801ecd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ecd8:	2300      	movs	r3, #0
 801ecda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801ecdc:	687b      	ldr	r3, [r7, #4]
 801ecde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801ece2:	78fa      	ldrb	r2, [r7, #3]
 801ece4:	4611      	mov	r1, r2
 801ece6:	4618      	mov	r0, r3
 801ece8:	f7e7 fc4a 	bl	8006580 <HAL_PCD_EP_SetStall>
 801ecec:	4603      	mov	r3, r0
 801ecee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ecf0:	7bfb      	ldrb	r3, [r7, #15]
 801ecf2:	4618      	mov	r0, r3
 801ecf4:	f000 f8de 	bl	801eeb4 <USBD_Get_USB_Status>
 801ecf8:	4603      	mov	r3, r0
 801ecfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ecfc:	7bbb      	ldrb	r3, [r7, #14]
}
 801ecfe:	4618      	mov	r0, r3
 801ed00:	3710      	adds	r7, #16
 801ed02:	46bd      	mov	sp, r7
 801ed04:	bd80      	pop	{r7, pc}

0801ed06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ed06:	b580      	push	{r7, lr}
 801ed08:	b084      	sub	sp, #16
 801ed0a:	af00      	add	r7, sp, #0
 801ed0c:	6078      	str	r0, [r7, #4]
 801ed0e:	460b      	mov	r3, r1
 801ed10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ed12:	2300      	movs	r3, #0
 801ed14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ed16:	2300      	movs	r3, #0
 801ed18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801ed1a:	687b      	ldr	r3, [r7, #4]
 801ed1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801ed20:	78fa      	ldrb	r2, [r7, #3]
 801ed22:	4611      	mov	r1, r2
 801ed24:	4618      	mov	r0, r3
 801ed26:	f7e7 fc8f 	bl	8006648 <HAL_PCD_EP_ClrStall>
 801ed2a:	4603      	mov	r3, r0
 801ed2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ed2e:	7bfb      	ldrb	r3, [r7, #15]
 801ed30:	4618      	mov	r0, r3
 801ed32:	f000 f8bf 	bl	801eeb4 <USBD_Get_USB_Status>
 801ed36:	4603      	mov	r3, r0
 801ed38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ed3a:	7bbb      	ldrb	r3, [r7, #14]
}
 801ed3c:	4618      	mov	r0, r3
 801ed3e:	3710      	adds	r7, #16
 801ed40:	46bd      	mov	sp, r7
 801ed42:	bd80      	pop	{r7, pc}

0801ed44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ed44:	b480      	push	{r7}
 801ed46:	b085      	sub	sp, #20
 801ed48:	af00      	add	r7, sp, #0
 801ed4a:	6078      	str	r0, [r7, #4]
 801ed4c:	460b      	mov	r3, r1
 801ed4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801ed50:	687b      	ldr	r3, [r7, #4]
 801ed52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801ed56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801ed58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ed5c:	2b00      	cmp	r3, #0
 801ed5e:	da0b      	bge.n	801ed78 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801ed60:	78fb      	ldrb	r3, [r7, #3]
 801ed62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ed66:	68f9      	ldr	r1, [r7, #12]
 801ed68:	4613      	mov	r3, r2
 801ed6a:	00db      	lsls	r3, r3, #3
 801ed6c:	1a9b      	subs	r3, r3, r2
 801ed6e:	009b      	lsls	r3, r3, #2
 801ed70:	440b      	add	r3, r1
 801ed72:	333e      	adds	r3, #62	; 0x3e
 801ed74:	781b      	ldrb	r3, [r3, #0]
 801ed76:	e00b      	b.n	801ed90 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801ed78:	78fb      	ldrb	r3, [r7, #3]
 801ed7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ed7e:	68f9      	ldr	r1, [r7, #12]
 801ed80:	4613      	mov	r3, r2
 801ed82:	00db      	lsls	r3, r3, #3
 801ed84:	1a9b      	subs	r3, r3, r2
 801ed86:	009b      	lsls	r3, r3, #2
 801ed88:	440b      	add	r3, r1
 801ed8a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801ed8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ed90:	4618      	mov	r0, r3
 801ed92:	3714      	adds	r7, #20
 801ed94:	46bd      	mov	sp, r7
 801ed96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed9a:	4770      	bx	lr

0801ed9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ed9c:	b580      	push	{r7, lr}
 801ed9e:	b084      	sub	sp, #16
 801eda0:	af00      	add	r7, sp, #0
 801eda2:	6078      	str	r0, [r7, #4]
 801eda4:	460b      	mov	r3, r1
 801eda6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801eda8:	2300      	movs	r3, #0
 801edaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801edac:	2300      	movs	r3, #0
 801edae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801edb0:	687b      	ldr	r3, [r7, #4]
 801edb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801edb6:	78fa      	ldrb	r2, [r7, #3]
 801edb8:	4611      	mov	r1, r2
 801edba:	4618      	mov	r0, r3
 801edbc:	f7e7 fa5c 	bl	8006278 <HAL_PCD_SetAddress>
 801edc0:	4603      	mov	r3, r0
 801edc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801edc4:	7bfb      	ldrb	r3, [r7, #15]
 801edc6:	4618      	mov	r0, r3
 801edc8:	f000 f874 	bl	801eeb4 <USBD_Get_USB_Status>
 801edcc:	4603      	mov	r3, r0
 801edce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801edd0:	7bbb      	ldrb	r3, [r7, #14]
}
 801edd2:	4618      	mov	r0, r3
 801edd4:	3710      	adds	r7, #16
 801edd6:	46bd      	mov	sp, r7
 801edd8:	bd80      	pop	{r7, pc}

0801edda <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801edda:	b580      	push	{r7, lr}
 801eddc:	b086      	sub	sp, #24
 801edde:	af00      	add	r7, sp, #0
 801ede0:	60f8      	str	r0, [r7, #12]
 801ede2:	607a      	str	r2, [r7, #4]
 801ede4:	603b      	str	r3, [r7, #0]
 801ede6:	460b      	mov	r3, r1
 801ede8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801edea:	2300      	movs	r3, #0
 801edec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801edee:	2300      	movs	r3, #0
 801edf0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801edf2:	68fb      	ldr	r3, [r7, #12]
 801edf4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801edf8:	7af9      	ldrb	r1, [r7, #11]
 801edfa:	683b      	ldr	r3, [r7, #0]
 801edfc:	687a      	ldr	r2, [r7, #4]
 801edfe:	f7e7 fb75 	bl	80064ec <HAL_PCD_EP_Transmit>
 801ee02:	4603      	mov	r3, r0
 801ee04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ee06:	7dfb      	ldrb	r3, [r7, #23]
 801ee08:	4618      	mov	r0, r3
 801ee0a:	f000 f853 	bl	801eeb4 <USBD_Get_USB_Status>
 801ee0e:	4603      	mov	r3, r0
 801ee10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ee12:	7dbb      	ldrb	r3, [r7, #22]
}
 801ee14:	4618      	mov	r0, r3
 801ee16:	3718      	adds	r7, #24
 801ee18:	46bd      	mov	sp, r7
 801ee1a:	bd80      	pop	{r7, pc}

0801ee1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ee1c:	b580      	push	{r7, lr}
 801ee1e:	b086      	sub	sp, #24
 801ee20:	af00      	add	r7, sp, #0
 801ee22:	60f8      	str	r0, [r7, #12]
 801ee24:	607a      	str	r2, [r7, #4]
 801ee26:	603b      	str	r3, [r7, #0]
 801ee28:	460b      	mov	r3, r1
 801ee2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ee2c:	2300      	movs	r3, #0
 801ee2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ee30:	2300      	movs	r3, #0
 801ee32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801ee34:	68fb      	ldr	r3, [r7, #12]
 801ee36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801ee3a:	7af9      	ldrb	r1, [r7, #11]
 801ee3c:	683b      	ldr	r3, [r7, #0]
 801ee3e:	687a      	ldr	r2, [r7, #4]
 801ee40:	f7e7 faf1 	bl	8006426 <HAL_PCD_EP_Receive>
 801ee44:	4603      	mov	r3, r0
 801ee46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ee48:	7dfb      	ldrb	r3, [r7, #23]
 801ee4a:	4618      	mov	r0, r3
 801ee4c:	f000 f832 	bl	801eeb4 <USBD_Get_USB_Status>
 801ee50:	4603      	mov	r3, r0
 801ee52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ee54:	7dbb      	ldrb	r3, [r7, #22]
}
 801ee56:	4618      	mov	r0, r3
 801ee58:	3718      	adds	r7, #24
 801ee5a:	46bd      	mov	sp, r7
 801ee5c:	bd80      	pop	{r7, pc}

0801ee5e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ee5e:	b580      	push	{r7, lr}
 801ee60:	b082      	sub	sp, #8
 801ee62:	af00      	add	r7, sp, #0
 801ee64:	6078      	str	r0, [r7, #4]
 801ee66:	460b      	mov	r3, r1
 801ee68:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801ee6a:	687b      	ldr	r3, [r7, #4]
 801ee6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801ee70:	78fa      	ldrb	r2, [r7, #3]
 801ee72:	4611      	mov	r1, r2
 801ee74:	4618      	mov	r0, r3
 801ee76:	f7e7 fb21 	bl	80064bc <HAL_PCD_EP_GetRxCount>
 801ee7a:	4603      	mov	r3, r0
}
 801ee7c:	4618      	mov	r0, r3
 801ee7e:	3708      	adds	r7, #8
 801ee80:	46bd      	mov	sp, r7
 801ee82:	bd80      	pop	{r7, pc}

0801ee84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801ee84:	b480      	push	{r7}
 801ee86:	b083      	sub	sp, #12
 801ee88:	af00      	add	r7, sp, #0
 801ee8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801ee8c:	4b03      	ldr	r3, [pc, #12]	; (801ee9c <USBD_static_malloc+0x18>)
}
 801ee8e:	4618      	mov	r0, r3
 801ee90:	370c      	adds	r7, #12
 801ee92:	46bd      	mov	sp, r7
 801ee94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee98:	4770      	bx	lr
 801ee9a:	bf00      	nop
 801ee9c:	200048b0 	.word	0x200048b0

0801eea0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801eea0:	b480      	push	{r7}
 801eea2:	b083      	sub	sp, #12
 801eea4:	af00      	add	r7, sp, #0
 801eea6:	6078      	str	r0, [r7, #4]

}
 801eea8:	bf00      	nop
 801eeaa:	370c      	adds	r7, #12
 801eeac:	46bd      	mov	sp, r7
 801eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eeb2:	4770      	bx	lr

0801eeb4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801eeb4:	b480      	push	{r7}
 801eeb6:	b085      	sub	sp, #20
 801eeb8:	af00      	add	r7, sp, #0
 801eeba:	4603      	mov	r3, r0
 801eebc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801eebe:	2300      	movs	r3, #0
 801eec0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801eec2:	79fb      	ldrb	r3, [r7, #7]
 801eec4:	2b03      	cmp	r3, #3
 801eec6:	d817      	bhi.n	801eef8 <USBD_Get_USB_Status+0x44>
 801eec8:	a201      	add	r2, pc, #4	; (adr r2, 801eed0 <USBD_Get_USB_Status+0x1c>)
 801eeca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eece:	bf00      	nop
 801eed0:	0801eee1 	.word	0x0801eee1
 801eed4:	0801eee7 	.word	0x0801eee7
 801eed8:	0801eeed 	.word	0x0801eeed
 801eedc:	0801eef3 	.word	0x0801eef3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801eee0:	2300      	movs	r3, #0
 801eee2:	73fb      	strb	r3, [r7, #15]
    break;
 801eee4:	e00b      	b.n	801eefe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801eee6:	2303      	movs	r3, #3
 801eee8:	73fb      	strb	r3, [r7, #15]
    break;
 801eeea:	e008      	b.n	801eefe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801eeec:	2301      	movs	r3, #1
 801eeee:	73fb      	strb	r3, [r7, #15]
    break;
 801eef0:	e005      	b.n	801eefe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801eef2:	2303      	movs	r3, #3
 801eef4:	73fb      	strb	r3, [r7, #15]
    break;
 801eef6:	e002      	b.n	801eefe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801eef8:	2303      	movs	r3, #3
 801eefa:	73fb      	strb	r3, [r7, #15]
    break;
 801eefc:	bf00      	nop
  }
  return usb_status;
 801eefe:	7bfb      	ldrb	r3, [r7, #15]
}
 801ef00:	4618      	mov	r0, r3
 801ef02:	3714      	adds	r7, #20
 801ef04:	46bd      	mov	sp, r7
 801ef06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef0a:	4770      	bx	lr

0801ef0c <atoi>:
 801ef0c:	220a      	movs	r2, #10
 801ef0e:	2100      	movs	r1, #0
 801ef10:	f000 bd3a 	b.w	801f988 <strtol>

0801ef14 <__libc_init_array>:
 801ef14:	b570      	push	{r4, r5, r6, lr}
 801ef16:	4d0d      	ldr	r5, [pc, #52]	; (801ef4c <__libc_init_array+0x38>)
 801ef18:	4c0d      	ldr	r4, [pc, #52]	; (801ef50 <__libc_init_array+0x3c>)
 801ef1a:	1b64      	subs	r4, r4, r5
 801ef1c:	10a4      	asrs	r4, r4, #2
 801ef1e:	2600      	movs	r6, #0
 801ef20:	42a6      	cmp	r6, r4
 801ef22:	d109      	bne.n	801ef38 <__libc_init_array+0x24>
 801ef24:	4d0b      	ldr	r5, [pc, #44]	; (801ef54 <__libc_init_array+0x40>)
 801ef26:	4c0c      	ldr	r4, [pc, #48]	; (801ef58 <__libc_init_array+0x44>)
 801ef28:	f003 fde8 	bl	8022afc <_init>
 801ef2c:	1b64      	subs	r4, r4, r5
 801ef2e:	10a4      	asrs	r4, r4, #2
 801ef30:	2600      	movs	r6, #0
 801ef32:	42a6      	cmp	r6, r4
 801ef34:	d105      	bne.n	801ef42 <__libc_init_array+0x2e>
 801ef36:	bd70      	pop	{r4, r5, r6, pc}
 801ef38:	f855 3b04 	ldr.w	r3, [r5], #4
 801ef3c:	4798      	blx	r3
 801ef3e:	3601      	adds	r6, #1
 801ef40:	e7ee      	b.n	801ef20 <__libc_init_array+0xc>
 801ef42:	f855 3b04 	ldr.w	r3, [r5], #4
 801ef46:	4798      	blx	r3
 801ef48:	3601      	adds	r6, #1
 801ef4a:	e7f2      	b.n	801ef32 <__libc_init_array+0x1e>
 801ef4c:	08027a00 	.word	0x08027a00
 801ef50:	08027a00 	.word	0x08027a00
 801ef54:	08027a00 	.word	0x08027a00
 801ef58:	08027a04 	.word	0x08027a04

0801ef5c <localtime_r>:
 801ef5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801ef60:	4607      	mov	r7, r0
 801ef62:	9101      	str	r1, [sp, #4]
 801ef64:	f001 f8d2 	bl	802010c <__gettzinfo>
 801ef68:	9901      	ldr	r1, [sp, #4]
 801ef6a:	4680      	mov	r8, r0
 801ef6c:	4638      	mov	r0, r7
 801ef6e:	f001 f8d1 	bl	8020114 <gmtime_r>
 801ef72:	6943      	ldr	r3, [r0, #20]
 801ef74:	079a      	lsls	r2, r3, #30
 801ef76:	4604      	mov	r4, r0
 801ef78:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801ef7c:	d105      	bne.n	801ef8a <localtime_r+0x2e>
 801ef7e:	2264      	movs	r2, #100	; 0x64
 801ef80:	fb96 f3f2 	sdiv	r3, r6, r2
 801ef84:	fb02 6313 	mls	r3, r2, r3, r6
 801ef88:	bb7b      	cbnz	r3, 801efea <localtime_r+0x8e>
 801ef8a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801ef8e:	fb96 f5f3 	sdiv	r5, r6, r3
 801ef92:	fb03 6515 	mls	r5, r3, r5, r6
 801ef96:	fab5 f585 	clz	r5, r5
 801ef9a:	096d      	lsrs	r5, r5, #5
 801ef9c:	4b68      	ldr	r3, [pc, #416]	; (801f140 <localtime_r+0x1e4>)
 801ef9e:	2230      	movs	r2, #48	; 0x30
 801efa0:	fb02 3505 	mla	r5, r2, r5, r3
 801efa4:	f000 fda2 	bl	801faec <__tz_lock>
 801efa8:	f000 fdac 	bl	801fb04 <_tzset_unlocked>
 801efac:	4b65      	ldr	r3, [pc, #404]	; (801f144 <localtime_r+0x1e8>)
 801efae:	681b      	ldr	r3, [r3, #0]
 801efb0:	b353      	cbz	r3, 801f008 <localtime_r+0xac>
 801efb2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801efb6:	42b3      	cmp	r3, r6
 801efb8:	d119      	bne.n	801efee <localtime_r+0x92>
 801efba:	f8d8 1000 	ldr.w	r1, [r8]
 801efbe:	e9d7 6700 	ldrd	r6, r7, [r7]
 801efc2:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801efc6:	b9d1      	cbnz	r1, 801effe <localtime_r+0xa2>
 801efc8:	4296      	cmp	r6, r2
 801efca:	eb77 0303 	sbcs.w	r3, r7, r3
 801efce:	da23      	bge.n	801f018 <localtime_r+0xbc>
 801efd0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801efd4:	4296      	cmp	r6, r2
 801efd6:	eb77 0303 	sbcs.w	r3, r7, r3
 801efda:	bfb4      	ite	lt
 801efdc:	2301      	movlt	r3, #1
 801efde:	2300      	movge	r3, #0
 801efe0:	6223      	str	r3, [r4, #32]
 801efe2:	db1b      	blt.n	801f01c <localtime_r+0xc0>
 801efe4:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801efe8:	e01a      	b.n	801f020 <localtime_r+0xc4>
 801efea:	2501      	movs	r5, #1
 801efec:	e7d6      	b.n	801ef9c <localtime_r+0x40>
 801efee:	4630      	mov	r0, r6
 801eff0:	f000 fcd4 	bl	801f99c <__tzcalc_limits>
 801eff4:	2800      	cmp	r0, #0
 801eff6:	d1e0      	bne.n	801efba <localtime_r+0x5e>
 801eff8:	f04f 33ff 	mov.w	r3, #4294967295
 801effc:	e004      	b.n	801f008 <localtime_r+0xac>
 801effe:	4296      	cmp	r6, r2
 801f000:	eb77 0303 	sbcs.w	r3, r7, r3
 801f004:	da02      	bge.n	801f00c <localtime_r+0xb0>
 801f006:	2300      	movs	r3, #0
 801f008:	6223      	str	r3, [r4, #32]
 801f00a:	e7eb      	b.n	801efe4 <localtime_r+0x88>
 801f00c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801f010:	4296      	cmp	r6, r2
 801f012:	eb77 0303 	sbcs.w	r3, r7, r3
 801f016:	daf6      	bge.n	801f006 <localtime_r+0xaa>
 801f018:	2301      	movs	r3, #1
 801f01a:	6223      	str	r3, [r4, #32]
 801f01c:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801f020:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801f024:	203c      	movs	r0, #60	; 0x3c
 801f026:	fb91 f6f3 	sdiv	r6, r1, r3
 801f02a:	fb03 1316 	mls	r3, r3, r6, r1
 801f02e:	6861      	ldr	r1, [r4, #4]
 801f030:	fb93 f2f0 	sdiv	r2, r3, r0
 801f034:	fb00 3012 	mls	r0, r0, r2, r3
 801f038:	6823      	ldr	r3, [r4, #0]
 801f03a:	1a89      	subs	r1, r1, r2
 801f03c:	68a2      	ldr	r2, [r4, #8]
 801f03e:	6061      	str	r1, [r4, #4]
 801f040:	1a1b      	subs	r3, r3, r0
 801f042:	1b92      	subs	r2, r2, r6
 801f044:	2b3b      	cmp	r3, #59	; 0x3b
 801f046:	6023      	str	r3, [r4, #0]
 801f048:	60a2      	str	r2, [r4, #8]
 801f04a:	dd35      	ble.n	801f0b8 <localtime_r+0x15c>
 801f04c:	3101      	adds	r1, #1
 801f04e:	6061      	str	r1, [r4, #4]
 801f050:	3b3c      	subs	r3, #60	; 0x3c
 801f052:	6023      	str	r3, [r4, #0]
 801f054:	6863      	ldr	r3, [r4, #4]
 801f056:	2b3b      	cmp	r3, #59	; 0x3b
 801f058:	dd34      	ble.n	801f0c4 <localtime_r+0x168>
 801f05a:	3201      	adds	r2, #1
 801f05c:	60a2      	str	r2, [r4, #8]
 801f05e:	3b3c      	subs	r3, #60	; 0x3c
 801f060:	6063      	str	r3, [r4, #4]
 801f062:	68a3      	ldr	r3, [r4, #8]
 801f064:	2b17      	cmp	r3, #23
 801f066:	dd33      	ble.n	801f0d0 <localtime_r+0x174>
 801f068:	69e2      	ldr	r2, [r4, #28]
 801f06a:	3201      	adds	r2, #1
 801f06c:	61e2      	str	r2, [r4, #28]
 801f06e:	69a2      	ldr	r2, [r4, #24]
 801f070:	3201      	adds	r2, #1
 801f072:	2a06      	cmp	r2, #6
 801f074:	bfc8      	it	gt
 801f076:	2200      	movgt	r2, #0
 801f078:	61a2      	str	r2, [r4, #24]
 801f07a:	68e2      	ldr	r2, [r4, #12]
 801f07c:	3b18      	subs	r3, #24
 801f07e:	3201      	adds	r2, #1
 801f080:	60a3      	str	r3, [r4, #8]
 801f082:	6923      	ldr	r3, [r4, #16]
 801f084:	60e2      	str	r2, [r4, #12]
 801f086:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801f08a:	428a      	cmp	r2, r1
 801f08c:	dd0e      	ble.n	801f0ac <localtime_r+0x150>
 801f08e:	2b0b      	cmp	r3, #11
 801f090:	eba2 0201 	sub.w	r2, r2, r1
 801f094:	60e2      	str	r2, [r4, #12]
 801f096:	f103 0201 	add.w	r2, r3, #1
 801f09a:	bf09      	itett	eq
 801f09c:	6963      	ldreq	r3, [r4, #20]
 801f09e:	6122      	strne	r2, [r4, #16]
 801f0a0:	2200      	moveq	r2, #0
 801f0a2:	3301      	addeq	r3, #1
 801f0a4:	bf02      	ittt	eq
 801f0a6:	6122      	streq	r2, [r4, #16]
 801f0a8:	6163      	streq	r3, [r4, #20]
 801f0aa:	61e2      	streq	r2, [r4, #28]
 801f0ac:	f000 fd24 	bl	801faf8 <__tz_unlock>
 801f0b0:	4620      	mov	r0, r4
 801f0b2:	b002      	add	sp, #8
 801f0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f0b8:	2b00      	cmp	r3, #0
 801f0ba:	dacb      	bge.n	801f054 <localtime_r+0xf8>
 801f0bc:	3901      	subs	r1, #1
 801f0be:	6061      	str	r1, [r4, #4]
 801f0c0:	333c      	adds	r3, #60	; 0x3c
 801f0c2:	e7c6      	b.n	801f052 <localtime_r+0xf6>
 801f0c4:	2b00      	cmp	r3, #0
 801f0c6:	dacc      	bge.n	801f062 <localtime_r+0x106>
 801f0c8:	3a01      	subs	r2, #1
 801f0ca:	60a2      	str	r2, [r4, #8]
 801f0cc:	333c      	adds	r3, #60	; 0x3c
 801f0ce:	e7c7      	b.n	801f060 <localtime_r+0x104>
 801f0d0:	2b00      	cmp	r3, #0
 801f0d2:	daeb      	bge.n	801f0ac <localtime_r+0x150>
 801f0d4:	69e2      	ldr	r2, [r4, #28]
 801f0d6:	3a01      	subs	r2, #1
 801f0d8:	61e2      	str	r2, [r4, #28]
 801f0da:	69a2      	ldr	r2, [r4, #24]
 801f0dc:	3a01      	subs	r2, #1
 801f0de:	bf48      	it	mi
 801f0e0:	2206      	movmi	r2, #6
 801f0e2:	61a2      	str	r2, [r4, #24]
 801f0e4:	68e2      	ldr	r2, [r4, #12]
 801f0e6:	3318      	adds	r3, #24
 801f0e8:	3a01      	subs	r2, #1
 801f0ea:	60e2      	str	r2, [r4, #12]
 801f0ec:	60a3      	str	r3, [r4, #8]
 801f0ee:	2a00      	cmp	r2, #0
 801f0f0:	d1dc      	bne.n	801f0ac <localtime_r+0x150>
 801f0f2:	6923      	ldr	r3, [r4, #16]
 801f0f4:	3b01      	subs	r3, #1
 801f0f6:	d405      	bmi.n	801f104 <localtime_r+0x1a8>
 801f0f8:	6123      	str	r3, [r4, #16]
 801f0fa:	6923      	ldr	r3, [r4, #16]
 801f0fc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801f100:	60e3      	str	r3, [r4, #12]
 801f102:	e7d3      	b.n	801f0ac <localtime_r+0x150>
 801f104:	230b      	movs	r3, #11
 801f106:	6123      	str	r3, [r4, #16]
 801f108:	6963      	ldr	r3, [r4, #20]
 801f10a:	1e5a      	subs	r2, r3, #1
 801f10c:	6162      	str	r2, [r4, #20]
 801f10e:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801f112:	0793      	lsls	r3, r2, #30
 801f114:	d105      	bne.n	801f122 <localtime_r+0x1c6>
 801f116:	2164      	movs	r1, #100	; 0x64
 801f118:	fb92 f3f1 	sdiv	r3, r2, r1
 801f11c:	fb01 2313 	mls	r3, r1, r3, r2
 801f120:	b963      	cbnz	r3, 801f13c <localtime_r+0x1e0>
 801f122:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801f126:	fb92 f3f1 	sdiv	r3, r2, r1
 801f12a:	fb01 2313 	mls	r3, r1, r3, r2
 801f12e:	fab3 f383 	clz	r3, r3
 801f132:	095b      	lsrs	r3, r3, #5
 801f134:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801f138:	61e3      	str	r3, [r4, #28]
 801f13a:	e7de      	b.n	801f0fa <localtime_r+0x19e>
 801f13c:	2301      	movs	r3, #1
 801f13e:	e7f9      	b.n	801f134 <localtime_r+0x1d8>
 801f140:	080277b4 	.word	0x080277b4
 801f144:	20004aec 	.word	0x20004aec

0801f148 <memcmp>:
 801f148:	b530      	push	{r4, r5, lr}
 801f14a:	3901      	subs	r1, #1
 801f14c:	2400      	movs	r4, #0
 801f14e:	42a2      	cmp	r2, r4
 801f150:	d101      	bne.n	801f156 <memcmp+0xe>
 801f152:	2000      	movs	r0, #0
 801f154:	e005      	b.n	801f162 <memcmp+0x1a>
 801f156:	5d03      	ldrb	r3, [r0, r4]
 801f158:	3401      	adds	r4, #1
 801f15a:	5d0d      	ldrb	r5, [r1, r4]
 801f15c:	42ab      	cmp	r3, r5
 801f15e:	d0f6      	beq.n	801f14e <memcmp+0x6>
 801f160:	1b58      	subs	r0, r3, r5
 801f162:	bd30      	pop	{r4, r5, pc}

0801f164 <memcpy>:
 801f164:	440a      	add	r2, r1
 801f166:	4291      	cmp	r1, r2
 801f168:	f100 33ff 	add.w	r3, r0, #4294967295
 801f16c:	d100      	bne.n	801f170 <memcpy+0xc>
 801f16e:	4770      	bx	lr
 801f170:	b510      	push	{r4, lr}
 801f172:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f176:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f17a:	4291      	cmp	r1, r2
 801f17c:	d1f9      	bne.n	801f172 <memcpy+0xe>
 801f17e:	bd10      	pop	{r4, pc}

0801f180 <memmove>:
 801f180:	4288      	cmp	r0, r1
 801f182:	b510      	push	{r4, lr}
 801f184:	eb01 0402 	add.w	r4, r1, r2
 801f188:	d902      	bls.n	801f190 <memmove+0x10>
 801f18a:	4284      	cmp	r4, r0
 801f18c:	4623      	mov	r3, r4
 801f18e:	d807      	bhi.n	801f1a0 <memmove+0x20>
 801f190:	1e43      	subs	r3, r0, #1
 801f192:	42a1      	cmp	r1, r4
 801f194:	d008      	beq.n	801f1a8 <memmove+0x28>
 801f196:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f19a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f19e:	e7f8      	b.n	801f192 <memmove+0x12>
 801f1a0:	4402      	add	r2, r0
 801f1a2:	4601      	mov	r1, r0
 801f1a4:	428a      	cmp	r2, r1
 801f1a6:	d100      	bne.n	801f1aa <memmove+0x2a>
 801f1a8:	bd10      	pop	{r4, pc}
 801f1aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f1ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f1b2:	e7f7      	b.n	801f1a4 <memmove+0x24>

0801f1b4 <memset>:
 801f1b4:	4402      	add	r2, r0
 801f1b6:	4603      	mov	r3, r0
 801f1b8:	4293      	cmp	r3, r2
 801f1ba:	d100      	bne.n	801f1be <memset+0xa>
 801f1bc:	4770      	bx	lr
 801f1be:	f803 1b01 	strb.w	r1, [r3], #1
 801f1c2:	e7f9      	b.n	801f1b8 <memset+0x4>

0801f1c4 <validate_structure>:
 801f1c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f1c6:	6801      	ldr	r1, [r0, #0]
 801f1c8:	293b      	cmp	r1, #59	; 0x3b
 801f1ca:	4604      	mov	r4, r0
 801f1cc:	d911      	bls.n	801f1f2 <validate_structure+0x2e>
 801f1ce:	223c      	movs	r2, #60	; 0x3c
 801f1d0:	4668      	mov	r0, sp
 801f1d2:	f000 fe37 	bl	801fe44 <div>
 801f1d6:	9a01      	ldr	r2, [sp, #4]
 801f1d8:	6863      	ldr	r3, [r4, #4]
 801f1da:	9900      	ldr	r1, [sp, #0]
 801f1dc:	2a00      	cmp	r2, #0
 801f1de:	440b      	add	r3, r1
 801f1e0:	6063      	str	r3, [r4, #4]
 801f1e2:	bfbb      	ittet	lt
 801f1e4:	323c      	addlt	r2, #60	; 0x3c
 801f1e6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801f1ea:	6022      	strge	r2, [r4, #0]
 801f1ec:	6022      	strlt	r2, [r4, #0]
 801f1ee:	bfb8      	it	lt
 801f1f0:	6063      	strlt	r3, [r4, #4]
 801f1f2:	6861      	ldr	r1, [r4, #4]
 801f1f4:	293b      	cmp	r1, #59	; 0x3b
 801f1f6:	d911      	bls.n	801f21c <validate_structure+0x58>
 801f1f8:	223c      	movs	r2, #60	; 0x3c
 801f1fa:	4668      	mov	r0, sp
 801f1fc:	f000 fe22 	bl	801fe44 <div>
 801f200:	9a01      	ldr	r2, [sp, #4]
 801f202:	68a3      	ldr	r3, [r4, #8]
 801f204:	9900      	ldr	r1, [sp, #0]
 801f206:	2a00      	cmp	r2, #0
 801f208:	440b      	add	r3, r1
 801f20a:	60a3      	str	r3, [r4, #8]
 801f20c:	bfbb      	ittet	lt
 801f20e:	323c      	addlt	r2, #60	; 0x3c
 801f210:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801f214:	6062      	strge	r2, [r4, #4]
 801f216:	6062      	strlt	r2, [r4, #4]
 801f218:	bfb8      	it	lt
 801f21a:	60a3      	strlt	r3, [r4, #8]
 801f21c:	68a1      	ldr	r1, [r4, #8]
 801f21e:	2917      	cmp	r1, #23
 801f220:	d911      	bls.n	801f246 <validate_structure+0x82>
 801f222:	2218      	movs	r2, #24
 801f224:	4668      	mov	r0, sp
 801f226:	f000 fe0d 	bl	801fe44 <div>
 801f22a:	9a01      	ldr	r2, [sp, #4]
 801f22c:	68e3      	ldr	r3, [r4, #12]
 801f22e:	9900      	ldr	r1, [sp, #0]
 801f230:	2a00      	cmp	r2, #0
 801f232:	440b      	add	r3, r1
 801f234:	60e3      	str	r3, [r4, #12]
 801f236:	bfbb      	ittet	lt
 801f238:	3218      	addlt	r2, #24
 801f23a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801f23e:	60a2      	strge	r2, [r4, #8]
 801f240:	60a2      	strlt	r2, [r4, #8]
 801f242:	bfb8      	it	lt
 801f244:	60e3      	strlt	r3, [r4, #12]
 801f246:	6921      	ldr	r1, [r4, #16]
 801f248:	290b      	cmp	r1, #11
 801f24a:	d911      	bls.n	801f270 <validate_structure+0xac>
 801f24c:	220c      	movs	r2, #12
 801f24e:	4668      	mov	r0, sp
 801f250:	f000 fdf8 	bl	801fe44 <div>
 801f254:	9a01      	ldr	r2, [sp, #4]
 801f256:	6963      	ldr	r3, [r4, #20]
 801f258:	9900      	ldr	r1, [sp, #0]
 801f25a:	2a00      	cmp	r2, #0
 801f25c:	440b      	add	r3, r1
 801f25e:	6163      	str	r3, [r4, #20]
 801f260:	bfbb      	ittet	lt
 801f262:	320c      	addlt	r2, #12
 801f264:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801f268:	6122      	strge	r2, [r4, #16]
 801f26a:	6122      	strlt	r2, [r4, #16]
 801f26c:	bfb8      	it	lt
 801f26e:	6163      	strlt	r3, [r4, #20]
 801f270:	6963      	ldr	r3, [r4, #20]
 801f272:	0799      	lsls	r1, r3, #30
 801f274:	d120      	bne.n	801f2b8 <validate_structure+0xf4>
 801f276:	2164      	movs	r1, #100	; 0x64
 801f278:	fb93 f2f1 	sdiv	r2, r3, r1
 801f27c:	fb01 3212 	mls	r2, r1, r2, r3
 801f280:	b9e2      	cbnz	r2, 801f2bc <validate_structure+0xf8>
 801f282:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801f286:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801f28a:	fb93 f2f1 	sdiv	r2, r3, r1
 801f28e:	fb01 3312 	mls	r3, r1, r2, r3
 801f292:	2b00      	cmp	r3, #0
 801f294:	bf14      	ite	ne
 801f296:	231c      	movne	r3, #28
 801f298:	231d      	moveq	r3, #29
 801f29a:	68e2      	ldr	r2, [r4, #12]
 801f29c:	2a00      	cmp	r2, #0
 801f29e:	dc0f      	bgt.n	801f2c0 <validate_structure+0xfc>
 801f2a0:	4f33      	ldr	r7, [pc, #204]	; (801f370 <validate_structure+0x1ac>)
 801f2a2:	260b      	movs	r6, #11
 801f2a4:	2064      	movs	r0, #100	; 0x64
 801f2a6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801f2aa:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801f2ae:	f1bc 0f00 	cmp.w	ip, #0
 801f2b2:	dd31      	ble.n	801f318 <validate_structure+0x154>
 801f2b4:	b003      	add	sp, #12
 801f2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f2b8:	231c      	movs	r3, #28
 801f2ba:	e7ee      	b.n	801f29a <validate_structure+0xd6>
 801f2bc:	231d      	movs	r3, #29
 801f2be:	e7ec      	b.n	801f29a <validate_structure+0xd6>
 801f2c0:	4f2b      	ldr	r7, [pc, #172]	; (801f370 <validate_structure+0x1ac>)
 801f2c2:	f04f 0c00 	mov.w	ip, #0
 801f2c6:	2564      	movs	r5, #100	; 0x64
 801f2c8:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801f2cc:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801f2d0:	2a01      	cmp	r2, #1
 801f2d2:	bf14      	ite	ne
 801f2d4:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 801f2d8:	4618      	moveq	r0, r3
 801f2da:	4281      	cmp	r1, r0
 801f2dc:	ddea      	ble.n	801f2b4 <validate_structure+0xf0>
 801f2de:	3201      	adds	r2, #1
 801f2e0:	1a09      	subs	r1, r1, r0
 801f2e2:	2a0c      	cmp	r2, #12
 801f2e4:	60e1      	str	r1, [r4, #12]
 801f2e6:	6122      	str	r2, [r4, #16]
 801f2e8:	d1f0      	bne.n	801f2cc <validate_structure+0x108>
 801f2ea:	6963      	ldr	r3, [r4, #20]
 801f2ec:	1c5a      	adds	r2, r3, #1
 801f2ee:	0791      	lsls	r1, r2, #30
 801f2f0:	e9c4 c204 	strd	ip, r2, [r4, #16]
 801f2f4:	d137      	bne.n	801f366 <validate_structure+0x1a2>
 801f2f6:	fb92 f1f5 	sdiv	r1, r2, r5
 801f2fa:	fb05 2211 	mls	r2, r5, r1, r2
 801f2fe:	2a00      	cmp	r2, #0
 801f300:	d133      	bne.n	801f36a <validate_structure+0x1a6>
 801f302:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801f306:	fb93 f2f6 	sdiv	r2, r3, r6
 801f30a:	fb06 3312 	mls	r3, r6, r2, r3
 801f30e:	2b00      	cmp	r3, #0
 801f310:	bf14      	ite	ne
 801f312:	231c      	movne	r3, #28
 801f314:	231d      	moveq	r3, #29
 801f316:	e7d9      	b.n	801f2cc <validate_structure+0x108>
 801f318:	6921      	ldr	r1, [r4, #16]
 801f31a:	3901      	subs	r1, #1
 801f31c:	6121      	str	r1, [r4, #16]
 801f31e:	3101      	adds	r1, #1
 801f320:	d114      	bne.n	801f34c <validate_structure+0x188>
 801f322:	6963      	ldr	r3, [r4, #20]
 801f324:	1e59      	subs	r1, r3, #1
 801f326:	078a      	lsls	r2, r1, #30
 801f328:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801f32c:	d117      	bne.n	801f35e <validate_structure+0x19a>
 801f32e:	fb91 f2f0 	sdiv	r2, r1, r0
 801f332:	fb00 1112 	mls	r1, r0, r2, r1
 801f336:	b9a1      	cbnz	r1, 801f362 <validate_structure+0x19e>
 801f338:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801f33c:	fb93 f2f5 	sdiv	r2, r3, r5
 801f340:	fb05 3312 	mls	r3, r5, r2, r3
 801f344:	2b00      	cmp	r3, #0
 801f346:	bf14      	ite	ne
 801f348:	231c      	movne	r3, #28
 801f34a:	231d      	moveq	r3, #29
 801f34c:	6922      	ldr	r2, [r4, #16]
 801f34e:	2a01      	cmp	r2, #1
 801f350:	bf14      	ite	ne
 801f352:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801f356:	461a      	moveq	r2, r3
 801f358:	4462      	add	r2, ip
 801f35a:	60e2      	str	r2, [r4, #12]
 801f35c:	e7a5      	b.n	801f2aa <validate_structure+0xe6>
 801f35e:	231c      	movs	r3, #28
 801f360:	e7f4      	b.n	801f34c <validate_structure+0x188>
 801f362:	231d      	movs	r3, #29
 801f364:	e7f2      	b.n	801f34c <validate_structure+0x188>
 801f366:	231c      	movs	r3, #28
 801f368:	e7b0      	b.n	801f2cc <validate_structure+0x108>
 801f36a:	231d      	movs	r3, #29
 801f36c:	e7ae      	b.n	801f2cc <validate_structure+0x108>
 801f36e:	bf00      	nop
 801f370:	08027754 	.word	0x08027754

0801f374 <mktime>:
 801f374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f378:	b08b      	sub	sp, #44	; 0x2c
 801f37a:	4605      	mov	r5, r0
 801f37c:	f000 fec6 	bl	802010c <__gettzinfo>
 801f380:	4607      	mov	r7, r0
 801f382:	4628      	mov	r0, r5
 801f384:	f7ff ff1e 	bl	801f1c4 <validate_structure>
 801f388:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f38c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 801f390:	68a8      	ldr	r0, [r5, #8]
 801f392:	696e      	ldr	r6, [r5, #20]
 801f394:	fb0a 2303 	mla	r3, sl, r3, r2
 801f398:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 801f39c:	fb0a 3a00 	mla	sl, sl, r0, r3
 801f3a0:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 801f3a4:	4ac3      	ldr	r2, [pc, #780]	; (801f6b4 <mktime+0x340>)
 801f3a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801f3aa:	3c01      	subs	r4, #1
 801f3ac:	2b01      	cmp	r3, #1
 801f3ae:	4414      	add	r4, r2
 801f3b0:	dd11      	ble.n	801f3d6 <mktime+0x62>
 801f3b2:	07b1      	lsls	r1, r6, #30
 801f3b4:	d10f      	bne.n	801f3d6 <mktime+0x62>
 801f3b6:	2264      	movs	r2, #100	; 0x64
 801f3b8:	fb96 f3f2 	sdiv	r3, r6, r2
 801f3bc:	fb02 6313 	mls	r3, r2, r3, r6
 801f3c0:	b943      	cbnz	r3, 801f3d4 <mktime+0x60>
 801f3c2:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801f3c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801f3ca:	fb91 f3f2 	sdiv	r3, r1, r2
 801f3ce:	fb02 1313 	mls	r3, r2, r3, r1
 801f3d2:	b903      	cbnz	r3, 801f3d6 <mktime+0x62>
 801f3d4:	3401      	adds	r4, #1
 801f3d6:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801f3da:	3310      	adds	r3, #16
 801f3dc:	f644 6220 	movw	r2, #20000	; 0x4e20
 801f3e0:	4293      	cmp	r3, r2
 801f3e2:	61ec      	str	r4, [r5, #28]
 801f3e4:	f200 8161 	bhi.w	801f6aa <mktime+0x336>
 801f3e8:	2e46      	cmp	r6, #70	; 0x46
 801f3ea:	dd77      	ble.n	801f4dc <mktime+0x168>
 801f3ec:	2346      	movs	r3, #70	; 0x46
 801f3ee:	f240 1e6d 	movw	lr, #365	; 0x16d
 801f3f2:	2164      	movs	r1, #100	; 0x64
 801f3f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801f3f8:	079a      	lsls	r2, r3, #30
 801f3fa:	d169      	bne.n	801f4d0 <mktime+0x15c>
 801f3fc:	fb93 f2f1 	sdiv	r2, r3, r1
 801f400:	fb01 3212 	mls	r2, r1, r2, r3
 801f404:	2a00      	cmp	r2, #0
 801f406:	d166      	bne.n	801f4d6 <mktime+0x162>
 801f408:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801f40c:	fb9c f2f0 	sdiv	r2, ip, r0
 801f410:	fb00 c212 	mls	r2, r0, r2, ip
 801f414:	2a00      	cmp	r2, #0
 801f416:	bf14      	ite	ne
 801f418:	4672      	movne	r2, lr
 801f41a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801f41e:	3301      	adds	r3, #1
 801f420:	429e      	cmp	r6, r3
 801f422:	4414      	add	r4, r2
 801f424:	d1e8      	bne.n	801f3f8 <mktime+0x84>
 801f426:	4ba4      	ldr	r3, [pc, #656]	; (801f6b8 <mktime+0x344>)
 801f428:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801f42c:	fbc3 ab04 	smlal	sl, fp, r3, r4
 801f430:	f000 fb5c 	bl	801faec <__tz_lock>
 801f434:	f000 fb66 	bl	801fb04 <_tzset_unlocked>
 801f438:	4ba0      	ldr	r3, [pc, #640]	; (801f6bc <mktime+0x348>)
 801f43a:	f8d3 9000 	ldr.w	r9, [r3]
 801f43e:	f1b9 0f00 	cmp.w	r9, #0
 801f442:	d03f      	beq.n	801f4c4 <mktime+0x150>
 801f444:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801f448:	6968      	ldr	r0, [r5, #20]
 801f44a:	687b      	ldr	r3, [r7, #4]
 801f44c:	f1b9 0f01 	cmp.w	r9, #1
 801f450:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801f454:	46c8      	mov	r8, r9
 801f456:	bfa8      	it	ge
 801f458:	f04f 0801 	movge.w	r8, #1
 801f45c:	4283      	cmp	r3, r0
 801f45e:	d17f      	bne.n	801f560 <mktime+0x1ec>
 801f460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f462:	4619      	mov	r1, r3
 801f464:	17da      	asrs	r2, r3, #31
 801f466:	e9cd 1200 	strd	r1, r2, [sp]
 801f46a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801f46e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801f472:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f478:	1a80      	subs	r0, r0, r2
 801f47a:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 801f47e:	4582      	cmp	sl, r0
 801f480:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801f484:	eb7b 0101 	sbcs.w	r1, fp, r1
 801f488:	da71      	bge.n	801f56e <mktime+0x1fa>
 801f48a:	9800      	ldr	r0, [sp, #0]
 801f48c:	6a39      	ldr	r1, [r7, #32]
 801f48e:	1a09      	subs	r1, r1, r0
 801f490:	9104      	str	r1, [sp, #16]
 801f492:	9801      	ldr	r0, [sp, #4]
 801f494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f496:	eb61 0100 	sbc.w	r1, r1, r0
 801f49a:	9105      	str	r1, [sp, #20]
 801f49c:	6839      	ldr	r1, [r7, #0]
 801f49e:	2900      	cmp	r1, #0
 801f4a0:	d075      	beq.n	801f58e <mktime+0x21a>
 801f4a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f4a6:	4582      	cmp	sl, r0
 801f4a8:	eb7b 0101 	sbcs.w	r1, fp, r1
 801f4ac:	db05      	blt.n	801f4ba <mktime+0x146>
 801f4ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f4b2:	4582      	cmp	sl, r0
 801f4b4:	eb7b 0101 	sbcs.w	r1, fp, r1
 801f4b8:	db6f      	blt.n	801f59a <mktime+0x226>
 801f4ba:	f1b9 0f00 	cmp.w	r9, #0
 801f4be:	f04f 0900 	mov.w	r9, #0
 801f4c2:	da6f      	bge.n	801f5a4 <mktime+0x230>
 801f4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4c6:	eb1a 0a03 	adds.w	sl, sl, r3
 801f4ca:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801f4ce:	e0ae      	b.n	801f62e <mktime+0x2ba>
 801f4d0:	f240 126d 	movw	r2, #365	; 0x16d
 801f4d4:	e7a3      	b.n	801f41e <mktime+0xaa>
 801f4d6:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801f4da:	e7a0      	b.n	801f41e <mktime+0xaa>
 801f4dc:	d0a3      	beq.n	801f426 <mktime+0xb2>
 801f4de:	2345      	movs	r3, #69	; 0x45
 801f4e0:	f240 1e6d 	movw	lr, #365	; 0x16d
 801f4e4:	2164      	movs	r1, #100	; 0x64
 801f4e6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801f4ea:	e012      	b.n	801f512 <mktime+0x19e>
 801f4ec:	bb62      	cbnz	r2, 801f548 <mktime+0x1d4>
 801f4ee:	fb93 f2f1 	sdiv	r2, r3, r1
 801f4f2:	fb01 3212 	mls	r2, r1, r2, r3
 801f4f6:	bb52      	cbnz	r2, 801f54e <mktime+0x1da>
 801f4f8:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801f4fc:	fb9c f2f0 	sdiv	r2, ip, r0
 801f500:	fb00 c212 	mls	r2, r0, r2, ip
 801f504:	2a00      	cmp	r2, #0
 801f506:	bf14      	ite	ne
 801f508:	4672      	movne	r2, lr
 801f50a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801f50e:	1aa4      	subs	r4, r4, r2
 801f510:	3b01      	subs	r3, #1
 801f512:	429e      	cmp	r6, r3
 801f514:	f003 0203 	and.w	r2, r3, #3
 801f518:	dbe8      	blt.n	801f4ec <mktime+0x178>
 801f51a:	b9da      	cbnz	r2, 801f554 <mktime+0x1e0>
 801f51c:	2264      	movs	r2, #100	; 0x64
 801f51e:	fb96 f3f2 	sdiv	r3, r6, r2
 801f522:	fb02 6313 	mls	r3, r2, r3, r6
 801f526:	b9c3      	cbnz	r3, 801f55a <mktime+0x1e6>
 801f528:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801f52c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801f530:	fb91 f3f2 	sdiv	r3, r1, r2
 801f534:	fb02 1313 	mls	r3, r2, r3, r1
 801f538:	2b00      	cmp	r3, #0
 801f53a:	f240 136d 	movw	r3, #365	; 0x16d
 801f53e:	bf08      	it	eq
 801f540:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801f544:	1ae4      	subs	r4, r4, r3
 801f546:	e76e      	b.n	801f426 <mktime+0xb2>
 801f548:	f240 126d 	movw	r2, #365	; 0x16d
 801f54c:	e7df      	b.n	801f50e <mktime+0x19a>
 801f54e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801f552:	e7dc      	b.n	801f50e <mktime+0x19a>
 801f554:	f240 136d 	movw	r3, #365	; 0x16d
 801f558:	e7f4      	b.n	801f544 <mktime+0x1d0>
 801f55a:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801f55e:	e7f1      	b.n	801f544 <mktime+0x1d0>
 801f560:	f000 fa1c 	bl	801f99c <__tzcalc_limits>
 801f564:	2800      	cmp	r0, #0
 801f566:	f47f af7b 	bne.w	801f460 <mktime+0xec>
 801f56a:	46c1      	mov	r9, r8
 801f56c:	e054      	b.n	801f618 <mktime+0x2a4>
 801f56e:	9800      	ldr	r0, [sp, #0]
 801f570:	9902      	ldr	r1, [sp, #8]
 801f572:	1a09      	subs	r1, r1, r0
 801f574:	9108      	str	r1, [sp, #32]
 801f576:	9801      	ldr	r0, [sp, #4]
 801f578:	9903      	ldr	r1, [sp, #12]
 801f57a:	eb61 0100 	sbc.w	r1, r1, r0
 801f57e:	9109      	str	r1, [sp, #36]	; 0x24
 801f580:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801f584:	4582      	cmp	sl, r0
 801f586:	eb7b 0101 	sbcs.w	r1, fp, r1
 801f58a:	dbee      	blt.n	801f56a <mktime+0x1f6>
 801f58c:	e77d      	b.n	801f48a <mktime+0x116>
 801f58e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f592:	4582      	cmp	sl, r0
 801f594:	eb7b 0101 	sbcs.w	r1, fp, r1
 801f598:	db89      	blt.n	801f4ae <mktime+0x13a>
 801f59a:	f1b9 0f00 	cmp.w	r9, #0
 801f59e:	db3f      	blt.n	801f620 <mktime+0x2ac>
 801f5a0:	f04f 0901 	mov.w	r9, #1
 801f5a4:	ea88 0809 	eor.w	r8, r8, r9
 801f5a8:	f1b8 0f01 	cmp.w	r8, #1
 801f5ac:	d134      	bne.n	801f618 <mktime+0x2a4>
 801f5ae:	f1b9 0f00 	cmp.w	r9, #0
 801f5b2:	d04f      	beq.n	801f654 <mktime+0x2e0>
 801f5b4:	1ad3      	subs	r3, r2, r3
 801f5b6:	682a      	ldr	r2, [r5, #0]
 801f5b8:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801f5bc:	441a      	add	r2, r3
 801f5be:	eb1a 0a03 	adds.w	sl, sl, r3
 801f5c2:	602a      	str	r2, [r5, #0]
 801f5c4:	4628      	mov	r0, r5
 801f5c6:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801f5ca:	f7ff fdfb 	bl	801f1c4 <validate_structure>
 801f5ce:	68ea      	ldr	r2, [r5, #12]
 801f5d0:	ebb2 0208 	subs.w	r2, r2, r8
 801f5d4:	d020      	beq.n	801f618 <mktime+0x2a4>
 801f5d6:	2a01      	cmp	r2, #1
 801f5d8:	dc3e      	bgt.n	801f658 <mktime+0x2e4>
 801f5da:	1c90      	adds	r0, r2, #2
 801f5dc:	bfd8      	it	le
 801f5de:	2201      	movle	r2, #1
 801f5e0:	69eb      	ldr	r3, [r5, #28]
 801f5e2:	18d3      	adds	r3, r2, r3
 801f5e4:	4414      	add	r4, r2
 801f5e6:	d540      	bpl.n	801f66a <mktime+0x2f6>
 801f5e8:	1e72      	subs	r2, r6, #1
 801f5ea:	0791      	lsls	r1, r2, #30
 801f5ec:	d137      	bne.n	801f65e <mktime+0x2ea>
 801f5ee:	2164      	movs	r1, #100	; 0x64
 801f5f0:	fb92 f3f1 	sdiv	r3, r2, r1
 801f5f4:	fb01 2313 	mls	r3, r1, r3, r2
 801f5f8:	bba3      	cbnz	r3, 801f664 <mktime+0x2f0>
 801f5fa:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801f5fe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801f602:	fb96 f3f2 	sdiv	r3, r6, r2
 801f606:	fb02 6613 	mls	r6, r2, r3, r6
 801f60a:	2e00      	cmp	r6, #0
 801f60c:	f240 136d 	movw	r3, #365	; 0x16d
 801f610:	bf18      	it	ne
 801f612:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801f616:	61eb      	str	r3, [r5, #28]
 801f618:	f1b9 0f01 	cmp.w	r9, #1
 801f61c:	f47f af52 	bne.w	801f4c4 <mktime+0x150>
 801f620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f622:	eb1a 0a03 	adds.w	sl, sl, r3
 801f626:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801f62a:	f04f 0901 	mov.w	r9, #1
 801f62e:	f000 fa63 	bl	801faf8 <__tz_unlock>
 801f632:	3404      	adds	r4, #4
 801f634:	2307      	movs	r3, #7
 801f636:	fb94 f3f3 	sdiv	r3, r4, r3
 801f63a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801f63e:	1ae4      	subs	r4, r4, r3
 801f640:	bf48      	it	mi
 801f642:	3407      	addmi	r4, #7
 801f644:	f8c5 9020 	str.w	r9, [r5, #32]
 801f648:	61ac      	str	r4, [r5, #24]
 801f64a:	4650      	mov	r0, sl
 801f64c:	4659      	mov	r1, fp
 801f64e:	b00b      	add	sp, #44	; 0x2c
 801f650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f654:	1a9b      	subs	r3, r3, r2
 801f656:	e7ae      	b.n	801f5b6 <mktime+0x242>
 801f658:	f04f 32ff 	mov.w	r2, #4294967295
 801f65c:	e7c0      	b.n	801f5e0 <mktime+0x26c>
 801f65e:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801f662:	e7d8      	b.n	801f616 <mktime+0x2a2>
 801f664:	f240 136d 	movw	r3, #365	; 0x16d
 801f668:	e7d5      	b.n	801f616 <mktime+0x2a2>
 801f66a:	07b2      	lsls	r2, r6, #30
 801f66c:	d117      	bne.n	801f69e <mktime+0x32a>
 801f66e:	2164      	movs	r1, #100	; 0x64
 801f670:	fb96 f2f1 	sdiv	r2, r6, r1
 801f674:	fb01 6212 	mls	r2, r1, r2, r6
 801f678:	b9a2      	cbnz	r2, 801f6a4 <mktime+0x330>
 801f67a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801f67e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801f682:	fb96 f2f1 	sdiv	r2, r6, r1
 801f686:	fb01 6612 	mls	r6, r1, r2, r6
 801f68a:	2e00      	cmp	r6, #0
 801f68c:	f240 126d 	movw	r2, #365	; 0x16d
 801f690:	bf08      	it	eq
 801f692:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801f696:	4293      	cmp	r3, r2
 801f698:	bfa8      	it	ge
 801f69a:	1a9b      	subge	r3, r3, r2
 801f69c:	e7bb      	b.n	801f616 <mktime+0x2a2>
 801f69e:	f240 126d 	movw	r2, #365	; 0x16d
 801f6a2:	e7f8      	b.n	801f696 <mktime+0x322>
 801f6a4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801f6a8:	e7f5      	b.n	801f696 <mktime+0x322>
 801f6aa:	f04f 3aff 	mov.w	sl, #4294967295
 801f6ae:	f04f 3bff 	mov.w	fp, #4294967295
 801f6b2:	e7ca      	b.n	801f64a <mktime+0x2d6>
 801f6b4:	08027784 	.word	0x08027784
 801f6b8:	00015180 	.word	0x00015180
 801f6bc:	20004aec 	.word	0x20004aec

0801f6c0 <iprintf>:
 801f6c0:	b40f      	push	{r0, r1, r2, r3}
 801f6c2:	4b0a      	ldr	r3, [pc, #40]	; (801f6ec <iprintf+0x2c>)
 801f6c4:	b513      	push	{r0, r1, r4, lr}
 801f6c6:	681c      	ldr	r4, [r3, #0]
 801f6c8:	b124      	cbz	r4, 801f6d4 <iprintf+0x14>
 801f6ca:	69a3      	ldr	r3, [r4, #24]
 801f6cc:	b913      	cbnz	r3, 801f6d4 <iprintf+0x14>
 801f6ce:	4620      	mov	r0, r4
 801f6d0:	f000 fc2a 	bl	801ff28 <__sinit>
 801f6d4:	ab05      	add	r3, sp, #20
 801f6d6:	9a04      	ldr	r2, [sp, #16]
 801f6d8:	68a1      	ldr	r1, [r4, #8]
 801f6da:	9301      	str	r3, [sp, #4]
 801f6dc:	4620      	mov	r0, r4
 801f6de:	f001 f80f 	bl	8020700 <_vfiprintf_r>
 801f6e2:	b002      	add	sp, #8
 801f6e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f6e8:	b004      	add	sp, #16
 801f6ea:	4770      	bx	lr
 801f6ec:	200001ac 	.word	0x200001ac

0801f6f0 <rand>:
 801f6f0:	4b17      	ldr	r3, [pc, #92]	; (801f750 <rand+0x60>)
 801f6f2:	b510      	push	{r4, lr}
 801f6f4:	681c      	ldr	r4, [r3, #0]
 801f6f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801f6f8:	b9b3      	cbnz	r3, 801f728 <rand+0x38>
 801f6fa:	2018      	movs	r0, #24
 801f6fc:	f000 fdc0 	bl	8020280 <malloc>
 801f700:	63a0      	str	r0, [r4, #56]	; 0x38
 801f702:	b928      	cbnz	r0, 801f710 <rand+0x20>
 801f704:	4602      	mov	r2, r0
 801f706:	4b13      	ldr	r3, [pc, #76]	; (801f754 <rand+0x64>)
 801f708:	4813      	ldr	r0, [pc, #76]	; (801f758 <rand+0x68>)
 801f70a:	214e      	movs	r1, #78	; 0x4e
 801f70c:	f000 fb7c 	bl	801fe08 <__assert_func>
 801f710:	4a12      	ldr	r2, [pc, #72]	; (801f75c <rand+0x6c>)
 801f712:	4b13      	ldr	r3, [pc, #76]	; (801f760 <rand+0x70>)
 801f714:	e9c0 2300 	strd	r2, r3, [r0]
 801f718:	4b12      	ldr	r3, [pc, #72]	; (801f764 <rand+0x74>)
 801f71a:	6083      	str	r3, [r0, #8]
 801f71c:	230b      	movs	r3, #11
 801f71e:	8183      	strh	r3, [r0, #12]
 801f720:	2201      	movs	r2, #1
 801f722:	2300      	movs	r3, #0
 801f724:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801f728:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f72a:	480f      	ldr	r0, [pc, #60]	; (801f768 <rand+0x78>)
 801f72c:	690a      	ldr	r2, [r1, #16]
 801f72e:	694b      	ldr	r3, [r1, #20]
 801f730:	4c0e      	ldr	r4, [pc, #56]	; (801f76c <rand+0x7c>)
 801f732:	4350      	muls	r0, r2
 801f734:	fb04 0003 	mla	r0, r4, r3, r0
 801f738:	fba2 3404 	umull	r3, r4, r2, r4
 801f73c:	1c5a      	adds	r2, r3, #1
 801f73e:	4404      	add	r4, r0
 801f740:	f144 0000 	adc.w	r0, r4, #0
 801f744:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801f748:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f74c:	bd10      	pop	{r4, pc}
 801f74e:	bf00      	nop
 801f750:	200001ac 	.word	0x200001ac
 801f754:	08027814 	.word	0x08027814
 801f758:	0802782b 	.word	0x0802782b
 801f75c:	abcd330e 	.word	0xabcd330e
 801f760:	e66d1234 	.word	0xe66d1234
 801f764:	0005deec 	.word	0x0005deec
 801f768:	5851f42d 	.word	0x5851f42d
 801f76c:	4c957f2d 	.word	0x4c957f2d

0801f770 <sniprintf>:
 801f770:	b40c      	push	{r2, r3}
 801f772:	b530      	push	{r4, r5, lr}
 801f774:	4b17      	ldr	r3, [pc, #92]	; (801f7d4 <sniprintf+0x64>)
 801f776:	1e0c      	subs	r4, r1, #0
 801f778:	681d      	ldr	r5, [r3, #0]
 801f77a:	b09d      	sub	sp, #116	; 0x74
 801f77c:	da08      	bge.n	801f790 <sniprintf+0x20>
 801f77e:	238b      	movs	r3, #139	; 0x8b
 801f780:	602b      	str	r3, [r5, #0]
 801f782:	f04f 30ff 	mov.w	r0, #4294967295
 801f786:	b01d      	add	sp, #116	; 0x74
 801f788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f78c:	b002      	add	sp, #8
 801f78e:	4770      	bx	lr
 801f790:	f44f 7302 	mov.w	r3, #520	; 0x208
 801f794:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f798:	bf14      	ite	ne
 801f79a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801f79e:	4623      	moveq	r3, r4
 801f7a0:	9304      	str	r3, [sp, #16]
 801f7a2:	9307      	str	r3, [sp, #28]
 801f7a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f7a8:	9002      	str	r0, [sp, #8]
 801f7aa:	9006      	str	r0, [sp, #24]
 801f7ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f7b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f7b2:	ab21      	add	r3, sp, #132	; 0x84
 801f7b4:	a902      	add	r1, sp, #8
 801f7b6:	4628      	mov	r0, r5
 801f7b8:	9301      	str	r3, [sp, #4]
 801f7ba:	f000 fe77 	bl	80204ac <_svfiprintf_r>
 801f7be:	1c43      	adds	r3, r0, #1
 801f7c0:	bfbc      	itt	lt
 801f7c2:	238b      	movlt	r3, #139	; 0x8b
 801f7c4:	602b      	strlt	r3, [r5, #0]
 801f7c6:	2c00      	cmp	r4, #0
 801f7c8:	d0dd      	beq.n	801f786 <sniprintf+0x16>
 801f7ca:	9b02      	ldr	r3, [sp, #8]
 801f7cc:	2200      	movs	r2, #0
 801f7ce:	701a      	strb	r2, [r3, #0]
 801f7d0:	e7d9      	b.n	801f786 <sniprintf+0x16>
 801f7d2:	bf00      	nop
 801f7d4:	200001ac 	.word	0x200001ac

0801f7d8 <siprintf>:
 801f7d8:	b40e      	push	{r1, r2, r3}
 801f7da:	b500      	push	{lr}
 801f7dc:	b09c      	sub	sp, #112	; 0x70
 801f7de:	ab1d      	add	r3, sp, #116	; 0x74
 801f7e0:	9002      	str	r0, [sp, #8]
 801f7e2:	9006      	str	r0, [sp, #24]
 801f7e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f7e8:	4809      	ldr	r0, [pc, #36]	; (801f810 <siprintf+0x38>)
 801f7ea:	9107      	str	r1, [sp, #28]
 801f7ec:	9104      	str	r1, [sp, #16]
 801f7ee:	4909      	ldr	r1, [pc, #36]	; (801f814 <siprintf+0x3c>)
 801f7f0:	f853 2b04 	ldr.w	r2, [r3], #4
 801f7f4:	9105      	str	r1, [sp, #20]
 801f7f6:	6800      	ldr	r0, [r0, #0]
 801f7f8:	9301      	str	r3, [sp, #4]
 801f7fa:	a902      	add	r1, sp, #8
 801f7fc:	f000 fe56 	bl	80204ac <_svfiprintf_r>
 801f800:	9b02      	ldr	r3, [sp, #8]
 801f802:	2200      	movs	r2, #0
 801f804:	701a      	strb	r2, [r3, #0]
 801f806:	b01c      	add	sp, #112	; 0x70
 801f808:	f85d eb04 	ldr.w	lr, [sp], #4
 801f80c:	b003      	add	sp, #12
 801f80e:	4770      	bx	lr
 801f810:	200001ac 	.word	0x200001ac
 801f814:	ffff0208 	.word	0xffff0208

0801f818 <strchr>:
 801f818:	b2c9      	uxtb	r1, r1
 801f81a:	4603      	mov	r3, r0
 801f81c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f820:	b11a      	cbz	r2, 801f82a <strchr+0x12>
 801f822:	428a      	cmp	r2, r1
 801f824:	d1f9      	bne.n	801f81a <strchr+0x2>
 801f826:	4618      	mov	r0, r3
 801f828:	4770      	bx	lr
 801f82a:	2900      	cmp	r1, #0
 801f82c:	bf18      	it	ne
 801f82e:	2300      	movne	r3, #0
 801f830:	e7f9      	b.n	801f826 <strchr+0xe>

0801f832 <strncmp>:
 801f832:	b510      	push	{r4, lr}
 801f834:	b16a      	cbz	r2, 801f852 <strncmp+0x20>
 801f836:	3901      	subs	r1, #1
 801f838:	1884      	adds	r4, r0, r2
 801f83a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f83e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801f842:	4293      	cmp	r3, r2
 801f844:	d103      	bne.n	801f84e <strncmp+0x1c>
 801f846:	42a0      	cmp	r0, r4
 801f848:	d001      	beq.n	801f84e <strncmp+0x1c>
 801f84a:	2b00      	cmp	r3, #0
 801f84c:	d1f5      	bne.n	801f83a <strncmp+0x8>
 801f84e:	1a98      	subs	r0, r3, r2
 801f850:	bd10      	pop	{r4, pc}
 801f852:	4610      	mov	r0, r2
 801f854:	e7fc      	b.n	801f850 <strncmp+0x1e>

0801f856 <strncpy>:
 801f856:	b510      	push	{r4, lr}
 801f858:	3901      	subs	r1, #1
 801f85a:	4603      	mov	r3, r0
 801f85c:	b132      	cbz	r2, 801f86c <strncpy+0x16>
 801f85e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801f862:	f803 4b01 	strb.w	r4, [r3], #1
 801f866:	3a01      	subs	r2, #1
 801f868:	2c00      	cmp	r4, #0
 801f86a:	d1f7      	bne.n	801f85c <strncpy+0x6>
 801f86c:	441a      	add	r2, r3
 801f86e:	2100      	movs	r1, #0
 801f870:	4293      	cmp	r3, r2
 801f872:	d100      	bne.n	801f876 <strncpy+0x20>
 801f874:	bd10      	pop	{r4, pc}
 801f876:	f803 1b01 	strb.w	r1, [r3], #1
 801f87a:	e7f9      	b.n	801f870 <strncpy+0x1a>

0801f87c <_strtol_l.isra.0>:
 801f87c:	2b01      	cmp	r3, #1
 801f87e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f882:	d001      	beq.n	801f888 <_strtol_l.isra.0+0xc>
 801f884:	2b24      	cmp	r3, #36	; 0x24
 801f886:	d906      	bls.n	801f896 <_strtol_l.isra.0+0x1a>
 801f888:	f000 faf0 	bl	801fe6c <__errno>
 801f88c:	2316      	movs	r3, #22
 801f88e:	6003      	str	r3, [r0, #0]
 801f890:	2000      	movs	r0, #0
 801f892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f896:	4f3a      	ldr	r7, [pc, #232]	; (801f980 <_strtol_l.isra.0+0x104>)
 801f898:	468e      	mov	lr, r1
 801f89a:	4676      	mov	r6, lr
 801f89c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801f8a0:	5de5      	ldrb	r5, [r4, r7]
 801f8a2:	f015 0508 	ands.w	r5, r5, #8
 801f8a6:	d1f8      	bne.n	801f89a <_strtol_l.isra.0+0x1e>
 801f8a8:	2c2d      	cmp	r4, #45	; 0x2d
 801f8aa:	d134      	bne.n	801f916 <_strtol_l.isra.0+0x9a>
 801f8ac:	f89e 4000 	ldrb.w	r4, [lr]
 801f8b0:	f04f 0801 	mov.w	r8, #1
 801f8b4:	f106 0e02 	add.w	lr, r6, #2
 801f8b8:	2b00      	cmp	r3, #0
 801f8ba:	d05c      	beq.n	801f976 <_strtol_l.isra.0+0xfa>
 801f8bc:	2b10      	cmp	r3, #16
 801f8be:	d10c      	bne.n	801f8da <_strtol_l.isra.0+0x5e>
 801f8c0:	2c30      	cmp	r4, #48	; 0x30
 801f8c2:	d10a      	bne.n	801f8da <_strtol_l.isra.0+0x5e>
 801f8c4:	f89e 4000 	ldrb.w	r4, [lr]
 801f8c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801f8cc:	2c58      	cmp	r4, #88	; 0x58
 801f8ce:	d14d      	bne.n	801f96c <_strtol_l.isra.0+0xf0>
 801f8d0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801f8d4:	2310      	movs	r3, #16
 801f8d6:	f10e 0e02 	add.w	lr, lr, #2
 801f8da:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801f8de:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f8e2:	2600      	movs	r6, #0
 801f8e4:	fbbc f9f3 	udiv	r9, ip, r3
 801f8e8:	4635      	mov	r5, r6
 801f8ea:	fb03 ca19 	mls	sl, r3, r9, ip
 801f8ee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801f8f2:	2f09      	cmp	r7, #9
 801f8f4:	d818      	bhi.n	801f928 <_strtol_l.isra.0+0xac>
 801f8f6:	463c      	mov	r4, r7
 801f8f8:	42a3      	cmp	r3, r4
 801f8fa:	dd24      	ble.n	801f946 <_strtol_l.isra.0+0xca>
 801f8fc:	2e00      	cmp	r6, #0
 801f8fe:	db1f      	blt.n	801f940 <_strtol_l.isra.0+0xc4>
 801f900:	45a9      	cmp	r9, r5
 801f902:	d31d      	bcc.n	801f940 <_strtol_l.isra.0+0xc4>
 801f904:	d101      	bne.n	801f90a <_strtol_l.isra.0+0x8e>
 801f906:	45a2      	cmp	sl, r4
 801f908:	db1a      	blt.n	801f940 <_strtol_l.isra.0+0xc4>
 801f90a:	fb05 4503 	mla	r5, r5, r3, r4
 801f90e:	2601      	movs	r6, #1
 801f910:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801f914:	e7eb      	b.n	801f8ee <_strtol_l.isra.0+0x72>
 801f916:	2c2b      	cmp	r4, #43	; 0x2b
 801f918:	bf08      	it	eq
 801f91a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801f91e:	46a8      	mov	r8, r5
 801f920:	bf08      	it	eq
 801f922:	f106 0e02 	addeq.w	lr, r6, #2
 801f926:	e7c7      	b.n	801f8b8 <_strtol_l.isra.0+0x3c>
 801f928:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801f92c:	2f19      	cmp	r7, #25
 801f92e:	d801      	bhi.n	801f934 <_strtol_l.isra.0+0xb8>
 801f930:	3c37      	subs	r4, #55	; 0x37
 801f932:	e7e1      	b.n	801f8f8 <_strtol_l.isra.0+0x7c>
 801f934:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801f938:	2f19      	cmp	r7, #25
 801f93a:	d804      	bhi.n	801f946 <_strtol_l.isra.0+0xca>
 801f93c:	3c57      	subs	r4, #87	; 0x57
 801f93e:	e7db      	b.n	801f8f8 <_strtol_l.isra.0+0x7c>
 801f940:	f04f 36ff 	mov.w	r6, #4294967295
 801f944:	e7e4      	b.n	801f910 <_strtol_l.isra.0+0x94>
 801f946:	2e00      	cmp	r6, #0
 801f948:	da05      	bge.n	801f956 <_strtol_l.isra.0+0xda>
 801f94a:	2322      	movs	r3, #34	; 0x22
 801f94c:	6003      	str	r3, [r0, #0]
 801f94e:	4665      	mov	r5, ip
 801f950:	b942      	cbnz	r2, 801f964 <_strtol_l.isra.0+0xe8>
 801f952:	4628      	mov	r0, r5
 801f954:	e79d      	b.n	801f892 <_strtol_l.isra.0+0x16>
 801f956:	f1b8 0f00 	cmp.w	r8, #0
 801f95a:	d000      	beq.n	801f95e <_strtol_l.isra.0+0xe2>
 801f95c:	426d      	negs	r5, r5
 801f95e:	2a00      	cmp	r2, #0
 801f960:	d0f7      	beq.n	801f952 <_strtol_l.isra.0+0xd6>
 801f962:	b10e      	cbz	r6, 801f968 <_strtol_l.isra.0+0xec>
 801f964:	f10e 31ff 	add.w	r1, lr, #4294967295
 801f968:	6011      	str	r1, [r2, #0]
 801f96a:	e7f2      	b.n	801f952 <_strtol_l.isra.0+0xd6>
 801f96c:	2430      	movs	r4, #48	; 0x30
 801f96e:	2b00      	cmp	r3, #0
 801f970:	d1b3      	bne.n	801f8da <_strtol_l.isra.0+0x5e>
 801f972:	2308      	movs	r3, #8
 801f974:	e7b1      	b.n	801f8da <_strtol_l.isra.0+0x5e>
 801f976:	2c30      	cmp	r4, #48	; 0x30
 801f978:	d0a4      	beq.n	801f8c4 <_strtol_l.isra.0+0x48>
 801f97a:	230a      	movs	r3, #10
 801f97c:	e7ad      	b.n	801f8da <_strtol_l.isra.0+0x5e>
 801f97e:	bf00      	nop
 801f980:	0802764d 	.word	0x0802764d

0801f984 <_strtol_r>:
 801f984:	f7ff bf7a 	b.w	801f87c <_strtol_l.isra.0>

0801f988 <strtol>:
 801f988:	4613      	mov	r3, r2
 801f98a:	460a      	mov	r2, r1
 801f98c:	4601      	mov	r1, r0
 801f98e:	4802      	ldr	r0, [pc, #8]	; (801f998 <strtol+0x10>)
 801f990:	6800      	ldr	r0, [r0, #0]
 801f992:	f7ff bf73 	b.w	801f87c <_strtol_l.isra.0>
 801f996:	bf00      	nop
 801f998:	200001ac 	.word	0x200001ac

0801f99c <__tzcalc_limits>:
 801f99c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9a0:	4680      	mov	r8, r0
 801f9a2:	f000 fbb3 	bl	802010c <__gettzinfo>
 801f9a6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801f9aa:	4598      	cmp	r8, r3
 801f9ac:	f340 8098 	ble.w	801fae0 <__tzcalc_limits+0x144>
 801f9b0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801f9b4:	4443      	add	r3, r8
 801f9b6:	109b      	asrs	r3, r3, #2
 801f9b8:	f240 126d 	movw	r2, #365	; 0x16d
 801f9bc:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801f9c0:	fb02 3505 	mla	r5, r2, r5, r3
 801f9c4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801f9c8:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801f9cc:	fb93 f3f2 	sdiv	r3, r3, r2
 801f9d0:	441d      	add	r5, r3
 801f9d2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f9d6:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801f9da:	fb98 f7f3 	sdiv	r7, r8, r3
 801f9de:	fb03 8717 	mls	r7, r3, r7, r8
 801f9e2:	4442      	add	r2, r8
 801f9e4:	fab7 fc87 	clz	ip, r7
 801f9e8:	fbb2 f2f3 	udiv	r2, r2, r3
 801f9ec:	f008 0303 	and.w	r3, r8, #3
 801f9f0:	4415      	add	r5, r2
 801f9f2:	2264      	movs	r2, #100	; 0x64
 801f9f4:	f8c0 8004 	str.w	r8, [r0, #4]
 801f9f8:	fb98 f6f2 	sdiv	r6, r8, r2
 801f9fc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801fa00:	fb02 8616 	mls	r6, r2, r6, r8
 801fa04:	4604      	mov	r4, r0
 801fa06:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801fa0a:	9300      	str	r3, [sp, #0]
 801fa0c:	f04f 0e07 	mov.w	lr, #7
 801fa10:	7a22      	ldrb	r2, [r4, #8]
 801fa12:	6963      	ldr	r3, [r4, #20]
 801fa14:	2a4a      	cmp	r2, #74	; 0x4a
 801fa16:	d128      	bne.n	801fa6a <__tzcalc_limits+0xce>
 801fa18:	9900      	ldr	r1, [sp, #0]
 801fa1a:	18ea      	adds	r2, r5, r3
 801fa1c:	b901      	cbnz	r1, 801fa20 <__tzcalc_limits+0x84>
 801fa1e:	b906      	cbnz	r6, 801fa22 <__tzcalc_limits+0x86>
 801fa20:	bb0f      	cbnz	r7, 801fa66 <__tzcalc_limits+0xca>
 801fa22:	2b3b      	cmp	r3, #59	; 0x3b
 801fa24:	bfd4      	ite	le
 801fa26:	2300      	movle	r3, #0
 801fa28:	2301      	movgt	r3, #1
 801fa2a:	4413      	add	r3, r2
 801fa2c:	1e5a      	subs	r2, r3, #1
 801fa2e:	69a3      	ldr	r3, [r4, #24]
 801fa30:	492c      	ldr	r1, [pc, #176]	; (801fae4 <__tzcalc_limits+0x148>)
 801fa32:	fb01 3202 	mla	r2, r1, r2, r3
 801fa36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801fa38:	4413      	add	r3, r2
 801fa3a:	461a      	mov	r2, r3
 801fa3c:	17db      	asrs	r3, r3, #31
 801fa3e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801fa42:	3428      	adds	r4, #40	; 0x28
 801fa44:	45a3      	cmp	fp, r4
 801fa46:	d1e3      	bne.n	801fa10 <__tzcalc_limits+0x74>
 801fa48:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801fa4c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801fa50:	4294      	cmp	r4, r2
 801fa52:	eb75 0303 	sbcs.w	r3, r5, r3
 801fa56:	bfb4      	ite	lt
 801fa58:	2301      	movlt	r3, #1
 801fa5a:	2300      	movge	r3, #0
 801fa5c:	6003      	str	r3, [r0, #0]
 801fa5e:	2001      	movs	r0, #1
 801fa60:	b003      	add	sp, #12
 801fa62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa66:	2300      	movs	r3, #0
 801fa68:	e7df      	b.n	801fa2a <__tzcalc_limits+0x8e>
 801fa6a:	2a44      	cmp	r2, #68	; 0x44
 801fa6c:	d101      	bne.n	801fa72 <__tzcalc_limits+0xd6>
 801fa6e:	18ea      	adds	r2, r5, r3
 801fa70:	e7dd      	b.n	801fa2e <__tzcalc_limits+0x92>
 801fa72:	9a00      	ldr	r2, [sp, #0]
 801fa74:	bb72      	cbnz	r2, 801fad4 <__tzcalc_limits+0x138>
 801fa76:	2e00      	cmp	r6, #0
 801fa78:	bf0c      	ite	eq
 801fa7a:	46e0      	moveq	r8, ip
 801fa7c:	f04f 0801 	movne.w	r8, #1
 801fa80:	4919      	ldr	r1, [pc, #100]	; (801fae8 <__tzcalc_limits+0x14c>)
 801fa82:	68e2      	ldr	r2, [r4, #12]
 801fa84:	9201      	str	r2, [sp, #4]
 801fa86:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801fa8a:	fb0a 1808 	mla	r8, sl, r8, r1
 801fa8e:	462a      	mov	r2, r5
 801fa90:	f04f 0900 	mov.w	r9, #0
 801fa94:	f1a8 0804 	sub.w	r8, r8, #4
 801fa98:	9901      	ldr	r1, [sp, #4]
 801fa9a:	f109 0901 	add.w	r9, r9, #1
 801fa9e:	4549      	cmp	r1, r9
 801faa0:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801faa4:	dc18      	bgt.n	801fad8 <__tzcalc_limits+0x13c>
 801faa6:	f102 0804 	add.w	r8, r2, #4
 801faaa:	fb98 f9fe 	sdiv	r9, r8, lr
 801faae:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801fab2:	eba8 0909 	sub.w	r9, r8, r9
 801fab6:	ebb3 0909 	subs.w	r9, r3, r9
 801faba:	6923      	ldr	r3, [r4, #16]
 801fabc:	f103 33ff 	add.w	r3, r3, #4294967295
 801fac0:	bf48      	it	mi
 801fac2:	f109 0907 	addmi.w	r9, r9, #7
 801fac6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801faca:	444b      	add	r3, r9
 801facc:	4553      	cmp	r3, sl
 801face:	da05      	bge.n	801fadc <__tzcalc_limits+0x140>
 801fad0:	441a      	add	r2, r3
 801fad2:	e7ac      	b.n	801fa2e <__tzcalc_limits+0x92>
 801fad4:	46e0      	mov	r8, ip
 801fad6:	e7d3      	b.n	801fa80 <__tzcalc_limits+0xe4>
 801fad8:	4452      	add	r2, sl
 801fada:	e7dd      	b.n	801fa98 <__tzcalc_limits+0xfc>
 801fadc:	3b07      	subs	r3, #7
 801fade:	e7f5      	b.n	801facc <__tzcalc_limits+0x130>
 801fae0:	2000      	movs	r0, #0
 801fae2:	e7bd      	b.n	801fa60 <__tzcalc_limits+0xc4>
 801fae4:	00015180 	.word	0x00015180
 801fae8:	080277b4 	.word	0x080277b4

0801faec <__tz_lock>:
 801faec:	4801      	ldr	r0, [pc, #4]	; (801faf4 <__tz_lock+0x8>)
 801faee:	f000 bbc2 	b.w	8020276 <__retarget_lock_acquire>
 801faf2:	bf00      	nop
 801faf4:	2000d1d7 	.word	0x2000d1d7

0801faf8 <__tz_unlock>:
 801faf8:	4801      	ldr	r0, [pc, #4]	; (801fb00 <__tz_unlock+0x8>)
 801fafa:	f000 bbbe 	b.w	802027a <__retarget_lock_release>
 801fafe:	bf00      	nop
 801fb00:	2000d1d7 	.word	0x2000d1d7

0801fb04 <_tzset_unlocked>:
 801fb04:	4b01      	ldr	r3, [pc, #4]	; (801fb0c <_tzset_unlocked+0x8>)
 801fb06:	6818      	ldr	r0, [r3, #0]
 801fb08:	f000 b802 	b.w	801fb10 <_tzset_unlocked_r>
 801fb0c:	200001ac 	.word	0x200001ac

0801fb10 <_tzset_unlocked_r>:
 801fb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb14:	b08d      	sub	sp, #52	; 0x34
 801fb16:	4607      	mov	r7, r0
 801fb18:	f000 faf8 	bl	802010c <__gettzinfo>
 801fb1c:	49ae      	ldr	r1, [pc, #696]	; (801fdd8 <_tzset_unlocked_r+0x2c8>)
 801fb1e:	4eaf      	ldr	r6, [pc, #700]	; (801fddc <_tzset_unlocked_r+0x2cc>)
 801fb20:	4605      	mov	r5, r0
 801fb22:	4638      	mov	r0, r7
 801fb24:	f000 faea 	bl	80200fc <_getenv_r>
 801fb28:	4604      	mov	r4, r0
 801fb2a:	b970      	cbnz	r0, 801fb4a <_tzset_unlocked_r+0x3a>
 801fb2c:	4bac      	ldr	r3, [pc, #688]	; (801fde0 <_tzset_unlocked_r+0x2d0>)
 801fb2e:	4aad      	ldr	r2, [pc, #692]	; (801fde4 <_tzset_unlocked_r+0x2d4>)
 801fb30:	6018      	str	r0, [r3, #0]
 801fb32:	4bad      	ldr	r3, [pc, #692]	; (801fde8 <_tzset_unlocked_r+0x2d8>)
 801fb34:	6018      	str	r0, [r3, #0]
 801fb36:	4bad      	ldr	r3, [pc, #692]	; (801fdec <_tzset_unlocked_r+0x2dc>)
 801fb38:	6830      	ldr	r0, [r6, #0]
 801fb3a:	e9c3 2200 	strd	r2, r2, [r3]
 801fb3e:	f000 fba7 	bl	8020290 <free>
 801fb42:	6034      	str	r4, [r6, #0]
 801fb44:	b00d      	add	sp, #52	; 0x34
 801fb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb4a:	6831      	ldr	r1, [r6, #0]
 801fb4c:	2900      	cmp	r1, #0
 801fb4e:	d15f      	bne.n	801fc10 <_tzset_unlocked_r+0x100>
 801fb50:	6830      	ldr	r0, [r6, #0]
 801fb52:	f000 fb9d 	bl	8020290 <free>
 801fb56:	4620      	mov	r0, r4
 801fb58:	f7e0 fb44 	bl	80001e4 <strlen>
 801fb5c:	1c41      	adds	r1, r0, #1
 801fb5e:	4638      	mov	r0, r7
 801fb60:	f000 fbee 	bl	8020340 <_malloc_r>
 801fb64:	6030      	str	r0, [r6, #0]
 801fb66:	2800      	cmp	r0, #0
 801fb68:	d157      	bne.n	801fc1a <_tzset_unlocked_r+0x10a>
 801fb6a:	7823      	ldrb	r3, [r4, #0]
 801fb6c:	4aa0      	ldr	r2, [pc, #640]	; (801fdf0 <_tzset_unlocked_r+0x2e0>)
 801fb6e:	49a1      	ldr	r1, [pc, #644]	; (801fdf4 <_tzset_unlocked_r+0x2e4>)
 801fb70:	2b3a      	cmp	r3, #58	; 0x3a
 801fb72:	bf08      	it	eq
 801fb74:	3401      	addeq	r4, #1
 801fb76:	ae0a      	add	r6, sp, #40	; 0x28
 801fb78:	4633      	mov	r3, r6
 801fb7a:	4620      	mov	r0, r4
 801fb7c:	f001 f894 	bl	8020ca8 <siscanf>
 801fb80:	2800      	cmp	r0, #0
 801fb82:	dddf      	ble.n	801fb44 <_tzset_unlocked_r+0x34>
 801fb84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fb86:	18e7      	adds	r7, r4, r3
 801fb88:	5ce3      	ldrb	r3, [r4, r3]
 801fb8a:	2b2d      	cmp	r3, #45	; 0x2d
 801fb8c:	d149      	bne.n	801fc22 <_tzset_unlocked_r+0x112>
 801fb8e:	3701      	adds	r7, #1
 801fb90:	f04f 34ff 	mov.w	r4, #4294967295
 801fb94:	f10d 0a20 	add.w	sl, sp, #32
 801fb98:	f10d 0b1e 	add.w	fp, sp, #30
 801fb9c:	f04f 0800 	mov.w	r8, #0
 801fba0:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801fba4:	4994      	ldr	r1, [pc, #592]	; (801fdf8 <_tzset_unlocked_r+0x2e8>)
 801fba6:	9603      	str	r6, [sp, #12]
 801fba8:	f8cd b000 	str.w	fp, [sp]
 801fbac:	4633      	mov	r3, r6
 801fbae:	aa07      	add	r2, sp, #28
 801fbb0:	4638      	mov	r0, r7
 801fbb2:	f8ad 801e 	strh.w	r8, [sp, #30]
 801fbb6:	f8ad 8020 	strh.w	r8, [sp, #32]
 801fbba:	f001 f875 	bl	8020ca8 <siscanf>
 801fbbe:	4540      	cmp	r0, r8
 801fbc0:	ddc0      	ble.n	801fb44 <_tzset_unlocked_r+0x34>
 801fbc2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801fbc6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801fbca:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801fe04 <_tzset_unlocked_r+0x2f4>
 801fbce:	213c      	movs	r1, #60	; 0x3c
 801fbd0:	fb01 2203 	mla	r2, r1, r3, r2
 801fbd4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801fbd8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801fbdc:	fb01 2303 	mla	r3, r1, r3, r2
 801fbe0:	435c      	muls	r4, r3
 801fbe2:	62ac      	str	r4, [r5, #40]	; 0x28
 801fbe4:	4c81      	ldr	r4, [pc, #516]	; (801fdec <_tzset_unlocked_r+0x2dc>)
 801fbe6:	4b82      	ldr	r3, [pc, #520]	; (801fdf0 <_tzset_unlocked_r+0x2e0>)
 801fbe8:	6023      	str	r3, [r4, #0]
 801fbea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fbec:	4981      	ldr	r1, [pc, #516]	; (801fdf4 <_tzset_unlocked_r+0x2e4>)
 801fbee:	441f      	add	r7, r3
 801fbf0:	464a      	mov	r2, r9
 801fbf2:	4633      	mov	r3, r6
 801fbf4:	4638      	mov	r0, r7
 801fbf6:	f001 f857 	bl	8020ca8 <siscanf>
 801fbfa:	4540      	cmp	r0, r8
 801fbfc:	dc16      	bgt.n	801fc2c <_tzset_unlocked_r+0x11c>
 801fbfe:	6823      	ldr	r3, [r4, #0]
 801fc00:	6063      	str	r3, [r4, #4]
 801fc02:	4b77      	ldr	r3, [pc, #476]	; (801fde0 <_tzset_unlocked_r+0x2d0>)
 801fc04:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801fc06:	601a      	str	r2, [r3, #0]
 801fc08:	4b77      	ldr	r3, [pc, #476]	; (801fde8 <_tzset_unlocked_r+0x2d8>)
 801fc0a:	f8c3 8000 	str.w	r8, [r3]
 801fc0e:	e799      	b.n	801fb44 <_tzset_unlocked_r+0x34>
 801fc10:	f7e0 fade 	bl	80001d0 <strcmp>
 801fc14:	2800      	cmp	r0, #0
 801fc16:	d19b      	bne.n	801fb50 <_tzset_unlocked_r+0x40>
 801fc18:	e794      	b.n	801fb44 <_tzset_unlocked_r+0x34>
 801fc1a:	4621      	mov	r1, r4
 801fc1c:	f001 f8b5 	bl	8020d8a <strcpy>
 801fc20:	e7a3      	b.n	801fb6a <_tzset_unlocked_r+0x5a>
 801fc22:	2b2b      	cmp	r3, #43	; 0x2b
 801fc24:	bf08      	it	eq
 801fc26:	3701      	addeq	r7, #1
 801fc28:	2401      	movs	r4, #1
 801fc2a:	e7b3      	b.n	801fb94 <_tzset_unlocked_r+0x84>
 801fc2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fc2e:	f8c4 9004 	str.w	r9, [r4, #4]
 801fc32:	18fc      	adds	r4, r7, r3
 801fc34:	5cfb      	ldrb	r3, [r7, r3]
 801fc36:	2b2d      	cmp	r3, #45	; 0x2d
 801fc38:	f040 808b 	bne.w	801fd52 <_tzset_unlocked_r+0x242>
 801fc3c:	3401      	adds	r4, #1
 801fc3e:	f04f 37ff 	mov.w	r7, #4294967295
 801fc42:	2300      	movs	r3, #0
 801fc44:	f8ad 301c 	strh.w	r3, [sp, #28]
 801fc48:	f8ad 301e 	strh.w	r3, [sp, #30]
 801fc4c:	f8ad 3020 	strh.w	r3, [sp, #32]
 801fc50:	930a      	str	r3, [sp, #40]	; 0x28
 801fc52:	e9cd a602 	strd	sl, r6, [sp, #8]
 801fc56:	e9cd b600 	strd	fp, r6, [sp]
 801fc5a:	4967      	ldr	r1, [pc, #412]	; (801fdf8 <_tzset_unlocked_r+0x2e8>)
 801fc5c:	4633      	mov	r3, r6
 801fc5e:	aa07      	add	r2, sp, #28
 801fc60:	4620      	mov	r0, r4
 801fc62:	f001 f821 	bl	8020ca8 <siscanf>
 801fc66:	2800      	cmp	r0, #0
 801fc68:	dc78      	bgt.n	801fd5c <_tzset_unlocked_r+0x24c>
 801fc6a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801fc6c:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801fc70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fc72:	652f      	str	r7, [r5, #80]	; 0x50
 801fc74:	441c      	add	r4, r3
 801fc76:	462f      	mov	r7, r5
 801fc78:	f04f 0900 	mov.w	r9, #0
 801fc7c:	7823      	ldrb	r3, [r4, #0]
 801fc7e:	2b2c      	cmp	r3, #44	; 0x2c
 801fc80:	bf08      	it	eq
 801fc82:	3401      	addeq	r4, #1
 801fc84:	f894 8000 	ldrb.w	r8, [r4]
 801fc88:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801fc8c:	d178      	bne.n	801fd80 <_tzset_unlocked_r+0x270>
 801fc8e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801fc92:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801fc96:	ab09      	add	r3, sp, #36	; 0x24
 801fc98:	9300      	str	r3, [sp, #0]
 801fc9a:	4958      	ldr	r1, [pc, #352]	; (801fdfc <_tzset_unlocked_r+0x2ec>)
 801fc9c:	9603      	str	r6, [sp, #12]
 801fc9e:	4633      	mov	r3, r6
 801fca0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801fca4:	4620      	mov	r0, r4
 801fca6:	f000 ffff 	bl	8020ca8 <siscanf>
 801fcaa:	2803      	cmp	r0, #3
 801fcac:	f47f af4a 	bne.w	801fb44 <_tzset_unlocked_r+0x34>
 801fcb0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801fcb4:	1e4b      	subs	r3, r1, #1
 801fcb6:	2b0b      	cmp	r3, #11
 801fcb8:	f63f af44 	bhi.w	801fb44 <_tzset_unlocked_r+0x34>
 801fcbc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801fcc0:	1e53      	subs	r3, r2, #1
 801fcc2:	2b04      	cmp	r3, #4
 801fcc4:	f63f af3e 	bhi.w	801fb44 <_tzset_unlocked_r+0x34>
 801fcc8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801fccc:	2b06      	cmp	r3, #6
 801fcce:	f63f af39 	bhi.w	801fb44 <_tzset_unlocked_r+0x34>
 801fcd2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801fcd6:	f887 8008 	strb.w	r8, [r7, #8]
 801fcda:	617b      	str	r3, [r7, #20]
 801fcdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fcde:	eb04 0803 	add.w	r8, r4, r3
 801fce2:	2302      	movs	r3, #2
 801fce4:	f8ad 301c 	strh.w	r3, [sp, #28]
 801fce8:	2300      	movs	r3, #0
 801fcea:	f8ad 301e 	strh.w	r3, [sp, #30]
 801fcee:	f8ad 3020 	strh.w	r3, [sp, #32]
 801fcf2:	930a      	str	r3, [sp, #40]	; 0x28
 801fcf4:	f898 3000 	ldrb.w	r3, [r8]
 801fcf8:	2b2f      	cmp	r3, #47	; 0x2f
 801fcfa:	d109      	bne.n	801fd10 <_tzset_unlocked_r+0x200>
 801fcfc:	e9cd a602 	strd	sl, r6, [sp, #8]
 801fd00:	e9cd b600 	strd	fp, r6, [sp]
 801fd04:	493e      	ldr	r1, [pc, #248]	; (801fe00 <_tzset_unlocked_r+0x2f0>)
 801fd06:	4633      	mov	r3, r6
 801fd08:	aa07      	add	r2, sp, #28
 801fd0a:	4640      	mov	r0, r8
 801fd0c:	f000 ffcc 	bl	8020ca8 <siscanf>
 801fd10:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801fd14:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801fd18:	213c      	movs	r1, #60	; 0x3c
 801fd1a:	fb01 2203 	mla	r2, r1, r3, r2
 801fd1e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801fd22:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801fd26:	fb01 2303 	mla	r3, r1, r3, r2
 801fd2a:	61bb      	str	r3, [r7, #24]
 801fd2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fd2e:	3728      	adds	r7, #40	; 0x28
 801fd30:	4444      	add	r4, r8
 801fd32:	f1b9 0f00 	cmp.w	r9, #0
 801fd36:	d020      	beq.n	801fd7a <_tzset_unlocked_r+0x26a>
 801fd38:	6868      	ldr	r0, [r5, #4]
 801fd3a:	f7ff fe2f 	bl	801f99c <__tzcalc_limits>
 801fd3e:	4b28      	ldr	r3, [pc, #160]	; (801fde0 <_tzset_unlocked_r+0x2d0>)
 801fd40:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801fd42:	601a      	str	r2, [r3, #0]
 801fd44:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801fd46:	1a9b      	subs	r3, r3, r2
 801fd48:	4a27      	ldr	r2, [pc, #156]	; (801fde8 <_tzset_unlocked_r+0x2d8>)
 801fd4a:	bf18      	it	ne
 801fd4c:	2301      	movne	r3, #1
 801fd4e:	6013      	str	r3, [r2, #0]
 801fd50:	e6f8      	b.n	801fb44 <_tzset_unlocked_r+0x34>
 801fd52:	2b2b      	cmp	r3, #43	; 0x2b
 801fd54:	bf08      	it	eq
 801fd56:	3401      	addeq	r4, #1
 801fd58:	2701      	movs	r7, #1
 801fd5a:	e772      	b.n	801fc42 <_tzset_unlocked_r+0x132>
 801fd5c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801fd60:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801fd64:	213c      	movs	r1, #60	; 0x3c
 801fd66:	fb01 2203 	mla	r2, r1, r3, r2
 801fd6a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801fd6e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801fd72:	fb01 2303 	mla	r3, r1, r3, r2
 801fd76:	435f      	muls	r7, r3
 801fd78:	e77a      	b.n	801fc70 <_tzset_unlocked_r+0x160>
 801fd7a:	f04f 0901 	mov.w	r9, #1
 801fd7e:	e77d      	b.n	801fc7c <_tzset_unlocked_r+0x16c>
 801fd80:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801fd84:	bf06      	itte	eq
 801fd86:	3401      	addeq	r4, #1
 801fd88:	4643      	moveq	r3, r8
 801fd8a:	2344      	movne	r3, #68	; 0x44
 801fd8c:	220a      	movs	r2, #10
 801fd8e:	a90b      	add	r1, sp, #44	; 0x2c
 801fd90:	4620      	mov	r0, r4
 801fd92:	9305      	str	r3, [sp, #20]
 801fd94:	f001 f880 	bl	8020e98 <strtoul>
 801fd98:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801fd9c:	9b05      	ldr	r3, [sp, #20]
 801fd9e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801fda2:	45a0      	cmp	r8, r4
 801fda4:	d114      	bne.n	801fdd0 <_tzset_unlocked_r+0x2c0>
 801fda6:	234d      	movs	r3, #77	; 0x4d
 801fda8:	f1b9 0f00 	cmp.w	r9, #0
 801fdac:	d107      	bne.n	801fdbe <_tzset_unlocked_r+0x2ae>
 801fdae:	722b      	strb	r3, [r5, #8]
 801fdb0:	2103      	movs	r1, #3
 801fdb2:	2302      	movs	r3, #2
 801fdb4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801fdb8:	f8c5 9014 	str.w	r9, [r5, #20]
 801fdbc:	e791      	b.n	801fce2 <_tzset_unlocked_r+0x1d2>
 801fdbe:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801fdc2:	220b      	movs	r2, #11
 801fdc4:	2301      	movs	r3, #1
 801fdc6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801fdca:	2300      	movs	r3, #0
 801fdcc:	63eb      	str	r3, [r5, #60]	; 0x3c
 801fdce:	e788      	b.n	801fce2 <_tzset_unlocked_r+0x1d2>
 801fdd0:	b280      	uxth	r0, r0
 801fdd2:	723b      	strb	r3, [r7, #8]
 801fdd4:	6178      	str	r0, [r7, #20]
 801fdd6:	e784      	b.n	801fce2 <_tzset_unlocked_r+0x1d2>
 801fdd8:	0802788a 	.word	0x0802788a
 801fddc:	20004ae8 	.word	0x20004ae8
 801fde0:	20004af0 	.word	0x20004af0
 801fde4:	0802788d 	.word	0x0802788d
 801fde8:	20004aec 	.word	0x20004aec
 801fdec:	20000210 	.word	0x20000210
 801fdf0:	20004adb 	.word	0x20004adb
 801fdf4:	08027891 	.word	0x08027891
 801fdf8:	080278b4 	.word	0x080278b4
 801fdfc:	080278a0 	.word	0x080278a0
 801fe00:	080278b3 	.word	0x080278b3
 801fe04:	20004ad0 	.word	0x20004ad0

0801fe08 <__assert_func>:
 801fe08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fe0a:	4614      	mov	r4, r2
 801fe0c:	461a      	mov	r2, r3
 801fe0e:	4b09      	ldr	r3, [pc, #36]	; (801fe34 <__assert_func+0x2c>)
 801fe10:	681b      	ldr	r3, [r3, #0]
 801fe12:	4605      	mov	r5, r0
 801fe14:	68d8      	ldr	r0, [r3, #12]
 801fe16:	b14c      	cbz	r4, 801fe2c <__assert_func+0x24>
 801fe18:	4b07      	ldr	r3, [pc, #28]	; (801fe38 <__assert_func+0x30>)
 801fe1a:	9100      	str	r1, [sp, #0]
 801fe1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801fe20:	4906      	ldr	r1, [pc, #24]	; (801fe3c <__assert_func+0x34>)
 801fe22:	462b      	mov	r3, r5
 801fe24:	f000 f8fe 	bl	8020024 <fiprintf>
 801fe28:	f001 f912 	bl	8021050 <abort>
 801fe2c:	4b04      	ldr	r3, [pc, #16]	; (801fe40 <__assert_func+0x38>)
 801fe2e:	461c      	mov	r4, r3
 801fe30:	e7f3      	b.n	801fe1a <__assert_func+0x12>
 801fe32:	bf00      	nop
 801fe34:	200001ac 	.word	0x200001ac
 801fe38:	080278c6 	.word	0x080278c6
 801fe3c:	080278d3 	.word	0x080278d3
 801fe40:	08027901 	.word	0x08027901

0801fe44 <div>:
 801fe44:	2900      	cmp	r1, #0
 801fe46:	b510      	push	{r4, lr}
 801fe48:	fb91 f4f2 	sdiv	r4, r1, r2
 801fe4c:	fb02 1314 	mls	r3, r2, r4, r1
 801fe50:	db06      	blt.n	801fe60 <div+0x1c>
 801fe52:	2b00      	cmp	r3, #0
 801fe54:	da01      	bge.n	801fe5a <div+0x16>
 801fe56:	3401      	adds	r4, #1
 801fe58:	1a9b      	subs	r3, r3, r2
 801fe5a:	e9c0 4300 	strd	r4, r3, [r0]
 801fe5e:	bd10      	pop	{r4, pc}
 801fe60:	2b00      	cmp	r3, #0
 801fe62:	bfc4      	itt	gt
 801fe64:	f104 34ff 	addgt.w	r4, r4, #4294967295
 801fe68:	189b      	addgt	r3, r3, r2
 801fe6a:	e7f6      	b.n	801fe5a <div+0x16>

0801fe6c <__errno>:
 801fe6c:	4b01      	ldr	r3, [pc, #4]	; (801fe74 <__errno+0x8>)
 801fe6e:	6818      	ldr	r0, [r3, #0]
 801fe70:	4770      	bx	lr
 801fe72:	bf00      	nop
 801fe74:	200001ac 	.word	0x200001ac

0801fe78 <std>:
 801fe78:	2300      	movs	r3, #0
 801fe7a:	b510      	push	{r4, lr}
 801fe7c:	4604      	mov	r4, r0
 801fe7e:	e9c0 3300 	strd	r3, r3, [r0]
 801fe82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801fe86:	6083      	str	r3, [r0, #8]
 801fe88:	8181      	strh	r1, [r0, #12]
 801fe8a:	6643      	str	r3, [r0, #100]	; 0x64
 801fe8c:	81c2      	strh	r2, [r0, #14]
 801fe8e:	6183      	str	r3, [r0, #24]
 801fe90:	4619      	mov	r1, r3
 801fe92:	2208      	movs	r2, #8
 801fe94:	305c      	adds	r0, #92	; 0x5c
 801fe96:	f7ff f98d 	bl	801f1b4 <memset>
 801fe9a:	4b05      	ldr	r3, [pc, #20]	; (801feb0 <std+0x38>)
 801fe9c:	6263      	str	r3, [r4, #36]	; 0x24
 801fe9e:	4b05      	ldr	r3, [pc, #20]	; (801feb4 <std+0x3c>)
 801fea0:	62a3      	str	r3, [r4, #40]	; 0x28
 801fea2:	4b05      	ldr	r3, [pc, #20]	; (801feb8 <std+0x40>)
 801fea4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801fea6:	4b05      	ldr	r3, [pc, #20]	; (801febc <std+0x44>)
 801fea8:	6224      	str	r4, [r4, #32]
 801feaa:	6323      	str	r3, [r4, #48]	; 0x30
 801feac:	bd10      	pop	{r4, pc}
 801feae:	bf00      	nop
 801feb0:	08020d01 	.word	0x08020d01
 801feb4:	08020d27 	.word	0x08020d27
 801feb8:	08020d5f 	.word	0x08020d5f
 801febc:	08020d83 	.word	0x08020d83

0801fec0 <_cleanup_r>:
 801fec0:	4901      	ldr	r1, [pc, #4]	; (801fec8 <_cleanup_r+0x8>)
 801fec2:	f000 b8c1 	b.w	8020048 <_fwalk_reent>
 801fec6:	bf00      	nop
 801fec8:	080211a5 	.word	0x080211a5

0801fecc <__sfmoreglue>:
 801fecc:	b570      	push	{r4, r5, r6, lr}
 801fece:	1e4a      	subs	r2, r1, #1
 801fed0:	2568      	movs	r5, #104	; 0x68
 801fed2:	4355      	muls	r5, r2
 801fed4:	460e      	mov	r6, r1
 801fed6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801feda:	f000 fa31 	bl	8020340 <_malloc_r>
 801fede:	4604      	mov	r4, r0
 801fee0:	b140      	cbz	r0, 801fef4 <__sfmoreglue+0x28>
 801fee2:	2100      	movs	r1, #0
 801fee4:	e9c0 1600 	strd	r1, r6, [r0]
 801fee8:	300c      	adds	r0, #12
 801feea:	60a0      	str	r0, [r4, #8]
 801feec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801fef0:	f7ff f960 	bl	801f1b4 <memset>
 801fef4:	4620      	mov	r0, r4
 801fef6:	bd70      	pop	{r4, r5, r6, pc}

0801fef8 <__sfp_lock_acquire>:
 801fef8:	4801      	ldr	r0, [pc, #4]	; (801ff00 <__sfp_lock_acquire+0x8>)
 801fefa:	f000 b9bd 	b.w	8020278 <__retarget_lock_acquire_recursive>
 801fefe:	bf00      	nop
 801ff00:	2000d1d8 	.word	0x2000d1d8

0801ff04 <__sfp_lock_release>:
 801ff04:	4801      	ldr	r0, [pc, #4]	; (801ff0c <__sfp_lock_release+0x8>)
 801ff06:	f000 b9b9 	b.w	802027c <__retarget_lock_release_recursive>
 801ff0a:	bf00      	nop
 801ff0c:	2000d1d8 	.word	0x2000d1d8

0801ff10 <__sinit_lock_acquire>:
 801ff10:	4801      	ldr	r0, [pc, #4]	; (801ff18 <__sinit_lock_acquire+0x8>)
 801ff12:	f000 b9b1 	b.w	8020278 <__retarget_lock_acquire_recursive>
 801ff16:	bf00      	nop
 801ff18:	2000d1d3 	.word	0x2000d1d3

0801ff1c <__sinit_lock_release>:
 801ff1c:	4801      	ldr	r0, [pc, #4]	; (801ff24 <__sinit_lock_release+0x8>)
 801ff1e:	f000 b9ad 	b.w	802027c <__retarget_lock_release_recursive>
 801ff22:	bf00      	nop
 801ff24:	2000d1d3 	.word	0x2000d1d3

0801ff28 <__sinit>:
 801ff28:	b510      	push	{r4, lr}
 801ff2a:	4604      	mov	r4, r0
 801ff2c:	f7ff fff0 	bl	801ff10 <__sinit_lock_acquire>
 801ff30:	69a3      	ldr	r3, [r4, #24]
 801ff32:	b11b      	cbz	r3, 801ff3c <__sinit+0x14>
 801ff34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ff38:	f7ff bff0 	b.w	801ff1c <__sinit_lock_release>
 801ff3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ff40:	6523      	str	r3, [r4, #80]	; 0x50
 801ff42:	4b13      	ldr	r3, [pc, #76]	; (801ff90 <__sinit+0x68>)
 801ff44:	4a13      	ldr	r2, [pc, #76]	; (801ff94 <__sinit+0x6c>)
 801ff46:	681b      	ldr	r3, [r3, #0]
 801ff48:	62a2      	str	r2, [r4, #40]	; 0x28
 801ff4a:	42a3      	cmp	r3, r4
 801ff4c:	bf04      	itt	eq
 801ff4e:	2301      	moveq	r3, #1
 801ff50:	61a3      	streq	r3, [r4, #24]
 801ff52:	4620      	mov	r0, r4
 801ff54:	f000 f820 	bl	801ff98 <__sfp>
 801ff58:	6060      	str	r0, [r4, #4]
 801ff5a:	4620      	mov	r0, r4
 801ff5c:	f000 f81c 	bl	801ff98 <__sfp>
 801ff60:	60a0      	str	r0, [r4, #8]
 801ff62:	4620      	mov	r0, r4
 801ff64:	f000 f818 	bl	801ff98 <__sfp>
 801ff68:	2200      	movs	r2, #0
 801ff6a:	60e0      	str	r0, [r4, #12]
 801ff6c:	2104      	movs	r1, #4
 801ff6e:	6860      	ldr	r0, [r4, #4]
 801ff70:	f7ff ff82 	bl	801fe78 <std>
 801ff74:	68a0      	ldr	r0, [r4, #8]
 801ff76:	2201      	movs	r2, #1
 801ff78:	2109      	movs	r1, #9
 801ff7a:	f7ff ff7d 	bl	801fe78 <std>
 801ff7e:	68e0      	ldr	r0, [r4, #12]
 801ff80:	2202      	movs	r2, #2
 801ff82:	2112      	movs	r1, #18
 801ff84:	f7ff ff78 	bl	801fe78 <std>
 801ff88:	2301      	movs	r3, #1
 801ff8a:	61a3      	str	r3, [r4, #24]
 801ff8c:	e7d2      	b.n	801ff34 <__sinit+0xc>
 801ff8e:	bf00      	nop
 801ff90:	08027750 	.word	0x08027750
 801ff94:	0801fec1 	.word	0x0801fec1

0801ff98 <__sfp>:
 801ff98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff9a:	4607      	mov	r7, r0
 801ff9c:	f7ff ffac 	bl	801fef8 <__sfp_lock_acquire>
 801ffa0:	4b1e      	ldr	r3, [pc, #120]	; (802001c <__sfp+0x84>)
 801ffa2:	681e      	ldr	r6, [r3, #0]
 801ffa4:	69b3      	ldr	r3, [r6, #24]
 801ffa6:	b913      	cbnz	r3, 801ffae <__sfp+0x16>
 801ffa8:	4630      	mov	r0, r6
 801ffaa:	f7ff ffbd 	bl	801ff28 <__sinit>
 801ffae:	3648      	adds	r6, #72	; 0x48
 801ffb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ffb4:	3b01      	subs	r3, #1
 801ffb6:	d503      	bpl.n	801ffc0 <__sfp+0x28>
 801ffb8:	6833      	ldr	r3, [r6, #0]
 801ffba:	b30b      	cbz	r3, 8020000 <__sfp+0x68>
 801ffbc:	6836      	ldr	r6, [r6, #0]
 801ffbe:	e7f7      	b.n	801ffb0 <__sfp+0x18>
 801ffc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ffc4:	b9d5      	cbnz	r5, 801fffc <__sfp+0x64>
 801ffc6:	4b16      	ldr	r3, [pc, #88]	; (8020020 <__sfp+0x88>)
 801ffc8:	60e3      	str	r3, [r4, #12]
 801ffca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ffce:	6665      	str	r5, [r4, #100]	; 0x64
 801ffd0:	f000 f950 	bl	8020274 <__retarget_lock_init_recursive>
 801ffd4:	f7ff ff96 	bl	801ff04 <__sfp_lock_release>
 801ffd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ffdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ffe0:	6025      	str	r5, [r4, #0]
 801ffe2:	61a5      	str	r5, [r4, #24]
 801ffe4:	2208      	movs	r2, #8
 801ffe6:	4629      	mov	r1, r5
 801ffe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ffec:	f7ff f8e2 	bl	801f1b4 <memset>
 801fff0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801fff4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801fff8:	4620      	mov	r0, r4
 801fffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fffc:	3468      	adds	r4, #104	; 0x68
 801fffe:	e7d9      	b.n	801ffb4 <__sfp+0x1c>
 8020000:	2104      	movs	r1, #4
 8020002:	4638      	mov	r0, r7
 8020004:	f7ff ff62 	bl	801fecc <__sfmoreglue>
 8020008:	4604      	mov	r4, r0
 802000a:	6030      	str	r0, [r6, #0]
 802000c:	2800      	cmp	r0, #0
 802000e:	d1d5      	bne.n	801ffbc <__sfp+0x24>
 8020010:	f7ff ff78 	bl	801ff04 <__sfp_lock_release>
 8020014:	230c      	movs	r3, #12
 8020016:	603b      	str	r3, [r7, #0]
 8020018:	e7ee      	b.n	801fff8 <__sfp+0x60>
 802001a:	bf00      	nop
 802001c:	08027750 	.word	0x08027750
 8020020:	ffff0001 	.word	0xffff0001

08020024 <fiprintf>:
 8020024:	b40e      	push	{r1, r2, r3}
 8020026:	b503      	push	{r0, r1, lr}
 8020028:	4601      	mov	r1, r0
 802002a:	ab03      	add	r3, sp, #12
 802002c:	4805      	ldr	r0, [pc, #20]	; (8020044 <fiprintf+0x20>)
 802002e:	f853 2b04 	ldr.w	r2, [r3], #4
 8020032:	6800      	ldr	r0, [r0, #0]
 8020034:	9301      	str	r3, [sp, #4]
 8020036:	f000 fb63 	bl	8020700 <_vfiprintf_r>
 802003a:	b002      	add	sp, #8
 802003c:	f85d eb04 	ldr.w	lr, [sp], #4
 8020040:	b003      	add	sp, #12
 8020042:	4770      	bx	lr
 8020044:	200001ac 	.word	0x200001ac

08020048 <_fwalk_reent>:
 8020048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802004c:	4606      	mov	r6, r0
 802004e:	4688      	mov	r8, r1
 8020050:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020054:	2700      	movs	r7, #0
 8020056:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802005a:	f1b9 0901 	subs.w	r9, r9, #1
 802005e:	d505      	bpl.n	802006c <_fwalk_reent+0x24>
 8020060:	6824      	ldr	r4, [r4, #0]
 8020062:	2c00      	cmp	r4, #0
 8020064:	d1f7      	bne.n	8020056 <_fwalk_reent+0xe>
 8020066:	4638      	mov	r0, r7
 8020068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802006c:	89ab      	ldrh	r3, [r5, #12]
 802006e:	2b01      	cmp	r3, #1
 8020070:	d907      	bls.n	8020082 <_fwalk_reent+0x3a>
 8020072:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020076:	3301      	adds	r3, #1
 8020078:	d003      	beq.n	8020082 <_fwalk_reent+0x3a>
 802007a:	4629      	mov	r1, r5
 802007c:	4630      	mov	r0, r6
 802007e:	47c0      	blx	r8
 8020080:	4307      	orrs	r7, r0
 8020082:	3568      	adds	r5, #104	; 0x68
 8020084:	e7e9      	b.n	802005a <_fwalk_reent+0x12>
	...

08020088 <_findenv_r>:
 8020088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802008c:	4607      	mov	r7, r0
 802008e:	4689      	mov	r9, r1
 8020090:	4616      	mov	r6, r2
 8020092:	f000 fff5 	bl	8021080 <__env_lock>
 8020096:	4b18      	ldr	r3, [pc, #96]	; (80200f8 <_findenv_r+0x70>)
 8020098:	681c      	ldr	r4, [r3, #0]
 802009a:	469a      	mov	sl, r3
 802009c:	b134      	cbz	r4, 80200ac <_findenv_r+0x24>
 802009e:	464b      	mov	r3, r9
 80200a0:	4698      	mov	r8, r3
 80200a2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80200a6:	b139      	cbz	r1, 80200b8 <_findenv_r+0x30>
 80200a8:	293d      	cmp	r1, #61	; 0x3d
 80200aa:	d1f9      	bne.n	80200a0 <_findenv_r+0x18>
 80200ac:	4638      	mov	r0, r7
 80200ae:	f000 ffed 	bl	802108c <__env_unlock>
 80200b2:	2000      	movs	r0, #0
 80200b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200b8:	eba8 0809 	sub.w	r8, r8, r9
 80200bc:	46a3      	mov	fp, r4
 80200be:	f854 0b04 	ldr.w	r0, [r4], #4
 80200c2:	2800      	cmp	r0, #0
 80200c4:	d0f2      	beq.n	80200ac <_findenv_r+0x24>
 80200c6:	4642      	mov	r2, r8
 80200c8:	4649      	mov	r1, r9
 80200ca:	f7ff fbb2 	bl	801f832 <strncmp>
 80200ce:	2800      	cmp	r0, #0
 80200d0:	d1f4      	bne.n	80200bc <_findenv_r+0x34>
 80200d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80200d6:	eb03 0508 	add.w	r5, r3, r8
 80200da:	f813 3008 	ldrb.w	r3, [r3, r8]
 80200de:	2b3d      	cmp	r3, #61	; 0x3d
 80200e0:	d1ec      	bne.n	80200bc <_findenv_r+0x34>
 80200e2:	f8da 3000 	ldr.w	r3, [sl]
 80200e6:	ebab 0303 	sub.w	r3, fp, r3
 80200ea:	109b      	asrs	r3, r3, #2
 80200ec:	4638      	mov	r0, r7
 80200ee:	6033      	str	r3, [r6, #0]
 80200f0:	f000 ffcc 	bl	802108c <__env_unlock>
 80200f4:	1c68      	adds	r0, r5, #1
 80200f6:	e7dd      	b.n	80200b4 <_findenv_r+0x2c>
 80200f8:	20000018 	.word	0x20000018

080200fc <_getenv_r>:
 80200fc:	b507      	push	{r0, r1, r2, lr}
 80200fe:	aa01      	add	r2, sp, #4
 8020100:	f7ff ffc2 	bl	8020088 <_findenv_r>
 8020104:	b003      	add	sp, #12
 8020106:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0802010c <__gettzinfo>:
 802010c:	4800      	ldr	r0, [pc, #0]	; (8020110 <__gettzinfo+0x4>)
 802010e:	4770      	bx	lr
 8020110:	20000218 	.word	0x20000218

08020114 <gmtime_r>:
 8020114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020118:	e9d0 6700 	ldrd	r6, r7, [r0]
 802011c:	460c      	mov	r4, r1
 802011e:	4a51      	ldr	r2, [pc, #324]	; (8020264 <gmtime_r+0x150>)
 8020120:	2300      	movs	r3, #0
 8020122:	4630      	mov	r0, r6
 8020124:	4639      	mov	r1, r7
 8020126:	f7e0 fd4f 	bl	8000bc8 <__aeabi_ldivmod>
 802012a:	4639      	mov	r1, r7
 802012c:	4605      	mov	r5, r0
 802012e:	4a4d      	ldr	r2, [pc, #308]	; (8020264 <gmtime_r+0x150>)
 8020130:	4630      	mov	r0, r6
 8020132:	2300      	movs	r3, #0
 8020134:	f7e0 fd48 	bl	8000bc8 <__aeabi_ldivmod>
 8020138:	2a00      	cmp	r2, #0
 802013a:	bfbc      	itt	lt
 802013c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8020140:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8020144:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8020148:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 802014c:	fbb2 f3f1 	udiv	r3, r2, r1
 8020150:	fb01 2213 	mls	r2, r1, r3, r2
 8020154:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8020158:	bfac      	ite	ge
 802015a:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 802015e:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8020162:	60a3      	str	r3, [r4, #8]
 8020164:	fbb2 f3f1 	udiv	r3, r2, r1
 8020168:	fb01 2213 	mls	r2, r1, r3, r2
 802016c:	6063      	str	r3, [r4, #4]
 802016e:	6022      	str	r2, [r4, #0]
 8020170:	1cc3      	adds	r3, r0, #3
 8020172:	2207      	movs	r2, #7
 8020174:	fb93 f2f2 	sdiv	r2, r3, r2
 8020178:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 802017c:	1a9b      	subs	r3, r3, r2
 802017e:	bf48      	it	mi
 8020180:	3307      	addmi	r3, #7
 8020182:	2800      	cmp	r0, #0
 8020184:	61a3      	str	r3, [r4, #24]
 8020186:	bfb8      	it	lt
 8020188:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 802018c:	4936      	ldr	r1, [pc, #216]	; (8020268 <gmtime_r+0x154>)
 802018e:	bfae      	itee	ge
 8020190:	fb90 f1f1 	sdivge	r1, r0, r1
 8020194:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8020198:	fb93 f1f1 	sdivlt	r1, r3, r1
 802019c:	4b33      	ldr	r3, [pc, #204]	; (802026c <gmtime_r+0x158>)
 802019e:	fb03 0001 	mla	r0, r3, r1, r0
 80201a2:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80201a6:	fbb0 f2f2 	udiv	r2, r0, r2
 80201aa:	4402      	add	r2, r0
 80201ac:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80201b0:	fbb0 f3fc 	udiv	r3, r0, ip
 80201b4:	1ad2      	subs	r2, r2, r3
 80201b6:	f240 176d 	movw	r7, #365	; 0x16d
 80201ba:	4b2d      	ldr	r3, [pc, #180]	; (8020270 <gmtime_r+0x15c>)
 80201bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80201c0:	2664      	movs	r6, #100	; 0x64
 80201c2:	1ad3      	subs	r3, r2, r3
 80201c4:	fbb3 f5f7 	udiv	r5, r3, r7
 80201c8:	fbb3 f3fc 	udiv	r3, r3, ip
 80201cc:	fbb5 f2f6 	udiv	r2, r5, r6
 80201d0:	1ad3      	subs	r3, r2, r3
 80201d2:	4403      	add	r3, r0
 80201d4:	fb07 3315 	mls	r3, r7, r5, r3
 80201d8:	2099      	movs	r0, #153	; 0x99
 80201da:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80201de:	f10c 0c02 	add.w	ip, ip, #2
 80201e2:	f103 0e01 	add.w	lr, r3, #1
 80201e6:	fbbc f7f0 	udiv	r7, ip, r0
 80201ea:	4378      	muls	r0, r7
 80201ec:	3002      	adds	r0, #2
 80201ee:	f04f 0805 	mov.w	r8, #5
 80201f2:	fbb0 f0f8 	udiv	r0, r0, r8
 80201f6:	ebae 0000 	sub.w	r0, lr, r0
 80201fa:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80201fe:	45f4      	cmp	ip, lr
 8020200:	bf94      	ite	ls
 8020202:	f04f 0c02 	movls.w	ip, #2
 8020206:	f06f 0c09 	mvnhi.w	ip, #9
 802020a:	4467      	add	r7, ip
 802020c:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8020210:	fb0c 5101 	mla	r1, ip, r1, r5
 8020214:	2f01      	cmp	r7, #1
 8020216:	bf98      	it	ls
 8020218:	3101      	addls	r1, #1
 802021a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 802021e:	d30c      	bcc.n	802023a <gmtime_r+0x126>
 8020220:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8020224:	61e3      	str	r3, [r4, #28]
 8020226:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 802022a:	2300      	movs	r3, #0
 802022c:	60e0      	str	r0, [r4, #12]
 802022e:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8020232:	6223      	str	r3, [r4, #32]
 8020234:	4620      	mov	r0, r4
 8020236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802023a:	f015 0f03 	tst.w	r5, #3
 802023e:	d102      	bne.n	8020246 <gmtime_r+0x132>
 8020240:	fb06 5212 	mls	r2, r6, r2, r5
 8020244:	b95a      	cbnz	r2, 802025e <gmtime_r+0x14a>
 8020246:	f44f 76c8 	mov.w	r6, #400	; 0x190
 802024a:	fbb5 f2f6 	udiv	r2, r5, r6
 802024e:	fb06 5212 	mls	r2, r6, r2, r5
 8020252:	fab2 f282 	clz	r2, r2
 8020256:	0952      	lsrs	r2, r2, #5
 8020258:	333b      	adds	r3, #59	; 0x3b
 802025a:	4413      	add	r3, r2
 802025c:	e7e2      	b.n	8020224 <gmtime_r+0x110>
 802025e:	2201      	movs	r2, #1
 8020260:	e7fa      	b.n	8020258 <gmtime_r+0x144>
 8020262:	bf00      	nop
 8020264:	00015180 	.word	0x00015180
 8020268:	00023ab1 	.word	0x00023ab1
 802026c:	fffdc54f 	.word	0xfffdc54f
 8020270:	00023ab0 	.word	0x00023ab0

08020274 <__retarget_lock_init_recursive>:
 8020274:	4770      	bx	lr

08020276 <__retarget_lock_acquire>:
 8020276:	4770      	bx	lr

08020278 <__retarget_lock_acquire_recursive>:
 8020278:	4770      	bx	lr

0802027a <__retarget_lock_release>:
 802027a:	4770      	bx	lr

0802027c <__retarget_lock_release_recursive>:
 802027c:	4770      	bx	lr
	...

08020280 <malloc>:
 8020280:	4b02      	ldr	r3, [pc, #8]	; (802028c <malloc+0xc>)
 8020282:	4601      	mov	r1, r0
 8020284:	6818      	ldr	r0, [r3, #0]
 8020286:	f000 b85b 	b.w	8020340 <_malloc_r>
 802028a:	bf00      	nop
 802028c:	200001ac 	.word	0x200001ac

08020290 <free>:
 8020290:	4b02      	ldr	r3, [pc, #8]	; (802029c <free+0xc>)
 8020292:	4601      	mov	r1, r0
 8020294:	6818      	ldr	r0, [r3, #0]
 8020296:	f000 b803 	b.w	80202a0 <_free_r>
 802029a:	bf00      	nop
 802029c:	200001ac 	.word	0x200001ac

080202a0 <_free_r>:
 80202a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80202a2:	2900      	cmp	r1, #0
 80202a4:	d048      	beq.n	8020338 <_free_r+0x98>
 80202a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80202aa:	9001      	str	r0, [sp, #4]
 80202ac:	2b00      	cmp	r3, #0
 80202ae:	f1a1 0404 	sub.w	r4, r1, #4
 80202b2:	bfb8      	it	lt
 80202b4:	18e4      	addlt	r4, r4, r3
 80202b6:	f001 f827 	bl	8021308 <__malloc_lock>
 80202ba:	4a20      	ldr	r2, [pc, #128]	; (802033c <_free_r+0x9c>)
 80202bc:	9801      	ldr	r0, [sp, #4]
 80202be:	6813      	ldr	r3, [r2, #0]
 80202c0:	4615      	mov	r5, r2
 80202c2:	b933      	cbnz	r3, 80202d2 <_free_r+0x32>
 80202c4:	6063      	str	r3, [r4, #4]
 80202c6:	6014      	str	r4, [r2, #0]
 80202c8:	b003      	add	sp, #12
 80202ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80202ce:	f001 b821 	b.w	8021314 <__malloc_unlock>
 80202d2:	42a3      	cmp	r3, r4
 80202d4:	d90b      	bls.n	80202ee <_free_r+0x4e>
 80202d6:	6821      	ldr	r1, [r4, #0]
 80202d8:	1862      	adds	r2, r4, r1
 80202da:	4293      	cmp	r3, r2
 80202dc:	bf04      	itt	eq
 80202de:	681a      	ldreq	r2, [r3, #0]
 80202e0:	685b      	ldreq	r3, [r3, #4]
 80202e2:	6063      	str	r3, [r4, #4]
 80202e4:	bf04      	itt	eq
 80202e6:	1852      	addeq	r2, r2, r1
 80202e8:	6022      	streq	r2, [r4, #0]
 80202ea:	602c      	str	r4, [r5, #0]
 80202ec:	e7ec      	b.n	80202c8 <_free_r+0x28>
 80202ee:	461a      	mov	r2, r3
 80202f0:	685b      	ldr	r3, [r3, #4]
 80202f2:	b10b      	cbz	r3, 80202f8 <_free_r+0x58>
 80202f4:	42a3      	cmp	r3, r4
 80202f6:	d9fa      	bls.n	80202ee <_free_r+0x4e>
 80202f8:	6811      	ldr	r1, [r2, #0]
 80202fa:	1855      	adds	r5, r2, r1
 80202fc:	42a5      	cmp	r5, r4
 80202fe:	d10b      	bne.n	8020318 <_free_r+0x78>
 8020300:	6824      	ldr	r4, [r4, #0]
 8020302:	4421      	add	r1, r4
 8020304:	1854      	adds	r4, r2, r1
 8020306:	42a3      	cmp	r3, r4
 8020308:	6011      	str	r1, [r2, #0]
 802030a:	d1dd      	bne.n	80202c8 <_free_r+0x28>
 802030c:	681c      	ldr	r4, [r3, #0]
 802030e:	685b      	ldr	r3, [r3, #4]
 8020310:	6053      	str	r3, [r2, #4]
 8020312:	4421      	add	r1, r4
 8020314:	6011      	str	r1, [r2, #0]
 8020316:	e7d7      	b.n	80202c8 <_free_r+0x28>
 8020318:	d902      	bls.n	8020320 <_free_r+0x80>
 802031a:	230c      	movs	r3, #12
 802031c:	6003      	str	r3, [r0, #0]
 802031e:	e7d3      	b.n	80202c8 <_free_r+0x28>
 8020320:	6825      	ldr	r5, [r4, #0]
 8020322:	1961      	adds	r1, r4, r5
 8020324:	428b      	cmp	r3, r1
 8020326:	bf04      	itt	eq
 8020328:	6819      	ldreq	r1, [r3, #0]
 802032a:	685b      	ldreq	r3, [r3, #4]
 802032c:	6063      	str	r3, [r4, #4]
 802032e:	bf04      	itt	eq
 8020330:	1949      	addeq	r1, r1, r5
 8020332:	6021      	streq	r1, [r4, #0]
 8020334:	6054      	str	r4, [r2, #4]
 8020336:	e7c7      	b.n	80202c8 <_free_r+0x28>
 8020338:	b003      	add	sp, #12
 802033a:	bd30      	pop	{r4, r5, pc}
 802033c:	20004af4 	.word	0x20004af4

08020340 <_malloc_r>:
 8020340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020342:	1ccd      	adds	r5, r1, #3
 8020344:	f025 0503 	bic.w	r5, r5, #3
 8020348:	3508      	adds	r5, #8
 802034a:	2d0c      	cmp	r5, #12
 802034c:	bf38      	it	cc
 802034e:	250c      	movcc	r5, #12
 8020350:	2d00      	cmp	r5, #0
 8020352:	4606      	mov	r6, r0
 8020354:	db01      	blt.n	802035a <_malloc_r+0x1a>
 8020356:	42a9      	cmp	r1, r5
 8020358:	d903      	bls.n	8020362 <_malloc_r+0x22>
 802035a:	230c      	movs	r3, #12
 802035c:	6033      	str	r3, [r6, #0]
 802035e:	2000      	movs	r0, #0
 8020360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020362:	f000 ffd1 	bl	8021308 <__malloc_lock>
 8020366:	4921      	ldr	r1, [pc, #132]	; (80203ec <_malloc_r+0xac>)
 8020368:	680a      	ldr	r2, [r1, #0]
 802036a:	4614      	mov	r4, r2
 802036c:	b99c      	cbnz	r4, 8020396 <_malloc_r+0x56>
 802036e:	4f20      	ldr	r7, [pc, #128]	; (80203f0 <_malloc_r+0xb0>)
 8020370:	683b      	ldr	r3, [r7, #0]
 8020372:	b923      	cbnz	r3, 802037e <_malloc_r+0x3e>
 8020374:	4621      	mov	r1, r4
 8020376:	4630      	mov	r0, r6
 8020378:	f000 fc86 	bl	8020c88 <_sbrk_r>
 802037c:	6038      	str	r0, [r7, #0]
 802037e:	4629      	mov	r1, r5
 8020380:	4630      	mov	r0, r6
 8020382:	f000 fc81 	bl	8020c88 <_sbrk_r>
 8020386:	1c43      	adds	r3, r0, #1
 8020388:	d123      	bne.n	80203d2 <_malloc_r+0x92>
 802038a:	230c      	movs	r3, #12
 802038c:	6033      	str	r3, [r6, #0]
 802038e:	4630      	mov	r0, r6
 8020390:	f000 ffc0 	bl	8021314 <__malloc_unlock>
 8020394:	e7e3      	b.n	802035e <_malloc_r+0x1e>
 8020396:	6823      	ldr	r3, [r4, #0]
 8020398:	1b5b      	subs	r3, r3, r5
 802039a:	d417      	bmi.n	80203cc <_malloc_r+0x8c>
 802039c:	2b0b      	cmp	r3, #11
 802039e:	d903      	bls.n	80203a8 <_malloc_r+0x68>
 80203a0:	6023      	str	r3, [r4, #0]
 80203a2:	441c      	add	r4, r3
 80203a4:	6025      	str	r5, [r4, #0]
 80203a6:	e004      	b.n	80203b2 <_malloc_r+0x72>
 80203a8:	6863      	ldr	r3, [r4, #4]
 80203aa:	42a2      	cmp	r2, r4
 80203ac:	bf0c      	ite	eq
 80203ae:	600b      	streq	r3, [r1, #0]
 80203b0:	6053      	strne	r3, [r2, #4]
 80203b2:	4630      	mov	r0, r6
 80203b4:	f000 ffae 	bl	8021314 <__malloc_unlock>
 80203b8:	f104 000b 	add.w	r0, r4, #11
 80203bc:	1d23      	adds	r3, r4, #4
 80203be:	f020 0007 	bic.w	r0, r0, #7
 80203c2:	1ac2      	subs	r2, r0, r3
 80203c4:	d0cc      	beq.n	8020360 <_malloc_r+0x20>
 80203c6:	1a1b      	subs	r3, r3, r0
 80203c8:	50a3      	str	r3, [r4, r2]
 80203ca:	e7c9      	b.n	8020360 <_malloc_r+0x20>
 80203cc:	4622      	mov	r2, r4
 80203ce:	6864      	ldr	r4, [r4, #4]
 80203d0:	e7cc      	b.n	802036c <_malloc_r+0x2c>
 80203d2:	1cc4      	adds	r4, r0, #3
 80203d4:	f024 0403 	bic.w	r4, r4, #3
 80203d8:	42a0      	cmp	r0, r4
 80203da:	d0e3      	beq.n	80203a4 <_malloc_r+0x64>
 80203dc:	1a21      	subs	r1, r4, r0
 80203de:	4630      	mov	r0, r6
 80203e0:	f000 fc52 	bl	8020c88 <_sbrk_r>
 80203e4:	3001      	adds	r0, #1
 80203e6:	d1dd      	bne.n	80203a4 <_malloc_r+0x64>
 80203e8:	e7cf      	b.n	802038a <_malloc_r+0x4a>
 80203ea:	bf00      	nop
 80203ec:	20004af4 	.word	0x20004af4
 80203f0:	20004af8 	.word	0x20004af8

080203f4 <__ssputs_r>:
 80203f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203f8:	688e      	ldr	r6, [r1, #8]
 80203fa:	429e      	cmp	r6, r3
 80203fc:	4682      	mov	sl, r0
 80203fe:	460c      	mov	r4, r1
 8020400:	4690      	mov	r8, r2
 8020402:	461f      	mov	r7, r3
 8020404:	d838      	bhi.n	8020478 <__ssputs_r+0x84>
 8020406:	898a      	ldrh	r2, [r1, #12]
 8020408:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802040c:	d032      	beq.n	8020474 <__ssputs_r+0x80>
 802040e:	6825      	ldr	r5, [r4, #0]
 8020410:	6909      	ldr	r1, [r1, #16]
 8020412:	eba5 0901 	sub.w	r9, r5, r1
 8020416:	6965      	ldr	r5, [r4, #20]
 8020418:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802041c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020420:	3301      	adds	r3, #1
 8020422:	444b      	add	r3, r9
 8020424:	106d      	asrs	r5, r5, #1
 8020426:	429d      	cmp	r5, r3
 8020428:	bf38      	it	cc
 802042a:	461d      	movcc	r5, r3
 802042c:	0553      	lsls	r3, r2, #21
 802042e:	d531      	bpl.n	8020494 <__ssputs_r+0xa0>
 8020430:	4629      	mov	r1, r5
 8020432:	f7ff ff85 	bl	8020340 <_malloc_r>
 8020436:	4606      	mov	r6, r0
 8020438:	b950      	cbnz	r0, 8020450 <__ssputs_r+0x5c>
 802043a:	230c      	movs	r3, #12
 802043c:	f8ca 3000 	str.w	r3, [sl]
 8020440:	89a3      	ldrh	r3, [r4, #12]
 8020442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020446:	81a3      	strh	r3, [r4, #12]
 8020448:	f04f 30ff 	mov.w	r0, #4294967295
 802044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020450:	6921      	ldr	r1, [r4, #16]
 8020452:	464a      	mov	r2, r9
 8020454:	f7fe fe86 	bl	801f164 <memcpy>
 8020458:	89a3      	ldrh	r3, [r4, #12]
 802045a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802045e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020462:	81a3      	strh	r3, [r4, #12]
 8020464:	6126      	str	r6, [r4, #16]
 8020466:	6165      	str	r5, [r4, #20]
 8020468:	444e      	add	r6, r9
 802046a:	eba5 0509 	sub.w	r5, r5, r9
 802046e:	6026      	str	r6, [r4, #0]
 8020470:	60a5      	str	r5, [r4, #8]
 8020472:	463e      	mov	r6, r7
 8020474:	42be      	cmp	r6, r7
 8020476:	d900      	bls.n	802047a <__ssputs_r+0x86>
 8020478:	463e      	mov	r6, r7
 802047a:	4632      	mov	r2, r6
 802047c:	6820      	ldr	r0, [r4, #0]
 802047e:	4641      	mov	r1, r8
 8020480:	f7fe fe7e 	bl	801f180 <memmove>
 8020484:	68a3      	ldr	r3, [r4, #8]
 8020486:	6822      	ldr	r2, [r4, #0]
 8020488:	1b9b      	subs	r3, r3, r6
 802048a:	4432      	add	r2, r6
 802048c:	60a3      	str	r3, [r4, #8]
 802048e:	6022      	str	r2, [r4, #0]
 8020490:	2000      	movs	r0, #0
 8020492:	e7db      	b.n	802044c <__ssputs_r+0x58>
 8020494:	462a      	mov	r2, r5
 8020496:	f000 ff43 	bl	8021320 <_realloc_r>
 802049a:	4606      	mov	r6, r0
 802049c:	2800      	cmp	r0, #0
 802049e:	d1e1      	bne.n	8020464 <__ssputs_r+0x70>
 80204a0:	6921      	ldr	r1, [r4, #16]
 80204a2:	4650      	mov	r0, sl
 80204a4:	f7ff fefc 	bl	80202a0 <_free_r>
 80204a8:	e7c7      	b.n	802043a <__ssputs_r+0x46>
	...

080204ac <_svfiprintf_r>:
 80204ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204b0:	4698      	mov	r8, r3
 80204b2:	898b      	ldrh	r3, [r1, #12]
 80204b4:	061b      	lsls	r3, r3, #24
 80204b6:	b09d      	sub	sp, #116	; 0x74
 80204b8:	4607      	mov	r7, r0
 80204ba:	460d      	mov	r5, r1
 80204bc:	4614      	mov	r4, r2
 80204be:	d50e      	bpl.n	80204de <_svfiprintf_r+0x32>
 80204c0:	690b      	ldr	r3, [r1, #16]
 80204c2:	b963      	cbnz	r3, 80204de <_svfiprintf_r+0x32>
 80204c4:	2140      	movs	r1, #64	; 0x40
 80204c6:	f7ff ff3b 	bl	8020340 <_malloc_r>
 80204ca:	6028      	str	r0, [r5, #0]
 80204cc:	6128      	str	r0, [r5, #16]
 80204ce:	b920      	cbnz	r0, 80204da <_svfiprintf_r+0x2e>
 80204d0:	230c      	movs	r3, #12
 80204d2:	603b      	str	r3, [r7, #0]
 80204d4:	f04f 30ff 	mov.w	r0, #4294967295
 80204d8:	e0d1      	b.n	802067e <_svfiprintf_r+0x1d2>
 80204da:	2340      	movs	r3, #64	; 0x40
 80204dc:	616b      	str	r3, [r5, #20]
 80204de:	2300      	movs	r3, #0
 80204e0:	9309      	str	r3, [sp, #36]	; 0x24
 80204e2:	2320      	movs	r3, #32
 80204e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80204e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80204ec:	2330      	movs	r3, #48	; 0x30
 80204ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020698 <_svfiprintf_r+0x1ec>
 80204f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80204f6:	f04f 0901 	mov.w	r9, #1
 80204fa:	4623      	mov	r3, r4
 80204fc:	469a      	mov	sl, r3
 80204fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020502:	b10a      	cbz	r2, 8020508 <_svfiprintf_r+0x5c>
 8020504:	2a25      	cmp	r2, #37	; 0x25
 8020506:	d1f9      	bne.n	80204fc <_svfiprintf_r+0x50>
 8020508:	ebba 0b04 	subs.w	fp, sl, r4
 802050c:	d00b      	beq.n	8020526 <_svfiprintf_r+0x7a>
 802050e:	465b      	mov	r3, fp
 8020510:	4622      	mov	r2, r4
 8020512:	4629      	mov	r1, r5
 8020514:	4638      	mov	r0, r7
 8020516:	f7ff ff6d 	bl	80203f4 <__ssputs_r>
 802051a:	3001      	adds	r0, #1
 802051c:	f000 80aa 	beq.w	8020674 <_svfiprintf_r+0x1c8>
 8020520:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020522:	445a      	add	r2, fp
 8020524:	9209      	str	r2, [sp, #36]	; 0x24
 8020526:	f89a 3000 	ldrb.w	r3, [sl]
 802052a:	2b00      	cmp	r3, #0
 802052c:	f000 80a2 	beq.w	8020674 <_svfiprintf_r+0x1c8>
 8020530:	2300      	movs	r3, #0
 8020532:	f04f 32ff 	mov.w	r2, #4294967295
 8020536:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802053a:	f10a 0a01 	add.w	sl, sl, #1
 802053e:	9304      	str	r3, [sp, #16]
 8020540:	9307      	str	r3, [sp, #28]
 8020542:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020546:	931a      	str	r3, [sp, #104]	; 0x68
 8020548:	4654      	mov	r4, sl
 802054a:	2205      	movs	r2, #5
 802054c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020550:	4851      	ldr	r0, [pc, #324]	; (8020698 <_svfiprintf_r+0x1ec>)
 8020552:	f7df fe55 	bl	8000200 <memchr>
 8020556:	9a04      	ldr	r2, [sp, #16]
 8020558:	b9d8      	cbnz	r0, 8020592 <_svfiprintf_r+0xe6>
 802055a:	06d0      	lsls	r0, r2, #27
 802055c:	bf44      	itt	mi
 802055e:	2320      	movmi	r3, #32
 8020560:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020564:	0711      	lsls	r1, r2, #28
 8020566:	bf44      	itt	mi
 8020568:	232b      	movmi	r3, #43	; 0x2b
 802056a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802056e:	f89a 3000 	ldrb.w	r3, [sl]
 8020572:	2b2a      	cmp	r3, #42	; 0x2a
 8020574:	d015      	beq.n	80205a2 <_svfiprintf_r+0xf6>
 8020576:	9a07      	ldr	r2, [sp, #28]
 8020578:	4654      	mov	r4, sl
 802057a:	2000      	movs	r0, #0
 802057c:	f04f 0c0a 	mov.w	ip, #10
 8020580:	4621      	mov	r1, r4
 8020582:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020586:	3b30      	subs	r3, #48	; 0x30
 8020588:	2b09      	cmp	r3, #9
 802058a:	d94e      	bls.n	802062a <_svfiprintf_r+0x17e>
 802058c:	b1b0      	cbz	r0, 80205bc <_svfiprintf_r+0x110>
 802058e:	9207      	str	r2, [sp, #28]
 8020590:	e014      	b.n	80205bc <_svfiprintf_r+0x110>
 8020592:	eba0 0308 	sub.w	r3, r0, r8
 8020596:	fa09 f303 	lsl.w	r3, r9, r3
 802059a:	4313      	orrs	r3, r2
 802059c:	9304      	str	r3, [sp, #16]
 802059e:	46a2      	mov	sl, r4
 80205a0:	e7d2      	b.n	8020548 <_svfiprintf_r+0x9c>
 80205a2:	9b03      	ldr	r3, [sp, #12]
 80205a4:	1d19      	adds	r1, r3, #4
 80205a6:	681b      	ldr	r3, [r3, #0]
 80205a8:	9103      	str	r1, [sp, #12]
 80205aa:	2b00      	cmp	r3, #0
 80205ac:	bfbb      	ittet	lt
 80205ae:	425b      	neglt	r3, r3
 80205b0:	f042 0202 	orrlt.w	r2, r2, #2
 80205b4:	9307      	strge	r3, [sp, #28]
 80205b6:	9307      	strlt	r3, [sp, #28]
 80205b8:	bfb8      	it	lt
 80205ba:	9204      	strlt	r2, [sp, #16]
 80205bc:	7823      	ldrb	r3, [r4, #0]
 80205be:	2b2e      	cmp	r3, #46	; 0x2e
 80205c0:	d10c      	bne.n	80205dc <_svfiprintf_r+0x130>
 80205c2:	7863      	ldrb	r3, [r4, #1]
 80205c4:	2b2a      	cmp	r3, #42	; 0x2a
 80205c6:	d135      	bne.n	8020634 <_svfiprintf_r+0x188>
 80205c8:	9b03      	ldr	r3, [sp, #12]
 80205ca:	1d1a      	adds	r2, r3, #4
 80205cc:	681b      	ldr	r3, [r3, #0]
 80205ce:	9203      	str	r2, [sp, #12]
 80205d0:	2b00      	cmp	r3, #0
 80205d2:	bfb8      	it	lt
 80205d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80205d8:	3402      	adds	r4, #2
 80205da:	9305      	str	r3, [sp, #20]
 80205dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80206a8 <_svfiprintf_r+0x1fc>
 80205e0:	7821      	ldrb	r1, [r4, #0]
 80205e2:	2203      	movs	r2, #3
 80205e4:	4650      	mov	r0, sl
 80205e6:	f7df fe0b 	bl	8000200 <memchr>
 80205ea:	b140      	cbz	r0, 80205fe <_svfiprintf_r+0x152>
 80205ec:	2340      	movs	r3, #64	; 0x40
 80205ee:	eba0 000a 	sub.w	r0, r0, sl
 80205f2:	fa03 f000 	lsl.w	r0, r3, r0
 80205f6:	9b04      	ldr	r3, [sp, #16]
 80205f8:	4303      	orrs	r3, r0
 80205fa:	3401      	adds	r4, #1
 80205fc:	9304      	str	r3, [sp, #16]
 80205fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020602:	4826      	ldr	r0, [pc, #152]	; (802069c <_svfiprintf_r+0x1f0>)
 8020604:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020608:	2206      	movs	r2, #6
 802060a:	f7df fdf9 	bl	8000200 <memchr>
 802060e:	2800      	cmp	r0, #0
 8020610:	d038      	beq.n	8020684 <_svfiprintf_r+0x1d8>
 8020612:	4b23      	ldr	r3, [pc, #140]	; (80206a0 <_svfiprintf_r+0x1f4>)
 8020614:	bb1b      	cbnz	r3, 802065e <_svfiprintf_r+0x1b2>
 8020616:	9b03      	ldr	r3, [sp, #12]
 8020618:	3307      	adds	r3, #7
 802061a:	f023 0307 	bic.w	r3, r3, #7
 802061e:	3308      	adds	r3, #8
 8020620:	9303      	str	r3, [sp, #12]
 8020622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020624:	4433      	add	r3, r6
 8020626:	9309      	str	r3, [sp, #36]	; 0x24
 8020628:	e767      	b.n	80204fa <_svfiprintf_r+0x4e>
 802062a:	fb0c 3202 	mla	r2, ip, r2, r3
 802062e:	460c      	mov	r4, r1
 8020630:	2001      	movs	r0, #1
 8020632:	e7a5      	b.n	8020580 <_svfiprintf_r+0xd4>
 8020634:	2300      	movs	r3, #0
 8020636:	3401      	adds	r4, #1
 8020638:	9305      	str	r3, [sp, #20]
 802063a:	4619      	mov	r1, r3
 802063c:	f04f 0c0a 	mov.w	ip, #10
 8020640:	4620      	mov	r0, r4
 8020642:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020646:	3a30      	subs	r2, #48	; 0x30
 8020648:	2a09      	cmp	r2, #9
 802064a:	d903      	bls.n	8020654 <_svfiprintf_r+0x1a8>
 802064c:	2b00      	cmp	r3, #0
 802064e:	d0c5      	beq.n	80205dc <_svfiprintf_r+0x130>
 8020650:	9105      	str	r1, [sp, #20]
 8020652:	e7c3      	b.n	80205dc <_svfiprintf_r+0x130>
 8020654:	fb0c 2101 	mla	r1, ip, r1, r2
 8020658:	4604      	mov	r4, r0
 802065a:	2301      	movs	r3, #1
 802065c:	e7f0      	b.n	8020640 <_svfiprintf_r+0x194>
 802065e:	ab03      	add	r3, sp, #12
 8020660:	9300      	str	r3, [sp, #0]
 8020662:	462a      	mov	r2, r5
 8020664:	4b0f      	ldr	r3, [pc, #60]	; (80206a4 <_svfiprintf_r+0x1f8>)
 8020666:	a904      	add	r1, sp, #16
 8020668:	4638      	mov	r0, r7
 802066a:	f3af 8000 	nop.w
 802066e:	1c42      	adds	r2, r0, #1
 8020670:	4606      	mov	r6, r0
 8020672:	d1d6      	bne.n	8020622 <_svfiprintf_r+0x176>
 8020674:	89ab      	ldrh	r3, [r5, #12]
 8020676:	065b      	lsls	r3, r3, #25
 8020678:	f53f af2c 	bmi.w	80204d4 <_svfiprintf_r+0x28>
 802067c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802067e:	b01d      	add	sp, #116	; 0x74
 8020680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020684:	ab03      	add	r3, sp, #12
 8020686:	9300      	str	r3, [sp, #0]
 8020688:	462a      	mov	r2, r5
 802068a:	4b06      	ldr	r3, [pc, #24]	; (80206a4 <_svfiprintf_r+0x1f8>)
 802068c:	a904      	add	r1, sp, #16
 802068e:	4638      	mov	r0, r7
 8020690:	f000 f9d4 	bl	8020a3c <_printf_i>
 8020694:	e7eb      	b.n	802066e <_svfiprintf_r+0x1c2>
 8020696:	bf00      	nop
 8020698:	08027964 	.word	0x08027964
 802069c:	0802796e 	.word	0x0802796e
 80206a0:	00000000 	.word	0x00000000
 80206a4:	080203f5 	.word	0x080203f5
 80206a8:	0802796a 	.word	0x0802796a

080206ac <__sfputc_r>:
 80206ac:	6893      	ldr	r3, [r2, #8]
 80206ae:	3b01      	subs	r3, #1
 80206b0:	2b00      	cmp	r3, #0
 80206b2:	b410      	push	{r4}
 80206b4:	6093      	str	r3, [r2, #8]
 80206b6:	da08      	bge.n	80206ca <__sfputc_r+0x1e>
 80206b8:	6994      	ldr	r4, [r2, #24]
 80206ba:	42a3      	cmp	r3, r4
 80206bc:	db01      	blt.n	80206c2 <__sfputc_r+0x16>
 80206be:	290a      	cmp	r1, #10
 80206c0:	d103      	bne.n	80206ca <__sfputc_r+0x1e>
 80206c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80206c6:	f000 bbf1 	b.w	8020eac <__swbuf_r>
 80206ca:	6813      	ldr	r3, [r2, #0]
 80206cc:	1c58      	adds	r0, r3, #1
 80206ce:	6010      	str	r0, [r2, #0]
 80206d0:	7019      	strb	r1, [r3, #0]
 80206d2:	4608      	mov	r0, r1
 80206d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80206d8:	4770      	bx	lr

080206da <__sfputs_r>:
 80206da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80206dc:	4606      	mov	r6, r0
 80206de:	460f      	mov	r7, r1
 80206e0:	4614      	mov	r4, r2
 80206e2:	18d5      	adds	r5, r2, r3
 80206e4:	42ac      	cmp	r4, r5
 80206e6:	d101      	bne.n	80206ec <__sfputs_r+0x12>
 80206e8:	2000      	movs	r0, #0
 80206ea:	e007      	b.n	80206fc <__sfputs_r+0x22>
 80206ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80206f0:	463a      	mov	r2, r7
 80206f2:	4630      	mov	r0, r6
 80206f4:	f7ff ffda 	bl	80206ac <__sfputc_r>
 80206f8:	1c43      	adds	r3, r0, #1
 80206fa:	d1f3      	bne.n	80206e4 <__sfputs_r+0xa>
 80206fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020700 <_vfiprintf_r>:
 8020700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020704:	460d      	mov	r5, r1
 8020706:	b09d      	sub	sp, #116	; 0x74
 8020708:	4614      	mov	r4, r2
 802070a:	4698      	mov	r8, r3
 802070c:	4606      	mov	r6, r0
 802070e:	b118      	cbz	r0, 8020718 <_vfiprintf_r+0x18>
 8020710:	6983      	ldr	r3, [r0, #24]
 8020712:	b90b      	cbnz	r3, 8020718 <_vfiprintf_r+0x18>
 8020714:	f7ff fc08 	bl	801ff28 <__sinit>
 8020718:	4b89      	ldr	r3, [pc, #548]	; (8020940 <_vfiprintf_r+0x240>)
 802071a:	429d      	cmp	r5, r3
 802071c:	d11b      	bne.n	8020756 <_vfiprintf_r+0x56>
 802071e:	6875      	ldr	r5, [r6, #4]
 8020720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020722:	07d9      	lsls	r1, r3, #31
 8020724:	d405      	bmi.n	8020732 <_vfiprintf_r+0x32>
 8020726:	89ab      	ldrh	r3, [r5, #12]
 8020728:	059a      	lsls	r2, r3, #22
 802072a:	d402      	bmi.n	8020732 <_vfiprintf_r+0x32>
 802072c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802072e:	f7ff fda3 	bl	8020278 <__retarget_lock_acquire_recursive>
 8020732:	89ab      	ldrh	r3, [r5, #12]
 8020734:	071b      	lsls	r3, r3, #28
 8020736:	d501      	bpl.n	802073c <_vfiprintf_r+0x3c>
 8020738:	692b      	ldr	r3, [r5, #16]
 802073a:	b9eb      	cbnz	r3, 8020778 <_vfiprintf_r+0x78>
 802073c:	4629      	mov	r1, r5
 802073e:	4630      	mov	r0, r6
 8020740:	f000 fc18 	bl	8020f74 <__swsetup_r>
 8020744:	b1c0      	cbz	r0, 8020778 <_vfiprintf_r+0x78>
 8020746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020748:	07dc      	lsls	r4, r3, #31
 802074a:	d50e      	bpl.n	802076a <_vfiprintf_r+0x6a>
 802074c:	f04f 30ff 	mov.w	r0, #4294967295
 8020750:	b01d      	add	sp, #116	; 0x74
 8020752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020756:	4b7b      	ldr	r3, [pc, #492]	; (8020944 <_vfiprintf_r+0x244>)
 8020758:	429d      	cmp	r5, r3
 802075a:	d101      	bne.n	8020760 <_vfiprintf_r+0x60>
 802075c:	68b5      	ldr	r5, [r6, #8]
 802075e:	e7df      	b.n	8020720 <_vfiprintf_r+0x20>
 8020760:	4b79      	ldr	r3, [pc, #484]	; (8020948 <_vfiprintf_r+0x248>)
 8020762:	429d      	cmp	r5, r3
 8020764:	bf08      	it	eq
 8020766:	68f5      	ldreq	r5, [r6, #12]
 8020768:	e7da      	b.n	8020720 <_vfiprintf_r+0x20>
 802076a:	89ab      	ldrh	r3, [r5, #12]
 802076c:	0598      	lsls	r0, r3, #22
 802076e:	d4ed      	bmi.n	802074c <_vfiprintf_r+0x4c>
 8020770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020772:	f7ff fd83 	bl	802027c <__retarget_lock_release_recursive>
 8020776:	e7e9      	b.n	802074c <_vfiprintf_r+0x4c>
 8020778:	2300      	movs	r3, #0
 802077a:	9309      	str	r3, [sp, #36]	; 0x24
 802077c:	2320      	movs	r3, #32
 802077e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020782:	f8cd 800c 	str.w	r8, [sp, #12]
 8020786:	2330      	movs	r3, #48	; 0x30
 8020788:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802094c <_vfiprintf_r+0x24c>
 802078c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020790:	f04f 0901 	mov.w	r9, #1
 8020794:	4623      	mov	r3, r4
 8020796:	469a      	mov	sl, r3
 8020798:	f813 2b01 	ldrb.w	r2, [r3], #1
 802079c:	b10a      	cbz	r2, 80207a2 <_vfiprintf_r+0xa2>
 802079e:	2a25      	cmp	r2, #37	; 0x25
 80207a0:	d1f9      	bne.n	8020796 <_vfiprintf_r+0x96>
 80207a2:	ebba 0b04 	subs.w	fp, sl, r4
 80207a6:	d00b      	beq.n	80207c0 <_vfiprintf_r+0xc0>
 80207a8:	465b      	mov	r3, fp
 80207aa:	4622      	mov	r2, r4
 80207ac:	4629      	mov	r1, r5
 80207ae:	4630      	mov	r0, r6
 80207b0:	f7ff ff93 	bl	80206da <__sfputs_r>
 80207b4:	3001      	adds	r0, #1
 80207b6:	f000 80aa 	beq.w	802090e <_vfiprintf_r+0x20e>
 80207ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80207bc:	445a      	add	r2, fp
 80207be:	9209      	str	r2, [sp, #36]	; 0x24
 80207c0:	f89a 3000 	ldrb.w	r3, [sl]
 80207c4:	2b00      	cmp	r3, #0
 80207c6:	f000 80a2 	beq.w	802090e <_vfiprintf_r+0x20e>
 80207ca:	2300      	movs	r3, #0
 80207cc:	f04f 32ff 	mov.w	r2, #4294967295
 80207d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80207d4:	f10a 0a01 	add.w	sl, sl, #1
 80207d8:	9304      	str	r3, [sp, #16]
 80207da:	9307      	str	r3, [sp, #28]
 80207dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80207e0:	931a      	str	r3, [sp, #104]	; 0x68
 80207e2:	4654      	mov	r4, sl
 80207e4:	2205      	movs	r2, #5
 80207e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80207ea:	4858      	ldr	r0, [pc, #352]	; (802094c <_vfiprintf_r+0x24c>)
 80207ec:	f7df fd08 	bl	8000200 <memchr>
 80207f0:	9a04      	ldr	r2, [sp, #16]
 80207f2:	b9d8      	cbnz	r0, 802082c <_vfiprintf_r+0x12c>
 80207f4:	06d1      	lsls	r1, r2, #27
 80207f6:	bf44      	itt	mi
 80207f8:	2320      	movmi	r3, #32
 80207fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80207fe:	0713      	lsls	r3, r2, #28
 8020800:	bf44      	itt	mi
 8020802:	232b      	movmi	r3, #43	; 0x2b
 8020804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020808:	f89a 3000 	ldrb.w	r3, [sl]
 802080c:	2b2a      	cmp	r3, #42	; 0x2a
 802080e:	d015      	beq.n	802083c <_vfiprintf_r+0x13c>
 8020810:	9a07      	ldr	r2, [sp, #28]
 8020812:	4654      	mov	r4, sl
 8020814:	2000      	movs	r0, #0
 8020816:	f04f 0c0a 	mov.w	ip, #10
 802081a:	4621      	mov	r1, r4
 802081c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020820:	3b30      	subs	r3, #48	; 0x30
 8020822:	2b09      	cmp	r3, #9
 8020824:	d94e      	bls.n	80208c4 <_vfiprintf_r+0x1c4>
 8020826:	b1b0      	cbz	r0, 8020856 <_vfiprintf_r+0x156>
 8020828:	9207      	str	r2, [sp, #28]
 802082a:	e014      	b.n	8020856 <_vfiprintf_r+0x156>
 802082c:	eba0 0308 	sub.w	r3, r0, r8
 8020830:	fa09 f303 	lsl.w	r3, r9, r3
 8020834:	4313      	orrs	r3, r2
 8020836:	9304      	str	r3, [sp, #16]
 8020838:	46a2      	mov	sl, r4
 802083a:	e7d2      	b.n	80207e2 <_vfiprintf_r+0xe2>
 802083c:	9b03      	ldr	r3, [sp, #12]
 802083e:	1d19      	adds	r1, r3, #4
 8020840:	681b      	ldr	r3, [r3, #0]
 8020842:	9103      	str	r1, [sp, #12]
 8020844:	2b00      	cmp	r3, #0
 8020846:	bfbb      	ittet	lt
 8020848:	425b      	neglt	r3, r3
 802084a:	f042 0202 	orrlt.w	r2, r2, #2
 802084e:	9307      	strge	r3, [sp, #28]
 8020850:	9307      	strlt	r3, [sp, #28]
 8020852:	bfb8      	it	lt
 8020854:	9204      	strlt	r2, [sp, #16]
 8020856:	7823      	ldrb	r3, [r4, #0]
 8020858:	2b2e      	cmp	r3, #46	; 0x2e
 802085a:	d10c      	bne.n	8020876 <_vfiprintf_r+0x176>
 802085c:	7863      	ldrb	r3, [r4, #1]
 802085e:	2b2a      	cmp	r3, #42	; 0x2a
 8020860:	d135      	bne.n	80208ce <_vfiprintf_r+0x1ce>
 8020862:	9b03      	ldr	r3, [sp, #12]
 8020864:	1d1a      	adds	r2, r3, #4
 8020866:	681b      	ldr	r3, [r3, #0]
 8020868:	9203      	str	r2, [sp, #12]
 802086a:	2b00      	cmp	r3, #0
 802086c:	bfb8      	it	lt
 802086e:	f04f 33ff 	movlt.w	r3, #4294967295
 8020872:	3402      	adds	r4, #2
 8020874:	9305      	str	r3, [sp, #20]
 8020876:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802095c <_vfiprintf_r+0x25c>
 802087a:	7821      	ldrb	r1, [r4, #0]
 802087c:	2203      	movs	r2, #3
 802087e:	4650      	mov	r0, sl
 8020880:	f7df fcbe 	bl	8000200 <memchr>
 8020884:	b140      	cbz	r0, 8020898 <_vfiprintf_r+0x198>
 8020886:	2340      	movs	r3, #64	; 0x40
 8020888:	eba0 000a 	sub.w	r0, r0, sl
 802088c:	fa03 f000 	lsl.w	r0, r3, r0
 8020890:	9b04      	ldr	r3, [sp, #16]
 8020892:	4303      	orrs	r3, r0
 8020894:	3401      	adds	r4, #1
 8020896:	9304      	str	r3, [sp, #16]
 8020898:	f814 1b01 	ldrb.w	r1, [r4], #1
 802089c:	482c      	ldr	r0, [pc, #176]	; (8020950 <_vfiprintf_r+0x250>)
 802089e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80208a2:	2206      	movs	r2, #6
 80208a4:	f7df fcac 	bl	8000200 <memchr>
 80208a8:	2800      	cmp	r0, #0
 80208aa:	d03f      	beq.n	802092c <_vfiprintf_r+0x22c>
 80208ac:	4b29      	ldr	r3, [pc, #164]	; (8020954 <_vfiprintf_r+0x254>)
 80208ae:	bb1b      	cbnz	r3, 80208f8 <_vfiprintf_r+0x1f8>
 80208b0:	9b03      	ldr	r3, [sp, #12]
 80208b2:	3307      	adds	r3, #7
 80208b4:	f023 0307 	bic.w	r3, r3, #7
 80208b8:	3308      	adds	r3, #8
 80208ba:	9303      	str	r3, [sp, #12]
 80208bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208be:	443b      	add	r3, r7
 80208c0:	9309      	str	r3, [sp, #36]	; 0x24
 80208c2:	e767      	b.n	8020794 <_vfiprintf_r+0x94>
 80208c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80208c8:	460c      	mov	r4, r1
 80208ca:	2001      	movs	r0, #1
 80208cc:	e7a5      	b.n	802081a <_vfiprintf_r+0x11a>
 80208ce:	2300      	movs	r3, #0
 80208d0:	3401      	adds	r4, #1
 80208d2:	9305      	str	r3, [sp, #20]
 80208d4:	4619      	mov	r1, r3
 80208d6:	f04f 0c0a 	mov.w	ip, #10
 80208da:	4620      	mov	r0, r4
 80208dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80208e0:	3a30      	subs	r2, #48	; 0x30
 80208e2:	2a09      	cmp	r2, #9
 80208e4:	d903      	bls.n	80208ee <_vfiprintf_r+0x1ee>
 80208e6:	2b00      	cmp	r3, #0
 80208e8:	d0c5      	beq.n	8020876 <_vfiprintf_r+0x176>
 80208ea:	9105      	str	r1, [sp, #20]
 80208ec:	e7c3      	b.n	8020876 <_vfiprintf_r+0x176>
 80208ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80208f2:	4604      	mov	r4, r0
 80208f4:	2301      	movs	r3, #1
 80208f6:	e7f0      	b.n	80208da <_vfiprintf_r+0x1da>
 80208f8:	ab03      	add	r3, sp, #12
 80208fa:	9300      	str	r3, [sp, #0]
 80208fc:	462a      	mov	r2, r5
 80208fe:	4b16      	ldr	r3, [pc, #88]	; (8020958 <_vfiprintf_r+0x258>)
 8020900:	a904      	add	r1, sp, #16
 8020902:	4630      	mov	r0, r6
 8020904:	f3af 8000 	nop.w
 8020908:	4607      	mov	r7, r0
 802090a:	1c78      	adds	r0, r7, #1
 802090c:	d1d6      	bne.n	80208bc <_vfiprintf_r+0x1bc>
 802090e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020910:	07d9      	lsls	r1, r3, #31
 8020912:	d405      	bmi.n	8020920 <_vfiprintf_r+0x220>
 8020914:	89ab      	ldrh	r3, [r5, #12]
 8020916:	059a      	lsls	r2, r3, #22
 8020918:	d402      	bmi.n	8020920 <_vfiprintf_r+0x220>
 802091a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802091c:	f7ff fcae 	bl	802027c <__retarget_lock_release_recursive>
 8020920:	89ab      	ldrh	r3, [r5, #12]
 8020922:	065b      	lsls	r3, r3, #25
 8020924:	f53f af12 	bmi.w	802074c <_vfiprintf_r+0x4c>
 8020928:	9809      	ldr	r0, [sp, #36]	; 0x24
 802092a:	e711      	b.n	8020750 <_vfiprintf_r+0x50>
 802092c:	ab03      	add	r3, sp, #12
 802092e:	9300      	str	r3, [sp, #0]
 8020930:	462a      	mov	r2, r5
 8020932:	4b09      	ldr	r3, [pc, #36]	; (8020958 <_vfiprintf_r+0x258>)
 8020934:	a904      	add	r1, sp, #16
 8020936:	4630      	mov	r0, r6
 8020938:	f000 f880 	bl	8020a3c <_printf_i>
 802093c:	e7e4      	b.n	8020908 <_vfiprintf_r+0x208>
 802093e:	bf00      	nop
 8020940:	08027924 	.word	0x08027924
 8020944:	08027944 	.word	0x08027944
 8020948:	08027904 	.word	0x08027904
 802094c:	08027964 	.word	0x08027964
 8020950:	0802796e 	.word	0x0802796e
 8020954:	00000000 	.word	0x00000000
 8020958:	080206db 	.word	0x080206db
 802095c:	0802796a 	.word	0x0802796a

08020960 <_printf_common>:
 8020960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020964:	4616      	mov	r6, r2
 8020966:	4699      	mov	r9, r3
 8020968:	688a      	ldr	r2, [r1, #8]
 802096a:	690b      	ldr	r3, [r1, #16]
 802096c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020970:	4293      	cmp	r3, r2
 8020972:	bfb8      	it	lt
 8020974:	4613      	movlt	r3, r2
 8020976:	6033      	str	r3, [r6, #0]
 8020978:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802097c:	4607      	mov	r7, r0
 802097e:	460c      	mov	r4, r1
 8020980:	b10a      	cbz	r2, 8020986 <_printf_common+0x26>
 8020982:	3301      	adds	r3, #1
 8020984:	6033      	str	r3, [r6, #0]
 8020986:	6823      	ldr	r3, [r4, #0]
 8020988:	0699      	lsls	r1, r3, #26
 802098a:	bf42      	ittt	mi
 802098c:	6833      	ldrmi	r3, [r6, #0]
 802098e:	3302      	addmi	r3, #2
 8020990:	6033      	strmi	r3, [r6, #0]
 8020992:	6825      	ldr	r5, [r4, #0]
 8020994:	f015 0506 	ands.w	r5, r5, #6
 8020998:	d106      	bne.n	80209a8 <_printf_common+0x48>
 802099a:	f104 0a19 	add.w	sl, r4, #25
 802099e:	68e3      	ldr	r3, [r4, #12]
 80209a0:	6832      	ldr	r2, [r6, #0]
 80209a2:	1a9b      	subs	r3, r3, r2
 80209a4:	42ab      	cmp	r3, r5
 80209a6:	dc26      	bgt.n	80209f6 <_printf_common+0x96>
 80209a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80209ac:	1e13      	subs	r3, r2, #0
 80209ae:	6822      	ldr	r2, [r4, #0]
 80209b0:	bf18      	it	ne
 80209b2:	2301      	movne	r3, #1
 80209b4:	0692      	lsls	r2, r2, #26
 80209b6:	d42b      	bmi.n	8020a10 <_printf_common+0xb0>
 80209b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80209bc:	4649      	mov	r1, r9
 80209be:	4638      	mov	r0, r7
 80209c0:	47c0      	blx	r8
 80209c2:	3001      	adds	r0, #1
 80209c4:	d01e      	beq.n	8020a04 <_printf_common+0xa4>
 80209c6:	6823      	ldr	r3, [r4, #0]
 80209c8:	68e5      	ldr	r5, [r4, #12]
 80209ca:	6832      	ldr	r2, [r6, #0]
 80209cc:	f003 0306 	and.w	r3, r3, #6
 80209d0:	2b04      	cmp	r3, #4
 80209d2:	bf08      	it	eq
 80209d4:	1aad      	subeq	r5, r5, r2
 80209d6:	68a3      	ldr	r3, [r4, #8]
 80209d8:	6922      	ldr	r2, [r4, #16]
 80209da:	bf0c      	ite	eq
 80209dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80209e0:	2500      	movne	r5, #0
 80209e2:	4293      	cmp	r3, r2
 80209e4:	bfc4      	itt	gt
 80209e6:	1a9b      	subgt	r3, r3, r2
 80209e8:	18ed      	addgt	r5, r5, r3
 80209ea:	2600      	movs	r6, #0
 80209ec:	341a      	adds	r4, #26
 80209ee:	42b5      	cmp	r5, r6
 80209f0:	d11a      	bne.n	8020a28 <_printf_common+0xc8>
 80209f2:	2000      	movs	r0, #0
 80209f4:	e008      	b.n	8020a08 <_printf_common+0xa8>
 80209f6:	2301      	movs	r3, #1
 80209f8:	4652      	mov	r2, sl
 80209fa:	4649      	mov	r1, r9
 80209fc:	4638      	mov	r0, r7
 80209fe:	47c0      	blx	r8
 8020a00:	3001      	adds	r0, #1
 8020a02:	d103      	bne.n	8020a0c <_printf_common+0xac>
 8020a04:	f04f 30ff 	mov.w	r0, #4294967295
 8020a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a0c:	3501      	adds	r5, #1
 8020a0e:	e7c6      	b.n	802099e <_printf_common+0x3e>
 8020a10:	18e1      	adds	r1, r4, r3
 8020a12:	1c5a      	adds	r2, r3, #1
 8020a14:	2030      	movs	r0, #48	; 0x30
 8020a16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020a1a:	4422      	add	r2, r4
 8020a1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020a20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020a24:	3302      	adds	r3, #2
 8020a26:	e7c7      	b.n	80209b8 <_printf_common+0x58>
 8020a28:	2301      	movs	r3, #1
 8020a2a:	4622      	mov	r2, r4
 8020a2c:	4649      	mov	r1, r9
 8020a2e:	4638      	mov	r0, r7
 8020a30:	47c0      	blx	r8
 8020a32:	3001      	adds	r0, #1
 8020a34:	d0e6      	beq.n	8020a04 <_printf_common+0xa4>
 8020a36:	3601      	adds	r6, #1
 8020a38:	e7d9      	b.n	80209ee <_printf_common+0x8e>
	...

08020a3c <_printf_i>:
 8020a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020a40:	460c      	mov	r4, r1
 8020a42:	4691      	mov	r9, r2
 8020a44:	7e27      	ldrb	r7, [r4, #24]
 8020a46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020a48:	2f78      	cmp	r7, #120	; 0x78
 8020a4a:	4680      	mov	r8, r0
 8020a4c:	469a      	mov	sl, r3
 8020a4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020a52:	d807      	bhi.n	8020a64 <_printf_i+0x28>
 8020a54:	2f62      	cmp	r7, #98	; 0x62
 8020a56:	d80a      	bhi.n	8020a6e <_printf_i+0x32>
 8020a58:	2f00      	cmp	r7, #0
 8020a5a:	f000 80d8 	beq.w	8020c0e <_printf_i+0x1d2>
 8020a5e:	2f58      	cmp	r7, #88	; 0x58
 8020a60:	f000 80a3 	beq.w	8020baa <_printf_i+0x16e>
 8020a64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020a68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020a6c:	e03a      	b.n	8020ae4 <_printf_i+0xa8>
 8020a6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8020a72:	2b15      	cmp	r3, #21
 8020a74:	d8f6      	bhi.n	8020a64 <_printf_i+0x28>
 8020a76:	a001      	add	r0, pc, #4	; (adr r0, 8020a7c <_printf_i+0x40>)
 8020a78:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8020a7c:	08020ad5 	.word	0x08020ad5
 8020a80:	08020ae9 	.word	0x08020ae9
 8020a84:	08020a65 	.word	0x08020a65
 8020a88:	08020a65 	.word	0x08020a65
 8020a8c:	08020a65 	.word	0x08020a65
 8020a90:	08020a65 	.word	0x08020a65
 8020a94:	08020ae9 	.word	0x08020ae9
 8020a98:	08020a65 	.word	0x08020a65
 8020a9c:	08020a65 	.word	0x08020a65
 8020aa0:	08020a65 	.word	0x08020a65
 8020aa4:	08020a65 	.word	0x08020a65
 8020aa8:	08020bf5 	.word	0x08020bf5
 8020aac:	08020b19 	.word	0x08020b19
 8020ab0:	08020bd7 	.word	0x08020bd7
 8020ab4:	08020a65 	.word	0x08020a65
 8020ab8:	08020a65 	.word	0x08020a65
 8020abc:	08020c17 	.word	0x08020c17
 8020ac0:	08020a65 	.word	0x08020a65
 8020ac4:	08020b19 	.word	0x08020b19
 8020ac8:	08020a65 	.word	0x08020a65
 8020acc:	08020a65 	.word	0x08020a65
 8020ad0:	08020bdf 	.word	0x08020bdf
 8020ad4:	680b      	ldr	r3, [r1, #0]
 8020ad6:	1d1a      	adds	r2, r3, #4
 8020ad8:	681b      	ldr	r3, [r3, #0]
 8020ada:	600a      	str	r2, [r1, #0]
 8020adc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020ae0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020ae4:	2301      	movs	r3, #1
 8020ae6:	e0a3      	b.n	8020c30 <_printf_i+0x1f4>
 8020ae8:	6825      	ldr	r5, [r4, #0]
 8020aea:	6808      	ldr	r0, [r1, #0]
 8020aec:	062e      	lsls	r6, r5, #24
 8020aee:	f100 0304 	add.w	r3, r0, #4
 8020af2:	d50a      	bpl.n	8020b0a <_printf_i+0xce>
 8020af4:	6805      	ldr	r5, [r0, #0]
 8020af6:	600b      	str	r3, [r1, #0]
 8020af8:	2d00      	cmp	r5, #0
 8020afa:	da03      	bge.n	8020b04 <_printf_i+0xc8>
 8020afc:	232d      	movs	r3, #45	; 0x2d
 8020afe:	426d      	negs	r5, r5
 8020b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020b04:	485e      	ldr	r0, [pc, #376]	; (8020c80 <_printf_i+0x244>)
 8020b06:	230a      	movs	r3, #10
 8020b08:	e019      	b.n	8020b3e <_printf_i+0x102>
 8020b0a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8020b0e:	6805      	ldr	r5, [r0, #0]
 8020b10:	600b      	str	r3, [r1, #0]
 8020b12:	bf18      	it	ne
 8020b14:	b22d      	sxthne	r5, r5
 8020b16:	e7ef      	b.n	8020af8 <_printf_i+0xbc>
 8020b18:	680b      	ldr	r3, [r1, #0]
 8020b1a:	6825      	ldr	r5, [r4, #0]
 8020b1c:	1d18      	adds	r0, r3, #4
 8020b1e:	6008      	str	r0, [r1, #0]
 8020b20:	0628      	lsls	r0, r5, #24
 8020b22:	d501      	bpl.n	8020b28 <_printf_i+0xec>
 8020b24:	681d      	ldr	r5, [r3, #0]
 8020b26:	e002      	b.n	8020b2e <_printf_i+0xf2>
 8020b28:	0669      	lsls	r1, r5, #25
 8020b2a:	d5fb      	bpl.n	8020b24 <_printf_i+0xe8>
 8020b2c:	881d      	ldrh	r5, [r3, #0]
 8020b2e:	4854      	ldr	r0, [pc, #336]	; (8020c80 <_printf_i+0x244>)
 8020b30:	2f6f      	cmp	r7, #111	; 0x6f
 8020b32:	bf0c      	ite	eq
 8020b34:	2308      	moveq	r3, #8
 8020b36:	230a      	movne	r3, #10
 8020b38:	2100      	movs	r1, #0
 8020b3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020b3e:	6866      	ldr	r6, [r4, #4]
 8020b40:	60a6      	str	r6, [r4, #8]
 8020b42:	2e00      	cmp	r6, #0
 8020b44:	bfa2      	ittt	ge
 8020b46:	6821      	ldrge	r1, [r4, #0]
 8020b48:	f021 0104 	bicge.w	r1, r1, #4
 8020b4c:	6021      	strge	r1, [r4, #0]
 8020b4e:	b90d      	cbnz	r5, 8020b54 <_printf_i+0x118>
 8020b50:	2e00      	cmp	r6, #0
 8020b52:	d04d      	beq.n	8020bf0 <_printf_i+0x1b4>
 8020b54:	4616      	mov	r6, r2
 8020b56:	fbb5 f1f3 	udiv	r1, r5, r3
 8020b5a:	fb03 5711 	mls	r7, r3, r1, r5
 8020b5e:	5dc7      	ldrb	r7, [r0, r7]
 8020b60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020b64:	462f      	mov	r7, r5
 8020b66:	42bb      	cmp	r3, r7
 8020b68:	460d      	mov	r5, r1
 8020b6a:	d9f4      	bls.n	8020b56 <_printf_i+0x11a>
 8020b6c:	2b08      	cmp	r3, #8
 8020b6e:	d10b      	bne.n	8020b88 <_printf_i+0x14c>
 8020b70:	6823      	ldr	r3, [r4, #0]
 8020b72:	07df      	lsls	r7, r3, #31
 8020b74:	d508      	bpl.n	8020b88 <_printf_i+0x14c>
 8020b76:	6923      	ldr	r3, [r4, #16]
 8020b78:	6861      	ldr	r1, [r4, #4]
 8020b7a:	4299      	cmp	r1, r3
 8020b7c:	bfde      	ittt	le
 8020b7e:	2330      	movle	r3, #48	; 0x30
 8020b80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020b84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8020b88:	1b92      	subs	r2, r2, r6
 8020b8a:	6122      	str	r2, [r4, #16]
 8020b8c:	f8cd a000 	str.w	sl, [sp]
 8020b90:	464b      	mov	r3, r9
 8020b92:	aa03      	add	r2, sp, #12
 8020b94:	4621      	mov	r1, r4
 8020b96:	4640      	mov	r0, r8
 8020b98:	f7ff fee2 	bl	8020960 <_printf_common>
 8020b9c:	3001      	adds	r0, #1
 8020b9e:	d14c      	bne.n	8020c3a <_printf_i+0x1fe>
 8020ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8020ba4:	b004      	add	sp, #16
 8020ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020baa:	4835      	ldr	r0, [pc, #212]	; (8020c80 <_printf_i+0x244>)
 8020bac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8020bb0:	6823      	ldr	r3, [r4, #0]
 8020bb2:	680e      	ldr	r6, [r1, #0]
 8020bb4:	061f      	lsls	r7, r3, #24
 8020bb6:	f856 5b04 	ldr.w	r5, [r6], #4
 8020bba:	600e      	str	r6, [r1, #0]
 8020bbc:	d514      	bpl.n	8020be8 <_printf_i+0x1ac>
 8020bbe:	07d9      	lsls	r1, r3, #31
 8020bc0:	bf44      	itt	mi
 8020bc2:	f043 0320 	orrmi.w	r3, r3, #32
 8020bc6:	6023      	strmi	r3, [r4, #0]
 8020bc8:	b91d      	cbnz	r5, 8020bd2 <_printf_i+0x196>
 8020bca:	6823      	ldr	r3, [r4, #0]
 8020bcc:	f023 0320 	bic.w	r3, r3, #32
 8020bd0:	6023      	str	r3, [r4, #0]
 8020bd2:	2310      	movs	r3, #16
 8020bd4:	e7b0      	b.n	8020b38 <_printf_i+0xfc>
 8020bd6:	6823      	ldr	r3, [r4, #0]
 8020bd8:	f043 0320 	orr.w	r3, r3, #32
 8020bdc:	6023      	str	r3, [r4, #0]
 8020bde:	2378      	movs	r3, #120	; 0x78
 8020be0:	4828      	ldr	r0, [pc, #160]	; (8020c84 <_printf_i+0x248>)
 8020be2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020be6:	e7e3      	b.n	8020bb0 <_printf_i+0x174>
 8020be8:	065e      	lsls	r6, r3, #25
 8020bea:	bf48      	it	mi
 8020bec:	b2ad      	uxthmi	r5, r5
 8020bee:	e7e6      	b.n	8020bbe <_printf_i+0x182>
 8020bf0:	4616      	mov	r6, r2
 8020bf2:	e7bb      	b.n	8020b6c <_printf_i+0x130>
 8020bf4:	680b      	ldr	r3, [r1, #0]
 8020bf6:	6826      	ldr	r6, [r4, #0]
 8020bf8:	6960      	ldr	r0, [r4, #20]
 8020bfa:	1d1d      	adds	r5, r3, #4
 8020bfc:	600d      	str	r5, [r1, #0]
 8020bfe:	0635      	lsls	r5, r6, #24
 8020c00:	681b      	ldr	r3, [r3, #0]
 8020c02:	d501      	bpl.n	8020c08 <_printf_i+0x1cc>
 8020c04:	6018      	str	r0, [r3, #0]
 8020c06:	e002      	b.n	8020c0e <_printf_i+0x1d2>
 8020c08:	0671      	lsls	r1, r6, #25
 8020c0a:	d5fb      	bpl.n	8020c04 <_printf_i+0x1c8>
 8020c0c:	8018      	strh	r0, [r3, #0]
 8020c0e:	2300      	movs	r3, #0
 8020c10:	6123      	str	r3, [r4, #16]
 8020c12:	4616      	mov	r6, r2
 8020c14:	e7ba      	b.n	8020b8c <_printf_i+0x150>
 8020c16:	680b      	ldr	r3, [r1, #0]
 8020c18:	1d1a      	adds	r2, r3, #4
 8020c1a:	600a      	str	r2, [r1, #0]
 8020c1c:	681e      	ldr	r6, [r3, #0]
 8020c1e:	6862      	ldr	r2, [r4, #4]
 8020c20:	2100      	movs	r1, #0
 8020c22:	4630      	mov	r0, r6
 8020c24:	f7df faec 	bl	8000200 <memchr>
 8020c28:	b108      	cbz	r0, 8020c2e <_printf_i+0x1f2>
 8020c2a:	1b80      	subs	r0, r0, r6
 8020c2c:	6060      	str	r0, [r4, #4]
 8020c2e:	6863      	ldr	r3, [r4, #4]
 8020c30:	6123      	str	r3, [r4, #16]
 8020c32:	2300      	movs	r3, #0
 8020c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020c38:	e7a8      	b.n	8020b8c <_printf_i+0x150>
 8020c3a:	6923      	ldr	r3, [r4, #16]
 8020c3c:	4632      	mov	r2, r6
 8020c3e:	4649      	mov	r1, r9
 8020c40:	4640      	mov	r0, r8
 8020c42:	47d0      	blx	sl
 8020c44:	3001      	adds	r0, #1
 8020c46:	d0ab      	beq.n	8020ba0 <_printf_i+0x164>
 8020c48:	6823      	ldr	r3, [r4, #0]
 8020c4a:	079b      	lsls	r3, r3, #30
 8020c4c:	d413      	bmi.n	8020c76 <_printf_i+0x23a>
 8020c4e:	68e0      	ldr	r0, [r4, #12]
 8020c50:	9b03      	ldr	r3, [sp, #12]
 8020c52:	4298      	cmp	r0, r3
 8020c54:	bfb8      	it	lt
 8020c56:	4618      	movlt	r0, r3
 8020c58:	e7a4      	b.n	8020ba4 <_printf_i+0x168>
 8020c5a:	2301      	movs	r3, #1
 8020c5c:	4632      	mov	r2, r6
 8020c5e:	4649      	mov	r1, r9
 8020c60:	4640      	mov	r0, r8
 8020c62:	47d0      	blx	sl
 8020c64:	3001      	adds	r0, #1
 8020c66:	d09b      	beq.n	8020ba0 <_printf_i+0x164>
 8020c68:	3501      	adds	r5, #1
 8020c6a:	68e3      	ldr	r3, [r4, #12]
 8020c6c:	9903      	ldr	r1, [sp, #12]
 8020c6e:	1a5b      	subs	r3, r3, r1
 8020c70:	42ab      	cmp	r3, r5
 8020c72:	dcf2      	bgt.n	8020c5a <_printf_i+0x21e>
 8020c74:	e7eb      	b.n	8020c4e <_printf_i+0x212>
 8020c76:	2500      	movs	r5, #0
 8020c78:	f104 0619 	add.w	r6, r4, #25
 8020c7c:	e7f5      	b.n	8020c6a <_printf_i+0x22e>
 8020c7e:	bf00      	nop
 8020c80:	08027975 	.word	0x08027975
 8020c84:	08027986 	.word	0x08027986

08020c88 <_sbrk_r>:
 8020c88:	b538      	push	{r3, r4, r5, lr}
 8020c8a:	4d06      	ldr	r5, [pc, #24]	; (8020ca4 <_sbrk_r+0x1c>)
 8020c8c:	2300      	movs	r3, #0
 8020c8e:	4604      	mov	r4, r0
 8020c90:	4608      	mov	r0, r1
 8020c92:	602b      	str	r3, [r5, #0]
 8020c94:	f7e2 fee8 	bl	8003a68 <_sbrk>
 8020c98:	1c43      	adds	r3, r0, #1
 8020c9a:	d102      	bne.n	8020ca2 <_sbrk_r+0x1a>
 8020c9c:	682b      	ldr	r3, [r5, #0]
 8020c9e:	b103      	cbz	r3, 8020ca2 <_sbrk_r+0x1a>
 8020ca0:	6023      	str	r3, [r4, #0]
 8020ca2:	bd38      	pop	{r3, r4, r5, pc}
 8020ca4:	2000b8f0 	.word	0x2000b8f0

08020ca8 <siscanf>:
 8020ca8:	b40e      	push	{r1, r2, r3}
 8020caa:	b510      	push	{r4, lr}
 8020cac:	b09f      	sub	sp, #124	; 0x7c
 8020cae:	ac21      	add	r4, sp, #132	; 0x84
 8020cb0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8020cb4:	f854 2b04 	ldr.w	r2, [r4], #4
 8020cb8:	9201      	str	r2, [sp, #4]
 8020cba:	f8ad 101c 	strh.w	r1, [sp, #28]
 8020cbe:	9004      	str	r0, [sp, #16]
 8020cc0:	9008      	str	r0, [sp, #32]
 8020cc2:	f7df fa8f 	bl	80001e4 <strlen>
 8020cc6:	4b0c      	ldr	r3, [pc, #48]	; (8020cf8 <siscanf+0x50>)
 8020cc8:	9005      	str	r0, [sp, #20]
 8020cca:	9009      	str	r0, [sp, #36]	; 0x24
 8020ccc:	930d      	str	r3, [sp, #52]	; 0x34
 8020cce:	480b      	ldr	r0, [pc, #44]	; (8020cfc <siscanf+0x54>)
 8020cd0:	9a01      	ldr	r2, [sp, #4]
 8020cd2:	6800      	ldr	r0, [r0, #0]
 8020cd4:	9403      	str	r4, [sp, #12]
 8020cd6:	2300      	movs	r3, #0
 8020cd8:	9311      	str	r3, [sp, #68]	; 0x44
 8020cda:	9316      	str	r3, [sp, #88]	; 0x58
 8020cdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020ce0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020ce4:	a904      	add	r1, sp, #16
 8020ce6:	4623      	mov	r3, r4
 8020ce8:	f000 fb9a 	bl	8021420 <__ssvfiscanf_r>
 8020cec:	b01f      	add	sp, #124	; 0x7c
 8020cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020cf2:	b003      	add	sp, #12
 8020cf4:	4770      	bx	lr
 8020cf6:	bf00      	nop
 8020cf8:	08020d23 	.word	0x08020d23
 8020cfc:	200001ac 	.word	0x200001ac

08020d00 <__sread>:
 8020d00:	b510      	push	{r4, lr}
 8020d02:	460c      	mov	r4, r1
 8020d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d08:	f000 fe4e 	bl	80219a8 <_read_r>
 8020d0c:	2800      	cmp	r0, #0
 8020d0e:	bfab      	itete	ge
 8020d10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020d12:	89a3      	ldrhlt	r3, [r4, #12]
 8020d14:	181b      	addge	r3, r3, r0
 8020d16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020d1a:	bfac      	ite	ge
 8020d1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8020d1e:	81a3      	strhlt	r3, [r4, #12]
 8020d20:	bd10      	pop	{r4, pc}

08020d22 <__seofread>:
 8020d22:	2000      	movs	r0, #0
 8020d24:	4770      	bx	lr

08020d26 <__swrite>:
 8020d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020d2a:	461f      	mov	r7, r3
 8020d2c:	898b      	ldrh	r3, [r1, #12]
 8020d2e:	05db      	lsls	r3, r3, #23
 8020d30:	4605      	mov	r5, r0
 8020d32:	460c      	mov	r4, r1
 8020d34:	4616      	mov	r6, r2
 8020d36:	d505      	bpl.n	8020d44 <__swrite+0x1e>
 8020d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d3c:	2302      	movs	r3, #2
 8020d3e:	2200      	movs	r2, #0
 8020d40:	f000 fa6c 	bl	802121c <_lseek_r>
 8020d44:	89a3      	ldrh	r3, [r4, #12]
 8020d46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020d4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020d4e:	81a3      	strh	r3, [r4, #12]
 8020d50:	4632      	mov	r2, r6
 8020d52:	463b      	mov	r3, r7
 8020d54:	4628      	mov	r0, r5
 8020d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020d5a:	f000 b8f9 	b.w	8020f50 <_write_r>

08020d5e <__sseek>:
 8020d5e:	b510      	push	{r4, lr}
 8020d60:	460c      	mov	r4, r1
 8020d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d66:	f000 fa59 	bl	802121c <_lseek_r>
 8020d6a:	1c43      	adds	r3, r0, #1
 8020d6c:	89a3      	ldrh	r3, [r4, #12]
 8020d6e:	bf15      	itete	ne
 8020d70:	6560      	strne	r0, [r4, #84]	; 0x54
 8020d72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020d76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020d7a:	81a3      	strheq	r3, [r4, #12]
 8020d7c:	bf18      	it	ne
 8020d7e:	81a3      	strhne	r3, [r4, #12]
 8020d80:	bd10      	pop	{r4, pc}

08020d82 <__sclose>:
 8020d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d86:	f000 b96b 	b.w	8021060 <_close_r>

08020d8a <strcpy>:
 8020d8a:	4603      	mov	r3, r0
 8020d8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020d90:	f803 2b01 	strb.w	r2, [r3], #1
 8020d94:	2a00      	cmp	r2, #0
 8020d96:	d1f9      	bne.n	8020d8c <strcpy+0x2>
 8020d98:	4770      	bx	lr
	...

08020d9c <_strtoul_l.isra.0>:
 8020d9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020da0:	4e3b      	ldr	r6, [pc, #236]	; (8020e90 <_strtoul_l.isra.0+0xf4>)
 8020da2:	4686      	mov	lr, r0
 8020da4:	468c      	mov	ip, r1
 8020da6:	4660      	mov	r0, ip
 8020da8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8020dac:	5da5      	ldrb	r5, [r4, r6]
 8020dae:	f015 0508 	ands.w	r5, r5, #8
 8020db2:	d1f8      	bne.n	8020da6 <_strtoul_l.isra.0+0xa>
 8020db4:	2c2d      	cmp	r4, #45	; 0x2d
 8020db6:	d134      	bne.n	8020e22 <_strtoul_l.isra.0+0x86>
 8020db8:	f89c 4000 	ldrb.w	r4, [ip]
 8020dbc:	f04f 0801 	mov.w	r8, #1
 8020dc0:	f100 0c02 	add.w	ip, r0, #2
 8020dc4:	2b00      	cmp	r3, #0
 8020dc6:	d05e      	beq.n	8020e86 <_strtoul_l.isra.0+0xea>
 8020dc8:	2b10      	cmp	r3, #16
 8020dca:	d10c      	bne.n	8020de6 <_strtoul_l.isra.0+0x4a>
 8020dcc:	2c30      	cmp	r4, #48	; 0x30
 8020dce:	d10a      	bne.n	8020de6 <_strtoul_l.isra.0+0x4a>
 8020dd0:	f89c 0000 	ldrb.w	r0, [ip]
 8020dd4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8020dd8:	2858      	cmp	r0, #88	; 0x58
 8020dda:	d14f      	bne.n	8020e7c <_strtoul_l.isra.0+0xe0>
 8020ddc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8020de0:	2310      	movs	r3, #16
 8020de2:	f10c 0c02 	add.w	ip, ip, #2
 8020de6:	f04f 37ff 	mov.w	r7, #4294967295
 8020dea:	2500      	movs	r5, #0
 8020dec:	fbb7 f7f3 	udiv	r7, r7, r3
 8020df0:	fb03 f907 	mul.w	r9, r3, r7
 8020df4:	ea6f 0909 	mvn.w	r9, r9
 8020df8:	4628      	mov	r0, r5
 8020dfa:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8020dfe:	2e09      	cmp	r6, #9
 8020e00:	d818      	bhi.n	8020e34 <_strtoul_l.isra.0+0x98>
 8020e02:	4634      	mov	r4, r6
 8020e04:	42a3      	cmp	r3, r4
 8020e06:	dd24      	ble.n	8020e52 <_strtoul_l.isra.0+0xb6>
 8020e08:	2d00      	cmp	r5, #0
 8020e0a:	db1f      	blt.n	8020e4c <_strtoul_l.isra.0+0xb0>
 8020e0c:	4287      	cmp	r7, r0
 8020e0e:	d31d      	bcc.n	8020e4c <_strtoul_l.isra.0+0xb0>
 8020e10:	d101      	bne.n	8020e16 <_strtoul_l.isra.0+0x7a>
 8020e12:	45a1      	cmp	r9, r4
 8020e14:	db1a      	blt.n	8020e4c <_strtoul_l.isra.0+0xb0>
 8020e16:	fb00 4003 	mla	r0, r0, r3, r4
 8020e1a:	2501      	movs	r5, #1
 8020e1c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8020e20:	e7eb      	b.n	8020dfa <_strtoul_l.isra.0+0x5e>
 8020e22:	2c2b      	cmp	r4, #43	; 0x2b
 8020e24:	bf08      	it	eq
 8020e26:	f89c 4000 	ldrbeq.w	r4, [ip]
 8020e2a:	46a8      	mov	r8, r5
 8020e2c:	bf08      	it	eq
 8020e2e:	f100 0c02 	addeq.w	ip, r0, #2
 8020e32:	e7c7      	b.n	8020dc4 <_strtoul_l.isra.0+0x28>
 8020e34:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8020e38:	2e19      	cmp	r6, #25
 8020e3a:	d801      	bhi.n	8020e40 <_strtoul_l.isra.0+0xa4>
 8020e3c:	3c37      	subs	r4, #55	; 0x37
 8020e3e:	e7e1      	b.n	8020e04 <_strtoul_l.isra.0+0x68>
 8020e40:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8020e44:	2e19      	cmp	r6, #25
 8020e46:	d804      	bhi.n	8020e52 <_strtoul_l.isra.0+0xb6>
 8020e48:	3c57      	subs	r4, #87	; 0x57
 8020e4a:	e7db      	b.n	8020e04 <_strtoul_l.isra.0+0x68>
 8020e4c:	f04f 35ff 	mov.w	r5, #4294967295
 8020e50:	e7e4      	b.n	8020e1c <_strtoul_l.isra.0+0x80>
 8020e52:	2d00      	cmp	r5, #0
 8020e54:	da07      	bge.n	8020e66 <_strtoul_l.isra.0+0xca>
 8020e56:	2322      	movs	r3, #34	; 0x22
 8020e58:	f8ce 3000 	str.w	r3, [lr]
 8020e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8020e60:	b942      	cbnz	r2, 8020e74 <_strtoul_l.isra.0+0xd8>
 8020e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020e66:	f1b8 0f00 	cmp.w	r8, #0
 8020e6a:	d000      	beq.n	8020e6e <_strtoul_l.isra.0+0xd2>
 8020e6c:	4240      	negs	r0, r0
 8020e6e:	2a00      	cmp	r2, #0
 8020e70:	d0f7      	beq.n	8020e62 <_strtoul_l.isra.0+0xc6>
 8020e72:	b10d      	cbz	r5, 8020e78 <_strtoul_l.isra.0+0xdc>
 8020e74:	f10c 31ff 	add.w	r1, ip, #4294967295
 8020e78:	6011      	str	r1, [r2, #0]
 8020e7a:	e7f2      	b.n	8020e62 <_strtoul_l.isra.0+0xc6>
 8020e7c:	2430      	movs	r4, #48	; 0x30
 8020e7e:	2b00      	cmp	r3, #0
 8020e80:	d1b1      	bne.n	8020de6 <_strtoul_l.isra.0+0x4a>
 8020e82:	2308      	movs	r3, #8
 8020e84:	e7af      	b.n	8020de6 <_strtoul_l.isra.0+0x4a>
 8020e86:	2c30      	cmp	r4, #48	; 0x30
 8020e88:	d0a2      	beq.n	8020dd0 <_strtoul_l.isra.0+0x34>
 8020e8a:	230a      	movs	r3, #10
 8020e8c:	e7ab      	b.n	8020de6 <_strtoul_l.isra.0+0x4a>
 8020e8e:	bf00      	nop
 8020e90:	0802764d 	.word	0x0802764d

08020e94 <_strtoul_r>:
 8020e94:	f7ff bf82 	b.w	8020d9c <_strtoul_l.isra.0>

08020e98 <strtoul>:
 8020e98:	4613      	mov	r3, r2
 8020e9a:	460a      	mov	r2, r1
 8020e9c:	4601      	mov	r1, r0
 8020e9e:	4802      	ldr	r0, [pc, #8]	; (8020ea8 <strtoul+0x10>)
 8020ea0:	6800      	ldr	r0, [r0, #0]
 8020ea2:	f7ff bf7b 	b.w	8020d9c <_strtoul_l.isra.0>
 8020ea6:	bf00      	nop
 8020ea8:	200001ac 	.word	0x200001ac

08020eac <__swbuf_r>:
 8020eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020eae:	460e      	mov	r6, r1
 8020eb0:	4614      	mov	r4, r2
 8020eb2:	4605      	mov	r5, r0
 8020eb4:	b118      	cbz	r0, 8020ebe <__swbuf_r+0x12>
 8020eb6:	6983      	ldr	r3, [r0, #24]
 8020eb8:	b90b      	cbnz	r3, 8020ebe <__swbuf_r+0x12>
 8020eba:	f7ff f835 	bl	801ff28 <__sinit>
 8020ebe:	4b21      	ldr	r3, [pc, #132]	; (8020f44 <__swbuf_r+0x98>)
 8020ec0:	429c      	cmp	r4, r3
 8020ec2:	d12b      	bne.n	8020f1c <__swbuf_r+0x70>
 8020ec4:	686c      	ldr	r4, [r5, #4]
 8020ec6:	69a3      	ldr	r3, [r4, #24]
 8020ec8:	60a3      	str	r3, [r4, #8]
 8020eca:	89a3      	ldrh	r3, [r4, #12]
 8020ecc:	071a      	lsls	r2, r3, #28
 8020ece:	d52f      	bpl.n	8020f30 <__swbuf_r+0x84>
 8020ed0:	6923      	ldr	r3, [r4, #16]
 8020ed2:	b36b      	cbz	r3, 8020f30 <__swbuf_r+0x84>
 8020ed4:	6923      	ldr	r3, [r4, #16]
 8020ed6:	6820      	ldr	r0, [r4, #0]
 8020ed8:	1ac0      	subs	r0, r0, r3
 8020eda:	6963      	ldr	r3, [r4, #20]
 8020edc:	b2f6      	uxtb	r6, r6
 8020ede:	4283      	cmp	r3, r0
 8020ee0:	4637      	mov	r7, r6
 8020ee2:	dc04      	bgt.n	8020eee <__swbuf_r+0x42>
 8020ee4:	4621      	mov	r1, r4
 8020ee6:	4628      	mov	r0, r5
 8020ee8:	f000 f95c 	bl	80211a4 <_fflush_r>
 8020eec:	bb30      	cbnz	r0, 8020f3c <__swbuf_r+0x90>
 8020eee:	68a3      	ldr	r3, [r4, #8]
 8020ef0:	3b01      	subs	r3, #1
 8020ef2:	60a3      	str	r3, [r4, #8]
 8020ef4:	6823      	ldr	r3, [r4, #0]
 8020ef6:	1c5a      	adds	r2, r3, #1
 8020ef8:	6022      	str	r2, [r4, #0]
 8020efa:	701e      	strb	r6, [r3, #0]
 8020efc:	6963      	ldr	r3, [r4, #20]
 8020efe:	3001      	adds	r0, #1
 8020f00:	4283      	cmp	r3, r0
 8020f02:	d004      	beq.n	8020f0e <__swbuf_r+0x62>
 8020f04:	89a3      	ldrh	r3, [r4, #12]
 8020f06:	07db      	lsls	r3, r3, #31
 8020f08:	d506      	bpl.n	8020f18 <__swbuf_r+0x6c>
 8020f0a:	2e0a      	cmp	r6, #10
 8020f0c:	d104      	bne.n	8020f18 <__swbuf_r+0x6c>
 8020f0e:	4621      	mov	r1, r4
 8020f10:	4628      	mov	r0, r5
 8020f12:	f000 f947 	bl	80211a4 <_fflush_r>
 8020f16:	b988      	cbnz	r0, 8020f3c <__swbuf_r+0x90>
 8020f18:	4638      	mov	r0, r7
 8020f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020f1c:	4b0a      	ldr	r3, [pc, #40]	; (8020f48 <__swbuf_r+0x9c>)
 8020f1e:	429c      	cmp	r4, r3
 8020f20:	d101      	bne.n	8020f26 <__swbuf_r+0x7a>
 8020f22:	68ac      	ldr	r4, [r5, #8]
 8020f24:	e7cf      	b.n	8020ec6 <__swbuf_r+0x1a>
 8020f26:	4b09      	ldr	r3, [pc, #36]	; (8020f4c <__swbuf_r+0xa0>)
 8020f28:	429c      	cmp	r4, r3
 8020f2a:	bf08      	it	eq
 8020f2c:	68ec      	ldreq	r4, [r5, #12]
 8020f2e:	e7ca      	b.n	8020ec6 <__swbuf_r+0x1a>
 8020f30:	4621      	mov	r1, r4
 8020f32:	4628      	mov	r0, r5
 8020f34:	f000 f81e 	bl	8020f74 <__swsetup_r>
 8020f38:	2800      	cmp	r0, #0
 8020f3a:	d0cb      	beq.n	8020ed4 <__swbuf_r+0x28>
 8020f3c:	f04f 37ff 	mov.w	r7, #4294967295
 8020f40:	e7ea      	b.n	8020f18 <__swbuf_r+0x6c>
 8020f42:	bf00      	nop
 8020f44:	08027924 	.word	0x08027924
 8020f48:	08027944 	.word	0x08027944
 8020f4c:	08027904 	.word	0x08027904

08020f50 <_write_r>:
 8020f50:	b538      	push	{r3, r4, r5, lr}
 8020f52:	4d07      	ldr	r5, [pc, #28]	; (8020f70 <_write_r+0x20>)
 8020f54:	4604      	mov	r4, r0
 8020f56:	4608      	mov	r0, r1
 8020f58:	4611      	mov	r1, r2
 8020f5a:	2200      	movs	r2, #0
 8020f5c:	602a      	str	r2, [r5, #0]
 8020f5e:	461a      	mov	r2, r3
 8020f60:	f7e2 fd31 	bl	80039c6 <_write>
 8020f64:	1c43      	adds	r3, r0, #1
 8020f66:	d102      	bne.n	8020f6e <_write_r+0x1e>
 8020f68:	682b      	ldr	r3, [r5, #0]
 8020f6a:	b103      	cbz	r3, 8020f6e <_write_r+0x1e>
 8020f6c:	6023      	str	r3, [r4, #0]
 8020f6e:	bd38      	pop	{r3, r4, r5, pc}
 8020f70:	2000b8f0 	.word	0x2000b8f0

08020f74 <__swsetup_r>:
 8020f74:	4b32      	ldr	r3, [pc, #200]	; (8021040 <__swsetup_r+0xcc>)
 8020f76:	b570      	push	{r4, r5, r6, lr}
 8020f78:	681d      	ldr	r5, [r3, #0]
 8020f7a:	4606      	mov	r6, r0
 8020f7c:	460c      	mov	r4, r1
 8020f7e:	b125      	cbz	r5, 8020f8a <__swsetup_r+0x16>
 8020f80:	69ab      	ldr	r3, [r5, #24]
 8020f82:	b913      	cbnz	r3, 8020f8a <__swsetup_r+0x16>
 8020f84:	4628      	mov	r0, r5
 8020f86:	f7fe ffcf 	bl	801ff28 <__sinit>
 8020f8a:	4b2e      	ldr	r3, [pc, #184]	; (8021044 <__swsetup_r+0xd0>)
 8020f8c:	429c      	cmp	r4, r3
 8020f8e:	d10f      	bne.n	8020fb0 <__swsetup_r+0x3c>
 8020f90:	686c      	ldr	r4, [r5, #4]
 8020f92:	89a3      	ldrh	r3, [r4, #12]
 8020f94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020f98:	0719      	lsls	r1, r3, #28
 8020f9a:	d42c      	bmi.n	8020ff6 <__swsetup_r+0x82>
 8020f9c:	06dd      	lsls	r5, r3, #27
 8020f9e:	d411      	bmi.n	8020fc4 <__swsetup_r+0x50>
 8020fa0:	2309      	movs	r3, #9
 8020fa2:	6033      	str	r3, [r6, #0]
 8020fa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020fa8:	81a3      	strh	r3, [r4, #12]
 8020faa:	f04f 30ff 	mov.w	r0, #4294967295
 8020fae:	e03e      	b.n	802102e <__swsetup_r+0xba>
 8020fb0:	4b25      	ldr	r3, [pc, #148]	; (8021048 <__swsetup_r+0xd4>)
 8020fb2:	429c      	cmp	r4, r3
 8020fb4:	d101      	bne.n	8020fba <__swsetup_r+0x46>
 8020fb6:	68ac      	ldr	r4, [r5, #8]
 8020fb8:	e7eb      	b.n	8020f92 <__swsetup_r+0x1e>
 8020fba:	4b24      	ldr	r3, [pc, #144]	; (802104c <__swsetup_r+0xd8>)
 8020fbc:	429c      	cmp	r4, r3
 8020fbe:	bf08      	it	eq
 8020fc0:	68ec      	ldreq	r4, [r5, #12]
 8020fc2:	e7e6      	b.n	8020f92 <__swsetup_r+0x1e>
 8020fc4:	0758      	lsls	r0, r3, #29
 8020fc6:	d512      	bpl.n	8020fee <__swsetup_r+0x7a>
 8020fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020fca:	b141      	cbz	r1, 8020fde <__swsetup_r+0x6a>
 8020fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020fd0:	4299      	cmp	r1, r3
 8020fd2:	d002      	beq.n	8020fda <__swsetup_r+0x66>
 8020fd4:	4630      	mov	r0, r6
 8020fd6:	f7ff f963 	bl	80202a0 <_free_r>
 8020fda:	2300      	movs	r3, #0
 8020fdc:	6363      	str	r3, [r4, #52]	; 0x34
 8020fde:	89a3      	ldrh	r3, [r4, #12]
 8020fe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020fe4:	81a3      	strh	r3, [r4, #12]
 8020fe6:	2300      	movs	r3, #0
 8020fe8:	6063      	str	r3, [r4, #4]
 8020fea:	6923      	ldr	r3, [r4, #16]
 8020fec:	6023      	str	r3, [r4, #0]
 8020fee:	89a3      	ldrh	r3, [r4, #12]
 8020ff0:	f043 0308 	orr.w	r3, r3, #8
 8020ff4:	81a3      	strh	r3, [r4, #12]
 8020ff6:	6923      	ldr	r3, [r4, #16]
 8020ff8:	b94b      	cbnz	r3, 802100e <__swsetup_r+0x9a>
 8020ffa:	89a3      	ldrh	r3, [r4, #12]
 8020ffc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021004:	d003      	beq.n	802100e <__swsetup_r+0x9a>
 8021006:	4621      	mov	r1, r4
 8021008:	4630      	mov	r0, r6
 802100a:	f000 f93d 	bl	8021288 <__smakebuf_r>
 802100e:	89a0      	ldrh	r0, [r4, #12]
 8021010:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021014:	f010 0301 	ands.w	r3, r0, #1
 8021018:	d00a      	beq.n	8021030 <__swsetup_r+0xbc>
 802101a:	2300      	movs	r3, #0
 802101c:	60a3      	str	r3, [r4, #8]
 802101e:	6963      	ldr	r3, [r4, #20]
 8021020:	425b      	negs	r3, r3
 8021022:	61a3      	str	r3, [r4, #24]
 8021024:	6923      	ldr	r3, [r4, #16]
 8021026:	b943      	cbnz	r3, 802103a <__swsetup_r+0xc6>
 8021028:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802102c:	d1ba      	bne.n	8020fa4 <__swsetup_r+0x30>
 802102e:	bd70      	pop	{r4, r5, r6, pc}
 8021030:	0781      	lsls	r1, r0, #30
 8021032:	bf58      	it	pl
 8021034:	6963      	ldrpl	r3, [r4, #20]
 8021036:	60a3      	str	r3, [r4, #8]
 8021038:	e7f4      	b.n	8021024 <__swsetup_r+0xb0>
 802103a:	2000      	movs	r0, #0
 802103c:	e7f7      	b.n	802102e <__swsetup_r+0xba>
 802103e:	bf00      	nop
 8021040:	200001ac 	.word	0x200001ac
 8021044:	08027924 	.word	0x08027924
 8021048:	08027944 	.word	0x08027944
 802104c:	08027904 	.word	0x08027904

08021050 <abort>:
 8021050:	b508      	push	{r3, lr}
 8021052:	2006      	movs	r0, #6
 8021054:	f000 fd1c 	bl	8021a90 <raise>
 8021058:	2001      	movs	r0, #1
 802105a:	f7e2 fc8d 	bl	8003978 <_exit>
	...

08021060 <_close_r>:
 8021060:	b538      	push	{r3, r4, r5, lr}
 8021062:	4d06      	ldr	r5, [pc, #24]	; (802107c <_close_r+0x1c>)
 8021064:	2300      	movs	r3, #0
 8021066:	4604      	mov	r4, r0
 8021068:	4608      	mov	r0, r1
 802106a:	602b      	str	r3, [r5, #0]
 802106c:	f7e2 fcc7 	bl	80039fe <_close>
 8021070:	1c43      	adds	r3, r0, #1
 8021072:	d102      	bne.n	802107a <_close_r+0x1a>
 8021074:	682b      	ldr	r3, [r5, #0]
 8021076:	b103      	cbz	r3, 802107a <_close_r+0x1a>
 8021078:	6023      	str	r3, [r4, #0]
 802107a:	bd38      	pop	{r3, r4, r5, pc}
 802107c:	2000b8f0 	.word	0x2000b8f0

08021080 <__env_lock>:
 8021080:	4801      	ldr	r0, [pc, #4]	; (8021088 <__env_lock+0x8>)
 8021082:	f7ff b8f9 	b.w	8020278 <__retarget_lock_acquire_recursive>
 8021086:	bf00      	nop
 8021088:	2000d1d2 	.word	0x2000d1d2

0802108c <__env_unlock>:
 802108c:	4801      	ldr	r0, [pc, #4]	; (8021094 <__env_unlock+0x8>)
 802108e:	f7ff b8f5 	b.w	802027c <__retarget_lock_release_recursive>
 8021092:	bf00      	nop
 8021094:	2000d1d2 	.word	0x2000d1d2

08021098 <__sflush_r>:
 8021098:	898a      	ldrh	r2, [r1, #12]
 802109a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802109e:	4605      	mov	r5, r0
 80210a0:	0710      	lsls	r0, r2, #28
 80210a2:	460c      	mov	r4, r1
 80210a4:	d458      	bmi.n	8021158 <__sflush_r+0xc0>
 80210a6:	684b      	ldr	r3, [r1, #4]
 80210a8:	2b00      	cmp	r3, #0
 80210aa:	dc05      	bgt.n	80210b8 <__sflush_r+0x20>
 80210ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80210ae:	2b00      	cmp	r3, #0
 80210b0:	dc02      	bgt.n	80210b8 <__sflush_r+0x20>
 80210b2:	2000      	movs	r0, #0
 80210b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80210b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80210ba:	2e00      	cmp	r6, #0
 80210bc:	d0f9      	beq.n	80210b2 <__sflush_r+0x1a>
 80210be:	2300      	movs	r3, #0
 80210c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80210c4:	682f      	ldr	r7, [r5, #0]
 80210c6:	602b      	str	r3, [r5, #0]
 80210c8:	d032      	beq.n	8021130 <__sflush_r+0x98>
 80210ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80210cc:	89a3      	ldrh	r3, [r4, #12]
 80210ce:	075a      	lsls	r2, r3, #29
 80210d0:	d505      	bpl.n	80210de <__sflush_r+0x46>
 80210d2:	6863      	ldr	r3, [r4, #4]
 80210d4:	1ac0      	subs	r0, r0, r3
 80210d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80210d8:	b10b      	cbz	r3, 80210de <__sflush_r+0x46>
 80210da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80210dc:	1ac0      	subs	r0, r0, r3
 80210de:	2300      	movs	r3, #0
 80210e0:	4602      	mov	r2, r0
 80210e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80210e4:	6a21      	ldr	r1, [r4, #32]
 80210e6:	4628      	mov	r0, r5
 80210e8:	47b0      	blx	r6
 80210ea:	1c43      	adds	r3, r0, #1
 80210ec:	89a3      	ldrh	r3, [r4, #12]
 80210ee:	d106      	bne.n	80210fe <__sflush_r+0x66>
 80210f0:	6829      	ldr	r1, [r5, #0]
 80210f2:	291d      	cmp	r1, #29
 80210f4:	d82c      	bhi.n	8021150 <__sflush_r+0xb8>
 80210f6:	4a2a      	ldr	r2, [pc, #168]	; (80211a0 <__sflush_r+0x108>)
 80210f8:	40ca      	lsrs	r2, r1
 80210fa:	07d6      	lsls	r6, r2, #31
 80210fc:	d528      	bpl.n	8021150 <__sflush_r+0xb8>
 80210fe:	2200      	movs	r2, #0
 8021100:	6062      	str	r2, [r4, #4]
 8021102:	04d9      	lsls	r1, r3, #19
 8021104:	6922      	ldr	r2, [r4, #16]
 8021106:	6022      	str	r2, [r4, #0]
 8021108:	d504      	bpl.n	8021114 <__sflush_r+0x7c>
 802110a:	1c42      	adds	r2, r0, #1
 802110c:	d101      	bne.n	8021112 <__sflush_r+0x7a>
 802110e:	682b      	ldr	r3, [r5, #0]
 8021110:	b903      	cbnz	r3, 8021114 <__sflush_r+0x7c>
 8021112:	6560      	str	r0, [r4, #84]	; 0x54
 8021114:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021116:	602f      	str	r7, [r5, #0]
 8021118:	2900      	cmp	r1, #0
 802111a:	d0ca      	beq.n	80210b2 <__sflush_r+0x1a>
 802111c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021120:	4299      	cmp	r1, r3
 8021122:	d002      	beq.n	802112a <__sflush_r+0x92>
 8021124:	4628      	mov	r0, r5
 8021126:	f7ff f8bb 	bl	80202a0 <_free_r>
 802112a:	2000      	movs	r0, #0
 802112c:	6360      	str	r0, [r4, #52]	; 0x34
 802112e:	e7c1      	b.n	80210b4 <__sflush_r+0x1c>
 8021130:	6a21      	ldr	r1, [r4, #32]
 8021132:	2301      	movs	r3, #1
 8021134:	4628      	mov	r0, r5
 8021136:	47b0      	blx	r6
 8021138:	1c41      	adds	r1, r0, #1
 802113a:	d1c7      	bne.n	80210cc <__sflush_r+0x34>
 802113c:	682b      	ldr	r3, [r5, #0]
 802113e:	2b00      	cmp	r3, #0
 8021140:	d0c4      	beq.n	80210cc <__sflush_r+0x34>
 8021142:	2b1d      	cmp	r3, #29
 8021144:	d001      	beq.n	802114a <__sflush_r+0xb2>
 8021146:	2b16      	cmp	r3, #22
 8021148:	d101      	bne.n	802114e <__sflush_r+0xb6>
 802114a:	602f      	str	r7, [r5, #0]
 802114c:	e7b1      	b.n	80210b2 <__sflush_r+0x1a>
 802114e:	89a3      	ldrh	r3, [r4, #12]
 8021150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021154:	81a3      	strh	r3, [r4, #12]
 8021156:	e7ad      	b.n	80210b4 <__sflush_r+0x1c>
 8021158:	690f      	ldr	r7, [r1, #16]
 802115a:	2f00      	cmp	r7, #0
 802115c:	d0a9      	beq.n	80210b2 <__sflush_r+0x1a>
 802115e:	0793      	lsls	r3, r2, #30
 8021160:	680e      	ldr	r6, [r1, #0]
 8021162:	bf08      	it	eq
 8021164:	694b      	ldreq	r3, [r1, #20]
 8021166:	600f      	str	r7, [r1, #0]
 8021168:	bf18      	it	ne
 802116a:	2300      	movne	r3, #0
 802116c:	eba6 0807 	sub.w	r8, r6, r7
 8021170:	608b      	str	r3, [r1, #8]
 8021172:	f1b8 0f00 	cmp.w	r8, #0
 8021176:	dd9c      	ble.n	80210b2 <__sflush_r+0x1a>
 8021178:	6a21      	ldr	r1, [r4, #32]
 802117a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802117c:	4643      	mov	r3, r8
 802117e:	463a      	mov	r2, r7
 8021180:	4628      	mov	r0, r5
 8021182:	47b0      	blx	r6
 8021184:	2800      	cmp	r0, #0
 8021186:	dc06      	bgt.n	8021196 <__sflush_r+0xfe>
 8021188:	89a3      	ldrh	r3, [r4, #12]
 802118a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802118e:	81a3      	strh	r3, [r4, #12]
 8021190:	f04f 30ff 	mov.w	r0, #4294967295
 8021194:	e78e      	b.n	80210b4 <__sflush_r+0x1c>
 8021196:	4407      	add	r7, r0
 8021198:	eba8 0800 	sub.w	r8, r8, r0
 802119c:	e7e9      	b.n	8021172 <__sflush_r+0xda>
 802119e:	bf00      	nop
 80211a0:	20400001 	.word	0x20400001

080211a4 <_fflush_r>:
 80211a4:	b538      	push	{r3, r4, r5, lr}
 80211a6:	690b      	ldr	r3, [r1, #16]
 80211a8:	4605      	mov	r5, r0
 80211aa:	460c      	mov	r4, r1
 80211ac:	b913      	cbnz	r3, 80211b4 <_fflush_r+0x10>
 80211ae:	2500      	movs	r5, #0
 80211b0:	4628      	mov	r0, r5
 80211b2:	bd38      	pop	{r3, r4, r5, pc}
 80211b4:	b118      	cbz	r0, 80211be <_fflush_r+0x1a>
 80211b6:	6983      	ldr	r3, [r0, #24]
 80211b8:	b90b      	cbnz	r3, 80211be <_fflush_r+0x1a>
 80211ba:	f7fe feb5 	bl	801ff28 <__sinit>
 80211be:	4b14      	ldr	r3, [pc, #80]	; (8021210 <_fflush_r+0x6c>)
 80211c0:	429c      	cmp	r4, r3
 80211c2:	d11b      	bne.n	80211fc <_fflush_r+0x58>
 80211c4:	686c      	ldr	r4, [r5, #4]
 80211c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80211ca:	2b00      	cmp	r3, #0
 80211cc:	d0ef      	beq.n	80211ae <_fflush_r+0xa>
 80211ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80211d0:	07d0      	lsls	r0, r2, #31
 80211d2:	d404      	bmi.n	80211de <_fflush_r+0x3a>
 80211d4:	0599      	lsls	r1, r3, #22
 80211d6:	d402      	bmi.n	80211de <_fflush_r+0x3a>
 80211d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80211da:	f7ff f84d 	bl	8020278 <__retarget_lock_acquire_recursive>
 80211de:	4628      	mov	r0, r5
 80211e0:	4621      	mov	r1, r4
 80211e2:	f7ff ff59 	bl	8021098 <__sflush_r>
 80211e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80211e8:	07da      	lsls	r2, r3, #31
 80211ea:	4605      	mov	r5, r0
 80211ec:	d4e0      	bmi.n	80211b0 <_fflush_r+0xc>
 80211ee:	89a3      	ldrh	r3, [r4, #12]
 80211f0:	059b      	lsls	r3, r3, #22
 80211f2:	d4dd      	bmi.n	80211b0 <_fflush_r+0xc>
 80211f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80211f6:	f7ff f841 	bl	802027c <__retarget_lock_release_recursive>
 80211fa:	e7d9      	b.n	80211b0 <_fflush_r+0xc>
 80211fc:	4b05      	ldr	r3, [pc, #20]	; (8021214 <_fflush_r+0x70>)
 80211fe:	429c      	cmp	r4, r3
 8021200:	d101      	bne.n	8021206 <_fflush_r+0x62>
 8021202:	68ac      	ldr	r4, [r5, #8]
 8021204:	e7df      	b.n	80211c6 <_fflush_r+0x22>
 8021206:	4b04      	ldr	r3, [pc, #16]	; (8021218 <_fflush_r+0x74>)
 8021208:	429c      	cmp	r4, r3
 802120a:	bf08      	it	eq
 802120c:	68ec      	ldreq	r4, [r5, #12]
 802120e:	e7da      	b.n	80211c6 <_fflush_r+0x22>
 8021210:	08027924 	.word	0x08027924
 8021214:	08027944 	.word	0x08027944
 8021218:	08027904 	.word	0x08027904

0802121c <_lseek_r>:
 802121c:	b538      	push	{r3, r4, r5, lr}
 802121e:	4d07      	ldr	r5, [pc, #28]	; (802123c <_lseek_r+0x20>)
 8021220:	4604      	mov	r4, r0
 8021222:	4608      	mov	r0, r1
 8021224:	4611      	mov	r1, r2
 8021226:	2200      	movs	r2, #0
 8021228:	602a      	str	r2, [r5, #0]
 802122a:	461a      	mov	r2, r3
 802122c:	f7e2 fc0e 	bl	8003a4c <_lseek>
 8021230:	1c43      	adds	r3, r0, #1
 8021232:	d102      	bne.n	802123a <_lseek_r+0x1e>
 8021234:	682b      	ldr	r3, [r5, #0]
 8021236:	b103      	cbz	r3, 802123a <_lseek_r+0x1e>
 8021238:	6023      	str	r3, [r4, #0]
 802123a:	bd38      	pop	{r3, r4, r5, pc}
 802123c:	2000b8f0 	.word	0x2000b8f0

08021240 <__swhatbuf_r>:
 8021240:	b570      	push	{r4, r5, r6, lr}
 8021242:	460e      	mov	r6, r1
 8021244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021248:	2900      	cmp	r1, #0
 802124a:	b096      	sub	sp, #88	; 0x58
 802124c:	4614      	mov	r4, r2
 802124e:	461d      	mov	r5, r3
 8021250:	da07      	bge.n	8021262 <__swhatbuf_r+0x22>
 8021252:	2300      	movs	r3, #0
 8021254:	602b      	str	r3, [r5, #0]
 8021256:	89b3      	ldrh	r3, [r6, #12]
 8021258:	061a      	lsls	r2, r3, #24
 802125a:	d410      	bmi.n	802127e <__swhatbuf_r+0x3e>
 802125c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021260:	e00e      	b.n	8021280 <__swhatbuf_r+0x40>
 8021262:	466a      	mov	r2, sp
 8021264:	f000 fc6a 	bl	8021b3c <_fstat_r>
 8021268:	2800      	cmp	r0, #0
 802126a:	dbf2      	blt.n	8021252 <__swhatbuf_r+0x12>
 802126c:	9a01      	ldr	r2, [sp, #4]
 802126e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8021272:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021276:	425a      	negs	r2, r3
 8021278:	415a      	adcs	r2, r3
 802127a:	602a      	str	r2, [r5, #0]
 802127c:	e7ee      	b.n	802125c <__swhatbuf_r+0x1c>
 802127e:	2340      	movs	r3, #64	; 0x40
 8021280:	2000      	movs	r0, #0
 8021282:	6023      	str	r3, [r4, #0]
 8021284:	b016      	add	sp, #88	; 0x58
 8021286:	bd70      	pop	{r4, r5, r6, pc}

08021288 <__smakebuf_r>:
 8021288:	898b      	ldrh	r3, [r1, #12]
 802128a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802128c:	079d      	lsls	r5, r3, #30
 802128e:	4606      	mov	r6, r0
 8021290:	460c      	mov	r4, r1
 8021292:	d507      	bpl.n	80212a4 <__smakebuf_r+0x1c>
 8021294:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021298:	6023      	str	r3, [r4, #0]
 802129a:	6123      	str	r3, [r4, #16]
 802129c:	2301      	movs	r3, #1
 802129e:	6163      	str	r3, [r4, #20]
 80212a0:	b002      	add	sp, #8
 80212a2:	bd70      	pop	{r4, r5, r6, pc}
 80212a4:	ab01      	add	r3, sp, #4
 80212a6:	466a      	mov	r2, sp
 80212a8:	f7ff ffca 	bl	8021240 <__swhatbuf_r>
 80212ac:	9900      	ldr	r1, [sp, #0]
 80212ae:	4605      	mov	r5, r0
 80212b0:	4630      	mov	r0, r6
 80212b2:	f7ff f845 	bl	8020340 <_malloc_r>
 80212b6:	b948      	cbnz	r0, 80212cc <__smakebuf_r+0x44>
 80212b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80212bc:	059a      	lsls	r2, r3, #22
 80212be:	d4ef      	bmi.n	80212a0 <__smakebuf_r+0x18>
 80212c0:	f023 0303 	bic.w	r3, r3, #3
 80212c4:	f043 0302 	orr.w	r3, r3, #2
 80212c8:	81a3      	strh	r3, [r4, #12]
 80212ca:	e7e3      	b.n	8021294 <__smakebuf_r+0xc>
 80212cc:	4b0d      	ldr	r3, [pc, #52]	; (8021304 <__smakebuf_r+0x7c>)
 80212ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80212d0:	89a3      	ldrh	r3, [r4, #12]
 80212d2:	6020      	str	r0, [r4, #0]
 80212d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80212d8:	81a3      	strh	r3, [r4, #12]
 80212da:	9b00      	ldr	r3, [sp, #0]
 80212dc:	6163      	str	r3, [r4, #20]
 80212de:	9b01      	ldr	r3, [sp, #4]
 80212e0:	6120      	str	r0, [r4, #16]
 80212e2:	b15b      	cbz	r3, 80212fc <__smakebuf_r+0x74>
 80212e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80212e8:	4630      	mov	r0, r6
 80212ea:	f000 fc39 	bl	8021b60 <_isatty_r>
 80212ee:	b128      	cbz	r0, 80212fc <__smakebuf_r+0x74>
 80212f0:	89a3      	ldrh	r3, [r4, #12]
 80212f2:	f023 0303 	bic.w	r3, r3, #3
 80212f6:	f043 0301 	orr.w	r3, r3, #1
 80212fa:	81a3      	strh	r3, [r4, #12]
 80212fc:	89a0      	ldrh	r0, [r4, #12]
 80212fe:	4305      	orrs	r5, r0
 8021300:	81a5      	strh	r5, [r4, #12]
 8021302:	e7cd      	b.n	80212a0 <__smakebuf_r+0x18>
 8021304:	0801fec1 	.word	0x0801fec1

08021308 <__malloc_lock>:
 8021308:	4801      	ldr	r0, [pc, #4]	; (8021310 <__malloc_lock+0x8>)
 802130a:	f7fe bfb5 	b.w	8020278 <__retarget_lock_acquire_recursive>
 802130e:	bf00      	nop
 8021310:	2000d1d4 	.word	0x2000d1d4

08021314 <__malloc_unlock>:
 8021314:	4801      	ldr	r0, [pc, #4]	; (802131c <__malloc_unlock+0x8>)
 8021316:	f7fe bfb1 	b.w	802027c <__retarget_lock_release_recursive>
 802131a:	bf00      	nop
 802131c:	2000d1d4 	.word	0x2000d1d4

08021320 <_realloc_r>:
 8021320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021322:	4607      	mov	r7, r0
 8021324:	4614      	mov	r4, r2
 8021326:	460e      	mov	r6, r1
 8021328:	b921      	cbnz	r1, 8021334 <_realloc_r+0x14>
 802132a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802132e:	4611      	mov	r1, r2
 8021330:	f7ff b806 	b.w	8020340 <_malloc_r>
 8021334:	b922      	cbnz	r2, 8021340 <_realloc_r+0x20>
 8021336:	f7fe ffb3 	bl	80202a0 <_free_r>
 802133a:	4625      	mov	r5, r4
 802133c:	4628      	mov	r0, r5
 802133e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021340:	f000 fc1e 	bl	8021b80 <_malloc_usable_size_r>
 8021344:	42a0      	cmp	r0, r4
 8021346:	d20f      	bcs.n	8021368 <_realloc_r+0x48>
 8021348:	4621      	mov	r1, r4
 802134a:	4638      	mov	r0, r7
 802134c:	f7fe fff8 	bl	8020340 <_malloc_r>
 8021350:	4605      	mov	r5, r0
 8021352:	2800      	cmp	r0, #0
 8021354:	d0f2      	beq.n	802133c <_realloc_r+0x1c>
 8021356:	4631      	mov	r1, r6
 8021358:	4622      	mov	r2, r4
 802135a:	f7fd ff03 	bl	801f164 <memcpy>
 802135e:	4631      	mov	r1, r6
 8021360:	4638      	mov	r0, r7
 8021362:	f7fe ff9d 	bl	80202a0 <_free_r>
 8021366:	e7e9      	b.n	802133c <_realloc_r+0x1c>
 8021368:	4635      	mov	r5, r6
 802136a:	e7e7      	b.n	802133c <_realloc_r+0x1c>

0802136c <_sungetc_r>:
 802136c:	b538      	push	{r3, r4, r5, lr}
 802136e:	1c4b      	adds	r3, r1, #1
 8021370:	4614      	mov	r4, r2
 8021372:	d103      	bne.n	802137c <_sungetc_r+0x10>
 8021374:	f04f 35ff 	mov.w	r5, #4294967295
 8021378:	4628      	mov	r0, r5
 802137a:	bd38      	pop	{r3, r4, r5, pc}
 802137c:	8993      	ldrh	r3, [r2, #12]
 802137e:	f023 0320 	bic.w	r3, r3, #32
 8021382:	8193      	strh	r3, [r2, #12]
 8021384:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021386:	6852      	ldr	r2, [r2, #4]
 8021388:	b2cd      	uxtb	r5, r1
 802138a:	b18b      	cbz	r3, 80213b0 <_sungetc_r+0x44>
 802138c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802138e:	4293      	cmp	r3, r2
 8021390:	dd08      	ble.n	80213a4 <_sungetc_r+0x38>
 8021392:	6823      	ldr	r3, [r4, #0]
 8021394:	1e5a      	subs	r2, r3, #1
 8021396:	6022      	str	r2, [r4, #0]
 8021398:	f803 5c01 	strb.w	r5, [r3, #-1]
 802139c:	6863      	ldr	r3, [r4, #4]
 802139e:	3301      	adds	r3, #1
 80213a0:	6063      	str	r3, [r4, #4]
 80213a2:	e7e9      	b.n	8021378 <_sungetc_r+0xc>
 80213a4:	4621      	mov	r1, r4
 80213a6:	f000 fb8f 	bl	8021ac8 <__submore>
 80213aa:	2800      	cmp	r0, #0
 80213ac:	d0f1      	beq.n	8021392 <_sungetc_r+0x26>
 80213ae:	e7e1      	b.n	8021374 <_sungetc_r+0x8>
 80213b0:	6921      	ldr	r1, [r4, #16]
 80213b2:	6823      	ldr	r3, [r4, #0]
 80213b4:	b151      	cbz	r1, 80213cc <_sungetc_r+0x60>
 80213b6:	4299      	cmp	r1, r3
 80213b8:	d208      	bcs.n	80213cc <_sungetc_r+0x60>
 80213ba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80213be:	42a9      	cmp	r1, r5
 80213c0:	d104      	bne.n	80213cc <_sungetc_r+0x60>
 80213c2:	3b01      	subs	r3, #1
 80213c4:	3201      	adds	r2, #1
 80213c6:	6023      	str	r3, [r4, #0]
 80213c8:	6062      	str	r2, [r4, #4]
 80213ca:	e7d5      	b.n	8021378 <_sungetc_r+0xc>
 80213cc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80213d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80213d4:	6363      	str	r3, [r4, #52]	; 0x34
 80213d6:	2303      	movs	r3, #3
 80213d8:	63a3      	str	r3, [r4, #56]	; 0x38
 80213da:	4623      	mov	r3, r4
 80213dc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80213e0:	6023      	str	r3, [r4, #0]
 80213e2:	2301      	movs	r3, #1
 80213e4:	e7dc      	b.n	80213a0 <_sungetc_r+0x34>

080213e6 <__ssrefill_r>:
 80213e6:	b510      	push	{r4, lr}
 80213e8:	460c      	mov	r4, r1
 80213ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80213ec:	b169      	cbz	r1, 802140a <__ssrefill_r+0x24>
 80213ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80213f2:	4299      	cmp	r1, r3
 80213f4:	d001      	beq.n	80213fa <__ssrefill_r+0x14>
 80213f6:	f7fe ff53 	bl	80202a0 <_free_r>
 80213fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80213fc:	6063      	str	r3, [r4, #4]
 80213fe:	2000      	movs	r0, #0
 8021400:	6360      	str	r0, [r4, #52]	; 0x34
 8021402:	b113      	cbz	r3, 802140a <__ssrefill_r+0x24>
 8021404:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8021406:	6023      	str	r3, [r4, #0]
 8021408:	bd10      	pop	{r4, pc}
 802140a:	6923      	ldr	r3, [r4, #16]
 802140c:	6023      	str	r3, [r4, #0]
 802140e:	2300      	movs	r3, #0
 8021410:	6063      	str	r3, [r4, #4]
 8021412:	89a3      	ldrh	r3, [r4, #12]
 8021414:	f043 0320 	orr.w	r3, r3, #32
 8021418:	81a3      	strh	r3, [r4, #12]
 802141a:	f04f 30ff 	mov.w	r0, #4294967295
 802141e:	e7f3      	b.n	8021408 <__ssrefill_r+0x22>

08021420 <__ssvfiscanf_r>:
 8021420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021424:	460c      	mov	r4, r1
 8021426:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 802142a:	2100      	movs	r1, #0
 802142c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8021430:	49b2      	ldr	r1, [pc, #712]	; (80216fc <__ssvfiscanf_r+0x2dc>)
 8021432:	91a0      	str	r1, [sp, #640]	; 0x280
 8021434:	f10d 0804 	add.w	r8, sp, #4
 8021438:	49b1      	ldr	r1, [pc, #708]	; (8021700 <__ssvfiscanf_r+0x2e0>)
 802143a:	4fb2      	ldr	r7, [pc, #712]	; (8021704 <__ssvfiscanf_r+0x2e4>)
 802143c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8021708 <__ssvfiscanf_r+0x2e8>
 8021440:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8021444:	4606      	mov	r6, r0
 8021446:	91a1      	str	r1, [sp, #644]	; 0x284
 8021448:	9300      	str	r3, [sp, #0]
 802144a:	f892 a000 	ldrb.w	sl, [r2]
 802144e:	f1ba 0f00 	cmp.w	sl, #0
 8021452:	f000 8151 	beq.w	80216f8 <__ssvfiscanf_r+0x2d8>
 8021456:	f81a 3007 	ldrb.w	r3, [sl, r7]
 802145a:	f013 0308 	ands.w	r3, r3, #8
 802145e:	f102 0501 	add.w	r5, r2, #1
 8021462:	d019      	beq.n	8021498 <__ssvfiscanf_r+0x78>
 8021464:	6863      	ldr	r3, [r4, #4]
 8021466:	2b00      	cmp	r3, #0
 8021468:	dd0f      	ble.n	802148a <__ssvfiscanf_r+0x6a>
 802146a:	6823      	ldr	r3, [r4, #0]
 802146c:	781a      	ldrb	r2, [r3, #0]
 802146e:	5cba      	ldrb	r2, [r7, r2]
 8021470:	0712      	lsls	r2, r2, #28
 8021472:	d401      	bmi.n	8021478 <__ssvfiscanf_r+0x58>
 8021474:	462a      	mov	r2, r5
 8021476:	e7e8      	b.n	802144a <__ssvfiscanf_r+0x2a>
 8021478:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802147a:	3201      	adds	r2, #1
 802147c:	9245      	str	r2, [sp, #276]	; 0x114
 802147e:	6862      	ldr	r2, [r4, #4]
 8021480:	3301      	adds	r3, #1
 8021482:	3a01      	subs	r2, #1
 8021484:	6062      	str	r2, [r4, #4]
 8021486:	6023      	str	r3, [r4, #0]
 8021488:	e7ec      	b.n	8021464 <__ssvfiscanf_r+0x44>
 802148a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802148c:	4621      	mov	r1, r4
 802148e:	4630      	mov	r0, r6
 8021490:	4798      	blx	r3
 8021492:	2800      	cmp	r0, #0
 8021494:	d0e9      	beq.n	802146a <__ssvfiscanf_r+0x4a>
 8021496:	e7ed      	b.n	8021474 <__ssvfiscanf_r+0x54>
 8021498:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 802149c:	f040 8083 	bne.w	80215a6 <__ssvfiscanf_r+0x186>
 80214a0:	9341      	str	r3, [sp, #260]	; 0x104
 80214a2:	9343      	str	r3, [sp, #268]	; 0x10c
 80214a4:	7853      	ldrb	r3, [r2, #1]
 80214a6:	2b2a      	cmp	r3, #42	; 0x2a
 80214a8:	bf02      	ittt	eq
 80214aa:	2310      	moveq	r3, #16
 80214ac:	1c95      	addeq	r5, r2, #2
 80214ae:	9341      	streq	r3, [sp, #260]	; 0x104
 80214b0:	220a      	movs	r2, #10
 80214b2:	46ab      	mov	fp, r5
 80214b4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80214b8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80214bc:	2b09      	cmp	r3, #9
 80214be:	d91d      	bls.n	80214fc <__ssvfiscanf_r+0xdc>
 80214c0:	4891      	ldr	r0, [pc, #580]	; (8021708 <__ssvfiscanf_r+0x2e8>)
 80214c2:	2203      	movs	r2, #3
 80214c4:	f7de fe9c 	bl	8000200 <memchr>
 80214c8:	b140      	cbz	r0, 80214dc <__ssvfiscanf_r+0xbc>
 80214ca:	2301      	movs	r3, #1
 80214cc:	eba0 0009 	sub.w	r0, r0, r9
 80214d0:	fa03 f000 	lsl.w	r0, r3, r0
 80214d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80214d6:	4318      	orrs	r0, r3
 80214d8:	9041      	str	r0, [sp, #260]	; 0x104
 80214da:	465d      	mov	r5, fp
 80214dc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80214e0:	2b78      	cmp	r3, #120	; 0x78
 80214e2:	d806      	bhi.n	80214f2 <__ssvfiscanf_r+0xd2>
 80214e4:	2b57      	cmp	r3, #87	; 0x57
 80214e6:	d810      	bhi.n	802150a <__ssvfiscanf_r+0xea>
 80214e8:	2b25      	cmp	r3, #37	; 0x25
 80214ea:	d05c      	beq.n	80215a6 <__ssvfiscanf_r+0x186>
 80214ec:	d856      	bhi.n	802159c <__ssvfiscanf_r+0x17c>
 80214ee:	2b00      	cmp	r3, #0
 80214f0:	d074      	beq.n	80215dc <__ssvfiscanf_r+0x1bc>
 80214f2:	2303      	movs	r3, #3
 80214f4:	9347      	str	r3, [sp, #284]	; 0x11c
 80214f6:	230a      	movs	r3, #10
 80214f8:	9342      	str	r3, [sp, #264]	; 0x108
 80214fa:	e081      	b.n	8021600 <__ssvfiscanf_r+0x1e0>
 80214fc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80214fe:	fb02 1303 	mla	r3, r2, r3, r1
 8021502:	3b30      	subs	r3, #48	; 0x30
 8021504:	9343      	str	r3, [sp, #268]	; 0x10c
 8021506:	465d      	mov	r5, fp
 8021508:	e7d3      	b.n	80214b2 <__ssvfiscanf_r+0x92>
 802150a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802150e:	2a20      	cmp	r2, #32
 8021510:	d8ef      	bhi.n	80214f2 <__ssvfiscanf_r+0xd2>
 8021512:	a101      	add	r1, pc, #4	; (adr r1, 8021518 <__ssvfiscanf_r+0xf8>)
 8021514:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8021518:	080215eb 	.word	0x080215eb
 802151c:	080214f3 	.word	0x080214f3
 8021520:	080214f3 	.word	0x080214f3
 8021524:	08021649 	.word	0x08021649
 8021528:	080214f3 	.word	0x080214f3
 802152c:	080214f3 	.word	0x080214f3
 8021530:	080214f3 	.word	0x080214f3
 8021534:	080214f3 	.word	0x080214f3
 8021538:	080214f3 	.word	0x080214f3
 802153c:	080214f3 	.word	0x080214f3
 8021540:	080214f3 	.word	0x080214f3
 8021544:	0802165f 	.word	0x0802165f
 8021548:	08021635 	.word	0x08021635
 802154c:	080215a3 	.word	0x080215a3
 8021550:	080215a3 	.word	0x080215a3
 8021554:	080215a3 	.word	0x080215a3
 8021558:	080214f3 	.word	0x080214f3
 802155c:	08021639 	.word	0x08021639
 8021560:	080214f3 	.word	0x080214f3
 8021564:	080214f3 	.word	0x080214f3
 8021568:	080214f3 	.word	0x080214f3
 802156c:	080214f3 	.word	0x080214f3
 8021570:	0802166f 	.word	0x0802166f
 8021574:	08021641 	.word	0x08021641
 8021578:	080215e3 	.word	0x080215e3
 802157c:	080214f3 	.word	0x080214f3
 8021580:	080214f3 	.word	0x080214f3
 8021584:	0802166b 	.word	0x0802166b
 8021588:	080214f3 	.word	0x080214f3
 802158c:	08021635 	.word	0x08021635
 8021590:	080214f3 	.word	0x080214f3
 8021594:	080214f3 	.word	0x080214f3
 8021598:	080215eb 	.word	0x080215eb
 802159c:	3b45      	subs	r3, #69	; 0x45
 802159e:	2b02      	cmp	r3, #2
 80215a0:	d8a7      	bhi.n	80214f2 <__ssvfiscanf_r+0xd2>
 80215a2:	2305      	movs	r3, #5
 80215a4:	e02b      	b.n	80215fe <__ssvfiscanf_r+0x1de>
 80215a6:	6863      	ldr	r3, [r4, #4]
 80215a8:	2b00      	cmp	r3, #0
 80215aa:	dd0d      	ble.n	80215c8 <__ssvfiscanf_r+0x1a8>
 80215ac:	6823      	ldr	r3, [r4, #0]
 80215ae:	781a      	ldrb	r2, [r3, #0]
 80215b0:	4552      	cmp	r2, sl
 80215b2:	f040 80a1 	bne.w	80216f8 <__ssvfiscanf_r+0x2d8>
 80215b6:	3301      	adds	r3, #1
 80215b8:	6862      	ldr	r2, [r4, #4]
 80215ba:	6023      	str	r3, [r4, #0]
 80215bc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80215be:	3a01      	subs	r2, #1
 80215c0:	3301      	adds	r3, #1
 80215c2:	6062      	str	r2, [r4, #4]
 80215c4:	9345      	str	r3, [sp, #276]	; 0x114
 80215c6:	e755      	b.n	8021474 <__ssvfiscanf_r+0x54>
 80215c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80215ca:	4621      	mov	r1, r4
 80215cc:	4630      	mov	r0, r6
 80215ce:	4798      	blx	r3
 80215d0:	2800      	cmp	r0, #0
 80215d2:	d0eb      	beq.n	80215ac <__ssvfiscanf_r+0x18c>
 80215d4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80215d6:	2800      	cmp	r0, #0
 80215d8:	f040 8084 	bne.w	80216e4 <__ssvfiscanf_r+0x2c4>
 80215dc:	f04f 30ff 	mov.w	r0, #4294967295
 80215e0:	e086      	b.n	80216f0 <__ssvfiscanf_r+0x2d0>
 80215e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80215e4:	f042 0220 	orr.w	r2, r2, #32
 80215e8:	9241      	str	r2, [sp, #260]	; 0x104
 80215ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80215ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80215f0:	9241      	str	r2, [sp, #260]	; 0x104
 80215f2:	2210      	movs	r2, #16
 80215f4:	2b6f      	cmp	r3, #111	; 0x6f
 80215f6:	9242      	str	r2, [sp, #264]	; 0x108
 80215f8:	bf34      	ite	cc
 80215fa:	2303      	movcc	r3, #3
 80215fc:	2304      	movcs	r3, #4
 80215fe:	9347      	str	r3, [sp, #284]	; 0x11c
 8021600:	6863      	ldr	r3, [r4, #4]
 8021602:	2b00      	cmp	r3, #0
 8021604:	dd41      	ble.n	802168a <__ssvfiscanf_r+0x26a>
 8021606:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8021608:	0659      	lsls	r1, r3, #25
 802160a:	d404      	bmi.n	8021616 <__ssvfiscanf_r+0x1f6>
 802160c:	6823      	ldr	r3, [r4, #0]
 802160e:	781a      	ldrb	r2, [r3, #0]
 8021610:	5cba      	ldrb	r2, [r7, r2]
 8021612:	0712      	lsls	r2, r2, #28
 8021614:	d440      	bmi.n	8021698 <__ssvfiscanf_r+0x278>
 8021616:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8021618:	2b02      	cmp	r3, #2
 802161a:	dc4f      	bgt.n	80216bc <__ssvfiscanf_r+0x29c>
 802161c:	466b      	mov	r3, sp
 802161e:	4622      	mov	r2, r4
 8021620:	a941      	add	r1, sp, #260	; 0x104
 8021622:	4630      	mov	r0, r6
 8021624:	f000 f874 	bl	8021710 <_scanf_chars>
 8021628:	2801      	cmp	r0, #1
 802162a:	d065      	beq.n	80216f8 <__ssvfiscanf_r+0x2d8>
 802162c:	2802      	cmp	r0, #2
 802162e:	f47f af21 	bne.w	8021474 <__ssvfiscanf_r+0x54>
 8021632:	e7cf      	b.n	80215d4 <__ssvfiscanf_r+0x1b4>
 8021634:	220a      	movs	r2, #10
 8021636:	e7dd      	b.n	80215f4 <__ssvfiscanf_r+0x1d4>
 8021638:	2300      	movs	r3, #0
 802163a:	9342      	str	r3, [sp, #264]	; 0x108
 802163c:	2303      	movs	r3, #3
 802163e:	e7de      	b.n	80215fe <__ssvfiscanf_r+0x1de>
 8021640:	2308      	movs	r3, #8
 8021642:	9342      	str	r3, [sp, #264]	; 0x108
 8021644:	2304      	movs	r3, #4
 8021646:	e7da      	b.n	80215fe <__ssvfiscanf_r+0x1de>
 8021648:	4629      	mov	r1, r5
 802164a:	4640      	mov	r0, r8
 802164c:	f000 f9be 	bl	80219cc <__sccl>
 8021650:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8021652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021656:	9341      	str	r3, [sp, #260]	; 0x104
 8021658:	4605      	mov	r5, r0
 802165a:	2301      	movs	r3, #1
 802165c:	e7cf      	b.n	80215fe <__ssvfiscanf_r+0x1de>
 802165e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8021660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021664:	9341      	str	r3, [sp, #260]	; 0x104
 8021666:	2300      	movs	r3, #0
 8021668:	e7c9      	b.n	80215fe <__ssvfiscanf_r+0x1de>
 802166a:	2302      	movs	r3, #2
 802166c:	e7c7      	b.n	80215fe <__ssvfiscanf_r+0x1de>
 802166e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8021670:	06c3      	lsls	r3, r0, #27
 8021672:	f53f aeff 	bmi.w	8021474 <__ssvfiscanf_r+0x54>
 8021676:	9b00      	ldr	r3, [sp, #0]
 8021678:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802167a:	1d19      	adds	r1, r3, #4
 802167c:	9100      	str	r1, [sp, #0]
 802167e:	681b      	ldr	r3, [r3, #0]
 8021680:	07c0      	lsls	r0, r0, #31
 8021682:	bf4c      	ite	mi
 8021684:	801a      	strhmi	r2, [r3, #0]
 8021686:	601a      	strpl	r2, [r3, #0]
 8021688:	e6f4      	b.n	8021474 <__ssvfiscanf_r+0x54>
 802168a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802168c:	4621      	mov	r1, r4
 802168e:	4630      	mov	r0, r6
 8021690:	4798      	blx	r3
 8021692:	2800      	cmp	r0, #0
 8021694:	d0b7      	beq.n	8021606 <__ssvfiscanf_r+0x1e6>
 8021696:	e79d      	b.n	80215d4 <__ssvfiscanf_r+0x1b4>
 8021698:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802169a:	3201      	adds	r2, #1
 802169c:	9245      	str	r2, [sp, #276]	; 0x114
 802169e:	6862      	ldr	r2, [r4, #4]
 80216a0:	3a01      	subs	r2, #1
 80216a2:	2a00      	cmp	r2, #0
 80216a4:	6062      	str	r2, [r4, #4]
 80216a6:	dd02      	ble.n	80216ae <__ssvfiscanf_r+0x28e>
 80216a8:	3301      	adds	r3, #1
 80216aa:	6023      	str	r3, [r4, #0]
 80216ac:	e7ae      	b.n	802160c <__ssvfiscanf_r+0x1ec>
 80216ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80216b0:	4621      	mov	r1, r4
 80216b2:	4630      	mov	r0, r6
 80216b4:	4798      	blx	r3
 80216b6:	2800      	cmp	r0, #0
 80216b8:	d0a8      	beq.n	802160c <__ssvfiscanf_r+0x1ec>
 80216ba:	e78b      	b.n	80215d4 <__ssvfiscanf_r+0x1b4>
 80216bc:	2b04      	cmp	r3, #4
 80216be:	dc06      	bgt.n	80216ce <__ssvfiscanf_r+0x2ae>
 80216c0:	466b      	mov	r3, sp
 80216c2:	4622      	mov	r2, r4
 80216c4:	a941      	add	r1, sp, #260	; 0x104
 80216c6:	4630      	mov	r0, r6
 80216c8:	f000 f87a 	bl	80217c0 <_scanf_i>
 80216cc:	e7ac      	b.n	8021628 <__ssvfiscanf_r+0x208>
 80216ce:	4b0f      	ldr	r3, [pc, #60]	; (802170c <__ssvfiscanf_r+0x2ec>)
 80216d0:	2b00      	cmp	r3, #0
 80216d2:	f43f aecf 	beq.w	8021474 <__ssvfiscanf_r+0x54>
 80216d6:	466b      	mov	r3, sp
 80216d8:	4622      	mov	r2, r4
 80216da:	a941      	add	r1, sp, #260	; 0x104
 80216dc:	4630      	mov	r0, r6
 80216de:	f3af 8000 	nop.w
 80216e2:	e7a1      	b.n	8021628 <__ssvfiscanf_r+0x208>
 80216e4:	89a3      	ldrh	r3, [r4, #12]
 80216e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80216ea:	bf18      	it	ne
 80216ec:	f04f 30ff 	movne.w	r0, #4294967295
 80216f0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80216f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80216f8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80216fa:	e7f9      	b.n	80216f0 <__ssvfiscanf_r+0x2d0>
 80216fc:	0802136d 	.word	0x0802136d
 8021700:	080213e7 	.word	0x080213e7
 8021704:	0802764d 	.word	0x0802764d
 8021708:	0802796a 	.word	0x0802796a
 802170c:	00000000 	.word	0x00000000

08021710 <_scanf_chars>:
 8021710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021714:	4615      	mov	r5, r2
 8021716:	688a      	ldr	r2, [r1, #8]
 8021718:	4680      	mov	r8, r0
 802171a:	460c      	mov	r4, r1
 802171c:	b932      	cbnz	r2, 802172c <_scanf_chars+0x1c>
 802171e:	698a      	ldr	r2, [r1, #24]
 8021720:	2a00      	cmp	r2, #0
 8021722:	bf0c      	ite	eq
 8021724:	2201      	moveq	r2, #1
 8021726:	f04f 32ff 	movne.w	r2, #4294967295
 802172a:	608a      	str	r2, [r1, #8]
 802172c:	6822      	ldr	r2, [r4, #0]
 802172e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80217bc <_scanf_chars+0xac>
 8021732:	06d1      	lsls	r1, r2, #27
 8021734:	bf5f      	itttt	pl
 8021736:	681a      	ldrpl	r2, [r3, #0]
 8021738:	1d11      	addpl	r1, r2, #4
 802173a:	6019      	strpl	r1, [r3, #0]
 802173c:	6816      	ldrpl	r6, [r2, #0]
 802173e:	2700      	movs	r7, #0
 8021740:	69a0      	ldr	r0, [r4, #24]
 8021742:	b188      	cbz	r0, 8021768 <_scanf_chars+0x58>
 8021744:	2801      	cmp	r0, #1
 8021746:	d107      	bne.n	8021758 <_scanf_chars+0x48>
 8021748:	682b      	ldr	r3, [r5, #0]
 802174a:	781a      	ldrb	r2, [r3, #0]
 802174c:	6963      	ldr	r3, [r4, #20]
 802174e:	5c9b      	ldrb	r3, [r3, r2]
 8021750:	b953      	cbnz	r3, 8021768 <_scanf_chars+0x58>
 8021752:	bb27      	cbnz	r7, 802179e <_scanf_chars+0x8e>
 8021754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021758:	2802      	cmp	r0, #2
 802175a:	d120      	bne.n	802179e <_scanf_chars+0x8e>
 802175c:	682b      	ldr	r3, [r5, #0]
 802175e:	781b      	ldrb	r3, [r3, #0]
 8021760:	f813 3009 	ldrb.w	r3, [r3, r9]
 8021764:	071b      	lsls	r3, r3, #28
 8021766:	d41a      	bmi.n	802179e <_scanf_chars+0x8e>
 8021768:	6823      	ldr	r3, [r4, #0]
 802176a:	06da      	lsls	r2, r3, #27
 802176c:	bf5e      	ittt	pl
 802176e:	682b      	ldrpl	r3, [r5, #0]
 8021770:	781b      	ldrbpl	r3, [r3, #0]
 8021772:	f806 3b01 	strbpl.w	r3, [r6], #1
 8021776:	682a      	ldr	r2, [r5, #0]
 8021778:	686b      	ldr	r3, [r5, #4]
 802177a:	3201      	adds	r2, #1
 802177c:	602a      	str	r2, [r5, #0]
 802177e:	68a2      	ldr	r2, [r4, #8]
 8021780:	3b01      	subs	r3, #1
 8021782:	3a01      	subs	r2, #1
 8021784:	606b      	str	r3, [r5, #4]
 8021786:	3701      	adds	r7, #1
 8021788:	60a2      	str	r2, [r4, #8]
 802178a:	b142      	cbz	r2, 802179e <_scanf_chars+0x8e>
 802178c:	2b00      	cmp	r3, #0
 802178e:	dcd7      	bgt.n	8021740 <_scanf_chars+0x30>
 8021790:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8021794:	4629      	mov	r1, r5
 8021796:	4640      	mov	r0, r8
 8021798:	4798      	blx	r3
 802179a:	2800      	cmp	r0, #0
 802179c:	d0d0      	beq.n	8021740 <_scanf_chars+0x30>
 802179e:	6823      	ldr	r3, [r4, #0]
 80217a0:	f013 0310 	ands.w	r3, r3, #16
 80217a4:	d105      	bne.n	80217b2 <_scanf_chars+0xa2>
 80217a6:	68e2      	ldr	r2, [r4, #12]
 80217a8:	3201      	adds	r2, #1
 80217aa:	60e2      	str	r2, [r4, #12]
 80217ac:	69a2      	ldr	r2, [r4, #24]
 80217ae:	b102      	cbz	r2, 80217b2 <_scanf_chars+0xa2>
 80217b0:	7033      	strb	r3, [r6, #0]
 80217b2:	6923      	ldr	r3, [r4, #16]
 80217b4:	441f      	add	r7, r3
 80217b6:	6127      	str	r7, [r4, #16]
 80217b8:	2000      	movs	r0, #0
 80217ba:	e7cb      	b.n	8021754 <_scanf_chars+0x44>
 80217bc:	0802764d 	.word	0x0802764d

080217c0 <_scanf_i>:
 80217c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217c4:	4698      	mov	r8, r3
 80217c6:	4b74      	ldr	r3, [pc, #464]	; (8021998 <_scanf_i+0x1d8>)
 80217c8:	460c      	mov	r4, r1
 80217ca:	4682      	mov	sl, r0
 80217cc:	4616      	mov	r6, r2
 80217ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80217d2:	b087      	sub	sp, #28
 80217d4:	ab03      	add	r3, sp, #12
 80217d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80217da:	4b70      	ldr	r3, [pc, #448]	; (802199c <_scanf_i+0x1dc>)
 80217dc:	69a1      	ldr	r1, [r4, #24]
 80217de:	4a70      	ldr	r2, [pc, #448]	; (80219a0 <_scanf_i+0x1e0>)
 80217e0:	2903      	cmp	r1, #3
 80217e2:	bf18      	it	ne
 80217e4:	461a      	movne	r2, r3
 80217e6:	68a3      	ldr	r3, [r4, #8]
 80217e8:	9201      	str	r2, [sp, #4]
 80217ea:	1e5a      	subs	r2, r3, #1
 80217ec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80217f0:	bf88      	it	hi
 80217f2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80217f6:	4627      	mov	r7, r4
 80217f8:	bf82      	ittt	hi
 80217fa:	eb03 0905 	addhi.w	r9, r3, r5
 80217fe:	f240 135d 	movwhi	r3, #349	; 0x15d
 8021802:	60a3      	strhi	r3, [r4, #8]
 8021804:	f857 3b1c 	ldr.w	r3, [r7], #28
 8021808:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802180c:	bf98      	it	ls
 802180e:	f04f 0900 	movls.w	r9, #0
 8021812:	6023      	str	r3, [r4, #0]
 8021814:	463d      	mov	r5, r7
 8021816:	f04f 0b00 	mov.w	fp, #0
 802181a:	6831      	ldr	r1, [r6, #0]
 802181c:	ab03      	add	r3, sp, #12
 802181e:	7809      	ldrb	r1, [r1, #0]
 8021820:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8021824:	2202      	movs	r2, #2
 8021826:	f7de fceb 	bl	8000200 <memchr>
 802182a:	b328      	cbz	r0, 8021878 <_scanf_i+0xb8>
 802182c:	f1bb 0f01 	cmp.w	fp, #1
 8021830:	d159      	bne.n	80218e6 <_scanf_i+0x126>
 8021832:	6862      	ldr	r2, [r4, #4]
 8021834:	b92a      	cbnz	r2, 8021842 <_scanf_i+0x82>
 8021836:	6822      	ldr	r2, [r4, #0]
 8021838:	2308      	movs	r3, #8
 802183a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802183e:	6063      	str	r3, [r4, #4]
 8021840:	6022      	str	r2, [r4, #0]
 8021842:	6822      	ldr	r2, [r4, #0]
 8021844:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8021848:	6022      	str	r2, [r4, #0]
 802184a:	68a2      	ldr	r2, [r4, #8]
 802184c:	1e51      	subs	r1, r2, #1
 802184e:	60a1      	str	r1, [r4, #8]
 8021850:	b192      	cbz	r2, 8021878 <_scanf_i+0xb8>
 8021852:	6832      	ldr	r2, [r6, #0]
 8021854:	1c51      	adds	r1, r2, #1
 8021856:	6031      	str	r1, [r6, #0]
 8021858:	7812      	ldrb	r2, [r2, #0]
 802185a:	f805 2b01 	strb.w	r2, [r5], #1
 802185e:	6872      	ldr	r2, [r6, #4]
 8021860:	3a01      	subs	r2, #1
 8021862:	2a00      	cmp	r2, #0
 8021864:	6072      	str	r2, [r6, #4]
 8021866:	dc07      	bgt.n	8021878 <_scanf_i+0xb8>
 8021868:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 802186c:	4631      	mov	r1, r6
 802186e:	4650      	mov	r0, sl
 8021870:	4790      	blx	r2
 8021872:	2800      	cmp	r0, #0
 8021874:	f040 8085 	bne.w	8021982 <_scanf_i+0x1c2>
 8021878:	f10b 0b01 	add.w	fp, fp, #1
 802187c:	f1bb 0f03 	cmp.w	fp, #3
 8021880:	d1cb      	bne.n	802181a <_scanf_i+0x5a>
 8021882:	6863      	ldr	r3, [r4, #4]
 8021884:	b90b      	cbnz	r3, 802188a <_scanf_i+0xca>
 8021886:	230a      	movs	r3, #10
 8021888:	6063      	str	r3, [r4, #4]
 802188a:	6863      	ldr	r3, [r4, #4]
 802188c:	4945      	ldr	r1, [pc, #276]	; (80219a4 <_scanf_i+0x1e4>)
 802188e:	6960      	ldr	r0, [r4, #20]
 8021890:	1ac9      	subs	r1, r1, r3
 8021892:	f000 f89b 	bl	80219cc <__sccl>
 8021896:	f04f 0b00 	mov.w	fp, #0
 802189a:	68a3      	ldr	r3, [r4, #8]
 802189c:	6822      	ldr	r2, [r4, #0]
 802189e:	2b00      	cmp	r3, #0
 80218a0:	d03d      	beq.n	802191e <_scanf_i+0x15e>
 80218a2:	6831      	ldr	r1, [r6, #0]
 80218a4:	6960      	ldr	r0, [r4, #20]
 80218a6:	f891 c000 	ldrb.w	ip, [r1]
 80218aa:	f810 000c 	ldrb.w	r0, [r0, ip]
 80218ae:	2800      	cmp	r0, #0
 80218b0:	d035      	beq.n	802191e <_scanf_i+0x15e>
 80218b2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80218b6:	d124      	bne.n	8021902 <_scanf_i+0x142>
 80218b8:	0510      	lsls	r0, r2, #20
 80218ba:	d522      	bpl.n	8021902 <_scanf_i+0x142>
 80218bc:	f10b 0b01 	add.w	fp, fp, #1
 80218c0:	f1b9 0f00 	cmp.w	r9, #0
 80218c4:	d003      	beq.n	80218ce <_scanf_i+0x10e>
 80218c6:	3301      	adds	r3, #1
 80218c8:	f109 39ff 	add.w	r9, r9, #4294967295
 80218cc:	60a3      	str	r3, [r4, #8]
 80218ce:	6873      	ldr	r3, [r6, #4]
 80218d0:	3b01      	subs	r3, #1
 80218d2:	2b00      	cmp	r3, #0
 80218d4:	6073      	str	r3, [r6, #4]
 80218d6:	dd1b      	ble.n	8021910 <_scanf_i+0x150>
 80218d8:	6833      	ldr	r3, [r6, #0]
 80218da:	3301      	adds	r3, #1
 80218dc:	6033      	str	r3, [r6, #0]
 80218de:	68a3      	ldr	r3, [r4, #8]
 80218e0:	3b01      	subs	r3, #1
 80218e2:	60a3      	str	r3, [r4, #8]
 80218e4:	e7d9      	b.n	802189a <_scanf_i+0xda>
 80218e6:	f1bb 0f02 	cmp.w	fp, #2
 80218ea:	d1ae      	bne.n	802184a <_scanf_i+0x8a>
 80218ec:	6822      	ldr	r2, [r4, #0]
 80218ee:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80218f2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80218f6:	d1bf      	bne.n	8021878 <_scanf_i+0xb8>
 80218f8:	2310      	movs	r3, #16
 80218fa:	6063      	str	r3, [r4, #4]
 80218fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8021900:	e7a2      	b.n	8021848 <_scanf_i+0x88>
 8021902:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8021906:	6022      	str	r2, [r4, #0]
 8021908:	780b      	ldrb	r3, [r1, #0]
 802190a:	f805 3b01 	strb.w	r3, [r5], #1
 802190e:	e7de      	b.n	80218ce <_scanf_i+0x10e>
 8021910:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8021914:	4631      	mov	r1, r6
 8021916:	4650      	mov	r0, sl
 8021918:	4798      	blx	r3
 802191a:	2800      	cmp	r0, #0
 802191c:	d0df      	beq.n	80218de <_scanf_i+0x11e>
 802191e:	6823      	ldr	r3, [r4, #0]
 8021920:	05d9      	lsls	r1, r3, #23
 8021922:	d50d      	bpl.n	8021940 <_scanf_i+0x180>
 8021924:	42bd      	cmp	r5, r7
 8021926:	d909      	bls.n	802193c <_scanf_i+0x17c>
 8021928:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802192c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8021930:	4632      	mov	r2, r6
 8021932:	4650      	mov	r0, sl
 8021934:	4798      	blx	r3
 8021936:	f105 39ff 	add.w	r9, r5, #4294967295
 802193a:	464d      	mov	r5, r9
 802193c:	42bd      	cmp	r5, r7
 802193e:	d028      	beq.n	8021992 <_scanf_i+0x1d2>
 8021940:	6822      	ldr	r2, [r4, #0]
 8021942:	f012 0210 	ands.w	r2, r2, #16
 8021946:	d113      	bne.n	8021970 <_scanf_i+0x1b0>
 8021948:	702a      	strb	r2, [r5, #0]
 802194a:	6863      	ldr	r3, [r4, #4]
 802194c:	9e01      	ldr	r6, [sp, #4]
 802194e:	4639      	mov	r1, r7
 8021950:	4650      	mov	r0, sl
 8021952:	47b0      	blx	r6
 8021954:	f8d8 3000 	ldr.w	r3, [r8]
 8021958:	6821      	ldr	r1, [r4, #0]
 802195a:	1d1a      	adds	r2, r3, #4
 802195c:	f8c8 2000 	str.w	r2, [r8]
 8021960:	f011 0f20 	tst.w	r1, #32
 8021964:	681b      	ldr	r3, [r3, #0]
 8021966:	d00f      	beq.n	8021988 <_scanf_i+0x1c8>
 8021968:	6018      	str	r0, [r3, #0]
 802196a:	68e3      	ldr	r3, [r4, #12]
 802196c:	3301      	adds	r3, #1
 802196e:	60e3      	str	r3, [r4, #12]
 8021970:	1bed      	subs	r5, r5, r7
 8021972:	44ab      	add	fp, r5
 8021974:	6925      	ldr	r5, [r4, #16]
 8021976:	445d      	add	r5, fp
 8021978:	6125      	str	r5, [r4, #16]
 802197a:	2000      	movs	r0, #0
 802197c:	b007      	add	sp, #28
 802197e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021982:	f04f 0b00 	mov.w	fp, #0
 8021986:	e7ca      	b.n	802191e <_scanf_i+0x15e>
 8021988:	07ca      	lsls	r2, r1, #31
 802198a:	bf4c      	ite	mi
 802198c:	8018      	strhmi	r0, [r3, #0]
 802198e:	6018      	strpl	r0, [r3, #0]
 8021990:	e7eb      	b.n	802196a <_scanf_i+0x1aa>
 8021992:	2001      	movs	r0, #1
 8021994:	e7f2      	b.n	802197c <_scanf_i+0x1bc>
 8021996:	bf00      	nop
 8021998:	08026620 	.word	0x08026620
 802199c:	08020e95 	.word	0x08020e95
 80219a0:	0801f985 	.word	0x0801f985
 80219a4:	080279b0 	.word	0x080279b0

080219a8 <_read_r>:
 80219a8:	b538      	push	{r3, r4, r5, lr}
 80219aa:	4d07      	ldr	r5, [pc, #28]	; (80219c8 <_read_r+0x20>)
 80219ac:	4604      	mov	r4, r0
 80219ae:	4608      	mov	r0, r1
 80219b0:	4611      	mov	r1, r2
 80219b2:	2200      	movs	r2, #0
 80219b4:	602a      	str	r2, [r5, #0]
 80219b6:	461a      	mov	r2, r3
 80219b8:	f7e1 ffe8 	bl	800398c <_read>
 80219bc:	1c43      	adds	r3, r0, #1
 80219be:	d102      	bne.n	80219c6 <_read_r+0x1e>
 80219c0:	682b      	ldr	r3, [r5, #0]
 80219c2:	b103      	cbz	r3, 80219c6 <_read_r+0x1e>
 80219c4:	6023      	str	r3, [r4, #0]
 80219c6:	bd38      	pop	{r3, r4, r5, pc}
 80219c8:	2000b8f0 	.word	0x2000b8f0

080219cc <__sccl>:
 80219cc:	b570      	push	{r4, r5, r6, lr}
 80219ce:	780b      	ldrb	r3, [r1, #0]
 80219d0:	4604      	mov	r4, r0
 80219d2:	2b5e      	cmp	r3, #94	; 0x5e
 80219d4:	bf0b      	itete	eq
 80219d6:	784b      	ldrbeq	r3, [r1, #1]
 80219d8:	1c48      	addne	r0, r1, #1
 80219da:	1c88      	addeq	r0, r1, #2
 80219dc:	2200      	movne	r2, #0
 80219de:	bf08      	it	eq
 80219e0:	2201      	moveq	r2, #1
 80219e2:	1e61      	subs	r1, r4, #1
 80219e4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80219e8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80219ec:	42a9      	cmp	r1, r5
 80219ee:	d1fb      	bne.n	80219e8 <__sccl+0x1c>
 80219f0:	b90b      	cbnz	r3, 80219f6 <__sccl+0x2a>
 80219f2:	3801      	subs	r0, #1
 80219f4:	bd70      	pop	{r4, r5, r6, pc}
 80219f6:	f082 0101 	eor.w	r1, r2, #1
 80219fa:	54e1      	strb	r1, [r4, r3]
 80219fc:	1c42      	adds	r2, r0, #1
 80219fe:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8021a02:	2d2d      	cmp	r5, #45	; 0x2d
 8021a04:	f102 36ff 	add.w	r6, r2, #4294967295
 8021a08:	4610      	mov	r0, r2
 8021a0a:	d006      	beq.n	8021a1a <__sccl+0x4e>
 8021a0c:	2d5d      	cmp	r5, #93	; 0x5d
 8021a0e:	d0f1      	beq.n	80219f4 <__sccl+0x28>
 8021a10:	b90d      	cbnz	r5, 8021a16 <__sccl+0x4a>
 8021a12:	4630      	mov	r0, r6
 8021a14:	e7ee      	b.n	80219f4 <__sccl+0x28>
 8021a16:	462b      	mov	r3, r5
 8021a18:	e7ef      	b.n	80219fa <__sccl+0x2e>
 8021a1a:	7816      	ldrb	r6, [r2, #0]
 8021a1c:	2e5d      	cmp	r6, #93	; 0x5d
 8021a1e:	d0fa      	beq.n	8021a16 <__sccl+0x4a>
 8021a20:	42b3      	cmp	r3, r6
 8021a22:	dcf8      	bgt.n	8021a16 <__sccl+0x4a>
 8021a24:	4618      	mov	r0, r3
 8021a26:	3001      	adds	r0, #1
 8021a28:	4286      	cmp	r6, r0
 8021a2a:	5421      	strb	r1, [r4, r0]
 8021a2c:	dcfb      	bgt.n	8021a26 <__sccl+0x5a>
 8021a2e:	43d8      	mvns	r0, r3
 8021a30:	4430      	add	r0, r6
 8021a32:	1c5d      	adds	r5, r3, #1
 8021a34:	42b3      	cmp	r3, r6
 8021a36:	bfa8      	it	ge
 8021a38:	2000      	movge	r0, #0
 8021a3a:	182b      	adds	r3, r5, r0
 8021a3c:	3202      	adds	r2, #2
 8021a3e:	e7de      	b.n	80219fe <__sccl+0x32>

08021a40 <_raise_r>:
 8021a40:	291f      	cmp	r1, #31
 8021a42:	b538      	push	{r3, r4, r5, lr}
 8021a44:	4604      	mov	r4, r0
 8021a46:	460d      	mov	r5, r1
 8021a48:	d904      	bls.n	8021a54 <_raise_r+0x14>
 8021a4a:	2316      	movs	r3, #22
 8021a4c:	6003      	str	r3, [r0, #0]
 8021a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8021a52:	bd38      	pop	{r3, r4, r5, pc}
 8021a54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8021a56:	b112      	cbz	r2, 8021a5e <_raise_r+0x1e>
 8021a58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021a5c:	b94b      	cbnz	r3, 8021a72 <_raise_r+0x32>
 8021a5e:	4620      	mov	r0, r4
 8021a60:	f000 f830 	bl	8021ac4 <_getpid_r>
 8021a64:	462a      	mov	r2, r5
 8021a66:	4601      	mov	r1, r0
 8021a68:	4620      	mov	r0, r4
 8021a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021a6e:	f000 b817 	b.w	8021aa0 <_kill_r>
 8021a72:	2b01      	cmp	r3, #1
 8021a74:	d00a      	beq.n	8021a8c <_raise_r+0x4c>
 8021a76:	1c59      	adds	r1, r3, #1
 8021a78:	d103      	bne.n	8021a82 <_raise_r+0x42>
 8021a7a:	2316      	movs	r3, #22
 8021a7c:	6003      	str	r3, [r0, #0]
 8021a7e:	2001      	movs	r0, #1
 8021a80:	e7e7      	b.n	8021a52 <_raise_r+0x12>
 8021a82:	2400      	movs	r4, #0
 8021a84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021a88:	4628      	mov	r0, r5
 8021a8a:	4798      	blx	r3
 8021a8c:	2000      	movs	r0, #0
 8021a8e:	e7e0      	b.n	8021a52 <_raise_r+0x12>

08021a90 <raise>:
 8021a90:	4b02      	ldr	r3, [pc, #8]	; (8021a9c <raise+0xc>)
 8021a92:	4601      	mov	r1, r0
 8021a94:	6818      	ldr	r0, [r3, #0]
 8021a96:	f7ff bfd3 	b.w	8021a40 <_raise_r>
 8021a9a:	bf00      	nop
 8021a9c:	200001ac 	.word	0x200001ac

08021aa0 <_kill_r>:
 8021aa0:	b538      	push	{r3, r4, r5, lr}
 8021aa2:	4d07      	ldr	r5, [pc, #28]	; (8021ac0 <_kill_r+0x20>)
 8021aa4:	2300      	movs	r3, #0
 8021aa6:	4604      	mov	r4, r0
 8021aa8:	4608      	mov	r0, r1
 8021aaa:	4611      	mov	r1, r2
 8021aac:	602b      	str	r3, [r5, #0]
 8021aae:	f7e1 ff51 	bl	8003954 <_kill>
 8021ab2:	1c43      	adds	r3, r0, #1
 8021ab4:	d102      	bne.n	8021abc <_kill_r+0x1c>
 8021ab6:	682b      	ldr	r3, [r5, #0]
 8021ab8:	b103      	cbz	r3, 8021abc <_kill_r+0x1c>
 8021aba:	6023      	str	r3, [r4, #0]
 8021abc:	bd38      	pop	{r3, r4, r5, pc}
 8021abe:	bf00      	nop
 8021ac0:	2000b8f0 	.word	0x2000b8f0

08021ac4 <_getpid_r>:
 8021ac4:	f7e1 bf3e 	b.w	8003944 <_getpid>

08021ac8 <__submore>:
 8021ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021acc:	460c      	mov	r4, r1
 8021ace:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8021ad0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021ad4:	4299      	cmp	r1, r3
 8021ad6:	d11d      	bne.n	8021b14 <__submore+0x4c>
 8021ad8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021adc:	f7fe fc30 	bl	8020340 <_malloc_r>
 8021ae0:	b918      	cbnz	r0, 8021aea <__submore+0x22>
 8021ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8021ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021aee:	63a3      	str	r3, [r4, #56]	; 0x38
 8021af0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8021af4:	6360      	str	r0, [r4, #52]	; 0x34
 8021af6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8021afa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8021afe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8021b02:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8021b06:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8021b0a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8021b0e:	6020      	str	r0, [r4, #0]
 8021b10:	2000      	movs	r0, #0
 8021b12:	e7e8      	b.n	8021ae6 <__submore+0x1e>
 8021b14:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8021b16:	0077      	lsls	r7, r6, #1
 8021b18:	463a      	mov	r2, r7
 8021b1a:	f7ff fc01 	bl	8021320 <_realloc_r>
 8021b1e:	4605      	mov	r5, r0
 8021b20:	2800      	cmp	r0, #0
 8021b22:	d0de      	beq.n	8021ae2 <__submore+0x1a>
 8021b24:	eb00 0806 	add.w	r8, r0, r6
 8021b28:	4601      	mov	r1, r0
 8021b2a:	4632      	mov	r2, r6
 8021b2c:	4640      	mov	r0, r8
 8021b2e:	f7fd fb19 	bl	801f164 <memcpy>
 8021b32:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8021b36:	f8c4 8000 	str.w	r8, [r4]
 8021b3a:	e7e9      	b.n	8021b10 <__submore+0x48>

08021b3c <_fstat_r>:
 8021b3c:	b538      	push	{r3, r4, r5, lr}
 8021b3e:	4d07      	ldr	r5, [pc, #28]	; (8021b5c <_fstat_r+0x20>)
 8021b40:	2300      	movs	r3, #0
 8021b42:	4604      	mov	r4, r0
 8021b44:	4608      	mov	r0, r1
 8021b46:	4611      	mov	r1, r2
 8021b48:	602b      	str	r3, [r5, #0]
 8021b4a:	f7e1 ff64 	bl	8003a16 <_fstat>
 8021b4e:	1c43      	adds	r3, r0, #1
 8021b50:	d102      	bne.n	8021b58 <_fstat_r+0x1c>
 8021b52:	682b      	ldr	r3, [r5, #0]
 8021b54:	b103      	cbz	r3, 8021b58 <_fstat_r+0x1c>
 8021b56:	6023      	str	r3, [r4, #0]
 8021b58:	bd38      	pop	{r3, r4, r5, pc}
 8021b5a:	bf00      	nop
 8021b5c:	2000b8f0 	.word	0x2000b8f0

08021b60 <_isatty_r>:
 8021b60:	b538      	push	{r3, r4, r5, lr}
 8021b62:	4d06      	ldr	r5, [pc, #24]	; (8021b7c <_isatty_r+0x1c>)
 8021b64:	2300      	movs	r3, #0
 8021b66:	4604      	mov	r4, r0
 8021b68:	4608      	mov	r0, r1
 8021b6a:	602b      	str	r3, [r5, #0]
 8021b6c:	f7e1 ff63 	bl	8003a36 <_isatty>
 8021b70:	1c43      	adds	r3, r0, #1
 8021b72:	d102      	bne.n	8021b7a <_isatty_r+0x1a>
 8021b74:	682b      	ldr	r3, [r5, #0]
 8021b76:	b103      	cbz	r3, 8021b7a <_isatty_r+0x1a>
 8021b78:	6023      	str	r3, [r4, #0]
 8021b7a:	bd38      	pop	{r3, r4, r5, pc}
 8021b7c:	2000b8f0 	.word	0x2000b8f0

08021b80 <_malloc_usable_size_r>:
 8021b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021b84:	1f18      	subs	r0, r3, #4
 8021b86:	2b00      	cmp	r3, #0
 8021b88:	bfbc      	itt	lt
 8021b8a:	580b      	ldrlt	r3, [r1, r0]
 8021b8c:	18c0      	addlt	r0, r0, r3
 8021b8e:	4770      	bx	lr

08021b90 <pow>:
 8021b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021b94:	ec59 8b10 	vmov	r8, r9, d0
 8021b98:	ec57 6b11 	vmov	r6, r7, d1
 8021b9c:	f000 f8a8 	bl	8021cf0 <__ieee754_pow>
 8021ba0:	4b4e      	ldr	r3, [pc, #312]	; (8021cdc <pow+0x14c>)
 8021ba2:	f993 3000 	ldrsb.w	r3, [r3]
 8021ba6:	3301      	adds	r3, #1
 8021ba8:	ec55 4b10 	vmov	r4, r5, d0
 8021bac:	d015      	beq.n	8021bda <pow+0x4a>
 8021bae:	4632      	mov	r2, r6
 8021bb0:	463b      	mov	r3, r7
 8021bb2:	4630      	mov	r0, r6
 8021bb4:	4639      	mov	r1, r7
 8021bb6:	f7de ffc9 	bl	8000b4c <__aeabi_dcmpun>
 8021bba:	b970      	cbnz	r0, 8021bda <pow+0x4a>
 8021bbc:	4642      	mov	r2, r8
 8021bbe:	464b      	mov	r3, r9
 8021bc0:	4640      	mov	r0, r8
 8021bc2:	4649      	mov	r1, r9
 8021bc4:	f7de ffc2 	bl	8000b4c <__aeabi_dcmpun>
 8021bc8:	2200      	movs	r2, #0
 8021bca:	2300      	movs	r3, #0
 8021bcc:	b148      	cbz	r0, 8021be2 <pow+0x52>
 8021bce:	4630      	mov	r0, r6
 8021bd0:	4639      	mov	r1, r7
 8021bd2:	f7de ff89 	bl	8000ae8 <__aeabi_dcmpeq>
 8021bd6:	2800      	cmp	r0, #0
 8021bd8:	d17d      	bne.n	8021cd6 <pow+0x146>
 8021bda:	ec45 4b10 	vmov	d0, r4, r5
 8021bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021be2:	4640      	mov	r0, r8
 8021be4:	4649      	mov	r1, r9
 8021be6:	f7de ff7f 	bl	8000ae8 <__aeabi_dcmpeq>
 8021bea:	b1e0      	cbz	r0, 8021c26 <pow+0x96>
 8021bec:	2200      	movs	r2, #0
 8021bee:	2300      	movs	r3, #0
 8021bf0:	4630      	mov	r0, r6
 8021bf2:	4639      	mov	r1, r7
 8021bf4:	f7de ff78 	bl	8000ae8 <__aeabi_dcmpeq>
 8021bf8:	2800      	cmp	r0, #0
 8021bfa:	d16c      	bne.n	8021cd6 <pow+0x146>
 8021bfc:	ec47 6b10 	vmov	d0, r6, r7
 8021c00:	f000 fe55 	bl	80228ae <finite>
 8021c04:	2800      	cmp	r0, #0
 8021c06:	d0e8      	beq.n	8021bda <pow+0x4a>
 8021c08:	2200      	movs	r2, #0
 8021c0a:	2300      	movs	r3, #0
 8021c0c:	4630      	mov	r0, r6
 8021c0e:	4639      	mov	r1, r7
 8021c10:	f7de ff74 	bl	8000afc <__aeabi_dcmplt>
 8021c14:	2800      	cmp	r0, #0
 8021c16:	d0e0      	beq.n	8021bda <pow+0x4a>
 8021c18:	f7fe f928 	bl	801fe6c <__errno>
 8021c1c:	2321      	movs	r3, #33	; 0x21
 8021c1e:	6003      	str	r3, [r0, #0]
 8021c20:	2400      	movs	r4, #0
 8021c22:	4d2f      	ldr	r5, [pc, #188]	; (8021ce0 <pow+0x150>)
 8021c24:	e7d9      	b.n	8021bda <pow+0x4a>
 8021c26:	ec45 4b10 	vmov	d0, r4, r5
 8021c2a:	f000 fe40 	bl	80228ae <finite>
 8021c2e:	bbb8      	cbnz	r0, 8021ca0 <pow+0x110>
 8021c30:	ec49 8b10 	vmov	d0, r8, r9
 8021c34:	f000 fe3b 	bl	80228ae <finite>
 8021c38:	b390      	cbz	r0, 8021ca0 <pow+0x110>
 8021c3a:	ec47 6b10 	vmov	d0, r6, r7
 8021c3e:	f000 fe36 	bl	80228ae <finite>
 8021c42:	b368      	cbz	r0, 8021ca0 <pow+0x110>
 8021c44:	4622      	mov	r2, r4
 8021c46:	462b      	mov	r3, r5
 8021c48:	4620      	mov	r0, r4
 8021c4a:	4629      	mov	r1, r5
 8021c4c:	f7de ff7e 	bl	8000b4c <__aeabi_dcmpun>
 8021c50:	b160      	cbz	r0, 8021c6c <pow+0xdc>
 8021c52:	f7fe f90b 	bl	801fe6c <__errno>
 8021c56:	2321      	movs	r3, #33	; 0x21
 8021c58:	6003      	str	r3, [r0, #0]
 8021c5a:	2200      	movs	r2, #0
 8021c5c:	2300      	movs	r3, #0
 8021c5e:	4610      	mov	r0, r2
 8021c60:	4619      	mov	r1, r3
 8021c62:	f7de fe03 	bl	800086c <__aeabi_ddiv>
 8021c66:	4604      	mov	r4, r0
 8021c68:	460d      	mov	r5, r1
 8021c6a:	e7b6      	b.n	8021bda <pow+0x4a>
 8021c6c:	f7fe f8fe 	bl	801fe6c <__errno>
 8021c70:	2322      	movs	r3, #34	; 0x22
 8021c72:	6003      	str	r3, [r0, #0]
 8021c74:	2200      	movs	r2, #0
 8021c76:	2300      	movs	r3, #0
 8021c78:	4640      	mov	r0, r8
 8021c7a:	4649      	mov	r1, r9
 8021c7c:	f7de ff3e 	bl	8000afc <__aeabi_dcmplt>
 8021c80:	2400      	movs	r4, #0
 8021c82:	b158      	cbz	r0, 8021c9c <pow+0x10c>
 8021c84:	ec47 6b10 	vmov	d0, r6, r7
 8021c88:	f000 fe26 	bl	80228d8 <rint>
 8021c8c:	4632      	mov	r2, r6
 8021c8e:	ec51 0b10 	vmov	r0, r1, d0
 8021c92:	463b      	mov	r3, r7
 8021c94:	f7de ff28 	bl	8000ae8 <__aeabi_dcmpeq>
 8021c98:	2800      	cmp	r0, #0
 8021c9a:	d0c2      	beq.n	8021c22 <pow+0x92>
 8021c9c:	4d11      	ldr	r5, [pc, #68]	; (8021ce4 <pow+0x154>)
 8021c9e:	e79c      	b.n	8021bda <pow+0x4a>
 8021ca0:	2200      	movs	r2, #0
 8021ca2:	2300      	movs	r3, #0
 8021ca4:	4620      	mov	r0, r4
 8021ca6:	4629      	mov	r1, r5
 8021ca8:	f7de ff1e 	bl	8000ae8 <__aeabi_dcmpeq>
 8021cac:	2800      	cmp	r0, #0
 8021cae:	d094      	beq.n	8021bda <pow+0x4a>
 8021cb0:	ec49 8b10 	vmov	d0, r8, r9
 8021cb4:	f000 fdfb 	bl	80228ae <finite>
 8021cb8:	2800      	cmp	r0, #0
 8021cba:	d08e      	beq.n	8021bda <pow+0x4a>
 8021cbc:	ec47 6b10 	vmov	d0, r6, r7
 8021cc0:	f000 fdf5 	bl	80228ae <finite>
 8021cc4:	2800      	cmp	r0, #0
 8021cc6:	d088      	beq.n	8021bda <pow+0x4a>
 8021cc8:	f7fe f8d0 	bl	801fe6c <__errno>
 8021ccc:	2322      	movs	r3, #34	; 0x22
 8021cce:	6003      	str	r3, [r0, #0]
 8021cd0:	2400      	movs	r4, #0
 8021cd2:	2500      	movs	r5, #0
 8021cd4:	e781      	b.n	8021bda <pow+0x4a>
 8021cd6:	4d04      	ldr	r5, [pc, #16]	; (8021ce8 <pow+0x158>)
 8021cd8:	2400      	movs	r4, #0
 8021cda:	e77e      	b.n	8021bda <pow+0x4a>
 8021cdc:	20000270 	.word	0x20000270
 8021ce0:	fff00000 	.word	0xfff00000
 8021ce4:	7ff00000 	.word	0x7ff00000
 8021ce8:	3ff00000 	.word	0x3ff00000
 8021cec:	00000000 	.word	0x00000000

08021cf0 <__ieee754_pow>:
 8021cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cf4:	ed2d 8b06 	vpush	{d8-d10}
 8021cf8:	b08d      	sub	sp, #52	; 0x34
 8021cfa:	ed8d 1b02 	vstr	d1, [sp, #8]
 8021cfe:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8021d02:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8021d06:	ea56 0100 	orrs.w	r1, r6, r0
 8021d0a:	ec53 2b10 	vmov	r2, r3, d0
 8021d0e:	f000 84d1 	beq.w	80226b4 <__ieee754_pow+0x9c4>
 8021d12:	497f      	ldr	r1, [pc, #508]	; (8021f10 <__ieee754_pow+0x220>)
 8021d14:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8021d18:	428c      	cmp	r4, r1
 8021d1a:	ee10 8a10 	vmov	r8, s0
 8021d1e:	4699      	mov	r9, r3
 8021d20:	dc09      	bgt.n	8021d36 <__ieee754_pow+0x46>
 8021d22:	d103      	bne.n	8021d2c <__ieee754_pow+0x3c>
 8021d24:	b97a      	cbnz	r2, 8021d46 <__ieee754_pow+0x56>
 8021d26:	42a6      	cmp	r6, r4
 8021d28:	dd02      	ble.n	8021d30 <__ieee754_pow+0x40>
 8021d2a:	e00c      	b.n	8021d46 <__ieee754_pow+0x56>
 8021d2c:	428e      	cmp	r6, r1
 8021d2e:	dc02      	bgt.n	8021d36 <__ieee754_pow+0x46>
 8021d30:	428e      	cmp	r6, r1
 8021d32:	d110      	bne.n	8021d56 <__ieee754_pow+0x66>
 8021d34:	b178      	cbz	r0, 8021d56 <__ieee754_pow+0x66>
 8021d36:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8021d3a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8021d3e:	ea54 0308 	orrs.w	r3, r4, r8
 8021d42:	f000 84b7 	beq.w	80226b4 <__ieee754_pow+0x9c4>
 8021d46:	4873      	ldr	r0, [pc, #460]	; (8021f14 <__ieee754_pow+0x224>)
 8021d48:	b00d      	add	sp, #52	; 0x34
 8021d4a:	ecbd 8b06 	vpop	{d8-d10}
 8021d4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d52:	f000 bdb9 	b.w	80228c8 <nan>
 8021d56:	f1b9 0f00 	cmp.w	r9, #0
 8021d5a:	da36      	bge.n	8021dca <__ieee754_pow+0xda>
 8021d5c:	496e      	ldr	r1, [pc, #440]	; (8021f18 <__ieee754_pow+0x228>)
 8021d5e:	428e      	cmp	r6, r1
 8021d60:	dc51      	bgt.n	8021e06 <__ieee754_pow+0x116>
 8021d62:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8021d66:	428e      	cmp	r6, r1
 8021d68:	f340 84af 	ble.w	80226ca <__ieee754_pow+0x9da>
 8021d6c:	1531      	asrs	r1, r6, #20
 8021d6e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8021d72:	2914      	cmp	r1, #20
 8021d74:	dd0f      	ble.n	8021d96 <__ieee754_pow+0xa6>
 8021d76:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8021d7a:	fa20 fc01 	lsr.w	ip, r0, r1
 8021d7e:	fa0c f101 	lsl.w	r1, ip, r1
 8021d82:	4281      	cmp	r1, r0
 8021d84:	f040 84a1 	bne.w	80226ca <__ieee754_pow+0x9da>
 8021d88:	f00c 0c01 	and.w	ip, ip, #1
 8021d8c:	f1cc 0102 	rsb	r1, ip, #2
 8021d90:	9100      	str	r1, [sp, #0]
 8021d92:	b180      	cbz	r0, 8021db6 <__ieee754_pow+0xc6>
 8021d94:	e059      	b.n	8021e4a <__ieee754_pow+0x15a>
 8021d96:	2800      	cmp	r0, #0
 8021d98:	d155      	bne.n	8021e46 <__ieee754_pow+0x156>
 8021d9a:	f1c1 0114 	rsb	r1, r1, #20
 8021d9e:	fa46 fc01 	asr.w	ip, r6, r1
 8021da2:	fa0c f101 	lsl.w	r1, ip, r1
 8021da6:	42b1      	cmp	r1, r6
 8021da8:	f040 848c 	bne.w	80226c4 <__ieee754_pow+0x9d4>
 8021dac:	f00c 0c01 	and.w	ip, ip, #1
 8021db0:	f1cc 0102 	rsb	r1, ip, #2
 8021db4:	9100      	str	r1, [sp, #0]
 8021db6:	4959      	ldr	r1, [pc, #356]	; (8021f1c <__ieee754_pow+0x22c>)
 8021db8:	428e      	cmp	r6, r1
 8021dba:	d12d      	bne.n	8021e18 <__ieee754_pow+0x128>
 8021dbc:	2f00      	cmp	r7, #0
 8021dbe:	da79      	bge.n	8021eb4 <__ieee754_pow+0x1c4>
 8021dc0:	4956      	ldr	r1, [pc, #344]	; (8021f1c <__ieee754_pow+0x22c>)
 8021dc2:	2000      	movs	r0, #0
 8021dc4:	f7de fd52 	bl	800086c <__aeabi_ddiv>
 8021dc8:	e016      	b.n	8021df8 <__ieee754_pow+0x108>
 8021dca:	2100      	movs	r1, #0
 8021dcc:	9100      	str	r1, [sp, #0]
 8021dce:	2800      	cmp	r0, #0
 8021dd0:	d13b      	bne.n	8021e4a <__ieee754_pow+0x15a>
 8021dd2:	494f      	ldr	r1, [pc, #316]	; (8021f10 <__ieee754_pow+0x220>)
 8021dd4:	428e      	cmp	r6, r1
 8021dd6:	d1ee      	bne.n	8021db6 <__ieee754_pow+0xc6>
 8021dd8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8021ddc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8021de0:	ea53 0308 	orrs.w	r3, r3, r8
 8021de4:	f000 8466 	beq.w	80226b4 <__ieee754_pow+0x9c4>
 8021de8:	4b4d      	ldr	r3, [pc, #308]	; (8021f20 <__ieee754_pow+0x230>)
 8021dea:	429c      	cmp	r4, r3
 8021dec:	dd0d      	ble.n	8021e0a <__ieee754_pow+0x11a>
 8021dee:	2f00      	cmp	r7, #0
 8021df0:	f280 8464 	bge.w	80226bc <__ieee754_pow+0x9cc>
 8021df4:	2000      	movs	r0, #0
 8021df6:	2100      	movs	r1, #0
 8021df8:	ec41 0b10 	vmov	d0, r0, r1
 8021dfc:	b00d      	add	sp, #52	; 0x34
 8021dfe:	ecbd 8b06 	vpop	{d8-d10}
 8021e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e06:	2102      	movs	r1, #2
 8021e08:	e7e0      	b.n	8021dcc <__ieee754_pow+0xdc>
 8021e0a:	2f00      	cmp	r7, #0
 8021e0c:	daf2      	bge.n	8021df4 <__ieee754_pow+0x104>
 8021e0e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8021e12:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8021e16:	e7ef      	b.n	8021df8 <__ieee754_pow+0x108>
 8021e18:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8021e1c:	d104      	bne.n	8021e28 <__ieee754_pow+0x138>
 8021e1e:	4610      	mov	r0, r2
 8021e20:	4619      	mov	r1, r3
 8021e22:	f7de fbf9 	bl	8000618 <__aeabi_dmul>
 8021e26:	e7e7      	b.n	8021df8 <__ieee754_pow+0x108>
 8021e28:	493e      	ldr	r1, [pc, #248]	; (8021f24 <__ieee754_pow+0x234>)
 8021e2a:	428f      	cmp	r7, r1
 8021e2c:	d10d      	bne.n	8021e4a <__ieee754_pow+0x15a>
 8021e2e:	f1b9 0f00 	cmp.w	r9, #0
 8021e32:	db0a      	blt.n	8021e4a <__ieee754_pow+0x15a>
 8021e34:	ec43 2b10 	vmov	d0, r2, r3
 8021e38:	b00d      	add	sp, #52	; 0x34
 8021e3a:	ecbd 8b06 	vpop	{d8-d10}
 8021e3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e42:	f000 bc77 	b.w	8022734 <__ieee754_sqrt>
 8021e46:	2100      	movs	r1, #0
 8021e48:	9100      	str	r1, [sp, #0]
 8021e4a:	ec43 2b10 	vmov	d0, r2, r3
 8021e4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8021e52:	f000 fd23 	bl	802289c <fabs>
 8021e56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8021e5a:	ec51 0b10 	vmov	r0, r1, d0
 8021e5e:	f1b8 0f00 	cmp.w	r8, #0
 8021e62:	d12a      	bne.n	8021eba <__ieee754_pow+0x1ca>
 8021e64:	b12c      	cbz	r4, 8021e72 <__ieee754_pow+0x182>
 8021e66:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8021f1c <__ieee754_pow+0x22c>
 8021e6a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8021e6e:	45e6      	cmp	lr, ip
 8021e70:	d123      	bne.n	8021eba <__ieee754_pow+0x1ca>
 8021e72:	2f00      	cmp	r7, #0
 8021e74:	da05      	bge.n	8021e82 <__ieee754_pow+0x192>
 8021e76:	4602      	mov	r2, r0
 8021e78:	460b      	mov	r3, r1
 8021e7a:	2000      	movs	r0, #0
 8021e7c:	4927      	ldr	r1, [pc, #156]	; (8021f1c <__ieee754_pow+0x22c>)
 8021e7e:	f7de fcf5 	bl	800086c <__aeabi_ddiv>
 8021e82:	f1b9 0f00 	cmp.w	r9, #0
 8021e86:	dab7      	bge.n	8021df8 <__ieee754_pow+0x108>
 8021e88:	9b00      	ldr	r3, [sp, #0]
 8021e8a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8021e8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8021e92:	4323      	orrs	r3, r4
 8021e94:	d108      	bne.n	8021ea8 <__ieee754_pow+0x1b8>
 8021e96:	4602      	mov	r2, r0
 8021e98:	460b      	mov	r3, r1
 8021e9a:	4610      	mov	r0, r2
 8021e9c:	4619      	mov	r1, r3
 8021e9e:	f7de fa03 	bl	80002a8 <__aeabi_dsub>
 8021ea2:	4602      	mov	r2, r0
 8021ea4:	460b      	mov	r3, r1
 8021ea6:	e78d      	b.n	8021dc4 <__ieee754_pow+0xd4>
 8021ea8:	9b00      	ldr	r3, [sp, #0]
 8021eaa:	2b01      	cmp	r3, #1
 8021eac:	d1a4      	bne.n	8021df8 <__ieee754_pow+0x108>
 8021eae:	4602      	mov	r2, r0
 8021eb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021eb4:	4610      	mov	r0, r2
 8021eb6:	4619      	mov	r1, r3
 8021eb8:	e79e      	b.n	8021df8 <__ieee754_pow+0x108>
 8021eba:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8021ebe:	f10c 35ff 	add.w	r5, ip, #4294967295
 8021ec2:	950a      	str	r5, [sp, #40]	; 0x28
 8021ec4:	9d00      	ldr	r5, [sp, #0]
 8021ec6:	46ac      	mov	ip, r5
 8021ec8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8021eca:	ea5c 0505 	orrs.w	r5, ip, r5
 8021ece:	d0e4      	beq.n	8021e9a <__ieee754_pow+0x1aa>
 8021ed0:	4b15      	ldr	r3, [pc, #84]	; (8021f28 <__ieee754_pow+0x238>)
 8021ed2:	429e      	cmp	r6, r3
 8021ed4:	f340 80fc 	ble.w	80220d0 <__ieee754_pow+0x3e0>
 8021ed8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8021edc:	429e      	cmp	r6, r3
 8021ede:	4b10      	ldr	r3, [pc, #64]	; (8021f20 <__ieee754_pow+0x230>)
 8021ee0:	dd07      	ble.n	8021ef2 <__ieee754_pow+0x202>
 8021ee2:	429c      	cmp	r4, r3
 8021ee4:	dc0a      	bgt.n	8021efc <__ieee754_pow+0x20c>
 8021ee6:	2f00      	cmp	r7, #0
 8021ee8:	da84      	bge.n	8021df4 <__ieee754_pow+0x104>
 8021eea:	a307      	add	r3, pc, #28	; (adr r3, 8021f08 <__ieee754_pow+0x218>)
 8021eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ef0:	e795      	b.n	8021e1e <__ieee754_pow+0x12e>
 8021ef2:	429c      	cmp	r4, r3
 8021ef4:	dbf7      	blt.n	8021ee6 <__ieee754_pow+0x1f6>
 8021ef6:	4b09      	ldr	r3, [pc, #36]	; (8021f1c <__ieee754_pow+0x22c>)
 8021ef8:	429c      	cmp	r4, r3
 8021efa:	dd17      	ble.n	8021f2c <__ieee754_pow+0x23c>
 8021efc:	2f00      	cmp	r7, #0
 8021efe:	dcf4      	bgt.n	8021eea <__ieee754_pow+0x1fa>
 8021f00:	e778      	b.n	8021df4 <__ieee754_pow+0x104>
 8021f02:	bf00      	nop
 8021f04:	f3af 8000 	nop.w
 8021f08:	8800759c 	.word	0x8800759c
 8021f0c:	7e37e43c 	.word	0x7e37e43c
 8021f10:	7ff00000 	.word	0x7ff00000
 8021f14:	08027901 	.word	0x08027901
 8021f18:	433fffff 	.word	0x433fffff
 8021f1c:	3ff00000 	.word	0x3ff00000
 8021f20:	3fefffff 	.word	0x3fefffff
 8021f24:	3fe00000 	.word	0x3fe00000
 8021f28:	41e00000 	.word	0x41e00000
 8021f2c:	4b64      	ldr	r3, [pc, #400]	; (80220c0 <__ieee754_pow+0x3d0>)
 8021f2e:	2200      	movs	r2, #0
 8021f30:	f7de f9ba 	bl	80002a8 <__aeabi_dsub>
 8021f34:	a356      	add	r3, pc, #344	; (adr r3, 8022090 <__ieee754_pow+0x3a0>)
 8021f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f3a:	4604      	mov	r4, r0
 8021f3c:	460d      	mov	r5, r1
 8021f3e:	f7de fb6b 	bl	8000618 <__aeabi_dmul>
 8021f42:	a355      	add	r3, pc, #340	; (adr r3, 8022098 <__ieee754_pow+0x3a8>)
 8021f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f48:	4606      	mov	r6, r0
 8021f4a:	460f      	mov	r7, r1
 8021f4c:	4620      	mov	r0, r4
 8021f4e:	4629      	mov	r1, r5
 8021f50:	f7de fb62 	bl	8000618 <__aeabi_dmul>
 8021f54:	4b5b      	ldr	r3, [pc, #364]	; (80220c4 <__ieee754_pow+0x3d4>)
 8021f56:	4682      	mov	sl, r0
 8021f58:	468b      	mov	fp, r1
 8021f5a:	2200      	movs	r2, #0
 8021f5c:	4620      	mov	r0, r4
 8021f5e:	4629      	mov	r1, r5
 8021f60:	f7de fb5a 	bl	8000618 <__aeabi_dmul>
 8021f64:	4602      	mov	r2, r0
 8021f66:	460b      	mov	r3, r1
 8021f68:	a14d      	add	r1, pc, #308	; (adr r1, 80220a0 <__ieee754_pow+0x3b0>)
 8021f6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021f6e:	f7de f99b 	bl	80002a8 <__aeabi_dsub>
 8021f72:	4622      	mov	r2, r4
 8021f74:	462b      	mov	r3, r5
 8021f76:	f7de fb4f 	bl	8000618 <__aeabi_dmul>
 8021f7a:	4602      	mov	r2, r0
 8021f7c:	460b      	mov	r3, r1
 8021f7e:	2000      	movs	r0, #0
 8021f80:	4951      	ldr	r1, [pc, #324]	; (80220c8 <__ieee754_pow+0x3d8>)
 8021f82:	f7de f991 	bl	80002a8 <__aeabi_dsub>
 8021f86:	4622      	mov	r2, r4
 8021f88:	4680      	mov	r8, r0
 8021f8a:	4689      	mov	r9, r1
 8021f8c:	462b      	mov	r3, r5
 8021f8e:	4620      	mov	r0, r4
 8021f90:	4629      	mov	r1, r5
 8021f92:	f7de fb41 	bl	8000618 <__aeabi_dmul>
 8021f96:	4602      	mov	r2, r0
 8021f98:	460b      	mov	r3, r1
 8021f9a:	4640      	mov	r0, r8
 8021f9c:	4649      	mov	r1, r9
 8021f9e:	f7de fb3b 	bl	8000618 <__aeabi_dmul>
 8021fa2:	a341      	add	r3, pc, #260	; (adr r3, 80220a8 <__ieee754_pow+0x3b8>)
 8021fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021fa8:	f7de fb36 	bl	8000618 <__aeabi_dmul>
 8021fac:	4602      	mov	r2, r0
 8021fae:	460b      	mov	r3, r1
 8021fb0:	4650      	mov	r0, sl
 8021fb2:	4659      	mov	r1, fp
 8021fb4:	f7de f978 	bl	80002a8 <__aeabi_dsub>
 8021fb8:	4602      	mov	r2, r0
 8021fba:	460b      	mov	r3, r1
 8021fbc:	4680      	mov	r8, r0
 8021fbe:	4689      	mov	r9, r1
 8021fc0:	4630      	mov	r0, r6
 8021fc2:	4639      	mov	r1, r7
 8021fc4:	f7de f972 	bl	80002ac <__adddf3>
 8021fc8:	2400      	movs	r4, #0
 8021fca:	4632      	mov	r2, r6
 8021fcc:	463b      	mov	r3, r7
 8021fce:	4620      	mov	r0, r4
 8021fd0:	460d      	mov	r5, r1
 8021fd2:	f7de f969 	bl	80002a8 <__aeabi_dsub>
 8021fd6:	4602      	mov	r2, r0
 8021fd8:	460b      	mov	r3, r1
 8021fda:	4640      	mov	r0, r8
 8021fdc:	4649      	mov	r1, r9
 8021fde:	f7de f963 	bl	80002a8 <__aeabi_dsub>
 8021fe2:	9b00      	ldr	r3, [sp, #0]
 8021fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021fe6:	3b01      	subs	r3, #1
 8021fe8:	4313      	orrs	r3, r2
 8021fea:	4682      	mov	sl, r0
 8021fec:	468b      	mov	fp, r1
 8021fee:	f040 81f1 	bne.w	80223d4 <__ieee754_pow+0x6e4>
 8021ff2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80220b0 <__ieee754_pow+0x3c0>
 8021ff6:	eeb0 8a47 	vmov.f32	s16, s14
 8021ffa:	eef0 8a67 	vmov.f32	s17, s15
 8021ffe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8022002:	2600      	movs	r6, #0
 8022004:	4632      	mov	r2, r6
 8022006:	463b      	mov	r3, r7
 8022008:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802200c:	f7de f94c 	bl	80002a8 <__aeabi_dsub>
 8022010:	4622      	mov	r2, r4
 8022012:	462b      	mov	r3, r5
 8022014:	f7de fb00 	bl	8000618 <__aeabi_dmul>
 8022018:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802201c:	4680      	mov	r8, r0
 802201e:	4689      	mov	r9, r1
 8022020:	4650      	mov	r0, sl
 8022022:	4659      	mov	r1, fp
 8022024:	f7de faf8 	bl	8000618 <__aeabi_dmul>
 8022028:	4602      	mov	r2, r0
 802202a:	460b      	mov	r3, r1
 802202c:	4640      	mov	r0, r8
 802202e:	4649      	mov	r1, r9
 8022030:	f7de f93c 	bl	80002ac <__adddf3>
 8022034:	4632      	mov	r2, r6
 8022036:	463b      	mov	r3, r7
 8022038:	4680      	mov	r8, r0
 802203a:	4689      	mov	r9, r1
 802203c:	4620      	mov	r0, r4
 802203e:	4629      	mov	r1, r5
 8022040:	f7de faea 	bl	8000618 <__aeabi_dmul>
 8022044:	460b      	mov	r3, r1
 8022046:	4604      	mov	r4, r0
 8022048:	460d      	mov	r5, r1
 802204a:	4602      	mov	r2, r0
 802204c:	4649      	mov	r1, r9
 802204e:	4640      	mov	r0, r8
 8022050:	f7de f92c 	bl	80002ac <__adddf3>
 8022054:	4b1d      	ldr	r3, [pc, #116]	; (80220cc <__ieee754_pow+0x3dc>)
 8022056:	4299      	cmp	r1, r3
 8022058:	ec45 4b19 	vmov	d9, r4, r5
 802205c:	4606      	mov	r6, r0
 802205e:	460f      	mov	r7, r1
 8022060:	468b      	mov	fp, r1
 8022062:	f340 82fe 	ble.w	8022662 <__ieee754_pow+0x972>
 8022066:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 802206a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 802206e:	4303      	orrs	r3, r0
 8022070:	f000 81f0 	beq.w	8022454 <__ieee754_pow+0x764>
 8022074:	a310      	add	r3, pc, #64	; (adr r3, 80220b8 <__ieee754_pow+0x3c8>)
 8022076:	e9d3 2300 	ldrd	r2, r3, [r3]
 802207a:	ec51 0b18 	vmov	r0, r1, d8
 802207e:	f7de facb 	bl	8000618 <__aeabi_dmul>
 8022082:	a30d      	add	r3, pc, #52	; (adr r3, 80220b8 <__ieee754_pow+0x3c8>)
 8022084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022088:	e6cb      	b.n	8021e22 <__ieee754_pow+0x132>
 802208a:	bf00      	nop
 802208c:	f3af 8000 	nop.w
 8022090:	60000000 	.word	0x60000000
 8022094:	3ff71547 	.word	0x3ff71547
 8022098:	f85ddf44 	.word	0xf85ddf44
 802209c:	3e54ae0b 	.word	0x3e54ae0b
 80220a0:	55555555 	.word	0x55555555
 80220a4:	3fd55555 	.word	0x3fd55555
 80220a8:	652b82fe 	.word	0x652b82fe
 80220ac:	3ff71547 	.word	0x3ff71547
 80220b0:	00000000 	.word	0x00000000
 80220b4:	bff00000 	.word	0xbff00000
 80220b8:	8800759c 	.word	0x8800759c
 80220bc:	7e37e43c 	.word	0x7e37e43c
 80220c0:	3ff00000 	.word	0x3ff00000
 80220c4:	3fd00000 	.word	0x3fd00000
 80220c8:	3fe00000 	.word	0x3fe00000
 80220cc:	408fffff 	.word	0x408fffff
 80220d0:	4bd7      	ldr	r3, [pc, #860]	; (8022430 <__ieee754_pow+0x740>)
 80220d2:	ea03 0309 	and.w	r3, r3, r9
 80220d6:	2200      	movs	r2, #0
 80220d8:	b92b      	cbnz	r3, 80220e6 <__ieee754_pow+0x3f6>
 80220da:	4bd6      	ldr	r3, [pc, #856]	; (8022434 <__ieee754_pow+0x744>)
 80220dc:	f7de fa9c 	bl	8000618 <__aeabi_dmul>
 80220e0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80220e4:	460c      	mov	r4, r1
 80220e6:	1523      	asrs	r3, r4, #20
 80220e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80220ec:	4413      	add	r3, r2
 80220ee:	9309      	str	r3, [sp, #36]	; 0x24
 80220f0:	4bd1      	ldr	r3, [pc, #836]	; (8022438 <__ieee754_pow+0x748>)
 80220f2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80220f6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80220fa:	429c      	cmp	r4, r3
 80220fc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8022100:	dd08      	ble.n	8022114 <__ieee754_pow+0x424>
 8022102:	4bce      	ldr	r3, [pc, #824]	; (802243c <__ieee754_pow+0x74c>)
 8022104:	429c      	cmp	r4, r3
 8022106:	f340 8163 	ble.w	80223d0 <__ieee754_pow+0x6e0>
 802210a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802210c:	3301      	adds	r3, #1
 802210e:	9309      	str	r3, [sp, #36]	; 0x24
 8022110:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8022114:	2400      	movs	r4, #0
 8022116:	00e3      	lsls	r3, r4, #3
 8022118:	930b      	str	r3, [sp, #44]	; 0x2c
 802211a:	4bc9      	ldr	r3, [pc, #804]	; (8022440 <__ieee754_pow+0x750>)
 802211c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8022120:	ed93 7b00 	vldr	d7, [r3]
 8022124:	4629      	mov	r1, r5
 8022126:	ec53 2b17 	vmov	r2, r3, d7
 802212a:	eeb0 8a47 	vmov.f32	s16, s14
 802212e:	eef0 8a67 	vmov.f32	s17, s15
 8022132:	4682      	mov	sl, r0
 8022134:	f7de f8b8 	bl	80002a8 <__aeabi_dsub>
 8022138:	4652      	mov	r2, sl
 802213a:	4606      	mov	r6, r0
 802213c:	460f      	mov	r7, r1
 802213e:	462b      	mov	r3, r5
 8022140:	ec51 0b18 	vmov	r0, r1, d8
 8022144:	f7de f8b2 	bl	80002ac <__adddf3>
 8022148:	4602      	mov	r2, r0
 802214a:	460b      	mov	r3, r1
 802214c:	2000      	movs	r0, #0
 802214e:	49bd      	ldr	r1, [pc, #756]	; (8022444 <__ieee754_pow+0x754>)
 8022150:	f7de fb8c 	bl	800086c <__aeabi_ddiv>
 8022154:	ec41 0b19 	vmov	d9, r0, r1
 8022158:	4602      	mov	r2, r0
 802215a:	460b      	mov	r3, r1
 802215c:	4630      	mov	r0, r6
 802215e:	4639      	mov	r1, r7
 8022160:	f7de fa5a 	bl	8000618 <__aeabi_dmul>
 8022164:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022168:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802216c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8022170:	2300      	movs	r3, #0
 8022172:	9304      	str	r3, [sp, #16]
 8022174:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8022178:	46ab      	mov	fp, r5
 802217a:	106d      	asrs	r5, r5, #1
 802217c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8022180:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8022184:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8022188:	2200      	movs	r2, #0
 802218a:	4640      	mov	r0, r8
 802218c:	4649      	mov	r1, r9
 802218e:	4614      	mov	r4, r2
 8022190:	461d      	mov	r5, r3
 8022192:	f7de fa41 	bl	8000618 <__aeabi_dmul>
 8022196:	4602      	mov	r2, r0
 8022198:	460b      	mov	r3, r1
 802219a:	4630      	mov	r0, r6
 802219c:	4639      	mov	r1, r7
 802219e:	f7de f883 	bl	80002a8 <__aeabi_dsub>
 80221a2:	ec53 2b18 	vmov	r2, r3, d8
 80221a6:	4606      	mov	r6, r0
 80221a8:	460f      	mov	r7, r1
 80221aa:	4620      	mov	r0, r4
 80221ac:	4629      	mov	r1, r5
 80221ae:	f7de f87b 	bl	80002a8 <__aeabi_dsub>
 80221b2:	4602      	mov	r2, r0
 80221b4:	460b      	mov	r3, r1
 80221b6:	4650      	mov	r0, sl
 80221b8:	4659      	mov	r1, fp
 80221ba:	f7de f875 	bl	80002a8 <__aeabi_dsub>
 80221be:	4642      	mov	r2, r8
 80221c0:	464b      	mov	r3, r9
 80221c2:	f7de fa29 	bl	8000618 <__aeabi_dmul>
 80221c6:	4602      	mov	r2, r0
 80221c8:	460b      	mov	r3, r1
 80221ca:	4630      	mov	r0, r6
 80221cc:	4639      	mov	r1, r7
 80221ce:	f7de f86b 	bl	80002a8 <__aeabi_dsub>
 80221d2:	ec53 2b19 	vmov	r2, r3, d9
 80221d6:	f7de fa1f 	bl	8000618 <__aeabi_dmul>
 80221da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80221de:	ec41 0b18 	vmov	d8, r0, r1
 80221e2:	4610      	mov	r0, r2
 80221e4:	4619      	mov	r1, r3
 80221e6:	f7de fa17 	bl	8000618 <__aeabi_dmul>
 80221ea:	a37d      	add	r3, pc, #500	; (adr r3, 80223e0 <__ieee754_pow+0x6f0>)
 80221ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221f0:	4604      	mov	r4, r0
 80221f2:	460d      	mov	r5, r1
 80221f4:	f7de fa10 	bl	8000618 <__aeabi_dmul>
 80221f8:	a37b      	add	r3, pc, #492	; (adr r3, 80223e8 <__ieee754_pow+0x6f8>)
 80221fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221fe:	f7de f855 	bl	80002ac <__adddf3>
 8022202:	4622      	mov	r2, r4
 8022204:	462b      	mov	r3, r5
 8022206:	f7de fa07 	bl	8000618 <__aeabi_dmul>
 802220a:	a379      	add	r3, pc, #484	; (adr r3, 80223f0 <__ieee754_pow+0x700>)
 802220c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022210:	f7de f84c 	bl	80002ac <__adddf3>
 8022214:	4622      	mov	r2, r4
 8022216:	462b      	mov	r3, r5
 8022218:	f7de f9fe 	bl	8000618 <__aeabi_dmul>
 802221c:	a376      	add	r3, pc, #472	; (adr r3, 80223f8 <__ieee754_pow+0x708>)
 802221e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022222:	f7de f843 	bl	80002ac <__adddf3>
 8022226:	4622      	mov	r2, r4
 8022228:	462b      	mov	r3, r5
 802222a:	f7de f9f5 	bl	8000618 <__aeabi_dmul>
 802222e:	a374      	add	r3, pc, #464	; (adr r3, 8022400 <__ieee754_pow+0x710>)
 8022230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022234:	f7de f83a 	bl	80002ac <__adddf3>
 8022238:	4622      	mov	r2, r4
 802223a:	462b      	mov	r3, r5
 802223c:	f7de f9ec 	bl	8000618 <__aeabi_dmul>
 8022240:	a371      	add	r3, pc, #452	; (adr r3, 8022408 <__ieee754_pow+0x718>)
 8022242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022246:	f7de f831 	bl	80002ac <__adddf3>
 802224a:	4622      	mov	r2, r4
 802224c:	4606      	mov	r6, r0
 802224e:	460f      	mov	r7, r1
 8022250:	462b      	mov	r3, r5
 8022252:	4620      	mov	r0, r4
 8022254:	4629      	mov	r1, r5
 8022256:	f7de f9df 	bl	8000618 <__aeabi_dmul>
 802225a:	4602      	mov	r2, r0
 802225c:	460b      	mov	r3, r1
 802225e:	4630      	mov	r0, r6
 8022260:	4639      	mov	r1, r7
 8022262:	f7de f9d9 	bl	8000618 <__aeabi_dmul>
 8022266:	4642      	mov	r2, r8
 8022268:	4604      	mov	r4, r0
 802226a:	460d      	mov	r5, r1
 802226c:	464b      	mov	r3, r9
 802226e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022272:	f7de f81b 	bl	80002ac <__adddf3>
 8022276:	ec53 2b18 	vmov	r2, r3, d8
 802227a:	f7de f9cd 	bl	8000618 <__aeabi_dmul>
 802227e:	4622      	mov	r2, r4
 8022280:	462b      	mov	r3, r5
 8022282:	f7de f813 	bl	80002ac <__adddf3>
 8022286:	4642      	mov	r2, r8
 8022288:	4682      	mov	sl, r0
 802228a:	468b      	mov	fp, r1
 802228c:	464b      	mov	r3, r9
 802228e:	4640      	mov	r0, r8
 8022290:	4649      	mov	r1, r9
 8022292:	f7de f9c1 	bl	8000618 <__aeabi_dmul>
 8022296:	4b6c      	ldr	r3, [pc, #432]	; (8022448 <__ieee754_pow+0x758>)
 8022298:	2200      	movs	r2, #0
 802229a:	4606      	mov	r6, r0
 802229c:	460f      	mov	r7, r1
 802229e:	f7de f805 	bl	80002ac <__adddf3>
 80222a2:	4652      	mov	r2, sl
 80222a4:	465b      	mov	r3, fp
 80222a6:	f7de f801 	bl	80002ac <__adddf3>
 80222aa:	9c04      	ldr	r4, [sp, #16]
 80222ac:	460d      	mov	r5, r1
 80222ae:	4622      	mov	r2, r4
 80222b0:	460b      	mov	r3, r1
 80222b2:	4640      	mov	r0, r8
 80222b4:	4649      	mov	r1, r9
 80222b6:	f7de f9af 	bl	8000618 <__aeabi_dmul>
 80222ba:	4b63      	ldr	r3, [pc, #396]	; (8022448 <__ieee754_pow+0x758>)
 80222bc:	4680      	mov	r8, r0
 80222be:	4689      	mov	r9, r1
 80222c0:	2200      	movs	r2, #0
 80222c2:	4620      	mov	r0, r4
 80222c4:	4629      	mov	r1, r5
 80222c6:	f7dd ffef 	bl	80002a8 <__aeabi_dsub>
 80222ca:	4632      	mov	r2, r6
 80222cc:	463b      	mov	r3, r7
 80222ce:	f7dd ffeb 	bl	80002a8 <__aeabi_dsub>
 80222d2:	4602      	mov	r2, r0
 80222d4:	460b      	mov	r3, r1
 80222d6:	4650      	mov	r0, sl
 80222d8:	4659      	mov	r1, fp
 80222da:	f7dd ffe5 	bl	80002a8 <__aeabi_dsub>
 80222de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80222e2:	f7de f999 	bl	8000618 <__aeabi_dmul>
 80222e6:	4622      	mov	r2, r4
 80222e8:	4606      	mov	r6, r0
 80222ea:	460f      	mov	r7, r1
 80222ec:	462b      	mov	r3, r5
 80222ee:	ec51 0b18 	vmov	r0, r1, d8
 80222f2:	f7de f991 	bl	8000618 <__aeabi_dmul>
 80222f6:	4602      	mov	r2, r0
 80222f8:	460b      	mov	r3, r1
 80222fa:	4630      	mov	r0, r6
 80222fc:	4639      	mov	r1, r7
 80222fe:	f7dd ffd5 	bl	80002ac <__adddf3>
 8022302:	4606      	mov	r6, r0
 8022304:	460f      	mov	r7, r1
 8022306:	4602      	mov	r2, r0
 8022308:	460b      	mov	r3, r1
 802230a:	4640      	mov	r0, r8
 802230c:	4649      	mov	r1, r9
 802230e:	f7dd ffcd 	bl	80002ac <__adddf3>
 8022312:	9c04      	ldr	r4, [sp, #16]
 8022314:	a33e      	add	r3, pc, #248	; (adr r3, 8022410 <__ieee754_pow+0x720>)
 8022316:	e9d3 2300 	ldrd	r2, r3, [r3]
 802231a:	4620      	mov	r0, r4
 802231c:	460d      	mov	r5, r1
 802231e:	f7de f97b 	bl	8000618 <__aeabi_dmul>
 8022322:	4642      	mov	r2, r8
 8022324:	ec41 0b18 	vmov	d8, r0, r1
 8022328:	464b      	mov	r3, r9
 802232a:	4620      	mov	r0, r4
 802232c:	4629      	mov	r1, r5
 802232e:	f7dd ffbb 	bl	80002a8 <__aeabi_dsub>
 8022332:	4602      	mov	r2, r0
 8022334:	460b      	mov	r3, r1
 8022336:	4630      	mov	r0, r6
 8022338:	4639      	mov	r1, r7
 802233a:	f7dd ffb5 	bl	80002a8 <__aeabi_dsub>
 802233e:	a336      	add	r3, pc, #216	; (adr r3, 8022418 <__ieee754_pow+0x728>)
 8022340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022344:	f7de f968 	bl	8000618 <__aeabi_dmul>
 8022348:	a335      	add	r3, pc, #212	; (adr r3, 8022420 <__ieee754_pow+0x730>)
 802234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802234e:	4606      	mov	r6, r0
 8022350:	460f      	mov	r7, r1
 8022352:	4620      	mov	r0, r4
 8022354:	4629      	mov	r1, r5
 8022356:	f7de f95f 	bl	8000618 <__aeabi_dmul>
 802235a:	4602      	mov	r2, r0
 802235c:	460b      	mov	r3, r1
 802235e:	4630      	mov	r0, r6
 8022360:	4639      	mov	r1, r7
 8022362:	f7dd ffa3 	bl	80002ac <__adddf3>
 8022366:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022368:	4b38      	ldr	r3, [pc, #224]	; (802244c <__ieee754_pow+0x75c>)
 802236a:	4413      	add	r3, r2
 802236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022370:	f7dd ff9c 	bl	80002ac <__adddf3>
 8022374:	4682      	mov	sl, r0
 8022376:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022378:	468b      	mov	fp, r1
 802237a:	f7de f8e3 	bl	8000544 <__aeabi_i2d>
 802237e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022380:	4b33      	ldr	r3, [pc, #204]	; (8022450 <__ieee754_pow+0x760>)
 8022382:	4413      	add	r3, r2
 8022384:	e9d3 8900 	ldrd	r8, r9, [r3]
 8022388:	4606      	mov	r6, r0
 802238a:	460f      	mov	r7, r1
 802238c:	4652      	mov	r2, sl
 802238e:	465b      	mov	r3, fp
 8022390:	ec51 0b18 	vmov	r0, r1, d8
 8022394:	f7dd ff8a 	bl	80002ac <__adddf3>
 8022398:	4642      	mov	r2, r8
 802239a:	464b      	mov	r3, r9
 802239c:	f7dd ff86 	bl	80002ac <__adddf3>
 80223a0:	4632      	mov	r2, r6
 80223a2:	463b      	mov	r3, r7
 80223a4:	f7dd ff82 	bl	80002ac <__adddf3>
 80223a8:	9c04      	ldr	r4, [sp, #16]
 80223aa:	4632      	mov	r2, r6
 80223ac:	463b      	mov	r3, r7
 80223ae:	4620      	mov	r0, r4
 80223b0:	460d      	mov	r5, r1
 80223b2:	f7dd ff79 	bl	80002a8 <__aeabi_dsub>
 80223b6:	4642      	mov	r2, r8
 80223b8:	464b      	mov	r3, r9
 80223ba:	f7dd ff75 	bl	80002a8 <__aeabi_dsub>
 80223be:	ec53 2b18 	vmov	r2, r3, d8
 80223c2:	f7dd ff71 	bl	80002a8 <__aeabi_dsub>
 80223c6:	4602      	mov	r2, r0
 80223c8:	460b      	mov	r3, r1
 80223ca:	4650      	mov	r0, sl
 80223cc:	4659      	mov	r1, fp
 80223ce:	e606      	b.n	8021fde <__ieee754_pow+0x2ee>
 80223d0:	2401      	movs	r4, #1
 80223d2:	e6a0      	b.n	8022116 <__ieee754_pow+0x426>
 80223d4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8022428 <__ieee754_pow+0x738>
 80223d8:	e60d      	b.n	8021ff6 <__ieee754_pow+0x306>
 80223da:	bf00      	nop
 80223dc:	f3af 8000 	nop.w
 80223e0:	4a454eef 	.word	0x4a454eef
 80223e4:	3fca7e28 	.word	0x3fca7e28
 80223e8:	93c9db65 	.word	0x93c9db65
 80223ec:	3fcd864a 	.word	0x3fcd864a
 80223f0:	a91d4101 	.word	0xa91d4101
 80223f4:	3fd17460 	.word	0x3fd17460
 80223f8:	518f264d 	.word	0x518f264d
 80223fc:	3fd55555 	.word	0x3fd55555
 8022400:	db6fabff 	.word	0xdb6fabff
 8022404:	3fdb6db6 	.word	0x3fdb6db6
 8022408:	33333303 	.word	0x33333303
 802240c:	3fe33333 	.word	0x3fe33333
 8022410:	e0000000 	.word	0xe0000000
 8022414:	3feec709 	.word	0x3feec709
 8022418:	dc3a03fd 	.word	0xdc3a03fd
 802241c:	3feec709 	.word	0x3feec709
 8022420:	145b01f5 	.word	0x145b01f5
 8022424:	be3e2fe0 	.word	0xbe3e2fe0
 8022428:	00000000 	.word	0x00000000
 802242c:	3ff00000 	.word	0x3ff00000
 8022430:	7ff00000 	.word	0x7ff00000
 8022434:	43400000 	.word	0x43400000
 8022438:	0003988e 	.word	0x0003988e
 802243c:	000bb679 	.word	0x000bb679
 8022440:	080279b8 	.word	0x080279b8
 8022444:	3ff00000 	.word	0x3ff00000
 8022448:	40080000 	.word	0x40080000
 802244c:	080279d8 	.word	0x080279d8
 8022450:	080279c8 	.word	0x080279c8
 8022454:	a3b5      	add	r3, pc, #724	; (adr r3, 802272c <__ieee754_pow+0xa3c>)
 8022456:	e9d3 2300 	ldrd	r2, r3, [r3]
 802245a:	4640      	mov	r0, r8
 802245c:	4649      	mov	r1, r9
 802245e:	f7dd ff25 	bl	80002ac <__adddf3>
 8022462:	4622      	mov	r2, r4
 8022464:	ec41 0b1a 	vmov	d10, r0, r1
 8022468:	462b      	mov	r3, r5
 802246a:	4630      	mov	r0, r6
 802246c:	4639      	mov	r1, r7
 802246e:	f7dd ff1b 	bl	80002a8 <__aeabi_dsub>
 8022472:	4602      	mov	r2, r0
 8022474:	460b      	mov	r3, r1
 8022476:	ec51 0b1a 	vmov	r0, r1, d10
 802247a:	f7de fb5d 	bl	8000b38 <__aeabi_dcmpgt>
 802247e:	2800      	cmp	r0, #0
 8022480:	f47f adf8 	bne.w	8022074 <__ieee754_pow+0x384>
 8022484:	4aa4      	ldr	r2, [pc, #656]	; (8022718 <__ieee754_pow+0xa28>)
 8022486:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802248a:	4293      	cmp	r3, r2
 802248c:	f340 810b 	ble.w	80226a6 <__ieee754_pow+0x9b6>
 8022490:	151b      	asrs	r3, r3, #20
 8022492:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8022496:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 802249a:	fa4a f303 	asr.w	r3, sl, r3
 802249e:	445b      	add	r3, fp
 80224a0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80224a4:	4e9d      	ldr	r6, [pc, #628]	; (802271c <__ieee754_pow+0xa2c>)
 80224a6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80224aa:	4116      	asrs	r6, r2
 80224ac:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80224b0:	2000      	movs	r0, #0
 80224b2:	ea23 0106 	bic.w	r1, r3, r6
 80224b6:	f1c2 0214 	rsb	r2, r2, #20
 80224ba:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80224be:	fa4a fa02 	asr.w	sl, sl, r2
 80224c2:	f1bb 0f00 	cmp.w	fp, #0
 80224c6:	4602      	mov	r2, r0
 80224c8:	460b      	mov	r3, r1
 80224ca:	4620      	mov	r0, r4
 80224cc:	4629      	mov	r1, r5
 80224ce:	bfb8      	it	lt
 80224d0:	f1ca 0a00 	rsblt	sl, sl, #0
 80224d4:	f7dd fee8 	bl	80002a8 <__aeabi_dsub>
 80224d8:	ec41 0b19 	vmov	d9, r0, r1
 80224dc:	4642      	mov	r2, r8
 80224de:	464b      	mov	r3, r9
 80224e0:	ec51 0b19 	vmov	r0, r1, d9
 80224e4:	f7dd fee2 	bl	80002ac <__adddf3>
 80224e8:	2400      	movs	r4, #0
 80224ea:	a379      	add	r3, pc, #484	; (adr r3, 80226d0 <__ieee754_pow+0x9e0>)
 80224ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224f0:	4620      	mov	r0, r4
 80224f2:	460d      	mov	r5, r1
 80224f4:	f7de f890 	bl	8000618 <__aeabi_dmul>
 80224f8:	ec53 2b19 	vmov	r2, r3, d9
 80224fc:	4606      	mov	r6, r0
 80224fe:	460f      	mov	r7, r1
 8022500:	4620      	mov	r0, r4
 8022502:	4629      	mov	r1, r5
 8022504:	f7dd fed0 	bl	80002a8 <__aeabi_dsub>
 8022508:	4602      	mov	r2, r0
 802250a:	460b      	mov	r3, r1
 802250c:	4640      	mov	r0, r8
 802250e:	4649      	mov	r1, r9
 8022510:	f7dd feca 	bl	80002a8 <__aeabi_dsub>
 8022514:	a370      	add	r3, pc, #448	; (adr r3, 80226d8 <__ieee754_pow+0x9e8>)
 8022516:	e9d3 2300 	ldrd	r2, r3, [r3]
 802251a:	f7de f87d 	bl	8000618 <__aeabi_dmul>
 802251e:	a370      	add	r3, pc, #448	; (adr r3, 80226e0 <__ieee754_pow+0x9f0>)
 8022520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022524:	4680      	mov	r8, r0
 8022526:	4689      	mov	r9, r1
 8022528:	4620      	mov	r0, r4
 802252a:	4629      	mov	r1, r5
 802252c:	f7de f874 	bl	8000618 <__aeabi_dmul>
 8022530:	4602      	mov	r2, r0
 8022532:	460b      	mov	r3, r1
 8022534:	4640      	mov	r0, r8
 8022536:	4649      	mov	r1, r9
 8022538:	f7dd feb8 	bl	80002ac <__adddf3>
 802253c:	4604      	mov	r4, r0
 802253e:	460d      	mov	r5, r1
 8022540:	4602      	mov	r2, r0
 8022542:	460b      	mov	r3, r1
 8022544:	4630      	mov	r0, r6
 8022546:	4639      	mov	r1, r7
 8022548:	f7dd feb0 	bl	80002ac <__adddf3>
 802254c:	4632      	mov	r2, r6
 802254e:	463b      	mov	r3, r7
 8022550:	4680      	mov	r8, r0
 8022552:	4689      	mov	r9, r1
 8022554:	f7dd fea8 	bl	80002a8 <__aeabi_dsub>
 8022558:	4602      	mov	r2, r0
 802255a:	460b      	mov	r3, r1
 802255c:	4620      	mov	r0, r4
 802255e:	4629      	mov	r1, r5
 8022560:	f7dd fea2 	bl	80002a8 <__aeabi_dsub>
 8022564:	4642      	mov	r2, r8
 8022566:	4606      	mov	r6, r0
 8022568:	460f      	mov	r7, r1
 802256a:	464b      	mov	r3, r9
 802256c:	4640      	mov	r0, r8
 802256e:	4649      	mov	r1, r9
 8022570:	f7de f852 	bl	8000618 <__aeabi_dmul>
 8022574:	a35c      	add	r3, pc, #368	; (adr r3, 80226e8 <__ieee754_pow+0x9f8>)
 8022576:	e9d3 2300 	ldrd	r2, r3, [r3]
 802257a:	4604      	mov	r4, r0
 802257c:	460d      	mov	r5, r1
 802257e:	f7de f84b 	bl	8000618 <__aeabi_dmul>
 8022582:	a35b      	add	r3, pc, #364	; (adr r3, 80226f0 <__ieee754_pow+0xa00>)
 8022584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022588:	f7dd fe8e 	bl	80002a8 <__aeabi_dsub>
 802258c:	4622      	mov	r2, r4
 802258e:	462b      	mov	r3, r5
 8022590:	f7de f842 	bl	8000618 <__aeabi_dmul>
 8022594:	a358      	add	r3, pc, #352	; (adr r3, 80226f8 <__ieee754_pow+0xa08>)
 8022596:	e9d3 2300 	ldrd	r2, r3, [r3]
 802259a:	f7dd fe87 	bl	80002ac <__adddf3>
 802259e:	4622      	mov	r2, r4
 80225a0:	462b      	mov	r3, r5
 80225a2:	f7de f839 	bl	8000618 <__aeabi_dmul>
 80225a6:	a356      	add	r3, pc, #344	; (adr r3, 8022700 <__ieee754_pow+0xa10>)
 80225a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225ac:	f7dd fe7c 	bl	80002a8 <__aeabi_dsub>
 80225b0:	4622      	mov	r2, r4
 80225b2:	462b      	mov	r3, r5
 80225b4:	f7de f830 	bl	8000618 <__aeabi_dmul>
 80225b8:	a353      	add	r3, pc, #332	; (adr r3, 8022708 <__ieee754_pow+0xa18>)
 80225ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225be:	f7dd fe75 	bl	80002ac <__adddf3>
 80225c2:	4622      	mov	r2, r4
 80225c4:	462b      	mov	r3, r5
 80225c6:	f7de f827 	bl	8000618 <__aeabi_dmul>
 80225ca:	4602      	mov	r2, r0
 80225cc:	460b      	mov	r3, r1
 80225ce:	4640      	mov	r0, r8
 80225d0:	4649      	mov	r1, r9
 80225d2:	f7dd fe69 	bl	80002a8 <__aeabi_dsub>
 80225d6:	4604      	mov	r4, r0
 80225d8:	460d      	mov	r5, r1
 80225da:	4602      	mov	r2, r0
 80225dc:	460b      	mov	r3, r1
 80225de:	4640      	mov	r0, r8
 80225e0:	4649      	mov	r1, r9
 80225e2:	f7de f819 	bl	8000618 <__aeabi_dmul>
 80225e6:	2200      	movs	r2, #0
 80225e8:	ec41 0b19 	vmov	d9, r0, r1
 80225ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80225f0:	4620      	mov	r0, r4
 80225f2:	4629      	mov	r1, r5
 80225f4:	f7dd fe58 	bl	80002a8 <__aeabi_dsub>
 80225f8:	4602      	mov	r2, r0
 80225fa:	460b      	mov	r3, r1
 80225fc:	ec51 0b19 	vmov	r0, r1, d9
 8022600:	f7de f934 	bl	800086c <__aeabi_ddiv>
 8022604:	4632      	mov	r2, r6
 8022606:	4604      	mov	r4, r0
 8022608:	460d      	mov	r5, r1
 802260a:	463b      	mov	r3, r7
 802260c:	4640      	mov	r0, r8
 802260e:	4649      	mov	r1, r9
 8022610:	f7de f802 	bl	8000618 <__aeabi_dmul>
 8022614:	4632      	mov	r2, r6
 8022616:	463b      	mov	r3, r7
 8022618:	f7dd fe48 	bl	80002ac <__adddf3>
 802261c:	4602      	mov	r2, r0
 802261e:	460b      	mov	r3, r1
 8022620:	4620      	mov	r0, r4
 8022622:	4629      	mov	r1, r5
 8022624:	f7dd fe40 	bl	80002a8 <__aeabi_dsub>
 8022628:	4642      	mov	r2, r8
 802262a:	464b      	mov	r3, r9
 802262c:	f7dd fe3c 	bl	80002a8 <__aeabi_dsub>
 8022630:	460b      	mov	r3, r1
 8022632:	4602      	mov	r2, r0
 8022634:	493a      	ldr	r1, [pc, #232]	; (8022720 <__ieee754_pow+0xa30>)
 8022636:	2000      	movs	r0, #0
 8022638:	f7dd fe36 	bl	80002a8 <__aeabi_dsub>
 802263c:	e9cd 0100 	strd	r0, r1, [sp]
 8022640:	9b01      	ldr	r3, [sp, #4]
 8022642:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8022646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802264a:	da2f      	bge.n	80226ac <__ieee754_pow+0x9bc>
 802264c:	4650      	mov	r0, sl
 802264e:	ed9d 0b00 	vldr	d0, [sp]
 8022652:	f000 f9cd 	bl	80229f0 <scalbn>
 8022656:	ec51 0b10 	vmov	r0, r1, d0
 802265a:	ec53 2b18 	vmov	r2, r3, d8
 802265e:	f7ff bbe0 	b.w	8021e22 <__ieee754_pow+0x132>
 8022662:	4b30      	ldr	r3, [pc, #192]	; (8022724 <__ieee754_pow+0xa34>)
 8022664:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8022668:	429e      	cmp	r6, r3
 802266a:	f77f af0b 	ble.w	8022484 <__ieee754_pow+0x794>
 802266e:	4b2e      	ldr	r3, [pc, #184]	; (8022728 <__ieee754_pow+0xa38>)
 8022670:	440b      	add	r3, r1
 8022672:	4303      	orrs	r3, r0
 8022674:	d00b      	beq.n	802268e <__ieee754_pow+0x99e>
 8022676:	a326      	add	r3, pc, #152	; (adr r3, 8022710 <__ieee754_pow+0xa20>)
 8022678:	e9d3 2300 	ldrd	r2, r3, [r3]
 802267c:	ec51 0b18 	vmov	r0, r1, d8
 8022680:	f7dd ffca 	bl	8000618 <__aeabi_dmul>
 8022684:	a322      	add	r3, pc, #136	; (adr r3, 8022710 <__ieee754_pow+0xa20>)
 8022686:	e9d3 2300 	ldrd	r2, r3, [r3]
 802268a:	f7ff bbca 	b.w	8021e22 <__ieee754_pow+0x132>
 802268e:	4622      	mov	r2, r4
 8022690:	462b      	mov	r3, r5
 8022692:	f7dd fe09 	bl	80002a8 <__aeabi_dsub>
 8022696:	4642      	mov	r2, r8
 8022698:	464b      	mov	r3, r9
 802269a:	f7de fa43 	bl	8000b24 <__aeabi_dcmpge>
 802269e:	2800      	cmp	r0, #0
 80226a0:	f43f aef0 	beq.w	8022484 <__ieee754_pow+0x794>
 80226a4:	e7e7      	b.n	8022676 <__ieee754_pow+0x986>
 80226a6:	f04f 0a00 	mov.w	sl, #0
 80226aa:	e717      	b.n	80224dc <__ieee754_pow+0x7ec>
 80226ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80226b0:	4619      	mov	r1, r3
 80226b2:	e7d2      	b.n	802265a <__ieee754_pow+0x96a>
 80226b4:	491a      	ldr	r1, [pc, #104]	; (8022720 <__ieee754_pow+0xa30>)
 80226b6:	2000      	movs	r0, #0
 80226b8:	f7ff bb9e 	b.w	8021df8 <__ieee754_pow+0x108>
 80226bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80226c0:	f7ff bb9a 	b.w	8021df8 <__ieee754_pow+0x108>
 80226c4:	9000      	str	r0, [sp, #0]
 80226c6:	f7ff bb76 	b.w	8021db6 <__ieee754_pow+0xc6>
 80226ca:	2100      	movs	r1, #0
 80226cc:	f7ff bb60 	b.w	8021d90 <__ieee754_pow+0xa0>
 80226d0:	00000000 	.word	0x00000000
 80226d4:	3fe62e43 	.word	0x3fe62e43
 80226d8:	fefa39ef 	.word	0xfefa39ef
 80226dc:	3fe62e42 	.word	0x3fe62e42
 80226e0:	0ca86c39 	.word	0x0ca86c39
 80226e4:	be205c61 	.word	0xbe205c61
 80226e8:	72bea4d0 	.word	0x72bea4d0
 80226ec:	3e663769 	.word	0x3e663769
 80226f0:	c5d26bf1 	.word	0xc5d26bf1
 80226f4:	3ebbbd41 	.word	0x3ebbbd41
 80226f8:	af25de2c 	.word	0xaf25de2c
 80226fc:	3f11566a 	.word	0x3f11566a
 8022700:	16bebd93 	.word	0x16bebd93
 8022704:	3f66c16c 	.word	0x3f66c16c
 8022708:	5555553e 	.word	0x5555553e
 802270c:	3fc55555 	.word	0x3fc55555
 8022710:	c2f8f359 	.word	0xc2f8f359
 8022714:	01a56e1f 	.word	0x01a56e1f
 8022718:	3fe00000 	.word	0x3fe00000
 802271c:	000fffff 	.word	0x000fffff
 8022720:	3ff00000 	.word	0x3ff00000
 8022724:	4090cbff 	.word	0x4090cbff
 8022728:	3f6f3400 	.word	0x3f6f3400
 802272c:	652b82fe 	.word	0x652b82fe
 8022730:	3c971547 	.word	0x3c971547

08022734 <__ieee754_sqrt>:
 8022734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022738:	ec55 4b10 	vmov	r4, r5, d0
 802273c:	4e56      	ldr	r6, [pc, #344]	; (8022898 <__ieee754_sqrt+0x164>)
 802273e:	43ae      	bics	r6, r5
 8022740:	ee10 0a10 	vmov	r0, s0
 8022744:	ee10 3a10 	vmov	r3, s0
 8022748:	4629      	mov	r1, r5
 802274a:	462a      	mov	r2, r5
 802274c:	d110      	bne.n	8022770 <__ieee754_sqrt+0x3c>
 802274e:	ee10 2a10 	vmov	r2, s0
 8022752:	462b      	mov	r3, r5
 8022754:	f7dd ff60 	bl	8000618 <__aeabi_dmul>
 8022758:	4602      	mov	r2, r0
 802275a:	460b      	mov	r3, r1
 802275c:	4620      	mov	r0, r4
 802275e:	4629      	mov	r1, r5
 8022760:	f7dd fda4 	bl	80002ac <__adddf3>
 8022764:	4604      	mov	r4, r0
 8022766:	460d      	mov	r5, r1
 8022768:	ec45 4b10 	vmov	d0, r4, r5
 802276c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022770:	2d00      	cmp	r5, #0
 8022772:	dc10      	bgt.n	8022796 <__ieee754_sqrt+0x62>
 8022774:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8022778:	4330      	orrs	r0, r6
 802277a:	d0f5      	beq.n	8022768 <__ieee754_sqrt+0x34>
 802277c:	b15d      	cbz	r5, 8022796 <__ieee754_sqrt+0x62>
 802277e:	ee10 2a10 	vmov	r2, s0
 8022782:	462b      	mov	r3, r5
 8022784:	ee10 0a10 	vmov	r0, s0
 8022788:	f7dd fd8e 	bl	80002a8 <__aeabi_dsub>
 802278c:	4602      	mov	r2, r0
 802278e:	460b      	mov	r3, r1
 8022790:	f7de f86c 	bl	800086c <__aeabi_ddiv>
 8022794:	e7e6      	b.n	8022764 <__ieee754_sqrt+0x30>
 8022796:	1509      	asrs	r1, r1, #20
 8022798:	d076      	beq.n	8022888 <__ieee754_sqrt+0x154>
 802279a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 802279e:	07ce      	lsls	r6, r1, #31
 80227a0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80227a4:	bf5e      	ittt	pl
 80227a6:	0fda      	lsrpl	r2, r3, #31
 80227a8:	005b      	lslpl	r3, r3, #1
 80227aa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80227ae:	0fda      	lsrs	r2, r3, #31
 80227b0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80227b4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80227b8:	2000      	movs	r0, #0
 80227ba:	106d      	asrs	r5, r5, #1
 80227bc:	005b      	lsls	r3, r3, #1
 80227be:	f04f 0e16 	mov.w	lr, #22
 80227c2:	4684      	mov	ip, r0
 80227c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80227c8:	eb0c 0401 	add.w	r4, ip, r1
 80227cc:	4294      	cmp	r4, r2
 80227ce:	bfde      	ittt	le
 80227d0:	1b12      	suble	r2, r2, r4
 80227d2:	eb04 0c01 	addle.w	ip, r4, r1
 80227d6:	1840      	addle	r0, r0, r1
 80227d8:	0052      	lsls	r2, r2, #1
 80227da:	f1be 0e01 	subs.w	lr, lr, #1
 80227de:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80227e2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80227e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80227ea:	d1ed      	bne.n	80227c8 <__ieee754_sqrt+0x94>
 80227ec:	4671      	mov	r1, lr
 80227ee:	2720      	movs	r7, #32
 80227f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80227f4:	4562      	cmp	r2, ip
 80227f6:	eb04 060e 	add.w	r6, r4, lr
 80227fa:	dc02      	bgt.n	8022802 <__ieee754_sqrt+0xce>
 80227fc:	d113      	bne.n	8022826 <__ieee754_sqrt+0xf2>
 80227fe:	429e      	cmp	r6, r3
 8022800:	d811      	bhi.n	8022826 <__ieee754_sqrt+0xf2>
 8022802:	2e00      	cmp	r6, #0
 8022804:	eb06 0e04 	add.w	lr, r6, r4
 8022808:	da43      	bge.n	8022892 <__ieee754_sqrt+0x15e>
 802280a:	f1be 0f00 	cmp.w	lr, #0
 802280e:	db40      	blt.n	8022892 <__ieee754_sqrt+0x15e>
 8022810:	f10c 0801 	add.w	r8, ip, #1
 8022814:	eba2 020c 	sub.w	r2, r2, ip
 8022818:	429e      	cmp	r6, r3
 802281a:	bf88      	it	hi
 802281c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8022820:	1b9b      	subs	r3, r3, r6
 8022822:	4421      	add	r1, r4
 8022824:	46c4      	mov	ip, r8
 8022826:	0052      	lsls	r2, r2, #1
 8022828:	3f01      	subs	r7, #1
 802282a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 802282e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8022832:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8022836:	d1dd      	bne.n	80227f4 <__ieee754_sqrt+0xc0>
 8022838:	4313      	orrs	r3, r2
 802283a:	d006      	beq.n	802284a <__ieee754_sqrt+0x116>
 802283c:	1c4c      	adds	r4, r1, #1
 802283e:	bf13      	iteet	ne
 8022840:	3101      	addne	r1, #1
 8022842:	3001      	addeq	r0, #1
 8022844:	4639      	moveq	r1, r7
 8022846:	f021 0101 	bicne.w	r1, r1, #1
 802284a:	1043      	asrs	r3, r0, #1
 802284c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8022850:	0849      	lsrs	r1, r1, #1
 8022852:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8022856:	07c2      	lsls	r2, r0, #31
 8022858:	bf48      	it	mi
 802285a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 802285e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8022862:	460c      	mov	r4, r1
 8022864:	463d      	mov	r5, r7
 8022866:	e77f      	b.n	8022768 <__ieee754_sqrt+0x34>
 8022868:	0ada      	lsrs	r2, r3, #11
 802286a:	3815      	subs	r0, #21
 802286c:	055b      	lsls	r3, r3, #21
 802286e:	2a00      	cmp	r2, #0
 8022870:	d0fa      	beq.n	8022868 <__ieee754_sqrt+0x134>
 8022872:	02d7      	lsls	r7, r2, #11
 8022874:	d50a      	bpl.n	802288c <__ieee754_sqrt+0x158>
 8022876:	f1c1 0420 	rsb	r4, r1, #32
 802287a:	fa23 f404 	lsr.w	r4, r3, r4
 802287e:	1e4d      	subs	r5, r1, #1
 8022880:	408b      	lsls	r3, r1
 8022882:	4322      	orrs	r2, r4
 8022884:	1b41      	subs	r1, r0, r5
 8022886:	e788      	b.n	802279a <__ieee754_sqrt+0x66>
 8022888:	4608      	mov	r0, r1
 802288a:	e7f0      	b.n	802286e <__ieee754_sqrt+0x13a>
 802288c:	0052      	lsls	r2, r2, #1
 802288e:	3101      	adds	r1, #1
 8022890:	e7ef      	b.n	8022872 <__ieee754_sqrt+0x13e>
 8022892:	46e0      	mov	r8, ip
 8022894:	e7be      	b.n	8022814 <__ieee754_sqrt+0xe0>
 8022896:	bf00      	nop
 8022898:	7ff00000 	.word	0x7ff00000

0802289c <fabs>:
 802289c:	ec51 0b10 	vmov	r0, r1, d0
 80228a0:	ee10 2a10 	vmov	r2, s0
 80228a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80228a8:	ec43 2b10 	vmov	d0, r2, r3
 80228ac:	4770      	bx	lr

080228ae <finite>:
 80228ae:	b082      	sub	sp, #8
 80228b0:	ed8d 0b00 	vstr	d0, [sp]
 80228b4:	9801      	ldr	r0, [sp, #4]
 80228b6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80228ba:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80228be:	0fc0      	lsrs	r0, r0, #31
 80228c0:	b002      	add	sp, #8
 80228c2:	4770      	bx	lr
 80228c4:	0000      	movs	r0, r0
	...

080228c8 <nan>:
 80228c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80228d0 <nan+0x8>
 80228cc:	4770      	bx	lr
 80228ce:	bf00      	nop
 80228d0:	00000000 	.word	0x00000000
 80228d4:	7ff80000 	.word	0x7ff80000

080228d8 <rint>:
 80228d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80228da:	ec51 0b10 	vmov	r0, r1, d0
 80228de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80228e2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80228e6:	2e13      	cmp	r6, #19
 80228e8:	ee10 4a10 	vmov	r4, s0
 80228ec:	460b      	mov	r3, r1
 80228ee:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80228f2:	dc58      	bgt.n	80229a6 <rint+0xce>
 80228f4:	2e00      	cmp	r6, #0
 80228f6:	da2b      	bge.n	8022950 <rint+0x78>
 80228f8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80228fc:	4302      	orrs	r2, r0
 80228fe:	d023      	beq.n	8022948 <rint+0x70>
 8022900:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8022904:	4302      	orrs	r2, r0
 8022906:	4254      	negs	r4, r2
 8022908:	4314      	orrs	r4, r2
 802290a:	0c4b      	lsrs	r3, r1, #17
 802290c:	0b24      	lsrs	r4, r4, #12
 802290e:	045b      	lsls	r3, r3, #17
 8022910:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8022914:	ea44 0103 	orr.w	r1, r4, r3
 8022918:	4b32      	ldr	r3, [pc, #200]	; (80229e4 <rint+0x10c>)
 802291a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802291e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8022922:	4602      	mov	r2, r0
 8022924:	460b      	mov	r3, r1
 8022926:	4630      	mov	r0, r6
 8022928:	4639      	mov	r1, r7
 802292a:	f7dd fcbf 	bl	80002ac <__adddf3>
 802292e:	e9cd 0100 	strd	r0, r1, [sp]
 8022932:	463b      	mov	r3, r7
 8022934:	e9dd 0100 	ldrd	r0, r1, [sp]
 8022938:	4632      	mov	r2, r6
 802293a:	f7dd fcb5 	bl	80002a8 <__aeabi_dsub>
 802293e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8022942:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8022946:	4639      	mov	r1, r7
 8022948:	ec41 0b10 	vmov	d0, r0, r1
 802294c:	b003      	add	sp, #12
 802294e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022950:	4a25      	ldr	r2, [pc, #148]	; (80229e8 <rint+0x110>)
 8022952:	4132      	asrs	r2, r6
 8022954:	ea01 0702 	and.w	r7, r1, r2
 8022958:	4307      	orrs	r7, r0
 802295a:	d0f5      	beq.n	8022948 <rint+0x70>
 802295c:	0851      	lsrs	r1, r2, #1
 802295e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8022962:	4314      	orrs	r4, r2
 8022964:	d00c      	beq.n	8022980 <rint+0xa8>
 8022966:	ea23 0201 	bic.w	r2, r3, r1
 802296a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802296e:	2e13      	cmp	r6, #19
 8022970:	fa43 f606 	asr.w	r6, r3, r6
 8022974:	bf0c      	ite	eq
 8022976:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 802297a:	2400      	movne	r4, #0
 802297c:	ea42 0306 	orr.w	r3, r2, r6
 8022980:	4918      	ldr	r1, [pc, #96]	; (80229e4 <rint+0x10c>)
 8022982:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8022986:	4622      	mov	r2, r4
 8022988:	e9d5 4500 	ldrd	r4, r5, [r5]
 802298c:	4620      	mov	r0, r4
 802298e:	4629      	mov	r1, r5
 8022990:	f7dd fc8c 	bl	80002ac <__adddf3>
 8022994:	e9cd 0100 	strd	r0, r1, [sp]
 8022998:	e9dd 0100 	ldrd	r0, r1, [sp]
 802299c:	4622      	mov	r2, r4
 802299e:	462b      	mov	r3, r5
 80229a0:	f7dd fc82 	bl	80002a8 <__aeabi_dsub>
 80229a4:	e7d0      	b.n	8022948 <rint+0x70>
 80229a6:	2e33      	cmp	r6, #51	; 0x33
 80229a8:	dd07      	ble.n	80229ba <rint+0xe2>
 80229aa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80229ae:	d1cb      	bne.n	8022948 <rint+0x70>
 80229b0:	ee10 2a10 	vmov	r2, s0
 80229b4:	f7dd fc7a 	bl	80002ac <__adddf3>
 80229b8:	e7c6      	b.n	8022948 <rint+0x70>
 80229ba:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80229be:	f04f 36ff 	mov.w	r6, #4294967295
 80229c2:	40d6      	lsrs	r6, r2
 80229c4:	4230      	tst	r0, r6
 80229c6:	d0bf      	beq.n	8022948 <rint+0x70>
 80229c8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80229cc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80229d0:	bf1f      	itttt	ne
 80229d2:	ea24 0101 	bicne.w	r1, r4, r1
 80229d6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80229da:	fa44 f202 	asrne.w	r2, r4, r2
 80229de:	ea41 0402 	orrne.w	r4, r1, r2
 80229e2:	e7cd      	b.n	8022980 <rint+0xa8>
 80229e4:	080279e8 	.word	0x080279e8
 80229e8:	000fffff 	.word	0x000fffff
 80229ec:	00000000 	.word	0x00000000

080229f0 <scalbn>:
 80229f0:	b570      	push	{r4, r5, r6, lr}
 80229f2:	ec55 4b10 	vmov	r4, r5, d0
 80229f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80229fa:	4606      	mov	r6, r0
 80229fc:	462b      	mov	r3, r5
 80229fe:	b99a      	cbnz	r2, 8022a28 <scalbn+0x38>
 8022a00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8022a04:	4323      	orrs	r3, r4
 8022a06:	d036      	beq.n	8022a76 <scalbn+0x86>
 8022a08:	4b39      	ldr	r3, [pc, #228]	; (8022af0 <scalbn+0x100>)
 8022a0a:	4629      	mov	r1, r5
 8022a0c:	ee10 0a10 	vmov	r0, s0
 8022a10:	2200      	movs	r2, #0
 8022a12:	f7dd fe01 	bl	8000618 <__aeabi_dmul>
 8022a16:	4b37      	ldr	r3, [pc, #220]	; (8022af4 <scalbn+0x104>)
 8022a18:	429e      	cmp	r6, r3
 8022a1a:	4604      	mov	r4, r0
 8022a1c:	460d      	mov	r5, r1
 8022a1e:	da10      	bge.n	8022a42 <scalbn+0x52>
 8022a20:	a32b      	add	r3, pc, #172	; (adr r3, 8022ad0 <scalbn+0xe0>)
 8022a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a26:	e03a      	b.n	8022a9e <scalbn+0xae>
 8022a28:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8022a2c:	428a      	cmp	r2, r1
 8022a2e:	d10c      	bne.n	8022a4a <scalbn+0x5a>
 8022a30:	ee10 2a10 	vmov	r2, s0
 8022a34:	4620      	mov	r0, r4
 8022a36:	4629      	mov	r1, r5
 8022a38:	f7dd fc38 	bl	80002ac <__adddf3>
 8022a3c:	4604      	mov	r4, r0
 8022a3e:	460d      	mov	r5, r1
 8022a40:	e019      	b.n	8022a76 <scalbn+0x86>
 8022a42:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8022a46:	460b      	mov	r3, r1
 8022a48:	3a36      	subs	r2, #54	; 0x36
 8022a4a:	4432      	add	r2, r6
 8022a4c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8022a50:	428a      	cmp	r2, r1
 8022a52:	dd08      	ble.n	8022a66 <scalbn+0x76>
 8022a54:	2d00      	cmp	r5, #0
 8022a56:	a120      	add	r1, pc, #128	; (adr r1, 8022ad8 <scalbn+0xe8>)
 8022a58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022a5c:	da1c      	bge.n	8022a98 <scalbn+0xa8>
 8022a5e:	a120      	add	r1, pc, #128	; (adr r1, 8022ae0 <scalbn+0xf0>)
 8022a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022a64:	e018      	b.n	8022a98 <scalbn+0xa8>
 8022a66:	2a00      	cmp	r2, #0
 8022a68:	dd08      	ble.n	8022a7c <scalbn+0x8c>
 8022a6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8022a6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8022a72:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8022a76:	ec45 4b10 	vmov	d0, r4, r5
 8022a7a:	bd70      	pop	{r4, r5, r6, pc}
 8022a7c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8022a80:	da19      	bge.n	8022ab6 <scalbn+0xc6>
 8022a82:	f24c 3350 	movw	r3, #50000	; 0xc350
 8022a86:	429e      	cmp	r6, r3
 8022a88:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8022a8c:	dd0a      	ble.n	8022aa4 <scalbn+0xb4>
 8022a8e:	a112      	add	r1, pc, #72	; (adr r1, 8022ad8 <scalbn+0xe8>)
 8022a90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022a94:	2b00      	cmp	r3, #0
 8022a96:	d1e2      	bne.n	8022a5e <scalbn+0x6e>
 8022a98:	a30f      	add	r3, pc, #60	; (adr r3, 8022ad8 <scalbn+0xe8>)
 8022a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a9e:	f7dd fdbb 	bl	8000618 <__aeabi_dmul>
 8022aa2:	e7cb      	b.n	8022a3c <scalbn+0x4c>
 8022aa4:	a10a      	add	r1, pc, #40	; (adr r1, 8022ad0 <scalbn+0xe0>)
 8022aa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022aaa:	2b00      	cmp	r3, #0
 8022aac:	d0b8      	beq.n	8022a20 <scalbn+0x30>
 8022aae:	a10e      	add	r1, pc, #56	; (adr r1, 8022ae8 <scalbn+0xf8>)
 8022ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022ab4:	e7b4      	b.n	8022a20 <scalbn+0x30>
 8022ab6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8022aba:	3236      	adds	r2, #54	; 0x36
 8022abc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8022ac0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8022ac4:	4620      	mov	r0, r4
 8022ac6:	4b0c      	ldr	r3, [pc, #48]	; (8022af8 <scalbn+0x108>)
 8022ac8:	2200      	movs	r2, #0
 8022aca:	e7e8      	b.n	8022a9e <scalbn+0xae>
 8022acc:	f3af 8000 	nop.w
 8022ad0:	c2f8f359 	.word	0xc2f8f359
 8022ad4:	01a56e1f 	.word	0x01a56e1f
 8022ad8:	8800759c 	.word	0x8800759c
 8022adc:	7e37e43c 	.word	0x7e37e43c
 8022ae0:	8800759c 	.word	0x8800759c
 8022ae4:	fe37e43c 	.word	0xfe37e43c
 8022ae8:	c2f8f359 	.word	0xc2f8f359
 8022aec:	81a56e1f 	.word	0x81a56e1f
 8022af0:	43500000 	.word	0x43500000
 8022af4:	ffff3cb0 	.word	0xffff3cb0
 8022af8:	3c900000 	.word	0x3c900000

08022afc <_init>:
 8022afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022afe:	bf00      	nop
 8022b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022b02:	bc08      	pop	{r3}
 8022b04:	469e      	mov	lr, r3
 8022b06:	4770      	bx	lr

08022b08 <_fini>:
 8022b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022b0a:	bf00      	nop
 8022b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022b0e:	bc08      	pop	{r3}
 8022b10:	469e      	mov	lr, r3
 8022b12:	4770      	bx	lr
