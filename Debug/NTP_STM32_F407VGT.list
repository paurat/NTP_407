
NTP_STM32_F407VGT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022024  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004eb0  080221b8  080221b8  000321b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027068  08027068  00040274  2**0
                  CONTENTS
  4 .ARM          00000008  08027068  08027068  00037068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027070  08027070  00040274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027070  08027070  00037070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08027074  08027074  00037074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  08027078  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ce2c  20000278  080272ec  00040278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000d0a4  080272ec  0004d0a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040274  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005ed4a  00000000  00000000  000402a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b2a5  00000000  00000000  0009efee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e18  00000000  00000000  000aa298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002bf0  00000000  00000000  000ad0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000399d2  00000000  00000000  000afca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00049c4d  00000000  00000000  000e9672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdcac  00000000  00000000  001332bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00230f6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d304  00000000  00000000  00230fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000278 	.word	0x20000278
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0802219c 	.word	0x0802219c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000027c 	.word	0x2000027c
 80001cc:	0802219c 	.word	0x0802219c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_ldivmod>:
 8000bc8:	b97b      	cbnz	r3, 8000bea <__aeabi_ldivmod+0x22>
 8000bca:	b972      	cbnz	r2, 8000bea <__aeabi_ldivmod+0x22>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bfbe      	ittt	lt
 8000bd0:	2000      	movlt	r0, #0
 8000bd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bd6:	e006      	blt.n	8000be6 <__aeabi_ldivmod+0x1e>
 8000bd8:	bf08      	it	eq
 8000bda:	2800      	cmpeq	r0, #0
 8000bdc:	bf1c      	itt	ne
 8000bde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000be2:	f04f 30ff 	movne.w	r0, #4294967295
 8000be6:	f000 b9ef 	b.w	8000fc8 <__aeabi_idiv0>
 8000bea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	db09      	blt.n	8000c0a <__aeabi_ldivmod+0x42>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db1a      	blt.n	8000c30 <__aeabi_ldivmod+0x68>
 8000bfa:	f000 f883 	bl	8000d04 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4770      	bx	lr
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db1b      	blt.n	8000c4c <__aeabi_ldivmod+0x84>
 8000c14:	f000 f876 	bl	8000d04 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	4252      	negs	r2, r2
 8000c2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2e:	4770      	bx	lr
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	f000 f865 	bl	8000d04 <__udivmoddi4>
 8000c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c42:	b004      	add	sp, #16
 8000c44:	4240      	negs	r0, r0
 8000c46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4a:	4770      	bx	lr
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	f000 f857 	bl	8000d04 <__udivmoddi4>
 8000c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5e:	b004      	add	sp, #16
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b9a4 	b.w	8000fc8 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f83c 	bl	8000d04 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff2b 	bl	8000afc <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fca1 	bl	8000618 <__aeabi_dmul>
 8000cd6:	f000 f979 	bl	8000fcc <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc22 	bl	8000524 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc98 	bl	8000618 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fada 	bl	80002a8 <__aeabi_dsub>
 8000cf4:	f000 f96a 	bl	8000fcc <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <__udivmoddi4>:
 8000d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d08:	9d08      	ldr	r5, [sp, #32]
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	468c      	mov	ip, r1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 8083 	bne.w	8000e1a <__udivmoddi4+0x116>
 8000d14:	428a      	cmp	r2, r1
 8000d16:	4617      	mov	r7, r2
 8000d18:	d947      	bls.n	8000daa <__udivmoddi4+0xa6>
 8000d1a:	fab2 f282 	clz	r2, r2
 8000d1e:	b142      	cbz	r2, 8000d32 <__udivmoddi4+0x2e>
 8000d20:	f1c2 0020 	rsb	r0, r2, #32
 8000d24:	fa24 f000 	lsr.w	r0, r4, r0
 8000d28:	4091      	lsls	r1, r2
 8000d2a:	4097      	lsls	r7, r2
 8000d2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d30:	4094      	lsls	r4, r2
 8000d32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d36:	0c23      	lsrs	r3, r4, #16
 8000d38:	fbbc f6f8 	udiv	r6, ip, r8
 8000d3c:	fa1f fe87 	uxth.w	lr, r7
 8000d40:	fb08 c116 	mls	r1, r8, r6, ip
 8000d44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d48:	fb06 f10e 	mul.w	r1, r6, lr
 8000d4c:	4299      	cmp	r1, r3
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x60>
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d56:	f080 8119 	bcs.w	8000f8c <__udivmoddi4+0x288>
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	f240 8116 	bls.w	8000f8c <__udivmoddi4+0x288>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	443b      	add	r3, r7
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d909      	bls.n	8000d90 <__udivmoddi4+0x8c>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d82:	f080 8105 	bcs.w	8000f90 <__udivmoddi4+0x28c>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f240 8102 	bls.w	8000f90 <__udivmoddi4+0x28c>
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	443c      	add	r4, r7
 8000d90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d94:	eba4 040e 	sub.w	r4, r4, lr
 8000d98:	2600      	movs	r6, #0
 8000d9a:	b11d      	cbz	r5, 8000da4 <__udivmoddi4+0xa0>
 8000d9c:	40d4      	lsrs	r4, r2
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e9c5 4300 	strd	r4, r3, [r5]
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xaa>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f282 	clz	r2, r2
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	d150      	bne.n	8000e58 <__udivmoddi4+0x154>
 8000db6:	1bcb      	subs	r3, r1, r7
 8000db8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbc:	fa1f f887 	uxth.w	r8, r7
 8000dc0:	2601      	movs	r6, #1
 8000dc2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dc6:	0c21      	lsrs	r1, r4, #16
 8000dc8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dcc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd0:	fb08 f30c 	mul.w	r3, r8, ip
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d907      	bls.n	8000de8 <__udivmoddi4+0xe4>
 8000dd8:	1879      	adds	r1, r7, r1
 8000dda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dde:	d202      	bcs.n	8000de6 <__udivmoddi4+0xe2>
 8000de0:	428b      	cmp	r3, r1
 8000de2:	f200 80e9 	bhi.w	8000fb8 <__udivmoddi4+0x2b4>
 8000de6:	4684      	mov	ip, r0
 8000de8:	1ac9      	subs	r1, r1, r3
 8000dea:	b2a3      	uxth	r3, r4
 8000dec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000df8:	fb08 f800 	mul.w	r8, r8, r0
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	d907      	bls.n	8000e10 <__udivmoddi4+0x10c>
 8000e00:	193c      	adds	r4, r7, r4
 8000e02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x10a>
 8000e08:	45a0      	cmp	r8, r4
 8000e0a:	f200 80d9 	bhi.w	8000fc0 <__udivmoddi4+0x2bc>
 8000e0e:	4618      	mov	r0, r3
 8000e10:	eba4 0408 	sub.w	r4, r4, r8
 8000e14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e18:	e7bf      	b.n	8000d9a <__udivmoddi4+0x96>
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d909      	bls.n	8000e32 <__udivmoddi4+0x12e>
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	f000 80b1 	beq.w	8000f86 <__udivmoddi4+0x282>
 8000e24:	2600      	movs	r6, #0
 8000e26:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	fab3 f683 	clz	r6, r3
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d14a      	bne.n	8000ed0 <__udivmoddi4+0x1cc>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d302      	bcc.n	8000e44 <__udivmoddi4+0x140>
 8000e3e:	4282      	cmp	r2, r0
 8000e40:	f200 80b8 	bhi.w	8000fb4 <__udivmoddi4+0x2b0>
 8000e44:	1a84      	subs	r4, r0, r2
 8000e46:	eb61 0103 	sbc.w	r1, r1, r3
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	468c      	mov	ip, r1
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	d0a8      	beq.n	8000da4 <__udivmoddi4+0xa0>
 8000e52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e56:	e7a5      	b.n	8000da4 <__udivmoddi4+0xa0>
 8000e58:	f1c2 0320 	rsb	r3, r2, #32
 8000e5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e60:	4097      	lsls	r7, r2
 8000e62:	fa01 f002 	lsl.w	r0, r1, r2
 8000e66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6a:	40d9      	lsrs	r1, r3
 8000e6c:	4330      	orrs	r0, r6
 8000e6e:	0c03      	lsrs	r3, r0, #16
 8000e70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e74:	fa1f f887 	uxth.w	r8, r7
 8000e78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e80:	fb06 f108 	mul.w	r1, r6, r8
 8000e84:	4299      	cmp	r1, r3
 8000e86:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8a:	d909      	bls.n	8000ea0 <__udivmoddi4+0x19c>
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e92:	f080 808d 	bcs.w	8000fb0 <__udivmoddi4+0x2ac>
 8000e96:	4299      	cmp	r1, r3
 8000e98:	f240 808a 	bls.w	8000fb0 <__udivmoddi4+0x2ac>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	443b      	add	r3, r7
 8000ea0:	1a5b      	subs	r3, r3, r1
 8000ea2:	b281      	uxth	r1, r0
 8000ea4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ea8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb00 f308 	mul.w	r3, r0, r8
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x1c4>
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ebe:	d273      	bcs.n	8000fa8 <__udivmoddi4+0x2a4>
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	d971      	bls.n	8000fa8 <__udivmoddi4+0x2a4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4439      	add	r1, r7
 8000ec8:	1acb      	subs	r3, r1, r3
 8000eca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ece:	e778      	b.n	8000dc2 <__udivmoddi4+0xbe>
 8000ed0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ed4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ed8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000edc:	431c      	orrs	r4, r3
 8000ede:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ee2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ee6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	0c3b      	lsrs	r3, r7, #16
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fa1f f884 	uxth.w	r8, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f02:	fb09 fa08 	mul.w	sl, r9, r8
 8000f06:	458a      	cmp	sl, r1
 8000f08:	fa02 f206 	lsl.w	r2, r2, r6
 8000f0c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x220>
 8000f12:	1861      	adds	r1, r4, r1
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	d248      	bcs.n	8000fac <__udivmoddi4+0x2a8>
 8000f1a:	458a      	cmp	sl, r1
 8000f1c:	d946      	bls.n	8000fac <__udivmoddi4+0x2a8>
 8000f1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f22:	4421      	add	r1, r4
 8000f24:	eba1 010a 	sub.w	r1, r1, sl
 8000f28:	b2bf      	uxth	r7, r7
 8000f2a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f2e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f32:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f36:	fb00 f808 	mul.w	r8, r0, r8
 8000f3a:	45b8      	cmp	r8, r7
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x24a>
 8000f3e:	19e7      	adds	r7, r4, r7
 8000f40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f44:	d22e      	bcs.n	8000fa4 <__udivmoddi4+0x2a0>
 8000f46:	45b8      	cmp	r8, r7
 8000f48:	d92c      	bls.n	8000fa4 <__udivmoddi4+0x2a0>
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	4427      	add	r7, r4
 8000f4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f52:	eba7 0708 	sub.w	r7, r7, r8
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	454f      	cmp	r7, r9
 8000f5c:	46c6      	mov	lr, r8
 8000f5e:	4649      	mov	r1, r9
 8000f60:	d31a      	bcc.n	8000f98 <__udivmoddi4+0x294>
 8000f62:	d017      	beq.n	8000f94 <__udivmoddi4+0x290>
 8000f64:	b15d      	cbz	r5, 8000f7e <__udivmoddi4+0x27a>
 8000f66:	ebb3 020e 	subs.w	r2, r3, lr
 8000f6a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f6e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f72:	40f2      	lsrs	r2, r6
 8000f74:	ea4c 0202 	orr.w	r2, ip, r2
 8000f78:	40f7      	lsrs	r7, r6
 8000f7a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f7e:	2600      	movs	r6, #0
 8000f80:	4631      	mov	r1, r6
 8000f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f86:	462e      	mov	r6, r5
 8000f88:	4628      	mov	r0, r5
 8000f8a:	e70b      	b.n	8000da4 <__udivmoddi4+0xa0>
 8000f8c:	4606      	mov	r6, r0
 8000f8e:	e6e9      	b.n	8000d64 <__udivmoddi4+0x60>
 8000f90:	4618      	mov	r0, r3
 8000f92:	e6fd      	b.n	8000d90 <__udivmoddi4+0x8c>
 8000f94:	4543      	cmp	r3, r8
 8000f96:	d2e5      	bcs.n	8000f64 <__udivmoddi4+0x260>
 8000f98:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f9c:	eb69 0104 	sbc.w	r1, r9, r4
 8000fa0:	3801      	subs	r0, #1
 8000fa2:	e7df      	b.n	8000f64 <__udivmoddi4+0x260>
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	e7d2      	b.n	8000f4e <__udivmoddi4+0x24a>
 8000fa8:	4660      	mov	r0, ip
 8000faa:	e78d      	b.n	8000ec8 <__udivmoddi4+0x1c4>
 8000fac:	4681      	mov	r9, r0
 8000fae:	e7b9      	b.n	8000f24 <__udivmoddi4+0x220>
 8000fb0:	4666      	mov	r6, ip
 8000fb2:	e775      	b.n	8000ea0 <__udivmoddi4+0x19c>
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	e74a      	b.n	8000e4e <__udivmoddi4+0x14a>
 8000fb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fbc:	4439      	add	r1, r7
 8000fbe:	e713      	b.n	8000de8 <__udivmoddi4+0xe4>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	443c      	add	r4, r7
 8000fc4:	e724      	b.n	8000e10 <__udivmoddi4+0x10c>
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <__aeabi_d2uiz>:
 8000fcc:	004a      	lsls	r2, r1, #1
 8000fce:	d211      	bcs.n	8000ff4 <__aeabi_d2uiz+0x28>
 8000fd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fd4:	d211      	bcs.n	8000ffa <__aeabi_d2uiz+0x2e>
 8000fd6:	d50d      	bpl.n	8000ff4 <__aeabi_d2uiz+0x28>
 8000fd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fe0:	d40e      	bmi.n	8001000 <__aeabi_d2uiz+0x34>
 8000fe2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fee:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff2:	4770      	bx	lr
 8000ff4:	f04f 0000 	mov.w	r0, #0
 8000ff8:	4770      	bx	lr
 8000ffa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ffe:	d102      	bne.n	8001006 <__aeabi_d2uiz+0x3a>
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr

0800100c <ReadDeviceAddressOffset>:
	/* Lock the Flash to disable the flash control register access (recommended
	to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
}
void ReadDeviceAddressOffset(char* Dout, int size, int offset)
{
 800100c:	b480      	push	{r7}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
	uint32_t Address = CONFIGURATION_START_ADDR+offset;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800101e:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 8001022:	613b      	str	r3, [r7, #16]

	for (int i = 0; i<size; i++){
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	e00c      	b.n	8001044 <ReadDeviceAddressOffset+0x38>
		Dout[i] = *(__IO char*)(Address+i);
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4413      	add	r3, r2
 8001030:	4619      	mov	r1, r3
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	4413      	add	r3, r2
 8001038:	780a      	ldrb	r2, [r1, #0]
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<size; i++){
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	429a      	cmp	r2, r3
 800104a:	dbee      	blt.n	800102a <ReadDeviceAddressOffset+0x1e>
	}
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	371c      	adds	r7, #28
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4a07      	ldr	r2, [pc, #28]	; (8001088 <vApplicationGetIdleTaskMemory+0x2c>)
 800106c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	4a06      	ldr	r2, [pc, #24]	; (800108c <vApplicationGetIdleTaskMemory+0x30>)
 8001072:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000294 	.word	0x20000294
 800108c:	200002e8 	.word	0x200002e8

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b5b0      	push	{r4, r5, r7, lr}
 8001092:	b0c0      	sub	sp, #256	; 0x100
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	memset(&gps,0,sizeof(gps));
 8001096:	221b      	movs	r2, #27
 8001098:	2100      	movs	r1, #0
 800109a:	48a3      	ldr	r0, [pc, #652]	; (8001328 <main+0x298>)
 800109c:	f01d fbda 	bl	801e854 <memset>
		// ZDA-38;RMC-68



		 //включение ZDA
		 char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x0B, 0x6B};
 80010a0:	4ba2      	ldr	r3, [pc, #648]	; (800132c <main+0x29c>)
 80010a2:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 80010a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};
 80010ac:	4aa0      	ldr	r2, [pc, #640]	; (8001330 <main+0x2a0>)
 80010ae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80010b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b4:	c303      	stmia	r3!, {r0, r1}
 80010b6:	801a      	strh	r2, [r3, #0]
		 //отключение ZDA
		 //char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5B};
		 //char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};

		 //отключение остального
		 char MESGGA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x23};
 80010b8:	4b9e      	ldr	r3, [pc, #632]	; (8001334 <main+0x2a4>)
 80010ba:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 80010be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONGGA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x00, 0xF9, 0x11};
 80010c4:	4a9c      	ldr	r2, [pc, #624]	; (8001338 <main+0x2a8>)
 80010c6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80010ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80010cc:	c303      	stmia	r3!, {r0, r1}
 80010ce:	801a      	strh	r2, [r3, #0]

		 char MESGLL[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A};
 80010d0:	4b9a      	ldr	r3, [pc, #616]	; (800133c <main+0x2ac>)
 80010d2:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 80010d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONGLL[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x01, 0xFA, 0x12};
 80010dc:	4a98      	ldr	r2, [pc, #608]	; (8001340 <main+0x2b0>)
 80010de:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80010e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80010e4:	c303      	stmia	r3!, {r0, r1}
 80010e6:	801a      	strh	r2, [r3, #0]

		 char MESGSA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31};
 80010e8:	4b96      	ldr	r3, [pc, #600]	; (8001344 <main+0x2b4>)
 80010ea:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80010ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONGSA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x02, 0xFB, 0x13};
 80010f4:	4a94      	ldr	r2, [pc, #592]	; (8001348 <main+0x2b8>)
 80010f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80010fc:	c303      	stmia	r3!, {r0, r1}
 80010fe:	801a      	strh	r2, [r3, #0]

		 char MESGSV[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38};
 8001100:	4b92      	ldr	r3, [pc, #584]	; (800134c <main+0x2bc>)
 8001102:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8001106:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001108:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONGSV[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x03, 0xFC, 0x14};
 800110c:	4a90      	ldr	r2, [pc, #576]	; (8001350 <main+0x2c0>)
 800110e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001112:	ca07      	ldmia	r2, {r0, r1, r2}
 8001114:	c303      	stmia	r3!, {r0, r1}
 8001116:	801a      	strh	r2, [r3, #0]

		 char MESVTG[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x46};
 8001118:	4b8e      	ldr	r3, [pc, #568]	; (8001354 <main+0x2c4>)
 800111a:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800111e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001120:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONVTG[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x05, 0xFE, 0x16};
 8001124:	4a8c      	ldr	r2, [pc, #560]	; (8001358 <main+0x2c8>)
 8001126:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800112a:	ca07      	ldmia	r2, {r0, r1, r2}
 800112c:	c303      	stmia	r3!, {r0, r1}
 800112e:	801a      	strh	r2, [r3, #0]
		 //отключение RMC на всякий
		 //char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3F};
		 //char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};

		 //включение RMC
		 char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x07, 0x4F};
 8001130:	4b8a      	ldr	r3, [pc, #552]	; (800135c <main+0x2cc>)
 8001132:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001136:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001138:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};
 800113c:	4a88      	ldr	r2, [pc, #544]	; (8001360 <main+0x2d0>)
 800113e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001142:	ca07      	ldmia	r2, {r0, r1, r2}
 8001144:	c303      	stmia	r3!, {r0, r1}
 8001146:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001148:	f002 fb28 	bl	800379c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114c:	f000 f91a 	bl	8001384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001150:	f000 faca 	bl	80016e8 <MX_GPIO_Init>
  MX_RTC_Init();
 8001154:	f000 f998 	bl	8001488 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001158:	f000 fa72 	bl	8001640 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800115c:	f000 fa9a 	bl	8001694 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001160:	f000 fa22 	bl	80015a8 <MX_TIM2_Init>
  MX_SPI3_Init();
 8001164:	f000 f9ea 	bl	800153c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  //TIM1
    HAL_TIM_Base_Start_IT(&htim2);
 8001168:	487e      	ldr	r0, [pc, #504]	; (8001364 <main+0x2d4>)
 800116a:	f006 f9e7 	bl	800753c <HAL_TIM_Base_Start_IT>

    HAL_Delay(5000);
 800116e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001172:	f002 fb55 	bl	8003820 <HAL_Delay>

   //ON ZDA
    HAL_UART_Transmit(&huart1,(uint8_t*) MESZDA, 16, 1000);
 8001176:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	2210      	movs	r2, #16
 8001180:	4879      	ldr	r0, [pc, #484]	; (8001368 <main+0x2d8>)
 8001182:	f006 fe5a 	bl	8007e3a <HAL_UART_Transmit>
    HAL_Delay(100);
 8001186:	2064      	movs	r0, #100	; 0x64
 8001188:	f002 fb4a 	bl	8003820 <HAL_Delay>
    HAL_UART_Transmit(&huart1,(uint8_t*) CONZDA, 10, 1000);
 800118c:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8001190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001194:	220a      	movs	r2, #10
 8001196:	4874      	ldr	r0, [pc, #464]	; (8001368 <main+0x2d8>)
 8001198:	f006 fe4f 	bl	8007e3a <HAL_UART_Transmit>
    HAL_Delay(100);
 800119c:	2064      	movs	r0, #100	; 0x64
 800119e:	f002 fb3f 	bl	8003820 <HAL_Delay>

    // OFF protokol
    HAL_UART_Transmit(&huart1,(uint8_t*) MESGGA, 16, 1000);
 80011a2:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	2210      	movs	r2, #16
 80011ac:	486e      	ldr	r0, [pc, #440]	; (8001368 <main+0x2d8>)
 80011ae:	f006 fe44 	bl	8007e3a <HAL_UART_Transmit>
    HAL_Delay(100);
 80011b2:	2064      	movs	r0, #100	; 0x64
 80011b4:	f002 fb34 	bl	8003820 <HAL_Delay>
    HAL_UART_Transmit(&huart1,(uint8_t*) CONGGA, 10, 1000);
 80011b8:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80011bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c0:	220a      	movs	r2, #10
 80011c2:	4869      	ldr	r0, [pc, #420]	; (8001368 <main+0x2d8>)
 80011c4:	f006 fe39 	bl	8007e3a <HAL_UART_Transmit>
    HAL_Delay(100);
 80011c8:	2064      	movs	r0, #100	; 0x64
 80011ca:	f002 fb29 	bl	8003820 <HAL_Delay>

    HAL_UART_Transmit(&huart1,(uint8_t*) MESGLL, 16, 1000);
 80011ce:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	2210      	movs	r2, #16
 80011d8:	4863      	ldr	r0, [pc, #396]	; (8001368 <main+0x2d8>)
 80011da:	f006 fe2e 	bl	8007e3a <HAL_UART_Transmit>
    HAL_Delay(100);
 80011de:	2064      	movs	r0, #100	; 0x64
 80011e0:	f002 fb1e 	bl	8003820 <HAL_Delay>
    HAL_UART_Transmit(&huart1,(uint8_t*) CONGLL, 10, 1000);
 80011e4:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80011e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ec:	220a      	movs	r2, #10
 80011ee:	485e      	ldr	r0, [pc, #376]	; (8001368 <main+0x2d8>)
 80011f0:	f006 fe23 	bl	8007e3a <HAL_UART_Transmit>
    HAL_Delay(100);
 80011f4:	2064      	movs	r0, #100	; 0x64
 80011f6:	f002 fb13 	bl	8003820 <HAL_Delay>

    HAL_UART_Transmit(&huart1,(uint8_t*) MESGSA, 16, 1000);
 80011fa:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80011fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001202:	2210      	movs	r2, #16
 8001204:	4858      	ldr	r0, [pc, #352]	; (8001368 <main+0x2d8>)
 8001206:	f006 fe18 	bl	8007e3a <HAL_UART_Transmit>
    HAL_Delay(100);
 800120a:	2064      	movs	r0, #100	; 0x64
 800120c:	f002 fb08 	bl	8003820 <HAL_Delay>
    HAL_UART_Transmit(&huart1,(uint8_t*) CONGSA, 10, 1000);
 8001210:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001218:	220a      	movs	r2, #10
 800121a:	4853      	ldr	r0, [pc, #332]	; (8001368 <main+0x2d8>)
 800121c:	f006 fe0d 	bl	8007e3a <HAL_UART_Transmit>
    HAL_Delay(100);
 8001220:	2064      	movs	r0, #100	; 0x64
 8001222:	f002 fafd 	bl	8003820 <HAL_Delay>

    HAL_UART_Transmit(&huart1,(uint8_t*) MESGSV, 16, 1000);
 8001226:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800122a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122e:	2210      	movs	r2, #16
 8001230:	484d      	ldr	r0, [pc, #308]	; (8001368 <main+0x2d8>)
 8001232:	f006 fe02 	bl	8007e3a <HAL_UART_Transmit>
    HAL_Delay(100);
 8001236:	2064      	movs	r0, #100	; 0x64
 8001238:	f002 faf2 	bl	8003820 <HAL_Delay>
    HAL_UART_Transmit(&huart1,(uint8_t*) CONGSV, 10, 1000);
 800123c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001244:	220a      	movs	r2, #10
 8001246:	4848      	ldr	r0, [pc, #288]	; (8001368 <main+0x2d8>)
 8001248:	f006 fdf7 	bl	8007e3a <HAL_UART_Transmit>
    HAL_Delay(100);
 800124c:	2064      	movs	r0, #100	; 0x64
 800124e:	f002 fae7 	bl	8003820 <HAL_Delay>

    HAL_UART_Transmit(&huart1,(uint8_t*) MESVTG, 16, 1000);
 8001252:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	2210      	movs	r2, #16
 800125c:	4842      	ldr	r0, [pc, #264]	; (8001368 <main+0x2d8>)
 800125e:	f006 fdec 	bl	8007e3a <HAL_UART_Transmit>
    HAL_Delay(100);
 8001262:	2064      	movs	r0, #100	; 0x64
 8001264:	f002 fadc 	bl	8003820 <HAL_Delay>
    HAL_UART_Transmit(&huart1,(uint8_t*) CONVTG, 10, 1000);
 8001268:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800126c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001270:	220a      	movs	r2, #10
 8001272:	483d      	ldr	r0, [pc, #244]	; (8001368 <main+0x2d8>)
 8001274:	f006 fde1 	bl	8007e3a <HAL_UART_Transmit>
    HAL_Delay(100);
 8001278:	2064      	movs	r0, #100	; 0x64
 800127a:	f002 fad1 	bl	8003820 <HAL_Delay>

    //отключение и включение RMC на всякий
    HAL_UART_Transmit(&huart1,(uint8_t*) MESRMC, 16, 1000);
 800127e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001286:	2210      	movs	r2, #16
 8001288:	4837      	ldr	r0, [pc, #220]	; (8001368 <main+0x2d8>)
 800128a:	f006 fdd6 	bl	8007e3a <HAL_UART_Transmit>
    HAL_Delay(100);
 800128e:	2064      	movs	r0, #100	; 0x64
 8001290:	f002 fac6 	bl	8003820 <HAL_Delay>
    HAL_UART_Transmit(&huart1,(uint8_t*) CONRMC, 10, 1000);
 8001294:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001298:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129c:	220a      	movs	r2, #10
 800129e:	4832      	ldr	r0, [pc, #200]	; (8001368 <main+0x2d8>)
 80012a0:	f006 fdcb 	bl	8007e3a <HAL_UART_Transmit>
    HAL_Delay(100);
 80012a4:	2064      	movs	r0, #100	; 0x64
 80012a6:	f002 fabb 	bl	8003820 <HAL_Delay>

    //start the web server
    int offset =0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
   ReadDeviceAddressOffset((char*) &user_info, sizeof(user_info), offset);
 80012b0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80012b4:	f44f 7192 	mov.w	r1, #292	; 0x124
 80012b8:	482c      	ldr	r0, [pc, #176]	; (800136c <main+0x2dc>)
 80012ba:	f7ff fea7 	bl	800100c <ReadDeviceAddressOffset>
   offset+=sizeof(user_info);
 80012be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80012c2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80012c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
   //Обнуление PPS
   PPS_count=0;
 80012ca:	4b29      	ldr	r3, [pc, #164]	; (8001370 <main+0x2e0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
   gps.year[0]='V';
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <main+0x298>)
 80012d2:	2256      	movs	r2, #86	; 0x56
 80012d4:	719a      	strb	r2, [r3, #6]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80012d6:	4b27      	ldr	r3, [pc, #156]	; (8001374 <main+0x2e4>)
 80012d8:	f107 041c 	add.w	r4, r7, #28
 80012dc:	461d      	mov	r5, r3
 80012de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00b f9dd 	bl	800c6b0 <osThreadCreate>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4a1f      	ldr	r2, [pc, #124]	; (8001378 <main+0x2e8>)
 80012fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, tcpecho_thread, osPriorityIdle, 0, 128);
 80012fc:	463b      	mov	r3, r7
 80012fe:	4a1f      	ldr	r2, [pc, #124]	; (800137c <main+0x2ec>)
 8001300:	461c      	mov	r4, r3
 8001302:	4615      	mov	r5, r2
 8001304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001308:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800130c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001310:	463b      	mov	r3, r7
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f00b f9cb 	bl	800c6b0 <osThreadCreate>
 800131a:	4603      	mov	r3, r0
 800131c:	4a18      	ldr	r2, [pc, #96]	; (8001380 <main+0x2f0>)
 800131e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001320:	f00b f9af 	bl	800c682 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001324:	e7fe      	b.n	8001324 <main+0x294>
 8001326:	bf00      	nop
 8001328:	20004ae4 	.word	0x20004ae4
 800132c:	080221d0 	.word	0x080221d0
 8001330:	080221e0 	.word	0x080221e0
 8001334:	080221ec 	.word	0x080221ec
 8001338:	080221fc 	.word	0x080221fc
 800133c:	08022208 	.word	0x08022208
 8001340:	08022218 	.word	0x08022218
 8001344:	08022224 	.word	0x08022224
 8001348:	08022234 	.word	0x08022234
 800134c:	08022240 	.word	0x08022240
 8001350:	08022250 	.word	0x08022250
 8001354:	0802225c 	.word	0x0802225c
 8001358:	0802226c 	.word	0x0802226c
 800135c:	08022278 	.word	0x08022278
 8001360:	08022288 	.word	0x08022288
 8001364:	20004cf0 	.word	0x20004cf0
 8001368:	20004c80 	.word	0x20004c80
 800136c:	20004b00 	.word	0x20004b00
 8001370:	20000510 	.word	0x20000510
 8001374:	08022294 	.word	0x08022294
 8001378:	20004c24 	.word	0x20004c24
 800137c:	080222b0 	.word	0x080222b0
 8001380:	20004cc8 	.word	0x20004cc8

08001384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b098      	sub	sp, #96	; 0x60
 8001388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800138e:	2230      	movs	r2, #48	; 0x30
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f01d fa5e 	bl	801e854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	4b31      	ldr	r3, [pc, #196]	; (8001480 <SystemClock_Config+0xfc>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a30      	ldr	r2, [pc, #192]	; (8001480 <SystemClock_Config+0xfc>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <SystemClock_Config+0xfc>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <SystemClock_Config+0x100>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a2a      	ldr	r2, [pc, #168]	; (8001484 <SystemClock_Config+0x100>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b28      	ldr	r3, [pc, #160]	; (8001484 <SystemClock_Config+0x100>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80013ee:	2309      	movs	r3, #9
 80013f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013f8:	2301      	movs	r3, #1
 80013fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fc:	2302      	movs	r3, #2
 80013fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001400:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001404:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001406:	2304      	movs	r3, #4
 8001408:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800140a:	23a8      	movs	r3, #168	; 0xa8
 800140c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800140e:	2302      	movs	r3, #2
 8001410:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001412:	2307      	movs	r3, #7
 8001414:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001416:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800141a:	4618      	mov	r0, r3
 800141c:	f004 fefc 	bl	8006218 <HAL_RCC_OscConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001426:	f000 fff3 	bl	8002410 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800142a:	230f      	movs	r3, #15
 800142c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142e:	2302      	movs	r3, #2
 8001430:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001436:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800143c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	2105      	movs	r1, #5
 8001448:	4618      	mov	r0, r3
 800144a:	f005 f95d 	bl	8006708 <HAL_RCC_ClockConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001454:	f000 ffdc 	bl	8002410 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001458:	2302      	movs	r3, #2
 800145a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800145c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001460:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	4618      	mov	r0, r3
 8001468:	f005 fb7c 	bl	8006b64 <HAL_RCCEx_PeriphCLKConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001472:	f000 ffcd 	bl	8002410 <Error_Handler>
  }
}
 8001476:	bf00      	nop
 8001478:	3760      	adds	r7, #96	; 0x60
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800
 8001484:	40007000 	.word	0x40007000

08001488 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800149c:	2300      	movs	r3, #0
 800149e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <MX_RTC_Init+0xac>)
 80014a2:	4a25      	ldr	r2, [pc, #148]	; (8001538 <MX_RTC_Init+0xb0>)
 80014a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014a6:	4b23      	ldr	r3, [pc, #140]	; (8001534 <MX_RTC_Init+0xac>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80014ac:	4b21      	ldr	r3, [pc, #132]	; (8001534 <MX_RTC_Init+0xac>)
 80014ae:	227f      	movs	r2, #127	; 0x7f
 80014b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <MX_RTC_Init+0xac>)
 80014b4:	22ff      	movs	r2, #255	; 0xff
 80014b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <MX_RTC_Init+0xac>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014be:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <MX_RTC_Init+0xac>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014c4:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <MX_RTC_Init+0xac>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014ca:	481a      	ldr	r0, [pc, #104]	; (8001534 <MX_RTC_Init+0xac>)
 80014cc:	f005 fc2c 	bl	8006d28 <HAL_RTC_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80014d6:	f000 ff9b 	bl	8002410 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 23;
 80014da:	2317      	movs	r3, #23
 80014dc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 59;
 80014de:	233b      	movs	r3, #59	; 0x3b
 80014e0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2200      	movs	r2, #0
 80014f2:	4619      	mov	r1, r3
 80014f4:	480f      	ldr	r0, [pc, #60]	; (8001534 <MX_RTC_Init+0xac>)
 80014f6:	f005 fca8 	bl	8006e4a <HAL_RTC_SetTime>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001500:	f000 ff86 	bl	8002410 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8001504:	2307      	movs	r3, #7
 8001506:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8001508:	2312      	movs	r3, #18
 800150a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 31;
 800150c:	231f      	movs	r3, #31
 800150e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001514:	463b      	mov	r3, r7
 8001516:	2200      	movs	r2, #0
 8001518:	4619      	mov	r1, r3
 800151a:	4806      	ldr	r0, [pc, #24]	; (8001534 <MX_RTC_Init+0xac>)
 800151c:	f005 fdb0 	bl	8007080 <HAL_RTC_SetDate>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001526:	f000 ff73 	bl	8002410 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20004ccc 	.word	0x20004ccc
 8001538:	40002800 	.word	0x40002800

0800153c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <MX_SPI3_Init+0x64>)
 8001542:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <MX_SPI3_Init+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <MX_SPI3_Init+0x64>)
 8001548:	f44f 7282 	mov.w	r2, #260	; 0x104
 800154c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_SPI3_Init+0x64>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <MX_SPI3_Init+0x64>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_SPI3_Init+0x64>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_SPI3_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_SPI3_Init+0x64>)
 8001568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_SPI3_Init+0x64>)
 8001570:	2200      	movs	r2, #0
 8001572:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001574:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <MX_SPI3_Init+0x64>)
 8001576:	2200      	movs	r2, #0
 8001578:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_SPI3_Init+0x64>)
 800157c:	2200      	movs	r2, #0
 800157e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <MX_SPI3_Init+0x64>)
 8001582:	2200      	movs	r2, #0
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_SPI3_Init+0x64>)
 8001588:	220a      	movs	r2, #10
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800158c:	4804      	ldr	r0, [pc, #16]	; (80015a0 <MX_SPI3_Init+0x64>)
 800158e:	f005 fefd 	bl	800738c <HAL_SPI_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001598:	f000 ff3a 	bl	8002410 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20004c28 	.word	0x20004c28
 80015a4:	40003c00 	.word	0x40003c00

080015a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015bc:	463b      	mov	r3, r7
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <MX_TIM2_Init+0x94>)
 80015c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <MX_TIM2_Init+0x94>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <MX_TIM2_Init+0x94>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 45000;
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <MX_TIM2_Init+0x94>)
 80015da:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 80015de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e0:	4b16      	ldr	r3, [pc, #88]	; (800163c <MX_TIM2_Init+0x94>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <MX_TIM2_Init+0x94>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015ec:	4813      	ldr	r0, [pc, #76]	; (800163c <MX_TIM2_Init+0x94>)
 80015ee:	f005 ff56 	bl	800749e <HAL_TIM_Base_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015f8:	f000 ff0a 	bl	8002410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001600:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001602:	f107 0308 	add.w	r3, r7, #8
 8001606:	4619      	mov	r1, r3
 8001608:	480c      	ldr	r0, [pc, #48]	; (800163c <MX_TIM2_Init+0x94>)
 800160a:	f006 f90f 	bl	800782c <HAL_TIM_ConfigClockSource>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001614:	f000 fefc 	bl	8002410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001618:	2300      	movs	r3, #0
 800161a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001620:	463b      	mov	r3, r7
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_TIM2_Init+0x94>)
 8001626:	f006 fb2b 	bl	8007c80 <HAL_TIMEx_MasterConfigSynchronization>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001630:	f000 feee 	bl	8002410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20004cf0 	.word	0x20004cf0

08001640 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <MX_USART1_UART_Init+0x4c>)
 8001646:	4a12      	ldr	r2, [pc, #72]	; (8001690 <MX_USART1_UART_Init+0x50>)
 8001648:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800164a:	4b10      	ldr	r3, [pc, #64]	; (800168c <MX_USART1_UART_Init+0x4c>)
 800164c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001650:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <MX_USART1_UART_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <MX_USART1_UART_Init+0x4c>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <MX_USART1_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <MX_USART1_UART_Init+0x4c>)
 8001666:	220c      	movs	r2, #12
 8001668:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <MX_USART1_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <MX_USART1_UART_Init+0x4c>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_USART1_UART_Init+0x4c>)
 8001678:	f006 fb92 	bl	8007da0 <HAL_UART_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001682:	f000 fec5 	bl	8002410 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20004c80 	.word	0x20004c80
 8001690:	40011000 	.word	0x40011000

08001694 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <MX_USART2_UART_Init+0x4c>)
 800169a:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <MX_USART2_UART_Init+0x50>)
 800169c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <MX_USART2_UART_Init+0x4c>)
 80016a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <MX_USART2_UART_Init+0x4c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <MX_USART2_UART_Init+0x4c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <MX_USART2_UART_Init+0x4c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <MX_USART2_UART_Init+0x4c>)
 80016ba:	220c      	movs	r2, #12
 80016bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <MX_USART2_UART_Init+0x4c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <MX_USART2_UART_Init+0x4c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <MX_USART2_UART_Init+0x4c>)
 80016cc:	f006 fb68 	bl	8007da0 <HAL_UART_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016d6:	f000 fe9b 	bl	8002410 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20004d38 	.word	0x20004d38
 80016e4:	40004400 	.word	0x40004400

080016e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08c      	sub	sp, #48	; 0x30
 80016ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ee:	f107 031c 	add.w	r3, r7, #28
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
 8001702:	4b58      	ldr	r3, [pc, #352]	; (8001864 <MX_GPIO_Init+0x17c>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a57      	ldr	r2, [pc, #348]	; (8001864 <MX_GPIO_Init+0x17c>)
 8001708:	f043 0310 	orr.w	r3, r3, #16
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b55      	ldr	r3, [pc, #340]	; (8001864 <MX_GPIO_Init+0x17c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0310 	and.w	r3, r3, #16
 8001716:	61bb      	str	r3, [r7, #24]
 8001718:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	4b51      	ldr	r3, [pc, #324]	; (8001864 <MX_GPIO_Init+0x17c>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a50      	ldr	r2, [pc, #320]	; (8001864 <MX_GPIO_Init+0x17c>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b4e      	ldr	r3, [pc, #312]	; (8001864 <MX_GPIO_Init+0x17c>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b4a      	ldr	r3, [pc, #296]	; (8001864 <MX_GPIO_Init+0x17c>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a49      	ldr	r2, [pc, #292]	; (8001864 <MX_GPIO_Init+0x17c>)
 8001740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b47      	ldr	r3, [pc, #284]	; (8001864 <MX_GPIO_Init+0x17c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b43      	ldr	r3, [pc, #268]	; (8001864 <MX_GPIO_Init+0x17c>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a42      	ldr	r2, [pc, #264]	; (8001864 <MX_GPIO_Init+0x17c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b40      	ldr	r3, [pc, #256]	; (8001864 <MX_GPIO_Init+0x17c>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	4b3c      	ldr	r3, [pc, #240]	; (8001864 <MX_GPIO_Init+0x17c>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a3b      	ldr	r2, [pc, #236]	; (8001864 <MX_GPIO_Init+0x17c>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b39      	ldr	r3, [pc, #228]	; (8001864 <MX_GPIO_Init+0x17c>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	4b35      	ldr	r3, [pc, #212]	; (8001864 <MX_GPIO_Init+0x17c>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a34      	ldr	r2, [pc, #208]	; (8001864 <MX_GPIO_Init+0x17c>)
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b32      	ldr	r3, [pc, #200]	; (8001864 <MX_GPIO_Init+0x17c>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	21c0      	movs	r1, #192	; 0xc0
 80017aa:	482f      	ldr	r0, [pc, #188]	; (8001868 <MX_GPIO_Init+0x180>)
 80017ac:	f003 fb7e 	bl	8004eac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80017b0:	2318      	movs	r3, #24
 80017b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	4619      	mov	r1, r3
 80017c2:	482a      	ldr	r0, [pc, #168]	; (800186c <MX_GPIO_Init+0x184>)
 80017c4:	f003 f9d6 	bl	8004b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ce:	2300      	movs	r3, #0
 80017d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f107 031c 	add.w	r3, r7, #28
 80017da:	4619      	mov	r1, r3
 80017dc:	4824      	ldr	r0, [pc, #144]	; (8001870 <MX_GPIO_Init+0x188>)
 80017de:	f003 f9c9 	bl	8004b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PPS_Pin */
  GPIO_InitStruct.Pin = PPS_Pin;
 80017e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PPS_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 031c 	add.w	r3, r7, #28
 80017f6:	4619      	mov	r1, r3
 80017f8:	481e      	ldr	r0, [pc, #120]	; (8001874 <MX_GPIO_Init+0x18c>)
 80017fa:	f003 f9bb 	bl	8004b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017fe:	23c0      	movs	r3, #192	; 0xc0
 8001800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001802:	2301      	movs	r3, #1
 8001804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	4619      	mov	r1, r3
 8001814:	4814      	ldr	r0, [pc, #80]	; (8001868 <MX_GPIO_Init+0x180>)
 8001816:	f003 f9ad 	bl	8004b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800181a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800181e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 031c 	add.w	r3, r7, #28
 800182c:	4619      	mov	r1, r3
 800182e:	4812      	ldr	r0, [pc, #72]	; (8001878 <MX_GPIO_Init+0x190>)
 8001830:	f003 f9a0 	bl	8004b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001834:	2310      	movs	r3, #16
 8001836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	4619      	mov	r1, r3
 8001846:	480b      	ldr	r0, [pc, #44]	; (8001874 <MX_GPIO_Init+0x18c>)
 8001848:	f003 f994 	bl	8004b74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2105      	movs	r1, #5
 8001850:	2028      	movs	r0, #40	; 0x28
 8001852:	f002 f8c1 	bl	80039d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001856:	2028      	movs	r0, #40	; 0x28
 8001858:	f002 f8da 	bl	8003a10 <HAL_NVIC_EnableIRQ>

}
 800185c:	bf00      	nop
 800185e:	3730      	adds	r7, #48	; 0x30
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40023800 	.word	0x40023800
 8001868:	40020800 	.word	0x40020800
 800186c:	40021000 	.word	0x40021000
 8001870:	40020400 	.word	0x40020400
 8001874:	40020c00 	.word	0x40020c00
 8001878:	40020000 	.word	0x40020000

0800187c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	80fb      	strh	r3, [r7, #6]
	int PPS_Counter_period=0;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
	//int PPS_count=0;//вынес для проверки
	//int PPS_mass[10]={0};//вынес для проверки
	if(GPIO_Pin == PPS_Pin) {
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001890:	d13d      	bne.n	800190e <HAL_GPIO_EXTI_Callback+0x92>
		if(PPS_count>2&&PPS_count<12){
 8001892:	4b28      	ldr	r3, [pc, #160]	; (8001934 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b02      	cmp	r3, #2
 8001898:	dd0d      	ble.n	80018b6 <HAL_GPIO_EXTI_Callback+0x3a>
 800189a:	4b26      	ldr	r3, [pc, #152]	; (8001934 <HAL_GPIO_EXTI_Callback+0xb8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b0b      	cmp	r3, #11
 80018a0:	dc09      	bgt.n	80018b6 <HAL_GPIO_EXTI_Callback+0x3a>
		PPS_mass[PPS_count-2] = TIM2->CNT;
 80018a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018a8:	4b22      	ldr	r3, [pc, #136]	; (8001934 <HAL_GPIO_EXTI_Callback+0xb8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3b02      	subs	r3, #2
 80018ae:	4611      	mov	r1, r2
 80018b0:	4a21      	ldr	r2, [pc, #132]	; (8001938 <HAL_GPIO_EXTI_Callback+0xbc>)
 80018b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if(PPS_count==12){
 80018b6:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <HAL_GPIO_EXTI_Callback+0xb8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b0c      	cmp	r3, #12
 80018bc:	d127      	bne.n	800190e <HAL_GPIO_EXTI_Callback+0x92>
			//HAL_GPIO_TogglePin(Timled_GPIO_Port, Timled_Pin);
			PPS_Counter_period=(PPS_mass[0]+PPS_mass[1]+PPS_mass[2]+PPS_mass[3]+PPS_mass[4]+PPS_mass[5]+PPS_mass[6]+PPS_mass[7]+PPS_mass[8]+PPS_mass[9])/9;
 80018be:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <HAL_GPIO_EXTI_Callback+0xbc>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <HAL_GPIO_EXTI_Callback+0xbc>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	441a      	add	r2, r3
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <HAL_GPIO_EXTI_Callback+0xbc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	441a      	add	r2, r3
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_GPIO_EXTI_Callback+0xbc>)
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	441a      	add	r2, r3
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <HAL_GPIO_EXTI_Callback+0xbc>)
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	441a      	add	r2, r3
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_GPIO_EXTI_Callback+0xbc>)
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	441a      	add	r2, r3
 80018e0:	4b15      	ldr	r3, [pc, #84]	; (8001938 <HAL_GPIO_EXTI_Callback+0xbc>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	441a      	add	r2, r3
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_GPIO_EXTI_Callback+0xbc>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	441a      	add	r2, r3
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_GPIO_EXTI_Callback+0xbc>)
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	441a      	add	r2, r3
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_GPIO_EXTI_Callback+0xbc>)
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	4413      	add	r3, r2
 80018f8:	4a10      	ldr	r2, [pc, #64]	; (800193c <HAL_GPIO_EXTI_Callback+0xc0>)
 80018fa:	fb82 1203 	smull	r1, r2, r2, r3
 80018fe:	1052      	asrs	r2, r2, #1
 8001900:	17db      	asrs	r3, r3, #31
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	60fb      	str	r3, [r7, #12]
			TIM2->ARR=PPS_Counter_period;
 8001906:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	if(PPS_count<13){
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b0c      	cmp	r3, #12
 8001914:	dc08      	bgt.n	8001928 <HAL_GPIO_EXTI_Callback+0xac>
		PPS_count=PPS_count+1;
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	3301      	adds	r3, #1
 800191c:	4a05      	ldr	r2, [pc, #20]	; (8001934 <HAL_GPIO_EXTI_Callback+0xb8>)
 800191e:	6013      	str	r3, [r2, #0]
		TIM2->CNT = 0;//обнуление счетчика
 8001920:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001924:	2200      	movs	r2, #0
 8001926:	625a      	str	r2, [r3, #36]	; 0x24
		}


		}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	20000510 	.word	0x20000510
 8001938:	20000514 	.word	0x20000514
 800193c:	38e38e39 	.word	0x38e38e39

08001940 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
	if(huart == &huart1) {
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a62      	ldr	r2, [pc, #392]	; (8001ae8 <HAL_UART_RxCpltCallback+0x1a8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	f040 82b3 	bne.w	8001ecc <HAL_UART_RxCpltCallback+0x58c>
		//$ message start
		if(buff[0]=='$'){
 8001966:	4b61      	ldr	r3, [pc, #388]	; (8001aec <HAL_UART_RxCpltCallback+0x1ac>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b24      	cmp	r3, #36	; 0x24
 800196c:	d106      	bne.n	800197c <HAL_UART_RxCpltCallback+0x3c>
			count=0;
 800196e:	4b60      	ldr	r3, [pc, #384]	; (8001af0 <HAL_UART_RxCpltCallback+0x1b0>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
			zpt=0;
 8001974:	4b5f      	ldr	r3, [pc, #380]	; (8001af4 <HAL_UART_RxCpltCallback+0x1b4>)
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	e00f      	b.n	800199c <HAL_UART_RxCpltCallback+0x5c>
		}
		//Message error
		else if (count==1&&buff[0]!='G'){
 800197c:	4b5c      	ldr	r3, [pc, #368]	; (8001af0 <HAL_UART_RxCpltCallback+0x1b0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d10b      	bne.n	800199c <HAL_UART_RxCpltCallback+0x5c>
 8001984:	4b59      	ldr	r3, [pc, #356]	; (8001aec <HAL_UART_RxCpltCallback+0x1ac>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b47      	cmp	r3, #71	; 0x47
 800198a:	d007      	beq.n	800199c <HAL_UART_RxCpltCallback+0x5c>
			count=0;
 800198c:	4b58      	ldr	r3, [pc, #352]	; (8001af0 <HAL_UART_RxCpltCallback+0x1b0>)
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
			ERRORS++;
 8001992:	4b59      	ldr	r3, [pc, #356]	; (8001af8 <HAL_UART_RxCpltCallback+0x1b8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	3301      	adds	r3, #1
 8001998:	4a57      	ldr	r2, [pc, #348]	; (8001af8 <HAL_UART_RxCpltCallback+0x1b8>)
 800199a:	6013      	str	r3, [r2, #0]
		}


		//CRC calculation
		int res = calc_crc(buff[0],count);
 800199c:	4b53      	ldr	r3, [pc, #332]	; (8001aec <HAL_UART_RxCpltCallback+0x1ac>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4a53      	ldr	r2, [pc, #332]	; (8001af0 <HAL_UART_RxCpltCallback+0x1b0>)
 80019a2:	6812      	ldr	r2, [r2, #0]
 80019a4:	4611      	mov	r1, r2
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 fb4c 	bl	8002044 <calc_crc>
 80019ac:	4603      	mov	r3, r0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
		if(res==1){
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d13e      	bne.n	8001a34 <HAL_UART_RxCpltCallback+0xf4>
			//printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
			//RTC READ
			rtc_read();
 80019b6:	f000 fba1 	bl	80020fc <rtc_read>
			//printf("rtc_read=%llu\t",rtc_read());
			//comparison RTC&CRC
			//Time_calc.tm_wday = 1;//atoi(gps.);
			Time_calc.tm_mon = atoi(gps.month)-1;//-1 do January==0 month
 80019ba:	4850      	ldr	r0, [pc, #320]	; (8001afc <HAL_UART_RxCpltCallback+0x1bc>)
 80019bc:	f01c fdf6 	bl	801e5ac <atoi>
 80019c0:	4603      	mov	r3, r0
 80019c2:	3b01      	subs	r3, #1
 80019c4:	4a4e      	ldr	r2, [pc, #312]	; (8001b00 <HAL_UART_RxCpltCallback+0x1c0>)
 80019c6:	6113      	str	r3, [r2, #16]
			Time_calc.tm_mday = atoi(gps.day);
 80019c8:	484e      	ldr	r0, [pc, #312]	; (8001b04 <HAL_UART_RxCpltCallback+0x1c4>)
 80019ca:	f01c fdef 	bl	801e5ac <atoi>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4a4b      	ldr	r2, [pc, #300]	; (8001b00 <HAL_UART_RxCpltCallback+0x1c0>)
 80019d2:	60d3      	str	r3, [r2, #12]
			if(year_str[0]=='0'&&year_str[1]=='0'){
 80019d4:	4b4c      	ldr	r3, [pc, #304]	; (8001b08 <HAL_UART_RxCpltCallback+0x1c8>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b30      	cmp	r3, #48	; 0x30
 80019da:	d108      	bne.n	80019ee <HAL_UART_RxCpltCallback+0xae>
 80019dc:	4b4a      	ldr	r3, [pc, #296]	; (8001b08 <HAL_UART_RxCpltCallback+0x1c8>)
 80019de:	785b      	ldrb	r3, [r3, #1]
 80019e0:	2b30      	cmp	r3, #48	; 0x30
 80019e2:	d104      	bne.n	80019ee <HAL_UART_RxCpltCallback+0xae>
				century=century+100;//atoi(gps.year)
 80019e4:	4b49      	ldr	r3, [pc, #292]	; (8001b0c <HAL_UART_RxCpltCallback+0x1cc>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3364      	adds	r3, #100	; 0x64
 80019ea:	4a48      	ldr	r2, [pc, #288]	; (8001b0c <HAL_UART_RxCpltCallback+0x1cc>)
 80019ec:	6013      	str	r3, [r2, #0]
			}
			Time_calc.tm_year = atoi(year_str) + century;
 80019ee:	4846      	ldr	r0, [pc, #280]	; (8001b08 <HAL_UART_RxCpltCallback+0x1c8>)
 80019f0:	f01c fddc 	bl	801e5ac <atoi>
 80019f4:	4602      	mov	r2, r0
 80019f6:	4b45      	ldr	r3, [pc, #276]	; (8001b0c <HAL_UART_RxCpltCallback+0x1cc>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	4a40      	ldr	r2, [pc, #256]	; (8001b00 <HAL_UART_RxCpltCallback+0x1c0>)
 80019fe:	6153      	str	r3, [r2, #20]
			Time_calc.tm_hour = atoi(gps.hours);
 8001a00:	4843      	ldr	r0, [pc, #268]	; (8001b10 <HAL_UART_RxCpltCallback+0x1d0>)
 8001a02:	f01c fdd3 	bl	801e5ac <atoi>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4a3d      	ldr	r2, [pc, #244]	; (8001b00 <HAL_UART_RxCpltCallback+0x1c0>)
 8001a0a:	6093      	str	r3, [r2, #8]
			Time_calc.tm_min = atoi(gps.minuttes);
 8001a0c:	4841      	ldr	r0, [pc, #260]	; (8001b14 <HAL_UART_RxCpltCallback+0x1d4>)
 8001a0e:	f01c fdcd 	bl	801e5ac <atoi>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4a3a      	ldr	r2, [pc, #232]	; (8001b00 <HAL_UART_RxCpltCallback+0x1c0>)
 8001a16:	6053      	str	r3, [r2, #4]
			Time_calc.tm_sec = atoi(gps.seconds);
 8001a18:	483f      	ldr	r0, [pc, #252]	; (8001b18 <HAL_UART_RxCpltCallback+0x1d8>)
 8001a1a:	f01c fdc7 	bl	801e5ac <atoi>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4a37      	ldr	r2, [pc, #220]	; (8001b00 <HAL_UART_RxCpltCallback+0x1c0>)
 8001a22:	6013      	str	r3, [r2, #0]
			gps_unix = mktime(&Time_calc);
 8001a24:	4836      	ldr	r0, [pc, #216]	; (8001b00 <HAL_UART_RxCpltCallback+0x1c0>)
 8001a26:	f01c fff5 	bl	801ea14 <mktime>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	493b      	ldr	r1, [pc, #236]	; (8001b1c <HAL_UART_RxCpltCallback+0x1dc>)
 8001a30:	e9c1 2300 	strd	r2, r3, [r1]
			//printf("tm_year=%d\t tm_mon=%d\t tm_mday=%d\t tm_hour=%d\t tm_min=%d\t tm_sec=%d\n",Time_calc.tm_year,Time_calc.tm_mon,Time_calc.tm_mday,Time_calc.tm_hour,Time_calc.tm_min,Time_calc.tm_sec);
			//printf("rtc_read=%llu\t Time_calc=%llu\n",rtc_read(),gps_unix);

		}
		if(res==1&&gps_unix!=rtc_read()){
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d14a      	bne.n	8001ad0 <HAL_UART_RxCpltCallback+0x190>
 8001a3a:	f000 fb5f 	bl	80020fc <rtc_read>
 8001a3e:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <HAL_UART_RxCpltCallback+0x1dc>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	4299      	cmp	r1, r3
 8001a46:	bf08      	it	eq
 8001a48:	4290      	cmpeq	r0, r2
 8001a4a:	d041      	beq.n	8001ad0 <HAL_UART_RxCpltCallback+0x190>

			time_ref_s=htonl(gps_unix- DIFF_SEC_1970_2036);
 8001a4c:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <HAL_UART_RxCpltCallback+0x1dc>)
 8001a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a52:	4b33      	ldr	r3, [pc, #204]	; (8001b20 <HAL_UART_RxCpltCallback+0x1e0>)
 8001a54:	4413      	add	r3, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f010 fd73 	bl	8012542 <lwip_htonl>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4a31      	ldr	r2, [pc, #196]	; (8001b24 <HAL_UART_RxCpltCallback+0x1e4>)
 8001a60:	6013      	str	r3, [r2, #0]
			sTime.Hours = Time_calc.tm_hour;
 8001a62:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <HAL_UART_RxCpltCallback+0x1c0>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	743b      	strb	r3, [r7, #16]
			sTime.Minutes = Time_calc.tm_min;
 8001a6a:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <HAL_UART_RxCpltCallback+0x1c0>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	747b      	strb	r3, [r7, #17]
			sTime.Seconds = Time_calc.tm_sec;
 8001a72:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <HAL_UART_RxCpltCallback+0x1c0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	74bb      	strb	r3, [r7, #18]
			sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]




			if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001a7e:	f107 0310 	add.w	r3, r7, #16
 8001a82:	2200      	movs	r2, #0
 8001a84:	4619      	mov	r1, r3
 8001a86:	4828      	ldr	r0, [pc, #160]	; (8001b28 <HAL_UART_RxCpltCallback+0x1e8>)
 8001a88:	f005 f9df 	bl	8006e4a <HAL_RTC_SetTime>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_UART_RxCpltCallback+0x156>
			{
				Error_Handler();
 8001a92:	f000 fcbd 	bl	8002410 <Error_Handler>
			}
			sDate.Month = Time_calc.tm_mon;
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HAL_UART_RxCpltCallback+0x1c0>)
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	737b      	strb	r3, [r7, #13]
			sDate.Date = Time_calc.tm_mday;
 8001a9e:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_UART_RxCpltCallback+0x1c0>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	73bb      	strb	r3, [r7, #14]
			sDate.Year = Time_calc.tm_year-century;
 8001aa6:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <HAL_UART_RxCpltCallback+0x1c0>)
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <HAL_UART_RxCpltCallback+0x1cc>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	73fb      	strb	r3, [r7, #15]
			if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	2200      	movs	r2, #0
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4819      	ldr	r0, [pc, #100]	; (8001b28 <HAL_UART_RxCpltCallback+0x1e8>)
 8001ac2:	f005 fadd 	bl	8007080 <HAL_RTC_SetDate>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_UART_RxCpltCallback+0x190>
			{
				Error_Handler();
 8001acc:	f000 fca0 	bl	8002410 <Error_Handler>
			}


		}
		//ZDA OR RMC
				if (count==3&&buff[0]=='Z'){
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <HAL_UART_RxCpltCallback+0x1b0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d12b      	bne.n	8001b30 <HAL_UART_RxCpltCallback+0x1f0>
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <HAL_UART_RxCpltCallback+0x1ac>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b5a      	cmp	r3, #90	; 0x5a
 8001ade:	d127      	bne.n	8001b30 <HAL_UART_RxCpltCallback+0x1f0>
					Tipe_Mes=1;
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_UART_RxCpltCallback+0x1ec>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	e02e      	b.n	8001b46 <HAL_UART_RxCpltCallback+0x206>
 8001ae8:	20004c80 	.word	0x20004c80
 8001aec:	20000550 	.word	0x20000550
 8001af0:	2000050c 	.word	0x2000050c
 8001af4:	200004f8 	.word	0x200004f8
 8001af8:	200004e8 	.word	0x200004e8
 8001afc:	20004ae7 	.word	0x20004ae7
 8001b00:	20004d80 	.word	0x20004d80
 8001b04:	20004ae4 	.word	0x20004ae4
 8001b08:	20000554 	.word	0x20000554
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	20004aef 	.word	0x20004aef
 8001b14:	20004af2 	.word	0x20004af2
 8001b18:	20004af5 	.word	0x20004af5
 8001b1c:	200004f0 	.word	0x200004f0
 8001b20:	83aa7e80 	.word	0x83aa7e80
 8001b24:	20004d7c 	.word	0x20004d7c
 8001b28:	20004ccc 	.word	0x20004ccc
 8001b2c:	200004ec 	.word	0x200004ec
				}
				else if(count==3&&buff[0]=='R'){
 8001b30:	4b91      	ldr	r3, [pc, #580]	; (8001d78 <HAL_UART_RxCpltCallback+0x438>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d106      	bne.n	8001b46 <HAL_UART_RxCpltCallback+0x206>
 8001b38:	4b90      	ldr	r3, [pc, #576]	; (8001d7c <HAL_UART_RxCpltCallback+0x43c>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b52      	cmp	r3, #82	; 0x52
 8001b3e:	d102      	bne.n	8001b46 <HAL_UART_RxCpltCallback+0x206>
					Tipe_Mes=2;
 8001b40:	4b8f      	ldr	r3, [pc, #572]	; (8001d80 <HAL_UART_RxCpltCallback+0x440>)
 8001b42:	2202      	movs	r2, #2
 8001b44:	601a      	str	r2, [r3, #0]
				}
				//If ZDA
				if(Tipe_Mes==1){
 8001b46:	4b8e      	ldr	r3, [pc, #568]	; (8001d80 <HAL_UART_RxCpltCallback+0x440>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	f040 80d4 	bne.w	8001cf8 <HAL_UART_RxCpltCallback+0x3b8>

					if(count==6&&buff[0]!=','){
 8001b50:	4b89      	ldr	r3, [pc, #548]	; (8001d78 <HAL_UART_RxCpltCallback+0x438>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b06      	cmp	r3, #6
 8001b56:	d10b      	bne.n	8001b70 <HAL_UART_RxCpltCallback+0x230>
 8001b58:	4b88      	ldr	r3, [pc, #544]	; (8001d7c <HAL_UART_RxCpltCallback+0x43c>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b2c      	cmp	r3, #44	; 0x2c
 8001b5e:	d007      	beq.n	8001b70 <HAL_UART_RxCpltCallback+0x230>
						count=0;
 8001b60:	4b85      	ldr	r3, [pc, #532]	; (8001d78 <HAL_UART_RxCpltCallback+0x438>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
						ERRORS++;
 8001b66:	4b87      	ldr	r3, [pc, #540]	; (8001d84 <HAL_UART_RxCpltCallback+0x444>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	4a85      	ldr	r2, [pc, #532]	; (8001d84 <HAL_UART_RxCpltCallback+0x444>)
 8001b6e:	6013      	str	r3, [r2, #0]
					}
					if(buff[0]==','){
 8001b70:	4b82      	ldr	r3, [pc, #520]	; (8001d7c <HAL_UART_RxCpltCallback+0x43c>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b2c      	cmp	r3, #44	; 0x2c
 8001b76:	d107      	bne.n	8001b88 <HAL_UART_RxCpltCallback+0x248>
						zpt++;
 8001b78:	4b83      	ldr	r3, [pc, #524]	; (8001d88 <HAL_UART_RxCpltCallback+0x448>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	4a82      	ldr	r2, [pc, #520]	; (8001d88 <HAL_UART_RxCpltCallback+0x448>)
 8001b80:	6013      	str	r3, [r2, #0]
						ind=0;
 8001b82:	4b82      	ldr	r3, [pc, #520]	; (8001d8c <HAL_UART_RxCpltCallback+0x44c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
					}
					if(zpt==1&&buff[0]!=','){
 8001b88:	4b7f      	ldr	r3, [pc, #508]	; (8001d88 <HAL_UART_RxCpltCallback+0x448>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d10e      	bne.n	8001bae <HAL_UART_RxCpltCallback+0x26e>
 8001b90:	4b7a      	ldr	r3, [pc, #488]	; (8001d7c <HAL_UART_RxCpltCallback+0x43c>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b2c      	cmp	r3, #44	; 0x2c
 8001b96:	d00a      	beq.n	8001bae <HAL_UART_RxCpltCallback+0x26e>
						time_buff[ind]=buff[0];
 8001b98:	4b7c      	ldr	r3, [pc, #496]	; (8001d8c <HAL_UART_RxCpltCallback+0x44c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a77      	ldr	r2, [pc, #476]	; (8001d7c <HAL_UART_RxCpltCallback+0x43c>)
 8001b9e:	7811      	ldrb	r1, [r2, #0]
 8001ba0:	4a7b      	ldr	r2, [pc, #492]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001ba2:	54d1      	strb	r1, [r2, r3]
						ind++;
 8001ba4:	4b79      	ldr	r3, [pc, #484]	; (8001d8c <HAL_UART_RxCpltCallback+0x44c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	4a78      	ldr	r2, [pc, #480]	; (8001d8c <HAL_UART_RxCpltCallback+0x44c>)
 8001bac:	6013      	str	r3, [r2, #0]
					}
					if(zpt==2&&buff[0]==','){
 8001bae:	4b76      	ldr	r3, [pc, #472]	; (8001d88 <HAL_UART_RxCpltCallback+0x448>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d127      	bne.n	8001c06 <HAL_UART_RxCpltCallback+0x2c6>
 8001bb6:	4b71      	ldr	r3, [pc, #452]	; (8001d7c <HAL_UART_RxCpltCallback+0x43c>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b2c      	cmp	r3, #44	; 0x2c
 8001bbc:	d123      	bne.n	8001c06 <HAL_UART_RxCpltCallback+0x2c6>
						gps.hours[0]=time_buff[0];
 8001bbe:	4b74      	ldr	r3, [pc, #464]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	4b74      	ldr	r3, [pc, #464]	; (8001d94 <HAL_UART_RxCpltCallback+0x454>)
 8001bc4:	72da      	strb	r2, [r3, #11]
						gps.hours[1]=time_buff[1];
 8001bc6:	4b72      	ldr	r3, [pc, #456]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001bc8:	785a      	ldrb	r2, [r3, #1]
 8001bca:	4b72      	ldr	r3, [pc, #456]	; (8001d94 <HAL_UART_RxCpltCallback+0x454>)
 8001bcc:	731a      	strb	r2, [r3, #12]
						gps.minuttes[0]=time_buff[2];
 8001bce:	4b70      	ldr	r3, [pc, #448]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001bd0:	789a      	ldrb	r2, [r3, #2]
 8001bd2:	4b70      	ldr	r3, [pc, #448]	; (8001d94 <HAL_UART_RxCpltCallback+0x454>)
 8001bd4:	739a      	strb	r2, [r3, #14]
						gps.minuttes[1]=time_buff[3];
 8001bd6:	4b6e      	ldr	r3, [pc, #440]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001bd8:	78da      	ldrb	r2, [r3, #3]
 8001bda:	4b6e      	ldr	r3, [pc, #440]	; (8001d94 <HAL_UART_RxCpltCallback+0x454>)
 8001bdc:	73da      	strb	r2, [r3, #15]
						gps.seconds[0]=time_buff[4];
 8001bde:	4b6c      	ldr	r3, [pc, #432]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001be0:	791a      	ldrb	r2, [r3, #4]
 8001be2:	4b6c      	ldr	r3, [pc, #432]	; (8001d94 <HAL_UART_RxCpltCallback+0x454>)
 8001be4:	745a      	strb	r2, [r3, #17]
						gps.seconds[1]=time_buff[5];
 8001be6:	4b6a      	ldr	r3, [pc, #424]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001be8:	795a      	ldrb	r2, [r3, #5]
 8001bea:	4b6a      	ldr	r3, [pc, #424]	; (8001d94 <HAL_UART_RxCpltCallback+0x454>)
 8001bec:	749a      	strb	r2, [r3, #18]
						gps.seconds[2]=time_buff[6];
 8001bee:	4b68      	ldr	r3, [pc, #416]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001bf0:	799a      	ldrb	r2, [r3, #6]
 8001bf2:	4b68      	ldr	r3, [pc, #416]	; (8001d94 <HAL_UART_RxCpltCallback+0x454>)
 8001bf4:	74da      	strb	r2, [r3, #19]
						gps.seconds[3]=time_buff[7];
 8001bf6:	4b66      	ldr	r3, [pc, #408]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001bf8:	79da      	ldrb	r2, [r3, #7]
 8001bfa:	4b66      	ldr	r3, [pc, #408]	; (8001d94 <HAL_UART_RxCpltCallback+0x454>)
 8001bfc:	751a      	strb	r2, [r3, #20]
						gps.seconds[4]=time_buff[8];
 8001bfe:	4b64      	ldr	r3, [pc, #400]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001c00:	7a1a      	ldrb	r2, [r3, #8]
 8001c02:	4b64      	ldr	r3, [pc, #400]	; (8001d94 <HAL_UART_RxCpltCallback+0x454>)
 8001c04:	755a      	strb	r2, [r3, #21]
					}
					if(zpt==2&&buff[0]!=','){
 8001c06:	4b60      	ldr	r3, [pc, #384]	; (8001d88 <HAL_UART_RxCpltCallback+0x448>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d10e      	bne.n	8001c2c <HAL_UART_RxCpltCallback+0x2ec>
 8001c0e:	4b5b      	ldr	r3, [pc, #364]	; (8001d7c <HAL_UART_RxCpltCallback+0x43c>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b2c      	cmp	r3, #44	; 0x2c
 8001c14:	d00a      	beq.n	8001c2c <HAL_UART_RxCpltCallback+0x2ec>

						time_buff[ind]=buff[0];
 8001c16:	4b5d      	ldr	r3, [pc, #372]	; (8001d8c <HAL_UART_RxCpltCallback+0x44c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a58      	ldr	r2, [pc, #352]	; (8001d7c <HAL_UART_RxCpltCallback+0x43c>)
 8001c1c:	7811      	ldrb	r1, [r2, #0]
 8001c1e:	4a5c      	ldr	r2, [pc, #368]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001c20:	54d1      	strb	r1, [r2, r3]
						ind++;
 8001c22:	4b5a      	ldr	r3, [pc, #360]	; (8001d8c <HAL_UART_RxCpltCallback+0x44c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	3301      	adds	r3, #1
 8001c28:	4a58      	ldr	r2, [pc, #352]	; (8001d8c <HAL_UART_RxCpltCallback+0x44c>)
 8001c2a:	6013      	str	r3, [r2, #0]
					}
					if(zpt==3&&buff[0]==','){
 8001c2c:	4b56      	ldr	r3, [pc, #344]	; (8001d88 <HAL_UART_RxCpltCallback+0x448>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d10b      	bne.n	8001c4c <HAL_UART_RxCpltCallback+0x30c>
 8001c34:	4b51      	ldr	r3, [pc, #324]	; (8001d7c <HAL_UART_RxCpltCallback+0x43c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b2c      	cmp	r3, #44	; 0x2c
 8001c3a:	d107      	bne.n	8001c4c <HAL_UART_RxCpltCallback+0x30c>
						gps.day[0]=time_buff[0];
 8001c3c:	4b54      	ldr	r3, [pc, #336]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001c3e:	781a      	ldrb	r2, [r3, #0]
 8001c40:	4b54      	ldr	r3, [pc, #336]	; (8001d94 <HAL_UART_RxCpltCallback+0x454>)
 8001c42:	701a      	strb	r2, [r3, #0]
						gps.day[1]=time_buff[1];
 8001c44:	4b52      	ldr	r3, [pc, #328]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001c46:	785a      	ldrb	r2, [r3, #1]
 8001c48:	4b52      	ldr	r3, [pc, #328]	; (8001d94 <HAL_UART_RxCpltCallback+0x454>)
 8001c4a:	705a      	strb	r2, [r3, #1]
					}
					if(zpt==3&&buff[0]!=','){
 8001c4c:	4b4e      	ldr	r3, [pc, #312]	; (8001d88 <HAL_UART_RxCpltCallback+0x448>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d10e      	bne.n	8001c72 <HAL_UART_RxCpltCallback+0x332>
 8001c54:	4b49      	ldr	r3, [pc, #292]	; (8001d7c <HAL_UART_RxCpltCallback+0x43c>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b2c      	cmp	r3, #44	; 0x2c
 8001c5a:	d00a      	beq.n	8001c72 <HAL_UART_RxCpltCallback+0x332>

						time_buff[ind]=buff[0];
 8001c5c:	4b4b      	ldr	r3, [pc, #300]	; (8001d8c <HAL_UART_RxCpltCallback+0x44c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a46      	ldr	r2, [pc, #280]	; (8001d7c <HAL_UART_RxCpltCallback+0x43c>)
 8001c62:	7811      	ldrb	r1, [r2, #0]
 8001c64:	4a4a      	ldr	r2, [pc, #296]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001c66:	54d1      	strb	r1, [r2, r3]
						ind++;
 8001c68:	4b48      	ldr	r3, [pc, #288]	; (8001d8c <HAL_UART_RxCpltCallback+0x44c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	4a47      	ldr	r2, [pc, #284]	; (8001d8c <HAL_UART_RxCpltCallback+0x44c>)
 8001c70:	6013      	str	r3, [r2, #0]
					}
					if(zpt==4&&buff[0]==','){
 8001c72:	4b45      	ldr	r3, [pc, #276]	; (8001d88 <HAL_UART_RxCpltCallback+0x448>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d10b      	bne.n	8001c92 <HAL_UART_RxCpltCallback+0x352>
 8001c7a:	4b40      	ldr	r3, [pc, #256]	; (8001d7c <HAL_UART_RxCpltCallback+0x43c>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b2c      	cmp	r3, #44	; 0x2c
 8001c80:	d107      	bne.n	8001c92 <HAL_UART_RxCpltCallback+0x352>
						gps.month[0]=time_buff[0];
 8001c82:	4b43      	ldr	r3, [pc, #268]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001c84:	781a      	ldrb	r2, [r3, #0]
 8001c86:	4b43      	ldr	r3, [pc, #268]	; (8001d94 <HAL_UART_RxCpltCallback+0x454>)
 8001c88:	70da      	strb	r2, [r3, #3]
						gps.month[1]=time_buff[1];
 8001c8a:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001c8c:	785a      	ldrb	r2, [r3, #1]
 8001c8e:	4b41      	ldr	r3, [pc, #260]	; (8001d94 <HAL_UART_RxCpltCallback+0x454>)
 8001c90:	711a      	strb	r2, [r3, #4]
					}
					if(zpt==4&&buff[0]!=','){
 8001c92:	4b3d      	ldr	r3, [pc, #244]	; (8001d88 <HAL_UART_RxCpltCallback+0x448>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d10e      	bne.n	8001cb8 <HAL_UART_RxCpltCallback+0x378>
 8001c9a:	4b38      	ldr	r3, [pc, #224]	; (8001d7c <HAL_UART_RxCpltCallback+0x43c>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b2c      	cmp	r3, #44	; 0x2c
 8001ca0:	d00a      	beq.n	8001cb8 <HAL_UART_RxCpltCallback+0x378>

						time_buff[ind]=buff[0];
 8001ca2:	4b3a      	ldr	r3, [pc, #232]	; (8001d8c <HAL_UART_RxCpltCallback+0x44c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a35      	ldr	r2, [pc, #212]	; (8001d7c <HAL_UART_RxCpltCallback+0x43c>)
 8001ca8:	7811      	ldrb	r1, [r2, #0]
 8001caa:	4a39      	ldr	r2, [pc, #228]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001cac:	54d1      	strb	r1, [r2, r3]
						ind++;
 8001cae:	4b37      	ldr	r3, [pc, #220]	; (8001d8c <HAL_UART_RxCpltCallback+0x44c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	4a35      	ldr	r2, [pc, #212]	; (8001d8c <HAL_UART_RxCpltCallback+0x44c>)
 8001cb6:	6013      	str	r3, [r2, #0]
					}
					if(zpt==5&&buff[0]==','){
 8001cb8:	4b33      	ldr	r3, [pc, #204]	; (8001d88 <HAL_UART_RxCpltCallback+0x448>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d11b      	bne.n	8001cf8 <HAL_UART_RxCpltCallback+0x3b8>
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <HAL_UART_RxCpltCallback+0x43c>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b2c      	cmp	r3, #44	; 0x2c
 8001cc6:	d117      	bne.n	8001cf8 <HAL_UART_RxCpltCallback+0x3b8>
						gps.year[0]=time_buff[0];
 8001cc8:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001cca:	781a      	ldrb	r2, [r3, #0]
 8001ccc:	4b31      	ldr	r3, [pc, #196]	; (8001d94 <HAL_UART_RxCpltCallback+0x454>)
 8001cce:	719a      	strb	r2, [r3, #6]
						gps.year[1]=time_buff[1];
 8001cd0:	4b2f      	ldr	r3, [pc, #188]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001cd2:	785a      	ldrb	r2, [r3, #1]
 8001cd4:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <HAL_UART_RxCpltCallback+0x454>)
 8001cd6:	71da      	strb	r2, [r3, #7]
						gps.year[2]=time_buff[2];
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001cda:	789a      	ldrb	r2, [r3, #2]
 8001cdc:	4b2d      	ldr	r3, [pc, #180]	; (8001d94 <HAL_UART_RxCpltCallback+0x454>)
 8001cde:	721a      	strb	r2, [r3, #8]
						gps.year[3]=time_buff[3];
 8001ce0:	4b2b      	ldr	r3, [pc, #172]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001ce2:	78da      	ldrb	r2, [r3, #3]
 8001ce4:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <HAL_UART_RxCpltCallback+0x454>)
 8001ce6:	725a      	strb	r2, [r3, #9]
						year_str[0]=time_buff[2];
 8001ce8:	4b29      	ldr	r3, [pc, #164]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001cea:	789a      	ldrb	r2, [r3, #2]
 8001cec:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <HAL_UART_RxCpltCallback+0x458>)
 8001cee:	701a      	strb	r2, [r3, #0]
						year_str[1]=time_buff[3];
 8001cf0:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001cf2:	78da      	ldrb	r2, [r3, #3]
 8001cf4:	4b28      	ldr	r3, [pc, #160]	; (8001d98 <HAL_UART_RxCpltCallback+0x458>)
 8001cf6:	705a      	strb	r2, [r3, #1]
					}
				}


				//IF RMC
				if(Tipe_Mes==2){
 8001cf8:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <HAL_UART_RxCpltCallback+0x440>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	f040 80c9 	bne.w	8001e94 <HAL_UART_RxCpltCallback+0x554>

					if(count==6&&buff[0]!=','){
 8001d02:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <HAL_UART_RxCpltCallback+0x438>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d10b      	bne.n	8001d22 <HAL_UART_RxCpltCallback+0x3e2>
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <HAL_UART_RxCpltCallback+0x43c>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b2c      	cmp	r3, #44	; 0x2c
 8001d10:	d007      	beq.n	8001d22 <HAL_UART_RxCpltCallback+0x3e2>
						count=0;
 8001d12:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_UART_RxCpltCallback+0x438>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
						ERRORS++;
 8001d18:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <HAL_UART_RxCpltCallback+0x444>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	4a19      	ldr	r2, [pc, #100]	; (8001d84 <HAL_UART_RxCpltCallback+0x444>)
 8001d20:	6013      	str	r3, [r2, #0]
					}
					if(buff[0]==','){
 8001d22:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <HAL_UART_RxCpltCallback+0x43c>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b2c      	cmp	r3, #44	; 0x2c
 8001d28:	d107      	bne.n	8001d3a <HAL_UART_RxCpltCallback+0x3fa>
						zpt++;
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <HAL_UART_RxCpltCallback+0x448>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	4a15      	ldr	r2, [pc, #84]	; (8001d88 <HAL_UART_RxCpltCallback+0x448>)
 8001d32:	6013      	str	r3, [r2, #0]
						ind=0;
 8001d34:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_UART_RxCpltCallback+0x44c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
					}
					if(zpt==1&&buff[0]!=','){
 8001d3a:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <HAL_UART_RxCpltCallback+0x448>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d10e      	bne.n	8001d60 <HAL_UART_RxCpltCallback+0x420>
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <HAL_UART_RxCpltCallback+0x43c>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b2c      	cmp	r3, #44	; 0x2c
 8001d48:	d00a      	beq.n	8001d60 <HAL_UART_RxCpltCallback+0x420>

						time_buff[ind]=buff[0];
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <HAL_UART_RxCpltCallback+0x44c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a0b      	ldr	r2, [pc, #44]	; (8001d7c <HAL_UART_RxCpltCallback+0x43c>)
 8001d50:	7811      	ldrb	r1, [r2, #0]
 8001d52:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001d54:	54d1      	strb	r1, [r2, r3]
						ind++;
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <HAL_UART_RxCpltCallback+0x44c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <HAL_UART_RxCpltCallback+0x44c>)
 8001d5e:	6013      	str	r3, [r2, #0]
					}
					if(zpt==2&&buff[0]==','){
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_UART_RxCpltCallback+0x448>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d13b      	bne.n	8001de0 <HAL_UART_RxCpltCallback+0x4a0>
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <HAL_UART_RxCpltCallback+0x43c>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b2c      	cmp	r3, #44	; 0x2c
 8001d6e:	d137      	bne.n	8001de0 <HAL_UART_RxCpltCallback+0x4a0>
						gps.hours[0]=time_buff[0];
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <HAL_UART_RxCpltCallback+0x450>)
 8001d72:	781a      	ldrb	r2, [r3, #0]
 8001d74:	e012      	b.n	8001d9c <HAL_UART_RxCpltCallback+0x45c>
 8001d76:	bf00      	nop
 8001d78:	2000050c 	.word	0x2000050c
 8001d7c:	20000550 	.word	0x20000550
 8001d80:	200004ec 	.word	0x200004ec
 8001d84:	200004e8 	.word	0x200004e8
 8001d88:	200004f8 	.word	0x200004f8
 8001d8c:	20000504 	.word	0x20000504
 8001d90:	20000540 	.word	0x20000540
 8001d94:	20004ae4 	.word	0x20004ae4
 8001d98:	20000554 	.word	0x20000554
 8001d9c:	4b4d      	ldr	r3, [pc, #308]	; (8001ed4 <HAL_UART_RxCpltCallback+0x594>)
 8001d9e:	72da      	strb	r2, [r3, #11]
						gps.hours[1]=time_buff[1];
 8001da0:	4b4d      	ldr	r3, [pc, #308]	; (8001ed8 <HAL_UART_RxCpltCallback+0x598>)
 8001da2:	785a      	ldrb	r2, [r3, #1]
 8001da4:	4b4b      	ldr	r3, [pc, #300]	; (8001ed4 <HAL_UART_RxCpltCallback+0x594>)
 8001da6:	731a      	strb	r2, [r3, #12]
						gps.minuttes[0]=time_buff[2];
 8001da8:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <HAL_UART_RxCpltCallback+0x598>)
 8001daa:	789a      	ldrb	r2, [r3, #2]
 8001dac:	4b49      	ldr	r3, [pc, #292]	; (8001ed4 <HAL_UART_RxCpltCallback+0x594>)
 8001dae:	739a      	strb	r2, [r3, #14]
						gps.minuttes[1]=time_buff[3];
 8001db0:	4b49      	ldr	r3, [pc, #292]	; (8001ed8 <HAL_UART_RxCpltCallback+0x598>)
 8001db2:	78da      	ldrb	r2, [r3, #3]
 8001db4:	4b47      	ldr	r3, [pc, #284]	; (8001ed4 <HAL_UART_RxCpltCallback+0x594>)
 8001db6:	73da      	strb	r2, [r3, #15]
						gps.seconds[0]=time_buff[4];
 8001db8:	4b47      	ldr	r3, [pc, #284]	; (8001ed8 <HAL_UART_RxCpltCallback+0x598>)
 8001dba:	791a      	ldrb	r2, [r3, #4]
 8001dbc:	4b45      	ldr	r3, [pc, #276]	; (8001ed4 <HAL_UART_RxCpltCallback+0x594>)
 8001dbe:	745a      	strb	r2, [r3, #17]
						gps.seconds[1]=time_buff[5];
 8001dc0:	4b45      	ldr	r3, [pc, #276]	; (8001ed8 <HAL_UART_RxCpltCallback+0x598>)
 8001dc2:	795a      	ldrb	r2, [r3, #5]
 8001dc4:	4b43      	ldr	r3, [pc, #268]	; (8001ed4 <HAL_UART_RxCpltCallback+0x594>)
 8001dc6:	749a      	strb	r2, [r3, #18]
						gps.seconds[2]=time_buff[6];
 8001dc8:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <HAL_UART_RxCpltCallback+0x598>)
 8001dca:	799a      	ldrb	r2, [r3, #6]
 8001dcc:	4b41      	ldr	r3, [pc, #260]	; (8001ed4 <HAL_UART_RxCpltCallback+0x594>)
 8001dce:	74da      	strb	r2, [r3, #19]
						gps.seconds[3]=time_buff[7];
 8001dd0:	4b41      	ldr	r3, [pc, #260]	; (8001ed8 <HAL_UART_RxCpltCallback+0x598>)
 8001dd2:	79da      	ldrb	r2, [r3, #7]
 8001dd4:	4b3f      	ldr	r3, [pc, #252]	; (8001ed4 <HAL_UART_RxCpltCallback+0x594>)
 8001dd6:	751a      	strb	r2, [r3, #20]
						gps.seconds[4]=time_buff[8];
 8001dd8:	4b3f      	ldr	r3, [pc, #252]	; (8001ed8 <HAL_UART_RxCpltCallback+0x598>)
 8001dda:	7a1a      	ldrb	r2, [r3, #8]
 8001ddc:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_UART_RxCpltCallback+0x594>)
 8001dde:	755a      	strb	r2, [r3, #21]
					}
					if(zpt==2&&buff[0]!=','){
 8001de0:	4b3e      	ldr	r3, [pc, #248]	; (8001edc <HAL_UART_RxCpltCallback+0x59c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d10e      	bne.n	8001e06 <HAL_UART_RxCpltCallback+0x4c6>
 8001de8:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <HAL_UART_RxCpltCallback+0x5a0>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b2c      	cmp	r3, #44	; 0x2c
 8001dee:	d00a      	beq.n	8001e06 <HAL_UART_RxCpltCallback+0x4c6>

						time_buff[ind]=buff[0];
 8001df0:	4b3c      	ldr	r3, [pc, #240]	; (8001ee4 <HAL_UART_RxCpltCallback+0x5a4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a3a      	ldr	r2, [pc, #232]	; (8001ee0 <HAL_UART_RxCpltCallback+0x5a0>)
 8001df6:	7811      	ldrb	r1, [r2, #0]
 8001df8:	4a37      	ldr	r2, [pc, #220]	; (8001ed8 <HAL_UART_RxCpltCallback+0x598>)
 8001dfa:	54d1      	strb	r1, [r2, r3]
						ind++;
 8001dfc:	4b39      	ldr	r3, [pc, #228]	; (8001ee4 <HAL_UART_RxCpltCallback+0x5a4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	3301      	adds	r3, #1
 8001e02:	4a38      	ldr	r2, [pc, #224]	; (8001ee4 <HAL_UART_RxCpltCallback+0x5a4>)
 8001e04:	6013      	str	r3, [r2, #0]
					}
					if(zpt==3&&buff[0]==','){
 8001e06:	4b35      	ldr	r3, [pc, #212]	; (8001edc <HAL_UART_RxCpltCallback+0x59c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d107      	bne.n	8001e1e <HAL_UART_RxCpltCallback+0x4de>
 8001e0e:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <HAL_UART_RxCpltCallback+0x5a0>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b2c      	cmp	r3, #44	; 0x2c
 8001e14:	d103      	bne.n	8001e1e <HAL_UART_RxCpltCallback+0x4de>
						gps.sinc[1]=time_buff[0];
 8001e16:	4b30      	ldr	r3, [pc, #192]	; (8001ed8 <HAL_UART_RxCpltCallback+0x598>)
 8001e18:	781a      	ldrb	r2, [r3, #0]
 8001e1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <HAL_UART_RxCpltCallback+0x594>)
 8001e1c:	769a      	strb	r2, [r3, #26]
					}

					if(zpt==9&&buff[0]!=','){
 8001e1e:	4b2f      	ldr	r3, [pc, #188]	; (8001edc <HAL_UART_RxCpltCallback+0x59c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b09      	cmp	r3, #9
 8001e24:	d10e      	bne.n	8001e44 <HAL_UART_RxCpltCallback+0x504>
 8001e26:	4b2e      	ldr	r3, [pc, #184]	; (8001ee0 <HAL_UART_RxCpltCallback+0x5a0>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b2c      	cmp	r3, #44	; 0x2c
 8001e2c:	d00a      	beq.n	8001e44 <HAL_UART_RxCpltCallback+0x504>

						time_buff[ind]=buff[0];
 8001e2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ee4 <HAL_UART_RxCpltCallback+0x5a4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a2b      	ldr	r2, [pc, #172]	; (8001ee0 <HAL_UART_RxCpltCallback+0x5a0>)
 8001e34:	7811      	ldrb	r1, [r2, #0]
 8001e36:	4a28      	ldr	r2, [pc, #160]	; (8001ed8 <HAL_UART_RxCpltCallback+0x598>)
 8001e38:	54d1      	strb	r1, [r2, r3]
						ind++;
 8001e3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <HAL_UART_RxCpltCallback+0x5a4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	4a28      	ldr	r2, [pc, #160]	; (8001ee4 <HAL_UART_RxCpltCallback+0x5a4>)
 8001e42:	6013      	str	r3, [r2, #0]
					}
					if(zpt==10&&buff[0]==','){
 8001e44:	4b25      	ldr	r3, [pc, #148]	; (8001edc <HAL_UART_RxCpltCallback+0x59c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b0a      	cmp	r3, #10
 8001e4a:	d123      	bne.n	8001e94 <HAL_UART_RxCpltCallback+0x554>
 8001e4c:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <HAL_UART_RxCpltCallback+0x5a0>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b2c      	cmp	r3, #44	; 0x2c
 8001e52:	d11f      	bne.n	8001e94 <HAL_UART_RxCpltCallback+0x554>
						gps.day[0]=time_buff[0];
 8001e54:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_UART_RxCpltCallback+0x598>)
 8001e56:	781a      	ldrb	r2, [r3, #0]
 8001e58:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <HAL_UART_RxCpltCallback+0x594>)
 8001e5a:	701a      	strb	r2, [r3, #0]
						gps.day[1]=time_buff[1];
 8001e5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <HAL_UART_RxCpltCallback+0x598>)
 8001e5e:	785a      	ldrb	r2, [r3, #1]
 8001e60:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <HAL_UART_RxCpltCallback+0x594>)
 8001e62:	705a      	strb	r2, [r3, #1]
						gps.month[0]=time_buff[2];
 8001e64:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <HAL_UART_RxCpltCallback+0x598>)
 8001e66:	789a      	ldrb	r2, [r3, #2]
 8001e68:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <HAL_UART_RxCpltCallback+0x594>)
 8001e6a:	70da      	strb	r2, [r3, #3]
						gps.month[1]=time_buff[3];
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <HAL_UART_RxCpltCallback+0x598>)
 8001e6e:	78da      	ldrb	r2, [r3, #3]
 8001e70:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <HAL_UART_RxCpltCallback+0x594>)
 8001e72:	711a      	strb	r2, [r3, #4]
						gps.year[0]=time_buff[4];
 8001e74:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <HAL_UART_RxCpltCallback+0x598>)
 8001e76:	791a      	ldrb	r2, [r3, #4]
 8001e78:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <HAL_UART_RxCpltCallback+0x594>)
 8001e7a:	719a      	strb	r2, [r3, #6]
						gps.year[1]=time_buff[5];
 8001e7c:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <HAL_UART_RxCpltCallback+0x598>)
 8001e7e:	795a      	ldrb	r2, [r3, #5]
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <HAL_UART_RxCpltCallback+0x594>)
 8001e82:	71da      	strb	r2, [r3, #7]
						year_str[0]=time_buff[4];
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_UART_RxCpltCallback+0x598>)
 8001e86:	791a      	ldrb	r2, [r3, #4]
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <HAL_UART_RxCpltCallback+0x5a8>)
 8001e8a:	701a      	strb	r2, [r3, #0]
						year_str[1]=time_buff[5];
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_UART_RxCpltCallback+0x598>)
 8001e8e:	795a      	ldrb	r2, [r3, #5]
 8001e90:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_UART_RxCpltCallback+0x5a8>)
 8001e92:	705a      	strb	r2, [r3, #1]
					}
				}

				//printf("buff=%c\tcount=%d\tzpt=%d\tind=%d\tTipe_Mes=%d\n\r",buff[0],count,zpt,ind,Tipe_Mes);
				//printf("crc_hx=%s\t crc=%d\t crc_buff=%s\t dec=%d\n\r",crc_hx,crc,crc_buff,dec);
				dataReceived=1;
 8001e94:	4b15      	ldr	r3, [pc, #84]	; (8001eec <HAL_UART_RxCpltCallback+0x5ac>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]

				if( dataTransmitted != 0 ) {
 8001e9a:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <HAL_UART_RxCpltCallback+0x5b0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d005      	beq.n	8001eae <HAL_UART_RxCpltCallback+0x56e>

					//HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);

					dataReceived=0;
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_UART_RxCpltCallback+0x5ac>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
					dataTransmitted=0;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <HAL_UART_RxCpltCallback+0x5b0>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
				}

				HAL_UART_Receive_IT (&huart1, (uint8_t *)buff, 1);
 8001eae:	2201      	movs	r2, #1
 8001eb0:	490b      	ldr	r1, [pc, #44]	; (8001ee0 <HAL_UART_RxCpltCallback+0x5a0>)
 8001eb2:	4810      	ldr	r0, [pc, #64]	; (8001ef4 <HAL_UART_RxCpltCallback+0x5b4>)
 8001eb4:	f006 f853 	bl	8007f5e <HAL_UART_Receive_IT>
				gps.errors[1]=ERRORS;
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <HAL_UART_RxCpltCallback+0x5b8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_UART_RxCpltCallback+0x594>)
 8001ec0:	761a      	strb	r2, [r3, #24]
				count++;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <HAL_UART_RxCpltCallback+0x5bc>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <HAL_UART_RxCpltCallback+0x5bc>)
 8001eca:	6013      	str	r3, [r2, #0]
			}
		}
 8001ecc:	bf00      	nop
 8001ece:	3728      	adds	r7, #40	; 0x28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20004ae4 	.word	0x20004ae4
 8001ed8:	20000540 	.word	0x20000540
 8001edc:	200004f8 	.word	0x200004f8
 8001ee0:	20000550 	.word	0x20000550
 8001ee4:	20000504 	.word	0x20000504
 8001ee8:	20000554 	.word	0x20000554
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	20000004 	.word	0x20000004
 8001ef4:	20004c80 	.word	0x20004c80
 8001ef8:	200004e8 	.word	0x200004e8
 8001efc:	2000050c 	.word	0x2000050c

08001f00 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

//	//if(huart == &huart6) {

		dataTransmitted=1;
 8001f08:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_UART_TxCpltCallback+0x30>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

		if( dataReceived != 0 ) {
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_UART_TxCpltCallback+0x34>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d005      	beq.n	8001f22 <HAL_UART_TxCpltCallback+0x22>
			//HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);
			dataReceived=0;
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <HAL_UART_TxCpltCallback+0x34>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
			dataTransmitted=0;
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <HAL_UART_TxCpltCallback+0x30>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
		}
	//}
}char Hex_to_dec(char hex[2]){
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000004 	.word	0x20000004
 8001f34:	20000000 	.word	0x20000000

08001f38 <Hex_to_dec>:
 8001f38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
    int i;
    int dig; /*to store digit*/
    int cont = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
    dec = 0;
 8001f46:	4b3e      	ldr	r3, [pc, #248]	; (8002040 <Hex_to_dec+0x108>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
    for (i = (strlen(hex) - 1); i >= 0; i--) {
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7fe f949 	bl	80001e4 <strlen>
 8001f52:	4603      	mov	r3, r0
 8001f54:	3b01      	subs	r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	e060      	b.n	800201c <Hex_to_dec+0xe4>
        switch (hex[i]) {
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	4413      	add	r3, r2
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	3b41      	subs	r3, #65	; 0x41
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d821      	bhi.n	8001fac <Hex_to_dec+0x74>
 8001f68:	a201      	add	r2, pc, #4	; (adr r2, 8001f70 <Hex_to_dec+0x38>)
 8001f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6e:	bf00      	nop
 8001f70:	08001f89 	.word	0x08001f89
 8001f74:	08001f8f 	.word	0x08001f8f
 8001f78:	08001f95 	.word	0x08001f95
 8001f7c:	08001f9b 	.word	0x08001f9b
 8001f80:	08001fa1 	.word	0x08001fa1
 8001f84:	08001fa7 	.word	0x08001fa7
        case 'A':
            dig = 10;
 8001f88:	230a      	movs	r3, #10
 8001f8a:	613b      	str	r3, [r7, #16]
            break;
 8001f8c:	e014      	b.n	8001fb8 <Hex_to_dec+0x80>
        case 'B':
            dig = 11;
 8001f8e:	230b      	movs	r3, #11
 8001f90:	613b      	str	r3, [r7, #16]
            break;
 8001f92:	e011      	b.n	8001fb8 <Hex_to_dec+0x80>
        case 'C':
            dig = 12;
 8001f94:	230c      	movs	r3, #12
 8001f96:	613b      	str	r3, [r7, #16]
            break;
 8001f98:	e00e      	b.n	8001fb8 <Hex_to_dec+0x80>
        case 'D':
            dig = 13;
 8001f9a:	230d      	movs	r3, #13
 8001f9c:	613b      	str	r3, [r7, #16]
            break;
 8001f9e:	e00b      	b.n	8001fb8 <Hex_to_dec+0x80>
        case 'E':
            dig = 14;
 8001fa0:	230e      	movs	r3, #14
 8001fa2:	613b      	str	r3, [r7, #16]
            break;
 8001fa4:	e008      	b.n	8001fb8 <Hex_to_dec+0x80>
        case 'F':
            dig = 15;
 8001fa6:	230f      	movs	r3, #15
 8001fa8:	613b      	str	r3, [r7, #16]
            break;
 8001faa:	e005      	b.n	8001fb8 <Hex_to_dec+0x80>
        default:
            dig = hex[i] - 0x30;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	3b30      	subs	r3, #48	; 0x30
 8001fb6:	613b      	str	r3, [r7, #16]
        }
        dec = dec + (dig)*pow((double)16, (double)cont);
 8001fb8:	4b21      	ldr	r3, [pc, #132]	; (8002040 <Hex_to_dec+0x108>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fac1 	bl	8000544 <__aeabi_i2d>
 8001fc2:	4604      	mov	r4, r0
 8001fc4:	460d      	mov	r5, r1
 8001fc6:	6938      	ldr	r0, [r7, #16]
 8001fc8:	f7fe fabc 	bl	8000544 <__aeabi_i2d>
 8001fcc:	4680      	mov	r8, r0
 8001fce:	4689      	mov	r9, r1
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f7fe fab7 	bl	8000544 <__aeabi_i2d>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	ec43 2b11 	vmov	d1, r2, r3
 8001fde:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002038 <Hex_to_dec+0x100>
 8001fe2:	f01f f925 	bl	8021230 <pow>
 8001fe6:	ec53 2b10 	vmov	r2, r3, d0
 8001fea:	4640      	mov	r0, r8
 8001fec:	4649      	mov	r1, r9
 8001fee:	f7fe fb13 	bl	8000618 <__aeabi_dmul>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	4629      	mov	r1, r5
 8001ffa:	f7fe f957 	bl	80002ac <__adddf3>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	f7fe fdb7 	bl	8000b78 <__aeabi_d2iz>
 800200a:	4603      	mov	r3, r0
 800200c:	4a0c      	ldr	r2, [pc, #48]	; (8002040 <Hex_to_dec+0x108>)
 800200e:	6013      	str	r3, [r2, #0]
        cont++;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	3301      	adds	r3, #1
 8002014:	60fb      	str	r3, [r7, #12]
    for (i = (strlen(hex) - 1); i >= 0; i--) {
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	3b01      	subs	r3, #1
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2b00      	cmp	r3, #0
 8002020:	da9b      	bge.n	8001f5a <Hex_to_dec+0x22>
    }
    return dec;
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <Hex_to_dec+0x108>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	b2db      	uxtb	r3, r3
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002032:	bf00      	nop
 8002034:	f3af 8000 	nop.w
 8002038:	00000000 	.word	0x00000000
 800203c:	40300000 	.word	0x40300000
 8002040:	20004cc4 	.word	0x20004cc4

08002044 <calc_crc>:
char calc_crc(char c,int cnt){
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	71fb      	strb	r3, [r7, #7]
	if (c=='*'){
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	2b2a      	cmp	r3, #42	; 0x2a
 8002054:	d108      	bne.n	8002068 <calc_crc+0x24>
		start_crc=0;
 8002056:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <calc_crc+0xa0>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
		crc_pars=1;
 800205c:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <calc_crc+0xa4>)
 800205e:	2201      	movs	r2, #1
 8002060:	601a      	str	r2, [r3, #0]
		z=0;
 8002062:	4b22      	ldr	r3, [pc, #136]	; (80020ec <calc_crc+0xa8>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
	}
	if(start_crc==1){
 8002068:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <calc_crc+0xa0>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d105      	bne.n	800207c <calc_crc+0x38>
		crc^=c;
 8002070:	79fa      	ldrb	r2, [r7, #7]
 8002072:	4b1f      	ldr	r3, [pc, #124]	; (80020f0 <calc_crc+0xac>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4053      	eors	r3, r2
 8002078:	4a1d      	ldr	r2, [pc, #116]	; (80020f0 <calc_crc+0xac>)
 800207a:	6013      	str	r3, [r2, #0]
	}
	if(crc_pars==1&&c!='*'&&z<=1){
 800207c:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <calc_crc+0xa4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d110      	bne.n	80020a6 <calc_crc+0x62>
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	2b2a      	cmp	r3, #42	; 0x2a
 8002088:	d00d      	beq.n	80020a6 <calc_crc+0x62>
 800208a:	4b18      	ldr	r3, [pc, #96]	; (80020ec <calc_crc+0xa8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	dc09      	bgt.n	80020a6 <calc_crc+0x62>
		crc_buff[z]=c;
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <calc_crc+0xa8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4917      	ldr	r1, [pc, #92]	; (80020f4 <calc_crc+0xb0>)
 8002098:	79fa      	ldrb	r2, [r7, #7]
 800209a:	54ca      	strb	r2, [r1, r3]
		z++;
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <calc_crc+0xa8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	3301      	adds	r3, #1
 80020a2:	4a12      	ldr	r2, [pc, #72]	; (80020ec <calc_crc+0xa8>)
 80020a4:	6013      	str	r3, [r2, #0]
	}
	if(c=='\n'){
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	2b0a      	cmp	r3, #10
 80020aa:	d10a      	bne.n	80020c2 <calc_crc+0x7e>
		Hex_to_dec(crc_buff);
 80020ac:	4811      	ldr	r0, [pc, #68]	; (80020f4 <calc_crc+0xb0>)
 80020ae:	f7ff ff43 	bl	8001f38 <Hex_to_dec>
		if(crc==dec){
 80020b2:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <calc_crc+0xac>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <calc_crc+0xb4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d101      	bne.n	80020c2 <calc_crc+0x7e>
			//Test++;
			return 1;
 80020be:	2301      	movs	r3, #1
 80020c0:	e00c      	b.n	80020dc <calc_crc+0x98>
		}
	}
	if(cnt==0){
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d108      	bne.n	80020da <calc_crc+0x96>
		start_crc=1;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <calc_crc+0xa0>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
		crc_pars=0;
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <calc_crc+0xa4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
		crc=0;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <calc_crc+0xac>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
	}
//	printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
	return 0;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	200004fc 	.word	0x200004fc
 80020e8:	2000053c 	.word	0x2000053c
 80020ec:	20000500 	.word	0x20000500
 80020f0:	20000508 	.word	0x20000508
 80020f4:	2000054c 	.word	0x2000054c
 80020f8:	20004cc4 	.word	0x20004cc4

080020fc <rtc_read>:
time_t rtc_read(void) {
 80020fc:	b5b0      	push	{r4, r5, r7, lr}
 80020fe:	b092      	sub	sp, #72	; 0x48
 8002100:	af00      	add	r7, sp, #0
	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	struct tm timeinfo;

	hrtc.Instance = RTC;
 8002102:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <rtc_read+0x84>)
 8002104:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <rtc_read+0x88>)
 8002106:	601a      	str	r2, [r3, #0]

	// Read actual date and time
	HAL_RTC_GetTime(&hrtc, &timeStruct, FORMAT_BIN); // Read time first!
 8002108:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800210c:	2200      	movs	r2, #0
 800210e:	4619      	mov	r1, r3
 8002110:	481b      	ldr	r0, [pc, #108]	; (8002180 <rtc_read+0x84>)
 8002112:	f004 ff57 	bl	8006fc4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &dateStruct, FORMAT_BIN);
 8002116:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800211a:	2200      	movs	r2, #0
 800211c:	4619      	mov	r1, r3
 800211e:	4818      	ldr	r0, [pc, #96]	; (8002180 <rtc_read+0x84>)
 8002120:	f005 f855 	bl	80071ce <HAL_RTC_GetDate>

	// Setup a tm structure based on the RTC
	// monday==1 sunday==7
	timeinfo.tm_wday = dateStruct.WeekDay;
 8002124:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002128:	61fb      	str	r3, [r7, #28]
	timeinfo.tm_mon = dateStruct.Month;//-1 do January==0 month
 800212a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800212e:	617b      	str	r3, [r7, #20]
	timeinfo.tm_mday = dateStruct.Date;
 8002130:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002134:	613b      	str	r3, [r7, #16]
	timeinfo.tm_year = dateStruct.Year + 100;
 8002136:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800213a:	3364      	adds	r3, #100	; 0x64
 800213c:	61bb      	str	r3, [r7, #24]
	timeinfo.tm_hour = timeStruct.Hours;
 800213e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002142:	60fb      	str	r3, [r7, #12]
	timeinfo.tm_min = timeStruct.Minutes;
 8002144:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002148:	60bb      	str	r3, [r7, #8]
	timeinfo.tm_sec = timeStruct.Seconds;
 800214a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800214e:	607b      	str	r3, [r7, #4]
	//printf("tm_wday=%d\t\n",timeinfo.tm_wday);

	// Convert to timestamp
	time_t t = mktime(&timeinfo)+offset_unix[user_info.zone];
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	4618      	mov	r0, r3
 8002154:	f01c fc5e 	bl	801ea14 <mktime>
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <rtc_read+0x8c>)
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	4a0b      	ldr	r2, [pc, #44]	; (800218c <rtc_read+0x90>)
 800215e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002162:	461a      	mov	r2, r3
 8002164:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002168:	1884      	adds	r4, r0, r2
 800216a:	eb41 0503 	adc.w	r5, r1, r3
 800216e:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40


	return t;
 8002172:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
}
 8002176:	4610      	mov	r0, r2
 8002178:	4619      	mov	r1, r3
 800217a:	3748      	adds	r7, #72	; 0x48
 800217c:	46bd      	mov	sp, r7
 800217e:	bdb0      	pop	{r4, r5, r7, pc}
 8002180:	20004ccc 	.word	0x20004ccc
 8002184:	40002800 	.word	0x40002800
 8002188:	20004b00 	.word	0x20004b00
 800218c:	08025ca0 	.word	0x08025ca0

08002190 <tcpecho_init>:

void tcpecho_init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af02      	add	r7, sp, #8
	sys_thread_new("tcpecho_thread", tcpecho_thread, NULL,DEFAULT_THREAD_STACKSIZE, 1);
 8002196:	2301      	movs	r3, #1
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800219e:	2200      	movs	r2, #0
 80021a0:	4903      	ldr	r1, [pc, #12]	; (80021b0 <tcpecho_init+0x20>)
 80021a2:	4804      	ldr	r0, [pc, #16]	; (80021b4 <tcpecho_init+0x24>)
 80021a4:	f01b fcbc 	bl	801db20 <sys_thread_new>
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	0800224d 	.word	0x0800224d
 80021b4:	080222cc 	.word	0x080222cc

080021b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80021b8:	b590      	push	{r4, r7, lr}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80021c0:	f008 f95c 	bl	800a47c <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80021c4:	f01b fcf0 	bl	801dba8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  httpd_init();
 80021c8:	f010 f986 	bl	80124d8 <httpd_init>
  tcpecho_init();
 80021cc:	f7ff ffe0 	bl	8002190 <tcpecho_init>
  memset(&user_info,0,sizeof(user_info));
 80021d0:	f44f 7292 	mov.w	r2, #292	; 0x124
 80021d4:	2100      	movs	r1, #0
 80021d6:	4817      	ldr	r0, [pc, #92]	; (8002234 <StartDefaultTask+0x7c>)
 80021d8:	f01c fb3c 	bl	801e854 <memset>
  strncpy(user_info.ip,"192.168.0.68",13);
 80021dc:	4a15      	ldr	r2, [pc, #84]	; (8002234 <StartDefaultTask+0x7c>)
 80021de:	4b16      	ldr	r3, [pc, #88]	; (8002238 <StartDefaultTask+0x80>)
 80021e0:	4614      	mov	r4, r2
 80021e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e4:	c407      	stmia	r4!, {r0, r1, r2}
 80021e6:	7023      	strb	r3, [r4, #0]
  strncpy(user_info.netmask,"255.255.255.0",14);
 80021e8:	4a14      	ldr	r2, [pc, #80]	; (800223c <StartDefaultTask+0x84>)
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <StartDefaultTask+0x88>)
 80021ec:	4614      	mov	r4, r2
 80021ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80021f0:	6020      	str	r0, [r4, #0]
 80021f2:	6061      	str	r1, [r4, #4]
 80021f4:	60a2      	str	r2, [r4, #8]
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	81a3      	strh	r3, [r4, #12]
  user_info.zone=12;
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <StartDefaultTask+0x7c>)
 80021fc:	220c      	movs	r2, #12
 80021fe:	611a      	str	r2, [r3, #16]

  	  ip4_addr_t add;
  	  inet_aton(user_info.ip, &add);
 8002200:	f107 030c 	add.w	r3, r7, #12
 8002204:	4619      	mov	r1, r3
 8002206:	480b      	ldr	r0, [pc, #44]	; (8002234 <StartDefaultTask+0x7c>)
 8002208:	f01a fab4 	bl	801c774 <ip4addr_aton>
  	  setIP(add.addr);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4618      	mov	r0, r3
 8002210:	f008 f910 	bl	800a434 <setIP>

  	ip4_addr_t mask;
  	inet_aton(user_info.netmask, &mask);
 8002214:	f107 0308 	add.w	r3, r7, #8
 8002218:	4619      	mov	r1, r3
 800221a:	4808      	ldr	r0, [pc, #32]	; (800223c <StartDefaultTask+0x84>)
 800221c:	f01a faaa 	bl	801c774 <ip4addr_aton>
  	setNetmask(mask.addr);
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	4618      	mov	r0, r3
 8002224:	f008 f918 	bl	800a458 <setNetmask>

  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Receive_IT (&huart1, (uint8_t*)&buff, 1);
 8002228:	2201      	movs	r2, #1
 800222a:	4906      	ldr	r1, [pc, #24]	; (8002244 <StartDefaultTask+0x8c>)
 800222c:	4806      	ldr	r0, [pc, #24]	; (8002248 <StartDefaultTask+0x90>)
 800222e:	f005 fe96 	bl	8007f5e <HAL_UART_Receive_IT>
 8002232:	e7f9      	b.n	8002228 <StartDefaultTask+0x70>
 8002234:	20004b00 	.word	0x20004b00
 8002238:	080222dc 	.word	0x080222dc
 800223c:	20004c13 	.word	0x20004c13
 8002240:	080222ec 	.word	0x080222ec
 8002244:	20000550 	.word	0x20000550
 8002248:	20004c80 	.word	0x20004c80

0800224c <tcpecho_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tcpecho_thread */
void tcpecho_thread(void const * argument)
{
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b089      	sub	sp, #36	; 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
			//struct tm tm_;
			//uint32_t tm_ms_;


			/* Create a new connection identifier. */
			conn = netconn_new(NETCONN_UDP);
 8002254:	2200      	movs	r2, #0
 8002256:	2100      	movs	r1, #0
 8002258:	2020      	movs	r0, #32
 800225a:	f00d f98d 	bl	800f578 <netconn_new_with_proto_and_callback>
 800225e:	61f8      	str	r0, [r7, #28]
			if (conn!=NULL)
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 80b1 	beq.w	80023ca <tcpecho_thread+0x17e>
			{
				/* Bind connection to well known port number 7. */
				err = netconn_bind(conn, NULL, 123);
 8002268:	227b      	movs	r2, #123	; 0x7b
 800226a:	2100      	movs	r1, #0
 800226c:	69f8      	ldr	r0, [r7, #28]
 800226e:	f00d fa3d 	bl	800f6ec <netconn_bind>
 8002272:	4603      	mov	r3, r0
 8002274:	76fb      	strb	r3, [r7, #27]
				if (err == ERR_OK)
 8002276:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f040 80a2 	bne.w	80023c4 <tcpecho_thread+0x178>
				{
					while (1)
					{
						while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 8002280:	e08d      	b.n	800239e <tcpecho_thread+0x152>
						{
							do
							{
								netbuf_data(buf, (void **)&ntp_packet_ptr, &buf_data_len);
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f107 0212 	add.w	r2, r7, #18
 8002288:	f107 010c 	add.w	r1, r7, #12
 800228c:	4618      	mov	r0, r3
 800228e:	f00e ff33 	bl	80110f8 <netbuf_data>

								if(buf_data_len < 48 || buf_data_len > 2048)
 8002292:	8a7b      	ldrh	r3, [r7, #18]
 8002294:	2b2f      	cmp	r3, #47	; 0x2f
 8002296:	d903      	bls.n	80022a0 <tcpecho_thread+0x54>
 8002298:	8a7b      	ldrh	r3, [r7, #18]
 800229a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800229e:	d904      	bls.n	80022aa <tcpecho_thread+0x5e>
								{
									netbuf_delete(buf);
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f00e ff08 	bl	80110b8 <netbuf_delete>
									continue;
 80022a8:	e06d      	b.n	8002386 <tcpecho_thread+0x13a>
								}
								ntp_packet_ptr->li_vn_mode = (0 << 6) | (4 << 3) | (4); // Leap Warning: None, Version: NTPv4, Mode: 4 - Server
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2224      	movs	r2, #36	; 0x24
 80022ae:	701a      	strb	r2, [r3, #0]
								ntp_packet_ptr->stratum = ntpd_status.stratum;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4a48      	ldr	r2, [pc, #288]	; (80023d4 <tcpecho_thread+0x188>)
 80022b4:	7a12      	ldrb	r2, [r2, #8]
 80022b6:	705a      	strb	r2, [r3, #1]
								ntp_packet_ptr->poll = 5; // 32s
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2205      	movs	r2, #5
 80022bc:	709a      	strb	r2, [r3, #2]
								ntp_packet_ptr->precision = -10; // ~1ms
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	22f6      	movs	r2, #246	; 0xf6
 80022c2:	70da      	strb	r2, [r3, #3]

								ntp_packet_ptr->rootDelay = 0; // Delay from GPS clock is ~zero
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	605a      	str	r2, [r3, #4]
								ntp_packet_ptr->rootDispersion_s = 0;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	811a      	strh	r2, [r3, #8]
								ntp_packet_ptr->rootDispersion_f = htonl(NTP_MS_TO_FS_U16 * 1.0); // 1ms
 80022d0:	2041      	movs	r0, #65	; 0x41
 80022d2:	f010 f936 	bl	8012542 <lwip_htonl>
 80022d6:	4602      	mov	r2, r0
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	b292      	uxth	r2, r2
 80022dc:	815a      	strh	r2, [r3, #10]
								ntp_packet_ptr->refId = ('G') | ('P' << 8) | ('S' << 16) | ('\0' << 24);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4a3d      	ldr	r2, [pc, #244]	; (80023d8 <tcpecho_thread+0x18c>)
 80022e2:	60da      	str	r2, [r3, #12]
								/* Move client's transmit timestamp into origin fields */
								ntp_packet_ptr->origTm_s = ntp_packet_ptr->txTm_s;
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80022ea:	619a      	str	r2, [r3, #24]
								ntp_packet_ptr->origTm_f = ntp_packet_ptr->txTm_f;
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022f2:	61da      	str	r2, [r3, #28]

								ntp_packet_ptr->refTm_s = time_ref_s;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4a39      	ldr	r2, [pc, #228]	; (80023dc <tcpecho_thread+0x190>)
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	611a      	str	r2, [r3, #16]
								ntp_packet_ptr->refTm_f = time_ref_f;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4a38      	ldr	r2, [pc, #224]	; (80023e0 <tcpecho_thread+0x194>)
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	615a      	str	r2, [r3, #20]

								//rtcGetTime(&RTCD1, &ntpd_datetime);
								//rtcConvertDateTimeToStructTm(&ntpd_datetime, &tm_, &tm_ms_);

								ntp_packet_ptr->rxTm_s = htonl(rtc_read()- DIFF_SEC_1970_2036);//htonl(mktime(&tm_) - DIFF_SEC_1970_2036);
 8002304:	f7ff fefa 	bl	80020fc <rtc_read>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4b35      	ldr	r3, [pc, #212]	; (80023e4 <tcpecho_thread+0x198>)
 800230e:	4413      	add	r3, r2
 8002310:	68fc      	ldr	r4, [r7, #12]
 8002312:	4618      	mov	r0, r3
 8002314:	f010 f915 	bl	8012542 <lwip_htonl>
 8002318:	4603      	mov	r3, r0
 800231a:	6223      	str	r3, [r4, #32]
								ntp_packet_ptr->rxTm_f = htonl((time_t)(((float)TIM2->CNT)/((float)TIM2->ARR)*4294967296.0));//htonl((NTP_MS_TO_FS_U32 * tm_ms_));
 800231c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800232a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	ee07 3a90 	vmov	s15, r3
 8002334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002338:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800233c:	ee16 0a90 	vmov	r0, s13
 8002340:	f7fe f912 	bl	8000568 <__aeabi_f2d>
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <tcpecho_thread+0x19c>)
 800234a:	f7fe f965 	bl	8000618 <__aeabi_dmul>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4610      	mov	r0, r2
 8002354:	4619      	mov	r1, r3
 8002356:	f7fe fc9f 	bl	8000c98 <__aeabi_d2lz>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4613      	mov	r3, r2
 8002360:	68fc      	ldr	r4, [r7, #12]
 8002362:	4618      	mov	r0, r3
 8002364:	f010 f8ed 	bl	8012542 <lwip_htonl>
 8002368:	4603      	mov	r3, r0
 800236a:	6263      	str	r3, [r4, #36]	; 0x24

								/* Copy into transmit timestamp fields */
								ntp_packet_ptr->txTm_s = ntp_packet_ptr->rxTm_s;
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a12      	ldr	r2, [r2, #32]
 8002372:	629a      	str	r2, [r3, #40]	; 0x28
								ntp_packet_ptr->txTm_f = ntp_packet_ptr->rxTm_f;
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800237a:	62da      	str	r2, [r3, #44]	; 0x2c

								netconn_send(conn, buf);
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	4619      	mov	r1, r3
 8002380:	69f8      	ldr	r0, [r7, #28]
 8002382:	f00d fbe1 	bl	800fb48 <netconn_send>
							}
							while (netbuf_next(buf) >= 0);
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	4618      	mov	r0, r3
 800238a:	f00e feff 	bl	801118c <netbuf_next>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	f6bf af76 	bge.w	8002282 <tcpecho_thread+0x36>

							netbuf_delete(buf);
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	4618      	mov	r0, r3
 800239a:	f00e fe8d 	bl	80110b8 <netbuf_delete>
						while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	4619      	mov	r1, r3
 80023a4:	69f8      	ldr	r0, [r7, #28]
 80023a6:	f00d fb55 	bl	800fa54 <netconn_recv>
 80023aa:	4603      	mov	r3, r0
 80023ac:	76bb      	strb	r3, [r7, #26]
 80023ae:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f43f af65 	beq.w	8002282 <tcpecho_thread+0x36>
						}
						/* Close connection and discard connection identifier. */
						//netconn_close(newconn);
						//netconn_delete(newconn);
						ntpd_status.requests_count++;
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <tcpecho_thread+0x188>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	3301      	adds	r3, #1
 80023be:	4a05      	ldr	r2, [pc, #20]	; (80023d4 <tcpecho_thread+0x188>)
 80023c0:	6053      	str	r3, [r2, #4]
						while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 80023c2:	e7ec      	b.n	800239e <tcpecho_thread+0x152>
					}
				}
				else
				{
					netconn_delete(conn);
 80023c4:	69f8      	ldr	r0, [r7, #28]
 80023c6:	f00d f975 	bl	800f6b4 <netconn_delete>
				}
			}
  /* USER CODE END tcpecho_thread */
}
 80023ca:	bf00      	nop
 80023cc:	3724      	adds	r7, #36	; 0x24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd90      	pop	{r4, r7, pc}
 80023d2:	bf00      	nop
 80023d4:	2000000c 	.word	0x2000000c
 80023d8:	00535047 	.word	0x00535047
 80023dc:	20004d7c 	.word	0x20004d7c
 80023e0:	20004cec 	.word	0x20004cec
 80023e4:	83aa7e80 	.word	0x83aa7e80
 80023e8:	41f00000 	.word	0x41f00000

080023ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a04      	ldr	r2, [pc, #16]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d101      	bne.n	8002402 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023fe:	f001 f9ef 	bl	80037e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40010000 	.word	0x40010000

08002410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002414:	b672      	cpsid	i
}
 8002416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002418:	e7fe      	b.n	8002418 <Error_Handler+0x8>
	...

0800241c <fs_open_custom>:
#define JSON_SIZE 1608
struct tm WebPageTime;
int fs_read_custom(struct fs_file *file, char *buffer, int count){
	return 0;
}
int fs_open_custom(struct fs_file *file, const char *name){
 800241c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002420:	f2ad 6dec 	subw	sp, sp, #1772	; 0x6ec
 8002424:	af04      	add	r7, sp, #16
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	6018      	str	r0, [r3, #0]
 800242a:	463b      	mov	r3, r7
 800242c:	6019      	str	r1, [r3, #0]
	char generated_html[JSON_SIZE];
	memset(generated_html, 0, JSON_SIZE);
 800242e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002432:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f01c fa0b 	bl	801e854 <memset>
	u16_t offset = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	f8a7 36d6 	strh.w	r3, [r7, #1750]	; 0x6d6

	if (!strcmp(name, "/info.json")) {
 8002444:	463b      	mov	r3, r7
 8002446:	49a4      	ldr	r1, [pc, #656]	; (80026d8 <fs_open_custom+0x2bc>)
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	f7fd fec1 	bl	80001d0 <strcmp>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d14a      	bne.n	80024ea <fs_open_custom+0xce>

		char* ip=user_info.ip;
 8002454:	4ba1      	ldr	r3, [pc, #644]	; (80026dc <fs_open_custom+0x2c0>)
 8002456:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
		int zone=user_info.zone;
 800245a:	4ba0      	ldr	r3, [pc, #640]	; (80026dc <fs_open_custom+0x2c0>)
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
		char* contacts=user_info.contacts;
 8002462:	4b9f      	ldr	r3, [pc, #636]	; (80026e0 <fs_open_custom+0x2c4>)
 8002464:	f8c7 36b0 	str.w	r3, [r7, #1712]	; 0x6b0
		char* netmask=user_info.netmask;
 8002468:	4b9e      	ldr	r3, [pc, #632]	; (80026e4 <fs_open_custom+0x2c8>)
 800246a:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
		char macstr[18]; //string to be displayed on web page
		sprintf (macstr, "%02X:%02X:%02X:%02X:%02X:%02X", getMAC(0), getMAC(1), getMAC(2), getMAC(3), getMAC(4), getMAC(5) );
 800246e:	2000      	movs	r0, #0
 8002470:	f007 ffce 	bl	800a410 <getMAC>
 8002474:	4603      	mov	r3, r0
 8002476:	4698      	mov	r8, r3
 8002478:	2001      	movs	r0, #1
 800247a:	f007 ffc9 	bl	800a410 <getMAC>
 800247e:	4603      	mov	r3, r0
 8002480:	4699      	mov	r9, r3
 8002482:	2002      	movs	r0, #2
 8002484:	f007 ffc4 	bl	800a410 <getMAC>
 8002488:	4603      	mov	r3, r0
 800248a:	461c      	mov	r4, r3
 800248c:	2003      	movs	r0, #3
 800248e:	f007 ffbf 	bl	800a410 <getMAC>
 8002492:	4603      	mov	r3, r0
 8002494:	461d      	mov	r5, r3
 8002496:	2004      	movs	r0, #4
 8002498:	f007 ffba 	bl	800a410 <getMAC>
 800249c:	4603      	mov	r3, r0
 800249e:	461e      	mov	r6, r3
 80024a0:	2005      	movs	r0, #5
 80024a2:	f007 ffb5 	bl	800a410 <getMAC>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80024ac:	9303      	str	r3, [sp, #12]
 80024ae:	9602      	str	r6, [sp, #8]
 80024b0:	9501      	str	r5, [sp, #4]
 80024b2:	9400      	str	r4, [sp, #0]
 80024b4:	464b      	mov	r3, r9
 80024b6:	4642      	mov	r2, r8
 80024b8:	498b      	ldr	r1, [pc, #556]	; (80026e8 <fs_open_custom+0x2cc>)
 80024ba:	f01c fcdd 	bl	801ee78 <siprintf>

			offset = sprintf(generated_html,"[{\"IPaddress\":\"%s\",\"NetMask\":\"%s\",\"Timezone\":\"%d\",\"contacts\":\"%s\",\"software_version\":\"0.00001\",\"mac\":\"%s\"}]",ip,netmask,zone,contacts,macstr);
 80024be:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80024c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024c6:	9302      	str	r3, [sp, #8]
 80024c8:	f8d7 36b0 	ldr.w	r3, [r7, #1712]	; 0x6b0
 80024cc:	9301      	str	r3, [sp, #4]
 80024ce:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	; 0x6b4
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	f8d7 36ac 	ldr.w	r3, [r7, #1708]	; 0x6ac
 80024d8:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 80024dc:	4983      	ldr	r1, [pc, #524]	; (80026ec <fs_open_custom+0x2d0>)
 80024de:	f01c fccb 	bl	801ee78 <siprintf>
 80024e2:	4603      	mov	r3, r0
 80024e4:	f8a7 36d6 	strh.w	r3, [r7, #1750]	; 0x6d6
 80024e8:	e0b0      	b.n	800264c <fs_open_custom+0x230>
	}
	else if (!strcmp(name, "/uptime.json")) {
 80024ea:	463b      	mov	r3, r7
 80024ec:	4980      	ldr	r1, [pc, #512]	; (80026f0 <fs_open_custom+0x2d4>)
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	f7fd fe6e 	bl	80001d0 <strcmp>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f040 80a8 	bne.w	800264c <fs_open_custom+0x230>
		RTC_DateTypeDef dateStruct;
		RTC_TimeTypeDef timeStruct;

		//hrtc.Instance = RTC;
		if (gps.year[0]!='V'&&PPS_count>12){//gps.year[0]!='V'&&PPS_count>12
 80024fc:	4b7d      	ldr	r3, [pc, #500]	; (80026f4 <fs_open_custom+0x2d8>)
 80024fe:	799b      	ldrb	r3, [r3, #6]
 8002500:	2b56      	cmp	r3, #86	; 0x56
 8002502:	f000 8092 	beq.w	800262a <fs_open_custom+0x20e>
 8002506:	4b7c      	ldr	r3, [pc, #496]	; (80026f8 <fs_open_custom+0x2dc>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b0c      	cmp	r3, #12
 800250c:	f340 808d 	ble.w	800262a <fs_open_custom+0x20e>
			// Read actual date and time
			HAL_RTC_GetTime(&hrtc, &timeStruct, FORMAT_BIN); // Read time first!
 8002510:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002514:	2200      	movs	r2, #0
 8002516:	4619      	mov	r1, r3
 8002518:	4878      	ldr	r0, [pc, #480]	; (80026fc <fs_open_custom+0x2e0>)
 800251a:	f004 fd53 	bl	8006fc4 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &dateStruct, FORMAT_BIN);
 800251e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002522:	2200      	movs	r2, #0
 8002524:	4619      	mov	r1, r3
 8002526:	4875      	ldr	r0, [pc, #468]	; (80026fc <fs_open_custom+0x2e0>)
 8002528:	f004 fe51 	bl	80071ce <HAL_RTC_GetDate>

			struct tm timeinfo;

			timeinfo.tm_wday = dateStruct.WeekDay;
 800252c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	f107 030c 	add.w	r3, r7, #12
 8002538:	619a      	str	r2, [r3, #24]
			timeinfo.tm_mon = dateStruct.Month;//-1 do January==0 month
 800253a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800253e:	785b      	ldrb	r3, [r3, #1]
 8002540:	461a      	mov	r2, r3
 8002542:	f107 030c 	add.w	r3, r7, #12
 8002546:	611a      	str	r2, [r3, #16]
			timeinfo.tm_mday = dateStruct.Date;
 8002548:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800254c:	789b      	ldrb	r3, [r3, #2]
 800254e:	461a      	mov	r2, r3
 8002550:	f107 030c 	add.w	r3, r7, #12
 8002554:	60da      	str	r2, [r3, #12]
			timeinfo.tm_year = dateStruct.Year;
 8002556:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800255a:	78db      	ldrb	r3, [r3, #3]
 800255c:	461a      	mov	r2, r3
 800255e:	f107 030c 	add.w	r3, r7, #12
 8002562:	615a      	str	r2, [r3, #20]
			timeinfo.tm_hour = timeStruct.Hours;
 8002564:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	f107 030c 	add.w	r3, r7, #12
 8002570:	609a      	str	r2, [r3, #8]
			timeinfo.tm_min = timeStruct.Minutes;
 8002572:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002576:	785b      	ldrb	r3, [r3, #1]
 8002578:	461a      	mov	r2, r3
 800257a:	f107 030c 	add.w	r3, r7, #12
 800257e:	605a      	str	r2, [r3, #4]
			timeinfo.tm_sec = timeStruct.Seconds;
 8002580:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002584:	789b      	ldrb	r3, [r3, #2]
 8002586:	461a      	mov	r2, r3
 8002588:	f107 030c 	add.w	r3, r7, #12
 800258c:	601a      	str	r2, [r3, #0]

			time_t t = mktime(&timeinfo)+offset_unix[user_info.zone];
 800258e:	f107 030c 	add.w	r3, r7, #12
 8002592:	4618      	mov	r0, r3
 8002594:	f01c fa3e 	bl	801ea14 <mktime>
 8002598:	4b50      	ldr	r3, [pc, #320]	; (80026dc <fs_open_custom+0x2c0>)
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	4a58      	ldr	r2, [pc, #352]	; (8002700 <fs_open_custom+0x2e4>)
 800259e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a2:	461a      	mov	r2, r3
 80025a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80025a8:	1884      	adds	r4, r0, r2
 80025aa:	eb41 0503 	adc.w	r5, r1, r3
 80025ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025b2:	e9c3 4500 	strd	r4, r5, [r3]
			// time_t  to   tm

			localtime_r(  &t, &WebPageTime );
 80025b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025ba:	4952      	ldr	r1, [pc, #328]	; (8002704 <fs_open_custom+0x2e8>)
 80025bc:	4618      	mov	r0, r3
 80025be:	f01c f81d 	bl	801e5fc <localtime_r>

			int Hours=WebPageTime.tm_hour;
 80025c2:	4b50      	ldr	r3, [pc, #320]	; (8002704 <fs_open_custom+0x2e8>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
			int Minutes=WebPageTime.tm_min;
 80025ca:	4b4e      	ldr	r3, [pc, #312]	; (8002704 <fs_open_custom+0x2e8>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
			int Seconds=WebPageTime.tm_sec;
 80025d2:	4b4c      	ldr	r3, [pc, #304]	; (8002704 <fs_open_custom+0x2e8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
			int Date=WebPageTime.tm_mday;
 80025da:	4b4a      	ldr	r3, [pc, #296]	; (8002704 <fs_open_custom+0x2e8>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
			int Month=WebPageTime.tm_mon+1;
 80025e2:	4b48      	ldr	r3, [pc, #288]	; (8002704 <fs_open_custom+0x2e8>)
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	3301      	adds	r3, #1
 80025e8:	f8c7 36c0 	str.w	r3, [r7, #1728]	; 0x6c0
			int Year=WebPageTime.tm_year+2000;
 80025ec:	4b45      	ldr	r3, [pc, #276]	; (8002704 <fs_open_custom+0x2e8>)
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80025f4:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc


			offset = sprintf(generated_html,"%02d:%02d:%02d %02d.%02d.%04d",Hours,Minutes,Seconds,Date,Month,Year);
 80025f8:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80025fc:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8002600:	9303      	str	r3, [sp, #12]
 8002602:	f8d7 36c0 	ldr.w	r3, [r7, #1728]	; 0x6c0
 8002606:	9302      	str	r3, [sp, #8]
 8002608:	f8d7 36c4 	ldr.w	r3, [r7, #1732]	; 0x6c4
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	f8d7 36c8 	ldr.w	r3, [r7, #1736]	; 0x6c8
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	f8d7 36cc 	ldr.w	r3, [r7, #1740]	; 0x6cc
 8002618:	f8d7 26d0 	ldr.w	r2, [r7, #1744]	; 0x6d0
 800261c:	493a      	ldr	r1, [pc, #232]	; (8002708 <fs_open_custom+0x2ec>)
 800261e:	f01c fc2b 	bl	801ee78 <siprintf>
 8002622:	4603      	mov	r3, r0
 8002624:	f8a7 36d6 	strh.w	r3, [r7, #1750]	; 0x6d6
		if (gps.year[0]!='V'&&PPS_count>12){//gps.year[0]!='V'&&PPS_count>12
 8002628:	e010      	b.n	800264c <fs_open_custom+0x230>
		}
		else if (gps.year[0]=='V'||PPS_count<13) {
 800262a:	4b32      	ldr	r3, [pc, #200]	; (80026f4 <fs_open_custom+0x2d8>)
 800262c:	799b      	ldrb	r3, [r3, #6]
 800262e:	2b56      	cmp	r3, #86	; 0x56
 8002630:	d003      	beq.n	800263a <fs_open_custom+0x21e>
 8002632:	4b31      	ldr	r3, [pc, #196]	; (80026f8 <fs_open_custom+0x2dc>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b0c      	cmp	r3, #12
 8002638:	dc08      	bgt.n	800264c <fs_open_custom+0x230>
			offset = sprintf(generated_html,"no reference time");
 800263a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800263e:	4933      	ldr	r1, [pc, #204]	; (800270c <fs_open_custom+0x2f0>)
 8002640:	4618      	mov	r0, r3
 8002642:	f01c fc19 	bl	801ee78 <siprintf>
 8002646:	4603      	mov	r3, r0
 8002648:	f8a7 36d6 	strh.w	r3, [r7, #1750]	; 0x6d6
//		else if (gps.year[0]=='') {
//					offset = sprintf(generated_html,"no Reference Timestamp");
//				}
	}

	if (offset>0){
 800264c:	f8b7 36d6 	ldrh.w	r3, [r7, #1750]	; 0x6d6
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00e      	beq.n	8002672 <fs_open_custom+0x256>
		memset(file, 0, sizeof(struct fs_file));
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	2214      	movs	r2, #20
 8002658:	2100      	movs	r1, #0
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	f01c f8fa 	bl	801e854 <memset>
		file->pextension = mem_malloc(offset);
 8002660:	f8b7 36d6 	ldrh.w	r3, [r7, #1750]	; 0x6d6
 8002664:	4618      	mov	r0, r3
 8002666:	f010 fac1 	bl	8012bec <mem_malloc>
 800266a:	4602      	mov	r2, r0
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60da      	str	r2, [r3, #12]
	}

	if (file->pextension != NULL) {
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d020      	beq.n	80026be <fs_open_custom+0x2a2>
		/* instead of doing memcpy, you would generate e.g. a JSON here */
		memcpy(file->pextension, generated_html, offset);
 800267c:	1d3b      	adds	r3, r7, #4
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f8b7 26d6 	ldrh.w	r2, [r7, #1750]	; 0x6d6
 8002686:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800268a:	4618      	mov	r0, r3
 800268c:	f01c f8ba 	bl	801e804 <memcpy>
		file->data = (const char *)file->pextension;
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	1d3b      	adds	r3, r7, #4
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	601a      	str	r2, [r3, #0]
		file->len = offset; /* don't send the trailing 0 */
 800269c:	f8b7 26d6 	ldrh.w	r2, [r7, #1750]	; 0x6d6
 80026a0:	1d3b      	adds	r3, r7, #4
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
		file->index = file->len;
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	609a      	str	r2, [r3, #8]
		/* allow persisteng connections */
		file->flags = FS_FILE_FLAGS_HEADER_INCLUDED;
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2201      	movs	r2, #1
 80026b8:	741a      	strb	r2, [r3, #16]
		return 1;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e005      	b.n	80026ca <fs_open_custom+0x2ae>
	}

	printf("Extension fail %s\n\r",name);
 80026be:	463b      	mov	r3, r7
 80026c0:	6819      	ldr	r1, [r3, #0]
 80026c2:	4813      	ldr	r0, [pc, #76]	; (8002710 <fs_open_custom+0x2f4>)
 80026c4:	f01c fb4c 	bl	801ed60 <iprintf>
	return 0;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	f207 67dc 	addw	r7, r7, #1756	; 0x6dc
 80026d0:	46bd      	mov	sp, r7
 80026d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80026d6:	bf00      	nop
 80026d8:	080222fc 	.word	0x080222fc
 80026dc:	20004b00 	.word	0x20004b00
 80026e0:	20004b14 	.word	0x20004b14
 80026e4:	20004c13 	.word	0x20004c13
 80026e8:	08022308 	.word	0x08022308
 80026ec:	08022328 	.word	0x08022328
 80026f0:	08022394 	.word	0x08022394
 80026f4:	20004ae4 	.word	0x20004ae4
 80026f8:	20000510 	.word	0x20000510
 80026fc:	20004ccc 	.word	0x20004ccc
 8002700:	08025ca0 	.word	0x08025ca0
 8002704:	20004da4 	.word	0x20004da4
 8002708:	080223a4 	.word	0x080223a4
 800270c:	080223c4 	.word	0x080223c4
 8002710:	080223d8 	.word	0x080223d8

08002714 <fs_close_custom>:
void fs_close_custom(struct fs_file *file){
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	if (file && file->pextension) {
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00b      	beq.n	800273a <fs_close_custom+0x26>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <fs_close_custom+0x26>
		mem_free(file->pextension);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	4618      	mov	r0, r3
 8002730:	f010 f8c2 	bl	80128b8 <mem_free>
		file->pextension = NULL;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	60da      	str	r2, [r3, #12]
	}
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8002742:	b480      	push	{r7}
 8002744:	b087      	sub	sp, #28
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	429a      	cmp	r2, r3
 8002756:	d801      	bhi.n	800275c <jsmn_alloc_token+0x1a>
    return NULL;
 8002758:	2300      	movs	r3, #0
 800275a:	e014      	b.n	8002786 <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	1c59      	adds	r1, r3, #1
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	6051      	str	r1, [r2, #4]
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	4413      	add	r3, r2
 800276c:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f04f 32ff 	mov.w	r2, #4294967295
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2200      	movs	r2, #0
 8002782:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8002784:	697b      	ldr	r3, [r7, #20]
}
 8002786:	4618      	mov	r0, r3
 8002788:	371c      	adds	r7, #28
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8002792:	b480      	push	{r7}
 8002794:	b085      	sub	sp, #20
 8002796:	af00      	add	r7, sp, #0
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	603b      	str	r3, [r7, #0]
 800279e:	460b      	mov	r3, r1
 80027a0:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	7afa      	ldrb	r2, [r7, #11]
 80027a6:	701a      	strb	r2, [r3, #0]
  token->start = start;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	605a      	str	r2, [r3, #4]
  token->end = end;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	609a      	str	r2, [r3, #8]
  token->size = 0;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	60da      	str	r2, [r3, #12]
}
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80027dc:	e07c      	b.n	80028d8 <jsmn_parse_primitive+0x110>
    switch (js[parser->pos]) {
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	4413      	add	r3, r2
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b7d      	cmp	r3, #125	; 0x7d
 80027ea:	f000 8083 	beq.w	80028f4 <jsmn_parse_primitive+0x12c>
 80027ee:	2b7d      	cmp	r3, #125	; 0x7d
 80027f0:	dc58      	bgt.n	80028a4 <jsmn_parse_primitive+0xdc>
 80027f2:	2b5d      	cmp	r3, #93	; 0x5d
 80027f4:	d07e      	beq.n	80028f4 <jsmn_parse_primitive+0x12c>
 80027f6:	2b5d      	cmp	r3, #93	; 0x5d
 80027f8:	dc54      	bgt.n	80028a4 <jsmn_parse_primitive+0xdc>
 80027fa:	2b2c      	cmp	r3, #44	; 0x2c
 80027fc:	dc50      	bgt.n	80028a0 <jsmn_parse_primitive+0xd8>
 80027fe:	2b09      	cmp	r3, #9
 8002800:	db50      	blt.n	80028a4 <jsmn_parse_primitive+0xdc>
 8002802:	3b09      	subs	r3, #9
 8002804:	2b23      	cmp	r3, #35	; 0x23
 8002806:	d84d      	bhi.n	80028a4 <jsmn_parse_primitive+0xdc>
 8002808:	a201      	add	r2, pc, #4	; (adr r2, 8002810 <jsmn_parse_primitive+0x48>)
 800280a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280e:	bf00      	nop
 8002810:	080028f5 	.word	0x080028f5
 8002814:	080028f5 	.word	0x080028f5
 8002818:	080028a5 	.word	0x080028a5
 800281c:	080028a5 	.word	0x080028a5
 8002820:	080028f5 	.word	0x080028f5
 8002824:	080028a5 	.word	0x080028a5
 8002828:	080028a5 	.word	0x080028a5
 800282c:	080028a5 	.word	0x080028a5
 8002830:	080028a5 	.word	0x080028a5
 8002834:	080028a5 	.word	0x080028a5
 8002838:	080028a5 	.word	0x080028a5
 800283c:	080028a5 	.word	0x080028a5
 8002840:	080028a5 	.word	0x080028a5
 8002844:	080028a5 	.word	0x080028a5
 8002848:	080028a5 	.word	0x080028a5
 800284c:	080028a5 	.word	0x080028a5
 8002850:	080028a5 	.word	0x080028a5
 8002854:	080028a5 	.word	0x080028a5
 8002858:	080028a5 	.word	0x080028a5
 800285c:	080028a5 	.word	0x080028a5
 8002860:	080028a5 	.word	0x080028a5
 8002864:	080028a5 	.word	0x080028a5
 8002868:	080028a5 	.word	0x080028a5
 800286c:	080028f5 	.word	0x080028f5
 8002870:	080028a5 	.word	0x080028a5
 8002874:	080028a5 	.word	0x080028a5
 8002878:	080028a5 	.word	0x080028a5
 800287c:	080028a5 	.word	0x080028a5
 8002880:	080028a5 	.word	0x080028a5
 8002884:	080028a5 	.word	0x080028a5
 8002888:	080028a5 	.word	0x080028a5
 800288c:	080028a5 	.word	0x080028a5
 8002890:	080028a5 	.word	0x080028a5
 8002894:	080028a5 	.word	0x080028a5
 8002898:	080028a5 	.word	0x080028a5
 800289c:	080028f5 	.word	0x080028f5
 80028a0:	2b3a      	cmp	r3, #58	; 0x3a
 80028a2:	d027      	beq.n	80028f4 <jsmn_parse_primitive+0x12c>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 80028a4:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	4413      	add	r3, r2
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b1f      	cmp	r3, #31
 80028b2:	d906      	bls.n	80028c2 <jsmn_parse_primitive+0xfa>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	4413      	add	r3, r2
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b7e      	cmp	r3, #126	; 0x7e
 80028c0:	d905      	bls.n	80028ce <jsmn_parse_primitive+0x106>
      parser->pos = start;
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 80028c8:	f06f 0301 	mvn.w	r3, #1
 80028cc:	e03b      	b.n	8002946 <jsmn_parse_primitive+0x17e>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d90a      	bls.n	80028f8 <jsmn_parse_primitive+0x130>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	4413      	add	r3, r2
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f47f af76 	bne.w	80027de <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 80028f2:	e001      	b.n	80028f8 <jsmn_parse_primitive+0x130>
      goto found;
 80028f4:	bf00      	nop
 80028f6:	e000      	b.n	80028fa <jsmn_parse_primitive+0x132>
found:
 80028f8:	bf00      	nop
  if (tokens == NULL) {
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d106      	bne.n	800290e <jsmn_parse_primitive+0x146>
    parser->pos--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	1e5a      	subs	r2, r3, #1
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	601a      	str	r2, [r3, #0]
    return 0;
 800290a:	2300      	movs	r3, #0
 800290c:	e01b      	b.n	8002946 <jsmn_parse_primitive+0x17e>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 800290e:	6a3a      	ldr	r2, [r7, #32]
 8002910:	6839      	ldr	r1, [r7, #0]
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f7ff ff15 	bl	8002742 <jsmn_alloc_token>
 8002918:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d105      	bne.n	800292c <jsmn_parse_primitive+0x164>
    parser->pos = start;
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
 800292a:	e00c      	b.n	8002946 <jsmn_parse_primitive+0x17e>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	2108      	movs	r1, #8
 8002934:	6938      	ldr	r0, [r7, #16]
 8002936:	f7ff ff2c 	bl	8002792 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	1e5a      	subs	r2, r3, #1
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	601a      	str	r2, [r3, #0]
  return 0;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop

08002950 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	61bb      	str	r3, [r7, #24]
  
  /* Skip starting quote */
  parser->pos++;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	601a      	str	r2, [r3, #0]
  
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 800296e:	e0e6      	b.n	8002b3e <jsmn_parse_string+0x1ee>
    char c = js[parser->pos];
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	4413      	add	r3, r2
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 800297c:	7dfb      	ldrb	r3, [r7, #23]
 800297e:	2b22      	cmp	r3, #34	; 0x22
 8002980:	d11d      	bne.n	80029be <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <jsmn_parse_string+0x3c>
        return 0;
 8002988:	2300      	movs	r3, #0
 800298a:	e0ea      	b.n	8002b62 <jsmn_parse_string+0x212>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 800298c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800298e:	6839      	ldr	r1, [r7, #0]
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f7ff fed6 	bl	8002742 <jsmn_alloc_token>
 8002996:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d105      	bne.n	80029aa <jsmn_parse_string+0x5a>
        parser->pos = start;
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 80029a4:	f04f 33ff 	mov.w	r3, #4294967295
 80029a8:	e0db      	b.n	8002b62 <jsmn_parse_string+0x212>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2104      	movs	r1, #4
 80029b4:	6938      	ldr	r0, [r7, #16]
 80029b6:	f7ff feec 	bl	8002792 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	e0d1      	b.n	8002b62 <jsmn_parse_string+0x212>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 80029be:	7dfb      	ldrb	r3, [r7, #23]
 80029c0:	2b5c      	cmp	r3, #92	; 0x5c
 80029c2:	f040 80b4 	bne.w	8002b2e <jsmn_parse_string+0x1de>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3301      	adds	r3, #1
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	f240 80ad 	bls.w	8002b2e <jsmn_parse_string+0x1de>
      int i;
      parser->pos++;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	4413      	add	r3, r2
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b75      	cmp	r3, #117	; 0x75
 80029ea:	f300 809a 	bgt.w	8002b22 <jsmn_parse_string+0x1d2>
 80029ee:	2b5c      	cmp	r3, #92	; 0x5c
 80029f0:	da06      	bge.n	8002a00 <jsmn_parse_string+0xb0>
 80029f2:	2b22      	cmp	r3, #34	; 0x22
 80029f4:	f000 809d 	beq.w	8002b32 <jsmn_parse_string+0x1e2>
 80029f8:	2b2f      	cmp	r3, #47	; 0x2f
 80029fa:	f000 809a 	beq.w	8002b32 <jsmn_parse_string+0x1e2>
 80029fe:	e090      	b.n	8002b22 <jsmn_parse_string+0x1d2>
 8002a00:	3b5c      	subs	r3, #92	; 0x5c
 8002a02:	2b19      	cmp	r3, #25
 8002a04:	f200 808d 	bhi.w	8002b22 <jsmn_parse_string+0x1d2>
 8002a08:	a201      	add	r2, pc, #4	; (adr r2, 8002a10 <jsmn_parse_string+0xc0>)
 8002a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0e:	bf00      	nop
 8002a10:	08002b33 	.word	0x08002b33
 8002a14:	08002b23 	.word	0x08002b23
 8002a18:	08002b23 	.word	0x08002b23
 8002a1c:	08002b23 	.word	0x08002b23
 8002a20:	08002b23 	.word	0x08002b23
 8002a24:	08002b23 	.word	0x08002b23
 8002a28:	08002b33 	.word	0x08002b33
 8002a2c:	08002b23 	.word	0x08002b23
 8002a30:	08002b23 	.word	0x08002b23
 8002a34:	08002b23 	.word	0x08002b23
 8002a38:	08002b33 	.word	0x08002b33
 8002a3c:	08002b23 	.word	0x08002b23
 8002a40:	08002b23 	.word	0x08002b23
 8002a44:	08002b23 	.word	0x08002b23
 8002a48:	08002b23 	.word	0x08002b23
 8002a4c:	08002b23 	.word	0x08002b23
 8002a50:	08002b23 	.word	0x08002b23
 8002a54:	08002b23 	.word	0x08002b23
 8002a58:	08002b33 	.word	0x08002b33
 8002a5c:	08002b23 	.word	0x08002b23
 8002a60:	08002b23 	.word	0x08002b23
 8002a64:	08002b23 	.word	0x08002b23
 8002a68:	08002b33 	.word	0x08002b33
 8002a6c:	08002b23 	.word	0x08002b23
 8002a70:	08002b33 	.word	0x08002b33
 8002a74:	08002a79 	.word	0x08002a79
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	e037      	b.n	8002af8 <jsmn_parse_string+0x1a8>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	4413      	add	r3, r2
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b2f      	cmp	r3, #47	; 0x2f
 8002a94:	d906      	bls.n	8002aa4 <jsmn_parse_string+0x154>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b39      	cmp	r3, #57	; 0x39
 8002aa2:	d921      	bls.n	8002ae8 <jsmn_parse_string+0x198>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	4413      	add	r3, r2
 8002aac:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8002aae:	2b40      	cmp	r3, #64	; 0x40
 8002ab0:	d906      	bls.n	8002ac0 <jsmn_parse_string+0x170>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	4413      	add	r3, r2
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b46      	cmp	r3, #70	; 0x46
 8002abe:	d913      	bls.n	8002ae8 <jsmn_parse_string+0x198>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8002aca:	2b60      	cmp	r3, #96	; 0x60
 8002acc:	d906      	bls.n	8002adc <jsmn_parse_string+0x18c>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b66      	cmp	r3, #102	; 0x66
 8002ada:	d905      	bls.n	8002ae8 <jsmn_parse_string+0x198>
            parser->pos = start;
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 8002ae2:	f06f 0301 	mvn.w	r3, #1
 8002ae6:	e03c      	b.n	8002b62 <jsmn_parse_string+0x212>
          }
          parser->pos++;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	601a      	str	r2, [r3, #0]
             i++) {
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3301      	adds	r3, #1
 8002af6:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	dc0b      	bgt.n	8002b16 <jsmn_parse_string+0x1c6>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d906      	bls.n	8002b16 <jsmn_parse_string+0x1c6>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	4413      	add	r3, r2
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1b8      	bne.n	8002a88 <jsmn_parse_string+0x138>
        }
        parser->pos--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	1e5a      	subs	r2, r3, #1
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	601a      	str	r2, [r3, #0]
        break;
 8002b20:	e008      	b.n	8002b34 <jsmn_parse_string+0x1e4>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 8002b28:	f06f 0301 	mvn.w	r3, #1
 8002b2c:	e019      	b.n	8002b62 <jsmn_parse_string+0x212>
      }
    }
 8002b2e:	bf00      	nop
 8002b30:	e000      	b.n	8002b34 <jsmn_parse_string+0x1e4>
        break;
 8002b32:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d907      	bls.n	8002b58 <jsmn_parse_string+0x208>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	4413      	add	r3, r2
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f47f af0c 	bne.w	8002970 <jsmn_parse_string+0x20>
  }
  parser->pos = start;
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 8002b5e:	f06f 0302 	mvn.w	r3, #2
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3720      	adds	r7, #32
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop

08002b6c <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08c      	sub	sp, #48	; 0x30
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002b80:	e1bf      	b.n	8002f02 <jsmn_parse+0x396>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	4413      	add	r3, r2
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 8002b8e:	7ffb      	ldrb	r3, [r7, #31]
 8002b90:	2b7d      	cmp	r3, #125	; 0x7d
 8002b92:	f000 80b9 	beq.w	8002d08 <jsmn_parse+0x19c>
 8002b96:	2b7d      	cmp	r3, #125	; 0x7d
 8002b98:	f300 8181 	bgt.w	8002e9e <jsmn_parse+0x332>
 8002b9c:	2b7b      	cmp	r3, #123	; 0x7b
 8002b9e:	d07c      	beq.n	8002c9a <jsmn_parse+0x12e>
 8002ba0:	2b7b      	cmp	r3, #123	; 0x7b
 8002ba2:	f300 817c 	bgt.w	8002e9e <jsmn_parse+0x332>
 8002ba6:	2b5d      	cmp	r3, #93	; 0x5d
 8002ba8:	f000 80ae 	beq.w	8002d08 <jsmn_parse+0x19c>
 8002bac:	2b5d      	cmp	r3, #93	; 0x5d
 8002bae:	f300 8176 	bgt.w	8002e9e <jsmn_parse+0x332>
 8002bb2:	2b3a      	cmp	r3, #58	; 0x3a
 8002bb4:	dc6e      	bgt.n	8002c94 <jsmn_parse+0x128>
 8002bb6:	2b09      	cmp	r3, #9
 8002bb8:	f2c0 8171 	blt.w	8002e9e <jsmn_parse+0x332>
 8002bbc:	3b09      	subs	r3, #9
 8002bbe:	2b31      	cmp	r3, #49	; 0x31
 8002bc0:	f200 816d 	bhi.w	8002e9e <jsmn_parse+0x332>
 8002bc4:	a201      	add	r2, pc, #4	; (adr r2, 8002bcc <jsmn_parse+0x60>)
 8002bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bca:	bf00      	nop
 8002bcc:	08002ee3 	.word	0x08002ee3
 8002bd0:	08002ee3 	.word	0x08002ee3
 8002bd4:	08002e9f 	.word	0x08002e9f
 8002bd8:	08002e9f 	.word	0x08002e9f
 8002bdc:	08002ee3 	.word	0x08002ee3
 8002be0:	08002e9f 	.word	0x08002e9f
 8002be4:	08002e9f 	.word	0x08002e9f
 8002be8:	08002e9f 	.word	0x08002e9f
 8002bec:	08002e9f 	.word	0x08002e9f
 8002bf0:	08002e9f 	.word	0x08002e9f
 8002bf4:	08002e9f 	.word	0x08002e9f
 8002bf8:	08002e9f 	.word	0x08002e9f
 8002bfc:	08002e9f 	.word	0x08002e9f
 8002c00:	08002e9f 	.word	0x08002e9f
 8002c04:	08002e9f 	.word	0x08002e9f
 8002c08:	08002e9f 	.word	0x08002e9f
 8002c0c:	08002e9f 	.word	0x08002e9f
 8002c10:	08002e9f 	.word	0x08002e9f
 8002c14:	08002e9f 	.word	0x08002e9f
 8002c18:	08002e9f 	.word	0x08002e9f
 8002c1c:	08002e9f 	.word	0x08002e9f
 8002c20:	08002e9f 	.word	0x08002e9f
 8002c24:	08002e9f 	.word	0x08002e9f
 8002c28:	08002ee3 	.word	0x08002ee3
 8002c2c:	08002e9f 	.word	0x08002e9f
 8002c30:	08002dbd 	.word	0x08002dbd
 8002c34:	08002e9f 	.word	0x08002e9f
 8002c38:	08002e9f 	.word	0x08002e9f
 8002c3c:	08002e9f 	.word	0x08002e9f
 8002c40:	08002e9f 	.word	0x08002e9f
 8002c44:	08002e9f 	.word	0x08002e9f
 8002c48:	08002e9f 	.word	0x08002e9f
 8002c4c:	08002e9f 	.word	0x08002e9f
 8002c50:	08002e9f 	.word	0x08002e9f
 8002c54:	08002e9f 	.word	0x08002e9f
 8002c58:	08002e11 	.word	0x08002e11
 8002c5c:	08002e9f 	.word	0x08002e9f
 8002c60:	08002e9f 	.word	0x08002e9f
 8002c64:	08002e9f 	.word	0x08002e9f
 8002c68:	08002e9f 	.word	0x08002e9f
 8002c6c:	08002e9f 	.word	0x08002e9f
 8002c70:	08002e9f 	.word	0x08002e9f
 8002c74:	08002e9f 	.word	0x08002e9f
 8002c78:	08002e9f 	.word	0x08002e9f
 8002c7c:	08002e9f 	.word	0x08002e9f
 8002c80:	08002e9f 	.word	0x08002e9f
 8002c84:	08002e9f 	.word	0x08002e9f
 8002c88:	08002e9f 	.word	0x08002e9f
 8002c8c:	08002e9f 	.word	0x08002e9f
 8002c90:	08002e03 	.word	0x08002e03
 8002c94:	2b5b      	cmp	r3, #91	; 0x5b
 8002c96:	f040 8102 	bne.w	8002e9e <jsmn_parse+0x332>
    case '{':
    case '[':
      count++;
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 811f 	beq.w	8002ee6 <jsmn_parse+0x37a>
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8002ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002caa:	6839      	ldr	r1, [r7, #0]
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f7ff fd48 	bl	8002742 <jsmn_alloc_token>
 8002cb2:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d102      	bne.n	8002cc0 <jsmn_parse+0x154>
        return JSMN_ERROR_NOMEM;
 8002cba:	f04f 33ff 	mov.w	r3, #4294967295
 8002cbe:	e14f      	b.n	8002f60 <jsmn_parse+0x3f4>
      }
      if (parser->toksuper != -1) {
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d00a      	beq.n	8002ce0 <jsmn_parse+0x174>
        jsmntok_t *t = &tokens[parser->toksuper];
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]
        /* In strict mode an object or array can't become a key */
        if (t->type == JSMN_OBJECT) {
          return JSMN_ERROR_INVAL;
        }
#endif
        t->size++;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
        token->parent = parser->toksuper;
#endif
      }
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 8002ce0:	7ffb      	ldrb	r3, [r7, #31]
 8002ce2:	2b7b      	cmp	r3, #123	; 0x7b
 8002ce4:	d101      	bne.n	8002cea <jsmn_parse+0x17e>
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	e000      	b.n	8002cec <jsmn_parse+0x180>
 8002cea:	2202      	movs	r2, #2
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	461a      	mov	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	609a      	str	r2, [r3, #8]
      break;
 8002d06:	e0f7      	b.n	8002ef8 <jsmn_parse+0x38c>
    case '}':
    case ']':
      if (tokens == NULL) {
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 80ed 	beq.w	8002eea <jsmn_parse+0x37e>
        break;
      }
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 8002d10:	7ffb      	ldrb	r3, [r7, #31]
 8002d12:	2b7d      	cmp	r3, #125	; 0x7d
 8002d14:	d101      	bne.n	8002d1a <jsmn_parse+0x1ae>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <jsmn_parse+0x1b0>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	77bb      	strb	r3, [r7, #30]
          break;
        }
        token = &tokens[token->parent];
      }
#else
      for (i = parser->toknext - 1; i >= 0; i--) {
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
 8002d26:	e024      	b.n	8002d72 <jsmn_parse+0x206>
        token = &tokens[i];
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	4413      	add	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3a:	d017      	beq.n	8002d6c <jsmn_parse+0x200>
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d112      	bne.n	8002d6c <jsmn_parse+0x200>
          if (token->type != type) {
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	7fba      	ldrb	r2, [r7, #30]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d002      	beq.n	8002d56 <jsmn_parse+0x1ea>
            return JSMN_ERROR_INVAL;
 8002d50:	f06f 0301 	mvn.w	r3, #1
 8002d54:	e104      	b.n	8002f60 <jsmn_parse+0x3f4>
          }
          parser->toksuper = -1;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5c:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3301      	adds	r3, #1
 8002d64:	461a      	mov	r2, r3
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	609a      	str	r2, [r3, #8]
          break;
 8002d6a:	e005      	b.n	8002d78 <jsmn_parse+0x20c>
      for (i = parser->toknext - 1; i >= 0; i--) {
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	dad7      	bge.n	8002d28 <jsmn_parse+0x1bc>
        }
      }
      /* Error if unmatched closing bracket */
      if (i == -1) {
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7e:	d119      	bne.n	8002db4 <jsmn_parse+0x248>
        return JSMN_ERROR_INVAL;
 8002d80:	f06f 0301 	mvn.w	r3, #1
 8002d84:	e0ec      	b.n	8002f60 <jsmn_parse+0x3f4>
      }
      for (; i >= 0; i--) {
        token = &tokens[i];
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d009      	beq.n	8002dae <jsmn_parse+0x242>
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da2:	d104      	bne.n	8002dae <jsmn_parse+0x242>
          parser->toksuper = i;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da8:	609a      	str	r2, [r3, #8]
          break;
 8002daa:	bf00      	nop
        }
      }
#endif
      break;
 8002dac:	e0a4      	b.n	8002ef8 <jsmn_parse+0x38c>
      for (; i >= 0; i--) {
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	3b01      	subs	r3, #1
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	dae5      	bge.n	8002d86 <jsmn_parse+0x21a>
      break;
 8002dba:	e09d      	b.n	8002ef8 <jsmn_parse+0x38c>
    case '\"':
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f7ff fdc2 	bl	8002950 <jsmn_parse_string>
 8002dcc:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	da01      	bge.n	8002dd8 <jsmn_parse+0x26c>
        return r;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	e0c3      	b.n	8002f60 <jsmn_parse+0x3f4>
      }
      count++;
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de6:	f000 8082 	beq.w	8002eee <jsmn_parse+0x382>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d07e      	beq.n	8002eee <jsmn_parse+0x382>
        tokens[parser->toksuper].size++;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	4413      	add	r3, r2
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	3201      	adds	r2, #1
 8002dfe:	60da      	str	r2, [r3, #12]
      }
      break;
 8002e00:	e075      	b.n	8002eee <jsmn_parse+0x382>
    case '\r':
    case '\n':
    case ' ':
      break;
    case ':':
      parser->toksuper = parser->toknext - 1;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	609a      	str	r2, [r3, #8]
      break;
 8002e0e:	e073      	b.n	8002ef8 <jsmn_parse+0x38c>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d06d      	beq.n	8002ef2 <jsmn_parse+0x386>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1e:	d068      	beq.n	8002ef2 <jsmn_parse+0x386>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	4413      	add	r3, r2
 8002e2a:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d060      	beq.n	8002ef2 <jsmn_parse+0x386>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	4413      	add	r3, r2
 8002e3a:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d058      	beq.n	8002ef2 <jsmn_parse+0x386>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	3b01      	subs	r3, #1
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
 8002e48:	e025      	b.n	8002e96 <jsmn_parse+0x32a>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	4413      	add	r3, r2
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d006      	beq.n	8002e66 <jsmn_parse+0x2fa>
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	4413      	add	r3, r2
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d114      	bne.n	8002e90 <jsmn_parse+0x324>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d00c      	beq.n	8002e90 <jsmn_parse+0x324>
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e84:	d104      	bne.n	8002e90 <jsmn_parse+0x324>
              parser->toksuper = i;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e8a:	609a      	str	r2, [r3, #8]
              break;
 8002e8c:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 8002e8e:	e030      	b.n	8002ef2 <jsmn_parse+0x386>
        for (i = parser->toknext - 1; i >= 0; i--) {
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	3b01      	subs	r3, #1
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	dad6      	bge.n	8002e4a <jsmn_parse+0x2de>
      break;
 8002e9c:	e029      	b.n	8002ef2 <jsmn_parse+0x386>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f7ff fc8d 	bl	80027c8 <jsmn_parse_primitive>
 8002eae:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	da01      	bge.n	8002eba <jsmn_parse+0x34e>
        return r;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	e052      	b.n	8002f60 <jsmn_parse+0x3f4>
      }
      count++;
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d015      	beq.n	8002ef6 <jsmn_parse+0x38a>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d012      	beq.n	8002ef6 <jsmn_parse+0x38a>
        tokens[parser->toksuper].size++;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	4413      	add	r3, r2
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	3201      	adds	r2, #1
 8002ede:	60da      	str	r2, [r3, #12]
      }
      break;
 8002ee0:	e009      	b.n	8002ef6 <jsmn_parse+0x38a>
      break;
 8002ee2:	bf00      	nop
 8002ee4:	e008      	b.n	8002ef8 <jsmn_parse+0x38c>
        break;
 8002ee6:	bf00      	nop
 8002ee8:	e006      	b.n	8002ef8 <jsmn_parse+0x38c>
        break;
 8002eea:	bf00      	nop
 8002eec:	e004      	b.n	8002ef8 <jsmn_parse+0x38c>
      break;
 8002eee:	bf00      	nop
 8002ef0:	e002      	b.n	8002ef8 <jsmn_parse+0x38c>
      break;
 8002ef2:	bf00      	nop
 8002ef4:	e000      	b.n	8002ef8 <jsmn_parse+0x38c>
      break;
 8002ef6:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d907      	bls.n	8002f1c <jsmn_parse+0x3b0>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	4413      	add	r3, r2
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f47f ae33 	bne.w	8002b82 <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d01d      	beq.n	8002f5e <jsmn_parse+0x3f2>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2a:	e015      	b.n	8002f58 <jsmn_parse+0x3ec>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	4413      	add	r3, r2
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3a:	d00a      	beq.n	8002f52 <jsmn_parse+0x3e6>
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	4413      	add	r3, r2
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4a:	d102      	bne.n	8002f52 <jsmn_parse+0x3e6>
        return JSMN_ERROR_PART;
 8002f4c:	f06f 0302 	mvn.w	r3, #2
 8002f50:	e006      	b.n	8002f60 <jsmn_parse+0x3f4>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	3b01      	subs	r3, #1
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	dae6      	bge.n	8002f2c <jsmn_parse+0x3c0>
      }
    }
  }

  return count;
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3728      	adds	r7, #40	; 0x28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f82:	609a      	str	r2, [r3, #8]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <httpd_post_begin>:
	}
	return -1;
}
err_t
httpd_post_begin(void *connection, const char *uri, const char *http_request, u16_t http_request_len, int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	807b      	strh	r3, [r7, #2]
	post_offset=0;
 8002f9e:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <httpd_post_begin+0x68>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]

	memset(buf_data,0,sizeof(buf_data));
 8002fa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fa8:	2100      	movs	r1, #0
 8002faa:	4814      	ldr	r0, [pc, #80]	; (8002ffc <httpd_post_begin+0x6c>)
 8002fac:	f01b fc52 	bl	801e854 <memset>
	LWIP_UNUSED_ARG(connection);
	LWIP_UNUSED_ARG(http_request);
	LWIP_UNUSED_ARG(http_request_len);
	LWIP_UNUSED_ARG(content_len);
	LWIP_UNUSED_ARG(post_auto_wnd);
	if (!memcmp(uri, "/info.html", 10)) {
 8002fb0:	220a      	movs	r2, #10
 8002fb2:	4913      	ldr	r1, [pc, #76]	; (8003000 <httpd_post_begin+0x70>)
 8002fb4:	68b8      	ldr	r0, [r7, #8]
 8002fb6:	f01b fc17 	bl	801e7e8 <memcmp>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d115      	bne.n	8002fec <httpd_post_begin+0x5c>
		if (current_connection != connection) {
 8002fc0:	4b10      	ldr	r3, [pc, #64]	; (8003004 <httpd_post_begin+0x74>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d010      	beq.n	8002fec <httpd_post_begin+0x5c>
			current_connection = connection;
 8002fca:	4a0e      	ldr	r2, [pc, #56]	; (8003004 <httpd_post_begin+0x74>)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6013      	str	r3, [r2, #0]
			valid_connection = NULL;
 8002fd0:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <httpd_post_begin+0x78>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
			/* default page is "login failed" */
			snprintf(response_uri, response_uri_len, "/info.html");
 8002fd6:	8c3b      	ldrh	r3, [r7, #32]
 8002fd8:	4a09      	ldr	r2, [pc, #36]	; (8003000 <httpd_post_begin+0x70>)
 8002fda:	4619      	mov	r1, r3
 8002fdc:	69f8      	ldr	r0, [r7, #28]
 8002fde:	f01b ff17 	bl	801ee10 <sniprintf>
			/* e.g. for large uploads to slow flash over a fast connection, you should
         manually update the rx window. That way, a sender can only send a full
         tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
         We do not need to throttle upload speed here, so: */
			*post_auto_wnd = 1;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	701a      	strb	r2, [r3, #0]
			return ERR_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	e001      	b.n	8002ff0 <httpd_post_begin+0x60>
		}
	}
	return ERR_VAL;
 8002fec:	f06f 0305 	mvn.w	r3, #5
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20000560 	.word	0x20000560
 8002ffc:	20004dc8 	.word	0x20004dc8
 8003000:	080223ec 	.word	0x080223ec
 8003004:	20000558 	.word	0x20000558
 8003008:	2000055c 	.word	0x2000055c

0800300c <httpd_post_receive_data>:

err_t
httpd_post_receive_data(void *connection, struct pbuf *p)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8003012:	b082      	sub	sp, #8
 8003014:	af02      	add	r7, sp, #8
 8003016:	f107 0320 	add.w	r3, r7, #32
 800301a:	3b1c      	subs	r3, #28
 800301c:	6018      	str	r0, [r3, #0]
 800301e:	463b      	mov	r3, r7
 8003020:	6019      	str	r1, [r3, #0]
	err_t ret;

	if ((post_offset+p->len) <= USER_PASS_BUFSIZE){
 8003022:	463b      	mov	r3, r7
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	895b      	ldrh	r3, [r3, #10]
 8003028:	461a      	mov	r2, r3
 800302a:	4b4b      	ldr	r3, [pc, #300]	; (8003158 <httpd_post_receive_data+0x14c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4413      	add	r3, r2
 8003030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003034:	dc2a      	bgt.n	800308c <httpd_post_receive_data+0x80>
		strncpy(buf_data+post_offset, p->payload,p->len);
 8003036:	4b48      	ldr	r3, [pc, #288]	; (8003158 <httpd_post_receive_data+0x14c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	4b47      	ldr	r3, [pc, #284]	; (800315c <httpd_post_receive_data+0x150>)
 800303e:	18d0      	adds	r0, r2, r3
 8003040:	463b      	mov	r3, r7
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6859      	ldr	r1, [r3, #4]
 8003046:	463b      	mov	r3, r7
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	895b      	ldrh	r3, [r3, #10]
 800304c:	461a      	mov	r2, r3
 800304e:	f01b ff52 	bl	801eef6 <strncpy>
	else{
		ret = ERR_VAL;
		pbuf_free(p);
		return ret;
	}
	post_offset += p->len;
 8003052:	463b      	mov	r3, r7
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	895b      	ldrh	r3, [r3, #10]
 8003058:	461a      	mov	r2, r3
 800305a:	4b3f      	ldr	r3, [pc, #252]	; (8003158 <httpd_post_receive_data+0x14c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4413      	add	r3, r2
 8003060:	4a3d      	ldr	r2, [pc, #244]	; (8003158 <httpd_post_receive_data+0x14c>)
 8003062:	6013      	str	r3, [r2, #0]

	int data_len = strlen(buf_data);
 8003064:	483d      	ldr	r0, [pc, #244]	; (800315c <httpd_post_receive_data+0x150>)
 8003066:	f7fd f8bd 	bl	80001e4 <strlen>
 800306a:	4603      	mov	r3, r0
 800306c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003070:	f102 0218 	add.w	r2, r2, #24
 8003074:	6013      	str	r3, [r2, #0]
	if (buf_data[data_len-1]!=']'){
 8003076:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800307a:	f103 0318 	add.w	r3, r3, #24
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3b01      	subs	r3, #1
 8003082:	4a36      	ldr	r2, [pc, #216]	; (800315c <httpd_post_receive_data+0x150>)
 8003084:	5cd3      	ldrb	r3, [r2, r3]
 8003086:	2b5d      	cmp	r3, #93	; 0x5d
 8003088:	d022      	beq.n	80030d0 <httpd_post_receive_data+0xc4>
 800308a:	e010      	b.n	80030ae <httpd_post_receive_data+0xa2>
		ret = ERR_VAL;
 800308c:	23fa      	movs	r3, #250	; 0xfa
 800308e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003092:	f102 021f 	add.w	r2, r2, #31
 8003096:	7013      	strb	r3, [r2, #0]
		pbuf_free(p);
 8003098:	463b      	mov	r3, r7
 800309a:	6818      	ldr	r0, [r3, #0]
 800309c:	f010 fdf8 	bl	8013c90 <pbuf_free>
		return ret;
 80030a0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80030a4:	f103 031f 	add.w	r3, r3, #31
 80030a8:	f993 3000 	ldrsb.w	r3, [r3]
 80030ac:	e04e      	b.n	800314c <httpd_post_receive_data+0x140>
		ret = ERR_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80030b4:	f102 021f 	add.w	r2, r2, #31
 80030b8:	7013      	strb	r3, [r2, #0]
		pbuf_free(p);
 80030ba:	463b      	mov	r3, r7
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	f010 fde7 	bl	8013c90 <pbuf_free>
		return ret;
 80030c2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80030c6:	f103 031f 	add.w	r3, r3, #31
 80030ca:	f993 3000 	ldrsb.w	r3, [r3]
 80030ce:	e03d      	b.n	800314c <httpd_post_receive_data+0x140>
	}

	LWIP_ASSERT("NULL pbuf", p != NULL);
 80030d0:	463b      	mov	r3, r7
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d105      	bne.n	80030e4 <httpd_post_receive_data+0xd8>
 80030d8:	4b21      	ldr	r3, [pc, #132]	; (8003160 <httpd_post_receive_data+0x154>)
 80030da:	224d      	movs	r2, #77	; 0x4d
 80030dc:	4921      	ldr	r1, [pc, #132]	; (8003164 <httpd_post_receive_data+0x158>)
 80030de:	4822      	ldr	r0, [pc, #136]	; (8003168 <httpd_post_receive_data+0x15c>)
 80030e0:	f01b fe3e 	bl	801ed60 <iprintf>

	if (current_connection == connection) {
 80030e4:	4b21      	ldr	r3, [pc, #132]	; (800316c <httpd_post_receive_data+0x160>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	f107 0320 	add.w	r3, r7, #32
 80030ec:	3b1c      	subs	r3, #28
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d11b      	bne.n	800312c <httpd_post_receive_data+0x120>
		jsmn_parser parser;
		jsmntok_t t[256]; /* We expect no more than 512 JSON tokens */
		jsmn_init(&parser);
 80030f4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80030f8:	f103 0308 	add.w	r3, r3, #8
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff ff33 	bl	8002f68 <jsmn_init>

		int tokens = jsmn_parse(&parser, buf_data, strlen(buf_data), t, 128);
 8003102:	4816      	ldr	r0, [pc, #88]	; (800315c <httpd_post_receive_data+0x150>)
 8003104:	f7fd f86e 	bl	80001e4 <strlen>
 8003108:	4602      	mov	r2, r0
 800310a:	f107 0320 	add.w	r3, r7, #32
 800310e:	3b18      	subs	r3, #24
 8003110:	f507 5080 	add.w	r0, r7, #4096	; 0x1000
 8003114:	f100 0008 	add.w	r0, r0, #8
 8003118:	2180      	movs	r1, #128	; 0x80
 800311a:	9100      	str	r1, [sp, #0]
 800311c:	490f      	ldr	r1, [pc, #60]	; (800315c <httpd_post_receive_data+0x150>)
 800311e:	f7ff fd25 	bl	8002b6c <jsmn_parse>
 8003122:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003126:	f103 0314 	add.w	r3, r3, #20
 800312a:	6018      	str	r0, [r3, #0]
//	}else {
//		ret = ERR_VAL;
//	}

	/* this function must ALWAYS free the pbuf it is passed or it will leak memory */
	pbuf_free(p);
 800312c:	463b      	mov	r3, r7
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	f010 fdae 	bl	8013c90 <pbuf_free>
	ret = ERR_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800313a:	f102 021f 	add.w	r2, r2, #31
 800313e:	7013      	strb	r3, [r2, #0]
	return ret;
 8003140:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003144:	f103 031f 	add.w	r3, r3, #31
 8003148:	f993 3000 	ldrsb.w	r3, [r3]
}
 800314c:	4618      	mov	r0, r3
 800314e:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000560 	.word	0x20000560
 800315c:	20004dc8 	.word	0x20004dc8
 8003160:	080223f8 	.word	0x080223f8
 8003164:	08022410 	.word	0x08022410
 8003168:	0802241c 	.word	0x0802241c
 800316c:	20000558 	.word	0x20000558

08003170 <httpd_post_finished>:

void
httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	4613      	mov	r3, r2
 800317c:	80fb      	strh	r3, [r7, #6]
	/* default page is "login failed" */
	snprintf(response_uri, response_uri_len, "/404.html");
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	4a0f      	ldr	r2, [pc, #60]	; (80031c0 <httpd_post_finished+0x50>)
 8003182:	4619      	mov	r1, r3
 8003184:	68b8      	ldr	r0, [r7, #8]
 8003186:	f01b fe43 	bl	801ee10 <sniprintf>
	if (current_connection == connection) {
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <httpd_post_finished+0x54>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	429a      	cmp	r2, r3
 8003192:	d110      	bne.n	80031b6 <httpd_post_finished+0x46>
		if (valid_connection == connection) {
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <httpd_post_finished+0x58>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	429a      	cmp	r2, r3
 800319c:	d105      	bne.n	80031aa <httpd_post_finished+0x3a>
			/* login succeeded */
			snprintf(response_uri, response_uri_len, "/info.html");
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <httpd_post_finished+0x5c>)
 80031a2:	4619      	mov	r1, r3
 80031a4:	68b8      	ldr	r0, [r7, #8]
 80031a6:	f01b fe33 	bl	801ee10 <sniprintf>
		}
		current_connection = NULL;
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <httpd_post_finished+0x54>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
		valid_connection = NULL;
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <httpd_post_finished+0x58>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
	}
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	08022444 	.word	0x08022444
 80031c4:	20000558 	.word	0x20000558
 80031c8:	2000055c 	.word	0x2000055c
 80031cc:	080223ec 	.word	0x080223ec

080031d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d6:	2300      	movs	r3, #0
 80031d8:	607b      	str	r3, [r7, #4]
 80031da:	4b12      	ldr	r3, [pc, #72]	; (8003224 <HAL_MspInit+0x54>)
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	4a11      	ldr	r2, [pc, #68]	; (8003224 <HAL_MspInit+0x54>)
 80031e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e4:	6453      	str	r3, [r2, #68]	; 0x44
 80031e6:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <HAL_MspInit+0x54>)
 80031e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ee:	607b      	str	r3, [r7, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	603b      	str	r3, [r7, #0]
 80031f6:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_MspInit+0x54>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	4a0a      	ldr	r2, [pc, #40]	; (8003224 <HAL_MspInit+0x54>)
 80031fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003200:	6413      	str	r3, [r2, #64]	; 0x40
 8003202:	4b08      	ldr	r3, [pc, #32]	; (8003224 <HAL_MspInit+0x54>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320a:	603b      	str	r3, [r7, #0]
 800320c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800320e:	2200      	movs	r2, #0
 8003210:	210f      	movs	r1, #15
 8003212:	f06f 0001 	mvn.w	r0, #1
 8003216:	f000 fbdf 	bl	80039d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800

08003228 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a05      	ldr	r2, [pc, #20]	; (800324c <HAL_RTC_MspInit+0x24>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d102      	bne.n	8003240 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_RTC_MspInit+0x28>)
 800323c:	2201      	movs	r2, #1
 800323e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	40002800 	.word	0x40002800
 8003250:	42470e3c 	.word	0x42470e3c

08003254 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	; 0x28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325c:	f107 0314 	add.w	r3, r7, #20
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	60da      	str	r2, [r3, #12]
 800326a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a19      	ldr	r2, [pc, #100]	; (80032d8 <HAL_SPI_MspInit+0x84>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d12c      	bne.n	80032d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	4b18      	ldr	r3, [pc, #96]	; (80032dc <HAL_SPI_MspInit+0x88>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	4a17      	ldr	r2, [pc, #92]	; (80032dc <HAL_SPI_MspInit+0x88>)
 8003280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003284:	6413      	str	r3, [r2, #64]	; 0x40
 8003286:	4b15      	ldr	r3, [pc, #84]	; (80032dc <HAL_SPI_MspInit+0x88>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	4b11      	ldr	r3, [pc, #68]	; (80032dc <HAL_SPI_MspInit+0x88>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	4a10      	ldr	r2, [pc, #64]	; (80032dc <HAL_SPI_MspInit+0x88>)
 800329c:	f043 0304 	orr.w	r3, r3, #4
 80032a0:	6313      	str	r3, [r2, #48]	; 0x30
 80032a2:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <HAL_SPI_MspInit+0x88>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80032ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80032b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b4:	2302      	movs	r3, #2
 80032b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032bc:	2303      	movs	r3, #3
 80032be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80032c0:	2306      	movs	r3, #6
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032c4:	f107 0314 	add.w	r3, r7, #20
 80032c8:	4619      	mov	r1, r3
 80032ca:	4805      	ldr	r0, [pc, #20]	; (80032e0 <HAL_SPI_MspInit+0x8c>)
 80032cc:	f001 fc52 	bl	8004b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80032d0:	bf00      	nop
 80032d2:	3728      	adds	r7, #40	; 0x28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40003c00 	.word	0x40003c00
 80032dc:	40023800 	.word	0x40023800
 80032e0:	40020800 	.word	0x40020800

080032e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f4:	d115      	bne.n	8003322 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	4b0c      	ldr	r3, [pc, #48]	; (800332c <HAL_TIM_Base_MspInit+0x48>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	4a0b      	ldr	r2, [pc, #44]	; (800332c <HAL_TIM_Base_MspInit+0x48>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	6413      	str	r3, [r2, #64]	; 0x40
 8003306:	4b09      	ldr	r3, [pc, #36]	; (800332c <HAL_TIM_Base_MspInit+0x48>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003312:	2200      	movs	r2, #0
 8003314:	2105      	movs	r1, #5
 8003316:	201c      	movs	r0, #28
 8003318:	f000 fb5e 	bl	80039d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800331c:	201c      	movs	r0, #28
 800331e:	f000 fb77 	bl	8003a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003322:	bf00      	nop
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800

08003330 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08c      	sub	sp, #48	; 0x30
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003338:	f107 031c 	add.w	r3, r7, #28
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	60da      	str	r2, [r3, #12]
 8003346:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a36      	ldr	r2, [pc, #216]	; (8003428 <HAL_UART_MspInit+0xf8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d134      	bne.n	80033bc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	4b35      	ldr	r3, [pc, #212]	; (800342c <HAL_UART_MspInit+0xfc>)
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	4a34      	ldr	r2, [pc, #208]	; (800342c <HAL_UART_MspInit+0xfc>)
 800335c:	f043 0310 	orr.w	r3, r3, #16
 8003360:	6453      	str	r3, [r2, #68]	; 0x44
 8003362:	4b32      	ldr	r3, [pc, #200]	; (800342c <HAL_UART_MspInit+0xfc>)
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	4b2e      	ldr	r3, [pc, #184]	; (800342c <HAL_UART_MspInit+0xfc>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	4a2d      	ldr	r2, [pc, #180]	; (800342c <HAL_UART_MspInit+0xfc>)
 8003378:	f043 0302 	orr.w	r3, r3, #2
 800337c:	6313      	str	r3, [r2, #48]	; 0x30
 800337e:	4b2b      	ldr	r3, [pc, #172]	; (800342c <HAL_UART_MspInit+0xfc>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800338a:	23c0      	movs	r3, #192	; 0xc0
 800338c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338e:	2302      	movs	r3, #2
 8003390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003392:	2300      	movs	r3, #0
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003396:	2303      	movs	r3, #3
 8003398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800339a:	2307      	movs	r3, #7
 800339c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800339e:	f107 031c 	add.w	r3, r7, #28
 80033a2:	4619      	mov	r1, r3
 80033a4:	4822      	ldr	r0, [pc, #136]	; (8003430 <HAL_UART_MspInit+0x100>)
 80033a6:	f001 fbe5 	bl	8004b74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80033aa:	2200      	movs	r2, #0
 80033ac:	2105      	movs	r1, #5
 80033ae:	2025      	movs	r0, #37	; 0x25
 80033b0:	f000 fb12 	bl	80039d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033b4:	2025      	movs	r0, #37	; 0x25
 80033b6:	f000 fb2b 	bl	8003a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033ba:	e030      	b.n	800341e <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1c      	ldr	r2, [pc, #112]	; (8003434 <HAL_UART_MspInit+0x104>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d12b      	bne.n	800341e <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	4b18      	ldr	r3, [pc, #96]	; (800342c <HAL_UART_MspInit+0xfc>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	4a17      	ldr	r2, [pc, #92]	; (800342c <HAL_UART_MspInit+0xfc>)
 80033d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d4:	6413      	str	r3, [r2, #64]	; 0x40
 80033d6:	4b15      	ldr	r3, [pc, #84]	; (800342c <HAL_UART_MspInit+0xfc>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	4b11      	ldr	r3, [pc, #68]	; (800342c <HAL_UART_MspInit+0xfc>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	4a10      	ldr	r2, [pc, #64]	; (800342c <HAL_UART_MspInit+0xfc>)
 80033ec:	f043 0308 	orr.w	r3, r3, #8
 80033f0:	6313      	str	r3, [r2, #48]	; 0x30
 80033f2:	4b0e      	ldr	r3, [pc, #56]	; (800342c <HAL_UART_MspInit+0xfc>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80033fe:	2360      	movs	r3, #96	; 0x60
 8003400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003402:	2302      	movs	r3, #2
 8003404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003406:	2300      	movs	r3, #0
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800340a:	2303      	movs	r3, #3
 800340c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800340e:	2307      	movs	r3, #7
 8003410:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003412:	f107 031c 	add.w	r3, r7, #28
 8003416:	4619      	mov	r1, r3
 8003418:	4807      	ldr	r0, [pc, #28]	; (8003438 <HAL_UART_MspInit+0x108>)
 800341a:	f001 fbab 	bl	8004b74 <HAL_GPIO_Init>
}
 800341e:	bf00      	nop
 8003420:	3730      	adds	r7, #48	; 0x30
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40011000 	.word	0x40011000
 800342c:	40023800 	.word	0x40023800
 8003430:	40020400 	.word	0x40020400
 8003434:	40004400 	.word	0x40004400
 8003438:	40020c00 	.word	0x40020c00

0800343c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08c      	sub	sp, #48	; 0x30
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003444:	2300      	movs	r3, #0
 8003446:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800344c:	2200      	movs	r2, #0
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	2019      	movs	r0, #25
 8003452:	f000 fac1 	bl	80039d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003456:	2019      	movs	r0, #25
 8003458:	f000 fada 	bl	8003a10 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800345c:	2300      	movs	r3, #0
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	4b1f      	ldr	r3, [pc, #124]	; (80034e0 <HAL_InitTick+0xa4>)
 8003462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003464:	4a1e      	ldr	r2, [pc, #120]	; (80034e0 <HAL_InitTick+0xa4>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	6453      	str	r3, [r2, #68]	; 0x44
 800346c:	4b1c      	ldr	r3, [pc, #112]	; (80034e0 <HAL_InitTick+0xa4>)
 800346e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003478:	f107 0210 	add.w	r2, r7, #16
 800347c:	f107 0314 	add.w	r3, r7, #20
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f003 fb3c 	bl	8006b00 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003488:	f003 fb26 	bl	8006ad8 <HAL_RCC_GetPCLK2Freq>
 800348c:	4603      	mov	r3, r0
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003494:	4a13      	ldr	r2, [pc, #76]	; (80034e4 <HAL_InitTick+0xa8>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	0c9b      	lsrs	r3, r3, #18
 800349c:	3b01      	subs	r3, #1
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80034a0:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <HAL_InitTick+0xac>)
 80034a2:	4a12      	ldr	r2, [pc, #72]	; (80034ec <HAL_InitTick+0xb0>)
 80034a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80034a6:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <HAL_InitTick+0xac>)
 80034a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034ac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80034ae:	4a0e      	ldr	r2, [pc, #56]	; (80034e8 <HAL_InitTick+0xac>)
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80034b4:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <HAL_InitTick+0xac>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ba:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_InitTick+0xac>)
 80034bc:	2200      	movs	r2, #0
 80034be:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80034c0:	4809      	ldr	r0, [pc, #36]	; (80034e8 <HAL_InitTick+0xac>)
 80034c2:	f003 ffec 	bl	800749e <HAL_TIM_Base_Init>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d104      	bne.n	80034d6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80034cc:	4806      	ldr	r0, [pc, #24]	; (80034e8 <HAL_InitTick+0xac>)
 80034ce:	f004 f835 	bl	800753c <HAL_TIM_Base_Start_IT>
 80034d2:	4603      	mov	r3, r0
 80034d4:	e000      	b.n	80034d8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3730      	adds	r7, #48	; 0x30
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40023800 	.word	0x40023800
 80034e4:	431bde83 	.word	0x431bde83
 80034e8:	20004ec8 	.word	0x20004ec8
 80034ec:	40010000 	.word	0x40010000

080034f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034f4:	e7fe      	b.n	80034f4 <NMI_Handler+0x4>

080034f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034f6:	b480      	push	{r7}
 80034f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034fa:	e7fe      	b.n	80034fa <HardFault_Handler+0x4>

080034fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003500:	e7fe      	b.n	8003500 <MemManage_Handler+0x4>

08003502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003502:	b480      	push	{r7}
 8003504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003506:	e7fe      	b.n	8003506 <BusFault_Handler+0x4>

08003508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800350c:	e7fe      	b.n	800350c <UsageFault_Handler+0x4>

0800350e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800350e:	b480      	push	{r7}
 8003510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003520:	4802      	ldr	r0, [pc, #8]	; (800352c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003522:	f004 f87b 	bl	800761c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20004ec8 	.word	0x20004ec8

08003530 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003534:	4802      	ldr	r0, [pc, #8]	; (8003540 <TIM2_IRQHandler+0x10>)
 8003536:	f004 f871 	bl	800761c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20004cf0 	.word	0x20004cf0

08003544 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003548:	4802      	ldr	r0, [pc, #8]	; (8003554 <USART1_IRQHandler+0x10>)
 800354a:	f004 fd39 	bl	8007fc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20004c80 	.word	0x20004c80

08003558 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800355c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003560:	f001 fcbe 	bl	8004ee0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003564:	bf00      	nop
 8003566:	bd80      	pop	{r7, pc}

08003568 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800356c:	4802      	ldr	r0, [pc, #8]	; (8003578 <ETH_IRQHandler+0x10>)
 800356e:	f000 fed3 	bl	8004318 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	2000682c 	.word	0x2000682c

0800357c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003580:	4802      	ldr	r0, [pc, #8]	; (800358c <OTG_FS_IRQHandler+0x10>)
 8003582:	f001 fe15 	bl	80051b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	2000cc90 	.word	0x2000cc90

08003590 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
	return 1;
 8003594:	2301      	movs	r3, #1
}
 8003596:	4618      	mov	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <_kill>:

int _kill(int pid, int sig)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <_kill+0x20>)
 80035ac:	2216      	movs	r2, #22
 80035ae:	601a      	str	r2, [r3, #0]
	return -1;
 80035b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	2000b7b8 	.word	0x2000b7b8

080035c4 <_exit>:

void _exit (int status)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80035cc:	f04f 31ff 	mov.w	r1, #4294967295
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff ffe5 	bl	80035a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80035d6:	e7fe      	b.n	80035d6 <_exit+0x12>

080035d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	e00a      	b.n	8003600 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80035ea:	f3af 8000 	nop.w
 80035ee:	4601      	mov	r1, r0
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	60ba      	str	r2, [r7, #8]
 80035f6:	b2ca      	uxtb	r2, r1
 80035f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	3301      	adds	r3, #1
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	429a      	cmp	r2, r3
 8003606:	dbf0      	blt.n	80035ea <_read+0x12>
	}

return len;
 8003608:	687b      	ldr	r3, [r7, #4]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b086      	sub	sp, #24
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	e009      	b.n	8003638 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	60ba      	str	r2, [r7, #8]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	3301      	adds	r3, #1
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	429a      	cmp	r2, r3
 800363e:	dbf1      	blt.n	8003624 <_write+0x12>
	}
	return len;
 8003640:	687b      	ldr	r3, [r7, #4]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <_close>:

int _close(int file)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
	return -1;
 8003652:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003656:	4618      	mov	r0, r3
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003672:	605a      	str	r2, [r3, #4]
	return 0;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <_isatty>:

int _isatty(int file)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
	return 1;
 800368a:	2301      	movs	r3, #1
}
 800368c:	4618      	mov	r0, r3
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
	return 0;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036bc:	4a14      	ldr	r2, [pc, #80]	; (8003710 <_sbrk+0x5c>)
 80036be:	4b15      	ldr	r3, [pc, #84]	; (8003714 <_sbrk+0x60>)
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036c8:	4b13      	ldr	r3, [pc, #76]	; (8003718 <_sbrk+0x64>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d102      	bne.n	80036d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036d0:	4b11      	ldr	r3, [pc, #68]	; (8003718 <_sbrk+0x64>)
 80036d2:	4a12      	ldr	r2, [pc, #72]	; (800371c <_sbrk+0x68>)
 80036d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <_sbrk+0x64>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4413      	add	r3, r2
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d205      	bcs.n	80036f0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80036e4:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <_sbrk+0x6c>)
 80036e6:	220c      	movs	r2, #12
 80036e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036ea:	f04f 33ff 	mov.w	r3, #4294967295
 80036ee:	e009      	b.n	8003704 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80036f0:	4b09      	ldr	r3, [pc, #36]	; (8003718 <_sbrk+0x64>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036f6:	4b08      	ldr	r3, [pc, #32]	; (8003718 <_sbrk+0x64>)
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4413      	add	r3, r2
 80036fe:	4a06      	ldr	r2, [pc, #24]	; (8003718 <_sbrk+0x64>)
 8003700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003702:	68fb      	ldr	r3, [r7, #12]
}
 8003704:	4618      	mov	r0, r3
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	20020000 	.word	0x20020000
 8003714:	00000400 	.word	0x00000400
 8003718:	20000568 	.word	0x20000568
 800371c:	2000d0a8 	.word	0x2000d0a8
 8003720:	2000b7b8 	.word	0x2000b7b8

08003724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <SystemInit+0x20>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	4a05      	ldr	r2, [pc, #20]	; (8003744 <SystemInit+0x20>)
 8003730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	e000ed00 	.word	0xe000ed00

08003748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003780 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800374c:	480d      	ldr	r0, [pc, #52]	; (8003784 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800374e:	490e      	ldr	r1, [pc, #56]	; (8003788 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003750:	4a0e      	ldr	r2, [pc, #56]	; (800378c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003754:	e002      	b.n	800375c <LoopCopyDataInit>

08003756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800375a:	3304      	adds	r3, #4

0800375c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800375c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800375e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003760:	d3f9      	bcc.n	8003756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003762:	4a0b      	ldr	r2, [pc, #44]	; (8003790 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003764:	4c0b      	ldr	r4, [pc, #44]	; (8003794 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003768:	e001      	b.n	800376e <LoopFillZerobss>

0800376a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800376a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800376c:	3204      	adds	r2, #4

0800376e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800376e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003770:	d3fb      	bcc.n	800376a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003772:	f7ff ffd7 	bl	8003724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003776:	f01a ff1d 	bl	801e5b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800377a:	f7fd fc89 	bl	8001090 <main>
  bx  lr    
 800377e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003788:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 800378c:	08027078 	.word	0x08027078
  ldr r2, =_sbss
 8003790:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8003794:	2000d0a4 	.word	0x2000d0a4

08003798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003798:	e7fe      	b.n	8003798 <ADC_IRQHandler>
	...

0800379c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037a0:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <HAL_Init+0x40>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0d      	ldr	r2, [pc, #52]	; (80037dc <HAL_Init+0x40>)
 80037a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_Init+0x40>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a0a      	ldr	r2, [pc, #40]	; (80037dc <HAL_Init+0x40>)
 80037b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037b8:	4b08      	ldr	r3, [pc, #32]	; (80037dc <HAL_Init+0x40>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a07      	ldr	r2, [pc, #28]	; (80037dc <HAL_Init+0x40>)
 80037be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037c4:	2003      	movs	r0, #3
 80037c6:	f000 f8fc 	bl	80039c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ca:	2000      	movs	r0, #0
 80037cc:	f7ff fe36 	bl	800343c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037d0:	f7ff fcfe 	bl	80031d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023c00 	.word	0x40023c00

080037e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_IncTick+0x20>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_IncTick+0x24>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4413      	add	r3, r2
 80037f0:	4a04      	ldr	r2, [pc, #16]	; (8003804 <HAL_IncTick+0x24>)
 80037f2:	6013      	str	r3, [r2, #0]
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	20000024 	.word	0x20000024
 8003804:	20004f10 	.word	0x20004f10

08003808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return uwTick;
 800380c:	4b03      	ldr	r3, [pc, #12]	; (800381c <HAL_GetTick+0x14>)
 800380e:	681b      	ldr	r3, [r3, #0]
}
 8003810:	4618      	mov	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	20004f10 	.word	0x20004f10

08003820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003828:	f7ff ffee 	bl	8003808 <HAL_GetTick>
 800382c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003838:	d005      	beq.n	8003846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800383a:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <HAL_Delay+0x44>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4413      	add	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003846:	bf00      	nop
 8003848:	f7ff ffde 	bl	8003808 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	429a      	cmp	r2, r3
 8003856:	d8f7      	bhi.n	8003848 <HAL_Delay+0x28>
  {
  }
}
 8003858:	bf00      	nop
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20000024 	.word	0x20000024

08003868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003878:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <__NVIC_SetPriorityGrouping+0x44>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003884:	4013      	ands	r3, r2
 8003886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800389a:	4a04      	ldr	r2, [pc, #16]	; (80038ac <__NVIC_SetPriorityGrouping+0x44>)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	60d3      	str	r3, [r2, #12]
}
 80038a0:	bf00      	nop
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038b4:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <__NVIC_GetPriorityGrouping+0x18>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	0a1b      	lsrs	r3, r3, #8
 80038ba:	f003 0307 	and.w	r3, r3, #7
}
 80038be:	4618      	mov	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	e000ed00 	.word	0xe000ed00

080038cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	db0b      	blt.n	80038f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	f003 021f 	and.w	r2, r3, #31
 80038e4:	4907      	ldr	r1, [pc, #28]	; (8003904 <__NVIC_EnableIRQ+0x38>)
 80038e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	2001      	movs	r0, #1
 80038ee:	fa00 f202 	lsl.w	r2, r0, r2
 80038f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	e000e100 	.word	0xe000e100

08003908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	6039      	str	r1, [r7, #0]
 8003912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003918:	2b00      	cmp	r3, #0
 800391a:	db0a      	blt.n	8003932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	b2da      	uxtb	r2, r3
 8003920:	490c      	ldr	r1, [pc, #48]	; (8003954 <__NVIC_SetPriority+0x4c>)
 8003922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003926:	0112      	lsls	r2, r2, #4
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	440b      	add	r3, r1
 800392c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003930:	e00a      	b.n	8003948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	4908      	ldr	r1, [pc, #32]	; (8003958 <__NVIC_SetPriority+0x50>)
 8003938:	79fb      	ldrb	r3, [r7, #7]
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	3b04      	subs	r3, #4
 8003940:	0112      	lsls	r2, r2, #4
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	440b      	add	r3, r1
 8003946:	761a      	strb	r2, [r3, #24]
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000e100 	.word	0xe000e100
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800395c:	b480      	push	{r7}
 800395e:	b089      	sub	sp, #36	; 0x24
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f1c3 0307 	rsb	r3, r3, #7
 8003976:	2b04      	cmp	r3, #4
 8003978:	bf28      	it	cs
 800397a:	2304      	movcs	r3, #4
 800397c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	3304      	adds	r3, #4
 8003982:	2b06      	cmp	r3, #6
 8003984:	d902      	bls.n	800398c <NVIC_EncodePriority+0x30>
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	3b03      	subs	r3, #3
 800398a:	e000      	b.n	800398e <NVIC_EncodePriority+0x32>
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003990:	f04f 32ff 	mov.w	r2, #4294967295
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43da      	mvns	r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	401a      	ands	r2, r3
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039a4:	f04f 31ff 	mov.w	r1, #4294967295
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	fa01 f303 	lsl.w	r3, r1, r3
 80039ae:	43d9      	mvns	r1, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b4:	4313      	orrs	r3, r2
         );
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3724      	adds	r7, #36	; 0x24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b082      	sub	sp, #8
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff ff4c 	bl	8003868 <__NVIC_SetPriorityGrouping>
}
 80039d0:	bf00      	nop
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039ea:	f7ff ff61 	bl	80038b0 <__NVIC_GetPriorityGrouping>
 80039ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	68b9      	ldr	r1, [r7, #8]
 80039f4:	6978      	ldr	r0, [r7, #20]
 80039f6:	f7ff ffb1 	bl	800395c <NVIC_EncodePriority>
 80039fa:	4602      	mov	r2, r0
 80039fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff ff80 	bl	8003908 <__NVIC_SetPriority>
}
 8003a08:	bf00      	nop
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ff54 	bl	80038cc <__NVIC_EnableIRQ>
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a3a:	f7ff fee5 	bl	8003808 <HAL_GetTick>
 8003a3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d008      	beq.n	8003a5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2280      	movs	r2, #128	; 0x80
 8003a50:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e052      	b.n	8003b04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0216 	bic.w	r2, r2, #22
 8003a6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695a      	ldr	r2, [r3, #20]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d103      	bne.n	8003a8e <HAL_DMA_Abort+0x62>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d007      	beq.n	8003a9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0208 	bic.w	r2, r2, #8
 8003a9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0201 	bic.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aae:	e013      	b.n	8003ad8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ab0:	f7ff feaa 	bl	8003808 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b05      	cmp	r3, #5
 8003abc:	d90c      	bls.n	8003ad8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e015      	b.n	8003b04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1e4      	bne.n	8003ab0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aea:	223f      	movs	r2, #63	; 0x3f
 8003aec:	409a      	lsls	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d004      	beq.n	8003b2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2280      	movs	r2, #128	; 0x80
 8003b24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e00c      	b.n	8003b44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2205      	movs	r2, #5
 8003b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0201 	bic.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8003b60:	4baa      	ldr	r3, [pc, #680]	; (8003e0c <HAL_ETH_Init+0x2bc>)
 8003b62:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e183      	b.n	8003e7e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f006 fda4 	bl	800a6d8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b90:	2300      	movs	r3, #0
 8003b92:	60bb      	str	r3, [r7, #8]
 8003b94:	4b9e      	ldr	r3, [pc, #632]	; (8003e10 <HAL_ETH_Init+0x2c0>)
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	4a9d      	ldr	r2, [pc, #628]	; (8003e10 <HAL_ETH_Init+0x2c0>)
 8003b9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b9e:	6453      	str	r3, [r2, #68]	; 0x44
 8003ba0:	4b9b      	ldr	r3, [pc, #620]	; (8003e10 <HAL_ETH_Init+0x2c0>)
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003bac:	4b99      	ldr	r3, [pc, #612]	; (8003e14 <HAL_ETH_Init+0x2c4>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	4a98      	ldr	r2, [pc, #608]	; (8003e14 <HAL_ETH_Init+0x2c4>)
 8003bb2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003bb6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003bb8:	4b96      	ldr	r3, [pc, #600]	; (8003e14 <HAL_ETH_Init+0x2c4>)
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	4994      	ldr	r1, [pc, #592]	; (8003e14 <HAL_ETH_Init+0x2c4>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0201 	orr.w	r2, r2, #1
 8003bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bdc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003bde:	f7ff fe13 	bl	8003808 <HAL_GetTick>
 8003be2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003be4:	e011      	b.n	8003c0a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003be6:	f7ff fe0f 	bl	8003808 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003bf4:	d909      	bls.n	8003c0a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e139      	b.n	8003e7e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e4      	bne.n	8003be6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f023 031c 	bic.w	r3, r3, #28
 8003c2a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003c2c:	f002 ff34 	bl	8006a98 <HAL_RCC_GetHCLKFreq>
 8003c30:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	4a78      	ldr	r2, [pc, #480]	; (8003e18 <HAL_ETH_Init+0x2c8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d908      	bls.n	8003c4c <HAL_ETH_Init+0xfc>
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	4a77      	ldr	r2, [pc, #476]	; (8003e1c <HAL_ETH_Init+0x2cc>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d804      	bhi.n	8003c4c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f043 0308 	orr.w	r3, r3, #8
 8003c48:	61fb      	str	r3, [r7, #28]
 8003c4a:	e027      	b.n	8003c9c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	4a73      	ldr	r2, [pc, #460]	; (8003e1c <HAL_ETH_Init+0x2cc>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d908      	bls.n	8003c66 <HAL_ETH_Init+0x116>
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	4a6d      	ldr	r2, [pc, #436]	; (8003e0c <HAL_ETH_Init+0x2bc>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d204      	bcs.n	8003c66 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f043 030c 	orr.w	r3, r3, #12
 8003c62:	61fb      	str	r3, [r7, #28]
 8003c64:	e01a      	b.n	8003c9c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	4a68      	ldr	r2, [pc, #416]	; (8003e0c <HAL_ETH_Init+0x2bc>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d303      	bcc.n	8003c76 <HAL_ETH_Init+0x126>
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	4a6b      	ldr	r2, [pc, #428]	; (8003e20 <HAL_ETH_Init+0x2d0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d911      	bls.n	8003c9a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	4a69      	ldr	r2, [pc, #420]	; (8003e20 <HAL_ETH_Init+0x2d0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d908      	bls.n	8003c90 <HAL_ETH_Init+0x140>
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	4a68      	ldr	r2, [pc, #416]	; (8003e24 <HAL_ETH_Init+0x2d4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d804      	bhi.n	8003c90 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	f043 0304 	orr.w	r3, r3, #4
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	e005      	b.n	8003c9c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f043 0310 	orr.w	r3, r3, #16
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	e000      	b.n	8003c9c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003c9a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	69fa      	ldr	r2, [r7, #28]
 8003ca2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003ca4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ca8:	2100      	movs	r1, #0
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fc17 	bl	80044de <HAL_ETH_WritePHYRegister>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003cba:	6939      	ldr	r1, [r7, #16]
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fca3 	bl	8004608 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e0d7      	b.n	8003e7e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003cce:	20ff      	movs	r0, #255	; 0xff
 8003cd0:	f7ff fda6 	bl	8003820 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 80a5 	beq.w	8003e28 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cde:	f7ff fd93 	bl	8003808 <HAL_GetTick>
 8003ce2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003ce4:	f107 030c 	add.w	r3, r7, #12
 8003ce8:	461a      	mov	r2, r3
 8003cea:	2101      	movs	r1, #1
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 fb8e 	bl	800440e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003cf2:	f7ff fd89 	bl	8003808 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d90f      	bls.n	8003d24 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003d08:	6939      	ldr	r1, [r7, #16]
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fc7c 	bl	8004608 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e0ac      	b.n	8003e7e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0da      	beq.n	8003ce4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003d2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d32:	2100      	movs	r1, #0
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fbd2 	bl	80044de <HAL_ETH_WritePHYRegister>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00b      	beq.n	8003d58 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003d44:	6939      	ldr	r1, [r7, #16]
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fc5e 	bl	8004608 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003d54:	2301      	movs	r3, #1
 8003d56:	e092      	b.n	8003e7e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d58:	f7ff fd56 	bl	8003808 <HAL_GetTick>
 8003d5c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003d5e:	f107 030c 	add.w	r3, r7, #12
 8003d62:	461a      	mov	r2, r3
 8003d64:	2101      	movs	r1, #1
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fb51 	bl	800440e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003d6c:	f7ff fd4c 	bl	8003808 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d90f      	bls.n	8003d9e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003d82:	6939      	ldr	r1, [r7, #16]
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 fc3f 	bl	8004608 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e06f      	b.n	8003e7e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0da      	beq.n	8003d5e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003da8:	f107 030c 	add.w	r3, r7, #12
 8003dac:	461a      	mov	r2, r3
 8003dae:	2110      	movs	r1, #16
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fb2c 	bl	800440e <HAL_ETH_ReadPHYRegister>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00b      	beq.n	8003dd4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003dc0:	6939      	ldr	r1, [r7, #16]
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fc20 	bl	8004608 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e054      	b.n	8003e7e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d004      	beq.n	8003de8 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003de4:	60da      	str	r2, [r3, #12]
 8003de6:	e002      	b.n	8003dee <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	609a      	str	r2, [r3, #8]
 8003dfe:	e035      	b.n	8003e6c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e06:	609a      	str	r2, [r3, #8]
 8003e08:	e030      	b.n	8003e6c <HAL_ETH_Init+0x31c>
 8003e0a:	bf00      	nop
 8003e0c:	03938700 	.word	0x03938700
 8003e10:	40023800 	.word	0x40023800
 8003e14:	40013800 	.word	0x40013800
 8003e18:	01312cff 	.word	0x01312cff
 8003e1c:	02160ebf 	.word	0x02160ebf
 8003e20:	05f5e0ff 	.word	0x05f5e0ff
 8003e24:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	08db      	lsrs	r3, r3, #3
 8003e2e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	085b      	lsrs	r3, r3, #1
 8003e36:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	2100      	movs	r1, #0
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fb4c 	bl	80044de <HAL_ETH_WritePHYRegister>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00b      	beq.n	8003e64 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003e50:	6939      	ldr	r1, [r7, #16]
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fbd8 	bl	8004608 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e00c      	b.n	8003e7e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003e64:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003e68:	f7ff fcda 	bl	8003820 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003e6c:	6939      	ldr	r1, [r7, #16]
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fbca 	bl	8004608 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop

08003e88 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_ETH_DMATxDescListInit+0x20>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e052      	b.n	8003f4e <HAL_ETH_DMATxDescListInit+0xc6>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	e030      	b.n	8003f26 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	015b      	lsls	r3, r3, #5
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	4413      	add	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ed4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003edc:	fb02 f303 	mul.w	r3, r2, r3
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d105      	bne.n	8003efe <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	3b01      	subs	r3, #1
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d208      	bcs.n	8003f1a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	015b      	lsls	r3, r3, #5
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	4413      	add	r3, r2
 8003f12:	461a      	mov	r2, r3
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	60da      	str	r2, [r3, #12]
 8003f18:	e002      	b.n	8003f20 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	3301      	adds	r3, #1
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d3ca      	bcc.n	8003ec4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f38:	3310      	adds	r3, #16
 8003f3a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b087      	sub	sp, #28
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	607a      	str	r2, [r7, #4]
 8003f66:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_ETH_DMARxDescListInit+0x20>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e056      	b.n	8004028 <HAL_ETH_DMARxDescListInit+0xce>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2202      	movs	r2, #2
 8003f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	e034      	b.n	8004000 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	015b      	lsls	r3, r3, #5
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003fa6:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003fae:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003fb6:	fb02 f303 	mul.w	r3, r2, r3
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d105      	bne.n	8003fd8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d208      	bcs.n	8003ff4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	015b      	lsls	r3, r3, #5
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	4413      	add	r3, r2
 8003fec:	461a      	mov	r2, r3
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	60da      	str	r2, [r3, #12]
 8003ff2:	e002      	b.n	8003ffa <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d3c6      	bcc.n	8003f96 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004012:	330c      	adds	r3, #12
 8004014:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	371c      	adds	r7, #28
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_ETH_TransmitFrame+0x24>
 8004054:	2302      	movs	r3, #2
 8004056:	e0cd      	b.n	80041f4 <HAL_ETH_TransmitFrame+0x1c0>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800407e:	2301      	movs	r3, #1
 8004080:	e0b8      	b.n	80041f4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	da09      	bge.n	80040a0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2212      	movs	r2, #18
 8004090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0a9      	b.n	80041f4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d915      	bls.n	80040d6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	4a54      	ldr	r2, [pc, #336]	; (8004200 <HAL_ETH_TransmitFrame+0x1cc>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	0a9b      	lsrs	r3, r3, #10
 80040b4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	4b51      	ldr	r3, [pc, #324]	; (8004200 <HAL_ETH_TransmitFrame+0x1cc>)
 80040ba:	fba3 1302 	umull	r1, r3, r3, r2
 80040be:	0a9b      	lsrs	r3, r3, #10
 80040c0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80040c4:	fb01 f303 	mul.w	r3, r1, r3
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	3301      	adds	r3, #1
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	e001      	b.n	80040da <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80040d6:	2301      	movs	r3, #1
 80040d8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d11c      	bne.n	800411a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80040ee:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80040fa:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800410a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	461a      	mov	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	62da      	str	r2, [r3, #44]	; 0x2c
 8004118:	e04b      	b.n	80041b2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800411a:	2300      	movs	r3, #0
 800411c:	613b      	str	r3, [r7, #16]
 800411e:	e044      	b.n	80041aa <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800412e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d107      	bne.n	8004146 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004144:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800414e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	3b01      	subs	r3, #1
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	429a      	cmp	r2, r3
 8004158:	d116      	bne.n	8004188 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004168:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	4a25      	ldr	r2, [pc, #148]	; (8004204 <HAL_ETH_TransmitFrame+0x1d0>)
 800416e:	fb02 f203 	mul.w	r2, r2, r3
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	4413      	add	r3, r2
 8004176:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800417a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004186:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004196:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	461a      	mov	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	3301      	adds	r3, #1
 80041a8:	613b      	str	r3, [r7, #16]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d3b6      	bcc.n	8004120 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ba:	3314      	adds	r3, #20
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00d      	beq.n	80041e2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ce:	3314      	adds	r3, #20
 80041d0:	2204      	movs	r2, #4
 80041d2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041dc:	3304      	adds	r3, #4
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	371c      	adds	r7, #28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	ac02b00b 	.word	0xac02b00b
 8004204:	fffffa0c 	.word	0xfffffa0c

08004208 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800421e:	2302      	movs	r3, #2
 8004220:	e074      	b.n	800430c <HAL_ETH_GetReceivedFrame_IT+0x104>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2202      	movs	r2, #2
 800422e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004232:	e05a      	b.n	80042ea <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	3301      	adds	r3, #1
 8004238:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004248:	d10d      	bne.n	8004266 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	461a      	mov	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
 8004264:	e041      	b.n	80042ea <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10b      	bne.n	800428c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	461a      	mov	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	629a      	str	r2, [r3, #40]	; 0x28
 800428a:	e02e      	b.n	80042ea <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d103      	bne.n	80042ae <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	0c1b      	lsrs	r3, r3, #16
 80042b6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80042ba:	1f1a      	subs	r2, r3, #4
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	689a      	ldr	r2, [r3, #8]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	461a      	mov	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	e010      	b.n	800430c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	db02      	blt.n	80042fa <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	d99c      	bls.n	8004234 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004328:	3314      	adds	r3, #20
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004330:	2b40      	cmp	r3, #64	; 0x40
 8004332:	d112      	bne.n	800435a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f006 fa7d 	bl	800a834 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004342:	3314      	adds	r3, #20
 8004344:	2240      	movs	r2, #64	; 0x40
 8004346:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004358:	e01b      	b.n	8004392 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004362:	3314      	adds	r3, #20
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b01      	cmp	r3, #1
 800436c:	d111      	bne.n	8004392 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f839 	bl	80043e6 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800437c:	3314      	adds	r3, #20
 800437e:	2201      	movs	r2, #1
 8004380:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800439a:	3314      	adds	r3, #20
 800439c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043a0:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043aa:	3314      	adds	r3, #20
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b6:	d112      	bne.n	80043de <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f81e 	bl	80043fa <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c6:	3314      	adds	r3, #20
 80043c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80043cc:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80043de:	bf00      	nop
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b086      	sub	sp, #24
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	460b      	mov	r3, r1
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b82      	cmp	r3, #130	; 0x82
 800442e:	d101      	bne.n	8004434 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004430:	2302      	movs	r3, #2
 8004432:	e050      	b.n	80044d6 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2282      	movs	r2, #130	; 0x82
 8004438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f003 031c 	and.w	r3, r3, #28
 800444a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8a1b      	ldrh	r3, [r3, #16]
 8004450:	02db      	lsls	r3, r3, #11
 8004452:	b29b      	uxth	r3, r3
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800445a:	897b      	ldrh	r3, [r7, #10]
 800445c:	019b      	lsls	r3, r3, #6
 800445e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f023 0302 	bic.w	r3, r3, #2
 800446e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004480:	f7ff f9c2 	bl	8003808 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004486:	e015      	b.n	80044b4 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004488:	f7ff f9be 	bl	8003808 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004496:	d309      	bcc.n	80044ac <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e014      	b.n	80044d6 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1e4      	bne.n	8004488 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b086      	sub	sp, #24
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	460b      	mov	r3, r1
 80044e8:	607a      	str	r2, [r7, #4]
 80044ea:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b42      	cmp	r3, #66	; 0x42
 80044fe:	d101      	bne.n	8004504 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004500:	2302      	movs	r3, #2
 8004502:	e04e      	b.n	80045a2 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2242      	movs	r2, #66	; 0x42
 8004508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f003 031c 	and.w	r3, r3, #28
 800451a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8a1b      	ldrh	r3, [r3, #16]
 8004520:	02db      	lsls	r3, r3, #11
 8004522:	b29b      	uxth	r3, r3
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800452a:	897b      	ldrh	r3, [r7, #10]
 800452c:	019b      	lsls	r3, r3, #6
 800452e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f043 0302 	orr.w	r3, r3, #2
 800453e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800455a:	f7ff f955 	bl	8003808 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004560:	e015      	b.n	800458e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004562:	f7ff f951 	bl	8003808 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004570:	d309      	bcc.n	8004586 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e00d      	b.n	80045a2 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e4      	bne.n	8004562 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_ETH_Start+0x16>
 80045bc:	2302      	movs	r3, #2
 80045be:	e01f      	b.n	8004600 <HAL_ETH_Start+0x56>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fa1b 	bl	8004a0c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fa35 	bl	8004a46 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fa7f 	bl	8004ae0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fa4c 	bl	8004a80 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 fa61 	bl	8004ab0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b0b0      	sub	sp, #192	; 0xc0
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d007      	beq.n	800462e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004624:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800462c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800462e:	2300      	movs	r3, #0
 8004630:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8004632:	2300      	movs	r3, #0
 8004634:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004636:	2300      	movs	r3, #0
 8004638:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800463a:	2300      	movs	r3, #0
 800463c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800463e:	2300      	movs	r3, #0
 8004640:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004642:	2300      	movs	r3, #0
 8004644:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d103      	bne.n	8004656 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800464e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004652:	663b      	str	r3, [r7, #96]	; 0x60
 8004654:	e001      	b.n	800465a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004656:	2300      	movs	r3, #0
 8004658:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800465a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800465e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004660:	2300      	movs	r3, #0
 8004662:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004664:	2300      	movs	r3, #0
 8004666:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004668:	2300      	movs	r3, #0
 800466a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800466c:	2300      	movs	r3, #0
 800466e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004670:	2300      	movs	r3, #0
 8004672:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004674:	2340      	movs	r3, #64	; 0x40
 8004676:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004678:	2300      	movs	r3, #0
 800467a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800467e:	2300      	movs	r3, #0
 8004680:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004684:	2300      	movs	r3, #0
 8004686:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800468a:	2300      	movs	r3, #0
 800468c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004690:	2300      	movs	r3, #0
 8004692:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8004696:	2300      	movs	r3, #0
 8004698:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800469c:	2300      	movs	r3, #0
 800469e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80046a8:	2380      	movs	r3, #128	; 0x80
 80046aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80046ae:	2300      	movs	r3, #0
 80046b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80046b4:	2300      	movs	r3, #0
 80046b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80046c0:	2300      	movs	r3, #0
 80046c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80046c6:	2300      	movs	r3, #0
 80046c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80046dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80046e0:	4bac      	ldr	r3, [pc, #688]	; (8004994 <ETH_MACDMAConfig+0x38c>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80046e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80046ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80046ec:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80046ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80046f0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80046f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80046f4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80046fa:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80046fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80046fe:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004702:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004708:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800470a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800470c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800470e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004710:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004712:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004714:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004718:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800471a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800471c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800471e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004730:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800473c:	2001      	movs	r0, #1
 800473e:	f7ff f86f 	bl	8003820 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800474a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800474c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800474e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004750:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004752:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004754:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8004756:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800475a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800475c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004760:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004762:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004766:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004768:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800476c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004770:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004778:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800477a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004786:	2001      	movs	r0, #1
 8004788:	f7ff f84a 	bl	8003820 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004794:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800479e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80047a8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80047b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80047b8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80047bc:	4013      	ands	r3, r2
 80047be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80047c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047c6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80047c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80047cc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80047ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80047d2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80047d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80047d8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80047da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80047de:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80047e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80047e4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80047e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80047f8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004804:	2001      	movs	r0, #1
 8004806:	f7ff f80b 	bl	8003820 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004812:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004814:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004818:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800482e:	2001      	movs	r0, #1
 8004830:	f7fe fff6 	bl	8003820 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800483c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800483e:	2300      	movs	r3, #0
 8004840:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004842:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004846:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004848:	2300      	movs	r3, #0
 800484a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800484c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004850:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004852:	2300      	movs	r3, #0
 8004854:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004856:	2300      	movs	r3, #0
 8004858:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800485a:	2300      	movs	r3, #0
 800485c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800485e:	2300      	movs	r3, #0
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004862:	2304      	movs	r3, #4
 8004864:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800486a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800486c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004870:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004872:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004876:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800487c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800487e:	2380      	movs	r3, #128	; 0x80
 8004880:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8004882:	2300      	movs	r3, #0
 8004884:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004886:	2300      	movs	r3, #0
 8004888:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004892:	3318      	adds	r3, #24
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800489a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800489e:	4b3e      	ldr	r3, [pc, #248]	; (8004998 <ETH_MACDMAConfig+0x390>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80048a6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80048a8:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80048aa:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80048ac:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80048ae:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80048b0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80048b2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80048b4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80048b6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80048b8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80048ba:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80048bc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80048be:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80048c2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80048c6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80048c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048da:	3318      	adds	r3, #24
 80048dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048e0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ea:	3318      	adds	r3, #24
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80048f2:	2001      	movs	r0, #1
 80048f4:	f7fe ff94 	bl	8003820 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004900:	3318      	adds	r3, #24
 8004902:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004906:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800490c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800490e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004910:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004914:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004918:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800491a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800491c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800491e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004922:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800492c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004930:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004940:	2001      	movs	r0, #1
 8004942:	f7fe ff6d 	bl	8003820 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800494e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004952:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d10f      	bne.n	800497c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004964:	331c      	adds	r3, #28
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004970:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004978:	331c      	adds	r3, #28
 800497a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	461a      	mov	r2, r3
 8004982:	2100      	movs	r1, #0
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f809 	bl	800499c <ETH_MACAddressConfig>
}
 800498a:	bf00      	nop
 800498c:	37c0      	adds	r7, #192	; 0xc0
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	ff20810f 	.word	0xff20810f
 8004998:	f8de3f23 	.word	0xf8de3f23

0800499c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3305      	adds	r3, #5
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	021b      	lsls	r3, r3, #8
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	3204      	adds	r2, #4
 80049b4:	7812      	ldrb	r2, [r2, #0]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <ETH_MACAddressConfig+0x68>)
 80049be:	4413      	add	r3, r2
 80049c0:	461a      	mov	r2, r3
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	3303      	adds	r3, #3
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	061a      	lsls	r2, r3, #24
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3302      	adds	r3, #2
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	041b      	lsls	r3, r3, #16
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3301      	adds	r3, #1
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	021b      	lsls	r3, r3, #8
 80049e0:	4313      	orrs	r3, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	7812      	ldrb	r2, [r2, #0]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <ETH_MACAddressConfig+0x6c>)
 80049ee:	4413      	add	r3, r2
 80049f0:	461a      	mov	r2, r3
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	6013      	str	r3, [r2, #0]
}
 80049f6:	bf00      	nop
 80049f8:	371c      	adds	r7, #28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40028040 	.word	0x40028040
 8004a08:	40028044 	.word	0x40028044

08004a0c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0208 	orr.w	r2, r2, #8
 8004a26:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004a30:	2001      	movs	r0, #1
 8004a32:	f000 f87f 	bl	8004b34 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	601a      	str	r2, [r3, #0]
}
 8004a3e:	bf00      	nop
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0204 	orr.w	r2, r2, #4
 8004a60:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004a6a:	2001      	movs	r0, #1
 8004a6c:	f000 f862 	bl	8004b34 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	601a      	str	r2, [r3, #0]
}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a90:	3318      	adds	r3, #24
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aa0:	3318      	adds	r3, #24
 8004aa2:	601a      	str	r2, [r3, #0]
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac0:	3318      	adds	r3, #24
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0202 	orr.w	r2, r2, #2
 8004acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ad0:	3318      	adds	r3, #24
 8004ad2:	601a      	str	r2, [r3, #0]
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af4:	3318      	adds	r3, #24
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b04:	3318      	adds	r3, #24
 8004b06:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b10:	3318      	adds	r3, #24
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004b16:	2001      	movs	r0, #1
 8004b18:	f000 f80c 	bl	8004b34 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b26:	3318      	adds	r3, #24
 8004b28:	601a      	str	r2, [r3, #0]
}
 8004b2a:	bf00      	nop
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <ETH_Delay+0x38>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a0b      	ldr	r2, [pc, #44]	; (8004b70 <ETH_Delay+0x3c>)
 8004b42:	fba2 2303 	umull	r2, r3, r2, r3
 8004b46:	0a5b      	lsrs	r3, r3, #9
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
 8004b4e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8004b50:	bf00      	nop
  } 
  while (Delay --);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1e5a      	subs	r2, r3, #1
 8004b56:	60fa      	str	r2, [r7, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1f9      	bne.n	8004b50 <ETH_Delay+0x1c>
}
 8004b5c:	bf00      	nop
 8004b5e:	bf00      	nop
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	2000001c 	.word	0x2000001c
 8004b70:	10624dd3 	.word	0x10624dd3

08004b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b089      	sub	sp, #36	; 0x24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	e16b      	b.n	8004e68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b90:	2201      	movs	r2, #1
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	f040 815a 	bne.w	8004e62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d005      	beq.n	8004bc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d130      	bne.n	8004c28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	2203      	movs	r2, #3
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	43db      	mvns	r3, r3
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	091b      	lsrs	r3, r3, #4
 8004c12:	f003 0201 	and.w	r2, r3, #1
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f003 0303 	and.w	r3, r3, #3
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d017      	beq.n	8004c64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	2203      	movs	r2, #3
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	43db      	mvns	r3, r3
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d123      	bne.n	8004cb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	08da      	lsrs	r2, r3, #3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3208      	adds	r2, #8
 8004c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	220f      	movs	r2, #15
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	4013      	ands	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	691a      	ldr	r2, [r3, #16]
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	08da      	lsrs	r2, r3, #3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3208      	adds	r2, #8
 8004cb2:	69b9      	ldr	r1, [r7, #24]
 8004cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	2203      	movs	r2, #3
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f003 0203 	and.w	r2, r3, #3
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 80b4 	beq.w	8004e62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	4b60      	ldr	r3, [pc, #384]	; (8004e80 <HAL_GPIO_Init+0x30c>)
 8004d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d02:	4a5f      	ldr	r2, [pc, #380]	; (8004e80 <HAL_GPIO_Init+0x30c>)
 8004d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d08:	6453      	str	r3, [r2, #68]	; 0x44
 8004d0a:	4b5d      	ldr	r3, [pc, #372]	; (8004e80 <HAL_GPIO_Init+0x30c>)
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d16:	4a5b      	ldr	r2, [pc, #364]	; (8004e84 <HAL_GPIO_Init+0x310>)
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	089b      	lsrs	r3, r3, #2
 8004d1c:	3302      	adds	r3, #2
 8004d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	220f      	movs	r2, #15
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	43db      	mvns	r3, r3
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	4013      	ands	r3, r2
 8004d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a52      	ldr	r2, [pc, #328]	; (8004e88 <HAL_GPIO_Init+0x314>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d02b      	beq.n	8004d9a <HAL_GPIO_Init+0x226>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a51      	ldr	r2, [pc, #324]	; (8004e8c <HAL_GPIO_Init+0x318>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d025      	beq.n	8004d96 <HAL_GPIO_Init+0x222>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a50      	ldr	r2, [pc, #320]	; (8004e90 <HAL_GPIO_Init+0x31c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d01f      	beq.n	8004d92 <HAL_GPIO_Init+0x21e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a4f      	ldr	r2, [pc, #316]	; (8004e94 <HAL_GPIO_Init+0x320>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d019      	beq.n	8004d8e <HAL_GPIO_Init+0x21a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a4e      	ldr	r2, [pc, #312]	; (8004e98 <HAL_GPIO_Init+0x324>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d013      	beq.n	8004d8a <HAL_GPIO_Init+0x216>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a4d      	ldr	r2, [pc, #308]	; (8004e9c <HAL_GPIO_Init+0x328>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00d      	beq.n	8004d86 <HAL_GPIO_Init+0x212>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a4c      	ldr	r2, [pc, #304]	; (8004ea0 <HAL_GPIO_Init+0x32c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d007      	beq.n	8004d82 <HAL_GPIO_Init+0x20e>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a4b      	ldr	r2, [pc, #300]	; (8004ea4 <HAL_GPIO_Init+0x330>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d101      	bne.n	8004d7e <HAL_GPIO_Init+0x20a>
 8004d7a:	2307      	movs	r3, #7
 8004d7c:	e00e      	b.n	8004d9c <HAL_GPIO_Init+0x228>
 8004d7e:	2308      	movs	r3, #8
 8004d80:	e00c      	b.n	8004d9c <HAL_GPIO_Init+0x228>
 8004d82:	2306      	movs	r3, #6
 8004d84:	e00a      	b.n	8004d9c <HAL_GPIO_Init+0x228>
 8004d86:	2305      	movs	r3, #5
 8004d88:	e008      	b.n	8004d9c <HAL_GPIO_Init+0x228>
 8004d8a:	2304      	movs	r3, #4
 8004d8c:	e006      	b.n	8004d9c <HAL_GPIO_Init+0x228>
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e004      	b.n	8004d9c <HAL_GPIO_Init+0x228>
 8004d92:	2302      	movs	r3, #2
 8004d94:	e002      	b.n	8004d9c <HAL_GPIO_Init+0x228>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <HAL_GPIO_Init+0x228>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	f002 0203 	and.w	r2, r2, #3
 8004da2:	0092      	lsls	r2, r2, #2
 8004da4:	4093      	lsls	r3, r2
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dac:	4935      	ldr	r1, [pc, #212]	; (8004e84 <HAL_GPIO_Init+0x310>)
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	089b      	lsrs	r3, r3, #2
 8004db2:	3302      	adds	r3, #2
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dba:	4b3b      	ldr	r3, [pc, #236]	; (8004ea8 <HAL_GPIO_Init+0x334>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004dde:	4a32      	ldr	r2, [pc, #200]	; (8004ea8 <HAL_GPIO_Init+0x334>)
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004de4:	4b30      	ldr	r3, [pc, #192]	; (8004ea8 <HAL_GPIO_Init+0x334>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	43db      	mvns	r3, r3
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	4013      	ands	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e08:	4a27      	ldr	r2, [pc, #156]	; (8004ea8 <HAL_GPIO_Init+0x334>)
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e0e:	4b26      	ldr	r3, [pc, #152]	; (8004ea8 <HAL_GPIO_Init+0x334>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	43db      	mvns	r3, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e32:	4a1d      	ldr	r2, [pc, #116]	; (8004ea8 <HAL_GPIO_Init+0x334>)
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e38:	4b1b      	ldr	r3, [pc, #108]	; (8004ea8 <HAL_GPIO_Init+0x334>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	43db      	mvns	r3, r3
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	4013      	ands	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e5c:	4a12      	ldr	r2, [pc, #72]	; (8004ea8 <HAL_GPIO_Init+0x334>)
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	3301      	adds	r3, #1
 8004e66:	61fb      	str	r3, [r7, #28]
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	2b0f      	cmp	r3, #15
 8004e6c:	f67f ae90 	bls.w	8004b90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e70:	bf00      	nop
 8004e72:	bf00      	nop
 8004e74:	3724      	adds	r7, #36	; 0x24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40023800 	.word	0x40023800
 8004e84:	40013800 	.word	0x40013800
 8004e88:	40020000 	.word	0x40020000
 8004e8c:	40020400 	.word	0x40020400
 8004e90:	40020800 	.word	0x40020800
 8004e94:	40020c00 	.word	0x40020c00
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	40021400 	.word	0x40021400
 8004ea0:	40021800 	.word	0x40021800
 8004ea4:	40021c00 	.word	0x40021c00
 8004ea8:	40013c00 	.word	0x40013c00

08004eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	807b      	strh	r3, [r7, #2]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ebc:	787b      	ldrb	r3, [r7, #1]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ec2:	887a      	ldrh	r2, [r7, #2]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ec8:	e003      	b.n	8004ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004eca:	887b      	ldrh	r3, [r7, #2]
 8004ecc:	041a      	lsls	r2, r3, #16
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	619a      	str	r2, [r3, #24]
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
	...

08004ee0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004eea:	4b08      	ldr	r3, [pc, #32]	; (8004f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004eec:	695a      	ldr	r2, [r3, #20]
 8004eee:	88fb      	ldrh	r3, [r7, #6]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d006      	beq.n	8004f04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ef6:	4a05      	ldr	r2, [pc, #20]	; (8004f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ef8:	88fb      	ldrh	r3, [r7, #6]
 8004efa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004efc:	88fb      	ldrh	r3, [r7, #6]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fc fcbc 	bl	800187c <HAL_GPIO_EXTI_Callback>
  }
}
 8004f04:	bf00      	nop
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40013c00 	.word	0x40013c00

08004f10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f12:	b08f      	sub	sp, #60	; 0x3c
 8004f14:	af0a      	add	r7, sp, #40	; 0x28
 8004f16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e10f      	b.n	8005142 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d106      	bne.n	8004f42 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f019 f813 	bl	801df68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2203      	movs	r2, #3
 8004f46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d102      	bne.n	8004f5c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f003 fff0 	bl	8008f46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	687e      	ldr	r6, [r7, #4]
 8004f6e:	466d      	mov	r5, sp
 8004f70:	f106 0410 	add.w	r4, r6, #16
 8004f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f80:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f84:	1d33      	adds	r3, r6, #4
 8004f86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f88:	6838      	ldr	r0, [r7, #0]
 8004f8a:	f003 fec7 	bl	8008d1c <USB_CoreInit>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0d0      	b.n	8005142 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f003 ffde 	bl	8008f68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fac:	2300      	movs	r3, #0
 8004fae:	73fb      	strb	r3, [r7, #15]
 8004fb0:	e04a      	b.n	8005048 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004fb2:	7bfa      	ldrb	r2, [r7, #15]
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	1a9b      	subs	r3, r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	333d      	adds	r3, #61	; 0x3d
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004fc6:	7bfa      	ldrb	r2, [r7, #15]
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	333c      	adds	r3, #60	; 0x3c
 8004fd6:	7bfa      	ldrb	r2, [r7, #15]
 8004fd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004fda:	7bfa      	ldrb	r2, [r7, #15]
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	b298      	uxth	r0, r3
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	1a9b      	subs	r3, r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	3342      	adds	r3, #66	; 0x42
 8004fee:	4602      	mov	r2, r0
 8004ff0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ff2:	7bfa      	ldrb	r2, [r7, #15]
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	1a9b      	subs	r3, r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	440b      	add	r3, r1
 8005000:	333f      	adds	r3, #63	; 0x3f
 8005002:	2200      	movs	r2, #0
 8005004:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005006:	7bfa      	ldrb	r2, [r7, #15]
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	440b      	add	r3, r1
 8005014:	3344      	adds	r3, #68	; 0x44
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800501a:	7bfa      	ldrb	r2, [r7, #15]
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	1a9b      	subs	r3, r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	3348      	adds	r3, #72	; 0x48
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800502e:	7bfa      	ldrb	r2, [r7, #15]
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	4613      	mov	r3, r2
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	1a9b      	subs	r3, r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	440b      	add	r3, r1
 800503c:	3350      	adds	r3, #80	; 0x50
 800503e:	2200      	movs	r2, #0
 8005040:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005042:	7bfb      	ldrb	r3, [r7, #15]
 8005044:	3301      	adds	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
 8005048:	7bfa      	ldrb	r2, [r7, #15]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	429a      	cmp	r2, r3
 8005050:	d3af      	bcc.n	8004fb2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005052:	2300      	movs	r3, #0
 8005054:	73fb      	strb	r3, [r7, #15]
 8005056:	e044      	b.n	80050e2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005058:	7bfa      	ldrb	r2, [r7, #15]
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	4613      	mov	r3, r2
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800506a:	2200      	movs	r2, #0
 800506c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800506e:	7bfa      	ldrb	r2, [r7, #15]
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	4613      	mov	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	1a9b      	subs	r3, r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005080:	7bfa      	ldrb	r2, [r7, #15]
 8005082:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005084:	7bfa      	ldrb	r2, [r7, #15]
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	4613      	mov	r3, r2
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	1a9b      	subs	r3, r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005096:	2200      	movs	r2, #0
 8005098:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800509a:	7bfa      	ldrb	r2, [r7, #15]
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	4613      	mov	r3, r2
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	1a9b      	subs	r3, r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	440b      	add	r3, r1
 80050a8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80050b0:	7bfa      	ldrb	r2, [r7, #15]
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	4613      	mov	r3, r2
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80050c6:	7bfa      	ldrb	r2, [r7, #15]
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	4613      	mov	r3, r2
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	1a9b      	subs	r3, r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	440b      	add	r3, r1
 80050d4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
 80050de:	3301      	adds	r3, #1
 80050e0:	73fb      	strb	r3, [r7, #15]
 80050e2:	7bfa      	ldrb	r2, [r7, #15]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d3b5      	bcc.n	8005058 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	603b      	str	r3, [r7, #0]
 80050f2:	687e      	ldr	r6, [r7, #4]
 80050f4:	466d      	mov	r5, sp
 80050f6:	f106 0410 	add.w	r4, r6, #16
 80050fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005102:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005106:	e885 0003 	stmia.w	r5, {r0, r1}
 800510a:	1d33      	adds	r3, r6, #4
 800510c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800510e:	6838      	ldr	r0, [r7, #0]
 8005110:	f003 ff76 	bl	8009000 <USB_DevInit>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2202      	movs	r2, #2
 800511e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e00d      	b.n	8005142 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f004 fff2 	bl	800a124 <USB_DevDisconnect>

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800514a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800515e:	2b01      	cmp	r3, #1
 8005160:	d101      	bne.n	8005166 <HAL_PCD_Start+0x1c>
 8005162:	2302      	movs	r3, #2
 8005164:	e020      	b.n	80051a8 <HAL_PCD_Start+0x5e>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005172:	2b01      	cmp	r3, #1
 8005174:	d109      	bne.n	800518a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800517a:	2b01      	cmp	r3, #1
 800517c:	d005      	beq.n	800518a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f003 fec8 	bl	8008f24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f004 ffa2 	bl	800a0e2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80051b0:	b590      	push	{r4, r7, lr}
 80051b2:	b08d      	sub	sp, #52	; 0x34
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f005 f860 	bl	800a28c <USB_GetMode>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f040 839d 	bne.w	800590e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4618      	mov	r0, r3
 80051da:	f004 ffc4 	bl	800a166 <USB_ReadInterrupts>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 8393 	beq.w	800590c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f004 ffbb 	bl	800a166 <USB_ReadInterrupts>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d107      	bne.n	800520a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695a      	ldr	r2, [r3, #20]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f002 0202 	and.w	r2, r2, #2
 8005208:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f004 ffa9 	bl	800a166 <USB_ReadInterrupts>
 8005214:	4603      	mov	r3, r0
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b10      	cmp	r3, #16
 800521c:	d161      	bne.n	80052e2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699a      	ldr	r2, [r3, #24]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0210 	bic.w	r2, r2, #16
 800522c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	f003 020f 	and.w	r2, r3, #15
 800523a:	4613      	mov	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	4413      	add	r3, r2
 800524a:	3304      	adds	r3, #4
 800524c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	0c5b      	lsrs	r3, r3, #17
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	2b02      	cmp	r3, #2
 8005258:	d124      	bne.n	80052a4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005260:	4013      	ands	r3, r2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d035      	beq.n	80052d2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	091b      	lsrs	r3, r3, #4
 800526e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005274:	b29b      	uxth	r3, r3
 8005276:	461a      	mov	r2, r3
 8005278:	6a38      	ldr	r0, [r7, #32]
 800527a:	f004 fde0 	bl	8009e3e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800528a:	441a      	add	r2, r3
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	699a      	ldr	r2, [r3, #24]
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	091b      	lsrs	r3, r3, #4
 8005298:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800529c:	441a      	add	r2, r3
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	619a      	str	r2, [r3, #24]
 80052a2:	e016      	b.n	80052d2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	0c5b      	lsrs	r3, r3, #17
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	2b06      	cmp	r3, #6
 80052ae:	d110      	bne.n	80052d2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80052b6:	2208      	movs	r2, #8
 80052b8:	4619      	mov	r1, r3
 80052ba:	6a38      	ldr	r0, [r7, #32]
 80052bc:	f004 fdbf 	bl	8009e3e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	699a      	ldr	r2, [r3, #24]
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	091b      	lsrs	r3, r3, #4
 80052c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052cc:	441a      	add	r2, r3
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699a      	ldr	r2, [r3, #24]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0210 	orr.w	r2, r2, #16
 80052e0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f004 ff3d 	bl	800a166 <USB_ReadInterrupts>
 80052ec:	4603      	mov	r3, r0
 80052ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052f6:	d16e      	bne.n	80053d6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4618      	mov	r0, r3
 8005302:	f004 ff43 	bl	800a18c <USB_ReadDevAllOutEpInterrupt>
 8005306:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005308:	e062      	b.n	80053d0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d057      	beq.n	80053c4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	4611      	mov	r1, r2
 800531e:	4618      	mov	r0, r3
 8005320:	f004 ff68 	bl	800a1f4 <USB_ReadDevOutEPInterrupt>
 8005324:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00c      	beq.n	800534a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533c:	461a      	mov	r2, r3
 800533e:	2301      	movs	r3, #1
 8005340:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005342:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fdb1 	bl	8005eac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f003 0308 	and.w	r3, r3, #8
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00c      	beq.n	800536e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005360:	461a      	mov	r2, r3
 8005362:	2308      	movs	r3, #8
 8005364:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005366:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 feab 	bl	80060c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f003 0310 	and.w	r3, r3, #16
 8005374:	2b00      	cmp	r3, #0
 8005376:	d008      	beq.n	800538a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005384:	461a      	mov	r2, r3
 8005386:	2310      	movs	r3, #16
 8005388:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b00      	cmp	r3, #0
 8005392:	d008      	beq.n	80053a6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a0:	461a      	mov	r2, r3
 80053a2:	2320      	movs	r3, #32
 80053a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d009      	beq.n	80053c4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053bc:	461a      	mov	r2, r3
 80053be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053c2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	3301      	adds	r3, #1
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80053ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053cc:	085b      	lsrs	r3, r3, #1
 80053ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80053d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d199      	bne.n	800530a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4618      	mov	r0, r3
 80053dc:	f004 fec3 	bl	800a166 <USB_ReadInterrupts>
 80053e0:	4603      	mov	r3, r0
 80053e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053ea:	f040 80c0 	bne.w	800556e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f004 fee4 	bl	800a1c0 <USB_ReadDevAllInEpInterrupt>
 80053f8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80053fe:	e0b2      	b.n	8005566 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 80a7 	beq.w	800555a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	4611      	mov	r1, r2
 8005416:	4618      	mov	r0, r3
 8005418:	f004 ff0a 	bl	800a230 <USB_ReadDevInEPInterrupt>
 800541c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d057      	beq.n	80054d8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	2201      	movs	r2, #1
 8005430:	fa02 f303 	lsl.w	r3, r2, r3
 8005434:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	43db      	mvns	r3, r3
 8005442:	69f9      	ldr	r1, [r7, #28]
 8005444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005448:	4013      	ands	r3, r2
 800544a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005458:	461a      	mov	r2, r3
 800545a:	2301      	movs	r3, #1
 800545c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d132      	bne.n	80054cc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546a:	4613      	mov	r3, r2
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	1a9b      	subs	r3, r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	440b      	add	r3, r1
 8005474:	3348      	adds	r3, #72	; 0x48
 8005476:	6819      	ldr	r1, [r3, #0]
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547c:	4613      	mov	r3, r2
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4403      	add	r3, r0
 8005486:	3344      	adds	r3, #68	; 0x44
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4419      	add	r1, r3
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005490:	4613      	mov	r3, r2
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	1a9b      	subs	r3, r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4403      	add	r3, r0
 800549a:	3348      	adds	r3, #72	; 0x48
 800549c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d113      	bne.n	80054cc <HAL_PCD_IRQHandler+0x31c>
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a8:	4613      	mov	r3, r2
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	1a9b      	subs	r3, r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	3350      	adds	r3, #80	; 0x50
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d108      	bne.n	80054cc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6818      	ldr	r0, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80054c4:	461a      	mov	r2, r3
 80054c6:	2101      	movs	r1, #1
 80054c8:	f004 ff12 	bl	800a2f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	4619      	mov	r1, r3
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f018 fdd7 	bl	801e086 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d008      	beq.n	80054f4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ee:	461a      	mov	r2, r3
 80054f0:	2308      	movs	r3, #8
 80054f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f003 0310 	and.w	r3, r3, #16
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d008      	beq.n	8005510 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550a:	461a      	mov	r2, r3
 800550c:	2310      	movs	r3, #16
 800550e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	d008      	beq.n	800552c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005526:	461a      	mov	r2, r3
 8005528:	2340      	movs	r3, #64	; 0x40
 800552a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d008      	beq.n	8005548 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005542:	461a      	mov	r2, r3
 8005544:	2302      	movs	r3, #2
 8005546:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005552:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fc1b 	bl	8005d90 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	3301      	adds	r3, #1
 800555e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	085b      	lsrs	r3, r3, #1
 8005564:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	2b00      	cmp	r3, #0
 800556a:	f47f af49 	bne.w	8005400 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f004 fdf7 	bl	800a166 <USB_ReadInterrupts>
 8005578:	4603      	mov	r3, r0
 800557a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800557e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005582:	d122      	bne.n	80055ca <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005592:	f023 0301 	bic.w	r3, r3, #1
 8005596:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d108      	bne.n	80055b4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80055aa:	2100      	movs	r1, #0
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 fe27 	bl	8006200 <HAL_PCDEx_LPM_Callback>
 80055b2:	e002      	b.n	80055ba <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f018 fddd 	bl	801e174 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	695a      	ldr	r2, [r3, #20]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80055c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f004 fdc9 	bl	800a166 <USB_ReadInterrupts>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055de:	d112      	bne.n	8005606 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d102      	bne.n	80055f6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f018 fd99 	bl	801e128 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695a      	ldr	r2, [r3, #20]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005604:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4618      	mov	r0, r3
 800560c:	f004 fdab 	bl	800a166 <USB_ReadInterrupts>
 8005610:	4603      	mov	r3, r0
 8005612:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800561a:	f040 80c7 	bne.w	80057ac <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800562c:	f023 0301 	bic.w	r3, r3, #1
 8005630:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2110      	movs	r1, #16
 8005638:	4618      	mov	r0, r3
 800563a:	f003 fe45 	bl	80092c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800563e:	2300      	movs	r3, #0
 8005640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005642:	e056      	b.n	80056f2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005650:	461a      	mov	r2, r3
 8005652:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005656:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	69fa      	ldr	r2, [r7, #28]
 800566c:	440a      	add	r2, r1
 800566e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005672:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005676:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005688:	0151      	lsls	r1, r2, #5
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	440a      	add	r2, r1
 800568e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005692:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005696:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a4:	461a      	mov	r2, r3
 80056a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056aa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80056ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056bc:	0151      	lsls	r1, r2, #5
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	440a      	add	r2, r1
 80056c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80056cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056dc:	0151      	lsls	r1, r2, #5
 80056de:	69fa      	ldr	r2, [r7, #28]
 80056e0:	440a      	add	r2, r1
 80056e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056ea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ee:	3301      	adds	r3, #1
 80056f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d3a3      	bcc.n	8005644 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005702:	69db      	ldr	r3, [r3, #28]
 8005704:	69fa      	ldr	r2, [r7, #28]
 8005706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800570a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800570e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	2b00      	cmp	r3, #0
 8005716:	d016      	beq.n	8005746 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005722:	69fa      	ldr	r2, [r7, #28]
 8005724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005728:	f043 030b 	orr.w	r3, r3, #11
 800572c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005738:	69fa      	ldr	r2, [r7, #28]
 800573a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800573e:	f043 030b 	orr.w	r3, r3, #11
 8005742:	6453      	str	r3, [r2, #68]	; 0x44
 8005744:	e015      	b.n	8005772 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	69fa      	ldr	r2, [r7, #28]
 8005750:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005754:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005758:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800575c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800576c:	f043 030b 	orr.w	r3, r3, #11
 8005770:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69fa      	ldr	r2, [r7, #28]
 800577c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005780:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005784:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6818      	ldr	r0, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005796:	461a      	mov	r2, r3
 8005798:	f004 fdaa 	bl	800a2f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	695a      	ldr	r2, [r3, #20]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80057aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f004 fcd8 	bl	800a166 <USB_ReadInterrupts>
 80057b6:	4603      	mov	r3, r0
 80057b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057c0:	d124      	bne.n	800580c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f004 fd6e 	bl	800a2a8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f003 fdd6 	bl	8009382 <USB_GetDevSpeed>
 80057d6:	4603      	mov	r3, r0
 80057d8:	461a      	mov	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681c      	ldr	r4, [r3, #0]
 80057e2:	f001 f959 	bl	8006a98 <HAL_RCC_GetHCLKFreq>
 80057e6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	461a      	mov	r2, r3
 80057f0:	4620      	mov	r0, r4
 80057f2:	f003 faf5 	bl	8008de0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f018 fc6d 	bl	801e0d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695a      	ldr	r2, [r3, #20]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800580a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4618      	mov	r0, r3
 8005812:	f004 fca8 	bl	800a166 <USB_ReadInterrupts>
 8005816:	4603      	mov	r3, r0
 8005818:	f003 0308 	and.w	r3, r3, #8
 800581c:	2b08      	cmp	r3, #8
 800581e:	d10a      	bne.n	8005836 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f018 fc4a 	bl	801e0ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	695a      	ldr	r2, [r3, #20]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f002 0208 	and.w	r2, r2, #8
 8005834:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f004 fc93 	bl	800a166 <USB_ReadInterrupts>
 8005840:	4603      	mov	r3, r0
 8005842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800584a:	d10f      	bne.n	800586c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	b2db      	uxtb	r3, r3
 8005854:	4619      	mov	r1, r3
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f018 fcac 	bl	801e1b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695a      	ldr	r2, [r3, #20]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800586a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4618      	mov	r0, r3
 8005872:	f004 fc78 	bl	800a166 <USB_ReadInterrupts>
 8005876:	4603      	mov	r3, r0
 8005878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800587c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005880:	d10f      	bne.n	80058a2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	b2db      	uxtb	r3, r3
 800588a:	4619      	mov	r1, r3
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f018 fc7f 	bl	801e190 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695a      	ldr	r2, [r3, #20]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80058a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f004 fc5d 	bl	800a166 <USB_ReadInterrupts>
 80058ac:	4603      	mov	r3, r0
 80058ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80058b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b6:	d10a      	bne.n	80058ce <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f018 fc8d 	bl	801e1d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695a      	ldr	r2, [r3, #20]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80058cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f004 fc47 	bl	800a166 <USB_ReadInterrupts>
 80058d8:	4603      	mov	r3, r0
 80058da:	f003 0304 	and.w	r3, r3, #4
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d115      	bne.n	800590e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	f003 0304 	and.w	r3, r3, #4
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f018 fc7d 	bl	801e1f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6859      	ldr	r1, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
 800590a:	e000      	b.n	800590e <HAL_PCD_IRQHandler+0x75e>
      return;
 800590c:	bf00      	nop
    }
  }
}
 800590e:	3734      	adds	r7, #52	; 0x34
 8005910:	46bd      	mov	sp, r7
 8005912:	bd90      	pop	{r4, r7, pc}

08005914 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	460b      	mov	r3, r1
 800591e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <HAL_PCD_SetAddress+0x1a>
 800592a:	2302      	movs	r3, #2
 800592c:	e013      	b.n	8005956 <HAL_PCD_SetAddress+0x42>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	78fa      	ldrb	r2, [r7, #3]
 800593a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	78fa      	ldrb	r2, [r7, #3]
 8005944:	4611      	mov	r1, r2
 8005946:	4618      	mov	r0, r3
 8005948:	f004 fba5 	bl	800a096 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	4608      	mov	r0, r1
 8005968:	4611      	mov	r1, r2
 800596a:	461a      	mov	r2, r3
 800596c:	4603      	mov	r3, r0
 800596e:	70fb      	strb	r3, [r7, #3]
 8005970:	460b      	mov	r3, r1
 8005972:	803b      	strh	r3, [r7, #0]
 8005974:	4613      	mov	r3, r2
 8005976:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005978:	2300      	movs	r3, #0
 800597a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800597c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005980:	2b00      	cmp	r3, #0
 8005982:	da0f      	bge.n	80059a4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005984:	78fb      	ldrb	r3, [r7, #3]
 8005986:	f003 020f 	and.w	r2, r3, #15
 800598a:	4613      	mov	r3, r2
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	1a9b      	subs	r3, r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	3338      	adds	r3, #56	; 0x38
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	4413      	add	r3, r2
 8005998:	3304      	adds	r3, #4
 800599a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2201      	movs	r2, #1
 80059a0:	705a      	strb	r2, [r3, #1]
 80059a2:	e00f      	b.n	80059c4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059a4:	78fb      	ldrb	r3, [r7, #3]
 80059a6:	f003 020f 	and.w	r2, r3, #15
 80059aa:	4613      	mov	r3, r2
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	1a9b      	subs	r3, r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	4413      	add	r3, r2
 80059ba:	3304      	adds	r3, #4
 80059bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80059d0:	883a      	ldrh	r2, [r7, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	78ba      	ldrb	r2, [r7, #2]
 80059da:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	785b      	ldrb	r3, [r3, #1]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d004      	beq.n	80059ee <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80059ee:	78bb      	ldrb	r3, [r7, #2]
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d102      	bne.n	80059fa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d101      	bne.n	8005a08 <HAL_PCD_EP_Open+0xaa>
 8005a04:	2302      	movs	r3, #2
 8005a06:	e00e      	b.n	8005a26 <HAL_PCD_EP_Open+0xc8>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68f9      	ldr	r1, [r7, #12]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f003 fcd8 	bl	80093cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005a24:	7afb      	ldrb	r3, [r7, #11]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	460b      	mov	r3, r1
 8005a38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	da0f      	bge.n	8005a62 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a42:	78fb      	ldrb	r3, [r7, #3]
 8005a44:	f003 020f 	and.w	r2, r3, #15
 8005a48:	4613      	mov	r3, r2
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	1a9b      	subs	r3, r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	3338      	adds	r3, #56	; 0x38
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	4413      	add	r3, r2
 8005a56:	3304      	adds	r3, #4
 8005a58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	705a      	strb	r2, [r3, #1]
 8005a60:	e00f      	b.n	8005a82 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a62:	78fb      	ldrb	r3, [r7, #3]
 8005a64:	f003 020f 	and.w	r2, r3, #15
 8005a68:	4613      	mov	r3, r2
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	1a9b      	subs	r3, r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	4413      	add	r3, r2
 8005a78:	3304      	adds	r3, #4
 8005a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005a82:	78fb      	ldrb	r3, [r7, #3]
 8005a84:	f003 030f 	and.w	r3, r3, #15
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <HAL_PCD_EP_Close+0x6e>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e00e      	b.n	8005aba <HAL_PCD_EP_Close+0x8c>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68f9      	ldr	r1, [r7, #12]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f003 fd16 	bl	80094dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b086      	sub	sp, #24
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	60f8      	str	r0, [r7, #12]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]
 8005ace:	460b      	mov	r3, r1
 8005ad0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ad2:	7afb      	ldrb	r3, [r7, #11]
 8005ad4:	f003 020f 	and.w	r2, r3, #15
 8005ad8:	4613      	mov	r3, r2
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	1a9b      	subs	r3, r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	3304      	adds	r3, #4
 8005aea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	2200      	movs	r2, #0
 8005afc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2200      	movs	r2, #0
 8005b02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b04:	7afb      	ldrb	r3, [r7, #11]
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d102      	bne.n	8005b1e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b1e:	7afb      	ldrb	r3, [r7, #11]
 8005b20:	f003 030f 	and.w	r3, r3, #15
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d109      	bne.n	8005b3c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6818      	ldr	r0, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	461a      	mov	r2, r3
 8005b34:	6979      	ldr	r1, [r7, #20]
 8005b36:	f003 fff1 	bl	8009b1c <USB_EP0StartXfer>
 8005b3a:	e008      	b.n	8005b4e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	461a      	mov	r2, r3
 8005b48:	6979      	ldr	r1, [r7, #20]
 8005b4a:	f003 fda3 	bl	8009694 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b64:	78fb      	ldrb	r3, [r7, #3]
 8005b66:	f003 020f 	and.w	r2, r3, #15
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	1a9b      	subs	r3, r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	440b      	add	r3, r1
 8005b76:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005b7a:	681b      	ldr	r3, [r3, #0]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	607a      	str	r2, [r7, #4]
 8005b92:	603b      	str	r3, [r7, #0]
 8005b94:	460b      	mov	r3, r1
 8005b96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b98:	7afb      	ldrb	r3, [r7, #11]
 8005b9a:	f003 020f 	and.w	r2, r3, #15
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	1a9b      	subs	r3, r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	3338      	adds	r3, #56	; 0x38
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4413      	add	r3, r2
 8005bac:	3304      	adds	r3, #4
 8005bae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bc8:	7afb      	ldrb	r3, [r7, #11]
 8005bca:	f003 030f 	and.w	r3, r3, #15
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d102      	bne.n	8005be2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005be2:	7afb      	ldrb	r3, [r7, #11]
 8005be4:	f003 030f 	and.w	r3, r3, #15
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d109      	bne.n	8005c00 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6818      	ldr	r0, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	6979      	ldr	r1, [r7, #20]
 8005bfa:	f003 ff8f 	bl	8009b1c <USB_EP0StartXfer>
 8005bfe:	e008      	b.n	8005c12 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6818      	ldr	r0, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	6979      	ldr	r1, [r7, #20]
 8005c0e:	f003 fd41 	bl	8009694 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	460b      	mov	r3, r1
 8005c26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	f003 020f 	and.w	r2, r3, #15
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d901      	bls.n	8005c3a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e050      	b.n	8005cdc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	da0f      	bge.n	8005c62 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c42:	78fb      	ldrb	r3, [r7, #3]
 8005c44:	f003 020f 	and.w	r2, r3, #15
 8005c48:	4613      	mov	r3, r2
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	1a9b      	subs	r3, r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	3338      	adds	r3, #56	; 0x38
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	4413      	add	r3, r2
 8005c56:	3304      	adds	r3, #4
 8005c58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	705a      	strb	r2, [r3, #1]
 8005c60:	e00d      	b.n	8005c7e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c62:	78fa      	ldrb	r2, [r7, #3]
 8005c64:	4613      	mov	r3, r2
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	1a9b      	subs	r3, r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	4413      	add	r3, r2
 8005c74:	3304      	adds	r3, #4
 8005c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c84:	78fb      	ldrb	r3, [r7, #3]
 8005c86:	f003 030f 	and.w	r3, r3, #15
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d101      	bne.n	8005c9e <HAL_PCD_EP_SetStall+0x82>
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	e01e      	b.n	8005cdc <HAL_PCD_EP_SetStall+0xc0>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68f9      	ldr	r1, [r7, #12]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f004 f91e 	bl	8009eee <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005cb2:	78fb      	ldrb	r3, [r7, #3]
 8005cb4:	f003 030f 	and.w	r3, r3, #15
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6818      	ldr	r0, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	b2d9      	uxtb	r1, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ccc:	461a      	mov	r2, r3
 8005cce:	f004 fb0f 	bl	800a2f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	460b      	mov	r3, r1
 8005cee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	f003 020f 	and.w	r2, r3, #15
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d901      	bls.n	8005d02 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e042      	b.n	8005d88 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	da0f      	bge.n	8005d2a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d0a:	78fb      	ldrb	r3, [r7, #3]
 8005d0c:	f003 020f 	and.w	r2, r3, #15
 8005d10:	4613      	mov	r3, r2
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	1a9b      	subs	r3, r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	3338      	adds	r3, #56	; 0x38
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	3304      	adds	r3, #4
 8005d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2201      	movs	r2, #1
 8005d26:	705a      	strb	r2, [r3, #1]
 8005d28:	e00f      	b.n	8005d4a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d2a:	78fb      	ldrb	r3, [r7, #3]
 8005d2c:	f003 020f 	and.w	r2, r3, #15
 8005d30:	4613      	mov	r3, r2
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	1a9b      	subs	r3, r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	4413      	add	r3, r2
 8005d40:	3304      	adds	r3, #4
 8005d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d50:	78fb      	ldrb	r3, [r7, #3]
 8005d52:	f003 030f 	and.w	r3, r3, #15
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_PCD_EP_ClrStall+0x86>
 8005d66:	2302      	movs	r3, #2
 8005d68:	e00e      	b.n	8005d88 <HAL_PCD_EP_ClrStall+0xa4>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68f9      	ldr	r1, [r7, #12]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f004 f926 	bl	8009fca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b08a      	sub	sp, #40	; 0x28
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	4613      	mov	r3, r2
 8005da8:	00db      	lsls	r3, r3, #3
 8005daa:	1a9b      	subs	r3, r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	3338      	adds	r3, #56	; 0x38
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	4413      	add	r3, r2
 8005db4:	3304      	adds	r3, #4
 8005db6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	699a      	ldr	r2, [r3, #24]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d901      	bls.n	8005dc8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e06c      	b.n	8005ea2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	695a      	ldr	r2, [r3, #20]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d902      	bls.n	8005de4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	3303      	adds	r3, #3
 8005de8:	089b      	lsrs	r3, r3, #2
 8005dea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005dec:	e02b      	b.n	8005e46 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	695a      	ldr	r2, [r3, #20]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d902      	bls.n	8005e0a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	3303      	adds	r3, #3
 8005e0e:	089b      	lsrs	r3, r3, #2
 8005e10:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	68d9      	ldr	r1, [r3, #12]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	4603      	mov	r3, r0
 8005e28:	6978      	ldr	r0, [r7, #20]
 8005e2a:	f003 ffca 	bl	8009dc2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	441a      	add	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	699a      	ldr	r2, [r3, #24]
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	441a      	add	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d809      	bhi.n	8005e70 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	699a      	ldr	r2, [r3, #24]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d203      	bcs.n	8005e70 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1be      	bne.n	8005dee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	695a      	ldr	r2, [r3, #20]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d811      	bhi.n	8005ea0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	f003 030f 	and.w	r3, r3, #15
 8005e82:	2201      	movs	r2, #1
 8005e84:	fa02 f303 	lsl.w	r3, r2, r3
 8005e88:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	43db      	mvns	r3, r3
 8005e96:	6939      	ldr	r1, [r7, #16]
 8005e98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3720      	adds	r7, #32
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
	...

08005eac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	333c      	adds	r3, #60	; 0x3c
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	f040 80a0 	bne.w	8006024 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f003 0308 	and.w	r3, r3, #8
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d015      	beq.n	8005f1a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	4a72      	ldr	r2, [pc, #456]	; (80060bc <PCD_EP_OutXfrComplete_int+0x210>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	f240 80dd 	bls.w	80060b2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 80d7 	beq.w	80060b2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f10:	461a      	mov	r2, r3
 8005f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f16:	6093      	str	r3, [r2, #8]
 8005f18:	e0cb      	b.n	80060b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f003 0320 	and.w	r3, r3, #32
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d009      	beq.n	8005f38 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f30:	461a      	mov	r2, r3
 8005f32:	2320      	movs	r3, #32
 8005f34:	6093      	str	r3, [r2, #8]
 8005f36:	e0bc      	b.n	80060b2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f040 80b7 	bne.w	80060b2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4a5d      	ldr	r2, [pc, #372]	; (80060bc <PCD_EP_OutXfrComplete_int+0x210>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d90f      	bls.n	8005f6c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00a      	beq.n	8005f6c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f62:	461a      	mov	r2, r3
 8005f64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f68:	6093      	str	r3, [r2, #8]
 8005f6a:	e0a2      	b.n	80060b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	4613      	mov	r3, r2
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	1a9b      	subs	r3, r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005f7e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	0159      	lsls	r1, r3, #5
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	440b      	add	r3, r1
 8005f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005f92:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	1a9b      	subs	r3, r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4403      	add	r3, r0
 8005fa2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005fa6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	4613      	mov	r3, r2
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	1a9b      	subs	r3, r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	440b      	add	r3, r1
 8005fb6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005fba:	6819      	ldr	r1, [r3, #0]
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	1a9b      	subs	r3, r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4403      	add	r3, r0
 8005fca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4419      	add	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	1a9b      	subs	r3, r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4403      	add	r3, r0
 8005fe0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005fe4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d114      	bne.n	8006016 <PCD_EP_OutXfrComplete_int+0x16a>
 8005fec:	6879      	ldr	r1, [r7, #4]
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	1a9b      	subs	r3, r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	440b      	add	r3, r1
 8005ffa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d108      	bne.n	8006016 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800600e:	461a      	mov	r2, r3
 8006010:	2101      	movs	r1, #1
 8006012:	f004 f96d 	bl	800a2f0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	b2db      	uxtb	r3, r3
 800601a:	4619      	mov	r1, r3
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f018 f817 	bl	801e050 <HAL_PCD_DataOutStageCallback>
 8006022:	e046      	b.n	80060b2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4a26      	ldr	r2, [pc, #152]	; (80060c0 <PCD_EP_OutXfrComplete_int+0x214>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d124      	bne.n	8006076 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006042:	461a      	mov	r2, r3
 8006044:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006048:	6093      	str	r3, [r2, #8]
 800604a:	e032      	b.n	80060b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	f003 0320 	and.w	r3, r3, #32
 8006052:	2b00      	cmp	r3, #0
 8006054:	d008      	beq.n	8006068 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006062:	461a      	mov	r2, r3
 8006064:	2320      	movs	r3, #32
 8006066:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	b2db      	uxtb	r3, r3
 800606c:	4619      	mov	r1, r3
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f017 ffee 	bl	801e050 <HAL_PCD_DataOutStageCallback>
 8006074:	e01d      	b.n	80060b2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d114      	bne.n	80060a6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800607c:	6879      	ldr	r1, [r7, #4]
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	4613      	mov	r3, r2
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	1a9b      	subs	r3, r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d108      	bne.n	80060a6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6818      	ldr	r0, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800609e:	461a      	mov	r2, r3
 80060a0:	2100      	movs	r1, #0
 80060a2:	f004 f925 	bl	800a2f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	4619      	mov	r1, r3
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f017 ffcf 	bl	801e050 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3718      	adds	r7, #24
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	4f54300a 	.word	0x4f54300a
 80060c0:	4f54310a 	.word	0x4f54310a

080060c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	333c      	adds	r3, #60	; 0x3c
 80060dc:	3304      	adds	r3, #4
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4a15      	ldr	r2, [pc, #84]	; (800614c <PCD_EP_OutSetupPacket_int+0x88>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d90e      	bls.n	8006118 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006100:	2b00      	cmp	r3, #0
 8006102:	d009      	beq.n	8006118 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006110:	461a      	mov	r2, r3
 8006112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006116:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f017 ff87 	bl	801e02c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4a0a      	ldr	r2, [pc, #40]	; (800614c <PCD_EP_OutSetupPacket_int+0x88>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d90c      	bls.n	8006140 <PCD_EP_OutSetupPacket_int+0x7c>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d108      	bne.n	8006140 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6818      	ldr	r0, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006138:	461a      	mov	r2, r3
 800613a:	2101      	movs	r1, #1
 800613c:	f004 f8d8 	bl	800a2f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3718      	adds	r7, #24
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	4f54300a 	.word	0x4f54300a

08006150 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	70fb      	strb	r3, [r7, #3]
 800615c:	4613      	mov	r3, r2
 800615e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d107      	bne.n	800617e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800616e:	883b      	ldrh	r3, [r7, #0]
 8006170:	0419      	lsls	r1, r3, #16
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	430a      	orrs	r2, r1
 800617a:	629a      	str	r2, [r3, #40]	; 0x28
 800617c:	e028      	b.n	80061d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006184:	0c1b      	lsrs	r3, r3, #16
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	4413      	add	r3, r2
 800618a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800618c:	2300      	movs	r3, #0
 800618e:	73fb      	strb	r3, [r7, #15]
 8006190:	e00d      	b.n	80061ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	7bfb      	ldrb	r3, [r7, #15]
 8006198:	3340      	adds	r3, #64	; 0x40
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	0c1b      	lsrs	r3, r3, #16
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	4413      	add	r3, r2
 80061a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	3301      	adds	r3, #1
 80061ac:	73fb      	strb	r3, [r7, #15]
 80061ae:	7bfa      	ldrb	r2, [r7, #15]
 80061b0:	78fb      	ldrb	r3, [r7, #3]
 80061b2:	3b01      	subs	r3, #1
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d3ec      	bcc.n	8006192 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80061b8:	883b      	ldrh	r3, [r7, #0]
 80061ba:	0418      	lsls	r0, r3, #16
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6819      	ldr	r1, [r3, #0]
 80061c0:	78fb      	ldrb	r3, [r7, #3]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	4302      	orrs	r2, r0
 80061c8:	3340      	adds	r3, #64	; 0x40
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	440b      	add	r3, r1
 80061ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	460b      	mov	r3, r1
 80061e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	887a      	ldrh	r2, [r7, #2]
 80061f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e264      	b.n	80066f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d075      	beq.n	8006322 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006236:	4ba3      	ldr	r3, [pc, #652]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f003 030c 	and.w	r3, r3, #12
 800623e:	2b04      	cmp	r3, #4
 8006240:	d00c      	beq.n	800625c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006242:	4ba0      	ldr	r3, [pc, #640]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800624a:	2b08      	cmp	r3, #8
 800624c:	d112      	bne.n	8006274 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800624e:	4b9d      	ldr	r3, [pc, #628]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800625a:	d10b      	bne.n	8006274 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800625c:	4b99      	ldr	r3, [pc, #612]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d05b      	beq.n	8006320 <HAL_RCC_OscConfig+0x108>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d157      	bne.n	8006320 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e23f      	b.n	80066f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800627c:	d106      	bne.n	800628c <HAL_RCC_OscConfig+0x74>
 800627e:	4b91      	ldr	r3, [pc, #580]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a90      	ldr	r2, [pc, #576]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 8006284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	e01d      	b.n	80062c8 <HAL_RCC_OscConfig+0xb0>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006294:	d10c      	bne.n	80062b0 <HAL_RCC_OscConfig+0x98>
 8006296:	4b8b      	ldr	r3, [pc, #556]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a8a      	ldr	r2, [pc, #552]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 800629c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062a0:	6013      	str	r3, [r2, #0]
 80062a2:	4b88      	ldr	r3, [pc, #544]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a87      	ldr	r2, [pc, #540]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 80062a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	e00b      	b.n	80062c8 <HAL_RCC_OscConfig+0xb0>
 80062b0:	4b84      	ldr	r3, [pc, #528]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a83      	ldr	r2, [pc, #524]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 80062b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	4b81      	ldr	r3, [pc, #516]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a80      	ldr	r2, [pc, #512]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 80062c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d013      	beq.n	80062f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d0:	f7fd fa9a 	bl	8003808 <HAL_GetTick>
 80062d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062d6:	e008      	b.n	80062ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062d8:	f7fd fa96 	bl	8003808 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b64      	cmp	r3, #100	; 0x64
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e204      	b.n	80066f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ea:	4b76      	ldr	r3, [pc, #472]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0f0      	beq.n	80062d8 <HAL_RCC_OscConfig+0xc0>
 80062f6:	e014      	b.n	8006322 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062f8:	f7fd fa86 	bl	8003808 <HAL_GetTick>
 80062fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062fe:	e008      	b.n	8006312 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006300:	f7fd fa82 	bl	8003808 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	2b64      	cmp	r3, #100	; 0x64
 800630c:	d901      	bls.n	8006312 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e1f0      	b.n	80066f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006312:	4b6c      	ldr	r3, [pc, #432]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1f0      	bne.n	8006300 <HAL_RCC_OscConfig+0xe8>
 800631e:	e000      	b.n	8006322 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d063      	beq.n	80063f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800632e:	4b65      	ldr	r3, [pc, #404]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 030c 	and.w	r3, r3, #12
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00b      	beq.n	8006352 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800633a:	4b62      	ldr	r3, [pc, #392]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006342:	2b08      	cmp	r3, #8
 8006344:	d11c      	bne.n	8006380 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006346:	4b5f      	ldr	r3, [pc, #380]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d116      	bne.n	8006380 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006352:	4b5c      	ldr	r3, [pc, #368]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d005      	beq.n	800636a <HAL_RCC_OscConfig+0x152>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d001      	beq.n	800636a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e1c4      	b.n	80066f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800636a:	4b56      	ldr	r3, [pc, #344]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	4952      	ldr	r1, [pc, #328]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 800637a:	4313      	orrs	r3, r2
 800637c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800637e:	e03a      	b.n	80063f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d020      	beq.n	80063ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006388:	4b4f      	ldr	r3, [pc, #316]	; (80064c8 <HAL_RCC_OscConfig+0x2b0>)
 800638a:	2201      	movs	r2, #1
 800638c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800638e:	f7fd fa3b 	bl	8003808 <HAL_GetTick>
 8006392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006394:	e008      	b.n	80063a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006396:	f7fd fa37 	bl	8003808 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d901      	bls.n	80063a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e1a5      	b.n	80066f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063a8:	4b46      	ldr	r3, [pc, #280]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d0f0      	beq.n	8006396 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063b4:	4b43      	ldr	r3, [pc, #268]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	4940      	ldr	r1, [pc, #256]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	600b      	str	r3, [r1, #0]
 80063c8:	e015      	b.n	80063f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063ca:	4b3f      	ldr	r3, [pc, #252]	; (80064c8 <HAL_RCC_OscConfig+0x2b0>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d0:	f7fd fa1a 	bl	8003808 <HAL_GetTick>
 80063d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063d6:	e008      	b.n	80063ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063d8:	f7fd fa16 	bl	8003808 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d901      	bls.n	80063ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e184      	b.n	80066f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063ea:	4b36      	ldr	r3, [pc, #216]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1f0      	bne.n	80063d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0308 	and.w	r3, r3, #8
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d030      	beq.n	8006464 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d016      	beq.n	8006438 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800640a:	4b30      	ldr	r3, [pc, #192]	; (80064cc <HAL_RCC_OscConfig+0x2b4>)
 800640c:	2201      	movs	r2, #1
 800640e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006410:	f7fd f9fa 	bl	8003808 <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006418:	f7fd f9f6 	bl	8003808 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b02      	cmp	r3, #2
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e164      	b.n	80066f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800642a:	4b26      	ldr	r3, [pc, #152]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 800642c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0f0      	beq.n	8006418 <HAL_RCC_OscConfig+0x200>
 8006436:	e015      	b.n	8006464 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006438:	4b24      	ldr	r3, [pc, #144]	; (80064cc <HAL_RCC_OscConfig+0x2b4>)
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800643e:	f7fd f9e3 	bl	8003808 <HAL_GetTick>
 8006442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006444:	e008      	b.n	8006458 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006446:	f7fd f9df 	bl	8003808 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	2b02      	cmp	r3, #2
 8006452:	d901      	bls.n	8006458 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e14d      	b.n	80066f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006458:	4b1a      	ldr	r3, [pc, #104]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 800645a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800645c:	f003 0302 	and.w	r3, r3, #2
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1f0      	bne.n	8006446 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 80a0 	beq.w	80065b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006472:	2300      	movs	r3, #0
 8006474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006476:	4b13      	ldr	r3, [pc, #76]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10f      	bne.n	80064a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006482:	2300      	movs	r3, #0
 8006484:	60bb      	str	r3, [r7, #8]
 8006486:	4b0f      	ldr	r3, [pc, #60]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	4a0e      	ldr	r2, [pc, #56]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 800648c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006490:	6413      	str	r3, [r2, #64]	; 0x40
 8006492:	4b0c      	ldr	r3, [pc, #48]	; (80064c4 <HAL_RCC_OscConfig+0x2ac>)
 8006494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800649a:	60bb      	str	r3, [r7, #8]
 800649c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800649e:	2301      	movs	r3, #1
 80064a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064a2:	4b0b      	ldr	r3, [pc, #44]	; (80064d0 <HAL_RCC_OscConfig+0x2b8>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d121      	bne.n	80064f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064ae:	4b08      	ldr	r3, [pc, #32]	; (80064d0 <HAL_RCC_OscConfig+0x2b8>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a07      	ldr	r2, [pc, #28]	; (80064d0 <HAL_RCC_OscConfig+0x2b8>)
 80064b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ba:	f7fd f9a5 	bl	8003808 <HAL_GetTick>
 80064be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064c0:	e011      	b.n	80064e6 <HAL_RCC_OscConfig+0x2ce>
 80064c2:	bf00      	nop
 80064c4:	40023800 	.word	0x40023800
 80064c8:	42470000 	.word	0x42470000
 80064cc:	42470e80 	.word	0x42470e80
 80064d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064d4:	f7fd f998 	bl	8003808 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e106      	b.n	80066f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064e6:	4b85      	ldr	r3, [pc, #532]	; (80066fc <HAL_RCC_OscConfig+0x4e4>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d0f0      	beq.n	80064d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d106      	bne.n	8006508 <HAL_RCC_OscConfig+0x2f0>
 80064fa:	4b81      	ldr	r3, [pc, #516]	; (8006700 <HAL_RCC_OscConfig+0x4e8>)
 80064fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fe:	4a80      	ldr	r2, [pc, #512]	; (8006700 <HAL_RCC_OscConfig+0x4e8>)
 8006500:	f043 0301 	orr.w	r3, r3, #1
 8006504:	6713      	str	r3, [r2, #112]	; 0x70
 8006506:	e01c      	b.n	8006542 <HAL_RCC_OscConfig+0x32a>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	2b05      	cmp	r3, #5
 800650e:	d10c      	bne.n	800652a <HAL_RCC_OscConfig+0x312>
 8006510:	4b7b      	ldr	r3, [pc, #492]	; (8006700 <HAL_RCC_OscConfig+0x4e8>)
 8006512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006514:	4a7a      	ldr	r2, [pc, #488]	; (8006700 <HAL_RCC_OscConfig+0x4e8>)
 8006516:	f043 0304 	orr.w	r3, r3, #4
 800651a:	6713      	str	r3, [r2, #112]	; 0x70
 800651c:	4b78      	ldr	r3, [pc, #480]	; (8006700 <HAL_RCC_OscConfig+0x4e8>)
 800651e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006520:	4a77      	ldr	r2, [pc, #476]	; (8006700 <HAL_RCC_OscConfig+0x4e8>)
 8006522:	f043 0301 	orr.w	r3, r3, #1
 8006526:	6713      	str	r3, [r2, #112]	; 0x70
 8006528:	e00b      	b.n	8006542 <HAL_RCC_OscConfig+0x32a>
 800652a:	4b75      	ldr	r3, [pc, #468]	; (8006700 <HAL_RCC_OscConfig+0x4e8>)
 800652c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652e:	4a74      	ldr	r2, [pc, #464]	; (8006700 <HAL_RCC_OscConfig+0x4e8>)
 8006530:	f023 0301 	bic.w	r3, r3, #1
 8006534:	6713      	str	r3, [r2, #112]	; 0x70
 8006536:	4b72      	ldr	r3, [pc, #456]	; (8006700 <HAL_RCC_OscConfig+0x4e8>)
 8006538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800653a:	4a71      	ldr	r2, [pc, #452]	; (8006700 <HAL_RCC_OscConfig+0x4e8>)
 800653c:	f023 0304 	bic.w	r3, r3, #4
 8006540:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d015      	beq.n	8006576 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800654a:	f7fd f95d 	bl	8003808 <HAL_GetTick>
 800654e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006550:	e00a      	b.n	8006568 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006552:	f7fd f959 	bl	8003808 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006560:	4293      	cmp	r3, r2
 8006562:	d901      	bls.n	8006568 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e0c5      	b.n	80066f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006568:	4b65      	ldr	r3, [pc, #404]	; (8006700 <HAL_RCC_OscConfig+0x4e8>)
 800656a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d0ee      	beq.n	8006552 <HAL_RCC_OscConfig+0x33a>
 8006574:	e014      	b.n	80065a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006576:	f7fd f947 	bl	8003808 <HAL_GetTick>
 800657a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800657c:	e00a      	b.n	8006594 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800657e:	f7fd f943 	bl	8003808 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	f241 3288 	movw	r2, #5000	; 0x1388
 800658c:	4293      	cmp	r3, r2
 800658e:	d901      	bls.n	8006594 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e0af      	b.n	80066f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006594:	4b5a      	ldr	r3, [pc, #360]	; (8006700 <HAL_RCC_OscConfig+0x4e8>)
 8006596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1ee      	bne.n	800657e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065a0:	7dfb      	ldrb	r3, [r7, #23]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d105      	bne.n	80065b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065a6:	4b56      	ldr	r3, [pc, #344]	; (8006700 <HAL_RCC_OscConfig+0x4e8>)
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	4a55      	ldr	r2, [pc, #340]	; (8006700 <HAL_RCC_OscConfig+0x4e8>)
 80065ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 809b 	beq.w	80066f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065bc:	4b50      	ldr	r3, [pc, #320]	; (8006700 <HAL_RCC_OscConfig+0x4e8>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f003 030c 	and.w	r3, r3, #12
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d05c      	beq.n	8006682 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d141      	bne.n	8006654 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065d0:	4b4c      	ldr	r3, [pc, #304]	; (8006704 <HAL_RCC_OscConfig+0x4ec>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d6:	f7fd f917 	bl	8003808 <HAL_GetTick>
 80065da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065dc:	e008      	b.n	80065f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065de:	f7fd f913 	bl	8003808 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d901      	bls.n	80065f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e081      	b.n	80066f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065f0:	4b43      	ldr	r3, [pc, #268]	; (8006700 <HAL_RCC_OscConfig+0x4e8>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1f0      	bne.n	80065de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	69da      	ldr	r2, [r3, #28]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	431a      	orrs	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	019b      	lsls	r3, r3, #6
 800660c:	431a      	orrs	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006612:	085b      	lsrs	r3, r3, #1
 8006614:	3b01      	subs	r3, #1
 8006616:	041b      	lsls	r3, r3, #16
 8006618:	431a      	orrs	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661e:	061b      	lsls	r3, r3, #24
 8006620:	4937      	ldr	r1, [pc, #220]	; (8006700 <HAL_RCC_OscConfig+0x4e8>)
 8006622:	4313      	orrs	r3, r2
 8006624:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006626:	4b37      	ldr	r3, [pc, #220]	; (8006704 <HAL_RCC_OscConfig+0x4ec>)
 8006628:	2201      	movs	r2, #1
 800662a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800662c:	f7fd f8ec 	bl	8003808 <HAL_GetTick>
 8006630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006632:	e008      	b.n	8006646 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006634:	f7fd f8e8 	bl	8003808 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b02      	cmp	r3, #2
 8006640:	d901      	bls.n	8006646 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e056      	b.n	80066f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006646:	4b2e      	ldr	r3, [pc, #184]	; (8006700 <HAL_RCC_OscConfig+0x4e8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0f0      	beq.n	8006634 <HAL_RCC_OscConfig+0x41c>
 8006652:	e04e      	b.n	80066f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006654:	4b2b      	ldr	r3, [pc, #172]	; (8006704 <HAL_RCC_OscConfig+0x4ec>)
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800665a:	f7fd f8d5 	bl	8003808 <HAL_GetTick>
 800665e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006660:	e008      	b.n	8006674 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006662:	f7fd f8d1 	bl	8003808 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d901      	bls.n	8006674 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e03f      	b.n	80066f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006674:	4b22      	ldr	r3, [pc, #136]	; (8006700 <HAL_RCC_OscConfig+0x4e8>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1f0      	bne.n	8006662 <HAL_RCC_OscConfig+0x44a>
 8006680:	e037      	b.n	80066f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d101      	bne.n	800668e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e032      	b.n	80066f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800668e:	4b1c      	ldr	r3, [pc, #112]	; (8006700 <HAL_RCC_OscConfig+0x4e8>)
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d028      	beq.n	80066ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d121      	bne.n	80066ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d11a      	bne.n	80066ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066be:	4013      	ands	r3, r2
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d111      	bne.n	80066ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d4:	085b      	lsrs	r3, r3, #1
 80066d6:	3b01      	subs	r3, #1
 80066d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066da:	429a      	cmp	r2, r3
 80066dc:	d107      	bne.n	80066ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d001      	beq.n	80066f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e000      	b.n	80066f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	40007000 	.word	0x40007000
 8006700:	40023800 	.word	0x40023800
 8006704:	42470060 	.word	0x42470060

08006708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e0cc      	b.n	80068b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800671c:	4b68      	ldr	r3, [pc, #416]	; (80068c0 <HAL_RCC_ClockConfig+0x1b8>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0307 	and.w	r3, r3, #7
 8006724:	683a      	ldr	r2, [r7, #0]
 8006726:	429a      	cmp	r2, r3
 8006728:	d90c      	bls.n	8006744 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800672a:	4b65      	ldr	r3, [pc, #404]	; (80068c0 <HAL_RCC_ClockConfig+0x1b8>)
 800672c:	683a      	ldr	r2, [r7, #0]
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006732:	4b63      	ldr	r3, [pc, #396]	; (80068c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0307 	and.w	r3, r3, #7
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	429a      	cmp	r2, r3
 800673e:	d001      	beq.n	8006744 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e0b8      	b.n	80068b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0302 	and.w	r3, r3, #2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d020      	beq.n	8006792 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800675c:	4b59      	ldr	r3, [pc, #356]	; (80068c4 <HAL_RCC_ClockConfig+0x1bc>)
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	4a58      	ldr	r2, [pc, #352]	; (80068c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006762:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006766:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0308 	and.w	r3, r3, #8
 8006770:	2b00      	cmp	r3, #0
 8006772:	d005      	beq.n	8006780 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006774:	4b53      	ldr	r3, [pc, #332]	; (80068c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	4a52      	ldr	r2, [pc, #328]	; (80068c4 <HAL_RCC_ClockConfig+0x1bc>)
 800677a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800677e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006780:	4b50      	ldr	r3, [pc, #320]	; (80068c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	494d      	ldr	r1, [pc, #308]	; (80068c4 <HAL_RCC_ClockConfig+0x1bc>)
 800678e:	4313      	orrs	r3, r2
 8006790:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	d044      	beq.n	8006828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d107      	bne.n	80067b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067a6:	4b47      	ldr	r3, [pc, #284]	; (80068c4 <HAL_RCC_ClockConfig+0x1bc>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d119      	bne.n	80067e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e07f      	b.n	80068b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d003      	beq.n	80067c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067c2:	2b03      	cmp	r3, #3
 80067c4:	d107      	bne.n	80067d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067c6:	4b3f      	ldr	r3, [pc, #252]	; (80068c4 <HAL_RCC_ClockConfig+0x1bc>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d109      	bne.n	80067e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e06f      	b.n	80068b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067d6:	4b3b      	ldr	r3, [pc, #236]	; (80068c4 <HAL_RCC_ClockConfig+0x1bc>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e067      	b.n	80068b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067e6:	4b37      	ldr	r3, [pc, #220]	; (80068c4 <HAL_RCC_ClockConfig+0x1bc>)
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f023 0203 	bic.w	r2, r3, #3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	4934      	ldr	r1, [pc, #208]	; (80068c4 <HAL_RCC_ClockConfig+0x1bc>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067f8:	f7fd f806 	bl	8003808 <HAL_GetTick>
 80067fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067fe:	e00a      	b.n	8006816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006800:	f7fd f802 	bl	8003808 <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	f241 3288 	movw	r2, #5000	; 0x1388
 800680e:	4293      	cmp	r3, r2
 8006810:	d901      	bls.n	8006816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e04f      	b.n	80068b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006816:	4b2b      	ldr	r3, [pc, #172]	; (80068c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 020c 	and.w	r2, r3, #12
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	429a      	cmp	r2, r3
 8006826:	d1eb      	bne.n	8006800 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006828:	4b25      	ldr	r3, [pc, #148]	; (80068c0 <HAL_RCC_ClockConfig+0x1b8>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0307 	and.w	r3, r3, #7
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	429a      	cmp	r2, r3
 8006834:	d20c      	bcs.n	8006850 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006836:	4b22      	ldr	r3, [pc, #136]	; (80068c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	b2d2      	uxtb	r2, r2
 800683c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800683e:	4b20      	ldr	r3, [pc, #128]	; (80068c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0307 	and.w	r3, r3, #7
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	429a      	cmp	r2, r3
 800684a:	d001      	beq.n	8006850 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e032      	b.n	80068b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	2b00      	cmp	r3, #0
 800685a:	d008      	beq.n	800686e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800685c:	4b19      	ldr	r3, [pc, #100]	; (80068c4 <HAL_RCC_ClockConfig+0x1bc>)
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	4916      	ldr	r1, [pc, #88]	; (80068c4 <HAL_RCC_ClockConfig+0x1bc>)
 800686a:	4313      	orrs	r3, r2
 800686c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0308 	and.w	r3, r3, #8
 8006876:	2b00      	cmp	r3, #0
 8006878:	d009      	beq.n	800688e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800687a:	4b12      	ldr	r3, [pc, #72]	; (80068c4 <HAL_RCC_ClockConfig+0x1bc>)
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	00db      	lsls	r3, r3, #3
 8006888:	490e      	ldr	r1, [pc, #56]	; (80068c4 <HAL_RCC_ClockConfig+0x1bc>)
 800688a:	4313      	orrs	r3, r2
 800688c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800688e:	f000 f821 	bl	80068d4 <HAL_RCC_GetSysClockFreq>
 8006892:	4602      	mov	r2, r0
 8006894:	4b0b      	ldr	r3, [pc, #44]	; (80068c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	091b      	lsrs	r3, r3, #4
 800689a:	f003 030f 	and.w	r3, r3, #15
 800689e:	490a      	ldr	r1, [pc, #40]	; (80068c8 <HAL_RCC_ClockConfig+0x1c0>)
 80068a0:	5ccb      	ldrb	r3, [r1, r3]
 80068a2:	fa22 f303 	lsr.w	r3, r2, r3
 80068a6:	4a09      	ldr	r2, [pc, #36]	; (80068cc <HAL_RCC_ClockConfig+0x1c4>)
 80068a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068aa:	4b09      	ldr	r3, [pc, #36]	; (80068d0 <HAL_RCC_ClockConfig+0x1c8>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fc fdc4 	bl	800343c <HAL_InitTick>

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	40023c00 	.word	0x40023c00
 80068c4:	40023800 	.word	0x40023800
 80068c8:	08025d1c 	.word	0x08025d1c
 80068cc:	2000001c 	.word	0x2000001c
 80068d0:	20000020 	.word	0x20000020

080068d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80068d8:	b084      	sub	sp, #16
 80068da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068dc:	2300      	movs	r3, #0
 80068de:	607b      	str	r3, [r7, #4]
 80068e0:	2300      	movs	r3, #0
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	2300      	movs	r3, #0
 80068e6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068ec:	4b67      	ldr	r3, [pc, #412]	; (8006a8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f003 030c 	and.w	r3, r3, #12
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d00d      	beq.n	8006914 <HAL_RCC_GetSysClockFreq+0x40>
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	f200 80bd 	bhi.w	8006a78 <HAL_RCC_GetSysClockFreq+0x1a4>
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d002      	beq.n	8006908 <HAL_RCC_GetSysClockFreq+0x34>
 8006902:	2b04      	cmp	r3, #4
 8006904:	d003      	beq.n	800690e <HAL_RCC_GetSysClockFreq+0x3a>
 8006906:	e0b7      	b.n	8006a78 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006908:	4b61      	ldr	r3, [pc, #388]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800690a:	60bb      	str	r3, [r7, #8]
       break;
 800690c:	e0b7      	b.n	8006a7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800690e:	4b61      	ldr	r3, [pc, #388]	; (8006a94 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006910:	60bb      	str	r3, [r7, #8]
      break;
 8006912:	e0b4      	b.n	8006a7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006914:	4b5d      	ldr	r3, [pc, #372]	; (8006a8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800691c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800691e:	4b5b      	ldr	r3, [pc, #364]	; (8006a8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d04d      	beq.n	80069c6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800692a:	4b58      	ldr	r3, [pc, #352]	; (8006a8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	099b      	lsrs	r3, r3, #6
 8006930:	461a      	mov	r2, r3
 8006932:	f04f 0300 	mov.w	r3, #0
 8006936:	f240 10ff 	movw	r0, #511	; 0x1ff
 800693a:	f04f 0100 	mov.w	r1, #0
 800693e:	ea02 0800 	and.w	r8, r2, r0
 8006942:	ea03 0901 	and.w	r9, r3, r1
 8006946:	4640      	mov	r0, r8
 8006948:	4649      	mov	r1, r9
 800694a:	f04f 0200 	mov.w	r2, #0
 800694e:	f04f 0300 	mov.w	r3, #0
 8006952:	014b      	lsls	r3, r1, #5
 8006954:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006958:	0142      	lsls	r2, r0, #5
 800695a:	4610      	mov	r0, r2
 800695c:	4619      	mov	r1, r3
 800695e:	ebb0 0008 	subs.w	r0, r0, r8
 8006962:	eb61 0109 	sbc.w	r1, r1, r9
 8006966:	f04f 0200 	mov.w	r2, #0
 800696a:	f04f 0300 	mov.w	r3, #0
 800696e:	018b      	lsls	r3, r1, #6
 8006970:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006974:	0182      	lsls	r2, r0, #6
 8006976:	1a12      	subs	r2, r2, r0
 8006978:	eb63 0301 	sbc.w	r3, r3, r1
 800697c:	f04f 0000 	mov.w	r0, #0
 8006980:	f04f 0100 	mov.w	r1, #0
 8006984:	00d9      	lsls	r1, r3, #3
 8006986:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800698a:	00d0      	lsls	r0, r2, #3
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	eb12 0208 	adds.w	r2, r2, r8
 8006994:	eb43 0309 	adc.w	r3, r3, r9
 8006998:	f04f 0000 	mov.w	r0, #0
 800699c:	f04f 0100 	mov.w	r1, #0
 80069a0:	0259      	lsls	r1, r3, #9
 80069a2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80069a6:	0250      	lsls	r0, r2, #9
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	4610      	mov	r0, r2
 80069ae:	4619      	mov	r1, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	461a      	mov	r2, r3
 80069b4:	f04f 0300 	mov.w	r3, #0
 80069b8:	f7fa f956 	bl	8000c68 <__aeabi_uldivmod>
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	4613      	mov	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	e04a      	b.n	8006a5c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069c6:	4b31      	ldr	r3, [pc, #196]	; (8006a8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	099b      	lsrs	r3, r3, #6
 80069cc:	461a      	mov	r2, r3
 80069ce:	f04f 0300 	mov.w	r3, #0
 80069d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80069d6:	f04f 0100 	mov.w	r1, #0
 80069da:	ea02 0400 	and.w	r4, r2, r0
 80069de:	ea03 0501 	and.w	r5, r3, r1
 80069e2:	4620      	mov	r0, r4
 80069e4:	4629      	mov	r1, r5
 80069e6:	f04f 0200 	mov.w	r2, #0
 80069ea:	f04f 0300 	mov.w	r3, #0
 80069ee:	014b      	lsls	r3, r1, #5
 80069f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80069f4:	0142      	lsls	r2, r0, #5
 80069f6:	4610      	mov	r0, r2
 80069f8:	4619      	mov	r1, r3
 80069fa:	1b00      	subs	r0, r0, r4
 80069fc:	eb61 0105 	sbc.w	r1, r1, r5
 8006a00:	f04f 0200 	mov.w	r2, #0
 8006a04:	f04f 0300 	mov.w	r3, #0
 8006a08:	018b      	lsls	r3, r1, #6
 8006a0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006a0e:	0182      	lsls	r2, r0, #6
 8006a10:	1a12      	subs	r2, r2, r0
 8006a12:	eb63 0301 	sbc.w	r3, r3, r1
 8006a16:	f04f 0000 	mov.w	r0, #0
 8006a1a:	f04f 0100 	mov.w	r1, #0
 8006a1e:	00d9      	lsls	r1, r3, #3
 8006a20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a24:	00d0      	lsls	r0, r2, #3
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	1912      	adds	r2, r2, r4
 8006a2c:	eb45 0303 	adc.w	r3, r5, r3
 8006a30:	f04f 0000 	mov.w	r0, #0
 8006a34:	f04f 0100 	mov.w	r1, #0
 8006a38:	0299      	lsls	r1, r3, #10
 8006a3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006a3e:	0290      	lsls	r0, r2, #10
 8006a40:	4602      	mov	r2, r0
 8006a42:	460b      	mov	r3, r1
 8006a44:	4610      	mov	r0, r2
 8006a46:	4619      	mov	r1, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	f04f 0300 	mov.w	r3, #0
 8006a50:	f7fa f90a 	bl	8000c68 <__aeabi_uldivmod>
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4613      	mov	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a5c:	4b0b      	ldr	r3, [pc, #44]	; (8006a8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	0c1b      	lsrs	r3, r3, #16
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	3301      	adds	r3, #1
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a74:	60bb      	str	r3, [r7, #8]
      break;
 8006a76:	e002      	b.n	8006a7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a78:	4b05      	ldr	r3, [pc, #20]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006a7a:	60bb      	str	r3, [r7, #8]
      break;
 8006a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006a8a:	bf00      	nop
 8006a8c:	40023800 	.word	0x40023800
 8006a90:	00f42400 	.word	0x00f42400
 8006a94:	007a1200 	.word	0x007a1200

08006a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a9c:	4b03      	ldr	r3, [pc, #12]	; (8006aac <HAL_RCC_GetHCLKFreq+0x14>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	2000001c 	.word	0x2000001c

08006ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ab4:	f7ff fff0 	bl	8006a98 <HAL_RCC_GetHCLKFreq>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	0a9b      	lsrs	r3, r3, #10
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	4903      	ldr	r1, [pc, #12]	; (8006ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ac6:	5ccb      	ldrb	r3, [r1, r3]
 8006ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	40023800 	.word	0x40023800
 8006ad4:	08025d2c 	.word	0x08025d2c

08006ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006adc:	f7ff ffdc 	bl	8006a98 <HAL_RCC_GetHCLKFreq>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	4b05      	ldr	r3, [pc, #20]	; (8006af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	0b5b      	lsrs	r3, r3, #13
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	4903      	ldr	r1, [pc, #12]	; (8006afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006aee:	5ccb      	ldrb	r3, [r1, r3]
 8006af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	40023800 	.word	0x40023800
 8006afc:	08025d2c 	.word	0x08025d2c

08006b00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	220f      	movs	r2, #15
 8006b0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006b10:	4b12      	ldr	r3, [pc, #72]	; (8006b5c <HAL_RCC_GetClockConfig+0x5c>)
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f003 0203 	and.w	r2, r3, #3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006b1c:	4b0f      	ldr	r3, [pc, #60]	; (8006b5c <HAL_RCC_GetClockConfig+0x5c>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006b28:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <HAL_RCC_GetClockConfig+0x5c>)
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006b34:	4b09      	ldr	r3, [pc, #36]	; (8006b5c <HAL_RCC_GetClockConfig+0x5c>)
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	08db      	lsrs	r3, r3, #3
 8006b3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006b42:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <HAL_RCC_GetClockConfig+0x60>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0207 	and.w	r2, r3, #7
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	601a      	str	r2, [r3, #0]
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40023800 	.word	0x40023800
 8006b60:	40023c00 	.word	0x40023c00

08006b64 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d105      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d035      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b8c:	4b62      	ldr	r3, [pc, #392]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b92:	f7fc fe39 	bl	8003808 <HAL_GetTick>
 8006b96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b98:	e008      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b9a:	f7fc fe35 	bl	8003808 <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d901      	bls.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e0b0      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bac:	4b5b      	ldr	r3, [pc, #364]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1f0      	bne.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	019a      	lsls	r2, r3, #6
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	071b      	lsls	r3, r3, #28
 8006bc4:	4955      	ldr	r1, [pc, #340]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006bcc:	4b52      	ldr	r3, [pc, #328]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006bce:	2201      	movs	r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bd2:	f7fc fe19 	bl	8003808 <HAL_GetTick>
 8006bd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bd8:	e008      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bda:	f7fc fe15 	bl	8003808 <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d901      	bls.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e090      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bec:	4b4b      	ldr	r3, [pc, #300]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0f0      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0302 	and.w	r3, r3, #2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 8083 	beq.w	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c06:	2300      	movs	r3, #0
 8006c08:	60fb      	str	r3, [r7, #12]
 8006c0a:	4b44      	ldr	r3, [pc, #272]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	4a43      	ldr	r2, [pc, #268]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c14:	6413      	str	r3, [r2, #64]	; 0x40
 8006c16:	4b41      	ldr	r3, [pc, #260]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006c22:	4b3f      	ldr	r3, [pc, #252]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a3e      	ldr	r2, [pc, #248]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c2e:	f7fc fdeb 	bl	8003808 <HAL_GetTick>
 8006c32:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c34:	e008      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c36:	f7fc fde7 	bl	8003808 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d901      	bls.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e062      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c48:	4b35      	ldr	r3, [pc, #212]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0f0      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c54:	4b31      	ldr	r3, [pc, #196]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c5c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d02f      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d028      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c72:	4b2a      	ldr	r3, [pc, #168]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c7a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c7c:	4b29      	ldr	r3, [pc, #164]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006c7e:	2201      	movs	r2, #1
 8006c80:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c82:	4b28      	ldr	r3, [pc, #160]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006c88:	4a24      	ldr	r2, [pc, #144]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c8e:	4b23      	ldr	r3, [pc, #140]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d114      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c9a:	f7fc fdb5 	bl	8003808 <HAL_GetTick>
 8006c9e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ca0:	e00a      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ca2:	f7fc fdb1 	bl	8003808 <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d901      	bls.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e02a      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cb8:	4b18      	ldr	r3, [pc, #96]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d0ee      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ccc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cd0:	d10d      	bne.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006cd2:	4b12      	ldr	r3, [pc, #72]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce6:	490d      	ldr	r1, [pc, #52]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	608b      	str	r3, [r1, #8]
 8006cec:	e005      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006cee:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	4a0a      	ldr	r2, [pc, #40]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cf4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006cf8:	6093      	str	r3, [r2, #8]
 8006cfa:	4b08      	ldr	r3, [pc, #32]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d06:	4905      	ldr	r1, [pc, #20]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3718      	adds	r7, #24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	42470068 	.word	0x42470068
 8006d1c:	40023800 	.word	0x40023800
 8006d20:	40007000 	.word	0x40007000
 8006d24:	42470e40 	.word	0x42470e40

08006d28 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e083      	b.n	8006e42 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	7f5b      	ldrb	r3, [r3, #29]
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d105      	bne.n	8006d50 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7fc fa6c 	bl	8003228 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	22ca      	movs	r2, #202	; 0xca
 8006d5c:	625a      	str	r2, [r3, #36]	; 0x24
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2253      	movs	r2, #83	; 0x53
 8006d64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 faa8 	bl	80072bc <RTC_EnterInitMode>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d008      	beq.n	8006d84 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	22ff      	movs	r2, #255	; 0xff
 8006d78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2204      	movs	r2, #4
 8006d7e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e05e      	b.n	8006e42 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	6812      	ldr	r2, [r2, #0]
 8006d8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d96:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6899      	ldr	r1, [r3, #8]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	431a      	orrs	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	68d2      	ldr	r2, [r2, #12]
 8006dbe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6919      	ldr	r1, [r3, #16]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	041a      	lsls	r2, r3, #16
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006de2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f003 0320 	and.w	r3, r3, #32
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10e      	bne.n	8006e10 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fa3a 	bl	800726c <HAL_RTC_WaitForSynchro>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d008      	beq.n	8006e10 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	22ff      	movs	r2, #255	; 0xff
 8006e04:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2204      	movs	r2, #4
 8006e0a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e018      	b.n	8006e42 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e1e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699a      	ldr	r2, [r3, #24]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	22ff      	movs	r2, #255	; 0xff
 8006e38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006e40:	2300      	movs	r3, #0
  }
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006e4a:	b590      	push	{r4, r7, lr}
 8006e4c:	b087      	sub	sp, #28
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	7f1b      	ldrb	r3, [r3, #28]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d101      	bne.n	8006e66 <HAL_RTC_SetTime+0x1c>
 8006e62:	2302      	movs	r3, #2
 8006e64:	e0aa      	b.n	8006fbc <HAL_RTC_SetTime+0x172>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d126      	bne.n	8006ec6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d102      	bne.n	8006e8c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 fa3f 	bl	8007314 <RTC_ByteToBcd2>
 8006e96:	4603      	mov	r3, r0
 8006e98:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	785b      	ldrb	r3, [r3, #1]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 fa38 	bl	8007314 <RTC_ByteToBcd2>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006ea8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	789b      	ldrb	r3, [r3, #2]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fa30 	bl	8007314 <RTC_ByteToBcd2>
 8006eb4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006eb6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	78db      	ldrb	r3, [r3, #3]
 8006ebe:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	617b      	str	r3, [r7, #20]
 8006ec4:	e018      	b.n	8006ef8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d102      	bne.n	8006eda <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	785b      	ldrb	r3, [r3, #1]
 8006ee4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006ee6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006eec:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	78db      	ldrb	r3, [r3, #3]
 8006ef2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	22ca      	movs	r2, #202	; 0xca
 8006efe:	625a      	str	r2, [r3, #36]	; 0x24
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2253      	movs	r2, #83	; 0x53
 8006f06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 f9d7 	bl	80072bc <RTC_EnterInitMode>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00b      	beq.n	8006f2c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	22ff      	movs	r2, #255	; 0xff
 8006f1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2204      	movs	r2, #4
 8006f20:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e047      	b.n	8006fbc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006f36:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006f3a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f4a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6899      	ldr	r1, [r3, #8]
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	68da      	ldr	r2, [r3, #12]
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	430a      	orrs	r2, r1
 8006f62:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f72:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f003 0320 	and.w	r3, r3, #32
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d111      	bne.n	8006fa6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f000 f972 	bl	800726c <HAL_RTC_WaitForSynchro>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00b      	beq.n	8006fa6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	22ff      	movs	r2, #255	; 0xff
 8006f94:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2204      	movs	r2, #4
 8006f9a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e00a      	b.n	8006fbc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	22ff      	movs	r2, #255	; 0xff
 8006fac:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006fba:	2300      	movs	r3, #0
  }
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	371c      	adds	r7, #28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd90      	pop	{r4, r7, pc}

08006fc4 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006ff6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006ffa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	0c1b      	lsrs	r3, r3, #16
 8007000:	b2db      	uxtb	r3, r3
 8007002:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007006:	b2da      	uxtb	r2, r3
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	0a1b      	lsrs	r3, r3, #8
 8007010:	b2db      	uxtb	r3, r3
 8007012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007016:	b2da      	uxtb	r2, r3
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	b2db      	uxtb	r3, r3
 8007020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007024:	b2da      	uxtb	r2, r3
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	0c1b      	lsrs	r3, r3, #16
 800702e:	b2db      	uxtb	r3, r3
 8007030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007034:	b2da      	uxtb	r2, r3
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d11a      	bne.n	8007076 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	4618      	mov	r0, r3
 8007046:	f000 f983 	bl	8007350 <RTC_Bcd2ToByte>
 800704a:	4603      	mov	r3, r0
 800704c:	461a      	mov	r2, r3
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	785b      	ldrb	r3, [r3, #1]
 8007056:	4618      	mov	r0, r3
 8007058:	f000 f97a 	bl	8007350 <RTC_Bcd2ToByte>
 800705c:	4603      	mov	r3, r0
 800705e:	461a      	mov	r2, r3
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	789b      	ldrb	r3, [r3, #2]
 8007068:	4618      	mov	r0, r3
 800706a:	f000 f971 	bl	8007350 <RTC_Bcd2ToByte>
 800706e:	4603      	mov	r3, r0
 8007070:	461a      	mov	r2, r3
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007080:	b590      	push	{r4, r7, lr}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800708c:	2300      	movs	r3, #0
 800708e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	7f1b      	ldrb	r3, [r3, #28]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d101      	bne.n	800709c <HAL_RTC_SetDate+0x1c>
 8007098:	2302      	movs	r3, #2
 800709a:	e094      	b.n	80071c6 <HAL_RTC_SetDate+0x146>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2201      	movs	r2, #1
 80070a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2202      	movs	r2, #2
 80070a6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10e      	bne.n	80070cc <HAL_RTC_SetDate+0x4c>
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	785b      	ldrb	r3, [r3, #1]
 80070b2:	f003 0310 	and.w	r3, r3, #16
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d008      	beq.n	80070cc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	785b      	ldrb	r3, [r3, #1]
 80070be:	f023 0310 	bic.w	r3, r3, #16
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	330a      	adds	r3, #10
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d11c      	bne.n	800710c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	78db      	ldrb	r3, [r3, #3]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f000 f91c 	bl	8007314 <RTC_ByteToBcd2>
 80070dc:	4603      	mov	r3, r0
 80070de:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	785b      	ldrb	r3, [r3, #1]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 f915 	bl	8007314 <RTC_ByteToBcd2>
 80070ea:	4603      	mov	r3, r0
 80070ec:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80070ee:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	789b      	ldrb	r3, [r3, #2]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f000 f90d 	bl	8007314 <RTC_ByteToBcd2>
 80070fa:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80070fc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007106:	4313      	orrs	r3, r2
 8007108:	617b      	str	r3, [r7, #20]
 800710a:	e00e      	b.n	800712a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	78db      	ldrb	r3, [r3, #3]
 8007110:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	785b      	ldrb	r3, [r3, #1]
 8007116:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007118:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800711e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	22ca      	movs	r2, #202	; 0xca
 8007130:	625a      	str	r2, [r3, #36]	; 0x24
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2253      	movs	r2, #83	; 0x53
 8007138:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f000 f8be 	bl	80072bc <RTC_EnterInitMode>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00b      	beq.n	800715e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	22ff      	movs	r2, #255	; 0xff
 800714c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2204      	movs	r2, #4
 8007152:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e033      	b.n	80071c6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007168:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800716c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68da      	ldr	r2, [r3, #12]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800717c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f003 0320 	and.w	r3, r3, #32
 8007188:	2b00      	cmp	r3, #0
 800718a:	d111      	bne.n	80071b0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 f86d 	bl	800726c <HAL_RTC_WaitForSynchro>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00b      	beq.n	80071b0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	22ff      	movs	r2, #255	; 0xff
 800719e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2204      	movs	r2, #4
 80071a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e00a      	b.n	80071c6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	22ff      	movs	r2, #255	; 0xff
 80071b6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2201      	movs	r2, #1
 80071bc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80071c4:	2300      	movs	r3, #0
  }
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	371c      	adds	r7, #28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd90      	pop	{r4, r7, pc}

080071ce <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b086      	sub	sp, #24
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	60f8      	str	r0, [r7, #12]
 80071d6:	60b9      	str	r1, [r7, #8]
 80071d8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80071e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80071ec:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	0c1b      	lsrs	r3, r3, #16
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	0a1b      	lsrs	r3, r3, #8
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	f003 031f 	and.w	r3, r3, #31
 8007202:	b2da      	uxtb	r2, r3
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	b2db      	uxtb	r3, r3
 800720c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007210:	b2da      	uxtb	r2, r3
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	0b5b      	lsrs	r3, r3, #13
 800721a:	b2db      	uxtb	r3, r3
 800721c:	f003 0307 	and.w	r3, r3, #7
 8007220:	b2da      	uxtb	r2, r3
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d11a      	bne.n	8007262 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	78db      	ldrb	r3, [r3, #3]
 8007230:	4618      	mov	r0, r3
 8007232:	f000 f88d 	bl	8007350 <RTC_Bcd2ToByte>
 8007236:	4603      	mov	r3, r0
 8007238:	461a      	mov	r2, r3
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	785b      	ldrb	r3, [r3, #1]
 8007242:	4618      	mov	r0, r3
 8007244:	f000 f884 	bl	8007350 <RTC_Bcd2ToByte>
 8007248:	4603      	mov	r3, r0
 800724a:	461a      	mov	r2, r3
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	789b      	ldrb	r3, [r3, #2]
 8007254:	4618      	mov	r0, r3
 8007256:	f000 f87b 	bl	8007350 <RTC_Bcd2ToByte>
 800725a:	4603      	mov	r3, r0
 800725c:	461a      	mov	r2, r3
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007286:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007288:	f7fc fabe 	bl	8003808 <HAL_GetTick>
 800728c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800728e:	e009      	b.n	80072a4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007290:	f7fc faba 	bl	8003808 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800729e:	d901      	bls.n	80072a4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e007      	b.n	80072b4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0ee      	beq.n	8007290 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d119      	bne.n	800730a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f04f 32ff 	mov.w	r2, #4294967295
 80072de:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072e0:	f7fc fa92 	bl	8003808 <HAL_GetTick>
 80072e4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80072e6:	e009      	b.n	80072fc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80072e8:	f7fc fa8e 	bl	8003808 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072f6:	d901      	bls.n	80072fc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e007      	b.n	800730c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007306:	2b00      	cmp	r3, #0
 8007308:	d0ee      	beq.n	80072e8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	4603      	mov	r3, r0
 800731c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8007322:	e005      	b.n	8007330 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3301      	adds	r3, #1
 8007328:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800732a:	79fb      	ldrb	r3, [r7, #7]
 800732c:	3b0a      	subs	r3, #10
 800732e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8007330:	79fb      	ldrb	r3, [r7, #7]
 8007332:	2b09      	cmp	r3, #9
 8007334:	d8f6      	bhi.n	8007324 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	b2db      	uxtb	r3, r3
 800733a:	011b      	lsls	r3, r3, #4
 800733c:	b2da      	uxtb	r2, r3
 800733e:	79fb      	ldrb	r3, [r7, #7]
 8007340:	4313      	orrs	r3, r2
 8007342:	b2db      	uxtb	r3, r3
}
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	4603      	mov	r3, r0
 8007358:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800735a:	2300      	movs	r3, #0
 800735c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	091b      	lsrs	r3, r3, #4
 8007362:	b2db      	uxtb	r3, r3
 8007364:	461a      	mov	r2, r3
 8007366:	4613      	mov	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	005b      	lsls	r3, r3, #1
 800736e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007370:	79fb      	ldrb	r3, [r7, #7]
 8007372:	f003 030f 	and.w	r3, r3, #15
 8007376:	b2da      	uxtb	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	4413      	add	r3, r2
 800737e:	b2db      	uxtb	r3, r3
}
 8007380:	4618      	mov	r0, r3
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e07b      	b.n	8007496 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d108      	bne.n	80073b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073ae:	d009      	beq.n	80073c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	61da      	str	r2, [r3, #28]
 80073b6:	e005      	b.n	80073c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d106      	bne.n	80073e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7fb ff38 	bl	8003254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	431a      	orrs	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007434:	431a      	orrs	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800743e:	431a      	orrs	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007448:	ea42 0103 	orr.w	r1, r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007450:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	0c1b      	lsrs	r3, r3, #16
 8007462:	f003 0104 	and.w	r1, r3, #4
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746a:	f003 0210 	and.w	r2, r3, #16
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69da      	ldr	r2, [r3, #28]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007484:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b082      	sub	sp, #8
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e041      	b.n	8007534 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d106      	bne.n	80074ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7fb ff0d 	bl	80032e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2202      	movs	r2, #2
 80074ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3304      	adds	r3, #4
 80074da:	4619      	mov	r1, r3
 80074dc:	4610      	mov	r0, r2
 80074de:	f000 fa95 	bl	8007a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b01      	cmp	r3, #1
 800754e:	d001      	beq.n	8007554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e04e      	b.n	80075f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68da      	ldr	r2, [r3, #12]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0201 	orr.w	r2, r2, #1
 800756a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a23      	ldr	r2, [pc, #140]	; (8007600 <HAL_TIM_Base_Start_IT+0xc4>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d022      	beq.n	80075bc <HAL_TIM_Base_Start_IT+0x80>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800757e:	d01d      	beq.n	80075bc <HAL_TIM_Base_Start_IT+0x80>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a1f      	ldr	r2, [pc, #124]	; (8007604 <HAL_TIM_Base_Start_IT+0xc8>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d018      	beq.n	80075bc <HAL_TIM_Base_Start_IT+0x80>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a1e      	ldr	r2, [pc, #120]	; (8007608 <HAL_TIM_Base_Start_IT+0xcc>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d013      	beq.n	80075bc <HAL_TIM_Base_Start_IT+0x80>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a1c      	ldr	r2, [pc, #112]	; (800760c <HAL_TIM_Base_Start_IT+0xd0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d00e      	beq.n	80075bc <HAL_TIM_Base_Start_IT+0x80>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a1b      	ldr	r2, [pc, #108]	; (8007610 <HAL_TIM_Base_Start_IT+0xd4>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d009      	beq.n	80075bc <HAL_TIM_Base_Start_IT+0x80>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a19      	ldr	r2, [pc, #100]	; (8007614 <HAL_TIM_Base_Start_IT+0xd8>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d004      	beq.n	80075bc <HAL_TIM_Base_Start_IT+0x80>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a18      	ldr	r2, [pc, #96]	; (8007618 <HAL_TIM_Base_Start_IT+0xdc>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d111      	bne.n	80075e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f003 0307 	and.w	r3, r3, #7
 80075c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b06      	cmp	r3, #6
 80075cc:	d010      	beq.n	80075f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f042 0201 	orr.w	r2, r2, #1
 80075dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075de:	e007      	b.n	80075f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f042 0201 	orr.w	r2, r2, #1
 80075ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	40010000 	.word	0x40010000
 8007604:	40000400 	.word	0x40000400
 8007608:	40000800 	.word	0x40000800
 800760c:	40000c00 	.word	0x40000c00
 8007610:	40010400 	.word	0x40010400
 8007614:	40014000 	.word	0x40014000
 8007618:	40001800 	.word	0x40001800

0800761c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b02      	cmp	r3, #2
 8007630:	d122      	bne.n	8007678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b02      	cmp	r3, #2
 800763e:	d11b      	bne.n	8007678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f06f 0202 	mvn.w	r2, #2
 8007648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	f003 0303 	and.w	r3, r3, #3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d003      	beq.n	8007666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f9b5 	bl	80079ce <HAL_TIM_IC_CaptureCallback>
 8007664:	e005      	b.n	8007672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f9a7 	bl	80079ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f9b8 	bl	80079e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f003 0304 	and.w	r3, r3, #4
 8007682:	2b04      	cmp	r3, #4
 8007684:	d122      	bne.n	80076cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	f003 0304 	and.w	r3, r3, #4
 8007690:	2b04      	cmp	r3, #4
 8007692:	d11b      	bne.n	80076cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f06f 0204 	mvn.w	r2, #4
 800769c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2202      	movs	r2, #2
 80076a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f98b 	bl	80079ce <HAL_TIM_IC_CaptureCallback>
 80076b8:	e005      	b.n	80076c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f97d 	bl	80079ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f98e 	bl	80079e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	f003 0308 	and.w	r3, r3, #8
 80076d6:	2b08      	cmp	r3, #8
 80076d8:	d122      	bne.n	8007720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	f003 0308 	and.w	r3, r3, #8
 80076e4:	2b08      	cmp	r3, #8
 80076e6:	d11b      	bne.n	8007720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f06f 0208 	mvn.w	r2, #8
 80076f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2204      	movs	r2, #4
 80076f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	f003 0303 	and.w	r3, r3, #3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d003      	beq.n	800770e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f961 	bl	80079ce <HAL_TIM_IC_CaptureCallback>
 800770c:	e005      	b.n	800771a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f953 	bl	80079ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f964 	bl	80079e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	f003 0310 	and.w	r3, r3, #16
 800772a:	2b10      	cmp	r3, #16
 800772c:	d122      	bne.n	8007774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f003 0310 	and.w	r3, r3, #16
 8007738:	2b10      	cmp	r3, #16
 800773a:	d11b      	bne.n	8007774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f06f 0210 	mvn.w	r2, #16
 8007744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2208      	movs	r2, #8
 800774a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007756:	2b00      	cmp	r3, #0
 8007758:	d003      	beq.n	8007762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f937 	bl	80079ce <HAL_TIM_IC_CaptureCallback>
 8007760:	e005      	b.n	800776e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f929 	bl	80079ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f93a 	bl	80079e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	2b01      	cmp	r3, #1
 8007780:	d10e      	bne.n	80077a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	f003 0301 	and.w	r3, r3, #1
 800778c:	2b01      	cmp	r3, #1
 800778e:	d107      	bne.n	80077a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f06f 0201 	mvn.w	r2, #1
 8007798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7fa fe26 	bl	80023ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077aa:	2b80      	cmp	r3, #128	; 0x80
 80077ac:	d10e      	bne.n	80077cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b8:	2b80      	cmp	r3, #128	; 0x80
 80077ba:	d107      	bne.n	80077cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fae0 	bl	8007d8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d6:	2b40      	cmp	r3, #64	; 0x40
 80077d8:	d10e      	bne.n	80077f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e4:	2b40      	cmp	r3, #64	; 0x40
 80077e6:	d107      	bne.n	80077f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f8ff 	bl	80079f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	f003 0320 	and.w	r3, r3, #32
 8007802:	2b20      	cmp	r3, #32
 8007804:	d10e      	bne.n	8007824 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	f003 0320 	and.w	r3, r3, #32
 8007810:	2b20      	cmp	r3, #32
 8007812:	d107      	bne.n	8007824 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f06f 0220 	mvn.w	r2, #32
 800781c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 faaa 	bl	8007d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007824:	bf00      	nop
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007840:	2b01      	cmp	r3, #1
 8007842:	d101      	bne.n	8007848 <HAL_TIM_ConfigClockSource+0x1c>
 8007844:	2302      	movs	r3, #2
 8007846:	e0b4      	b.n	80079b2 <HAL_TIM_ConfigClockSource+0x186>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2202      	movs	r2, #2
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800786e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007880:	d03e      	beq.n	8007900 <HAL_TIM_ConfigClockSource+0xd4>
 8007882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007886:	f200 8087 	bhi.w	8007998 <HAL_TIM_ConfigClockSource+0x16c>
 800788a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800788e:	f000 8086 	beq.w	800799e <HAL_TIM_ConfigClockSource+0x172>
 8007892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007896:	d87f      	bhi.n	8007998 <HAL_TIM_ConfigClockSource+0x16c>
 8007898:	2b70      	cmp	r3, #112	; 0x70
 800789a:	d01a      	beq.n	80078d2 <HAL_TIM_ConfigClockSource+0xa6>
 800789c:	2b70      	cmp	r3, #112	; 0x70
 800789e:	d87b      	bhi.n	8007998 <HAL_TIM_ConfigClockSource+0x16c>
 80078a0:	2b60      	cmp	r3, #96	; 0x60
 80078a2:	d050      	beq.n	8007946 <HAL_TIM_ConfigClockSource+0x11a>
 80078a4:	2b60      	cmp	r3, #96	; 0x60
 80078a6:	d877      	bhi.n	8007998 <HAL_TIM_ConfigClockSource+0x16c>
 80078a8:	2b50      	cmp	r3, #80	; 0x50
 80078aa:	d03c      	beq.n	8007926 <HAL_TIM_ConfigClockSource+0xfa>
 80078ac:	2b50      	cmp	r3, #80	; 0x50
 80078ae:	d873      	bhi.n	8007998 <HAL_TIM_ConfigClockSource+0x16c>
 80078b0:	2b40      	cmp	r3, #64	; 0x40
 80078b2:	d058      	beq.n	8007966 <HAL_TIM_ConfigClockSource+0x13a>
 80078b4:	2b40      	cmp	r3, #64	; 0x40
 80078b6:	d86f      	bhi.n	8007998 <HAL_TIM_ConfigClockSource+0x16c>
 80078b8:	2b30      	cmp	r3, #48	; 0x30
 80078ba:	d064      	beq.n	8007986 <HAL_TIM_ConfigClockSource+0x15a>
 80078bc:	2b30      	cmp	r3, #48	; 0x30
 80078be:	d86b      	bhi.n	8007998 <HAL_TIM_ConfigClockSource+0x16c>
 80078c0:	2b20      	cmp	r3, #32
 80078c2:	d060      	beq.n	8007986 <HAL_TIM_ConfigClockSource+0x15a>
 80078c4:	2b20      	cmp	r3, #32
 80078c6:	d867      	bhi.n	8007998 <HAL_TIM_ConfigClockSource+0x16c>
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d05c      	beq.n	8007986 <HAL_TIM_ConfigClockSource+0x15a>
 80078cc:	2b10      	cmp	r3, #16
 80078ce:	d05a      	beq.n	8007986 <HAL_TIM_ConfigClockSource+0x15a>
 80078d0:	e062      	b.n	8007998 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6818      	ldr	r0, [r3, #0]
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	6899      	ldr	r1, [r3, #8]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	f000 f9ad 	bl	8007c40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80078f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	609a      	str	r2, [r3, #8]
      break;
 80078fe:	e04f      	b.n	80079a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6818      	ldr	r0, [r3, #0]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	6899      	ldr	r1, [r3, #8]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f000 f996 	bl	8007c40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	689a      	ldr	r2, [r3, #8]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007922:	609a      	str	r2, [r3, #8]
      break;
 8007924:	e03c      	b.n	80079a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6818      	ldr	r0, [r3, #0]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	6859      	ldr	r1, [r3, #4]
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	461a      	mov	r2, r3
 8007934:	f000 f90a 	bl	8007b4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2150      	movs	r1, #80	; 0x50
 800793e:	4618      	mov	r0, r3
 8007940:	f000 f963 	bl	8007c0a <TIM_ITRx_SetConfig>
      break;
 8007944:	e02c      	b.n	80079a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6818      	ldr	r0, [r3, #0]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	6859      	ldr	r1, [r3, #4]
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	461a      	mov	r2, r3
 8007954:	f000 f929 	bl	8007baa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2160      	movs	r1, #96	; 0x60
 800795e:	4618      	mov	r0, r3
 8007960:	f000 f953 	bl	8007c0a <TIM_ITRx_SetConfig>
      break;
 8007964:	e01c      	b.n	80079a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6818      	ldr	r0, [r3, #0]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	6859      	ldr	r1, [r3, #4]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	461a      	mov	r2, r3
 8007974:	f000 f8ea 	bl	8007b4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2140      	movs	r1, #64	; 0x40
 800797e:	4618      	mov	r0, r3
 8007980:	f000 f943 	bl	8007c0a <TIM_ITRx_SetConfig>
      break;
 8007984:	e00c      	b.n	80079a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4619      	mov	r1, r3
 8007990:	4610      	mov	r0, r2
 8007992:	f000 f93a 	bl	8007c0a <TIM_ITRx_SetConfig>
      break;
 8007996:	e003      	b.n	80079a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	73fb      	strb	r3, [r7, #15]
      break;
 800799c:	e000      	b.n	80079a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800799e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079c2:	bf00      	nop
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b083      	sub	sp, #12
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079d6:	bf00      	nop
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079ea:	bf00      	nop
 80079ec:	370c      	adds	r7, #12
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr

080079f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079f6:	b480      	push	{r7}
 80079f8:	b083      	sub	sp, #12
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
	...

08007a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a40      	ldr	r2, [pc, #256]	; (8007b20 <TIM_Base_SetConfig+0x114>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d013      	beq.n	8007a4c <TIM_Base_SetConfig+0x40>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a2a:	d00f      	beq.n	8007a4c <TIM_Base_SetConfig+0x40>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a3d      	ldr	r2, [pc, #244]	; (8007b24 <TIM_Base_SetConfig+0x118>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d00b      	beq.n	8007a4c <TIM_Base_SetConfig+0x40>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a3c      	ldr	r2, [pc, #240]	; (8007b28 <TIM_Base_SetConfig+0x11c>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d007      	beq.n	8007a4c <TIM_Base_SetConfig+0x40>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a3b      	ldr	r2, [pc, #236]	; (8007b2c <TIM_Base_SetConfig+0x120>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d003      	beq.n	8007a4c <TIM_Base_SetConfig+0x40>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a3a      	ldr	r2, [pc, #232]	; (8007b30 <TIM_Base_SetConfig+0x124>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d108      	bne.n	8007a5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a2f      	ldr	r2, [pc, #188]	; (8007b20 <TIM_Base_SetConfig+0x114>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d02b      	beq.n	8007abe <TIM_Base_SetConfig+0xb2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a6c:	d027      	beq.n	8007abe <TIM_Base_SetConfig+0xb2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a2c      	ldr	r2, [pc, #176]	; (8007b24 <TIM_Base_SetConfig+0x118>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d023      	beq.n	8007abe <TIM_Base_SetConfig+0xb2>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a2b      	ldr	r2, [pc, #172]	; (8007b28 <TIM_Base_SetConfig+0x11c>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d01f      	beq.n	8007abe <TIM_Base_SetConfig+0xb2>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a2a      	ldr	r2, [pc, #168]	; (8007b2c <TIM_Base_SetConfig+0x120>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d01b      	beq.n	8007abe <TIM_Base_SetConfig+0xb2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a29      	ldr	r2, [pc, #164]	; (8007b30 <TIM_Base_SetConfig+0x124>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d017      	beq.n	8007abe <TIM_Base_SetConfig+0xb2>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a28      	ldr	r2, [pc, #160]	; (8007b34 <TIM_Base_SetConfig+0x128>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d013      	beq.n	8007abe <TIM_Base_SetConfig+0xb2>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a27      	ldr	r2, [pc, #156]	; (8007b38 <TIM_Base_SetConfig+0x12c>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d00f      	beq.n	8007abe <TIM_Base_SetConfig+0xb2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a26      	ldr	r2, [pc, #152]	; (8007b3c <TIM_Base_SetConfig+0x130>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d00b      	beq.n	8007abe <TIM_Base_SetConfig+0xb2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a25      	ldr	r2, [pc, #148]	; (8007b40 <TIM_Base_SetConfig+0x134>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d007      	beq.n	8007abe <TIM_Base_SetConfig+0xb2>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a24      	ldr	r2, [pc, #144]	; (8007b44 <TIM_Base_SetConfig+0x138>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d003      	beq.n	8007abe <TIM_Base_SetConfig+0xb2>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a23      	ldr	r2, [pc, #140]	; (8007b48 <TIM_Base_SetConfig+0x13c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d108      	bne.n	8007ad0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	689a      	ldr	r2, [r3, #8]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a0a      	ldr	r2, [pc, #40]	; (8007b20 <TIM_Base_SetConfig+0x114>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d003      	beq.n	8007b04 <TIM_Base_SetConfig+0xf8>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a0c      	ldr	r2, [pc, #48]	; (8007b30 <TIM_Base_SetConfig+0x124>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d103      	bne.n	8007b0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	691a      	ldr	r2, [r3, #16]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	615a      	str	r2, [r3, #20]
}
 8007b12:	bf00      	nop
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	40010000 	.word	0x40010000
 8007b24:	40000400 	.word	0x40000400
 8007b28:	40000800 	.word	0x40000800
 8007b2c:	40000c00 	.word	0x40000c00
 8007b30:	40010400 	.word	0x40010400
 8007b34:	40014000 	.word	0x40014000
 8007b38:	40014400 	.word	0x40014400
 8007b3c:	40014800 	.word	0x40014800
 8007b40:	40001800 	.word	0x40001800
 8007b44:	40001c00 	.word	0x40001c00
 8007b48:	40002000 	.word	0x40002000

08007b4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b087      	sub	sp, #28
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6a1b      	ldr	r3, [r3, #32]
 8007b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	f023 0201 	bic.w	r2, r3, #1
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	011b      	lsls	r3, r3, #4
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	f023 030a 	bic.w	r3, r3, #10
 8007b88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	621a      	str	r2, [r3, #32]
}
 8007b9e:	bf00      	nop
 8007ba0:	371c      	adds	r7, #28
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b087      	sub	sp, #28
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	60f8      	str	r0, [r7, #12]
 8007bb2:	60b9      	str	r1, [r7, #8]
 8007bb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	f023 0210 	bic.w	r2, r3, #16
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	031b      	lsls	r3, r3, #12
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007be6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	011b      	lsls	r3, r3, #4
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	621a      	str	r2, [r3, #32]
}
 8007bfe:	bf00      	nop
 8007c00:	371c      	adds	r7, #28
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b085      	sub	sp, #20
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c22:	683a      	ldr	r2, [r7, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	f043 0307 	orr.w	r3, r3, #7
 8007c2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	609a      	str	r2, [r3, #8]
}
 8007c34:	bf00      	nop
 8007c36:	3714      	adds	r7, #20
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b087      	sub	sp, #28
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
 8007c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	021a      	lsls	r2, r3, #8
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	431a      	orrs	r2, r3
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	609a      	str	r2, [r3, #8]
}
 8007c74:	bf00      	nop
 8007c76:	371c      	adds	r7, #28
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d101      	bne.n	8007c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c94:	2302      	movs	r3, #2
 8007c96:	e05a      	b.n	8007d4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a21      	ldr	r2, [pc, #132]	; (8007d5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d022      	beq.n	8007d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ce4:	d01d      	beq.n	8007d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a1d      	ldr	r2, [pc, #116]	; (8007d60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d018      	beq.n	8007d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a1b      	ldr	r2, [pc, #108]	; (8007d64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d013      	beq.n	8007d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a1a      	ldr	r2, [pc, #104]	; (8007d68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d00e      	beq.n	8007d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a18      	ldr	r2, [pc, #96]	; (8007d6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d009      	beq.n	8007d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a17      	ldr	r2, [pc, #92]	; (8007d70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d004      	beq.n	8007d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a15      	ldr	r2, [pc, #84]	; (8007d74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d10c      	bne.n	8007d3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3714      	adds	r7, #20
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	40010000 	.word	0x40010000
 8007d60:	40000400 	.word	0x40000400
 8007d64:	40000800 	.word	0x40000800
 8007d68:	40000c00 	.word	0x40000c00
 8007d6c:	40010400 	.word	0x40010400
 8007d70:	40014000 	.word	0x40014000
 8007d74:	40001800 	.word	0x40001800

08007d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e03f      	b.n	8007e32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d106      	bne.n	8007dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7fb fab2 	bl	8003330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2224      	movs	r2, #36	; 0x24
 8007dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68da      	ldr	r2, [r3, #12]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007de2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fdd1 	bl	800898c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	691a      	ldr	r2, [r3, #16]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	695a      	ldr	r2, [r3, #20]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68da      	ldr	r2, [r3, #12]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2220      	movs	r2, #32
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b08a      	sub	sp, #40	; 0x28
 8007e3e:	af02      	add	r7, sp, #8
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	603b      	str	r3, [r7, #0]
 8007e46:	4613      	mov	r3, r2
 8007e48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b20      	cmp	r3, #32
 8007e58:	d17c      	bne.n	8007f54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d002      	beq.n	8007e66 <HAL_UART_Transmit+0x2c>
 8007e60:	88fb      	ldrh	r3, [r7, #6]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d101      	bne.n	8007e6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e075      	b.n	8007f56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d101      	bne.n	8007e78 <HAL_UART_Transmit+0x3e>
 8007e74:	2302      	movs	r3, #2
 8007e76:	e06e      	b.n	8007f56 <HAL_UART_Transmit+0x11c>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2221      	movs	r2, #33	; 0x21
 8007e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e8e:	f7fb fcbb 	bl	8003808 <HAL_GetTick>
 8007e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	88fa      	ldrh	r2, [r7, #6]
 8007e98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	88fa      	ldrh	r2, [r7, #6]
 8007e9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea8:	d108      	bne.n	8007ebc <HAL_UART_Transmit+0x82>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d104      	bne.n	8007ebc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	61bb      	str	r3, [r7, #24]
 8007eba:	e003      	b.n	8007ec4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007ecc:	e02a      	b.n	8007f24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2180      	movs	r1, #128	; 0x80
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f000 fb15 	bl	8008508 <UART_WaitOnFlagUntilTimeout>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d001      	beq.n	8007ee8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e036      	b.n	8007f56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10b      	bne.n	8007f06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007efc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	3302      	adds	r3, #2
 8007f02:	61bb      	str	r3, [r7, #24]
 8007f04:	e007      	b.n	8007f16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	781a      	ldrb	r2, [r3, #0]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	3301      	adds	r3, #1
 8007f14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1cf      	bne.n	8007ece <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2200      	movs	r2, #0
 8007f36:	2140      	movs	r1, #64	; 0x40
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 fae5 	bl	8008508 <UART_WaitOnFlagUntilTimeout>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e006      	b.n	8007f56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2220      	movs	r2, #32
 8007f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	e000      	b.n	8007f56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007f54:	2302      	movs	r3, #2
  }
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3720      	adds	r7, #32
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	60f8      	str	r0, [r7, #12]
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	2b20      	cmp	r3, #32
 8007f76:	d11d      	bne.n	8007fb4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d002      	beq.n	8007f84 <HAL_UART_Receive_IT+0x26>
 8007f7e:	88fb      	ldrh	r3, [r7, #6]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e016      	b.n	8007fb6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d101      	bne.n	8007f96 <HAL_UART_Receive_IT+0x38>
 8007f92:	2302      	movs	r3, #2
 8007f94:	e00f      	b.n	8007fb6 <HAL_UART_Receive_IT+0x58>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007fa4:	88fb      	ldrh	r3, [r7, #6]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	68b9      	ldr	r1, [r7, #8]
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 fb1a 	bl	80085e4 <UART_Start_Receive_IT>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	e000      	b.n	8007fb6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007fb4:	2302      	movs	r3, #2
  }
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
	...

08007fc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b0ba      	sub	sp, #232	; 0xe8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007fec:	2300      	movs	r3, #0
 8007fee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ff6:	f003 030f 	and.w	r3, r3, #15
 8007ffa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007ffe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10f      	bne.n	8008026 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800800a:	f003 0320 	and.w	r3, r3, #32
 800800e:	2b00      	cmp	r3, #0
 8008010:	d009      	beq.n	8008026 <HAL_UART_IRQHandler+0x66>
 8008012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008016:	f003 0320 	and.w	r3, r3, #32
 800801a:	2b00      	cmp	r3, #0
 800801c:	d003      	beq.n	8008026 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fbf9 	bl	8008816 <UART_Receive_IT>
      return;
 8008024:	e256      	b.n	80084d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008026:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800802a:	2b00      	cmp	r3, #0
 800802c:	f000 80de 	beq.w	80081ec <HAL_UART_IRQHandler+0x22c>
 8008030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b00      	cmp	r3, #0
 800803a:	d106      	bne.n	800804a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800803c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008040:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008044:	2b00      	cmp	r3, #0
 8008046:	f000 80d1 	beq.w	80081ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800804a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00b      	beq.n	800806e <HAL_UART_IRQHandler+0xae>
 8008056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800805a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800805e:	2b00      	cmp	r3, #0
 8008060:	d005      	beq.n	800806e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008066:	f043 0201 	orr.w	r2, r3, #1
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800806e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008072:	f003 0304 	and.w	r3, r3, #4
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00b      	beq.n	8008092 <HAL_UART_IRQHandler+0xd2>
 800807a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d005      	beq.n	8008092 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808a:	f043 0202 	orr.w	r2, r3, #2
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008096:	f003 0302 	and.w	r3, r3, #2
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00b      	beq.n	80080b6 <HAL_UART_IRQHandler+0xf6>
 800809e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d005      	beq.n	80080b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ae:	f043 0204 	orr.w	r2, r3, #4
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80080b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ba:	f003 0308 	and.w	r3, r3, #8
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d011      	beq.n	80080e6 <HAL_UART_IRQHandler+0x126>
 80080c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080c6:	f003 0320 	and.w	r3, r3, #32
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d105      	bne.n	80080da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80080ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d005      	beq.n	80080e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080de:	f043 0208 	orr.w	r2, r3, #8
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f000 81ed 	beq.w	80084ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080f4:	f003 0320 	and.w	r3, r3, #32
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d008      	beq.n	800810e <HAL_UART_IRQHandler+0x14e>
 80080fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008100:	f003 0320 	and.w	r3, r3, #32
 8008104:	2b00      	cmp	r3, #0
 8008106:	d002      	beq.n	800810e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fb84 	bl	8008816 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	695b      	ldr	r3, [r3, #20]
 8008114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008118:	2b40      	cmp	r3, #64	; 0x40
 800811a:	bf0c      	ite	eq
 800811c:	2301      	moveq	r3, #1
 800811e:	2300      	movne	r3, #0
 8008120:	b2db      	uxtb	r3, r3
 8008122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812a:	f003 0308 	and.w	r3, r3, #8
 800812e:	2b00      	cmp	r3, #0
 8008130:	d103      	bne.n	800813a <HAL_UART_IRQHandler+0x17a>
 8008132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008136:	2b00      	cmp	r3, #0
 8008138:	d04f      	beq.n	80081da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fa8c 	bl	8008658 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800814a:	2b40      	cmp	r3, #64	; 0x40
 800814c:	d141      	bne.n	80081d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	3314      	adds	r3, #20
 8008154:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008158:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800815c:	e853 3f00 	ldrex	r3, [r3]
 8008160:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008164:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800816c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3314      	adds	r3, #20
 8008176:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800817a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800817e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008182:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008186:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800818a:	e841 2300 	strex	r3, r2, [r1]
 800818e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1d9      	bne.n	800814e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d013      	beq.n	80081ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a6:	4a7d      	ldr	r2, [pc, #500]	; (800839c <HAL_UART_IRQHandler+0x3dc>)
 80081a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fb fcac 	bl	8003b0c <HAL_DMA_Abort_IT>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d016      	beq.n	80081e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80081c4:	4610      	mov	r0, r2
 80081c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c8:	e00e      	b.n	80081e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f986 	bl	80084dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d0:	e00a      	b.n	80081e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f982 	bl	80084dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d8:	e006      	b.n	80081e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f97e 	bl	80084dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80081e6:	e170      	b.n	80084ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e8:	bf00      	nop
    return;
 80081ea:	e16e      	b.n	80084ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	f040 814a 	bne.w	800848a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80081f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081fa:	f003 0310 	and.w	r3, r3, #16
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f000 8143 	beq.w	800848a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008208:	f003 0310 	and.w	r3, r3, #16
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 813c 	beq.w	800848a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008212:	2300      	movs	r3, #0
 8008214:	60bb      	str	r3, [r7, #8]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	60bb      	str	r3, [r7, #8]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	60bb      	str	r3, [r7, #8]
 8008226:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008232:	2b40      	cmp	r3, #64	; 0x40
 8008234:	f040 80b4 	bne.w	80083a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008244:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 8140 	beq.w	80084ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008252:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008256:	429a      	cmp	r2, r3
 8008258:	f080 8139 	bcs.w	80084ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008262:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800826e:	f000 8088 	beq.w	8008382 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	330c      	adds	r3, #12
 8008278:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008288:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800828c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008290:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	330c      	adds	r3, #12
 800829a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800829e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80082a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80082aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80082ae:	e841 2300 	strex	r3, r2, [r1]
 80082b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80082b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1d9      	bne.n	8008272 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3314      	adds	r3, #20
 80082c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082c8:	e853 3f00 	ldrex	r3, [r3]
 80082cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80082ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082d0:	f023 0301 	bic.w	r3, r3, #1
 80082d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3314      	adds	r3, #20
 80082de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80082e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80082e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80082ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082ee:	e841 2300 	strex	r3, r2, [r1]
 80082f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80082f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1e1      	bne.n	80082be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3314      	adds	r3, #20
 8008300:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008302:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008304:	e853 3f00 	ldrex	r3, [r3]
 8008308:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800830a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800830c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008310:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	3314      	adds	r3, #20
 800831a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800831e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008320:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008322:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008324:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008326:	e841 2300 	strex	r3, r2, [r1]
 800832a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800832c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1e3      	bne.n	80082fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2220      	movs	r2, #32
 8008336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	330c      	adds	r3, #12
 8008346:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800834a:	e853 3f00 	ldrex	r3, [r3]
 800834e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008352:	f023 0310 	bic.w	r3, r3, #16
 8008356:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	330c      	adds	r3, #12
 8008360:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008364:	65ba      	str	r2, [r7, #88]	; 0x58
 8008366:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008368:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800836a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800836c:	e841 2300 	strex	r3, r2, [r1]
 8008370:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1e3      	bne.n	8008340 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837c:	4618      	mov	r0, r3
 800837e:	f7fb fb55 	bl	8003a2c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800838a:	b29b      	uxth	r3, r3
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	b29b      	uxth	r3, r3
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f8ac 	bl	80084f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008398:	e099      	b.n	80084ce <HAL_UART_IRQHandler+0x50e>
 800839a:	bf00      	nop
 800839c:	0800871f 	.word	0x0800871f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 808b 	beq.w	80084d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80083bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 8086 	beq.w	80084d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	330c      	adds	r3, #12
 80083cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d0:	e853 3f00 	ldrex	r3, [r3]
 80083d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	330c      	adds	r3, #12
 80083e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80083ea:	647a      	str	r2, [r7, #68]	; 0x44
 80083ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083f2:	e841 2300 	strex	r3, r2, [r1]
 80083f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1e3      	bne.n	80083c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	3314      	adds	r3, #20
 8008404:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	e853 3f00 	ldrex	r3, [r3]
 800840c:	623b      	str	r3, [r7, #32]
   return(result);
 800840e:	6a3b      	ldr	r3, [r7, #32]
 8008410:	f023 0301 	bic.w	r3, r3, #1
 8008414:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	3314      	adds	r3, #20
 800841e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008422:	633a      	str	r2, [r7, #48]	; 0x30
 8008424:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008426:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800842a:	e841 2300 	strex	r3, r2, [r1]
 800842e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1e3      	bne.n	80083fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2220      	movs	r2, #32
 800843a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	330c      	adds	r3, #12
 800844a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	e853 3f00 	ldrex	r3, [r3]
 8008452:	60fb      	str	r3, [r7, #12]
   return(result);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f023 0310 	bic.w	r3, r3, #16
 800845a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	330c      	adds	r3, #12
 8008464:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008468:	61fa      	str	r2, [r7, #28]
 800846a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846c:	69b9      	ldr	r1, [r7, #24]
 800846e:	69fa      	ldr	r2, [r7, #28]
 8008470:	e841 2300 	strex	r3, r2, [r1]
 8008474:	617b      	str	r3, [r7, #20]
   return(result);
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1e3      	bne.n	8008444 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800847c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f834 	bl	80084f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008488:	e023      	b.n	80084d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800848a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800848e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008492:	2b00      	cmp	r3, #0
 8008494:	d009      	beq.n	80084aa <HAL_UART_IRQHandler+0x4ea>
 8008496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800849a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f94f 	bl	8008746 <UART_Transmit_IT>
    return;
 80084a8:	e014      	b.n	80084d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80084aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00e      	beq.n	80084d4 <HAL_UART_IRQHandler+0x514>
 80084b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d008      	beq.n	80084d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f98f 	bl	80087e6 <UART_EndTransmit_IT>
    return;
 80084c8:	e004      	b.n	80084d4 <HAL_UART_IRQHandler+0x514>
    return;
 80084ca:	bf00      	nop
 80084cc:	e002      	b.n	80084d4 <HAL_UART_IRQHandler+0x514>
      return;
 80084ce:	bf00      	nop
 80084d0:	e000      	b.n	80084d4 <HAL_UART_IRQHandler+0x514>
      return;
 80084d2:	bf00      	nop
  }
}
 80084d4:	37e8      	adds	r7, #232	; 0xe8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop

080084dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80084e4:	bf00      	nop
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b090      	sub	sp, #64	; 0x40
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	603b      	str	r3, [r7, #0]
 8008514:	4613      	mov	r3, r2
 8008516:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008518:	e050      	b.n	80085bc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800851a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800851c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008520:	d04c      	beq.n	80085bc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008524:	2b00      	cmp	r3, #0
 8008526:	d007      	beq.n	8008538 <UART_WaitOnFlagUntilTimeout+0x30>
 8008528:	f7fb f96e 	bl	8003808 <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008534:	429a      	cmp	r2, r3
 8008536:	d241      	bcs.n	80085bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	330c      	adds	r3, #12
 800853e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	e853 3f00 	ldrex	r3, [r3]
 8008546:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800854e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	330c      	adds	r3, #12
 8008556:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008558:	637a      	str	r2, [r7, #52]	; 0x34
 800855a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800855e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008560:	e841 2300 	strex	r3, r2, [r1]
 8008564:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1e5      	bne.n	8008538 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	3314      	adds	r3, #20
 8008572:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	e853 3f00 	ldrex	r3, [r3]
 800857a:	613b      	str	r3, [r7, #16]
   return(result);
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	f023 0301 	bic.w	r3, r3, #1
 8008582:	63bb      	str	r3, [r7, #56]	; 0x38
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3314      	adds	r3, #20
 800858a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800858c:	623a      	str	r2, [r7, #32]
 800858e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008590:	69f9      	ldr	r1, [r7, #28]
 8008592:	6a3a      	ldr	r2, [r7, #32]
 8008594:	e841 2300 	strex	r3, r2, [r1]
 8008598:	61bb      	str	r3, [r7, #24]
   return(result);
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1e5      	bne.n	800856c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2220      	movs	r2, #32
 80085a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2220      	movs	r2, #32
 80085ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e00f      	b.n	80085dc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	4013      	ands	r3, r2
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	bf0c      	ite	eq
 80085cc:	2301      	moveq	r3, #1
 80085ce:	2300      	movne	r3, #0
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	461a      	mov	r2, r3
 80085d4:	79fb      	ldrb	r3, [r7, #7]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d09f      	beq.n	800851a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3740      	adds	r7, #64	; 0x40
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	4613      	mov	r3, r2
 80085f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	88fa      	ldrh	r2, [r7, #6]
 80085fc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	88fa      	ldrh	r2, [r7, #6]
 8008602:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2222      	movs	r2, #34	; 0x22
 800860e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68da      	ldr	r2, [r3, #12]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008628:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	695a      	ldr	r2, [r3, #20]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f042 0201 	orr.w	r2, r2, #1
 8008638:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68da      	ldr	r2, [r3, #12]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f042 0220 	orr.w	r2, r2, #32
 8008648:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3714      	adds	r7, #20
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008658:	b480      	push	{r7}
 800865a:	b095      	sub	sp, #84	; 0x54
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	330c      	adds	r3, #12
 8008666:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866a:	e853 3f00 	ldrex	r3, [r3]
 800866e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008672:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	330c      	adds	r3, #12
 800867e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008680:	643a      	str	r2, [r7, #64]	; 0x40
 8008682:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008684:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008686:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008688:	e841 2300 	strex	r3, r2, [r1]
 800868c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800868e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1e5      	bne.n	8008660 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	3314      	adds	r3, #20
 800869a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869c:	6a3b      	ldr	r3, [r7, #32]
 800869e:	e853 3f00 	ldrex	r3, [r3]
 80086a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	f023 0301 	bic.w	r3, r3, #1
 80086aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	3314      	adds	r3, #20
 80086b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086bc:	e841 2300 	strex	r3, r2, [r1]
 80086c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1e5      	bne.n	8008694 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d119      	bne.n	8008704 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	330c      	adds	r3, #12
 80086d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	e853 3f00 	ldrex	r3, [r3]
 80086de:	60bb      	str	r3, [r7, #8]
   return(result);
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	f023 0310 	bic.w	r3, r3, #16
 80086e6:	647b      	str	r3, [r7, #68]	; 0x44
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	330c      	adds	r3, #12
 80086ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086f0:	61ba      	str	r2, [r7, #24]
 80086f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f4:	6979      	ldr	r1, [r7, #20]
 80086f6:	69ba      	ldr	r2, [r7, #24]
 80086f8:	e841 2300 	strex	r3, r2, [r1]
 80086fc:	613b      	str	r3, [r7, #16]
   return(result);
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e5      	bne.n	80086d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2220      	movs	r2, #32
 8008708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008712:	bf00      	nop
 8008714:	3754      	adds	r7, #84	; 0x54
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b084      	sub	sp, #16
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f7ff fecf 	bl	80084dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800873e:	bf00      	nop
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008746:	b480      	push	{r7}
 8008748:	b085      	sub	sp, #20
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b21      	cmp	r3, #33	; 0x21
 8008758:	d13e      	bne.n	80087d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008762:	d114      	bne.n	800878e <UART_Transmit_IT+0x48>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d110      	bne.n	800878e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008780:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	1c9a      	adds	r2, r3, #2
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	621a      	str	r2, [r3, #32]
 800878c:	e008      	b.n	80087a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	1c59      	adds	r1, r3, #1
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	6211      	str	r1, [r2, #32]
 8008798:	781a      	ldrb	r2, [r3, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	3b01      	subs	r3, #1
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	4619      	mov	r1, r3
 80087ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10f      	bne.n	80087d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68da      	ldr	r2, [r3, #12]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68da      	ldr	r2, [r3, #12]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80087d4:	2300      	movs	r3, #0
 80087d6:	e000      	b.n	80087da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80087d8:	2302      	movs	r3, #2
  }
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3714      	adds	r7, #20
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b082      	sub	sp, #8
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68da      	ldr	r2, [r3, #12]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2220      	movs	r2, #32
 8008802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7f9 fb7a 	bl	8001f00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b08c      	sub	sp, #48	; 0x30
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b22      	cmp	r3, #34	; 0x22
 8008828:	f040 80ab 	bne.w	8008982 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008834:	d117      	bne.n	8008866 <UART_Receive_IT+0x50>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d113      	bne.n	8008866 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800883e:	2300      	movs	r3, #0
 8008840:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008846:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	b29b      	uxth	r3, r3
 8008850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008854:	b29a      	uxth	r2, r3
 8008856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008858:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885e:	1c9a      	adds	r2, r3, #2
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	629a      	str	r2, [r3, #40]	; 0x28
 8008864:	e026      	b.n	80088b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800886c:	2300      	movs	r3, #0
 800886e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008878:	d007      	beq.n	800888a <UART_Receive_IT+0x74>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10a      	bne.n	8008898 <UART_Receive_IT+0x82>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d106      	bne.n	8008898 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	b2da      	uxtb	r2, r3
 8008892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008894:	701a      	strb	r2, [r3, #0]
 8008896:	e008      	b.n	80088aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ae:	1c5a      	adds	r2, r3, #1
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	3b01      	subs	r3, #1
 80088bc:	b29b      	uxth	r3, r3
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	4619      	mov	r1, r3
 80088c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d15a      	bne.n	800897e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68da      	ldr	r2, [r3, #12]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f022 0220 	bic.w	r2, r2, #32
 80088d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68da      	ldr	r2, [r3, #12]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	695a      	ldr	r2, [r3, #20]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f022 0201 	bic.w	r2, r2, #1
 80088f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2220      	movs	r2, #32
 80088fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008904:	2b01      	cmp	r3, #1
 8008906:	d135      	bne.n	8008974 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	330c      	adds	r3, #12
 8008914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	e853 3f00 	ldrex	r3, [r3]
 800891c:	613b      	str	r3, [r7, #16]
   return(result);
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	f023 0310 	bic.w	r3, r3, #16
 8008924:	627b      	str	r3, [r7, #36]	; 0x24
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	330c      	adds	r3, #12
 800892c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800892e:	623a      	str	r2, [r7, #32]
 8008930:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008932:	69f9      	ldr	r1, [r7, #28]
 8008934:	6a3a      	ldr	r2, [r7, #32]
 8008936:	e841 2300 	strex	r3, r2, [r1]
 800893a:	61bb      	str	r3, [r7, #24]
   return(result);
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1e5      	bne.n	800890e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 0310 	and.w	r3, r3, #16
 800894c:	2b10      	cmp	r3, #16
 800894e:	d10a      	bne.n	8008966 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008950:	2300      	movs	r3, #0
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	60fb      	str	r3, [r7, #12]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	60fb      	str	r3, [r7, #12]
 8008964:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800896a:	4619      	mov	r1, r3
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7ff fdbf 	bl	80084f0 <HAL_UARTEx_RxEventCallback>
 8008972:	e002      	b.n	800897a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7f8 ffe3 	bl	8001940 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	e002      	b.n	8008984 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800897e:	2300      	movs	r3, #0
 8008980:	e000      	b.n	8008984 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008982:	2302      	movs	r3, #2
  }
}
 8008984:	4618      	mov	r0, r3
 8008986:	3730      	adds	r7, #48	; 0x30
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800898c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008990:	b09f      	sub	sp, #124	; 0x7c
 8008992:	af00      	add	r7, sp, #0
 8008994:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80089a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089a2:	68d9      	ldr	r1, [r3, #12]
 80089a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	ea40 0301 	orr.w	r3, r0, r1
 80089ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80089ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089b0:	689a      	ldr	r2, [r3, #8]
 80089b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	431a      	orrs	r2, r3
 80089b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089ba:	695b      	ldr	r3, [r3, #20]
 80089bc:	431a      	orrs	r2, r3
 80089be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089c0:	69db      	ldr	r3, [r3, #28]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80089c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80089d0:	f021 010c 	bic.w	r1, r1, #12
 80089d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089da:	430b      	orrs	r3, r1
 80089dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80089de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80089e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089ea:	6999      	ldr	r1, [r3, #24]
 80089ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	ea40 0301 	orr.w	r3, r0, r1
 80089f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80089f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	4bc5      	ldr	r3, [pc, #788]	; (8008d10 <UART_SetConfig+0x384>)
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d004      	beq.n	8008a0a <UART_SetConfig+0x7e>
 8008a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	4bc3      	ldr	r3, [pc, #780]	; (8008d14 <UART_SetConfig+0x388>)
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d103      	bne.n	8008a12 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a0a:	f7fe f865 	bl	8006ad8 <HAL_RCC_GetPCLK2Freq>
 8008a0e:	6778      	str	r0, [r7, #116]	; 0x74
 8008a10:	e002      	b.n	8008a18 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a12:	f7fe f84d 	bl	8006ab0 <HAL_RCC_GetPCLK1Freq>
 8008a16:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a1a:	69db      	ldr	r3, [r3, #28]
 8008a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a20:	f040 80b6 	bne.w	8008b90 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a26:	461c      	mov	r4, r3
 8008a28:	f04f 0500 	mov.w	r5, #0
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	462b      	mov	r3, r5
 8008a30:	1891      	adds	r1, r2, r2
 8008a32:	6439      	str	r1, [r7, #64]	; 0x40
 8008a34:	415b      	adcs	r3, r3
 8008a36:	647b      	str	r3, [r7, #68]	; 0x44
 8008a38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a3c:	1912      	adds	r2, r2, r4
 8008a3e:	eb45 0303 	adc.w	r3, r5, r3
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f04f 0100 	mov.w	r1, #0
 8008a4a:	00d9      	lsls	r1, r3, #3
 8008a4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a50:	00d0      	lsls	r0, r2, #3
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	1911      	adds	r1, r2, r4
 8008a58:	6639      	str	r1, [r7, #96]	; 0x60
 8008a5a:	416b      	adcs	r3, r5
 8008a5c:	667b      	str	r3, [r7, #100]	; 0x64
 8008a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	461a      	mov	r2, r3
 8008a64:	f04f 0300 	mov.w	r3, #0
 8008a68:	1891      	adds	r1, r2, r2
 8008a6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008a6c:	415b      	adcs	r3, r3
 8008a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008a74:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008a78:	f7f8 f8f6 	bl	8000c68 <__aeabi_uldivmod>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	4ba5      	ldr	r3, [pc, #660]	; (8008d18 <UART_SetConfig+0x38c>)
 8008a82:	fba3 2302 	umull	r2, r3, r3, r2
 8008a86:	095b      	lsrs	r3, r3, #5
 8008a88:	011e      	lsls	r6, r3, #4
 8008a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a8c:	461c      	mov	r4, r3
 8008a8e:	f04f 0500 	mov.w	r5, #0
 8008a92:	4622      	mov	r2, r4
 8008a94:	462b      	mov	r3, r5
 8008a96:	1891      	adds	r1, r2, r2
 8008a98:	6339      	str	r1, [r7, #48]	; 0x30
 8008a9a:	415b      	adcs	r3, r3
 8008a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8008a9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008aa2:	1912      	adds	r2, r2, r4
 8008aa4:	eb45 0303 	adc.w	r3, r5, r3
 8008aa8:	f04f 0000 	mov.w	r0, #0
 8008aac:	f04f 0100 	mov.w	r1, #0
 8008ab0:	00d9      	lsls	r1, r3, #3
 8008ab2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ab6:	00d0      	lsls	r0, r2, #3
 8008ab8:	4602      	mov	r2, r0
 8008aba:	460b      	mov	r3, r1
 8008abc:	1911      	adds	r1, r2, r4
 8008abe:	65b9      	str	r1, [r7, #88]	; 0x58
 8008ac0:	416b      	adcs	r3, r5
 8008ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	f04f 0300 	mov.w	r3, #0
 8008ace:	1891      	adds	r1, r2, r2
 8008ad0:	62b9      	str	r1, [r7, #40]	; 0x28
 8008ad2:	415b      	adcs	r3, r3
 8008ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ad6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ada:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008ade:	f7f8 f8c3 	bl	8000c68 <__aeabi_uldivmod>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4b8c      	ldr	r3, [pc, #560]	; (8008d18 <UART_SetConfig+0x38c>)
 8008ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8008aec:	095b      	lsrs	r3, r3, #5
 8008aee:	2164      	movs	r1, #100	; 0x64
 8008af0:	fb01 f303 	mul.w	r3, r1, r3
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	00db      	lsls	r3, r3, #3
 8008af8:	3332      	adds	r3, #50	; 0x32
 8008afa:	4a87      	ldr	r2, [pc, #540]	; (8008d18 <UART_SetConfig+0x38c>)
 8008afc:	fba2 2303 	umull	r2, r3, r2, r3
 8008b00:	095b      	lsrs	r3, r3, #5
 8008b02:	005b      	lsls	r3, r3, #1
 8008b04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b08:	441e      	add	r6, r3
 8008b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f04f 0100 	mov.w	r1, #0
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	1894      	adds	r4, r2, r2
 8008b18:	623c      	str	r4, [r7, #32]
 8008b1a:	415b      	adcs	r3, r3
 8008b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b22:	1812      	adds	r2, r2, r0
 8008b24:	eb41 0303 	adc.w	r3, r1, r3
 8008b28:	f04f 0400 	mov.w	r4, #0
 8008b2c:	f04f 0500 	mov.w	r5, #0
 8008b30:	00dd      	lsls	r5, r3, #3
 8008b32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008b36:	00d4      	lsls	r4, r2, #3
 8008b38:	4622      	mov	r2, r4
 8008b3a:	462b      	mov	r3, r5
 8008b3c:	1814      	adds	r4, r2, r0
 8008b3e:	653c      	str	r4, [r7, #80]	; 0x50
 8008b40:	414b      	adcs	r3, r1
 8008b42:	657b      	str	r3, [r7, #84]	; 0x54
 8008b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	f04f 0300 	mov.w	r3, #0
 8008b4e:	1891      	adds	r1, r2, r2
 8008b50:	61b9      	str	r1, [r7, #24]
 8008b52:	415b      	adcs	r3, r3
 8008b54:	61fb      	str	r3, [r7, #28]
 8008b56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008b5e:	f7f8 f883 	bl	8000c68 <__aeabi_uldivmod>
 8008b62:	4602      	mov	r2, r0
 8008b64:	460b      	mov	r3, r1
 8008b66:	4b6c      	ldr	r3, [pc, #432]	; (8008d18 <UART_SetConfig+0x38c>)
 8008b68:	fba3 1302 	umull	r1, r3, r3, r2
 8008b6c:	095b      	lsrs	r3, r3, #5
 8008b6e:	2164      	movs	r1, #100	; 0x64
 8008b70:	fb01 f303 	mul.w	r3, r1, r3
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	00db      	lsls	r3, r3, #3
 8008b78:	3332      	adds	r3, #50	; 0x32
 8008b7a:	4a67      	ldr	r2, [pc, #412]	; (8008d18 <UART_SetConfig+0x38c>)
 8008b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b80:	095b      	lsrs	r3, r3, #5
 8008b82:	f003 0207 	and.w	r2, r3, #7
 8008b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4432      	add	r2, r6
 8008b8c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b8e:	e0b9      	b.n	8008d04 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b92:	461c      	mov	r4, r3
 8008b94:	f04f 0500 	mov.w	r5, #0
 8008b98:	4622      	mov	r2, r4
 8008b9a:	462b      	mov	r3, r5
 8008b9c:	1891      	adds	r1, r2, r2
 8008b9e:	6139      	str	r1, [r7, #16]
 8008ba0:	415b      	adcs	r3, r3
 8008ba2:	617b      	str	r3, [r7, #20]
 8008ba4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ba8:	1912      	adds	r2, r2, r4
 8008baa:	eb45 0303 	adc.w	r3, r5, r3
 8008bae:	f04f 0000 	mov.w	r0, #0
 8008bb2:	f04f 0100 	mov.w	r1, #0
 8008bb6:	00d9      	lsls	r1, r3, #3
 8008bb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008bbc:	00d0      	lsls	r0, r2, #3
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	eb12 0804 	adds.w	r8, r2, r4
 8008bc6:	eb43 0905 	adc.w	r9, r3, r5
 8008bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f04f 0100 	mov.w	r1, #0
 8008bd4:	f04f 0200 	mov.w	r2, #0
 8008bd8:	f04f 0300 	mov.w	r3, #0
 8008bdc:	008b      	lsls	r3, r1, #2
 8008bde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008be2:	0082      	lsls	r2, r0, #2
 8008be4:	4640      	mov	r0, r8
 8008be6:	4649      	mov	r1, r9
 8008be8:	f7f8 f83e 	bl	8000c68 <__aeabi_uldivmod>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4b49      	ldr	r3, [pc, #292]	; (8008d18 <UART_SetConfig+0x38c>)
 8008bf2:	fba3 2302 	umull	r2, r3, r3, r2
 8008bf6:	095b      	lsrs	r3, r3, #5
 8008bf8:	011e      	lsls	r6, r3, #4
 8008bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f04f 0100 	mov.w	r1, #0
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	1894      	adds	r4, r2, r2
 8008c08:	60bc      	str	r4, [r7, #8]
 8008c0a:	415b      	adcs	r3, r3
 8008c0c:	60fb      	str	r3, [r7, #12]
 8008c0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c12:	1812      	adds	r2, r2, r0
 8008c14:	eb41 0303 	adc.w	r3, r1, r3
 8008c18:	f04f 0400 	mov.w	r4, #0
 8008c1c:	f04f 0500 	mov.w	r5, #0
 8008c20:	00dd      	lsls	r5, r3, #3
 8008c22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c26:	00d4      	lsls	r4, r2, #3
 8008c28:	4622      	mov	r2, r4
 8008c2a:	462b      	mov	r3, r5
 8008c2c:	1814      	adds	r4, r2, r0
 8008c2e:	64bc      	str	r4, [r7, #72]	; 0x48
 8008c30:	414b      	adcs	r3, r1
 8008c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f04f 0100 	mov.w	r1, #0
 8008c3e:	f04f 0200 	mov.w	r2, #0
 8008c42:	f04f 0300 	mov.w	r3, #0
 8008c46:	008b      	lsls	r3, r1, #2
 8008c48:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c4c:	0082      	lsls	r2, r0, #2
 8008c4e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008c52:	f7f8 f809 	bl	8000c68 <__aeabi_uldivmod>
 8008c56:	4602      	mov	r2, r0
 8008c58:	460b      	mov	r3, r1
 8008c5a:	4b2f      	ldr	r3, [pc, #188]	; (8008d18 <UART_SetConfig+0x38c>)
 8008c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8008c60:	095b      	lsrs	r3, r3, #5
 8008c62:	2164      	movs	r1, #100	; 0x64
 8008c64:	fb01 f303 	mul.w	r3, r1, r3
 8008c68:	1ad3      	subs	r3, r2, r3
 8008c6a:	011b      	lsls	r3, r3, #4
 8008c6c:	3332      	adds	r3, #50	; 0x32
 8008c6e:	4a2a      	ldr	r2, [pc, #168]	; (8008d18 <UART_SetConfig+0x38c>)
 8008c70:	fba2 2303 	umull	r2, r3, r2, r3
 8008c74:	095b      	lsrs	r3, r3, #5
 8008c76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c7a:	441e      	add	r6, r3
 8008c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f04f 0100 	mov.w	r1, #0
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	1894      	adds	r4, r2, r2
 8008c8a:	603c      	str	r4, [r7, #0]
 8008c8c:	415b      	adcs	r3, r3
 8008c8e:	607b      	str	r3, [r7, #4]
 8008c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c94:	1812      	adds	r2, r2, r0
 8008c96:	eb41 0303 	adc.w	r3, r1, r3
 8008c9a:	f04f 0400 	mov.w	r4, #0
 8008c9e:	f04f 0500 	mov.w	r5, #0
 8008ca2:	00dd      	lsls	r5, r3, #3
 8008ca4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ca8:	00d4      	lsls	r4, r2, #3
 8008caa:	4622      	mov	r2, r4
 8008cac:	462b      	mov	r3, r5
 8008cae:	eb12 0a00 	adds.w	sl, r2, r0
 8008cb2:	eb43 0b01 	adc.w	fp, r3, r1
 8008cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f04f 0100 	mov.w	r1, #0
 8008cc0:	f04f 0200 	mov.w	r2, #0
 8008cc4:	f04f 0300 	mov.w	r3, #0
 8008cc8:	008b      	lsls	r3, r1, #2
 8008cca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008cce:	0082      	lsls	r2, r0, #2
 8008cd0:	4650      	mov	r0, sl
 8008cd2:	4659      	mov	r1, fp
 8008cd4:	f7f7 ffc8 	bl	8000c68 <__aeabi_uldivmod>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	460b      	mov	r3, r1
 8008cdc:	4b0e      	ldr	r3, [pc, #56]	; (8008d18 <UART_SetConfig+0x38c>)
 8008cde:	fba3 1302 	umull	r1, r3, r3, r2
 8008ce2:	095b      	lsrs	r3, r3, #5
 8008ce4:	2164      	movs	r1, #100	; 0x64
 8008ce6:	fb01 f303 	mul.w	r3, r1, r3
 8008cea:	1ad3      	subs	r3, r2, r3
 8008cec:	011b      	lsls	r3, r3, #4
 8008cee:	3332      	adds	r3, #50	; 0x32
 8008cf0:	4a09      	ldr	r2, [pc, #36]	; (8008d18 <UART_SetConfig+0x38c>)
 8008cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8008cf6:	095b      	lsrs	r3, r3, #5
 8008cf8:	f003 020f 	and.w	r2, r3, #15
 8008cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4432      	add	r2, r6
 8008d02:	609a      	str	r2, [r3, #8]
}
 8008d04:	bf00      	nop
 8008d06:	377c      	adds	r7, #124	; 0x7c
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d0e:	bf00      	nop
 8008d10:	40011000 	.word	0x40011000
 8008d14:	40011400 	.word	0x40011400
 8008d18:	51eb851f 	.word	0x51eb851f

08008d1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d1c:	b084      	sub	sp, #16
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b084      	sub	sp, #16
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	f107 001c 	add.w	r0, r7, #28
 8008d2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d122      	bne.n	8008d7a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d105      	bne.n	8008d6e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f001 fb1c 	bl	800a3ac <USB_CoreReset>
 8008d74:	4603      	mov	r3, r0
 8008d76:	73fb      	strb	r3, [r7, #15]
 8008d78:	e01a      	b.n	8008db0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f001 fb10 	bl	800a3ac <USB_CoreReset>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d106      	bne.n	8008da4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	639a      	str	r2, [r3, #56]	; 0x38
 8008da2:	e005      	b.n	8008db0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d10b      	bne.n	8008dce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	f043 0206 	orr.w	r2, r3, #6
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f043 0220 	orr.w	r2, r3, #32
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008dda:	b004      	add	sp, #16
 8008ddc:	4770      	bx	lr
	...

08008de0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	4613      	mov	r3, r2
 8008dec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008dee:	79fb      	ldrb	r3, [r7, #7]
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d165      	bne.n	8008ec0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	4a41      	ldr	r2, [pc, #260]	; (8008efc <USB_SetTurnaroundTime+0x11c>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d906      	bls.n	8008e0a <USB_SetTurnaroundTime+0x2a>
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	4a40      	ldr	r2, [pc, #256]	; (8008f00 <USB_SetTurnaroundTime+0x120>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d202      	bcs.n	8008e0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008e04:	230f      	movs	r3, #15
 8008e06:	617b      	str	r3, [r7, #20]
 8008e08:	e062      	b.n	8008ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	4a3c      	ldr	r2, [pc, #240]	; (8008f00 <USB_SetTurnaroundTime+0x120>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d306      	bcc.n	8008e20 <USB_SetTurnaroundTime+0x40>
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	4a3b      	ldr	r2, [pc, #236]	; (8008f04 <USB_SetTurnaroundTime+0x124>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d202      	bcs.n	8008e20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008e1a:	230e      	movs	r3, #14
 8008e1c:	617b      	str	r3, [r7, #20]
 8008e1e:	e057      	b.n	8008ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	4a38      	ldr	r2, [pc, #224]	; (8008f04 <USB_SetTurnaroundTime+0x124>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d306      	bcc.n	8008e36 <USB_SetTurnaroundTime+0x56>
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	4a37      	ldr	r2, [pc, #220]	; (8008f08 <USB_SetTurnaroundTime+0x128>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d202      	bcs.n	8008e36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008e30:	230d      	movs	r3, #13
 8008e32:	617b      	str	r3, [r7, #20]
 8008e34:	e04c      	b.n	8008ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	4a33      	ldr	r2, [pc, #204]	; (8008f08 <USB_SetTurnaroundTime+0x128>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d306      	bcc.n	8008e4c <USB_SetTurnaroundTime+0x6c>
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	4a32      	ldr	r2, [pc, #200]	; (8008f0c <USB_SetTurnaroundTime+0x12c>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d802      	bhi.n	8008e4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008e46:	230c      	movs	r3, #12
 8008e48:	617b      	str	r3, [r7, #20]
 8008e4a:	e041      	b.n	8008ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	4a2f      	ldr	r2, [pc, #188]	; (8008f0c <USB_SetTurnaroundTime+0x12c>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d906      	bls.n	8008e62 <USB_SetTurnaroundTime+0x82>
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	4a2e      	ldr	r2, [pc, #184]	; (8008f10 <USB_SetTurnaroundTime+0x130>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d802      	bhi.n	8008e62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008e5c:	230b      	movs	r3, #11
 8008e5e:	617b      	str	r3, [r7, #20]
 8008e60:	e036      	b.n	8008ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	4a2a      	ldr	r2, [pc, #168]	; (8008f10 <USB_SetTurnaroundTime+0x130>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d906      	bls.n	8008e78 <USB_SetTurnaroundTime+0x98>
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	4a29      	ldr	r2, [pc, #164]	; (8008f14 <USB_SetTurnaroundTime+0x134>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d802      	bhi.n	8008e78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008e72:	230a      	movs	r3, #10
 8008e74:	617b      	str	r3, [r7, #20]
 8008e76:	e02b      	b.n	8008ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	4a26      	ldr	r2, [pc, #152]	; (8008f14 <USB_SetTurnaroundTime+0x134>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d906      	bls.n	8008e8e <USB_SetTurnaroundTime+0xae>
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	4a25      	ldr	r2, [pc, #148]	; (8008f18 <USB_SetTurnaroundTime+0x138>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d202      	bcs.n	8008e8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008e88:	2309      	movs	r3, #9
 8008e8a:	617b      	str	r3, [r7, #20]
 8008e8c:	e020      	b.n	8008ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	4a21      	ldr	r2, [pc, #132]	; (8008f18 <USB_SetTurnaroundTime+0x138>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d306      	bcc.n	8008ea4 <USB_SetTurnaroundTime+0xc4>
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	4a20      	ldr	r2, [pc, #128]	; (8008f1c <USB_SetTurnaroundTime+0x13c>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d802      	bhi.n	8008ea4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008e9e:	2308      	movs	r3, #8
 8008ea0:	617b      	str	r3, [r7, #20]
 8008ea2:	e015      	b.n	8008ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	4a1d      	ldr	r2, [pc, #116]	; (8008f1c <USB_SetTurnaroundTime+0x13c>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d906      	bls.n	8008eba <USB_SetTurnaroundTime+0xda>
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	4a1c      	ldr	r2, [pc, #112]	; (8008f20 <USB_SetTurnaroundTime+0x140>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d202      	bcs.n	8008eba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008eb4:	2307      	movs	r3, #7
 8008eb6:	617b      	str	r3, [r7, #20]
 8008eb8:	e00a      	b.n	8008ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008eba:	2306      	movs	r3, #6
 8008ebc:	617b      	str	r3, [r7, #20]
 8008ebe:	e007      	b.n	8008ed0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008ec0:	79fb      	ldrb	r3, [r7, #7]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d102      	bne.n	8008ecc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008ec6:	2309      	movs	r3, #9
 8008ec8:	617b      	str	r3, [r7, #20]
 8008eca:	e001      	b.n	8008ed0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008ecc:	2309      	movs	r3, #9
 8008ece:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	68da      	ldr	r2, [r3, #12]
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	029b      	lsls	r3, r3, #10
 8008ee4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008ee8:	431a      	orrs	r2, r3
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	371c      	adds	r7, #28
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr
 8008efc:	00d8acbf 	.word	0x00d8acbf
 8008f00:	00e4e1c0 	.word	0x00e4e1c0
 8008f04:	00f42400 	.word	0x00f42400
 8008f08:	01067380 	.word	0x01067380
 8008f0c:	011a499f 	.word	0x011a499f
 8008f10:	01312cff 	.word	0x01312cff
 8008f14:	014ca43f 	.word	0x014ca43f
 8008f18:	016e3600 	.word	0x016e3600
 8008f1c:	01a6ab1f 	.word	0x01a6ab1f
 8008f20:	01e84800 	.word	0x01e84800

08008f24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	f043 0201 	orr.w	r2, r3, #1
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b083      	sub	sp, #12
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	f023 0201 	bic.w	r2, r3, #1
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	460b      	mov	r3, r1
 8008f72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008f74:	2300      	movs	r3, #0
 8008f76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f84:	78fb      	ldrb	r3, [r7, #3]
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d115      	bne.n	8008fb6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008f96:	2001      	movs	r0, #1
 8008f98:	f7fa fc42 	bl	8003820 <HAL_Delay>
      ms++;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f001 f972 	bl	800a28c <USB_GetMode>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d01e      	beq.n	8008fec <USB_SetCurrentMode+0x84>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2b31      	cmp	r3, #49	; 0x31
 8008fb2:	d9f0      	bls.n	8008f96 <USB_SetCurrentMode+0x2e>
 8008fb4:	e01a      	b.n	8008fec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008fb6:	78fb      	ldrb	r3, [r7, #3]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d115      	bne.n	8008fe8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008fc8:	2001      	movs	r0, #1
 8008fca:	f7fa fc29 	bl	8003820 <HAL_Delay>
      ms++;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f001 f959 	bl	800a28c <USB_GetMode>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d005      	beq.n	8008fec <USB_SetCurrentMode+0x84>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2b31      	cmp	r3, #49	; 0x31
 8008fe4:	d9f0      	bls.n	8008fc8 <USB_SetCurrentMode+0x60>
 8008fe6:	e001      	b.n	8008fec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e005      	b.n	8008ff8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2b32      	cmp	r3, #50	; 0x32
 8008ff0:	d101      	bne.n	8008ff6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e000      	b.n	8008ff8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009000:	b084      	sub	sp, #16
 8009002:	b580      	push	{r7, lr}
 8009004:	b086      	sub	sp, #24
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800900e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009012:	2300      	movs	r3, #0
 8009014:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800901a:	2300      	movs	r3, #0
 800901c:	613b      	str	r3, [r7, #16]
 800901e:	e009      	b.n	8009034 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	3340      	adds	r3, #64	; 0x40
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	2200      	movs	r2, #0
 800902c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	3301      	adds	r3, #1
 8009032:	613b      	str	r3, [r7, #16]
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	2b0e      	cmp	r3, #14
 8009038:	d9f2      	bls.n	8009020 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800903a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800903c:	2b00      	cmp	r3, #0
 800903e:	d11c      	bne.n	800907a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800904e:	f043 0302 	orr.w	r3, r3, #2
 8009052:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009058:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009064:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009070:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	639a      	str	r2, [r3, #56]	; 0x38
 8009078:	e00b      	b.n	8009092 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009098:	461a      	mov	r2, r3
 800909a:	2300      	movs	r3, #0
 800909c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a4:	4619      	mov	r1, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ac:	461a      	mov	r2, r3
 80090ae:	680b      	ldr	r3, [r1, #0]
 80090b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d10c      	bne.n	80090d2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80090b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d104      	bne.n	80090c8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80090be:	2100      	movs	r1, #0
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f945 	bl	8009350 <USB_SetDevSpeed>
 80090c6:	e008      	b.n	80090da <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80090c8:	2101      	movs	r1, #1
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f940 	bl	8009350 <USB_SetDevSpeed>
 80090d0:	e003      	b.n	80090da <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80090d2:	2103      	movs	r1, #3
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f93b 	bl	8009350 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80090da:	2110      	movs	r1, #16
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f8f3 	bl	80092c8 <USB_FlushTxFifo>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f90f 	bl	8009310 <USB_FlushRxFifo>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d001      	beq.n	80090fc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009102:	461a      	mov	r2, r3
 8009104:	2300      	movs	r3, #0
 8009106:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800910e:	461a      	mov	r2, r3
 8009110:	2300      	movs	r3, #0
 8009112:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800911a:	461a      	mov	r2, r3
 800911c:	2300      	movs	r3, #0
 800911e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009120:	2300      	movs	r3, #0
 8009122:	613b      	str	r3, [r7, #16]
 8009124:	e043      	b.n	80091ae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	015a      	lsls	r2, r3, #5
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	4413      	add	r3, r2
 800912e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800913c:	d118      	bne.n	8009170 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d10a      	bne.n	800915a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	015a      	lsls	r2, r3, #5
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	4413      	add	r3, r2
 800914c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009150:	461a      	mov	r2, r3
 8009152:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009156:	6013      	str	r3, [r2, #0]
 8009158:	e013      	b.n	8009182 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	4413      	add	r3, r2
 8009162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009166:	461a      	mov	r2, r3
 8009168:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800916c:	6013      	str	r3, [r2, #0]
 800916e:	e008      	b.n	8009182 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	015a      	lsls	r2, r3, #5
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	4413      	add	r3, r2
 8009178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800917c:	461a      	mov	r2, r3
 800917e:	2300      	movs	r3, #0
 8009180:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	015a      	lsls	r2, r3, #5
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	4413      	add	r3, r2
 800918a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800918e:	461a      	mov	r2, r3
 8009190:	2300      	movs	r3, #0
 8009192:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a0:	461a      	mov	r2, r3
 80091a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80091a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	3301      	adds	r3, #1
 80091ac:	613b      	str	r3, [r7, #16]
 80091ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d3b7      	bcc.n	8009126 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091b6:	2300      	movs	r3, #0
 80091b8:	613b      	str	r3, [r7, #16]
 80091ba:	e043      	b.n	8009244 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	015a      	lsls	r2, r3, #5
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	4413      	add	r3, r2
 80091c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091d2:	d118      	bne.n	8009206 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d10a      	bne.n	80091f0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	015a      	lsls	r2, r3, #5
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	4413      	add	r3, r2
 80091e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e6:	461a      	mov	r2, r3
 80091e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091ec:	6013      	str	r3, [r2, #0]
 80091ee:	e013      	b.n	8009218 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	015a      	lsls	r2, r3, #5
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	4413      	add	r3, r2
 80091f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091fc:	461a      	mov	r2, r3
 80091fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009202:	6013      	str	r3, [r2, #0]
 8009204:	e008      	b.n	8009218 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	015a      	lsls	r2, r3, #5
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	4413      	add	r3, r2
 800920e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009212:	461a      	mov	r2, r3
 8009214:	2300      	movs	r3, #0
 8009216:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	015a      	lsls	r2, r3, #5
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	4413      	add	r3, r2
 8009220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009224:	461a      	mov	r2, r3
 8009226:	2300      	movs	r3, #0
 8009228:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	015a      	lsls	r2, r3, #5
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	4413      	add	r3, r2
 8009232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009236:	461a      	mov	r2, r3
 8009238:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800923c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	3301      	adds	r3, #1
 8009242:	613b      	str	r3, [r7, #16]
 8009244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	429a      	cmp	r2, r3
 800924a:	d3b7      	bcc.n	80091bc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800925a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800925e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800926c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800926e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009270:	2b00      	cmp	r3, #0
 8009272:	d105      	bne.n	8009280 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	f043 0210 	orr.w	r2, r3, #16
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	699a      	ldr	r2, [r3, #24]
 8009284:	4b0f      	ldr	r3, [pc, #60]	; (80092c4 <USB_DevInit+0x2c4>)
 8009286:	4313      	orrs	r3, r2
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800928c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800928e:	2b00      	cmp	r3, #0
 8009290:	d005      	beq.n	800929e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	f043 0208 	orr.w	r2, r3, #8
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800929e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d107      	bne.n	80092b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092ac:	f043 0304 	orr.w	r3, r3, #4
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80092b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3718      	adds	r7, #24
 80092ba:	46bd      	mov	sp, r7
 80092bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092c0:	b004      	add	sp, #16
 80092c2:	4770      	bx	lr
 80092c4:	803c3800 	.word	0x803c3800

080092c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80092d2:	2300      	movs	r3, #0
 80092d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	019b      	lsls	r3, r3, #6
 80092da:	f043 0220 	orr.w	r2, r3, #32
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	3301      	adds	r3, #1
 80092e6:	60fb      	str	r3, [r7, #12]
 80092e8:	4a08      	ldr	r2, [pc, #32]	; (800930c <USB_FlushTxFifo+0x44>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d901      	bls.n	80092f2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80092ee:	2303      	movs	r3, #3
 80092f0:	e006      	b.n	8009300 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	f003 0320 	and.w	r3, r3, #32
 80092fa:	2b20      	cmp	r3, #32
 80092fc:	d0f1      	beq.n	80092e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	00030d40 	.word	0x00030d40

08009310 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009310:	b480      	push	{r7}
 8009312:	b085      	sub	sp, #20
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009318:	2300      	movs	r3, #0
 800931a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2210      	movs	r2, #16
 8009320:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	3301      	adds	r3, #1
 8009326:	60fb      	str	r3, [r7, #12]
 8009328:	4a08      	ldr	r2, [pc, #32]	; (800934c <USB_FlushRxFifo+0x3c>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d901      	bls.n	8009332 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800932e:	2303      	movs	r3, #3
 8009330:	e006      	b.n	8009340 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	f003 0310 	and.w	r3, r3, #16
 800933a:	2b10      	cmp	r3, #16
 800933c:	d0f1      	beq.n	8009322 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	00030d40 	.word	0x00030d40

08009350 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009350:	b480      	push	{r7}
 8009352:	b085      	sub	sp, #20
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	460b      	mov	r3, r1
 800935a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	78fb      	ldrb	r3, [r7, #3]
 800936a:	68f9      	ldr	r1, [r7, #12]
 800936c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009370:	4313      	orrs	r3, r2
 8009372:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3714      	adds	r7, #20
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009382:	b480      	push	{r7}
 8009384:	b087      	sub	sp, #28
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f003 0306 	and.w	r3, r3, #6
 800939a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d102      	bne.n	80093a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80093a2:	2300      	movs	r3, #0
 80093a4:	75fb      	strb	r3, [r7, #23]
 80093a6:	e00a      	b.n	80093be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d002      	beq.n	80093b4 <USB_GetDevSpeed+0x32>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2b06      	cmp	r3, #6
 80093b2:	d102      	bne.n	80093ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80093b4:	2302      	movs	r3, #2
 80093b6:	75fb      	strb	r3, [r7, #23]
 80093b8:	e001      	b.n	80093be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80093ba:	230f      	movs	r3, #15
 80093bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80093be:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	371c      	adds	r7, #28
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	785b      	ldrb	r3, [r3, #1]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d13a      	bne.n	800945e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ee:	69da      	ldr	r2, [r3, #28]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	f003 030f 	and.w	r3, r3, #15
 80093f8:	2101      	movs	r1, #1
 80093fa:	fa01 f303 	lsl.w	r3, r1, r3
 80093fe:	b29b      	uxth	r3, r3
 8009400:	68f9      	ldr	r1, [r7, #12]
 8009402:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009406:	4313      	orrs	r3, r2
 8009408:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	015a      	lsls	r2, r3, #5
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	4413      	add	r3, r2
 8009412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800941c:	2b00      	cmp	r3, #0
 800941e:	d155      	bne.n	80094cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	015a      	lsls	r2, r3, #5
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	4413      	add	r3, r2
 8009428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	78db      	ldrb	r3, [r3, #3]
 800943a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800943c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	059b      	lsls	r3, r3, #22
 8009442:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009444:	4313      	orrs	r3, r2
 8009446:	68ba      	ldr	r2, [r7, #8]
 8009448:	0151      	lsls	r1, r2, #5
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	440a      	add	r2, r1
 800944e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800945a:	6013      	str	r3, [r2, #0]
 800945c:	e036      	b.n	80094cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009464:	69da      	ldr	r2, [r3, #28]
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	f003 030f 	and.w	r3, r3, #15
 800946e:	2101      	movs	r1, #1
 8009470:	fa01 f303 	lsl.w	r3, r1, r3
 8009474:	041b      	lsls	r3, r3, #16
 8009476:	68f9      	ldr	r1, [r7, #12]
 8009478:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800947c:	4313      	orrs	r3, r2
 800947e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	015a      	lsls	r2, r3, #5
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	4413      	add	r3, r2
 8009488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009492:	2b00      	cmp	r3, #0
 8009494:	d11a      	bne.n	80094cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	015a      	lsls	r2, r3, #5
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	4413      	add	r3, r2
 800949e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	78db      	ldrb	r3, [r3, #3]
 80094b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80094b2:	430b      	orrs	r3, r1
 80094b4:	4313      	orrs	r3, r2
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	0151      	lsls	r1, r2, #5
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	440a      	add	r2, r1
 80094be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3714      	adds	r7, #20
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
	...

080094dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	785b      	ldrb	r3, [r3, #1]
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d161      	bne.n	80095bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	015a      	lsls	r2, r3, #5
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	4413      	add	r3, r2
 8009500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800950a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800950e:	d11f      	bne.n	8009550 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	015a      	lsls	r2, r3, #5
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	4413      	add	r3, r2
 8009518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	0151      	lsls	r1, r2, #5
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	440a      	add	r2, r1
 8009526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800952a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800952e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	015a      	lsls	r2, r3, #5
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	4413      	add	r3, r2
 8009538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	68ba      	ldr	r2, [r7, #8]
 8009540:	0151      	lsls	r1, r2, #5
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	440a      	add	r2, r1
 8009546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800954a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800954e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	f003 030f 	and.w	r3, r3, #15
 8009560:	2101      	movs	r1, #1
 8009562:	fa01 f303 	lsl.w	r3, r1, r3
 8009566:	b29b      	uxth	r3, r3
 8009568:	43db      	mvns	r3, r3
 800956a:	68f9      	ldr	r1, [r7, #12]
 800956c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009570:	4013      	ands	r3, r2
 8009572:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800957a:	69da      	ldr	r2, [r3, #28]
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	f003 030f 	and.w	r3, r3, #15
 8009584:	2101      	movs	r1, #1
 8009586:	fa01 f303 	lsl.w	r3, r1, r3
 800958a:	b29b      	uxth	r3, r3
 800958c:	43db      	mvns	r3, r3
 800958e:	68f9      	ldr	r1, [r7, #12]
 8009590:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009594:	4013      	ands	r3, r2
 8009596:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	015a      	lsls	r2, r3, #5
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	4413      	add	r3, r2
 80095a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	0159      	lsls	r1, r3, #5
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	440b      	add	r3, r1
 80095ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b2:	4619      	mov	r1, r3
 80095b4:	4b35      	ldr	r3, [pc, #212]	; (800968c <USB_DeactivateEndpoint+0x1b0>)
 80095b6:	4013      	ands	r3, r2
 80095b8:	600b      	str	r3, [r1, #0]
 80095ba:	e060      	b.n	800967e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	015a      	lsls	r2, r3, #5
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	4413      	add	r3, r2
 80095c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095d2:	d11f      	bne.n	8009614 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	015a      	lsls	r2, r3, #5
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	4413      	add	r3, r2
 80095dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	0151      	lsls	r1, r2, #5
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	440a      	add	r2, r1
 80095ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80095f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	015a      	lsls	r2, r3, #5
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	4413      	add	r3, r2
 80095fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	0151      	lsls	r1, r2, #5
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	440a      	add	r2, r1
 800960a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800960e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009612:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800961a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	f003 030f 	and.w	r3, r3, #15
 8009624:	2101      	movs	r1, #1
 8009626:	fa01 f303 	lsl.w	r3, r1, r3
 800962a:	041b      	lsls	r3, r3, #16
 800962c:	43db      	mvns	r3, r3
 800962e:	68f9      	ldr	r1, [r7, #12]
 8009630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009634:	4013      	ands	r3, r2
 8009636:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800963e:	69da      	ldr	r2, [r3, #28]
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	f003 030f 	and.w	r3, r3, #15
 8009648:	2101      	movs	r1, #1
 800964a:	fa01 f303 	lsl.w	r3, r1, r3
 800964e:	041b      	lsls	r3, r3, #16
 8009650:	43db      	mvns	r3, r3
 8009652:	68f9      	ldr	r1, [r7, #12]
 8009654:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009658:	4013      	ands	r3, r2
 800965a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	015a      	lsls	r2, r3, #5
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	4413      	add	r3, r2
 8009664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	0159      	lsls	r1, r3, #5
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	440b      	add	r3, r1
 8009672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009676:	4619      	mov	r1, r3
 8009678:	4b05      	ldr	r3, [pc, #20]	; (8009690 <USB_DeactivateEndpoint+0x1b4>)
 800967a:	4013      	ands	r3, r2
 800967c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3714      	adds	r7, #20
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	ec337800 	.word	0xec337800
 8009690:	eff37800 	.word	0xeff37800

08009694 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b08a      	sub	sp, #40	; 0x28
 8009698:	af02      	add	r7, sp, #8
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	4613      	mov	r3, r2
 80096a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	785b      	ldrb	r3, [r3, #1]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	f040 815c 	bne.w	800996e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d132      	bne.n	8009724 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	015a      	lsls	r2, r3, #5
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	4413      	add	r3, r2
 80096c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	69ba      	ldr	r2, [r7, #24]
 80096ce:	0151      	lsls	r1, r2, #5
 80096d0:	69fa      	ldr	r2, [r7, #28]
 80096d2:	440a      	add	r2, r1
 80096d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80096e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	015a      	lsls	r2, r3, #5
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	4413      	add	r3, r2
 80096ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ee:	691b      	ldr	r3, [r3, #16]
 80096f0:	69ba      	ldr	r2, [r7, #24]
 80096f2:	0151      	lsls	r1, r2, #5
 80096f4:	69fa      	ldr	r2, [r7, #28]
 80096f6:	440a      	add	r2, r1
 80096f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009700:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	015a      	lsls	r2, r3, #5
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	4413      	add	r3, r2
 800970a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800970e:	691b      	ldr	r3, [r3, #16]
 8009710:	69ba      	ldr	r2, [r7, #24]
 8009712:	0151      	lsls	r1, r2, #5
 8009714:	69fa      	ldr	r2, [r7, #28]
 8009716:	440a      	add	r2, r1
 8009718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800971c:	0cdb      	lsrs	r3, r3, #19
 800971e:	04db      	lsls	r3, r3, #19
 8009720:	6113      	str	r3, [r2, #16]
 8009722:	e074      	b.n	800980e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	015a      	lsls	r2, r3, #5
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	4413      	add	r3, r2
 800972c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	69ba      	ldr	r2, [r7, #24]
 8009734:	0151      	lsls	r1, r2, #5
 8009736:	69fa      	ldr	r2, [r7, #28]
 8009738:	440a      	add	r2, r1
 800973a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800973e:	0cdb      	lsrs	r3, r3, #19
 8009740:	04db      	lsls	r3, r3, #19
 8009742:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	015a      	lsls	r2, r3, #5
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	4413      	add	r3, r2
 800974c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	69ba      	ldr	r2, [r7, #24]
 8009754:	0151      	lsls	r1, r2, #5
 8009756:	69fa      	ldr	r2, [r7, #28]
 8009758:	440a      	add	r2, r1
 800975a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800975e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009762:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009766:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	4413      	add	r3, r2
 8009770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009774:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	6959      	ldr	r1, [r3, #20]
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	440b      	add	r3, r1
 8009780:	1e59      	subs	r1, r3, #1
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	fbb1 f3f3 	udiv	r3, r1, r3
 800978a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800978c:	4b9d      	ldr	r3, [pc, #628]	; (8009a04 <USB_EPStartXfer+0x370>)
 800978e:	400b      	ands	r3, r1
 8009790:	69b9      	ldr	r1, [r7, #24]
 8009792:	0148      	lsls	r0, r1, #5
 8009794:	69f9      	ldr	r1, [r7, #28]
 8009796:	4401      	add	r1, r0
 8009798:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800979c:	4313      	orrs	r3, r2
 800979e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	015a      	lsls	r2, r3, #5
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	4413      	add	r3, r2
 80097a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ac:	691a      	ldr	r2, [r3, #16]
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	695b      	ldr	r3, [r3, #20]
 80097b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097b6:	69b9      	ldr	r1, [r7, #24]
 80097b8:	0148      	lsls	r0, r1, #5
 80097ba:	69f9      	ldr	r1, [r7, #28]
 80097bc:	4401      	add	r1, r0
 80097be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80097c2:	4313      	orrs	r3, r2
 80097c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	78db      	ldrb	r3, [r3, #3]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d11f      	bne.n	800980e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	69ba      	ldr	r2, [r7, #24]
 80097de:	0151      	lsls	r1, r2, #5
 80097e0:	69fa      	ldr	r2, [r7, #28]
 80097e2:	440a      	add	r2, r1
 80097e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80097ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	015a      	lsls	r2, r3, #5
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	4413      	add	r3, r2
 80097f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	69ba      	ldr	r2, [r7, #24]
 80097fe:	0151      	lsls	r1, r2, #5
 8009800:	69fa      	ldr	r2, [r7, #28]
 8009802:	440a      	add	r2, r1
 8009804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009808:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800980c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800980e:	79fb      	ldrb	r3, [r7, #7]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d14b      	bne.n	80098ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	691b      	ldr	r3, [r3, #16]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d009      	beq.n	8009830 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	015a      	lsls	r2, r3, #5
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	4413      	add	r3, r2
 8009824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009828:	461a      	mov	r2, r3
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	78db      	ldrb	r3, [r3, #3]
 8009834:	2b01      	cmp	r3, #1
 8009836:	d128      	bne.n	800988a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009844:	2b00      	cmp	r3, #0
 8009846:	d110      	bne.n	800986a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	015a      	lsls	r2, r3, #5
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	4413      	add	r3, r2
 8009850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	69ba      	ldr	r2, [r7, #24]
 8009858:	0151      	lsls	r1, r2, #5
 800985a:	69fa      	ldr	r2, [r7, #28]
 800985c:	440a      	add	r2, r1
 800985e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009862:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009866:	6013      	str	r3, [r2, #0]
 8009868:	e00f      	b.n	800988a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	015a      	lsls	r2, r3, #5
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	4413      	add	r3, r2
 8009872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	69ba      	ldr	r2, [r7, #24]
 800987a:	0151      	lsls	r1, r2, #5
 800987c:	69fa      	ldr	r2, [r7, #28]
 800987e:	440a      	add	r2, r1
 8009880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009888:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	015a      	lsls	r2, r3, #5
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	4413      	add	r3, r2
 8009892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	69ba      	ldr	r2, [r7, #24]
 800989a:	0151      	lsls	r1, r2, #5
 800989c:	69fa      	ldr	r2, [r7, #28]
 800989e:	440a      	add	r2, r1
 80098a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098a8:	6013      	str	r3, [r2, #0]
 80098aa:	e12f      	b.n	8009b0c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	015a      	lsls	r2, r3, #5
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	4413      	add	r3, r2
 80098b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	69ba      	ldr	r2, [r7, #24]
 80098bc:	0151      	lsls	r1, r2, #5
 80098be:	69fa      	ldr	r2, [r7, #28]
 80098c0:	440a      	add	r2, r1
 80098c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	78db      	ldrb	r3, [r3, #3]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d015      	beq.n	8009900 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	695b      	ldr	r3, [r3, #20]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f000 8117 	beq.w	8009b0c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	f003 030f 	and.w	r3, r3, #15
 80098ee:	2101      	movs	r1, #1
 80098f0:	fa01 f303 	lsl.w	r3, r1, r3
 80098f4:	69f9      	ldr	r1, [r7, #28]
 80098f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098fa:	4313      	orrs	r3, r2
 80098fc:	634b      	str	r3, [r1, #52]	; 0x34
 80098fe:	e105      	b.n	8009b0c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800990c:	2b00      	cmp	r3, #0
 800990e:	d110      	bne.n	8009932 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	015a      	lsls	r2, r3, #5
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	4413      	add	r3, r2
 8009918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	69ba      	ldr	r2, [r7, #24]
 8009920:	0151      	lsls	r1, r2, #5
 8009922:	69fa      	ldr	r2, [r7, #28]
 8009924:	440a      	add	r2, r1
 8009926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800992a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800992e:	6013      	str	r3, [r2, #0]
 8009930:	e00f      	b.n	8009952 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	015a      	lsls	r2, r3, #5
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	4413      	add	r3, r2
 800993a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	69ba      	ldr	r2, [r7, #24]
 8009942:	0151      	lsls	r1, r2, #5
 8009944:	69fa      	ldr	r2, [r7, #28]
 8009946:	440a      	add	r2, r1
 8009948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800994c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009950:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	68d9      	ldr	r1, [r3, #12]
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	781a      	ldrb	r2, [r3, #0]
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	b298      	uxth	r0, r3
 8009960:	79fb      	ldrb	r3, [r7, #7]
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	4603      	mov	r3, r0
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f000 fa2b 	bl	8009dc2 <USB_WritePacket>
 800996c:	e0ce      	b.n	8009b0c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	015a      	lsls	r2, r3, #5
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	4413      	add	r3, r2
 8009976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	69ba      	ldr	r2, [r7, #24]
 800997e:	0151      	lsls	r1, r2, #5
 8009980:	69fa      	ldr	r2, [r7, #28]
 8009982:	440a      	add	r2, r1
 8009984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009988:	0cdb      	lsrs	r3, r3, #19
 800998a:	04db      	lsls	r3, r3, #19
 800998c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	015a      	lsls	r2, r3, #5
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	4413      	add	r3, r2
 8009996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	69ba      	ldr	r2, [r7, #24]
 800999e:	0151      	lsls	r1, r2, #5
 80099a0:	69fa      	ldr	r2, [r7, #28]
 80099a2:	440a      	add	r2, r1
 80099a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80099ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80099b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	695b      	ldr	r3, [r3, #20]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d126      	bne.n	8009a08 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	015a      	lsls	r2, r3, #5
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	4413      	add	r3, r2
 80099c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c6:	691a      	ldr	r2, [r3, #16]
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099d0:	69b9      	ldr	r1, [r7, #24]
 80099d2:	0148      	lsls	r0, r1, #5
 80099d4:	69f9      	ldr	r1, [r7, #28]
 80099d6:	4401      	add	r1, r0
 80099d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80099dc:	4313      	orrs	r3, r2
 80099de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	015a      	lsls	r2, r3, #5
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	4413      	add	r3, r2
 80099e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	69ba      	ldr	r2, [r7, #24]
 80099f0:	0151      	lsls	r1, r2, #5
 80099f2:	69fa      	ldr	r2, [r7, #28]
 80099f4:	440a      	add	r2, r1
 80099f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099fe:	6113      	str	r3, [r2, #16]
 8009a00:	e036      	b.n	8009a70 <USB_EPStartXfer+0x3dc>
 8009a02:	bf00      	nop
 8009a04:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	695a      	ldr	r2, [r3, #20]
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	4413      	add	r3, r2
 8009a12:	1e5a      	subs	r2, r3, #1
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a1c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	015a      	lsls	r2, r3, #5
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	4413      	add	r3, r2
 8009a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a2a:	691a      	ldr	r2, [r3, #16]
 8009a2c:	8afb      	ldrh	r3, [r7, #22]
 8009a2e:	04d9      	lsls	r1, r3, #19
 8009a30:	4b39      	ldr	r3, [pc, #228]	; (8009b18 <USB_EPStartXfer+0x484>)
 8009a32:	400b      	ands	r3, r1
 8009a34:	69b9      	ldr	r1, [r7, #24]
 8009a36:	0148      	lsls	r0, r1, #5
 8009a38:	69f9      	ldr	r1, [r7, #28]
 8009a3a:	4401      	add	r1, r0
 8009a3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a40:	4313      	orrs	r3, r2
 8009a42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	015a      	lsls	r2, r3, #5
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a50:	691a      	ldr	r2, [r3, #16]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	8af9      	ldrh	r1, [r7, #22]
 8009a58:	fb01 f303 	mul.w	r3, r1, r3
 8009a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a60:	69b9      	ldr	r1, [r7, #24]
 8009a62:	0148      	lsls	r0, r1, #5
 8009a64:	69f9      	ldr	r1, [r7, #28]
 8009a66:	4401      	add	r1, r0
 8009a68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009a70:	79fb      	ldrb	r3, [r7, #7]
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d10d      	bne.n	8009a92 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d009      	beq.n	8009a92 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	68d9      	ldr	r1, [r3, #12]
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	015a      	lsls	r2, r3, #5
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	4413      	add	r3, r2
 8009a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a8e:	460a      	mov	r2, r1
 8009a90:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	78db      	ldrb	r3, [r3, #3]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d128      	bne.n	8009aec <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d110      	bne.n	8009acc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	015a      	lsls	r2, r3, #5
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	69ba      	ldr	r2, [r7, #24]
 8009aba:	0151      	lsls	r1, r2, #5
 8009abc:	69fa      	ldr	r2, [r7, #28]
 8009abe:	440a      	add	r2, r1
 8009ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ac4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ac8:	6013      	str	r3, [r2, #0]
 8009aca:	e00f      	b.n	8009aec <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	015a      	lsls	r2, r3, #5
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	69ba      	ldr	r2, [r7, #24]
 8009adc:	0151      	lsls	r1, r2, #5
 8009ade:	69fa      	ldr	r2, [r7, #28]
 8009ae0:	440a      	add	r2, r1
 8009ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	015a      	lsls	r2, r3, #5
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	4413      	add	r3, r2
 8009af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	69ba      	ldr	r2, [r7, #24]
 8009afc:	0151      	lsls	r1, r2, #5
 8009afe:	69fa      	ldr	r2, [r7, #28]
 8009b00:	440a      	add	r2, r1
 8009b02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3720      	adds	r7, #32
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	1ff80000 	.word	0x1ff80000

08009b1c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b087      	sub	sp, #28
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	4613      	mov	r3, r2
 8009b28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	785b      	ldrb	r3, [r3, #1]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	f040 80cd 	bne.w	8009cd8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	695b      	ldr	r3, [r3, #20]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d132      	bne.n	8009bac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	015a      	lsls	r2, r3, #5
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	693a      	ldr	r2, [r7, #16]
 8009b56:	0151      	lsls	r1, r2, #5
 8009b58:	697a      	ldr	r2, [r7, #20]
 8009b5a:	440a      	add	r2, r1
 8009b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009b64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009b68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	015a      	lsls	r2, r3, #5
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	4413      	add	r3, r2
 8009b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	0151      	lsls	r1, r2, #5
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	440a      	add	r2, r1
 8009b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	015a      	lsls	r2, r3, #5
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	4413      	add	r3, r2
 8009b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b96:	691b      	ldr	r3, [r3, #16]
 8009b98:	693a      	ldr	r2, [r7, #16]
 8009b9a:	0151      	lsls	r1, r2, #5
 8009b9c:	697a      	ldr	r2, [r7, #20]
 8009b9e:	440a      	add	r2, r1
 8009ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ba4:	0cdb      	lsrs	r3, r3, #19
 8009ba6:	04db      	lsls	r3, r3, #19
 8009ba8:	6113      	str	r3, [r2, #16]
 8009baa:	e04e      	b.n	8009c4a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	015a      	lsls	r2, r3, #5
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	4413      	add	r3, r2
 8009bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	693a      	ldr	r2, [r7, #16]
 8009bbc:	0151      	lsls	r1, r2, #5
 8009bbe:	697a      	ldr	r2, [r7, #20]
 8009bc0:	440a      	add	r2, r1
 8009bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bc6:	0cdb      	lsrs	r3, r3, #19
 8009bc8:	04db      	lsls	r3, r3, #19
 8009bca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	015a      	lsls	r2, r3, #5
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	693a      	ldr	r2, [r7, #16]
 8009bdc:	0151      	lsls	r1, r2, #5
 8009bde:	697a      	ldr	r2, [r7, #20]
 8009be0:	440a      	add	r2, r1
 8009be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009be6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009bea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009bee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	695a      	ldr	r2, [r3, #20]
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d903      	bls.n	8009c04 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	689a      	ldr	r2, [r3, #8]
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	015a      	lsls	r2, r3, #5
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	693a      	ldr	r2, [r7, #16]
 8009c14:	0151      	lsls	r1, r2, #5
 8009c16:	697a      	ldr	r2, [r7, #20]
 8009c18:	440a      	add	r2, r1
 8009c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	015a      	lsls	r2, r3, #5
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c30:	691a      	ldr	r2, [r3, #16]
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	695b      	ldr	r3, [r3, #20]
 8009c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c3a:	6939      	ldr	r1, [r7, #16]
 8009c3c:	0148      	lsls	r0, r1, #5
 8009c3e:	6979      	ldr	r1, [r7, #20]
 8009c40:	4401      	add	r1, r0
 8009c42:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009c46:	4313      	orrs	r3, r2
 8009c48:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009c4a:	79fb      	ldrb	r3, [r7, #7]
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d11e      	bne.n	8009c8e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	691b      	ldr	r3, [r3, #16]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d009      	beq.n	8009c6c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	015a      	lsls	r2, r3, #5
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	4413      	add	r3, r2
 8009c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c64:	461a      	mov	r2, r3
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	015a      	lsls	r2, r3, #5
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	4413      	add	r3, r2
 8009c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	693a      	ldr	r2, [r7, #16]
 8009c7c:	0151      	lsls	r1, r2, #5
 8009c7e:	697a      	ldr	r2, [r7, #20]
 8009c80:	440a      	add	r2, r1
 8009c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c8a:	6013      	str	r3, [r2, #0]
 8009c8c:	e092      	b.n	8009db4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	015a      	lsls	r2, r3, #5
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	4413      	add	r3, r2
 8009c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	693a      	ldr	r2, [r7, #16]
 8009c9e:	0151      	lsls	r1, r2, #5
 8009ca0:	697a      	ldr	r2, [r7, #20]
 8009ca2:	440a      	add	r2, r1
 8009ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ca8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009cac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	695b      	ldr	r3, [r3, #20]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d07e      	beq.n	8009db4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	f003 030f 	and.w	r3, r3, #15
 8009cc6:	2101      	movs	r1, #1
 8009cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ccc:	6979      	ldr	r1, [r7, #20]
 8009cce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	634b      	str	r3, [r1, #52]	; 0x34
 8009cd6:	e06d      	b.n	8009db4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	015a      	lsls	r2, r3, #5
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	4413      	add	r3, r2
 8009ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	693a      	ldr	r2, [r7, #16]
 8009ce8:	0151      	lsls	r1, r2, #5
 8009cea:	697a      	ldr	r2, [r7, #20]
 8009cec:	440a      	add	r2, r1
 8009cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cf2:	0cdb      	lsrs	r3, r3, #19
 8009cf4:	04db      	lsls	r3, r3, #19
 8009cf6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	015a      	lsls	r2, r3, #5
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	4413      	add	r3, r2
 8009d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	693a      	ldr	r2, [r7, #16]
 8009d08:	0151      	lsls	r1, r2, #5
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	440a      	add	r2, r1
 8009d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009d16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009d1a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d003      	beq.n	8009d2c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	689a      	ldr	r2, [r3, #8]
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	015a      	lsls	r2, r3, #5
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	4413      	add	r3, r2
 8009d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	693a      	ldr	r2, [r7, #16]
 8009d3c:	0151      	lsls	r1, r2, #5
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	440a      	add	r2, r1
 8009d42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	015a      	lsls	r2, r3, #5
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	4413      	add	r3, r2
 8009d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d58:	691a      	ldr	r2, [r3, #16]
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d62:	6939      	ldr	r1, [r7, #16]
 8009d64:	0148      	lsls	r0, r1, #5
 8009d66:	6979      	ldr	r1, [r7, #20]
 8009d68:	4401      	add	r1, r0
 8009d6a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009d72:	79fb      	ldrb	r3, [r7, #7]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d10d      	bne.n	8009d94 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d009      	beq.n	8009d94 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	68d9      	ldr	r1, [r3, #12]
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	015a      	lsls	r2, r3, #5
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d90:	460a      	mov	r2, r1
 8009d92:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	015a      	lsls	r2, r3, #5
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	0151      	lsls	r1, r2, #5
 8009da6:	697a      	ldr	r2, [r7, #20]
 8009da8:	440a      	add	r2, r1
 8009daa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009db2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	371c      	adds	r7, #28
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b089      	sub	sp, #36	; 0x24
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	60f8      	str	r0, [r7, #12]
 8009dca:	60b9      	str	r1, [r7, #8]
 8009dcc:	4611      	mov	r1, r2
 8009dce:	461a      	mov	r2, r3
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	71fb      	strb	r3, [r7, #7]
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009de0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d123      	bne.n	8009e30 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009de8:	88bb      	ldrh	r3, [r7, #4]
 8009dea:	3303      	adds	r3, #3
 8009dec:	089b      	lsrs	r3, r3, #2
 8009dee:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009df0:	2300      	movs	r3, #0
 8009df2:	61bb      	str	r3, [r7, #24]
 8009df4:	e018      	b.n	8009e28 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009df6:	79fb      	ldrb	r3, [r7, #7]
 8009df8:	031a      	lsls	r2, r3, #12
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e02:	461a      	mov	r2, r3
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	3301      	adds	r3, #1
 8009e14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	3301      	adds	r3, #1
 8009e26:	61bb      	str	r3, [r7, #24]
 8009e28:	69ba      	ldr	r2, [r7, #24]
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d3e2      	bcc.n	8009df6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3724      	adds	r7, #36	; 0x24
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b08b      	sub	sp, #44	; 0x2c
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	60f8      	str	r0, [r7, #12]
 8009e46:	60b9      	str	r1, [r7, #8]
 8009e48:	4613      	mov	r3, r2
 8009e4a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009e54:	88fb      	ldrh	r3, [r7, #6]
 8009e56:	089b      	lsrs	r3, r3, #2
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009e5c:	88fb      	ldrh	r3, [r7, #6]
 8009e5e:	f003 0303 	and.w	r3, r3, #3
 8009e62:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009e64:	2300      	movs	r3, #0
 8009e66:	623b      	str	r3, [r7, #32]
 8009e68:	e014      	b.n	8009e94 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009e6a:	69bb      	ldr	r3, [r7, #24]
 8009e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e74:	601a      	str	r2, [r3, #0]
    pDest++;
 8009e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e78:	3301      	adds	r3, #1
 8009e7a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	3301      	adds	r3, #1
 8009e80:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e84:	3301      	adds	r3, #1
 8009e86:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009e8e:	6a3b      	ldr	r3, [r7, #32]
 8009e90:	3301      	adds	r3, #1
 8009e92:	623b      	str	r3, [r7, #32]
 8009e94:	6a3a      	ldr	r2, [r7, #32]
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d3e6      	bcc.n	8009e6a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009e9c:	8bfb      	ldrh	r3, [r7, #30]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d01e      	beq.n	8009ee0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eac:	461a      	mov	r2, r3
 8009eae:	f107 0310 	add.w	r3, r7, #16
 8009eb2:	6812      	ldr	r2, [r2, #0]
 8009eb4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009eb6:	693a      	ldr	r2, [r7, #16]
 8009eb8:	6a3b      	ldr	r3, [r7, #32]
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	00db      	lsls	r3, r3, #3
 8009ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8009ec2:	b2da      	uxtb	r2, r3
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec6:	701a      	strb	r2, [r3, #0]
      i++;
 8009ec8:	6a3b      	ldr	r3, [r7, #32]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	623b      	str	r3, [r7, #32]
      pDest++;
 8009ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009ed4:	8bfb      	ldrh	r3, [r7, #30]
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009eda:	8bfb      	ldrh	r3, [r7, #30]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1ea      	bne.n	8009eb6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	372c      	adds	r7, #44	; 0x2c
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr

08009eee <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009eee:	b480      	push	{r7}
 8009ef0:	b085      	sub	sp, #20
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	785b      	ldrb	r3, [r3, #1]
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d12c      	bne.n	8009f64 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	015a      	lsls	r2, r3, #5
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	4413      	add	r3, r2
 8009f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	db12      	blt.n	8009f42 <USB_EPSetStall+0x54>
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00f      	beq.n	8009f42 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	015a      	lsls	r2, r3, #5
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	4413      	add	r3, r2
 8009f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68ba      	ldr	r2, [r7, #8]
 8009f32:	0151      	lsls	r1, r2, #5
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	440a      	add	r2, r1
 8009f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f40:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	015a      	lsls	r2, r3, #5
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	4413      	add	r3, r2
 8009f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	68ba      	ldr	r2, [r7, #8]
 8009f52:	0151      	lsls	r1, r2, #5
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	440a      	add	r2, r1
 8009f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f60:	6013      	str	r3, [r2, #0]
 8009f62:	e02b      	b.n	8009fbc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	015a      	lsls	r2, r3, #5
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	db12      	blt.n	8009f9c <USB_EPSetStall+0xae>
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00f      	beq.n	8009f9c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	015a      	lsls	r2, r3, #5
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	4413      	add	r3, r2
 8009f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	0151      	lsls	r1, r2, #5
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	440a      	add	r2, r1
 8009f92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f9a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	015a      	lsls	r2, r3, #5
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	0151      	lsls	r1, r2, #5
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	440a      	add	r2, r1
 8009fb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009fba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3714      	adds	r7, #20
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b085      	sub	sp, #20
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
 8009fd2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	785b      	ldrb	r3, [r3, #1]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d128      	bne.n	800a038 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	015a      	lsls	r2, r3, #5
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	4413      	add	r3, r2
 8009fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	0151      	lsls	r1, r2, #5
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	440a      	add	r2, r1
 8009ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a000:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a004:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	78db      	ldrb	r3, [r3, #3]
 800a00a:	2b03      	cmp	r3, #3
 800a00c:	d003      	beq.n	800a016 <USB_EPClearStall+0x4c>
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	78db      	ldrb	r3, [r3, #3]
 800a012:	2b02      	cmp	r3, #2
 800a014:	d138      	bne.n	800a088 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	015a      	lsls	r2, r3, #5
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	4413      	add	r3, r2
 800a01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	0151      	lsls	r1, r2, #5
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	440a      	add	r2, r1
 800a02c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a034:	6013      	str	r3, [r2, #0]
 800a036:	e027      	b.n	800a088 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	015a      	lsls	r2, r3, #5
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	4413      	add	r3, r2
 800a040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	0151      	lsls	r1, r2, #5
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	440a      	add	r2, r1
 800a04e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a052:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a056:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	78db      	ldrb	r3, [r3, #3]
 800a05c:	2b03      	cmp	r3, #3
 800a05e:	d003      	beq.n	800a068 <USB_EPClearStall+0x9e>
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	78db      	ldrb	r3, [r3, #3]
 800a064:	2b02      	cmp	r3, #2
 800a066:	d10f      	bne.n	800a088 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	015a      	lsls	r2, r3, #5
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	4413      	add	r3, r2
 800a070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	68ba      	ldr	r2, [r7, #8]
 800a078:	0151      	lsls	r1, r2, #5
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	440a      	add	r2, r1
 800a07e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a086:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3714      	adds	r7, #20
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr

0800a096 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a096:	b480      	push	{r7}
 800a098:	b085      	sub	sp, #20
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
 800a09e:	460b      	mov	r3, r1
 800a0a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0b4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a0b8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	78fb      	ldrb	r3, [r7, #3]
 800a0c4:	011b      	lsls	r3, r3, #4
 800a0c6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a0ca:	68f9      	ldr	r1, [r7, #12]
 800a0cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3714      	adds	r7, #20
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr

0800a0e2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a0e2:	b480      	push	{r7}
 800a0e4:	b085      	sub	sp, #20
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a0fc:	f023 0303 	bic.w	r3, r3, #3
 800a100:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a110:	f023 0302 	bic.w	r3, r3, #2
 800a114:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3714      	adds	r7, #20
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a13e:	f023 0303 	bic.w	r3, r3, #3
 800a142:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a152:	f043 0302 	orr.w	r3, r3, #2
 800a156:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3714      	adds	r7, #20
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a166:	b480      	push	{r7}
 800a168:	b085      	sub	sp, #20
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	695b      	ldr	r3, [r3, #20]
 800a172:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	699b      	ldr	r3, [r3, #24]
 800a178:	68fa      	ldr	r2, [r7, #12]
 800a17a:	4013      	ands	r3, r2
 800a17c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a17e:	68fb      	ldr	r3, [r7, #12]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3714      	adds	r7, #20
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a19e:	699b      	ldr	r3, [r3, #24]
 800a1a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1a8:	69db      	ldr	r3, [r3, #28]
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	4013      	ands	r3, r2
 800a1ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	0c1b      	lsrs	r3, r3, #16
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3714      	adds	r7, #20
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1d2:	699b      	ldr	r3, [r3, #24]
 800a1d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1dc:	69db      	ldr	r3, [r3, #28]
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	4013      	ands	r3, r2
 800a1e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	b29b      	uxth	r3, r3
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3714      	adds	r7, #20
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a204:	78fb      	ldrb	r3, [r7, #3]
 800a206:	015a      	lsls	r2, r3, #5
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	4413      	add	r3, r2
 800a20c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a21a:	695b      	ldr	r3, [r3, #20]
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	4013      	ands	r3, r2
 800a220:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a222:	68bb      	ldr	r3, [r7, #8]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3714      	adds	r7, #20
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a230:	b480      	push	{r7}
 800a232:	b087      	sub	sp, #28
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	460b      	mov	r3, r1
 800a23a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a252:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a254:	78fb      	ldrb	r3, [r7, #3]
 800a256:	f003 030f 	and.w	r3, r3, #15
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	fa22 f303 	lsr.w	r3, r2, r3
 800a260:	01db      	lsls	r3, r3, #7
 800a262:	b2db      	uxtb	r3, r3
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	4313      	orrs	r3, r2
 800a268:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a26a:	78fb      	ldrb	r3, [r7, #3]
 800a26c:	015a      	lsls	r2, r3, #5
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	4413      	add	r3, r2
 800a272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	4013      	ands	r3, r2
 800a27c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a27e:	68bb      	ldr	r3, [r7, #8]
}
 800a280:	4618      	mov	r0, r3
 800a282:	371c      	adds	r7, #28
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	f003 0301 	and.w	r3, r3, #1
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a2c6:	f023 0307 	bic.w	r3, r3, #7
 800a2ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	68fa      	ldr	r2, [r7, #12]
 800a2d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3714      	adds	r7, #20
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
	...

0800a2f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b087      	sub	sp, #28
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	607a      	str	r2, [r7, #4]
 800a2fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	333c      	adds	r3, #60	; 0x3c
 800a306:	3304      	adds	r3, #4
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	4a26      	ldr	r2, [pc, #152]	; (800a3a8 <USB_EP0_OutStart+0xb8>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d90a      	bls.n	800a32a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a320:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a324:	d101      	bne.n	800a32a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a326:	2300      	movs	r3, #0
 800a328:	e037      	b.n	800a39a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a330:	461a      	mov	r2, r3
 800a332:	2300      	movs	r3, #0
 800a334:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	697a      	ldr	r2, [r7, #20]
 800a340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a344:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a348:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	697a      	ldr	r2, [r7, #20]
 800a354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a358:	f043 0318 	orr.w	r3, r3, #24
 800a35c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	697a      	ldr	r2, [r7, #20]
 800a368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a36c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a370:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a372:	7afb      	ldrb	r3, [r7, #11]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d10f      	bne.n	800a398 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a37e:	461a      	mov	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a392:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a396:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	371c      	adds	r7, #28
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	4f54300a 	.word	0x4f54300a

0800a3ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b085      	sub	sp, #20
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	60fb      	str	r3, [r7, #12]
 800a3be:	4a13      	ldr	r2, [pc, #76]	; (800a40c <USB_CoreReset+0x60>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d901      	bls.n	800a3c8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	e01a      	b.n	800a3fe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	691b      	ldr	r3, [r3, #16]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	daf3      	bge.n	800a3b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	f043 0201 	orr.w	r2, r3, #1
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	60fb      	str	r3, [r7, #12]
 800a3e6:	4a09      	ldr	r2, [pc, #36]	; (800a40c <USB_CoreReset+0x60>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d901      	bls.n	800a3f0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	e006      	b.n	800a3fe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	f003 0301 	and.w	r3, r3, #1
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d0f1      	beq.n	800a3e0 <USB_CoreReset+0x34>

  return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3714      	adds	r7, #20
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	00030d40 	.word	0x00030d40

0800a410 <getMAC>:
uint8_t IP_ADDRESS[4];
uint8_t NETMASK_ADDRESS[4];
uint8_t GATEWAY_ADDRESS[4];

/* USER CODE BEGIN 2 */
uint8_t getMAC(int n){
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
	/* get MAC hardware address */
	return gnetif.hwaddr[n];
 800a418:	4a05      	ldr	r2, [pc, #20]	; (800a430 <getMAC+0x20>)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4413      	add	r3, r2
 800a41e:	3322      	adds	r3, #34	; 0x22
 800a420:	781b      	ldrb	r3, [r3, #0]
}
 800a422:	4618      	mov	r0, r3
 800a424:	370c      	adds	r7, #12
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	20004f18 	.word	0x20004f18

0800a434 <setIP>:

const ip4_addr_t* getIPAddr(){
	return netif_ip4_addr(&gnetif);
}

void setIP(u32_t addr){
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
	ip4_addr_t temp;
	temp.addr = addr;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	60fb      	str	r3, [r7, #12]
	netif_set_ipaddr(&gnetif,&temp);
 800a440:	f107 030c 	add.w	r3, r7, #12
 800a444:	4619      	mov	r1, r3
 800a446:	4803      	ldr	r0, [pc, #12]	; (800a454 <setIP+0x20>)
 800a448:	f008 fefe 	bl	8013248 <netif_set_ipaddr>
}
 800a44c:	bf00      	nop
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	20004f18 	.word	0x20004f18

0800a458 <setNetmask>:
	ip4_addr_t temp;
	temp.addr = addr;
	netif_set_gw(&gnetif,&temp);
}

void setNetmask(u32_t addr){
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
	ip4_addr_t temp;
	temp.addr = addr;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	60fb      	str	r3, [r7, #12]
	netif_set_netmask(&gnetif,&temp);
 800a464:	f107 030c 	add.w	r3, r7, #12
 800a468:	4619      	mov	r1, r3
 800a46a:	4803      	ldr	r0, [pc, #12]	; (800a478 <setNetmask+0x20>)
 800a46c:	f008 ff34 	bl	80132d8 <netif_set_netmask>
}
 800a470:	bf00      	nop
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	20004f18 	.word	0x20004f18

0800a47c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800a482:	4b8c      	ldr	r3, [pc, #560]	; (800a6b4 <MX_LWIP_Init+0x238>)
 800a484:	22c0      	movs	r2, #192	; 0xc0
 800a486:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800a488:	4b8a      	ldr	r3, [pc, #552]	; (800a6b4 <MX_LWIP_Init+0x238>)
 800a48a:	22a8      	movs	r2, #168	; 0xa8
 800a48c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800a48e:	4b89      	ldr	r3, [pc, #548]	; (800a6b4 <MX_LWIP_Init+0x238>)
 800a490:	2200      	movs	r2, #0
 800a492:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 68;
 800a494:	4b87      	ldr	r3, [pc, #540]	; (800a6b4 <MX_LWIP_Init+0x238>)
 800a496:	2244      	movs	r2, #68	; 0x44
 800a498:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a49a:	4b87      	ldr	r3, [pc, #540]	; (800a6b8 <MX_LWIP_Init+0x23c>)
 800a49c:	22ff      	movs	r2, #255	; 0xff
 800a49e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a4a0:	4b85      	ldr	r3, [pc, #532]	; (800a6b8 <MX_LWIP_Init+0x23c>)
 800a4a2:	22ff      	movs	r2, #255	; 0xff
 800a4a4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a4a6:	4b84      	ldr	r3, [pc, #528]	; (800a6b8 <MX_LWIP_Init+0x23c>)
 800a4a8:	22ff      	movs	r2, #255	; 0xff
 800a4aa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a4ac:	4b82      	ldr	r3, [pc, #520]	; (800a6b8 <MX_LWIP_Init+0x23c>)
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800a4b2:	4b82      	ldr	r3, [pc, #520]	; (800a6bc <MX_LWIP_Init+0x240>)
 800a4b4:	22c0      	movs	r2, #192	; 0xc0
 800a4b6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800a4b8:	4b80      	ldr	r3, [pc, #512]	; (800a6bc <MX_LWIP_Init+0x240>)
 800a4ba:	22a8      	movs	r2, #168	; 0xa8
 800a4bc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800a4be:	4b7f      	ldr	r3, [pc, #508]	; (800a6bc <MX_LWIP_Init+0x240>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800a4c4:	4b7d      	ldr	r3, [pc, #500]	; (800a6bc <MX_LWIP_Init+0x240>)
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800a4ca:	2100      	movs	r1, #0
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	f006 fffb 	bl	80114c8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a4d2:	4b78      	ldr	r3, [pc, #480]	; (800a6b4 <MX_LWIP_Init+0x238>)
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	061a      	lsls	r2, r3, #24
 800a4d8:	4b76      	ldr	r3, [pc, #472]	; (800a6b4 <MX_LWIP_Init+0x238>)
 800a4da:	785b      	ldrb	r3, [r3, #1]
 800a4dc:	041b      	lsls	r3, r3, #16
 800a4de:	431a      	orrs	r2, r3
 800a4e0:	4b74      	ldr	r3, [pc, #464]	; (800a6b4 <MX_LWIP_Init+0x238>)
 800a4e2:	789b      	ldrb	r3, [r3, #2]
 800a4e4:	021b      	lsls	r3, r3, #8
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	4a72      	ldr	r2, [pc, #456]	; (800a6b4 <MX_LWIP_Init+0x238>)
 800a4ea:	78d2      	ldrb	r2, [r2, #3]
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	061a      	lsls	r2, r3, #24
 800a4f0:	4b70      	ldr	r3, [pc, #448]	; (800a6b4 <MX_LWIP_Init+0x238>)
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	0619      	lsls	r1, r3, #24
 800a4f6:	4b6f      	ldr	r3, [pc, #444]	; (800a6b4 <MX_LWIP_Init+0x238>)
 800a4f8:	785b      	ldrb	r3, [r3, #1]
 800a4fa:	041b      	lsls	r3, r3, #16
 800a4fc:	4319      	orrs	r1, r3
 800a4fe:	4b6d      	ldr	r3, [pc, #436]	; (800a6b4 <MX_LWIP_Init+0x238>)
 800a500:	789b      	ldrb	r3, [r3, #2]
 800a502:	021b      	lsls	r3, r3, #8
 800a504:	430b      	orrs	r3, r1
 800a506:	496b      	ldr	r1, [pc, #428]	; (800a6b4 <MX_LWIP_Init+0x238>)
 800a508:	78c9      	ldrb	r1, [r1, #3]
 800a50a:	430b      	orrs	r3, r1
 800a50c:	021b      	lsls	r3, r3, #8
 800a50e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a512:	431a      	orrs	r2, r3
 800a514:	4b67      	ldr	r3, [pc, #412]	; (800a6b4 <MX_LWIP_Init+0x238>)
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	0619      	lsls	r1, r3, #24
 800a51a:	4b66      	ldr	r3, [pc, #408]	; (800a6b4 <MX_LWIP_Init+0x238>)
 800a51c:	785b      	ldrb	r3, [r3, #1]
 800a51e:	041b      	lsls	r3, r3, #16
 800a520:	4319      	orrs	r1, r3
 800a522:	4b64      	ldr	r3, [pc, #400]	; (800a6b4 <MX_LWIP_Init+0x238>)
 800a524:	789b      	ldrb	r3, [r3, #2]
 800a526:	021b      	lsls	r3, r3, #8
 800a528:	430b      	orrs	r3, r1
 800a52a:	4962      	ldr	r1, [pc, #392]	; (800a6b4 <MX_LWIP_Init+0x238>)
 800a52c:	78c9      	ldrb	r1, [r1, #3]
 800a52e:	430b      	orrs	r3, r1
 800a530:	0a1b      	lsrs	r3, r3, #8
 800a532:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a536:	431a      	orrs	r2, r3
 800a538:	4b5e      	ldr	r3, [pc, #376]	; (800a6b4 <MX_LWIP_Init+0x238>)
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	0619      	lsls	r1, r3, #24
 800a53e:	4b5d      	ldr	r3, [pc, #372]	; (800a6b4 <MX_LWIP_Init+0x238>)
 800a540:	785b      	ldrb	r3, [r3, #1]
 800a542:	041b      	lsls	r3, r3, #16
 800a544:	4319      	orrs	r1, r3
 800a546:	4b5b      	ldr	r3, [pc, #364]	; (800a6b4 <MX_LWIP_Init+0x238>)
 800a548:	789b      	ldrb	r3, [r3, #2]
 800a54a:	021b      	lsls	r3, r3, #8
 800a54c:	430b      	orrs	r3, r1
 800a54e:	4959      	ldr	r1, [pc, #356]	; (800a6b4 <MX_LWIP_Init+0x238>)
 800a550:	78c9      	ldrb	r1, [r1, #3]
 800a552:	430b      	orrs	r3, r1
 800a554:	0e1b      	lsrs	r3, r3, #24
 800a556:	4313      	orrs	r3, r2
 800a558:	4a59      	ldr	r2, [pc, #356]	; (800a6c0 <MX_LWIP_Init+0x244>)
 800a55a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a55c:	4b56      	ldr	r3, [pc, #344]	; (800a6b8 <MX_LWIP_Init+0x23c>)
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	061a      	lsls	r2, r3, #24
 800a562:	4b55      	ldr	r3, [pc, #340]	; (800a6b8 <MX_LWIP_Init+0x23c>)
 800a564:	785b      	ldrb	r3, [r3, #1]
 800a566:	041b      	lsls	r3, r3, #16
 800a568:	431a      	orrs	r2, r3
 800a56a:	4b53      	ldr	r3, [pc, #332]	; (800a6b8 <MX_LWIP_Init+0x23c>)
 800a56c:	789b      	ldrb	r3, [r3, #2]
 800a56e:	021b      	lsls	r3, r3, #8
 800a570:	4313      	orrs	r3, r2
 800a572:	4a51      	ldr	r2, [pc, #324]	; (800a6b8 <MX_LWIP_Init+0x23c>)
 800a574:	78d2      	ldrb	r2, [r2, #3]
 800a576:	4313      	orrs	r3, r2
 800a578:	061a      	lsls	r2, r3, #24
 800a57a:	4b4f      	ldr	r3, [pc, #316]	; (800a6b8 <MX_LWIP_Init+0x23c>)
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	0619      	lsls	r1, r3, #24
 800a580:	4b4d      	ldr	r3, [pc, #308]	; (800a6b8 <MX_LWIP_Init+0x23c>)
 800a582:	785b      	ldrb	r3, [r3, #1]
 800a584:	041b      	lsls	r3, r3, #16
 800a586:	4319      	orrs	r1, r3
 800a588:	4b4b      	ldr	r3, [pc, #300]	; (800a6b8 <MX_LWIP_Init+0x23c>)
 800a58a:	789b      	ldrb	r3, [r3, #2]
 800a58c:	021b      	lsls	r3, r3, #8
 800a58e:	430b      	orrs	r3, r1
 800a590:	4949      	ldr	r1, [pc, #292]	; (800a6b8 <MX_LWIP_Init+0x23c>)
 800a592:	78c9      	ldrb	r1, [r1, #3]
 800a594:	430b      	orrs	r3, r1
 800a596:	021b      	lsls	r3, r3, #8
 800a598:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a59c:	431a      	orrs	r2, r3
 800a59e:	4b46      	ldr	r3, [pc, #280]	; (800a6b8 <MX_LWIP_Init+0x23c>)
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	0619      	lsls	r1, r3, #24
 800a5a4:	4b44      	ldr	r3, [pc, #272]	; (800a6b8 <MX_LWIP_Init+0x23c>)
 800a5a6:	785b      	ldrb	r3, [r3, #1]
 800a5a8:	041b      	lsls	r3, r3, #16
 800a5aa:	4319      	orrs	r1, r3
 800a5ac:	4b42      	ldr	r3, [pc, #264]	; (800a6b8 <MX_LWIP_Init+0x23c>)
 800a5ae:	789b      	ldrb	r3, [r3, #2]
 800a5b0:	021b      	lsls	r3, r3, #8
 800a5b2:	430b      	orrs	r3, r1
 800a5b4:	4940      	ldr	r1, [pc, #256]	; (800a6b8 <MX_LWIP_Init+0x23c>)
 800a5b6:	78c9      	ldrb	r1, [r1, #3]
 800a5b8:	430b      	orrs	r3, r1
 800a5ba:	0a1b      	lsrs	r3, r3, #8
 800a5bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a5c0:	431a      	orrs	r2, r3
 800a5c2:	4b3d      	ldr	r3, [pc, #244]	; (800a6b8 <MX_LWIP_Init+0x23c>)
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	0619      	lsls	r1, r3, #24
 800a5c8:	4b3b      	ldr	r3, [pc, #236]	; (800a6b8 <MX_LWIP_Init+0x23c>)
 800a5ca:	785b      	ldrb	r3, [r3, #1]
 800a5cc:	041b      	lsls	r3, r3, #16
 800a5ce:	4319      	orrs	r1, r3
 800a5d0:	4b39      	ldr	r3, [pc, #228]	; (800a6b8 <MX_LWIP_Init+0x23c>)
 800a5d2:	789b      	ldrb	r3, [r3, #2]
 800a5d4:	021b      	lsls	r3, r3, #8
 800a5d6:	430b      	orrs	r3, r1
 800a5d8:	4937      	ldr	r1, [pc, #220]	; (800a6b8 <MX_LWIP_Init+0x23c>)
 800a5da:	78c9      	ldrb	r1, [r1, #3]
 800a5dc:	430b      	orrs	r3, r1
 800a5de:	0e1b      	lsrs	r3, r3, #24
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	4a38      	ldr	r2, [pc, #224]	; (800a6c4 <MX_LWIP_Init+0x248>)
 800a5e4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a5e6:	4b35      	ldr	r3, [pc, #212]	; (800a6bc <MX_LWIP_Init+0x240>)
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	061a      	lsls	r2, r3, #24
 800a5ec:	4b33      	ldr	r3, [pc, #204]	; (800a6bc <MX_LWIP_Init+0x240>)
 800a5ee:	785b      	ldrb	r3, [r3, #1]
 800a5f0:	041b      	lsls	r3, r3, #16
 800a5f2:	431a      	orrs	r2, r3
 800a5f4:	4b31      	ldr	r3, [pc, #196]	; (800a6bc <MX_LWIP_Init+0x240>)
 800a5f6:	789b      	ldrb	r3, [r3, #2]
 800a5f8:	021b      	lsls	r3, r3, #8
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	4a2f      	ldr	r2, [pc, #188]	; (800a6bc <MX_LWIP_Init+0x240>)
 800a5fe:	78d2      	ldrb	r2, [r2, #3]
 800a600:	4313      	orrs	r3, r2
 800a602:	061a      	lsls	r2, r3, #24
 800a604:	4b2d      	ldr	r3, [pc, #180]	; (800a6bc <MX_LWIP_Init+0x240>)
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	0619      	lsls	r1, r3, #24
 800a60a:	4b2c      	ldr	r3, [pc, #176]	; (800a6bc <MX_LWIP_Init+0x240>)
 800a60c:	785b      	ldrb	r3, [r3, #1]
 800a60e:	041b      	lsls	r3, r3, #16
 800a610:	4319      	orrs	r1, r3
 800a612:	4b2a      	ldr	r3, [pc, #168]	; (800a6bc <MX_LWIP_Init+0x240>)
 800a614:	789b      	ldrb	r3, [r3, #2]
 800a616:	021b      	lsls	r3, r3, #8
 800a618:	430b      	orrs	r3, r1
 800a61a:	4928      	ldr	r1, [pc, #160]	; (800a6bc <MX_LWIP_Init+0x240>)
 800a61c:	78c9      	ldrb	r1, [r1, #3]
 800a61e:	430b      	orrs	r3, r1
 800a620:	021b      	lsls	r3, r3, #8
 800a622:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a626:	431a      	orrs	r2, r3
 800a628:	4b24      	ldr	r3, [pc, #144]	; (800a6bc <MX_LWIP_Init+0x240>)
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	0619      	lsls	r1, r3, #24
 800a62e:	4b23      	ldr	r3, [pc, #140]	; (800a6bc <MX_LWIP_Init+0x240>)
 800a630:	785b      	ldrb	r3, [r3, #1]
 800a632:	041b      	lsls	r3, r3, #16
 800a634:	4319      	orrs	r1, r3
 800a636:	4b21      	ldr	r3, [pc, #132]	; (800a6bc <MX_LWIP_Init+0x240>)
 800a638:	789b      	ldrb	r3, [r3, #2]
 800a63a:	021b      	lsls	r3, r3, #8
 800a63c:	430b      	orrs	r3, r1
 800a63e:	491f      	ldr	r1, [pc, #124]	; (800a6bc <MX_LWIP_Init+0x240>)
 800a640:	78c9      	ldrb	r1, [r1, #3]
 800a642:	430b      	orrs	r3, r1
 800a644:	0a1b      	lsrs	r3, r3, #8
 800a646:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a64a:	431a      	orrs	r2, r3
 800a64c:	4b1b      	ldr	r3, [pc, #108]	; (800a6bc <MX_LWIP_Init+0x240>)
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	0619      	lsls	r1, r3, #24
 800a652:	4b1a      	ldr	r3, [pc, #104]	; (800a6bc <MX_LWIP_Init+0x240>)
 800a654:	785b      	ldrb	r3, [r3, #1]
 800a656:	041b      	lsls	r3, r3, #16
 800a658:	4319      	orrs	r1, r3
 800a65a:	4b18      	ldr	r3, [pc, #96]	; (800a6bc <MX_LWIP_Init+0x240>)
 800a65c:	789b      	ldrb	r3, [r3, #2]
 800a65e:	021b      	lsls	r3, r3, #8
 800a660:	430b      	orrs	r3, r1
 800a662:	4916      	ldr	r1, [pc, #88]	; (800a6bc <MX_LWIP_Init+0x240>)
 800a664:	78c9      	ldrb	r1, [r1, #3]
 800a666:	430b      	orrs	r3, r1
 800a668:	0e1b      	lsrs	r3, r3, #24
 800a66a:	4313      	orrs	r3, r2
 800a66c:	4a16      	ldr	r2, [pc, #88]	; (800a6c8 <MX_LWIP_Init+0x24c>)
 800a66e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800a670:	4b16      	ldr	r3, [pc, #88]	; (800a6cc <MX_LWIP_Init+0x250>)
 800a672:	9302      	str	r3, [sp, #8]
 800a674:	4b16      	ldr	r3, [pc, #88]	; (800a6d0 <MX_LWIP_Init+0x254>)
 800a676:	9301      	str	r3, [sp, #4]
 800a678:	2300      	movs	r3, #0
 800a67a:	9300      	str	r3, [sp, #0]
 800a67c:	4b12      	ldr	r3, [pc, #72]	; (800a6c8 <MX_LWIP_Init+0x24c>)
 800a67e:	4a11      	ldr	r2, [pc, #68]	; (800a6c4 <MX_LWIP_Init+0x248>)
 800a680:	490f      	ldr	r1, [pc, #60]	; (800a6c0 <MX_LWIP_Init+0x244>)
 800a682:	4814      	ldr	r0, [pc, #80]	; (800a6d4 <MX_LWIP_Init+0x258>)
 800a684:	f008 fcb8 	bl	8012ff8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a688:	4812      	ldr	r0, [pc, #72]	; (800a6d4 <MX_LWIP_Init+0x258>)
 800a68a:	f008 feb7 	bl	80133fc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a68e:	4b11      	ldr	r3, [pc, #68]	; (800a6d4 <MX_LWIP_Init+0x258>)
 800a690:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800a694:	089b      	lsrs	r3, r3, #2
 800a696:	f003 0301 	and.w	r3, r3, #1
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d003      	beq.n	800a6a8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a6a0:	480c      	ldr	r0, [pc, #48]	; (800a6d4 <MX_LWIP_Init+0x258>)
 800a6a2:	f008 febb 	bl	801341c <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a6a6:	e002      	b.n	800a6ae <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 800a6a8:	480a      	ldr	r0, [pc, #40]	; (800a6d4 <MX_LWIP_Init+0x258>)
 800a6aa:	f008 ff23 	bl	80134f4 <netif_set_down>
}
 800a6ae:	bf00      	nop
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	20004f50 	.word	0x20004f50
 800a6b8:	20004f4c 	.word	0x20004f4c
 800a6bc:	20004f14 	.word	0x20004f14
 800a6c0:	20004f48 	.word	0x20004f48
 800a6c4:	20004f54 	.word	0x20004f54
 800a6c8:	20004f58 	.word	0x20004f58
 800a6cc:	080113d9 	.word	0x080113d9
 800a6d0:	0800ad09 	.word	0x0800ad09
 800a6d4:	20004f18 	.word	0x20004f18

0800a6d8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b08e      	sub	sp, #56	; 0x38
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	601a      	str	r2, [r3, #0]
 800a6e8:	605a      	str	r2, [r3, #4]
 800a6ea:	609a      	str	r2, [r3, #8]
 800a6ec:	60da      	str	r2, [r3, #12]
 800a6ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a4a      	ldr	r2, [pc, #296]	; (800a820 <HAL_ETH_MspInit+0x148>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	f040 808d 	bne.w	800a816 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	623b      	str	r3, [r7, #32]
 800a700:	4b48      	ldr	r3, [pc, #288]	; (800a824 <HAL_ETH_MspInit+0x14c>)
 800a702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a704:	4a47      	ldr	r2, [pc, #284]	; (800a824 <HAL_ETH_MspInit+0x14c>)
 800a706:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a70a:	6313      	str	r3, [r2, #48]	; 0x30
 800a70c:	4b45      	ldr	r3, [pc, #276]	; (800a824 <HAL_ETH_MspInit+0x14c>)
 800a70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a714:	623b      	str	r3, [r7, #32]
 800a716:	6a3b      	ldr	r3, [r7, #32]
 800a718:	2300      	movs	r3, #0
 800a71a:	61fb      	str	r3, [r7, #28]
 800a71c:	4b41      	ldr	r3, [pc, #260]	; (800a824 <HAL_ETH_MspInit+0x14c>)
 800a71e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a720:	4a40      	ldr	r2, [pc, #256]	; (800a824 <HAL_ETH_MspInit+0x14c>)
 800a722:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a726:	6313      	str	r3, [r2, #48]	; 0x30
 800a728:	4b3e      	ldr	r3, [pc, #248]	; (800a824 <HAL_ETH_MspInit+0x14c>)
 800a72a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a72c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a730:	61fb      	str	r3, [r7, #28]
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	2300      	movs	r3, #0
 800a736:	61bb      	str	r3, [r7, #24]
 800a738:	4b3a      	ldr	r3, [pc, #232]	; (800a824 <HAL_ETH_MspInit+0x14c>)
 800a73a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a73c:	4a39      	ldr	r2, [pc, #228]	; (800a824 <HAL_ETH_MspInit+0x14c>)
 800a73e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a742:	6313      	str	r3, [r2, #48]	; 0x30
 800a744:	4b37      	ldr	r3, [pc, #220]	; (800a824 <HAL_ETH_MspInit+0x14c>)
 800a746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a74c:	61bb      	str	r3, [r7, #24]
 800a74e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a750:	2300      	movs	r3, #0
 800a752:	617b      	str	r3, [r7, #20]
 800a754:	4b33      	ldr	r3, [pc, #204]	; (800a824 <HAL_ETH_MspInit+0x14c>)
 800a756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a758:	4a32      	ldr	r2, [pc, #200]	; (800a824 <HAL_ETH_MspInit+0x14c>)
 800a75a:	f043 0304 	orr.w	r3, r3, #4
 800a75e:	6313      	str	r3, [r2, #48]	; 0x30
 800a760:	4b30      	ldr	r3, [pc, #192]	; (800a824 <HAL_ETH_MspInit+0x14c>)
 800a762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a764:	f003 0304 	and.w	r3, r3, #4
 800a768:	617b      	str	r3, [r7, #20]
 800a76a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a76c:	2300      	movs	r3, #0
 800a76e:	613b      	str	r3, [r7, #16]
 800a770:	4b2c      	ldr	r3, [pc, #176]	; (800a824 <HAL_ETH_MspInit+0x14c>)
 800a772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a774:	4a2b      	ldr	r2, [pc, #172]	; (800a824 <HAL_ETH_MspInit+0x14c>)
 800a776:	f043 0301 	orr.w	r3, r3, #1
 800a77a:	6313      	str	r3, [r2, #48]	; 0x30
 800a77c:	4b29      	ldr	r3, [pc, #164]	; (800a824 <HAL_ETH_MspInit+0x14c>)
 800a77e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a780:	f003 0301 	and.w	r3, r3, #1
 800a784:	613b      	str	r3, [r7, #16]
 800a786:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a788:	2300      	movs	r3, #0
 800a78a:	60fb      	str	r3, [r7, #12]
 800a78c:	4b25      	ldr	r3, [pc, #148]	; (800a824 <HAL_ETH_MspInit+0x14c>)
 800a78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a790:	4a24      	ldr	r2, [pc, #144]	; (800a824 <HAL_ETH_MspInit+0x14c>)
 800a792:	f043 0302 	orr.w	r3, r3, #2
 800a796:	6313      	str	r3, [r2, #48]	; 0x30
 800a798:	4b22      	ldr	r3, [pc, #136]	; (800a824 <HAL_ETH_MspInit+0x14c>)
 800a79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79c:	f003 0302 	and.w	r3, r3, #2
 800a7a0:	60fb      	str	r3, [r7, #12]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a7a4:	2332      	movs	r3, #50	; 0x32
 800a7a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7a8:	2302      	movs	r3, #2
 800a7aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a7b4:	230b      	movs	r3, #11
 800a7b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a7b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7bc:	4619      	mov	r1, r3
 800a7be:	481a      	ldr	r0, [pc, #104]	; (800a828 <HAL_ETH_MspInit+0x150>)
 800a7c0:	f7fa f9d8 	bl	8004b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a7c4:	2386      	movs	r3, #134	; 0x86
 800a7c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a7d4:	230b      	movs	r3, #11
 800a7d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7dc:	4619      	mov	r1, r3
 800a7de:	4813      	ldr	r0, [pc, #76]	; (800a82c <HAL_ETH_MspInit+0x154>)
 800a7e0:	f7fa f9c8 	bl	8004b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800a7e4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a7e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7ea:	2302      	movs	r3, #2
 800a7ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7f2:	2303      	movs	r3, #3
 800a7f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a7f6:	230b      	movs	r3, #11
 800a7f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a7fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7fe:	4619      	mov	r1, r3
 800a800:	480b      	ldr	r0, [pc, #44]	; (800a830 <HAL_ETH_MspInit+0x158>)
 800a802:	f7fa f9b7 	bl	8004b74 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800a806:	2200      	movs	r2, #0
 800a808:	2105      	movs	r1, #5
 800a80a:	203d      	movs	r0, #61	; 0x3d
 800a80c:	f7f9 f8e4 	bl	80039d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a810:	203d      	movs	r0, #61	; 0x3d
 800a812:	f7f9 f8fd 	bl	8003a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a816:	bf00      	nop
 800a818:	3738      	adds	r7, #56	; 0x38
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	40028000 	.word	0x40028000
 800a824:	40023800 	.word	0x40023800
 800a828:	40020800 	.word	0x40020800
 800a82c:	40020000 	.word	0x40020000
 800a830:	40020400 	.word	0x40020400

0800a834 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800a83c:	4b04      	ldr	r3, [pc, #16]	; (800a850 <HAL_ETH_RxCpltCallback+0x1c>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4618      	mov	r0, r3
 800a842:	f002 f89d 	bl	800c980 <osSemaphoreRelease>
}
 800a846:	bf00      	nop
 800a848:	3708      	adds	r7, #8
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	2000056c 	.word	0x2000056c

0800a854 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a854:	b5b0      	push	{r4, r5, r7, lr}
 800a856:	b090      	sub	sp, #64	; 0x40
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800a85c:	2300      	movs	r3, #0
 800a85e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a860:	4b60      	ldr	r3, [pc, #384]	; (800a9e4 <low_level_init+0x190>)
 800a862:	4a61      	ldr	r2, [pc, #388]	; (800a9e8 <low_level_init+0x194>)
 800a864:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800a866:	4b5f      	ldr	r3, [pc, #380]	; (800a9e4 <low_level_init+0x190>)
 800a868:	2201      	movs	r2, #1
 800a86a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800a86c:	4b5d      	ldr	r3, [pc, #372]	; (800a9e4 <low_level_init+0x190>)
 800a86e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a872:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800a874:	4b5b      	ldr	r3, [pc, #364]	; (800a9e4 <low_level_init+0x190>)
 800a876:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a87a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800a87c:	4b59      	ldr	r3, [pc, #356]	; (800a9e4 <low_level_init+0x190>)
 800a87e:	2200      	movs	r2, #0
 800a880:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800a882:	2300      	movs	r3, #0
 800a884:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800a888:	2380      	movs	r3, #128	; 0x80
 800a88a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800a88e:	23e1      	movs	r3, #225	; 0xe1
 800a890:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800a894:	2300      	movs	r3, #0
 800a896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800a89a:	2300      	movs	r3, #0
 800a89c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800a8a6:	4a4f      	ldr	r2, [pc, #316]	; (800a9e4 <low_level_init+0x190>)
 800a8a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a8ac:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800a8ae:	4b4d      	ldr	r3, [pc, #308]	; (800a9e4 <low_level_init+0x190>)
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800a8b4:	4b4b      	ldr	r3, [pc, #300]	; (800a9e4 <low_level_init+0x190>)
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800a8ba:	4b4a      	ldr	r3, [pc, #296]	; (800a9e4 <low_level_init+0x190>)
 800a8bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a8c0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a8c2:	4848      	ldr	r0, [pc, #288]	; (800a9e4 <low_level_init+0x190>)
 800a8c4:	f7f9 f944 	bl	8003b50 <HAL_ETH_Init>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800a8ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d108      	bne.n	800a8e8 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800a8dc:	f043 0304 	orr.w	r3, r3, #4
 800a8e0:	b2da      	uxtb	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800a8e8:	2304      	movs	r3, #4
 800a8ea:	4a40      	ldr	r2, [pc, #256]	; (800a9ec <low_level_init+0x198>)
 800a8ec:	4940      	ldr	r1, [pc, #256]	; (800a9f0 <low_level_init+0x19c>)
 800a8ee:	483d      	ldr	r0, [pc, #244]	; (800a9e4 <low_level_init+0x190>)
 800a8f0:	f7f9 faca 	bl	8003e88 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800a8f4:	2304      	movs	r3, #4
 800a8f6:	4a3f      	ldr	r2, [pc, #252]	; (800a9f4 <low_level_init+0x1a0>)
 800a8f8:	493f      	ldr	r1, [pc, #252]	; (800a9f8 <low_level_init+0x1a4>)
 800a8fa:	483a      	ldr	r0, [pc, #232]	; (800a9e4 <low_level_init+0x190>)
 800a8fc:	f7f9 fb2d 	bl	8003f5a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2206      	movs	r2, #6
 800a904:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a908:	4b36      	ldr	r3, [pc, #216]	; (800a9e4 <low_level_init+0x190>)
 800a90a:	695b      	ldr	r3, [r3, #20]
 800a90c:	781a      	ldrb	r2, [r3, #0]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a914:	4b33      	ldr	r3, [pc, #204]	; (800a9e4 <low_level_init+0x190>)
 800a916:	695b      	ldr	r3, [r3, #20]
 800a918:	785a      	ldrb	r2, [r3, #1]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a920:	4b30      	ldr	r3, [pc, #192]	; (800a9e4 <low_level_init+0x190>)
 800a922:	695b      	ldr	r3, [r3, #20]
 800a924:	789a      	ldrb	r2, [r3, #2]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a92c:	4b2d      	ldr	r3, [pc, #180]	; (800a9e4 <low_level_init+0x190>)
 800a92e:	695b      	ldr	r3, [r3, #20]
 800a930:	78da      	ldrb	r2, [r3, #3]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a938:	4b2a      	ldr	r3, [pc, #168]	; (800a9e4 <low_level_init+0x190>)
 800a93a:	695b      	ldr	r3, [r3, #20]
 800a93c:	791a      	ldrb	r2, [r3, #4]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a944:	4b27      	ldr	r3, [pc, #156]	; (800a9e4 <low_level_init+0x190>)
 800a946:	695b      	ldr	r3, [r3, #20]
 800a948:	795a      	ldrb	r2, [r3, #5]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  /* maximum transfer unit */
  netif->mtu = 1500;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a956:	841a      	strh	r2, [r3, #32]

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800a95e:	f043 030a 	orr.w	r3, r3, #10
 800a962:	b2da      	uxtb	r2, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800a96a:	2300      	movs	r3, #0
 800a96c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a96e:	2300      	movs	r3, #0
 800a970:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800a972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a976:	2101      	movs	r1, #1
 800a978:	4618      	mov	r0, r3
 800a97a:	f001 ff81 	bl	800c880 <osSemaphoreCreate>
 800a97e:	4603      	mov	r3, r0
 800a980:	4a1e      	ldr	r2, [pc, #120]	; (800a9fc <low_level_init+0x1a8>)
 800a982:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a984:	4b1e      	ldr	r3, [pc, #120]	; (800aa00 <low_level_init+0x1ac>)
 800a986:	f107 040c 	add.w	r4, r7, #12
 800a98a:	461d      	mov	r5, r3
 800a98c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a98e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a990:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a994:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800a998:	f107 030c 	add.w	r3, r7, #12
 800a99c:	6879      	ldr	r1, [r7, #4]
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f001 fe86 	bl	800c6b0 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800a9a4:	480f      	ldr	r0, [pc, #60]	; (800a9e4 <low_level_init+0x190>)
 800a9a6:	f7f9 fe00 	bl	80045aa <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800a9aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	211d      	movs	r1, #29
 800a9b2:	480c      	ldr	r0, [pc, #48]	; (800a9e4 <low_level_init+0x190>)
 800a9b4:	f7f9 fd2b 	bl	800440e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ba:	f043 030b 	orr.w	r3, r3, #11
 800a9be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800a9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	211d      	movs	r1, #29
 800a9c6:	4807      	ldr	r0, [pc, #28]	; (800a9e4 <low_level_init+0x190>)
 800a9c8:	f7f9 fd89 	bl	80044de <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800a9cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	211d      	movs	r1, #29
 800a9d4:	4803      	ldr	r0, [pc, #12]	; (800a9e4 <low_level_init+0x190>)
 800a9d6:	f7f9 fd1a 	bl	800440e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a9da:	bf00      	nop
 800a9dc:	3740      	adds	r7, #64	; 0x40
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bdb0      	pop	{r4, r5, r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	2000682c 	.word	0x2000682c
 800a9e8:	40028000 	.word	0x40028000
 800a9ec:	20006874 	.word	0x20006874
 800a9f0:	20004f5c 	.word	0x20004f5c
 800a9f4:	20004fdc 	.word	0x20004fdc
 800a9f8:	200067ac 	.word	0x200067ac
 800a9fc:	2000056c 	.word	0x2000056c
 800aa00:	08022458 	.word	0x08022458

0800aa04 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b08a      	sub	sp, #40	; 0x28
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800aa0e:	4b4b      	ldr	r3, [pc, #300]	; (800ab3c <low_level_output+0x138>)
 800aa10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800aa16:	2300      	movs	r3, #0
 800aa18:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800aa22:	2300      	movs	r3, #0
 800aa24:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800aa26:	4b45      	ldr	r3, [pc, #276]	; (800ab3c <low_level_output+0x138>)
 800aa28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	623b      	str	r3, [r7, #32]
 800aa34:	e05a      	b.n	800aaec <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	da03      	bge.n	800aa46 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800aa3e:	23f8      	movs	r3, #248	; 0xf8
 800aa40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800aa44:	e05c      	b.n	800ab00 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800aa46:	6a3b      	ldr	r3, [r7, #32]
 800aa48:	895b      	ldrh	r3, [r3, #10]
 800aa4a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800aa50:	e02f      	b.n	800aab2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800aa52:	69fa      	ldr	r2, [r7, #28]
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	18d0      	adds	r0, r2, r3
 800aa58:	6a3b      	ldr	r3, [r7, #32]
 800aa5a:	685a      	ldr	r2, [r3, #4]
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	18d1      	adds	r1, r2, r3
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800aa66:	3304      	adds	r3, #4
 800aa68:	461a      	mov	r2, r3
 800aa6a:	f013 fecb 	bl	801e804 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	da03      	bge.n	800aa84 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800aa7c:	23f8      	movs	r3, #248	; 0xf8
 800aa7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800aa82:	e03d      	b.n	800ab00 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800aa8a:	693a      	ldr	r2, [r7, #16]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	4413      	add	r3, r2
 800aa90:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800aa94:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	1ad3      	subs	r3, r2, r3
 800aa9c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800aaa0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800aaa2:	697a      	ldr	r2, [r7, #20]
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	1ad3      	subs	r3, r2, r3
 800aaa8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800aaac:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800aaae:	2300      	movs	r3, #0
 800aab0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	4413      	add	r3, r2
 800aab8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d8c8      	bhi.n	800aa52 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800aac0:	69fa      	ldr	r2, [r7, #28]
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	18d0      	adds	r0, r2, r3
 800aac6:	6a3b      	ldr	r3, [r7, #32]
 800aac8:	685a      	ldr	r2, [r3, #4]
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	4413      	add	r3, r2
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	4619      	mov	r1, r3
 800aad2:	f013 fe97 	bl	801e804 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800aad6:	693a      	ldr	r2, [r7, #16]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	4413      	add	r3, r2
 800aadc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800aade:	697a      	ldr	r2, [r7, #20]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	4413      	add	r3, r2
 800aae4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800aae6:	6a3b      	ldr	r3, [r7, #32]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	623b      	str	r3, [r7, #32]
 800aaec:	6a3b      	ldr	r3, [r7, #32]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1a1      	bne.n	800aa36 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800aaf2:	6979      	ldr	r1, [r7, #20]
 800aaf4:	4811      	ldr	r0, [pc, #68]	; (800ab3c <low_level_output+0x138>)
 800aaf6:	f7f9 fa9d 	bl	8004034 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800ab00:	4b0e      	ldr	r3, [pc, #56]	; (800ab3c <low_level_output+0x138>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab08:	3314      	adds	r3, #20
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 0320 	and.w	r3, r3, #32
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00d      	beq.n	800ab30 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800ab14:	4b09      	ldr	r3, [pc, #36]	; (800ab3c <low_level_output+0x138>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab1c:	3314      	adds	r3, #20
 800ab1e:	2220      	movs	r2, #32
 800ab20:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800ab22:	4b06      	ldr	r3, [pc, #24]	; (800ab3c <low_level_output+0x138>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab2a:	3304      	adds	r3, #4
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800ab30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3728      	adds	r7, #40	; 0x28
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	2000682c 	.word	0x2000682c

0800ab40 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b08c      	sub	sp, #48	; 0x30
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800ab54:	2300      	movs	r3, #0
 800ab56:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800ab60:	2300      	movs	r3, #0
 800ab62:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800ab64:	484f      	ldr	r0, [pc, #316]	; (800aca4 <low_level_input+0x164>)
 800ab66:	f7f9 fb4f 	bl	8004208 <HAL_ETH_GetReceivedFrame_IT>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d001      	beq.n	800ab74 <low_level_input+0x34>

    return NULL;
 800ab70:	2300      	movs	r3, #0
 800ab72:	e092      	b.n	800ac9a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800ab74:	4b4b      	ldr	r3, [pc, #300]	; (800aca4 <low_level_input+0x164>)
 800ab76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab78:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800ab7a:	4b4a      	ldr	r3, [pc, #296]	; (800aca4 <low_level_input+0x164>)
 800ab7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800ab80:	89fb      	ldrh	r3, [r7, #14]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d007      	beq.n	800ab96 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800ab86:	89fb      	ldrh	r3, [r7, #14]
 800ab88:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	2000      	movs	r0, #0
 800ab90:	f008 fd9a 	bl	80136c8 <pbuf_alloc>
 800ab94:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800ab96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d04b      	beq.n	800ac34 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800ab9c:	4b41      	ldr	r3, [pc, #260]	; (800aca4 <low_level_input+0x164>)
 800ab9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800aba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba8:	62bb      	str	r3, [r7, #40]	; 0x28
 800abaa:	e040      	b.n	800ac2e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800abac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abae:	895b      	ldrh	r3, [r3, #10]
 800abb0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800abb2:	2300      	movs	r3, #0
 800abb4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800abb6:	e021      	b.n	800abfc <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800abb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abba:	685a      	ldr	r2, [r3, #4]
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	18d0      	adds	r0, r2, r3
 800abc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	18d1      	adds	r1, r2, r3
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800abcc:	3304      	adds	r3, #4
 800abce:	461a      	mov	r2, r3
 800abd0:	f013 fe18 	bl	801e804 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800abd4:	6a3b      	ldr	r3, [r7, #32]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800abda:	6a3b      	ldr	r3, [r7, #32]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800abe0:	69fa      	ldr	r2, [r7, #28]
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	4413      	add	r3, r2
 800abe6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800abea:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800abec:	69ba      	ldr	r2, [r7, #24]
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	1ad3      	subs	r3, r2, r3
 800abf2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800abf6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800abfc:	697a      	ldr	r2, [r7, #20]
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	4413      	add	r3, r2
 800ac02:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d8d6      	bhi.n	800abb8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800ac0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0c:	685a      	ldr	r2, [r3, #4]
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	18d0      	adds	r0, r2, r3
 800ac12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	4413      	add	r3, r2
 800ac18:	697a      	ldr	r2, [r7, #20]
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	f013 fdf2 	bl	801e804 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800ac20:	69fa      	ldr	r2, [r7, #28]
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	4413      	add	r3, r2
 800ac26:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800ac28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1bb      	bne.n	800abac <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800ac34:	4b1b      	ldr	r3, [pc, #108]	; (800aca4 <low_level_input+0x164>)
 800ac36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac38:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	613b      	str	r3, [r7, #16]
 800ac3e:	e00b      	b.n	800ac58 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800ac40:	6a3b      	ldr	r3, [r7, #32]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ac48:	6a3b      	ldr	r3, [r7, #32]
 800ac4a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800ac4c:	6a3b      	ldr	r3, [r7, #32]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	3301      	adds	r3, #1
 800ac56:	613b      	str	r3, [r7, #16]
 800ac58:	4b12      	ldr	r3, [pc, #72]	; (800aca4 <low_level_input+0x164>)
 800ac5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d3ee      	bcc.n	800ac40 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800ac62:	4b10      	ldr	r3, [pc, #64]	; (800aca4 <low_level_input+0x164>)
 800ac64:	2200      	movs	r2, #0
 800ac66:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800ac68:	4b0e      	ldr	r3, [pc, #56]	; (800aca4 <low_level_input+0x164>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac70:	3314      	adds	r3, #20
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d00d      	beq.n	800ac98 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800ac7c:	4b09      	ldr	r3, [pc, #36]	; (800aca4 <low_level_input+0x164>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac84:	3314      	adds	r3, #20
 800ac86:	2280      	movs	r2, #128	; 0x80
 800ac88:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800ac8a:	4b06      	ldr	r3, [pc, #24]	; (800aca4 <low_level_input+0x164>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac92:	3308      	adds	r3, #8
 800ac94:	2200      	movs	r2, #0
 800ac96:	601a      	str	r2, [r3, #0]
  }
  return p;
 800ac98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3730      	adds	r7, #48	; 0x30
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	2000682c 	.word	0x2000682c

0800aca8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800acb4:	4b12      	ldr	r3, [pc, #72]	; (800ad00 <ethernetif_input+0x58>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f04f 31ff 	mov.w	r1, #4294967295
 800acbc:	4618      	mov	r0, r3
 800acbe:	f001 fe11 	bl	800c8e4 <osSemaphoreWait>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d1f5      	bne.n	800acb4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800acc8:	480e      	ldr	r0, [pc, #56]	; (800ad04 <ethernetif_input+0x5c>)
 800acca:	f012 ff0d 	bl	801dae8 <sys_mutex_lock>
        p = low_level_input( netif );
 800acce:	68f8      	ldr	r0, [r7, #12]
 800acd0:	f7ff ff36 	bl	800ab40 <low_level_input>
 800acd4:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00a      	beq.n	800acf2 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	691b      	ldr	r3, [r3, #16]
 800ace0:	68f9      	ldr	r1, [r7, #12]
 800ace2:	68b8      	ldr	r0, [r7, #8]
 800ace4:	4798      	blx	r3
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d002      	beq.n	800acf2 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800acec:	68b8      	ldr	r0, [r7, #8]
 800acee:	f008 ffcf 	bl	8013c90 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800acf2:	4804      	ldr	r0, [pc, #16]	; (800ad04 <ethernetif_input+0x5c>)
 800acf4:	f012 ff07 	bl	801db06 <sys_mutex_unlock>
      } while(p!=NULL);
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d1e4      	bne.n	800acc8 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800acfe:	e7d9      	b.n	800acb4 <ethernetif_input+0xc>
 800ad00:	2000056c 	.word	0x2000056c
 800ad04:	20008084 	.word	0x20008084

0800ad08 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d106      	bne.n	800ad24 <ethernetif_init+0x1c>
 800ad16:	4b0e      	ldr	r3, [pc, #56]	; (800ad50 <ethernetif_init+0x48>)
 800ad18:	f240 222b 	movw	r2, #555	; 0x22b
 800ad1c:	490d      	ldr	r1, [pc, #52]	; (800ad54 <ethernetif_init+0x4c>)
 800ad1e:	480e      	ldr	r0, [pc, #56]	; (800ad58 <ethernetif_init+0x50>)
 800ad20:	f014 f81e 	bl	801ed60 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2273      	movs	r2, #115	; 0x73
 800ad28:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2274      	movs	r2, #116	; 0x74
 800ad30:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a09      	ldr	r2, [pc, #36]	; (800ad5c <ethernetif_init+0x54>)
 800ad38:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4a08      	ldr	r2, [pc, #32]	; (800ad60 <ethernetif_init+0x58>)
 800ad3e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f7ff fd87 	bl	800a854 <low_level_init>

  return ERR_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	08022474 	.word	0x08022474
 800ad54:	08022490 	.word	0x08022490
 800ad58:	080224a0 	.word	0x080224a0
 800ad5c:	0801b8a9 	.word	0x0801b8a9
 800ad60:	0800aa05 	.word	0x0800aa05

0800ad64 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ad68:	f7f8 fd4e 	bl	8003808 <HAL_GetTick>
 800ad6c:	4603      	mov	r3, r0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b084      	sub	sp, #16
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ad7e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ad82:	f013 fbcf 	bl	801e524 <USBD_static_malloc>
 800ad86:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d105      	bne.n	800ad9a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ad96:	2302      	movs	r3, #2
 800ad98:	e066      	b.n	800ae68 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	68fa      	ldr	r2, [r7, #12]
 800ad9e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	7c1b      	ldrb	r3, [r3, #16]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d119      	bne.n	800adde <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800adaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adae:	2202      	movs	r2, #2
 800adb0:	2181      	movs	r1, #129	; 0x81
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f013 fa93 	bl	801e2de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2201      	movs	r2, #1
 800adbc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800adbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adc2:	2202      	movs	r2, #2
 800adc4:	2101      	movs	r1, #1
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f013 fa89 	bl	801e2de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2201      	movs	r2, #1
 800add0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2210      	movs	r2, #16
 800add8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800addc:	e016      	b.n	800ae0c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800adde:	2340      	movs	r3, #64	; 0x40
 800ade0:	2202      	movs	r2, #2
 800ade2:	2181      	movs	r1, #129	; 0x81
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f013 fa7a 	bl	801e2de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2201      	movs	r2, #1
 800adee:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800adf0:	2340      	movs	r3, #64	; 0x40
 800adf2:	2202      	movs	r2, #2
 800adf4:	2101      	movs	r1, #1
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f013 fa71 	bl	801e2de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2201      	movs	r2, #1
 800ae00:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2210      	movs	r2, #16
 800ae08:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ae0c:	2308      	movs	r3, #8
 800ae0e:	2203      	movs	r2, #3
 800ae10:	2182      	movs	r1, #130	; 0x82
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f013 fa63 	bl	801e2de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2200      	movs	r2, #0
 800ae36:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	7c1b      	ldrb	r3, [r3, #16]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d109      	bne.n	800ae56 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae4c:	2101      	movs	r1, #1
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f013 fb34 	bl	801e4bc <USBD_LL_PrepareReceive>
 800ae54:	e007      	b.n	800ae66 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae5c:	2340      	movs	r3, #64	; 0x40
 800ae5e:	2101      	movs	r1, #1
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f013 fb2b 	bl	801e4bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3710      	adds	r7, #16
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ae7c:	2181      	movs	r1, #129	; 0x81
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f013 fa53 	bl	801e32a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ae8a:	2101      	movs	r1, #1
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f013 fa4c 	bl	801e32a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ae9a:	2182      	movs	r1, #130	; 0x82
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f013 fa44 	bl	801e32a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2200      	movs	r2, #0
 800aea6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00e      	beq.n	800aeda <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aecc:	4618      	mov	r0, r3
 800aece:	f013 fb37 	bl	801e540 <USBD_static_free>
    pdev->pClassData = NULL;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b086      	sub	sp, #24
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aef4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aef6:	2300      	movs	r3, #0
 800aef8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aefa:	2300      	movs	r3, #0
 800aefc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aefe:	2300      	movs	r3, #0
 800af00:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d101      	bne.n	800af0c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800af08:	2303      	movs	r3, #3
 800af0a:	e0af      	b.n	800b06c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af14:	2b00      	cmp	r3, #0
 800af16:	d03f      	beq.n	800af98 <USBD_CDC_Setup+0xb4>
 800af18:	2b20      	cmp	r3, #32
 800af1a:	f040 809f 	bne.w	800b05c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	88db      	ldrh	r3, [r3, #6]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d02e      	beq.n	800af84 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	b25b      	sxtb	r3, r3
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	da16      	bge.n	800af5e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800af3c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af3e:	683a      	ldr	r2, [r7, #0]
 800af40:	88d2      	ldrh	r2, [r2, #6]
 800af42:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	88db      	ldrh	r3, [r3, #6]
 800af48:	2b07      	cmp	r3, #7
 800af4a:	bf28      	it	cs
 800af4c:	2307      	movcs	r3, #7
 800af4e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	89fa      	ldrh	r2, [r7, #14]
 800af54:	4619      	mov	r1, r3
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f001 fae9 	bl	800c52e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800af5c:	e085      	b.n	800b06a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	785a      	ldrb	r2, [r3, #1]
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	88db      	ldrh	r3, [r3, #6]
 800af6c:	b2da      	uxtb	r2, r3
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800af74:	6939      	ldr	r1, [r7, #16]
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	88db      	ldrh	r3, [r3, #6]
 800af7a:	461a      	mov	r2, r3
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f001 fb02 	bl	800c586 <USBD_CtlPrepareRx>
      break;
 800af82:	e072      	b.n	800b06a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	683a      	ldr	r2, [r7, #0]
 800af8e:	7850      	ldrb	r0, [r2, #1]
 800af90:	2200      	movs	r2, #0
 800af92:	6839      	ldr	r1, [r7, #0]
 800af94:	4798      	blx	r3
      break;
 800af96:	e068      	b.n	800b06a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	785b      	ldrb	r3, [r3, #1]
 800af9c:	2b0b      	cmp	r3, #11
 800af9e:	d852      	bhi.n	800b046 <USBD_CDC_Setup+0x162>
 800afa0:	a201      	add	r2, pc, #4	; (adr r2, 800afa8 <USBD_CDC_Setup+0xc4>)
 800afa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa6:	bf00      	nop
 800afa8:	0800afd9 	.word	0x0800afd9
 800afac:	0800b055 	.word	0x0800b055
 800afb0:	0800b047 	.word	0x0800b047
 800afb4:	0800b047 	.word	0x0800b047
 800afb8:	0800b047 	.word	0x0800b047
 800afbc:	0800b047 	.word	0x0800b047
 800afc0:	0800b047 	.word	0x0800b047
 800afc4:	0800b047 	.word	0x0800b047
 800afc8:	0800b047 	.word	0x0800b047
 800afcc:	0800b047 	.word	0x0800b047
 800afd0:	0800b003 	.word	0x0800b003
 800afd4:	0800b02d 	.word	0x0800b02d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	2b03      	cmp	r3, #3
 800afe2:	d107      	bne.n	800aff4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800afe4:	f107 030a 	add.w	r3, r7, #10
 800afe8:	2202      	movs	r2, #2
 800afea:	4619      	mov	r1, r3
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f001 fa9e 	bl	800c52e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aff2:	e032      	b.n	800b05a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800aff4:	6839      	ldr	r1, [r7, #0]
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f001 fa28 	bl	800c44c <USBD_CtlError>
            ret = USBD_FAIL;
 800affc:	2303      	movs	r3, #3
 800affe:	75fb      	strb	r3, [r7, #23]
          break;
 800b000:	e02b      	b.n	800b05a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	2b03      	cmp	r3, #3
 800b00c:	d107      	bne.n	800b01e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b00e:	f107 030d 	add.w	r3, r7, #13
 800b012:	2201      	movs	r2, #1
 800b014:	4619      	mov	r1, r3
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f001 fa89 	bl	800c52e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b01c:	e01d      	b.n	800b05a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b01e:	6839      	ldr	r1, [r7, #0]
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f001 fa13 	bl	800c44c <USBD_CtlError>
            ret = USBD_FAIL;
 800b026:	2303      	movs	r3, #3
 800b028:	75fb      	strb	r3, [r7, #23]
          break;
 800b02a:	e016      	b.n	800b05a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b032:	b2db      	uxtb	r3, r3
 800b034:	2b03      	cmp	r3, #3
 800b036:	d00f      	beq.n	800b058 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b038:	6839      	ldr	r1, [r7, #0]
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f001 fa06 	bl	800c44c <USBD_CtlError>
            ret = USBD_FAIL;
 800b040:	2303      	movs	r3, #3
 800b042:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b044:	e008      	b.n	800b058 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b046:	6839      	ldr	r1, [r7, #0]
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f001 f9ff 	bl	800c44c <USBD_CtlError>
          ret = USBD_FAIL;
 800b04e:	2303      	movs	r3, #3
 800b050:	75fb      	strb	r3, [r7, #23]
          break;
 800b052:	e002      	b.n	800b05a <USBD_CDC_Setup+0x176>
          break;
 800b054:	bf00      	nop
 800b056:	e008      	b.n	800b06a <USBD_CDC_Setup+0x186>
          break;
 800b058:	bf00      	nop
      }
      break;
 800b05a:	e006      	b.n	800b06a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b05c:	6839      	ldr	r1, [r7, #0]
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f001 f9f4 	bl	800c44c <USBD_CtlError>
      ret = USBD_FAIL;
 800b064:	2303      	movs	r3, #3
 800b066:	75fb      	strb	r3, [r7, #23]
      break;
 800b068:	bf00      	nop
  }

  return (uint8_t)ret;
 800b06a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3718      	adds	r7, #24
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	460b      	mov	r3, r1
 800b07e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b086:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d101      	bne.n	800b096 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b092:	2303      	movs	r3, #3
 800b094:	e04f      	b.n	800b136 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b09c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b09e:	78fa      	ldrb	r2, [r7, #3]
 800b0a0:	6879      	ldr	r1, [r7, #4]
 800b0a2:	4613      	mov	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4413      	add	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	440b      	add	r3, r1
 800b0ac:	3318      	adds	r3, #24
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d029      	beq.n	800b108 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b0b4:	78fa      	ldrb	r2, [r7, #3]
 800b0b6:	6879      	ldr	r1, [r7, #4]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	440b      	add	r3, r1
 800b0c2:	3318      	adds	r3, #24
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	78f9      	ldrb	r1, [r7, #3]
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	00db      	lsls	r3, r3, #3
 800b0ce:	1a5b      	subs	r3, r3, r1
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	4403      	add	r3, r0
 800b0d4:	3344      	adds	r3, #68	; 0x44
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	fbb2 f1f3 	udiv	r1, r2, r3
 800b0dc:	fb03 f301 	mul.w	r3, r3, r1
 800b0e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d110      	bne.n	800b108 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b0e6:	78fa      	ldrb	r2, [r7, #3]
 800b0e8:	6879      	ldr	r1, [r7, #4]
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	4413      	add	r3, r2
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	440b      	add	r3, r1
 800b0f4:	3318      	adds	r3, #24
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b0fa:	78f9      	ldrb	r1, [r7, #3]
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	2200      	movs	r2, #0
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f013 f9ba 	bl	801e47a <USBD_LL_Transmit>
 800b106:	e015      	b.n	800b134 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	2200      	movs	r2, #0
 800b10c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d00b      	beq.n	800b134 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	68ba      	ldr	r2, [r7, #8]
 800b126:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b12a:	68ba      	ldr	r2, [r7, #8]
 800b12c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b130:	78fa      	ldrb	r2, [r7, #3]
 800b132:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b134:	2300      	movs	r3, #0
}
 800b136:	4618      	mov	r0, r3
 800b138:	3710      	adds	r7, #16
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b13e:	b580      	push	{r7, lr}
 800b140:	b084      	sub	sp, #16
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
 800b146:	460b      	mov	r3, r1
 800b148:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b150:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d101      	bne.n	800b160 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b15c:	2303      	movs	r3, #3
 800b15e:	e015      	b.n	800b18c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b160:	78fb      	ldrb	r3, [r7, #3]
 800b162:	4619      	mov	r1, r3
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f013 f9ca 	bl	801e4fe <USBD_LL_GetRxDataSize>
 800b16a:	4602      	mov	r2, r0
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b186:	4611      	mov	r1, r2
 800b188:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b18a:	2300      	movs	r3, #0
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3710      	adds	r7, #16
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1a2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d101      	bne.n	800b1ae <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b1aa:	2303      	movs	r3, #3
 800b1ac:	e01b      	b.n	800b1e6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d015      	beq.n	800b1e4 <USBD_CDC_EP0_RxReady+0x50>
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b1be:	2bff      	cmp	r3, #255	; 0xff
 800b1c0:	d010      	beq.n	800b1e4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	68fa      	ldr	r2, [r7, #12]
 800b1cc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b1d0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b1d2:	68fa      	ldr	r2, [r7, #12]
 800b1d4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b1d8:	b292      	uxth	r2, r2
 800b1da:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	22ff      	movs	r2, #255	; 0xff
 800b1e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3710      	adds	r7, #16
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
	...

0800b1f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2243      	movs	r2, #67	; 0x43
 800b1fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b1fe:	4b03      	ldr	r3, [pc, #12]	; (800b20c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b200:	4618      	mov	r0, r3
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr
 800b20c:	200000b0 	.word	0x200000b0

0800b210 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2243      	movs	r2, #67	; 0x43
 800b21c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b21e:	4b03      	ldr	r3, [pc, #12]	; (800b22c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b220:	4618      	mov	r0, r3
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr
 800b22c:	2000006c 	.word	0x2000006c

0800b230 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2243      	movs	r2, #67	; 0x43
 800b23c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b23e:	4b03      	ldr	r3, [pc, #12]	; (800b24c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b240:	4618      	mov	r0, r3
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr
 800b24c:	200000f4 	.word	0x200000f4

0800b250 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	220a      	movs	r2, #10
 800b25c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b25e:	4b03      	ldr	r3, [pc, #12]	; (800b26c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b260:	4618      	mov	r0, r3
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr
 800b26c:	20000028 	.word	0x20000028

0800b270 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d101      	bne.n	800b284 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b280:	2303      	movs	r3, #3
 800b282:	e004      	b.n	800b28e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	370c      	adds	r7, #12
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr

0800b29a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b29a:	b480      	push	{r7}
 800b29c:	b087      	sub	sp, #28
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	60f8      	str	r0, [r7, #12]
 800b2a2:	60b9      	str	r1, [r7, #8]
 800b2a4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2ac:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d101      	bne.n	800b2b8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b2b4:	2303      	movs	r3, #3
 800b2b6:	e008      	b.n	800b2ca <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	371c      	adds	r7, #28
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr

0800b2d6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b2d6:	b480      	push	{r7}
 800b2d8:	b085      	sub	sp, #20
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d101      	bne.n	800b2f2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	e004      	b.n	800b2fc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	683a      	ldr	r2, [r7, #0]
 800b2f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b2fa:	2300      	movs	r3, #0
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3714      	adds	r7, #20
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr

0800b308 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b316:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d101      	bne.n	800b326 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b322:	2303      	movs	r3, #3
 800b324:	e016      	b.n	800b354 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	7c1b      	ldrb	r3, [r3, #16]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d109      	bne.n	800b342 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b334:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b338:	2101      	movs	r1, #1
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f013 f8be 	bl	801e4bc <USBD_LL_PrepareReceive>
 800b340:	e007      	b.n	800b352 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b348:	2340      	movs	r3, #64	; 0x40
 800b34a:	2101      	movs	r1, #1
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f013 f8b5 	bl	801e4bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b086      	sub	sp, #24
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	4613      	mov	r3, r2
 800b368:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d101      	bne.n	800b374 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b370:	2303      	movs	r3, #3
 800b372:	e01f      	b.n	800b3b4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2200      	movs	r2, #0
 800b378:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2200      	movs	r2, #0
 800b380:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2200      	movs	r2, #0
 800b388:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d003      	beq.n	800b39a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	68ba      	ldr	r2, [r7, #8]
 800b396:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2201      	movs	r2, #1
 800b39e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	79fa      	ldrb	r2, [r7, #7]
 800b3a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	f012 ff31 	bl	801e210 <USBD_LL_Init>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b3b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3718      	adds	r7, #24
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d101      	bne.n	800b3d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	e016      	b.n	800b402 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00b      	beq.n	800b400 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f0:	f107 020e 	add.w	r2, r7, #14
 800b3f4:	4610      	mov	r0, r2
 800b3f6:	4798      	blx	r3
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b400:	2300      	movs	r3, #0
}
 800b402:	4618      	mov	r0, r3
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b082      	sub	sp, #8
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f012 ff48 	bl	801e2a8 <USBD_LL_Start>
 800b418:	4603      	mov	r3, r0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}

0800b422 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b422:	b480      	push	{r7}
 800b424:	b083      	sub	sp, #12
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	460b      	mov	r3, r1
 800b442:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b444:	2303      	movs	r3, #3
 800b446:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d009      	beq.n	800b466 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	78fa      	ldrb	r2, [r7, #3]
 800b45c:	4611      	mov	r1, r2
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	4798      	blx	r3
 800b462:	4603      	mov	r3, r0
 800b464:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b466:	7bfb      	ldrb	r3, [r7, #15]
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3710      	adds	r7, #16
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	460b      	mov	r3, r1
 800b47a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b482:	2b00      	cmp	r3, #0
 800b484:	d007      	beq.n	800b496 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	78fa      	ldrb	r2, [r7, #3]
 800b490:	4611      	mov	r1, r2
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	4798      	blx	r3
  }

  return USBD_OK;
 800b496:	2300      	movs	r3, #0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b4b0:	6839      	ldr	r1, [r7, #0]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f000 ff90 	bl	800c3d8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b4d4:	f003 031f 	and.w	r3, r3, #31
 800b4d8:	2b02      	cmp	r3, #2
 800b4da:	d01a      	beq.n	800b512 <USBD_LL_SetupStage+0x72>
 800b4dc:	2b02      	cmp	r3, #2
 800b4de:	d822      	bhi.n	800b526 <USBD_LL_SetupStage+0x86>
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d002      	beq.n	800b4ea <USBD_LL_SetupStage+0x4a>
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d00a      	beq.n	800b4fe <USBD_LL_SetupStage+0x5e>
 800b4e8:	e01d      	b.n	800b526 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 fa62 	bl	800b9bc <USBD_StdDevReq>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	73fb      	strb	r3, [r7, #15]
      break;
 800b4fc:	e020      	b.n	800b540 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b504:	4619      	mov	r1, r3
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 fac6 	bl	800ba98 <USBD_StdItfReq>
 800b50c:	4603      	mov	r3, r0
 800b50e:	73fb      	strb	r3, [r7, #15]
      break;
 800b510:	e016      	b.n	800b540 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b518:	4619      	mov	r1, r3
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 fb05 	bl	800bb2a <USBD_StdEPReq>
 800b520:	4603      	mov	r3, r0
 800b522:	73fb      	strb	r3, [r7, #15]
      break;
 800b524:	e00c      	b.n	800b540 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b52c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b530:	b2db      	uxtb	r3, r3
 800b532:	4619      	mov	r1, r3
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f012 ff17 	bl	801e368 <USBD_LL_StallEP>
 800b53a:	4603      	mov	r3, r0
 800b53c:	73fb      	strb	r3, [r7, #15]
      break;
 800b53e:	bf00      	nop
  }

  return ret;
 800b540:	7bfb      	ldrb	r3, [r7, #15]
}
 800b542:	4618      	mov	r0, r3
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b086      	sub	sp, #24
 800b54e:	af00      	add	r7, sp, #0
 800b550:	60f8      	str	r0, [r7, #12]
 800b552:	460b      	mov	r3, r1
 800b554:	607a      	str	r2, [r7, #4]
 800b556:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b558:	7afb      	ldrb	r3, [r7, #11]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d138      	bne.n	800b5d0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b564:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b56c:	2b03      	cmp	r3, #3
 800b56e:	d14a      	bne.n	800b606 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	689a      	ldr	r2, [r3, #8]
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d913      	bls.n	800b5a4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	689a      	ldr	r2, [r3, #8]
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	1ad2      	subs	r2, r2, r3
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	68da      	ldr	r2, [r3, #12]
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	4293      	cmp	r3, r2
 800b594:	bf28      	it	cs
 800b596:	4613      	movcs	r3, r2
 800b598:	461a      	mov	r2, r3
 800b59a:	6879      	ldr	r1, [r7, #4]
 800b59c:	68f8      	ldr	r0, [r7, #12]
 800b59e:	f001 f80f 	bl	800c5c0 <USBD_CtlContinueRx>
 800b5a2:	e030      	b.n	800b606 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	2b03      	cmp	r3, #3
 800b5ae:	d10b      	bne.n	800b5c8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5b6:	691b      	ldr	r3, [r3, #16]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d005      	beq.n	800b5c8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5c2:	691b      	ldr	r3, [r3, #16]
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f001 f80a 	bl	800c5e2 <USBD_CtlSendStatus>
 800b5ce:	e01a      	b.n	800b606 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	2b03      	cmp	r3, #3
 800b5da:	d114      	bne.n	800b606 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5e2:	699b      	ldr	r3, [r3, #24]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d00e      	beq.n	800b606 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5ee:	699b      	ldr	r3, [r3, #24]
 800b5f0:	7afa      	ldrb	r2, [r7, #11]
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	4798      	blx	r3
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b5fc:	7dfb      	ldrb	r3, [r7, #23]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d001      	beq.n	800b606 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b602:	7dfb      	ldrb	r3, [r7, #23]
 800b604:	e000      	b.n	800b608 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b606:	2300      	movs	r3, #0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3718      	adds	r7, #24
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	460b      	mov	r3, r1
 800b61a:	607a      	str	r2, [r7, #4]
 800b61c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b61e:	7afb      	ldrb	r3, [r7, #11]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d16b      	bne.n	800b6fc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	3314      	adds	r3, #20
 800b628:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b630:	2b02      	cmp	r3, #2
 800b632:	d156      	bne.n	800b6e2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	689a      	ldr	r2, [r3, #8]
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d914      	bls.n	800b66a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	689a      	ldr	r2, [r3, #8]
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	1ad2      	subs	r2, r2, r3
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	461a      	mov	r2, r3
 800b654:	6879      	ldr	r1, [r7, #4]
 800b656:	68f8      	ldr	r0, [r7, #12]
 800b658:	f000 ff84 	bl	800c564 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b65c:	2300      	movs	r3, #0
 800b65e:	2200      	movs	r2, #0
 800b660:	2100      	movs	r1, #0
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f012 ff2a 	bl	801e4bc <USBD_LL_PrepareReceive>
 800b668:	e03b      	b.n	800b6e2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	68da      	ldr	r2, [r3, #12]
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	429a      	cmp	r2, r3
 800b674:	d11c      	bne.n	800b6b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	685a      	ldr	r2, [r3, #4]
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b67e:	429a      	cmp	r2, r3
 800b680:	d316      	bcc.n	800b6b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	685a      	ldr	r2, [r3, #4]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d20f      	bcs.n	800b6b0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b690:	2200      	movs	r2, #0
 800b692:	2100      	movs	r1, #0
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f000 ff65 	bl	800c564 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f012 ff07 	bl	801e4bc <USBD_LL_PrepareReceive>
 800b6ae:	e018      	b.n	800b6e2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	2b03      	cmp	r3, #3
 800b6ba:	d10b      	bne.n	800b6d4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d005      	beq.n	800b6d4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6ce:	68db      	ldr	r3, [r3, #12]
 800b6d0:	68f8      	ldr	r0, [r7, #12]
 800b6d2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6d4:	2180      	movs	r1, #128	; 0x80
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	f012 fe46 	bl	801e368 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f000 ff93 	bl	800c608 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d122      	bne.n	800b732 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b6ec:	68f8      	ldr	r0, [r7, #12]
 800b6ee:	f7ff fe98 	bl	800b422 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b6fa:	e01a      	b.n	800b732 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b702:	b2db      	uxtb	r3, r3
 800b704:	2b03      	cmp	r3, #3
 800b706:	d114      	bne.n	800b732 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b70e:	695b      	ldr	r3, [r3, #20]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d00e      	beq.n	800b732 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b71a:	695b      	ldr	r3, [r3, #20]
 800b71c:	7afa      	ldrb	r2, [r7, #11]
 800b71e:	4611      	mov	r1, r2
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	4798      	blx	r3
 800b724:	4603      	mov	r3, r0
 800b726:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b728:	7dfb      	ldrb	r3, [r7, #23]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d001      	beq.n	800b732 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b72e:	7dfb      	ldrb	r3, [r7, #23]
 800b730:	e000      	b.n	800b734 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b732:	2300      	movs	r3, #0
}
 800b734:	4618      	mov	r0, r3
 800b736:	3718      	adds	r7, #24
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2201      	movs	r2, #1
 800b748:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d101      	bne.n	800b770 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b76c:	2303      	movs	r3, #3
 800b76e:	e02f      	b.n	800b7d0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b776:	2b00      	cmp	r3, #0
 800b778:	d00f      	beq.n	800b79a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d009      	beq.n	800b79a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	6852      	ldr	r2, [r2, #4]
 800b792:	b2d2      	uxtb	r2, r2
 800b794:	4611      	mov	r1, r2
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b79a:	2340      	movs	r3, #64	; 0x40
 800b79c:	2200      	movs	r2, #0
 800b79e:	2100      	movs	r1, #0
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f012 fd9c 	bl	801e2de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2240      	movs	r2, #64	; 0x40
 800b7b2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b7b6:	2340      	movs	r3, #64	; 0x40
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	2180      	movs	r1, #128	; 0x80
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f012 fd8e 	bl	801e2de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2240      	movs	r2, #64	; 0x40
 800b7cc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b7ce:	2300      	movs	r3, #0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	78fa      	ldrb	r2, [r7, #3]
 800b7e8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b7ea:	2300      	movs	r3, #0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr

0800b7f8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b806:	b2da      	uxtb	r2, r3
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2204      	movs	r2, #4
 800b812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b816:	2300      	movs	r3, #0
}
 800b818:	4618      	mov	r0, r3
 800b81a:	370c      	adds	r7, #12
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr

0800b824 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b832:	b2db      	uxtb	r3, r3
 800b834:	2b04      	cmp	r3, #4
 800b836:	d106      	bne.n	800b846 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b83e:	b2da      	uxtb	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b862:	2b00      	cmp	r3, #0
 800b864:	d101      	bne.n	800b86a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b866:	2303      	movs	r3, #3
 800b868:	e012      	b.n	800b890 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b870:	b2db      	uxtb	r3, r3
 800b872:	2b03      	cmp	r3, #3
 800b874:	d10b      	bne.n	800b88e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b87c:	69db      	ldr	r3, [r3, #28]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d005      	beq.n	800b88e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b888:	69db      	ldr	r3, [r3, #28]
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3708      	adds	r7, #8
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d101      	bne.n	800b8b2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b8ae:	2303      	movs	r3, #3
 800b8b0:	e014      	b.n	800b8dc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	2b03      	cmp	r3, #3
 800b8bc:	d10d      	bne.n	800b8da <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8c4:	6a1b      	ldr	r3, [r3, #32]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d007      	beq.n	800b8da <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8d0:	6a1b      	ldr	r3, [r3, #32]
 800b8d2:	78fa      	ldrb	r2, [r7, #3]
 800b8d4:	4611      	mov	r1, r2
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3708      	adds	r7, #8
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d101      	bne.n	800b8fe <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b8fa:	2303      	movs	r3, #3
 800b8fc:	e014      	b.n	800b928 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b904:	b2db      	uxtb	r3, r3
 800b906:	2b03      	cmp	r3, #3
 800b908:	d10d      	bne.n	800b926 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b912:	2b00      	cmp	r3, #0
 800b914:	d007      	beq.n	800b926 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91e:	78fa      	ldrb	r2, [r7, #3]
 800b920:	4611      	mov	r1, r2
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b938:	2300      	movs	r3, #0
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	370c      	adds	r7, #12
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr

0800b946 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b946:	b580      	push	{r7, lr}
 800b948:	b082      	sub	sp, #8
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2201      	movs	r2, #1
 800b952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d009      	beq.n	800b974 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	6852      	ldr	r2, [r2, #4]
 800b96c:	b2d2      	uxtb	r2, r2
 800b96e:	4611      	mov	r1, r2
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	4798      	blx	r3
  }

  return USBD_OK;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b97e:	b480      	push	{r7}
 800b980:	b087      	sub	sp, #28
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	3301      	adds	r3, #1
 800b994:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b99c:	8a3b      	ldrh	r3, [r7, #16]
 800b99e:	021b      	lsls	r3, r3, #8
 800b9a0:	b21a      	sxth	r2, r3
 800b9a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	b21b      	sxth	r3, r3
 800b9aa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b9ac:	89fb      	ldrh	r3, [r7, #14]
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	371c      	adds	r7, #28
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
	...

0800b9bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b9d2:	2b40      	cmp	r3, #64	; 0x40
 800b9d4:	d005      	beq.n	800b9e2 <USBD_StdDevReq+0x26>
 800b9d6:	2b40      	cmp	r3, #64	; 0x40
 800b9d8:	d853      	bhi.n	800ba82 <USBD_StdDevReq+0xc6>
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00b      	beq.n	800b9f6 <USBD_StdDevReq+0x3a>
 800b9de:	2b20      	cmp	r3, #32
 800b9e0:	d14f      	bne.n	800ba82 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9e8:	689b      	ldr	r3, [r3, #8]
 800b9ea:	6839      	ldr	r1, [r7, #0]
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	4798      	blx	r3
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	73fb      	strb	r3, [r7, #15]
      break;
 800b9f4:	e04a      	b.n	800ba8c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	785b      	ldrb	r3, [r3, #1]
 800b9fa:	2b09      	cmp	r3, #9
 800b9fc:	d83b      	bhi.n	800ba76 <USBD_StdDevReq+0xba>
 800b9fe:	a201      	add	r2, pc, #4	; (adr r2, 800ba04 <USBD_StdDevReq+0x48>)
 800ba00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba04:	0800ba59 	.word	0x0800ba59
 800ba08:	0800ba6d 	.word	0x0800ba6d
 800ba0c:	0800ba77 	.word	0x0800ba77
 800ba10:	0800ba63 	.word	0x0800ba63
 800ba14:	0800ba77 	.word	0x0800ba77
 800ba18:	0800ba37 	.word	0x0800ba37
 800ba1c:	0800ba2d 	.word	0x0800ba2d
 800ba20:	0800ba77 	.word	0x0800ba77
 800ba24:	0800ba4f 	.word	0x0800ba4f
 800ba28:	0800ba41 	.word	0x0800ba41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ba2c:	6839      	ldr	r1, [r7, #0]
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 f9de 	bl	800bdf0 <USBD_GetDescriptor>
          break;
 800ba34:	e024      	b.n	800ba80 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ba36:	6839      	ldr	r1, [r7, #0]
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 fb43 	bl	800c0c4 <USBD_SetAddress>
          break;
 800ba3e:	e01f      	b.n	800ba80 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ba40:	6839      	ldr	r1, [r7, #0]
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 fb82 	bl	800c14c <USBD_SetConfig>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	73fb      	strb	r3, [r7, #15]
          break;
 800ba4c:	e018      	b.n	800ba80 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ba4e:	6839      	ldr	r1, [r7, #0]
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 fc21 	bl	800c298 <USBD_GetConfig>
          break;
 800ba56:	e013      	b.n	800ba80 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ba58:	6839      	ldr	r1, [r7, #0]
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 fc52 	bl	800c304 <USBD_GetStatus>
          break;
 800ba60:	e00e      	b.n	800ba80 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ba62:	6839      	ldr	r1, [r7, #0]
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 fc81 	bl	800c36c <USBD_SetFeature>
          break;
 800ba6a:	e009      	b.n	800ba80 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ba6c:	6839      	ldr	r1, [r7, #0]
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 fc90 	bl	800c394 <USBD_ClrFeature>
          break;
 800ba74:	e004      	b.n	800ba80 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ba76:	6839      	ldr	r1, [r7, #0]
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 fce7 	bl	800c44c <USBD_CtlError>
          break;
 800ba7e:	bf00      	nop
      }
      break;
 800ba80:	e004      	b.n	800ba8c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ba82:	6839      	ldr	r1, [r7, #0]
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 fce1 	bl	800c44c <USBD_CtlError>
      break;
 800ba8a:	bf00      	nop
  }

  return ret;
 800ba8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop

0800ba98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800baa2:	2300      	movs	r3, #0
 800baa4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800baae:	2b40      	cmp	r3, #64	; 0x40
 800bab0:	d005      	beq.n	800babe <USBD_StdItfReq+0x26>
 800bab2:	2b40      	cmp	r3, #64	; 0x40
 800bab4:	d82f      	bhi.n	800bb16 <USBD_StdItfReq+0x7e>
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <USBD_StdItfReq+0x26>
 800baba:	2b20      	cmp	r3, #32
 800babc:	d12b      	bne.n	800bb16 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	3b01      	subs	r3, #1
 800bac8:	2b02      	cmp	r3, #2
 800baca:	d81d      	bhi.n	800bb08 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	889b      	ldrh	r3, [r3, #4]
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d813      	bhi.n	800bafe <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800badc:	689b      	ldr	r3, [r3, #8]
 800bade:	6839      	ldr	r1, [r7, #0]
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	4798      	blx	r3
 800bae4:	4603      	mov	r3, r0
 800bae6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	88db      	ldrh	r3, [r3, #6]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d110      	bne.n	800bb12 <USBD_StdItfReq+0x7a>
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d10d      	bne.n	800bb12 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 fd73 	bl	800c5e2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bafc:	e009      	b.n	800bb12 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bafe:	6839      	ldr	r1, [r7, #0]
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 fca3 	bl	800c44c <USBD_CtlError>
          break;
 800bb06:	e004      	b.n	800bb12 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bb08:	6839      	ldr	r1, [r7, #0]
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 fc9e 	bl	800c44c <USBD_CtlError>
          break;
 800bb10:	e000      	b.n	800bb14 <USBD_StdItfReq+0x7c>
          break;
 800bb12:	bf00      	nop
      }
      break;
 800bb14:	e004      	b.n	800bb20 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bb16:	6839      	ldr	r1, [r7, #0]
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 fc97 	bl	800c44c <USBD_CtlError>
      break;
 800bb1e:	bf00      	nop
  }

  return ret;
 800bb20:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}

0800bb2a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb2a:	b580      	push	{r7, lr}
 800bb2c:	b084      	sub	sp, #16
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
 800bb32:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bb34:	2300      	movs	r3, #0
 800bb36:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	889b      	ldrh	r3, [r3, #4]
 800bb3c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb46:	2b40      	cmp	r3, #64	; 0x40
 800bb48:	d007      	beq.n	800bb5a <USBD_StdEPReq+0x30>
 800bb4a:	2b40      	cmp	r3, #64	; 0x40
 800bb4c:	f200 8145 	bhi.w	800bdda <USBD_StdEPReq+0x2b0>
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d00c      	beq.n	800bb6e <USBD_StdEPReq+0x44>
 800bb54:	2b20      	cmp	r3, #32
 800bb56:	f040 8140 	bne.w	800bdda <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb60:	689b      	ldr	r3, [r3, #8]
 800bb62:	6839      	ldr	r1, [r7, #0]
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	4798      	blx	r3
 800bb68:	4603      	mov	r3, r0
 800bb6a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb6c:	e13a      	b.n	800bde4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	785b      	ldrb	r3, [r3, #1]
 800bb72:	2b03      	cmp	r3, #3
 800bb74:	d007      	beq.n	800bb86 <USBD_StdEPReq+0x5c>
 800bb76:	2b03      	cmp	r3, #3
 800bb78:	f300 8129 	bgt.w	800bdce <USBD_StdEPReq+0x2a4>
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d07f      	beq.n	800bc80 <USBD_StdEPReq+0x156>
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d03c      	beq.n	800bbfe <USBD_StdEPReq+0xd4>
 800bb84:	e123      	b.n	800bdce <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	2b02      	cmp	r3, #2
 800bb90:	d002      	beq.n	800bb98 <USBD_StdEPReq+0x6e>
 800bb92:	2b03      	cmp	r3, #3
 800bb94:	d016      	beq.n	800bbc4 <USBD_StdEPReq+0x9a>
 800bb96:	e02c      	b.n	800bbf2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb98:	7bbb      	ldrb	r3, [r7, #14]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00d      	beq.n	800bbba <USBD_StdEPReq+0x90>
 800bb9e:	7bbb      	ldrb	r3, [r7, #14]
 800bba0:	2b80      	cmp	r3, #128	; 0x80
 800bba2:	d00a      	beq.n	800bbba <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bba4:	7bbb      	ldrb	r3, [r7, #14]
 800bba6:	4619      	mov	r1, r3
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f012 fbdd 	bl	801e368 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbae:	2180      	movs	r1, #128	; 0x80
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f012 fbd9 	bl	801e368 <USBD_LL_StallEP>
 800bbb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bbb8:	e020      	b.n	800bbfc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bbba:	6839      	ldr	r1, [r7, #0]
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 fc45 	bl	800c44c <USBD_CtlError>
              break;
 800bbc2:	e01b      	b.n	800bbfc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	885b      	ldrh	r3, [r3, #2]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d10e      	bne.n	800bbea <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bbcc:	7bbb      	ldrb	r3, [r7, #14]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00b      	beq.n	800bbea <USBD_StdEPReq+0xc0>
 800bbd2:	7bbb      	ldrb	r3, [r7, #14]
 800bbd4:	2b80      	cmp	r3, #128	; 0x80
 800bbd6:	d008      	beq.n	800bbea <USBD_StdEPReq+0xc0>
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	88db      	ldrh	r3, [r3, #6]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d104      	bne.n	800bbea <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bbe0:	7bbb      	ldrb	r3, [r7, #14]
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f012 fbbf 	bl	801e368 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 fcf9 	bl	800c5e2 <USBD_CtlSendStatus>

              break;
 800bbf0:	e004      	b.n	800bbfc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bbf2:	6839      	ldr	r1, [r7, #0]
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 fc29 	bl	800c44c <USBD_CtlError>
              break;
 800bbfa:	bf00      	nop
          }
          break;
 800bbfc:	e0ec      	b.n	800bdd8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	2b02      	cmp	r3, #2
 800bc08:	d002      	beq.n	800bc10 <USBD_StdEPReq+0xe6>
 800bc0a:	2b03      	cmp	r3, #3
 800bc0c:	d016      	beq.n	800bc3c <USBD_StdEPReq+0x112>
 800bc0e:	e030      	b.n	800bc72 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc10:	7bbb      	ldrb	r3, [r7, #14]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d00d      	beq.n	800bc32 <USBD_StdEPReq+0x108>
 800bc16:	7bbb      	ldrb	r3, [r7, #14]
 800bc18:	2b80      	cmp	r3, #128	; 0x80
 800bc1a:	d00a      	beq.n	800bc32 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc1c:	7bbb      	ldrb	r3, [r7, #14]
 800bc1e:	4619      	mov	r1, r3
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f012 fba1 	bl	801e368 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc26:	2180      	movs	r1, #128	; 0x80
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f012 fb9d 	bl	801e368 <USBD_LL_StallEP>
 800bc2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc30:	e025      	b.n	800bc7e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bc32:	6839      	ldr	r1, [r7, #0]
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 fc09 	bl	800c44c <USBD_CtlError>
              break;
 800bc3a:	e020      	b.n	800bc7e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	885b      	ldrh	r3, [r3, #2]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d11b      	bne.n	800bc7c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bc44:	7bbb      	ldrb	r3, [r7, #14]
 800bc46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d004      	beq.n	800bc58 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bc4e:	7bbb      	ldrb	r3, [r7, #14]
 800bc50:	4619      	mov	r1, r3
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f012 fba7 	bl	801e3a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 fcc2 	bl	800c5e2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	6839      	ldr	r1, [r7, #0]
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	4798      	blx	r3
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bc70:	e004      	b.n	800bc7c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bc72:	6839      	ldr	r1, [r7, #0]
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 fbe9 	bl	800c44c <USBD_CtlError>
              break;
 800bc7a:	e000      	b.n	800bc7e <USBD_StdEPReq+0x154>
              break;
 800bc7c:	bf00      	nop
          }
          break;
 800bc7e:	e0ab      	b.n	800bdd8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	2b02      	cmp	r3, #2
 800bc8a:	d002      	beq.n	800bc92 <USBD_StdEPReq+0x168>
 800bc8c:	2b03      	cmp	r3, #3
 800bc8e:	d032      	beq.n	800bcf6 <USBD_StdEPReq+0x1cc>
 800bc90:	e097      	b.n	800bdc2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc92:	7bbb      	ldrb	r3, [r7, #14]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d007      	beq.n	800bca8 <USBD_StdEPReq+0x17e>
 800bc98:	7bbb      	ldrb	r3, [r7, #14]
 800bc9a:	2b80      	cmp	r3, #128	; 0x80
 800bc9c:	d004      	beq.n	800bca8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800bc9e:	6839      	ldr	r1, [r7, #0]
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f000 fbd3 	bl	800c44c <USBD_CtlError>
                break;
 800bca6:	e091      	b.n	800bdcc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	da0b      	bge.n	800bcc8 <USBD_StdEPReq+0x19e>
 800bcb0:	7bbb      	ldrb	r3, [r7, #14]
 800bcb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	4413      	add	r3, r2
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	3310      	adds	r3, #16
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	4413      	add	r3, r2
 800bcc4:	3304      	adds	r3, #4
 800bcc6:	e00b      	b.n	800bce0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bcc8:	7bbb      	ldrb	r3, [r7, #14]
 800bcca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcce:	4613      	mov	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4413      	add	r3, r2
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	4413      	add	r3, r2
 800bcde:	3304      	adds	r3, #4
 800bce0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	2200      	movs	r2, #0
 800bce6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	2202      	movs	r2, #2
 800bcec:	4619      	mov	r1, r3
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 fc1d 	bl	800c52e <USBD_CtlSendData>
              break;
 800bcf4:	e06a      	b.n	800bdcc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bcf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	da11      	bge.n	800bd22 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bcfe:	7bbb      	ldrb	r3, [r7, #14]
 800bd00:	f003 020f 	and.w	r2, r3, #15
 800bd04:	6879      	ldr	r1, [r7, #4]
 800bd06:	4613      	mov	r3, r2
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	4413      	add	r3, r2
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	440b      	add	r3, r1
 800bd10:	3324      	adds	r3, #36	; 0x24
 800bd12:	881b      	ldrh	r3, [r3, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d117      	bne.n	800bd48 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bd18:	6839      	ldr	r1, [r7, #0]
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 fb96 	bl	800c44c <USBD_CtlError>
                  break;
 800bd20:	e054      	b.n	800bdcc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bd22:	7bbb      	ldrb	r3, [r7, #14]
 800bd24:	f003 020f 	and.w	r2, r3, #15
 800bd28:	6879      	ldr	r1, [r7, #4]
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	4413      	add	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	440b      	add	r3, r1
 800bd34:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bd38:	881b      	ldrh	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d104      	bne.n	800bd48 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bd3e:	6839      	ldr	r1, [r7, #0]
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 fb83 	bl	800c44c <USBD_CtlError>
                  break;
 800bd46:	e041      	b.n	800bdcc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	da0b      	bge.n	800bd68 <USBD_StdEPReq+0x23e>
 800bd50:	7bbb      	ldrb	r3, [r7, #14]
 800bd52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd56:	4613      	mov	r3, r2
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	4413      	add	r3, r2
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	3310      	adds	r3, #16
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	4413      	add	r3, r2
 800bd64:	3304      	adds	r3, #4
 800bd66:	e00b      	b.n	800bd80 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd68:	7bbb      	ldrb	r3, [r7, #14]
 800bd6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd6e:	4613      	mov	r3, r2
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	4413      	add	r3, r2
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	3304      	adds	r3, #4
 800bd80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bd82:	7bbb      	ldrb	r3, [r7, #14]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d002      	beq.n	800bd8e <USBD_StdEPReq+0x264>
 800bd88:	7bbb      	ldrb	r3, [r7, #14]
 800bd8a:	2b80      	cmp	r3, #128	; 0x80
 800bd8c:	d103      	bne.n	800bd96 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	2200      	movs	r2, #0
 800bd92:	601a      	str	r2, [r3, #0]
 800bd94:	e00e      	b.n	800bdb4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bd96:	7bbb      	ldrb	r3, [r7, #14]
 800bd98:	4619      	mov	r1, r3
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f012 fb22 	bl	801e3e4 <USBD_LL_IsStallEP>
 800bda0:	4603      	mov	r3, r0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d003      	beq.n	800bdae <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	601a      	str	r2, [r3, #0]
 800bdac:	e002      	b.n	800bdb4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	2202      	movs	r2, #2
 800bdb8:	4619      	mov	r1, r3
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 fbb7 	bl	800c52e <USBD_CtlSendData>
              break;
 800bdc0:	e004      	b.n	800bdcc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bdc2:	6839      	ldr	r1, [r7, #0]
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f000 fb41 	bl	800c44c <USBD_CtlError>
              break;
 800bdca:	bf00      	nop
          }
          break;
 800bdcc:	e004      	b.n	800bdd8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bdce:	6839      	ldr	r1, [r7, #0]
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 fb3b 	bl	800c44c <USBD_CtlError>
          break;
 800bdd6:	bf00      	nop
      }
      break;
 800bdd8:	e004      	b.n	800bde4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bdda:	6839      	ldr	r1, [r7, #0]
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 fb35 	bl	800c44c <USBD_CtlError>
      break;
 800bde2:	bf00      	nop
  }

  return ret;
 800bde4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
	...

0800bdf0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bdfe:	2300      	movs	r3, #0
 800be00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800be02:	2300      	movs	r3, #0
 800be04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	885b      	ldrh	r3, [r3, #2]
 800be0a:	0a1b      	lsrs	r3, r3, #8
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	3b01      	subs	r3, #1
 800be10:	2b06      	cmp	r3, #6
 800be12:	f200 8128 	bhi.w	800c066 <USBD_GetDescriptor+0x276>
 800be16:	a201      	add	r2, pc, #4	; (adr r2, 800be1c <USBD_GetDescriptor+0x2c>)
 800be18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be1c:	0800be39 	.word	0x0800be39
 800be20:	0800be51 	.word	0x0800be51
 800be24:	0800be91 	.word	0x0800be91
 800be28:	0800c067 	.word	0x0800c067
 800be2c:	0800c067 	.word	0x0800c067
 800be30:	0800c007 	.word	0x0800c007
 800be34:	0800c033 	.word	0x0800c033
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	7c12      	ldrb	r2, [r2, #16]
 800be44:	f107 0108 	add.w	r1, r7, #8
 800be48:	4610      	mov	r0, r2
 800be4a:	4798      	blx	r3
 800be4c:	60f8      	str	r0, [r7, #12]
      break;
 800be4e:	e112      	b.n	800c076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	7c1b      	ldrb	r3, [r3, #16]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d10d      	bne.n	800be74 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be60:	f107 0208 	add.w	r2, r7, #8
 800be64:	4610      	mov	r0, r2
 800be66:	4798      	blx	r3
 800be68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	3301      	adds	r3, #1
 800be6e:	2202      	movs	r2, #2
 800be70:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800be72:	e100      	b.n	800c076 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be7c:	f107 0208 	add.w	r2, r7, #8
 800be80:	4610      	mov	r0, r2
 800be82:	4798      	blx	r3
 800be84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	3301      	adds	r3, #1
 800be8a:	2202      	movs	r2, #2
 800be8c:	701a      	strb	r2, [r3, #0]
      break;
 800be8e:	e0f2      	b.n	800c076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	885b      	ldrh	r3, [r3, #2]
 800be94:	b2db      	uxtb	r3, r3
 800be96:	2b05      	cmp	r3, #5
 800be98:	f200 80ac 	bhi.w	800bff4 <USBD_GetDescriptor+0x204>
 800be9c:	a201      	add	r2, pc, #4	; (adr r2, 800bea4 <USBD_GetDescriptor+0xb4>)
 800be9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea2:	bf00      	nop
 800bea4:	0800bebd 	.word	0x0800bebd
 800bea8:	0800bef1 	.word	0x0800bef1
 800beac:	0800bf25 	.word	0x0800bf25
 800beb0:	0800bf59 	.word	0x0800bf59
 800beb4:	0800bf8d 	.word	0x0800bf8d
 800beb8:	0800bfc1 	.word	0x0800bfc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d00b      	beq.n	800bee0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	7c12      	ldrb	r2, [r2, #16]
 800bed4:	f107 0108 	add.w	r1, r7, #8
 800bed8:	4610      	mov	r0, r2
 800beda:	4798      	blx	r3
 800bedc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bede:	e091      	b.n	800c004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bee0:	6839      	ldr	r1, [r7, #0]
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 fab2 	bl	800c44c <USBD_CtlError>
            err++;
 800bee8:	7afb      	ldrb	r3, [r7, #11]
 800beea:	3301      	adds	r3, #1
 800beec:	72fb      	strb	r3, [r7, #11]
          break;
 800beee:	e089      	b.n	800c004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d00b      	beq.n	800bf14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	7c12      	ldrb	r2, [r2, #16]
 800bf08:	f107 0108 	add.w	r1, r7, #8
 800bf0c:	4610      	mov	r0, r2
 800bf0e:	4798      	blx	r3
 800bf10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf12:	e077      	b.n	800c004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf14:	6839      	ldr	r1, [r7, #0]
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 fa98 	bl	800c44c <USBD_CtlError>
            err++;
 800bf1c:	7afb      	ldrb	r3, [r7, #11]
 800bf1e:	3301      	adds	r3, #1
 800bf20:	72fb      	strb	r3, [r7, #11]
          break;
 800bf22:	e06f      	b.n	800c004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf2a:	68db      	ldr	r3, [r3, #12]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d00b      	beq.n	800bf48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	7c12      	ldrb	r2, [r2, #16]
 800bf3c:	f107 0108 	add.w	r1, r7, #8
 800bf40:	4610      	mov	r0, r2
 800bf42:	4798      	blx	r3
 800bf44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf46:	e05d      	b.n	800c004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf48:	6839      	ldr	r1, [r7, #0]
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 fa7e 	bl	800c44c <USBD_CtlError>
            err++;
 800bf50:	7afb      	ldrb	r3, [r7, #11]
 800bf52:	3301      	adds	r3, #1
 800bf54:	72fb      	strb	r3, [r7, #11]
          break;
 800bf56:	e055      	b.n	800c004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf5e:	691b      	ldr	r3, [r3, #16]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d00b      	beq.n	800bf7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf6a:	691b      	ldr	r3, [r3, #16]
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	7c12      	ldrb	r2, [r2, #16]
 800bf70:	f107 0108 	add.w	r1, r7, #8
 800bf74:	4610      	mov	r0, r2
 800bf76:	4798      	blx	r3
 800bf78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf7a:	e043      	b.n	800c004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf7c:	6839      	ldr	r1, [r7, #0]
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 fa64 	bl	800c44c <USBD_CtlError>
            err++;
 800bf84:	7afb      	ldrb	r3, [r7, #11]
 800bf86:	3301      	adds	r3, #1
 800bf88:	72fb      	strb	r3, [r7, #11]
          break;
 800bf8a:	e03b      	b.n	800c004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf92:	695b      	ldr	r3, [r3, #20]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d00b      	beq.n	800bfb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf9e:	695b      	ldr	r3, [r3, #20]
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	7c12      	ldrb	r2, [r2, #16]
 800bfa4:	f107 0108 	add.w	r1, r7, #8
 800bfa8:	4610      	mov	r0, r2
 800bfaa:	4798      	blx	r3
 800bfac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfae:	e029      	b.n	800c004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfb0:	6839      	ldr	r1, [r7, #0]
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 fa4a 	bl	800c44c <USBD_CtlError>
            err++;
 800bfb8:	7afb      	ldrb	r3, [r7, #11]
 800bfba:	3301      	adds	r3, #1
 800bfbc:	72fb      	strb	r3, [r7, #11]
          break;
 800bfbe:	e021      	b.n	800c004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfc6:	699b      	ldr	r3, [r3, #24]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d00b      	beq.n	800bfe4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfd2:	699b      	ldr	r3, [r3, #24]
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	7c12      	ldrb	r2, [r2, #16]
 800bfd8:	f107 0108 	add.w	r1, r7, #8
 800bfdc:	4610      	mov	r0, r2
 800bfde:	4798      	blx	r3
 800bfe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfe2:	e00f      	b.n	800c004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfe4:	6839      	ldr	r1, [r7, #0]
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 fa30 	bl	800c44c <USBD_CtlError>
            err++;
 800bfec:	7afb      	ldrb	r3, [r7, #11]
 800bfee:	3301      	adds	r3, #1
 800bff0:	72fb      	strb	r3, [r7, #11]
          break;
 800bff2:	e007      	b.n	800c004 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bff4:	6839      	ldr	r1, [r7, #0]
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 fa28 	bl	800c44c <USBD_CtlError>
          err++;
 800bffc:	7afb      	ldrb	r3, [r7, #11]
 800bffe:	3301      	adds	r3, #1
 800c000:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c002:	bf00      	nop
      }
      break;
 800c004:	e037      	b.n	800c076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	7c1b      	ldrb	r3, [r3, #16]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d109      	bne.n	800c022 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c016:	f107 0208 	add.w	r2, r7, #8
 800c01a:	4610      	mov	r0, r2
 800c01c:	4798      	blx	r3
 800c01e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c020:	e029      	b.n	800c076 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c022:	6839      	ldr	r1, [r7, #0]
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 fa11 	bl	800c44c <USBD_CtlError>
        err++;
 800c02a:	7afb      	ldrb	r3, [r7, #11]
 800c02c:	3301      	adds	r3, #1
 800c02e:	72fb      	strb	r3, [r7, #11]
      break;
 800c030:	e021      	b.n	800c076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	7c1b      	ldrb	r3, [r3, #16]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d10d      	bne.n	800c056 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c042:	f107 0208 	add.w	r2, r7, #8
 800c046:	4610      	mov	r0, r2
 800c048:	4798      	blx	r3
 800c04a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	3301      	adds	r3, #1
 800c050:	2207      	movs	r2, #7
 800c052:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c054:	e00f      	b.n	800c076 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c056:	6839      	ldr	r1, [r7, #0]
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 f9f7 	bl	800c44c <USBD_CtlError>
        err++;
 800c05e:	7afb      	ldrb	r3, [r7, #11]
 800c060:	3301      	adds	r3, #1
 800c062:	72fb      	strb	r3, [r7, #11]
      break;
 800c064:	e007      	b.n	800c076 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c066:	6839      	ldr	r1, [r7, #0]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 f9ef 	bl	800c44c <USBD_CtlError>
      err++;
 800c06e:	7afb      	ldrb	r3, [r7, #11]
 800c070:	3301      	adds	r3, #1
 800c072:	72fb      	strb	r3, [r7, #11]
      break;
 800c074:	bf00      	nop
  }

  if (err != 0U)
 800c076:	7afb      	ldrb	r3, [r7, #11]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d11e      	bne.n	800c0ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	88db      	ldrh	r3, [r3, #6]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d016      	beq.n	800c0b2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c084:	893b      	ldrh	r3, [r7, #8]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d00e      	beq.n	800c0a8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	88da      	ldrh	r2, [r3, #6]
 800c08e:	893b      	ldrh	r3, [r7, #8]
 800c090:	4293      	cmp	r3, r2
 800c092:	bf28      	it	cs
 800c094:	4613      	movcs	r3, r2
 800c096:	b29b      	uxth	r3, r3
 800c098:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c09a:	893b      	ldrh	r3, [r7, #8]
 800c09c:	461a      	mov	r2, r3
 800c09e:	68f9      	ldr	r1, [r7, #12]
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 fa44 	bl	800c52e <USBD_CtlSendData>
 800c0a6:	e009      	b.n	800c0bc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c0a8:	6839      	ldr	r1, [r7, #0]
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 f9ce 	bl	800c44c <USBD_CtlError>
 800c0b0:	e004      	b.n	800c0bc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 fa95 	bl	800c5e2 <USBD_CtlSendStatus>
 800c0b8:	e000      	b.n	800c0bc <USBD_GetDescriptor+0x2cc>
    return;
 800c0ba:	bf00      	nop
  }
}
 800c0bc:	3710      	adds	r7, #16
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
 800c0c2:	bf00      	nop

0800c0c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	889b      	ldrh	r3, [r3, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d131      	bne.n	800c13a <USBD_SetAddress+0x76>
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	88db      	ldrh	r3, [r3, #6]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d12d      	bne.n	800c13a <USBD_SetAddress+0x76>
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	885b      	ldrh	r3, [r3, #2]
 800c0e2:	2b7f      	cmp	r3, #127	; 0x7f
 800c0e4:	d829      	bhi.n	800c13a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	885b      	ldrh	r3, [r3, #2]
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	2b03      	cmp	r3, #3
 800c0fc:	d104      	bne.n	800c108 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c0fe:	6839      	ldr	r1, [r7, #0]
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 f9a3 	bl	800c44c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c106:	e01d      	b.n	800c144 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	7bfa      	ldrb	r2, [r7, #15]
 800c10c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c110:	7bfb      	ldrb	r3, [r7, #15]
 800c112:	4619      	mov	r1, r3
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f012 f991 	bl	801e43c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 fa61 	bl	800c5e2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c120:	7bfb      	ldrb	r3, [r7, #15]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d004      	beq.n	800c130 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2202      	movs	r2, #2
 800c12a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c12e:	e009      	b.n	800c144 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2201      	movs	r2, #1
 800c134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c138:	e004      	b.n	800c144 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c13a:	6839      	ldr	r1, [r7, #0]
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 f985 	bl	800c44c <USBD_CtlError>
  }
}
 800c142:	bf00      	nop
 800c144:	bf00      	nop
 800c146:	3710      	adds	r7, #16
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c156:	2300      	movs	r3, #0
 800c158:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	885b      	ldrh	r3, [r3, #2]
 800c15e:	b2da      	uxtb	r2, r3
 800c160:	4b4c      	ldr	r3, [pc, #304]	; (800c294 <USBD_SetConfig+0x148>)
 800c162:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c164:	4b4b      	ldr	r3, [pc, #300]	; (800c294 <USBD_SetConfig+0x148>)
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d905      	bls.n	800c178 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c16c:	6839      	ldr	r1, [r7, #0]
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 f96c 	bl	800c44c <USBD_CtlError>
    return USBD_FAIL;
 800c174:	2303      	movs	r3, #3
 800c176:	e088      	b.n	800c28a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	2b02      	cmp	r3, #2
 800c182:	d002      	beq.n	800c18a <USBD_SetConfig+0x3e>
 800c184:	2b03      	cmp	r3, #3
 800c186:	d025      	beq.n	800c1d4 <USBD_SetConfig+0x88>
 800c188:	e071      	b.n	800c26e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c18a:	4b42      	ldr	r3, [pc, #264]	; (800c294 <USBD_SetConfig+0x148>)
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d01c      	beq.n	800c1cc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c192:	4b40      	ldr	r3, [pc, #256]	; (800c294 <USBD_SetConfig+0x148>)
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	461a      	mov	r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c19c:	4b3d      	ldr	r3, [pc, #244]	; (800c294 <USBD_SetConfig+0x148>)
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f7ff f948 	bl	800b438 <USBD_SetClassConfig>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c1ac:	7bfb      	ldrb	r3, [r7, #15]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d004      	beq.n	800c1bc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c1b2:	6839      	ldr	r1, [r7, #0]
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 f949 	bl	800c44c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c1ba:	e065      	b.n	800c288 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 fa10 	bl	800c5e2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2203      	movs	r2, #3
 800c1c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c1ca:	e05d      	b.n	800c288 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 fa08 	bl	800c5e2 <USBD_CtlSendStatus>
      break;
 800c1d2:	e059      	b.n	800c288 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c1d4:	4b2f      	ldr	r3, [pc, #188]	; (800c294 <USBD_SetConfig+0x148>)
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d112      	bne.n	800c202 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2202      	movs	r2, #2
 800c1e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c1e4:	4b2b      	ldr	r3, [pc, #172]	; (800c294 <USBD_SetConfig+0x148>)
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c1ee:	4b29      	ldr	r3, [pc, #164]	; (800c294 <USBD_SetConfig+0x148>)
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f7ff f93b 	bl	800b470 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 f9f1 	bl	800c5e2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c200:	e042      	b.n	800c288 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c202:	4b24      	ldr	r3, [pc, #144]	; (800c294 <USBD_SetConfig+0x148>)
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	461a      	mov	r2, r3
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d02a      	beq.n	800c266 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	b2db      	uxtb	r3, r3
 800c216:	4619      	mov	r1, r3
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7ff f929 	bl	800b470 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c21e:	4b1d      	ldr	r3, [pc, #116]	; (800c294 <USBD_SetConfig+0x148>)
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	461a      	mov	r2, r3
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c228:	4b1a      	ldr	r3, [pc, #104]	; (800c294 <USBD_SetConfig+0x148>)
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	4619      	mov	r1, r3
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f7ff f902 	bl	800b438 <USBD_SetClassConfig>
 800c234:	4603      	mov	r3, r0
 800c236:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c238:	7bfb      	ldrb	r3, [r7, #15]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d00f      	beq.n	800c25e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c23e:	6839      	ldr	r1, [r7, #0]
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 f903 	bl	800c44c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	4619      	mov	r1, r3
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f7ff f90e 	bl	800b470 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2202      	movs	r2, #2
 800c258:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c25c:	e014      	b.n	800c288 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 f9bf 	bl	800c5e2 <USBD_CtlSendStatus>
      break;
 800c264:	e010      	b.n	800c288 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 f9bb 	bl	800c5e2 <USBD_CtlSendStatus>
      break;
 800c26c:	e00c      	b.n	800c288 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c26e:	6839      	ldr	r1, [r7, #0]
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 f8eb 	bl	800c44c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c276:	4b07      	ldr	r3, [pc, #28]	; (800c294 <USBD_SetConfig+0x148>)
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	4619      	mov	r1, r3
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f7ff f8f7 	bl	800b470 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c282:	2303      	movs	r3, #3
 800c284:	73fb      	strb	r3, [r7, #15]
      break;
 800c286:	bf00      	nop
  }

  return ret;
 800c288:	7bfb      	ldrb	r3, [r7, #15]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	20000570 	.word	0x20000570

0800c298 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	88db      	ldrh	r3, [r3, #6]
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d004      	beq.n	800c2b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c2aa:	6839      	ldr	r1, [r7, #0]
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 f8cd 	bl	800c44c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c2b2:	e023      	b.n	800c2fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	dc02      	bgt.n	800c2c6 <USBD_GetConfig+0x2e>
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	dc03      	bgt.n	800c2cc <USBD_GetConfig+0x34>
 800c2c4:	e015      	b.n	800c2f2 <USBD_GetConfig+0x5a>
 800c2c6:	2b03      	cmp	r3, #3
 800c2c8:	d00b      	beq.n	800c2e2 <USBD_GetConfig+0x4a>
 800c2ca:	e012      	b.n	800c2f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	3308      	adds	r3, #8
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	4619      	mov	r1, r3
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 f927 	bl	800c52e <USBD_CtlSendData>
        break;
 800c2e0:	e00c      	b.n	800c2fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 f91f 	bl	800c52e <USBD_CtlSendData>
        break;
 800c2f0:	e004      	b.n	800c2fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c2f2:	6839      	ldr	r1, [r7, #0]
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 f8a9 	bl	800c44c <USBD_CtlError>
        break;
 800c2fa:	bf00      	nop
}
 800c2fc:	bf00      	nop
 800c2fe:	3708      	adds	r7, #8
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c314:	b2db      	uxtb	r3, r3
 800c316:	3b01      	subs	r3, #1
 800c318:	2b02      	cmp	r3, #2
 800c31a:	d81e      	bhi.n	800c35a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	88db      	ldrh	r3, [r3, #6]
 800c320:	2b02      	cmp	r3, #2
 800c322:	d004      	beq.n	800c32e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c324:	6839      	ldr	r1, [r7, #0]
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f890 	bl	800c44c <USBD_CtlError>
        break;
 800c32c:	e01a      	b.n	800c364 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2201      	movs	r2, #1
 800c332:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d005      	beq.n	800c34a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	68db      	ldr	r3, [r3, #12]
 800c342:	f043 0202 	orr.w	r2, r3, #2
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	330c      	adds	r3, #12
 800c34e:	2202      	movs	r2, #2
 800c350:	4619      	mov	r1, r3
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 f8eb 	bl	800c52e <USBD_CtlSendData>
      break;
 800c358:	e004      	b.n	800c364 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c35a:	6839      	ldr	r1, [r7, #0]
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 f875 	bl	800c44c <USBD_CtlError>
      break;
 800c362:	bf00      	nop
  }
}
 800c364:	bf00      	nop
 800c366:	3708      	adds	r7, #8
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	885b      	ldrh	r3, [r3, #2]
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d106      	bne.n	800c38c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2201      	movs	r2, #1
 800c382:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f000 f92b 	bl	800c5e2 <USBD_CtlSendStatus>
  }
}
 800c38c:	bf00      	nop
 800c38e:	3708      	adds	r7, #8
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	2b02      	cmp	r3, #2
 800c3aa:	d80b      	bhi.n	800c3c4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	885b      	ldrh	r3, [r3, #2]
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d10c      	bne.n	800c3ce <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 f910 	bl	800c5e2 <USBD_CtlSendStatus>
      }
      break;
 800c3c2:	e004      	b.n	800c3ce <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c3c4:	6839      	ldr	r1, [r7, #0]
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 f840 	bl	800c44c <USBD_CtlError>
      break;
 800c3cc:	e000      	b.n	800c3d0 <USBD_ClrFeature+0x3c>
      break;
 800c3ce:	bf00      	nop
  }
}
 800c3d0:	bf00      	nop
 800c3d2:	3708      	adds	r7, #8
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	781a      	ldrb	r2, [r3, #0]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	781a      	ldrb	r2, [r3, #0]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	3301      	adds	r3, #1
 800c400:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c402:	68f8      	ldr	r0, [r7, #12]
 800c404:	f7ff fabb 	bl	800b97e <SWAPBYTE>
 800c408:	4603      	mov	r3, r0
 800c40a:	461a      	mov	r2, r3
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	3301      	adds	r3, #1
 800c414:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	3301      	adds	r3, #1
 800c41a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f7ff faae 	bl	800b97e <SWAPBYTE>
 800c422:	4603      	mov	r3, r0
 800c424:	461a      	mov	r2, r3
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	3301      	adds	r3, #1
 800c42e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	3301      	adds	r3, #1
 800c434:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c436:	68f8      	ldr	r0, [r7, #12]
 800c438:	f7ff faa1 	bl	800b97e <SWAPBYTE>
 800c43c:	4603      	mov	r3, r0
 800c43e:	461a      	mov	r2, r3
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	80da      	strh	r2, [r3, #6]
}
 800c444:	bf00      	nop
 800c446:	3710      	adds	r7, #16
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c456:	2180      	movs	r1, #128	; 0x80
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f011 ff85 	bl	801e368 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c45e:	2100      	movs	r1, #0
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f011 ff81 	bl	801e368 <USBD_LL_StallEP>
}
 800c466:	bf00      	nop
 800c468:	3708      	adds	r7, #8
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c46e:	b580      	push	{r7, lr}
 800c470:	b086      	sub	sp, #24
 800c472:	af00      	add	r7, sp, #0
 800c474:	60f8      	str	r0, [r7, #12]
 800c476:	60b9      	str	r1, [r7, #8]
 800c478:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c47a:	2300      	movs	r3, #0
 800c47c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d036      	beq.n	800c4f2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c488:	6938      	ldr	r0, [r7, #16]
 800c48a:	f000 f836 	bl	800c4fa <USBD_GetLen>
 800c48e:	4603      	mov	r3, r0
 800c490:	3301      	adds	r3, #1
 800c492:	b29b      	uxth	r3, r3
 800c494:	005b      	lsls	r3, r3, #1
 800c496:	b29a      	uxth	r2, r3
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c49c:	7dfb      	ldrb	r3, [r7, #23]
 800c49e:	68ba      	ldr	r2, [r7, #8]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	7812      	ldrb	r2, [r2, #0]
 800c4a6:	701a      	strb	r2, [r3, #0]
  idx++;
 800c4a8:	7dfb      	ldrb	r3, [r7, #23]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c4ae:	7dfb      	ldrb	r3, [r7, #23]
 800c4b0:	68ba      	ldr	r2, [r7, #8]
 800c4b2:	4413      	add	r3, r2
 800c4b4:	2203      	movs	r2, #3
 800c4b6:	701a      	strb	r2, [r3, #0]
  idx++;
 800c4b8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c4be:	e013      	b.n	800c4e8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c4c0:	7dfb      	ldrb	r3, [r7, #23]
 800c4c2:	68ba      	ldr	r2, [r7, #8]
 800c4c4:	4413      	add	r3, r2
 800c4c6:	693a      	ldr	r2, [r7, #16]
 800c4c8:	7812      	ldrb	r2, [r2, #0]
 800c4ca:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	613b      	str	r3, [r7, #16]
    idx++;
 800c4d2:	7dfb      	ldrb	r3, [r7, #23]
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c4d8:	7dfb      	ldrb	r3, [r7, #23]
 800c4da:	68ba      	ldr	r2, [r7, #8]
 800c4dc:	4413      	add	r3, r2
 800c4de:	2200      	movs	r2, #0
 800c4e0:	701a      	strb	r2, [r3, #0]
    idx++;
 800c4e2:	7dfb      	ldrb	r3, [r7, #23]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d1e7      	bne.n	800c4c0 <USBD_GetString+0x52>
 800c4f0:	e000      	b.n	800c4f4 <USBD_GetString+0x86>
    return;
 800c4f2:	bf00      	nop
  }
}
 800c4f4:	3718      	adds	r7, #24
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c4fa:	b480      	push	{r7}
 800c4fc:	b085      	sub	sp, #20
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c502:	2300      	movs	r3, #0
 800c504:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c50a:	e005      	b.n	800c518 <USBD_GetLen+0x1e>
  {
    len++;
 800c50c:	7bfb      	ldrb	r3, [r7, #15]
 800c50e:	3301      	adds	r3, #1
 800c510:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	3301      	adds	r3, #1
 800c516:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1f5      	bne.n	800c50c <USBD_GetLen+0x12>
  }

  return len;
 800c520:	7bfb      	ldrb	r3, [r7, #15]
}
 800c522:	4618      	mov	r0, r3
 800c524:	3714      	adds	r7, #20
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr

0800c52e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b084      	sub	sp, #16
 800c532:	af00      	add	r7, sp, #0
 800c534:	60f8      	str	r0, [r7, #12]
 800c536:	60b9      	str	r1, [r7, #8]
 800c538:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2202      	movs	r2, #2
 800c53e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	68ba      	ldr	r2, [r7, #8]
 800c552:	2100      	movs	r1, #0
 800c554:	68f8      	ldr	r0, [r7, #12]
 800c556:	f011 ff90 	bl	801e47a <USBD_LL_Transmit>

  return USBD_OK;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3710      	adds	r7, #16
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	68ba      	ldr	r2, [r7, #8]
 800c574:	2100      	movs	r1, #0
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	f011 ff7f 	bl	801e47a <USBD_LL_Transmit>

  return USBD_OK;
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b084      	sub	sp, #16
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	60f8      	str	r0, [r7, #12]
 800c58e:	60b9      	str	r1, [r7, #8]
 800c590:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2203      	movs	r2, #3
 800c596:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	68ba      	ldr	r2, [r7, #8]
 800c5ae:	2100      	movs	r1, #0
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f011 ff83 	bl	801e4bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3710      	adds	r7, #16
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	68ba      	ldr	r2, [r7, #8]
 800c5d0:	2100      	movs	r1, #0
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	f011 ff72 	bl	801e4bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5d8:	2300      	movs	r3, #0
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}

0800c5e2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b082      	sub	sp, #8
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2204      	movs	r2, #4
 800c5ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	2100      	movs	r1, #0
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f011 ff3e 	bl	801e47a <USBD_LL_Transmit>

  return USBD_OK;
 800c5fe:	2300      	movs	r3, #0
}
 800c600:	4618      	mov	r0, r3
 800c602:	3708      	adds	r7, #8
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2205      	movs	r2, #5
 800c614:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c618:	2300      	movs	r3, #0
 800c61a:	2200      	movs	r2, #0
 800c61c:	2100      	movs	r1, #0
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f011 ff4c 	bl	801e4bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c624:	2300      	movs	r3, #0
}
 800c626:	4618      	mov	r0, r3
 800c628:	3708      	adds	r7, #8
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}

0800c62e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c62e:	b480      	push	{r7}
 800c630:	b085      	sub	sp, #20
 800c632:	af00      	add	r7, sp, #0
 800c634:	4603      	mov	r3, r0
 800c636:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c638:	2300      	movs	r3, #0
 800c63a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c63c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c640:	2b84      	cmp	r3, #132	; 0x84
 800c642:	d005      	beq.n	800c650 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c644:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	4413      	add	r3, r2
 800c64c:	3303      	adds	r3, #3
 800c64e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c650:	68fb      	ldr	r3, [r7, #12]
}
 800c652:	4618      	mov	r0, r3
 800c654:	3714      	adds	r7, #20
 800c656:	46bd      	mov	sp, r7
 800c658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65c:	4770      	bx	lr

0800c65e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c65e:	b480      	push	{r7}
 800c660:	b083      	sub	sp, #12
 800c662:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c664:	f3ef 8305 	mrs	r3, IPSR
 800c668:	607b      	str	r3, [r7, #4]
  return(result);
 800c66a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	bf14      	ite	ne
 800c670:	2301      	movne	r3, #1
 800c672:	2300      	moveq	r3, #0
 800c674:	b2db      	uxtb	r3, r3
}
 800c676:	4618      	mov	r0, r3
 800c678:	370c      	adds	r7, #12
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr

0800c682 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c682:	b580      	push	{r7, lr}
 800c684:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c686:	f001 fcdd 	bl	800e044 <vTaskStartScheduler>
  
  return osOK;
 800c68a:	2300      	movs	r3, #0
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c694:	f7ff ffe3 	bl	800c65e <inHandlerMode>
 800c698:	4603      	mov	r3, r0
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d003      	beq.n	800c6a6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c69e:	f001 fdeb 	bl	800e278 <xTaskGetTickCountFromISR>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	e002      	b.n	800c6ac <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c6a6:	f001 fdd7 	bl	800e258 <xTaskGetTickCount>
 800c6aa:	4603      	mov	r3, r0
  }
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6b2:	b089      	sub	sp, #36	; 0x24
 800c6b4:	af04      	add	r7, sp, #16
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	695b      	ldr	r3, [r3, #20]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d020      	beq.n	800c704 <osThreadCreate+0x54>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	699b      	ldr	r3, [r3, #24]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d01c      	beq.n	800c704 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	685c      	ldr	r4, [r3, #4]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681d      	ldr	r5, [r3, #0]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	691e      	ldr	r6, [r3, #16]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7ff ffa6 	bl	800c62e <makeFreeRtosPriority>
 800c6e2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	695b      	ldr	r3, [r3, #20]
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c6ec:	9202      	str	r2, [sp, #8]
 800c6ee:	9301      	str	r3, [sp, #4]
 800c6f0:	9100      	str	r1, [sp, #0]
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	4632      	mov	r2, r6
 800c6f6:	4629      	mov	r1, r5
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	f001 fb0f 	bl	800dd1c <xTaskCreateStatic>
 800c6fe:	4603      	mov	r3, r0
 800c700:	60fb      	str	r3, [r7, #12]
 800c702:	e01c      	b.n	800c73e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	685c      	ldr	r4, [r3, #4]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c710:	b29e      	uxth	r6, r3
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c718:	4618      	mov	r0, r3
 800c71a:	f7ff ff88 	bl	800c62e <makeFreeRtosPriority>
 800c71e:	4602      	mov	r2, r0
 800c720:	f107 030c 	add.w	r3, r7, #12
 800c724:	9301      	str	r3, [sp, #4]
 800c726:	9200      	str	r2, [sp, #0]
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	4632      	mov	r2, r6
 800c72c:	4629      	mov	r1, r5
 800c72e:	4620      	mov	r0, r4
 800c730:	f001 fb51 	bl	800ddd6 <xTaskCreate>
 800c734:	4603      	mov	r3, r0
 800c736:	2b01      	cmp	r3, #1
 800c738:	d001      	beq.n	800c73e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c73a:	2300      	movs	r3, #0
 800c73c:	e000      	b.n	800c740 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c73e:	68fb      	ldr	r3, [r7, #12]
}
 800c740:	4618      	mov	r0, r3
 800c742:	3714      	adds	r7, #20
 800c744:	46bd      	mov	sp, r7
 800c746:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c748 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d007      	beq.n	800c768 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	4619      	mov	r1, r3
 800c75e:	2001      	movs	r0, #1
 800c760:	f000 fc7d 	bl	800d05e <xQueueCreateMutexStatic>
 800c764:	4603      	mov	r3, r0
 800c766:	e003      	b.n	800c770 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800c768:	2001      	movs	r0, #1
 800c76a:	f000 fc60 	bl	800d02e <xQueueCreateMutex>
 800c76e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800c770:	4618      	mov	r0, r3
 800c772:	3708      	adds	r7, #8
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c782:	2300      	movs	r3, #0
 800c784:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d101      	bne.n	800c790 <osMutexWait+0x18>
    return osErrorParameter;
 800c78c:	2380      	movs	r3, #128	; 0x80
 800c78e:	e03a      	b.n	800c806 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800c790:	2300      	movs	r3, #0
 800c792:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c79a:	d103      	bne.n	800c7a4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800c79c:	f04f 33ff 	mov.w	r3, #4294967295
 800c7a0:	60fb      	str	r3, [r7, #12]
 800c7a2:	e009      	b.n	800c7b8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d006      	beq.n	800c7b8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d101      	bne.n	800c7b8 <osMutexWait+0x40>
      ticks = 1;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c7b8:	f7ff ff51 	bl	800c65e <inHandlerMode>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d017      	beq.n	800c7f2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c7c2:	f107 0308 	add.w	r3, r7, #8
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	2100      	movs	r1, #0
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f001 f874 	bl	800d8b8 <xQueueReceiveFromISR>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d001      	beq.n	800c7da <osMutexWait+0x62>
      return osErrorOS;
 800c7d6:	23ff      	movs	r3, #255	; 0xff
 800c7d8:	e015      	b.n	800c806 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d011      	beq.n	800c804 <osMutexWait+0x8c>
 800c7e0:	4b0b      	ldr	r3, [pc, #44]	; (800c810 <osMutexWait+0x98>)
 800c7e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7e6:	601a      	str	r2, [r3, #0]
 800c7e8:	f3bf 8f4f 	dsb	sy
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	e008      	b.n	800c804 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800c7f2:	68f9      	ldr	r1, [r7, #12]
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 ff53 	bl	800d6a0 <xQueueSemaphoreTake>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d001      	beq.n	800c804 <osMutexWait+0x8c>
    return osErrorOS;
 800c800:	23ff      	movs	r3, #255	; 0xff
 800c802:	e000      	b.n	800c806 <osMutexWait+0x8e>
  }
  
  return osOK;
 800c804:	2300      	movs	r3, #0
}
 800c806:	4618      	mov	r0, r3
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	e000ed04 	.word	0xe000ed04

0800c814 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c81c:	2300      	movs	r3, #0
 800c81e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c820:	2300      	movs	r3, #0
 800c822:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800c824:	f7ff ff1b 	bl	800c65e <inHandlerMode>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d016      	beq.n	800c85c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c82e:	f107 0308 	add.w	r3, r7, #8
 800c832:	4619      	mov	r1, r3
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 fdc6 	bl	800d3c6 <xQueueGiveFromISR>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d001      	beq.n	800c844 <osMutexRelease+0x30>
      return osErrorOS;
 800c840:	23ff      	movs	r3, #255	; 0xff
 800c842:	e017      	b.n	800c874 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d013      	beq.n	800c872 <osMutexRelease+0x5e>
 800c84a:	4b0c      	ldr	r3, [pc, #48]	; (800c87c <osMutexRelease+0x68>)
 800c84c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c850:	601a      	str	r2, [r3, #0]
 800c852:	f3bf 8f4f 	dsb	sy
 800c856:	f3bf 8f6f 	isb	sy
 800c85a:	e00a      	b.n	800c872 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800c85c:	2300      	movs	r3, #0
 800c85e:	2200      	movs	r2, #0
 800c860:	2100      	movs	r1, #0
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 fc16 	bl	800d094 <xQueueGenericSend>
 800c868:	4603      	mov	r3, r0
 800c86a:	2b01      	cmp	r3, #1
 800c86c:	d001      	beq.n	800c872 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800c86e:	23ff      	movs	r3, #255	; 0xff
 800c870:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800c872:	68fb      	ldr	r3, [r7, #12]
}
 800c874:	4618      	mov	r0, r3
 800c876:	3710      	adds	r7, #16
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	e000ed04 	.word	0xe000ed04

0800c880 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c880:	b580      	push	{r7, lr}
 800c882:	b086      	sub	sp, #24
 800c884:	af02      	add	r7, sp, #8
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00f      	beq.n	800c8b2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	2b01      	cmp	r3, #1
 800c896:	d10a      	bne.n	800c8ae <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	2203      	movs	r2, #3
 800c89e:	9200      	str	r2, [sp, #0]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	2100      	movs	r1, #0
 800c8a4:	2001      	movs	r0, #1
 800c8a6:	f000 fad7 	bl	800ce58 <xQueueGenericCreateStatic>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	e016      	b.n	800c8dc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	e014      	b.n	800c8dc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d110      	bne.n	800c8da <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c8b8:	2203      	movs	r2, #3
 800c8ba:	2100      	movs	r1, #0
 800c8bc:	2001      	movs	r0, #1
 800c8be:	f000 fb43 	bl	800cf48 <xQueueGenericCreate>
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d005      	beq.n	800c8d6 <osSemaphoreCreate+0x56>
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	2100      	movs	r1, #0
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f000 fbdf 	bl	800d094 <xQueueGenericSend>
      return sema;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	e000      	b.n	800c8dc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c8da:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3710      	adds	r7, #16
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d101      	bne.n	800c8fc <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c8f8:	2380      	movs	r3, #128	; 0x80
 800c8fa:	e03a      	b.n	800c972 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c906:	d103      	bne.n	800c910 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c908:	f04f 33ff 	mov.w	r3, #4294967295
 800c90c:	60fb      	str	r3, [r7, #12]
 800c90e:	e009      	b.n	800c924 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d006      	beq.n	800c924 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d101      	bne.n	800c924 <osSemaphoreWait+0x40>
      ticks = 1;
 800c920:	2301      	movs	r3, #1
 800c922:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c924:	f7ff fe9b 	bl	800c65e <inHandlerMode>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d017      	beq.n	800c95e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c92e:	f107 0308 	add.w	r3, r7, #8
 800c932:	461a      	mov	r2, r3
 800c934:	2100      	movs	r1, #0
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 ffbe 	bl	800d8b8 <xQueueReceiveFromISR>
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d001      	beq.n	800c946 <osSemaphoreWait+0x62>
      return osErrorOS;
 800c942:	23ff      	movs	r3, #255	; 0xff
 800c944:	e015      	b.n	800c972 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d011      	beq.n	800c970 <osSemaphoreWait+0x8c>
 800c94c:	4b0b      	ldr	r3, [pc, #44]	; (800c97c <osSemaphoreWait+0x98>)
 800c94e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c952:	601a      	str	r2, [r3, #0]
 800c954:	f3bf 8f4f 	dsb	sy
 800c958:	f3bf 8f6f 	isb	sy
 800c95c:	e008      	b.n	800c970 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c95e:	68f9      	ldr	r1, [r7, #12]
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 fe9d 	bl	800d6a0 <xQueueSemaphoreTake>
 800c966:	4603      	mov	r3, r0
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d001      	beq.n	800c970 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c96c:	23ff      	movs	r3, #255	; 0xff
 800c96e:	e000      	b.n	800c972 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c970:	2300      	movs	r3, #0
}
 800c972:	4618      	mov	r0, r3
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	e000ed04 	.word	0xe000ed04

0800c980 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c988:	2300      	movs	r3, #0
 800c98a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c98c:	2300      	movs	r3, #0
 800c98e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c990:	f7ff fe65 	bl	800c65e <inHandlerMode>
 800c994:	4603      	mov	r3, r0
 800c996:	2b00      	cmp	r3, #0
 800c998:	d016      	beq.n	800c9c8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c99a:	f107 0308 	add.w	r3, r7, #8
 800c99e:	4619      	mov	r1, r3
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f000 fd10 	bl	800d3c6 <xQueueGiveFromISR>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d001      	beq.n	800c9b0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c9ac:	23ff      	movs	r3, #255	; 0xff
 800c9ae:	e017      	b.n	800c9e0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d013      	beq.n	800c9de <osSemaphoreRelease+0x5e>
 800c9b6:	4b0c      	ldr	r3, [pc, #48]	; (800c9e8 <osSemaphoreRelease+0x68>)
 800c9b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9bc:	601a      	str	r2, [r3, #0]
 800c9be:	f3bf 8f4f 	dsb	sy
 800c9c2:	f3bf 8f6f 	isb	sy
 800c9c6:	e00a      	b.n	800c9de <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	2100      	movs	r1, #0
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 fb60 	bl	800d094 <xQueueGenericSend>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	d001      	beq.n	800c9de <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c9da:	23ff      	movs	r3, #255	; 0xff
 800c9dc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c9de:	68fb      	ldr	r3, [r7, #12]
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3710      	adds	r7, #16
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	e000ed04 	.word	0xe000ed04

0800c9ec <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c9f4:	f7ff fe33 	bl	800c65e <inHandlerMode>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d001      	beq.n	800ca02 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800c9fe:	2382      	movs	r3, #130	; 0x82
 800ca00:	e003      	b.n	800ca0a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f001 f814 	bl	800da30 <vQueueDelete>

  return osOK; 
 800ca08:	2300      	movs	r3, #0
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3708      	adds	r7, #8
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}

0800ca12 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ca12:	b590      	push	{r4, r7, lr}
 800ca14:	b085      	sub	sp, #20
 800ca16:	af02      	add	r7, sp, #8
 800ca18:	6078      	str	r0, [r7, #4]
 800ca1a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	689b      	ldr	r3, [r3, #8]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d011      	beq.n	800ca48 <osMessageCreate+0x36>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d00d      	beq.n	800ca48 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6818      	ldr	r0, [r3, #0]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6859      	ldr	r1, [r3, #4]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	689a      	ldr	r2, [r3, #8]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	2400      	movs	r4, #0
 800ca3e:	9400      	str	r4, [sp, #0]
 800ca40:	f000 fa0a 	bl	800ce58 <xQueueGenericCreateStatic>
 800ca44:	4603      	mov	r3, r0
 800ca46:	e008      	b.n	800ca5a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6818      	ldr	r0, [r3, #0]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	2200      	movs	r2, #0
 800ca52:	4619      	mov	r1, r3
 800ca54:	f000 fa78 	bl	800cf48 <xQueueGenericCreate>
 800ca58:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	370c      	adds	r7, #12
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd90      	pop	{r4, r7, pc}
	...

0800ca64 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b086      	sub	sp, #24
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ca70:	2300      	movs	r3, #0
 800ca72:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d101      	bne.n	800ca82 <osMessagePut+0x1e>
    ticks = 1;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ca82:	f7ff fdec 	bl	800c65e <inHandlerMode>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d018      	beq.n	800cabe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ca8c:	f107 0210 	add.w	r2, r7, #16
 800ca90:	f107 0108 	add.w	r1, r7, #8
 800ca94:	2300      	movs	r3, #0
 800ca96:	68f8      	ldr	r0, [r7, #12]
 800ca98:	f000 fbfa 	bl	800d290 <xQueueGenericSendFromISR>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d001      	beq.n	800caa6 <osMessagePut+0x42>
      return osErrorOS;
 800caa2:	23ff      	movs	r3, #255	; 0xff
 800caa4:	e018      	b.n	800cad8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d014      	beq.n	800cad6 <osMessagePut+0x72>
 800caac:	4b0c      	ldr	r3, [pc, #48]	; (800cae0 <osMessagePut+0x7c>)
 800caae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cab2:	601a      	str	r2, [r3, #0]
 800cab4:	f3bf 8f4f 	dsb	sy
 800cab8:	f3bf 8f6f 	isb	sy
 800cabc:	e00b      	b.n	800cad6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800cabe:	f107 0108 	add.w	r1, r7, #8
 800cac2:	2300      	movs	r3, #0
 800cac4:	697a      	ldr	r2, [r7, #20]
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f000 fae4 	bl	800d094 <xQueueGenericSend>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b01      	cmp	r3, #1
 800cad0:	d001      	beq.n	800cad6 <osMessagePut+0x72>
      return osErrorOS;
 800cad2:	23ff      	movs	r3, #255	; 0xff
 800cad4:	e000      	b.n	800cad8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800cad6:	2300      	movs	r3, #0
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3718      	adds	r7, #24
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	e000ed04 	.word	0xe000ed04

0800cae4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800cae4:	b590      	push	{r4, r7, lr}
 800cae6:	b08b      	sub	sp, #44	; 0x2c
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800caf4:	2300      	movs	r3, #0
 800caf6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d10a      	bne.n	800cb14 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800cafe:	2380      	movs	r3, #128	; 0x80
 800cb00:	617b      	str	r3, [r7, #20]
    return event;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	461c      	mov	r4, r3
 800cb06:	f107 0314 	add.w	r3, r7, #20
 800cb0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cb0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cb12:	e054      	b.n	800cbbe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800cb14:	2300      	movs	r3, #0
 800cb16:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb22:	d103      	bne.n	800cb2c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800cb24:	f04f 33ff 	mov.w	r3, #4294967295
 800cb28:	627b      	str	r3, [r7, #36]	; 0x24
 800cb2a:	e009      	b.n	800cb40 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d006      	beq.n	800cb40 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800cb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d101      	bne.n	800cb40 <osMessageGet+0x5c>
      ticks = 1;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800cb40:	f7ff fd8d 	bl	800c65e <inHandlerMode>
 800cb44:	4603      	mov	r3, r0
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d01c      	beq.n	800cb84 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800cb4a:	f107 0220 	add.w	r2, r7, #32
 800cb4e:	f107 0314 	add.w	r3, r7, #20
 800cb52:	3304      	adds	r3, #4
 800cb54:	4619      	mov	r1, r3
 800cb56:	68b8      	ldr	r0, [r7, #8]
 800cb58:	f000 feae 	bl	800d8b8 <xQueueReceiveFromISR>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d102      	bne.n	800cb68 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800cb62:	2310      	movs	r3, #16
 800cb64:	617b      	str	r3, [r7, #20]
 800cb66:	e001      	b.n	800cb6c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cb6c:	6a3b      	ldr	r3, [r7, #32]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d01d      	beq.n	800cbae <osMessageGet+0xca>
 800cb72:	4b15      	ldr	r3, [pc, #84]	; (800cbc8 <osMessageGet+0xe4>)
 800cb74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb78:	601a      	str	r2, [r3, #0]
 800cb7a:	f3bf 8f4f 	dsb	sy
 800cb7e:	f3bf 8f6f 	isb	sy
 800cb82:	e014      	b.n	800cbae <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800cb84:	f107 0314 	add.w	r3, r7, #20
 800cb88:	3304      	adds	r3, #4
 800cb8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	68b8      	ldr	r0, [r7, #8]
 800cb90:	f000 fca6 	bl	800d4e0 <xQueueReceive>
 800cb94:	4603      	mov	r3, r0
 800cb96:	2b01      	cmp	r3, #1
 800cb98:	d102      	bne.n	800cba0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800cb9a:	2310      	movs	r3, #16
 800cb9c:	617b      	str	r3, [r7, #20]
 800cb9e:	e006      	b.n	800cbae <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800cba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d101      	bne.n	800cbaa <osMessageGet+0xc6>
 800cba6:	2300      	movs	r3, #0
 800cba8:	e000      	b.n	800cbac <osMessageGet+0xc8>
 800cbaa:	2340      	movs	r3, #64	; 0x40
 800cbac:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	461c      	mov	r4, r3
 800cbb2:	f107 0314 	add.w	r3, r7, #20
 800cbb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cbba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800cbbe:	68f8      	ldr	r0, [r7, #12]
 800cbc0:	372c      	adds	r7, #44	; 0x2c
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd90      	pop	{r4, r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	e000ed04 	.word	0xe000ed04

0800cbcc <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800cbd4:	f7ff fd43 	bl	800c65e <inHandlerMode>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d004      	beq.n	800cbe8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f000 ff08 	bl	800d9f4 <uxQueueMessagesWaitingFromISR>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	e003      	b.n	800cbf0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f000 fee5 	bl	800d9b8 <uxQueueMessagesWaiting>
 800cbee:	4603      	mov	r3, r0
  }
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3708      	adds	r7, #8
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800cc00:	f7ff fd2d 	bl	800c65e <inHandlerMode>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d001      	beq.n	800cc0e <osMessageDelete+0x16>
    return osErrorISR;
 800cc0a:	2382      	movs	r3, #130	; 0x82
 800cc0c:	e003      	b.n	800cc16 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 ff0e 	bl	800da30 <vQueueDelete>

  return osOK; 
 800cc14:	2300      	movs	r3, #0
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3708      	adds	r7, #8
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cc1e:	b480      	push	{r7}
 800cc20:	b083      	sub	sp, #12
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f103 0208 	add.w	r2, r3, #8
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f04f 32ff 	mov.w	r2, #4294967295
 800cc36:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f103 0208 	add.w	r2, r3, #8
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f103 0208 	add.w	r2, r3, #8
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cc52:	bf00      	nop
 800cc54:	370c      	adds	r7, #12
 800cc56:	46bd      	mov	sp, r7
 800cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5c:	4770      	bx	lr

0800cc5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cc5e:	b480      	push	{r7}
 800cc60:	b083      	sub	sp, #12
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cc6c:	bf00      	nop
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr

0800cc78 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b085      	sub	sp, #20
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	689a      	ldr	r2, [r3, #8]
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	683a      	ldr	r2, [r7, #0]
 800cc9c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	683a      	ldr	r2, [r7, #0]
 800cca2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	1c5a      	adds	r2, r3, #1
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	601a      	str	r2, [r3, #0]
}
 800ccb4:	bf00      	nop
 800ccb6:	3714      	adds	r7, #20
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr

0800ccc0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b085      	sub	sp, #20
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccd6:	d103      	bne.n	800cce0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	691b      	ldr	r3, [r3, #16]
 800ccdc:	60fb      	str	r3, [r7, #12]
 800ccde:	e00c      	b.n	800ccfa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	3308      	adds	r3, #8
 800cce4:	60fb      	str	r3, [r7, #12]
 800cce6:	e002      	b.n	800ccee <vListInsert+0x2e>
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	60fb      	str	r3, [r7, #12]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	68ba      	ldr	r2, [r7, #8]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d2f6      	bcs.n	800cce8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	685a      	ldr	r2, [r3, #4]
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	683a      	ldr	r2, [r7, #0]
 800cd08:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	68fa      	ldr	r2, [r7, #12]
 800cd0e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	683a      	ldr	r2, [r7, #0]
 800cd14:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	1c5a      	adds	r2, r3, #1
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	601a      	str	r2, [r3, #0]
}
 800cd26:	bf00      	nop
 800cd28:	3714      	adds	r7, #20
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr

0800cd32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cd32:	b480      	push	{r7}
 800cd34:	b085      	sub	sp, #20
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	691b      	ldr	r3, [r3, #16]
 800cd3e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	6892      	ldr	r2, [r2, #8]
 800cd48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	6852      	ldr	r2, [r2, #4]
 800cd52:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d103      	bne.n	800cd66 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	689a      	ldr	r2, [r3, #8]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	1e5a      	subs	r2, r3, #1
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3714      	adds	r7, #20
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd84:	4770      	bx	lr
	...

0800cd88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b084      	sub	sp, #16
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d10a      	bne.n	800cdb2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda0:	f383 8811 	msr	BASEPRI, r3
 800cda4:	f3bf 8f6f 	isb	sy
 800cda8:	f3bf 8f4f 	dsb	sy
 800cdac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cdae:	bf00      	nop
 800cdb0:	e7fe      	b.n	800cdb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cdb2:	f002 f8b7 	bl	800ef24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdbe:	68f9      	ldr	r1, [r7, #12]
 800cdc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cdc2:	fb01 f303 	mul.w	r3, r1, r3
 800cdc6:	441a      	add	r2, r3
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cde2:	3b01      	subs	r3, #1
 800cde4:	68f9      	ldr	r1, [r7, #12]
 800cde6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cde8:	fb01 f303 	mul.w	r3, r1, r3
 800cdec:	441a      	add	r2, r3
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	22ff      	movs	r2, #255	; 0xff
 800cdf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	22ff      	movs	r2, #255	; 0xff
 800cdfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d114      	bne.n	800ce32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	691b      	ldr	r3, [r3, #16]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d01a      	beq.n	800ce46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	3310      	adds	r3, #16
 800ce14:	4618      	mov	r0, r3
 800ce16:	f001 fb79 	bl	800e50c <xTaskRemoveFromEventList>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d012      	beq.n	800ce46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ce20:	4b0c      	ldr	r3, [pc, #48]	; (800ce54 <xQueueGenericReset+0xcc>)
 800ce22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce26:	601a      	str	r2, [r3, #0]
 800ce28:	f3bf 8f4f 	dsb	sy
 800ce2c:	f3bf 8f6f 	isb	sy
 800ce30:	e009      	b.n	800ce46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	3310      	adds	r3, #16
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7ff fef1 	bl	800cc1e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	3324      	adds	r3, #36	; 0x24
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7ff feec 	bl	800cc1e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ce46:	f002 f89d 	bl	800ef84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ce4a:	2301      	movs	r3, #1
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3710      	adds	r7, #16
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	e000ed04 	.word	0xe000ed04

0800ce58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b08e      	sub	sp, #56	; 0x38
 800ce5c:	af02      	add	r7, sp, #8
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]
 800ce64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d10a      	bne.n	800ce82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ce6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce70:	f383 8811 	msr	BASEPRI, r3
 800ce74:	f3bf 8f6f 	isb	sy
 800ce78:	f3bf 8f4f 	dsb	sy
 800ce7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ce7e:	bf00      	nop
 800ce80:	e7fe      	b.n	800ce80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d10a      	bne.n	800ce9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ce88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce8c:	f383 8811 	msr	BASEPRI, r3
 800ce90:	f3bf 8f6f 	isb	sy
 800ce94:	f3bf 8f4f 	dsb	sy
 800ce98:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ce9a:	bf00      	nop
 800ce9c:	e7fe      	b.n	800ce9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d002      	beq.n	800ceaa <xQueueGenericCreateStatic+0x52>
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d001      	beq.n	800ceae <xQueueGenericCreateStatic+0x56>
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e000      	b.n	800ceb0 <xQueueGenericCreateStatic+0x58>
 800ceae:	2300      	movs	r3, #0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d10a      	bne.n	800ceca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ceb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb8:	f383 8811 	msr	BASEPRI, r3
 800cebc:	f3bf 8f6f 	isb	sy
 800cec0:	f3bf 8f4f 	dsb	sy
 800cec4:	623b      	str	r3, [r7, #32]
}
 800cec6:	bf00      	nop
 800cec8:	e7fe      	b.n	800cec8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d102      	bne.n	800ced6 <xQueueGenericCreateStatic+0x7e>
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d101      	bne.n	800ceda <xQueueGenericCreateStatic+0x82>
 800ced6:	2301      	movs	r3, #1
 800ced8:	e000      	b.n	800cedc <xQueueGenericCreateStatic+0x84>
 800ceda:	2300      	movs	r3, #0
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d10a      	bne.n	800cef6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee4:	f383 8811 	msr	BASEPRI, r3
 800cee8:	f3bf 8f6f 	isb	sy
 800ceec:	f3bf 8f4f 	dsb	sy
 800cef0:	61fb      	str	r3, [r7, #28]
}
 800cef2:	bf00      	nop
 800cef4:	e7fe      	b.n	800cef4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cef6:	2348      	movs	r3, #72	; 0x48
 800cef8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	2b48      	cmp	r3, #72	; 0x48
 800cefe:	d00a      	beq.n	800cf16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cf00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf04:	f383 8811 	msr	BASEPRI, r3
 800cf08:	f3bf 8f6f 	isb	sy
 800cf0c:	f3bf 8f4f 	dsb	sy
 800cf10:	61bb      	str	r3, [r7, #24]
}
 800cf12:	bf00      	nop
 800cf14:	e7fe      	b.n	800cf14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cf16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cf1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00d      	beq.n	800cf3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cf22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf24:	2201      	movs	r2, #1
 800cf26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cf2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cf2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf30:	9300      	str	r3, [sp, #0]
 800cf32:	4613      	mov	r3, r2
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	68b9      	ldr	r1, [r7, #8]
 800cf38:	68f8      	ldr	r0, [r7, #12]
 800cf3a:	f000 f83f 	bl	800cfbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3730      	adds	r7, #48	; 0x30
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b08a      	sub	sp, #40	; 0x28
 800cf4c:	af02      	add	r7, sp, #8
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	4613      	mov	r3, r2
 800cf54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d10a      	bne.n	800cf72 <xQueueGenericCreate+0x2a>
	__asm volatile
 800cf5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf60:	f383 8811 	msr	BASEPRI, r3
 800cf64:	f3bf 8f6f 	isb	sy
 800cf68:	f3bf 8f4f 	dsb	sy
 800cf6c:	613b      	str	r3, [r7, #16]
}
 800cf6e:	bf00      	nop
 800cf70:	e7fe      	b.n	800cf70 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	68ba      	ldr	r2, [r7, #8]
 800cf76:	fb02 f303 	mul.w	r3, r2, r3
 800cf7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	3348      	adds	r3, #72	; 0x48
 800cf80:	4618      	mov	r0, r3
 800cf82:	f002 f8f1 	bl	800f168 <pvPortMalloc>
 800cf86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d011      	beq.n	800cfb2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cf8e:	69bb      	ldr	r3, [r7, #24]
 800cf90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	3348      	adds	r3, #72	; 0x48
 800cf96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cf98:	69bb      	ldr	r3, [r7, #24]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cfa0:	79fa      	ldrb	r2, [r7, #7]
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	9300      	str	r3, [sp, #0]
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	697a      	ldr	r2, [r7, #20]
 800cfaa:	68b9      	ldr	r1, [r7, #8]
 800cfac:	68f8      	ldr	r0, [r7, #12]
 800cfae:	f000 f805 	bl	800cfbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cfb2:	69bb      	ldr	r3, [r7, #24]
	}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3720      	adds	r7, #32
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	607a      	str	r2, [r7, #4]
 800cfc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d103      	bne.n	800cfd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cfd0:	69bb      	ldr	r3, [r7, #24]
 800cfd2:	69ba      	ldr	r2, [r7, #24]
 800cfd4:	601a      	str	r2, [r3, #0]
 800cfd6:	e002      	b.n	800cfde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cfde:	69bb      	ldr	r3, [r7, #24]
 800cfe0:	68fa      	ldr	r2, [r7, #12]
 800cfe2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cfe4:	69bb      	ldr	r3, [r7, #24]
 800cfe6:	68ba      	ldr	r2, [r7, #8]
 800cfe8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cfea:	2101      	movs	r1, #1
 800cfec:	69b8      	ldr	r0, [r7, #24]
 800cfee:	f7ff fecb 	bl	800cd88 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cff2:	bf00      	nop
 800cff4:	3710      	adds	r7, #16
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cffa:	b580      	push	{r7, lr}
 800cffc:	b082      	sub	sp, #8
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d00e      	beq.n	800d026 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2200      	movs	r2, #0
 800d00c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2200      	movs	r2, #0
 800d012:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d01a:	2300      	movs	r3, #0
 800d01c:	2200      	movs	r2, #0
 800d01e:	2100      	movs	r1, #0
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 f837 	bl	800d094 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d026:	bf00      	nop
 800d028:	3708      	adds	r7, #8
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d02e:	b580      	push	{r7, lr}
 800d030:	b086      	sub	sp, #24
 800d032:	af00      	add	r7, sp, #0
 800d034:	4603      	mov	r3, r0
 800d036:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d038:	2301      	movs	r3, #1
 800d03a:	617b      	str	r3, [r7, #20]
 800d03c:	2300      	movs	r3, #0
 800d03e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d040:	79fb      	ldrb	r3, [r7, #7]
 800d042:	461a      	mov	r2, r3
 800d044:	6939      	ldr	r1, [r7, #16]
 800d046:	6978      	ldr	r0, [r7, #20]
 800d048:	f7ff ff7e 	bl	800cf48 <xQueueGenericCreate>
 800d04c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d04e:	68f8      	ldr	r0, [r7, #12]
 800d050:	f7ff ffd3 	bl	800cffa <prvInitialiseMutex>

		return xNewQueue;
 800d054:	68fb      	ldr	r3, [r7, #12]
	}
 800d056:	4618      	mov	r0, r3
 800d058:	3718      	adds	r7, #24
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d05e:	b580      	push	{r7, lr}
 800d060:	b088      	sub	sp, #32
 800d062:	af02      	add	r7, sp, #8
 800d064:	4603      	mov	r3, r0
 800d066:	6039      	str	r1, [r7, #0]
 800d068:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d06a:	2301      	movs	r3, #1
 800d06c:	617b      	str	r3, [r7, #20]
 800d06e:	2300      	movs	r3, #0
 800d070:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d072:	79fb      	ldrb	r3, [r7, #7]
 800d074:	9300      	str	r3, [sp, #0]
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	2200      	movs	r2, #0
 800d07a:	6939      	ldr	r1, [r7, #16]
 800d07c:	6978      	ldr	r0, [r7, #20]
 800d07e:	f7ff feeb 	bl	800ce58 <xQueueGenericCreateStatic>
 800d082:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d084:	68f8      	ldr	r0, [r7, #12]
 800d086:	f7ff ffb8 	bl	800cffa <prvInitialiseMutex>

		return xNewQueue;
 800d08a:	68fb      	ldr	r3, [r7, #12]
	}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3718      	adds	r7, #24
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b08e      	sub	sp, #56	; 0x38
 800d098:	af00      	add	r7, sp, #0
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	607a      	str	r2, [r7, #4]
 800d0a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d10a      	bne.n	800d0c6 <xQueueGenericSend+0x32>
	__asm volatile
 800d0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b4:	f383 8811 	msr	BASEPRI, r3
 800d0b8:	f3bf 8f6f 	isb	sy
 800d0bc:	f3bf 8f4f 	dsb	sy
 800d0c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d0c2:	bf00      	nop
 800d0c4:	e7fe      	b.n	800d0c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d103      	bne.n	800d0d4 <xQueueGenericSend+0x40>
 800d0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d101      	bne.n	800d0d8 <xQueueGenericSend+0x44>
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	e000      	b.n	800d0da <xQueueGenericSend+0x46>
 800d0d8:	2300      	movs	r3, #0
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d10a      	bne.n	800d0f4 <xQueueGenericSend+0x60>
	__asm volatile
 800d0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e2:	f383 8811 	msr	BASEPRI, r3
 800d0e6:	f3bf 8f6f 	isb	sy
 800d0ea:	f3bf 8f4f 	dsb	sy
 800d0ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d0f0:	bf00      	nop
 800d0f2:	e7fe      	b.n	800d0f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	2b02      	cmp	r3, #2
 800d0f8:	d103      	bne.n	800d102 <xQueueGenericSend+0x6e>
 800d0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0fe:	2b01      	cmp	r3, #1
 800d100:	d101      	bne.n	800d106 <xQueueGenericSend+0x72>
 800d102:	2301      	movs	r3, #1
 800d104:	e000      	b.n	800d108 <xQueueGenericSend+0x74>
 800d106:	2300      	movs	r3, #0
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d10a      	bne.n	800d122 <xQueueGenericSend+0x8e>
	__asm volatile
 800d10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d110:	f383 8811 	msr	BASEPRI, r3
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	f3bf 8f4f 	dsb	sy
 800d11c:	623b      	str	r3, [r7, #32]
}
 800d11e:	bf00      	nop
 800d120:	e7fe      	b.n	800d120 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d122:	f001 fbaf 	bl	800e884 <xTaskGetSchedulerState>
 800d126:	4603      	mov	r3, r0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d102      	bne.n	800d132 <xQueueGenericSend+0x9e>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d101      	bne.n	800d136 <xQueueGenericSend+0xa2>
 800d132:	2301      	movs	r3, #1
 800d134:	e000      	b.n	800d138 <xQueueGenericSend+0xa4>
 800d136:	2300      	movs	r3, #0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d10a      	bne.n	800d152 <xQueueGenericSend+0xbe>
	__asm volatile
 800d13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d140:	f383 8811 	msr	BASEPRI, r3
 800d144:	f3bf 8f6f 	isb	sy
 800d148:	f3bf 8f4f 	dsb	sy
 800d14c:	61fb      	str	r3, [r7, #28]
}
 800d14e:	bf00      	nop
 800d150:	e7fe      	b.n	800d150 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d152:	f001 fee7 	bl	800ef24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d15e:	429a      	cmp	r2, r3
 800d160:	d302      	bcc.n	800d168 <xQueueGenericSend+0xd4>
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	2b02      	cmp	r3, #2
 800d166:	d129      	bne.n	800d1bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d168:	683a      	ldr	r2, [r7, #0]
 800d16a:	68b9      	ldr	r1, [r7, #8]
 800d16c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d16e:	f000 fc9a 	bl	800daa6 <prvCopyDataToQueue>
 800d172:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d010      	beq.n	800d19e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17e:	3324      	adds	r3, #36	; 0x24
 800d180:	4618      	mov	r0, r3
 800d182:	f001 f9c3 	bl	800e50c <xTaskRemoveFromEventList>
 800d186:	4603      	mov	r3, r0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d013      	beq.n	800d1b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d18c:	4b3f      	ldr	r3, [pc, #252]	; (800d28c <xQueueGenericSend+0x1f8>)
 800d18e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d192:	601a      	str	r2, [r3, #0]
 800d194:	f3bf 8f4f 	dsb	sy
 800d198:	f3bf 8f6f 	isb	sy
 800d19c:	e00a      	b.n	800d1b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d007      	beq.n	800d1b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d1a4:	4b39      	ldr	r3, [pc, #228]	; (800d28c <xQueueGenericSend+0x1f8>)
 800d1a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1aa:	601a      	str	r2, [r3, #0]
 800d1ac:	f3bf 8f4f 	dsb	sy
 800d1b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d1b4:	f001 fee6 	bl	800ef84 <vPortExitCritical>
				return pdPASS;
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	e063      	b.n	800d284 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d103      	bne.n	800d1ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d1c2:	f001 fedf 	bl	800ef84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	e05c      	b.n	800d284 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d106      	bne.n	800d1de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1d0:	f107 0314 	add.w	r3, r7, #20
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f001 f9fb 	bl	800e5d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1da:	2301      	movs	r3, #1
 800d1dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1de:	f001 fed1 	bl	800ef84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1e2:	f000 ff8f 	bl	800e104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1e6:	f001 fe9d 	bl	800ef24 <vPortEnterCritical>
 800d1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1f0:	b25b      	sxtb	r3, r3
 800d1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1f6:	d103      	bne.n	800d200 <xQueueGenericSend+0x16c>
 800d1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d202:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d206:	b25b      	sxtb	r3, r3
 800d208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d20c:	d103      	bne.n	800d216 <xQueueGenericSend+0x182>
 800d20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d210:	2200      	movs	r2, #0
 800d212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d216:	f001 feb5 	bl	800ef84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d21a:	1d3a      	adds	r2, r7, #4
 800d21c:	f107 0314 	add.w	r3, r7, #20
 800d220:	4611      	mov	r1, r2
 800d222:	4618      	mov	r0, r3
 800d224:	f001 f9ea 	bl	800e5fc <xTaskCheckForTimeOut>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d124      	bne.n	800d278 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d22e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d230:	f000 fd31 	bl	800dc96 <prvIsQueueFull>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d018      	beq.n	800d26c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23c:	3310      	adds	r3, #16
 800d23e:	687a      	ldr	r2, [r7, #4]
 800d240:	4611      	mov	r1, r2
 800d242:	4618      	mov	r0, r3
 800d244:	f001 f93e 	bl	800e4c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d24a:	f000 fcbc 	bl	800dbc6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d24e:	f000 ff67 	bl	800e120 <xTaskResumeAll>
 800d252:	4603      	mov	r3, r0
 800d254:	2b00      	cmp	r3, #0
 800d256:	f47f af7c 	bne.w	800d152 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d25a:	4b0c      	ldr	r3, [pc, #48]	; (800d28c <xQueueGenericSend+0x1f8>)
 800d25c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d260:	601a      	str	r2, [r3, #0]
 800d262:	f3bf 8f4f 	dsb	sy
 800d266:	f3bf 8f6f 	isb	sy
 800d26a:	e772      	b.n	800d152 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d26c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d26e:	f000 fcaa 	bl	800dbc6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d272:	f000 ff55 	bl	800e120 <xTaskResumeAll>
 800d276:	e76c      	b.n	800d152 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d27a:	f000 fca4 	bl	800dbc6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d27e:	f000 ff4f 	bl	800e120 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d282:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d284:	4618      	mov	r0, r3
 800d286:	3738      	adds	r7, #56	; 0x38
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	e000ed04 	.word	0xe000ed04

0800d290 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b090      	sub	sp, #64	; 0x40
 800d294:	af00      	add	r7, sp, #0
 800d296:	60f8      	str	r0, [r7, #12]
 800d298:	60b9      	str	r1, [r7, #8]
 800d29a:	607a      	str	r2, [r7, #4]
 800d29c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d10a      	bne.n	800d2be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ac:	f383 8811 	msr	BASEPRI, r3
 800d2b0:	f3bf 8f6f 	isb	sy
 800d2b4:	f3bf 8f4f 	dsb	sy
 800d2b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d2ba:	bf00      	nop
 800d2bc:	e7fe      	b.n	800d2bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d103      	bne.n	800d2cc <xQueueGenericSendFromISR+0x3c>
 800d2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d101      	bne.n	800d2d0 <xQueueGenericSendFromISR+0x40>
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	e000      	b.n	800d2d2 <xQueueGenericSendFromISR+0x42>
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d10a      	bne.n	800d2ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2da:	f383 8811 	msr	BASEPRI, r3
 800d2de:	f3bf 8f6f 	isb	sy
 800d2e2:	f3bf 8f4f 	dsb	sy
 800d2e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d2e8:	bf00      	nop
 800d2ea:	e7fe      	b.n	800d2ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	2b02      	cmp	r3, #2
 800d2f0:	d103      	bne.n	800d2fa <xQueueGenericSendFromISR+0x6a>
 800d2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d101      	bne.n	800d2fe <xQueueGenericSendFromISR+0x6e>
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	e000      	b.n	800d300 <xQueueGenericSendFromISR+0x70>
 800d2fe:	2300      	movs	r3, #0
 800d300:	2b00      	cmp	r3, #0
 800d302:	d10a      	bne.n	800d31a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d308:	f383 8811 	msr	BASEPRI, r3
 800d30c:	f3bf 8f6f 	isb	sy
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	623b      	str	r3, [r7, #32]
}
 800d316:	bf00      	nop
 800d318:	e7fe      	b.n	800d318 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d31a:	f001 fee5 	bl	800f0e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d31e:	f3ef 8211 	mrs	r2, BASEPRI
 800d322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d326:	f383 8811 	msr	BASEPRI, r3
 800d32a:	f3bf 8f6f 	isb	sy
 800d32e:	f3bf 8f4f 	dsb	sy
 800d332:	61fa      	str	r2, [r7, #28]
 800d334:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d336:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d338:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d342:	429a      	cmp	r2, r3
 800d344:	d302      	bcc.n	800d34c <xQueueGenericSendFromISR+0xbc>
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	2b02      	cmp	r3, #2
 800d34a:	d12f      	bne.n	800d3ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d34e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d35a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d35c:	683a      	ldr	r2, [r7, #0]
 800d35e:	68b9      	ldr	r1, [r7, #8]
 800d360:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d362:	f000 fba0 	bl	800daa6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d366:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d36a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d36e:	d112      	bne.n	800d396 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d374:	2b00      	cmp	r3, #0
 800d376:	d016      	beq.n	800d3a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d37a:	3324      	adds	r3, #36	; 0x24
 800d37c:	4618      	mov	r0, r3
 800d37e:	f001 f8c5 	bl	800e50c <xTaskRemoveFromEventList>
 800d382:	4603      	mov	r3, r0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d00e      	beq.n	800d3a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d00b      	beq.n	800d3a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2201      	movs	r2, #1
 800d392:	601a      	str	r2, [r3, #0]
 800d394:	e007      	b.n	800d3a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d396:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d39a:	3301      	adds	r3, #1
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	b25a      	sxtb	r2, r3
 800d3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d3aa:	e001      	b.n	800d3b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d3ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d3bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3740      	adds	r7, #64	; 0x40
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}

0800d3c6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d3c6:	b580      	push	{r7, lr}
 800d3c8:	b08e      	sub	sp, #56	; 0x38
 800d3ca:	af00      	add	r7, sp, #0
 800d3cc:	6078      	str	r0, [r7, #4]
 800d3ce:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d10a      	bne.n	800d3f0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3de:	f383 8811 	msr	BASEPRI, r3
 800d3e2:	f3bf 8f6f 	isb	sy
 800d3e6:	f3bf 8f4f 	dsb	sy
 800d3ea:	623b      	str	r3, [r7, #32]
}
 800d3ec:	bf00      	nop
 800d3ee:	e7fe      	b.n	800d3ee <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d00a      	beq.n	800d40e <xQueueGiveFromISR+0x48>
	__asm volatile
 800d3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fc:	f383 8811 	msr	BASEPRI, r3
 800d400:	f3bf 8f6f 	isb	sy
 800d404:	f3bf 8f4f 	dsb	sy
 800d408:	61fb      	str	r3, [r7, #28]
}
 800d40a:	bf00      	nop
 800d40c:	e7fe      	b.n	800d40c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d103      	bne.n	800d41e <xQueueGiveFromISR+0x58>
 800d416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d418:	689b      	ldr	r3, [r3, #8]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d101      	bne.n	800d422 <xQueueGiveFromISR+0x5c>
 800d41e:	2301      	movs	r3, #1
 800d420:	e000      	b.n	800d424 <xQueueGiveFromISR+0x5e>
 800d422:	2300      	movs	r3, #0
 800d424:	2b00      	cmp	r3, #0
 800d426:	d10a      	bne.n	800d43e <xQueueGiveFromISR+0x78>
	__asm volatile
 800d428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d42c:	f383 8811 	msr	BASEPRI, r3
 800d430:	f3bf 8f6f 	isb	sy
 800d434:	f3bf 8f4f 	dsb	sy
 800d438:	61bb      	str	r3, [r7, #24]
}
 800d43a:	bf00      	nop
 800d43c:	e7fe      	b.n	800d43c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d43e:	f001 fe53 	bl	800f0e8 <vPortValidateInterruptPriority>
	__asm volatile
 800d442:	f3ef 8211 	mrs	r2, BASEPRI
 800d446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44a:	f383 8811 	msr	BASEPRI, r3
 800d44e:	f3bf 8f6f 	isb	sy
 800d452:	f3bf 8f4f 	dsb	sy
 800d456:	617a      	str	r2, [r7, #20]
 800d458:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d45a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d45c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d462:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d22b      	bcs.n	800d4c6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d47a:	1c5a      	adds	r2, r3, #1
 800d47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d480:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d488:	d112      	bne.n	800d4b0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d016      	beq.n	800d4c0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d494:	3324      	adds	r3, #36	; 0x24
 800d496:	4618      	mov	r0, r3
 800d498:	f001 f838 	bl	800e50c <xTaskRemoveFromEventList>
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d00e      	beq.n	800d4c0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d00b      	beq.n	800d4c0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	601a      	str	r2, [r3, #0]
 800d4ae:	e007      	b.n	800d4c0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	b25a      	sxtb	r2, r3
 800d4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	637b      	str	r3, [r7, #52]	; 0x34
 800d4c4:	e001      	b.n	800d4ca <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	637b      	str	r3, [r7, #52]	; 0x34
 800d4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4cc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f383 8811 	msr	BASEPRI, r3
}
 800d4d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3738      	adds	r7, #56	; 0x38
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b08c      	sub	sp, #48	; 0x30
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	60f8      	str	r0, [r7, #12]
 800d4e8:	60b9      	str	r1, [r7, #8]
 800d4ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d10a      	bne.n	800d510 <xQueueReceive+0x30>
	__asm volatile
 800d4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fe:	f383 8811 	msr	BASEPRI, r3
 800d502:	f3bf 8f6f 	isb	sy
 800d506:	f3bf 8f4f 	dsb	sy
 800d50a:	623b      	str	r3, [r7, #32]
}
 800d50c:	bf00      	nop
 800d50e:	e7fe      	b.n	800d50e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d103      	bne.n	800d51e <xQueueReceive+0x3e>
 800d516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d101      	bne.n	800d522 <xQueueReceive+0x42>
 800d51e:	2301      	movs	r3, #1
 800d520:	e000      	b.n	800d524 <xQueueReceive+0x44>
 800d522:	2300      	movs	r3, #0
 800d524:	2b00      	cmp	r3, #0
 800d526:	d10a      	bne.n	800d53e <xQueueReceive+0x5e>
	__asm volatile
 800d528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52c:	f383 8811 	msr	BASEPRI, r3
 800d530:	f3bf 8f6f 	isb	sy
 800d534:	f3bf 8f4f 	dsb	sy
 800d538:	61fb      	str	r3, [r7, #28]
}
 800d53a:	bf00      	nop
 800d53c:	e7fe      	b.n	800d53c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d53e:	f001 f9a1 	bl	800e884 <xTaskGetSchedulerState>
 800d542:	4603      	mov	r3, r0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d102      	bne.n	800d54e <xQueueReceive+0x6e>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d101      	bne.n	800d552 <xQueueReceive+0x72>
 800d54e:	2301      	movs	r3, #1
 800d550:	e000      	b.n	800d554 <xQueueReceive+0x74>
 800d552:	2300      	movs	r3, #0
 800d554:	2b00      	cmp	r3, #0
 800d556:	d10a      	bne.n	800d56e <xQueueReceive+0x8e>
	__asm volatile
 800d558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d55c:	f383 8811 	msr	BASEPRI, r3
 800d560:	f3bf 8f6f 	isb	sy
 800d564:	f3bf 8f4f 	dsb	sy
 800d568:	61bb      	str	r3, [r7, #24]
}
 800d56a:	bf00      	nop
 800d56c:	e7fe      	b.n	800d56c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d56e:	f001 fcd9 	bl	800ef24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d576:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d01f      	beq.n	800d5be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d57e:	68b9      	ldr	r1, [r7, #8]
 800d580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d582:	f000 fafa 	bl	800db7a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d588:	1e5a      	subs	r2, r3, #1
 800d58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d590:	691b      	ldr	r3, [r3, #16]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d00f      	beq.n	800d5b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d598:	3310      	adds	r3, #16
 800d59a:	4618      	mov	r0, r3
 800d59c:	f000 ffb6 	bl	800e50c <xTaskRemoveFromEventList>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d007      	beq.n	800d5b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d5a6:	4b3d      	ldr	r3, [pc, #244]	; (800d69c <xQueueReceive+0x1bc>)
 800d5a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5ac:	601a      	str	r2, [r3, #0]
 800d5ae:	f3bf 8f4f 	dsb	sy
 800d5b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d5b6:	f001 fce5 	bl	800ef84 <vPortExitCritical>
				return pdPASS;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	e069      	b.n	800d692 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d103      	bne.n	800d5cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d5c4:	f001 fcde 	bl	800ef84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	e062      	b.n	800d692 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d106      	bne.n	800d5e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d5d2:	f107 0310 	add.w	r3, r7, #16
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f000 fffa 	bl	800e5d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d5e0:	f001 fcd0 	bl	800ef84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d5e4:	f000 fd8e 	bl	800e104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d5e8:	f001 fc9c 	bl	800ef24 <vPortEnterCritical>
 800d5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5f2:	b25b      	sxtb	r3, r3
 800d5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f8:	d103      	bne.n	800d602 <xQueueReceive+0x122>
 800d5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d604:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d608:	b25b      	sxtb	r3, r3
 800d60a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d60e:	d103      	bne.n	800d618 <xQueueReceive+0x138>
 800d610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d612:	2200      	movs	r2, #0
 800d614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d618:	f001 fcb4 	bl	800ef84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d61c:	1d3a      	adds	r2, r7, #4
 800d61e:	f107 0310 	add.w	r3, r7, #16
 800d622:	4611      	mov	r1, r2
 800d624:	4618      	mov	r0, r3
 800d626:	f000 ffe9 	bl	800e5fc <xTaskCheckForTimeOut>
 800d62a:	4603      	mov	r3, r0
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d123      	bne.n	800d678 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d632:	f000 fb1a 	bl	800dc6a <prvIsQueueEmpty>
 800d636:	4603      	mov	r3, r0
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d017      	beq.n	800d66c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63e:	3324      	adds	r3, #36	; 0x24
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	4611      	mov	r1, r2
 800d644:	4618      	mov	r0, r3
 800d646:	f000 ff3d 	bl	800e4c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d64a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d64c:	f000 fabb 	bl	800dbc6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d650:	f000 fd66 	bl	800e120 <xTaskResumeAll>
 800d654:	4603      	mov	r3, r0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d189      	bne.n	800d56e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d65a:	4b10      	ldr	r3, [pc, #64]	; (800d69c <xQueueReceive+0x1bc>)
 800d65c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d660:	601a      	str	r2, [r3, #0]
 800d662:	f3bf 8f4f 	dsb	sy
 800d666:	f3bf 8f6f 	isb	sy
 800d66a:	e780      	b.n	800d56e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d66c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d66e:	f000 faaa 	bl	800dbc6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d672:	f000 fd55 	bl	800e120 <xTaskResumeAll>
 800d676:	e77a      	b.n	800d56e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d67a:	f000 faa4 	bl	800dbc6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d67e:	f000 fd4f 	bl	800e120 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d684:	f000 faf1 	bl	800dc6a <prvIsQueueEmpty>
 800d688:	4603      	mov	r3, r0
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	f43f af6f 	beq.w	800d56e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d690:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d692:	4618      	mov	r0, r3
 800d694:	3730      	adds	r7, #48	; 0x30
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	e000ed04 	.word	0xe000ed04

0800d6a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b08e      	sub	sp, #56	; 0x38
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d10a      	bne.n	800d6d2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c0:	f383 8811 	msr	BASEPRI, r3
 800d6c4:	f3bf 8f6f 	isb	sy
 800d6c8:	f3bf 8f4f 	dsb	sy
 800d6cc:	623b      	str	r3, [r7, #32]
}
 800d6ce:	bf00      	nop
 800d6d0:	e7fe      	b.n	800d6d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d00a      	beq.n	800d6f0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6de:	f383 8811 	msr	BASEPRI, r3
 800d6e2:	f3bf 8f6f 	isb	sy
 800d6e6:	f3bf 8f4f 	dsb	sy
 800d6ea:	61fb      	str	r3, [r7, #28]
}
 800d6ec:	bf00      	nop
 800d6ee:	e7fe      	b.n	800d6ee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d6f0:	f001 f8c8 	bl	800e884 <xTaskGetSchedulerState>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d102      	bne.n	800d700 <xQueueSemaphoreTake+0x60>
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d101      	bne.n	800d704 <xQueueSemaphoreTake+0x64>
 800d700:	2301      	movs	r3, #1
 800d702:	e000      	b.n	800d706 <xQueueSemaphoreTake+0x66>
 800d704:	2300      	movs	r3, #0
 800d706:	2b00      	cmp	r3, #0
 800d708:	d10a      	bne.n	800d720 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d70e:	f383 8811 	msr	BASEPRI, r3
 800d712:	f3bf 8f6f 	isb	sy
 800d716:	f3bf 8f4f 	dsb	sy
 800d71a:	61bb      	str	r3, [r7, #24]
}
 800d71c:	bf00      	nop
 800d71e:	e7fe      	b.n	800d71e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d720:	f001 fc00 	bl	800ef24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d728:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d024      	beq.n	800d77a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d732:	1e5a      	subs	r2, r3, #1
 800d734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d736:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d104      	bne.n	800d74a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d740:	f001 fa48 	bl	800ebd4 <pvTaskIncrementMutexHeldCount>
 800d744:	4602      	mov	r2, r0
 800d746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d748:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74c:	691b      	ldr	r3, [r3, #16]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d00f      	beq.n	800d772 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d754:	3310      	adds	r3, #16
 800d756:	4618      	mov	r0, r3
 800d758:	f000 fed8 	bl	800e50c <xTaskRemoveFromEventList>
 800d75c:	4603      	mov	r3, r0
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d007      	beq.n	800d772 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d762:	4b54      	ldr	r3, [pc, #336]	; (800d8b4 <xQueueSemaphoreTake+0x214>)
 800d764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d768:	601a      	str	r2, [r3, #0]
 800d76a:	f3bf 8f4f 	dsb	sy
 800d76e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d772:	f001 fc07 	bl	800ef84 <vPortExitCritical>
				return pdPASS;
 800d776:	2301      	movs	r3, #1
 800d778:	e097      	b.n	800d8aa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d111      	bne.n	800d7a4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d782:	2b00      	cmp	r3, #0
 800d784:	d00a      	beq.n	800d79c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78a:	f383 8811 	msr	BASEPRI, r3
 800d78e:	f3bf 8f6f 	isb	sy
 800d792:	f3bf 8f4f 	dsb	sy
 800d796:	617b      	str	r3, [r7, #20]
}
 800d798:	bf00      	nop
 800d79a:	e7fe      	b.n	800d79a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d79c:	f001 fbf2 	bl	800ef84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	e082      	b.n	800d8aa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d106      	bne.n	800d7b8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7aa:	f107 030c 	add.w	r3, r7, #12
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f000 ff0e 	bl	800e5d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d7b8:	f001 fbe4 	bl	800ef84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d7bc:	f000 fca2 	bl	800e104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7c0:	f001 fbb0 	bl	800ef24 <vPortEnterCritical>
 800d7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7ca:	b25b      	sxtb	r3, r3
 800d7cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7d0:	d103      	bne.n	800d7da <xQueueSemaphoreTake+0x13a>
 800d7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7e0:	b25b      	sxtb	r3, r3
 800d7e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7e6:	d103      	bne.n	800d7f0 <xQueueSemaphoreTake+0x150>
 800d7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7f0:	f001 fbc8 	bl	800ef84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7f4:	463a      	mov	r2, r7
 800d7f6:	f107 030c 	add.w	r3, r7, #12
 800d7fa:	4611      	mov	r1, r2
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f000 fefd 	bl	800e5fc <xTaskCheckForTimeOut>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d132      	bne.n	800d86e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d808:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d80a:	f000 fa2e 	bl	800dc6a <prvIsQueueEmpty>
 800d80e:	4603      	mov	r3, r0
 800d810:	2b00      	cmp	r3, #0
 800d812:	d026      	beq.n	800d862 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d109      	bne.n	800d830 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d81c:	f001 fb82 	bl	800ef24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d822:	689b      	ldr	r3, [r3, #8]
 800d824:	4618      	mov	r0, r3
 800d826:	f001 f84b 	bl	800e8c0 <xTaskPriorityInherit>
 800d82a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d82c:	f001 fbaa 	bl	800ef84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d832:	3324      	adds	r3, #36	; 0x24
 800d834:	683a      	ldr	r2, [r7, #0]
 800d836:	4611      	mov	r1, r2
 800d838:	4618      	mov	r0, r3
 800d83a:	f000 fe43 	bl	800e4c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d83e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d840:	f000 f9c1 	bl	800dbc6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d844:	f000 fc6c 	bl	800e120 <xTaskResumeAll>
 800d848:	4603      	mov	r3, r0
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	f47f af68 	bne.w	800d720 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d850:	4b18      	ldr	r3, [pc, #96]	; (800d8b4 <xQueueSemaphoreTake+0x214>)
 800d852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d856:	601a      	str	r2, [r3, #0]
 800d858:	f3bf 8f4f 	dsb	sy
 800d85c:	f3bf 8f6f 	isb	sy
 800d860:	e75e      	b.n	800d720 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d862:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d864:	f000 f9af 	bl	800dbc6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d868:	f000 fc5a 	bl	800e120 <xTaskResumeAll>
 800d86c:	e758      	b.n	800d720 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d86e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d870:	f000 f9a9 	bl	800dbc6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d874:	f000 fc54 	bl	800e120 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d878:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d87a:	f000 f9f6 	bl	800dc6a <prvIsQueueEmpty>
 800d87e:	4603      	mov	r3, r0
 800d880:	2b00      	cmp	r3, #0
 800d882:	f43f af4d 	beq.w	800d720 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d00d      	beq.n	800d8a8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d88c:	f001 fb4a 	bl	800ef24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d890:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d892:	f000 f8f0 	bl	800da76 <prvGetDisinheritPriorityAfterTimeout>
 800d896:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89a:	689b      	ldr	r3, [r3, #8]
 800d89c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f001 f90a 	bl	800eab8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d8a4:	f001 fb6e 	bl	800ef84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d8a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3738      	adds	r7, #56	; 0x38
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}
 800d8b2:	bf00      	nop
 800d8b4:	e000ed04 	.word	0xe000ed04

0800d8b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b08e      	sub	sp, #56	; 0x38
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	60b9      	str	r1, [r7, #8]
 800d8c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d10a      	bne.n	800d8e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d2:	f383 8811 	msr	BASEPRI, r3
 800d8d6:	f3bf 8f6f 	isb	sy
 800d8da:	f3bf 8f4f 	dsb	sy
 800d8de:	623b      	str	r3, [r7, #32]
}
 800d8e0:	bf00      	nop
 800d8e2:	e7fe      	b.n	800d8e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d103      	bne.n	800d8f2 <xQueueReceiveFromISR+0x3a>
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d101      	bne.n	800d8f6 <xQueueReceiveFromISR+0x3e>
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	e000      	b.n	800d8f8 <xQueueReceiveFromISR+0x40>
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d10a      	bne.n	800d912 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d900:	f383 8811 	msr	BASEPRI, r3
 800d904:	f3bf 8f6f 	isb	sy
 800d908:	f3bf 8f4f 	dsb	sy
 800d90c:	61fb      	str	r3, [r7, #28]
}
 800d90e:	bf00      	nop
 800d910:	e7fe      	b.n	800d910 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d912:	f001 fbe9 	bl	800f0e8 <vPortValidateInterruptPriority>
	__asm volatile
 800d916:	f3ef 8211 	mrs	r2, BASEPRI
 800d91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d91e:	f383 8811 	msr	BASEPRI, r3
 800d922:	f3bf 8f6f 	isb	sy
 800d926:	f3bf 8f4f 	dsb	sy
 800d92a:	61ba      	str	r2, [r7, #24]
 800d92c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d92e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d930:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d936:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d02f      	beq.n	800d99e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d940:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d948:	68b9      	ldr	r1, [r7, #8]
 800d94a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d94c:	f000 f915 	bl	800db7a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d952:	1e5a      	subs	r2, r3, #1
 800d954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d956:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d958:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d95c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d960:	d112      	bne.n	800d988 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d964:	691b      	ldr	r3, [r3, #16]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d016      	beq.n	800d998 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96c:	3310      	adds	r3, #16
 800d96e:	4618      	mov	r0, r3
 800d970:	f000 fdcc 	bl	800e50c <xTaskRemoveFromEventList>
 800d974:	4603      	mov	r3, r0
 800d976:	2b00      	cmp	r3, #0
 800d978:	d00e      	beq.n	800d998 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d00b      	beq.n	800d998 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2201      	movs	r2, #1
 800d984:	601a      	str	r2, [r3, #0]
 800d986:	e007      	b.n	800d998 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d98c:	3301      	adds	r3, #1
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	b25a      	sxtb	r2, r3
 800d992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d998:	2301      	movs	r3, #1
 800d99a:	637b      	str	r3, [r7, #52]	; 0x34
 800d99c:	e001      	b.n	800d9a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	637b      	str	r3, [r7, #52]	; 0x34
 800d9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	f383 8811 	msr	BASEPRI, r3
}
 800d9ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3738      	adds	r7, #56	; 0x38
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}

0800d9b8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b084      	sub	sp, #16
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d10a      	bne.n	800d9dc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800d9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ca:	f383 8811 	msr	BASEPRI, r3
 800d9ce:	f3bf 8f6f 	isb	sy
 800d9d2:	f3bf 8f4f 	dsb	sy
 800d9d6:	60bb      	str	r3, [r7, #8]
}
 800d9d8:	bf00      	nop
 800d9da:	e7fe      	b.n	800d9da <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800d9dc:	f001 faa2 	bl	800ef24 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9e4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800d9e6:	f001 facd 	bl	800ef84 <vPortExitCritical>

	return uxReturn;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3710      	adds	r7, #16
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b087      	sub	sp, #28
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d10a      	bne.n	800da1c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800da06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da0a:	f383 8811 	msr	BASEPRI, r3
 800da0e:	f3bf 8f6f 	isb	sy
 800da12:	f3bf 8f4f 	dsb	sy
 800da16:	60fb      	str	r3, [r7, #12]
}
 800da18:	bf00      	nop
 800da1a:	e7fe      	b.n	800da1a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da20:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800da22:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800da24:	4618      	mov	r0, r3
 800da26:	371c      	adds	r7, #28
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr

0800da30 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b084      	sub	sp, #16
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d10a      	bne.n	800da58 <vQueueDelete+0x28>
	__asm volatile
 800da42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da46:	f383 8811 	msr	BASEPRI, r3
 800da4a:	f3bf 8f6f 	isb	sy
 800da4e:	f3bf 8f4f 	dsb	sy
 800da52:	60bb      	str	r3, [r7, #8]
}
 800da54:	bf00      	nop
 800da56:	e7fe      	b.n	800da56 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800da58:	68f8      	ldr	r0, [r7, #12]
 800da5a:	f000 f935 	bl	800dcc8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800da64:	2b00      	cmp	r3, #0
 800da66:	d102      	bne.n	800da6e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800da68:	68f8      	ldr	r0, [r7, #12]
 800da6a:	f001 fc49 	bl	800f300 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800da6e:	bf00      	nop
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}

0800da76 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800da76:	b480      	push	{r7}
 800da78:	b085      	sub	sp, #20
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da82:	2b00      	cmp	r3, #0
 800da84:	d006      	beq.n	800da94 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f1c3 0307 	rsb	r3, r3, #7
 800da90:	60fb      	str	r3, [r7, #12]
 800da92:	e001      	b.n	800da98 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800da94:	2300      	movs	r3, #0
 800da96:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800da98:	68fb      	ldr	r3, [r7, #12]
	}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3714      	adds	r7, #20
 800da9e:	46bd      	mov	sp, r7
 800daa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa4:	4770      	bx	lr

0800daa6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b086      	sub	sp, #24
 800daaa:	af00      	add	r7, sp, #0
 800daac:	60f8      	str	r0, [r7, #12]
 800daae:	60b9      	str	r1, [r7, #8]
 800dab0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dab2:	2300      	movs	r3, #0
 800dab4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d10d      	bne.n	800dae0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d14d      	bne.n	800db68 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	689b      	ldr	r3, [r3, #8]
 800dad0:	4618      	mov	r0, r3
 800dad2:	f000 ff6b 	bl	800e9ac <xTaskPriorityDisinherit>
 800dad6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2200      	movs	r2, #0
 800dadc:	609a      	str	r2, [r3, #8]
 800dade:	e043      	b.n	800db68 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d119      	bne.n	800db1a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	6858      	ldr	r0, [r3, #4]
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daee:	461a      	mov	r2, r3
 800daf0:	68b9      	ldr	r1, [r7, #8]
 800daf2:	f010 fe87 	bl	801e804 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	685a      	ldr	r2, [r3, #4]
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dafe:	441a      	add	r2, r3
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	685a      	ldr	r2, [r3, #4]
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	689b      	ldr	r3, [r3, #8]
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d32b      	bcc.n	800db68 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681a      	ldr	r2, [r3, #0]
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	605a      	str	r2, [r3, #4]
 800db18:	e026      	b.n	800db68 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	68d8      	ldr	r0, [r3, #12]
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db22:	461a      	mov	r2, r3
 800db24:	68b9      	ldr	r1, [r7, #8]
 800db26:	f010 fe6d 	bl	801e804 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	68da      	ldr	r2, [r3, #12]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db32:	425b      	negs	r3, r3
 800db34:	441a      	add	r2, r3
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	68da      	ldr	r2, [r3, #12]
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	429a      	cmp	r2, r3
 800db44:	d207      	bcs.n	800db56 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	689a      	ldr	r2, [r3, #8]
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db4e:	425b      	negs	r3, r3
 800db50:	441a      	add	r2, r3
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2b02      	cmp	r3, #2
 800db5a:	d105      	bne.n	800db68 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d002      	beq.n	800db68 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	3b01      	subs	r3, #1
 800db66:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	1c5a      	adds	r2, r3, #1
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800db70:	697b      	ldr	r3, [r7, #20]
}
 800db72:	4618      	mov	r0, r3
 800db74:	3718      	adds	r7, #24
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}

0800db7a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800db7a:	b580      	push	{r7, lr}
 800db7c:	b082      	sub	sp, #8
 800db7e:	af00      	add	r7, sp, #0
 800db80:	6078      	str	r0, [r7, #4]
 800db82:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d018      	beq.n	800dbbe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	68da      	ldr	r2, [r3, #12]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db94:	441a      	add	r2, r3
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	68da      	ldr	r2, [r3, #12]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	689b      	ldr	r3, [r3, #8]
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d303      	bcc.n	800dbae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681a      	ldr	r2, [r3, #0]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	68d9      	ldr	r1, [r3, #12]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	6838      	ldr	r0, [r7, #0]
 800dbba:	f010 fe23 	bl	801e804 <memcpy>
	}
}
 800dbbe:	bf00      	nop
 800dbc0:	3708      	adds	r7, #8
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	b084      	sub	sp, #16
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dbce:	f001 f9a9 	bl	800ef24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbd8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dbda:	e011      	b.n	800dc00 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d012      	beq.n	800dc0a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	3324      	adds	r3, #36	; 0x24
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f000 fc8f 	bl	800e50c <xTaskRemoveFromEventList>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d001      	beq.n	800dbf8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dbf4:	f000 fd64 	bl	800e6c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dbf8:	7bfb      	ldrb	r3, [r7, #15]
 800dbfa:	3b01      	subs	r3, #1
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	dce9      	bgt.n	800dbdc <prvUnlockQueue+0x16>
 800dc08:	e000      	b.n	800dc0c <prvUnlockQueue+0x46>
					break;
 800dc0a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	22ff      	movs	r2, #255	; 0xff
 800dc10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dc14:	f001 f9b6 	bl	800ef84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dc18:	f001 f984 	bl	800ef24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc22:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc24:	e011      	b.n	800dc4a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	691b      	ldr	r3, [r3, #16]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d012      	beq.n	800dc54 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	3310      	adds	r3, #16
 800dc32:	4618      	mov	r0, r3
 800dc34:	f000 fc6a 	bl	800e50c <xTaskRemoveFromEventList>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d001      	beq.n	800dc42 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dc3e:	f000 fd3f 	bl	800e6c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dc42:	7bbb      	ldrb	r3, [r7, #14]
 800dc44:	3b01      	subs	r3, #1
 800dc46:	b2db      	uxtb	r3, r3
 800dc48:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	dce9      	bgt.n	800dc26 <prvUnlockQueue+0x60>
 800dc52:	e000      	b.n	800dc56 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dc54:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	22ff      	movs	r2, #255	; 0xff
 800dc5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dc5e:	f001 f991 	bl	800ef84 <vPortExitCritical>
}
 800dc62:	bf00      	nop
 800dc64:	3710      	adds	r7, #16
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}

0800dc6a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dc6a:	b580      	push	{r7, lr}
 800dc6c:	b084      	sub	sp, #16
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc72:	f001 f957 	bl	800ef24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d102      	bne.n	800dc84 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	60fb      	str	r3, [r7, #12]
 800dc82:	e001      	b.n	800dc88 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dc84:	2300      	movs	r3, #0
 800dc86:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc88:	f001 f97c 	bl	800ef84 <vPortExitCritical>

	return xReturn;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3710      	adds	r7, #16
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b084      	sub	sp, #16
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc9e:	f001 f941 	bl	800ef24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d102      	bne.n	800dcb4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dcae:	2301      	movs	r3, #1
 800dcb0:	60fb      	str	r3, [r7, #12]
 800dcb2:	e001      	b.n	800dcb8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dcb8:	f001 f964 	bl	800ef84 <vPortExitCritical>

	return xReturn;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3710      	adds	r7, #16
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
	...

0800dcc8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800dcc8:	b480      	push	{r7}
 800dcca:	b085      	sub	sp, #20
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	60fb      	str	r3, [r7, #12]
 800dcd4:	e016      	b.n	800dd04 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800dcd6:	4a10      	ldr	r2, [pc, #64]	; (800dd18 <vQueueUnregisterQueue+0x50>)
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	00db      	lsls	r3, r3, #3
 800dcdc:	4413      	add	r3, r2
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	687a      	ldr	r2, [r7, #4]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d10b      	bne.n	800dcfe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800dce6:	4a0c      	ldr	r2, [pc, #48]	; (800dd18 <vQueueUnregisterQueue+0x50>)
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	2100      	movs	r1, #0
 800dcec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800dcf0:	4a09      	ldr	r2, [pc, #36]	; (800dd18 <vQueueUnregisterQueue+0x50>)
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	00db      	lsls	r3, r3, #3
 800dcf6:	4413      	add	r3, r2
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	605a      	str	r2, [r3, #4]
				break;
 800dcfc:	e006      	b.n	800dd0c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	3301      	adds	r3, #1
 800dd02:	60fb      	str	r3, [r7, #12]
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	2b07      	cmp	r3, #7
 800dd08:	d9e5      	bls.n	800dcd6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800dd0a:	bf00      	nop
 800dd0c:	bf00      	nop
 800dd0e:	3714      	adds	r7, #20
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr
 800dd18:	20008044 	.word	0x20008044

0800dd1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b08e      	sub	sp, #56	; 0x38
 800dd20:	af04      	add	r7, sp, #16
 800dd22:	60f8      	str	r0, [r7, #12]
 800dd24:	60b9      	str	r1, [r7, #8]
 800dd26:	607a      	str	r2, [r7, #4]
 800dd28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dd2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d10a      	bne.n	800dd46 <xTaskCreateStatic+0x2a>
	__asm volatile
 800dd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd34:	f383 8811 	msr	BASEPRI, r3
 800dd38:	f3bf 8f6f 	isb	sy
 800dd3c:	f3bf 8f4f 	dsb	sy
 800dd40:	623b      	str	r3, [r7, #32]
}
 800dd42:	bf00      	nop
 800dd44:	e7fe      	b.n	800dd44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d10a      	bne.n	800dd62 <xTaskCreateStatic+0x46>
	__asm volatile
 800dd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd50:	f383 8811 	msr	BASEPRI, r3
 800dd54:	f3bf 8f6f 	isb	sy
 800dd58:	f3bf 8f4f 	dsb	sy
 800dd5c:	61fb      	str	r3, [r7, #28]
}
 800dd5e:	bf00      	nop
 800dd60:	e7fe      	b.n	800dd60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dd62:	2354      	movs	r3, #84	; 0x54
 800dd64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	2b54      	cmp	r3, #84	; 0x54
 800dd6a:	d00a      	beq.n	800dd82 <xTaskCreateStatic+0x66>
	__asm volatile
 800dd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd70:	f383 8811 	msr	BASEPRI, r3
 800dd74:	f3bf 8f6f 	isb	sy
 800dd78:	f3bf 8f4f 	dsb	sy
 800dd7c:	61bb      	str	r3, [r7, #24]
}
 800dd7e:	bf00      	nop
 800dd80:	e7fe      	b.n	800dd80 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dd82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d01e      	beq.n	800ddc8 <xTaskCreateStatic+0xac>
 800dd8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d01b      	beq.n	800ddc8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd9c:	2202      	movs	r2, #2
 800dd9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dda2:	2300      	movs	r3, #0
 800dda4:	9303      	str	r3, [sp, #12]
 800dda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda8:	9302      	str	r3, [sp, #8]
 800ddaa:	f107 0314 	add.w	r3, r7, #20
 800ddae:	9301      	str	r3, [sp, #4]
 800ddb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb2:	9300      	str	r3, [sp, #0]
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	687a      	ldr	r2, [r7, #4]
 800ddb8:	68b9      	ldr	r1, [r7, #8]
 800ddba:	68f8      	ldr	r0, [r7, #12]
 800ddbc:	f000 f850 	bl	800de60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ddc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddc2:	f000 f8d5 	bl	800df70 <prvAddNewTaskToReadyList>
 800ddc6:	e001      	b.n	800ddcc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ddcc:	697b      	ldr	r3, [r7, #20]
	}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3728      	adds	r7, #40	; 0x28
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}

0800ddd6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ddd6:	b580      	push	{r7, lr}
 800ddd8:	b08c      	sub	sp, #48	; 0x30
 800ddda:	af04      	add	r7, sp, #16
 800dddc:	60f8      	str	r0, [r7, #12]
 800ddde:	60b9      	str	r1, [r7, #8]
 800dde0:	603b      	str	r3, [r7, #0]
 800dde2:	4613      	mov	r3, r2
 800dde4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dde6:	88fb      	ldrh	r3, [r7, #6]
 800dde8:	009b      	lsls	r3, r3, #2
 800ddea:	4618      	mov	r0, r3
 800ddec:	f001 f9bc 	bl	800f168 <pvPortMalloc>
 800ddf0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d00e      	beq.n	800de16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ddf8:	2054      	movs	r0, #84	; 0x54
 800ddfa:	f001 f9b5 	bl	800f168 <pvPortMalloc>
 800ddfe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d003      	beq.n	800de0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	697a      	ldr	r2, [r7, #20]
 800de0a:	631a      	str	r2, [r3, #48]	; 0x30
 800de0c:	e005      	b.n	800de1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800de0e:	6978      	ldr	r0, [r7, #20]
 800de10:	f001 fa76 	bl	800f300 <vPortFree>
 800de14:	e001      	b.n	800de1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800de16:	2300      	movs	r3, #0
 800de18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800de1a:	69fb      	ldr	r3, [r7, #28]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d017      	beq.n	800de50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800de20:	69fb      	ldr	r3, [r7, #28]
 800de22:	2200      	movs	r2, #0
 800de24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800de28:	88fa      	ldrh	r2, [r7, #6]
 800de2a:	2300      	movs	r3, #0
 800de2c:	9303      	str	r3, [sp, #12]
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	9302      	str	r3, [sp, #8]
 800de32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de34:	9301      	str	r3, [sp, #4]
 800de36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de38:	9300      	str	r3, [sp, #0]
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	68b9      	ldr	r1, [r7, #8]
 800de3e:	68f8      	ldr	r0, [r7, #12]
 800de40:	f000 f80e 	bl	800de60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de44:	69f8      	ldr	r0, [r7, #28]
 800de46:	f000 f893 	bl	800df70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800de4a:	2301      	movs	r3, #1
 800de4c:	61bb      	str	r3, [r7, #24]
 800de4e:	e002      	b.n	800de56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800de50:	f04f 33ff 	mov.w	r3, #4294967295
 800de54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800de56:	69bb      	ldr	r3, [r7, #24]
	}
 800de58:	4618      	mov	r0, r3
 800de5a:	3720      	adds	r7, #32
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b088      	sub	sp, #32
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	607a      	str	r2, [r7, #4]
 800de6c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800de6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800de78:	3b01      	subs	r3, #1
 800de7a:	009b      	lsls	r3, r3, #2
 800de7c:	4413      	add	r3, r2
 800de7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800de80:	69bb      	ldr	r3, [r7, #24]
 800de82:	f023 0307 	bic.w	r3, r3, #7
 800de86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	f003 0307 	and.w	r3, r3, #7
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d00a      	beq.n	800dea8 <prvInitialiseNewTask+0x48>
	__asm volatile
 800de92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de96:	f383 8811 	msr	BASEPRI, r3
 800de9a:	f3bf 8f6f 	isb	sy
 800de9e:	f3bf 8f4f 	dsb	sy
 800dea2:	617b      	str	r3, [r7, #20]
}
 800dea4:	bf00      	nop
 800dea6:	e7fe      	b.n	800dea6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d01f      	beq.n	800deee <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800deae:	2300      	movs	r3, #0
 800deb0:	61fb      	str	r3, [r7, #28]
 800deb2:	e012      	b.n	800deda <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800deb4:	68ba      	ldr	r2, [r7, #8]
 800deb6:	69fb      	ldr	r3, [r7, #28]
 800deb8:	4413      	add	r3, r2
 800deba:	7819      	ldrb	r1, [r3, #0]
 800debc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800debe:	69fb      	ldr	r3, [r7, #28]
 800dec0:	4413      	add	r3, r2
 800dec2:	3334      	adds	r3, #52	; 0x34
 800dec4:	460a      	mov	r2, r1
 800dec6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dec8:	68ba      	ldr	r2, [r7, #8]
 800deca:	69fb      	ldr	r3, [r7, #28]
 800decc:	4413      	add	r3, r2
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d006      	beq.n	800dee2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ded4:	69fb      	ldr	r3, [r7, #28]
 800ded6:	3301      	adds	r3, #1
 800ded8:	61fb      	str	r3, [r7, #28]
 800deda:	69fb      	ldr	r3, [r7, #28]
 800dedc:	2b0f      	cmp	r3, #15
 800dede:	d9e9      	bls.n	800deb4 <prvInitialiseNewTask+0x54>
 800dee0:	e000      	b.n	800dee4 <prvInitialiseNewTask+0x84>
			{
				break;
 800dee2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee6:	2200      	movs	r2, #0
 800dee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800deec:	e003      	b.n	800def6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800deee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def0:	2200      	movs	r2, #0
 800def2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800def6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def8:	2b06      	cmp	r3, #6
 800defa:	d901      	bls.n	800df00 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800defc:	2306      	movs	r3, #6
 800defe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800df00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800df06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df0a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800df0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df0e:	2200      	movs	r2, #0
 800df10:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800df12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df14:	3304      	adds	r3, #4
 800df16:	4618      	mov	r0, r3
 800df18:	f7fe fea1 	bl	800cc5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800df1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df1e:	3318      	adds	r3, #24
 800df20:	4618      	mov	r0, r3
 800df22:	f7fe fe9c 	bl	800cc5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800df26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2e:	f1c3 0207 	rsb	r2, r3, #7
 800df32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800df36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800df3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df3e:	2200      	movs	r2, #0
 800df40:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800df42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df44:	2200      	movs	r2, #0
 800df46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800df4a:	683a      	ldr	r2, [r7, #0]
 800df4c:	68f9      	ldr	r1, [r7, #12]
 800df4e:	69b8      	ldr	r0, [r7, #24]
 800df50:	f000 feba 	bl	800ecc8 <pxPortInitialiseStack>
 800df54:	4602      	mov	r2, r0
 800df56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800df5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d002      	beq.n	800df66 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800df60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df66:	bf00      	nop
 800df68:	3720      	adds	r7, #32
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}
	...

0800df70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800df78:	f000 ffd4 	bl	800ef24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800df7c:	4b2a      	ldr	r3, [pc, #168]	; (800e028 <prvAddNewTaskToReadyList+0xb8>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	3301      	adds	r3, #1
 800df82:	4a29      	ldr	r2, [pc, #164]	; (800e028 <prvAddNewTaskToReadyList+0xb8>)
 800df84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800df86:	4b29      	ldr	r3, [pc, #164]	; (800e02c <prvAddNewTaskToReadyList+0xbc>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d109      	bne.n	800dfa2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800df8e:	4a27      	ldr	r2, [pc, #156]	; (800e02c <prvAddNewTaskToReadyList+0xbc>)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800df94:	4b24      	ldr	r3, [pc, #144]	; (800e028 <prvAddNewTaskToReadyList+0xb8>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	2b01      	cmp	r3, #1
 800df9a:	d110      	bne.n	800dfbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800df9c:	f000 fbb4 	bl	800e708 <prvInitialiseTaskLists>
 800dfa0:	e00d      	b.n	800dfbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dfa2:	4b23      	ldr	r3, [pc, #140]	; (800e030 <prvAddNewTaskToReadyList+0xc0>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d109      	bne.n	800dfbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dfaa:	4b20      	ldr	r3, [pc, #128]	; (800e02c <prvAddNewTaskToReadyList+0xbc>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d802      	bhi.n	800dfbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dfb8:	4a1c      	ldr	r2, [pc, #112]	; (800e02c <prvAddNewTaskToReadyList+0xbc>)
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dfbe:	4b1d      	ldr	r3, [pc, #116]	; (800e034 <prvAddNewTaskToReadyList+0xc4>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	4a1b      	ldr	r2, [pc, #108]	; (800e034 <prvAddNewTaskToReadyList+0xc4>)
 800dfc6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfcc:	2201      	movs	r2, #1
 800dfce:	409a      	lsls	r2, r3
 800dfd0:	4b19      	ldr	r3, [pc, #100]	; (800e038 <prvAddNewTaskToReadyList+0xc8>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4313      	orrs	r3, r2
 800dfd6:	4a18      	ldr	r2, [pc, #96]	; (800e038 <prvAddNewTaskToReadyList+0xc8>)
 800dfd8:	6013      	str	r3, [r2, #0]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfde:	4613      	mov	r3, r2
 800dfe0:	009b      	lsls	r3, r3, #2
 800dfe2:	4413      	add	r3, r2
 800dfe4:	009b      	lsls	r3, r3, #2
 800dfe6:	4a15      	ldr	r2, [pc, #84]	; (800e03c <prvAddNewTaskToReadyList+0xcc>)
 800dfe8:	441a      	add	r2, r3
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	3304      	adds	r3, #4
 800dfee:	4619      	mov	r1, r3
 800dff0:	4610      	mov	r0, r2
 800dff2:	f7fe fe41 	bl	800cc78 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dff6:	f000 ffc5 	bl	800ef84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dffa:	4b0d      	ldr	r3, [pc, #52]	; (800e030 <prvAddNewTaskToReadyList+0xc0>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d00e      	beq.n	800e020 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e002:	4b0a      	ldr	r3, [pc, #40]	; (800e02c <prvAddNewTaskToReadyList+0xbc>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d207      	bcs.n	800e020 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e010:	4b0b      	ldr	r3, [pc, #44]	; (800e040 <prvAddNewTaskToReadyList+0xd0>)
 800e012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e016:	601a      	str	r2, [r3, #0]
 800e018:	f3bf 8f4f 	dsb	sy
 800e01c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e020:	bf00      	nop
 800e022:	3708      	adds	r7, #8
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	20000674 	.word	0x20000674
 800e02c:	20000574 	.word	0x20000574
 800e030:	20000680 	.word	0x20000680
 800e034:	20000690 	.word	0x20000690
 800e038:	2000067c 	.word	0x2000067c
 800e03c:	20000578 	.word	0x20000578
 800e040:	e000ed04 	.word	0xe000ed04

0800e044 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b08a      	sub	sp, #40	; 0x28
 800e048:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e04a:	2300      	movs	r3, #0
 800e04c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e04e:	2300      	movs	r3, #0
 800e050:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e052:	463a      	mov	r2, r7
 800e054:	1d39      	adds	r1, r7, #4
 800e056:	f107 0308 	add.w	r3, r7, #8
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7f2 fffe 	bl	800105c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e060:	6839      	ldr	r1, [r7, #0]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	68ba      	ldr	r2, [r7, #8]
 800e066:	9202      	str	r2, [sp, #8]
 800e068:	9301      	str	r3, [sp, #4]
 800e06a:	2300      	movs	r3, #0
 800e06c:	9300      	str	r3, [sp, #0]
 800e06e:	2300      	movs	r3, #0
 800e070:	460a      	mov	r2, r1
 800e072:	491e      	ldr	r1, [pc, #120]	; (800e0ec <vTaskStartScheduler+0xa8>)
 800e074:	481e      	ldr	r0, [pc, #120]	; (800e0f0 <vTaskStartScheduler+0xac>)
 800e076:	f7ff fe51 	bl	800dd1c <xTaskCreateStatic>
 800e07a:	4603      	mov	r3, r0
 800e07c:	4a1d      	ldr	r2, [pc, #116]	; (800e0f4 <vTaskStartScheduler+0xb0>)
 800e07e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e080:	4b1c      	ldr	r3, [pc, #112]	; (800e0f4 <vTaskStartScheduler+0xb0>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d002      	beq.n	800e08e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e088:	2301      	movs	r3, #1
 800e08a:	617b      	str	r3, [r7, #20]
 800e08c:	e001      	b.n	800e092 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e08e:	2300      	movs	r3, #0
 800e090:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	2b01      	cmp	r3, #1
 800e096:	d116      	bne.n	800e0c6 <vTaskStartScheduler+0x82>
	__asm volatile
 800e098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e09c:	f383 8811 	msr	BASEPRI, r3
 800e0a0:	f3bf 8f6f 	isb	sy
 800e0a4:	f3bf 8f4f 	dsb	sy
 800e0a8:	613b      	str	r3, [r7, #16]
}
 800e0aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e0ac:	4b12      	ldr	r3, [pc, #72]	; (800e0f8 <vTaskStartScheduler+0xb4>)
 800e0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800e0b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e0b4:	4b11      	ldr	r3, [pc, #68]	; (800e0fc <vTaskStartScheduler+0xb8>)
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e0ba:	4b11      	ldr	r3, [pc, #68]	; (800e100 <vTaskStartScheduler+0xbc>)
 800e0bc:	2200      	movs	r2, #0
 800e0be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e0c0:	f000 fe8e 	bl	800ede0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e0c4:	e00e      	b.n	800e0e4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0cc:	d10a      	bne.n	800e0e4 <vTaskStartScheduler+0xa0>
	__asm volatile
 800e0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d2:	f383 8811 	msr	BASEPRI, r3
 800e0d6:	f3bf 8f6f 	isb	sy
 800e0da:	f3bf 8f4f 	dsb	sy
 800e0de:	60fb      	str	r3, [r7, #12]
}
 800e0e0:	bf00      	nop
 800e0e2:	e7fe      	b.n	800e0e2 <vTaskStartScheduler+0x9e>
}
 800e0e4:	bf00      	nop
 800e0e6:	3718      	adds	r7, #24
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	080224c8 	.word	0x080224c8
 800e0f0:	0800e6d9 	.word	0x0800e6d9
 800e0f4:	20000698 	.word	0x20000698
 800e0f8:	20000694 	.word	0x20000694
 800e0fc:	20000680 	.word	0x20000680
 800e100:	20000678 	.word	0x20000678

0800e104 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e104:	b480      	push	{r7}
 800e106:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e108:	4b04      	ldr	r3, [pc, #16]	; (800e11c <vTaskSuspendAll+0x18>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	3301      	adds	r3, #1
 800e10e:	4a03      	ldr	r2, [pc, #12]	; (800e11c <vTaskSuspendAll+0x18>)
 800e110:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e112:	bf00      	nop
 800e114:	46bd      	mov	sp, r7
 800e116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11a:	4770      	bx	lr
 800e11c:	2000069c 	.word	0x2000069c

0800e120 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b084      	sub	sp, #16
 800e124:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e126:	2300      	movs	r3, #0
 800e128:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e12a:	2300      	movs	r3, #0
 800e12c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e12e:	4b41      	ldr	r3, [pc, #260]	; (800e234 <xTaskResumeAll+0x114>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d10a      	bne.n	800e14c <xTaskResumeAll+0x2c>
	__asm volatile
 800e136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e13a:	f383 8811 	msr	BASEPRI, r3
 800e13e:	f3bf 8f6f 	isb	sy
 800e142:	f3bf 8f4f 	dsb	sy
 800e146:	603b      	str	r3, [r7, #0]
}
 800e148:	bf00      	nop
 800e14a:	e7fe      	b.n	800e14a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e14c:	f000 feea 	bl	800ef24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e150:	4b38      	ldr	r3, [pc, #224]	; (800e234 <xTaskResumeAll+0x114>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	3b01      	subs	r3, #1
 800e156:	4a37      	ldr	r2, [pc, #220]	; (800e234 <xTaskResumeAll+0x114>)
 800e158:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e15a:	4b36      	ldr	r3, [pc, #216]	; (800e234 <xTaskResumeAll+0x114>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d161      	bne.n	800e226 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e162:	4b35      	ldr	r3, [pc, #212]	; (800e238 <xTaskResumeAll+0x118>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d05d      	beq.n	800e226 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e16a:	e02e      	b.n	800e1ca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e16c:	4b33      	ldr	r3, [pc, #204]	; (800e23c <xTaskResumeAll+0x11c>)
 800e16e:	68db      	ldr	r3, [r3, #12]
 800e170:	68db      	ldr	r3, [r3, #12]
 800e172:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	3318      	adds	r3, #24
 800e178:	4618      	mov	r0, r3
 800e17a:	f7fe fdda 	bl	800cd32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	3304      	adds	r3, #4
 800e182:	4618      	mov	r0, r3
 800e184:	f7fe fdd5 	bl	800cd32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e18c:	2201      	movs	r2, #1
 800e18e:	409a      	lsls	r2, r3
 800e190:	4b2b      	ldr	r3, [pc, #172]	; (800e240 <xTaskResumeAll+0x120>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	4313      	orrs	r3, r2
 800e196:	4a2a      	ldr	r2, [pc, #168]	; (800e240 <xTaskResumeAll+0x120>)
 800e198:	6013      	str	r3, [r2, #0]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e19e:	4613      	mov	r3, r2
 800e1a0:	009b      	lsls	r3, r3, #2
 800e1a2:	4413      	add	r3, r2
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	4a27      	ldr	r2, [pc, #156]	; (800e244 <xTaskResumeAll+0x124>)
 800e1a8:	441a      	add	r2, r3
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	3304      	adds	r3, #4
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	4610      	mov	r0, r2
 800e1b2:	f7fe fd61 	bl	800cc78 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ba:	4b23      	ldr	r3, [pc, #140]	; (800e248 <xTaskResumeAll+0x128>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d302      	bcc.n	800e1ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e1c4:	4b21      	ldr	r3, [pc, #132]	; (800e24c <xTaskResumeAll+0x12c>)
 800e1c6:	2201      	movs	r2, #1
 800e1c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e1ca:	4b1c      	ldr	r3, [pc, #112]	; (800e23c <xTaskResumeAll+0x11c>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d1cc      	bne.n	800e16c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d001      	beq.n	800e1dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e1d8:	f000 fb34 	bl	800e844 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e1dc:	4b1c      	ldr	r3, [pc, #112]	; (800e250 <xTaskResumeAll+0x130>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d010      	beq.n	800e20a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e1e8:	f000 f858 	bl	800e29c <xTaskIncrementTick>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d002      	beq.n	800e1f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e1f2:	4b16      	ldr	r3, [pc, #88]	; (800e24c <xTaskResumeAll+0x12c>)
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	3b01      	subs	r3, #1
 800e1fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d1f1      	bne.n	800e1e8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800e204:	4b12      	ldr	r3, [pc, #72]	; (800e250 <xTaskResumeAll+0x130>)
 800e206:	2200      	movs	r2, #0
 800e208:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e20a:	4b10      	ldr	r3, [pc, #64]	; (800e24c <xTaskResumeAll+0x12c>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d009      	beq.n	800e226 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e212:	2301      	movs	r3, #1
 800e214:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e216:	4b0f      	ldr	r3, [pc, #60]	; (800e254 <xTaskResumeAll+0x134>)
 800e218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e21c:	601a      	str	r2, [r3, #0]
 800e21e:	f3bf 8f4f 	dsb	sy
 800e222:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e226:	f000 fead 	bl	800ef84 <vPortExitCritical>

	return xAlreadyYielded;
 800e22a:	68bb      	ldr	r3, [r7, #8]
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3710      	adds	r7, #16
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	2000069c 	.word	0x2000069c
 800e238:	20000674 	.word	0x20000674
 800e23c:	20000634 	.word	0x20000634
 800e240:	2000067c 	.word	0x2000067c
 800e244:	20000578 	.word	0x20000578
 800e248:	20000574 	.word	0x20000574
 800e24c:	20000688 	.word	0x20000688
 800e250:	20000684 	.word	0x20000684
 800e254:	e000ed04 	.word	0xe000ed04

0800e258 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e258:	b480      	push	{r7}
 800e25a:	b083      	sub	sp, #12
 800e25c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e25e:	4b05      	ldr	r3, [pc, #20]	; (800e274 <xTaskGetTickCount+0x1c>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e264:	687b      	ldr	r3, [r7, #4]
}
 800e266:	4618      	mov	r0, r3
 800e268:	370c      	adds	r7, #12
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr
 800e272:	bf00      	nop
 800e274:	20000678 	.word	0x20000678

0800e278 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b082      	sub	sp, #8
 800e27c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e27e:	f000 ff33 	bl	800f0e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e282:	2300      	movs	r3, #0
 800e284:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e286:	4b04      	ldr	r3, [pc, #16]	; (800e298 <xTaskGetTickCountFromISR+0x20>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e28c:	683b      	ldr	r3, [r7, #0]
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3708      	adds	r7, #8
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	20000678 	.word	0x20000678

0800e29c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b086      	sub	sp, #24
 800e2a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2a6:	4b4e      	ldr	r3, [pc, #312]	; (800e3e0 <xTaskIncrementTick+0x144>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	f040 808e 	bne.w	800e3cc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e2b0:	4b4c      	ldr	r3, [pc, #304]	; (800e3e4 <xTaskIncrementTick+0x148>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e2b8:	4a4a      	ldr	r2, [pc, #296]	; (800e3e4 <xTaskIncrementTick+0x148>)
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d120      	bne.n	800e306 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e2c4:	4b48      	ldr	r3, [pc, #288]	; (800e3e8 <xTaskIncrementTick+0x14c>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00a      	beq.n	800e2e4 <xTaskIncrementTick+0x48>
	__asm volatile
 800e2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d2:	f383 8811 	msr	BASEPRI, r3
 800e2d6:	f3bf 8f6f 	isb	sy
 800e2da:	f3bf 8f4f 	dsb	sy
 800e2de:	603b      	str	r3, [r7, #0]
}
 800e2e0:	bf00      	nop
 800e2e2:	e7fe      	b.n	800e2e2 <xTaskIncrementTick+0x46>
 800e2e4:	4b40      	ldr	r3, [pc, #256]	; (800e3e8 <xTaskIncrementTick+0x14c>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	60fb      	str	r3, [r7, #12]
 800e2ea:	4b40      	ldr	r3, [pc, #256]	; (800e3ec <xTaskIncrementTick+0x150>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	4a3e      	ldr	r2, [pc, #248]	; (800e3e8 <xTaskIncrementTick+0x14c>)
 800e2f0:	6013      	str	r3, [r2, #0]
 800e2f2:	4a3e      	ldr	r2, [pc, #248]	; (800e3ec <xTaskIncrementTick+0x150>)
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	6013      	str	r3, [r2, #0]
 800e2f8:	4b3d      	ldr	r3, [pc, #244]	; (800e3f0 <xTaskIncrementTick+0x154>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	4a3c      	ldr	r2, [pc, #240]	; (800e3f0 <xTaskIncrementTick+0x154>)
 800e300:	6013      	str	r3, [r2, #0]
 800e302:	f000 fa9f 	bl	800e844 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e306:	4b3b      	ldr	r3, [pc, #236]	; (800e3f4 <xTaskIncrementTick+0x158>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	693a      	ldr	r2, [r7, #16]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d348      	bcc.n	800e3a2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e310:	4b35      	ldr	r3, [pc, #212]	; (800e3e8 <xTaskIncrementTick+0x14c>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d104      	bne.n	800e324 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e31a:	4b36      	ldr	r3, [pc, #216]	; (800e3f4 <xTaskIncrementTick+0x158>)
 800e31c:	f04f 32ff 	mov.w	r2, #4294967295
 800e320:	601a      	str	r2, [r3, #0]
					break;
 800e322:	e03e      	b.n	800e3a2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e324:	4b30      	ldr	r3, [pc, #192]	; (800e3e8 <xTaskIncrementTick+0x14c>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	68db      	ldr	r3, [r3, #12]
 800e32a:	68db      	ldr	r3, [r3, #12]
 800e32c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	685b      	ldr	r3, [r3, #4]
 800e332:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e334:	693a      	ldr	r2, [r7, #16]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	429a      	cmp	r2, r3
 800e33a:	d203      	bcs.n	800e344 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e33c:	4a2d      	ldr	r2, [pc, #180]	; (800e3f4 <xTaskIncrementTick+0x158>)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e342:	e02e      	b.n	800e3a2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	3304      	adds	r3, #4
 800e348:	4618      	mov	r0, r3
 800e34a:	f7fe fcf2 	bl	800cd32 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e352:	2b00      	cmp	r3, #0
 800e354:	d004      	beq.n	800e360 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	3318      	adds	r3, #24
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7fe fce9 	bl	800cd32 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e364:	2201      	movs	r2, #1
 800e366:	409a      	lsls	r2, r3
 800e368:	4b23      	ldr	r3, [pc, #140]	; (800e3f8 <xTaskIncrementTick+0x15c>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4313      	orrs	r3, r2
 800e36e:	4a22      	ldr	r2, [pc, #136]	; (800e3f8 <xTaskIncrementTick+0x15c>)
 800e370:	6013      	str	r3, [r2, #0]
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e376:	4613      	mov	r3, r2
 800e378:	009b      	lsls	r3, r3, #2
 800e37a:	4413      	add	r3, r2
 800e37c:	009b      	lsls	r3, r3, #2
 800e37e:	4a1f      	ldr	r2, [pc, #124]	; (800e3fc <xTaskIncrementTick+0x160>)
 800e380:	441a      	add	r2, r3
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	3304      	adds	r3, #4
 800e386:	4619      	mov	r1, r3
 800e388:	4610      	mov	r0, r2
 800e38a:	f7fe fc75 	bl	800cc78 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e392:	4b1b      	ldr	r3, [pc, #108]	; (800e400 <xTaskIncrementTick+0x164>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e398:	429a      	cmp	r2, r3
 800e39a:	d3b9      	bcc.n	800e310 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e39c:	2301      	movs	r3, #1
 800e39e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3a0:	e7b6      	b.n	800e310 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e3a2:	4b17      	ldr	r3, [pc, #92]	; (800e400 <xTaskIncrementTick+0x164>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3a8:	4914      	ldr	r1, [pc, #80]	; (800e3fc <xTaskIncrementTick+0x160>)
 800e3aa:	4613      	mov	r3, r2
 800e3ac:	009b      	lsls	r3, r3, #2
 800e3ae:	4413      	add	r3, r2
 800e3b0:	009b      	lsls	r3, r3, #2
 800e3b2:	440b      	add	r3, r1
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	2b01      	cmp	r3, #1
 800e3b8:	d901      	bls.n	800e3be <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e3be:	4b11      	ldr	r3, [pc, #68]	; (800e404 <xTaskIncrementTick+0x168>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d007      	beq.n	800e3d6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	617b      	str	r3, [r7, #20]
 800e3ca:	e004      	b.n	800e3d6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e3cc:	4b0e      	ldr	r3, [pc, #56]	; (800e408 <xTaskIncrementTick+0x16c>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	4a0d      	ldr	r2, [pc, #52]	; (800e408 <xTaskIncrementTick+0x16c>)
 800e3d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e3d6:	697b      	ldr	r3, [r7, #20]
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3718      	adds	r7, #24
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	2000069c 	.word	0x2000069c
 800e3e4:	20000678 	.word	0x20000678
 800e3e8:	2000062c 	.word	0x2000062c
 800e3ec:	20000630 	.word	0x20000630
 800e3f0:	2000068c 	.word	0x2000068c
 800e3f4:	20000694 	.word	0x20000694
 800e3f8:	2000067c 	.word	0x2000067c
 800e3fc:	20000578 	.word	0x20000578
 800e400:	20000574 	.word	0x20000574
 800e404:	20000688 	.word	0x20000688
 800e408:	20000684 	.word	0x20000684

0800e40c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e40c:	b480      	push	{r7}
 800e40e:	b087      	sub	sp, #28
 800e410:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e412:	4b27      	ldr	r3, [pc, #156]	; (800e4b0 <vTaskSwitchContext+0xa4>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d003      	beq.n	800e422 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e41a:	4b26      	ldr	r3, [pc, #152]	; (800e4b4 <vTaskSwitchContext+0xa8>)
 800e41c:	2201      	movs	r2, #1
 800e41e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e420:	e03f      	b.n	800e4a2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800e422:	4b24      	ldr	r3, [pc, #144]	; (800e4b4 <vTaskSwitchContext+0xa8>)
 800e424:	2200      	movs	r2, #0
 800e426:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e428:	4b23      	ldr	r3, [pc, #140]	; (800e4b8 <vTaskSwitchContext+0xac>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	fab3 f383 	clz	r3, r3
 800e434:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e436:	7afb      	ldrb	r3, [r7, #11]
 800e438:	f1c3 031f 	rsb	r3, r3, #31
 800e43c:	617b      	str	r3, [r7, #20]
 800e43e:	491f      	ldr	r1, [pc, #124]	; (800e4bc <vTaskSwitchContext+0xb0>)
 800e440:	697a      	ldr	r2, [r7, #20]
 800e442:	4613      	mov	r3, r2
 800e444:	009b      	lsls	r3, r3, #2
 800e446:	4413      	add	r3, r2
 800e448:	009b      	lsls	r3, r3, #2
 800e44a:	440b      	add	r3, r1
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d10a      	bne.n	800e468 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e456:	f383 8811 	msr	BASEPRI, r3
 800e45a:	f3bf 8f6f 	isb	sy
 800e45e:	f3bf 8f4f 	dsb	sy
 800e462:	607b      	str	r3, [r7, #4]
}
 800e464:	bf00      	nop
 800e466:	e7fe      	b.n	800e466 <vTaskSwitchContext+0x5a>
 800e468:	697a      	ldr	r2, [r7, #20]
 800e46a:	4613      	mov	r3, r2
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	4413      	add	r3, r2
 800e470:	009b      	lsls	r3, r3, #2
 800e472:	4a12      	ldr	r2, [pc, #72]	; (800e4bc <vTaskSwitchContext+0xb0>)
 800e474:	4413      	add	r3, r2
 800e476:	613b      	str	r3, [r7, #16]
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	685a      	ldr	r2, [r3, #4]
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	605a      	str	r2, [r3, #4]
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	685a      	ldr	r2, [r3, #4]
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	3308      	adds	r3, #8
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d104      	bne.n	800e498 <vTaskSwitchContext+0x8c>
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	685a      	ldr	r2, [r3, #4]
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	605a      	str	r2, [r3, #4]
 800e498:	693b      	ldr	r3, [r7, #16]
 800e49a:	685b      	ldr	r3, [r3, #4]
 800e49c:	68db      	ldr	r3, [r3, #12]
 800e49e:	4a08      	ldr	r2, [pc, #32]	; (800e4c0 <vTaskSwitchContext+0xb4>)
 800e4a0:	6013      	str	r3, [r2, #0]
}
 800e4a2:	bf00      	nop
 800e4a4:	371c      	adds	r7, #28
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop
 800e4b0:	2000069c 	.word	0x2000069c
 800e4b4:	20000688 	.word	0x20000688
 800e4b8:	2000067c 	.word	0x2000067c
 800e4bc:	20000578 	.word	0x20000578
 800e4c0:	20000574 	.word	0x20000574

0800e4c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b084      	sub	sp, #16
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d10a      	bne.n	800e4ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d8:	f383 8811 	msr	BASEPRI, r3
 800e4dc:	f3bf 8f6f 	isb	sy
 800e4e0:	f3bf 8f4f 	dsb	sy
 800e4e4:	60fb      	str	r3, [r7, #12]
}
 800e4e6:	bf00      	nop
 800e4e8:	e7fe      	b.n	800e4e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e4ea:	4b07      	ldr	r3, [pc, #28]	; (800e508 <vTaskPlaceOnEventList+0x44>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	3318      	adds	r3, #24
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f7fe fbe4 	bl	800ccc0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e4f8:	2101      	movs	r1, #1
 800e4fa:	6838      	ldr	r0, [r7, #0]
 800e4fc:	f000 fb7e 	bl	800ebfc <prvAddCurrentTaskToDelayedList>
}
 800e500:	bf00      	nop
 800e502:	3710      	adds	r7, #16
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}
 800e508:	20000574 	.word	0x20000574

0800e50c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b086      	sub	sp, #24
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	68db      	ldr	r3, [r3, #12]
 800e518:	68db      	ldr	r3, [r3, #12]
 800e51a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d10a      	bne.n	800e538 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e526:	f383 8811 	msr	BASEPRI, r3
 800e52a:	f3bf 8f6f 	isb	sy
 800e52e:	f3bf 8f4f 	dsb	sy
 800e532:	60fb      	str	r3, [r7, #12]
}
 800e534:	bf00      	nop
 800e536:	e7fe      	b.n	800e536 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	3318      	adds	r3, #24
 800e53c:	4618      	mov	r0, r3
 800e53e:	f7fe fbf8 	bl	800cd32 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e542:	4b1d      	ldr	r3, [pc, #116]	; (800e5b8 <xTaskRemoveFromEventList+0xac>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d11c      	bne.n	800e584 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	3304      	adds	r3, #4
 800e54e:	4618      	mov	r0, r3
 800e550:	f7fe fbef 	bl	800cd32 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e558:	2201      	movs	r2, #1
 800e55a:	409a      	lsls	r2, r3
 800e55c:	4b17      	ldr	r3, [pc, #92]	; (800e5bc <xTaskRemoveFromEventList+0xb0>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4313      	orrs	r3, r2
 800e562:	4a16      	ldr	r2, [pc, #88]	; (800e5bc <xTaskRemoveFromEventList+0xb0>)
 800e564:	6013      	str	r3, [r2, #0]
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e56a:	4613      	mov	r3, r2
 800e56c:	009b      	lsls	r3, r3, #2
 800e56e:	4413      	add	r3, r2
 800e570:	009b      	lsls	r3, r3, #2
 800e572:	4a13      	ldr	r2, [pc, #76]	; (800e5c0 <xTaskRemoveFromEventList+0xb4>)
 800e574:	441a      	add	r2, r3
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	3304      	adds	r3, #4
 800e57a:	4619      	mov	r1, r3
 800e57c:	4610      	mov	r0, r2
 800e57e:	f7fe fb7b 	bl	800cc78 <vListInsertEnd>
 800e582:	e005      	b.n	800e590 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	3318      	adds	r3, #24
 800e588:	4619      	mov	r1, r3
 800e58a:	480e      	ldr	r0, [pc, #56]	; (800e5c4 <xTaskRemoveFromEventList+0xb8>)
 800e58c:	f7fe fb74 	bl	800cc78 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e594:	4b0c      	ldr	r3, [pc, #48]	; (800e5c8 <xTaskRemoveFromEventList+0xbc>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d905      	bls.n	800e5aa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e5a2:	4b0a      	ldr	r3, [pc, #40]	; (800e5cc <xTaskRemoveFromEventList+0xc0>)
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	601a      	str	r2, [r3, #0]
 800e5a8:	e001      	b.n	800e5ae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e5ae:	697b      	ldr	r3, [r7, #20]
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3718      	adds	r7, #24
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	2000069c 	.word	0x2000069c
 800e5bc:	2000067c 	.word	0x2000067c
 800e5c0:	20000578 	.word	0x20000578
 800e5c4:	20000634 	.word	0x20000634
 800e5c8:	20000574 	.word	0x20000574
 800e5cc:	20000688 	.word	0x20000688

0800e5d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e5d0:	b480      	push	{r7}
 800e5d2:	b083      	sub	sp, #12
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e5d8:	4b06      	ldr	r3, [pc, #24]	; (800e5f4 <vTaskInternalSetTimeOutState+0x24>)
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e5e0:	4b05      	ldr	r3, [pc, #20]	; (800e5f8 <vTaskInternalSetTimeOutState+0x28>)
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	605a      	str	r2, [r3, #4]
}
 800e5e8:	bf00      	nop
 800e5ea:	370c      	adds	r7, #12
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr
 800e5f4:	2000068c 	.word	0x2000068c
 800e5f8:	20000678 	.word	0x20000678

0800e5fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b088      	sub	sp, #32
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d10a      	bne.n	800e622 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e610:	f383 8811 	msr	BASEPRI, r3
 800e614:	f3bf 8f6f 	isb	sy
 800e618:	f3bf 8f4f 	dsb	sy
 800e61c:	613b      	str	r3, [r7, #16]
}
 800e61e:	bf00      	nop
 800e620:	e7fe      	b.n	800e620 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d10a      	bne.n	800e63e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e62c:	f383 8811 	msr	BASEPRI, r3
 800e630:	f3bf 8f6f 	isb	sy
 800e634:	f3bf 8f4f 	dsb	sy
 800e638:	60fb      	str	r3, [r7, #12]
}
 800e63a:	bf00      	nop
 800e63c:	e7fe      	b.n	800e63c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e63e:	f000 fc71 	bl	800ef24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e642:	4b1d      	ldr	r3, [pc, #116]	; (800e6b8 <xTaskCheckForTimeOut+0xbc>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	685b      	ldr	r3, [r3, #4]
 800e64c:	69ba      	ldr	r2, [r7, #24]
 800e64e:	1ad3      	subs	r3, r2, r3
 800e650:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e65a:	d102      	bne.n	800e662 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e65c:	2300      	movs	r3, #0
 800e65e:	61fb      	str	r3, [r7, #28]
 800e660:	e023      	b.n	800e6aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681a      	ldr	r2, [r3, #0]
 800e666:	4b15      	ldr	r3, [pc, #84]	; (800e6bc <xTaskCheckForTimeOut+0xc0>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	429a      	cmp	r2, r3
 800e66c:	d007      	beq.n	800e67e <xTaskCheckForTimeOut+0x82>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	685b      	ldr	r3, [r3, #4]
 800e672:	69ba      	ldr	r2, [r7, #24]
 800e674:	429a      	cmp	r2, r3
 800e676:	d302      	bcc.n	800e67e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e678:	2301      	movs	r3, #1
 800e67a:	61fb      	str	r3, [r7, #28]
 800e67c:	e015      	b.n	800e6aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	697a      	ldr	r2, [r7, #20]
 800e684:	429a      	cmp	r2, r3
 800e686:	d20b      	bcs.n	800e6a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	1ad2      	subs	r2, r2, r3
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f7ff ff9b 	bl	800e5d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e69a:	2300      	movs	r3, #0
 800e69c:	61fb      	str	r3, [r7, #28]
 800e69e:	e004      	b.n	800e6aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e6aa:	f000 fc6b 	bl	800ef84 <vPortExitCritical>

	return xReturn;
 800e6ae:	69fb      	ldr	r3, [r7, #28]
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3720      	adds	r7, #32
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	20000678 	.word	0x20000678
 800e6bc:	2000068c 	.word	0x2000068c

0800e6c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e6c4:	4b03      	ldr	r3, [pc, #12]	; (800e6d4 <vTaskMissedYield+0x14>)
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	601a      	str	r2, [r3, #0]
}
 800e6ca:	bf00      	nop
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr
 800e6d4:	20000688 	.word	0x20000688

0800e6d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b082      	sub	sp, #8
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e6e0:	f000 f852 	bl	800e788 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e6e4:	4b06      	ldr	r3, [pc, #24]	; (800e700 <prvIdleTask+0x28>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	d9f9      	bls.n	800e6e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e6ec:	4b05      	ldr	r3, [pc, #20]	; (800e704 <prvIdleTask+0x2c>)
 800e6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6f2:	601a      	str	r2, [r3, #0]
 800e6f4:	f3bf 8f4f 	dsb	sy
 800e6f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e6fc:	e7f0      	b.n	800e6e0 <prvIdleTask+0x8>
 800e6fe:	bf00      	nop
 800e700:	20000578 	.word	0x20000578
 800e704:	e000ed04 	.word	0xe000ed04

0800e708 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b082      	sub	sp, #8
 800e70c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e70e:	2300      	movs	r3, #0
 800e710:	607b      	str	r3, [r7, #4]
 800e712:	e00c      	b.n	800e72e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e714:	687a      	ldr	r2, [r7, #4]
 800e716:	4613      	mov	r3, r2
 800e718:	009b      	lsls	r3, r3, #2
 800e71a:	4413      	add	r3, r2
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	4a12      	ldr	r2, [pc, #72]	; (800e768 <prvInitialiseTaskLists+0x60>)
 800e720:	4413      	add	r3, r2
 800e722:	4618      	mov	r0, r3
 800e724:	f7fe fa7b 	bl	800cc1e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	3301      	adds	r3, #1
 800e72c:	607b      	str	r3, [r7, #4]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2b06      	cmp	r3, #6
 800e732:	d9ef      	bls.n	800e714 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e734:	480d      	ldr	r0, [pc, #52]	; (800e76c <prvInitialiseTaskLists+0x64>)
 800e736:	f7fe fa72 	bl	800cc1e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e73a:	480d      	ldr	r0, [pc, #52]	; (800e770 <prvInitialiseTaskLists+0x68>)
 800e73c:	f7fe fa6f 	bl	800cc1e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e740:	480c      	ldr	r0, [pc, #48]	; (800e774 <prvInitialiseTaskLists+0x6c>)
 800e742:	f7fe fa6c 	bl	800cc1e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e746:	480c      	ldr	r0, [pc, #48]	; (800e778 <prvInitialiseTaskLists+0x70>)
 800e748:	f7fe fa69 	bl	800cc1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e74c:	480b      	ldr	r0, [pc, #44]	; (800e77c <prvInitialiseTaskLists+0x74>)
 800e74e:	f7fe fa66 	bl	800cc1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e752:	4b0b      	ldr	r3, [pc, #44]	; (800e780 <prvInitialiseTaskLists+0x78>)
 800e754:	4a05      	ldr	r2, [pc, #20]	; (800e76c <prvInitialiseTaskLists+0x64>)
 800e756:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e758:	4b0a      	ldr	r3, [pc, #40]	; (800e784 <prvInitialiseTaskLists+0x7c>)
 800e75a:	4a05      	ldr	r2, [pc, #20]	; (800e770 <prvInitialiseTaskLists+0x68>)
 800e75c:	601a      	str	r2, [r3, #0]
}
 800e75e:	bf00      	nop
 800e760:	3708      	adds	r7, #8
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}
 800e766:	bf00      	nop
 800e768:	20000578 	.word	0x20000578
 800e76c:	20000604 	.word	0x20000604
 800e770:	20000618 	.word	0x20000618
 800e774:	20000634 	.word	0x20000634
 800e778:	20000648 	.word	0x20000648
 800e77c:	20000660 	.word	0x20000660
 800e780:	2000062c 	.word	0x2000062c
 800e784:	20000630 	.word	0x20000630

0800e788 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e78e:	e019      	b.n	800e7c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e790:	f000 fbc8 	bl	800ef24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e794:	4b10      	ldr	r3, [pc, #64]	; (800e7d8 <prvCheckTasksWaitingTermination+0x50>)
 800e796:	68db      	ldr	r3, [r3, #12]
 800e798:	68db      	ldr	r3, [r3, #12]
 800e79a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	3304      	adds	r3, #4
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7fe fac6 	bl	800cd32 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e7a6:	4b0d      	ldr	r3, [pc, #52]	; (800e7dc <prvCheckTasksWaitingTermination+0x54>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	3b01      	subs	r3, #1
 800e7ac:	4a0b      	ldr	r2, [pc, #44]	; (800e7dc <prvCheckTasksWaitingTermination+0x54>)
 800e7ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e7b0:	4b0b      	ldr	r3, [pc, #44]	; (800e7e0 <prvCheckTasksWaitingTermination+0x58>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	3b01      	subs	r3, #1
 800e7b6:	4a0a      	ldr	r2, [pc, #40]	; (800e7e0 <prvCheckTasksWaitingTermination+0x58>)
 800e7b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e7ba:	f000 fbe3 	bl	800ef84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 f810 	bl	800e7e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e7c4:	4b06      	ldr	r3, [pc, #24]	; (800e7e0 <prvCheckTasksWaitingTermination+0x58>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d1e1      	bne.n	800e790 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e7cc:	bf00      	nop
 800e7ce:	bf00      	nop
 800e7d0:	3708      	adds	r7, #8
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	20000648 	.word	0x20000648
 800e7dc:	20000674 	.word	0x20000674
 800e7e0:	2000065c 	.word	0x2000065c

0800e7e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b084      	sub	sp, #16
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d108      	bne.n	800e808 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f000 fd80 	bl	800f300 <vPortFree>
				vPortFree( pxTCB );
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f000 fd7d 	bl	800f300 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e806:	e018      	b.n	800e83a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e80e:	2b01      	cmp	r3, #1
 800e810:	d103      	bne.n	800e81a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f000 fd74 	bl	800f300 <vPortFree>
	}
 800e818:	e00f      	b.n	800e83a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e820:	2b02      	cmp	r3, #2
 800e822:	d00a      	beq.n	800e83a <prvDeleteTCB+0x56>
	__asm volatile
 800e824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e828:	f383 8811 	msr	BASEPRI, r3
 800e82c:	f3bf 8f6f 	isb	sy
 800e830:	f3bf 8f4f 	dsb	sy
 800e834:	60fb      	str	r3, [r7, #12]
}
 800e836:	bf00      	nop
 800e838:	e7fe      	b.n	800e838 <prvDeleteTCB+0x54>
	}
 800e83a:	bf00      	nop
 800e83c:	3710      	adds	r7, #16
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
	...

0800e844 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e844:	b480      	push	{r7}
 800e846:	b083      	sub	sp, #12
 800e848:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e84a:	4b0c      	ldr	r3, [pc, #48]	; (800e87c <prvResetNextTaskUnblockTime+0x38>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d104      	bne.n	800e85e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e854:	4b0a      	ldr	r3, [pc, #40]	; (800e880 <prvResetNextTaskUnblockTime+0x3c>)
 800e856:	f04f 32ff 	mov.w	r2, #4294967295
 800e85a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e85c:	e008      	b.n	800e870 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e85e:	4b07      	ldr	r3, [pc, #28]	; (800e87c <prvResetNextTaskUnblockTime+0x38>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	68db      	ldr	r3, [r3, #12]
 800e864:	68db      	ldr	r3, [r3, #12]
 800e866:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	4a04      	ldr	r2, [pc, #16]	; (800e880 <prvResetNextTaskUnblockTime+0x3c>)
 800e86e:	6013      	str	r3, [r2, #0]
}
 800e870:	bf00      	nop
 800e872:	370c      	adds	r7, #12
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr
 800e87c:	2000062c 	.word	0x2000062c
 800e880:	20000694 	.word	0x20000694

0800e884 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e884:	b480      	push	{r7}
 800e886:	b083      	sub	sp, #12
 800e888:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e88a:	4b0b      	ldr	r3, [pc, #44]	; (800e8b8 <xTaskGetSchedulerState+0x34>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d102      	bne.n	800e898 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e892:	2301      	movs	r3, #1
 800e894:	607b      	str	r3, [r7, #4]
 800e896:	e008      	b.n	800e8aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e898:	4b08      	ldr	r3, [pc, #32]	; (800e8bc <xTaskGetSchedulerState+0x38>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d102      	bne.n	800e8a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e8a0:	2302      	movs	r3, #2
 800e8a2:	607b      	str	r3, [r7, #4]
 800e8a4:	e001      	b.n	800e8aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e8aa:	687b      	ldr	r3, [r7, #4]
	}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	370c      	adds	r7, #12
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr
 800e8b8:	20000680 	.word	0x20000680
 800e8bc:	2000069c 	.word	0x2000069c

0800e8c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b084      	sub	sp, #16
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d05e      	beq.n	800e994 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8da:	4b31      	ldr	r3, [pc, #196]	; (800e9a0 <xTaskPriorityInherit+0xe0>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d24e      	bcs.n	800e982 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	699b      	ldr	r3, [r3, #24]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	db06      	blt.n	800e8fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8ec:	4b2c      	ldr	r3, [pc, #176]	; (800e9a0 <xTaskPriorityInherit+0xe0>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8f2:	f1c3 0207 	rsb	r2, r3, #7
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	6959      	ldr	r1, [r3, #20]
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e902:	4613      	mov	r3, r2
 800e904:	009b      	lsls	r3, r3, #2
 800e906:	4413      	add	r3, r2
 800e908:	009b      	lsls	r3, r3, #2
 800e90a:	4a26      	ldr	r2, [pc, #152]	; (800e9a4 <xTaskPriorityInherit+0xe4>)
 800e90c:	4413      	add	r3, r2
 800e90e:	4299      	cmp	r1, r3
 800e910:	d12f      	bne.n	800e972 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	3304      	adds	r3, #4
 800e916:	4618      	mov	r0, r3
 800e918:	f7fe fa0b 	bl	800cd32 <uxListRemove>
 800e91c:	4603      	mov	r3, r0
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d10a      	bne.n	800e938 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e926:	2201      	movs	r2, #1
 800e928:	fa02 f303 	lsl.w	r3, r2, r3
 800e92c:	43da      	mvns	r2, r3
 800e92e:	4b1e      	ldr	r3, [pc, #120]	; (800e9a8 <xTaskPriorityInherit+0xe8>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	4013      	ands	r3, r2
 800e934:	4a1c      	ldr	r2, [pc, #112]	; (800e9a8 <xTaskPriorityInherit+0xe8>)
 800e936:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e938:	4b19      	ldr	r3, [pc, #100]	; (800e9a0 <xTaskPriorityInherit+0xe0>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e946:	2201      	movs	r2, #1
 800e948:	409a      	lsls	r2, r3
 800e94a:	4b17      	ldr	r3, [pc, #92]	; (800e9a8 <xTaskPriorityInherit+0xe8>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	4313      	orrs	r3, r2
 800e950:	4a15      	ldr	r2, [pc, #84]	; (800e9a8 <xTaskPriorityInherit+0xe8>)
 800e952:	6013      	str	r3, [r2, #0]
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e958:	4613      	mov	r3, r2
 800e95a:	009b      	lsls	r3, r3, #2
 800e95c:	4413      	add	r3, r2
 800e95e:	009b      	lsls	r3, r3, #2
 800e960:	4a10      	ldr	r2, [pc, #64]	; (800e9a4 <xTaskPriorityInherit+0xe4>)
 800e962:	441a      	add	r2, r3
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	3304      	adds	r3, #4
 800e968:	4619      	mov	r1, r3
 800e96a:	4610      	mov	r0, r2
 800e96c:	f7fe f984 	bl	800cc78 <vListInsertEnd>
 800e970:	e004      	b.n	800e97c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e972:	4b0b      	ldr	r3, [pc, #44]	; (800e9a0 <xTaskPriorityInherit+0xe0>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e97c:	2301      	movs	r3, #1
 800e97e:	60fb      	str	r3, [r7, #12]
 800e980:	e008      	b.n	800e994 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e986:	4b06      	ldr	r3, [pc, #24]	; (800e9a0 <xTaskPriorityInherit+0xe0>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d201      	bcs.n	800e994 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e990:	2301      	movs	r3, #1
 800e992:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e994:	68fb      	ldr	r3, [r7, #12]
	}
 800e996:	4618      	mov	r0, r3
 800e998:	3710      	adds	r7, #16
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	20000574 	.word	0x20000574
 800e9a4:	20000578 	.word	0x20000578
 800e9a8:	2000067c 	.word	0x2000067c

0800e9ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b086      	sub	sp, #24
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d06e      	beq.n	800eaa0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e9c2:	4b3a      	ldr	r3, [pc, #232]	; (800eaac <xTaskPriorityDisinherit+0x100>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	693a      	ldr	r2, [r7, #16]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d00a      	beq.n	800e9e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d0:	f383 8811 	msr	BASEPRI, r3
 800e9d4:	f3bf 8f6f 	isb	sy
 800e9d8:	f3bf 8f4f 	dsb	sy
 800e9dc:	60fb      	str	r3, [r7, #12]
}
 800e9de:	bf00      	nop
 800e9e0:	e7fe      	b.n	800e9e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d10a      	bne.n	800ea00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ee:	f383 8811 	msr	BASEPRI, r3
 800e9f2:	f3bf 8f6f 	isb	sy
 800e9f6:	f3bf 8f4f 	dsb	sy
 800e9fa:	60bb      	str	r3, [r7, #8]
}
 800e9fc:	bf00      	nop
 800e9fe:	e7fe      	b.n	800e9fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea04:	1e5a      	subs	r2, r3, #1
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d044      	beq.n	800eaa0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d140      	bne.n	800eaa0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	3304      	adds	r3, #4
 800ea22:	4618      	mov	r0, r3
 800ea24:	f7fe f985 	bl	800cd32 <uxListRemove>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d115      	bne.n	800ea5a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea32:	491f      	ldr	r1, [pc, #124]	; (800eab0 <xTaskPriorityDisinherit+0x104>)
 800ea34:	4613      	mov	r3, r2
 800ea36:	009b      	lsls	r3, r3, #2
 800ea38:	4413      	add	r3, r2
 800ea3a:	009b      	lsls	r3, r3, #2
 800ea3c:	440b      	add	r3, r1
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d10a      	bne.n	800ea5a <xTaskPriorityDisinherit+0xae>
 800ea44:	693b      	ldr	r3, [r7, #16]
 800ea46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea48:	2201      	movs	r2, #1
 800ea4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ea4e:	43da      	mvns	r2, r3
 800ea50:	4b18      	ldr	r3, [pc, #96]	; (800eab4 <xTaskPriorityDisinherit+0x108>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4013      	ands	r3, r2
 800ea56:	4a17      	ldr	r2, [pc, #92]	; (800eab4 <xTaskPriorityDisinherit+0x108>)
 800ea58:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea66:	f1c3 0207 	rsb	r2, r3, #7
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea72:	2201      	movs	r2, #1
 800ea74:	409a      	lsls	r2, r3
 800ea76:	4b0f      	ldr	r3, [pc, #60]	; (800eab4 <xTaskPriorityDisinherit+0x108>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	4313      	orrs	r3, r2
 800ea7c:	4a0d      	ldr	r2, [pc, #52]	; (800eab4 <xTaskPriorityDisinherit+0x108>)
 800ea7e:	6013      	str	r3, [r2, #0]
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea84:	4613      	mov	r3, r2
 800ea86:	009b      	lsls	r3, r3, #2
 800ea88:	4413      	add	r3, r2
 800ea8a:	009b      	lsls	r3, r3, #2
 800ea8c:	4a08      	ldr	r2, [pc, #32]	; (800eab0 <xTaskPriorityDisinherit+0x104>)
 800ea8e:	441a      	add	r2, r3
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	3304      	adds	r3, #4
 800ea94:	4619      	mov	r1, r3
 800ea96:	4610      	mov	r0, r2
 800ea98:	f7fe f8ee 	bl	800cc78 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eaa0:	697b      	ldr	r3, [r7, #20]
	}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3718      	adds	r7, #24
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	20000574 	.word	0x20000574
 800eab0:	20000578 	.word	0x20000578
 800eab4:	2000067c 	.word	0x2000067c

0800eab8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b088      	sub	sp, #32
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800eac6:	2301      	movs	r3, #1
 800eac8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d077      	beq.n	800ebc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d10a      	bne.n	800eaee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ead8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eadc:	f383 8811 	msr	BASEPRI, r3
 800eae0:	f3bf 8f6f 	isb	sy
 800eae4:	f3bf 8f4f 	dsb	sy
 800eae8:	60fb      	str	r3, [r7, #12]
}
 800eaea:	bf00      	nop
 800eaec:	e7fe      	b.n	800eaec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eaee:	69bb      	ldr	r3, [r7, #24]
 800eaf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaf2:	683a      	ldr	r2, [r7, #0]
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d902      	bls.n	800eafe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	61fb      	str	r3, [r7, #28]
 800eafc:	e002      	b.n	800eb04 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800eafe:	69bb      	ldr	r3, [r7, #24]
 800eb00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb02:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800eb04:	69bb      	ldr	r3, [r7, #24]
 800eb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb08:	69fa      	ldr	r2, [r7, #28]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d058      	beq.n	800ebc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eb0e:	69bb      	ldr	r3, [r7, #24]
 800eb10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb12:	697a      	ldr	r2, [r7, #20]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d153      	bne.n	800ebc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800eb18:	4b2b      	ldr	r3, [pc, #172]	; (800ebc8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	69ba      	ldr	r2, [r7, #24]
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	d10a      	bne.n	800eb38 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800eb22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb26:	f383 8811 	msr	BASEPRI, r3
 800eb2a:	f3bf 8f6f 	isb	sy
 800eb2e:	f3bf 8f4f 	dsb	sy
 800eb32:	60bb      	str	r3, [r7, #8]
}
 800eb34:	bf00      	nop
 800eb36:	e7fe      	b.n	800eb36 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800eb38:	69bb      	ldr	r3, [r7, #24]
 800eb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb3c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800eb3e:	69bb      	ldr	r3, [r7, #24]
 800eb40:	69fa      	ldr	r2, [r7, #28]
 800eb42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eb44:	69bb      	ldr	r3, [r7, #24]
 800eb46:	699b      	ldr	r3, [r3, #24]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	db04      	blt.n	800eb56 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	f1c3 0207 	rsb	r2, r3, #7
 800eb52:	69bb      	ldr	r3, [r7, #24]
 800eb54:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eb56:	69bb      	ldr	r3, [r7, #24]
 800eb58:	6959      	ldr	r1, [r3, #20]
 800eb5a:	693a      	ldr	r2, [r7, #16]
 800eb5c:	4613      	mov	r3, r2
 800eb5e:	009b      	lsls	r3, r3, #2
 800eb60:	4413      	add	r3, r2
 800eb62:	009b      	lsls	r3, r3, #2
 800eb64:	4a19      	ldr	r2, [pc, #100]	; (800ebcc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800eb66:	4413      	add	r3, r2
 800eb68:	4299      	cmp	r1, r3
 800eb6a:	d129      	bne.n	800ebc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb6c:	69bb      	ldr	r3, [r7, #24]
 800eb6e:	3304      	adds	r3, #4
 800eb70:	4618      	mov	r0, r3
 800eb72:	f7fe f8de 	bl	800cd32 <uxListRemove>
 800eb76:	4603      	mov	r3, r0
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d10a      	bne.n	800eb92 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800eb7c:	69bb      	ldr	r3, [r7, #24]
 800eb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb80:	2201      	movs	r2, #1
 800eb82:	fa02 f303 	lsl.w	r3, r2, r3
 800eb86:	43da      	mvns	r2, r3
 800eb88:	4b11      	ldr	r3, [pc, #68]	; (800ebd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	4013      	ands	r3, r2
 800eb8e:	4a10      	ldr	r2, [pc, #64]	; (800ebd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800eb90:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eb92:	69bb      	ldr	r3, [r7, #24]
 800eb94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb96:	2201      	movs	r2, #1
 800eb98:	409a      	lsls	r2, r3
 800eb9a:	4b0d      	ldr	r3, [pc, #52]	; (800ebd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	4313      	orrs	r3, r2
 800eba0:	4a0b      	ldr	r2, [pc, #44]	; (800ebd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800eba2:	6013      	str	r3, [r2, #0]
 800eba4:	69bb      	ldr	r3, [r7, #24]
 800eba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eba8:	4613      	mov	r3, r2
 800ebaa:	009b      	lsls	r3, r3, #2
 800ebac:	4413      	add	r3, r2
 800ebae:	009b      	lsls	r3, r3, #2
 800ebb0:	4a06      	ldr	r2, [pc, #24]	; (800ebcc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ebb2:	441a      	add	r2, r3
 800ebb4:	69bb      	ldr	r3, [r7, #24]
 800ebb6:	3304      	adds	r3, #4
 800ebb8:	4619      	mov	r1, r3
 800ebba:	4610      	mov	r0, r2
 800ebbc:	f7fe f85c 	bl	800cc78 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ebc0:	bf00      	nop
 800ebc2:	3720      	adds	r7, #32
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}
 800ebc8:	20000574 	.word	0x20000574
 800ebcc:	20000578 	.word	0x20000578
 800ebd0:	2000067c 	.word	0x2000067c

0800ebd4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ebd4:	b480      	push	{r7}
 800ebd6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ebd8:	4b07      	ldr	r3, [pc, #28]	; (800ebf8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d004      	beq.n	800ebea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ebe0:	4b05      	ldr	r3, [pc, #20]	; (800ebf8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ebe6:	3201      	adds	r2, #1
 800ebe8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ebea:	4b03      	ldr	r3, [pc, #12]	; (800ebf8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ebec:	681b      	ldr	r3, [r3, #0]
	}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr
 800ebf8:	20000574 	.word	0x20000574

0800ebfc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b084      	sub	sp, #16
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ec06:	4b29      	ldr	r3, [pc, #164]	; (800ecac <prvAddCurrentTaskToDelayedList+0xb0>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec0c:	4b28      	ldr	r3, [pc, #160]	; (800ecb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	3304      	adds	r3, #4
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fe f88d 	bl	800cd32 <uxListRemove>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d10b      	bne.n	800ec36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ec1e:	4b24      	ldr	r3, [pc, #144]	; (800ecb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec24:	2201      	movs	r2, #1
 800ec26:	fa02 f303 	lsl.w	r3, r2, r3
 800ec2a:	43da      	mvns	r2, r3
 800ec2c:	4b21      	ldr	r3, [pc, #132]	; (800ecb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4013      	ands	r3, r2
 800ec32:	4a20      	ldr	r2, [pc, #128]	; (800ecb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ec34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec3c:	d10a      	bne.n	800ec54 <prvAddCurrentTaskToDelayedList+0x58>
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d007      	beq.n	800ec54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec44:	4b1a      	ldr	r3, [pc, #104]	; (800ecb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	3304      	adds	r3, #4
 800ec4a:	4619      	mov	r1, r3
 800ec4c:	481a      	ldr	r0, [pc, #104]	; (800ecb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ec4e:	f7fe f813 	bl	800cc78 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ec52:	e026      	b.n	800eca2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ec54:	68fa      	ldr	r2, [r7, #12]
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	4413      	add	r3, r2
 800ec5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ec5c:	4b14      	ldr	r3, [pc, #80]	; (800ecb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	68ba      	ldr	r2, [r7, #8]
 800ec62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ec64:	68ba      	ldr	r2, [r7, #8]
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d209      	bcs.n	800ec80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec6c:	4b13      	ldr	r3, [pc, #76]	; (800ecbc <prvAddCurrentTaskToDelayedList+0xc0>)
 800ec6e:	681a      	ldr	r2, [r3, #0]
 800ec70:	4b0f      	ldr	r3, [pc, #60]	; (800ecb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	3304      	adds	r3, #4
 800ec76:	4619      	mov	r1, r3
 800ec78:	4610      	mov	r0, r2
 800ec7a:	f7fe f821 	bl	800ccc0 <vListInsert>
}
 800ec7e:	e010      	b.n	800eca2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec80:	4b0f      	ldr	r3, [pc, #60]	; (800ecc0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ec82:	681a      	ldr	r2, [r3, #0]
 800ec84:	4b0a      	ldr	r3, [pc, #40]	; (800ecb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	3304      	adds	r3, #4
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	4610      	mov	r0, r2
 800ec8e:	f7fe f817 	bl	800ccc0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ec92:	4b0c      	ldr	r3, [pc, #48]	; (800ecc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	68ba      	ldr	r2, [r7, #8]
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d202      	bcs.n	800eca2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ec9c:	4a09      	ldr	r2, [pc, #36]	; (800ecc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	6013      	str	r3, [r2, #0]
}
 800eca2:	bf00      	nop
 800eca4:	3710      	adds	r7, #16
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}
 800ecaa:	bf00      	nop
 800ecac:	20000678 	.word	0x20000678
 800ecb0:	20000574 	.word	0x20000574
 800ecb4:	2000067c 	.word	0x2000067c
 800ecb8:	20000660 	.word	0x20000660
 800ecbc:	20000630 	.word	0x20000630
 800ecc0:	2000062c 	.word	0x2000062c
 800ecc4:	20000694 	.word	0x20000694

0800ecc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	60f8      	str	r0, [r7, #12]
 800ecd0:	60b9      	str	r1, [r7, #8]
 800ecd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	3b04      	subs	r3, #4
 800ecd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ece0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	3b04      	subs	r3, #4
 800ece6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	f023 0201 	bic.w	r2, r3, #1
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	3b04      	subs	r3, #4
 800ecf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ecf8:	4a0c      	ldr	r2, [pc, #48]	; (800ed2c <pxPortInitialiseStack+0x64>)
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	3b14      	subs	r3, #20
 800ed02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ed04:	687a      	ldr	r2, [r7, #4]
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	3b04      	subs	r3, #4
 800ed0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f06f 0202 	mvn.w	r2, #2
 800ed16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	3b20      	subs	r3, #32
 800ed1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3714      	adds	r7, #20
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr
 800ed2c:	0800ed31 	.word	0x0800ed31

0800ed30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ed30:	b480      	push	{r7}
 800ed32:	b085      	sub	sp, #20
 800ed34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ed36:	2300      	movs	r3, #0
 800ed38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ed3a:	4b12      	ldr	r3, [pc, #72]	; (800ed84 <prvTaskExitError+0x54>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed42:	d00a      	beq.n	800ed5a <prvTaskExitError+0x2a>
	__asm volatile
 800ed44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed48:	f383 8811 	msr	BASEPRI, r3
 800ed4c:	f3bf 8f6f 	isb	sy
 800ed50:	f3bf 8f4f 	dsb	sy
 800ed54:	60fb      	str	r3, [r7, #12]
}
 800ed56:	bf00      	nop
 800ed58:	e7fe      	b.n	800ed58 <prvTaskExitError+0x28>
	__asm volatile
 800ed5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed5e:	f383 8811 	msr	BASEPRI, r3
 800ed62:	f3bf 8f6f 	isb	sy
 800ed66:	f3bf 8f4f 	dsb	sy
 800ed6a:	60bb      	str	r3, [r7, #8]
}
 800ed6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ed6e:	bf00      	nop
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d0fc      	beq.n	800ed70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ed76:	bf00      	nop
 800ed78:	bf00      	nop
 800ed7a:	3714      	adds	r7, #20
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed82:	4770      	bx	lr
 800ed84:	20000138 	.word	0x20000138
	...

0800ed90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ed90:	4b07      	ldr	r3, [pc, #28]	; (800edb0 <pxCurrentTCBConst2>)
 800ed92:	6819      	ldr	r1, [r3, #0]
 800ed94:	6808      	ldr	r0, [r1, #0]
 800ed96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed9a:	f380 8809 	msr	PSP, r0
 800ed9e:	f3bf 8f6f 	isb	sy
 800eda2:	f04f 0000 	mov.w	r0, #0
 800eda6:	f380 8811 	msr	BASEPRI, r0
 800edaa:	4770      	bx	lr
 800edac:	f3af 8000 	nop.w

0800edb0 <pxCurrentTCBConst2>:
 800edb0:	20000574 	.word	0x20000574
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800edb4:	bf00      	nop
 800edb6:	bf00      	nop

0800edb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800edb8:	4808      	ldr	r0, [pc, #32]	; (800eddc <prvPortStartFirstTask+0x24>)
 800edba:	6800      	ldr	r0, [r0, #0]
 800edbc:	6800      	ldr	r0, [r0, #0]
 800edbe:	f380 8808 	msr	MSP, r0
 800edc2:	f04f 0000 	mov.w	r0, #0
 800edc6:	f380 8814 	msr	CONTROL, r0
 800edca:	b662      	cpsie	i
 800edcc:	b661      	cpsie	f
 800edce:	f3bf 8f4f 	dsb	sy
 800edd2:	f3bf 8f6f 	isb	sy
 800edd6:	df00      	svc	0
 800edd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800edda:	bf00      	nop
 800eddc:	e000ed08 	.word	0xe000ed08

0800ede0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b086      	sub	sp, #24
 800ede4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ede6:	4b46      	ldr	r3, [pc, #280]	; (800ef00 <xPortStartScheduler+0x120>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	4a46      	ldr	r2, [pc, #280]	; (800ef04 <xPortStartScheduler+0x124>)
 800edec:	4293      	cmp	r3, r2
 800edee:	d10a      	bne.n	800ee06 <xPortStartScheduler+0x26>
	__asm volatile
 800edf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf4:	f383 8811 	msr	BASEPRI, r3
 800edf8:	f3bf 8f6f 	isb	sy
 800edfc:	f3bf 8f4f 	dsb	sy
 800ee00:	613b      	str	r3, [r7, #16]
}
 800ee02:	bf00      	nop
 800ee04:	e7fe      	b.n	800ee04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ee06:	4b3e      	ldr	r3, [pc, #248]	; (800ef00 <xPortStartScheduler+0x120>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	4a3f      	ldr	r2, [pc, #252]	; (800ef08 <xPortStartScheduler+0x128>)
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	d10a      	bne.n	800ee26 <xPortStartScheduler+0x46>
	__asm volatile
 800ee10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee14:	f383 8811 	msr	BASEPRI, r3
 800ee18:	f3bf 8f6f 	isb	sy
 800ee1c:	f3bf 8f4f 	dsb	sy
 800ee20:	60fb      	str	r3, [r7, #12]
}
 800ee22:	bf00      	nop
 800ee24:	e7fe      	b.n	800ee24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ee26:	4b39      	ldr	r3, [pc, #228]	; (800ef0c <xPortStartScheduler+0x12c>)
 800ee28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	781b      	ldrb	r3, [r3, #0]
 800ee2e:	b2db      	uxtb	r3, r3
 800ee30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	22ff      	movs	r2, #255	; 0xff
 800ee36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	b2db      	uxtb	r3, r3
 800ee3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ee40:	78fb      	ldrb	r3, [r7, #3]
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ee48:	b2da      	uxtb	r2, r3
 800ee4a:	4b31      	ldr	r3, [pc, #196]	; (800ef10 <xPortStartScheduler+0x130>)
 800ee4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ee4e:	4b31      	ldr	r3, [pc, #196]	; (800ef14 <xPortStartScheduler+0x134>)
 800ee50:	2207      	movs	r2, #7
 800ee52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ee54:	e009      	b.n	800ee6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ee56:	4b2f      	ldr	r3, [pc, #188]	; (800ef14 <xPortStartScheduler+0x134>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	3b01      	subs	r3, #1
 800ee5c:	4a2d      	ldr	r2, [pc, #180]	; (800ef14 <xPortStartScheduler+0x134>)
 800ee5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ee60:	78fb      	ldrb	r3, [r7, #3]
 800ee62:	b2db      	uxtb	r3, r3
 800ee64:	005b      	lsls	r3, r3, #1
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ee6a:	78fb      	ldrb	r3, [r7, #3]
 800ee6c:	b2db      	uxtb	r3, r3
 800ee6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee72:	2b80      	cmp	r3, #128	; 0x80
 800ee74:	d0ef      	beq.n	800ee56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ee76:	4b27      	ldr	r3, [pc, #156]	; (800ef14 <xPortStartScheduler+0x134>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	f1c3 0307 	rsb	r3, r3, #7
 800ee7e:	2b04      	cmp	r3, #4
 800ee80:	d00a      	beq.n	800ee98 <xPortStartScheduler+0xb8>
	__asm volatile
 800ee82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee86:	f383 8811 	msr	BASEPRI, r3
 800ee8a:	f3bf 8f6f 	isb	sy
 800ee8e:	f3bf 8f4f 	dsb	sy
 800ee92:	60bb      	str	r3, [r7, #8]
}
 800ee94:	bf00      	nop
 800ee96:	e7fe      	b.n	800ee96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ee98:	4b1e      	ldr	r3, [pc, #120]	; (800ef14 <xPortStartScheduler+0x134>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	021b      	lsls	r3, r3, #8
 800ee9e:	4a1d      	ldr	r2, [pc, #116]	; (800ef14 <xPortStartScheduler+0x134>)
 800eea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eea2:	4b1c      	ldr	r3, [pc, #112]	; (800ef14 <xPortStartScheduler+0x134>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eeaa:	4a1a      	ldr	r2, [pc, #104]	; (800ef14 <xPortStartScheduler+0x134>)
 800eeac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	b2da      	uxtb	r2, r3
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eeb6:	4b18      	ldr	r3, [pc, #96]	; (800ef18 <xPortStartScheduler+0x138>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	4a17      	ldr	r2, [pc, #92]	; (800ef18 <xPortStartScheduler+0x138>)
 800eebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eec2:	4b15      	ldr	r3, [pc, #84]	; (800ef18 <xPortStartScheduler+0x138>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a14      	ldr	r2, [pc, #80]	; (800ef18 <xPortStartScheduler+0x138>)
 800eec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800eecc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eece:	f000 f8dd 	bl	800f08c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eed2:	4b12      	ldr	r3, [pc, #72]	; (800ef1c <xPortStartScheduler+0x13c>)
 800eed4:	2200      	movs	r2, #0
 800eed6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800eed8:	f000 f8fc 	bl	800f0d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800eedc:	4b10      	ldr	r3, [pc, #64]	; (800ef20 <xPortStartScheduler+0x140>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	4a0f      	ldr	r2, [pc, #60]	; (800ef20 <xPortStartScheduler+0x140>)
 800eee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800eee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800eee8:	f7ff ff66 	bl	800edb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800eeec:	f7ff fa8e 	bl	800e40c <vTaskSwitchContext>
	prvTaskExitError();
 800eef0:	f7ff ff1e 	bl	800ed30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800eef4:	2300      	movs	r3, #0
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3718      	adds	r7, #24
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	e000ed00 	.word	0xe000ed00
 800ef04:	410fc271 	.word	0x410fc271
 800ef08:	410fc270 	.word	0x410fc270
 800ef0c:	e000e400 	.word	0xe000e400
 800ef10:	200006a0 	.word	0x200006a0
 800ef14:	200006a4 	.word	0x200006a4
 800ef18:	e000ed20 	.word	0xe000ed20
 800ef1c:	20000138 	.word	0x20000138
 800ef20:	e000ef34 	.word	0xe000ef34

0800ef24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ef24:	b480      	push	{r7}
 800ef26:	b083      	sub	sp, #12
 800ef28:	af00      	add	r7, sp, #0
	__asm volatile
 800ef2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef2e:	f383 8811 	msr	BASEPRI, r3
 800ef32:	f3bf 8f6f 	isb	sy
 800ef36:	f3bf 8f4f 	dsb	sy
 800ef3a:	607b      	str	r3, [r7, #4]
}
 800ef3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ef3e:	4b0f      	ldr	r3, [pc, #60]	; (800ef7c <vPortEnterCritical+0x58>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	3301      	adds	r3, #1
 800ef44:	4a0d      	ldr	r2, [pc, #52]	; (800ef7c <vPortEnterCritical+0x58>)
 800ef46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ef48:	4b0c      	ldr	r3, [pc, #48]	; (800ef7c <vPortEnterCritical+0x58>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	2b01      	cmp	r3, #1
 800ef4e:	d10f      	bne.n	800ef70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ef50:	4b0b      	ldr	r3, [pc, #44]	; (800ef80 <vPortEnterCritical+0x5c>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	b2db      	uxtb	r3, r3
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d00a      	beq.n	800ef70 <vPortEnterCritical+0x4c>
	__asm volatile
 800ef5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef5e:	f383 8811 	msr	BASEPRI, r3
 800ef62:	f3bf 8f6f 	isb	sy
 800ef66:	f3bf 8f4f 	dsb	sy
 800ef6a:	603b      	str	r3, [r7, #0]
}
 800ef6c:	bf00      	nop
 800ef6e:	e7fe      	b.n	800ef6e <vPortEnterCritical+0x4a>
	}
}
 800ef70:	bf00      	nop
 800ef72:	370c      	adds	r7, #12
 800ef74:	46bd      	mov	sp, r7
 800ef76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7a:	4770      	bx	lr
 800ef7c:	20000138 	.word	0x20000138
 800ef80:	e000ed04 	.word	0xe000ed04

0800ef84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ef84:	b480      	push	{r7}
 800ef86:	b083      	sub	sp, #12
 800ef88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ef8a:	4b12      	ldr	r3, [pc, #72]	; (800efd4 <vPortExitCritical+0x50>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d10a      	bne.n	800efa8 <vPortExitCritical+0x24>
	__asm volatile
 800ef92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef96:	f383 8811 	msr	BASEPRI, r3
 800ef9a:	f3bf 8f6f 	isb	sy
 800ef9e:	f3bf 8f4f 	dsb	sy
 800efa2:	607b      	str	r3, [r7, #4]
}
 800efa4:	bf00      	nop
 800efa6:	e7fe      	b.n	800efa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800efa8:	4b0a      	ldr	r3, [pc, #40]	; (800efd4 <vPortExitCritical+0x50>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	3b01      	subs	r3, #1
 800efae:	4a09      	ldr	r2, [pc, #36]	; (800efd4 <vPortExitCritical+0x50>)
 800efb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800efb2:	4b08      	ldr	r3, [pc, #32]	; (800efd4 <vPortExitCritical+0x50>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d105      	bne.n	800efc6 <vPortExitCritical+0x42>
 800efba:	2300      	movs	r3, #0
 800efbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	f383 8811 	msr	BASEPRI, r3
}
 800efc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800efc6:	bf00      	nop
 800efc8:	370c      	adds	r7, #12
 800efca:	46bd      	mov	sp, r7
 800efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd0:	4770      	bx	lr
 800efd2:	bf00      	nop
 800efd4:	20000138 	.word	0x20000138
	...

0800efe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800efe0:	f3ef 8009 	mrs	r0, PSP
 800efe4:	f3bf 8f6f 	isb	sy
 800efe8:	4b15      	ldr	r3, [pc, #84]	; (800f040 <pxCurrentTCBConst>)
 800efea:	681a      	ldr	r2, [r3, #0]
 800efec:	f01e 0f10 	tst.w	lr, #16
 800eff0:	bf08      	it	eq
 800eff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800effa:	6010      	str	r0, [r2, #0]
 800effc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f000:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f004:	f380 8811 	msr	BASEPRI, r0
 800f008:	f3bf 8f4f 	dsb	sy
 800f00c:	f3bf 8f6f 	isb	sy
 800f010:	f7ff f9fc 	bl	800e40c <vTaskSwitchContext>
 800f014:	f04f 0000 	mov.w	r0, #0
 800f018:	f380 8811 	msr	BASEPRI, r0
 800f01c:	bc09      	pop	{r0, r3}
 800f01e:	6819      	ldr	r1, [r3, #0]
 800f020:	6808      	ldr	r0, [r1, #0]
 800f022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f026:	f01e 0f10 	tst.w	lr, #16
 800f02a:	bf08      	it	eq
 800f02c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f030:	f380 8809 	msr	PSP, r0
 800f034:	f3bf 8f6f 	isb	sy
 800f038:	4770      	bx	lr
 800f03a:	bf00      	nop
 800f03c:	f3af 8000 	nop.w

0800f040 <pxCurrentTCBConst>:
 800f040:	20000574 	.word	0x20000574
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f044:	bf00      	nop
 800f046:	bf00      	nop

0800f048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b082      	sub	sp, #8
 800f04c:	af00      	add	r7, sp, #0
	__asm volatile
 800f04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f052:	f383 8811 	msr	BASEPRI, r3
 800f056:	f3bf 8f6f 	isb	sy
 800f05a:	f3bf 8f4f 	dsb	sy
 800f05e:	607b      	str	r3, [r7, #4]
}
 800f060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f062:	f7ff f91b 	bl	800e29c <xTaskIncrementTick>
 800f066:	4603      	mov	r3, r0
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d003      	beq.n	800f074 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f06c:	4b06      	ldr	r3, [pc, #24]	; (800f088 <SysTick_Handler+0x40>)
 800f06e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f072:	601a      	str	r2, [r3, #0]
 800f074:	2300      	movs	r3, #0
 800f076:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	f383 8811 	msr	BASEPRI, r3
}
 800f07e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f080:	bf00      	nop
 800f082:	3708      	adds	r7, #8
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}
 800f088:	e000ed04 	.word	0xe000ed04

0800f08c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f08c:	b480      	push	{r7}
 800f08e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f090:	4b0b      	ldr	r3, [pc, #44]	; (800f0c0 <vPortSetupTimerInterrupt+0x34>)
 800f092:	2200      	movs	r2, #0
 800f094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f096:	4b0b      	ldr	r3, [pc, #44]	; (800f0c4 <vPortSetupTimerInterrupt+0x38>)
 800f098:	2200      	movs	r2, #0
 800f09a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f09c:	4b0a      	ldr	r3, [pc, #40]	; (800f0c8 <vPortSetupTimerInterrupt+0x3c>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	4a0a      	ldr	r2, [pc, #40]	; (800f0cc <vPortSetupTimerInterrupt+0x40>)
 800f0a2:	fba2 2303 	umull	r2, r3, r2, r3
 800f0a6:	099b      	lsrs	r3, r3, #6
 800f0a8:	4a09      	ldr	r2, [pc, #36]	; (800f0d0 <vPortSetupTimerInterrupt+0x44>)
 800f0aa:	3b01      	subs	r3, #1
 800f0ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f0ae:	4b04      	ldr	r3, [pc, #16]	; (800f0c0 <vPortSetupTimerInterrupt+0x34>)
 800f0b0:	2207      	movs	r2, #7
 800f0b2:	601a      	str	r2, [r3, #0]
}
 800f0b4:	bf00      	nop
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0bc:	4770      	bx	lr
 800f0be:	bf00      	nop
 800f0c0:	e000e010 	.word	0xe000e010
 800f0c4:	e000e018 	.word	0xe000e018
 800f0c8:	2000001c 	.word	0x2000001c
 800f0cc:	10624dd3 	.word	0x10624dd3
 800f0d0:	e000e014 	.word	0xe000e014

0800f0d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f0d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f0e4 <vPortEnableVFP+0x10>
 800f0d8:	6801      	ldr	r1, [r0, #0]
 800f0da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f0de:	6001      	str	r1, [r0, #0]
 800f0e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f0e2:	bf00      	nop
 800f0e4:	e000ed88 	.word	0xe000ed88

0800f0e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b085      	sub	sp, #20
 800f0ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f0ee:	f3ef 8305 	mrs	r3, IPSR
 800f0f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	2b0f      	cmp	r3, #15
 800f0f8:	d914      	bls.n	800f124 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f0fa:	4a17      	ldr	r2, [pc, #92]	; (800f158 <vPortValidateInterruptPriority+0x70>)
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	4413      	add	r3, r2
 800f100:	781b      	ldrb	r3, [r3, #0]
 800f102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f104:	4b15      	ldr	r3, [pc, #84]	; (800f15c <vPortValidateInterruptPriority+0x74>)
 800f106:	781b      	ldrb	r3, [r3, #0]
 800f108:	7afa      	ldrb	r2, [r7, #11]
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d20a      	bcs.n	800f124 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f112:	f383 8811 	msr	BASEPRI, r3
 800f116:	f3bf 8f6f 	isb	sy
 800f11a:	f3bf 8f4f 	dsb	sy
 800f11e:	607b      	str	r3, [r7, #4]
}
 800f120:	bf00      	nop
 800f122:	e7fe      	b.n	800f122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f124:	4b0e      	ldr	r3, [pc, #56]	; (800f160 <vPortValidateInterruptPriority+0x78>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f12c:	4b0d      	ldr	r3, [pc, #52]	; (800f164 <vPortValidateInterruptPriority+0x7c>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	429a      	cmp	r2, r3
 800f132:	d90a      	bls.n	800f14a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f138:	f383 8811 	msr	BASEPRI, r3
 800f13c:	f3bf 8f6f 	isb	sy
 800f140:	f3bf 8f4f 	dsb	sy
 800f144:	603b      	str	r3, [r7, #0]
}
 800f146:	bf00      	nop
 800f148:	e7fe      	b.n	800f148 <vPortValidateInterruptPriority+0x60>
	}
 800f14a:	bf00      	nop
 800f14c:	3714      	adds	r7, #20
 800f14e:	46bd      	mov	sp, r7
 800f150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f154:	4770      	bx	lr
 800f156:	bf00      	nop
 800f158:	e000e3f0 	.word	0xe000e3f0
 800f15c:	200006a0 	.word	0x200006a0
 800f160:	e000ed0c 	.word	0xe000ed0c
 800f164:	200006a4 	.word	0x200006a4

0800f168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b08a      	sub	sp, #40	; 0x28
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f170:	2300      	movs	r3, #0
 800f172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f174:	f7fe ffc6 	bl	800e104 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f178:	4b5b      	ldr	r3, [pc, #364]	; (800f2e8 <pvPortMalloc+0x180>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d101      	bne.n	800f184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f180:	f000 f920 	bl	800f3c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f184:	4b59      	ldr	r3, [pc, #356]	; (800f2ec <pvPortMalloc+0x184>)
 800f186:	681a      	ldr	r2, [r3, #0]
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	4013      	ands	r3, r2
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	f040 8093 	bne.w	800f2b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d01d      	beq.n	800f1d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f198:	2208      	movs	r2, #8
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	4413      	add	r3, r2
 800f19e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f003 0307 	and.w	r3, r3, #7
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d014      	beq.n	800f1d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f023 0307 	bic.w	r3, r3, #7
 800f1b0:	3308      	adds	r3, #8
 800f1b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f003 0307 	and.w	r3, r3, #7
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d00a      	beq.n	800f1d4 <pvPortMalloc+0x6c>
	__asm volatile
 800f1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1c2:	f383 8811 	msr	BASEPRI, r3
 800f1c6:	f3bf 8f6f 	isb	sy
 800f1ca:	f3bf 8f4f 	dsb	sy
 800f1ce:	617b      	str	r3, [r7, #20]
}
 800f1d0:	bf00      	nop
 800f1d2:	e7fe      	b.n	800f1d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d06e      	beq.n	800f2b8 <pvPortMalloc+0x150>
 800f1da:	4b45      	ldr	r3, [pc, #276]	; (800f2f0 <pvPortMalloc+0x188>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	687a      	ldr	r2, [r7, #4]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d869      	bhi.n	800f2b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f1e4:	4b43      	ldr	r3, [pc, #268]	; (800f2f4 <pvPortMalloc+0x18c>)
 800f1e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f1e8:	4b42      	ldr	r3, [pc, #264]	; (800f2f4 <pvPortMalloc+0x18c>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f1ee:	e004      	b.n	800f1fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fc:	685b      	ldr	r3, [r3, #4]
 800f1fe:	687a      	ldr	r2, [r7, #4]
 800f200:	429a      	cmp	r2, r3
 800f202:	d903      	bls.n	800f20c <pvPortMalloc+0xa4>
 800f204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d1f1      	bne.n	800f1f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f20c:	4b36      	ldr	r3, [pc, #216]	; (800f2e8 <pvPortMalloc+0x180>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f212:	429a      	cmp	r2, r3
 800f214:	d050      	beq.n	800f2b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f216:	6a3b      	ldr	r3, [r7, #32]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	2208      	movs	r2, #8
 800f21c:	4413      	add	r3, r2
 800f21e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f222:	681a      	ldr	r2, [r3, #0]
 800f224:	6a3b      	ldr	r3, [r7, #32]
 800f226:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22a:	685a      	ldr	r2, [r3, #4]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	1ad2      	subs	r2, r2, r3
 800f230:	2308      	movs	r3, #8
 800f232:	005b      	lsls	r3, r3, #1
 800f234:	429a      	cmp	r2, r3
 800f236:	d91f      	bls.n	800f278 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	4413      	add	r3, r2
 800f23e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f240:	69bb      	ldr	r3, [r7, #24]
 800f242:	f003 0307 	and.w	r3, r3, #7
 800f246:	2b00      	cmp	r3, #0
 800f248:	d00a      	beq.n	800f260 <pvPortMalloc+0xf8>
	__asm volatile
 800f24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f24e:	f383 8811 	msr	BASEPRI, r3
 800f252:	f3bf 8f6f 	isb	sy
 800f256:	f3bf 8f4f 	dsb	sy
 800f25a:	613b      	str	r3, [r7, #16]
}
 800f25c:	bf00      	nop
 800f25e:	e7fe      	b.n	800f25e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f262:	685a      	ldr	r2, [r3, #4]
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	1ad2      	subs	r2, r2, r3
 800f268:	69bb      	ldr	r3, [r7, #24]
 800f26a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26e:	687a      	ldr	r2, [r7, #4]
 800f270:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f272:	69b8      	ldr	r0, [r7, #24]
 800f274:	f000 f908 	bl	800f488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f278:	4b1d      	ldr	r3, [pc, #116]	; (800f2f0 <pvPortMalloc+0x188>)
 800f27a:	681a      	ldr	r2, [r3, #0]
 800f27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f27e:	685b      	ldr	r3, [r3, #4]
 800f280:	1ad3      	subs	r3, r2, r3
 800f282:	4a1b      	ldr	r2, [pc, #108]	; (800f2f0 <pvPortMalloc+0x188>)
 800f284:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f286:	4b1a      	ldr	r3, [pc, #104]	; (800f2f0 <pvPortMalloc+0x188>)
 800f288:	681a      	ldr	r2, [r3, #0]
 800f28a:	4b1b      	ldr	r3, [pc, #108]	; (800f2f8 <pvPortMalloc+0x190>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	429a      	cmp	r2, r3
 800f290:	d203      	bcs.n	800f29a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f292:	4b17      	ldr	r3, [pc, #92]	; (800f2f0 <pvPortMalloc+0x188>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	4a18      	ldr	r2, [pc, #96]	; (800f2f8 <pvPortMalloc+0x190>)
 800f298:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29c:	685a      	ldr	r2, [r3, #4]
 800f29e:	4b13      	ldr	r3, [pc, #76]	; (800f2ec <pvPortMalloc+0x184>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	431a      	orrs	r2, r3
 800f2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f2ae:	4b13      	ldr	r3, [pc, #76]	; (800f2fc <pvPortMalloc+0x194>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	4a11      	ldr	r2, [pc, #68]	; (800f2fc <pvPortMalloc+0x194>)
 800f2b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f2b8:	f7fe ff32 	bl	800e120 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f2bc:	69fb      	ldr	r3, [r7, #28]
 800f2be:	f003 0307 	and.w	r3, r3, #7
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d00a      	beq.n	800f2dc <pvPortMalloc+0x174>
	__asm volatile
 800f2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ca:	f383 8811 	msr	BASEPRI, r3
 800f2ce:	f3bf 8f6f 	isb	sy
 800f2d2:	f3bf 8f4f 	dsb	sy
 800f2d6:	60fb      	str	r3, [r7, #12]
}
 800f2d8:	bf00      	nop
 800f2da:	e7fe      	b.n	800f2da <pvPortMalloc+0x172>
	return pvReturn;
 800f2dc:	69fb      	ldr	r3, [r7, #28]
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3728      	adds	r7, #40	; 0x28
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	200042b0 	.word	0x200042b0
 800f2ec:	200042c4 	.word	0x200042c4
 800f2f0:	200042b4 	.word	0x200042b4
 800f2f4:	200042a8 	.word	0x200042a8
 800f2f8:	200042b8 	.word	0x200042b8
 800f2fc:	200042bc 	.word	0x200042bc

0800f300 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b086      	sub	sp, #24
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d04d      	beq.n	800f3ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f312:	2308      	movs	r3, #8
 800f314:	425b      	negs	r3, r3
 800f316:	697a      	ldr	r2, [r7, #20]
 800f318:	4413      	add	r3, r2
 800f31a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f31c:	697b      	ldr	r3, [r7, #20]
 800f31e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f320:	693b      	ldr	r3, [r7, #16]
 800f322:	685a      	ldr	r2, [r3, #4]
 800f324:	4b24      	ldr	r3, [pc, #144]	; (800f3b8 <vPortFree+0xb8>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	4013      	ands	r3, r2
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d10a      	bne.n	800f344 <vPortFree+0x44>
	__asm volatile
 800f32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f332:	f383 8811 	msr	BASEPRI, r3
 800f336:	f3bf 8f6f 	isb	sy
 800f33a:	f3bf 8f4f 	dsb	sy
 800f33e:	60fb      	str	r3, [r7, #12]
}
 800f340:	bf00      	nop
 800f342:	e7fe      	b.n	800f342 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d00a      	beq.n	800f362 <vPortFree+0x62>
	__asm volatile
 800f34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f350:	f383 8811 	msr	BASEPRI, r3
 800f354:	f3bf 8f6f 	isb	sy
 800f358:	f3bf 8f4f 	dsb	sy
 800f35c:	60bb      	str	r3, [r7, #8]
}
 800f35e:	bf00      	nop
 800f360:	e7fe      	b.n	800f360 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	685a      	ldr	r2, [r3, #4]
 800f366:	4b14      	ldr	r3, [pc, #80]	; (800f3b8 <vPortFree+0xb8>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	4013      	ands	r3, r2
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d01e      	beq.n	800f3ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d11a      	bne.n	800f3ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	685a      	ldr	r2, [r3, #4]
 800f37c:	4b0e      	ldr	r3, [pc, #56]	; (800f3b8 <vPortFree+0xb8>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	43db      	mvns	r3, r3
 800f382:	401a      	ands	r2, r3
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f388:	f7fe febc 	bl	800e104 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	685a      	ldr	r2, [r3, #4]
 800f390:	4b0a      	ldr	r3, [pc, #40]	; (800f3bc <vPortFree+0xbc>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	4413      	add	r3, r2
 800f396:	4a09      	ldr	r2, [pc, #36]	; (800f3bc <vPortFree+0xbc>)
 800f398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f39a:	6938      	ldr	r0, [r7, #16]
 800f39c:	f000 f874 	bl	800f488 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f3a0:	4b07      	ldr	r3, [pc, #28]	; (800f3c0 <vPortFree+0xc0>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	3301      	adds	r3, #1
 800f3a6:	4a06      	ldr	r2, [pc, #24]	; (800f3c0 <vPortFree+0xc0>)
 800f3a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f3aa:	f7fe feb9 	bl	800e120 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f3ae:	bf00      	nop
 800f3b0:	3718      	adds	r7, #24
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	200042c4 	.word	0x200042c4
 800f3bc:	200042b4 	.word	0x200042b4
 800f3c0:	200042c0 	.word	0x200042c0

0800f3c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b085      	sub	sp, #20
 800f3c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f3ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f3ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f3d0:	4b27      	ldr	r3, [pc, #156]	; (800f470 <prvHeapInit+0xac>)
 800f3d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	f003 0307 	and.w	r3, r3, #7
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d00c      	beq.n	800f3f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	3307      	adds	r3, #7
 800f3e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	f023 0307 	bic.w	r3, r3, #7
 800f3ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f3ec:	68ba      	ldr	r2, [r7, #8]
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	1ad3      	subs	r3, r2, r3
 800f3f2:	4a1f      	ldr	r2, [pc, #124]	; (800f470 <prvHeapInit+0xac>)
 800f3f4:	4413      	add	r3, r2
 800f3f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f3fc:	4a1d      	ldr	r2, [pc, #116]	; (800f474 <prvHeapInit+0xb0>)
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f402:	4b1c      	ldr	r3, [pc, #112]	; (800f474 <prvHeapInit+0xb0>)
 800f404:	2200      	movs	r2, #0
 800f406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	68ba      	ldr	r2, [r7, #8]
 800f40c:	4413      	add	r3, r2
 800f40e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f410:	2208      	movs	r2, #8
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	1a9b      	subs	r3, r3, r2
 800f416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	f023 0307 	bic.w	r3, r3, #7
 800f41e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	4a15      	ldr	r2, [pc, #84]	; (800f478 <prvHeapInit+0xb4>)
 800f424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f426:	4b14      	ldr	r3, [pc, #80]	; (800f478 <prvHeapInit+0xb4>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	2200      	movs	r2, #0
 800f42c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f42e:	4b12      	ldr	r3, [pc, #72]	; (800f478 <prvHeapInit+0xb4>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	2200      	movs	r2, #0
 800f434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	68fa      	ldr	r2, [r7, #12]
 800f43e:	1ad2      	subs	r2, r2, r3
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f444:	4b0c      	ldr	r3, [pc, #48]	; (800f478 <prvHeapInit+0xb4>)
 800f446:	681a      	ldr	r2, [r3, #0]
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	4a0a      	ldr	r2, [pc, #40]	; (800f47c <prvHeapInit+0xb8>)
 800f452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	4a09      	ldr	r2, [pc, #36]	; (800f480 <prvHeapInit+0xbc>)
 800f45a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f45c:	4b09      	ldr	r3, [pc, #36]	; (800f484 <prvHeapInit+0xc0>)
 800f45e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f462:	601a      	str	r2, [r3, #0]
}
 800f464:	bf00      	nop
 800f466:	3714      	adds	r7, #20
 800f468:	46bd      	mov	sp, r7
 800f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46e:	4770      	bx	lr
 800f470:	200006a8 	.word	0x200006a8
 800f474:	200042a8 	.word	0x200042a8
 800f478:	200042b0 	.word	0x200042b0
 800f47c:	200042b8 	.word	0x200042b8
 800f480:	200042b4 	.word	0x200042b4
 800f484:	200042c4 	.word	0x200042c4

0800f488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f488:	b480      	push	{r7}
 800f48a:	b085      	sub	sp, #20
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f490:	4b28      	ldr	r3, [pc, #160]	; (800f534 <prvInsertBlockIntoFreeList+0xac>)
 800f492:	60fb      	str	r3, [r7, #12]
 800f494:	e002      	b.n	800f49c <prvInsertBlockIntoFreeList+0x14>
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	60fb      	str	r3, [r7, #12]
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	687a      	ldr	r2, [r7, #4]
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d8f7      	bhi.n	800f496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	68ba      	ldr	r2, [r7, #8]
 800f4b0:	4413      	add	r3, r2
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d108      	bne.n	800f4ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	685a      	ldr	r2, [r3, #4]
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	441a      	add	r2, r3
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	68ba      	ldr	r2, [r7, #8]
 800f4d4:	441a      	add	r2, r3
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d118      	bne.n	800f510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	681a      	ldr	r2, [r3, #0]
 800f4e2:	4b15      	ldr	r3, [pc, #84]	; (800f538 <prvInsertBlockIntoFreeList+0xb0>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d00d      	beq.n	800f506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	685a      	ldr	r2, [r3, #4]
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	685b      	ldr	r3, [r3, #4]
 800f4f4:	441a      	add	r2, r3
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	681a      	ldr	r2, [r3, #0]
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	601a      	str	r2, [r3, #0]
 800f504:	e008      	b.n	800f518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f506:	4b0c      	ldr	r3, [pc, #48]	; (800f538 <prvInsertBlockIntoFreeList+0xb0>)
 800f508:	681a      	ldr	r2, [r3, #0]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	601a      	str	r2, [r3, #0]
 800f50e:	e003      	b.n	800f518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	681a      	ldr	r2, [r3, #0]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f518:	68fa      	ldr	r2, [r7, #12]
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	429a      	cmp	r2, r3
 800f51e:	d002      	beq.n	800f526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	687a      	ldr	r2, [r7, #4]
 800f524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f526:	bf00      	nop
 800f528:	3714      	adds	r7, #20
 800f52a:	46bd      	mov	sp, r7
 800f52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f530:	4770      	bx	lr
 800f532:	bf00      	nop
 800f534:	200042a8 	.word	0x200042a8
 800f538:	200042b0 	.word	0x200042b0

0800f53c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b084      	sub	sp, #16
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	330c      	adds	r3, #12
 800f54c:	461a      	mov	r2, r3
 800f54e:	6839      	ldr	r1, [r7, #0]
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f001 ffa3 	bl	801149c <tcpip_send_msg_wait_sem>
 800f556:	4603      	mov	r3, r0
 800f558:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800f55a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d103      	bne.n	800f56a <netconn_apimsg+0x2e>
    return apimsg->err;
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f568:	e001      	b.n	800f56e <netconn_apimsg+0x32>
  }
  return err;
 800f56a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f56e:	4618      	mov	r0, r3
 800f570:	3710      	adds	r7, #16
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
	...

0800f578 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b08c      	sub	sp, #48	; 0x30
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	4603      	mov	r3, r0
 800f580:	603a      	str	r2, [r7, #0]
 800f582:	71fb      	strb	r3, [r7, #7]
 800f584:	460b      	mov	r3, r1
 800f586:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800f588:	79fb      	ldrb	r3, [r7, #7]
 800f58a:	6839      	ldr	r1, [r7, #0]
 800f58c:	4618      	mov	r0, r3
 800f58e:	f000 feff 	bl	8010390 <netconn_alloc>
 800f592:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800f594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f596:	2b00      	cmp	r3, #0
 800f598:	d054      	beq.n	800f644 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800f59a:	79bb      	ldrb	r3, [r7, #6]
 800f59c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800f59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800f5a2:	f107 0308 	add.w	r3, r7, #8
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	4829      	ldr	r0, [pc, #164]	; (800f650 <netconn_new_with_proto_and_callback+0xd8>)
 800f5aa:	f7ff ffc7 	bl	800f53c <netconn_apimsg>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800f5b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d043      	beq.n	800f644 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800f5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5be:	685b      	ldr	r3, [r3, #4]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d005      	beq.n	800f5d0 <netconn_new_with_proto_and_callback+0x58>
 800f5c4:	4b23      	ldr	r3, [pc, #140]	; (800f654 <netconn_new_with_proto_and_callback+0xdc>)
 800f5c6:	22a3      	movs	r2, #163	; 0xa3
 800f5c8:	4923      	ldr	r1, [pc, #140]	; (800f658 <netconn_new_with_proto_and_callback+0xe0>)
 800f5ca:	4824      	ldr	r0, [pc, #144]	; (800f65c <netconn_new_with_proto_and_callback+0xe4>)
 800f5cc:	f00f fbc8 	bl	801ed60 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800f5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5d2:	3310      	adds	r3, #16
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f00e f9ae 	bl	801d936 <sys_mbox_valid>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d105      	bne.n	800f5ec <netconn_new_with_proto_and_callback+0x74>
 800f5e0:	4b1c      	ldr	r3, [pc, #112]	; (800f654 <netconn_new_with_proto_and_callback+0xdc>)
 800f5e2:	22a4      	movs	r2, #164	; 0xa4
 800f5e4:	491e      	ldr	r1, [pc, #120]	; (800f660 <netconn_new_with_proto_and_callback+0xe8>)
 800f5e6:	481d      	ldr	r0, [pc, #116]	; (800f65c <netconn_new_with_proto_and_callback+0xe4>)
 800f5e8:	f00f fbba 	bl	801ed60 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800f5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ee:	3314      	adds	r3, #20
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f00e f9a0 	bl	801d936 <sys_mbox_valid>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d005      	beq.n	800f608 <netconn_new_with_proto_and_callback+0x90>
 800f5fc:	4b15      	ldr	r3, [pc, #84]	; (800f654 <netconn_new_with_proto_and_callback+0xdc>)
 800f5fe:	22a6      	movs	r2, #166	; 0xa6
 800f600:	4918      	ldr	r1, [pc, #96]	; (800f664 <netconn_new_with_proto_and_callback+0xec>)
 800f602:	4816      	ldr	r0, [pc, #88]	; (800f65c <netconn_new_with_proto_and_callback+0xe4>)
 800f604:	f00f fbac 	bl	801ed60 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800f608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f60a:	330c      	adds	r3, #12
 800f60c:	4618      	mov	r0, r3
 800f60e:	f00e fa23 	bl	801da58 <sys_sem_valid>
 800f612:	4603      	mov	r3, r0
 800f614:	2b00      	cmp	r3, #0
 800f616:	d105      	bne.n	800f624 <netconn_new_with_proto_and_callback+0xac>
 800f618:	4b0e      	ldr	r3, [pc, #56]	; (800f654 <netconn_new_with_proto_and_callback+0xdc>)
 800f61a:	22a9      	movs	r2, #169	; 0xa9
 800f61c:	4912      	ldr	r1, [pc, #72]	; (800f668 <netconn_new_with_proto_and_callback+0xf0>)
 800f61e:	480f      	ldr	r0, [pc, #60]	; (800f65c <netconn_new_with_proto_and_callback+0xe4>)
 800f620:	f00f fb9e 	bl	801ed60 <iprintf>
      sys_sem_free(&conn->op_completed);
 800f624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f626:	330c      	adds	r3, #12
 800f628:	4618      	mov	r0, r3
 800f62a:	f00e fa08 	bl	801da3e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800f62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f630:	3310      	adds	r3, #16
 800f632:	4618      	mov	r0, r3
 800f634:	f00e f8f8 	bl	801d828 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800f638:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f63a:	2007      	movs	r0, #7
 800f63c:	f003 fcaa 	bl	8012f94 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800f640:	2300      	movs	r3, #0
 800f642:	e000      	b.n	800f646 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800f644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f646:	4618      	mov	r0, r3
 800f648:	3730      	adds	r7, #48	; 0x30
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	bf00      	nop
 800f650:	08010365 	.word	0x08010365
 800f654:	080224d0 	.word	0x080224d0
 800f658:	08022504 	.word	0x08022504
 800f65c:	08022528 	.word	0x08022528
 800f660:	08022550 	.word	0x08022550
 800f664:	08022568 	.word	0x08022568
 800f668:	0802258c 	.word	0x0802258c

0800f66c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b08c      	sub	sp, #48	; 0x30
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d101      	bne.n	800f67e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800f67a:	2300      	movs	r3, #0
 800f67c:	e014      	b.n	800f6a8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800f682:	2329      	movs	r3, #41	; 0x29
 800f684:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800f686:	f107 030c 	add.w	r3, r7, #12
 800f68a:	4619      	mov	r1, r3
 800f68c:	4808      	ldr	r0, [pc, #32]	; (800f6b0 <netconn_prepare_delete+0x44>)
 800f68e:	f7ff ff55 	bl	800f53c <netconn_apimsg>
 800f692:	4603      	mov	r3, r0
 800f694:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800f698:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d002      	beq.n	800f6a6 <netconn_prepare_delete+0x3a>
    return err;
 800f6a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800f6a4:	e000      	b.n	800f6a8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800f6a6:	2300      	movs	r3, #0
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3730      	adds	r7, #48	; 0x30
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}
 800f6b0:	080108c9 	.word	0x080108c9

0800f6b4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b084      	sub	sp, #16
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d101      	bne.n	800f6c6 <netconn_delete+0x12>
    return ERR_OK;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	e00d      	b.n	800f6e2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f7ff ffd0 	bl	800f66c <netconn_prepare_delete>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800f6d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d102      	bne.n	800f6de <netconn_delete+0x2a>
    netconn_free(conn);
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f000 fec7 	bl	801046c <netconn_free>
  }
  return err;
 800f6de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3710      	adds	r7, #16
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}
	...

0800f6ec <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b08e      	sub	sp, #56	; 0x38
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	4613      	mov	r3, r2
 800f6f8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d109      	bne.n	800f714 <netconn_bind+0x28>
 800f700:	4b11      	ldr	r3, [pc, #68]	; (800f748 <netconn_bind+0x5c>)
 800f702:	f44f 729c 	mov.w	r2, #312	; 0x138
 800f706:	4911      	ldr	r1, [pc, #68]	; (800f74c <netconn_bind+0x60>)
 800f708:	4811      	ldr	r0, [pc, #68]	; (800f750 <netconn_bind+0x64>)
 800f70a:	f00f fb29 	bl	801ed60 <iprintf>
 800f70e:	f06f 030f 	mvn.w	r3, #15
 800f712:	e015      	b.n	800f740 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d101      	bne.n	800f71e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800f71a:	4b0e      	ldr	r3, [pc, #56]	; (800f754 <netconn_bind+0x68>)
 800f71c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800f726:	88fb      	ldrh	r3, [r7, #6]
 800f728:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800f72a:	f107 0314 	add.w	r3, r7, #20
 800f72e:	4619      	mov	r1, r3
 800f730:	4809      	ldr	r0, [pc, #36]	; (800f758 <netconn_bind+0x6c>)
 800f732:	f7ff ff03 	bl	800f53c <netconn_apimsg>
 800f736:	4603      	mov	r3, r0
 800f738:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800f73c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f740:	4618      	mov	r0, r3
 800f742:	3738      	adds	r7, #56	; 0x38
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}
 800f748:	080224d0 	.word	0x080224d0
 800f74c:	08022608 	.word	0x08022608
 800f750:	08022528 	.word	0x08022528
 800f754:	08026ca4 	.word	0x08026ca4
 800f758:	08010a91 	.word	0x08010a91

0800f75c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b088      	sub	sp, #32
 800f760:	af00      	add	r7, sp, #0
 800f762:	60f8      	str	r0, [r7, #12]
 800f764:	60b9      	str	r1, [r7, #8]
 800f766:	4613      	mov	r3, r2
 800f768:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800f76a:	2300      	movs	r3, #0
 800f76c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d109      	bne.n	800f788 <netconn_recv_data+0x2c>
 800f774:	4b58      	ldr	r3, [pc, #352]	; (800f8d8 <netconn_recv_data+0x17c>)
 800f776:	f44f 7212 	mov.w	r2, #584	; 0x248
 800f77a:	4958      	ldr	r1, [pc, #352]	; (800f8dc <netconn_recv_data+0x180>)
 800f77c:	4858      	ldr	r0, [pc, #352]	; (800f8e0 <netconn_recv_data+0x184>)
 800f77e:	f00f faef 	bl	801ed60 <iprintf>
 800f782:	f06f 030f 	mvn.w	r3, #15
 800f786:	e0a2      	b.n	800f8ce <netconn_recv_data+0x172>
  *new_buf = NULL;
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	2200      	movs	r2, #0
 800f78c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d109      	bne.n	800f7a8 <netconn_recv_data+0x4c>
 800f794:	4b50      	ldr	r3, [pc, #320]	; (800f8d8 <netconn_recv_data+0x17c>)
 800f796:	f240 224a 	movw	r2, #586	; 0x24a
 800f79a:	4952      	ldr	r1, [pc, #328]	; (800f8e4 <netconn_recv_data+0x188>)
 800f79c:	4850      	ldr	r0, [pc, #320]	; (800f8e0 <netconn_recv_data+0x184>)
 800f79e:	f00f fadf 	bl	801ed60 <iprintf>
 800f7a2:	f06f 030f 	mvn.w	r3, #15
 800f7a6:	e092      	b.n	800f8ce <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	3310      	adds	r3, #16
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f00e f8c2 	bl	801d936 <sys_mbox_valid>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d10e      	bne.n	800f7d6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800f7b8:	68f8      	ldr	r0, [r7, #12]
 800f7ba:	f000 fa23 	bl	800fc04 <netconn_err>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800f7c2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d002      	beq.n	800f7d0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800f7ca:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800f7ce:	e07e      	b.n	800f8ce <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800f7d0:	f06f 030a 	mvn.w	r3, #10
 800f7d4:	e07b      	b.n	800f8ce <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	7f1b      	ldrb	r3, [r3, #28]
 800f7da:	f003 0302 	and.w	r3, r3, #2
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d10f      	bne.n	800f802 <netconn_recv_data+0xa6>
 800f7e2:	79fb      	ldrb	r3, [r7, #7]
 800f7e4:	f003 0304 	and.w	r3, r3, #4
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d10a      	bne.n	800f802 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	7f1b      	ldrb	r3, [r3, #28]
 800f7f0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d104      	bne.n	800f802 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d023      	beq.n	800f84a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	3310      	adds	r3, #16
 800f806:	f107 0218 	add.w	r2, r7, #24
 800f80a:	4611      	mov	r1, r2
 800f80c:	4618      	mov	r0, r3
 800f80e:	f00e f876 	bl	801d8fe <sys_arch_mbox_tryfetch>
 800f812:	4603      	mov	r3, r0
 800f814:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f818:	d11f      	bne.n	800f85a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800f81a:	68f8      	ldr	r0, [r7, #12]
 800f81c:	f000 f9f2 	bl	800fc04 <netconn_err>
 800f820:	4603      	mov	r3, r0
 800f822:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800f824:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d002      	beq.n	800f832 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800f82c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f830:	e04d      	b.n	800f8ce <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	7f1b      	ldrb	r3, [r3, #28]
 800f836:	f003 0301 	and.w	r3, r3, #1
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d002      	beq.n	800f844 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800f83e:	f06f 030a 	mvn.w	r3, #10
 800f842:	e044      	b.n	800f8ce <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800f844:	f06f 0306 	mvn.w	r3, #6
 800f848:	e041      	b.n	800f8ce <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	3310      	adds	r3, #16
 800f84e:	f107 0118 	add.w	r1, r7, #24
 800f852:	2200      	movs	r2, #0
 800f854:	4618      	mov	r0, r3
 800f856:	f00e f813 	bl	801d880 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	781b      	ldrb	r3, [r3, #0]
 800f85e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f862:	2b10      	cmp	r3, #16
 800f864:	d117      	bne.n	800f896 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800f866:	69bb      	ldr	r3, [r7, #24]
 800f868:	f107 0217 	add.w	r2, r7, #23
 800f86c:	4611      	mov	r1, r2
 800f86e:	4618      	mov	r0, r3
 800f870:	f000 fa1a 	bl	800fca8 <lwip_netconn_is_err_msg>
 800f874:	4603      	mov	r3, r0
 800f876:	2b00      	cmp	r3, #0
 800f878:	d009      	beq.n	800f88e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800f87a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f87e:	f113 0f0f 	cmn.w	r3, #15
 800f882:	d101      	bne.n	800f888 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800f884:	2300      	movs	r3, #0
 800f886:	e022      	b.n	800f8ce <netconn_recv_data+0x172>
      }
      return err;
 800f888:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f88c:	e01f      	b.n	800f8ce <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800f88e:	69bb      	ldr	r3, [r7, #24]
 800f890:	891b      	ldrh	r3, [r3, #8]
 800f892:	83fb      	strh	r3, [r7, #30]
 800f894:	e00d      	b.n	800f8b2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800f896:	69bb      	ldr	r3, [r7, #24]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d106      	bne.n	800f8aa <netconn_recv_data+0x14e>
 800f89c:	4b0e      	ldr	r3, [pc, #56]	; (800f8d8 <netconn_recv_data+0x17c>)
 800f89e:	f240 2291 	movw	r2, #657	; 0x291
 800f8a2:	4911      	ldr	r1, [pc, #68]	; (800f8e8 <netconn_recv_data+0x18c>)
 800f8a4:	480e      	ldr	r0, [pc, #56]	; (800f8e0 <netconn_recv_data+0x184>)
 800f8a6:	f00f fa5b 	bl	801ed60 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800f8aa:	69bb      	ldr	r3, [r7, #24]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	891b      	ldrh	r3, [r3, #8]
 800f8b0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d005      	beq.n	800f8c6 <netconn_recv_data+0x16a>
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8be:	8bfa      	ldrh	r2, [r7, #30]
 800f8c0:	2101      	movs	r1, #1
 800f8c2:	68f8      	ldr	r0, [r7, #12]
 800f8c4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800f8c6:	69ba      	ldr	r2, [r7, #24]
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800f8cc:	2300      	movs	r3, #0
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3720      	adds	r7, #32
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	080224d0 	.word	0x080224d0
 800f8dc:	080226e8 	.word	0x080226e8
 800f8e0:	08022528 	.word	0x08022528
 800f8e4:	08022708 	.word	0x08022708
 800f8e8:	08022724 	.word	0x08022724

0800f8ec <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b084      	sub	sp, #16
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	60f8      	str	r0, [r7, #12]
 800f8f4:	60b9      	str	r1, [r7, #8]
 800f8f6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d005      	beq.n	800f90a <netconn_tcp_recvd_msg+0x1e>
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	781b      	ldrb	r3, [r3, #0]
 800f902:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f906:	2b10      	cmp	r3, #16
 800f908:	d009      	beq.n	800f91e <netconn_tcp_recvd_msg+0x32>
 800f90a:	4b0c      	ldr	r3, [pc, #48]	; (800f93c <netconn_tcp_recvd_msg+0x50>)
 800f90c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800f910:	490b      	ldr	r1, [pc, #44]	; (800f940 <netconn_tcp_recvd_msg+0x54>)
 800f912:	480c      	ldr	r0, [pc, #48]	; (800f944 <netconn_tcp_recvd_msg+0x58>)
 800f914:	f00f fa24 	bl	801ed60 <iprintf>
 800f918:	f06f 030f 	mvn.w	r3, #15
 800f91c:	e00a      	b.n	800f934 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	68fa      	ldr	r2, [r7, #12]
 800f922:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	68ba      	ldr	r2, [r7, #8]
 800f928:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800f92a:	6879      	ldr	r1, [r7, #4]
 800f92c:	4806      	ldr	r0, [pc, #24]	; (800f948 <netconn_tcp_recvd_msg+0x5c>)
 800f92e:	f7ff fe05 	bl	800f53c <netconn_apimsg>
 800f932:	4603      	mov	r3, r0
}
 800f934:	4618      	mov	r0, r3
 800f936:	3710      	adds	r7, #16
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}
 800f93c:	080224d0 	.word	0x080224d0
 800f940:	08022730 	.word	0x08022730
 800f944:	08022528 	.word	0x08022528
 800f948:	08010b9f 	.word	0x08010b9f

0800f94c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b090      	sub	sp, #64	; 0x40
 800f950:	af00      	add	r7, sp, #0
 800f952:	60f8      	str	r0, [r7, #12]
 800f954:	60b9      	str	r1, [r7, #8]
 800f956:	4613      	mov	r3, r2
 800f958:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	3310      	adds	r3, #16
 800f95e:	4618      	mov	r0, r3
 800f960:	f00d ffe9 	bl	801d936 <sys_mbox_valid>
 800f964:	4603      	mov	r3, r0
 800f966:	2b00      	cmp	r3, #0
 800f968:	d102      	bne.n	800f970 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800f96a:	f06f 030a 	mvn.w	r3, #10
 800f96e:	e06d      	b.n	800fa4c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	7f1b      	ldrb	r3, [r3, #28]
 800f974:	b25b      	sxtb	r3, r3
 800f976:	2b00      	cmp	r3, #0
 800f978:	da07      	bge.n	800f98a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	7f1b      	ldrb	r3, [r3, #28]
 800f97e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f982:	b2da      	uxtb	r2, r3
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800f988:	e039      	b.n	800f9fe <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800f98a:	79fb      	ldrb	r3, [r7, #7]
 800f98c:	461a      	mov	r2, r3
 800f98e:	68b9      	ldr	r1, [r7, #8]
 800f990:	68f8      	ldr	r0, [r7, #12]
 800f992:	f7ff fee3 	bl	800f75c <netconn_recv_data>
 800f996:	4603      	mov	r3, r0
 800f998:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800f99c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d002      	beq.n	800f9aa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800f9a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f9a8:	e050      	b.n	800fa4c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800f9b0:	79fb      	ldrb	r3, [r7, #7]
 800f9b2:	f003 0308 	and.w	r3, r3, #8
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d10e      	bne.n	800f9d8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800f9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d002      	beq.n	800f9c6 <netconn_recv_data_tcp+0x7a>
 800f9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c2:	891b      	ldrh	r3, [r3, #8]
 800f9c4:	e000      	b.n	800f9c8 <netconn_recv_data_tcp+0x7c>
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800f9ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f9cc:	f107 0214 	add.w	r2, r7, #20
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	68f8      	ldr	r0, [r7, #12]
 800f9d4:	f7ff ff8a 	bl	800f8ec <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800f9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d134      	bne.n	800fa48 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800f9de:	79fb      	ldrb	r3, [r7, #7]
 800f9e0:	f003 0310 	and.w	r3, r3, #16
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d009      	beq.n	800f9fc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	7f1b      	ldrb	r3, [r3, #28]
 800f9ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f9f0:	b2da      	uxtb	r2, r3
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800f9f6:	f06f 0306 	mvn.w	r3, #6
 800f9fa:	e027      	b.n	800fa4c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800f9fc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d005      	beq.n	800fa12 <netconn_recv_data_tcp+0xc6>
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	2101      	movs	r1, #1
 800fa0e:	68f8      	ldr	r0, [r7, #12]
 800fa10:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	685b      	ldr	r3, [r3, #4]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d10f      	bne.n	800fa3a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800fa1a:	68f8      	ldr	r0, [r7, #12]
 800fa1c:	f000 f8f2 	bl	800fc04 <netconn_err>
 800fa20:	4603      	mov	r3, r0
 800fa22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800fa26:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d002      	beq.n	800fa34 <netconn_recv_data_tcp+0xe8>
          return err;
 800fa2e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fa32:	e00b      	b.n	800fa4c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800fa34:	f06f 030d 	mvn.w	r3, #13
 800fa38:	e008      	b.n	800fa4c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800fa3a:	2101      	movs	r1, #1
 800fa3c:	68f8      	ldr	r0, [r7, #12]
 800fa3e:	f000 f8b1 	bl	800fba4 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800fa42:	f06f 030e 	mvn.w	r3, #14
 800fa46:	e001      	b.n	800fa4c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800fa48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3740      	adds	r7, #64	; 0x40
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}

0800fa54 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b086      	sub	sp, #24
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d109      	bne.n	800fa7c <netconn_recv+0x28>
 800fa68:	4b32      	ldr	r3, [pc, #200]	; (800fb34 <netconn_recv+0xe0>)
 800fa6a:	f240 3263 	movw	r2, #867	; 0x363
 800fa6e:	4932      	ldr	r1, [pc, #200]	; (800fb38 <netconn_recv+0xe4>)
 800fa70:	4832      	ldr	r0, [pc, #200]	; (800fb3c <netconn_recv+0xe8>)
 800fa72:	f00f f975 	bl	801ed60 <iprintf>
 800fa76:	f06f 030f 	mvn.w	r3, #15
 800fa7a:	e056      	b.n	800fb2a <netconn_recv+0xd6>
  *new_buf = NULL;
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d109      	bne.n	800fa9c <netconn_recv+0x48>
 800fa88:	4b2a      	ldr	r3, [pc, #168]	; (800fb34 <netconn_recv+0xe0>)
 800fa8a:	f240 3265 	movw	r2, #869	; 0x365
 800fa8e:	492c      	ldr	r1, [pc, #176]	; (800fb40 <netconn_recv+0xec>)
 800fa90:	482a      	ldr	r0, [pc, #168]	; (800fb3c <netconn_recv+0xe8>)
 800fa92:	f00f f965 	bl	801ed60 <iprintf>
 800fa96:	f06f 030f 	mvn.w	r3, #15
 800fa9a:	e046      	b.n	800fb2a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	781b      	ldrb	r3, [r3, #0]
 800faa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800faa4:	2b10      	cmp	r3, #16
 800faa6:	d13a      	bne.n	800fb1e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800faa8:	2300      	movs	r3, #0
 800faaa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800faac:	2006      	movs	r0, #6
 800faae:	f003 fa1f 	bl	8012ef0 <memp_malloc>
 800fab2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d102      	bne.n	800fac0 <netconn_recv+0x6c>
      return ERR_MEM;
 800faba:	f04f 33ff 	mov.w	r3, #4294967295
 800fabe:	e034      	b.n	800fb2a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800fac0:	f107 030c 	add.w	r3, r7, #12
 800fac4:	2200      	movs	r2, #0
 800fac6:	4619      	mov	r1, r3
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f7ff ff3f 	bl	800f94c <netconn_recv_data_tcp>
 800face:	4603      	mov	r3, r0
 800fad0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800fad2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d006      	beq.n	800fae8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800fada:	6979      	ldr	r1, [r7, #20]
 800fadc:	2006      	movs	r0, #6
 800fade:	f003 fa59 	bl	8012f94 <memp_free>
      return err;
 800fae2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fae6:	e020      	b.n	800fb2a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d106      	bne.n	800fafc <netconn_recv+0xa8>
 800faee:	4b11      	ldr	r3, [pc, #68]	; (800fb34 <netconn_recv+0xe0>)
 800faf0:	f240 3279 	movw	r2, #889	; 0x379
 800faf4:	4913      	ldr	r1, [pc, #76]	; (800fb44 <netconn_recv+0xf0>)
 800faf6:	4811      	ldr	r0, [pc, #68]	; (800fb3c <netconn_recv+0xe8>)
 800faf8:	f00f f932 	bl	801ed60 <iprintf>

    buf->p = p;
 800fafc:	68fa      	ldr	r2, [r7, #12]
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800fb02:	68fa      	ldr	r2, [r7, #12]
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	2200      	movs	r2, #0
 800fb12:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	697a      	ldr	r2, [r7, #20]
 800fb18:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	e005      	b.n	800fb2a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800fb1e:	2200      	movs	r2, #0
 800fb20:	6839      	ldr	r1, [r7, #0]
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f7ff fe1a 	bl	800f75c <netconn_recv_data>
 800fb28:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3718      	adds	r7, #24
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}
 800fb32:	bf00      	nop
 800fb34:	080224d0 	.word	0x080224d0
 800fb38:	080226e8 	.word	0x080226e8
 800fb3c:	08022528 	.word	0x08022528
 800fb40:	08022708 	.word	0x08022708
 800fb44:	08022780 	.word	0x08022780

0800fb48 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b08c      	sub	sp, #48	; 0x30
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d109      	bne.n	800fb6c <netconn_send+0x24>
 800fb58:	4b0e      	ldr	r3, [pc, #56]	; (800fb94 <netconn_send+0x4c>)
 800fb5a:	f240 32b2 	movw	r2, #946	; 0x3b2
 800fb5e:	490e      	ldr	r1, [pc, #56]	; (800fb98 <netconn_send+0x50>)
 800fb60:	480e      	ldr	r0, [pc, #56]	; (800fb9c <netconn_send+0x54>)
 800fb62:	f00f f8fd 	bl	801ed60 <iprintf>
 800fb66:	f06f 030f 	mvn.w	r3, #15
 800fb6a:	e00e      	b.n	800fb8a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800fb74:	f107 030c 	add.w	r3, r7, #12
 800fb78:	4619      	mov	r1, r3
 800fb7a:	4809      	ldr	r0, [pc, #36]	; (800fba0 <netconn_send+0x58>)
 800fb7c:	f7ff fcde 	bl	800f53c <netconn_apimsg>
 800fb80:	4603      	mov	r3, r0
 800fb82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800fb86:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	3730      	adds	r7, #48	; 0x30
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}
 800fb92:	bf00      	nop
 800fb94:	080224d0 	.word	0x080224d0
 800fb98:	0802278c 	.word	0x0802278c
 800fb9c:	08022528 	.word	0x08022528
 800fba0:	08010b05 	.word	0x08010b05

0800fba4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b08c      	sub	sp, #48	; 0x30
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	460b      	mov	r3, r1
 800fbae:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d109      	bne.n	800fbca <netconn_close_shutdown+0x26>
 800fbb6:	4b0f      	ldr	r3, [pc, #60]	; (800fbf4 <netconn_close_shutdown+0x50>)
 800fbb8:	f240 4247 	movw	r2, #1095	; 0x447
 800fbbc:	490e      	ldr	r1, [pc, #56]	; (800fbf8 <netconn_close_shutdown+0x54>)
 800fbbe:	480f      	ldr	r0, [pc, #60]	; (800fbfc <netconn_close_shutdown+0x58>)
 800fbc0:	f00f f8ce 	bl	801ed60 <iprintf>
 800fbc4:	f06f 030f 	mvn.w	r3, #15
 800fbc8:	e010      	b.n	800fbec <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800fbce:	78fb      	ldrb	r3, [r7, #3]
 800fbd0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800fbd2:	2329      	movs	r3, #41	; 0x29
 800fbd4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800fbd6:	f107 030c 	add.w	r3, r7, #12
 800fbda:	4619      	mov	r1, r3
 800fbdc:	4808      	ldr	r0, [pc, #32]	; (800fc00 <netconn_close_shutdown+0x5c>)
 800fbde:	f7ff fcad 	bl	800f53c <netconn_apimsg>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800fbe8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	3730      	adds	r7, #48	; 0x30
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}
 800fbf4:	080224d0 	.word	0x080224d0
 800fbf8:	0802280c 	.word	0x0802280c
 800fbfc:	08022528 	.word	0x08022528
 800fc00:	08010fa1 	.word	0x08010fa1

0800fc04 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b084      	sub	sp, #16
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d101      	bne.n	800fc16 <netconn_err+0x12>
    return ERR_OK;
 800fc12:	2300      	movs	r3, #0
 800fc14:	e00d      	b.n	800fc32 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800fc16:	f00d ffa9 	bl	801db6c <sys_arch_protect>
 800fc1a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	7a1b      	ldrb	r3, [r3, #8]
 800fc20:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2200      	movs	r2, #0
 800fc26:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800fc28:	68f8      	ldr	r0, [r7, #12]
 800fc2a:	f00d ffad 	bl	801db88 <sys_arch_unprotect>
  return err;
 800fc2e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3710      	adds	r7, #16
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}
	...

0800fc3c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b082      	sub	sp, #8
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	4603      	mov	r3, r0
 800fc44:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800fc46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc4a:	f113 0f0d 	cmn.w	r3, #13
 800fc4e:	d009      	beq.n	800fc64 <lwip_netconn_err_to_msg+0x28>
 800fc50:	f113 0f0d 	cmn.w	r3, #13
 800fc54:	dc0c      	bgt.n	800fc70 <lwip_netconn_err_to_msg+0x34>
 800fc56:	f113 0f0f 	cmn.w	r3, #15
 800fc5a:	d007      	beq.n	800fc6c <lwip_netconn_err_to_msg+0x30>
 800fc5c:	f113 0f0e 	cmn.w	r3, #14
 800fc60:	d002      	beq.n	800fc68 <lwip_netconn_err_to_msg+0x2c>
 800fc62:	e005      	b.n	800fc70 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800fc64:	4b0a      	ldr	r3, [pc, #40]	; (800fc90 <lwip_netconn_err_to_msg+0x54>)
 800fc66:	e00e      	b.n	800fc86 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800fc68:	4b0a      	ldr	r3, [pc, #40]	; (800fc94 <lwip_netconn_err_to_msg+0x58>)
 800fc6a:	e00c      	b.n	800fc86 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800fc6c:	4b0a      	ldr	r3, [pc, #40]	; (800fc98 <lwip_netconn_err_to_msg+0x5c>)
 800fc6e:	e00a      	b.n	800fc86 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800fc70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d005      	beq.n	800fc84 <lwip_netconn_err_to_msg+0x48>
 800fc78:	4b08      	ldr	r3, [pc, #32]	; (800fc9c <lwip_netconn_err_to_msg+0x60>)
 800fc7a:	227d      	movs	r2, #125	; 0x7d
 800fc7c:	4908      	ldr	r1, [pc, #32]	; (800fca0 <lwip_netconn_err_to_msg+0x64>)
 800fc7e:	4809      	ldr	r0, [pc, #36]	; (800fca4 <lwip_netconn_err_to_msg+0x68>)
 800fc80:	f00f f86e 	bl	801ed60 <iprintf>
      return NULL;
 800fc84:	2300      	movs	r3, #0
  }
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3708      	adds	r7, #8
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	08025d34 	.word	0x08025d34
 800fc94:	08025d35 	.word	0x08025d35
 800fc98:	08025d36 	.word	0x08025d36
 800fc9c:	08022828 	.word	0x08022828
 800fca0:	0802285c 	.word	0x0802285c
 800fca4:	0802286c 	.word	0x0802286c

0800fca8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b082      	sub	sp, #8
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
 800fcb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d105      	bne.n	800fcc4 <lwip_netconn_is_err_msg+0x1c>
 800fcb8:	4b12      	ldr	r3, [pc, #72]	; (800fd04 <lwip_netconn_is_err_msg+0x5c>)
 800fcba:	2285      	movs	r2, #133	; 0x85
 800fcbc:	4912      	ldr	r1, [pc, #72]	; (800fd08 <lwip_netconn_is_err_msg+0x60>)
 800fcbe:	4813      	ldr	r0, [pc, #76]	; (800fd0c <lwip_netconn_is_err_msg+0x64>)
 800fcc0:	f00f f84e 	bl	801ed60 <iprintf>

  if (msg == &netconn_aborted) {
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	4a12      	ldr	r2, [pc, #72]	; (800fd10 <lwip_netconn_is_err_msg+0x68>)
 800fcc8:	4293      	cmp	r3, r2
 800fcca:	d104      	bne.n	800fcd6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	22f3      	movs	r2, #243	; 0xf3
 800fcd0:	701a      	strb	r2, [r3, #0]
    return 1;
 800fcd2:	2301      	movs	r3, #1
 800fcd4:	e012      	b.n	800fcfc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	4a0e      	ldr	r2, [pc, #56]	; (800fd14 <lwip_netconn_is_err_msg+0x6c>)
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	d104      	bne.n	800fce8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	22f2      	movs	r2, #242	; 0xf2
 800fce2:	701a      	strb	r2, [r3, #0]
    return 1;
 800fce4:	2301      	movs	r3, #1
 800fce6:	e009      	b.n	800fcfc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	4a0b      	ldr	r2, [pc, #44]	; (800fd18 <lwip_netconn_is_err_msg+0x70>)
 800fcec:	4293      	cmp	r3, r2
 800fcee:	d104      	bne.n	800fcfa <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	22f1      	movs	r2, #241	; 0xf1
 800fcf4:	701a      	strb	r2, [r3, #0]
    return 1;
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	e000      	b.n	800fcfc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800fcfa:	2300      	movs	r3, #0
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3708      	adds	r7, #8
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	08022828 	.word	0x08022828
 800fd08:	08022894 	.word	0x08022894
 800fd0c:	0802286c 	.word	0x0802286c
 800fd10:	08025d34 	.word	0x08025d34
 800fd14:	08025d35 	.word	0x08025d35
 800fd18:	08025d36 	.word	0x08025d36

0800fd1c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b088      	sub	sp, #32
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	60f8      	str	r0, [r7, #12]
 800fd24:	60b9      	str	r1, [r7, #8]
 800fd26:	607a      	str	r2, [r7, #4]
 800fd28:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d105      	bne.n	800fd3c <recv_udp+0x20>
 800fd30:	4b34      	ldr	r3, [pc, #208]	; (800fe04 <recv_udp+0xe8>)
 800fd32:	22e5      	movs	r2, #229	; 0xe5
 800fd34:	4934      	ldr	r1, [pc, #208]	; (800fe08 <recv_udp+0xec>)
 800fd36:	4835      	ldr	r0, [pc, #212]	; (800fe0c <recv_udp+0xf0>)
 800fd38:	f00f f812 	bl	801ed60 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d105      	bne.n	800fd4e <recv_udp+0x32>
 800fd42:	4b30      	ldr	r3, [pc, #192]	; (800fe04 <recv_udp+0xe8>)
 800fd44:	22e6      	movs	r2, #230	; 0xe6
 800fd46:	4932      	ldr	r1, [pc, #200]	; (800fe10 <recv_udp+0xf4>)
 800fd48:	4830      	ldr	r0, [pc, #192]	; (800fe0c <recv_udp+0xf0>)
 800fd4a:	f00f f809 	bl	801ed60 <iprintf>
  conn = (struct netconn *)arg;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800fd52:	69fb      	ldr	r3, [r7, #28]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d103      	bne.n	800fd60 <recv_udp+0x44>
    pbuf_free(p);
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f003 ff99 	bl	8013c90 <pbuf_free>
    return;
 800fd5e:	e04d      	b.n	800fdfc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800fd60:	69fb      	ldr	r3, [r7, #28]
 800fd62:	685b      	ldr	r3, [r3, #4]
 800fd64:	68ba      	ldr	r2, [r7, #8]
 800fd66:	429a      	cmp	r2, r3
 800fd68:	d005      	beq.n	800fd76 <recv_udp+0x5a>
 800fd6a:	4b26      	ldr	r3, [pc, #152]	; (800fe04 <recv_udp+0xe8>)
 800fd6c:	22ee      	movs	r2, #238	; 0xee
 800fd6e:	4929      	ldr	r1, [pc, #164]	; (800fe14 <recv_udp+0xf8>)
 800fd70:	4826      	ldr	r0, [pc, #152]	; (800fe0c <recv_udp+0xf0>)
 800fd72:	f00e fff5 	bl	801ed60 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800fd76:	69fb      	ldr	r3, [r7, #28]
 800fd78:	3310      	adds	r3, #16
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f00d fddb 	bl	801d936 <sys_mbox_valid>
 800fd80:	4603      	mov	r3, r0
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d103      	bne.n	800fd8e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f003 ff82 	bl	8013c90 <pbuf_free>
    return;
 800fd8c:	e036      	b.n	800fdfc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800fd8e:	2006      	movs	r0, #6
 800fd90:	f003 f8ae 	bl	8012ef0 <memp_malloc>
 800fd94:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800fd96:	69bb      	ldr	r3, [r7, #24]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d103      	bne.n	800fda4 <recv_udp+0x88>
    pbuf_free(p);
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f003 ff77 	bl	8013c90 <pbuf_free>
    return;
 800fda2:	e02b      	b.n	800fdfc <recv_udp+0xe0>
  } else {
    buf->p = p;
 800fda4:	69bb      	ldr	r3, [r7, #24]
 800fda6:	687a      	ldr	r2, [r7, #4]
 800fda8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800fdaa:	69bb      	ldr	r3, [r7, #24]
 800fdac:	687a      	ldr	r2, [r7, #4]
 800fdae:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d002      	beq.n	800fdbc <recv_udp+0xa0>
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	e000      	b.n	800fdbe <recv_udp+0xa2>
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	69ba      	ldr	r2, [r7, #24]
 800fdc0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800fdc2:	69bb      	ldr	r3, [r7, #24]
 800fdc4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800fdc6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	891b      	ldrh	r3, [r3, #8]
 800fdcc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800fdce:	69fb      	ldr	r3, [r7, #28]
 800fdd0:	3310      	adds	r3, #16
 800fdd2:	69b9      	ldr	r1, [r7, #24]
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f00d fd39 	bl	801d84c <sys_mbox_trypost>
 800fdda:	4603      	mov	r3, r0
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d003      	beq.n	800fde8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800fde0:	69b8      	ldr	r0, [r7, #24]
 800fde2:	f001 f969 	bl	80110b8 <netbuf_delete>
    return;
 800fde6:	e009      	b.n	800fdfc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800fde8:	69fb      	ldr	r3, [r7, #28]
 800fdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d005      	beq.n	800fdfc <recv_udp+0xe0>
 800fdf0:	69fb      	ldr	r3, [r7, #28]
 800fdf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdf4:	8afa      	ldrh	r2, [r7, #22]
 800fdf6:	2100      	movs	r1, #0
 800fdf8:	69f8      	ldr	r0, [r7, #28]
 800fdfa:	4798      	blx	r3
  }
}
 800fdfc:	3720      	adds	r7, #32
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}
 800fe02:	bf00      	nop
 800fe04:	08022828 	.word	0x08022828
 800fe08:	080228a0 	.word	0x080228a0
 800fe0c:	0802286c 	.word	0x0802286c
 800fe10:	080228c4 	.word	0x080228c4
 800fe14:	080228e4 	.word	0x080228e4

0800fe18 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b088      	sub	sp, #32
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	60f8      	str	r0, [r7, #12]
 800fe20:	60b9      	str	r1, [r7, #8]
 800fe22:	607a      	str	r2, [r7, #4]
 800fe24:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d106      	bne.n	800fe3a <recv_tcp+0x22>
 800fe2c:	4b36      	ldr	r3, [pc, #216]	; (800ff08 <recv_tcp+0xf0>)
 800fe2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800fe32:	4936      	ldr	r1, [pc, #216]	; (800ff0c <recv_tcp+0xf4>)
 800fe34:	4836      	ldr	r0, [pc, #216]	; (800ff10 <recv_tcp+0xf8>)
 800fe36:	f00e ff93 	bl	801ed60 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d106      	bne.n	800fe4e <recv_tcp+0x36>
 800fe40:	4b31      	ldr	r3, [pc, #196]	; (800ff08 <recv_tcp+0xf0>)
 800fe42:	f240 122d 	movw	r2, #301	; 0x12d
 800fe46:	4933      	ldr	r1, [pc, #204]	; (800ff14 <recv_tcp+0xfc>)
 800fe48:	4831      	ldr	r0, [pc, #196]	; (800ff10 <recv_tcp+0xf8>)
 800fe4a:	f00e ff89 	bl	801ed60 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800fe4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d006      	beq.n	800fe64 <recv_tcp+0x4c>
 800fe56:	4b2c      	ldr	r3, [pc, #176]	; (800ff08 <recv_tcp+0xf0>)
 800fe58:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800fe5c:	492e      	ldr	r1, [pc, #184]	; (800ff18 <recv_tcp+0x100>)
 800fe5e:	482c      	ldr	r0, [pc, #176]	; (800ff10 <recv_tcp+0xf8>)
 800fe60:	f00e ff7e 	bl	801ed60 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d102      	bne.n	800fe74 <recv_tcp+0x5c>
    return ERR_VAL;
 800fe6e:	f06f 0305 	mvn.w	r3, #5
 800fe72:	e045      	b.n	800ff00 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	685b      	ldr	r3, [r3, #4]
 800fe78:	68ba      	ldr	r2, [r7, #8]
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d006      	beq.n	800fe8c <recv_tcp+0x74>
 800fe7e:	4b22      	ldr	r3, [pc, #136]	; (800ff08 <recv_tcp+0xf0>)
 800fe80:	f240 1235 	movw	r2, #309	; 0x135
 800fe84:	4925      	ldr	r1, [pc, #148]	; (800ff1c <recv_tcp+0x104>)
 800fe86:	4822      	ldr	r0, [pc, #136]	; (800ff10 <recv_tcp+0xf8>)
 800fe88:	f00e ff6a 	bl	801ed60 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	3310      	adds	r3, #16
 800fe90:	4618      	mov	r0, r3
 800fe92:	f00d fd50 	bl	801d936 <sys_mbox_valid>
 800fe96:	4603      	mov	r3, r0
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d10d      	bne.n	800feb8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d008      	beq.n	800feb4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	891b      	ldrh	r3, [r3, #8]
 800fea6:	4619      	mov	r1, r3
 800fea8:	68b8      	ldr	r0, [r7, #8]
 800feaa:	f004 fecb 	bl	8014c44 <tcp_recved>
      pbuf_free(p);
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f003 feee 	bl	8013c90 <pbuf_free>
    }
    return ERR_OK;
 800feb4:	2300      	movs	r3, #0
 800feb6:	e023      	b.n	800ff00 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d005      	beq.n	800feca <recv_tcp+0xb2>
    msg = p;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	891b      	ldrh	r3, [r3, #8]
 800fec6:	83fb      	strh	r3, [r7, #30]
 800fec8:	e003      	b.n	800fed2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800feca:	4b15      	ldr	r3, [pc, #84]	; (800ff20 <recv_tcp+0x108>)
 800fecc:	61bb      	str	r3, [r7, #24]
    len = 0;
 800fece:	2300      	movs	r3, #0
 800fed0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	3310      	adds	r3, #16
 800fed6:	69b9      	ldr	r1, [r7, #24]
 800fed8:	4618      	mov	r0, r3
 800feda:	f00d fcb7 	bl	801d84c <sys_mbox_trypost>
 800fede:	4603      	mov	r3, r0
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d002      	beq.n	800feea <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800fee4:	f04f 33ff 	mov.w	r3, #4294967295
 800fee8:	e00a      	b.n	800ff00 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800feea:	697b      	ldr	r3, [r7, #20]
 800feec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d005      	beq.n	800fefe <recv_tcp+0xe6>
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef6:	8bfa      	ldrh	r2, [r7, #30]
 800fef8:	2100      	movs	r1, #0
 800fefa:	6978      	ldr	r0, [r7, #20]
 800fefc:	4798      	blx	r3
  }

  return ERR_OK;
 800fefe:	2300      	movs	r3, #0
}
 800ff00:	4618      	mov	r0, r3
 800ff02:	3720      	adds	r7, #32
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}
 800ff08:	08022828 	.word	0x08022828
 800ff0c:	08022904 	.word	0x08022904
 800ff10:	0802286c 	.word	0x0802286c
 800ff14:	08022928 	.word	0x08022928
 800ff18:	08022948 	.word	0x08022948
 800ff1c:	08022960 	.word	0x08022960
 800ff20:	08025d36 	.word	0x08025d36

0800ff24 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b084      	sub	sp, #16
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
 800ff2c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d106      	bne.n	800ff46 <poll_tcp+0x22>
 800ff38:	4b29      	ldr	r3, [pc, #164]	; (800ffe0 <poll_tcp+0xbc>)
 800ff3a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800ff3e:	4929      	ldr	r1, [pc, #164]	; (800ffe4 <poll_tcp+0xc0>)
 800ff40:	4829      	ldr	r0, [pc, #164]	; (800ffe8 <poll_tcp+0xc4>)
 800ff42:	f00e ff0d 	bl	801ed60 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	785b      	ldrb	r3, [r3, #1]
 800ff4a:	2b01      	cmp	r3, #1
 800ff4c:	d104      	bne.n	800ff58 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ff4e:	2101      	movs	r1, #1
 800ff50:	68f8      	ldr	r0, [r7, #12]
 800ff52:	f000 fe59 	bl	8010c08 <lwip_netconn_do_writemore>
 800ff56:	e016      	b.n	800ff86 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	785b      	ldrb	r3, [r3, #1]
 800ff5c:	2b04      	cmp	r3, #4
 800ff5e:	d112      	bne.n	800ff86 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	6a1b      	ldr	r3, [r3, #32]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d00a      	beq.n	800ff7e <poll_tcp+0x5a>
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	6a1b      	ldr	r3, [r3, #32]
 800ff6c:	7a5b      	ldrb	r3, [r3, #9]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d005      	beq.n	800ff7e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	6a1b      	ldr	r3, [r3, #32]
 800ff76:	7a5a      	ldrb	r2, [r3, #9]
 800ff78:	3a01      	subs	r2, #1
 800ff7a:	b2d2      	uxtb	r2, r2
 800ff7c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ff7e:	2101      	movs	r1, #1
 800ff80:	68f8      	ldr	r0, [r7, #12]
 800ff82:	f000 fb3b 	bl	80105fc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	7f1b      	ldrb	r3, [r3, #28]
 800ff8a:	f003 0310 	and.w	r3, r3, #16
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d021      	beq.n	800ffd6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d01d      	beq.n	800ffd6 <poll_tcp+0xb2>
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ffa2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ffa6:	d316      	bcc.n	800ffd6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	685b      	ldr	r3, [r3, #4]
 800ffac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ffb0:	2b04      	cmp	r3, #4
 800ffb2:	d810      	bhi.n	800ffd6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	7f1b      	ldrb	r3, [r3, #28]
 800ffb8:	f023 0310 	bic.w	r3, r3, #16
 800ffbc:	b2da      	uxtb	r2, r3
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d005      	beq.n	800ffd6 <poll_tcp+0xb2>
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffce:	2200      	movs	r2, #0
 800ffd0:	2102      	movs	r1, #2
 800ffd2:	68f8      	ldr	r0, [r7, #12]
 800ffd4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ffd6:	2300      	movs	r3, #0
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3710      	adds	r7, #16
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}
 800ffe0:	08022828 	.word	0x08022828
 800ffe4:	08022980 	.word	0x08022980
 800ffe8:	0802286c 	.word	0x0802286c

0800ffec <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b086      	sub	sp, #24
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	60f8      	str	r0, [r7, #12]
 800fff4:	60b9      	str	r1, [r7, #8]
 800fff6:	4613      	mov	r3, r2
 800fff8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d106      	bne.n	8010012 <sent_tcp+0x26>
 8010004:	4b20      	ldr	r3, [pc, #128]	; (8010088 <sent_tcp+0x9c>)
 8010006:	f240 1293 	movw	r2, #403	; 0x193
 801000a:	4920      	ldr	r1, [pc, #128]	; (801008c <sent_tcp+0xa0>)
 801000c:	4820      	ldr	r0, [pc, #128]	; (8010090 <sent_tcp+0xa4>)
 801000e:	f00e fea7 	bl	801ed60 <iprintf>

  if (conn) {
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d032      	beq.n	801007e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	785b      	ldrb	r3, [r3, #1]
 801001c:	2b01      	cmp	r3, #1
 801001e:	d104      	bne.n	801002a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8010020:	2101      	movs	r1, #1
 8010022:	6978      	ldr	r0, [r7, #20]
 8010024:	f000 fdf0 	bl	8010c08 <lwip_netconn_do_writemore>
 8010028:	e007      	b.n	801003a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	785b      	ldrb	r3, [r3, #1]
 801002e:	2b04      	cmp	r3, #4
 8010030:	d103      	bne.n	801003a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8010032:	2101      	movs	r1, #1
 8010034:	6978      	ldr	r0, [r7, #20]
 8010036:	f000 fae1 	bl	80105fc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	685b      	ldr	r3, [r3, #4]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d01d      	beq.n	801007e <sent_tcp+0x92>
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	685b      	ldr	r3, [r3, #4]
 8010046:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801004a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 801004e:	d316      	bcc.n	801007e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	685b      	ldr	r3, [r3, #4]
 8010054:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010058:	2b04      	cmp	r3, #4
 801005a:	d810      	bhi.n	801007e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	7f1b      	ldrb	r3, [r3, #28]
 8010060:	f023 0310 	bic.w	r3, r3, #16
 8010064:	b2da      	uxtb	r2, r3
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801006e:	2b00      	cmp	r3, #0
 8010070:	d005      	beq.n	801007e <sent_tcp+0x92>
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010076:	88fa      	ldrh	r2, [r7, #6]
 8010078:	2102      	movs	r1, #2
 801007a:	6978      	ldr	r0, [r7, #20]
 801007c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801007e:	2300      	movs	r3, #0
}
 8010080:	4618      	mov	r0, r3
 8010082:	3718      	adds	r7, #24
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}
 8010088:	08022828 	.word	0x08022828
 801008c:	08022980 	.word	0x08022980
 8010090:	0802286c 	.word	0x0802286c

08010094 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b088      	sub	sp, #32
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
 801009c:	460b      	mov	r3, r1
 801009e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80100a4:	69fb      	ldr	r3, [r7, #28]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d106      	bne.n	80100b8 <err_tcp+0x24>
 80100aa:	4b5f      	ldr	r3, [pc, #380]	; (8010228 <err_tcp+0x194>)
 80100ac:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80100b0:	495e      	ldr	r1, [pc, #376]	; (801022c <err_tcp+0x198>)
 80100b2:	485f      	ldr	r0, [pc, #380]	; (8010230 <err_tcp+0x19c>)
 80100b4:	f00e fe54 	bl	801ed60 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80100b8:	f00d fd58 	bl	801db6c <sys_arch_protect>
 80100bc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80100be:	69fb      	ldr	r3, [r7, #28]
 80100c0:	2200      	movs	r2, #0
 80100c2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80100c4:	69fb      	ldr	r3, [r7, #28]
 80100c6:	78fa      	ldrb	r2, [r7, #3]
 80100c8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80100ca:	69fb      	ldr	r3, [r7, #28]
 80100cc:	7f1b      	ldrb	r3, [r3, #28]
 80100ce:	f043 0301 	orr.w	r3, r3, #1
 80100d2:	b2da      	uxtb	r2, r3
 80100d4:	69fb      	ldr	r3, [r7, #28]
 80100d6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80100d8:	69fb      	ldr	r3, [r7, #28]
 80100da:	785b      	ldrb	r3, [r3, #1]
 80100dc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80100de:	69fb      	ldr	r3, [r7, #28]
 80100e0:	2200      	movs	r2, #0
 80100e2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80100e4:	69b8      	ldr	r0, [r7, #24]
 80100e6:	f00d fd4f 	bl	801db88 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80100ea:	69fb      	ldr	r3, [r7, #28]
 80100ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d005      	beq.n	80100fe <err_tcp+0x6a>
 80100f2:	69fb      	ldr	r3, [r7, #28]
 80100f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100f6:	2200      	movs	r2, #0
 80100f8:	2104      	movs	r1, #4
 80100fa:	69f8      	ldr	r0, [r7, #28]
 80100fc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80100fe:	69fb      	ldr	r3, [r7, #28]
 8010100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010102:	2b00      	cmp	r3, #0
 8010104:	d005      	beq.n	8010112 <err_tcp+0x7e>
 8010106:	69fb      	ldr	r3, [r7, #28]
 8010108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801010a:	2200      	movs	r2, #0
 801010c:	2100      	movs	r1, #0
 801010e:	69f8      	ldr	r0, [r7, #28]
 8010110:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010112:	69fb      	ldr	r3, [r7, #28]
 8010114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010116:	2b00      	cmp	r3, #0
 8010118:	d005      	beq.n	8010126 <err_tcp+0x92>
 801011a:	69fb      	ldr	r3, [r7, #28]
 801011c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801011e:	2200      	movs	r2, #0
 8010120:	2102      	movs	r1, #2
 8010122:	69f8      	ldr	r0, [r7, #28]
 8010124:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8010126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801012a:	4618      	mov	r0, r3
 801012c:	f7ff fd86 	bl	800fc3c <lwip_netconn_err_to_msg>
 8010130:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010132:	69fb      	ldr	r3, [r7, #28]
 8010134:	3310      	adds	r3, #16
 8010136:	4618      	mov	r0, r3
 8010138:	f00d fbfd 	bl	801d936 <sys_mbox_valid>
 801013c:	4603      	mov	r3, r0
 801013e:	2b00      	cmp	r3, #0
 8010140:	d005      	beq.n	801014e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	3310      	adds	r3, #16
 8010146:	6939      	ldr	r1, [r7, #16]
 8010148:	4618      	mov	r0, r3
 801014a:	f00d fb7f 	bl	801d84c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 801014e:	69fb      	ldr	r3, [r7, #28]
 8010150:	3314      	adds	r3, #20
 8010152:	4618      	mov	r0, r3
 8010154:	f00d fbef 	bl	801d936 <sys_mbox_valid>
 8010158:	4603      	mov	r3, r0
 801015a:	2b00      	cmp	r3, #0
 801015c:	d005      	beq.n	801016a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 801015e:	69fb      	ldr	r3, [r7, #28]
 8010160:	3314      	adds	r3, #20
 8010162:	6939      	ldr	r1, [r7, #16]
 8010164:	4618      	mov	r0, r3
 8010166:	f00d fb71 	bl	801d84c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 801016a:	7dfb      	ldrb	r3, [r7, #23]
 801016c:	2b01      	cmp	r3, #1
 801016e:	d005      	beq.n	801017c <err_tcp+0xe8>
 8010170:	7dfb      	ldrb	r3, [r7, #23]
 8010172:	2b04      	cmp	r3, #4
 8010174:	d002      	beq.n	801017c <err_tcp+0xe8>
 8010176:	7dfb      	ldrb	r3, [r7, #23]
 8010178:	2b03      	cmp	r3, #3
 801017a:	d143      	bne.n	8010204 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 801017c:	69fb      	ldr	r3, [r7, #28]
 801017e:	7f1b      	ldrb	r3, [r3, #28]
 8010180:	f003 0304 	and.w	r3, r3, #4
 8010184:	2b00      	cmp	r3, #0
 8010186:	bf14      	ite	ne
 8010188:	2301      	movne	r3, #1
 801018a:	2300      	moveq	r3, #0
 801018c:	b2db      	uxtb	r3, r3
 801018e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8010190:	69fb      	ldr	r3, [r7, #28]
 8010192:	7f1b      	ldrb	r3, [r3, #28]
 8010194:	f023 0304 	bic.w	r3, r3, #4
 8010198:	b2da      	uxtb	r2, r3
 801019a:	69fb      	ldr	r3, [r7, #28]
 801019c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d13b      	bne.n	801021c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80101a4:	69fb      	ldr	r3, [r7, #28]
 80101a6:	6a1b      	ldr	r3, [r3, #32]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d106      	bne.n	80101ba <err_tcp+0x126>
 80101ac:	4b1e      	ldr	r3, [pc, #120]	; (8010228 <err_tcp+0x194>)
 80101ae:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80101b2:	4920      	ldr	r1, [pc, #128]	; (8010234 <err_tcp+0x1a0>)
 80101b4:	481e      	ldr	r0, [pc, #120]	; (8010230 <err_tcp+0x19c>)
 80101b6:	f00e fdd3 	bl	801ed60 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80101ba:	7dfb      	ldrb	r3, [r7, #23]
 80101bc:	2b04      	cmp	r3, #4
 80101be:	d104      	bne.n	80101ca <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80101c0:	69fb      	ldr	r3, [r7, #28]
 80101c2:	6a1b      	ldr	r3, [r3, #32]
 80101c4:	2200      	movs	r2, #0
 80101c6:	711a      	strb	r2, [r3, #4]
 80101c8:	e003      	b.n	80101d2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80101ca:	69fb      	ldr	r3, [r7, #28]
 80101cc:	6a1b      	ldr	r3, [r3, #32]
 80101ce:	78fa      	ldrb	r2, [r7, #3]
 80101d0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80101d2:	69fb      	ldr	r3, [r7, #28]
 80101d4:	6a1b      	ldr	r3, [r3, #32]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	330c      	adds	r3, #12
 80101da:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80101dc:	68b8      	ldr	r0, [r7, #8]
 80101de:	f00d fc3b 	bl	801da58 <sys_sem_valid>
 80101e2:	4603      	mov	r3, r0
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d106      	bne.n	80101f6 <err_tcp+0x162>
 80101e8:	4b0f      	ldr	r3, [pc, #60]	; (8010228 <err_tcp+0x194>)
 80101ea:	f240 12ef 	movw	r2, #495	; 0x1ef
 80101ee:	4912      	ldr	r1, [pc, #72]	; (8010238 <err_tcp+0x1a4>)
 80101f0:	480f      	ldr	r0, [pc, #60]	; (8010230 <err_tcp+0x19c>)
 80101f2:	f00e fdb5 	bl	801ed60 <iprintf>
      conn->current_msg = NULL;
 80101f6:	69fb      	ldr	r3, [r7, #28]
 80101f8:	2200      	movs	r2, #0
 80101fa:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80101fc:	68b8      	ldr	r0, [r7, #8]
 80101fe:	f00d fc11 	bl	801da24 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8010202:	e00b      	b.n	801021c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8010204:	69fb      	ldr	r3, [r7, #28]
 8010206:	6a1b      	ldr	r3, [r3, #32]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d008      	beq.n	801021e <err_tcp+0x18a>
 801020c:	4b06      	ldr	r3, [pc, #24]	; (8010228 <err_tcp+0x194>)
 801020e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8010212:	490a      	ldr	r1, [pc, #40]	; (801023c <err_tcp+0x1a8>)
 8010214:	4806      	ldr	r0, [pc, #24]	; (8010230 <err_tcp+0x19c>)
 8010216:	f00e fda3 	bl	801ed60 <iprintf>
  }
}
 801021a:	e000      	b.n	801021e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 801021c:	bf00      	nop
}
 801021e:	bf00      	nop
 8010220:	3720      	adds	r7, #32
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
 8010226:	bf00      	nop
 8010228:	08022828 	.word	0x08022828
 801022c:	08022980 	.word	0x08022980
 8010230:	0802286c 	.word	0x0802286c
 8010234:	08022990 	.word	0x08022990
 8010238:	080229ac 	.word	0x080229ac
 801023c:	080229c8 	.word	0x080229c8

08010240 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b084      	sub	sp, #16
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	685b      	ldr	r3, [r3, #4]
 801024c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 801024e:	6879      	ldr	r1, [r7, #4]
 8010250:	68f8      	ldr	r0, [r7, #12]
 8010252:	f005 fbdb 	bl	8015a0c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8010256:	490a      	ldr	r1, [pc, #40]	; (8010280 <setup_tcp+0x40>)
 8010258:	68f8      	ldr	r0, [r7, #12]
 801025a:	f005 fbe9 	bl	8015a30 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 801025e:	4909      	ldr	r1, [pc, #36]	; (8010284 <setup_tcp+0x44>)
 8010260:	68f8      	ldr	r0, [r7, #12]
 8010262:	f005 fc07 	bl	8015a74 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8010266:	2202      	movs	r2, #2
 8010268:	4907      	ldr	r1, [pc, #28]	; (8010288 <setup_tcp+0x48>)
 801026a:	68f8      	ldr	r0, [r7, #12]
 801026c:	f005 fc5e 	bl	8015b2c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8010270:	4906      	ldr	r1, [pc, #24]	; (801028c <setup_tcp+0x4c>)
 8010272:	68f8      	ldr	r0, [r7, #12]
 8010274:	f005 fc20 	bl	8015ab8 <tcp_err>
}
 8010278:	bf00      	nop
 801027a:	3710      	adds	r7, #16
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}
 8010280:	0800fe19 	.word	0x0800fe19
 8010284:	0800ffed 	.word	0x0800ffed
 8010288:	0800ff25 	.word	0x0800ff25
 801028c:	08010095 	.word	0x08010095

08010290 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8010290:	b590      	push	{r4, r7, lr}
 8010292:	b085      	sub	sp, #20
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8010298:	2300      	movs	r3, #0
 801029a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	685b      	ldr	r3, [r3, #4]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d006      	beq.n	80102b4 <pcb_new+0x24>
 80102a6:	4b2b      	ldr	r3, [pc, #172]	; (8010354 <pcb_new+0xc4>)
 80102a8:	f240 2265 	movw	r2, #613	; 0x265
 80102ac:	492a      	ldr	r1, [pc, #168]	; (8010358 <pcb_new+0xc8>)
 80102ae:	482b      	ldr	r0, [pc, #172]	; (801035c <pcb_new+0xcc>)
 80102b0:	f00e fd56 	bl	801ed60 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80102be:	2b10      	cmp	r3, #16
 80102c0:	d022      	beq.n	8010308 <pcb_new+0x78>
 80102c2:	2b20      	cmp	r3, #32
 80102c4:	d133      	bne.n	801032e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681c      	ldr	r4, [r3, #0]
 80102ca:	7bfb      	ldrb	r3, [r7, #15]
 80102cc:	4618      	mov	r0, r3
 80102ce:	f00a fe62 	bl	801af96 <udp_new_ip_type>
 80102d2:	4603      	mov	r3, r0
 80102d4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d02a      	beq.n	8010336 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	2b22      	cmp	r3, #34	; 0x22
 80102e8:	d104      	bne.n	80102f4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	685b      	ldr	r3, [r3, #4]
 80102f0:	2201      	movs	r2, #1
 80102f2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	6858      	ldr	r0, [r3, #4]
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	461a      	mov	r2, r3
 8010300:	4917      	ldr	r1, [pc, #92]	; (8010360 <pcb_new+0xd0>)
 8010302:	f00a fdcf 	bl	801aea4 <udp_recv>
      }
      break;
 8010306:	e016      	b.n	8010336 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681c      	ldr	r4, [r3, #0]
 801030c:	7bfb      	ldrb	r3, [r7, #15]
 801030e:	4618      	mov	r0, r3
 8010310:	f005 fb6e 	bl	80159f0 <tcp_new_ip_type>
 8010314:	4603      	mov	r3, r0
 8010316:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	685b      	ldr	r3, [r3, #4]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d00b      	beq.n	801033a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	4618      	mov	r0, r3
 8010328:	f7ff ff8a 	bl	8010240 <setup_tcp>
      }
      break;
 801032c:	e005      	b.n	801033a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	22fa      	movs	r2, #250	; 0xfa
 8010332:	711a      	strb	r2, [r3, #4]
      return;
 8010334:	e00a      	b.n	801034c <pcb_new+0xbc>
      break;
 8010336:	bf00      	nop
 8010338:	e000      	b.n	801033c <pcb_new+0xac>
      break;
 801033a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	685b      	ldr	r3, [r3, #4]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d102      	bne.n	801034c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	22ff      	movs	r2, #255	; 0xff
 801034a:	711a      	strb	r2, [r3, #4]
  }
}
 801034c:	3714      	adds	r7, #20
 801034e:	46bd      	mov	sp, r7
 8010350:	bd90      	pop	{r4, r7, pc}
 8010352:	bf00      	nop
 8010354:	08022828 	.word	0x08022828
 8010358:	08022a0c 	.word	0x08022a0c
 801035c:	0802286c 	.word	0x0802286c
 8010360:	0800fd1d 	.word	0x0800fd1d

08010364 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b084      	sub	sp, #16
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	2200      	movs	r2, #0
 8010374:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d102      	bne.n	8010386 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8010380:	68f8      	ldr	r0, [r7, #12]
 8010382:	f7ff ff85 	bl	8010290 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8010386:	bf00      	nop
 8010388:	3710      	adds	r7, #16
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}
	...

08010390 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b086      	sub	sp, #24
 8010394:	af00      	add	r7, sp, #0
 8010396:	4603      	mov	r3, r0
 8010398:	6039      	str	r1, [r7, #0]
 801039a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 801039c:	2300      	movs	r3, #0
 801039e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80103a0:	2007      	movs	r0, #7
 80103a2:	f002 fda5 	bl	8012ef0 <memp_malloc>
 80103a6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d101      	bne.n	80103b2 <netconn_alloc+0x22>
    return NULL;
 80103ae:	2300      	movs	r3, #0
 80103b0:	e052      	b.n	8010458 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2200      	movs	r2, #0
 80103b6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	79fa      	ldrb	r2, [r7, #7]
 80103bc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	2200      	movs	r2, #0
 80103c2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80103c4:	79fb      	ldrb	r3, [r7, #7]
 80103c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80103ca:	2b10      	cmp	r3, #16
 80103cc:	d004      	beq.n	80103d8 <netconn_alloc+0x48>
 80103ce:	2b20      	cmp	r3, #32
 80103d0:	d105      	bne.n	80103de <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80103d2:	2306      	movs	r3, #6
 80103d4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80103d6:	e00a      	b.n	80103ee <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80103d8:	2306      	movs	r3, #6
 80103da:	617b      	str	r3, [r7, #20]
      break;
 80103dc:	e007      	b.n	80103ee <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80103de:	4b20      	ldr	r3, [pc, #128]	; (8010460 <netconn_alloc+0xd0>)
 80103e0:	f240 22e5 	movw	r2, #741	; 0x2e5
 80103e4:	491f      	ldr	r1, [pc, #124]	; (8010464 <netconn_alloc+0xd4>)
 80103e6:	4820      	ldr	r0, [pc, #128]	; (8010468 <netconn_alloc+0xd8>)
 80103e8:	f00e fcba 	bl	801ed60 <iprintf>
      goto free_and_return;
 80103ec:	e02f      	b.n	801044e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	3310      	adds	r3, #16
 80103f2:	6979      	ldr	r1, [r7, #20]
 80103f4:	4618      	mov	r0, r3
 80103f6:	f00d f9f5 	bl	801d7e4 <sys_mbox_new>
 80103fa:	4603      	mov	r3, r0
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d125      	bne.n	801044c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	330c      	adds	r3, #12
 8010404:	2100      	movs	r1, #0
 8010406:	4618      	mov	r0, r3
 8010408:	f00d fab3 	bl	801d972 <sys_sem_new>
 801040c:	4603      	mov	r3, r0
 801040e:	2b00      	cmp	r3, #0
 8010410:	d005      	beq.n	801041e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	3310      	adds	r3, #16
 8010416:	4618      	mov	r0, r3
 8010418:	f00d fa06 	bl	801d828 <sys_mbox_free>
    goto free_and_return;
 801041c:	e017      	b.n	801044e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	3314      	adds	r3, #20
 8010422:	4618      	mov	r0, r3
 8010424:	f00d fa98 	bl	801d958 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	2200      	movs	r2, #0
 801042c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	f04f 32ff 	mov.w	r2, #4294967295
 8010434:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	683a      	ldr	r2, [r7, #0]
 801043a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	2200      	movs	r2, #0
 8010440:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	7cfa      	ldrb	r2, [r7, #19]
 8010446:	771a      	strb	r2, [r3, #28]
  return conn;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	e005      	b.n	8010458 <netconn_alloc+0xc8>
    goto free_and_return;
 801044c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 801044e:	68f9      	ldr	r1, [r7, #12]
 8010450:	2007      	movs	r0, #7
 8010452:	f002 fd9f 	bl	8012f94 <memp_free>
  return NULL;
 8010456:	2300      	movs	r3, #0
}
 8010458:	4618      	mov	r0, r3
 801045a:	3718      	adds	r7, #24
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}
 8010460:	08022828 	.word	0x08022828
 8010464:	08022a2c 	.word	0x08022a2c
 8010468:	0802286c 	.word	0x0802286c

0801046c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b082      	sub	sp, #8
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	685b      	ldr	r3, [r3, #4]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d006      	beq.n	801048a <netconn_free+0x1e>
 801047c:	4b1b      	ldr	r3, [pc, #108]	; (80104ec <netconn_free+0x80>)
 801047e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010482:	491b      	ldr	r1, [pc, #108]	; (80104f0 <netconn_free+0x84>)
 8010484:	481b      	ldr	r0, [pc, #108]	; (80104f4 <netconn_free+0x88>)
 8010486:	f00e fc6b 	bl	801ed60 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	3310      	adds	r3, #16
 801048e:	4618      	mov	r0, r3
 8010490:	f00d fa51 	bl	801d936 <sys_mbox_valid>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d006      	beq.n	80104a8 <netconn_free+0x3c>
 801049a:	4b14      	ldr	r3, [pc, #80]	; (80104ec <netconn_free+0x80>)
 801049c:	f240 3223 	movw	r2, #803	; 0x323
 80104a0:	4915      	ldr	r1, [pc, #84]	; (80104f8 <netconn_free+0x8c>)
 80104a2:	4814      	ldr	r0, [pc, #80]	; (80104f4 <netconn_free+0x88>)
 80104a4:	f00e fc5c 	bl	801ed60 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	3314      	adds	r3, #20
 80104ac:	4618      	mov	r0, r3
 80104ae:	f00d fa42 	bl	801d936 <sys_mbox_valid>
 80104b2:	4603      	mov	r3, r0
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d006      	beq.n	80104c6 <netconn_free+0x5a>
 80104b8:	4b0c      	ldr	r3, [pc, #48]	; (80104ec <netconn_free+0x80>)
 80104ba:	f240 3226 	movw	r2, #806	; 0x326
 80104be:	490f      	ldr	r1, [pc, #60]	; (80104fc <netconn_free+0x90>)
 80104c0:	480c      	ldr	r0, [pc, #48]	; (80104f4 <netconn_free+0x88>)
 80104c2:	f00e fc4d 	bl	801ed60 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	330c      	adds	r3, #12
 80104ca:	4618      	mov	r0, r3
 80104cc:	f00d fab7 	bl	801da3e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	330c      	adds	r3, #12
 80104d4:	4618      	mov	r0, r3
 80104d6:	f00d fad0 	bl	801da7a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80104da:	6879      	ldr	r1, [r7, #4]
 80104dc:	2007      	movs	r0, #7
 80104de:	f002 fd59 	bl	8012f94 <memp_free>
}
 80104e2:	bf00      	nop
 80104e4:	3708      	adds	r7, #8
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}
 80104ea:	bf00      	nop
 80104ec:	08022828 	.word	0x08022828
 80104f0:	08022a54 	.word	0x08022a54
 80104f4:	0802286c 	.word	0x0802286c
 80104f8:	08022a84 	.word	0x08022a84
 80104fc:	08022ac0 	.word	0x08022ac0

08010500 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b086      	sub	sp, #24
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	3310      	adds	r3, #16
 801050c:	4618      	mov	r0, r3
 801050e:	f00d fa12 	bl	801d936 <sys_mbox_valid>
 8010512:	4603      	mov	r3, r0
 8010514:	2b00      	cmp	r3, #0
 8010516:	d02f      	beq.n	8010578 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8010518:	e018      	b.n	801054c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010522:	2b10      	cmp	r3, #16
 8010524:	d10e      	bne.n	8010544 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	f107 020f 	add.w	r2, r7, #15
 801052c:	4611      	mov	r1, r2
 801052e:	4618      	mov	r0, r3
 8010530:	f7ff fbba 	bl	800fca8 <lwip_netconn_is_err_msg>
 8010534:	4603      	mov	r3, r0
 8010536:	2b00      	cmp	r3, #0
 8010538:	d108      	bne.n	801054c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	4618      	mov	r0, r3
 801053e:	f003 fba7 	bl	8013c90 <pbuf_free>
 8010542:	e003      	b.n	801054c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	4618      	mov	r0, r3
 8010548:	f000 fdb6 	bl	80110b8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	3310      	adds	r3, #16
 8010550:	f107 0210 	add.w	r2, r7, #16
 8010554:	4611      	mov	r1, r2
 8010556:	4618      	mov	r0, r3
 8010558:	f00d f9d1 	bl	801d8fe <sys_arch_mbox_tryfetch>
 801055c:	4603      	mov	r3, r0
 801055e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010562:	d1da      	bne.n	801051a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	3310      	adds	r3, #16
 8010568:	4618      	mov	r0, r3
 801056a:	f00d f95d 	bl	801d828 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	3310      	adds	r3, #16
 8010572:	4618      	mov	r0, r3
 8010574:	f00d f9f0 	bl	801d958 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	3314      	adds	r3, #20
 801057c:	4618      	mov	r0, r3
 801057e:	f00d f9da 	bl	801d936 <sys_mbox_valid>
 8010582:	4603      	mov	r3, r0
 8010584:	2b00      	cmp	r3, #0
 8010586:	d034      	beq.n	80105f2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8010588:	e01d      	b.n	80105c6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 801058a:	693b      	ldr	r3, [r7, #16]
 801058c:	f107 020e 	add.w	r2, r7, #14
 8010590:	4611      	mov	r1, r2
 8010592:	4618      	mov	r0, r3
 8010594:	f7ff fb88 	bl	800fca8 <lwip_netconn_is_err_msg>
 8010598:	4603      	mov	r3, r0
 801059a:	2b00      	cmp	r3, #0
 801059c:	d113      	bne.n	80105c6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80105a2:	6978      	ldr	r0, [r7, #20]
 80105a4:	f7ff ffac 	bl	8010500 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	685b      	ldr	r3, [r3, #4]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d007      	beq.n	80105c0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	685b      	ldr	r3, [r3, #4]
 80105b4:	4618      	mov	r0, r3
 80105b6:	f004 f96b 	bl	8014890 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80105ba:	697b      	ldr	r3, [r7, #20]
 80105bc:	2200      	movs	r2, #0
 80105be:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80105c0:	6978      	ldr	r0, [r7, #20]
 80105c2:	f7ff ff53 	bl	801046c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	3314      	adds	r3, #20
 80105ca:	f107 0210 	add.w	r2, r7, #16
 80105ce:	4611      	mov	r1, r2
 80105d0:	4618      	mov	r0, r3
 80105d2:	f00d f994 	bl	801d8fe <sys_arch_mbox_tryfetch>
 80105d6:	4603      	mov	r3, r0
 80105d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105dc:	d1d5      	bne.n	801058a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	3314      	adds	r3, #20
 80105e2:	4618      	mov	r0, r3
 80105e4:	f00d f920 	bl	801d828 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	3314      	adds	r3, #20
 80105ec:	4618      	mov	r0, r3
 80105ee:	f00d f9b3 	bl	801d958 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80105f2:	bf00      	nop
 80105f4:	3718      	adds	r7, #24
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
	...

080105fc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b086      	sub	sp, #24
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	460b      	mov	r3, r1
 8010606:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8010608:	2300      	movs	r3, #0
 801060a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d106      	bne.n	8010620 <lwip_netconn_do_close_internal+0x24>
 8010612:	4ba1      	ldr	r3, [pc, #644]	; (8010898 <lwip_netconn_do_close_internal+0x29c>)
 8010614:	f240 32a2 	movw	r2, #930	; 0x3a2
 8010618:	49a0      	ldr	r1, [pc, #640]	; (801089c <lwip_netconn_do_close_internal+0x2a0>)
 801061a:	48a1      	ldr	r0, [pc, #644]	; (80108a0 <lwip_netconn_do_close_internal+0x2a4>)
 801061c:	f00e fba0 	bl	801ed60 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	781b      	ldrb	r3, [r3, #0]
 8010624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010628:	2b10      	cmp	r3, #16
 801062a:	d006      	beq.n	801063a <lwip_netconn_do_close_internal+0x3e>
 801062c:	4b9a      	ldr	r3, [pc, #616]	; (8010898 <lwip_netconn_do_close_internal+0x29c>)
 801062e:	f240 32a3 	movw	r2, #931	; 0x3a3
 8010632:	499c      	ldr	r1, [pc, #624]	; (80108a4 <lwip_netconn_do_close_internal+0x2a8>)
 8010634:	489a      	ldr	r0, [pc, #616]	; (80108a0 <lwip_netconn_do_close_internal+0x2a4>)
 8010636:	f00e fb93 	bl	801ed60 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	785b      	ldrb	r3, [r3, #1]
 801063e:	2b04      	cmp	r3, #4
 8010640:	d006      	beq.n	8010650 <lwip_netconn_do_close_internal+0x54>
 8010642:	4b95      	ldr	r3, [pc, #596]	; (8010898 <lwip_netconn_do_close_internal+0x29c>)
 8010644:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8010648:	4997      	ldr	r1, [pc, #604]	; (80108a8 <lwip_netconn_do_close_internal+0x2ac>)
 801064a:	4895      	ldr	r0, [pc, #596]	; (80108a0 <lwip_netconn_do_close_internal+0x2a4>)
 801064c:	f00e fb88 	bl	801ed60 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	685b      	ldr	r3, [r3, #4]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d106      	bne.n	8010666 <lwip_netconn_do_close_internal+0x6a>
 8010658:	4b8f      	ldr	r3, [pc, #572]	; (8010898 <lwip_netconn_do_close_internal+0x29c>)
 801065a:	f240 32a5 	movw	r2, #933	; 0x3a5
 801065e:	4993      	ldr	r1, [pc, #588]	; (80108ac <lwip_netconn_do_close_internal+0x2b0>)
 8010660:	488f      	ldr	r0, [pc, #572]	; (80108a0 <lwip_netconn_do_close_internal+0x2a4>)
 8010662:	f00e fb7d 	bl	801ed60 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6a1b      	ldr	r3, [r3, #32]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d106      	bne.n	801067c <lwip_netconn_do_close_internal+0x80>
 801066e:	4b8a      	ldr	r3, [pc, #552]	; (8010898 <lwip_netconn_do_close_internal+0x29c>)
 8010670:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010674:	498e      	ldr	r1, [pc, #568]	; (80108b0 <lwip_netconn_do_close_internal+0x2b4>)
 8010676:	488a      	ldr	r0, [pc, #552]	; (80108a0 <lwip_netconn_do_close_internal+0x2a4>)
 8010678:	f00e fb72 	bl	801ed60 <iprintf>

  tpcb = conn->pcb.tcp;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	685b      	ldr	r3, [r3, #4]
 8010680:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6a1b      	ldr	r3, [r3, #32]
 8010686:	7a1b      	ldrb	r3, [r3, #8]
 8010688:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 801068a:	7bfb      	ldrb	r3, [r7, #15]
 801068c:	f003 0301 	and.w	r3, r3, #1
 8010690:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8010692:	7bfb      	ldrb	r3, [r7, #15]
 8010694:	f003 0302 	and.w	r3, r3, #2
 8010698:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 801069a:	7bfb      	ldrb	r3, [r7, #15]
 801069c:	2b03      	cmp	r3, #3
 801069e:	d102      	bne.n	80106a6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80106a0:	2301      	movs	r3, #1
 80106a2:	75bb      	strb	r3, [r7, #22]
 80106a4:	e01f      	b.n	80106e6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80106a6:	7bbb      	ldrb	r3, [r7, #14]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d00e      	beq.n	80106ca <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80106ac:	693b      	ldr	r3, [r7, #16]
 80106ae:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80106b0:	2b05      	cmp	r3, #5
 80106b2:	d007      	beq.n	80106c4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80106b8:	2b06      	cmp	r3, #6
 80106ba:	d003      	beq.n	80106c4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80106c0:	2b08      	cmp	r3, #8
 80106c2:	d102      	bne.n	80106ca <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80106c4:	2301      	movs	r3, #1
 80106c6:	75bb      	strb	r3, [r7, #22]
 80106c8:	e00d      	b.n	80106e6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80106ca:	7b7b      	ldrb	r3, [r7, #13]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d008      	beq.n	80106e2 <lwip_netconn_do_close_internal+0xe6>
 80106d0:	693b      	ldr	r3, [r7, #16]
 80106d2:	8b5b      	ldrh	r3, [r3, #26]
 80106d4:	f003 0310 	and.w	r3, r3, #16
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d002      	beq.n	80106e2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80106dc:	2301      	movs	r3, #1
 80106de:	75bb      	strb	r3, [r7, #22]
 80106e0:	e001      	b.n	80106e6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80106e2:	2300      	movs	r3, #0
 80106e4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80106e6:	7dbb      	ldrb	r3, [r7, #22]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d003      	beq.n	80106f4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80106ec:	2100      	movs	r1, #0
 80106ee:	6938      	ldr	r0, [r7, #16]
 80106f0:	f005 f98c 	bl	8015a0c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	7d1b      	ldrb	r3, [r3, #20]
 80106f8:	2b01      	cmp	r3, #1
 80106fa:	d104      	bne.n	8010706 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80106fc:	2100      	movs	r1, #0
 80106fe:	6938      	ldr	r0, [r7, #16]
 8010700:	f005 f9fc 	bl	8015afc <tcp_accept>
 8010704:	e01d      	b.n	8010742 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8010706:	7bbb      	ldrb	r3, [r7, #14]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d007      	beq.n	801071c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 801070c:	2100      	movs	r1, #0
 801070e:	6938      	ldr	r0, [r7, #16]
 8010710:	f005 f98e 	bl	8015a30 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8010714:	2100      	movs	r1, #0
 8010716:	6938      	ldr	r0, [r7, #16]
 8010718:	f005 f9f0 	bl	8015afc <tcp_accept>
    }
    if (shut_tx) {
 801071c:	7b7b      	ldrb	r3, [r7, #13]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d003      	beq.n	801072a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8010722:	2100      	movs	r1, #0
 8010724:	6938      	ldr	r0, [r7, #16]
 8010726:	f005 f9a5 	bl	8015a74 <tcp_sent>
    }
    if (shut_close) {
 801072a:	7dbb      	ldrb	r3, [r7, #22]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d008      	beq.n	8010742 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8010730:	2200      	movs	r2, #0
 8010732:	2100      	movs	r1, #0
 8010734:	6938      	ldr	r0, [r7, #16]
 8010736:	f005 f9f9 	bl	8015b2c <tcp_poll>
      tcp_err(tpcb, NULL);
 801073a:	2100      	movs	r1, #0
 801073c:	6938      	ldr	r0, [r7, #16]
 801073e:	f005 f9bb 	bl	8015ab8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8010742:	7dbb      	ldrb	r3, [r7, #22]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d005      	beq.n	8010754 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8010748:	6938      	ldr	r0, [r7, #16]
 801074a:	f003 ff5b 	bl	8014604 <tcp_close>
 801074e:	4603      	mov	r3, r0
 8010750:	75fb      	strb	r3, [r7, #23]
 8010752:	e007      	b.n	8010764 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8010754:	7bbb      	ldrb	r3, [r7, #14]
 8010756:	7b7a      	ldrb	r2, [r7, #13]
 8010758:	4619      	mov	r1, r3
 801075a:	6938      	ldr	r0, [r7, #16]
 801075c:	f003 ff7e 	bl	801465c <tcp_shutdown>
 8010760:	4603      	mov	r3, r0
 8010762:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8010764:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d102      	bne.n	8010772 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 801076c:	2301      	movs	r3, #1
 801076e:	757b      	strb	r3, [r7, #21]
 8010770:	e016      	b.n	80107a0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8010772:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010776:	f1b3 3fff 	cmp.w	r3, #4294967295
 801077a:	d10f      	bne.n	801079c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6a1b      	ldr	r3, [r3, #32]
 8010780:	7a5b      	ldrb	r3, [r3, #9]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d10c      	bne.n	80107a0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8010786:	2301      	movs	r3, #1
 8010788:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 801078a:	7dbb      	ldrb	r3, [r7, #22]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d007      	beq.n	80107a0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8010790:	6938      	ldr	r0, [r7, #16]
 8010792:	f004 f87d 	bl	8014890 <tcp_abort>
          err = ERR_OK;
 8010796:	2300      	movs	r3, #0
 8010798:	75fb      	strb	r3, [r7, #23]
 801079a:	e001      	b.n	80107a0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 801079c:	2301      	movs	r3, #1
 801079e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80107a0:	7d7b      	ldrb	r3, [r7, #21]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d044      	beq.n	8010830 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	6a1b      	ldr	r3, [r3, #32]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	330c      	adds	r3, #12
 80107ae:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	6a1b      	ldr	r3, [r3, #32]
 80107b4:	7dfa      	ldrb	r2, [r7, #23]
 80107b6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2200      	movs	r2, #0
 80107bc:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2200      	movs	r2, #0
 80107c2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80107c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d129      	bne.n	8010820 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80107cc:	7dbb      	ldrb	r3, [r7, #22]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d00c      	beq.n	80107ec <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2200      	movs	r2, #0
 80107d6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d005      	beq.n	80107ec <lwip_netconn_do_close_internal+0x1f0>
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107e4:	2200      	movs	r2, #0
 80107e6:	2104      	movs	r1, #4
 80107e8:	6878      	ldr	r0, [r7, #4]
 80107ea:	4798      	blx	r3
      }
      if (shut_rx) {
 80107ec:	7bbb      	ldrb	r3, [r7, #14]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d009      	beq.n	8010806 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d005      	beq.n	8010806 <lwip_netconn_do_close_internal+0x20a>
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107fe:	2200      	movs	r2, #0
 8010800:	2100      	movs	r1, #0
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	4798      	blx	r3
      }
      if (shut_tx) {
 8010806:	7b7b      	ldrb	r3, [r7, #13]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d009      	beq.n	8010820 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010810:	2b00      	cmp	r3, #0
 8010812:	d005      	beq.n	8010820 <lwip_netconn_do_close_internal+0x224>
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010818:	2200      	movs	r2, #0
 801081a:	2102      	movs	r1, #2
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8010820:	78fb      	ldrb	r3, [r7, #3]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d002      	beq.n	801082c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8010826:	68b8      	ldr	r0, [r7, #8]
 8010828:	f00d f8fc 	bl	801da24 <sys_sem_signal>
    }
    return ERR_OK;
 801082c:	2300      	movs	r3, #0
 801082e:	e02e      	b.n	801088e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8010830:	7d7b      	ldrb	r3, [r7, #21]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d11e      	bne.n	8010874 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8010836:	693b      	ldr	r3, [r7, #16]
 8010838:	7d1b      	ldrb	r3, [r3, #20]
 801083a:	2b01      	cmp	r3, #1
 801083c:	d106      	bne.n	801084c <lwip_netconn_do_close_internal+0x250>
 801083e:	4b16      	ldr	r3, [pc, #88]	; (8010898 <lwip_netconn_do_close_internal+0x29c>)
 8010840:	f240 4241 	movw	r2, #1089	; 0x441
 8010844:	491b      	ldr	r1, [pc, #108]	; (80108b4 <lwip_netconn_do_close_internal+0x2b8>)
 8010846:	4816      	ldr	r0, [pc, #88]	; (80108a0 <lwip_netconn_do_close_internal+0x2a4>)
 8010848:	f00e fa8a 	bl	801ed60 <iprintf>
    if (shut_tx) {
 801084c:	7b7b      	ldrb	r3, [r7, #13]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d003      	beq.n	801085a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8010852:	4919      	ldr	r1, [pc, #100]	; (80108b8 <lwip_netconn_do_close_internal+0x2bc>)
 8010854:	6938      	ldr	r0, [r7, #16]
 8010856:	f005 f90d 	bl	8015a74 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 801085a:	2201      	movs	r2, #1
 801085c:	4917      	ldr	r1, [pc, #92]	; (80108bc <lwip_netconn_do_close_internal+0x2c0>)
 801085e:	6938      	ldr	r0, [r7, #16]
 8010860:	f005 f964 	bl	8015b2c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8010864:	4916      	ldr	r1, [pc, #88]	; (80108c0 <lwip_netconn_do_close_internal+0x2c4>)
 8010866:	6938      	ldr	r0, [r7, #16]
 8010868:	f005 f926 	bl	8015ab8 <tcp_err>
    tcp_arg(tpcb, conn);
 801086c:	6879      	ldr	r1, [r7, #4]
 801086e:	6938      	ldr	r0, [r7, #16]
 8010870:	f005 f8cc 	bl	8015a0c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8010874:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d106      	bne.n	801088a <lwip_netconn_do_close_internal+0x28e>
 801087c:	4b06      	ldr	r3, [pc, #24]	; (8010898 <lwip_netconn_do_close_internal+0x29c>)
 801087e:	f240 424d 	movw	r2, #1101	; 0x44d
 8010882:	4910      	ldr	r1, [pc, #64]	; (80108c4 <lwip_netconn_do_close_internal+0x2c8>)
 8010884:	4806      	ldr	r0, [pc, #24]	; (80108a0 <lwip_netconn_do_close_internal+0x2a4>)
 8010886:	f00e fa6b 	bl	801ed60 <iprintf>
  return err;
 801088a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801088e:	4618      	mov	r0, r3
 8010890:	3718      	adds	r7, #24
 8010892:	46bd      	mov	sp, r7
 8010894:	bd80      	pop	{r7, pc}
 8010896:	bf00      	nop
 8010898:	08022828 	.word	0x08022828
 801089c:	08022afc 	.word	0x08022afc
 80108a0:	0802286c 	.word	0x0802286c
 80108a4:	08022b0c 	.word	0x08022b0c
 80108a8:	08022b2c 	.word	0x08022b2c
 80108ac:	08022b50 	.word	0x08022b50
 80108b0:	08022990 	.word	0x08022990
 80108b4:	08022b64 	.word	0x08022b64
 80108b8:	0800ffed 	.word	0x0800ffed
 80108bc:	0800ff25 	.word	0x0800ff25
 80108c0:	08010095 	.word	0x08010095
 80108c4:	08022b88 	.word	0x08022b88

080108c8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b084      	sub	sp, #16
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	785b      	ldrb	r3, [r3, #1]
 80108da:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80108dc:	7afb      	ldrb	r3, [r7, #11]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d00d      	beq.n	80108fe <lwip_netconn_do_delconn+0x36>
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80108ec:	2b10      	cmp	r3, #16
 80108ee:	d006      	beq.n	80108fe <lwip_netconn_do_delconn+0x36>
 80108f0:	4b60      	ldr	r3, [pc, #384]	; (8010a74 <lwip_netconn_do_delconn+0x1ac>)
 80108f2:	f240 425e 	movw	r2, #1118	; 0x45e
 80108f6:	4960      	ldr	r1, [pc, #384]	; (8010a78 <lwip_netconn_do_delconn+0x1b0>)
 80108f8:	4860      	ldr	r0, [pc, #384]	; (8010a7c <lwip_netconn_do_delconn+0x1b4>)
 80108fa:	f00e fa31 	bl	801ed60 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80108fe:	7afb      	ldrb	r3, [r7, #11]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d005      	beq.n	8010910 <lwip_netconn_do_delconn+0x48>
 8010904:	7afb      	ldrb	r3, [r7, #11]
 8010906:	2b02      	cmp	r3, #2
 8010908:	d002      	beq.n	8010910 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 801090a:	7afb      	ldrb	r3, [r7, #11]
 801090c:	2b03      	cmp	r3, #3
 801090e:	d109      	bne.n	8010924 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8010910:	7afb      	ldrb	r3, [r7, #11]
 8010912:	2b03      	cmp	r3, #3
 8010914:	d10a      	bne.n	801092c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	7f1b      	ldrb	r3, [r3, #28]
 801091c:	f003 0304 	and.w	r3, r3, #4
 8010920:	2b00      	cmp	r3, #0
 8010922:	d103      	bne.n	801092c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	22fb      	movs	r2, #251	; 0xfb
 8010928:	711a      	strb	r2, [r3, #4]
 801092a:	e097      	b.n	8010a5c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 801092c:	7afb      	ldrb	r3, [r7, #11]
 801092e:	2b03      	cmp	r3, #3
 8010930:	d10d      	bne.n	801094e <lwip_netconn_do_delconn+0x86>
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	7f1b      	ldrb	r3, [r3, #28]
 8010938:	f003 0304 	and.w	r3, r3, #4
 801093c:	2b00      	cmp	r3, #0
 801093e:	d106      	bne.n	801094e <lwip_netconn_do_delconn+0x86>
 8010940:	4b4c      	ldr	r3, [pc, #304]	; (8010a74 <lwip_netconn_do_delconn+0x1ac>)
 8010942:	f240 427a 	movw	r2, #1146	; 0x47a
 8010946:	494e      	ldr	r1, [pc, #312]	; (8010a80 <lwip_netconn_do_delconn+0x1b8>)
 8010948:	484c      	ldr	r0, [pc, #304]	; (8010a7c <lwip_netconn_do_delconn+0x1b4>)
 801094a:	f00e fa09 	bl	801ed60 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	2200      	movs	r2, #0
 8010952:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	4618      	mov	r0, r3
 801095a:	f7ff fdd1 	bl	8010500 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	685b      	ldr	r3, [r3, #4]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d05f      	beq.n	8010a28 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	781b      	ldrb	r3, [r3, #0]
 801096e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010972:	2b10      	cmp	r3, #16
 8010974:	d00d      	beq.n	8010992 <lwip_netconn_do_delconn+0xca>
 8010976:	2b20      	cmp	r3, #32
 8010978:	d151      	bne.n	8010a1e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	685b      	ldr	r3, [r3, #4]
 8010980:	2200      	movs	r2, #0
 8010982:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	685b      	ldr	r3, [r3, #4]
 801098a:	4618      	mov	r0, r3
 801098c:	f00a faaa 	bl	801aee4 <udp_remove>
          break;
 8010990:	e046      	b.n	8010a20 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	6a1b      	ldr	r3, [r3, #32]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d006      	beq.n	80109aa <lwip_netconn_do_delconn+0xe2>
 801099c:	4b35      	ldr	r3, [pc, #212]	; (8010a74 <lwip_netconn_do_delconn+0x1ac>)
 801099e:	f240 4294 	movw	r2, #1172	; 0x494
 80109a2:	4938      	ldr	r1, [pc, #224]	; (8010a84 <lwip_netconn_do_delconn+0x1bc>)
 80109a4:	4835      	ldr	r0, [pc, #212]	; (8010a7c <lwip_netconn_do_delconn+0x1b4>)
 80109a6:	f00e f9db 	bl	801ed60 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	2204      	movs	r2, #4
 80109b0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	2203      	movs	r2, #3
 80109b6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	68fa      	ldr	r2, [r7, #12]
 80109be:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	2100      	movs	r1, #0
 80109c6:	4618      	mov	r0, r3
 80109c8:	f7ff fe18 	bl	80105fc <lwip_netconn_do_close_internal>
 80109cc:	4603      	mov	r3, r0
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d04b      	beq.n	8010a6a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	785b      	ldrb	r3, [r3, #1]
 80109d8:	2b04      	cmp	r3, #4
 80109da:	d006      	beq.n	80109ea <lwip_netconn_do_delconn+0x122>
 80109dc:	4b25      	ldr	r3, [pc, #148]	; (8010a74 <lwip_netconn_do_delconn+0x1ac>)
 80109de:	f240 429a 	movw	r2, #1178	; 0x49a
 80109e2:	4929      	ldr	r1, [pc, #164]	; (8010a88 <lwip_netconn_do_delconn+0x1c0>)
 80109e4:	4825      	ldr	r0, [pc, #148]	; (8010a7c <lwip_netconn_do_delconn+0x1b4>)
 80109e6:	f00e f9bb 	bl	801ed60 <iprintf>
            UNLOCK_TCPIP_CORE();
 80109ea:	4828      	ldr	r0, [pc, #160]	; (8010a8c <lwip_netconn_do_delconn+0x1c4>)
 80109ec:	f00d f88b 	bl	801db06 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	330c      	adds	r3, #12
 80109f6:	2100      	movs	r1, #0
 80109f8:	4618      	mov	r0, r3
 80109fa:	f00c ffe2 	bl	801d9c2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80109fe:	4823      	ldr	r0, [pc, #140]	; (8010a8c <lwip_netconn_do_delconn+0x1c4>)
 8010a00:	f00d f872 	bl	801dae8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	785b      	ldrb	r3, [r3, #1]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d02d      	beq.n	8010a6a <lwip_netconn_do_delconn+0x1a2>
 8010a0e:	4b19      	ldr	r3, [pc, #100]	; (8010a74 <lwip_netconn_do_delconn+0x1ac>)
 8010a10:	f240 429e 	movw	r2, #1182	; 0x49e
 8010a14:	491c      	ldr	r1, [pc, #112]	; (8010a88 <lwip_netconn_do_delconn+0x1c0>)
 8010a16:	4819      	ldr	r0, [pc, #100]	; (8010a7c <lwip_netconn_do_delconn+0x1b4>)
 8010a18:	f00e f9a2 	bl	801ed60 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8010a1c:	e025      	b.n	8010a6a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8010a1e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	2200      	movs	r2, #0
 8010a26:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d007      	beq.n	8010a42 <lwip_netconn_do_delconn+0x17a>
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a38:	68fa      	ldr	r2, [r7, #12]
 8010a3a:	6810      	ldr	r0, [r2, #0]
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	2100      	movs	r1, #0
 8010a40:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d007      	beq.n	8010a5c <lwip_netconn_do_delconn+0x194>
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a52:	68fa      	ldr	r2, [r7, #12]
 8010a54:	6810      	ldr	r0, [r2, #0]
 8010a56:	2200      	movs	r2, #0
 8010a58:	2102      	movs	r1, #2
 8010a5a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	330c      	adds	r3, #12
 8010a62:	4618      	mov	r0, r3
 8010a64:	f00c fff8 	bl	801da58 <sys_sem_valid>
 8010a68:	e000      	b.n	8010a6c <lwip_netconn_do_delconn+0x1a4>
          return;
 8010a6a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8010a6c:	3710      	adds	r7, #16
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}
 8010a72:	bf00      	nop
 8010a74:	08022828 	.word	0x08022828
 8010a78:	08022b98 	.word	0x08022b98
 8010a7c:	0802286c 	.word	0x0802286c
 8010a80:	08022bac 	.word	0x08022bac
 8010a84:	08022bcc 	.word	0x08022bcc
 8010a88:	08022be8 	.word	0x08022be8
 8010a8c:	20008084 	.word	0x20008084

08010a90 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b084      	sub	sp, #16
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	685b      	ldr	r3, [r3, #4]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d025      	beq.n	8010af2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010aa6:	68bb      	ldr	r3, [r7, #8]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	781b      	ldrb	r3, [r3, #0]
 8010aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010ab0:	2b10      	cmp	r3, #16
 8010ab2:	d00e      	beq.n	8010ad2 <lwip_netconn_do_bind+0x42>
 8010ab4:	2b20      	cmp	r3, #32
 8010ab6:	d119      	bne.n	8010aec <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	6858      	ldr	r0, [r3, #4]
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	6899      	ldr	r1, [r3, #8]
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	899b      	ldrh	r3, [r3, #12]
 8010ac6:	461a      	mov	r2, r3
 8010ac8:	f00a f964 	bl	801ad94 <udp_bind>
 8010acc:	4603      	mov	r3, r0
 8010ace:	73fb      	strb	r3, [r7, #15]
        break;
 8010ad0:	e011      	b.n	8010af6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	6858      	ldr	r0, [r3, #4]
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	6899      	ldr	r1, [r3, #8]
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	899b      	ldrh	r3, [r3, #12]
 8010ae0:	461a      	mov	r2, r3
 8010ae2:	f003 fee1 	bl	80148a8 <tcp_bind>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	73fb      	strb	r3, [r7, #15]
        break;
 8010aea:	e004      	b.n	8010af6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8010aec:	23fa      	movs	r3, #250	; 0xfa
 8010aee:	73fb      	strb	r3, [r7, #15]
        break;
 8010af0:	e001      	b.n	8010af6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8010af2:	23fa      	movs	r3, #250	; 0xfa
 8010af4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8010af6:	68bb      	ldr	r3, [r7, #8]
 8010af8:	7bfa      	ldrb	r2, [r7, #15]
 8010afa:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8010afc:	bf00      	nop
 8010afe:	3710      	adds	r7, #16
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}

08010b04 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b084      	sub	sp, #16
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	4618      	mov	r0, r3
 8010b16:	f7ff f875 	bl	800fc04 <netconn_err>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d134      	bne.n	8010b90 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	685b      	ldr	r3, [r3, #4]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d02d      	beq.n	8010b8c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	781b      	ldrb	r3, [r3, #0]
 8010b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010b3a:	2b20      	cmp	r3, #32
 8010b3c:	d123      	bne.n	8010b86 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	689b      	ldr	r3, [r3, #8]
 8010b42:	689b      	ldr	r3, [r3, #8]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d10c      	bne.n	8010b62 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	685a      	ldr	r2, [r3, #4]
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	689b      	ldr	r3, [r3, #8]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	4619      	mov	r1, r3
 8010b56:	4610      	mov	r0, r2
 8010b58:	f009 ff32 	bl	801a9c0 <udp_send>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8010b60:	e016      	b.n	8010b90 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8010b62:	68bb      	ldr	r3, [r7, #8]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	6858      	ldr	r0, [r3, #4]
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	689b      	ldr	r3, [r3, #8]
 8010b6c:	6819      	ldr	r1, [r3, #0]
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	689b      	ldr	r3, [r3, #8]
 8010b72:	f103 0208 	add.w	r2, r3, #8
 8010b76:	68bb      	ldr	r3, [r7, #8]
 8010b78:	689b      	ldr	r3, [r3, #8]
 8010b7a:	899b      	ldrh	r3, [r3, #12]
 8010b7c:	f009 ff54 	bl	801aa28 <udp_sendto>
 8010b80:	4603      	mov	r3, r0
 8010b82:	73fb      	strb	r3, [r7, #15]
          break;
 8010b84:	e004      	b.n	8010b90 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8010b86:	23f5      	movs	r3, #245	; 0xf5
 8010b88:	73fb      	strb	r3, [r7, #15]
          break;
 8010b8a:	e001      	b.n	8010b90 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8010b8c:	23f5      	movs	r3, #245	; 0xf5
 8010b8e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	7bfa      	ldrb	r2, [r7, #15]
 8010b94:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8010b96:	bf00      	nop
 8010b98:	3710      	adds	r7, #16
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}

08010b9e <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8010b9e:	b580      	push	{r7, lr}
 8010ba0:	b086      	sub	sp, #24
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	2200      	movs	r2, #0
 8010bae:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	685b      	ldr	r3, [r3, #4]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d022      	beq.n	8010c00 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8010bba:	693b      	ldr	r3, [r7, #16]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	781b      	ldrb	r3, [r3, #0]
 8010bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010bc4:	2b10      	cmp	r3, #16
 8010bc6:	d11b      	bne.n	8010c00 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8010bc8:	693b      	ldr	r3, [r7, #16]
 8010bca:	689b      	ldr	r3, [r3, #8]
 8010bcc:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010bd4:	d202      	bcs.n	8010bdc <lwip_netconn_do_recv+0x3e>
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	b29b      	uxth	r3, r3
 8010bda:	e001      	b.n	8010be0 <lwip_netconn_do_recv+0x42>
 8010bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010be0:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8010be2:	693b      	ldr	r3, [r7, #16]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	685b      	ldr	r3, [r3, #4]
 8010be8:	89fa      	ldrh	r2, [r7, #14]
 8010bea:	4611      	mov	r1, r2
 8010bec:	4618      	mov	r0, r3
 8010bee:	f004 f829 	bl	8014c44 <tcp_recved>
        remaining -= recved;
 8010bf2:	89fb      	ldrh	r3, [r7, #14]
 8010bf4:	697a      	ldr	r2, [r7, #20]
 8010bf6:	1ad3      	subs	r3, r2, r3
 8010bf8:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d1e6      	bne.n	8010bce <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010c00:	bf00      	nop
 8010c02:	3718      	adds	r7, #24
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}

08010c08 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b088      	sub	sp, #32
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
 8010c10:	460b      	mov	r3, r1
 8010c12:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8010c14:	2300      	movs	r3, #0
 8010c16:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d106      	bne.n	8010c2c <lwip_netconn_do_writemore+0x24>
 8010c1e:	4b96      	ldr	r3, [pc, #600]	; (8010e78 <lwip_netconn_do_writemore+0x270>)
 8010c20:	f240 6273 	movw	r2, #1651	; 0x673
 8010c24:	4995      	ldr	r1, [pc, #596]	; (8010e7c <lwip_netconn_do_writemore+0x274>)
 8010c26:	4896      	ldr	r0, [pc, #600]	; (8010e80 <lwip_netconn_do_writemore+0x278>)
 8010c28:	f00e f89a 	bl	801ed60 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	785b      	ldrb	r3, [r3, #1]
 8010c30:	2b01      	cmp	r3, #1
 8010c32:	d006      	beq.n	8010c42 <lwip_netconn_do_writemore+0x3a>
 8010c34:	4b90      	ldr	r3, [pc, #576]	; (8010e78 <lwip_netconn_do_writemore+0x270>)
 8010c36:	f240 6274 	movw	r2, #1652	; 0x674
 8010c3a:	4992      	ldr	r1, [pc, #584]	; (8010e84 <lwip_netconn_do_writemore+0x27c>)
 8010c3c:	4890      	ldr	r0, [pc, #576]	; (8010e80 <lwip_netconn_do_writemore+0x278>)
 8010c3e:	f00e f88f 	bl	801ed60 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6a1b      	ldr	r3, [r3, #32]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d106      	bne.n	8010c58 <lwip_netconn_do_writemore+0x50>
 8010c4a:	4b8b      	ldr	r3, [pc, #556]	; (8010e78 <lwip_netconn_do_writemore+0x270>)
 8010c4c:	f240 6275 	movw	r2, #1653	; 0x675
 8010c50:	498d      	ldr	r1, [pc, #564]	; (8010e88 <lwip_netconn_do_writemore+0x280>)
 8010c52:	488b      	ldr	r0, [pc, #556]	; (8010e80 <lwip_netconn_do_writemore+0x278>)
 8010c54:	f00e f884 	bl	801ed60 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	685b      	ldr	r3, [r3, #4]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d106      	bne.n	8010c6e <lwip_netconn_do_writemore+0x66>
 8010c60:	4b85      	ldr	r3, [pc, #532]	; (8010e78 <lwip_netconn_do_writemore+0x270>)
 8010c62:	f240 6276 	movw	r2, #1654	; 0x676
 8010c66:	4989      	ldr	r1, [pc, #548]	; (8010e8c <lwip_netconn_do_writemore+0x284>)
 8010c68:	4885      	ldr	r0, [pc, #532]	; (8010e80 <lwip_netconn_do_writemore+0x278>)
 8010c6a:	f00e f879 	bl	801ed60 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6a1b      	ldr	r3, [r3, #32]
 8010c72:	699a      	ldr	r2, [r3, #24]
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6a1b      	ldr	r3, [r3, #32]
 8010c78:	695b      	ldr	r3, [r3, #20]
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	d306      	bcc.n	8010c8c <lwip_netconn_do_writemore+0x84>
 8010c7e:	4b7e      	ldr	r3, [pc, #504]	; (8010e78 <lwip_netconn_do_writemore+0x270>)
 8010c80:	f240 6277 	movw	r2, #1655	; 0x677
 8010c84:	4982      	ldr	r1, [pc, #520]	; (8010e90 <lwip_netconn_do_writemore+0x288>)
 8010c86:	487e      	ldr	r0, [pc, #504]	; (8010e80 <lwip_netconn_do_writemore+0x278>)
 8010c88:	f00e f86a 	bl	801ed60 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	6a1b      	ldr	r3, [r3, #32]
 8010c90:	899b      	ldrh	r3, [r3, #12]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d106      	bne.n	8010ca4 <lwip_netconn_do_writemore+0x9c>
 8010c96:	4b78      	ldr	r3, [pc, #480]	; (8010e78 <lwip_netconn_do_writemore+0x270>)
 8010c98:	f240 6279 	movw	r2, #1657	; 0x679
 8010c9c:	497d      	ldr	r1, [pc, #500]	; (8010e94 <lwip_netconn_do_writemore+0x28c>)
 8010c9e:	4878      	ldr	r0, [pc, #480]	; (8010e80 <lwip_netconn_do_writemore+0x278>)
 8010ca0:	f00e f85e 	bl	801ed60 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	6a1b      	ldr	r3, [r3, #32]
 8010ca8:	7f1b      	ldrb	r3, [r3, #28]
 8010caa:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	7f1b      	ldrb	r3, [r3, #28]
 8010cb0:	f003 0302 	and.w	r3, r3, #2
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d104      	bne.n	8010cc2 <lwip_netconn_do_writemore+0xba>
 8010cb8:	7ebb      	ldrb	r3, [r7, #26]
 8010cba:	f003 0304 	and.w	r3, r3, #4
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d001      	beq.n	8010cc6 <lwip_netconn_do_writemore+0xbe>
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	e000      	b.n	8010cc8 <lwip_netconn_do_writemore+0xc0>
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6a1b      	ldr	r3, [r3, #32]
 8010cce:	689b      	ldr	r3, [r3, #8]
 8010cd0:	681a      	ldr	r2, [r3, #0]
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6a1b      	ldr	r3, [r3, #32]
 8010cd6:	691b      	ldr	r3, [r3, #16]
 8010cd8:	4413      	add	r3, r2
 8010cda:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6a1b      	ldr	r3, [r3, #32]
 8010ce0:	689b      	ldr	r3, [r3, #8]
 8010ce2:	685a      	ldr	r2, [r3, #4]
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6a1b      	ldr	r3, [r3, #32]
 8010ce8:	691b      	ldr	r3, [r3, #16]
 8010cea:	1ad3      	subs	r3, r2, r3
 8010cec:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010cf4:	d307      	bcc.n	8010d06 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8010cf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010cfa:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010cfc:	7ebb      	ldrb	r3, [r7, #26]
 8010cfe:	f043 0302 	orr.w	r3, r3, #2
 8010d02:	76bb      	strb	r3, [r7, #26]
 8010d04:	e001      	b.n	8010d0a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8010d06:	693b      	ldr	r3, [r7, #16]
 8010d08:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	685b      	ldr	r3, [r3, #4]
 8010d0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010d12:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8010d14:	89fa      	ldrh	r2, [r7, #14]
 8010d16:	8bbb      	ldrh	r3, [r7, #28]
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d216      	bcs.n	8010d4a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8010d1c:	89fb      	ldrh	r3, [r7, #14]
 8010d1e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8010d20:	7e3b      	ldrb	r3, [r7, #24]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d00d      	beq.n	8010d42 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8010d26:	8bbb      	ldrh	r3, [r7, #28]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d10e      	bne.n	8010d4a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6a1b      	ldr	r3, [r3, #32]
 8010d30:	699b      	ldr	r3, [r3, #24]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d102      	bne.n	8010d3c <lwip_netconn_do_writemore+0x134>
 8010d36:	f06f 0306 	mvn.w	r3, #6
 8010d3a:	e000      	b.n	8010d3e <lwip_netconn_do_writemore+0x136>
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8010d40:	e07d      	b.n	8010e3e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8010d42:	7ebb      	ldrb	r3, [r7, #26]
 8010d44:	f043 0302 	orr.w	r3, r3, #2
 8010d48:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	6a1b      	ldr	r3, [r3, #32]
 8010d4e:	691a      	ldr	r2, [r3, #16]
 8010d50:	8bbb      	ldrh	r3, [r7, #28]
 8010d52:	441a      	add	r2, r3
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	6a1b      	ldr	r3, [r3, #32]
 8010d58:	689b      	ldr	r3, [r3, #8]
 8010d5a:	685b      	ldr	r3, [r3, #4]
 8010d5c:	429a      	cmp	r2, r3
 8010d5e:	d906      	bls.n	8010d6e <lwip_netconn_do_writemore+0x166>
 8010d60:	4b45      	ldr	r3, [pc, #276]	; (8010e78 <lwip_netconn_do_writemore+0x270>)
 8010d62:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8010d66:	494c      	ldr	r1, [pc, #304]	; (8010e98 <lwip_netconn_do_writemore+0x290>)
 8010d68:	4845      	ldr	r0, [pc, #276]	; (8010e80 <lwip_netconn_do_writemore+0x278>)
 8010d6a:	f00d fff9 	bl	801ed60 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8010d6e:	8bbb      	ldrh	r3, [r7, #28]
 8010d70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d74:	4293      	cmp	r3, r2
 8010d76:	d103      	bne.n	8010d80 <lwip_netconn_do_writemore+0x178>
 8010d78:	693b      	ldr	r3, [r7, #16]
 8010d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d7e:	d209      	bcs.n	8010d94 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8010d80:	693b      	ldr	r3, [r7, #16]
 8010d82:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8010d84:	8bba      	ldrh	r2, [r7, #28]
 8010d86:	429a      	cmp	r2, r3
 8010d88:	d10b      	bne.n	8010da2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	6a1b      	ldr	r3, [r3, #32]
 8010d8e:	899b      	ldrh	r3, [r3, #12]
 8010d90:	2b01      	cmp	r3, #1
 8010d92:	d906      	bls.n	8010da2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8010d94:	2301      	movs	r3, #1
 8010d96:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010d98:	7ebb      	ldrb	r3, [r7, #26]
 8010d9a:	f043 0302 	orr.w	r3, r3, #2
 8010d9e:	76bb      	strb	r3, [r7, #26]
 8010da0:	e001      	b.n	8010da6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8010da2:	2300      	movs	r3, #0
 8010da4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6858      	ldr	r0, [r3, #4]
 8010daa:	7ebb      	ldrb	r3, [r7, #26]
 8010dac:	8bba      	ldrh	r2, [r7, #28]
 8010dae:	6979      	ldr	r1, [r7, #20]
 8010db0:	f007 fd6a 	bl	8018888 <tcp_write>
 8010db4:	4603      	mov	r3, r0
 8010db6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8010db8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d12c      	bne.n	8010e1a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6a1b      	ldr	r3, [r3, #32]
 8010dc4:	6999      	ldr	r1, [r3, #24]
 8010dc6:	8bba      	ldrh	r2, [r7, #28]
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6a1b      	ldr	r3, [r3, #32]
 8010dcc:	440a      	add	r2, r1
 8010dce:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	6a1b      	ldr	r3, [r3, #32]
 8010dd4:	6919      	ldr	r1, [r3, #16]
 8010dd6:	8bba      	ldrh	r2, [r7, #28]
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	6a1b      	ldr	r3, [r3, #32]
 8010ddc:	440a      	add	r2, r1
 8010dde:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6a1b      	ldr	r3, [r3, #32]
 8010de4:	691a      	ldr	r2, [r3, #16]
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6a1b      	ldr	r3, [r3, #32]
 8010dea:	689b      	ldr	r3, [r3, #8]
 8010dec:	685b      	ldr	r3, [r3, #4]
 8010dee:	429a      	cmp	r2, r3
 8010df0:	d113      	bne.n	8010e1a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6a1b      	ldr	r3, [r3, #32]
 8010df6:	899a      	ldrh	r2, [r3, #12]
 8010df8:	3a01      	subs	r2, #1
 8010dfa:	b292      	uxth	r2, r2
 8010dfc:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	6a1b      	ldr	r3, [r3, #32]
 8010e02:	899b      	ldrh	r3, [r3, #12]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d008      	beq.n	8010e1a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6a1b      	ldr	r3, [r3, #32]
 8010e0c:	689a      	ldr	r2, [r3, #8]
 8010e0e:	3208      	adds	r2, #8
 8010e10:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6a1b      	ldr	r3, [r3, #32]
 8010e16:	2200      	movs	r2, #0
 8010e18:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8010e1a:	7e7b      	ldrb	r3, [r7, #25]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d004      	beq.n	8010e2a <lwip_netconn_do_writemore+0x222>
 8010e20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	f43f af50 	beq.w	8010cca <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8010e2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d004      	beq.n	8010e3c <lwip_netconn_do_writemore+0x234>
 8010e32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e3a:	d146      	bne.n	8010eca <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8010e3c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8010e3e:	7e3b      	ldrb	r3, [r7, #24]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d02b      	beq.n	8010e9c <lwip_netconn_do_writemore+0x294>
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6a1b      	ldr	r3, [r3, #32]
 8010e48:	699a      	ldr	r2, [r3, #24]
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6a1b      	ldr	r3, [r3, #32]
 8010e4e:	695b      	ldr	r3, [r3, #20]
 8010e50:	429a      	cmp	r2, r3
 8010e52:	d223      	bcs.n	8010e9c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d005      	beq.n	8010e68 <lwip_netconn_do_writemore+0x260>
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e60:	2200      	movs	r2, #0
 8010e62:	2103      	movs	r1, #3
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	7f1b      	ldrb	r3, [r3, #28]
 8010e6c:	f043 0310 	orr.w	r3, r3, #16
 8010e70:	b2da      	uxtb	r2, r3
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	771a      	strb	r2, [r3, #28]
 8010e76:	e028      	b.n	8010eca <lwip_netconn_do_writemore+0x2c2>
 8010e78:	08022828 	.word	0x08022828
 8010e7c:	08022980 	.word	0x08022980
 8010e80:	0802286c 	.word	0x0802286c
 8010e84:	08022c88 	.word	0x08022c88
 8010e88:	08022990 	.word	0x08022990
 8010e8c:	08022ca8 	.word	0x08022ca8
 8010e90:	08022cc0 	.word	0x08022cc0
 8010e94:	08022d00 	.word	0x08022d00
 8010e98:	08022d28 	.word	0x08022d28
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	685b      	ldr	r3, [r3, #4]
 8010ea0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010ea4:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8010ea8:	d305      	bcc.n	8010eb6 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	685b      	ldr	r3, [r3, #4]
 8010eae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8010eb2:	2b04      	cmp	r3, #4
 8010eb4:	d909      	bls.n	8010eca <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d005      	beq.n	8010eca <lwip_netconn_do_writemore+0x2c2>
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	2103      	movs	r1, #3
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8010eca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d11d      	bne.n	8010f0e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	6a1b      	ldr	r3, [r3, #32]
 8010ed6:	699a      	ldr	r2, [r3, #24]
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6a1b      	ldr	r3, [r3, #32]
 8010edc:	695b      	ldr	r3, [r3, #20]
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d002      	beq.n	8010ee8 <lwip_netconn_do_writemore+0x2e0>
 8010ee2:	7e3b      	ldrb	r3, [r7, #24]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d001      	beq.n	8010eec <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8010ee8:	2301      	movs	r3, #1
 8010eea:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	685b      	ldr	r3, [r3, #4]
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f008 fab3 	bl	801945c <tcp_output>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8010efa:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010efe:	f113 0f04 	cmn.w	r3, #4
 8010f02:	d12c      	bne.n	8010f5e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010f04:	7b3b      	ldrb	r3, [r7, #12]
 8010f06:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010f08:	2301      	movs	r3, #1
 8010f0a:	76fb      	strb	r3, [r7, #27]
 8010f0c:	e027      	b.n	8010f5e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8010f0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f16:	d120      	bne.n	8010f5a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	685b      	ldr	r3, [r3, #4]
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f008 fa9d 	bl	801945c <tcp_output>
 8010f22:	4603      	mov	r3, r0
 8010f24:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8010f26:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010f2a:	f113 0f04 	cmn.w	r3, #4
 8010f2e:	d104      	bne.n	8010f3a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010f30:	7b7b      	ldrb	r3, [r7, #13]
 8010f32:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010f34:	2301      	movs	r3, #1
 8010f36:	76fb      	strb	r3, [r7, #27]
 8010f38:	e011      	b.n	8010f5e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8010f3a:	7e3b      	ldrb	r3, [r7, #24]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d00e      	beq.n	8010f5e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	6a1b      	ldr	r3, [r3, #32]
 8010f44:	699b      	ldr	r3, [r3, #24]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d102      	bne.n	8010f50 <lwip_netconn_do_writemore+0x348>
 8010f4a:	f06f 0306 	mvn.w	r3, #6
 8010f4e:	e000      	b.n	8010f52 <lwip_netconn_do_writemore+0x34a>
 8010f50:	2300      	movs	r3, #0
 8010f52:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010f54:	2301      	movs	r3, #1
 8010f56:	76fb      	strb	r3, [r7, #27]
 8010f58:	e001      	b.n	8010f5e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8010f5e:	7efb      	ldrb	r3, [r7, #27]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d015      	beq.n	8010f90 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6a1b      	ldr	r3, [r3, #32]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	330c      	adds	r3, #12
 8010f6c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6a1b      	ldr	r3, [r3, #32]
 8010f72:	7ffa      	ldrb	r2, [r7, #31]
 8010f74:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2200      	movs	r2, #0
 8010f7a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2200      	movs	r2, #0
 8010f80:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8010f82:	78fb      	ldrb	r3, [r7, #3]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d006      	beq.n	8010f96 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8010f88:	68b8      	ldr	r0, [r7, #8]
 8010f8a:	f00c fd4b 	bl	801da24 <sys_sem_signal>
 8010f8e:	e002      	b.n	8010f96 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8010f90:	f04f 33ff 	mov.w	r3, #4294967295
 8010f94:	e000      	b.n	8010f98 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8010f96:	2300      	movs	r3, #0
}
 8010f98:	4618      	mov	r0, r3
 8010f9a:	3720      	adds	r7, #32
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b084      	sub	sp, #16
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	785b      	ldrb	r3, [r3, #1]
 8010fb2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	685b      	ldr	r3, [r3, #4]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d069      	beq.n	8011092 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	781b      	ldrb	r3, [r3, #0]
 8010fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8010fc8:	2b10      	cmp	r3, #16
 8010fca:	d162      	bne.n	8011092 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010fd0:	2b03      	cmp	r3, #3
 8010fd2:	d002      	beq.n	8010fda <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010fd4:	7afb      	ldrb	r3, [r7, #11]
 8010fd6:	2b02      	cmp	r3, #2
 8010fd8:	d05b      	beq.n	8011092 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8010fda:	7afb      	ldrb	r3, [r7, #11]
 8010fdc:	2b03      	cmp	r3, #3
 8010fde:	d103      	bne.n	8010fe8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	22f5      	movs	r2, #245	; 0xf5
 8010fe4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010fe6:	e059      	b.n	801109c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8010fe8:	7afb      	ldrb	r3, [r7, #11]
 8010fea:	2b01      	cmp	r3, #1
 8010fec:	d103      	bne.n	8010ff6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	22fb      	movs	r2, #251	; 0xfb
 8010ff2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010ff4:	e052      	b.n	801109c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	7a1b      	ldrb	r3, [r3, #8]
 8010ffa:	f003 0301 	and.w	r3, r3, #1
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d004      	beq.n	801100c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	4618      	mov	r0, r3
 8011008:	f7ff fa7a 	bl	8010500 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	6a1b      	ldr	r3, [r3, #32]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d006      	beq.n	8011024 <lwip_netconn_do_close+0x84>
 8011016:	4b23      	ldr	r3, [pc, #140]	; (80110a4 <lwip_netconn_do_close+0x104>)
 8011018:	f240 72bd 	movw	r2, #1981	; 0x7bd
 801101c:	4922      	ldr	r1, [pc, #136]	; (80110a8 <lwip_netconn_do_close+0x108>)
 801101e:	4823      	ldr	r0, [pc, #140]	; (80110ac <lwip_netconn_do_close+0x10c>)
 8011020:	f00d fe9e 	bl	801ed60 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	2204      	movs	r2, #4
 801102a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	68fa      	ldr	r2, [r7, #12]
 8011032:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	2100      	movs	r1, #0
 801103a:	4618      	mov	r0, r3
 801103c:	f7ff fade 	bl	80105fc <lwip_netconn_do_close_internal>
 8011040:	4603      	mov	r3, r0
 8011042:	2b00      	cmp	r3, #0
 8011044:	d029      	beq.n	801109a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	785b      	ldrb	r3, [r3, #1]
 801104c:	2b04      	cmp	r3, #4
 801104e:	d006      	beq.n	801105e <lwip_netconn_do_close+0xbe>
 8011050:	4b14      	ldr	r3, [pc, #80]	; (80110a4 <lwip_netconn_do_close+0x104>)
 8011052:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8011056:	4916      	ldr	r1, [pc, #88]	; (80110b0 <lwip_netconn_do_close+0x110>)
 8011058:	4814      	ldr	r0, [pc, #80]	; (80110ac <lwip_netconn_do_close+0x10c>)
 801105a:	f00d fe81 	bl	801ed60 <iprintf>
        UNLOCK_TCPIP_CORE();
 801105e:	4815      	ldr	r0, [pc, #84]	; (80110b4 <lwip_netconn_do_close+0x114>)
 8011060:	f00c fd51 	bl	801db06 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	330c      	adds	r3, #12
 801106a:	2100      	movs	r1, #0
 801106c:	4618      	mov	r0, r3
 801106e:	f00c fca8 	bl	801d9c2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8011072:	4810      	ldr	r0, [pc, #64]	; (80110b4 <lwip_netconn_do_close+0x114>)
 8011074:	f00c fd38 	bl	801dae8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	785b      	ldrb	r3, [r3, #1]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d00b      	beq.n	801109a <lwip_netconn_do_close+0xfa>
 8011082:	4b08      	ldr	r3, [pc, #32]	; (80110a4 <lwip_netconn_do_close+0x104>)
 8011084:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8011088:	4909      	ldr	r1, [pc, #36]	; (80110b0 <lwip_netconn_do_close+0x110>)
 801108a:	4808      	ldr	r0, [pc, #32]	; (80110ac <lwip_netconn_do_close+0x10c>)
 801108c:	f00d fe68 	bl	801ed60 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8011090:	e003      	b.n	801109a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	22f5      	movs	r2, #245	; 0xf5
 8011096:	711a      	strb	r2, [r3, #4]
 8011098:	e000      	b.n	801109c <lwip_netconn_do_close+0xfc>
      return;
 801109a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 801109c:	3710      	adds	r7, #16
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}
 80110a2:	bf00      	nop
 80110a4:	08022828 	.word	0x08022828
 80110a8:	08022bcc 	.word	0x08022bcc
 80110ac:	0802286c 	.word	0x0802286c
 80110b0:	08022be8 	.word	0x08022be8
 80110b4:	20008084 	.word	0x20008084

080110b8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b082      	sub	sp, #8
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d013      	beq.n	80110ee <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d00b      	beq.n	80110e6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	4618      	mov	r0, r3
 80110d4:	f002 fddc 	bl	8013c90 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2200      	movs	r2, #0
 80110dc:	605a      	str	r2, [r3, #4]
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	685a      	ldr	r2, [r3, #4]
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80110e6:	6879      	ldr	r1, [r7, #4]
 80110e8:	2006      	movs	r0, #6
 80110ea:	f001 ff53 	bl	8012f94 <memp_free>
  }
}
 80110ee:	bf00      	nop
 80110f0:	3708      	adds	r7, #8
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}
	...

080110f8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b084      	sub	sp, #16
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	60f8      	str	r0, [r7, #12]
 8011100:	60b9      	str	r1, [r7, #8]
 8011102:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d108      	bne.n	801111c <netbuf_data+0x24>
 801110a:	4b1b      	ldr	r3, [pc, #108]	; (8011178 <netbuf_data+0x80>)
 801110c:	22c6      	movs	r2, #198	; 0xc6
 801110e:	491b      	ldr	r1, [pc, #108]	; (801117c <netbuf_data+0x84>)
 8011110:	481b      	ldr	r0, [pc, #108]	; (8011180 <netbuf_data+0x88>)
 8011112:	f00d fe25 	bl	801ed60 <iprintf>
 8011116:	f06f 030f 	mvn.w	r3, #15
 801111a:	e029      	b.n	8011170 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d108      	bne.n	8011134 <netbuf_data+0x3c>
 8011122:	4b15      	ldr	r3, [pc, #84]	; (8011178 <netbuf_data+0x80>)
 8011124:	22c7      	movs	r2, #199	; 0xc7
 8011126:	4917      	ldr	r1, [pc, #92]	; (8011184 <netbuf_data+0x8c>)
 8011128:	4815      	ldr	r0, [pc, #84]	; (8011180 <netbuf_data+0x88>)
 801112a:	f00d fe19 	bl	801ed60 <iprintf>
 801112e:	f06f 030f 	mvn.w	r3, #15
 8011132:	e01d      	b.n	8011170 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d108      	bne.n	801114c <netbuf_data+0x54>
 801113a:	4b0f      	ldr	r3, [pc, #60]	; (8011178 <netbuf_data+0x80>)
 801113c:	22c8      	movs	r2, #200	; 0xc8
 801113e:	4912      	ldr	r1, [pc, #72]	; (8011188 <netbuf_data+0x90>)
 8011140:	480f      	ldr	r0, [pc, #60]	; (8011180 <netbuf_data+0x88>)
 8011142:	f00d fe0d 	bl	801ed60 <iprintf>
 8011146:	f06f 030f 	mvn.w	r3, #15
 801114a:	e011      	b.n	8011170 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	685b      	ldr	r3, [r3, #4]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d102      	bne.n	801115a <netbuf_data+0x62>
    return ERR_BUF;
 8011154:	f06f 0301 	mvn.w	r3, #1
 8011158:	e00a      	b.n	8011170 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	685b      	ldr	r3, [r3, #4]
 801115e:	685a      	ldr	r2, [r3, #4]
 8011160:	68bb      	ldr	r3, [r7, #8]
 8011162:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	685b      	ldr	r3, [r3, #4]
 8011168:	895a      	ldrh	r2, [r3, #10]
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 801116e:	2300      	movs	r3, #0
}
 8011170:	4618      	mov	r0, r3
 8011172:	3710      	adds	r7, #16
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}
 8011178:	08022d80 	.word	0x08022d80
 801117c:	08022e88 	.word	0x08022e88
 8011180:	08022dd0 	.word	0x08022dd0
 8011184:	08022ea4 	.word	0x08022ea4
 8011188:	08022ec4 	.word	0x08022ec4

0801118c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b082      	sub	sp, #8
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d108      	bne.n	80111ac <netbuf_next+0x20>
 801119a:	4b11      	ldr	r3, [pc, #68]	; (80111e0 <netbuf_next+0x54>)
 801119c:	22e0      	movs	r2, #224	; 0xe0
 801119e:	4911      	ldr	r1, [pc, #68]	; (80111e4 <netbuf_next+0x58>)
 80111a0:	4811      	ldr	r0, [pc, #68]	; (80111e8 <netbuf_next+0x5c>)
 80111a2:	f00d fddd 	bl	801ed60 <iprintf>
 80111a6:	f04f 33ff 	mov.w	r3, #4294967295
 80111aa:	e014      	b.n	80111d6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	685b      	ldr	r3, [r3, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d102      	bne.n	80111bc <netbuf_next+0x30>
    return -1;
 80111b6:	f04f 33ff 	mov.w	r3, #4294967295
 80111ba:	e00c      	b.n	80111d6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	685b      	ldr	r3, [r3, #4]
 80111c0:	681a      	ldr	r2, [r3, #0]
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	685b      	ldr	r3, [r3, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d101      	bne.n	80111d4 <netbuf_next+0x48>
    return 1;
 80111d0:	2301      	movs	r3, #1
 80111d2:	e000      	b.n	80111d6 <netbuf_next+0x4a>
  }
  return 0;
 80111d4:	2300      	movs	r3, #0
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3708      	adds	r7, #8
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}
 80111de:	bf00      	nop
 80111e0:	08022d80 	.word	0x08022d80
 80111e4:	08022ee0 	.word	0x08022ee0
 80111e8:	08022dd0 	.word	0x08022dd0

080111ec <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b084      	sub	sp, #16
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
 80111f4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80111f6:	f009 f9e9 	bl	801a5cc <sys_timeouts_sleeptime>
 80111fa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011202:	d10b      	bne.n	801121c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8011204:	4813      	ldr	r0, [pc, #76]	; (8011254 <tcpip_timeouts_mbox_fetch+0x68>)
 8011206:	f00c fc7e 	bl	801db06 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801120a:	2200      	movs	r2, #0
 801120c:	6839      	ldr	r1, [r7, #0]
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	f00c fb36 	bl	801d880 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8011214:	480f      	ldr	r0, [pc, #60]	; (8011254 <tcpip_timeouts_mbox_fetch+0x68>)
 8011216:	f00c fc67 	bl	801dae8 <sys_mutex_lock>
    return;
 801121a:	e018      	b.n	801124e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d102      	bne.n	8011228 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8011222:	f009 f999 	bl	801a558 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011226:	e7e6      	b.n	80111f6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8011228:	480a      	ldr	r0, [pc, #40]	; (8011254 <tcpip_timeouts_mbox_fetch+0x68>)
 801122a:	f00c fc6c 	bl	801db06 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801122e:	68fa      	ldr	r2, [r7, #12]
 8011230:	6839      	ldr	r1, [r7, #0]
 8011232:	6878      	ldr	r0, [r7, #4]
 8011234:	f00c fb24 	bl	801d880 <sys_arch_mbox_fetch>
 8011238:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801123a:	4806      	ldr	r0, [pc, #24]	; (8011254 <tcpip_timeouts_mbox_fetch+0x68>)
 801123c:	f00c fc54 	bl	801dae8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011246:	d102      	bne.n	801124e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011248:	f009 f986 	bl	801a558 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801124c:	e7d3      	b.n	80111f6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801124e:	3710      	adds	r7, #16
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}
 8011254:	20008084 	.word	0x20008084

08011258 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b084      	sub	sp, #16
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8011260:	4810      	ldr	r0, [pc, #64]	; (80112a4 <tcpip_thread+0x4c>)
 8011262:	f00c fc41 	bl	801dae8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8011266:	4b10      	ldr	r3, [pc, #64]	; (80112a8 <tcpip_thread+0x50>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d005      	beq.n	801127a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801126e:	4b0e      	ldr	r3, [pc, #56]	; (80112a8 <tcpip_thread+0x50>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	4a0e      	ldr	r2, [pc, #56]	; (80112ac <tcpip_thread+0x54>)
 8011274:	6812      	ldr	r2, [r2, #0]
 8011276:	4610      	mov	r0, r2
 8011278:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801127a:	f107 030c 	add.w	r3, r7, #12
 801127e:	4619      	mov	r1, r3
 8011280:	480b      	ldr	r0, [pc, #44]	; (80112b0 <tcpip_thread+0x58>)
 8011282:	f7ff ffb3 	bl	80111ec <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d106      	bne.n	801129a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801128c:	4b09      	ldr	r3, [pc, #36]	; (80112b4 <tcpip_thread+0x5c>)
 801128e:	2291      	movs	r2, #145	; 0x91
 8011290:	4909      	ldr	r1, [pc, #36]	; (80112b8 <tcpip_thread+0x60>)
 8011292:	480a      	ldr	r0, [pc, #40]	; (80112bc <tcpip_thread+0x64>)
 8011294:	f00d fd64 	bl	801ed60 <iprintf>
      continue;
 8011298:	e003      	b.n	80112a2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	4618      	mov	r0, r3
 801129e:	f000 f80f 	bl	80112c0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80112a2:	e7ea      	b.n	801127a <tcpip_thread+0x22>
 80112a4:	20008084 	.word	0x20008084
 80112a8:	200042c8 	.word	0x200042c8
 80112ac:	200042cc 	.word	0x200042cc
 80112b0:	200042d0 	.word	0x200042d0
 80112b4:	08022f18 	.word	0x08022f18
 80112b8:	08022f48 	.word	0x08022f48
 80112bc:	08022f68 	.word	0x08022f68

080112c0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b082      	sub	sp, #8
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	781b      	ldrb	r3, [r3, #0]
 80112cc:	2b02      	cmp	r3, #2
 80112ce:	d026      	beq.n	801131e <tcpip_thread_handle_msg+0x5e>
 80112d0:	2b02      	cmp	r3, #2
 80112d2:	dc2b      	bgt.n	801132c <tcpip_thread_handle_msg+0x6c>
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d002      	beq.n	80112de <tcpip_thread_handle_msg+0x1e>
 80112d8:	2b01      	cmp	r3, #1
 80112da:	d015      	beq.n	8011308 <tcpip_thread_handle_msg+0x48>
 80112dc:	e026      	b.n	801132c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	68db      	ldr	r3, [r3, #12]
 80112e2:	687a      	ldr	r2, [r7, #4]
 80112e4:	6850      	ldr	r0, [r2, #4]
 80112e6:	687a      	ldr	r2, [r7, #4]
 80112e8:	6892      	ldr	r2, [r2, #8]
 80112ea:	4611      	mov	r1, r2
 80112ec:	4798      	blx	r3
 80112ee:	4603      	mov	r3, r0
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d004      	beq.n	80112fe <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	4618      	mov	r0, r3
 80112fa:	f002 fcc9 	bl	8013c90 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80112fe:	6879      	ldr	r1, [r7, #4]
 8011300:	2009      	movs	r0, #9
 8011302:	f001 fe47 	bl	8012f94 <memp_free>
      break;
 8011306:	e018      	b.n	801133a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	685b      	ldr	r3, [r3, #4]
 801130c:	687a      	ldr	r2, [r7, #4]
 801130e:	6892      	ldr	r2, [r2, #8]
 8011310:	4610      	mov	r0, r2
 8011312:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8011314:	6879      	ldr	r1, [r7, #4]
 8011316:	2008      	movs	r0, #8
 8011318:	f001 fe3c 	bl	8012f94 <memp_free>
      break;
 801131c:	e00d      	b.n	801133a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	685b      	ldr	r3, [r3, #4]
 8011322:	687a      	ldr	r2, [r7, #4]
 8011324:	6892      	ldr	r2, [r2, #8]
 8011326:	4610      	mov	r0, r2
 8011328:	4798      	blx	r3
      break;
 801132a:	e006      	b.n	801133a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801132c:	4b05      	ldr	r3, [pc, #20]	; (8011344 <tcpip_thread_handle_msg+0x84>)
 801132e:	22cf      	movs	r2, #207	; 0xcf
 8011330:	4905      	ldr	r1, [pc, #20]	; (8011348 <tcpip_thread_handle_msg+0x88>)
 8011332:	4806      	ldr	r0, [pc, #24]	; (801134c <tcpip_thread_handle_msg+0x8c>)
 8011334:	f00d fd14 	bl	801ed60 <iprintf>
      break;
 8011338:	bf00      	nop
  }
}
 801133a:	bf00      	nop
 801133c:	3708      	adds	r7, #8
 801133e:	46bd      	mov	sp, r7
 8011340:	bd80      	pop	{r7, pc}
 8011342:	bf00      	nop
 8011344:	08022f18 	.word	0x08022f18
 8011348:	08022f48 	.word	0x08022f48
 801134c:	08022f68 	.word	0x08022f68

08011350 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b086      	sub	sp, #24
 8011354:	af00      	add	r7, sp, #0
 8011356:	60f8      	str	r0, [r7, #12]
 8011358:	60b9      	str	r1, [r7, #8]
 801135a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801135c:	481a      	ldr	r0, [pc, #104]	; (80113c8 <tcpip_inpkt+0x78>)
 801135e:	f00c faea 	bl	801d936 <sys_mbox_valid>
 8011362:	4603      	mov	r3, r0
 8011364:	2b00      	cmp	r3, #0
 8011366:	d105      	bne.n	8011374 <tcpip_inpkt+0x24>
 8011368:	4b18      	ldr	r3, [pc, #96]	; (80113cc <tcpip_inpkt+0x7c>)
 801136a:	22fc      	movs	r2, #252	; 0xfc
 801136c:	4918      	ldr	r1, [pc, #96]	; (80113d0 <tcpip_inpkt+0x80>)
 801136e:	4819      	ldr	r0, [pc, #100]	; (80113d4 <tcpip_inpkt+0x84>)
 8011370:	f00d fcf6 	bl	801ed60 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8011374:	2009      	movs	r0, #9
 8011376:	f001 fdbb 	bl	8012ef0 <memp_malloc>
 801137a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801137c:	697b      	ldr	r3, [r7, #20]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d102      	bne.n	8011388 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8011382:	f04f 33ff 	mov.w	r3, #4294967295
 8011386:	e01a      	b.n	80113be <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	2200      	movs	r2, #0
 801138c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	68fa      	ldr	r2, [r7, #12]
 8011392:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8011394:	697b      	ldr	r3, [r7, #20]
 8011396:	68ba      	ldr	r2, [r7, #8]
 8011398:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	687a      	ldr	r2, [r7, #4]
 801139e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80113a0:	6979      	ldr	r1, [r7, #20]
 80113a2:	4809      	ldr	r0, [pc, #36]	; (80113c8 <tcpip_inpkt+0x78>)
 80113a4:	f00c fa52 	bl	801d84c <sys_mbox_trypost>
 80113a8:	4603      	mov	r3, r0
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d006      	beq.n	80113bc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80113ae:	6979      	ldr	r1, [r7, #20]
 80113b0:	2009      	movs	r0, #9
 80113b2:	f001 fdef 	bl	8012f94 <memp_free>
    return ERR_MEM;
 80113b6:	f04f 33ff 	mov.w	r3, #4294967295
 80113ba:	e000      	b.n	80113be <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80113bc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80113be:	4618      	mov	r0, r3
 80113c0:	3718      	adds	r7, #24
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bd80      	pop	{r7, pc}
 80113c6:	bf00      	nop
 80113c8:	200042d0 	.word	0x200042d0
 80113cc:	08022f18 	.word	0x08022f18
 80113d0:	08022f90 	.word	0x08022f90
 80113d4:	08022f68 	.word	0x08022f68

080113d8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b082      	sub	sp, #8
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
 80113e0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80113e8:	f003 0318 	and.w	r3, r3, #24
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d006      	beq.n	80113fe <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80113f0:	4a08      	ldr	r2, [pc, #32]	; (8011414 <tcpip_input+0x3c>)
 80113f2:	6839      	ldr	r1, [r7, #0]
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	f7ff ffab 	bl	8011350 <tcpip_inpkt>
 80113fa:	4603      	mov	r3, r0
 80113fc:	e005      	b.n	801140a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80113fe:	4a06      	ldr	r2, [pc, #24]	; (8011418 <tcpip_input+0x40>)
 8011400:	6839      	ldr	r1, [r7, #0]
 8011402:	6878      	ldr	r0, [r7, #4]
 8011404:	f7ff ffa4 	bl	8011350 <tcpip_inpkt>
 8011408:	4603      	mov	r3, r0
}
 801140a:	4618      	mov	r0, r3
 801140c:	3708      	adds	r7, #8
 801140e:	46bd      	mov	sp, r7
 8011410:	bd80      	pop	{r7, pc}
 8011412:	bf00      	nop
 8011414:	0801d639 	.word	0x0801d639
 8011418:	0801c2f9 	.word	0x0801c2f9

0801141c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b084      	sub	sp, #16
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011426:	4819      	ldr	r0, [pc, #100]	; (801148c <tcpip_try_callback+0x70>)
 8011428:	f00c fa85 	bl	801d936 <sys_mbox_valid>
 801142c:	4603      	mov	r3, r0
 801142e:	2b00      	cmp	r3, #0
 8011430:	d106      	bne.n	8011440 <tcpip_try_callback+0x24>
 8011432:	4b17      	ldr	r3, [pc, #92]	; (8011490 <tcpip_try_callback+0x74>)
 8011434:	f240 125d 	movw	r2, #349	; 0x15d
 8011438:	4916      	ldr	r1, [pc, #88]	; (8011494 <tcpip_try_callback+0x78>)
 801143a:	4817      	ldr	r0, [pc, #92]	; (8011498 <tcpip_try_callback+0x7c>)
 801143c:	f00d fc90 	bl	801ed60 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8011440:	2008      	movs	r0, #8
 8011442:	f001 fd55 	bl	8012ef0 <memp_malloc>
 8011446:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d102      	bne.n	8011454 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801144e:	f04f 33ff 	mov.w	r3, #4294967295
 8011452:	e017      	b.n	8011484 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	2201      	movs	r2, #1
 8011458:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	687a      	ldr	r2, [r7, #4]
 801145e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	683a      	ldr	r2, [r7, #0]
 8011464:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011466:	68f9      	ldr	r1, [r7, #12]
 8011468:	4808      	ldr	r0, [pc, #32]	; (801148c <tcpip_try_callback+0x70>)
 801146a:	f00c f9ef 	bl	801d84c <sys_mbox_trypost>
 801146e:	4603      	mov	r3, r0
 8011470:	2b00      	cmp	r3, #0
 8011472:	d006      	beq.n	8011482 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8011474:	68f9      	ldr	r1, [r7, #12]
 8011476:	2008      	movs	r0, #8
 8011478:	f001 fd8c 	bl	8012f94 <memp_free>
    return ERR_MEM;
 801147c:	f04f 33ff 	mov.w	r3, #4294967295
 8011480:	e000      	b.n	8011484 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8011482:	2300      	movs	r3, #0
}
 8011484:	4618      	mov	r0, r3
 8011486:	3710      	adds	r7, #16
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}
 801148c:	200042d0 	.word	0x200042d0
 8011490:	08022f18 	.word	0x08022f18
 8011494:	08022f90 	.word	0x08022f90
 8011498:	08022f68 	.word	0x08022f68

0801149c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b084      	sub	sp, #16
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	60f8      	str	r0, [r7, #12]
 80114a4:	60b9      	str	r1, [r7, #8]
 80114a6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80114a8:	4806      	ldr	r0, [pc, #24]	; (80114c4 <tcpip_send_msg_wait_sem+0x28>)
 80114aa:	f00c fb1d 	bl	801dae8 <sys_mutex_lock>
  fn(apimsg);
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	68b8      	ldr	r0, [r7, #8]
 80114b2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80114b4:	4803      	ldr	r0, [pc, #12]	; (80114c4 <tcpip_send_msg_wait_sem+0x28>)
 80114b6:	f00c fb26 	bl	801db06 <sys_mutex_unlock>
  return ERR_OK;
 80114ba:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80114bc:	4618      	mov	r0, r3
 80114be:	3710      	adds	r7, #16
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}
 80114c4:	20008084 	.word	0x20008084

080114c8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b084      	sub	sp, #16
 80114cc:	af02      	add	r7, sp, #8
 80114ce:	6078      	str	r0, [r7, #4]
 80114d0:	6039      	str	r1, [r7, #0]
  lwip_init();
 80114d2:	f001 f885 	bl	80125e0 <lwip_init>

  tcpip_init_done = initfunc;
 80114d6:	4a17      	ldr	r2, [pc, #92]	; (8011534 <tcpip_init+0x6c>)
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80114dc:	4a16      	ldr	r2, [pc, #88]	; (8011538 <tcpip_init+0x70>)
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80114e2:	2106      	movs	r1, #6
 80114e4:	4815      	ldr	r0, [pc, #84]	; (801153c <tcpip_init+0x74>)
 80114e6:	f00c f97d 	bl	801d7e4 <sys_mbox_new>
 80114ea:	4603      	mov	r3, r0
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d006      	beq.n	80114fe <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80114f0:	4b13      	ldr	r3, [pc, #76]	; (8011540 <tcpip_init+0x78>)
 80114f2:	f240 2261 	movw	r2, #609	; 0x261
 80114f6:	4913      	ldr	r1, [pc, #76]	; (8011544 <tcpip_init+0x7c>)
 80114f8:	4813      	ldr	r0, [pc, #76]	; (8011548 <tcpip_init+0x80>)
 80114fa:	f00d fc31 	bl	801ed60 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80114fe:	4813      	ldr	r0, [pc, #76]	; (801154c <tcpip_init+0x84>)
 8011500:	f00c fad6 	bl	801dab0 <sys_mutex_new>
 8011504:	4603      	mov	r3, r0
 8011506:	2b00      	cmp	r3, #0
 8011508:	d006      	beq.n	8011518 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801150a:	4b0d      	ldr	r3, [pc, #52]	; (8011540 <tcpip_init+0x78>)
 801150c:	f240 2265 	movw	r2, #613	; 0x265
 8011510:	490f      	ldr	r1, [pc, #60]	; (8011550 <tcpip_init+0x88>)
 8011512:	480d      	ldr	r0, [pc, #52]	; (8011548 <tcpip_init+0x80>)
 8011514:	f00d fc24 	bl	801ed60 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8011518:	2300      	movs	r3, #0
 801151a:	9300      	str	r3, [sp, #0]
 801151c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011520:	2200      	movs	r2, #0
 8011522:	490c      	ldr	r1, [pc, #48]	; (8011554 <tcpip_init+0x8c>)
 8011524:	480c      	ldr	r0, [pc, #48]	; (8011558 <tcpip_init+0x90>)
 8011526:	f00c fafb 	bl	801db20 <sys_thread_new>
}
 801152a:	bf00      	nop
 801152c:	3708      	adds	r7, #8
 801152e:	46bd      	mov	sp, r7
 8011530:	bd80      	pop	{r7, pc}
 8011532:	bf00      	nop
 8011534:	200042c8 	.word	0x200042c8
 8011538:	200042cc 	.word	0x200042cc
 801153c:	200042d0 	.word	0x200042d0
 8011540:	08022f18 	.word	0x08022f18
 8011544:	08022fa0 	.word	0x08022fa0
 8011548:	08022f68 	.word	0x08022f68
 801154c:	20008084 	.word	0x20008084
 8011550:	08022fc4 	.word	0x08022fc4
 8011554:	08011259 	.word	0x08011259
 8011558:	08022fe8 	.word	0x08022fe8

0801155c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b084      	sub	sp, #16
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
 8011564:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d002      	beq.n	8011572 <fs_open+0x16>
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d102      	bne.n	8011578 <fs_open+0x1c>
    return ERR_ARG;
 8011572:	f06f 030f 	mvn.w	r3, #15
 8011576:	e037      	b.n	80115e8 <fs_open+0x8c>
  }

#if LWIP_HTTPD_CUSTOM_FILES
  if (fs_open_custom(file, name)) {
 8011578:	6839      	ldr	r1, [r7, #0]
 801157a:	6878      	ldr	r0, [r7, #4]
 801157c:	f7f0 ff4e 	bl	800241c <fs_open_custom>
 8011580:	4603      	mov	r3, r0
 8011582:	2b00      	cmp	r3, #0
 8011584:	d004      	beq.n	8011590 <fs_open+0x34>
    file->is_custom_file = 1;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2201      	movs	r2, #1
 801158a:	745a      	strb	r2, [r3, #17]
    return ERR_OK;
 801158c:	2300      	movs	r3, #0
 801158e:	e02b      	b.n	80115e8 <fs_open+0x8c>
  }
  file->is_custom_file = 0;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2200      	movs	r2, #0
 8011594:	745a      	strb	r2, [r3, #17]
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8011596:	4b16      	ldr	r3, [pc, #88]	; (80115f0 <fs_open+0x94>)
 8011598:	60fb      	str	r3, [r7, #12]
 801159a:	e020      	b.n	80115de <fs_open+0x82>
    if (!strcmp(name, (const char *)f->name)) {
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	685b      	ldr	r3, [r3, #4]
 80115a0:	4619      	mov	r1, r3
 80115a2:	6838      	ldr	r0, [r7, #0]
 80115a4:	f7ee fe14 	bl	80001d0 <strcmp>
 80115a8:	4603      	mov	r3, r0
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d114      	bne.n	80115d8 <fs_open+0x7c>
      file->data = (const char *)f->data;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	689a      	ldr	r2, [r3, #8]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	68da      	ldr	r2, [r3, #12]
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	68da      	ldr	r2, [r3, #12]
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2200      	movs	r2, #0
 80115ca:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	7c1a      	ldrb	r2, [r3, #16]
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80115d4:	2300      	movs	r3, #0
 80115d6:	e007      	b.n	80115e8 <fs_open+0x8c>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	60fb      	str	r3, [r7, #12]
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d1db      	bne.n	801159c <fs_open+0x40>
    }
  }
  /* file not found */
  return ERR_VAL;
 80115e4:	f06f 0305 	mvn.w	r3, #5
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	3710      	adds	r7, #16
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}
 80115f0:	08026b58 	.word	0x08026b58

080115f4 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b082      	sub	sp, #8
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
#if LWIP_HTTPD_CUSTOM_FILES
  if (file->is_custom_file) {
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	7c5b      	ldrb	r3, [r3, #17]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d002      	beq.n	801160a <fs_close+0x16>
    fs_close_custom(file);
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	f7f1 f885 	bl	8002714 <fs_close_custom>
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 801160a:	bf00      	nop
 801160c:	3708      	adds	r7, #8
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}

08011612 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8011612:	b480      	push	{r7}
 8011614:	b083      	sub	sp, #12
 8011616:	af00      	add	r7, sp, #0
 8011618:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	685a      	ldr	r2, [r3, #4]
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	689b      	ldr	r3, [r3, #8]
 8011622:	1ad3      	subs	r3, r2, r3
}
 8011624:	4618      	mov	r0, r3
 8011626:	370c      	adds	r7, #12
 8011628:	46bd      	mov	sp, r7
 801162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162e:	4770      	bx	lr

08011630 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b082      	sub	sp, #8
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8011638:	2230      	movs	r2, #48	; 0x30
 801163a:	2100      	movs	r1, #0
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f00d f909 	bl	801e854 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8011642:	bf00      	nop
 8011644:	3708      	adds	r7, #8
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}

0801164a <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 801164a:	b580      	push	{r7, lr}
 801164c:	b082      	sub	sp, #8
 801164e:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8011650:	2030      	movs	r0, #48	; 0x30
 8011652:	f001 facb 	bl	8012bec <mem_malloc>
 8011656:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d002      	beq.n	8011664 <http_state_alloc+0x1a>
    http_state_init(ret);
 801165e:	6878      	ldr	r0, [r7, #4]
 8011660:	f7ff ffe6 	bl	8011630 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8011664:	687b      	ldr	r3, [r7, #4]
}
 8011666:	4618      	mov	r0, r3
 8011668:	3708      	adds	r7, #8
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}

0801166e <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 801166e:	b580      	push	{r7, lr}
 8011670:	b082      	sub	sp, #8
 8011672:	af00      	add	r7, sp, #0
 8011674:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	695b      	ldr	r3, [r3, #20]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d007      	beq.n	801168e <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	695b      	ldr	r3, [r3, #20]
 8011682:	4618      	mov	r0, r3
 8011684:	f7ff ffb6 	bl	80115f4 <fs_close>
    hs->handle = NULL;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2200      	movs	r2, #0
 801168c:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	6a1b      	ldr	r3, [r3, #32]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d007      	beq.n	80116a6 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	6a1b      	ldr	r3, [r3, #32]
 801169a:	4618      	mov	r0, r3
 801169c:	f002 faf8 	bl	8013c90 <pbuf_free>
    hs->req = NULL;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2200      	movs	r2, #0
 80116a4:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 80116a6:	bf00      	nop
 80116a8:	3708      	adds	r7, #8
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}

080116ae <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 80116ae:	b580      	push	{r7, lr}
 80116b0:	b082      	sub	sp, #8
 80116b2:	af00      	add	r7, sp, #0
 80116b4:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d005      	beq.n	80116c8 <http_state_free+0x1a>
    http_state_eof(hs);
 80116bc:	6878      	ldr	r0, [r7, #4]
 80116be:	f7ff ffd6 	bl	801166e <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 80116c2:	6878      	ldr	r0, [r7, #4]
 80116c4:	f001 f8f8 	bl	80128b8 <mem_free>
  }
}
 80116c8:	bf00      	nop
 80116ca:	3708      	adds	r7, #8
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}

080116d0 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b086      	sub	sp, #24
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	60f8      	str	r0, [r7, #12]
 80116d8:	60b9      	str	r1, [r7, #8]
 80116da:	607a      	str	r2, [r7, #4]
 80116dc:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d106      	bne.n	80116f2 <http_write+0x22>
 80116e4:	4b2c      	ldr	r3, [pc, #176]	; (8011798 <http_write+0xc8>)
 80116e6:	f240 2219 	movw	r2, #537	; 0x219
 80116ea:	492c      	ldr	r1, [pc, #176]	; (801179c <http_write+0xcc>)
 80116ec:	482c      	ldr	r0, [pc, #176]	; (80117a0 <http_write+0xd0>)
 80116ee:	f00d fb37 	bl	801ed60 <iprintf>
  len = *length;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	881b      	ldrh	r3, [r3, #0]
 80116f6:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 80116f8:	8afb      	ldrh	r3, [r7, #22]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d101      	bne.n	8011702 <http_write+0x32>
    return ERR_OK;
 80116fe:	2300      	movs	r3, #0
 8011700:	e045      	b.n	801178e <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011708:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 801170a:	8aba      	ldrh	r2, [r7, #20]
 801170c:	8afb      	ldrh	r3, [r7, #22]
 801170e:	429a      	cmp	r2, r3
 8011710:	d201      	bcs.n	8011716 <http_write+0x46>
    len = max_len;
 8011712:	8abb      	ldrh	r3, [r7, #20]
 8011714:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801171a:	005b      	lsls	r3, r3, #1
 801171c:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 801171e:	8afa      	ldrh	r2, [r7, #22]
 8011720:	8abb      	ldrh	r3, [r7, #20]
 8011722:	429a      	cmp	r2, r3
 8011724:	d901      	bls.n	801172a <http_write+0x5a>
    len = max_len;
 8011726:	8abb      	ldrh	r3, [r7, #20]
 8011728:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 801172a:	78fb      	ldrb	r3, [r7, #3]
 801172c:	8afa      	ldrh	r2, [r7, #22]
 801172e:	68b9      	ldr	r1, [r7, #8]
 8011730:	68f8      	ldr	r0, [r7, #12]
 8011732:	f007 f8a9 	bl	8018888 <tcp_write>
 8011736:	4603      	mov	r3, r0
 8011738:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 801173a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801173e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011742:	d10f      	bne.n	8011764 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801174a:	2b00      	cmp	r3, #0
 801174c:	d004      	beq.n	8011758 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8011754:	2b08      	cmp	r3, #8
 8011756:	d902      	bls.n	801175e <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8011758:	2301      	movs	r3, #1
 801175a:	82fb      	strh	r3, [r7, #22]
 801175c:	e002      	b.n	8011764 <http_write+0x94>
      } else {
        len /= 2;
 801175e:	8afb      	ldrh	r3, [r7, #22]
 8011760:	085b      	lsrs	r3, r3, #1
 8011762:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8011764:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011768:	f1b3 3fff 	cmp.w	r3, #4294967295
 801176c:	d102      	bne.n	8011774 <http_write+0xa4>
 801176e:	8afb      	ldrh	r3, [r7, #22]
 8011770:	2b01      	cmp	r3, #1
 8011772:	d8da      	bhi.n	801172a <http_write+0x5a>

  if (err == ERR_OK) {
 8011774:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d103      	bne.n	8011784 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	8afa      	ldrh	r2, [r7, #22]
 8011780:	801a      	strh	r2, [r3, #0]
 8011782:	e002      	b.n	801178a <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2200      	movs	r2, #0
 8011788:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 801178a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801178e:	4618      	mov	r0, r3
 8011790:	3718      	adds	r7, #24
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}
 8011796:	bf00      	nop
 8011798:	08023038 	.word	0x08023038
 801179c:	08023070 	.word	0x08023070
 80117a0:	08023080 	.word	0x08023080

080117a4 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b086      	sub	sp, #24
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	60f8      	str	r0, [r7, #12]
 80117ac:	60b9      	str	r1, [r7, #8]
 80117ae:	4613      	mov	r3, r2
 80117b0:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d00b      	beq.n	80117d0 <http_close_or_abort_conn+0x2c>
    if ((hs->post_content_len_left != 0)
 80117b8:	68bb      	ldr	r3, [r7, #8]
 80117ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d007      	beq.n	80117d0 <http_close_or_abort_conn+0x2c>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 80117c0:	4b1f      	ldr	r3, [pc, #124]	; (8011840 <http_close_or_abort_conn+0x9c>)
 80117c2:	2200      	movs	r2, #0
 80117c4:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80117c6:	223f      	movs	r2, #63	; 0x3f
 80117c8:	491d      	ldr	r1, [pc, #116]	; (8011840 <http_close_or_abort_conn+0x9c>)
 80117ca:	68b8      	ldr	r0, [r7, #8]
 80117cc:	f7f1 fcd0 	bl	8003170 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 80117d0:	2100      	movs	r1, #0
 80117d2:	68f8      	ldr	r0, [r7, #12]
 80117d4:	f004 f91a 	bl	8015a0c <tcp_arg>
  altcp_recv(pcb, NULL);
 80117d8:	2100      	movs	r1, #0
 80117da:	68f8      	ldr	r0, [r7, #12]
 80117dc:	f004 f928 	bl	8015a30 <tcp_recv>
  altcp_err(pcb, NULL);
 80117e0:	2100      	movs	r1, #0
 80117e2:	68f8      	ldr	r0, [r7, #12]
 80117e4:	f004 f968 	bl	8015ab8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 80117e8:	2200      	movs	r2, #0
 80117ea:	2100      	movs	r1, #0
 80117ec:	68f8      	ldr	r0, [r7, #12]
 80117ee:	f004 f99d 	bl	8015b2c <tcp_poll>
  altcp_sent(pcb, NULL);
 80117f2:	2100      	movs	r1, #0
 80117f4:	68f8      	ldr	r0, [r7, #12]
 80117f6:	f004 f93d 	bl	8015a74 <tcp_sent>
  if (hs != NULL) {
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d002      	beq.n	8011806 <http_close_or_abort_conn+0x62>
    http_state_free(hs);
 8011800:	68b8      	ldr	r0, [r7, #8]
 8011802:	f7ff ff54 	bl	80116ae <http_state_free>
  }

  if (abort_conn) {
 8011806:	79fb      	ldrb	r3, [r7, #7]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d004      	beq.n	8011816 <http_close_or_abort_conn+0x72>
    altcp_abort(pcb);
 801180c:	68f8      	ldr	r0, [r7, #12]
 801180e:	f003 f83f 	bl	8014890 <tcp_abort>
    return ERR_OK;
 8011812:	2300      	movs	r3, #0
 8011814:	e00f      	b.n	8011836 <http_close_or_abort_conn+0x92>
  }
  err = altcp_close(pcb);
 8011816:	68f8      	ldr	r0, [r7, #12]
 8011818:	f002 fef4 	bl	8014604 <tcp_close>
 801181c:	4603      	mov	r3, r0
 801181e:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8011820:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d004      	beq.n	8011832 <http_close_or_abort_conn+0x8e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8011828:	2204      	movs	r2, #4
 801182a:	4906      	ldr	r1, [pc, #24]	; (8011844 <http_close_or_abort_conn+0xa0>)
 801182c:	68f8      	ldr	r0, [r7, #12]
 801182e:	f004 f97d 	bl	8015b2c <tcp_poll>
  }
  return err;
 8011832:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011836:	4618      	mov	r0, r3
 8011838:	3718      	adds	r7, #24
 801183a:	46bd      	mov	sp, r7
 801183c:	bd80      	pop	{r7, pc}
 801183e:	bf00      	nop
 8011840:	200046d4 	.word	0x200046d4
 8011844:	08012217 	.word	0x08012217

08011848 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b082      	sub	sp, #8
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
 8011850:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8011852:	2200      	movs	r2, #0
 8011854:	6839      	ldr	r1, [r7, #0]
 8011856:	6878      	ldr	r0, [r7, #4]
 8011858:	f7ff ffa4 	bl	80117a4 <http_close_or_abort_conn>
 801185c:	4603      	mov	r3, r0
}
 801185e:	4618      	mov	r0, r3
 8011860:	3708      	adds	r7, #8
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}

08011866 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8011866:	b580      	push	{r7, lr}
 8011868:	b082      	sub	sp, #8
 801186a:	af00      	add	r7, sp, #0
 801186c:	6078      	str	r0, [r7, #4]
 801186e:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8011870:	6839      	ldr	r1, [r7, #0]
 8011872:	6878      	ldr	r0, [r7, #4]
 8011874:	f7ff ffe8 	bl	8011848 <http_close_conn>
  }
}
 8011878:	bf00      	nop
 801187a:	3708      	adds	r7, #8
 801187c:	46bd      	mov	sp, r7
 801187e:	bd80      	pop	{r7, pc}

08011880 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b084      	sub	sp, #16
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
 8011888:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 801188a:	683b      	ldr	r3, [r7, #0]
 801188c:	695b      	ldr	r3, [r3, #20]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d105      	bne.n	801189e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8011892:	6839      	ldr	r1, [r7, #0]
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	f7ff ffe6 	bl	8011866 <http_eof>
    return 0;
 801189a:	2300      	movs	r3, #0
 801189c:	e016      	b.n	80118cc <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	695b      	ldr	r3, [r3, #20]
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7ff feb5 	bl	8011612 <fs_bytes_left>
 80118a8:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	dc05      	bgt.n	80118bc <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80118b0:	6839      	ldr	r1, [r7, #0]
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f7ff ffd7 	bl	8011866 <http_eof>
    return 0;
 80118b8:	2300      	movs	r3, #0
 80118ba:	e007      	b.n	80118cc <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80118bc:	4b05      	ldr	r3, [pc, #20]	; (80118d4 <http_check_eof+0x54>)
 80118be:	f240 429d 	movw	r2, #1181	; 0x49d
 80118c2:	4905      	ldr	r1, [pc, #20]	; (80118d8 <http_check_eof+0x58>)
 80118c4:	4805      	ldr	r0, [pc, #20]	; (80118dc <http_check_eof+0x5c>)
 80118c6:	f00d fa4b 	bl	801ed60 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 80118ca:	2301      	movs	r3, #1
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	3710      	adds	r7, #16
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd80      	pop	{r7, pc}
 80118d4:	08023038 	.word	0x08023038
 80118d8:	080230a8 	.word	0x080230a8
 80118dc:	08023080 	.word	0x08023080

080118e0 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b084      	sub	sp, #16
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
 80118e8:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 80118ea:	2300      	movs	r3, #0
 80118ec:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80118ee:	683b      	ldr	r3, [r7, #0]
 80118f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80118f6:	4293      	cmp	r3, r2
 80118f8:	d803      	bhi.n	8011902 <http_send_data_nonssi+0x22>
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118fe:	b29b      	uxth	r3, r3
 8011900:	e001      	b.n	8011906 <http_send_data_nonssi+0x26>
 8011902:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011906:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	6999      	ldr	r1, [r3, #24]
 801190c:	f107 020c 	add.w	r2, r7, #12
 8011910:	2300      	movs	r3, #0
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f7ff fedc 	bl	80116d0 <http_write>
 8011918:	4603      	mov	r3, r0
 801191a:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 801191c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d10d      	bne.n	8011940 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8011924:	2301      	movs	r3, #1
 8011926:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	699b      	ldr	r3, [r3, #24]
 801192c:	89ba      	ldrh	r2, [r7, #12]
 801192e:	441a      	add	r2, r3
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011938:	89ba      	ldrh	r2, [r7, #12]
 801193a:	1a9a      	subs	r2, r3, r2
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8011940:	7bfb      	ldrb	r3, [r7, #15]
}
 8011942:	4618      	mov	r0, r3
 8011944:	3710      	adds	r7, #16
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}

0801194a <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 801194a:	b580      	push	{r7, lr}
 801194c:	b084      	sub	sp, #16
 801194e:	af00      	add	r7, sp, #0
 8011950:	6078      	str	r0, [r7, #4]
 8011952:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8011954:	2300      	movs	r3, #0
 8011956:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d101      	bne.n	8011962 <http_send+0x18>
    return 0;
 801195e:	2300      	movs	r3, #0
 8011960:	e025      	b.n	80119ae <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8011962:	683b      	ldr	r3, [r7, #0]
 8011964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011966:	2b00      	cmp	r3, #0
 8011968:	d108      	bne.n	801197c <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 801196a:	6839      	ldr	r1, [r7, #0]
 801196c:	6878      	ldr	r0, [r7, #4]
 801196e:	f7ff ff87 	bl	8011880 <http_check_eof>
 8011972:	4603      	mov	r3, r0
 8011974:	2b00      	cmp	r3, #0
 8011976:	d101      	bne.n	801197c <http_send+0x32>
      return 0;
 8011978:	2300      	movs	r3, #0
 801197a:	e018      	b.n	80119ae <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 801197c:	6839      	ldr	r1, [r7, #0]
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	f7ff ffae 	bl	80118e0 <http_send_data_nonssi>
 8011984:	4603      	mov	r3, r0
 8011986:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801198c:	2b00      	cmp	r3, #0
 801198e:	d10d      	bne.n	80119ac <http_send+0x62>
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	695b      	ldr	r3, [r3, #20]
 8011994:	4618      	mov	r0, r3
 8011996:	f7ff fe3c 	bl	8011612 <fs_bytes_left>
 801199a:	4603      	mov	r3, r0
 801199c:	2b00      	cmp	r3, #0
 801199e:	dc05      	bgt.n	80119ac <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80119a0:	6839      	ldr	r1, [r7, #0]
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f7ff ff5f 	bl	8011866 <http_eof>
    return 0;
 80119a8:	2300      	movs	r3, #0
 80119aa:	e000      	b.n	80119ae <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 80119ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3710      	adds	r7, #16
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}
	...

080119b8 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b084      	sub	sp, #16
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
 80119c0:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	4a1c      	ldr	r2, [pc, #112]	; (8011a38 <http_get_404_file+0x80>)
 80119c6:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 80119c8:	687a      	ldr	r2, [r7, #4]
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	4619      	mov	r1, r3
 80119d0:	4610      	mov	r0, r2
 80119d2:	f7ff fdc3 	bl	801155c <fs_open>
 80119d6:	4603      	mov	r3, r0
 80119d8:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80119da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d024      	beq.n	8011a2c <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 80119e2:	683b      	ldr	r3, [r7, #0]
 80119e4:	4a15      	ldr	r2, [pc, #84]	; (8011a3c <http_get_404_file+0x84>)
 80119e6:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 80119e8:	687a      	ldr	r2, [r7, #4]
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	4619      	mov	r1, r3
 80119f0:	4610      	mov	r0, r2
 80119f2:	f7ff fdb3 	bl	801155c <fs_open>
 80119f6:	4603      	mov	r3, r0
 80119f8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80119fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d014      	beq.n	8011a2c <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	4a0e      	ldr	r2, [pc, #56]	; (8011a40 <http_get_404_file+0x88>)
 8011a06:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8011a08:	687a      	ldr	r2, [r7, #4]
 8011a0a:	683b      	ldr	r3, [r7, #0]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	4619      	mov	r1, r3
 8011a10:	4610      	mov	r0, r2
 8011a12:	f7ff fda3 	bl	801155c <fs_open>
 8011a16:	4603      	mov	r3, r0
 8011a18:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8011a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d004      	beq.n	8011a2c <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8011a22:	683b      	ldr	r3, [r7, #0]
 8011a24:	2200      	movs	r2, #0
 8011a26:	601a      	str	r2, [r3, #0]
        return NULL;
 8011a28:	2300      	movs	r3, #0
 8011a2a:	e000      	b.n	8011a2e <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8011a2c:	687b      	ldr	r3, [r7, #4]
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	3710      	adds	r7, #16
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}
 8011a36:	bf00      	nop
 8011a38:	080230e0 	.word	0x080230e0
 8011a3c:	080230ec 	.word	0x080230ec
 8011a40:	080230f8 	.word	0x080230f8

08011a44 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b082      	sub	sp, #8
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 8011a4c:	4b08      	ldr	r3, [pc, #32]	; (8011a70 <http_handle_post_finished+0x2c>)
 8011a4e:	2200      	movs	r2, #0
 8011a50:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8011a52:	223f      	movs	r2, #63	; 0x3f
 8011a54:	4906      	ldr	r1, [pc, #24]	; (8011a70 <http_handle_post_finished+0x2c>)
 8011a56:	6878      	ldr	r0, [r7, #4]
 8011a58:	f7f1 fb8a 	bl	8003170 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	4904      	ldr	r1, [pc, #16]	; (8011a70 <http_handle_post_finished+0x2c>)
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f000 fa51 	bl	8011f08 <http_find_file>
 8011a66:	4603      	mov	r3, r0
}
 8011a68:	4618      	mov	r0, r3
 8011a6a:	3708      	adds	r7, #8
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	bd80      	pop	{r7, pc}
 8011a70:	200046d4 	.word	0x200046d4

08011a74 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b084      	sub	sp, #16
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
 8011a7c:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d010      	beq.n	8011aa6 <http_post_rxpbuf+0x32>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a88:	683a      	ldr	r2, [r7, #0]
 8011a8a:	8912      	ldrh	r2, [r2, #8]
 8011a8c:	4293      	cmp	r3, r2
 8011a8e:	d203      	bcs.n	8011a98 <http_post_rxpbuf+0x24>
      hs->post_content_len_left = 0;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2200      	movs	r2, #0
 8011a94:	62da      	str	r2, [r3, #44]	; 0x2c
 8011a96:	e006      	b.n	8011aa6 <http_post_rxpbuf+0x32>
    } else {
      hs->post_content_len_left -= p->tot_len;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a9c:	683a      	ldr	r2, [r7, #0]
 8011a9e:	8912      	ldrh	r2, [r2, #8]
 8011aa0:	1a9a      	subs	r2, r3, r2
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d006      	beq.n	8011aba <http_post_rxpbuf+0x46>
    err = httpd_post_receive_data(hs, p);
 8011aac:	6839      	ldr	r1, [r7, #0]
 8011aae:	6878      	ldr	r0, [r7, #4]
 8011ab0:	f7f1 faac 	bl	800300c <httpd_post_receive_data>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	73fb      	strb	r3, [r7, #15]
 8011ab8:	e001      	b.n	8011abe <http_post_rxpbuf+0x4a>
  } else {
    err = ERR_OK;
 8011aba:	2300      	movs	r3, #0
 8011abc:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 8011abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d002      	beq.n	8011acc <http_post_rxpbuf+0x58>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2200      	movs	r2, #0
 8011aca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  if (hs->post_content_len_left == 0) {
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d104      	bne.n	8011ade <http_post_rxpbuf+0x6a>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 8011ad4:	6878      	ldr	r0, [r7, #4]
 8011ad6:	f7ff ffb5 	bl	8011a44 <http_handle_post_finished>
 8011ada:	4603      	mov	r3, r0
 8011adc:	e000      	b.n	8011ae0 <http_post_rxpbuf+0x6c>
  }

  return ERR_OK;
 8011ade:	2300      	movs	r3, #0
}
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	3710      	adds	r7, #16
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}

08011ae8 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b092      	sub	sp, #72	; 0x48
 8011aec:	af04      	add	r7, sp, #16
 8011aee:	60f8      	str	r0, [r7, #12]
 8011af0:	60b9      	str	r1, [r7, #8]
 8011af2:	607a      	str	r2, [r7, #4]
 8011af4:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8011af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011af8:	1c58      	adds	r0, r3, #1
 8011afa:	887a      	ldrh	r2, [r7, #2]
 8011afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011afe:	1c59      	adds	r1, r3, #1
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	1acb      	subs	r3, r1, r3
 8011b04:	1ad3      	subs	r3, r2, r3
 8011b06:	461a      	mov	r2, r3
 8011b08:	4964      	ldr	r1, [pc, #400]	; (8011c9c <http_post_request+0x1b4>)
 8011b0a:	f000 fd33 	bl	8012574 <lwip_strnstr>
 8011b0e:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 8011b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	f000 80bc 	beq.w	8011c90 <http_post_request+0x1a8>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8011b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b1a:	1c58      	adds	r0, r3, #1
 8011b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b1e:	3301      	adds	r3, #1
 8011b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b22:	1ad3      	subs	r3, r2, r3
 8011b24:	461a      	mov	r2, r3
 8011b26:	495e      	ldr	r1, [pc, #376]	; (8011ca0 <http_post_request+0x1b8>)
 8011b28:	f000 fd24 	bl	8012574 <lwip_strnstr>
 8011b2c:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 8011b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	f000 80aa 	beq.w	8011c8a <http_post_request+0x1a2>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8011b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b38:	3310      	adds	r3, #16
 8011b3a:	220a      	movs	r2, #10
 8011b3c:	4959      	ldr	r1, [pc, #356]	; (8011ca4 <http_post_request+0x1bc>)
 8011b3e:	4618      	mov	r0, r3
 8011b40:	f000 fd18 	bl	8012574 <lwip_strnstr>
 8011b44:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 8011b46:	6a3b      	ldr	r3, [r7, #32]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	f000 809e 	beq.w	8011c8a <http_post_request+0x1a2>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 8011b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b50:	3310      	adds	r3, #16
 8011b52:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 8011b54:	69f8      	ldr	r0, [r7, #28]
 8011b56:	f00c fd29 	bl	801e5ac <atoi>
 8011b5a:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 8011b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d10b      	bne.n	8011b7a <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8011b62:	69fb      	ldr	r3, [r7, #28]
 8011b64:	781b      	ldrb	r3, [r3, #0]
 8011b66:	2b30      	cmp	r3, #48	; 0x30
 8011b68:	d104      	bne.n	8011b74 <http_post_request+0x8c>
 8011b6a:	69fb      	ldr	r3, [r7, #28]
 8011b6c:	3301      	adds	r3, #1
 8011b6e:	781b      	ldrb	r3, [r3, #0]
 8011b70:	2b0d      	cmp	r3, #13
 8011b72:	d002      	beq.n	8011b7a <http_post_request+0x92>
            content_len = -1;
 8011b74:	f04f 33ff 	mov.w	r3, #4294967295
 8011b78:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 8011b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	f2c0 8081 	blt.w	8011c84 <http_post_request+0x19c>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 8011b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b84:	3301      	adds	r3, #1
 8011b86:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8011b88:	887a      	ldrh	r2, [r7, #2]
 8011b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b8c:	1d19      	adds	r1, r3, #4
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	1acb      	subs	r3, r1, r3
 8011b92:	429a      	cmp	r2, r3
 8011b94:	db05      	blt.n	8011ba2 <http_post_request+0xba>
 8011b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b98:	1d1a      	adds	r2, r3, #4
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	1ad3      	subs	r3, r2, r3
 8011b9e:	b29b      	uxth	r3, r3
 8011ba0:	e000      	b.n	8011ba4 <http_post_request+0xbc>
 8011ba2:	887b      	ldrh	r3, [r7, #2]
 8011ba4:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8011ba6:	887a      	ldrh	r2, [r7, #2]
 8011ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011baa:	1d19      	adds	r1, r3, #4
 8011bac:	69bb      	ldr	r3, [r7, #24]
 8011bae:	1acb      	subs	r3, r1, r3
 8011bb0:	429a      	cmp	r2, r3
 8011bb2:	db05      	blt.n	8011bc0 <http_post_request+0xd8>
 8011bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb6:	1d1a      	adds	r2, r3, #4
 8011bb8:	69bb      	ldr	r3, [r7, #24]
 8011bba:	1ad3      	subs	r3, r2, r3
 8011bbc:	b29b      	uxth	r3, r3
 8011bbe:	e000      	b.n	8011bc2 <http_post_request+0xda>
 8011bc0:	887b      	ldrh	r3, [r7, #2]
 8011bc2:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 8011bc8:	4b37      	ldr	r3, [pc, #220]	; (8011ca8 <http_post_request+0x1c0>)
 8011bca:	2200      	movs	r2, #0
 8011bcc:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 8011bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8011bd4:	8aba      	ldrh	r2, [r7, #20]
 8011bd6:	f107 0312 	add.w	r3, r7, #18
 8011bda:	9303      	str	r3, [sp, #12]
 8011bdc:	233f      	movs	r3, #63	; 0x3f
 8011bde:	9302      	str	r3, [sp, #8]
 8011be0:	4b31      	ldr	r3, [pc, #196]	; (8011ca8 <http_post_request+0x1c0>)
 8011be2:	9301      	str	r3, [sp, #4]
 8011be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011be6:	9300      	str	r3, [sp, #0]
 8011be8:	4613      	mov	r3, r2
 8011bea:	69ba      	ldr	r2, [r7, #24]
 8011bec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011bee:	68b8      	ldr	r0, [r7, #8]
 8011bf0:	f7f1 f9ce 	bl	8002f90 <httpd_post_begin>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 8011bf8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d13a      	bne.n	8011c76 <http_post_request+0x18e>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 8011c04:	8afb      	ldrh	r3, [r7, #22]
 8011c06:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 8011c08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 8011c0e:	e007      	b.n	8011c20 <http_post_request+0x138>
              start_offset -= q->len;
 8011c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c12:	895b      	ldrh	r3, [r3, #10]
 8011c14:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011c16:	1ad3      	subs	r3, r2, r3
 8011c18:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 8011c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 8011c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d004      	beq.n	8011c30 <http_post_request+0x148>
 8011c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c28:	895b      	ldrh	r3, [r3, #10]
 8011c2a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	d2ef      	bcs.n	8011c10 <http_post_request+0x128>
            }
            if (q != NULL) {
 8011c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d00d      	beq.n	8011c52 <http_post_request+0x16a>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 8011c36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011c38:	4619      	mov	r1, r3
 8011c3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c3c:	f001 ffa2 	bl	8013b84 <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 8011c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c42:	f002 f8cb 	bl	8013ddc <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8011c46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011c48:	68b8      	ldr	r0, [r7, #8]
 8011c4a:	f7ff ff13 	bl	8011a74 <http_post_rxpbuf>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	e020      	b.n	8011c94 <http_post_request+0x1ac>
            } else if (hs->post_content_len_left == 0) {
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d10b      	bne.n	8011c72 <http_post_request+0x18a>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 8011c5a:	2241      	movs	r2, #65	; 0x41
 8011c5c:	2100      	movs	r1, #0
 8011c5e:	2000      	movs	r0, #0
 8011c60:	f001 fd32 	bl	80136c8 <pbuf_alloc>
 8011c64:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 8011c66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011c68:	68b8      	ldr	r0, [r7, #8]
 8011c6a:	f7ff ff03 	bl	8011a74 <http_post_rxpbuf>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	e010      	b.n	8011c94 <http_post_request+0x1ac>
            } else {
              return ERR_OK;
 8011c72:	2300      	movs	r3, #0
 8011c74:	e00e      	b.n	8011c94 <http_post_request+0x1ac>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 8011c76:	2200      	movs	r2, #0
 8011c78:	490b      	ldr	r1, [pc, #44]	; (8011ca8 <http_post_request+0x1c0>)
 8011c7a:	68b8      	ldr	r0, [r7, #8]
 8011c7c:	f000 f944 	bl	8011f08 <http_find_file>
 8011c80:	4603      	mov	r3, r0
 8011c82:	e007      	b.n	8011c94 <http_post_request+0x1ac>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 8011c84:	f06f 030f 	mvn.w	r3, #15
 8011c88:	e004      	b.n	8011c94 <http_post_request+0x1ac>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 8011c8a:	f06f 030f 	mvn.w	r3, #15
 8011c8e:	e001      	b.n	8011c94 <http_post_request+0x1ac>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 8011c90:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8011c94:	4618      	mov	r0, r3
 8011c96:	3738      	adds	r7, #56	; 0x38
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}
 8011c9c:	08023104 	.word	0x08023104
 8011ca0:	0802310c 	.word	0x0802310c
 8011ca4:	08023120 	.word	0x08023120
 8011ca8:	200046d4 	.word	0x200046d4

08011cac <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b092      	sub	sp, #72	; 0x48
 8011cb0:	af02      	add	r7, sp, #8
 8011cb2:	60f8      	str	r0, [r7, #12]
 8011cb4:	60b9      	str	r1, [r7, #8]
 8011cb6:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8011cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d106      	bne.n	8011cd0 <http_parse_request+0x24>
 8011cc2:	4b87      	ldr	r3, [pc, #540]	; (8011ee0 <http_parse_request+0x234>)
 8011cc4:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8011cc8:	4986      	ldr	r1, [pc, #536]	; (8011ee4 <http_parse_request+0x238>)
 8011cca:	4887      	ldr	r0, [pc, #540]	; (8011ee8 <http_parse_request+0x23c>)
 8011ccc:	f00d f848 	bl	801ed60 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d106      	bne.n	8011ce4 <http_parse_request+0x38>
 8011cd6:	4b82      	ldr	r3, [pc, #520]	; (8011ee0 <http_parse_request+0x234>)
 8011cd8:	f240 72af 	movw	r2, #1967	; 0x7af
 8011cdc:	4983      	ldr	r1, [pc, #524]	; (8011eec <http_parse_request+0x240>)
 8011cde:	4882      	ldr	r0, [pc, #520]	; (8011ee8 <http_parse_request+0x23c>)
 8011ce0:	f00d f83e 	bl	801ed60 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8011ce4:	68bb      	ldr	r3, [r7, #8]
 8011ce6:	695b      	ldr	r3, [r3, #20]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d103      	bne.n	8011cf4 <http_parse_request+0x48>
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	699b      	ldr	r3, [r3, #24]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d002      	beq.n	8011cfa <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8011cf4:	f06f 0307 	mvn.w	r3, #7
 8011cf8:	e0ed      	b.n	8011ed6 <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	6a1b      	ldr	r3, [r3, #32]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d103      	bne.n	8011d0a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d06:	621a      	str	r2, [r3, #32]
 8011d08:	e005      	b.n	8011d16 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	6a1b      	ldr	r3, [r3, #32]
 8011d0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011d10:	4618      	mov	r0, r3
 8011d12:	f002 f88b 	bl	8013e2c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8011d16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d18:	f002 f860 	bl	8013ddc <pbuf_ref>

  if (hs->req->next != NULL) {
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	6a1b      	ldr	r3, [r3, #32]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d012      	beq.n	8011d4c <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8011d26:	68bb      	ldr	r3, [r7, #8]
 8011d28:	6a1b      	ldr	r3, [r3, #32]
 8011d2a:	891b      	ldrh	r3, [r3, #8]
 8011d2c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8011d30:	4293      	cmp	r3, r2
 8011d32:	bf28      	it	cs
 8011d34:	4613      	movcs	r3, r2
 8011d36:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8011d38:	68bb      	ldr	r3, [r7, #8]
 8011d3a:	6a18      	ldr	r0, [r3, #32]
 8011d3c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011d3e:	2300      	movs	r3, #0
 8011d40:	496b      	ldr	r1, [pc, #428]	; (8011ef0 <http_parse_request+0x244>)
 8011d42:	f002 f9ab 	bl	801409c <pbuf_copy_partial>
    data = httpd_req_buf;
 8011d46:	4b6a      	ldr	r3, [pc, #424]	; (8011ef0 <http_parse_request+0x244>)
 8011d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011d4a:	e005      	b.n	8011d58 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8011d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4e:	685b      	ldr	r3, [r3, #4]
 8011d50:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 8011d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d54:	895b      	ldrh	r3, [r3, #10]
 8011d56:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8011d58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011d5a:	2b06      	cmp	r3, #6
 8011d5c:	f240 80a1 	bls.w	8011ea2 <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8011d60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011d62:	461a      	mov	r2, r3
 8011d64:	4963      	ldr	r1, [pc, #396]	; (8011ef4 <http_parse_request+0x248>)
 8011d66:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011d68:	f000 fc04 	bl	8012574 <lwip_strnstr>
 8011d6c:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8011d6e:	6a3b      	ldr	r3, [r7, #32]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	f000 8096 	beq.w	8011ea2 <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 8011d76:	2300      	movs	r3, #0
 8011d78:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8011d7e:	2204      	movs	r2, #4
 8011d80:	495d      	ldr	r1, [pc, #372]	; (8011ef8 <http_parse_request+0x24c>)
 8011d82:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011d84:	f00d f8a5 	bl	801eed2 <strncmp>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d103      	bne.n	8011d96 <http_parse_request+0xea>
        sp1 = data + 3;
 8011d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d90:	3303      	adds	r3, #3
 8011d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d94:	e014      	b.n	8011dc0 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 8011d96:	2205      	movs	r2, #5
 8011d98:	4958      	ldr	r1, [pc, #352]	; (8011efc <http_parse_request+0x250>)
 8011d9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011d9c:	f00d f899 	bl	801eed2 <strncmp>
 8011da0:	4603      	mov	r3, r0
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d105      	bne.n	8011db2 <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 8011da6:	2301      	movs	r3, #1
 8011da8:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 8011daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dac:	3304      	adds	r3, #4
 8011dae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011db0:	e006      	b.n	8011dc0 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 8011db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011db4:	3304      	adds	r3, #4
 8011db6:	2200      	movs	r2, #0
 8011db8:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 8011dba:	f06f 030f 	mvn.w	r3, #15
 8011dbe:	e08a      	b.n	8011ed6 <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8011dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc2:	1c5a      	adds	r2, r3, #1
 8011dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dc6:	1ad3      	subs	r3, r2, r3
 8011dc8:	b29b      	uxth	r3, r3
 8011dca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011dcc:	1ad3      	subs	r3, r2, r3
 8011dce:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8011dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd2:	3301      	adds	r3, #1
 8011dd4:	8bfa      	ldrh	r2, [r7, #30]
 8011dd6:	494a      	ldr	r1, [pc, #296]	; (8011f00 <http_parse_request+0x254>)
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f000 fbcb 	bl	8012574 <lwip_strnstr>
 8011dde:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8011de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d10c      	bne.n	8011e00 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8011de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de8:	3301      	adds	r3, #1
 8011dea:	8bfa      	ldrh	r2, [r7, #30]
 8011dec:	4941      	ldr	r1, [pc, #260]	; (8011ef4 <http_parse_request+0x248>)
 8011dee:	4618      	mov	r0, r3
 8011df0:	f000 fbc0 	bl	8012574 <lwip_strnstr>
 8011df4:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8011df6:	2301      	movs	r3, #1
 8011df8:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 8011dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d163      	bne.n	8011ec8 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8011e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e02:	3301      	adds	r3, #1
 8011e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e06:	1ad3      	subs	r3, r2, r3
 8011e08:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8011e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d048      	beq.n	8011ea2 <http_parse_request+0x1f6>
 8011e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d944      	bls.n	8011ea2 <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8011e18:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011e1a:	461a      	mov	r2, r3
 8011e1c:	4939      	ldr	r1, [pc, #228]	; (8011f04 <http_parse_request+0x258>)
 8011e1e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011e20:	f000 fba8 	bl	8012574 <lwip_strnstr>
 8011e24:	4603      	mov	r3, r0
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d03b      	beq.n	8011ea2 <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 8011e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e2c:	3301      	adds	r3, #1
 8011e2e:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8011e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e32:	2200      	movs	r2, #0
 8011e34:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8011e36:	8bbb      	ldrh	r3, [r7, #28]
 8011e38:	69ba      	ldr	r2, [r7, #24]
 8011e3a:	4413      	add	r3, r2
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 8011e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d026      	beq.n	8011e94 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 8011e46:	68bb      	ldr	r3, [r7, #8]
 8011e48:	6a1b      	ldr	r3, [r3, #32]
 8011e4a:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 8011e4c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e50:	9301      	str	r3, [sp, #4]
 8011e52:	69bb      	ldr	r3, [r7, #24]
 8011e54:	9300      	str	r3, [sp, #0]
 8011e56:	4613      	mov	r3, r2
 8011e58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011e5a:	68b9      	ldr	r1, [r7, #8]
 8011e5c:	6978      	ldr	r0, [r7, #20]
 8011e5e:	f7ff fe43 	bl	8011ae8 <http_post_request>
 8011e62:	4603      	mov	r3, r0
 8011e64:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 8011e66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d00a      	beq.n	8011e84 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 8011e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e70:	2220      	movs	r2, #32
 8011e72:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 8011e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e76:	2220      	movs	r2, #32
 8011e78:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 8011e7a:	8bbb      	ldrh	r3, [r7, #28]
 8011e7c:	69ba      	ldr	r2, [r7, #24]
 8011e7e:	4413      	add	r3, r2
 8011e80:	2220      	movs	r2, #32
 8011e82:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 8011e84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e88:	f113 0f10 	cmn.w	r3, #16
 8011e8c:	d01e      	beq.n	8011ecc <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 8011e8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e92:	e020      	b.n	8011ed6 <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8011e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e96:	69b9      	ldr	r1, [r7, #24]
 8011e98:	68b8      	ldr	r0, [r7, #8]
 8011e9a:	f000 f835 	bl	8011f08 <http_find_file>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	e019      	b.n	8011ed6 <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	6a1b      	ldr	r3, [r3, #32]
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f001 ff80 	bl	8013dac <pbuf_clen>
 8011eac:	4603      	mov	r3, r0
 8011eae:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8011eb0:	68bb      	ldr	r3, [r7, #8]
 8011eb2:	6a1b      	ldr	r3, [r3, #32]
 8011eb4:	891b      	ldrh	r3, [r3, #8]
 8011eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011eba:	d209      	bcs.n	8011ed0 <http_parse_request+0x224>
 8011ebc:	8a3b      	ldrh	r3, [r7, #16]
 8011ebe:	2b05      	cmp	r3, #5
 8011ec0:	d806      	bhi.n	8011ed0 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8011ec2:	f06f 0304 	mvn.w	r3, #4
 8011ec6:	e006      	b.n	8011ed6 <http_parse_request+0x22a>
          goto badrequest;
 8011ec8:	bf00      	nop
 8011eca:	e002      	b.n	8011ed2 <http_parse_request+0x226>
              goto badrequest;
 8011ecc:	bf00      	nop
 8011ece:	e000      	b.n	8011ed2 <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 8011ed0:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8011ed2:	f06f 030f 	mvn.w	r3, #15
  }
}
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	3740      	adds	r7, #64	; 0x40
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}
 8011ede:	bf00      	nop
 8011ee0:	08023038 	.word	0x08023038
 8011ee4:	08023124 	.word	0x08023124
 8011ee8:	08023080 	.word	0x08023080
 8011eec:	08023130 	.word	0x08023130
 8011ef0:	200042d4 	.word	0x200042d4
 8011ef4:	08023120 	.word	0x08023120
 8011ef8:	0802313c 	.word	0x0802313c
 8011efc:	08023144 	.word	0x08023144
 8011f00:	0802314c 	.word	0x0802314c
 8011f04:	08023104 	.word	0x08023104

08011f08 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b092      	sub	sp, #72	; 0x48
 8011f0c:	af02      	add	r7, sp, #8
 8011f0e:	60f8      	str	r0, [r7, #12]
 8011f10:	60b9      	str	r1, [r7, #8]
 8011f12:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8011f14:	2300      	movs	r3, #0
 8011f16:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8011f18:	2300      	movs	r3, #0
 8011f1a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8011f22:	68bb      	ldr	r3, [r7, #8]
 8011f24:	4618      	mov	r0, r3
 8011f26:	f7ee f95d 	bl	80001e4 <strlen>
 8011f2a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8011f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d06b      	beq.n	801200a <http_find_file+0x102>
 8011f32:	68ba      	ldr	r2, [r7, #8]
 8011f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f36:	3b01      	subs	r3, #1
 8011f38:	4413      	add	r3, r2
 8011f3a:	781b      	ldrb	r3, [r3, #0]
 8011f3c:	2b2f      	cmp	r3, #47	; 0x2f
 8011f3e:	d164      	bne.n	801200a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8011f40:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8011f42:	4a53      	ldr	r2, [pc, #332]	; (8012090 <http_find_file+0x188>)
 8011f44:	4293      	cmp	r3, r2
 8011f46:	d102      	bne.n	8011f4e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8011f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f4a:	2b01      	cmp	r3, #1
 8011f4c:	d15d      	bne.n	801200a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8011f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f50:	3b01      	subs	r3, #1
 8011f52:	2b3f      	cmp	r3, #63	; 0x3f
 8011f54:	bf28      	it	cs
 8011f56:	233f      	movcs	r3, #63	; 0x3f
 8011f58:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 8011f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d00a      	beq.n	8011f76 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8011f60:	68bb      	ldr	r3, [r7, #8]
 8011f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f64:	4619      	mov	r1, r3
 8011f66:	484a      	ldr	r0, [pc, #296]	; (8012090 <http_find_file+0x188>)
 8011f68:	f00c fc4c 	bl	801e804 <memcpy>
      http_uri_buf[copy_len] = 0;
 8011f6c:	4a48      	ldr	r2, [pc, #288]	; (8012090 <http_find_file+0x188>)
 8011f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f70:	4413      	add	r3, r2
 8011f72:	2200      	movs	r2, #0
 8011f74:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8011f76:	2300      	movs	r3, #0
 8011f78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f7a:	e043      	b.n	8012004 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8011f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d028      	beq.n	8011fd4 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8011f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f84:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8011f88:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 8011f8a:	6a3b      	ldr	r3, [r7, #32]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d01e      	beq.n	8011fce <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8011f90:	4a40      	ldr	r2, [pc, #256]	; (8012094 <http_find_file+0x18c>)
 8011f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011f98:	4618      	mov	r0, r3
 8011f9a:	f7ee f923 	bl	80001e4 <strlen>
 8011f9e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8011fa0:	69fa      	ldr	r2, [r7, #28]
 8011fa2:	6a3b      	ldr	r3, [r7, #32]
 8011fa4:	4293      	cmp	r3, r2
 8011fa6:	bf28      	it	cs
 8011fa8:	4613      	movcs	r3, r2
 8011faa:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8011fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fae:	4a38      	ldr	r2, [pc, #224]	; (8012090 <http_find_file+0x188>)
 8011fb0:	1898      	adds	r0, r3, r2
 8011fb2:	4a38      	ldr	r2, [pc, #224]	; (8012094 <http_find_file+0x18c>)
 8011fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fb6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011fba:	69ba      	ldr	r2, [r7, #24]
 8011fbc:	4619      	mov	r1, r3
 8011fbe:	f00c fc21 	bl	801e804 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8011fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011fc4:	69bb      	ldr	r3, [r7, #24]
 8011fc6:	4413      	add	r3, r2
 8011fc8:	4a31      	ldr	r2, [pc, #196]	; (8012090 <http_find_file+0x188>)
 8011fca:	2100      	movs	r1, #0
 8011fcc:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8011fce:	4b30      	ldr	r3, [pc, #192]	; (8012090 <http_find_file+0x188>)
 8011fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8011fd2:	e004      	b.n	8011fde <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8011fd4:	4a2f      	ldr	r2, [pc, #188]	; (8012094 <http_find_file+0x18c>)
 8011fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011fdc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f7ff faba 	bl	801155c <fs_open>
 8011fe8:	4603      	mov	r3, r0
 8011fea:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 8011fec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d104      	bne.n	8011ffe <http_find_file+0xf6>
        uri = file_name;
 8011ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ff6:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8011ffc:	e005      	b.n	801200a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8011ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012000:	3301      	adds	r3, #1
 8012002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012006:	2b04      	cmp	r3, #4
 8012008:	d9b8      	bls.n	8011f7c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 801200a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801200c:	2b00      	cmp	r3, #0
 801200e:	d124      	bne.n	801205a <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	213f      	movs	r1, #63	; 0x3f
 8012014:	4618      	mov	r0, r3
 8012016:	f00c ff4f 	bl	801eeb8 <strchr>
 801201a:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 801201c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801201e:	2b00      	cmp	r3, #0
 8012020:	d005      	beq.n	801202e <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8012022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012024:	2200      	movs	r2, #0
 8012026:	701a      	strb	r2, [r3, #0]
      params++;
 8012028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801202a:	3301      	adds	r3, #1
 801202c:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	68ba      	ldr	r2, [r7, #8]
 8012032:	4611      	mov	r1, r2
 8012034:	4618      	mov	r0, r3
 8012036:	f7ff fa91 	bl	801155c <fs_open>
 801203a:	4603      	mov	r3, r0
 801203c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 801203e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d102      	bne.n	801204c <http_find_file+0x144>
      file = &hs->file_handle;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	63bb      	str	r3, [r7, #56]	; 0x38
 801204a:	e006      	b.n	801205a <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 801204c:	f107 0308 	add.w	r3, r7, #8
 8012050:	4619      	mov	r1, r3
 8012052:	68f8      	ldr	r0, [r7, #12]
 8012054:	f7ff fcb0 	bl	80119b8 <http_get_404_file>
 8012058:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 801205a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801205c:	2b00      	cmp	r3, #0
 801205e:	d106      	bne.n	801206e <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8012060:	f107 0308 	add.w	r3, r7, #8
 8012064:	4619      	mov	r1, r3
 8012066:	68f8      	ldr	r0, [r7, #12]
 8012068:	f7ff fca6 	bl	80119b8 <http_get_404_file>
 801206c:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 801206e:	68ba      	ldr	r2, [r7, #8]
 8012070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012072:	9301      	str	r3, [sp, #4]
 8012074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012078:	9300      	str	r3, [sp, #0]
 801207a:	4613      	mov	r3, r2
 801207c:	687a      	ldr	r2, [r7, #4]
 801207e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012080:	68f8      	ldr	r0, [r7, #12]
 8012082:	f000 f809 	bl	8012098 <http_init_file>
 8012086:	4603      	mov	r3, r0
}
 8012088:	4618      	mov	r0, r3
 801208a:	3740      	adds	r7, #64	; 0x40
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}
 8012090:	200046d4 	.word	0x200046d4
 8012094:	08026b6c 	.word	0x08026b6c

08012098 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b086      	sub	sp, #24
 801209c:	af00      	add	r7, sp, #0
 801209e:	60f8      	str	r0, [r7, #12]
 80120a0:	60b9      	str	r1, [r7, #8]
 80120a2:	607a      	str	r2, [r7, #4]
 80120a4:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 80120a6:	68bb      	ldr	r3, [r7, #8]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d068      	beq.n	801217e <http_init_file+0xe6>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80120ac:	68bb      	ldr	r3, [r7, #8]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d106      	bne.n	80120c2 <http_init_file+0x2a>
 80120b4:	4b3b      	ldr	r3, [pc, #236]	; (80121a4 <http_init_file+0x10c>)
 80120b6:	f640 120b 	movw	r2, #2315	; 0x90b
 80120ba:	493b      	ldr	r1, [pc, #236]	; (80121a8 <http_init_file+0x110>)
 80120bc:	483b      	ldr	r0, [pc, #236]	; (80121ac <http_init_file+0x114>)
 80120be:	f00c fe4f 	bl	801ed60 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	68ba      	ldr	r2, [r7, #8]
 80120c6:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 80120c8:	68bb      	ldr	r3, [r7, #8]
 80120ca:	681a      	ldr	r2, [r3, #0]
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80120d0:	68bb      	ldr	r3, [r7, #8]
 80120d2:	685b      	ldr	r3, [r3, #4]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	da06      	bge.n	80120e6 <http_init_file+0x4e>
 80120d8:	4b32      	ldr	r3, [pc, #200]	; (80121a4 <http_init_file+0x10c>)
 80120da:	f640 1234 	movw	r2, #2356	; 0x934
 80120de:	4934      	ldr	r1, [pc, #208]	; (80121b0 <http_init_file+0x118>)
 80120e0:	4832      	ldr	r0, [pc, #200]	; (80121ac <http_init_file+0x114>)
 80120e2:	f00c fe3d 	bl	801ed60 <iprintf>
#if LWIP_HTTPD_CUSTOM_FILES
    if (file->is_custom_file && (file->data == NULL)) {
 80120e6:	68bb      	ldr	r3, [r7, #8]
 80120e8:	7c5b      	ldrb	r3, [r3, #17]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d007      	beq.n	80120fe <http_init_file+0x66>
 80120ee:	68bb      	ldr	r3, [r7, #8]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d103      	bne.n	80120fe <http_init_file+0x66>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	2200      	movs	r2, #0
 80120fa:	625a      	str	r2, [r3, #36]	; 0x24
 80120fc:	e004      	b.n	8012108 <http_init_file+0x70>
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	461a      	mov	r2, r3
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	2200      	movs	r2, #0
 801210c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	695b      	ldr	r3, [r3, #20]
 8012114:	7c1b      	ldrb	r3, [r3, #16]
 8012116:	f003 0301 	and.w	r3, r3, #1
 801211a:	2b00      	cmp	r3, #0
 801211c:	d106      	bne.n	801212c <http_init_file+0x94>
 801211e:	4b21      	ldr	r3, [pc, #132]	; (80121a4 <http_init_file+0x10c>)
 8012120:	f640 1243 	movw	r2, #2371	; 0x943
 8012124:	4923      	ldr	r1, [pc, #140]	; (80121b4 <http_init_file+0x11c>)
 8012126:	4821      	ldr	r0, [pc, #132]	; (80121ac <http_init_file+0x114>)
 8012128:	f00c fe1a 	bl	801ed60 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d032      	beq.n	8012198 <http_init_file+0x100>
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	695b      	ldr	r3, [r3, #20]
 8012136:	7c1b      	ldrb	r3, [r3, #16]
 8012138:	f003 0301 	and.w	r3, r3, #1
 801213c:	2b00      	cmp	r3, #0
 801213e:	d02b      	beq.n	8012198 <http_init_file+0x100>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	6998      	ldr	r0, [r3, #24]
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012148:	461a      	mov	r2, r3
 801214a:	491b      	ldr	r1, [pc, #108]	; (80121b8 <http_init_file+0x120>)
 801214c:	f000 fa12 	bl	8012574 <lwip_strnstr>
 8012150:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d01f      	beq.n	8012198 <http_init_file+0x100>
        int diff = file_start + 4 - hs->file;
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	1d1a      	adds	r2, r3, #4
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	699b      	ldr	r3, [r3, #24]
 8012160:	1ad3      	subs	r3, r2, r3
 8012162:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	699a      	ldr	r2, [r3, #24]
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	441a      	add	r2, r3
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012174:	693b      	ldr	r3, [r7, #16]
 8012176:	1ad2      	subs	r2, r2, r3
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	625a      	str	r2, [r3, #36]	; 0x24
 801217c:	e00c      	b.n	8012198 <http_init_file+0x100>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	2200      	movs	r2, #0
 8012182:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	2200      	movs	r2, #0
 8012188:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	2200      	movs	r2, #0
 801218e:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	2200      	movs	r2, #0
 8012194:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8012198:	2300      	movs	r3, #0
}
 801219a:	4618      	mov	r0, r3
 801219c:	3718      	adds	r7, #24
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}
 80121a2:	bf00      	nop
 80121a4:	08023038 	.word	0x08023038
 80121a8:	08023150 	.word	0x08023150
 80121ac:	08023080 	.word	0x08023080
 80121b0:	08023164 	.word	0x08023164
 80121b4:	08023184 	.word	0x08023184
 80121b8:	08023104 	.word	0x08023104

080121bc <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b084      	sub	sp, #16
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
 80121c4:	460b      	mov	r3, r1
 80121c6:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d002      	beq.n	80121d8 <http_err+0x1c>
    http_state_free(hs);
 80121d2:	68f8      	ldr	r0, [r7, #12]
 80121d4:	f7ff fa6b 	bl	80116ae <http_state_free>
  }
}
 80121d8:	bf00      	nop
 80121da:	3710      	adds	r7, #16
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}

080121e0 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b086      	sub	sp, #24
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	60f8      	str	r0, [r7, #12]
 80121e8:	60b9      	str	r1, [r7, #8]
 80121ea:	4613      	mov	r3, r2
 80121ec:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 80121f2:	697b      	ldr	r3, [r7, #20]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d101      	bne.n	80121fc <http_sent+0x1c>
    return ERR_OK;
 80121f8:	2300      	movs	r3, #0
 80121fa:	e008      	b.n	801220e <http_sent+0x2e>
  }

  hs->retries = 0;
 80121fc:	697b      	ldr	r3, [r7, #20]
 80121fe:	2200      	movs	r2, #0
 8012200:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8012204:	6979      	ldr	r1, [r7, #20]
 8012206:	68b8      	ldr	r0, [r7, #8]
 8012208:	f7ff fb9f 	bl	801194a <http_send>

  return ERR_OK;
 801220c:	2300      	movs	r3, #0
}
 801220e:	4618      	mov	r0, r3
 8012210:	3718      	adds	r7, #24
 8012212:	46bd      	mov	sp, r7
 8012214:	bd80      	pop	{r7, pc}

08012216 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8012216:	b580      	push	{r7, lr}
 8012218:	b084      	sub	sp, #16
 801221a:	af00      	add	r7, sp, #0
 801221c:	6078      	str	r0, [r7, #4]
 801221e:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d107      	bne.n	801223a <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 801222a:	2100      	movs	r1, #0
 801222c:	6838      	ldr	r0, [r7, #0]
 801222e:	f7ff fb0b 	bl	8011848 <http_close_conn>
 8012232:	4603      	mov	r3, r0
 8012234:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8012236:	2300      	movs	r3, #0
 8012238:	e021      	b.n	801227e <http_poll+0x68>
  } else {
    hs->retries++;
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012240:	3301      	adds	r3, #1
 8012242:	b2da      	uxtb	r2, r3
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012250:	2b04      	cmp	r3, #4
 8012252:	d105      	bne.n	8012260 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8012254:	68f9      	ldr	r1, [r7, #12]
 8012256:	6838      	ldr	r0, [r7, #0]
 8012258:	f7ff faf6 	bl	8011848 <http_close_conn>
      return ERR_OK;
 801225c:	2300      	movs	r3, #0
 801225e:	e00e      	b.n	801227e <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	695b      	ldr	r3, [r3, #20]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d009      	beq.n	801227c <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8012268:	68f9      	ldr	r1, [r7, #12]
 801226a:	6838      	ldr	r0, [r7, #0]
 801226c:	f7ff fb6d 	bl	801194a <http_send>
 8012270:	4603      	mov	r3, r0
 8012272:	2b00      	cmp	r3, #0
 8012274:	d002      	beq.n	801227c <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8012276:	6838      	ldr	r0, [r7, #0]
 8012278:	f007 f8f0 	bl	801945c <tcp_output>
      }
    }
  }

  return ERR_OK;
 801227c:	2300      	movs	r3, #0
}
 801227e:	4618      	mov	r0, r3
 8012280:	3710      	adds	r7, #16
 8012282:	46bd      	mov	sp, r7
 8012284:	bd80      	pop	{r7, pc}
	...

08012288 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b086      	sub	sp, #24
 801228c:	af00      	add	r7, sp, #0
 801228e:	60f8      	str	r0, [r7, #12]
 8012290:	60b9      	str	r1, [r7, #8]
 8012292:	607a      	str	r2, [r7, #4]
 8012294:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 801229a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d105      	bne.n	80122ae <http_recv+0x26>
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d002      	beq.n	80122ae <http_recv+0x26>
 80122a8:	697b      	ldr	r3, [r7, #20]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d111      	bne.n	80122d2 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d008      	beq.n	80122c6 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	891b      	ldrh	r3, [r3, #8]
 80122b8:	4619      	mov	r1, r3
 80122ba:	68b8      	ldr	r0, [r7, #8]
 80122bc:	f002 fcc2 	bl	8014c44 <tcp_recved>
      pbuf_free(p);
 80122c0:	6878      	ldr	r0, [r7, #4]
 80122c2:	f001 fce5 	bl	8013c90 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 80122c6:	6979      	ldr	r1, [r7, #20]
 80122c8:	68b8      	ldr	r0, [r7, #8]
 80122ca:	f7ff fabd 	bl	8011848 <http_close_conn>
    return ERR_OK;
 80122ce:	2300      	movs	r3, #0
 80122d0:	e06f      	b.n	80123b2 <http_recv+0x12a>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	891b      	ldrh	r3, [r3, #8]
 80122d6:	4619      	mov	r1, r3
 80122d8:	68b8      	ldr	r0, [r7, #8]
 80122da:	f002 fcb3 	bl	8014c44 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d011      	beq.n	801230a <http_recv+0x82>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	2200      	movs	r2, #0
 80122ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 80122ee:	6879      	ldr	r1, [r7, #4]
 80122f0:	6978      	ldr	r0, [r7, #20]
 80122f2:	f7ff fbbf 	bl	8011a74 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 80122f6:	697b      	ldr	r3, [r7, #20]
 80122f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d103      	bne.n	8012306 <http_recv+0x7e>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 80122fe:	6979      	ldr	r1, [r7, #20]
 8012300:	68b8      	ldr	r0, [r7, #8]
 8012302:	f7ff fb22 	bl	801194a <http_send>
    }
    return ERR_OK;
 8012306:	2300      	movs	r3, #0
 8012308:	e053      	b.n	80123b2 <http_recv+0x12a>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	695b      	ldr	r3, [r3, #20]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d14b      	bne.n	80123aa <http_recv+0x122>
      err_t parsed = http_parse_request(p, hs, pcb);
 8012312:	68ba      	ldr	r2, [r7, #8]
 8012314:	6979      	ldr	r1, [r7, #20]
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f7ff fcc8 	bl	8011cac <http_parse_request>
 801231c:	4603      	mov	r3, r0
 801231e:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8012320:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d015      	beq.n	8012354 <http_recv+0xcc>
 8012328:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801232c:	f113 0f05 	cmn.w	r3, #5
 8012330:	d010      	beq.n	8012354 <http_recv+0xcc>
 8012332:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012336:	f113 0f10 	cmn.w	r3, #16
 801233a:	d00b      	beq.n	8012354 <http_recv+0xcc>
 801233c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012340:	f113 0f08 	cmn.w	r3, #8
 8012344:	d006      	beq.n	8012354 <http_recv+0xcc>
 8012346:	4b1d      	ldr	r3, [pc, #116]	; (80123bc <http_recv+0x134>)
 8012348:	f640 2204 	movw	r2, #2564	; 0xa04
 801234c:	491c      	ldr	r1, [pc, #112]	; (80123c0 <http_recv+0x138>)
 801234e:	481d      	ldr	r0, [pc, #116]	; (80123c4 <http_recv+0x13c>)
 8012350:	f00c fd06 	bl	801ed60 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8012354:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012358:	f113 0f05 	cmn.w	r3, #5
 801235c:	d00b      	beq.n	8012376 <http_recv+0xee>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 801235e:	697b      	ldr	r3, [r7, #20]
 8012360:	6a1b      	ldr	r3, [r3, #32]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d007      	beq.n	8012376 <http_recv+0xee>
          pbuf_free(hs->req);
 8012366:	697b      	ldr	r3, [r7, #20]
 8012368:	6a1b      	ldr	r3, [r3, #32]
 801236a:	4618      	mov	r0, r3
 801236c:	f001 fc90 	bl	8013c90 <pbuf_free>
          hs->req = NULL;
 8012370:	697b      	ldr	r3, [r7, #20]
 8012372:	2200      	movs	r2, #0
 8012374:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8012376:	6878      	ldr	r0, [r7, #4]
 8012378:	f001 fc8a 	bl	8013c90 <pbuf_free>
      if (parsed == ERR_OK) {
 801237c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d108      	bne.n	8012396 <http_recv+0x10e>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012388:	2b00      	cmp	r3, #0
 801238a:	d111      	bne.n	80123b0 <http_recv+0x128>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 801238c:	6979      	ldr	r1, [r7, #20]
 801238e:	68b8      	ldr	r0, [r7, #8]
 8012390:	f7ff fadb 	bl	801194a <http_send>
 8012394:	e00c      	b.n	80123b0 <http_recv+0x128>
        }
      } else if (parsed == ERR_ARG) {
 8012396:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801239a:	f113 0f10 	cmn.w	r3, #16
 801239e:	d107      	bne.n	80123b0 <http_recv+0x128>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80123a0:	6979      	ldr	r1, [r7, #20]
 80123a2:	68b8      	ldr	r0, [r7, #8]
 80123a4:	f7ff fa50 	bl	8011848 <http_close_conn>
 80123a8:	e002      	b.n	80123b0 <http_recv+0x128>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80123aa:	6878      	ldr	r0, [r7, #4]
 80123ac:	f001 fc70 	bl	8013c90 <pbuf_free>
    }
  }
  return ERR_OK;
 80123b0:	2300      	movs	r3, #0
}
 80123b2:	4618      	mov	r0, r3
 80123b4:	3718      	adds	r7, #24
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}
 80123ba:	bf00      	nop
 80123bc:	08023038 	.word	0x08023038
 80123c0:	080231b0 	.word	0x080231b0
 80123c4:	08023080 	.word	0x08023080

080123c8 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b086      	sub	sp, #24
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	60f8      	str	r0, [r7, #12]
 80123d0:	60b9      	str	r1, [r7, #8]
 80123d2:	4613      	mov	r3, r2
 80123d4:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 80123d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d102      	bne.n	80123e4 <http_accept+0x1c>
 80123de:	68bb      	ldr	r3, [r7, #8]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d102      	bne.n	80123ea <http_accept+0x22>
    return ERR_VAL;
 80123e4:	f06f 0305 	mvn.w	r3, #5
 80123e8:	e025      	b.n	8012436 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80123ea:	2101      	movs	r1, #1
 80123ec:	68b8      	ldr	r0, [r7, #8]
 80123ee:	f003 f90d 	bl	801560c <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 80123f2:	f7ff f92a 	bl	801164a <http_state_alloc>
 80123f6:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 80123f8:	697b      	ldr	r3, [r7, #20]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d102      	bne.n	8012404 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 80123fe:	f04f 33ff 	mov.w	r3, #4294967295
 8012402:	e018      	b.n	8012436 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8012404:	697b      	ldr	r3, [r7, #20]
 8012406:	68ba      	ldr	r2, [r7, #8]
 8012408:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 801240a:	6979      	ldr	r1, [r7, #20]
 801240c:	68b8      	ldr	r0, [r7, #8]
 801240e:	f003 fafd 	bl	8015a0c <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8012412:	490b      	ldr	r1, [pc, #44]	; (8012440 <http_accept+0x78>)
 8012414:	68b8      	ldr	r0, [r7, #8]
 8012416:	f003 fb0b 	bl	8015a30 <tcp_recv>
  altcp_err(pcb, http_err);
 801241a:	490a      	ldr	r1, [pc, #40]	; (8012444 <http_accept+0x7c>)
 801241c:	68b8      	ldr	r0, [r7, #8]
 801241e:	f003 fb4b 	bl	8015ab8 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8012422:	2204      	movs	r2, #4
 8012424:	4908      	ldr	r1, [pc, #32]	; (8012448 <http_accept+0x80>)
 8012426:	68b8      	ldr	r0, [r7, #8]
 8012428:	f003 fb80 	bl	8015b2c <tcp_poll>
  altcp_sent(pcb, http_sent);
 801242c:	4907      	ldr	r1, [pc, #28]	; (801244c <http_accept+0x84>)
 801242e:	68b8      	ldr	r0, [r7, #8]
 8012430:	f003 fb20 	bl	8015a74 <tcp_sent>

  return ERR_OK;
 8012434:	2300      	movs	r3, #0
}
 8012436:	4618      	mov	r0, r3
 8012438:	3718      	adds	r7, #24
 801243a:	46bd      	mov	sp, r7
 801243c:	bd80      	pop	{r7, pc}
 801243e:	bf00      	nop
 8012440:	08012289 	.word	0x08012289
 8012444:	080121bd 	.word	0x080121bd
 8012448:	08012217 	.word	0x08012217
 801244c:	080121e1 	.word	0x080121e1

08012450 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b084      	sub	sp, #16
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
 8012458:	460b      	mov	r3, r1
 801245a:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d029      	beq.n	80124b6 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8012462:	2101      	movs	r1, #1
 8012464:	6878      	ldr	r0, [r7, #4]
 8012466:	f003 f8d1 	bl	801560c <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 801246a:	887b      	ldrh	r3, [r7, #2]
 801246c:	461a      	mov	r2, r3
 801246e:	4914      	ldr	r1, [pc, #80]	; (80124c0 <httpd_init_pcb+0x70>)
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f002 fa19 	bl	80148a8 <tcp_bind>
 8012476:	4603      	mov	r3, r0
 8012478:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 801247a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d006      	beq.n	8012490 <httpd_init_pcb+0x40>
 8012482:	4b10      	ldr	r3, [pc, #64]	; (80124c4 <httpd_init_pcb+0x74>)
 8012484:	f640 2257 	movw	r2, #2647	; 0xa57
 8012488:	490f      	ldr	r1, [pc, #60]	; (80124c8 <httpd_init_pcb+0x78>)
 801248a:	4810      	ldr	r0, [pc, #64]	; (80124cc <httpd_init_pcb+0x7c>)
 801248c:	f00c fc68 	bl	801ed60 <iprintf>
    pcb = altcp_listen(pcb);
 8012490:	21ff      	movs	r1, #255	; 0xff
 8012492:	6878      	ldr	r0, [r7, #4]
 8012494:	f002 fac0 	bl	8014a18 <tcp_listen_with_backlog>
 8012498:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d106      	bne.n	80124ae <httpd_init_pcb+0x5e>
 80124a0:	4b08      	ldr	r3, [pc, #32]	; (80124c4 <httpd_init_pcb+0x74>)
 80124a2:	f640 2259 	movw	r2, #2649	; 0xa59
 80124a6:	490a      	ldr	r1, [pc, #40]	; (80124d0 <httpd_init_pcb+0x80>)
 80124a8:	4808      	ldr	r0, [pc, #32]	; (80124cc <httpd_init_pcb+0x7c>)
 80124aa:	f00c fc59 	bl	801ed60 <iprintf>
    altcp_accept(pcb, http_accept);
 80124ae:	4909      	ldr	r1, [pc, #36]	; (80124d4 <httpd_init_pcb+0x84>)
 80124b0:	6878      	ldr	r0, [r7, #4]
 80124b2:	f003 fb23 	bl	8015afc <tcp_accept>
  }
}
 80124b6:	bf00      	nop
 80124b8:	3710      	adds	r7, #16
 80124ba:	46bd      	mov	sp, r7
 80124bc:	bd80      	pop	{r7, pc}
 80124be:	bf00      	nop
 80124c0:	08026ca4 	.word	0x08026ca4
 80124c4:	08023038 	.word	0x08023038
 80124c8:	080231dc 	.word	0x080231dc
 80124cc:	08023080 	.word	0x08023080
 80124d0:	080231f8 	.word	0x080231f8
 80124d4:	080123c9 	.word	0x080123c9

080124d8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b082      	sub	sp, #8
 80124dc:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 80124de:	202e      	movs	r0, #46	; 0x2e
 80124e0:	f003 fa86 	bl	80159f0 <tcp_new_ip_type>
 80124e4:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d106      	bne.n	80124fa <httpd_init+0x22>
 80124ec:	4b07      	ldr	r3, [pc, #28]	; (801250c <httpd_init+0x34>)
 80124ee:	f640 2272 	movw	r2, #2674	; 0xa72
 80124f2:	4907      	ldr	r1, [pc, #28]	; (8012510 <httpd_init+0x38>)
 80124f4:	4807      	ldr	r0, [pc, #28]	; (8012514 <httpd_init+0x3c>)
 80124f6:	f00c fc33 	bl	801ed60 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 80124fa:	2150      	movs	r1, #80	; 0x50
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	f7ff ffa7 	bl	8012450 <httpd_init_pcb>
}
 8012502:	bf00      	nop
 8012504:	3708      	adds	r7, #8
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}
 801250a:	bf00      	nop
 801250c:	08023038 	.word	0x08023038
 8012510:	08023218 	.word	0x08023218
 8012514:	08023080 	.word	0x08023080

08012518 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8012518:	b480      	push	{r7}
 801251a:	b083      	sub	sp, #12
 801251c:	af00      	add	r7, sp, #0
 801251e:	4603      	mov	r3, r0
 8012520:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012522:	88fb      	ldrh	r3, [r7, #6]
 8012524:	021b      	lsls	r3, r3, #8
 8012526:	b21a      	sxth	r2, r3
 8012528:	88fb      	ldrh	r3, [r7, #6]
 801252a:	0a1b      	lsrs	r3, r3, #8
 801252c:	b29b      	uxth	r3, r3
 801252e:	b21b      	sxth	r3, r3
 8012530:	4313      	orrs	r3, r2
 8012532:	b21b      	sxth	r3, r3
 8012534:	b29b      	uxth	r3, r3
}
 8012536:	4618      	mov	r0, r3
 8012538:	370c      	adds	r7, #12
 801253a:	46bd      	mov	sp, r7
 801253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012540:	4770      	bx	lr

08012542 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012542:	b480      	push	{r7}
 8012544:	b083      	sub	sp, #12
 8012546:	af00      	add	r7, sp, #0
 8012548:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	061a      	lsls	r2, r3, #24
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	021b      	lsls	r3, r3, #8
 8012552:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012556:	431a      	orrs	r2, r3
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	0a1b      	lsrs	r3, r3, #8
 801255c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012560:	431a      	orrs	r2, r3
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	0e1b      	lsrs	r3, r3, #24
 8012566:	4313      	orrs	r3, r2
}
 8012568:	4618      	mov	r0, r3
 801256a:	370c      	adds	r7, #12
 801256c:	46bd      	mov	sp, r7
 801256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012572:	4770      	bx	lr

08012574 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b086      	sub	sp, #24
 8012578:	af00      	add	r7, sp, #0
 801257a:	60f8      	str	r0, [r7, #12]
 801257c:	60b9      	str	r1, [r7, #8]
 801257e:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8012580:	68b8      	ldr	r0, [r7, #8]
 8012582:	f7ed fe2f 	bl	80001e4 <strlen>
 8012586:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8012588:	693b      	ldr	r3, [r7, #16]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d101      	bne.n	8012592 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	e022      	b.n	80125d8 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	617b      	str	r3, [r7, #20]
 8012596:	e012      	b.n	80125be <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8012598:	697b      	ldr	r3, [r7, #20]
 801259a:	781a      	ldrb	r2, [r3, #0]
 801259c:	68bb      	ldr	r3, [r7, #8]
 801259e:	781b      	ldrb	r3, [r3, #0]
 80125a0:	429a      	cmp	r2, r3
 80125a2:	d109      	bne.n	80125b8 <lwip_strnstr+0x44>
 80125a4:	693a      	ldr	r2, [r7, #16]
 80125a6:	68b9      	ldr	r1, [r7, #8]
 80125a8:	6978      	ldr	r0, [r7, #20]
 80125aa:	f00c fc92 	bl	801eed2 <strncmp>
 80125ae:	4603      	mov	r3, r0
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d101      	bne.n	80125b8 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 80125b4:	697b      	ldr	r3, [r7, #20]
 80125b6:	e00f      	b.n	80125d8 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	3301      	adds	r3, #1
 80125bc:	617b      	str	r3, [r7, #20]
 80125be:	697b      	ldr	r3, [r7, #20]
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d007      	beq.n	80125d6 <lwip_strnstr+0x62>
 80125c6:	697a      	ldr	r2, [r7, #20]
 80125c8:	693b      	ldr	r3, [r7, #16]
 80125ca:	441a      	add	r2, r3
 80125cc:	68f9      	ldr	r1, [r7, #12]
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	440b      	add	r3, r1
 80125d2:	429a      	cmp	r2, r3
 80125d4:	d9e0      	bls.n	8012598 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80125d6:	2300      	movs	r3, #0
}
 80125d8:	4618      	mov	r0, r3
 80125da:	3718      	adds	r7, #24
 80125dc:	46bd      	mov	sp, r7
 80125de:	bd80      	pop	{r7, pc}

080125e0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b082      	sub	sp, #8
 80125e4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80125e6:	2300      	movs	r3, #0
 80125e8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80125ea:	f00b fa53 	bl	801da94 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80125ee:	f000 f8d5 	bl	801279c <mem_init>
  memp_init();
 80125f2:	f000 fc31 	bl	8012e58 <memp_init>
  pbuf_init();
  netif_init();
 80125f6:	f000 fcf7 	bl	8012fe8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80125fa:	f008 f81f 	bl	801a63c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80125fe:	f001 fdf1 	bl	80141e4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012602:	f007 ff61 	bl	801a4c8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8012606:	bf00      	nop
 8012608:	3708      	adds	r7, #8
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}
	...

08012610 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012610:	b480      	push	{r7}
 8012612:	b083      	sub	sp, #12
 8012614:	af00      	add	r7, sp, #0
 8012616:	4603      	mov	r3, r0
 8012618:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801261a:	4b05      	ldr	r3, [pc, #20]	; (8012630 <ptr_to_mem+0x20>)
 801261c:	681a      	ldr	r2, [r3, #0]
 801261e:	88fb      	ldrh	r3, [r7, #6]
 8012620:	4413      	add	r3, r2
}
 8012622:	4618      	mov	r0, r3
 8012624:	370c      	adds	r7, #12
 8012626:	46bd      	mov	sp, r7
 8012628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262c:	4770      	bx	lr
 801262e:	bf00      	nop
 8012630:	20004714 	.word	0x20004714

08012634 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012634:	b480      	push	{r7}
 8012636:	b083      	sub	sp, #12
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801263c:	4b05      	ldr	r3, [pc, #20]	; (8012654 <mem_to_ptr+0x20>)
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	687a      	ldr	r2, [r7, #4]
 8012642:	1ad3      	subs	r3, r2, r3
 8012644:	b29b      	uxth	r3, r3
}
 8012646:	4618      	mov	r0, r3
 8012648:	370c      	adds	r7, #12
 801264a:	46bd      	mov	sp, r7
 801264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012650:	4770      	bx	lr
 8012652:	bf00      	nop
 8012654:	20004714 	.word	0x20004714

08012658 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8012658:	b590      	push	{r4, r7, lr}
 801265a:	b085      	sub	sp, #20
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012660:	4b45      	ldr	r3, [pc, #276]	; (8012778 <plug_holes+0x120>)
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	687a      	ldr	r2, [r7, #4]
 8012666:	429a      	cmp	r2, r3
 8012668:	d206      	bcs.n	8012678 <plug_holes+0x20>
 801266a:	4b44      	ldr	r3, [pc, #272]	; (801277c <plug_holes+0x124>)
 801266c:	f240 12df 	movw	r2, #479	; 0x1df
 8012670:	4943      	ldr	r1, [pc, #268]	; (8012780 <plug_holes+0x128>)
 8012672:	4844      	ldr	r0, [pc, #272]	; (8012784 <plug_holes+0x12c>)
 8012674:	f00c fb74 	bl	801ed60 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012678:	4b43      	ldr	r3, [pc, #268]	; (8012788 <plug_holes+0x130>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	687a      	ldr	r2, [r7, #4]
 801267e:	429a      	cmp	r2, r3
 8012680:	d306      	bcc.n	8012690 <plug_holes+0x38>
 8012682:	4b3e      	ldr	r3, [pc, #248]	; (801277c <plug_holes+0x124>)
 8012684:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012688:	4940      	ldr	r1, [pc, #256]	; (801278c <plug_holes+0x134>)
 801268a:	483e      	ldr	r0, [pc, #248]	; (8012784 <plug_holes+0x12c>)
 801268c:	f00c fb68 	bl	801ed60 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	791b      	ldrb	r3, [r3, #4]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d006      	beq.n	80126a6 <plug_holes+0x4e>
 8012698:	4b38      	ldr	r3, [pc, #224]	; (801277c <plug_holes+0x124>)
 801269a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801269e:	493c      	ldr	r1, [pc, #240]	; (8012790 <plug_holes+0x138>)
 80126a0:	4838      	ldr	r0, [pc, #224]	; (8012784 <plug_holes+0x12c>)
 80126a2:	f00c fb5d 	bl	801ed60 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	881b      	ldrh	r3, [r3, #0]
 80126aa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80126ae:	d906      	bls.n	80126be <plug_holes+0x66>
 80126b0:	4b32      	ldr	r3, [pc, #200]	; (801277c <plug_holes+0x124>)
 80126b2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80126b6:	4937      	ldr	r1, [pc, #220]	; (8012794 <plug_holes+0x13c>)
 80126b8:	4832      	ldr	r0, [pc, #200]	; (8012784 <plug_holes+0x12c>)
 80126ba:	f00c fb51 	bl	801ed60 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	881b      	ldrh	r3, [r3, #0]
 80126c2:	4618      	mov	r0, r3
 80126c4:	f7ff ffa4 	bl	8012610 <ptr_to_mem>
 80126c8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80126ca:	687a      	ldr	r2, [r7, #4]
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	429a      	cmp	r2, r3
 80126d0:	d024      	beq.n	801271c <plug_holes+0xc4>
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	791b      	ldrb	r3, [r3, #4]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d120      	bne.n	801271c <plug_holes+0xc4>
 80126da:	4b2b      	ldr	r3, [pc, #172]	; (8012788 <plug_holes+0x130>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	68fa      	ldr	r2, [r7, #12]
 80126e0:	429a      	cmp	r2, r3
 80126e2:	d01b      	beq.n	801271c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80126e4:	4b2c      	ldr	r3, [pc, #176]	; (8012798 <plug_holes+0x140>)
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	68fa      	ldr	r2, [r7, #12]
 80126ea:	429a      	cmp	r2, r3
 80126ec:	d102      	bne.n	80126f4 <plug_holes+0x9c>
      lfree = mem;
 80126ee:	4a2a      	ldr	r2, [pc, #168]	; (8012798 <plug_holes+0x140>)
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	881a      	ldrh	r2, [r3, #0]
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	881b      	ldrh	r3, [r3, #0]
 8012700:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012704:	d00a      	beq.n	801271c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	881b      	ldrh	r3, [r3, #0]
 801270a:	4618      	mov	r0, r3
 801270c:	f7ff ff80 	bl	8012610 <ptr_to_mem>
 8012710:	4604      	mov	r4, r0
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f7ff ff8e 	bl	8012634 <mem_to_ptr>
 8012718:	4603      	mov	r3, r0
 801271a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	885b      	ldrh	r3, [r3, #2]
 8012720:	4618      	mov	r0, r3
 8012722:	f7ff ff75 	bl	8012610 <ptr_to_mem>
 8012726:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8012728:	68ba      	ldr	r2, [r7, #8]
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	429a      	cmp	r2, r3
 801272e:	d01f      	beq.n	8012770 <plug_holes+0x118>
 8012730:	68bb      	ldr	r3, [r7, #8]
 8012732:	791b      	ldrb	r3, [r3, #4]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d11b      	bne.n	8012770 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012738:	4b17      	ldr	r3, [pc, #92]	; (8012798 <plug_holes+0x140>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	687a      	ldr	r2, [r7, #4]
 801273e:	429a      	cmp	r2, r3
 8012740:	d102      	bne.n	8012748 <plug_holes+0xf0>
      lfree = pmem;
 8012742:	4a15      	ldr	r2, [pc, #84]	; (8012798 <plug_holes+0x140>)
 8012744:	68bb      	ldr	r3, [r7, #8]
 8012746:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	881a      	ldrh	r2, [r3, #0]
 801274c:	68bb      	ldr	r3, [r7, #8]
 801274e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	881b      	ldrh	r3, [r3, #0]
 8012754:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012758:	d00a      	beq.n	8012770 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	881b      	ldrh	r3, [r3, #0]
 801275e:	4618      	mov	r0, r3
 8012760:	f7ff ff56 	bl	8012610 <ptr_to_mem>
 8012764:	4604      	mov	r4, r0
 8012766:	68b8      	ldr	r0, [r7, #8]
 8012768:	f7ff ff64 	bl	8012634 <mem_to_ptr>
 801276c:	4603      	mov	r3, r0
 801276e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8012770:	bf00      	nop
 8012772:	3714      	adds	r7, #20
 8012774:	46bd      	mov	sp, r7
 8012776:	bd90      	pop	{r4, r7, pc}
 8012778:	20004714 	.word	0x20004714
 801277c:	08023234 	.word	0x08023234
 8012780:	08023264 	.word	0x08023264
 8012784:	0802327c 	.word	0x0802327c
 8012788:	20004718 	.word	0x20004718
 801278c:	080232a4 	.word	0x080232a4
 8012790:	080232c0 	.word	0x080232c0
 8012794:	080232dc 	.word	0x080232dc
 8012798:	20004720 	.word	0x20004720

0801279c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b082      	sub	sp, #8
 80127a0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80127a2:	4b1f      	ldr	r3, [pc, #124]	; (8012820 <mem_init+0x84>)
 80127a4:	3303      	adds	r3, #3
 80127a6:	f023 0303 	bic.w	r3, r3, #3
 80127aa:	461a      	mov	r2, r3
 80127ac:	4b1d      	ldr	r3, [pc, #116]	; (8012824 <mem_init+0x88>)
 80127ae:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80127b0:	4b1c      	ldr	r3, [pc, #112]	; (8012824 <mem_init+0x88>)
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80127bc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	2200      	movs	r2, #0
 80127c2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	2200      	movs	r2, #0
 80127c8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80127ca:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80127ce:	f7ff ff1f 	bl	8012610 <ptr_to_mem>
 80127d2:	4603      	mov	r3, r0
 80127d4:	4a14      	ldr	r2, [pc, #80]	; (8012828 <mem_init+0x8c>)
 80127d6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80127d8:	4b13      	ldr	r3, [pc, #76]	; (8012828 <mem_init+0x8c>)
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	2201      	movs	r2, #1
 80127de:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80127e0:	4b11      	ldr	r3, [pc, #68]	; (8012828 <mem_init+0x8c>)
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80127e8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80127ea:	4b0f      	ldr	r3, [pc, #60]	; (8012828 <mem_init+0x8c>)
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80127f2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80127f4:	4b0b      	ldr	r3, [pc, #44]	; (8012824 <mem_init+0x88>)
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	4a0c      	ldr	r2, [pc, #48]	; (801282c <mem_init+0x90>)
 80127fa:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80127fc:	480c      	ldr	r0, [pc, #48]	; (8012830 <mem_init+0x94>)
 80127fe:	f00b f957 	bl	801dab0 <sys_mutex_new>
 8012802:	4603      	mov	r3, r0
 8012804:	2b00      	cmp	r3, #0
 8012806:	d006      	beq.n	8012816 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8012808:	4b0a      	ldr	r3, [pc, #40]	; (8012834 <mem_init+0x98>)
 801280a:	f240 221f 	movw	r2, #543	; 0x21f
 801280e:	490a      	ldr	r1, [pc, #40]	; (8012838 <mem_init+0x9c>)
 8012810:	480a      	ldr	r0, [pc, #40]	; (801283c <mem_init+0xa0>)
 8012812:	f00c faa5 	bl	801ed60 <iprintf>
  }
}
 8012816:	bf00      	nop
 8012818:	3708      	adds	r7, #8
 801281a:	46bd      	mov	sp, r7
 801281c:	bd80      	pop	{r7, pc}
 801281e:	bf00      	nop
 8012820:	200080a0 	.word	0x200080a0
 8012824:	20004714 	.word	0x20004714
 8012828:	20004718 	.word	0x20004718
 801282c:	20004720 	.word	0x20004720
 8012830:	2000471c 	.word	0x2000471c
 8012834:	08023234 	.word	0x08023234
 8012838:	08023308 	.word	0x08023308
 801283c:	0802327c 	.word	0x0802327c

08012840 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b086      	sub	sp, #24
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	f7ff fef3 	bl	8012634 <mem_to_ptr>
 801284e:	4603      	mov	r3, r0
 8012850:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	881b      	ldrh	r3, [r3, #0]
 8012856:	4618      	mov	r0, r3
 8012858:	f7ff feda 	bl	8012610 <ptr_to_mem>
 801285c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	885b      	ldrh	r3, [r3, #2]
 8012862:	4618      	mov	r0, r3
 8012864:	f7ff fed4 	bl	8012610 <ptr_to_mem>
 8012868:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	881b      	ldrh	r3, [r3, #0]
 801286e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012872:	d818      	bhi.n	80128a6 <mem_link_valid+0x66>
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	885b      	ldrh	r3, [r3, #2]
 8012878:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801287c:	d813      	bhi.n	80128a6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012882:	8afa      	ldrh	r2, [r7, #22]
 8012884:	429a      	cmp	r2, r3
 8012886:	d004      	beq.n	8012892 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	881b      	ldrh	r3, [r3, #0]
 801288c:	8afa      	ldrh	r2, [r7, #22]
 801288e:	429a      	cmp	r2, r3
 8012890:	d109      	bne.n	80128a6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012892:	4b08      	ldr	r3, [pc, #32]	; (80128b4 <mem_link_valid+0x74>)
 8012894:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012896:	693a      	ldr	r2, [r7, #16]
 8012898:	429a      	cmp	r2, r3
 801289a:	d006      	beq.n	80128aa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801289c:	693b      	ldr	r3, [r7, #16]
 801289e:	885b      	ldrh	r3, [r3, #2]
 80128a0:	8afa      	ldrh	r2, [r7, #22]
 80128a2:	429a      	cmp	r2, r3
 80128a4:	d001      	beq.n	80128aa <mem_link_valid+0x6a>
    return 0;
 80128a6:	2300      	movs	r3, #0
 80128a8:	e000      	b.n	80128ac <mem_link_valid+0x6c>
  }
  return 1;
 80128aa:	2301      	movs	r3, #1
}
 80128ac:	4618      	mov	r0, r3
 80128ae:	3718      	adds	r7, #24
 80128b0:	46bd      	mov	sp, r7
 80128b2:	bd80      	pop	{r7, pc}
 80128b4:	20004718 	.word	0x20004718

080128b8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b088      	sub	sp, #32
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d070      	beq.n	80129a8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f003 0303 	and.w	r3, r3, #3
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d00d      	beq.n	80128ec <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80128d0:	4b37      	ldr	r3, [pc, #220]	; (80129b0 <mem_free+0xf8>)
 80128d2:	f240 2273 	movw	r2, #627	; 0x273
 80128d6:	4937      	ldr	r1, [pc, #220]	; (80129b4 <mem_free+0xfc>)
 80128d8:	4837      	ldr	r0, [pc, #220]	; (80129b8 <mem_free+0x100>)
 80128da:	f00c fa41 	bl	801ed60 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80128de:	f00b f945 	bl	801db6c <sys_arch_protect>
 80128e2:	60f8      	str	r0, [r7, #12]
 80128e4:	68f8      	ldr	r0, [r7, #12]
 80128e6:	f00b f94f 	bl	801db88 <sys_arch_unprotect>
    return;
 80128ea:	e05e      	b.n	80129aa <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	3b08      	subs	r3, #8
 80128f0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80128f2:	4b32      	ldr	r3, [pc, #200]	; (80129bc <mem_free+0x104>)
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	69fa      	ldr	r2, [r7, #28]
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d306      	bcc.n	801290a <mem_free+0x52>
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	f103 020c 	add.w	r2, r3, #12
 8012902:	4b2f      	ldr	r3, [pc, #188]	; (80129c0 <mem_free+0x108>)
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	429a      	cmp	r2, r3
 8012908:	d90d      	bls.n	8012926 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801290a:	4b29      	ldr	r3, [pc, #164]	; (80129b0 <mem_free+0xf8>)
 801290c:	f240 227f 	movw	r2, #639	; 0x27f
 8012910:	492c      	ldr	r1, [pc, #176]	; (80129c4 <mem_free+0x10c>)
 8012912:	4829      	ldr	r0, [pc, #164]	; (80129b8 <mem_free+0x100>)
 8012914:	f00c fa24 	bl	801ed60 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012918:	f00b f928 	bl	801db6c <sys_arch_protect>
 801291c:	6138      	str	r0, [r7, #16]
 801291e:	6938      	ldr	r0, [r7, #16]
 8012920:	f00b f932 	bl	801db88 <sys_arch_unprotect>
    return;
 8012924:	e041      	b.n	80129aa <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012926:	4828      	ldr	r0, [pc, #160]	; (80129c8 <mem_free+0x110>)
 8012928:	f00b f8de 	bl	801dae8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 801292c:	69fb      	ldr	r3, [r7, #28]
 801292e:	791b      	ldrb	r3, [r3, #4]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d110      	bne.n	8012956 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8012934:	4b1e      	ldr	r3, [pc, #120]	; (80129b0 <mem_free+0xf8>)
 8012936:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801293a:	4924      	ldr	r1, [pc, #144]	; (80129cc <mem_free+0x114>)
 801293c:	481e      	ldr	r0, [pc, #120]	; (80129b8 <mem_free+0x100>)
 801293e:	f00c fa0f 	bl	801ed60 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012942:	4821      	ldr	r0, [pc, #132]	; (80129c8 <mem_free+0x110>)
 8012944:	f00b f8df 	bl	801db06 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012948:	f00b f910 	bl	801db6c <sys_arch_protect>
 801294c:	6178      	str	r0, [r7, #20]
 801294e:	6978      	ldr	r0, [r7, #20]
 8012950:	f00b f91a 	bl	801db88 <sys_arch_unprotect>
    return;
 8012954:	e029      	b.n	80129aa <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8012956:	69f8      	ldr	r0, [r7, #28]
 8012958:	f7ff ff72 	bl	8012840 <mem_link_valid>
 801295c:	4603      	mov	r3, r0
 801295e:	2b00      	cmp	r3, #0
 8012960:	d110      	bne.n	8012984 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8012962:	4b13      	ldr	r3, [pc, #76]	; (80129b0 <mem_free+0xf8>)
 8012964:	f240 2295 	movw	r2, #661	; 0x295
 8012968:	4919      	ldr	r1, [pc, #100]	; (80129d0 <mem_free+0x118>)
 801296a:	4813      	ldr	r0, [pc, #76]	; (80129b8 <mem_free+0x100>)
 801296c:	f00c f9f8 	bl	801ed60 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012970:	4815      	ldr	r0, [pc, #84]	; (80129c8 <mem_free+0x110>)
 8012972:	f00b f8c8 	bl	801db06 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012976:	f00b f8f9 	bl	801db6c <sys_arch_protect>
 801297a:	61b8      	str	r0, [r7, #24]
 801297c:	69b8      	ldr	r0, [r7, #24]
 801297e:	f00b f903 	bl	801db88 <sys_arch_unprotect>
    return;
 8012982:	e012      	b.n	80129aa <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8012984:	69fb      	ldr	r3, [r7, #28]
 8012986:	2200      	movs	r2, #0
 8012988:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801298a:	4b12      	ldr	r3, [pc, #72]	; (80129d4 <mem_free+0x11c>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	69fa      	ldr	r2, [r7, #28]
 8012990:	429a      	cmp	r2, r3
 8012992:	d202      	bcs.n	801299a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8012994:	4a0f      	ldr	r2, [pc, #60]	; (80129d4 <mem_free+0x11c>)
 8012996:	69fb      	ldr	r3, [r7, #28]
 8012998:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801299a:	69f8      	ldr	r0, [r7, #28]
 801299c:	f7ff fe5c 	bl	8012658 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80129a0:	4809      	ldr	r0, [pc, #36]	; (80129c8 <mem_free+0x110>)
 80129a2:	f00b f8b0 	bl	801db06 <sys_mutex_unlock>
 80129a6:	e000      	b.n	80129aa <mem_free+0xf2>
    return;
 80129a8:	bf00      	nop
}
 80129aa:	3720      	adds	r7, #32
 80129ac:	46bd      	mov	sp, r7
 80129ae:	bd80      	pop	{r7, pc}
 80129b0:	08023234 	.word	0x08023234
 80129b4:	08023324 	.word	0x08023324
 80129b8:	0802327c 	.word	0x0802327c
 80129bc:	20004714 	.word	0x20004714
 80129c0:	20004718 	.word	0x20004718
 80129c4:	08023348 	.word	0x08023348
 80129c8:	2000471c 	.word	0x2000471c
 80129cc:	08023364 	.word	0x08023364
 80129d0:	0802338c 	.word	0x0802338c
 80129d4:	20004720 	.word	0x20004720

080129d8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b088      	sub	sp, #32
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
 80129e0:	460b      	mov	r3, r1
 80129e2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80129e4:	887b      	ldrh	r3, [r7, #2]
 80129e6:	3303      	adds	r3, #3
 80129e8:	b29b      	uxth	r3, r3
 80129ea:	f023 0303 	bic.w	r3, r3, #3
 80129ee:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80129f0:	8bfb      	ldrh	r3, [r7, #30]
 80129f2:	2b0b      	cmp	r3, #11
 80129f4:	d801      	bhi.n	80129fa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80129f6:	230c      	movs	r3, #12
 80129f8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80129fa:	8bfb      	ldrh	r3, [r7, #30]
 80129fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012a00:	d803      	bhi.n	8012a0a <mem_trim+0x32>
 8012a02:	8bfa      	ldrh	r2, [r7, #30]
 8012a04:	887b      	ldrh	r3, [r7, #2]
 8012a06:	429a      	cmp	r2, r3
 8012a08:	d201      	bcs.n	8012a0e <mem_trim+0x36>
    return NULL;
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	e0d8      	b.n	8012bc0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8012a0e:	4b6e      	ldr	r3, [pc, #440]	; (8012bc8 <mem_trim+0x1f0>)
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	687a      	ldr	r2, [r7, #4]
 8012a14:	429a      	cmp	r2, r3
 8012a16:	d304      	bcc.n	8012a22 <mem_trim+0x4a>
 8012a18:	4b6c      	ldr	r3, [pc, #432]	; (8012bcc <mem_trim+0x1f4>)
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	687a      	ldr	r2, [r7, #4]
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	d306      	bcc.n	8012a30 <mem_trim+0x58>
 8012a22:	4b6b      	ldr	r3, [pc, #428]	; (8012bd0 <mem_trim+0x1f8>)
 8012a24:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012a28:	496a      	ldr	r1, [pc, #424]	; (8012bd4 <mem_trim+0x1fc>)
 8012a2a:	486b      	ldr	r0, [pc, #428]	; (8012bd8 <mem_trim+0x200>)
 8012a2c:	f00c f998 	bl	801ed60 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8012a30:	4b65      	ldr	r3, [pc, #404]	; (8012bc8 <mem_trim+0x1f0>)
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	687a      	ldr	r2, [r7, #4]
 8012a36:	429a      	cmp	r2, r3
 8012a38:	d304      	bcc.n	8012a44 <mem_trim+0x6c>
 8012a3a:	4b64      	ldr	r3, [pc, #400]	; (8012bcc <mem_trim+0x1f4>)
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	687a      	ldr	r2, [r7, #4]
 8012a40:	429a      	cmp	r2, r3
 8012a42:	d307      	bcc.n	8012a54 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012a44:	f00b f892 	bl	801db6c <sys_arch_protect>
 8012a48:	60b8      	str	r0, [r7, #8]
 8012a4a:	68b8      	ldr	r0, [r7, #8]
 8012a4c:	f00b f89c 	bl	801db88 <sys_arch_unprotect>
    return rmem;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	e0b5      	b.n	8012bc0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	3b08      	subs	r3, #8
 8012a58:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8012a5a:	69b8      	ldr	r0, [r7, #24]
 8012a5c:	f7ff fdea 	bl	8012634 <mem_to_ptr>
 8012a60:	4603      	mov	r3, r0
 8012a62:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8012a64:	69bb      	ldr	r3, [r7, #24]
 8012a66:	881a      	ldrh	r2, [r3, #0]
 8012a68:	8afb      	ldrh	r3, [r7, #22]
 8012a6a:	1ad3      	subs	r3, r2, r3
 8012a6c:	b29b      	uxth	r3, r3
 8012a6e:	3b08      	subs	r3, #8
 8012a70:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8012a72:	8bfa      	ldrh	r2, [r7, #30]
 8012a74:	8abb      	ldrh	r3, [r7, #20]
 8012a76:	429a      	cmp	r2, r3
 8012a78:	d906      	bls.n	8012a88 <mem_trim+0xb0>
 8012a7a:	4b55      	ldr	r3, [pc, #340]	; (8012bd0 <mem_trim+0x1f8>)
 8012a7c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8012a80:	4956      	ldr	r1, [pc, #344]	; (8012bdc <mem_trim+0x204>)
 8012a82:	4855      	ldr	r0, [pc, #340]	; (8012bd8 <mem_trim+0x200>)
 8012a84:	f00c f96c 	bl	801ed60 <iprintf>
  if (newsize > size) {
 8012a88:	8bfa      	ldrh	r2, [r7, #30]
 8012a8a:	8abb      	ldrh	r3, [r7, #20]
 8012a8c:	429a      	cmp	r2, r3
 8012a8e:	d901      	bls.n	8012a94 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8012a90:	2300      	movs	r3, #0
 8012a92:	e095      	b.n	8012bc0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8012a94:	8bfa      	ldrh	r2, [r7, #30]
 8012a96:	8abb      	ldrh	r3, [r7, #20]
 8012a98:	429a      	cmp	r2, r3
 8012a9a:	d101      	bne.n	8012aa0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	e08f      	b.n	8012bc0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012aa0:	484f      	ldr	r0, [pc, #316]	; (8012be0 <mem_trim+0x208>)
 8012aa2:	f00b f821 	bl	801dae8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8012aa6:	69bb      	ldr	r3, [r7, #24]
 8012aa8:	881b      	ldrh	r3, [r3, #0]
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f7ff fdb0 	bl	8012610 <ptr_to_mem>
 8012ab0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8012ab2:	693b      	ldr	r3, [r7, #16]
 8012ab4:	791b      	ldrb	r3, [r3, #4]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d13f      	bne.n	8012b3a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012aba:	69bb      	ldr	r3, [r7, #24]
 8012abc:	881b      	ldrh	r3, [r3, #0]
 8012abe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012ac2:	d106      	bne.n	8012ad2 <mem_trim+0xfa>
 8012ac4:	4b42      	ldr	r3, [pc, #264]	; (8012bd0 <mem_trim+0x1f8>)
 8012ac6:	f240 22f5 	movw	r2, #757	; 0x2f5
 8012aca:	4946      	ldr	r1, [pc, #280]	; (8012be4 <mem_trim+0x20c>)
 8012acc:	4842      	ldr	r0, [pc, #264]	; (8012bd8 <mem_trim+0x200>)
 8012ace:	f00c f947 	bl	801ed60 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8012ad2:	693b      	ldr	r3, [r7, #16]
 8012ad4:	881b      	ldrh	r3, [r3, #0]
 8012ad6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012ad8:	8afa      	ldrh	r2, [r7, #22]
 8012ada:	8bfb      	ldrh	r3, [r7, #30]
 8012adc:	4413      	add	r3, r2
 8012ade:	b29b      	uxth	r3, r3
 8012ae0:	3308      	adds	r3, #8
 8012ae2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8012ae4:	4b40      	ldr	r3, [pc, #256]	; (8012be8 <mem_trim+0x210>)
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	693a      	ldr	r2, [r7, #16]
 8012aea:	429a      	cmp	r2, r3
 8012aec:	d106      	bne.n	8012afc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8012aee:	89fb      	ldrh	r3, [r7, #14]
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7ff fd8d 	bl	8012610 <ptr_to_mem>
 8012af6:	4603      	mov	r3, r0
 8012af8:	4a3b      	ldr	r2, [pc, #236]	; (8012be8 <mem_trim+0x210>)
 8012afa:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8012afc:	89fb      	ldrh	r3, [r7, #14]
 8012afe:	4618      	mov	r0, r3
 8012b00:	f7ff fd86 	bl	8012610 <ptr_to_mem>
 8012b04:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8012b06:	693b      	ldr	r3, [r7, #16]
 8012b08:	2200      	movs	r2, #0
 8012b0a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8012b0c:	693b      	ldr	r3, [r7, #16]
 8012b0e:	89ba      	ldrh	r2, [r7, #12]
 8012b10:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8012b12:	693b      	ldr	r3, [r7, #16]
 8012b14:	8afa      	ldrh	r2, [r7, #22]
 8012b16:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8012b18:	69bb      	ldr	r3, [r7, #24]
 8012b1a:	89fa      	ldrh	r2, [r7, #14]
 8012b1c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012b1e:	693b      	ldr	r3, [r7, #16]
 8012b20:	881b      	ldrh	r3, [r3, #0]
 8012b22:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012b26:	d047      	beq.n	8012bb8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	881b      	ldrh	r3, [r3, #0]
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f7ff fd6f 	bl	8012610 <ptr_to_mem>
 8012b32:	4602      	mov	r2, r0
 8012b34:	89fb      	ldrh	r3, [r7, #14]
 8012b36:	8053      	strh	r3, [r2, #2]
 8012b38:	e03e      	b.n	8012bb8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8012b3a:	8bfb      	ldrh	r3, [r7, #30]
 8012b3c:	f103 0214 	add.w	r2, r3, #20
 8012b40:	8abb      	ldrh	r3, [r7, #20]
 8012b42:	429a      	cmp	r2, r3
 8012b44:	d838      	bhi.n	8012bb8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012b46:	8afa      	ldrh	r2, [r7, #22]
 8012b48:	8bfb      	ldrh	r3, [r7, #30]
 8012b4a:	4413      	add	r3, r2
 8012b4c:	b29b      	uxth	r3, r3
 8012b4e:	3308      	adds	r3, #8
 8012b50:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012b52:	69bb      	ldr	r3, [r7, #24]
 8012b54:	881b      	ldrh	r3, [r3, #0]
 8012b56:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012b5a:	d106      	bne.n	8012b6a <mem_trim+0x192>
 8012b5c:	4b1c      	ldr	r3, [pc, #112]	; (8012bd0 <mem_trim+0x1f8>)
 8012b5e:	f240 3216 	movw	r2, #790	; 0x316
 8012b62:	4920      	ldr	r1, [pc, #128]	; (8012be4 <mem_trim+0x20c>)
 8012b64:	481c      	ldr	r0, [pc, #112]	; (8012bd8 <mem_trim+0x200>)
 8012b66:	f00c f8fb 	bl	801ed60 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8012b6a:	89fb      	ldrh	r3, [r7, #14]
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	f7ff fd4f 	bl	8012610 <ptr_to_mem>
 8012b72:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8012b74:	4b1c      	ldr	r3, [pc, #112]	; (8012be8 <mem_trim+0x210>)
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	693a      	ldr	r2, [r7, #16]
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	d202      	bcs.n	8012b84 <mem_trim+0x1ac>
      lfree = mem2;
 8012b7e:	4a1a      	ldr	r2, [pc, #104]	; (8012be8 <mem_trim+0x210>)
 8012b80:	693b      	ldr	r3, [r7, #16]
 8012b82:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8012b84:	693b      	ldr	r3, [r7, #16]
 8012b86:	2200      	movs	r2, #0
 8012b88:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8012b8a:	69bb      	ldr	r3, [r7, #24]
 8012b8c:	881a      	ldrh	r2, [r3, #0]
 8012b8e:	693b      	ldr	r3, [r7, #16]
 8012b90:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8012b92:	693b      	ldr	r3, [r7, #16]
 8012b94:	8afa      	ldrh	r2, [r7, #22]
 8012b96:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8012b98:	69bb      	ldr	r3, [r7, #24]
 8012b9a:	89fa      	ldrh	r2, [r7, #14]
 8012b9c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012b9e:	693b      	ldr	r3, [r7, #16]
 8012ba0:	881b      	ldrh	r3, [r3, #0]
 8012ba2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012ba6:	d007      	beq.n	8012bb8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012ba8:	693b      	ldr	r3, [r7, #16]
 8012baa:	881b      	ldrh	r3, [r3, #0]
 8012bac:	4618      	mov	r0, r3
 8012bae:	f7ff fd2f 	bl	8012610 <ptr_to_mem>
 8012bb2:	4602      	mov	r2, r0
 8012bb4:	89fb      	ldrh	r3, [r7, #14]
 8012bb6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012bb8:	4809      	ldr	r0, [pc, #36]	; (8012be0 <mem_trim+0x208>)
 8012bba:	f00a ffa4 	bl	801db06 <sys_mutex_unlock>
  return rmem;
 8012bbe:	687b      	ldr	r3, [r7, #4]
}
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	3720      	adds	r7, #32
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bd80      	pop	{r7, pc}
 8012bc8:	20004714 	.word	0x20004714
 8012bcc:	20004718 	.word	0x20004718
 8012bd0:	08023234 	.word	0x08023234
 8012bd4:	080233c0 	.word	0x080233c0
 8012bd8:	0802327c 	.word	0x0802327c
 8012bdc:	080233d8 	.word	0x080233d8
 8012be0:	2000471c 	.word	0x2000471c
 8012be4:	080233f8 	.word	0x080233f8
 8012be8:	20004720 	.word	0x20004720

08012bec <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b088      	sub	sp, #32
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8012bf6:	88fb      	ldrh	r3, [r7, #6]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d101      	bne.n	8012c00 <mem_malloc+0x14>
    return NULL;
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	e0e2      	b.n	8012dc6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8012c00:	88fb      	ldrh	r3, [r7, #6]
 8012c02:	3303      	adds	r3, #3
 8012c04:	b29b      	uxth	r3, r3
 8012c06:	f023 0303 	bic.w	r3, r3, #3
 8012c0a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8012c0c:	8bbb      	ldrh	r3, [r7, #28]
 8012c0e:	2b0b      	cmp	r3, #11
 8012c10:	d801      	bhi.n	8012c16 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8012c12:	230c      	movs	r3, #12
 8012c14:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8012c16:	8bbb      	ldrh	r3, [r7, #28]
 8012c18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012c1c:	d803      	bhi.n	8012c26 <mem_malloc+0x3a>
 8012c1e:	8bba      	ldrh	r2, [r7, #28]
 8012c20:	88fb      	ldrh	r3, [r7, #6]
 8012c22:	429a      	cmp	r2, r3
 8012c24:	d201      	bcs.n	8012c2a <mem_malloc+0x3e>
    return NULL;
 8012c26:	2300      	movs	r3, #0
 8012c28:	e0cd      	b.n	8012dc6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8012c2a:	4869      	ldr	r0, [pc, #420]	; (8012dd0 <mem_malloc+0x1e4>)
 8012c2c:	f00a ff5c 	bl	801dae8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012c30:	4b68      	ldr	r3, [pc, #416]	; (8012dd4 <mem_malloc+0x1e8>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	4618      	mov	r0, r3
 8012c36:	f7ff fcfd 	bl	8012634 <mem_to_ptr>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	83fb      	strh	r3, [r7, #30]
 8012c3e:	e0b7      	b.n	8012db0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8012c40:	8bfb      	ldrh	r3, [r7, #30]
 8012c42:	4618      	mov	r0, r3
 8012c44:	f7ff fce4 	bl	8012610 <ptr_to_mem>
 8012c48:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	791b      	ldrb	r3, [r3, #4]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	f040 80a7 	bne.w	8012da2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	881b      	ldrh	r3, [r3, #0]
 8012c58:	461a      	mov	r2, r3
 8012c5a:	8bfb      	ldrh	r3, [r7, #30]
 8012c5c:	1ad3      	subs	r3, r2, r3
 8012c5e:	f1a3 0208 	sub.w	r2, r3, #8
 8012c62:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8012c64:	429a      	cmp	r2, r3
 8012c66:	f0c0 809c 	bcc.w	8012da2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8012c6a:	697b      	ldr	r3, [r7, #20]
 8012c6c:	881b      	ldrh	r3, [r3, #0]
 8012c6e:	461a      	mov	r2, r3
 8012c70:	8bfb      	ldrh	r3, [r7, #30]
 8012c72:	1ad3      	subs	r3, r2, r3
 8012c74:	f1a3 0208 	sub.w	r2, r3, #8
 8012c78:	8bbb      	ldrh	r3, [r7, #28]
 8012c7a:	3314      	adds	r3, #20
 8012c7c:	429a      	cmp	r2, r3
 8012c7e:	d333      	bcc.n	8012ce8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8012c80:	8bfa      	ldrh	r2, [r7, #30]
 8012c82:	8bbb      	ldrh	r3, [r7, #28]
 8012c84:	4413      	add	r3, r2
 8012c86:	b29b      	uxth	r3, r3
 8012c88:	3308      	adds	r3, #8
 8012c8a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8012c8c:	8a7b      	ldrh	r3, [r7, #18]
 8012c8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012c92:	d106      	bne.n	8012ca2 <mem_malloc+0xb6>
 8012c94:	4b50      	ldr	r3, [pc, #320]	; (8012dd8 <mem_malloc+0x1ec>)
 8012c96:	f240 3287 	movw	r2, #903	; 0x387
 8012c9a:	4950      	ldr	r1, [pc, #320]	; (8012ddc <mem_malloc+0x1f0>)
 8012c9c:	4850      	ldr	r0, [pc, #320]	; (8012de0 <mem_malloc+0x1f4>)
 8012c9e:	f00c f85f 	bl	801ed60 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8012ca2:	8a7b      	ldrh	r3, [r7, #18]
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7ff fcb3 	bl	8012610 <ptr_to_mem>
 8012caa:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	2200      	movs	r2, #0
 8012cb0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8012cb2:	697b      	ldr	r3, [r7, #20]
 8012cb4:	881a      	ldrh	r2, [r3, #0]
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	8bfa      	ldrh	r2, [r7, #30]
 8012cbe:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8012cc0:	697b      	ldr	r3, [r7, #20]
 8012cc2:	8a7a      	ldrh	r2, [r7, #18]
 8012cc4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8012cc6:	697b      	ldr	r3, [r7, #20]
 8012cc8:	2201      	movs	r2, #1
 8012cca:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	881b      	ldrh	r3, [r3, #0]
 8012cd0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012cd4:	d00b      	beq.n	8012cee <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	881b      	ldrh	r3, [r3, #0]
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f7ff fc98 	bl	8012610 <ptr_to_mem>
 8012ce0:	4602      	mov	r2, r0
 8012ce2:	8a7b      	ldrh	r3, [r7, #18]
 8012ce4:	8053      	strh	r3, [r2, #2]
 8012ce6:	e002      	b.n	8012cee <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8012ce8:	697b      	ldr	r3, [r7, #20]
 8012cea:	2201      	movs	r2, #1
 8012cec:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8012cee:	4b39      	ldr	r3, [pc, #228]	; (8012dd4 <mem_malloc+0x1e8>)
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	697a      	ldr	r2, [r7, #20]
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	d127      	bne.n	8012d48 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8012cf8:	4b36      	ldr	r3, [pc, #216]	; (8012dd4 <mem_malloc+0x1e8>)
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8012cfe:	e005      	b.n	8012d0c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8012d00:	69bb      	ldr	r3, [r7, #24]
 8012d02:	881b      	ldrh	r3, [r3, #0]
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7ff fc83 	bl	8012610 <ptr_to_mem>
 8012d0a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8012d0c:	69bb      	ldr	r3, [r7, #24]
 8012d0e:	791b      	ldrb	r3, [r3, #4]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d004      	beq.n	8012d1e <mem_malloc+0x132>
 8012d14:	4b33      	ldr	r3, [pc, #204]	; (8012de4 <mem_malloc+0x1f8>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	69ba      	ldr	r2, [r7, #24]
 8012d1a:	429a      	cmp	r2, r3
 8012d1c:	d1f0      	bne.n	8012d00 <mem_malloc+0x114>
          }
          lfree = cur;
 8012d1e:	4a2d      	ldr	r2, [pc, #180]	; (8012dd4 <mem_malloc+0x1e8>)
 8012d20:	69bb      	ldr	r3, [r7, #24]
 8012d22:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8012d24:	4b2b      	ldr	r3, [pc, #172]	; (8012dd4 <mem_malloc+0x1e8>)
 8012d26:	681a      	ldr	r2, [r3, #0]
 8012d28:	4b2e      	ldr	r3, [pc, #184]	; (8012de4 <mem_malloc+0x1f8>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	429a      	cmp	r2, r3
 8012d2e:	d00b      	beq.n	8012d48 <mem_malloc+0x15c>
 8012d30:	4b28      	ldr	r3, [pc, #160]	; (8012dd4 <mem_malloc+0x1e8>)
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	791b      	ldrb	r3, [r3, #4]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d006      	beq.n	8012d48 <mem_malloc+0x15c>
 8012d3a:	4b27      	ldr	r3, [pc, #156]	; (8012dd8 <mem_malloc+0x1ec>)
 8012d3c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8012d40:	4929      	ldr	r1, [pc, #164]	; (8012de8 <mem_malloc+0x1fc>)
 8012d42:	4827      	ldr	r0, [pc, #156]	; (8012de0 <mem_malloc+0x1f4>)
 8012d44:	f00c f80c 	bl	801ed60 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8012d48:	4821      	ldr	r0, [pc, #132]	; (8012dd0 <mem_malloc+0x1e4>)
 8012d4a:	f00a fedc 	bl	801db06 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8012d4e:	8bba      	ldrh	r2, [r7, #28]
 8012d50:	697b      	ldr	r3, [r7, #20]
 8012d52:	4413      	add	r3, r2
 8012d54:	3308      	adds	r3, #8
 8012d56:	4a23      	ldr	r2, [pc, #140]	; (8012de4 <mem_malloc+0x1f8>)
 8012d58:	6812      	ldr	r2, [r2, #0]
 8012d5a:	4293      	cmp	r3, r2
 8012d5c:	d906      	bls.n	8012d6c <mem_malloc+0x180>
 8012d5e:	4b1e      	ldr	r3, [pc, #120]	; (8012dd8 <mem_malloc+0x1ec>)
 8012d60:	f240 32b9 	movw	r2, #953	; 0x3b9
 8012d64:	4921      	ldr	r1, [pc, #132]	; (8012dec <mem_malloc+0x200>)
 8012d66:	481e      	ldr	r0, [pc, #120]	; (8012de0 <mem_malloc+0x1f4>)
 8012d68:	f00b fffa 	bl	801ed60 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8012d6c:	697b      	ldr	r3, [r7, #20]
 8012d6e:	f003 0303 	and.w	r3, r3, #3
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d006      	beq.n	8012d84 <mem_malloc+0x198>
 8012d76:	4b18      	ldr	r3, [pc, #96]	; (8012dd8 <mem_malloc+0x1ec>)
 8012d78:	f240 32bb 	movw	r2, #955	; 0x3bb
 8012d7c:	491c      	ldr	r1, [pc, #112]	; (8012df0 <mem_malloc+0x204>)
 8012d7e:	4818      	ldr	r0, [pc, #96]	; (8012de0 <mem_malloc+0x1f4>)
 8012d80:	f00b ffee 	bl	801ed60 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8012d84:	697b      	ldr	r3, [r7, #20]
 8012d86:	f003 0303 	and.w	r3, r3, #3
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d006      	beq.n	8012d9c <mem_malloc+0x1b0>
 8012d8e:	4b12      	ldr	r3, [pc, #72]	; (8012dd8 <mem_malloc+0x1ec>)
 8012d90:	f240 32bd 	movw	r2, #957	; 0x3bd
 8012d94:	4917      	ldr	r1, [pc, #92]	; (8012df4 <mem_malloc+0x208>)
 8012d96:	4812      	ldr	r0, [pc, #72]	; (8012de0 <mem_malloc+0x1f4>)
 8012d98:	f00b ffe2 	bl	801ed60 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8012d9c:	697b      	ldr	r3, [r7, #20]
 8012d9e:	3308      	adds	r3, #8
 8012da0:	e011      	b.n	8012dc6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8012da2:	8bfb      	ldrh	r3, [r7, #30]
 8012da4:	4618      	mov	r0, r3
 8012da6:	f7ff fc33 	bl	8012610 <ptr_to_mem>
 8012daa:	4603      	mov	r3, r0
 8012dac:	881b      	ldrh	r3, [r3, #0]
 8012dae:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012db0:	8bfa      	ldrh	r2, [r7, #30]
 8012db2:	8bbb      	ldrh	r3, [r7, #28]
 8012db4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8012db8:	429a      	cmp	r2, r3
 8012dba:	f4ff af41 	bcc.w	8012c40 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8012dbe:	4804      	ldr	r0, [pc, #16]	; (8012dd0 <mem_malloc+0x1e4>)
 8012dc0:	f00a fea1 	bl	801db06 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8012dc4:	2300      	movs	r3, #0
}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	3720      	adds	r7, #32
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	2000471c 	.word	0x2000471c
 8012dd4:	20004720 	.word	0x20004720
 8012dd8:	08023234 	.word	0x08023234
 8012ddc:	080233f8 	.word	0x080233f8
 8012de0:	0802327c 	.word	0x0802327c
 8012de4:	20004718 	.word	0x20004718
 8012de8:	0802340c 	.word	0x0802340c
 8012dec:	08023428 	.word	0x08023428
 8012df0:	08023458 	.word	0x08023458
 8012df4:	08023488 	.word	0x08023488

08012df8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8012df8:	b480      	push	{r7}
 8012dfa:	b085      	sub	sp, #20
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	689b      	ldr	r3, [r3, #8]
 8012e04:	2200      	movs	r2, #0
 8012e06:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	3303      	adds	r3, #3
 8012e0e:	f023 0303 	bic.w	r3, r3, #3
 8012e12:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8012e14:	2300      	movs	r3, #0
 8012e16:	60fb      	str	r3, [r7, #12]
 8012e18:	e011      	b.n	8012e3e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	689b      	ldr	r3, [r3, #8]
 8012e1e:	681a      	ldr	r2, [r3, #0]
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	689b      	ldr	r3, [r3, #8]
 8012e28:	68ba      	ldr	r2, [r7, #8]
 8012e2a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	881b      	ldrh	r3, [r3, #0]
 8012e30:	461a      	mov	r2, r3
 8012e32:	68bb      	ldr	r3, [r7, #8]
 8012e34:	4413      	add	r3, r2
 8012e36:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	3301      	adds	r3, #1
 8012e3c:	60fb      	str	r3, [r7, #12]
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	885b      	ldrh	r3, [r3, #2]
 8012e42:	461a      	mov	r2, r3
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	4293      	cmp	r3, r2
 8012e48:	dbe7      	blt.n	8012e1a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8012e4a:	bf00      	nop
 8012e4c:	bf00      	nop
 8012e4e:	3714      	adds	r7, #20
 8012e50:	46bd      	mov	sp, r7
 8012e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e56:	4770      	bx	lr

08012e58 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b082      	sub	sp, #8
 8012e5c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012e5e:	2300      	movs	r3, #0
 8012e60:	80fb      	strh	r3, [r7, #6]
 8012e62:	e009      	b.n	8012e78 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8012e64:	88fb      	ldrh	r3, [r7, #6]
 8012e66:	4a08      	ldr	r2, [pc, #32]	; (8012e88 <memp_init+0x30>)
 8012e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f7ff ffc3 	bl	8012df8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012e72:	88fb      	ldrh	r3, [r7, #6]
 8012e74:	3301      	adds	r3, #1
 8012e76:	80fb      	strh	r3, [r7, #6]
 8012e78:	88fb      	ldrh	r3, [r7, #6]
 8012e7a:	2b0c      	cmp	r3, #12
 8012e7c:	d9f2      	bls.n	8012e64 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8012e7e:	bf00      	nop
 8012e80:	bf00      	nop
 8012e82:	3708      	adds	r7, #8
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}
 8012e88:	08026c30 	.word	0x08026c30

08012e8c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b084      	sub	sp, #16
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8012e94:	f00a fe6a 	bl	801db6c <sys_arch_protect>
 8012e98:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	689b      	ldr	r3, [r3, #8]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8012ea2:	68bb      	ldr	r3, [r7, #8]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d015      	beq.n	8012ed4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	689b      	ldr	r3, [r3, #8]
 8012eac:	68ba      	ldr	r2, [r7, #8]
 8012eae:	6812      	ldr	r2, [r2, #0]
 8012eb0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8012eb2:	68bb      	ldr	r3, [r7, #8]
 8012eb4:	f003 0303 	and.w	r3, r3, #3
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d006      	beq.n	8012eca <do_memp_malloc_pool+0x3e>
 8012ebc:	4b09      	ldr	r3, [pc, #36]	; (8012ee4 <do_memp_malloc_pool+0x58>)
 8012ebe:	f44f 728c 	mov.w	r2, #280	; 0x118
 8012ec2:	4909      	ldr	r1, [pc, #36]	; (8012ee8 <do_memp_malloc_pool+0x5c>)
 8012ec4:	4809      	ldr	r0, [pc, #36]	; (8012eec <do_memp_malloc_pool+0x60>)
 8012ec6:	f00b ff4b 	bl	801ed60 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012eca:	68f8      	ldr	r0, [r7, #12]
 8012ecc:	f00a fe5c 	bl	801db88 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8012ed0:	68bb      	ldr	r3, [r7, #8]
 8012ed2:	e003      	b.n	8012edc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012ed4:	68f8      	ldr	r0, [r7, #12]
 8012ed6:	f00a fe57 	bl	801db88 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8012eda:	2300      	movs	r3, #0
}
 8012edc:	4618      	mov	r0, r3
 8012ede:	3710      	adds	r7, #16
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	bd80      	pop	{r7, pc}
 8012ee4:	080234ac 	.word	0x080234ac
 8012ee8:	080234dc 	.word	0x080234dc
 8012eec:	08023500 	.word	0x08023500

08012ef0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b084      	sub	sp, #16
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8012efa:	79fb      	ldrb	r3, [r7, #7]
 8012efc:	2b0c      	cmp	r3, #12
 8012efe:	d908      	bls.n	8012f12 <memp_malloc+0x22>
 8012f00:	4b0a      	ldr	r3, [pc, #40]	; (8012f2c <memp_malloc+0x3c>)
 8012f02:	f240 1257 	movw	r2, #343	; 0x157
 8012f06:	490a      	ldr	r1, [pc, #40]	; (8012f30 <memp_malloc+0x40>)
 8012f08:	480a      	ldr	r0, [pc, #40]	; (8012f34 <memp_malloc+0x44>)
 8012f0a:	f00b ff29 	bl	801ed60 <iprintf>
 8012f0e:	2300      	movs	r3, #0
 8012f10:	e008      	b.n	8012f24 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8012f12:	79fb      	ldrb	r3, [r7, #7]
 8012f14:	4a08      	ldr	r2, [pc, #32]	; (8012f38 <memp_malloc+0x48>)
 8012f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	f7ff ffb6 	bl	8012e8c <do_memp_malloc_pool>
 8012f20:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8012f22:	68fb      	ldr	r3, [r7, #12]
}
 8012f24:	4618      	mov	r0, r3
 8012f26:	3710      	adds	r7, #16
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	bd80      	pop	{r7, pc}
 8012f2c:	080234ac 	.word	0x080234ac
 8012f30:	0802353c 	.word	0x0802353c
 8012f34:	08023500 	.word	0x08023500
 8012f38:	08026c30 	.word	0x08026c30

08012f3c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b084      	sub	sp, #16
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
 8012f44:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	f003 0303 	and.w	r3, r3, #3
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d006      	beq.n	8012f5e <do_memp_free_pool+0x22>
 8012f50:	4b0d      	ldr	r3, [pc, #52]	; (8012f88 <do_memp_free_pool+0x4c>)
 8012f52:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8012f56:	490d      	ldr	r1, [pc, #52]	; (8012f8c <do_memp_free_pool+0x50>)
 8012f58:	480d      	ldr	r0, [pc, #52]	; (8012f90 <do_memp_free_pool+0x54>)
 8012f5a:	f00b ff01 	bl	801ed60 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8012f5e:	683b      	ldr	r3, [r7, #0]
 8012f60:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8012f62:	f00a fe03 	bl	801db6c <sys_arch_protect>
 8012f66:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	689b      	ldr	r3, [r3, #8]
 8012f6c:	681a      	ldr	r2, [r3, #0]
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	689b      	ldr	r3, [r3, #8]
 8012f76:	68fa      	ldr	r2, [r7, #12]
 8012f78:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8012f7a:	68b8      	ldr	r0, [r7, #8]
 8012f7c:	f00a fe04 	bl	801db88 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8012f80:	bf00      	nop
 8012f82:	3710      	adds	r7, #16
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}
 8012f88:	080234ac 	.word	0x080234ac
 8012f8c:	0802355c 	.word	0x0802355c
 8012f90:	08023500 	.word	0x08023500

08012f94 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b082      	sub	sp, #8
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	6039      	str	r1, [r7, #0]
 8012f9e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8012fa0:	79fb      	ldrb	r3, [r7, #7]
 8012fa2:	2b0c      	cmp	r3, #12
 8012fa4:	d907      	bls.n	8012fb6 <memp_free+0x22>
 8012fa6:	4b0c      	ldr	r3, [pc, #48]	; (8012fd8 <memp_free+0x44>)
 8012fa8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8012fac:	490b      	ldr	r1, [pc, #44]	; (8012fdc <memp_free+0x48>)
 8012fae:	480c      	ldr	r0, [pc, #48]	; (8012fe0 <memp_free+0x4c>)
 8012fb0:	f00b fed6 	bl	801ed60 <iprintf>
 8012fb4:	e00c      	b.n	8012fd0 <memp_free+0x3c>

  if (mem == NULL) {
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d008      	beq.n	8012fce <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8012fbc:	79fb      	ldrb	r3, [r7, #7]
 8012fbe:	4a09      	ldr	r2, [pc, #36]	; (8012fe4 <memp_free+0x50>)
 8012fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012fc4:	6839      	ldr	r1, [r7, #0]
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f7ff ffb8 	bl	8012f3c <do_memp_free_pool>
 8012fcc:	e000      	b.n	8012fd0 <memp_free+0x3c>
    return;
 8012fce:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8012fd0:	3708      	adds	r7, #8
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	080234ac 	.word	0x080234ac
 8012fdc:	0802357c 	.word	0x0802357c
 8012fe0:	08023500 	.word	0x08023500
 8012fe4:	08026c30 	.word	0x08026c30

08012fe8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8012fe8:	b480      	push	{r7}
 8012fea:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8012fec:	bf00      	nop
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff4:	4770      	bx	lr
	...

08012ff8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b086      	sub	sp, #24
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	60f8      	str	r0, [r7, #12]
 8013000:	60b9      	str	r1, [r7, #8]
 8013002:	607a      	str	r2, [r7, #4]
 8013004:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d108      	bne.n	801301e <netif_add+0x26>
 801300c:	4b56      	ldr	r3, [pc, #344]	; (8013168 <netif_add+0x170>)
 801300e:	f240 1227 	movw	r2, #295	; 0x127
 8013012:	4956      	ldr	r1, [pc, #344]	; (801316c <netif_add+0x174>)
 8013014:	4856      	ldr	r0, [pc, #344]	; (8013170 <netif_add+0x178>)
 8013016:	f00b fea3 	bl	801ed60 <iprintf>
 801301a:	2300      	movs	r3, #0
 801301c:	e09f      	b.n	801315e <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013020:	2b00      	cmp	r3, #0
 8013022:	d108      	bne.n	8013036 <netif_add+0x3e>
 8013024:	4b50      	ldr	r3, [pc, #320]	; (8013168 <netif_add+0x170>)
 8013026:	f44f 7294 	mov.w	r2, #296	; 0x128
 801302a:	4952      	ldr	r1, [pc, #328]	; (8013174 <netif_add+0x17c>)
 801302c:	4850      	ldr	r0, [pc, #320]	; (8013170 <netif_add+0x178>)
 801302e:	f00b fe97 	bl	801ed60 <iprintf>
 8013032:	2300      	movs	r3, #0
 8013034:	e093      	b.n	801315e <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013036:	68bb      	ldr	r3, [r7, #8]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d101      	bne.n	8013040 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801303c:	4b4e      	ldr	r3, [pc, #312]	; (8013178 <netif_add+0x180>)
 801303e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d101      	bne.n	801304a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013046:	4b4c      	ldr	r3, [pc, #304]	; (8013178 <netif_add+0x180>)
 8013048:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d101      	bne.n	8013054 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013050:	4b49      	ldr	r3, [pc, #292]	; (8013178 <netif_add+0x180>)
 8013052:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	2200      	movs	r2, #0
 8013058:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	2200      	movs	r2, #0
 801305e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	2200      	movs	r2, #0
 8013064:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	4a44      	ldr	r2, [pc, #272]	; (801317c <netif_add+0x184>)
 801306a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	2200      	movs	r2, #0
 8013070:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	2200      	movs	r2, #0
 8013076:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	6a3a      	ldr	r2, [r7, #32]
 801307e:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8013080:	4b3f      	ldr	r3, [pc, #252]	; (8013180 <netif_add+0x188>)
 8013082:	781a      	ldrb	r2, [r3, #0]
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801308e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013090:	683b      	ldr	r3, [r7, #0]
 8013092:	687a      	ldr	r2, [r7, #4]
 8013094:	68b9      	ldr	r1, [r7, #8]
 8013096:	68f8      	ldr	r0, [r7, #12]
 8013098:	f000 f966 	bl	8013368 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801309e:	68f8      	ldr	r0, [r7, #12]
 80130a0:	4798      	blx	r3
 80130a2:	4603      	mov	r3, r0
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d001      	beq.n	80130ac <netif_add+0xb4>
    return NULL;
 80130a8:	2300      	movs	r3, #0
 80130aa:	e058      	b.n	801315e <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80130b2:	2bff      	cmp	r3, #255	; 0xff
 80130b4:	d103      	bne.n	80130be <netif_add+0xc6>
        netif->num = 0;
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	2200      	movs	r2, #0
 80130ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 80130be:	2300      	movs	r3, #0
 80130c0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80130c2:	4b30      	ldr	r3, [pc, #192]	; (8013184 <netif_add+0x18c>)
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	617b      	str	r3, [r7, #20]
 80130c8:	e02b      	b.n	8013122 <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80130ca:	697a      	ldr	r2, [r7, #20]
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	429a      	cmp	r2, r3
 80130d0:	d106      	bne.n	80130e0 <netif_add+0xe8>
 80130d2:	4b25      	ldr	r3, [pc, #148]	; (8013168 <netif_add+0x170>)
 80130d4:	f240 128b 	movw	r2, #395	; 0x18b
 80130d8:	492b      	ldr	r1, [pc, #172]	; (8013188 <netif_add+0x190>)
 80130da:	4825      	ldr	r0, [pc, #148]	; (8013170 <netif_add+0x178>)
 80130dc:	f00b fe40 	bl	801ed60 <iprintf>
        num_netifs++;
 80130e0:	693b      	ldr	r3, [r7, #16]
 80130e2:	3301      	adds	r3, #1
 80130e4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80130e6:	693b      	ldr	r3, [r7, #16]
 80130e8:	2bff      	cmp	r3, #255	; 0xff
 80130ea:	dd06      	ble.n	80130fa <netif_add+0x102>
 80130ec:	4b1e      	ldr	r3, [pc, #120]	; (8013168 <netif_add+0x170>)
 80130ee:	f240 128d 	movw	r2, #397	; 0x18d
 80130f2:	4926      	ldr	r1, [pc, #152]	; (801318c <netif_add+0x194>)
 80130f4:	481e      	ldr	r0, [pc, #120]	; (8013170 <netif_add+0x178>)
 80130f6:	f00b fe33 	bl	801ed60 <iprintf>
        if (netif2->num == netif->num) {
 80130fa:	697b      	ldr	r3, [r7, #20]
 80130fc:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013106:	429a      	cmp	r2, r3
 8013108:	d108      	bne.n	801311c <netif_add+0x124>
          netif->num++;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013110:	3301      	adds	r3, #1
 8013112:	b2da      	uxtb	r2, r3
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 801311a:	e005      	b.n	8013128 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	617b      	str	r3, [r7, #20]
 8013122:	697b      	ldr	r3, [r7, #20]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d1d0      	bne.n	80130ca <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d1be      	bne.n	80130ac <netif_add+0xb4>
  }
  if (netif->num == 254) {
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013134:	2bfe      	cmp	r3, #254	; 0xfe
 8013136:	d103      	bne.n	8013140 <netif_add+0x148>
    netif_num = 0;
 8013138:	4b11      	ldr	r3, [pc, #68]	; (8013180 <netif_add+0x188>)
 801313a:	2200      	movs	r2, #0
 801313c:	701a      	strb	r2, [r3, #0]
 801313e:	e006      	b.n	801314e <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013146:	3301      	adds	r3, #1
 8013148:	b2da      	uxtb	r2, r3
 801314a:	4b0d      	ldr	r3, [pc, #52]	; (8013180 <netif_add+0x188>)
 801314c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801314e:	4b0d      	ldr	r3, [pc, #52]	; (8013184 <netif_add+0x18c>)
 8013150:	681a      	ldr	r2, [r3, #0]
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8013156:	4a0b      	ldr	r2, [pc, #44]	; (8013184 <netif_add+0x18c>)
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801315c:	68fb      	ldr	r3, [r7, #12]
}
 801315e:	4618      	mov	r0, r3
 8013160:	3718      	adds	r7, #24
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}
 8013166:	bf00      	nop
 8013168:	08023598 	.word	0x08023598
 801316c:	0802362c 	.word	0x0802362c
 8013170:	080235e8 	.word	0x080235e8
 8013174:	08023648 	.word	0x08023648
 8013178:	08026ca4 	.word	0x08026ca4
 801317c:	08013559 	.word	0x08013559
 8013180:	20004758 	.word	0x20004758
 8013184:	2000b78c 	.word	0x2000b78c
 8013188:	0802366c 	.word	0x0802366c
 801318c:	08023680 	.word	0x08023680

08013190 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b082      	sub	sp, #8
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
 8013198:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801319a:	6839      	ldr	r1, [r7, #0]
 801319c:	6878      	ldr	r0, [r7, #4]
 801319e:	f002 fe6b 	bl	8015e78 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80131a2:	6839      	ldr	r1, [r7, #0]
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f007 ff03 	bl	801afb0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80131aa:	bf00      	nop
 80131ac:	3708      	adds	r7, #8
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}
	...

080131b4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b086      	sub	sp, #24
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	60f8      	str	r0, [r7, #12]
 80131bc:	60b9      	str	r1, [r7, #8]
 80131be:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80131c0:	68bb      	ldr	r3, [r7, #8]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d106      	bne.n	80131d4 <netif_do_set_ipaddr+0x20>
 80131c6:	4b1d      	ldr	r3, [pc, #116]	; (801323c <netif_do_set_ipaddr+0x88>)
 80131c8:	f240 12cb 	movw	r2, #459	; 0x1cb
 80131cc:	491c      	ldr	r1, [pc, #112]	; (8013240 <netif_do_set_ipaddr+0x8c>)
 80131ce:	481d      	ldr	r0, [pc, #116]	; (8013244 <netif_do_set_ipaddr+0x90>)
 80131d0:	f00b fdc6 	bl	801ed60 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d106      	bne.n	80131e8 <netif_do_set_ipaddr+0x34>
 80131da:	4b18      	ldr	r3, [pc, #96]	; (801323c <netif_do_set_ipaddr+0x88>)
 80131dc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80131e0:	4917      	ldr	r1, [pc, #92]	; (8013240 <netif_do_set_ipaddr+0x8c>)
 80131e2:	4818      	ldr	r0, [pc, #96]	; (8013244 <netif_do_set_ipaddr+0x90>)
 80131e4:	f00b fdbc 	bl	801ed60 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80131e8:	68bb      	ldr	r3, [r7, #8]
 80131ea:	681a      	ldr	r2, [r3, #0]
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	3304      	adds	r3, #4
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	429a      	cmp	r2, r3
 80131f4:	d01c      	beq.n	8013230 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80131f6:	68bb      	ldr	r3, [r7, #8]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	3304      	adds	r3, #4
 8013200:	681a      	ldr	r2, [r3, #0]
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8013206:	f107 0314 	add.w	r3, r7, #20
 801320a:	4619      	mov	r1, r3
 801320c:	6878      	ldr	r0, [r7, #4]
 801320e:	f7ff ffbf 	bl	8013190 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d002      	beq.n	801321e <netif_do_set_ipaddr+0x6a>
 8013218:	68bb      	ldr	r3, [r7, #8]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	e000      	b.n	8013220 <netif_do_set_ipaddr+0x6c>
 801321e:	2300      	movs	r3, #0
 8013220:	68fa      	ldr	r2, [r7, #12]
 8013222:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013224:	2101      	movs	r1, #1
 8013226:	68f8      	ldr	r0, [r7, #12]
 8013228:	f000 f924 	bl	8013474 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801322c:	2301      	movs	r3, #1
 801322e:	e000      	b.n	8013232 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8013230:	2300      	movs	r3, #0
}
 8013232:	4618      	mov	r0, r3
 8013234:	3718      	adds	r7, #24
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}
 801323a:	bf00      	nop
 801323c:	08023598 	.word	0x08023598
 8013240:	080236b0 	.word	0x080236b0
 8013244:	080235e8 	.word	0x080235e8

08013248 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b084      	sub	sp, #16
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
 8013250:	6039      	str	r1, [r7, #0]
  ip_addr_t old_addr;

  LWIP_ERROR("netif_set_ipaddr: invalid netif", netif != NULL, return);
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d107      	bne.n	8013268 <netif_set_ipaddr+0x20>
 8013258:	4b0b      	ldr	r3, [pc, #44]	; (8013288 <netif_set_ipaddr+0x40>)
 801325a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801325e:	490b      	ldr	r1, [pc, #44]	; (801328c <netif_set_ipaddr+0x44>)
 8013260:	480b      	ldr	r0, [pc, #44]	; (8013290 <netif_set_ipaddr+0x48>)
 8013262:	f00b fd7d 	bl	801ed60 <iprintf>
 8013266:	e00b      	b.n	8013280 <netif_set_ipaddr+0x38>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013268:	683b      	ldr	r3, [r7, #0]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d101      	bne.n	8013272 <netif_set_ipaddr+0x2a>
    ipaddr = IP4_ADDR_ANY4;
 801326e:	4b09      	ldr	r3, [pc, #36]	; (8013294 <netif_set_ipaddr+0x4c>)
 8013270:	603b      	str	r3, [r7, #0]
  }

  LWIP_ASSERT_CORE_LOCKED();

  if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013272:	f107 030c 	add.w	r3, r7, #12
 8013276:	461a      	mov	r2, r3
 8013278:	6839      	ldr	r1, [r7, #0]
 801327a:	6878      	ldr	r0, [r7, #4]
 801327c:	f7ff ff9a 	bl	80131b4 <netif_do_set_ipaddr>
    netif_ext_callback_args_t args;
    args.ipv4_changed.old_address = &old_addr;
    netif_invoke_ext_callback(netif, LWIP_NSC_IPV4_ADDRESS_CHANGED, &args);
#endif
  }
}
 8013280:	3710      	adds	r7, #16
 8013282:	46bd      	mov	sp, r7
 8013284:	bd80      	pop	{r7, pc}
 8013286:	bf00      	nop
 8013288:	08023598 	.word	0x08023598
 801328c:	080236c0 	.word	0x080236c0
 8013290:	080235e8 	.word	0x080235e8
 8013294:	08026ca4 	.word	0x08026ca4

08013298 <netif_do_set_netmask>:

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8013298:	b480      	push	{r7}
 801329a:	b085      	sub	sp, #20
 801329c:	af00      	add	r7, sp, #0
 801329e:	60f8      	str	r0, [r7, #12]
 80132a0:	60b9      	str	r1, [r7, #8]
 80132a2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80132a4:	68bb      	ldr	r3, [r7, #8]
 80132a6:	681a      	ldr	r2, [r3, #0]
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	3308      	adds	r3, #8
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d00a      	beq.n	80132c8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d002      	beq.n	80132be <netif_do_set_netmask+0x26>
 80132b8:	68bb      	ldr	r3, [r7, #8]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	e000      	b.n	80132c0 <netif_do_set_netmask+0x28>
 80132be:	2300      	movs	r3, #0
 80132c0:	68fa      	ldr	r2, [r7, #12]
 80132c2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80132c4:	2301      	movs	r3, #1
 80132c6:	e000      	b.n	80132ca <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80132c8:	2300      	movs	r3, #0
}
 80132ca:	4618      	mov	r0, r3
 80132cc:	3714      	adds	r7, #20
 80132ce:	46bd      	mov	sp, r7
 80132d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d4:	4770      	bx	lr
	...

080132d8 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b084      	sub	sp, #16
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
 80132e0:	6039      	str	r1, [r7, #0]
#if LWIP_NETIF_EXT_STATUS_CALLBACK
  ip_addr_t old_nm_val;
  ip_addr_t *old_nm = &old_nm_val;
#else
  ip_addr_t *old_nm = NULL;
 80132e2:	2300      	movs	r3, #0
 80132e4:	60fb      	str	r3, [r7, #12]
#endif
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_netmask: invalid netif", netif != NULL, return);
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d107      	bne.n	80132fc <netif_set_netmask+0x24>
 80132ec:	4b0a      	ldr	r3, [pc, #40]	; (8013318 <netif_set_netmask+0x40>)
 80132ee:	f240 223a 	movw	r2, #570	; 0x23a
 80132f2:	490a      	ldr	r1, [pc, #40]	; (801331c <netif_set_netmask+0x44>)
 80132f4:	480a      	ldr	r0, [pc, #40]	; (8013320 <netif_set_netmask+0x48>)
 80132f6:	f00b fd33 	bl	801ed60 <iprintf>
 80132fa:	e009      	b.n	8013310 <netif_set_netmask+0x38>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (netmask == NULL) {
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d101      	bne.n	8013306 <netif_set_netmask+0x2e>
    netmask = IP4_ADDR_ANY4;
 8013302:	4b08      	ldr	r3, [pc, #32]	; (8013324 <netif_set_netmask+0x4c>)
 8013304:	603b      	str	r3, [r7, #0]
  }

  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013306:	68fa      	ldr	r2, [r7, #12]
 8013308:	6839      	ldr	r1, [r7, #0]
 801330a:	6878      	ldr	r0, [r7, #4]
 801330c:	f7ff ffc4 	bl	8013298 <netif_do_set_netmask>
    netif_ext_callback_args_t args;
    args.ipv4_changed.old_netmask = old_nm;
    netif_invoke_ext_callback(netif, LWIP_NSC_IPV4_NETMASK_CHANGED, &args);
#endif
  }
}
 8013310:	3710      	adds	r7, #16
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}
 8013316:	bf00      	nop
 8013318:	08023598 	.word	0x08023598
 801331c:	080236e0 	.word	0x080236e0
 8013320:	080235e8 	.word	0x080235e8
 8013324:	08026ca4 	.word	0x08026ca4

08013328 <netif_do_set_gw>:

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8013328:	b480      	push	{r7}
 801332a:	b085      	sub	sp, #20
 801332c:	af00      	add	r7, sp, #0
 801332e:	60f8      	str	r0, [r7, #12]
 8013330:	60b9      	str	r1, [r7, #8]
 8013332:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8013334:	68bb      	ldr	r3, [r7, #8]
 8013336:	681a      	ldr	r2, [r3, #0]
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	330c      	adds	r3, #12
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	429a      	cmp	r2, r3
 8013340:	d00a      	beq.n	8013358 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013342:	68bb      	ldr	r3, [r7, #8]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d002      	beq.n	801334e <netif_do_set_gw+0x26>
 8013348:	68bb      	ldr	r3, [r7, #8]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	e000      	b.n	8013350 <netif_do_set_gw+0x28>
 801334e:	2300      	movs	r3, #0
 8013350:	68fa      	ldr	r2, [r7, #12]
 8013352:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8013354:	2301      	movs	r3, #1
 8013356:	e000      	b.n	801335a <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8013358:	2300      	movs	r3, #0
}
 801335a:	4618      	mov	r0, r3
 801335c:	3714      	adds	r7, #20
 801335e:	46bd      	mov	sp, r7
 8013360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013364:	4770      	bx	lr
	...

08013368 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b088      	sub	sp, #32
 801336c:	af00      	add	r7, sp, #0
 801336e:	60f8      	str	r0, [r7, #12]
 8013370:	60b9      	str	r1, [r7, #8]
 8013372:	607a      	str	r2, [r7, #4]
 8013374:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8013376:	2300      	movs	r3, #0
 8013378:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801337a:	2300      	movs	r3, #0
 801337c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d101      	bne.n	8013388 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013384:	4b1c      	ldr	r3, [pc, #112]	; (80133f8 <netif_set_addr+0x90>)
 8013386:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d101      	bne.n	8013392 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801338e:	4b1a      	ldr	r3, [pc, #104]	; (80133f8 <netif_set_addr+0x90>)
 8013390:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013392:	683b      	ldr	r3, [r7, #0]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d101      	bne.n	801339c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013398:	4b17      	ldr	r3, [pc, #92]	; (80133f8 <netif_set_addr+0x90>)
 801339a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d003      	beq.n	80133aa <netif_set_addr+0x42>
 80133a2:	68bb      	ldr	r3, [r7, #8]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d101      	bne.n	80133ae <netif_set_addr+0x46>
 80133aa:	2301      	movs	r3, #1
 80133ac:	e000      	b.n	80133b0 <netif_set_addr+0x48>
 80133ae:	2300      	movs	r3, #0
 80133b0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80133b2:	697b      	ldr	r3, [r7, #20]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d006      	beq.n	80133c6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80133b8:	f107 0310 	add.w	r3, r7, #16
 80133bc:	461a      	mov	r2, r3
 80133be:	68b9      	ldr	r1, [r7, #8]
 80133c0:	68f8      	ldr	r0, [r7, #12]
 80133c2:	f7ff fef7 	bl	80131b4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80133c6:	69fa      	ldr	r2, [r7, #28]
 80133c8:	6879      	ldr	r1, [r7, #4]
 80133ca:	68f8      	ldr	r0, [r7, #12]
 80133cc:	f7ff ff64 	bl	8013298 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80133d0:	69ba      	ldr	r2, [r7, #24]
 80133d2:	6839      	ldr	r1, [r7, #0]
 80133d4:	68f8      	ldr	r0, [r7, #12]
 80133d6:	f7ff ffa7 	bl	8013328 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80133da:	697b      	ldr	r3, [r7, #20]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d106      	bne.n	80133ee <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80133e0:	f107 0310 	add.w	r3, r7, #16
 80133e4:	461a      	mov	r2, r3
 80133e6:	68b9      	ldr	r1, [r7, #8]
 80133e8:	68f8      	ldr	r0, [r7, #12]
 80133ea:	f7ff fee3 	bl	80131b4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80133ee:	bf00      	nop
 80133f0:	3720      	adds	r7, #32
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd80      	pop	{r7, pc}
 80133f6:	bf00      	nop
 80133f8:	08026ca4 	.word	0x08026ca4

080133fc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80133fc:	b480      	push	{r7}
 80133fe:	b083      	sub	sp, #12
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013404:	4a04      	ldr	r2, [pc, #16]	; (8013418 <netif_set_default+0x1c>)
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801340a:	bf00      	nop
 801340c:	370c      	adds	r7, #12
 801340e:	46bd      	mov	sp, r7
 8013410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013414:	4770      	bx	lr
 8013416:	bf00      	nop
 8013418:	2000b790 	.word	0x2000b790

0801341c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b082      	sub	sp, #8
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d107      	bne.n	801343a <netif_set_up+0x1e>
 801342a:	4b0f      	ldr	r3, [pc, #60]	; (8013468 <netif_set_up+0x4c>)
 801342c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8013430:	490e      	ldr	r1, [pc, #56]	; (801346c <netif_set_up+0x50>)
 8013432:	480f      	ldr	r0, [pc, #60]	; (8013470 <netif_set_up+0x54>)
 8013434:	f00b fc94 	bl	801ed60 <iprintf>
 8013438:	e013      	b.n	8013462 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8013440:	f003 0301 	and.w	r3, r3, #1
 8013444:	2b00      	cmp	r3, #0
 8013446:	d10c      	bne.n	8013462 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801344e:	f043 0301 	orr.w	r3, r3, #1
 8013452:	b2da      	uxtb	r2, r3
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801345a:	2103      	movs	r1, #3
 801345c:	6878      	ldr	r0, [r7, #4]
 801345e:	f000 f809 	bl	8013474 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8013462:	3708      	adds	r7, #8
 8013464:	46bd      	mov	sp, r7
 8013466:	bd80      	pop	{r7, pc}
 8013468:	08023598 	.word	0x08023598
 801346c:	08023720 	.word	0x08023720
 8013470:	080235e8 	.word	0x080235e8

08013474 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b082      	sub	sp, #8
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
 801347c:	460b      	mov	r3, r1
 801347e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d106      	bne.n	8013494 <netif_issue_reports+0x20>
 8013486:	4b18      	ldr	r3, [pc, #96]	; (80134e8 <netif_issue_reports+0x74>)
 8013488:	f240 326d 	movw	r2, #877	; 0x36d
 801348c:	4917      	ldr	r1, [pc, #92]	; (80134ec <netif_issue_reports+0x78>)
 801348e:	4818      	ldr	r0, [pc, #96]	; (80134f0 <netif_issue_reports+0x7c>)
 8013490:	f00b fc66 	bl	801ed60 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801349a:	f003 0304 	and.w	r3, r3, #4
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d01e      	beq.n	80134e0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80134a8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d017      	beq.n	80134e0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80134b0:	78fb      	ldrb	r3, [r7, #3]
 80134b2:	f003 0301 	and.w	r3, r3, #1
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d013      	beq.n	80134e2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	3304      	adds	r3, #4
 80134be:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d00e      	beq.n	80134e2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80134ca:	f003 0308 	and.w	r3, r3, #8
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d007      	beq.n	80134e2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	3304      	adds	r3, #4
 80134d6:	4619      	mov	r1, r3
 80134d8:	6878      	ldr	r0, [r7, #4]
 80134da:	f008 fcd3 	bl	801be84 <etharp_request>
 80134de:	e000      	b.n	80134e2 <netif_issue_reports+0x6e>
    return;
 80134e0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80134e2:	3708      	adds	r7, #8
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}
 80134e8:	08023598 	.word	0x08023598
 80134ec:	0802373c 	.word	0x0802373c
 80134f0:	080235e8 	.word	0x080235e8

080134f4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b082      	sub	sp, #8
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d107      	bne.n	8013512 <netif_set_down+0x1e>
 8013502:	4b12      	ldr	r3, [pc, #72]	; (801354c <netif_set_down+0x58>)
 8013504:	f240 329b 	movw	r2, #923	; 0x39b
 8013508:	4911      	ldr	r1, [pc, #68]	; (8013550 <netif_set_down+0x5c>)
 801350a:	4812      	ldr	r0, [pc, #72]	; (8013554 <netif_set_down+0x60>)
 801350c:	f00b fc28 	bl	801ed60 <iprintf>
 8013510:	e019      	b.n	8013546 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8013518:	f003 0301 	and.w	r3, r3, #1
 801351c:	2b00      	cmp	r3, #0
 801351e:	d012      	beq.n	8013546 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8013526:	f023 0301 	bic.w	r3, r3, #1
 801352a:	b2da      	uxtb	r2, r3
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8013538:	f003 0308 	and.w	r3, r3, #8
 801353c:	2b00      	cmp	r3, #0
 801353e:	d002      	beq.n	8013546 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8013540:	6878      	ldr	r0, [r7, #4]
 8013542:	f008 f85d 	bl	801b600 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8013546:	3708      	adds	r7, #8
 8013548:	46bd      	mov	sp, r7
 801354a:	bd80      	pop	{r7, pc}
 801354c:	08023598 	.word	0x08023598
 8013550:	08023760 	.word	0x08023760
 8013554:	080235e8 	.word	0x080235e8

08013558 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8013558:	b480      	push	{r7}
 801355a:	b085      	sub	sp, #20
 801355c:	af00      	add	r7, sp, #0
 801355e:	60f8      	str	r0, [r7, #12]
 8013560:	60b9      	str	r1, [r7, #8]
 8013562:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8013564:	f06f 030b 	mvn.w	r3, #11
}
 8013568:	4618      	mov	r0, r3
 801356a:	3714      	adds	r7, #20
 801356c:	46bd      	mov	sp, r7
 801356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013572:	4770      	bx	lr

08013574 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8013574:	b480      	push	{r7}
 8013576:	b085      	sub	sp, #20
 8013578:	af00      	add	r7, sp, #0
 801357a:	4603      	mov	r3, r0
 801357c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801357e:	79fb      	ldrb	r3, [r7, #7]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d013      	beq.n	80135ac <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8013584:	4b0d      	ldr	r3, [pc, #52]	; (80135bc <netif_get_by_index+0x48>)
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	60fb      	str	r3, [r7, #12]
 801358a:	e00c      	b.n	80135a6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013592:	3301      	adds	r3, #1
 8013594:	b2db      	uxtb	r3, r3
 8013596:	79fa      	ldrb	r2, [r7, #7]
 8013598:	429a      	cmp	r2, r3
 801359a:	d101      	bne.n	80135a0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	e006      	b.n	80135ae <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	60fb      	str	r3, [r7, #12]
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d1ef      	bne.n	801358c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80135ac:	2300      	movs	r3, #0
}
 80135ae:	4618      	mov	r0, r3
 80135b0:	3714      	adds	r7, #20
 80135b2:	46bd      	mov	sp, r7
 80135b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b8:	4770      	bx	lr
 80135ba:	bf00      	nop
 80135bc:	2000b78c 	.word	0x2000b78c

080135c0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b082      	sub	sp, #8
 80135c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80135c6:	f00a fad1 	bl	801db6c <sys_arch_protect>
 80135ca:	6038      	str	r0, [r7, #0]
 80135cc:	4b0d      	ldr	r3, [pc, #52]	; (8013604 <pbuf_free_ooseq+0x44>)
 80135ce:	2200      	movs	r2, #0
 80135d0:	701a      	strb	r2, [r3, #0]
 80135d2:	6838      	ldr	r0, [r7, #0]
 80135d4:	f00a fad8 	bl	801db88 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80135d8:	4b0b      	ldr	r3, [pc, #44]	; (8013608 <pbuf_free_ooseq+0x48>)
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	607b      	str	r3, [r7, #4]
 80135de:	e00a      	b.n	80135f6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d003      	beq.n	80135f0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80135e8:	6878      	ldr	r0, [r7, #4]
 80135ea:	f002 fc83 	bl	8015ef4 <tcp_free_ooseq>
      return;
 80135ee:	e005      	b.n	80135fc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	68db      	ldr	r3, [r3, #12]
 80135f4:	607b      	str	r3, [r7, #4]
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d1f1      	bne.n	80135e0 <pbuf_free_ooseq+0x20>
    }
  }
}
 80135fc:	3708      	adds	r7, #8
 80135fe:	46bd      	mov	sp, r7
 8013600:	bd80      	pop	{r7, pc}
 8013602:	bf00      	nop
 8013604:	2000b794 	.word	0x2000b794
 8013608:	2000b79c 	.word	0x2000b79c

0801360c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b082      	sub	sp, #8
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013614:	f7ff ffd4 	bl	80135c0 <pbuf_free_ooseq>
}
 8013618:	bf00      	nop
 801361a:	3708      	adds	r7, #8
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}

08013620 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b082      	sub	sp, #8
 8013624:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013626:	f00a faa1 	bl	801db6c <sys_arch_protect>
 801362a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801362c:	4b0f      	ldr	r3, [pc, #60]	; (801366c <pbuf_pool_is_empty+0x4c>)
 801362e:	781b      	ldrb	r3, [r3, #0]
 8013630:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013632:	4b0e      	ldr	r3, [pc, #56]	; (801366c <pbuf_pool_is_empty+0x4c>)
 8013634:	2201      	movs	r2, #1
 8013636:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013638:	6878      	ldr	r0, [r7, #4]
 801363a:	f00a faa5 	bl	801db88 <sys_arch_unprotect>

  if (!queued) {
 801363e:	78fb      	ldrb	r3, [r7, #3]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d10f      	bne.n	8013664 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013644:	2100      	movs	r1, #0
 8013646:	480a      	ldr	r0, [pc, #40]	; (8013670 <pbuf_pool_is_empty+0x50>)
 8013648:	f7fd fee8 	bl	801141c <tcpip_try_callback>
 801364c:	4603      	mov	r3, r0
 801364e:	2b00      	cmp	r3, #0
 8013650:	d008      	beq.n	8013664 <pbuf_pool_is_empty+0x44>
 8013652:	f00a fa8b 	bl	801db6c <sys_arch_protect>
 8013656:	6078      	str	r0, [r7, #4]
 8013658:	4b04      	ldr	r3, [pc, #16]	; (801366c <pbuf_pool_is_empty+0x4c>)
 801365a:	2200      	movs	r2, #0
 801365c:	701a      	strb	r2, [r3, #0]
 801365e:	6878      	ldr	r0, [r7, #4]
 8013660:	f00a fa92 	bl	801db88 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013664:	bf00      	nop
 8013666:	3708      	adds	r7, #8
 8013668:	46bd      	mov	sp, r7
 801366a:	bd80      	pop	{r7, pc}
 801366c:	2000b794 	.word	0x2000b794
 8013670:	0801360d 	.word	0x0801360d

08013674 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8013674:	b480      	push	{r7}
 8013676:	b085      	sub	sp, #20
 8013678:	af00      	add	r7, sp, #0
 801367a:	60f8      	str	r0, [r7, #12]
 801367c:	60b9      	str	r1, [r7, #8]
 801367e:	4611      	mov	r1, r2
 8013680:	461a      	mov	r2, r3
 8013682:	460b      	mov	r3, r1
 8013684:	80fb      	strh	r3, [r7, #6]
 8013686:	4613      	mov	r3, r2
 8013688:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	2200      	movs	r2, #0
 801368e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	68ba      	ldr	r2, [r7, #8]
 8013694:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	88fa      	ldrh	r2, [r7, #6]
 801369a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	88ba      	ldrh	r2, [r7, #4]
 80136a0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80136a2:	8b3b      	ldrh	r3, [r7, #24]
 80136a4:	b2da      	uxtb	r2, r3
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	7f3a      	ldrb	r2, [r7, #28]
 80136ae:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	2201      	movs	r2, #1
 80136b4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	2200      	movs	r2, #0
 80136ba:	73da      	strb	r2, [r3, #15]
}
 80136bc:	bf00      	nop
 80136be:	3714      	adds	r7, #20
 80136c0:	46bd      	mov	sp, r7
 80136c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c6:	4770      	bx	lr

080136c8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b08c      	sub	sp, #48	; 0x30
 80136cc:	af02      	add	r7, sp, #8
 80136ce:	4603      	mov	r3, r0
 80136d0:	71fb      	strb	r3, [r7, #7]
 80136d2:	460b      	mov	r3, r1
 80136d4:	80bb      	strh	r3, [r7, #4]
 80136d6:	4613      	mov	r3, r2
 80136d8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80136da:	79fb      	ldrb	r3, [r7, #7]
 80136dc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80136de:	887b      	ldrh	r3, [r7, #2]
 80136e0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80136e4:	d07f      	beq.n	80137e6 <pbuf_alloc+0x11e>
 80136e6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80136ea:	f300 80c8 	bgt.w	801387e <pbuf_alloc+0x1b6>
 80136ee:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80136f2:	d010      	beq.n	8013716 <pbuf_alloc+0x4e>
 80136f4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80136f8:	f300 80c1 	bgt.w	801387e <pbuf_alloc+0x1b6>
 80136fc:	2b01      	cmp	r3, #1
 80136fe:	d002      	beq.n	8013706 <pbuf_alloc+0x3e>
 8013700:	2b41      	cmp	r3, #65	; 0x41
 8013702:	f040 80bc 	bne.w	801387e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013706:	887a      	ldrh	r2, [r7, #2]
 8013708:	88bb      	ldrh	r3, [r7, #4]
 801370a:	4619      	mov	r1, r3
 801370c:	2000      	movs	r0, #0
 801370e:	f000 f8d1 	bl	80138b4 <pbuf_alloc_reference>
 8013712:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8013714:	e0bd      	b.n	8013892 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013716:	2300      	movs	r3, #0
 8013718:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801371a:	2300      	movs	r3, #0
 801371c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801371e:	88bb      	ldrh	r3, [r7, #4]
 8013720:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013722:	200c      	movs	r0, #12
 8013724:	f7ff fbe4 	bl	8012ef0 <memp_malloc>
 8013728:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801372a:	693b      	ldr	r3, [r7, #16]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d109      	bne.n	8013744 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8013730:	f7ff ff76 	bl	8013620 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013736:	2b00      	cmp	r3, #0
 8013738:	d002      	beq.n	8013740 <pbuf_alloc+0x78>
            pbuf_free(p);
 801373a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801373c:	f000 faa8 	bl	8013c90 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8013740:	2300      	movs	r3, #0
 8013742:	e0a7      	b.n	8013894 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013744:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013746:	3303      	adds	r3, #3
 8013748:	b29b      	uxth	r3, r3
 801374a:	f023 0303 	bic.w	r3, r3, #3
 801374e:	b29b      	uxth	r3, r3
 8013750:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8013754:	b29b      	uxth	r3, r3
 8013756:	8b7a      	ldrh	r2, [r7, #26]
 8013758:	4293      	cmp	r3, r2
 801375a:	bf28      	it	cs
 801375c:	4613      	movcs	r3, r2
 801375e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8013760:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013762:	3310      	adds	r3, #16
 8013764:	693a      	ldr	r2, [r7, #16]
 8013766:	4413      	add	r3, r2
 8013768:	3303      	adds	r3, #3
 801376a:	f023 0303 	bic.w	r3, r3, #3
 801376e:	4618      	mov	r0, r3
 8013770:	89f9      	ldrh	r1, [r7, #14]
 8013772:	8b7a      	ldrh	r2, [r7, #26]
 8013774:	2300      	movs	r3, #0
 8013776:	9301      	str	r3, [sp, #4]
 8013778:	887b      	ldrh	r3, [r7, #2]
 801377a:	9300      	str	r3, [sp, #0]
 801377c:	460b      	mov	r3, r1
 801377e:	4601      	mov	r1, r0
 8013780:	6938      	ldr	r0, [r7, #16]
 8013782:	f7ff ff77 	bl	8013674 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8013786:	693b      	ldr	r3, [r7, #16]
 8013788:	685b      	ldr	r3, [r3, #4]
 801378a:	f003 0303 	and.w	r3, r3, #3
 801378e:	2b00      	cmp	r3, #0
 8013790:	d006      	beq.n	80137a0 <pbuf_alloc+0xd8>
 8013792:	4b42      	ldr	r3, [pc, #264]	; (801389c <pbuf_alloc+0x1d4>)
 8013794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013798:	4941      	ldr	r1, [pc, #260]	; (80138a0 <pbuf_alloc+0x1d8>)
 801379a:	4842      	ldr	r0, [pc, #264]	; (80138a4 <pbuf_alloc+0x1dc>)
 801379c:	f00b fae0 	bl	801ed60 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80137a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80137a2:	3303      	adds	r3, #3
 80137a4:	f023 0303 	bic.w	r3, r3, #3
 80137a8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80137ac:	d106      	bne.n	80137bc <pbuf_alloc+0xf4>
 80137ae:	4b3b      	ldr	r3, [pc, #236]	; (801389c <pbuf_alloc+0x1d4>)
 80137b0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80137b4:	493c      	ldr	r1, [pc, #240]	; (80138a8 <pbuf_alloc+0x1e0>)
 80137b6:	483b      	ldr	r0, [pc, #236]	; (80138a4 <pbuf_alloc+0x1dc>)
 80137b8:	f00b fad2 	bl	801ed60 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80137bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d102      	bne.n	80137c8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80137c2:	693b      	ldr	r3, [r7, #16]
 80137c4:	627b      	str	r3, [r7, #36]	; 0x24
 80137c6:	e002      	b.n	80137ce <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80137c8:	69fb      	ldr	r3, [r7, #28]
 80137ca:	693a      	ldr	r2, [r7, #16]
 80137cc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80137ce:	693b      	ldr	r3, [r7, #16]
 80137d0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80137d2:	8b7a      	ldrh	r2, [r7, #26]
 80137d4:	89fb      	ldrh	r3, [r7, #14]
 80137d6:	1ad3      	subs	r3, r2, r3
 80137d8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80137da:	2300      	movs	r3, #0
 80137dc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80137de:	8b7b      	ldrh	r3, [r7, #26]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d19e      	bne.n	8013722 <pbuf_alloc+0x5a>
      break;
 80137e4:	e055      	b.n	8013892 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80137e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80137e8:	3303      	adds	r3, #3
 80137ea:	b29b      	uxth	r3, r3
 80137ec:	f023 0303 	bic.w	r3, r3, #3
 80137f0:	b29a      	uxth	r2, r3
 80137f2:	88bb      	ldrh	r3, [r7, #4]
 80137f4:	3303      	adds	r3, #3
 80137f6:	b29b      	uxth	r3, r3
 80137f8:	f023 0303 	bic.w	r3, r3, #3
 80137fc:	b29b      	uxth	r3, r3
 80137fe:	4413      	add	r3, r2
 8013800:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8013802:	8b3b      	ldrh	r3, [r7, #24]
 8013804:	3310      	adds	r3, #16
 8013806:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013808:	8b3a      	ldrh	r2, [r7, #24]
 801380a:	88bb      	ldrh	r3, [r7, #4]
 801380c:	3303      	adds	r3, #3
 801380e:	f023 0303 	bic.w	r3, r3, #3
 8013812:	429a      	cmp	r2, r3
 8013814:	d306      	bcc.n	8013824 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8013816:	8afa      	ldrh	r2, [r7, #22]
 8013818:	88bb      	ldrh	r3, [r7, #4]
 801381a:	3303      	adds	r3, #3
 801381c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013820:	429a      	cmp	r2, r3
 8013822:	d201      	bcs.n	8013828 <pbuf_alloc+0x160>
        return NULL;
 8013824:	2300      	movs	r3, #0
 8013826:	e035      	b.n	8013894 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013828:	8afb      	ldrh	r3, [r7, #22]
 801382a:	4618      	mov	r0, r3
 801382c:	f7ff f9de 	bl	8012bec <mem_malloc>
 8013830:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8013832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013834:	2b00      	cmp	r3, #0
 8013836:	d101      	bne.n	801383c <pbuf_alloc+0x174>
        return NULL;
 8013838:	2300      	movs	r3, #0
 801383a:	e02b      	b.n	8013894 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801383c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801383e:	3310      	adds	r3, #16
 8013840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013842:	4413      	add	r3, r2
 8013844:	3303      	adds	r3, #3
 8013846:	f023 0303 	bic.w	r3, r3, #3
 801384a:	4618      	mov	r0, r3
 801384c:	88b9      	ldrh	r1, [r7, #4]
 801384e:	88ba      	ldrh	r2, [r7, #4]
 8013850:	2300      	movs	r3, #0
 8013852:	9301      	str	r3, [sp, #4]
 8013854:	887b      	ldrh	r3, [r7, #2]
 8013856:	9300      	str	r3, [sp, #0]
 8013858:	460b      	mov	r3, r1
 801385a:	4601      	mov	r1, r0
 801385c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801385e:	f7ff ff09 	bl	8013674 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8013862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013864:	685b      	ldr	r3, [r3, #4]
 8013866:	f003 0303 	and.w	r3, r3, #3
 801386a:	2b00      	cmp	r3, #0
 801386c:	d010      	beq.n	8013890 <pbuf_alloc+0x1c8>
 801386e:	4b0b      	ldr	r3, [pc, #44]	; (801389c <pbuf_alloc+0x1d4>)
 8013870:	f44f 7291 	mov.w	r2, #290	; 0x122
 8013874:	490d      	ldr	r1, [pc, #52]	; (80138ac <pbuf_alloc+0x1e4>)
 8013876:	480b      	ldr	r0, [pc, #44]	; (80138a4 <pbuf_alloc+0x1dc>)
 8013878:	f00b fa72 	bl	801ed60 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801387c:	e008      	b.n	8013890 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801387e:	4b07      	ldr	r3, [pc, #28]	; (801389c <pbuf_alloc+0x1d4>)
 8013880:	f240 1227 	movw	r2, #295	; 0x127
 8013884:	490a      	ldr	r1, [pc, #40]	; (80138b0 <pbuf_alloc+0x1e8>)
 8013886:	4807      	ldr	r0, [pc, #28]	; (80138a4 <pbuf_alloc+0x1dc>)
 8013888:	f00b fa6a 	bl	801ed60 <iprintf>
      return NULL;
 801388c:	2300      	movs	r3, #0
 801388e:	e001      	b.n	8013894 <pbuf_alloc+0x1cc>
      break;
 8013890:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8013892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013894:	4618      	mov	r0, r3
 8013896:	3728      	adds	r7, #40	; 0x28
 8013898:	46bd      	mov	sp, r7
 801389a:	bd80      	pop	{r7, pc}
 801389c:	080237c8 	.word	0x080237c8
 80138a0:	080237f8 	.word	0x080237f8
 80138a4:	08023828 	.word	0x08023828
 80138a8:	08023850 	.word	0x08023850
 80138ac:	08023884 	.word	0x08023884
 80138b0:	080238b0 	.word	0x080238b0

080138b4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b086      	sub	sp, #24
 80138b8:	af02      	add	r7, sp, #8
 80138ba:	6078      	str	r0, [r7, #4]
 80138bc:	460b      	mov	r3, r1
 80138be:	807b      	strh	r3, [r7, #2]
 80138c0:	4613      	mov	r3, r2
 80138c2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80138c4:	883b      	ldrh	r3, [r7, #0]
 80138c6:	2b41      	cmp	r3, #65	; 0x41
 80138c8:	d009      	beq.n	80138de <pbuf_alloc_reference+0x2a>
 80138ca:	883b      	ldrh	r3, [r7, #0]
 80138cc:	2b01      	cmp	r3, #1
 80138ce:	d006      	beq.n	80138de <pbuf_alloc_reference+0x2a>
 80138d0:	4b0f      	ldr	r3, [pc, #60]	; (8013910 <pbuf_alloc_reference+0x5c>)
 80138d2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80138d6:	490f      	ldr	r1, [pc, #60]	; (8013914 <pbuf_alloc_reference+0x60>)
 80138d8:	480f      	ldr	r0, [pc, #60]	; (8013918 <pbuf_alloc_reference+0x64>)
 80138da:	f00b fa41 	bl	801ed60 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80138de:	200b      	movs	r0, #11
 80138e0:	f7ff fb06 	bl	8012ef0 <memp_malloc>
 80138e4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d101      	bne.n	80138f0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80138ec:	2300      	movs	r3, #0
 80138ee:	e00b      	b.n	8013908 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80138f0:	8879      	ldrh	r1, [r7, #2]
 80138f2:	887a      	ldrh	r2, [r7, #2]
 80138f4:	2300      	movs	r3, #0
 80138f6:	9301      	str	r3, [sp, #4]
 80138f8:	883b      	ldrh	r3, [r7, #0]
 80138fa:	9300      	str	r3, [sp, #0]
 80138fc:	460b      	mov	r3, r1
 80138fe:	6879      	ldr	r1, [r7, #4]
 8013900:	68f8      	ldr	r0, [r7, #12]
 8013902:	f7ff feb7 	bl	8013674 <pbuf_init_alloced_pbuf>
  return p;
 8013906:	68fb      	ldr	r3, [r7, #12]
}
 8013908:	4618      	mov	r0, r3
 801390a:	3710      	adds	r7, #16
 801390c:	46bd      	mov	sp, r7
 801390e:	bd80      	pop	{r7, pc}
 8013910:	080237c8 	.word	0x080237c8
 8013914:	080238cc 	.word	0x080238cc
 8013918:	08023828 	.word	0x08023828

0801391c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b088      	sub	sp, #32
 8013920:	af02      	add	r7, sp, #8
 8013922:	607b      	str	r3, [r7, #4]
 8013924:	4603      	mov	r3, r0
 8013926:	73fb      	strb	r3, [r7, #15]
 8013928:	460b      	mov	r3, r1
 801392a:	81bb      	strh	r3, [r7, #12]
 801392c:	4613      	mov	r3, r2
 801392e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8013930:	7bfb      	ldrb	r3, [r7, #15]
 8013932:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8013934:	8a7b      	ldrh	r3, [r7, #18]
 8013936:	3303      	adds	r3, #3
 8013938:	f023 0203 	bic.w	r2, r3, #3
 801393c:	89bb      	ldrh	r3, [r7, #12]
 801393e:	441a      	add	r2, r3
 8013940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013942:	429a      	cmp	r2, r3
 8013944:	d901      	bls.n	801394a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8013946:	2300      	movs	r3, #0
 8013948:	e018      	b.n	801397c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801394a:	6a3b      	ldr	r3, [r7, #32]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d007      	beq.n	8013960 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8013950:	8a7b      	ldrh	r3, [r7, #18]
 8013952:	3303      	adds	r3, #3
 8013954:	f023 0303 	bic.w	r3, r3, #3
 8013958:	6a3a      	ldr	r2, [r7, #32]
 801395a:	4413      	add	r3, r2
 801395c:	617b      	str	r3, [r7, #20]
 801395e:	e001      	b.n	8013964 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8013960:	2300      	movs	r3, #0
 8013962:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8013964:	6878      	ldr	r0, [r7, #4]
 8013966:	89b9      	ldrh	r1, [r7, #12]
 8013968:	89ba      	ldrh	r2, [r7, #12]
 801396a:	2302      	movs	r3, #2
 801396c:	9301      	str	r3, [sp, #4]
 801396e:	897b      	ldrh	r3, [r7, #10]
 8013970:	9300      	str	r3, [sp, #0]
 8013972:	460b      	mov	r3, r1
 8013974:	6979      	ldr	r1, [r7, #20]
 8013976:	f7ff fe7d 	bl	8013674 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801397a:	687b      	ldr	r3, [r7, #4]
}
 801397c:	4618      	mov	r0, r3
 801397e:	3718      	adds	r7, #24
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}

08013984 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b084      	sub	sp, #16
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
 801398c:	460b      	mov	r3, r1
 801398e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d106      	bne.n	80139a4 <pbuf_realloc+0x20>
 8013996:	4b3a      	ldr	r3, [pc, #232]	; (8013a80 <pbuf_realloc+0xfc>)
 8013998:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801399c:	4939      	ldr	r1, [pc, #228]	; (8013a84 <pbuf_realloc+0x100>)
 801399e:	483a      	ldr	r0, [pc, #232]	; (8013a88 <pbuf_realloc+0x104>)
 80139a0:	f00b f9de 	bl	801ed60 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	891b      	ldrh	r3, [r3, #8]
 80139a8:	887a      	ldrh	r2, [r7, #2]
 80139aa:	429a      	cmp	r2, r3
 80139ac:	d263      	bcs.n	8013a76 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	891a      	ldrh	r2, [r3, #8]
 80139b2:	887b      	ldrh	r3, [r7, #2]
 80139b4:	1ad3      	subs	r3, r2, r3
 80139b6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80139b8:	887b      	ldrh	r3, [r7, #2]
 80139ba:	817b      	strh	r3, [r7, #10]
  q = p;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80139c0:	e018      	b.n	80139f4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	895b      	ldrh	r3, [r3, #10]
 80139c6:	897a      	ldrh	r2, [r7, #10]
 80139c8:	1ad3      	subs	r3, r2, r3
 80139ca:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	891a      	ldrh	r2, [r3, #8]
 80139d0:	893b      	ldrh	r3, [r7, #8]
 80139d2:	1ad3      	subs	r3, r2, r3
 80139d4:	b29a      	uxth	r2, r3
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d106      	bne.n	80139f4 <pbuf_realloc+0x70>
 80139e6:	4b26      	ldr	r3, [pc, #152]	; (8013a80 <pbuf_realloc+0xfc>)
 80139e8:	f240 12af 	movw	r2, #431	; 0x1af
 80139ec:	4927      	ldr	r1, [pc, #156]	; (8013a8c <pbuf_realloc+0x108>)
 80139ee:	4826      	ldr	r0, [pc, #152]	; (8013a88 <pbuf_realloc+0x104>)
 80139f0:	f00b f9b6 	bl	801ed60 <iprintf>
  while (rem_len > q->len) {
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	895b      	ldrh	r3, [r3, #10]
 80139f8:	897a      	ldrh	r2, [r7, #10]
 80139fa:	429a      	cmp	r2, r3
 80139fc:	d8e1      	bhi.n	80139c2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	7b1b      	ldrb	r3, [r3, #12]
 8013a02:	f003 030f 	and.w	r3, r3, #15
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d121      	bne.n	8013a4e <pbuf_realloc+0xca>
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	895b      	ldrh	r3, [r3, #10]
 8013a0e:	897a      	ldrh	r2, [r7, #10]
 8013a10:	429a      	cmp	r2, r3
 8013a12:	d01c      	beq.n	8013a4e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	7b5b      	ldrb	r3, [r3, #13]
 8013a18:	f003 0302 	and.w	r3, r3, #2
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d116      	bne.n	8013a4e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	685a      	ldr	r2, [r3, #4]
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	1ad3      	subs	r3, r2, r3
 8013a28:	b29a      	uxth	r2, r3
 8013a2a:	897b      	ldrh	r3, [r7, #10]
 8013a2c:	4413      	add	r3, r2
 8013a2e:	b29b      	uxth	r3, r3
 8013a30:	4619      	mov	r1, r3
 8013a32:	68f8      	ldr	r0, [r7, #12]
 8013a34:	f7fe ffd0 	bl	80129d8 <mem_trim>
 8013a38:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d106      	bne.n	8013a4e <pbuf_realloc+0xca>
 8013a40:	4b0f      	ldr	r3, [pc, #60]	; (8013a80 <pbuf_realloc+0xfc>)
 8013a42:	f240 12bd 	movw	r2, #445	; 0x1bd
 8013a46:	4912      	ldr	r1, [pc, #72]	; (8013a90 <pbuf_realloc+0x10c>)
 8013a48:	480f      	ldr	r0, [pc, #60]	; (8013a88 <pbuf_realloc+0x104>)
 8013a4a:	f00b f989 	bl	801ed60 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	897a      	ldrh	r2, [r7, #10]
 8013a52:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	895a      	ldrh	r2, [r3, #10]
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d004      	beq.n	8013a6e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f000 f911 	bl	8013c90 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	2200      	movs	r2, #0
 8013a72:	601a      	str	r2, [r3, #0]
 8013a74:	e000      	b.n	8013a78 <pbuf_realloc+0xf4>
    return;
 8013a76:	bf00      	nop

}
 8013a78:	3710      	adds	r7, #16
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	bd80      	pop	{r7, pc}
 8013a7e:	bf00      	nop
 8013a80:	080237c8 	.word	0x080237c8
 8013a84:	080238e0 	.word	0x080238e0
 8013a88:	08023828 	.word	0x08023828
 8013a8c:	080238f8 	.word	0x080238f8
 8013a90:	08023910 	.word	0x08023910

08013a94 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b086      	sub	sp, #24
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	60f8      	str	r0, [r7, #12]
 8013a9c:	60b9      	str	r1, [r7, #8]
 8013a9e:	4613      	mov	r3, r2
 8013aa0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d106      	bne.n	8013ab6 <pbuf_add_header_impl+0x22>
 8013aa8:	4b2b      	ldr	r3, [pc, #172]	; (8013b58 <pbuf_add_header_impl+0xc4>)
 8013aaa:	f240 12df 	movw	r2, #479	; 0x1df
 8013aae:	492b      	ldr	r1, [pc, #172]	; (8013b5c <pbuf_add_header_impl+0xc8>)
 8013ab0:	482b      	ldr	r0, [pc, #172]	; (8013b60 <pbuf_add_header_impl+0xcc>)
 8013ab2:	f00b f955 	bl	801ed60 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d003      	beq.n	8013ac4 <pbuf_add_header_impl+0x30>
 8013abc:	68bb      	ldr	r3, [r7, #8]
 8013abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013ac2:	d301      	bcc.n	8013ac8 <pbuf_add_header_impl+0x34>
    return 1;
 8013ac4:	2301      	movs	r3, #1
 8013ac6:	e043      	b.n	8013b50 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8013ac8:	68bb      	ldr	r3, [r7, #8]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d101      	bne.n	8013ad2 <pbuf_add_header_impl+0x3e>
    return 0;
 8013ace:	2300      	movs	r3, #0
 8013ad0:	e03e      	b.n	8013b50 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8013ad2:	68bb      	ldr	r3, [r7, #8]
 8013ad4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	891a      	ldrh	r2, [r3, #8]
 8013ada:	8a7b      	ldrh	r3, [r7, #18]
 8013adc:	4413      	add	r3, r2
 8013ade:	b29b      	uxth	r3, r3
 8013ae0:	8a7a      	ldrh	r2, [r7, #18]
 8013ae2:	429a      	cmp	r2, r3
 8013ae4:	d901      	bls.n	8013aea <pbuf_add_header_impl+0x56>
    return 1;
 8013ae6:	2301      	movs	r3, #1
 8013ae8:	e032      	b.n	8013b50 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	7b1b      	ldrb	r3, [r3, #12]
 8013aee:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8013af0:	8a3b      	ldrh	r3, [r7, #16]
 8013af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d00c      	beq.n	8013b14 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	685a      	ldr	r2, [r3, #4]
 8013afe:	68bb      	ldr	r3, [r7, #8]
 8013b00:	425b      	negs	r3, r3
 8013b02:	4413      	add	r3, r2
 8013b04:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	3310      	adds	r3, #16
 8013b0a:	697a      	ldr	r2, [r7, #20]
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d20d      	bcs.n	8013b2c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8013b10:	2301      	movs	r3, #1
 8013b12:	e01d      	b.n	8013b50 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8013b14:	79fb      	ldrb	r3, [r7, #7]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d006      	beq.n	8013b28 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	685a      	ldr	r2, [r3, #4]
 8013b1e:	68bb      	ldr	r3, [r7, #8]
 8013b20:	425b      	negs	r3, r3
 8013b22:	4413      	add	r3, r2
 8013b24:	617b      	str	r3, [r7, #20]
 8013b26:	e001      	b.n	8013b2c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8013b28:	2301      	movs	r3, #1
 8013b2a:	e011      	b.n	8013b50 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	697a      	ldr	r2, [r7, #20]
 8013b30:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	895a      	ldrh	r2, [r3, #10]
 8013b36:	8a7b      	ldrh	r3, [r7, #18]
 8013b38:	4413      	add	r3, r2
 8013b3a:	b29a      	uxth	r2, r3
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	891a      	ldrh	r2, [r3, #8]
 8013b44:	8a7b      	ldrh	r3, [r7, #18]
 8013b46:	4413      	add	r3, r2
 8013b48:	b29a      	uxth	r2, r3
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	811a      	strh	r2, [r3, #8]


  return 0;
 8013b4e:	2300      	movs	r3, #0
}
 8013b50:	4618      	mov	r0, r3
 8013b52:	3718      	adds	r7, #24
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}
 8013b58:	080237c8 	.word	0x080237c8
 8013b5c:	0802392c 	.word	0x0802392c
 8013b60:	08023828 	.word	0x08023828

08013b64 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b082      	sub	sp, #8
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
 8013b6c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8013b6e:	2200      	movs	r2, #0
 8013b70:	6839      	ldr	r1, [r7, #0]
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	f7ff ff8e 	bl	8013a94 <pbuf_add_header_impl>
 8013b78:	4603      	mov	r3, r0
}
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	3708      	adds	r7, #8
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bd80      	pop	{r7, pc}
	...

08013b84 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b084      	sub	sp, #16
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
 8013b8c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d106      	bne.n	8013ba2 <pbuf_remove_header+0x1e>
 8013b94:	4b20      	ldr	r3, [pc, #128]	; (8013c18 <pbuf_remove_header+0x94>)
 8013b96:	f240 224b 	movw	r2, #587	; 0x24b
 8013b9a:	4920      	ldr	r1, [pc, #128]	; (8013c1c <pbuf_remove_header+0x98>)
 8013b9c:	4820      	ldr	r0, [pc, #128]	; (8013c20 <pbuf_remove_header+0x9c>)
 8013b9e:	f00b f8df 	bl	801ed60 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d003      	beq.n	8013bb0 <pbuf_remove_header+0x2c>
 8013ba8:	683b      	ldr	r3, [r7, #0]
 8013baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013bae:	d301      	bcc.n	8013bb4 <pbuf_remove_header+0x30>
    return 1;
 8013bb0:	2301      	movs	r3, #1
 8013bb2:	e02c      	b.n	8013c0e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d101      	bne.n	8013bbe <pbuf_remove_header+0x3a>
    return 0;
 8013bba:	2300      	movs	r3, #0
 8013bbc:	e027      	b.n	8013c0e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8013bbe:	683b      	ldr	r3, [r7, #0]
 8013bc0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	895b      	ldrh	r3, [r3, #10]
 8013bc6:	89fa      	ldrh	r2, [r7, #14]
 8013bc8:	429a      	cmp	r2, r3
 8013bca:	d908      	bls.n	8013bde <pbuf_remove_header+0x5a>
 8013bcc:	4b12      	ldr	r3, [pc, #72]	; (8013c18 <pbuf_remove_header+0x94>)
 8013bce:	f240 2255 	movw	r2, #597	; 0x255
 8013bd2:	4914      	ldr	r1, [pc, #80]	; (8013c24 <pbuf_remove_header+0xa0>)
 8013bd4:	4812      	ldr	r0, [pc, #72]	; (8013c20 <pbuf_remove_header+0x9c>)
 8013bd6:	f00b f8c3 	bl	801ed60 <iprintf>
 8013bda:	2301      	movs	r3, #1
 8013bdc:	e017      	b.n	8013c0e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	685b      	ldr	r3, [r3, #4]
 8013be2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	685a      	ldr	r2, [r3, #4]
 8013be8:	683b      	ldr	r3, [r7, #0]
 8013bea:	441a      	add	r2, r3
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	895a      	ldrh	r2, [r3, #10]
 8013bf4:	89fb      	ldrh	r3, [r7, #14]
 8013bf6:	1ad3      	subs	r3, r2, r3
 8013bf8:	b29a      	uxth	r2, r3
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	891a      	ldrh	r2, [r3, #8]
 8013c02:	89fb      	ldrh	r3, [r7, #14]
 8013c04:	1ad3      	subs	r3, r2, r3
 8013c06:	b29a      	uxth	r2, r3
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8013c0c:	2300      	movs	r3, #0
}
 8013c0e:	4618      	mov	r0, r3
 8013c10:	3710      	adds	r7, #16
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}
 8013c16:	bf00      	nop
 8013c18:	080237c8 	.word	0x080237c8
 8013c1c:	0802392c 	.word	0x0802392c
 8013c20:	08023828 	.word	0x08023828
 8013c24:	08023938 	.word	0x08023938

08013c28 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b082      	sub	sp, #8
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
 8013c30:	460b      	mov	r3, r1
 8013c32:	807b      	strh	r3, [r7, #2]
 8013c34:	4613      	mov	r3, r2
 8013c36:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8013c38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	da08      	bge.n	8013c52 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8013c40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013c44:	425b      	negs	r3, r3
 8013c46:	4619      	mov	r1, r3
 8013c48:	6878      	ldr	r0, [r7, #4]
 8013c4a:	f7ff ff9b 	bl	8013b84 <pbuf_remove_header>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	e007      	b.n	8013c62 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8013c52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013c56:	787a      	ldrb	r2, [r7, #1]
 8013c58:	4619      	mov	r1, r3
 8013c5a:	6878      	ldr	r0, [r7, #4]
 8013c5c:	f7ff ff1a 	bl	8013a94 <pbuf_add_header_impl>
 8013c60:	4603      	mov	r3, r0
  }
}
 8013c62:	4618      	mov	r0, r3
 8013c64:	3708      	adds	r7, #8
 8013c66:	46bd      	mov	sp, r7
 8013c68:	bd80      	pop	{r7, pc}

08013c6a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8013c6a:	b580      	push	{r7, lr}
 8013c6c:	b082      	sub	sp, #8
 8013c6e:	af00      	add	r7, sp, #0
 8013c70:	6078      	str	r0, [r7, #4]
 8013c72:	460b      	mov	r3, r1
 8013c74:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8013c76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013c7a:	2201      	movs	r2, #1
 8013c7c:	4619      	mov	r1, r3
 8013c7e:	6878      	ldr	r0, [r7, #4]
 8013c80:	f7ff ffd2 	bl	8013c28 <pbuf_header_impl>
 8013c84:	4603      	mov	r3, r0
}
 8013c86:	4618      	mov	r0, r3
 8013c88:	3708      	adds	r7, #8
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bd80      	pop	{r7, pc}
	...

08013c90 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b088      	sub	sp, #32
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d10b      	bne.n	8013cb6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d106      	bne.n	8013cb2 <pbuf_free+0x22>
 8013ca4:	4b3b      	ldr	r3, [pc, #236]	; (8013d94 <pbuf_free+0x104>)
 8013ca6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8013caa:	493b      	ldr	r1, [pc, #236]	; (8013d98 <pbuf_free+0x108>)
 8013cac:	483b      	ldr	r0, [pc, #236]	; (8013d9c <pbuf_free+0x10c>)
 8013cae:	f00b f857 	bl	801ed60 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	e069      	b.n	8013d8a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8013cba:	e062      	b.n	8013d82 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8013cbc:	f009 ff56 	bl	801db6c <sys_arch_protect>
 8013cc0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	7b9b      	ldrb	r3, [r3, #14]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d106      	bne.n	8013cd8 <pbuf_free+0x48>
 8013cca:	4b32      	ldr	r3, [pc, #200]	; (8013d94 <pbuf_free+0x104>)
 8013ccc:	f240 22f1 	movw	r2, #753	; 0x2f1
 8013cd0:	4933      	ldr	r1, [pc, #204]	; (8013da0 <pbuf_free+0x110>)
 8013cd2:	4832      	ldr	r0, [pc, #200]	; (8013d9c <pbuf_free+0x10c>)
 8013cd4:	f00b f844 	bl	801ed60 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	7b9b      	ldrb	r3, [r3, #14]
 8013cdc:	3b01      	subs	r3, #1
 8013cde:	b2da      	uxtb	r2, r3
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	739a      	strb	r2, [r3, #14]
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	7b9b      	ldrb	r3, [r3, #14]
 8013ce8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8013cea:	69b8      	ldr	r0, [r7, #24]
 8013cec:	f009 ff4c 	bl	801db88 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8013cf0:	7dfb      	ldrb	r3, [r7, #23]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d143      	bne.n	8013d7e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	7b1b      	ldrb	r3, [r3, #12]
 8013d00:	f003 030f 	and.w	r3, r3, #15
 8013d04:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	7b5b      	ldrb	r3, [r3, #13]
 8013d0a:	f003 0302 	and.w	r3, r3, #2
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d011      	beq.n	8013d36 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8013d16:	68bb      	ldr	r3, [r7, #8]
 8013d18:	691b      	ldr	r3, [r3, #16]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d106      	bne.n	8013d2c <pbuf_free+0x9c>
 8013d1e:	4b1d      	ldr	r3, [pc, #116]	; (8013d94 <pbuf_free+0x104>)
 8013d20:	f240 22ff 	movw	r2, #767	; 0x2ff
 8013d24:	491f      	ldr	r1, [pc, #124]	; (8013da4 <pbuf_free+0x114>)
 8013d26:	481d      	ldr	r0, [pc, #116]	; (8013d9c <pbuf_free+0x10c>)
 8013d28:	f00b f81a 	bl	801ed60 <iprintf>
        pc->custom_free_function(p);
 8013d2c:	68bb      	ldr	r3, [r7, #8]
 8013d2e:	691b      	ldr	r3, [r3, #16]
 8013d30:	6878      	ldr	r0, [r7, #4]
 8013d32:	4798      	blx	r3
 8013d34:	e01d      	b.n	8013d72 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8013d36:	7bfb      	ldrb	r3, [r7, #15]
 8013d38:	2b02      	cmp	r3, #2
 8013d3a:	d104      	bne.n	8013d46 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8013d3c:	6879      	ldr	r1, [r7, #4]
 8013d3e:	200c      	movs	r0, #12
 8013d40:	f7ff f928 	bl	8012f94 <memp_free>
 8013d44:	e015      	b.n	8013d72 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8013d46:	7bfb      	ldrb	r3, [r7, #15]
 8013d48:	2b01      	cmp	r3, #1
 8013d4a:	d104      	bne.n	8013d56 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8013d4c:	6879      	ldr	r1, [r7, #4]
 8013d4e:	200b      	movs	r0, #11
 8013d50:	f7ff f920 	bl	8012f94 <memp_free>
 8013d54:	e00d      	b.n	8013d72 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8013d56:	7bfb      	ldrb	r3, [r7, #15]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d103      	bne.n	8013d64 <pbuf_free+0xd4>
          mem_free(p);
 8013d5c:	6878      	ldr	r0, [r7, #4]
 8013d5e:	f7fe fdab 	bl	80128b8 <mem_free>
 8013d62:	e006      	b.n	8013d72 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8013d64:	4b0b      	ldr	r3, [pc, #44]	; (8013d94 <pbuf_free+0x104>)
 8013d66:	f240 320f 	movw	r2, #783	; 0x30f
 8013d6a:	490f      	ldr	r1, [pc, #60]	; (8013da8 <pbuf_free+0x118>)
 8013d6c:	480b      	ldr	r0, [pc, #44]	; (8013d9c <pbuf_free+0x10c>)
 8013d6e:	f00a fff7 	bl	801ed60 <iprintf>
        }
      }
      count++;
 8013d72:	7ffb      	ldrb	r3, [r7, #31]
 8013d74:	3301      	adds	r3, #1
 8013d76:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8013d78:	693b      	ldr	r3, [r7, #16]
 8013d7a:	607b      	str	r3, [r7, #4]
 8013d7c:	e001      	b.n	8013d82 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8013d7e:	2300      	movs	r3, #0
 8013d80:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d199      	bne.n	8013cbc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8013d88:	7ffb      	ldrb	r3, [r7, #31]
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	3720      	adds	r7, #32
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bd80      	pop	{r7, pc}
 8013d92:	bf00      	nop
 8013d94:	080237c8 	.word	0x080237c8
 8013d98:	0802392c 	.word	0x0802392c
 8013d9c:	08023828 	.word	0x08023828
 8013da0:	08023958 	.word	0x08023958
 8013da4:	08023970 	.word	0x08023970
 8013da8:	08023994 	.word	0x08023994

08013dac <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8013dac:	b480      	push	{r7}
 8013dae:	b085      	sub	sp, #20
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8013db4:	2300      	movs	r3, #0
 8013db6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8013db8:	e005      	b.n	8013dc6 <pbuf_clen+0x1a>
    ++len;
 8013dba:	89fb      	ldrh	r3, [r7, #14]
 8013dbc:	3301      	adds	r3, #1
 8013dbe:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d1f6      	bne.n	8013dba <pbuf_clen+0xe>
  }
  return len;
 8013dcc:	89fb      	ldrh	r3, [r7, #14]
}
 8013dce:	4618      	mov	r0, r3
 8013dd0:	3714      	adds	r7, #20
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd8:	4770      	bx	lr
	...

08013ddc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b084      	sub	sp, #16
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d016      	beq.n	8013e18 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8013dea:	f009 febf 	bl	801db6c <sys_arch_protect>
 8013dee:	60f8      	str	r0, [r7, #12]
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	7b9b      	ldrb	r3, [r3, #14]
 8013df4:	3301      	adds	r3, #1
 8013df6:	b2da      	uxtb	r2, r3
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	739a      	strb	r2, [r3, #14]
 8013dfc:	68f8      	ldr	r0, [r7, #12]
 8013dfe:	f009 fec3 	bl	801db88 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	7b9b      	ldrb	r3, [r3, #14]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d106      	bne.n	8013e18 <pbuf_ref+0x3c>
 8013e0a:	4b05      	ldr	r3, [pc, #20]	; (8013e20 <pbuf_ref+0x44>)
 8013e0c:	f240 3242 	movw	r2, #834	; 0x342
 8013e10:	4904      	ldr	r1, [pc, #16]	; (8013e24 <pbuf_ref+0x48>)
 8013e12:	4805      	ldr	r0, [pc, #20]	; (8013e28 <pbuf_ref+0x4c>)
 8013e14:	f00a ffa4 	bl	801ed60 <iprintf>
  }
}
 8013e18:	bf00      	nop
 8013e1a:	3710      	adds	r7, #16
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	bd80      	pop	{r7, pc}
 8013e20:	080237c8 	.word	0x080237c8
 8013e24:	080239a8 	.word	0x080239a8
 8013e28:	08023828 	.word	0x08023828

08013e2c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b084      	sub	sp, #16
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]
 8013e34:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d002      	beq.n	8013e42 <pbuf_cat+0x16>
 8013e3c:	683b      	ldr	r3, [r7, #0]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d107      	bne.n	8013e52 <pbuf_cat+0x26>
 8013e42:	4b20      	ldr	r3, [pc, #128]	; (8013ec4 <pbuf_cat+0x98>)
 8013e44:	f240 3259 	movw	r2, #857	; 0x359
 8013e48:	491f      	ldr	r1, [pc, #124]	; (8013ec8 <pbuf_cat+0x9c>)
 8013e4a:	4820      	ldr	r0, [pc, #128]	; (8013ecc <pbuf_cat+0xa0>)
 8013e4c:	f00a ff88 	bl	801ed60 <iprintf>
 8013e50:	e034      	b.n	8013ebc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	60fb      	str	r3, [r7, #12]
 8013e56:	e00a      	b.n	8013e6e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	891a      	ldrh	r2, [r3, #8]
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	891b      	ldrh	r3, [r3, #8]
 8013e60:	4413      	add	r3, r2
 8013e62:	b29a      	uxth	r2, r3
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	60fb      	str	r3, [r7, #12]
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d1f0      	bne.n	8013e58 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	891a      	ldrh	r2, [r3, #8]
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	895b      	ldrh	r3, [r3, #10]
 8013e7e:	429a      	cmp	r2, r3
 8013e80:	d006      	beq.n	8013e90 <pbuf_cat+0x64>
 8013e82:	4b10      	ldr	r3, [pc, #64]	; (8013ec4 <pbuf_cat+0x98>)
 8013e84:	f240 3262 	movw	r2, #866	; 0x362
 8013e88:	4911      	ldr	r1, [pc, #68]	; (8013ed0 <pbuf_cat+0xa4>)
 8013e8a:	4810      	ldr	r0, [pc, #64]	; (8013ecc <pbuf_cat+0xa0>)
 8013e8c:	f00a ff68 	bl	801ed60 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d006      	beq.n	8013ea6 <pbuf_cat+0x7a>
 8013e98:	4b0a      	ldr	r3, [pc, #40]	; (8013ec4 <pbuf_cat+0x98>)
 8013e9a:	f240 3263 	movw	r2, #867	; 0x363
 8013e9e:	490d      	ldr	r1, [pc, #52]	; (8013ed4 <pbuf_cat+0xa8>)
 8013ea0:	480a      	ldr	r0, [pc, #40]	; (8013ecc <pbuf_cat+0xa0>)
 8013ea2:	f00a ff5d 	bl	801ed60 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	891a      	ldrh	r2, [r3, #8]
 8013eaa:	683b      	ldr	r3, [r7, #0]
 8013eac:	891b      	ldrh	r3, [r3, #8]
 8013eae:	4413      	add	r3, r2
 8013eb0:	b29a      	uxth	r2, r3
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	683a      	ldr	r2, [r7, #0]
 8013eba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8013ebc:	3710      	adds	r7, #16
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	bd80      	pop	{r7, pc}
 8013ec2:	bf00      	nop
 8013ec4:	080237c8 	.word	0x080237c8
 8013ec8:	080239bc 	.word	0x080239bc
 8013ecc:	08023828 	.word	0x08023828
 8013ed0:	080239f4 	.word	0x080239f4
 8013ed4:	08023a24 	.word	0x08023a24

08013ed8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b082      	sub	sp, #8
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
 8013ee0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8013ee2:	6839      	ldr	r1, [r7, #0]
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f7ff ffa1 	bl	8013e2c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8013eea:	6838      	ldr	r0, [r7, #0]
 8013eec:	f7ff ff76 	bl	8013ddc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8013ef0:	bf00      	nop
 8013ef2:	3708      	adds	r7, #8
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bd80      	pop	{r7, pc}

08013ef8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b086      	sub	sp, #24
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
 8013f00:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8013f02:	2300      	movs	r3, #0
 8013f04:	617b      	str	r3, [r7, #20]
 8013f06:	2300      	movs	r3, #0
 8013f08:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d008      	beq.n	8013f22 <pbuf_copy+0x2a>
 8013f10:	683b      	ldr	r3, [r7, #0]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d005      	beq.n	8013f22 <pbuf_copy+0x2a>
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	891a      	ldrh	r2, [r3, #8]
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	891b      	ldrh	r3, [r3, #8]
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	d209      	bcs.n	8013f36 <pbuf_copy+0x3e>
 8013f22:	4b57      	ldr	r3, [pc, #348]	; (8014080 <pbuf_copy+0x188>)
 8013f24:	f240 32c9 	movw	r2, #969	; 0x3c9
 8013f28:	4956      	ldr	r1, [pc, #344]	; (8014084 <pbuf_copy+0x18c>)
 8013f2a:	4857      	ldr	r0, [pc, #348]	; (8014088 <pbuf_copy+0x190>)
 8013f2c:	f00a ff18 	bl	801ed60 <iprintf>
 8013f30:	f06f 030f 	mvn.w	r3, #15
 8013f34:	e09f      	b.n	8014076 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	895b      	ldrh	r3, [r3, #10]
 8013f3a:	461a      	mov	r2, r3
 8013f3c:	697b      	ldr	r3, [r7, #20]
 8013f3e:	1ad2      	subs	r2, r2, r3
 8013f40:	683b      	ldr	r3, [r7, #0]
 8013f42:	895b      	ldrh	r3, [r3, #10]
 8013f44:	4619      	mov	r1, r3
 8013f46:	693b      	ldr	r3, [r7, #16]
 8013f48:	1acb      	subs	r3, r1, r3
 8013f4a:	429a      	cmp	r2, r3
 8013f4c:	d306      	bcc.n	8013f5c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8013f4e:	683b      	ldr	r3, [r7, #0]
 8013f50:	895b      	ldrh	r3, [r3, #10]
 8013f52:	461a      	mov	r2, r3
 8013f54:	693b      	ldr	r3, [r7, #16]
 8013f56:	1ad3      	subs	r3, r2, r3
 8013f58:	60fb      	str	r3, [r7, #12]
 8013f5a:	e005      	b.n	8013f68 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	895b      	ldrh	r3, [r3, #10]
 8013f60:	461a      	mov	r2, r3
 8013f62:	697b      	ldr	r3, [r7, #20]
 8013f64:	1ad3      	subs	r3, r2, r3
 8013f66:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	685a      	ldr	r2, [r3, #4]
 8013f6c:	697b      	ldr	r3, [r7, #20]
 8013f6e:	18d0      	adds	r0, r2, r3
 8013f70:	683b      	ldr	r3, [r7, #0]
 8013f72:	685a      	ldr	r2, [r3, #4]
 8013f74:	693b      	ldr	r3, [r7, #16]
 8013f76:	4413      	add	r3, r2
 8013f78:	68fa      	ldr	r2, [r7, #12]
 8013f7a:	4619      	mov	r1, r3
 8013f7c:	f00a fc42 	bl	801e804 <memcpy>
    offset_to += len;
 8013f80:	697a      	ldr	r2, [r7, #20]
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	4413      	add	r3, r2
 8013f86:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8013f88:	693a      	ldr	r2, [r7, #16]
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	4413      	add	r3, r2
 8013f8e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	895b      	ldrh	r3, [r3, #10]
 8013f94:	461a      	mov	r2, r3
 8013f96:	697b      	ldr	r3, [r7, #20]
 8013f98:	4293      	cmp	r3, r2
 8013f9a:	d906      	bls.n	8013faa <pbuf_copy+0xb2>
 8013f9c:	4b38      	ldr	r3, [pc, #224]	; (8014080 <pbuf_copy+0x188>)
 8013f9e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8013fa2:	493a      	ldr	r1, [pc, #232]	; (801408c <pbuf_copy+0x194>)
 8013fa4:	4838      	ldr	r0, [pc, #224]	; (8014088 <pbuf_copy+0x190>)
 8013fa6:	f00a fedb 	bl	801ed60 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8013faa:	683b      	ldr	r3, [r7, #0]
 8013fac:	895b      	ldrh	r3, [r3, #10]
 8013fae:	461a      	mov	r2, r3
 8013fb0:	693b      	ldr	r3, [r7, #16]
 8013fb2:	4293      	cmp	r3, r2
 8013fb4:	d906      	bls.n	8013fc4 <pbuf_copy+0xcc>
 8013fb6:	4b32      	ldr	r3, [pc, #200]	; (8014080 <pbuf_copy+0x188>)
 8013fb8:	f240 32da 	movw	r2, #986	; 0x3da
 8013fbc:	4934      	ldr	r1, [pc, #208]	; (8014090 <pbuf_copy+0x198>)
 8013fbe:	4832      	ldr	r0, [pc, #200]	; (8014088 <pbuf_copy+0x190>)
 8013fc0:	f00a fece 	bl	801ed60 <iprintf>
    if (offset_from >= p_from->len) {
 8013fc4:	683b      	ldr	r3, [r7, #0]
 8013fc6:	895b      	ldrh	r3, [r3, #10]
 8013fc8:	461a      	mov	r2, r3
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	4293      	cmp	r3, r2
 8013fce:	d304      	bcc.n	8013fda <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8013fd4:	683b      	ldr	r3, [r7, #0]
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	895b      	ldrh	r3, [r3, #10]
 8013fde:	461a      	mov	r2, r3
 8013fe0:	697b      	ldr	r3, [r7, #20]
 8013fe2:	4293      	cmp	r3, r2
 8013fe4:	d114      	bne.n	8014010 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d10c      	bne.n	8014010 <pbuf_copy+0x118>
 8013ff6:	683b      	ldr	r3, [r7, #0]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d009      	beq.n	8014010 <pbuf_copy+0x118>
 8013ffc:	4b20      	ldr	r3, [pc, #128]	; (8014080 <pbuf_copy+0x188>)
 8013ffe:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8014002:	4924      	ldr	r1, [pc, #144]	; (8014094 <pbuf_copy+0x19c>)
 8014004:	4820      	ldr	r0, [pc, #128]	; (8014088 <pbuf_copy+0x190>)
 8014006:	f00a feab 	bl	801ed60 <iprintf>
 801400a:	f06f 030f 	mvn.w	r3, #15
 801400e:	e032      	b.n	8014076 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d013      	beq.n	801403e <pbuf_copy+0x146>
 8014016:	683b      	ldr	r3, [r7, #0]
 8014018:	895a      	ldrh	r2, [r3, #10]
 801401a:	683b      	ldr	r3, [r7, #0]
 801401c:	891b      	ldrh	r3, [r3, #8]
 801401e:	429a      	cmp	r2, r3
 8014020:	d10d      	bne.n	801403e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014022:	683b      	ldr	r3, [r7, #0]
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d009      	beq.n	801403e <pbuf_copy+0x146>
 801402a:	4b15      	ldr	r3, [pc, #84]	; (8014080 <pbuf_copy+0x188>)
 801402c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8014030:	4919      	ldr	r1, [pc, #100]	; (8014098 <pbuf_copy+0x1a0>)
 8014032:	4815      	ldr	r0, [pc, #84]	; (8014088 <pbuf_copy+0x190>)
 8014034:	f00a fe94 	bl	801ed60 <iprintf>
 8014038:	f06f 0305 	mvn.w	r3, #5
 801403c:	e01b      	b.n	8014076 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d013      	beq.n	801406c <pbuf_copy+0x174>
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	895a      	ldrh	r2, [r3, #10]
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	891b      	ldrh	r3, [r3, #8]
 801404c:	429a      	cmp	r2, r3
 801404e:	d10d      	bne.n	801406c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d009      	beq.n	801406c <pbuf_copy+0x174>
 8014058:	4b09      	ldr	r3, [pc, #36]	; (8014080 <pbuf_copy+0x188>)
 801405a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801405e:	490e      	ldr	r1, [pc, #56]	; (8014098 <pbuf_copy+0x1a0>)
 8014060:	4809      	ldr	r0, [pc, #36]	; (8014088 <pbuf_copy+0x190>)
 8014062:	f00a fe7d 	bl	801ed60 <iprintf>
 8014066:	f06f 0305 	mvn.w	r3, #5
 801406a:	e004      	b.n	8014076 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801406c:	683b      	ldr	r3, [r7, #0]
 801406e:	2b00      	cmp	r3, #0
 8014070:	f47f af61 	bne.w	8013f36 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014074:	2300      	movs	r3, #0
}
 8014076:	4618      	mov	r0, r3
 8014078:	3718      	adds	r7, #24
 801407a:	46bd      	mov	sp, r7
 801407c:	bd80      	pop	{r7, pc}
 801407e:	bf00      	nop
 8014080:	080237c8 	.word	0x080237c8
 8014084:	08023a70 	.word	0x08023a70
 8014088:	08023828 	.word	0x08023828
 801408c:	08023aa0 	.word	0x08023aa0
 8014090:	08023ab8 	.word	0x08023ab8
 8014094:	08023ad4 	.word	0x08023ad4
 8014098:	08023ae4 	.word	0x08023ae4

0801409c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801409c:	b580      	push	{r7, lr}
 801409e:	b088      	sub	sp, #32
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	60f8      	str	r0, [r7, #12]
 80140a4:	60b9      	str	r1, [r7, #8]
 80140a6:	4611      	mov	r1, r2
 80140a8:	461a      	mov	r2, r3
 80140aa:	460b      	mov	r3, r1
 80140ac:	80fb      	strh	r3, [r7, #6]
 80140ae:	4613      	mov	r3, r2
 80140b0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80140b2:	2300      	movs	r3, #0
 80140b4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80140b6:	2300      	movs	r3, #0
 80140b8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d108      	bne.n	80140d2 <pbuf_copy_partial+0x36>
 80140c0:	4b2b      	ldr	r3, [pc, #172]	; (8014170 <pbuf_copy_partial+0xd4>)
 80140c2:	f240 420a 	movw	r2, #1034	; 0x40a
 80140c6:	492b      	ldr	r1, [pc, #172]	; (8014174 <pbuf_copy_partial+0xd8>)
 80140c8:	482b      	ldr	r0, [pc, #172]	; (8014178 <pbuf_copy_partial+0xdc>)
 80140ca:	f00a fe49 	bl	801ed60 <iprintf>
 80140ce:	2300      	movs	r3, #0
 80140d0:	e04a      	b.n	8014168 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80140d2:	68bb      	ldr	r3, [r7, #8]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d108      	bne.n	80140ea <pbuf_copy_partial+0x4e>
 80140d8:	4b25      	ldr	r3, [pc, #148]	; (8014170 <pbuf_copy_partial+0xd4>)
 80140da:	f240 420b 	movw	r2, #1035	; 0x40b
 80140de:	4927      	ldr	r1, [pc, #156]	; (801417c <pbuf_copy_partial+0xe0>)
 80140e0:	4825      	ldr	r0, [pc, #148]	; (8014178 <pbuf_copy_partial+0xdc>)
 80140e2:	f00a fe3d 	bl	801ed60 <iprintf>
 80140e6:	2300      	movs	r3, #0
 80140e8:	e03e      	b.n	8014168 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	61fb      	str	r3, [r7, #28]
 80140ee:	e034      	b.n	801415a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80140f0:	88bb      	ldrh	r3, [r7, #4]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d00a      	beq.n	801410c <pbuf_copy_partial+0x70>
 80140f6:	69fb      	ldr	r3, [r7, #28]
 80140f8:	895b      	ldrh	r3, [r3, #10]
 80140fa:	88ba      	ldrh	r2, [r7, #4]
 80140fc:	429a      	cmp	r2, r3
 80140fe:	d305      	bcc.n	801410c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8014100:	69fb      	ldr	r3, [r7, #28]
 8014102:	895b      	ldrh	r3, [r3, #10]
 8014104:	88ba      	ldrh	r2, [r7, #4]
 8014106:	1ad3      	subs	r3, r2, r3
 8014108:	80bb      	strh	r3, [r7, #4]
 801410a:	e023      	b.n	8014154 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801410c:	69fb      	ldr	r3, [r7, #28]
 801410e:	895a      	ldrh	r2, [r3, #10]
 8014110:	88bb      	ldrh	r3, [r7, #4]
 8014112:	1ad3      	subs	r3, r2, r3
 8014114:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8014116:	8b3a      	ldrh	r2, [r7, #24]
 8014118:	88fb      	ldrh	r3, [r7, #6]
 801411a:	429a      	cmp	r2, r3
 801411c:	d901      	bls.n	8014122 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801411e:	88fb      	ldrh	r3, [r7, #6]
 8014120:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8014122:	8b7b      	ldrh	r3, [r7, #26]
 8014124:	68ba      	ldr	r2, [r7, #8]
 8014126:	18d0      	adds	r0, r2, r3
 8014128:	69fb      	ldr	r3, [r7, #28]
 801412a:	685a      	ldr	r2, [r3, #4]
 801412c:	88bb      	ldrh	r3, [r7, #4]
 801412e:	4413      	add	r3, r2
 8014130:	8b3a      	ldrh	r2, [r7, #24]
 8014132:	4619      	mov	r1, r3
 8014134:	f00a fb66 	bl	801e804 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8014138:	8afa      	ldrh	r2, [r7, #22]
 801413a:	8b3b      	ldrh	r3, [r7, #24]
 801413c:	4413      	add	r3, r2
 801413e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8014140:	8b7a      	ldrh	r2, [r7, #26]
 8014142:	8b3b      	ldrh	r3, [r7, #24]
 8014144:	4413      	add	r3, r2
 8014146:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8014148:	88fa      	ldrh	r2, [r7, #6]
 801414a:	8b3b      	ldrh	r3, [r7, #24]
 801414c:	1ad3      	subs	r3, r2, r3
 801414e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8014150:	2300      	movs	r3, #0
 8014152:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014154:	69fb      	ldr	r3, [r7, #28]
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	61fb      	str	r3, [r7, #28]
 801415a:	88fb      	ldrh	r3, [r7, #6]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d002      	beq.n	8014166 <pbuf_copy_partial+0xca>
 8014160:	69fb      	ldr	r3, [r7, #28]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d1c4      	bne.n	80140f0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8014166:	8afb      	ldrh	r3, [r7, #22]
}
 8014168:	4618      	mov	r0, r3
 801416a:	3720      	adds	r7, #32
 801416c:	46bd      	mov	sp, r7
 801416e:	bd80      	pop	{r7, pc}
 8014170:	080237c8 	.word	0x080237c8
 8014174:	08023b10 	.word	0x08023b10
 8014178:	08023828 	.word	0x08023828
 801417c:	08023b30 	.word	0x08023b30

08014180 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b084      	sub	sp, #16
 8014184:	af00      	add	r7, sp, #0
 8014186:	4603      	mov	r3, r0
 8014188:	603a      	str	r2, [r7, #0]
 801418a:	71fb      	strb	r3, [r7, #7]
 801418c:	460b      	mov	r3, r1
 801418e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8014190:	683b      	ldr	r3, [r7, #0]
 8014192:	8919      	ldrh	r1, [r3, #8]
 8014194:	88ba      	ldrh	r2, [r7, #4]
 8014196:	79fb      	ldrb	r3, [r7, #7]
 8014198:	4618      	mov	r0, r3
 801419a:	f7ff fa95 	bl	80136c8 <pbuf_alloc>
 801419e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d101      	bne.n	80141aa <pbuf_clone+0x2a>
    return NULL;
 80141a6:	2300      	movs	r3, #0
 80141a8:	e011      	b.n	80141ce <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80141aa:	6839      	ldr	r1, [r7, #0]
 80141ac:	68f8      	ldr	r0, [r7, #12]
 80141ae:	f7ff fea3 	bl	8013ef8 <pbuf_copy>
 80141b2:	4603      	mov	r3, r0
 80141b4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80141b6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d006      	beq.n	80141cc <pbuf_clone+0x4c>
 80141be:	4b06      	ldr	r3, [pc, #24]	; (80141d8 <pbuf_clone+0x58>)
 80141c0:	f240 5224 	movw	r2, #1316	; 0x524
 80141c4:	4905      	ldr	r1, [pc, #20]	; (80141dc <pbuf_clone+0x5c>)
 80141c6:	4806      	ldr	r0, [pc, #24]	; (80141e0 <pbuf_clone+0x60>)
 80141c8:	f00a fdca 	bl	801ed60 <iprintf>
  return q;
 80141cc:	68fb      	ldr	r3, [r7, #12]
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	3710      	adds	r7, #16
 80141d2:	46bd      	mov	sp, r7
 80141d4:	bd80      	pop	{r7, pc}
 80141d6:	bf00      	nop
 80141d8:	080237c8 	.word	0x080237c8
 80141dc:	08023c3c 	.word	0x08023c3c
 80141e0:	08023828 	.word	0x08023828

080141e4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80141e8:	f00a fdd2 	bl	801ed90 <rand>
 80141ec:	4603      	mov	r3, r0
 80141ee:	b29b      	uxth	r3, r3
 80141f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80141f4:	b29b      	uxth	r3, r3
 80141f6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80141fa:	b29a      	uxth	r2, r3
 80141fc:	4b01      	ldr	r3, [pc, #4]	; (8014204 <tcp_init+0x20>)
 80141fe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014200:	bf00      	nop
 8014202:	bd80      	pop	{r7, pc}
 8014204:	2000013c 	.word	0x2000013c

08014208 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b082      	sub	sp, #8
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	7d1b      	ldrb	r3, [r3, #20]
 8014214:	2b01      	cmp	r3, #1
 8014216:	d105      	bne.n	8014224 <tcp_free+0x1c>
 8014218:	4b06      	ldr	r3, [pc, #24]	; (8014234 <tcp_free+0x2c>)
 801421a:	22d4      	movs	r2, #212	; 0xd4
 801421c:	4906      	ldr	r1, [pc, #24]	; (8014238 <tcp_free+0x30>)
 801421e:	4807      	ldr	r0, [pc, #28]	; (801423c <tcp_free+0x34>)
 8014220:	f00a fd9e 	bl	801ed60 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8014224:	6879      	ldr	r1, [r7, #4]
 8014226:	2001      	movs	r0, #1
 8014228:	f7fe feb4 	bl	8012f94 <memp_free>
}
 801422c:	bf00      	nop
 801422e:	3708      	adds	r7, #8
 8014230:	46bd      	mov	sp, r7
 8014232:	bd80      	pop	{r7, pc}
 8014234:	08023cc8 	.word	0x08023cc8
 8014238:	08023cf8 	.word	0x08023cf8
 801423c:	08023d0c 	.word	0x08023d0c

08014240 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8014240:	b580      	push	{r7, lr}
 8014242:	b082      	sub	sp, #8
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	7d1b      	ldrb	r3, [r3, #20]
 801424c:	2b01      	cmp	r3, #1
 801424e:	d105      	bne.n	801425c <tcp_free_listen+0x1c>
 8014250:	4b06      	ldr	r3, [pc, #24]	; (801426c <tcp_free_listen+0x2c>)
 8014252:	22df      	movs	r2, #223	; 0xdf
 8014254:	4906      	ldr	r1, [pc, #24]	; (8014270 <tcp_free_listen+0x30>)
 8014256:	4807      	ldr	r0, [pc, #28]	; (8014274 <tcp_free_listen+0x34>)
 8014258:	f00a fd82 	bl	801ed60 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801425c:	6879      	ldr	r1, [r7, #4]
 801425e:	2002      	movs	r0, #2
 8014260:	f7fe fe98 	bl	8012f94 <memp_free>
}
 8014264:	bf00      	nop
 8014266:	3708      	adds	r7, #8
 8014268:	46bd      	mov	sp, r7
 801426a:	bd80      	pop	{r7, pc}
 801426c:	08023cc8 	.word	0x08023cc8
 8014270:	08023d34 	.word	0x08023d34
 8014274:	08023d0c 	.word	0x08023d0c

08014278 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801427c:	f001 f8b8 	bl	80153f0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8014280:	4b07      	ldr	r3, [pc, #28]	; (80142a0 <tcp_tmr+0x28>)
 8014282:	781b      	ldrb	r3, [r3, #0]
 8014284:	3301      	adds	r3, #1
 8014286:	b2da      	uxtb	r2, r3
 8014288:	4b05      	ldr	r3, [pc, #20]	; (80142a0 <tcp_tmr+0x28>)
 801428a:	701a      	strb	r2, [r3, #0]
 801428c:	4b04      	ldr	r3, [pc, #16]	; (80142a0 <tcp_tmr+0x28>)
 801428e:	781b      	ldrb	r3, [r3, #0]
 8014290:	f003 0301 	and.w	r3, r3, #1
 8014294:	2b00      	cmp	r3, #0
 8014296:	d001      	beq.n	801429c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014298:	f000 fd6a 	bl	8014d70 <tcp_slowtmr>
  }
}
 801429c:	bf00      	nop
 801429e:	bd80      	pop	{r7, pc}
 80142a0:	20004759 	.word	0x20004759

080142a4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b084      	sub	sp, #16
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
 80142ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d105      	bne.n	80142c0 <tcp_remove_listener+0x1c>
 80142b4:	4b0d      	ldr	r3, [pc, #52]	; (80142ec <tcp_remove_listener+0x48>)
 80142b6:	22ff      	movs	r2, #255	; 0xff
 80142b8:	490d      	ldr	r1, [pc, #52]	; (80142f0 <tcp_remove_listener+0x4c>)
 80142ba:	480e      	ldr	r0, [pc, #56]	; (80142f4 <tcp_remove_listener+0x50>)
 80142bc:	f00a fd50 	bl	801ed60 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	60fb      	str	r3, [r7, #12]
 80142c4:	e00a      	b.n	80142dc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80142ca:	683a      	ldr	r2, [r7, #0]
 80142cc:	429a      	cmp	r2, r3
 80142ce:	d102      	bne.n	80142d6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	2200      	movs	r2, #0
 80142d4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	68db      	ldr	r3, [r3, #12]
 80142da:	60fb      	str	r3, [r7, #12]
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d1f1      	bne.n	80142c6 <tcp_remove_listener+0x22>
    }
  }
}
 80142e2:	bf00      	nop
 80142e4:	bf00      	nop
 80142e6:	3710      	adds	r7, #16
 80142e8:	46bd      	mov	sp, r7
 80142ea:	bd80      	pop	{r7, pc}
 80142ec:	08023cc8 	.word	0x08023cc8
 80142f0:	08023d50 	.word	0x08023d50
 80142f4:	08023d0c 	.word	0x08023d0c

080142f8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b084      	sub	sp, #16
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d106      	bne.n	8014314 <tcp_listen_closed+0x1c>
 8014306:	4b14      	ldr	r3, [pc, #80]	; (8014358 <tcp_listen_closed+0x60>)
 8014308:	f240 1211 	movw	r2, #273	; 0x111
 801430c:	4913      	ldr	r1, [pc, #76]	; (801435c <tcp_listen_closed+0x64>)
 801430e:	4814      	ldr	r0, [pc, #80]	; (8014360 <tcp_listen_closed+0x68>)
 8014310:	f00a fd26 	bl	801ed60 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	7d1b      	ldrb	r3, [r3, #20]
 8014318:	2b01      	cmp	r3, #1
 801431a:	d006      	beq.n	801432a <tcp_listen_closed+0x32>
 801431c:	4b0e      	ldr	r3, [pc, #56]	; (8014358 <tcp_listen_closed+0x60>)
 801431e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8014322:	4910      	ldr	r1, [pc, #64]	; (8014364 <tcp_listen_closed+0x6c>)
 8014324:	480e      	ldr	r0, [pc, #56]	; (8014360 <tcp_listen_closed+0x68>)
 8014326:	f00a fd1b 	bl	801ed60 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801432a:	2301      	movs	r3, #1
 801432c:	60fb      	str	r3, [r7, #12]
 801432e:	e00b      	b.n	8014348 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8014330:	4a0d      	ldr	r2, [pc, #52]	; (8014368 <tcp_listen_closed+0x70>)
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	6879      	ldr	r1, [r7, #4]
 801433c:	4618      	mov	r0, r3
 801433e:	f7ff ffb1 	bl	80142a4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	3301      	adds	r3, #1
 8014346:	60fb      	str	r3, [r7, #12]
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	2b03      	cmp	r3, #3
 801434c:	d9f0      	bls.n	8014330 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801434e:	bf00      	nop
 8014350:	bf00      	nop
 8014352:	3710      	adds	r7, #16
 8014354:	46bd      	mov	sp, r7
 8014356:	bd80      	pop	{r7, pc}
 8014358:	08023cc8 	.word	0x08023cc8
 801435c:	08023d78 	.word	0x08023d78
 8014360:	08023d0c 	.word	0x08023d0c
 8014364:	08023d84 	.word	0x08023d84
 8014368:	08026c7c 	.word	0x08026c7c

0801436c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801436c:	b5b0      	push	{r4, r5, r7, lr}
 801436e:	b088      	sub	sp, #32
 8014370:	af04      	add	r7, sp, #16
 8014372:	6078      	str	r0, [r7, #4]
 8014374:	460b      	mov	r3, r1
 8014376:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d106      	bne.n	801438c <tcp_close_shutdown+0x20>
 801437e:	4b63      	ldr	r3, [pc, #396]	; (801450c <tcp_close_shutdown+0x1a0>)
 8014380:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8014384:	4962      	ldr	r1, [pc, #392]	; (8014510 <tcp_close_shutdown+0x1a4>)
 8014386:	4863      	ldr	r0, [pc, #396]	; (8014514 <tcp_close_shutdown+0x1a8>)
 8014388:	f00a fcea 	bl	801ed60 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801438c:	78fb      	ldrb	r3, [r7, #3]
 801438e:	2b00      	cmp	r3, #0
 8014390:	d066      	beq.n	8014460 <tcp_close_shutdown+0xf4>
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	7d1b      	ldrb	r3, [r3, #20]
 8014396:	2b04      	cmp	r3, #4
 8014398:	d003      	beq.n	80143a2 <tcp_close_shutdown+0x36>
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	7d1b      	ldrb	r3, [r3, #20]
 801439e:	2b07      	cmp	r3, #7
 80143a0:	d15e      	bne.n	8014460 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d104      	bne.n	80143b4 <tcp_close_shutdown+0x48>
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143ae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80143b2:	d055      	beq.n	8014460 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	8b5b      	ldrh	r3, [r3, #26]
 80143b8:	f003 0310 	and.w	r3, r3, #16
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d106      	bne.n	80143ce <tcp_close_shutdown+0x62>
 80143c0:	4b52      	ldr	r3, [pc, #328]	; (801450c <tcp_close_shutdown+0x1a0>)
 80143c2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80143c6:	4954      	ldr	r1, [pc, #336]	; (8014518 <tcp_close_shutdown+0x1ac>)
 80143c8:	4852      	ldr	r0, [pc, #328]	; (8014514 <tcp_close_shutdown+0x1a8>)
 80143ca:	f00a fcc9 	bl	801ed60 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80143d6:	687d      	ldr	r5, [r7, #4]
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	3304      	adds	r3, #4
 80143dc:	687a      	ldr	r2, [r7, #4]
 80143de:	8ad2      	ldrh	r2, [r2, #22]
 80143e0:	6879      	ldr	r1, [r7, #4]
 80143e2:	8b09      	ldrh	r1, [r1, #24]
 80143e4:	9102      	str	r1, [sp, #8]
 80143e6:	9201      	str	r2, [sp, #4]
 80143e8:	9300      	str	r3, [sp, #0]
 80143ea:	462b      	mov	r3, r5
 80143ec:	4622      	mov	r2, r4
 80143ee:	4601      	mov	r1, r0
 80143f0:	6878      	ldr	r0, [r7, #4]
 80143f2:	f005 fde7 	bl	8019fc4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80143f6:	6878      	ldr	r0, [r7, #4]
 80143f8:	f001 fbc8 	bl	8015b8c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80143fc:	4b47      	ldr	r3, [pc, #284]	; (801451c <tcp_close_shutdown+0x1b0>)
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	687a      	ldr	r2, [r7, #4]
 8014402:	429a      	cmp	r2, r3
 8014404:	d105      	bne.n	8014412 <tcp_close_shutdown+0xa6>
 8014406:	4b45      	ldr	r3, [pc, #276]	; (801451c <tcp_close_shutdown+0x1b0>)
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	68db      	ldr	r3, [r3, #12]
 801440c:	4a43      	ldr	r2, [pc, #268]	; (801451c <tcp_close_shutdown+0x1b0>)
 801440e:	6013      	str	r3, [r2, #0]
 8014410:	e013      	b.n	801443a <tcp_close_shutdown+0xce>
 8014412:	4b42      	ldr	r3, [pc, #264]	; (801451c <tcp_close_shutdown+0x1b0>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	60fb      	str	r3, [r7, #12]
 8014418:	e00c      	b.n	8014434 <tcp_close_shutdown+0xc8>
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	68db      	ldr	r3, [r3, #12]
 801441e:	687a      	ldr	r2, [r7, #4]
 8014420:	429a      	cmp	r2, r3
 8014422:	d104      	bne.n	801442e <tcp_close_shutdown+0xc2>
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	68da      	ldr	r2, [r3, #12]
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	60da      	str	r2, [r3, #12]
 801442c:	e005      	b.n	801443a <tcp_close_shutdown+0xce>
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	68db      	ldr	r3, [r3, #12]
 8014432:	60fb      	str	r3, [r7, #12]
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d1ef      	bne.n	801441a <tcp_close_shutdown+0xae>
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	2200      	movs	r2, #0
 801443e:	60da      	str	r2, [r3, #12]
 8014440:	4b37      	ldr	r3, [pc, #220]	; (8014520 <tcp_close_shutdown+0x1b4>)
 8014442:	2201      	movs	r2, #1
 8014444:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8014446:	4b37      	ldr	r3, [pc, #220]	; (8014524 <tcp_close_shutdown+0x1b8>)
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	687a      	ldr	r2, [r7, #4]
 801444c:	429a      	cmp	r2, r3
 801444e:	d102      	bne.n	8014456 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8014450:	f004 f85c 	bl	801850c <tcp_trigger_input_pcb_close>
 8014454:	e002      	b.n	801445c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8014456:	6878      	ldr	r0, [r7, #4]
 8014458:	f7ff fed6 	bl	8014208 <tcp_free>
      }
      return ERR_OK;
 801445c:	2300      	movs	r3, #0
 801445e:	e050      	b.n	8014502 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	7d1b      	ldrb	r3, [r3, #20]
 8014464:	2b02      	cmp	r3, #2
 8014466:	d03b      	beq.n	80144e0 <tcp_close_shutdown+0x174>
 8014468:	2b02      	cmp	r3, #2
 801446a:	dc44      	bgt.n	80144f6 <tcp_close_shutdown+0x18a>
 801446c:	2b00      	cmp	r3, #0
 801446e:	d002      	beq.n	8014476 <tcp_close_shutdown+0x10a>
 8014470:	2b01      	cmp	r3, #1
 8014472:	d02a      	beq.n	80144ca <tcp_close_shutdown+0x15e>
 8014474:	e03f      	b.n	80144f6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	8adb      	ldrh	r3, [r3, #22]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d021      	beq.n	80144c2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801447e:	4b2a      	ldr	r3, [pc, #168]	; (8014528 <tcp_close_shutdown+0x1bc>)
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	687a      	ldr	r2, [r7, #4]
 8014484:	429a      	cmp	r2, r3
 8014486:	d105      	bne.n	8014494 <tcp_close_shutdown+0x128>
 8014488:	4b27      	ldr	r3, [pc, #156]	; (8014528 <tcp_close_shutdown+0x1bc>)
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	68db      	ldr	r3, [r3, #12]
 801448e:	4a26      	ldr	r2, [pc, #152]	; (8014528 <tcp_close_shutdown+0x1bc>)
 8014490:	6013      	str	r3, [r2, #0]
 8014492:	e013      	b.n	80144bc <tcp_close_shutdown+0x150>
 8014494:	4b24      	ldr	r3, [pc, #144]	; (8014528 <tcp_close_shutdown+0x1bc>)
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	60bb      	str	r3, [r7, #8]
 801449a:	e00c      	b.n	80144b6 <tcp_close_shutdown+0x14a>
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	68db      	ldr	r3, [r3, #12]
 80144a0:	687a      	ldr	r2, [r7, #4]
 80144a2:	429a      	cmp	r2, r3
 80144a4:	d104      	bne.n	80144b0 <tcp_close_shutdown+0x144>
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	68da      	ldr	r2, [r3, #12]
 80144aa:	68bb      	ldr	r3, [r7, #8]
 80144ac:	60da      	str	r2, [r3, #12]
 80144ae:	e005      	b.n	80144bc <tcp_close_shutdown+0x150>
 80144b0:	68bb      	ldr	r3, [r7, #8]
 80144b2:	68db      	ldr	r3, [r3, #12]
 80144b4:	60bb      	str	r3, [r7, #8]
 80144b6:	68bb      	ldr	r3, [r7, #8]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d1ef      	bne.n	801449c <tcp_close_shutdown+0x130>
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	2200      	movs	r2, #0
 80144c0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f7ff fea0 	bl	8014208 <tcp_free>
      break;
 80144c8:	e01a      	b.n	8014500 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80144ca:	6878      	ldr	r0, [r7, #4]
 80144cc:	f7ff ff14 	bl	80142f8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80144d0:	6879      	ldr	r1, [r7, #4]
 80144d2:	4816      	ldr	r0, [pc, #88]	; (801452c <tcp_close_shutdown+0x1c0>)
 80144d4:	f001 fbaa 	bl	8015c2c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f7ff feb1 	bl	8014240 <tcp_free_listen>
      break;
 80144de:	e00f      	b.n	8014500 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80144e0:	6879      	ldr	r1, [r7, #4]
 80144e2:	480e      	ldr	r0, [pc, #56]	; (801451c <tcp_close_shutdown+0x1b0>)
 80144e4:	f001 fba2 	bl	8015c2c <tcp_pcb_remove>
 80144e8:	4b0d      	ldr	r3, [pc, #52]	; (8014520 <tcp_close_shutdown+0x1b4>)
 80144ea:	2201      	movs	r2, #1
 80144ec:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80144ee:	6878      	ldr	r0, [r7, #4]
 80144f0:	f7ff fe8a 	bl	8014208 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80144f4:	e004      	b.n	8014500 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80144f6:	6878      	ldr	r0, [r7, #4]
 80144f8:	f000 f81a 	bl	8014530 <tcp_close_shutdown_fin>
 80144fc:	4603      	mov	r3, r0
 80144fe:	e000      	b.n	8014502 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8014500:	2300      	movs	r3, #0
}
 8014502:	4618      	mov	r0, r3
 8014504:	3710      	adds	r7, #16
 8014506:	46bd      	mov	sp, r7
 8014508:	bdb0      	pop	{r4, r5, r7, pc}
 801450a:	bf00      	nop
 801450c:	08023cc8 	.word	0x08023cc8
 8014510:	08023d9c 	.word	0x08023d9c
 8014514:	08023d0c 	.word	0x08023d0c
 8014518:	08023dbc 	.word	0x08023dbc
 801451c:	2000b79c 	.word	0x2000b79c
 8014520:	2000b798 	.word	0x2000b798
 8014524:	2000b7b0 	.word	0x2000b7b0
 8014528:	2000b7a8 	.word	0x2000b7a8
 801452c:	2000b7a4 	.word	0x2000b7a4

08014530 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b084      	sub	sp, #16
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d106      	bne.n	801454c <tcp_close_shutdown_fin+0x1c>
 801453e:	4b2e      	ldr	r3, [pc, #184]	; (80145f8 <tcp_close_shutdown_fin+0xc8>)
 8014540:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8014544:	492d      	ldr	r1, [pc, #180]	; (80145fc <tcp_close_shutdown_fin+0xcc>)
 8014546:	482e      	ldr	r0, [pc, #184]	; (8014600 <tcp_close_shutdown_fin+0xd0>)
 8014548:	f00a fc0a 	bl	801ed60 <iprintf>

  switch (pcb->state) {
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	7d1b      	ldrb	r3, [r3, #20]
 8014550:	2b07      	cmp	r3, #7
 8014552:	d020      	beq.n	8014596 <tcp_close_shutdown_fin+0x66>
 8014554:	2b07      	cmp	r3, #7
 8014556:	dc2b      	bgt.n	80145b0 <tcp_close_shutdown_fin+0x80>
 8014558:	2b03      	cmp	r3, #3
 801455a:	d002      	beq.n	8014562 <tcp_close_shutdown_fin+0x32>
 801455c:	2b04      	cmp	r3, #4
 801455e:	d00d      	beq.n	801457c <tcp_close_shutdown_fin+0x4c>
 8014560:	e026      	b.n	80145b0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8014562:	6878      	ldr	r0, [r7, #4]
 8014564:	f004 fe3c 	bl	80191e0 <tcp_send_fin>
 8014568:	4603      	mov	r3, r0
 801456a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801456c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d11f      	bne.n	80145b4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	2205      	movs	r2, #5
 8014578:	751a      	strb	r2, [r3, #20]
      }
      break;
 801457a:	e01b      	b.n	80145b4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801457c:	6878      	ldr	r0, [r7, #4]
 801457e:	f004 fe2f 	bl	80191e0 <tcp_send_fin>
 8014582:	4603      	mov	r3, r0
 8014584:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d114      	bne.n	80145b8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	2205      	movs	r2, #5
 8014592:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014594:	e010      	b.n	80145b8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014596:	6878      	ldr	r0, [r7, #4]
 8014598:	f004 fe22 	bl	80191e0 <tcp_send_fin>
 801459c:	4603      	mov	r3, r0
 801459e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80145a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d109      	bne.n	80145bc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	2209      	movs	r2, #9
 80145ac:	751a      	strb	r2, [r3, #20]
      }
      break;
 80145ae:	e005      	b.n	80145bc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80145b0:	2300      	movs	r3, #0
 80145b2:	e01c      	b.n	80145ee <tcp_close_shutdown_fin+0xbe>
      break;
 80145b4:	bf00      	nop
 80145b6:	e002      	b.n	80145be <tcp_close_shutdown_fin+0x8e>
      break;
 80145b8:	bf00      	nop
 80145ba:	e000      	b.n	80145be <tcp_close_shutdown_fin+0x8e>
      break;
 80145bc:	bf00      	nop
  }

  if (err == ERR_OK) {
 80145be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d103      	bne.n	80145ce <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80145c6:	6878      	ldr	r0, [r7, #4]
 80145c8:	f004 ff48 	bl	801945c <tcp_output>
 80145cc:	e00d      	b.n	80145ea <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80145ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80145d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145d6:	d108      	bne.n	80145ea <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	8b5b      	ldrh	r3, [r3, #26]
 80145dc:	f043 0308 	orr.w	r3, r3, #8
 80145e0:	b29a      	uxth	r2, r3
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80145e6:	2300      	movs	r3, #0
 80145e8:	e001      	b.n	80145ee <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80145ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80145ee:	4618      	mov	r0, r3
 80145f0:	3710      	adds	r7, #16
 80145f2:	46bd      	mov	sp, r7
 80145f4:	bd80      	pop	{r7, pc}
 80145f6:	bf00      	nop
 80145f8:	08023cc8 	.word	0x08023cc8
 80145fc:	08023d78 	.word	0x08023d78
 8014600:	08023d0c 	.word	0x08023d0c

08014604 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b082      	sub	sp, #8
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d109      	bne.n	8014626 <tcp_close+0x22>
 8014612:	4b0f      	ldr	r3, [pc, #60]	; (8014650 <tcp_close+0x4c>)
 8014614:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8014618:	490e      	ldr	r1, [pc, #56]	; (8014654 <tcp_close+0x50>)
 801461a:	480f      	ldr	r0, [pc, #60]	; (8014658 <tcp_close+0x54>)
 801461c:	f00a fba0 	bl	801ed60 <iprintf>
 8014620:	f06f 030f 	mvn.w	r3, #15
 8014624:	e00f      	b.n	8014646 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	7d1b      	ldrb	r3, [r3, #20]
 801462a:	2b01      	cmp	r3, #1
 801462c:	d006      	beq.n	801463c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	8b5b      	ldrh	r3, [r3, #26]
 8014632:	f043 0310 	orr.w	r3, r3, #16
 8014636:	b29a      	uxth	r2, r3
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801463c:	2101      	movs	r1, #1
 801463e:	6878      	ldr	r0, [r7, #4]
 8014640:	f7ff fe94 	bl	801436c <tcp_close_shutdown>
 8014644:	4603      	mov	r3, r0
}
 8014646:	4618      	mov	r0, r3
 8014648:	3708      	adds	r7, #8
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}
 801464e:	bf00      	nop
 8014650:	08023cc8 	.word	0x08023cc8
 8014654:	08023dd8 	.word	0x08023dd8
 8014658:	08023d0c 	.word	0x08023d0c

0801465c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801465c:	b580      	push	{r7, lr}
 801465e:	b084      	sub	sp, #16
 8014660:	af00      	add	r7, sp, #0
 8014662:	60f8      	str	r0, [r7, #12]
 8014664:	60b9      	str	r1, [r7, #8]
 8014666:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d109      	bne.n	8014682 <tcp_shutdown+0x26>
 801466e:	4b26      	ldr	r3, [pc, #152]	; (8014708 <tcp_shutdown+0xac>)
 8014670:	f240 2207 	movw	r2, #519	; 0x207
 8014674:	4925      	ldr	r1, [pc, #148]	; (801470c <tcp_shutdown+0xb0>)
 8014676:	4826      	ldr	r0, [pc, #152]	; (8014710 <tcp_shutdown+0xb4>)
 8014678:	f00a fb72 	bl	801ed60 <iprintf>
 801467c:	f06f 030f 	mvn.w	r3, #15
 8014680:	e03d      	b.n	80146fe <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	7d1b      	ldrb	r3, [r3, #20]
 8014686:	2b01      	cmp	r3, #1
 8014688:	d102      	bne.n	8014690 <tcp_shutdown+0x34>
    return ERR_CONN;
 801468a:	f06f 030a 	mvn.w	r3, #10
 801468e:	e036      	b.n	80146fe <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8014690:	68bb      	ldr	r3, [r7, #8]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d01b      	beq.n	80146ce <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	8b5b      	ldrh	r3, [r3, #26]
 801469a:	f043 0310 	orr.w	r3, r3, #16
 801469e:	b29a      	uxth	r2, r3
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d005      	beq.n	80146b6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80146aa:	2101      	movs	r1, #1
 80146ac:	68f8      	ldr	r0, [r7, #12]
 80146ae:	f7ff fe5d 	bl	801436c <tcp_close_shutdown>
 80146b2:	4603      	mov	r3, r0
 80146b4:	e023      	b.n	80146fe <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d007      	beq.n	80146ce <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80146c2:	4618      	mov	r0, r3
 80146c4:	f7ff fae4 	bl	8013c90 <pbuf_free>
      pcb->refused_data = NULL;
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	2200      	movs	r2, #0
 80146cc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d013      	beq.n	80146fc <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	7d1b      	ldrb	r3, [r3, #20]
 80146d8:	2b04      	cmp	r3, #4
 80146da:	dc02      	bgt.n	80146e2 <tcp_shutdown+0x86>
 80146dc:	2b03      	cmp	r3, #3
 80146de:	da02      	bge.n	80146e6 <tcp_shutdown+0x8a>
 80146e0:	e009      	b.n	80146f6 <tcp_shutdown+0x9a>
 80146e2:	2b07      	cmp	r3, #7
 80146e4:	d107      	bne.n	80146f6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80146e6:	68bb      	ldr	r3, [r7, #8]
 80146e8:	b2db      	uxtb	r3, r3
 80146ea:	4619      	mov	r1, r3
 80146ec:	68f8      	ldr	r0, [r7, #12]
 80146ee:	f7ff fe3d 	bl	801436c <tcp_close_shutdown>
 80146f2:	4603      	mov	r3, r0
 80146f4:	e003      	b.n	80146fe <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80146f6:	f06f 030a 	mvn.w	r3, #10
 80146fa:	e000      	b.n	80146fe <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80146fc:	2300      	movs	r3, #0
}
 80146fe:	4618      	mov	r0, r3
 8014700:	3710      	adds	r7, #16
 8014702:	46bd      	mov	sp, r7
 8014704:	bd80      	pop	{r7, pc}
 8014706:	bf00      	nop
 8014708:	08023cc8 	.word	0x08023cc8
 801470c:	08023df0 	.word	0x08023df0
 8014710:	08023d0c 	.word	0x08023d0c

08014714 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b08e      	sub	sp, #56	; 0x38
 8014718:	af04      	add	r7, sp, #16
 801471a:	6078      	str	r0, [r7, #4]
 801471c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d107      	bne.n	8014734 <tcp_abandon+0x20>
 8014724:	4b52      	ldr	r3, [pc, #328]	; (8014870 <tcp_abandon+0x15c>)
 8014726:	f240 223d 	movw	r2, #573	; 0x23d
 801472a:	4952      	ldr	r1, [pc, #328]	; (8014874 <tcp_abandon+0x160>)
 801472c:	4852      	ldr	r0, [pc, #328]	; (8014878 <tcp_abandon+0x164>)
 801472e:	f00a fb17 	bl	801ed60 <iprintf>
 8014732:	e099      	b.n	8014868 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	7d1b      	ldrb	r3, [r3, #20]
 8014738:	2b01      	cmp	r3, #1
 801473a:	d106      	bne.n	801474a <tcp_abandon+0x36>
 801473c:	4b4c      	ldr	r3, [pc, #304]	; (8014870 <tcp_abandon+0x15c>)
 801473e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8014742:	494e      	ldr	r1, [pc, #312]	; (801487c <tcp_abandon+0x168>)
 8014744:	484c      	ldr	r0, [pc, #304]	; (8014878 <tcp_abandon+0x164>)
 8014746:	f00a fb0b 	bl	801ed60 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	7d1b      	ldrb	r3, [r3, #20]
 801474e:	2b0a      	cmp	r3, #10
 8014750:	d107      	bne.n	8014762 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8014752:	6879      	ldr	r1, [r7, #4]
 8014754:	484a      	ldr	r0, [pc, #296]	; (8014880 <tcp_abandon+0x16c>)
 8014756:	f001 fa69 	bl	8015c2c <tcp_pcb_remove>
    tcp_free(pcb);
 801475a:	6878      	ldr	r0, [r7, #4]
 801475c:	f7ff fd54 	bl	8014208 <tcp_free>
 8014760:	e082      	b.n	8014868 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8014762:	2300      	movs	r3, #0
 8014764:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8014766:	2300      	movs	r3, #0
 8014768:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801476e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014774:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801477c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	691b      	ldr	r3, [r3, #16]
 8014782:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	7d1b      	ldrb	r3, [r3, #20]
 8014788:	2b00      	cmp	r3, #0
 801478a:	d126      	bne.n	80147da <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	8adb      	ldrh	r3, [r3, #22]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d02e      	beq.n	80147f2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014794:	4b3b      	ldr	r3, [pc, #236]	; (8014884 <tcp_abandon+0x170>)
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	687a      	ldr	r2, [r7, #4]
 801479a:	429a      	cmp	r2, r3
 801479c:	d105      	bne.n	80147aa <tcp_abandon+0x96>
 801479e:	4b39      	ldr	r3, [pc, #228]	; (8014884 <tcp_abandon+0x170>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	68db      	ldr	r3, [r3, #12]
 80147a4:	4a37      	ldr	r2, [pc, #220]	; (8014884 <tcp_abandon+0x170>)
 80147a6:	6013      	str	r3, [r2, #0]
 80147a8:	e013      	b.n	80147d2 <tcp_abandon+0xbe>
 80147aa:	4b36      	ldr	r3, [pc, #216]	; (8014884 <tcp_abandon+0x170>)
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	61fb      	str	r3, [r7, #28]
 80147b0:	e00c      	b.n	80147cc <tcp_abandon+0xb8>
 80147b2:	69fb      	ldr	r3, [r7, #28]
 80147b4:	68db      	ldr	r3, [r3, #12]
 80147b6:	687a      	ldr	r2, [r7, #4]
 80147b8:	429a      	cmp	r2, r3
 80147ba:	d104      	bne.n	80147c6 <tcp_abandon+0xb2>
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	68da      	ldr	r2, [r3, #12]
 80147c0:	69fb      	ldr	r3, [r7, #28]
 80147c2:	60da      	str	r2, [r3, #12]
 80147c4:	e005      	b.n	80147d2 <tcp_abandon+0xbe>
 80147c6:	69fb      	ldr	r3, [r7, #28]
 80147c8:	68db      	ldr	r3, [r3, #12]
 80147ca:	61fb      	str	r3, [r7, #28]
 80147cc:	69fb      	ldr	r3, [r7, #28]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d1ef      	bne.n	80147b2 <tcp_abandon+0x9e>
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	2200      	movs	r2, #0
 80147d6:	60da      	str	r2, [r3, #12]
 80147d8:	e00b      	b.n	80147f2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	8adb      	ldrh	r3, [r3, #22]
 80147e2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80147e4:	6879      	ldr	r1, [r7, #4]
 80147e6:	4828      	ldr	r0, [pc, #160]	; (8014888 <tcp_abandon+0x174>)
 80147e8:	f001 fa20 	bl	8015c2c <tcp_pcb_remove>
 80147ec:	4b27      	ldr	r3, [pc, #156]	; (801488c <tcp_abandon+0x178>)
 80147ee:	2201      	movs	r2, #1
 80147f0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d004      	beq.n	8014804 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147fe:	4618      	mov	r0, r3
 8014800:	f000 fed6 	bl	80155b0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014808:	2b00      	cmp	r3, #0
 801480a:	d004      	beq.n	8014816 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014810:	4618      	mov	r0, r3
 8014812:	f000 fecd 	bl	80155b0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801481a:	2b00      	cmp	r3, #0
 801481c:	d004      	beq.n	8014828 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014822:	4618      	mov	r0, r3
 8014824:	f000 fec4 	bl	80155b0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8014828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801482a:	2b00      	cmp	r3, #0
 801482c:	d00e      	beq.n	801484c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801482e:	6879      	ldr	r1, [r7, #4]
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	3304      	adds	r3, #4
 8014834:	687a      	ldr	r2, [r7, #4]
 8014836:	8b12      	ldrh	r2, [r2, #24]
 8014838:	9202      	str	r2, [sp, #8]
 801483a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801483c:	9201      	str	r2, [sp, #4]
 801483e:	9300      	str	r3, [sp, #0]
 8014840:	460b      	mov	r3, r1
 8014842:	697a      	ldr	r2, [r7, #20]
 8014844:	69b9      	ldr	r1, [r7, #24]
 8014846:	6878      	ldr	r0, [r7, #4]
 8014848:	f005 fbbc 	bl	8019fc4 <tcp_rst>
    }
    last_state = pcb->state;
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	7d1b      	ldrb	r3, [r3, #20]
 8014850:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8014852:	6878      	ldr	r0, [r7, #4]
 8014854:	f7ff fcd8 	bl	8014208 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8014858:	693b      	ldr	r3, [r7, #16]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d004      	beq.n	8014868 <tcp_abandon+0x154>
 801485e:	693b      	ldr	r3, [r7, #16]
 8014860:	f06f 010c 	mvn.w	r1, #12
 8014864:	68f8      	ldr	r0, [r7, #12]
 8014866:	4798      	blx	r3
  }
}
 8014868:	3728      	adds	r7, #40	; 0x28
 801486a:	46bd      	mov	sp, r7
 801486c:	bd80      	pop	{r7, pc}
 801486e:	bf00      	nop
 8014870:	08023cc8 	.word	0x08023cc8
 8014874:	08023e0c 	.word	0x08023e0c
 8014878:	08023d0c 	.word	0x08023d0c
 801487c:	08023e28 	.word	0x08023e28
 8014880:	2000b7ac 	.word	0x2000b7ac
 8014884:	2000b7a8 	.word	0x2000b7a8
 8014888:	2000b79c 	.word	0x2000b79c
 801488c:	2000b798 	.word	0x2000b798

08014890 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8014890:	b580      	push	{r7, lr}
 8014892:	b082      	sub	sp, #8
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8014898:	2101      	movs	r1, #1
 801489a:	6878      	ldr	r0, [r7, #4]
 801489c:	f7ff ff3a 	bl	8014714 <tcp_abandon>
}
 80148a0:	bf00      	nop
 80148a2:	3708      	adds	r7, #8
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bd80      	pop	{r7, pc}

080148a8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b088      	sub	sp, #32
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	60f8      	str	r0, [r7, #12]
 80148b0:	60b9      	str	r1, [r7, #8]
 80148b2:	4613      	mov	r3, r2
 80148b4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80148b6:	2304      	movs	r3, #4
 80148b8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80148ba:	68bb      	ldr	r3, [r7, #8]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d101      	bne.n	80148c4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80148c0:	4b3e      	ldr	r3, [pc, #248]	; (80149bc <tcp_bind+0x114>)
 80148c2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d109      	bne.n	80148de <tcp_bind+0x36>
 80148ca:	4b3d      	ldr	r3, [pc, #244]	; (80149c0 <tcp_bind+0x118>)
 80148cc:	f240 22a9 	movw	r2, #681	; 0x2a9
 80148d0:	493c      	ldr	r1, [pc, #240]	; (80149c4 <tcp_bind+0x11c>)
 80148d2:	483d      	ldr	r0, [pc, #244]	; (80149c8 <tcp_bind+0x120>)
 80148d4:	f00a fa44 	bl	801ed60 <iprintf>
 80148d8:	f06f 030f 	mvn.w	r3, #15
 80148dc:	e06a      	b.n	80149b4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	7d1b      	ldrb	r3, [r3, #20]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d009      	beq.n	80148fa <tcp_bind+0x52>
 80148e6:	4b36      	ldr	r3, [pc, #216]	; (80149c0 <tcp_bind+0x118>)
 80148e8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80148ec:	4937      	ldr	r1, [pc, #220]	; (80149cc <tcp_bind+0x124>)
 80148ee:	4836      	ldr	r0, [pc, #216]	; (80149c8 <tcp_bind+0x120>)
 80148f0:	f00a fa36 	bl	801ed60 <iprintf>
 80148f4:	f06f 0305 	mvn.w	r3, #5
 80148f8:	e05c      	b.n	80149b4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80148fa:	88fb      	ldrh	r3, [r7, #6]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d109      	bne.n	8014914 <tcp_bind+0x6c>
    port = tcp_new_port();
 8014900:	f000 f9f0 	bl	8014ce4 <tcp_new_port>
 8014904:	4603      	mov	r3, r0
 8014906:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014908:	88fb      	ldrh	r3, [r7, #6]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d135      	bne.n	801497a <tcp_bind+0xd2>
      return ERR_BUF;
 801490e:	f06f 0301 	mvn.w	r3, #1
 8014912:	e04f      	b.n	80149b4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8014914:	2300      	movs	r3, #0
 8014916:	61fb      	str	r3, [r7, #28]
 8014918:	e02b      	b.n	8014972 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801491a:	4a2d      	ldr	r2, [pc, #180]	; (80149d0 <tcp_bind+0x128>)
 801491c:	69fb      	ldr	r3, [r7, #28]
 801491e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	61bb      	str	r3, [r7, #24]
 8014926:	e01e      	b.n	8014966 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8014928:	69bb      	ldr	r3, [r7, #24]
 801492a:	8adb      	ldrh	r3, [r3, #22]
 801492c:	88fa      	ldrh	r2, [r7, #6]
 801492e:	429a      	cmp	r2, r3
 8014930:	d116      	bne.n	8014960 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8014932:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8014934:	2b00      	cmp	r3, #0
 8014936:	d010      	beq.n	801495a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8014938:	69bb      	ldr	r3, [r7, #24]
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d00c      	beq.n	801495a <tcp_bind+0xb2>
 8014940:	68bb      	ldr	r3, [r7, #8]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d009      	beq.n	801495a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8014946:	68bb      	ldr	r3, [r7, #8]
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d005      	beq.n	801495a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801494e:	69bb      	ldr	r3, [r7, #24]
 8014950:	681a      	ldr	r2, [r3, #0]
 8014952:	68bb      	ldr	r3, [r7, #8]
 8014954:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8014956:	429a      	cmp	r2, r3
 8014958:	d102      	bne.n	8014960 <tcp_bind+0xb8>
              return ERR_USE;
 801495a:	f06f 0307 	mvn.w	r3, #7
 801495e:	e029      	b.n	80149b4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8014960:	69bb      	ldr	r3, [r7, #24]
 8014962:	68db      	ldr	r3, [r3, #12]
 8014964:	61bb      	str	r3, [r7, #24]
 8014966:	69bb      	ldr	r3, [r7, #24]
 8014968:	2b00      	cmp	r3, #0
 801496a:	d1dd      	bne.n	8014928 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801496c:	69fb      	ldr	r3, [r7, #28]
 801496e:	3301      	adds	r3, #1
 8014970:	61fb      	str	r3, [r7, #28]
 8014972:	69fa      	ldr	r2, [r7, #28]
 8014974:	697b      	ldr	r3, [r7, #20]
 8014976:	429a      	cmp	r2, r3
 8014978:	dbcf      	blt.n	801491a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801497a:	68bb      	ldr	r3, [r7, #8]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d00c      	beq.n	801499a <tcp_bind+0xf2>
 8014980:	68bb      	ldr	r3, [r7, #8]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d008      	beq.n	801499a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8014988:	68bb      	ldr	r3, [r7, #8]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d002      	beq.n	8014994 <tcp_bind+0xec>
 801498e:	68bb      	ldr	r3, [r7, #8]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	e000      	b.n	8014996 <tcp_bind+0xee>
 8014994:	2300      	movs	r3, #0
 8014996:	68fa      	ldr	r2, [r7, #12]
 8014998:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	88fa      	ldrh	r2, [r7, #6]
 801499e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80149a0:	4b0c      	ldr	r3, [pc, #48]	; (80149d4 <tcp_bind+0x12c>)
 80149a2:	681a      	ldr	r2, [r3, #0]
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	60da      	str	r2, [r3, #12]
 80149a8:	4a0a      	ldr	r2, [pc, #40]	; (80149d4 <tcp_bind+0x12c>)
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	6013      	str	r3, [r2, #0]
 80149ae:	f005 fccb 	bl	801a348 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80149b2:	2300      	movs	r3, #0
}
 80149b4:	4618      	mov	r0, r3
 80149b6:	3720      	adds	r7, #32
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}
 80149bc:	08026ca4 	.word	0x08026ca4
 80149c0:	08023cc8 	.word	0x08023cc8
 80149c4:	08023e5c 	.word	0x08023e5c
 80149c8:	08023d0c 	.word	0x08023d0c
 80149cc:	08023e74 	.word	0x08023e74
 80149d0:	08026c7c 	.word	0x08026c7c
 80149d4:	2000b7a8 	.word	0x2000b7a8

080149d8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80149d8:	b580      	push	{r7, lr}
 80149da:	b084      	sub	sp, #16
 80149dc:	af00      	add	r7, sp, #0
 80149de:	60f8      	str	r0, [r7, #12]
 80149e0:	60b9      	str	r1, [r7, #8]
 80149e2:	4613      	mov	r3, r2
 80149e4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80149e6:	68bb      	ldr	r3, [r7, #8]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d106      	bne.n	80149fa <tcp_accept_null+0x22>
 80149ec:	4b07      	ldr	r3, [pc, #28]	; (8014a0c <tcp_accept_null+0x34>)
 80149ee:	f240 320f 	movw	r2, #783	; 0x30f
 80149f2:	4907      	ldr	r1, [pc, #28]	; (8014a10 <tcp_accept_null+0x38>)
 80149f4:	4807      	ldr	r0, [pc, #28]	; (8014a14 <tcp_accept_null+0x3c>)
 80149f6:	f00a f9b3 	bl	801ed60 <iprintf>

  tcp_abort(pcb);
 80149fa:	68b8      	ldr	r0, [r7, #8]
 80149fc:	f7ff ff48 	bl	8014890 <tcp_abort>

  return ERR_ABRT;
 8014a00:	f06f 030c 	mvn.w	r3, #12
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	3710      	adds	r7, #16
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd80      	pop	{r7, pc}
 8014a0c:	08023cc8 	.word	0x08023cc8
 8014a10:	08023e9c 	.word	0x08023e9c
 8014a14:	08023d0c 	.word	0x08023d0c

08014a18 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b082      	sub	sp, #8
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
 8014a20:	460b      	mov	r3, r1
 8014a22:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8014a24:	78fb      	ldrb	r3, [r7, #3]
 8014a26:	2200      	movs	r2, #0
 8014a28:	4619      	mov	r1, r3
 8014a2a:	6878      	ldr	r0, [r7, #4]
 8014a2c:	f000 f806 	bl	8014a3c <tcp_listen_with_backlog_and_err>
 8014a30:	4603      	mov	r3, r0
}
 8014a32:	4618      	mov	r0, r3
 8014a34:	3708      	adds	r7, #8
 8014a36:	46bd      	mov	sp, r7
 8014a38:	bd80      	pop	{r7, pc}
	...

08014a3c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b088      	sub	sp, #32
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	60f8      	str	r0, [r7, #12]
 8014a44:	460b      	mov	r3, r1
 8014a46:	607a      	str	r2, [r7, #4]
 8014a48:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d109      	bne.n	8014a68 <tcp_listen_with_backlog_and_err+0x2c>
 8014a54:	4b47      	ldr	r3, [pc, #284]	; (8014b74 <tcp_listen_with_backlog_and_err+0x138>)
 8014a56:	f240 3259 	movw	r2, #857	; 0x359
 8014a5a:	4947      	ldr	r1, [pc, #284]	; (8014b78 <tcp_listen_with_backlog_and_err+0x13c>)
 8014a5c:	4847      	ldr	r0, [pc, #284]	; (8014b7c <tcp_listen_with_backlog_and_err+0x140>)
 8014a5e:	f00a f97f 	bl	801ed60 <iprintf>
 8014a62:	23f0      	movs	r3, #240	; 0xf0
 8014a64:	76fb      	strb	r3, [r7, #27]
 8014a66:	e079      	b.n	8014b5c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	7d1b      	ldrb	r3, [r3, #20]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d009      	beq.n	8014a84 <tcp_listen_with_backlog_and_err+0x48>
 8014a70:	4b40      	ldr	r3, [pc, #256]	; (8014b74 <tcp_listen_with_backlog_and_err+0x138>)
 8014a72:	f240 325a 	movw	r2, #858	; 0x35a
 8014a76:	4942      	ldr	r1, [pc, #264]	; (8014b80 <tcp_listen_with_backlog_and_err+0x144>)
 8014a78:	4840      	ldr	r0, [pc, #256]	; (8014b7c <tcp_listen_with_backlog_and_err+0x140>)
 8014a7a:	f00a f971 	bl	801ed60 <iprintf>
 8014a7e:	23f1      	movs	r3, #241	; 0xf1
 8014a80:	76fb      	strb	r3, [r7, #27]
 8014a82:	e06b      	b.n	8014b5c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	7d1b      	ldrb	r3, [r3, #20]
 8014a88:	2b01      	cmp	r3, #1
 8014a8a:	d104      	bne.n	8014a96 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8014a90:	23f7      	movs	r3, #247	; 0xf7
 8014a92:	76fb      	strb	r3, [r7, #27]
    goto done;
 8014a94:	e062      	b.n	8014b5c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8014a96:	2002      	movs	r0, #2
 8014a98:	f7fe fa2a 	bl	8012ef0 <memp_malloc>
 8014a9c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8014a9e:	69fb      	ldr	r3, [r7, #28]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d102      	bne.n	8014aaa <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8014aa4:	23ff      	movs	r3, #255	; 0xff
 8014aa6:	76fb      	strb	r3, [r7, #27]
    goto done;
 8014aa8:	e058      	b.n	8014b5c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	691a      	ldr	r2, [r3, #16]
 8014aae:	69fb      	ldr	r3, [r7, #28]
 8014ab0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	8ada      	ldrh	r2, [r3, #22]
 8014ab6:	69fb      	ldr	r3, [r7, #28]
 8014ab8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8014aba:	69fb      	ldr	r3, [r7, #28]
 8014abc:	2201      	movs	r2, #1
 8014abe:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	7d5a      	ldrb	r2, [r3, #21]
 8014ac4:	69fb      	ldr	r3, [r7, #28]
 8014ac6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	7a5a      	ldrb	r2, [r3, #9]
 8014acc:	69fb      	ldr	r3, [r7, #28]
 8014ace:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8014ad0:	69fb      	ldr	r3, [r7, #28]
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	7ada      	ldrb	r2, [r3, #11]
 8014ada:	69fb      	ldr	r3, [r7, #28]
 8014adc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	7a9a      	ldrb	r2, [r3, #10]
 8014ae2:	69fb      	ldr	r3, [r7, #28]
 8014ae4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	681a      	ldr	r2, [r3, #0]
 8014aea:	69fb      	ldr	r3, [r7, #28]
 8014aec:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	8adb      	ldrh	r3, [r3, #22]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d021      	beq.n	8014b3a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8014af6:	4b23      	ldr	r3, [pc, #140]	; (8014b84 <tcp_listen_with_backlog_and_err+0x148>)
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	68fa      	ldr	r2, [r7, #12]
 8014afc:	429a      	cmp	r2, r3
 8014afe:	d105      	bne.n	8014b0c <tcp_listen_with_backlog_and_err+0xd0>
 8014b00:	4b20      	ldr	r3, [pc, #128]	; (8014b84 <tcp_listen_with_backlog_and_err+0x148>)
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	68db      	ldr	r3, [r3, #12]
 8014b06:	4a1f      	ldr	r2, [pc, #124]	; (8014b84 <tcp_listen_with_backlog_and_err+0x148>)
 8014b08:	6013      	str	r3, [r2, #0]
 8014b0a:	e013      	b.n	8014b34 <tcp_listen_with_backlog_and_err+0xf8>
 8014b0c:	4b1d      	ldr	r3, [pc, #116]	; (8014b84 <tcp_listen_with_backlog_and_err+0x148>)
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	617b      	str	r3, [r7, #20]
 8014b12:	e00c      	b.n	8014b2e <tcp_listen_with_backlog_and_err+0xf2>
 8014b14:	697b      	ldr	r3, [r7, #20]
 8014b16:	68db      	ldr	r3, [r3, #12]
 8014b18:	68fa      	ldr	r2, [r7, #12]
 8014b1a:	429a      	cmp	r2, r3
 8014b1c:	d104      	bne.n	8014b28 <tcp_listen_with_backlog_and_err+0xec>
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	68da      	ldr	r2, [r3, #12]
 8014b22:	697b      	ldr	r3, [r7, #20]
 8014b24:	60da      	str	r2, [r3, #12]
 8014b26:	e005      	b.n	8014b34 <tcp_listen_with_backlog_and_err+0xf8>
 8014b28:	697b      	ldr	r3, [r7, #20]
 8014b2a:	68db      	ldr	r3, [r3, #12]
 8014b2c:	617b      	str	r3, [r7, #20]
 8014b2e:	697b      	ldr	r3, [r7, #20]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d1ef      	bne.n	8014b14 <tcp_listen_with_backlog_and_err+0xd8>
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	2200      	movs	r2, #0
 8014b38:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8014b3a:	68f8      	ldr	r0, [r7, #12]
 8014b3c:	f7ff fb64 	bl	8014208 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8014b40:	69fb      	ldr	r3, [r7, #28]
 8014b42:	4a11      	ldr	r2, [pc, #68]	; (8014b88 <tcp_listen_with_backlog_and_err+0x14c>)
 8014b44:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8014b46:	4b11      	ldr	r3, [pc, #68]	; (8014b8c <tcp_listen_with_backlog_and_err+0x150>)
 8014b48:	681a      	ldr	r2, [r3, #0]
 8014b4a:	69fb      	ldr	r3, [r7, #28]
 8014b4c:	60da      	str	r2, [r3, #12]
 8014b4e:	4a0f      	ldr	r2, [pc, #60]	; (8014b8c <tcp_listen_with_backlog_and_err+0x150>)
 8014b50:	69fb      	ldr	r3, [r7, #28]
 8014b52:	6013      	str	r3, [r2, #0]
 8014b54:	f005 fbf8 	bl	801a348 <tcp_timer_needed>
  res = ERR_OK;
 8014b58:	2300      	movs	r3, #0
 8014b5a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d002      	beq.n	8014b68 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	7efa      	ldrb	r2, [r7, #27]
 8014b66:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8014b68:	69fb      	ldr	r3, [r7, #28]
}
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	3720      	adds	r7, #32
 8014b6e:	46bd      	mov	sp, r7
 8014b70:	bd80      	pop	{r7, pc}
 8014b72:	bf00      	nop
 8014b74:	08023cc8 	.word	0x08023cc8
 8014b78:	08023ebc 	.word	0x08023ebc
 8014b7c:	08023d0c 	.word	0x08023d0c
 8014b80:	08023eec 	.word	0x08023eec
 8014b84:	2000b7a8 	.word	0x2000b7a8
 8014b88:	080149d9 	.word	0x080149d9
 8014b8c:	2000b7a4 	.word	0x2000b7a4

08014b90 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b084      	sub	sp, #16
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d106      	bne.n	8014bac <tcp_update_rcv_ann_wnd+0x1c>
 8014b9e:	4b25      	ldr	r3, [pc, #148]	; (8014c34 <tcp_update_rcv_ann_wnd+0xa4>)
 8014ba0:	f240 32a6 	movw	r2, #934	; 0x3a6
 8014ba4:	4924      	ldr	r1, [pc, #144]	; (8014c38 <tcp_update_rcv_ann_wnd+0xa8>)
 8014ba6:	4825      	ldr	r0, [pc, #148]	; (8014c3c <tcp_update_rcv_ann_wnd+0xac>)
 8014ba8:	f00a f8da 	bl	801ed60 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bb0:	687a      	ldr	r2, [r7, #4]
 8014bb2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8014bb4:	4413      	add	r3, r2
 8014bb6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bbc:	687a      	ldr	r2, [r7, #4]
 8014bbe:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8014bc0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8014bc4:	bf28      	it	cs
 8014bc6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8014bca:	b292      	uxth	r2, r2
 8014bcc:	4413      	add	r3, r2
 8014bce:	68fa      	ldr	r2, [r7, #12]
 8014bd0:	1ad3      	subs	r3, r2, r3
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	db08      	blt.n	8014be8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014be2:	68fa      	ldr	r2, [r7, #12]
 8014be4:	1ad3      	subs	r3, r2, r3
 8014be6:	e020      	b.n	8014c2a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bf0:	1ad3      	subs	r3, r2, r3
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	dd03      	ble.n	8014bfe <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8014bfc:	e014      	b.n	8014c28 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c06:	1ad3      	subs	r3, r2, r3
 8014c08:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8014c0a:	68bb      	ldr	r3, [r7, #8]
 8014c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014c10:	d306      	bcc.n	8014c20 <tcp_update_rcv_ann_wnd+0x90>
 8014c12:	4b08      	ldr	r3, [pc, #32]	; (8014c34 <tcp_update_rcv_ann_wnd+0xa4>)
 8014c14:	f240 32b6 	movw	r2, #950	; 0x3b6
 8014c18:	4909      	ldr	r1, [pc, #36]	; (8014c40 <tcp_update_rcv_ann_wnd+0xb0>)
 8014c1a:	4808      	ldr	r0, [pc, #32]	; (8014c3c <tcp_update_rcv_ann_wnd+0xac>)
 8014c1c:	f00a f8a0 	bl	801ed60 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8014c20:	68bb      	ldr	r3, [r7, #8]
 8014c22:	b29a      	uxth	r2, r3
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8014c28:	2300      	movs	r3, #0
  }
}
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	3710      	adds	r7, #16
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	bd80      	pop	{r7, pc}
 8014c32:	bf00      	nop
 8014c34:	08023cc8 	.word	0x08023cc8
 8014c38:	08023f24 	.word	0x08023f24
 8014c3c:	08023d0c 	.word	0x08023d0c
 8014c40:	08023f48 	.word	0x08023f48

08014c44 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b084      	sub	sp, #16
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
 8014c4c:	460b      	mov	r3, r1
 8014c4e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d107      	bne.n	8014c66 <tcp_recved+0x22>
 8014c56:	4b1f      	ldr	r3, [pc, #124]	; (8014cd4 <tcp_recved+0x90>)
 8014c58:	f240 32cf 	movw	r2, #975	; 0x3cf
 8014c5c:	491e      	ldr	r1, [pc, #120]	; (8014cd8 <tcp_recved+0x94>)
 8014c5e:	481f      	ldr	r0, [pc, #124]	; (8014cdc <tcp_recved+0x98>)
 8014c60:	f00a f87e 	bl	801ed60 <iprintf>
 8014c64:	e032      	b.n	8014ccc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	7d1b      	ldrb	r3, [r3, #20]
 8014c6a:	2b01      	cmp	r3, #1
 8014c6c:	d106      	bne.n	8014c7c <tcp_recved+0x38>
 8014c6e:	4b19      	ldr	r3, [pc, #100]	; (8014cd4 <tcp_recved+0x90>)
 8014c70:	f240 32d2 	movw	r2, #978	; 0x3d2
 8014c74:	491a      	ldr	r1, [pc, #104]	; (8014ce0 <tcp_recved+0x9c>)
 8014c76:	4819      	ldr	r0, [pc, #100]	; (8014cdc <tcp_recved+0x98>)
 8014c78:	f00a f872 	bl	801ed60 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014c80:	887b      	ldrh	r3, [r7, #2]
 8014c82:	4413      	add	r3, r2
 8014c84:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8014c86:	89fb      	ldrh	r3, [r7, #14]
 8014c88:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014c8c:	d804      	bhi.n	8014c98 <tcp_recved+0x54>
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014c92:	89fa      	ldrh	r2, [r7, #14]
 8014c94:	429a      	cmp	r2, r3
 8014c96:	d204      	bcs.n	8014ca2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8014c9e:	851a      	strh	r2, [r3, #40]	; 0x28
 8014ca0:	e002      	b.n	8014ca8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	89fa      	ldrh	r2, [r7, #14]
 8014ca6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8014ca8:	6878      	ldr	r0, [r7, #4]
 8014caa:	f7ff ff71 	bl	8014b90 <tcp_update_rcv_ann_wnd>
 8014cae:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8014cb0:	68bb      	ldr	r3, [r7, #8]
 8014cb2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8014cb6:	d309      	bcc.n	8014ccc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	8b5b      	ldrh	r3, [r3, #26]
 8014cbc:	f043 0302 	orr.w	r3, r3, #2
 8014cc0:	b29a      	uxth	r2, r3
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014cc6:	6878      	ldr	r0, [r7, #4]
 8014cc8:	f004 fbc8 	bl	801945c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8014ccc:	3710      	adds	r7, #16
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	bd80      	pop	{r7, pc}
 8014cd2:	bf00      	nop
 8014cd4:	08023cc8 	.word	0x08023cc8
 8014cd8:	08023f64 	.word	0x08023f64
 8014cdc:	08023d0c 	.word	0x08023d0c
 8014ce0:	08023f7c 	.word	0x08023f7c

08014ce4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8014ce4:	b480      	push	{r7}
 8014ce6:	b083      	sub	sp, #12
 8014ce8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8014cea:	2300      	movs	r3, #0
 8014cec:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8014cee:	4b1e      	ldr	r3, [pc, #120]	; (8014d68 <tcp_new_port+0x84>)
 8014cf0:	881b      	ldrh	r3, [r3, #0]
 8014cf2:	3301      	adds	r3, #1
 8014cf4:	b29a      	uxth	r2, r3
 8014cf6:	4b1c      	ldr	r3, [pc, #112]	; (8014d68 <tcp_new_port+0x84>)
 8014cf8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8014cfa:	4b1b      	ldr	r3, [pc, #108]	; (8014d68 <tcp_new_port+0x84>)
 8014cfc:	881b      	ldrh	r3, [r3, #0]
 8014cfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d02:	4293      	cmp	r3, r2
 8014d04:	d103      	bne.n	8014d0e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8014d06:	4b18      	ldr	r3, [pc, #96]	; (8014d68 <tcp_new_port+0x84>)
 8014d08:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014d0c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8014d0e:	2300      	movs	r3, #0
 8014d10:	71fb      	strb	r3, [r7, #7]
 8014d12:	e01e      	b.n	8014d52 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8014d14:	79fb      	ldrb	r3, [r7, #7]
 8014d16:	4a15      	ldr	r2, [pc, #84]	; (8014d6c <tcp_new_port+0x88>)
 8014d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	603b      	str	r3, [r7, #0]
 8014d20:	e011      	b.n	8014d46 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8014d22:	683b      	ldr	r3, [r7, #0]
 8014d24:	8ada      	ldrh	r2, [r3, #22]
 8014d26:	4b10      	ldr	r3, [pc, #64]	; (8014d68 <tcp_new_port+0x84>)
 8014d28:	881b      	ldrh	r3, [r3, #0]
 8014d2a:	429a      	cmp	r2, r3
 8014d2c:	d108      	bne.n	8014d40 <tcp_new_port+0x5c>
        n++;
 8014d2e:	88bb      	ldrh	r3, [r7, #4]
 8014d30:	3301      	adds	r3, #1
 8014d32:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8014d34:	88bb      	ldrh	r3, [r7, #4]
 8014d36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014d3a:	d3d8      	bcc.n	8014cee <tcp_new_port+0xa>
          return 0;
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	e00d      	b.n	8014d5c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8014d40:	683b      	ldr	r3, [r7, #0]
 8014d42:	68db      	ldr	r3, [r3, #12]
 8014d44:	603b      	str	r3, [r7, #0]
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d1ea      	bne.n	8014d22 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8014d4c:	79fb      	ldrb	r3, [r7, #7]
 8014d4e:	3301      	adds	r3, #1
 8014d50:	71fb      	strb	r3, [r7, #7]
 8014d52:	79fb      	ldrb	r3, [r7, #7]
 8014d54:	2b03      	cmp	r3, #3
 8014d56:	d9dd      	bls.n	8014d14 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8014d58:	4b03      	ldr	r3, [pc, #12]	; (8014d68 <tcp_new_port+0x84>)
 8014d5a:	881b      	ldrh	r3, [r3, #0]
}
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	370c      	adds	r7, #12
 8014d60:	46bd      	mov	sp, r7
 8014d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d66:	4770      	bx	lr
 8014d68:	2000013c 	.word	0x2000013c
 8014d6c:	08026c7c 	.word	0x08026c7c

08014d70 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8014d70:	b5b0      	push	{r4, r5, r7, lr}
 8014d72:	b090      	sub	sp, #64	; 0x40
 8014d74:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8014d76:	2300      	movs	r3, #0
 8014d78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8014d7c:	4b94      	ldr	r3, [pc, #592]	; (8014fd0 <tcp_slowtmr+0x260>)
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	3301      	adds	r3, #1
 8014d82:	4a93      	ldr	r2, [pc, #588]	; (8014fd0 <tcp_slowtmr+0x260>)
 8014d84:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8014d86:	4b93      	ldr	r3, [pc, #588]	; (8014fd4 <tcp_slowtmr+0x264>)
 8014d88:	781b      	ldrb	r3, [r3, #0]
 8014d8a:	3301      	adds	r3, #1
 8014d8c:	b2da      	uxtb	r2, r3
 8014d8e:	4b91      	ldr	r3, [pc, #580]	; (8014fd4 <tcp_slowtmr+0x264>)
 8014d90:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8014d92:	2300      	movs	r3, #0
 8014d94:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8014d96:	4b90      	ldr	r3, [pc, #576]	; (8014fd8 <tcp_slowtmr+0x268>)
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8014d9c:	e29f      	b.n	80152de <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8014d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014da0:	7d1b      	ldrb	r3, [r3, #20]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d106      	bne.n	8014db4 <tcp_slowtmr+0x44>
 8014da6:	4b8d      	ldr	r3, [pc, #564]	; (8014fdc <tcp_slowtmr+0x26c>)
 8014da8:	f240 42be 	movw	r2, #1214	; 0x4be
 8014dac:	498c      	ldr	r1, [pc, #560]	; (8014fe0 <tcp_slowtmr+0x270>)
 8014dae:	488d      	ldr	r0, [pc, #564]	; (8014fe4 <tcp_slowtmr+0x274>)
 8014db0:	f009 ffd6 	bl	801ed60 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8014db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014db6:	7d1b      	ldrb	r3, [r3, #20]
 8014db8:	2b01      	cmp	r3, #1
 8014dba:	d106      	bne.n	8014dca <tcp_slowtmr+0x5a>
 8014dbc:	4b87      	ldr	r3, [pc, #540]	; (8014fdc <tcp_slowtmr+0x26c>)
 8014dbe:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8014dc2:	4989      	ldr	r1, [pc, #548]	; (8014fe8 <tcp_slowtmr+0x278>)
 8014dc4:	4887      	ldr	r0, [pc, #540]	; (8014fe4 <tcp_slowtmr+0x274>)
 8014dc6:	f009 ffcb 	bl	801ed60 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8014dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dcc:	7d1b      	ldrb	r3, [r3, #20]
 8014dce:	2b0a      	cmp	r3, #10
 8014dd0:	d106      	bne.n	8014de0 <tcp_slowtmr+0x70>
 8014dd2:	4b82      	ldr	r3, [pc, #520]	; (8014fdc <tcp_slowtmr+0x26c>)
 8014dd4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8014dd8:	4984      	ldr	r1, [pc, #528]	; (8014fec <tcp_slowtmr+0x27c>)
 8014dda:	4882      	ldr	r0, [pc, #520]	; (8014fe4 <tcp_slowtmr+0x274>)
 8014ddc:	f009 ffc0 	bl	801ed60 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8014de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014de2:	7f9a      	ldrb	r2, [r3, #30]
 8014de4:	4b7b      	ldr	r3, [pc, #492]	; (8014fd4 <tcp_slowtmr+0x264>)
 8014de6:	781b      	ldrb	r3, [r3, #0]
 8014de8:	429a      	cmp	r2, r3
 8014dea:	d105      	bne.n	8014df8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8014dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014df2:	68db      	ldr	r3, [r3, #12]
 8014df4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8014df6:	e272      	b.n	80152de <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8014df8:	4b76      	ldr	r3, [pc, #472]	; (8014fd4 <tcp_slowtmr+0x264>)
 8014dfa:	781a      	ldrb	r2, [r3, #0]
 8014dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dfe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8014e00:	2300      	movs	r3, #0
 8014e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8014e06:	2300      	movs	r3, #0
 8014e08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8014e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e0e:	7d1b      	ldrb	r3, [r3, #20]
 8014e10:	2b02      	cmp	r3, #2
 8014e12:	d10a      	bne.n	8014e2a <tcp_slowtmr+0xba>
 8014e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014e1a:	2b05      	cmp	r3, #5
 8014e1c:	d905      	bls.n	8014e2a <tcp_slowtmr+0xba>
      ++pcb_remove;
 8014e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e22:	3301      	adds	r3, #1
 8014e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014e28:	e11e      	b.n	8015068 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8014e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014e30:	2b0b      	cmp	r3, #11
 8014e32:	d905      	bls.n	8014e40 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8014e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e38:	3301      	adds	r3, #1
 8014e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014e3e:	e113      	b.n	8015068 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8014e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e42:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d075      	beq.n	8014f36 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8014e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d006      	beq.n	8014e60 <tcp_slowtmr+0xf0>
 8014e52:	4b62      	ldr	r3, [pc, #392]	; (8014fdc <tcp_slowtmr+0x26c>)
 8014e54:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8014e58:	4965      	ldr	r1, [pc, #404]	; (8014ff0 <tcp_slowtmr+0x280>)
 8014e5a:	4862      	ldr	r0, [pc, #392]	; (8014fe4 <tcp_slowtmr+0x274>)
 8014e5c:	f009 ff80 	bl	801ed60 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8014e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d106      	bne.n	8014e76 <tcp_slowtmr+0x106>
 8014e68:	4b5c      	ldr	r3, [pc, #368]	; (8014fdc <tcp_slowtmr+0x26c>)
 8014e6a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8014e6e:	4961      	ldr	r1, [pc, #388]	; (8014ff4 <tcp_slowtmr+0x284>)
 8014e70:	485c      	ldr	r0, [pc, #368]	; (8014fe4 <tcp_slowtmr+0x274>)
 8014e72:	f009 ff75 	bl	801ed60 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8014e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e78:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014e7c:	2b0b      	cmp	r3, #11
 8014e7e:	d905      	bls.n	8014e8c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8014e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e84:	3301      	adds	r3, #1
 8014e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014e8a:	e0ed      	b.n	8015068 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8014e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e8e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014e92:	3b01      	subs	r3, #1
 8014e94:	4a58      	ldr	r2, [pc, #352]	; (8014ff8 <tcp_slowtmr+0x288>)
 8014e96:	5cd3      	ldrb	r3, [r2, r3]
 8014e98:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8014e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e9c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8014ea0:	7c7a      	ldrb	r2, [r7, #17]
 8014ea2:	429a      	cmp	r2, r3
 8014ea4:	d907      	bls.n	8014eb6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8014ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ea8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8014eac:	3301      	adds	r3, #1
 8014eae:	b2da      	uxtb	r2, r3
 8014eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eb2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8014eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eb8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8014ebc:	7c7a      	ldrb	r2, [r7, #17]
 8014ebe:	429a      	cmp	r2, r3
 8014ec0:	f200 80d2 	bhi.w	8015068 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8014ec4:	2301      	movs	r3, #1
 8014ec6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8014ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d108      	bne.n	8014ee4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8014ed2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014ed4:	f005 f96a 	bl	801a1ac <tcp_zero_window_probe>
 8014ed8:	4603      	mov	r3, r0
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d014      	beq.n	8014f08 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8014ede:	2300      	movs	r3, #0
 8014ee0:	623b      	str	r3, [r7, #32]
 8014ee2:	e011      	b.n	8014f08 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8014ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ee6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014eea:	4619      	mov	r1, r3
 8014eec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014eee:	f004 f82f 	bl	8018f50 <tcp_split_unsent_seg>
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d107      	bne.n	8014f08 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8014ef8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014efa:	f004 faaf 	bl	801945c <tcp_output>
 8014efe:	4603      	mov	r3, r0
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d101      	bne.n	8014f08 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8014f04:	2300      	movs	r3, #0
 8014f06:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8014f08:	6a3b      	ldr	r3, [r7, #32]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	f000 80ac 	beq.w	8015068 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8014f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f12:	2200      	movs	r2, #0
 8014f14:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8014f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f1a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014f1e:	2b06      	cmp	r3, #6
 8014f20:	f200 80a2 	bhi.w	8015068 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8014f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f26:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014f2a:	3301      	adds	r3, #1
 8014f2c:	b2da      	uxtb	r2, r3
 8014f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f30:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8014f34:	e098      	b.n	8015068 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8014f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f38:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	db0f      	blt.n	8014f60 <tcp_slowtmr+0x1f0>
 8014f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f42:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014f46:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014f4a:	4293      	cmp	r3, r2
 8014f4c:	d008      	beq.n	8014f60 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8014f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f50:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014f54:	b29b      	uxth	r3, r3
 8014f56:	3301      	adds	r3, #1
 8014f58:	b29b      	uxth	r3, r3
 8014f5a:	b21a      	sxth	r2, r3
 8014f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f5e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8014f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f62:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8014f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f68:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8014f6c:	429a      	cmp	r2, r3
 8014f6e:	db7b      	blt.n	8015068 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8014f70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014f72:	f004 fd65 	bl	8019a40 <tcp_rexmit_rto_prepare>
 8014f76:	4603      	mov	r3, r0
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d007      	beq.n	8014f8c <tcp_slowtmr+0x21c>
 8014f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d171      	bne.n	8015068 <tcp_slowtmr+0x2f8>
 8014f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d06d      	beq.n	8015068 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8014f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f8e:	7d1b      	ldrb	r3, [r3, #20]
 8014f90:	2b02      	cmp	r3, #2
 8014f92:	d03a      	beq.n	801500a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8014f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014f9a:	2b0c      	cmp	r3, #12
 8014f9c:	bf28      	it	cs
 8014f9e:	230c      	movcs	r3, #12
 8014fa0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8014fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fa4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014fa8:	10db      	asrs	r3, r3, #3
 8014faa:	b21b      	sxth	r3, r3
 8014fac:	461a      	mov	r2, r3
 8014fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fb0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014fb4:	4413      	add	r3, r2
 8014fb6:	7efa      	ldrb	r2, [r7, #27]
 8014fb8:	4910      	ldr	r1, [pc, #64]	; (8014ffc <tcp_slowtmr+0x28c>)
 8014fba:	5c8a      	ldrb	r2, [r1, r2]
 8014fbc:	4093      	lsls	r3, r2
 8014fbe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8014fc0:	697b      	ldr	r3, [r7, #20]
 8014fc2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8014fc6:	4293      	cmp	r3, r2
 8014fc8:	dc1a      	bgt.n	8015000 <tcp_slowtmr+0x290>
 8014fca:	697b      	ldr	r3, [r7, #20]
 8014fcc:	b21a      	sxth	r2, r3
 8014fce:	e019      	b.n	8015004 <tcp_slowtmr+0x294>
 8014fd0:	2000b7a0 	.word	0x2000b7a0
 8014fd4:	2000475a 	.word	0x2000475a
 8014fd8:	2000b79c 	.word	0x2000b79c
 8014fdc:	08023cc8 	.word	0x08023cc8
 8014fe0:	0802400c 	.word	0x0802400c
 8014fe4:	08023d0c 	.word	0x08023d0c
 8014fe8:	08024038 	.word	0x08024038
 8014fec:	08024064 	.word	0x08024064
 8014ff0:	08024094 	.word	0x08024094
 8014ff4:	080240c8 	.word	0x080240c8
 8014ff8:	08026c74 	.word	0x08026c74
 8014ffc:	08026c64 	.word	0x08026c64
 8015000:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015006:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801500c:	2200      	movs	r2, #0
 801500e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015012:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015018:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801501c:	4293      	cmp	r3, r2
 801501e:	bf28      	it	cs
 8015020:	4613      	movcs	r3, r2
 8015022:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015024:	8a7b      	ldrh	r3, [r7, #18]
 8015026:	085b      	lsrs	r3, r3, #1
 8015028:	b29a      	uxth	r2, r3
 801502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801502c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015032:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015038:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801503a:	005b      	lsls	r3, r3, #1
 801503c:	b29b      	uxth	r3, r3
 801503e:	429a      	cmp	r2, r3
 8015040:	d206      	bcs.n	8015050 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8015042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015044:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015046:	005b      	lsls	r3, r3, #1
 8015048:	b29a      	uxth	r2, r3
 801504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801504c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8015050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015052:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8015054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015056:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801505c:	2200      	movs	r2, #0
 801505e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8015062:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015064:	f004 fd5c 	bl	8019b20 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8015068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801506a:	7d1b      	ldrb	r3, [r3, #20]
 801506c:	2b06      	cmp	r3, #6
 801506e:	d111      	bne.n	8015094 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8015070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015072:	8b5b      	ldrh	r3, [r3, #26]
 8015074:	f003 0310 	and.w	r3, r3, #16
 8015078:	2b00      	cmp	r3, #0
 801507a:	d00b      	beq.n	8015094 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801507c:	4b9d      	ldr	r3, [pc, #628]	; (80152f4 <tcp_slowtmr+0x584>)
 801507e:	681a      	ldr	r2, [r3, #0]
 8015080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015082:	6a1b      	ldr	r3, [r3, #32]
 8015084:	1ad3      	subs	r3, r2, r3
 8015086:	2b28      	cmp	r3, #40	; 0x28
 8015088:	d904      	bls.n	8015094 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801508a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801508e:	3301      	adds	r3, #1
 8015090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015096:	7a5b      	ldrb	r3, [r3, #9]
 8015098:	f003 0308 	and.w	r3, r3, #8
 801509c:	2b00      	cmp	r3, #0
 801509e:	d04c      	beq.n	801513a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80150a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150a2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80150a4:	2b04      	cmp	r3, #4
 80150a6:	d003      	beq.n	80150b0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80150a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150aa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80150ac:	2b07      	cmp	r3, #7
 80150ae:	d144      	bne.n	801513a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80150b0:	4b90      	ldr	r3, [pc, #576]	; (80152f4 <tcp_slowtmr+0x584>)
 80150b2:	681a      	ldr	r2, [r3, #0]
 80150b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150b6:	6a1b      	ldr	r3, [r3, #32]
 80150b8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80150ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80150c0:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80150c4:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80150c8:	498b      	ldr	r1, [pc, #556]	; (80152f8 <tcp_slowtmr+0x588>)
 80150ca:	fba1 1303 	umull	r1, r3, r1, r3
 80150ce:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80150d0:	429a      	cmp	r2, r3
 80150d2:	d90a      	bls.n	80150ea <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80150d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150d8:	3301      	adds	r3, #1
 80150da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80150de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80150e2:	3301      	adds	r3, #1
 80150e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80150e8:	e027      	b.n	801513a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80150ea:	4b82      	ldr	r3, [pc, #520]	; (80152f4 <tcp_slowtmr+0x584>)
 80150ec:	681a      	ldr	r2, [r3, #0]
 80150ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150f0:	6a1b      	ldr	r3, [r3, #32]
 80150f2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80150f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150f6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80150fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150fc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8015100:	4618      	mov	r0, r3
 8015102:	4b7e      	ldr	r3, [pc, #504]	; (80152fc <tcp_slowtmr+0x58c>)
 8015104:	fb03 f300 	mul.w	r3, r3, r0
 8015108:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801510a:	497b      	ldr	r1, [pc, #492]	; (80152f8 <tcp_slowtmr+0x588>)
 801510c:	fba1 1303 	umull	r1, r3, r1, r3
 8015110:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015112:	429a      	cmp	r2, r3
 8015114:	d911      	bls.n	801513a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8015116:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015118:	f005 f808 	bl	801a12c <tcp_keepalive>
 801511c:	4603      	mov	r3, r0
 801511e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8015122:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8015126:	2b00      	cmp	r3, #0
 8015128:	d107      	bne.n	801513a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801512a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801512c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8015130:	3301      	adds	r3, #1
 8015132:	b2da      	uxtb	r2, r3
 8015134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015136:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801513a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801513c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801513e:	2b00      	cmp	r3, #0
 8015140:	d011      	beq.n	8015166 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8015142:	4b6c      	ldr	r3, [pc, #432]	; (80152f4 <tcp_slowtmr+0x584>)
 8015144:	681a      	ldr	r2, [r3, #0]
 8015146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015148:	6a1b      	ldr	r3, [r3, #32]
 801514a:	1ad2      	subs	r2, r2, r3
 801514c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801514e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8015152:	4619      	mov	r1, r3
 8015154:	460b      	mov	r3, r1
 8015156:	005b      	lsls	r3, r3, #1
 8015158:	440b      	add	r3, r1
 801515a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801515c:	429a      	cmp	r2, r3
 801515e:	d302      	bcc.n	8015166 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8015160:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015162:	f000 fec7 	bl	8015ef4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8015166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015168:	7d1b      	ldrb	r3, [r3, #20]
 801516a:	2b03      	cmp	r3, #3
 801516c:	d10b      	bne.n	8015186 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801516e:	4b61      	ldr	r3, [pc, #388]	; (80152f4 <tcp_slowtmr+0x584>)
 8015170:	681a      	ldr	r2, [r3, #0]
 8015172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015174:	6a1b      	ldr	r3, [r3, #32]
 8015176:	1ad3      	subs	r3, r2, r3
 8015178:	2b28      	cmp	r3, #40	; 0x28
 801517a:	d904      	bls.n	8015186 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801517c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015180:	3301      	adds	r3, #1
 8015182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8015186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015188:	7d1b      	ldrb	r3, [r3, #20]
 801518a:	2b09      	cmp	r3, #9
 801518c:	d10b      	bne.n	80151a6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801518e:	4b59      	ldr	r3, [pc, #356]	; (80152f4 <tcp_slowtmr+0x584>)
 8015190:	681a      	ldr	r2, [r3, #0]
 8015192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015194:	6a1b      	ldr	r3, [r3, #32]
 8015196:	1ad3      	subs	r3, r2, r3
 8015198:	2bf0      	cmp	r3, #240	; 0xf0
 801519a:	d904      	bls.n	80151a6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801519c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80151a0:	3301      	adds	r3, #1
 80151a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80151a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d060      	beq.n	8015270 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80151ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80151b4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80151b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80151b8:	f000 fce8 	bl	8015b8c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80151bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d010      	beq.n	80151e4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80151c2:	4b4f      	ldr	r3, [pc, #316]	; (8015300 <tcp_slowtmr+0x590>)
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d106      	bne.n	80151da <tcp_slowtmr+0x46a>
 80151cc:	4b4d      	ldr	r3, [pc, #308]	; (8015304 <tcp_slowtmr+0x594>)
 80151ce:	f240 526d 	movw	r2, #1389	; 0x56d
 80151d2:	494d      	ldr	r1, [pc, #308]	; (8015308 <tcp_slowtmr+0x598>)
 80151d4:	484d      	ldr	r0, [pc, #308]	; (801530c <tcp_slowtmr+0x59c>)
 80151d6:	f009 fdc3 	bl	801ed60 <iprintf>
        prev->next = pcb->next;
 80151da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151dc:	68da      	ldr	r2, [r3, #12]
 80151de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151e0:	60da      	str	r2, [r3, #12]
 80151e2:	e00f      	b.n	8015204 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80151e4:	4b46      	ldr	r3, [pc, #280]	; (8015300 <tcp_slowtmr+0x590>)
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80151ea:	429a      	cmp	r2, r3
 80151ec:	d006      	beq.n	80151fc <tcp_slowtmr+0x48c>
 80151ee:	4b45      	ldr	r3, [pc, #276]	; (8015304 <tcp_slowtmr+0x594>)
 80151f0:	f240 5271 	movw	r2, #1393	; 0x571
 80151f4:	4946      	ldr	r1, [pc, #280]	; (8015310 <tcp_slowtmr+0x5a0>)
 80151f6:	4845      	ldr	r0, [pc, #276]	; (801530c <tcp_slowtmr+0x59c>)
 80151f8:	f009 fdb2 	bl	801ed60 <iprintf>
        tcp_active_pcbs = pcb->next;
 80151fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151fe:	68db      	ldr	r3, [r3, #12]
 8015200:	4a3f      	ldr	r2, [pc, #252]	; (8015300 <tcp_slowtmr+0x590>)
 8015202:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8015204:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015208:	2b00      	cmp	r3, #0
 801520a:	d013      	beq.n	8015234 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801520e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015212:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015214:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8015216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015218:	3304      	adds	r3, #4
 801521a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801521c:	8ad2      	ldrh	r2, [r2, #22]
 801521e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015220:	8b09      	ldrh	r1, [r1, #24]
 8015222:	9102      	str	r1, [sp, #8]
 8015224:	9201      	str	r2, [sp, #4]
 8015226:	9300      	str	r3, [sp, #0]
 8015228:	462b      	mov	r3, r5
 801522a:	4622      	mov	r2, r4
 801522c:	4601      	mov	r1, r0
 801522e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015230:	f004 fec8 	bl	8019fc4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8015234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015236:	691b      	ldr	r3, [r3, #16]
 8015238:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801523a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801523c:	7d1b      	ldrb	r3, [r3, #20]
 801523e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8015240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015242:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8015244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015246:	68db      	ldr	r3, [r3, #12]
 8015248:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801524a:	6838      	ldr	r0, [r7, #0]
 801524c:	f7fe ffdc 	bl	8014208 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8015250:	4b30      	ldr	r3, [pc, #192]	; (8015314 <tcp_slowtmr+0x5a4>)
 8015252:	2200      	movs	r2, #0
 8015254:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d004      	beq.n	8015266 <tcp_slowtmr+0x4f6>
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	f06f 010c 	mvn.w	r1, #12
 8015262:	68b8      	ldr	r0, [r7, #8]
 8015264:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8015266:	4b2b      	ldr	r3, [pc, #172]	; (8015314 <tcp_slowtmr+0x5a4>)
 8015268:	781b      	ldrb	r3, [r3, #0]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d037      	beq.n	80152de <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801526e:	e590      	b.n	8014d92 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8015270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015272:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015276:	68db      	ldr	r3, [r3, #12]
 8015278:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801527a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801527c:	7f1b      	ldrb	r3, [r3, #28]
 801527e:	3301      	adds	r3, #1
 8015280:	b2da      	uxtb	r2, r3
 8015282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015284:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8015286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015288:	7f1a      	ldrb	r2, [r3, #28]
 801528a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801528c:	7f5b      	ldrb	r3, [r3, #29]
 801528e:	429a      	cmp	r2, r3
 8015290:	d325      	bcc.n	80152de <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8015292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015294:	2200      	movs	r2, #0
 8015296:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8015298:	4b1e      	ldr	r3, [pc, #120]	; (8015314 <tcp_slowtmr+0x5a4>)
 801529a:	2200      	movs	r2, #0
 801529c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d00b      	beq.n	80152c0 <tcp_slowtmr+0x550>
 80152a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80152ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80152b0:	6912      	ldr	r2, [r2, #16]
 80152b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80152b4:	4610      	mov	r0, r2
 80152b6:	4798      	blx	r3
 80152b8:	4603      	mov	r3, r0
 80152ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80152be:	e002      	b.n	80152c6 <tcp_slowtmr+0x556>
 80152c0:	2300      	movs	r3, #0
 80152c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80152c6:	4b13      	ldr	r3, [pc, #76]	; (8015314 <tcp_slowtmr+0x5a4>)
 80152c8:	781b      	ldrb	r3, [r3, #0]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d000      	beq.n	80152d0 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80152ce:	e560      	b.n	8014d92 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80152d0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d102      	bne.n	80152de <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80152d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80152da:	f004 f8bf 	bl	801945c <tcp_output>
  while (pcb != NULL) {
 80152de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	f47f ad5c 	bne.w	8014d9e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80152e6:	2300      	movs	r3, #0
 80152e8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80152ea:	4b0b      	ldr	r3, [pc, #44]	; (8015318 <tcp_slowtmr+0x5a8>)
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80152f0:	e067      	b.n	80153c2 <tcp_slowtmr+0x652>
 80152f2:	bf00      	nop
 80152f4:	2000b7a0 	.word	0x2000b7a0
 80152f8:	10624dd3 	.word	0x10624dd3
 80152fc:	000124f8 	.word	0x000124f8
 8015300:	2000b79c 	.word	0x2000b79c
 8015304:	08023cc8 	.word	0x08023cc8
 8015308:	08024100 	.word	0x08024100
 801530c:	08023d0c 	.word	0x08023d0c
 8015310:	0802412c 	.word	0x0802412c
 8015314:	2000b798 	.word	0x2000b798
 8015318:	2000b7ac 	.word	0x2000b7ac
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801531c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801531e:	7d1b      	ldrb	r3, [r3, #20]
 8015320:	2b0a      	cmp	r3, #10
 8015322:	d006      	beq.n	8015332 <tcp_slowtmr+0x5c2>
 8015324:	4b2b      	ldr	r3, [pc, #172]	; (80153d4 <tcp_slowtmr+0x664>)
 8015326:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801532a:	492b      	ldr	r1, [pc, #172]	; (80153d8 <tcp_slowtmr+0x668>)
 801532c:	482b      	ldr	r0, [pc, #172]	; (80153dc <tcp_slowtmr+0x66c>)
 801532e:	f009 fd17 	bl	801ed60 <iprintf>
    pcb_remove = 0;
 8015332:	2300      	movs	r3, #0
 8015334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015338:	4b29      	ldr	r3, [pc, #164]	; (80153e0 <tcp_slowtmr+0x670>)
 801533a:	681a      	ldr	r2, [r3, #0]
 801533c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801533e:	6a1b      	ldr	r3, [r3, #32]
 8015340:	1ad3      	subs	r3, r2, r3
 8015342:	2bf0      	cmp	r3, #240	; 0xf0
 8015344:	d904      	bls.n	8015350 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8015346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801534a:	3301      	adds	r3, #1
 801534c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015354:	2b00      	cmp	r3, #0
 8015356:	d02f      	beq.n	80153b8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8015358:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801535a:	f000 fc17 	bl	8015b8c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015360:	2b00      	cmp	r3, #0
 8015362:	d010      	beq.n	8015386 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015364:	4b1f      	ldr	r3, [pc, #124]	; (80153e4 <tcp_slowtmr+0x674>)
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801536a:	429a      	cmp	r2, r3
 801536c:	d106      	bne.n	801537c <tcp_slowtmr+0x60c>
 801536e:	4b19      	ldr	r3, [pc, #100]	; (80153d4 <tcp_slowtmr+0x664>)
 8015370:	f240 52af 	movw	r2, #1455	; 0x5af
 8015374:	491c      	ldr	r1, [pc, #112]	; (80153e8 <tcp_slowtmr+0x678>)
 8015376:	4819      	ldr	r0, [pc, #100]	; (80153dc <tcp_slowtmr+0x66c>)
 8015378:	f009 fcf2 	bl	801ed60 <iprintf>
        prev->next = pcb->next;
 801537c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801537e:	68da      	ldr	r2, [r3, #12]
 8015380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015382:	60da      	str	r2, [r3, #12]
 8015384:	e00f      	b.n	80153a6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8015386:	4b17      	ldr	r3, [pc, #92]	; (80153e4 <tcp_slowtmr+0x674>)
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801538c:	429a      	cmp	r2, r3
 801538e:	d006      	beq.n	801539e <tcp_slowtmr+0x62e>
 8015390:	4b10      	ldr	r3, [pc, #64]	; (80153d4 <tcp_slowtmr+0x664>)
 8015392:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8015396:	4915      	ldr	r1, [pc, #84]	; (80153ec <tcp_slowtmr+0x67c>)
 8015398:	4810      	ldr	r0, [pc, #64]	; (80153dc <tcp_slowtmr+0x66c>)
 801539a:	f009 fce1 	bl	801ed60 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801539e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153a0:	68db      	ldr	r3, [r3, #12]
 80153a2:	4a10      	ldr	r2, [pc, #64]	; (80153e4 <tcp_slowtmr+0x674>)
 80153a4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80153a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153a8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80153aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153ac:	68db      	ldr	r3, [r3, #12]
 80153ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80153b0:	69f8      	ldr	r0, [r7, #28]
 80153b2:	f7fe ff29 	bl	8014208 <tcp_free>
 80153b6:	e004      	b.n	80153c2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80153b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153ba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80153bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153be:	68db      	ldr	r3, [r3, #12]
 80153c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80153c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d1a9      	bne.n	801531c <tcp_slowtmr+0x5ac>
    }
  }
}
 80153c8:	bf00      	nop
 80153ca:	bf00      	nop
 80153cc:	3730      	adds	r7, #48	; 0x30
 80153ce:	46bd      	mov	sp, r7
 80153d0:	bdb0      	pop	{r4, r5, r7, pc}
 80153d2:	bf00      	nop
 80153d4:	08023cc8 	.word	0x08023cc8
 80153d8:	08024158 	.word	0x08024158
 80153dc:	08023d0c 	.word	0x08023d0c
 80153e0:	2000b7a0 	.word	0x2000b7a0
 80153e4:	2000b7ac 	.word	0x2000b7ac
 80153e8:	08024188 	.word	0x08024188
 80153ec:	080241b0 	.word	0x080241b0

080153f0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b082      	sub	sp, #8
 80153f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80153f6:	4b2d      	ldr	r3, [pc, #180]	; (80154ac <tcp_fasttmr+0xbc>)
 80153f8:	781b      	ldrb	r3, [r3, #0]
 80153fa:	3301      	adds	r3, #1
 80153fc:	b2da      	uxtb	r2, r3
 80153fe:	4b2b      	ldr	r3, [pc, #172]	; (80154ac <tcp_fasttmr+0xbc>)
 8015400:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8015402:	4b2b      	ldr	r3, [pc, #172]	; (80154b0 <tcp_fasttmr+0xc0>)
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015408:	e048      	b.n	801549c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	7f9a      	ldrb	r2, [r3, #30]
 801540e:	4b27      	ldr	r3, [pc, #156]	; (80154ac <tcp_fasttmr+0xbc>)
 8015410:	781b      	ldrb	r3, [r3, #0]
 8015412:	429a      	cmp	r2, r3
 8015414:	d03f      	beq.n	8015496 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8015416:	4b25      	ldr	r3, [pc, #148]	; (80154ac <tcp_fasttmr+0xbc>)
 8015418:	781a      	ldrb	r2, [r3, #0]
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	8b5b      	ldrh	r3, [r3, #26]
 8015422:	f003 0301 	and.w	r3, r3, #1
 8015426:	2b00      	cmp	r3, #0
 8015428:	d010      	beq.n	801544c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	8b5b      	ldrh	r3, [r3, #26]
 801542e:	f043 0302 	orr.w	r3, r3, #2
 8015432:	b29a      	uxth	r2, r3
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8015438:	6878      	ldr	r0, [r7, #4]
 801543a:	f004 f80f 	bl	801945c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	8b5b      	ldrh	r3, [r3, #26]
 8015442:	f023 0303 	bic.w	r3, r3, #3
 8015446:	b29a      	uxth	r2, r3
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	8b5b      	ldrh	r3, [r3, #26]
 8015450:	f003 0308 	and.w	r3, r3, #8
 8015454:	2b00      	cmp	r3, #0
 8015456:	d009      	beq.n	801546c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	8b5b      	ldrh	r3, [r3, #26]
 801545c:	f023 0308 	bic.w	r3, r3, #8
 8015460:	b29a      	uxth	r2, r3
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8015466:	6878      	ldr	r0, [r7, #4]
 8015468:	f7ff f862 	bl	8014530 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	68db      	ldr	r3, [r3, #12]
 8015470:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015476:	2b00      	cmp	r3, #0
 8015478:	d00a      	beq.n	8015490 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801547a:	4b0e      	ldr	r3, [pc, #56]	; (80154b4 <tcp_fasttmr+0xc4>)
 801547c:	2200      	movs	r2, #0
 801547e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8015480:	6878      	ldr	r0, [r7, #4]
 8015482:	f000 f819 	bl	80154b8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8015486:	4b0b      	ldr	r3, [pc, #44]	; (80154b4 <tcp_fasttmr+0xc4>)
 8015488:	781b      	ldrb	r3, [r3, #0]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d000      	beq.n	8015490 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801548e:	e7b8      	b.n	8015402 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8015490:	683b      	ldr	r3, [r7, #0]
 8015492:	607b      	str	r3, [r7, #4]
 8015494:	e002      	b.n	801549c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	68db      	ldr	r3, [r3, #12]
 801549a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d1b3      	bne.n	801540a <tcp_fasttmr+0x1a>
    }
  }
}
 80154a2:	bf00      	nop
 80154a4:	bf00      	nop
 80154a6:	3708      	adds	r7, #8
 80154a8:	46bd      	mov	sp, r7
 80154aa:	bd80      	pop	{r7, pc}
 80154ac:	2000475a 	.word	0x2000475a
 80154b0:	2000b79c 	.word	0x2000b79c
 80154b4:	2000b798 	.word	0x2000b798

080154b8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80154b8:	b590      	push	{r4, r7, lr}
 80154ba:	b085      	sub	sp, #20
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d109      	bne.n	80154da <tcp_process_refused_data+0x22>
 80154c6:	4b37      	ldr	r3, [pc, #220]	; (80155a4 <tcp_process_refused_data+0xec>)
 80154c8:	f240 6209 	movw	r2, #1545	; 0x609
 80154cc:	4936      	ldr	r1, [pc, #216]	; (80155a8 <tcp_process_refused_data+0xf0>)
 80154ce:	4837      	ldr	r0, [pc, #220]	; (80155ac <tcp_process_refused_data+0xf4>)
 80154d0:	f009 fc46 	bl	801ed60 <iprintf>
 80154d4:	f06f 030f 	mvn.w	r3, #15
 80154d8:	e060      	b.n	801559c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80154de:	7b5b      	ldrb	r3, [r3, #13]
 80154e0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80154e6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	2200      	movs	r2, #0
 80154ec:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d00b      	beq.n	8015510 <tcp_process_refused_data+0x58>
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	6918      	ldr	r0, [r3, #16]
 8015502:	2300      	movs	r3, #0
 8015504:	68ba      	ldr	r2, [r7, #8]
 8015506:	6879      	ldr	r1, [r7, #4]
 8015508:	47a0      	blx	r4
 801550a:	4603      	mov	r3, r0
 801550c:	73fb      	strb	r3, [r7, #15]
 801550e:	e007      	b.n	8015520 <tcp_process_refused_data+0x68>
 8015510:	2300      	movs	r3, #0
 8015512:	68ba      	ldr	r2, [r7, #8]
 8015514:	6879      	ldr	r1, [r7, #4]
 8015516:	2000      	movs	r0, #0
 8015518:	f000 f8c2 	bl	80156a0 <tcp_recv_null>
 801551c:	4603      	mov	r3, r0
 801551e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8015520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015524:	2b00      	cmp	r3, #0
 8015526:	d12a      	bne.n	801557e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8015528:	7bbb      	ldrb	r3, [r7, #14]
 801552a:	f003 0320 	and.w	r3, r3, #32
 801552e:	2b00      	cmp	r3, #0
 8015530:	d033      	beq.n	801559a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015536:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801553a:	d005      	beq.n	8015548 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015540:	3301      	adds	r3, #1
 8015542:	b29a      	uxth	r2, r3
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801554e:	2b00      	cmp	r3, #0
 8015550:	d00b      	beq.n	801556a <tcp_process_refused_data+0xb2>
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	6918      	ldr	r0, [r3, #16]
 801555c:	2300      	movs	r3, #0
 801555e:	2200      	movs	r2, #0
 8015560:	6879      	ldr	r1, [r7, #4]
 8015562:	47a0      	blx	r4
 8015564:	4603      	mov	r3, r0
 8015566:	73fb      	strb	r3, [r7, #15]
 8015568:	e001      	b.n	801556e <tcp_process_refused_data+0xb6>
 801556a:	2300      	movs	r3, #0
 801556c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801556e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015572:	f113 0f0d 	cmn.w	r3, #13
 8015576:	d110      	bne.n	801559a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8015578:	f06f 030c 	mvn.w	r3, #12
 801557c:	e00e      	b.n	801559c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801557e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015582:	f113 0f0d 	cmn.w	r3, #13
 8015586:	d102      	bne.n	801558e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8015588:	f06f 030c 	mvn.w	r3, #12
 801558c:	e006      	b.n	801559c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	68ba      	ldr	r2, [r7, #8]
 8015592:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8015594:	f06f 0304 	mvn.w	r3, #4
 8015598:	e000      	b.n	801559c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801559a:	2300      	movs	r3, #0
}
 801559c:	4618      	mov	r0, r3
 801559e:	3714      	adds	r7, #20
 80155a0:	46bd      	mov	sp, r7
 80155a2:	bd90      	pop	{r4, r7, pc}
 80155a4:	08023cc8 	.word	0x08023cc8
 80155a8:	080241d8 	.word	0x080241d8
 80155ac:	08023d0c 	.word	0x08023d0c

080155b0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b084      	sub	sp, #16
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80155b8:	e007      	b.n	80155ca <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80155c0:	6878      	ldr	r0, [r7, #4]
 80155c2:	f000 f80a 	bl	80155da <tcp_seg_free>
    seg = next;
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d1f4      	bne.n	80155ba <tcp_segs_free+0xa>
  }
}
 80155d0:	bf00      	nop
 80155d2:	bf00      	nop
 80155d4:	3710      	adds	r7, #16
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}

080155da <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80155da:	b580      	push	{r7, lr}
 80155dc:	b082      	sub	sp, #8
 80155de:	af00      	add	r7, sp, #0
 80155e0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d00c      	beq.n	8015602 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	685b      	ldr	r3, [r3, #4]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d004      	beq.n	80155fa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	685b      	ldr	r3, [r3, #4]
 80155f4:	4618      	mov	r0, r3
 80155f6:	f7fe fb4b 	bl	8013c90 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80155fa:	6879      	ldr	r1, [r7, #4]
 80155fc:	2003      	movs	r0, #3
 80155fe:	f7fd fcc9 	bl	8012f94 <memp_free>
  }
}
 8015602:	bf00      	nop
 8015604:	3708      	adds	r7, #8
 8015606:	46bd      	mov	sp, r7
 8015608:	bd80      	pop	{r7, pc}
	...

0801560c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b082      	sub	sp, #8
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
 8015614:	460b      	mov	r3, r1
 8015616:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d107      	bne.n	801562e <tcp_setprio+0x22>
 801561e:	4b07      	ldr	r3, [pc, #28]	; (801563c <tcp_setprio+0x30>)
 8015620:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8015624:	4906      	ldr	r1, [pc, #24]	; (8015640 <tcp_setprio+0x34>)
 8015626:	4807      	ldr	r0, [pc, #28]	; (8015644 <tcp_setprio+0x38>)
 8015628:	f009 fb9a 	bl	801ed60 <iprintf>
 801562c:	e002      	b.n	8015634 <tcp_setprio+0x28>

  pcb->prio = prio;
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	78fa      	ldrb	r2, [r7, #3]
 8015632:	755a      	strb	r2, [r3, #21]
}
 8015634:	3708      	adds	r7, #8
 8015636:	46bd      	mov	sp, r7
 8015638:	bd80      	pop	{r7, pc}
 801563a:	bf00      	nop
 801563c:	08023cc8 	.word	0x08023cc8
 8015640:	08024200 	.word	0x08024200
 8015644:	08023d0c 	.word	0x08023d0c

08015648 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015648:	b580      	push	{r7, lr}
 801564a:	b084      	sub	sp, #16
 801564c:	af00      	add	r7, sp, #0
 801564e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d106      	bne.n	8015664 <tcp_seg_copy+0x1c>
 8015656:	4b0f      	ldr	r3, [pc, #60]	; (8015694 <tcp_seg_copy+0x4c>)
 8015658:	f240 6282 	movw	r2, #1666	; 0x682
 801565c:	490e      	ldr	r1, [pc, #56]	; (8015698 <tcp_seg_copy+0x50>)
 801565e:	480f      	ldr	r0, [pc, #60]	; (801569c <tcp_seg_copy+0x54>)
 8015660:	f009 fb7e 	bl	801ed60 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015664:	2003      	movs	r0, #3
 8015666:	f7fd fc43 	bl	8012ef0 <memp_malloc>
 801566a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d101      	bne.n	8015676 <tcp_seg_copy+0x2e>
    return NULL;
 8015672:	2300      	movs	r3, #0
 8015674:	e00a      	b.n	801568c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015676:	2210      	movs	r2, #16
 8015678:	6879      	ldr	r1, [r7, #4]
 801567a:	68f8      	ldr	r0, [r7, #12]
 801567c:	f009 f8c2 	bl	801e804 <memcpy>
  pbuf_ref(cseg->p);
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	685b      	ldr	r3, [r3, #4]
 8015684:	4618      	mov	r0, r3
 8015686:	f7fe fba9 	bl	8013ddc <pbuf_ref>
  return cseg;
 801568a:	68fb      	ldr	r3, [r7, #12]
}
 801568c:	4618      	mov	r0, r3
 801568e:	3710      	adds	r7, #16
 8015690:	46bd      	mov	sp, r7
 8015692:	bd80      	pop	{r7, pc}
 8015694:	08023cc8 	.word	0x08023cc8
 8015698:	0802421c 	.word	0x0802421c
 801569c:	08023d0c 	.word	0x08023d0c

080156a0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b084      	sub	sp, #16
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	60f8      	str	r0, [r7, #12]
 80156a8:	60b9      	str	r1, [r7, #8]
 80156aa:	607a      	str	r2, [r7, #4]
 80156ac:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80156ae:	68bb      	ldr	r3, [r7, #8]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d109      	bne.n	80156c8 <tcp_recv_null+0x28>
 80156b4:	4b12      	ldr	r3, [pc, #72]	; (8015700 <tcp_recv_null+0x60>)
 80156b6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80156ba:	4912      	ldr	r1, [pc, #72]	; (8015704 <tcp_recv_null+0x64>)
 80156bc:	4812      	ldr	r0, [pc, #72]	; (8015708 <tcp_recv_null+0x68>)
 80156be:	f009 fb4f 	bl	801ed60 <iprintf>
 80156c2:	f06f 030f 	mvn.w	r3, #15
 80156c6:	e016      	b.n	80156f6 <tcp_recv_null+0x56>

  if (p != NULL) {
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d009      	beq.n	80156e2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	891b      	ldrh	r3, [r3, #8]
 80156d2:	4619      	mov	r1, r3
 80156d4:	68b8      	ldr	r0, [r7, #8]
 80156d6:	f7ff fab5 	bl	8014c44 <tcp_recved>
    pbuf_free(p);
 80156da:	6878      	ldr	r0, [r7, #4]
 80156dc:	f7fe fad8 	bl	8013c90 <pbuf_free>
 80156e0:	e008      	b.n	80156f4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80156e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d104      	bne.n	80156f4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80156ea:	68b8      	ldr	r0, [r7, #8]
 80156ec:	f7fe ff8a 	bl	8014604 <tcp_close>
 80156f0:	4603      	mov	r3, r0
 80156f2:	e000      	b.n	80156f6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80156f4:	2300      	movs	r3, #0
}
 80156f6:	4618      	mov	r0, r3
 80156f8:	3710      	adds	r7, #16
 80156fa:	46bd      	mov	sp, r7
 80156fc:	bd80      	pop	{r7, pc}
 80156fe:	bf00      	nop
 8015700:	08023cc8 	.word	0x08023cc8
 8015704:	08024238 	.word	0x08024238
 8015708:	08023d0c 	.word	0x08023d0c

0801570c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b086      	sub	sp, #24
 8015710:	af00      	add	r7, sp, #0
 8015712:	4603      	mov	r3, r0
 8015714:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801571a:	2b00      	cmp	r3, #0
 801571c:	db01      	blt.n	8015722 <tcp_kill_prio+0x16>
 801571e:	79fb      	ldrb	r3, [r7, #7]
 8015720:	e000      	b.n	8015724 <tcp_kill_prio+0x18>
 8015722:	237f      	movs	r3, #127	; 0x7f
 8015724:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015726:	7afb      	ldrb	r3, [r7, #11]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d034      	beq.n	8015796 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801572c:	7afb      	ldrb	r3, [r7, #11]
 801572e:	3b01      	subs	r3, #1
 8015730:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8015732:	2300      	movs	r3, #0
 8015734:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015736:	2300      	movs	r3, #0
 8015738:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801573a:	4b19      	ldr	r3, [pc, #100]	; (80157a0 <tcp_kill_prio+0x94>)
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	617b      	str	r3, [r7, #20]
 8015740:	e01f      	b.n	8015782 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8015742:	697b      	ldr	r3, [r7, #20]
 8015744:	7d5b      	ldrb	r3, [r3, #21]
 8015746:	7afa      	ldrb	r2, [r7, #11]
 8015748:	429a      	cmp	r2, r3
 801574a:	d80c      	bhi.n	8015766 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801574c:	697b      	ldr	r3, [r7, #20]
 801574e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8015750:	7afa      	ldrb	r2, [r7, #11]
 8015752:	429a      	cmp	r2, r3
 8015754:	d112      	bne.n	801577c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015756:	4b13      	ldr	r3, [pc, #76]	; (80157a4 <tcp_kill_prio+0x98>)
 8015758:	681a      	ldr	r2, [r3, #0]
 801575a:	697b      	ldr	r3, [r7, #20]
 801575c:	6a1b      	ldr	r3, [r3, #32]
 801575e:	1ad3      	subs	r3, r2, r3
 8015760:	68fa      	ldr	r2, [r7, #12]
 8015762:	429a      	cmp	r2, r3
 8015764:	d80a      	bhi.n	801577c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8015766:	4b0f      	ldr	r3, [pc, #60]	; (80157a4 <tcp_kill_prio+0x98>)
 8015768:	681a      	ldr	r2, [r3, #0]
 801576a:	697b      	ldr	r3, [r7, #20]
 801576c:	6a1b      	ldr	r3, [r3, #32]
 801576e:	1ad3      	subs	r3, r2, r3
 8015770:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8015772:	697b      	ldr	r3, [r7, #20]
 8015774:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8015776:	697b      	ldr	r3, [r7, #20]
 8015778:	7d5b      	ldrb	r3, [r3, #21]
 801577a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801577c:	697b      	ldr	r3, [r7, #20]
 801577e:	68db      	ldr	r3, [r3, #12]
 8015780:	617b      	str	r3, [r7, #20]
 8015782:	697b      	ldr	r3, [r7, #20]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d1dc      	bne.n	8015742 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8015788:	693b      	ldr	r3, [r7, #16]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d004      	beq.n	8015798 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801578e:	6938      	ldr	r0, [r7, #16]
 8015790:	f7ff f87e 	bl	8014890 <tcp_abort>
 8015794:	e000      	b.n	8015798 <tcp_kill_prio+0x8c>
    return;
 8015796:	bf00      	nop
  }
}
 8015798:	3718      	adds	r7, #24
 801579a:	46bd      	mov	sp, r7
 801579c:	bd80      	pop	{r7, pc}
 801579e:	bf00      	nop
 80157a0:	2000b79c 	.word	0x2000b79c
 80157a4:	2000b7a0 	.word	0x2000b7a0

080157a8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b086      	sub	sp, #24
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	4603      	mov	r3, r0
 80157b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80157b2:	79fb      	ldrb	r3, [r7, #7]
 80157b4:	2b08      	cmp	r3, #8
 80157b6:	d009      	beq.n	80157cc <tcp_kill_state+0x24>
 80157b8:	79fb      	ldrb	r3, [r7, #7]
 80157ba:	2b09      	cmp	r3, #9
 80157bc:	d006      	beq.n	80157cc <tcp_kill_state+0x24>
 80157be:	4b1a      	ldr	r3, [pc, #104]	; (8015828 <tcp_kill_state+0x80>)
 80157c0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80157c4:	4919      	ldr	r1, [pc, #100]	; (801582c <tcp_kill_state+0x84>)
 80157c6:	481a      	ldr	r0, [pc, #104]	; (8015830 <tcp_kill_state+0x88>)
 80157c8:	f009 faca 	bl	801ed60 <iprintf>

  inactivity = 0;
 80157cc:	2300      	movs	r3, #0
 80157ce:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80157d0:	2300      	movs	r3, #0
 80157d2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80157d4:	4b17      	ldr	r3, [pc, #92]	; (8015834 <tcp_kill_state+0x8c>)
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	617b      	str	r3, [r7, #20]
 80157da:	e017      	b.n	801580c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80157dc:	697b      	ldr	r3, [r7, #20]
 80157de:	7d1b      	ldrb	r3, [r3, #20]
 80157e0:	79fa      	ldrb	r2, [r7, #7]
 80157e2:	429a      	cmp	r2, r3
 80157e4:	d10f      	bne.n	8015806 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80157e6:	4b14      	ldr	r3, [pc, #80]	; (8015838 <tcp_kill_state+0x90>)
 80157e8:	681a      	ldr	r2, [r3, #0]
 80157ea:	697b      	ldr	r3, [r7, #20]
 80157ec:	6a1b      	ldr	r3, [r3, #32]
 80157ee:	1ad3      	subs	r3, r2, r3
 80157f0:	68fa      	ldr	r2, [r7, #12]
 80157f2:	429a      	cmp	r2, r3
 80157f4:	d807      	bhi.n	8015806 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80157f6:	4b10      	ldr	r3, [pc, #64]	; (8015838 <tcp_kill_state+0x90>)
 80157f8:	681a      	ldr	r2, [r3, #0]
 80157fa:	697b      	ldr	r3, [r7, #20]
 80157fc:	6a1b      	ldr	r3, [r3, #32]
 80157fe:	1ad3      	subs	r3, r2, r3
 8015800:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8015802:	697b      	ldr	r3, [r7, #20]
 8015804:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015806:	697b      	ldr	r3, [r7, #20]
 8015808:	68db      	ldr	r3, [r3, #12]
 801580a:	617b      	str	r3, [r7, #20]
 801580c:	697b      	ldr	r3, [r7, #20]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d1e4      	bne.n	80157dc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8015812:	693b      	ldr	r3, [r7, #16]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d003      	beq.n	8015820 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8015818:	2100      	movs	r1, #0
 801581a:	6938      	ldr	r0, [r7, #16]
 801581c:	f7fe ff7a 	bl	8014714 <tcp_abandon>
  }
}
 8015820:	bf00      	nop
 8015822:	3718      	adds	r7, #24
 8015824:	46bd      	mov	sp, r7
 8015826:	bd80      	pop	{r7, pc}
 8015828:	08023cc8 	.word	0x08023cc8
 801582c:	08024254 	.word	0x08024254
 8015830:	08023d0c 	.word	0x08023d0c
 8015834:	2000b79c 	.word	0x2000b79c
 8015838:	2000b7a0 	.word	0x2000b7a0

0801583c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b084      	sub	sp, #16
 8015840:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8015842:	2300      	movs	r3, #0
 8015844:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8015846:	2300      	movs	r3, #0
 8015848:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801584a:	4b12      	ldr	r3, [pc, #72]	; (8015894 <tcp_kill_timewait+0x58>)
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	60fb      	str	r3, [r7, #12]
 8015850:	e012      	b.n	8015878 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015852:	4b11      	ldr	r3, [pc, #68]	; (8015898 <tcp_kill_timewait+0x5c>)
 8015854:	681a      	ldr	r2, [r3, #0]
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	6a1b      	ldr	r3, [r3, #32]
 801585a:	1ad3      	subs	r3, r2, r3
 801585c:	687a      	ldr	r2, [r7, #4]
 801585e:	429a      	cmp	r2, r3
 8015860:	d807      	bhi.n	8015872 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8015862:	4b0d      	ldr	r3, [pc, #52]	; (8015898 <tcp_kill_timewait+0x5c>)
 8015864:	681a      	ldr	r2, [r3, #0]
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	6a1b      	ldr	r3, [r3, #32]
 801586a:	1ad3      	subs	r3, r2, r3
 801586c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	68db      	ldr	r3, [r3, #12]
 8015876:	60fb      	str	r3, [r7, #12]
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d1e9      	bne.n	8015852 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801587e:	68bb      	ldr	r3, [r7, #8]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d002      	beq.n	801588a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015884:	68b8      	ldr	r0, [r7, #8]
 8015886:	f7ff f803 	bl	8014890 <tcp_abort>
  }
}
 801588a:	bf00      	nop
 801588c:	3710      	adds	r7, #16
 801588e:	46bd      	mov	sp, r7
 8015890:	bd80      	pop	{r7, pc}
 8015892:	bf00      	nop
 8015894:	2000b7ac 	.word	0x2000b7ac
 8015898:	2000b7a0 	.word	0x2000b7a0

0801589c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801589c:	b580      	push	{r7, lr}
 801589e:	b082      	sub	sp, #8
 80158a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80158a2:	4b10      	ldr	r3, [pc, #64]	; (80158e4 <tcp_handle_closepend+0x48>)
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80158a8:	e014      	b.n	80158d4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	68db      	ldr	r3, [r3, #12]
 80158ae:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	8b5b      	ldrh	r3, [r3, #26]
 80158b4:	f003 0308 	and.w	r3, r3, #8
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d009      	beq.n	80158d0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	8b5b      	ldrh	r3, [r3, #26]
 80158c0:	f023 0308 	bic.w	r3, r3, #8
 80158c4:	b29a      	uxth	r2, r3
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80158ca:	6878      	ldr	r0, [r7, #4]
 80158cc:	f7fe fe30 	bl	8014530 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80158d0:	683b      	ldr	r3, [r7, #0]
 80158d2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d1e7      	bne.n	80158aa <tcp_handle_closepend+0xe>
  }
}
 80158da:	bf00      	nop
 80158dc:	bf00      	nop
 80158de:	3708      	adds	r7, #8
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bd80      	pop	{r7, pc}
 80158e4:	2000b79c 	.word	0x2000b79c

080158e8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b084      	sub	sp, #16
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	4603      	mov	r3, r0
 80158f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80158f2:	2001      	movs	r0, #1
 80158f4:	f7fd fafc 	bl	8012ef0 <memp_malloc>
 80158f8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d126      	bne.n	801594e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8015900:	f7ff ffcc 	bl	801589c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8015904:	f7ff ff9a 	bl	801583c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015908:	2001      	movs	r0, #1
 801590a:	f7fd faf1 	bl	8012ef0 <memp_malloc>
 801590e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d11b      	bne.n	801594e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8015916:	2009      	movs	r0, #9
 8015918:	f7ff ff46 	bl	80157a8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801591c:	2001      	movs	r0, #1
 801591e:	f7fd fae7 	bl	8012ef0 <memp_malloc>
 8015922:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d111      	bne.n	801594e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801592a:	2008      	movs	r0, #8
 801592c:	f7ff ff3c 	bl	80157a8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015930:	2001      	movs	r0, #1
 8015932:	f7fd fadd 	bl	8012ef0 <memp_malloc>
 8015936:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	2b00      	cmp	r3, #0
 801593c:	d107      	bne.n	801594e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801593e:	79fb      	ldrb	r3, [r7, #7]
 8015940:	4618      	mov	r0, r3
 8015942:	f7ff fee3 	bl	801570c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015946:	2001      	movs	r0, #1
 8015948:	f7fd fad2 	bl	8012ef0 <memp_malloc>
 801594c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d03f      	beq.n	80159d4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8015954:	229c      	movs	r2, #156	; 0x9c
 8015956:	2100      	movs	r1, #0
 8015958:	68f8      	ldr	r0, [r7, #12]
 801595a:	f008 ff7b 	bl	801e854 <memset>
    pcb->prio = prio;
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	79fa      	ldrb	r2, [r7, #7]
 8015962:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801596a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8015974:	855a      	strh	r2, [r3, #42]	; 0x2a
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	22ff      	movs	r2, #255	; 0xff
 8015982:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	f44f 7206 	mov.w	r2, #536	; 0x218
 801598a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	2206      	movs	r2, #6
 8015990:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	2206      	movs	r2, #6
 8015998:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80159a0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	2201      	movs	r2, #1
 80159a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80159aa:	4b0d      	ldr	r3, [pc, #52]	; (80159e0 <tcp_alloc+0xf8>)
 80159ac:	681a      	ldr	r2, [r3, #0]
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80159b2:	4b0c      	ldr	r3, [pc, #48]	; (80159e4 <tcp_alloc+0xfc>)
 80159b4:	781a      	ldrb	r2, [r3, #0]
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80159c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	4a08      	ldr	r2, [pc, #32]	; (80159e8 <tcp_alloc+0x100>)
 80159c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	4a07      	ldr	r2, [pc, #28]	; (80159ec <tcp_alloc+0x104>)
 80159d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80159d4:	68fb      	ldr	r3, [r7, #12]
}
 80159d6:	4618      	mov	r0, r3
 80159d8:	3710      	adds	r7, #16
 80159da:	46bd      	mov	sp, r7
 80159dc:	bd80      	pop	{r7, pc}
 80159de:	bf00      	nop
 80159e0:	2000b7a0 	.word	0x2000b7a0
 80159e4:	2000475a 	.word	0x2000475a
 80159e8:	080156a1 	.word	0x080156a1
 80159ec:	006ddd00 	.word	0x006ddd00

080159f0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b084      	sub	sp, #16
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	4603      	mov	r3, r0
 80159f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80159fa:	2040      	movs	r0, #64	; 0x40
 80159fc:	f7ff ff74 	bl	80158e8 <tcp_alloc>
 8015a00:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8015a02:	68fb      	ldr	r3, [r7, #12]
}
 8015a04:	4618      	mov	r0, r3
 8015a06:	3710      	adds	r7, #16
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bd80      	pop	{r7, pc}

08015a0c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8015a0c:	b480      	push	{r7}
 8015a0e:	b083      	sub	sp, #12
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
 8015a14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d002      	beq.n	8015a22 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	683a      	ldr	r2, [r7, #0]
 8015a20:	611a      	str	r2, [r3, #16]
  }
}
 8015a22:	bf00      	nop
 8015a24:	370c      	adds	r7, #12
 8015a26:	46bd      	mov	sp, r7
 8015a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a2c:	4770      	bx	lr
	...

08015a30 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b082      	sub	sp, #8
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	6078      	str	r0, [r7, #4]
 8015a38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d00e      	beq.n	8015a5e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	7d1b      	ldrb	r3, [r3, #20]
 8015a44:	2b01      	cmp	r3, #1
 8015a46:	d106      	bne.n	8015a56 <tcp_recv+0x26>
 8015a48:	4b07      	ldr	r3, [pc, #28]	; (8015a68 <tcp_recv+0x38>)
 8015a4a:	f240 72df 	movw	r2, #2015	; 0x7df
 8015a4e:	4907      	ldr	r1, [pc, #28]	; (8015a6c <tcp_recv+0x3c>)
 8015a50:	4807      	ldr	r0, [pc, #28]	; (8015a70 <tcp_recv+0x40>)
 8015a52:	f009 f985 	bl	801ed60 <iprintf>
    pcb->recv = recv;
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	683a      	ldr	r2, [r7, #0]
 8015a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8015a5e:	bf00      	nop
 8015a60:	3708      	adds	r7, #8
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bd80      	pop	{r7, pc}
 8015a66:	bf00      	nop
 8015a68:	08023cc8 	.word	0x08023cc8
 8015a6c:	08024264 	.word	0x08024264
 8015a70:	08023d0c 	.word	0x08023d0c

08015a74 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8015a74:	b580      	push	{r7, lr}
 8015a76:	b082      	sub	sp, #8
 8015a78:	af00      	add	r7, sp, #0
 8015a7a:	6078      	str	r0, [r7, #4]
 8015a7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d00e      	beq.n	8015aa2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	7d1b      	ldrb	r3, [r3, #20]
 8015a88:	2b01      	cmp	r3, #1
 8015a8a:	d106      	bne.n	8015a9a <tcp_sent+0x26>
 8015a8c:	4b07      	ldr	r3, [pc, #28]	; (8015aac <tcp_sent+0x38>)
 8015a8e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8015a92:	4907      	ldr	r1, [pc, #28]	; (8015ab0 <tcp_sent+0x3c>)
 8015a94:	4807      	ldr	r0, [pc, #28]	; (8015ab4 <tcp_sent+0x40>)
 8015a96:	f009 f963 	bl	801ed60 <iprintf>
    pcb->sent = sent;
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	683a      	ldr	r2, [r7, #0]
 8015a9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8015aa2:	bf00      	nop
 8015aa4:	3708      	adds	r7, #8
 8015aa6:	46bd      	mov	sp, r7
 8015aa8:	bd80      	pop	{r7, pc}
 8015aaa:	bf00      	nop
 8015aac:	08023cc8 	.word	0x08023cc8
 8015ab0:	0802428c 	.word	0x0802428c
 8015ab4:	08023d0c 	.word	0x08023d0c

08015ab8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8015ab8:	b580      	push	{r7, lr}
 8015aba:	b082      	sub	sp, #8
 8015abc:	af00      	add	r7, sp, #0
 8015abe:	6078      	str	r0, [r7, #4]
 8015ac0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d00e      	beq.n	8015ae6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	7d1b      	ldrb	r3, [r3, #20]
 8015acc:	2b01      	cmp	r3, #1
 8015ace:	d106      	bne.n	8015ade <tcp_err+0x26>
 8015ad0:	4b07      	ldr	r3, [pc, #28]	; (8015af0 <tcp_err+0x38>)
 8015ad2:	f640 020d 	movw	r2, #2061	; 0x80d
 8015ad6:	4907      	ldr	r1, [pc, #28]	; (8015af4 <tcp_err+0x3c>)
 8015ad8:	4807      	ldr	r0, [pc, #28]	; (8015af8 <tcp_err+0x40>)
 8015ada:	f009 f941 	bl	801ed60 <iprintf>
    pcb->errf = err;
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	683a      	ldr	r2, [r7, #0]
 8015ae2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8015ae6:	bf00      	nop
 8015ae8:	3708      	adds	r7, #8
 8015aea:	46bd      	mov	sp, r7
 8015aec:	bd80      	pop	{r7, pc}
 8015aee:	bf00      	nop
 8015af0:	08023cc8 	.word	0x08023cc8
 8015af4:	080242b4 	.word	0x080242b4
 8015af8:	08023d0c 	.word	0x08023d0c

08015afc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8015afc:	b480      	push	{r7}
 8015afe:	b085      	sub	sp, #20
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
 8015b04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d008      	beq.n	8015b1e <tcp_accept+0x22>
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	7d1b      	ldrb	r3, [r3, #20]
 8015b10:	2b01      	cmp	r3, #1
 8015b12:	d104      	bne.n	8015b1e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	683a      	ldr	r2, [r7, #0]
 8015b1c:	619a      	str	r2, [r3, #24]
  }
}
 8015b1e:	bf00      	nop
 8015b20:	3714      	adds	r7, #20
 8015b22:	46bd      	mov	sp, r7
 8015b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b28:	4770      	bx	lr
	...

08015b2c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b084      	sub	sp, #16
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	60f8      	str	r0, [r7, #12]
 8015b34:	60b9      	str	r1, [r7, #8]
 8015b36:	4613      	mov	r3, r2
 8015b38:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d107      	bne.n	8015b50 <tcp_poll+0x24>
 8015b40:	4b0e      	ldr	r3, [pc, #56]	; (8015b7c <tcp_poll+0x50>)
 8015b42:	f640 023d 	movw	r2, #2109	; 0x83d
 8015b46:	490e      	ldr	r1, [pc, #56]	; (8015b80 <tcp_poll+0x54>)
 8015b48:	480e      	ldr	r0, [pc, #56]	; (8015b84 <tcp_poll+0x58>)
 8015b4a:	f009 f909 	bl	801ed60 <iprintf>
 8015b4e:	e011      	b.n	8015b74 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	7d1b      	ldrb	r3, [r3, #20]
 8015b54:	2b01      	cmp	r3, #1
 8015b56:	d106      	bne.n	8015b66 <tcp_poll+0x3a>
 8015b58:	4b08      	ldr	r3, [pc, #32]	; (8015b7c <tcp_poll+0x50>)
 8015b5a:	f640 023e 	movw	r2, #2110	; 0x83e
 8015b5e:	490a      	ldr	r1, [pc, #40]	; (8015b88 <tcp_poll+0x5c>)
 8015b60:	4808      	ldr	r0, [pc, #32]	; (8015b84 <tcp_poll+0x58>)
 8015b62:	f009 f8fd 	bl	801ed60 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	68ba      	ldr	r2, [r7, #8]
 8015b6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	79fa      	ldrb	r2, [r7, #7]
 8015b72:	775a      	strb	r2, [r3, #29]
}
 8015b74:	3710      	adds	r7, #16
 8015b76:	46bd      	mov	sp, r7
 8015b78:	bd80      	pop	{r7, pc}
 8015b7a:	bf00      	nop
 8015b7c:	08023cc8 	.word	0x08023cc8
 8015b80:	080242dc 	.word	0x080242dc
 8015b84:	08023d0c 	.word	0x08023d0c
 8015b88:	080242f4 	.word	0x080242f4

08015b8c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b082      	sub	sp, #8
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d107      	bne.n	8015baa <tcp_pcb_purge+0x1e>
 8015b9a:	4b21      	ldr	r3, [pc, #132]	; (8015c20 <tcp_pcb_purge+0x94>)
 8015b9c:	f640 0251 	movw	r2, #2129	; 0x851
 8015ba0:	4920      	ldr	r1, [pc, #128]	; (8015c24 <tcp_pcb_purge+0x98>)
 8015ba2:	4821      	ldr	r0, [pc, #132]	; (8015c28 <tcp_pcb_purge+0x9c>)
 8015ba4:	f009 f8dc 	bl	801ed60 <iprintf>
 8015ba8:	e037      	b.n	8015c1a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	7d1b      	ldrb	r3, [r3, #20]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d033      	beq.n	8015c1a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8015bb6:	2b0a      	cmp	r3, #10
 8015bb8:	d02f      	beq.n	8015c1a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8015bbe:	2b01      	cmp	r3, #1
 8015bc0:	d02b      	beq.n	8015c1a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d007      	beq.n	8015bda <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015bce:	4618      	mov	r0, r3
 8015bd0:	f7fe f85e 	bl	8013c90 <pbuf_free>
      pcb->refused_data = NULL;
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d002      	beq.n	8015be8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8015be2:	6878      	ldr	r0, [r7, #4]
 8015be4:	f000 f986 	bl	8015ef4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015bee:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	f7ff fcdb 	bl	80155b0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f7ff fcd6 	bl	80155b0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	2200      	movs	r2, #0
 8015c08:	66da      	str	r2, [r3, #108]	; 0x6c
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	2200      	movs	r2, #0
 8015c16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8015c1a:	3708      	adds	r7, #8
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	bd80      	pop	{r7, pc}
 8015c20:	08023cc8 	.word	0x08023cc8
 8015c24:	08024314 	.word	0x08024314
 8015c28:	08023d0c 	.word	0x08023d0c

08015c2c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b084      	sub	sp, #16
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	6078      	str	r0, [r7, #4]
 8015c34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d106      	bne.n	8015c4a <tcp_pcb_remove+0x1e>
 8015c3c:	4b3e      	ldr	r3, [pc, #248]	; (8015d38 <tcp_pcb_remove+0x10c>)
 8015c3e:	f640 0283 	movw	r2, #2179	; 0x883
 8015c42:	493e      	ldr	r1, [pc, #248]	; (8015d3c <tcp_pcb_remove+0x110>)
 8015c44:	483e      	ldr	r0, [pc, #248]	; (8015d40 <tcp_pcb_remove+0x114>)
 8015c46:	f009 f88b 	bl	801ed60 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d106      	bne.n	8015c5e <tcp_pcb_remove+0x32>
 8015c50:	4b39      	ldr	r3, [pc, #228]	; (8015d38 <tcp_pcb_remove+0x10c>)
 8015c52:	f640 0284 	movw	r2, #2180	; 0x884
 8015c56:	493b      	ldr	r1, [pc, #236]	; (8015d44 <tcp_pcb_remove+0x118>)
 8015c58:	4839      	ldr	r0, [pc, #228]	; (8015d40 <tcp_pcb_remove+0x114>)
 8015c5a:	f009 f881 	bl	801ed60 <iprintf>

  TCP_RMV(pcblist, pcb);
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	683a      	ldr	r2, [r7, #0]
 8015c64:	429a      	cmp	r2, r3
 8015c66:	d105      	bne.n	8015c74 <tcp_pcb_remove+0x48>
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	68da      	ldr	r2, [r3, #12]
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	601a      	str	r2, [r3, #0]
 8015c72:	e013      	b.n	8015c9c <tcp_pcb_remove+0x70>
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	60fb      	str	r3, [r7, #12]
 8015c7a:	e00c      	b.n	8015c96 <tcp_pcb_remove+0x6a>
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	68db      	ldr	r3, [r3, #12]
 8015c80:	683a      	ldr	r2, [r7, #0]
 8015c82:	429a      	cmp	r2, r3
 8015c84:	d104      	bne.n	8015c90 <tcp_pcb_remove+0x64>
 8015c86:	683b      	ldr	r3, [r7, #0]
 8015c88:	68da      	ldr	r2, [r3, #12]
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	60da      	str	r2, [r3, #12]
 8015c8e:	e005      	b.n	8015c9c <tcp_pcb_remove+0x70>
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	68db      	ldr	r3, [r3, #12]
 8015c94:	60fb      	str	r3, [r7, #12]
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d1ef      	bne.n	8015c7c <tcp_pcb_remove+0x50>
 8015c9c:	683b      	ldr	r3, [r7, #0]
 8015c9e:	2200      	movs	r2, #0
 8015ca0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8015ca2:	6838      	ldr	r0, [r7, #0]
 8015ca4:	f7ff ff72 	bl	8015b8c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8015ca8:	683b      	ldr	r3, [r7, #0]
 8015caa:	7d1b      	ldrb	r3, [r3, #20]
 8015cac:	2b0a      	cmp	r3, #10
 8015cae:	d013      	beq.n	8015cd8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8015cb0:	683b      	ldr	r3, [r7, #0]
 8015cb2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8015cb4:	2b01      	cmp	r3, #1
 8015cb6:	d00f      	beq.n	8015cd8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8015cb8:	683b      	ldr	r3, [r7, #0]
 8015cba:	8b5b      	ldrh	r3, [r3, #26]
 8015cbc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d009      	beq.n	8015cd8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8015cc4:	683b      	ldr	r3, [r7, #0]
 8015cc6:	8b5b      	ldrh	r3, [r3, #26]
 8015cc8:	f043 0302 	orr.w	r3, r3, #2
 8015ccc:	b29a      	uxth	r2, r3
 8015cce:	683b      	ldr	r3, [r7, #0]
 8015cd0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015cd2:	6838      	ldr	r0, [r7, #0]
 8015cd4:	f003 fbc2 	bl	801945c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8015cd8:	683b      	ldr	r3, [r7, #0]
 8015cda:	7d1b      	ldrb	r3, [r3, #20]
 8015cdc:	2b01      	cmp	r3, #1
 8015cde:	d020      	beq.n	8015d22 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8015ce0:	683b      	ldr	r3, [r7, #0]
 8015ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d006      	beq.n	8015cf6 <tcp_pcb_remove+0xca>
 8015ce8:	4b13      	ldr	r3, [pc, #76]	; (8015d38 <tcp_pcb_remove+0x10c>)
 8015cea:	f640 0293 	movw	r2, #2195	; 0x893
 8015cee:	4916      	ldr	r1, [pc, #88]	; (8015d48 <tcp_pcb_remove+0x11c>)
 8015cf0:	4813      	ldr	r0, [pc, #76]	; (8015d40 <tcp_pcb_remove+0x114>)
 8015cf2:	f009 f835 	bl	801ed60 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8015cf6:	683b      	ldr	r3, [r7, #0]
 8015cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d006      	beq.n	8015d0c <tcp_pcb_remove+0xe0>
 8015cfe:	4b0e      	ldr	r3, [pc, #56]	; (8015d38 <tcp_pcb_remove+0x10c>)
 8015d00:	f640 0294 	movw	r2, #2196	; 0x894
 8015d04:	4911      	ldr	r1, [pc, #68]	; (8015d4c <tcp_pcb_remove+0x120>)
 8015d06:	480e      	ldr	r0, [pc, #56]	; (8015d40 <tcp_pcb_remove+0x114>)
 8015d08:	f009 f82a 	bl	801ed60 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8015d0c:	683b      	ldr	r3, [r7, #0]
 8015d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d006      	beq.n	8015d22 <tcp_pcb_remove+0xf6>
 8015d14:	4b08      	ldr	r3, [pc, #32]	; (8015d38 <tcp_pcb_remove+0x10c>)
 8015d16:	f640 0296 	movw	r2, #2198	; 0x896
 8015d1a:	490d      	ldr	r1, [pc, #52]	; (8015d50 <tcp_pcb_remove+0x124>)
 8015d1c:	4808      	ldr	r0, [pc, #32]	; (8015d40 <tcp_pcb_remove+0x114>)
 8015d1e:	f009 f81f 	bl	801ed60 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8015d22:	683b      	ldr	r3, [r7, #0]
 8015d24:	2200      	movs	r2, #0
 8015d26:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8015d28:	683b      	ldr	r3, [r7, #0]
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8015d2e:	bf00      	nop
 8015d30:	3710      	adds	r7, #16
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bd80      	pop	{r7, pc}
 8015d36:	bf00      	nop
 8015d38:	08023cc8 	.word	0x08023cc8
 8015d3c:	08024330 	.word	0x08024330
 8015d40:	08023d0c 	.word	0x08023d0c
 8015d44:	0802434c 	.word	0x0802434c
 8015d48:	0802436c 	.word	0x0802436c
 8015d4c:	08024384 	.word	0x08024384
 8015d50:	080243a0 	.word	0x080243a0

08015d54 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8015d54:	b580      	push	{r7, lr}
 8015d56:	b082      	sub	sp, #8
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d106      	bne.n	8015d70 <tcp_next_iss+0x1c>
 8015d62:	4b0a      	ldr	r3, [pc, #40]	; (8015d8c <tcp_next_iss+0x38>)
 8015d64:	f640 02af 	movw	r2, #2223	; 0x8af
 8015d68:	4909      	ldr	r1, [pc, #36]	; (8015d90 <tcp_next_iss+0x3c>)
 8015d6a:	480a      	ldr	r0, [pc, #40]	; (8015d94 <tcp_next_iss+0x40>)
 8015d6c:	f008 fff8 	bl	801ed60 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8015d70:	4b09      	ldr	r3, [pc, #36]	; (8015d98 <tcp_next_iss+0x44>)
 8015d72:	681a      	ldr	r2, [r3, #0]
 8015d74:	4b09      	ldr	r3, [pc, #36]	; (8015d9c <tcp_next_iss+0x48>)
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	4413      	add	r3, r2
 8015d7a:	4a07      	ldr	r2, [pc, #28]	; (8015d98 <tcp_next_iss+0x44>)
 8015d7c:	6013      	str	r3, [r2, #0]
  return iss;
 8015d7e:	4b06      	ldr	r3, [pc, #24]	; (8015d98 <tcp_next_iss+0x44>)
 8015d80:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8015d82:	4618      	mov	r0, r3
 8015d84:	3708      	adds	r7, #8
 8015d86:	46bd      	mov	sp, r7
 8015d88:	bd80      	pop	{r7, pc}
 8015d8a:	bf00      	nop
 8015d8c:	08023cc8 	.word	0x08023cc8
 8015d90:	080243b8 	.word	0x080243b8
 8015d94:	08023d0c 	.word	0x08023d0c
 8015d98:	20000140 	.word	0x20000140
 8015d9c:	2000b7a0 	.word	0x2000b7a0

08015da0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b086      	sub	sp, #24
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	4603      	mov	r3, r0
 8015da8:	60b9      	str	r1, [r7, #8]
 8015daa:	607a      	str	r2, [r7, #4]
 8015dac:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d106      	bne.n	8015dc2 <tcp_eff_send_mss_netif+0x22>
 8015db4:	4b14      	ldr	r3, [pc, #80]	; (8015e08 <tcp_eff_send_mss_netif+0x68>)
 8015db6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8015dba:	4914      	ldr	r1, [pc, #80]	; (8015e0c <tcp_eff_send_mss_netif+0x6c>)
 8015dbc:	4814      	ldr	r0, [pc, #80]	; (8015e10 <tcp_eff_send_mss_netif+0x70>)
 8015dbe:	f008 ffcf 	bl	801ed60 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8015dc2:	68bb      	ldr	r3, [r7, #8]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d101      	bne.n	8015dcc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8015dc8:	89fb      	ldrh	r3, [r7, #14]
 8015dca:	e019      	b.n	8015e00 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8015dcc:	68bb      	ldr	r3, [r7, #8]
 8015dce:	8c1b      	ldrh	r3, [r3, #32]
 8015dd0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8015dd2:	8afb      	ldrh	r3, [r7, #22]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d012      	beq.n	8015dfe <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8015dd8:	2328      	movs	r3, #40	; 0x28
 8015dda:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8015ddc:	8afa      	ldrh	r2, [r7, #22]
 8015dde:	8abb      	ldrh	r3, [r7, #20]
 8015de0:	429a      	cmp	r2, r3
 8015de2:	d904      	bls.n	8015dee <tcp_eff_send_mss_netif+0x4e>
 8015de4:	8afa      	ldrh	r2, [r7, #22]
 8015de6:	8abb      	ldrh	r3, [r7, #20]
 8015de8:	1ad3      	subs	r3, r2, r3
 8015dea:	b29b      	uxth	r3, r3
 8015dec:	e000      	b.n	8015df0 <tcp_eff_send_mss_netif+0x50>
 8015dee:	2300      	movs	r3, #0
 8015df0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8015df2:	8a7a      	ldrh	r2, [r7, #18]
 8015df4:	89fb      	ldrh	r3, [r7, #14]
 8015df6:	4293      	cmp	r3, r2
 8015df8:	bf28      	it	cs
 8015dfa:	4613      	movcs	r3, r2
 8015dfc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8015dfe:	89fb      	ldrh	r3, [r7, #14]
}
 8015e00:	4618      	mov	r0, r3
 8015e02:	3718      	adds	r7, #24
 8015e04:	46bd      	mov	sp, r7
 8015e06:	bd80      	pop	{r7, pc}
 8015e08:	08023cc8 	.word	0x08023cc8
 8015e0c:	080243d4 	.word	0x080243d4
 8015e10:	08023d0c 	.word	0x08023d0c

08015e14 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b084      	sub	sp, #16
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	6078      	str	r0, [r7, #4]
 8015e1c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8015e1e:	683b      	ldr	r3, [r7, #0]
 8015e20:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d119      	bne.n	8015e5c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8015e28:	4b10      	ldr	r3, [pc, #64]	; (8015e6c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8015e2a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8015e2e:	4910      	ldr	r1, [pc, #64]	; (8015e70 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8015e30:	4810      	ldr	r0, [pc, #64]	; (8015e74 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8015e32:	f008 ff95 	bl	801ed60 <iprintf>

  while (pcb != NULL) {
 8015e36:	e011      	b.n	8015e5c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	681a      	ldr	r2, [r3, #0]
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	429a      	cmp	r2, r3
 8015e42:	d108      	bne.n	8015e56 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	68db      	ldr	r3, [r3, #12]
 8015e48:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8015e4a:	68f8      	ldr	r0, [r7, #12]
 8015e4c:	f7fe fd20 	bl	8014890 <tcp_abort>
      pcb = next;
 8015e50:	68bb      	ldr	r3, [r7, #8]
 8015e52:	60fb      	str	r3, [r7, #12]
 8015e54:	e002      	b.n	8015e5c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	68db      	ldr	r3, [r3, #12]
 8015e5a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d1ea      	bne.n	8015e38 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8015e62:	bf00      	nop
 8015e64:	bf00      	nop
 8015e66:	3710      	adds	r7, #16
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	bd80      	pop	{r7, pc}
 8015e6c:	08023cc8 	.word	0x08023cc8
 8015e70:	080243fc 	.word	0x080243fc
 8015e74:	08023d0c 	.word	0x08023d0c

08015e78 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b084      	sub	sp, #16
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]
 8015e80:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d02a      	beq.n	8015ede <tcp_netif_ip_addr_changed+0x66>
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d026      	beq.n	8015ede <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8015e90:	4b15      	ldr	r3, [pc, #84]	; (8015ee8 <tcp_netif_ip_addr_changed+0x70>)
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	4619      	mov	r1, r3
 8015e96:	6878      	ldr	r0, [r7, #4]
 8015e98:	f7ff ffbc 	bl	8015e14 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8015e9c:	4b13      	ldr	r3, [pc, #76]	; (8015eec <tcp_netif_ip_addr_changed+0x74>)
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	4619      	mov	r1, r3
 8015ea2:	6878      	ldr	r0, [r7, #4]
 8015ea4:	f7ff ffb6 	bl	8015e14 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8015ea8:	683b      	ldr	r3, [r7, #0]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d017      	beq.n	8015ede <tcp_netif_ip_addr_changed+0x66>
 8015eae:	683b      	ldr	r3, [r7, #0]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d013      	beq.n	8015ede <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015eb6:	4b0e      	ldr	r3, [pc, #56]	; (8015ef0 <tcp_netif_ip_addr_changed+0x78>)
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	60fb      	str	r3, [r7, #12]
 8015ebc:	e00c      	b.n	8015ed8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	681a      	ldr	r2, [r3, #0]
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	429a      	cmp	r2, r3
 8015ec8:	d103      	bne.n	8015ed2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8015eca:	683b      	ldr	r3, [r7, #0]
 8015ecc:	681a      	ldr	r2, [r3, #0]
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	68db      	ldr	r3, [r3, #12]
 8015ed6:	60fb      	str	r3, [r7, #12]
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d1ef      	bne.n	8015ebe <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8015ede:	bf00      	nop
 8015ee0:	3710      	adds	r7, #16
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	bd80      	pop	{r7, pc}
 8015ee6:	bf00      	nop
 8015ee8:	2000b79c 	.word	0x2000b79c
 8015eec:	2000b7a8 	.word	0x2000b7a8
 8015ef0:	2000b7a4 	.word	0x2000b7a4

08015ef4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b082      	sub	sp, #8
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d007      	beq.n	8015f14 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f08:	4618      	mov	r0, r3
 8015f0a:	f7ff fb51 	bl	80155b0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	2200      	movs	r2, #0
 8015f12:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8015f14:	bf00      	nop
 8015f16:	3708      	adds	r7, #8
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	bd80      	pop	{r7, pc}

08015f1c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8015f1c:	b590      	push	{r4, r7, lr}
 8015f1e:	b08d      	sub	sp, #52	; 0x34
 8015f20:	af04      	add	r7, sp, #16
 8015f22:	6078      	str	r0, [r7, #4]
 8015f24:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d105      	bne.n	8015f38 <tcp_input+0x1c>
 8015f2c:	4b9b      	ldr	r3, [pc, #620]	; (801619c <tcp_input+0x280>)
 8015f2e:	2283      	movs	r2, #131	; 0x83
 8015f30:	499b      	ldr	r1, [pc, #620]	; (80161a0 <tcp_input+0x284>)
 8015f32:	489c      	ldr	r0, [pc, #624]	; (80161a4 <tcp_input+0x288>)
 8015f34:	f008 ff14 	bl	801ed60 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	685b      	ldr	r3, [r3, #4]
 8015f3c:	4a9a      	ldr	r2, [pc, #616]	; (80161a8 <tcp_input+0x28c>)
 8015f3e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	895b      	ldrh	r3, [r3, #10]
 8015f44:	2b13      	cmp	r3, #19
 8015f46:	f240 83c4 	bls.w	80166d2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015f4a:	4b98      	ldr	r3, [pc, #608]	; (80161ac <tcp_input+0x290>)
 8015f4c:	695b      	ldr	r3, [r3, #20]
 8015f4e:	4a97      	ldr	r2, [pc, #604]	; (80161ac <tcp_input+0x290>)
 8015f50:	6812      	ldr	r2, [r2, #0]
 8015f52:	4611      	mov	r1, r2
 8015f54:	4618      	mov	r0, r3
 8015f56:	f006 fbcb 	bl	801c6f0 <ip4_addr_isbroadcast_u32>
 8015f5a:	4603      	mov	r3, r0
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	f040 83ba 	bne.w	80166d6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8015f62:	4b92      	ldr	r3, [pc, #584]	; (80161ac <tcp_input+0x290>)
 8015f64:	695b      	ldr	r3, [r3, #20]
 8015f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015f6a:	2be0      	cmp	r3, #224	; 0xe0
 8015f6c:	f000 83b3 	beq.w	80166d6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8015f70:	4b8d      	ldr	r3, [pc, #564]	; (80161a8 <tcp_input+0x28c>)
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	899b      	ldrh	r3, [r3, #12]
 8015f76:	b29b      	uxth	r3, r3
 8015f78:	4618      	mov	r0, r3
 8015f7a:	f7fc facd 	bl	8012518 <lwip_htons>
 8015f7e:	4603      	mov	r3, r0
 8015f80:	0b1b      	lsrs	r3, r3, #12
 8015f82:	b29b      	uxth	r3, r3
 8015f84:	b2db      	uxtb	r3, r3
 8015f86:	009b      	lsls	r3, r3, #2
 8015f88:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8015f8a:	7cbb      	ldrb	r3, [r7, #18]
 8015f8c:	2b13      	cmp	r3, #19
 8015f8e:	f240 83a4 	bls.w	80166da <tcp_input+0x7be>
 8015f92:	7cbb      	ldrb	r3, [r7, #18]
 8015f94:	b29a      	uxth	r2, r3
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	891b      	ldrh	r3, [r3, #8]
 8015f9a:	429a      	cmp	r2, r3
 8015f9c:	f200 839d 	bhi.w	80166da <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8015fa0:	7cbb      	ldrb	r3, [r7, #18]
 8015fa2:	b29b      	uxth	r3, r3
 8015fa4:	3b14      	subs	r3, #20
 8015fa6:	b29a      	uxth	r2, r3
 8015fa8:	4b81      	ldr	r3, [pc, #516]	; (80161b0 <tcp_input+0x294>)
 8015faa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8015fac:	4b81      	ldr	r3, [pc, #516]	; (80161b4 <tcp_input+0x298>)
 8015fae:	2200      	movs	r2, #0
 8015fb0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	895a      	ldrh	r2, [r3, #10]
 8015fb6:	7cbb      	ldrb	r3, [r7, #18]
 8015fb8:	b29b      	uxth	r3, r3
 8015fba:	429a      	cmp	r2, r3
 8015fbc:	d309      	bcc.n	8015fd2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8015fbe:	4b7c      	ldr	r3, [pc, #496]	; (80161b0 <tcp_input+0x294>)
 8015fc0:	881a      	ldrh	r2, [r3, #0]
 8015fc2:	4b7d      	ldr	r3, [pc, #500]	; (80161b8 <tcp_input+0x29c>)
 8015fc4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8015fc6:	7cbb      	ldrb	r3, [r7, #18]
 8015fc8:	4619      	mov	r1, r3
 8015fca:	6878      	ldr	r0, [r7, #4]
 8015fcc:	f7fd fdda 	bl	8013b84 <pbuf_remove_header>
 8015fd0:	e04e      	b.n	8016070 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d105      	bne.n	8015fe6 <tcp_input+0xca>
 8015fda:	4b70      	ldr	r3, [pc, #448]	; (801619c <tcp_input+0x280>)
 8015fdc:	22c2      	movs	r2, #194	; 0xc2
 8015fde:	4977      	ldr	r1, [pc, #476]	; (80161bc <tcp_input+0x2a0>)
 8015fe0:	4870      	ldr	r0, [pc, #448]	; (80161a4 <tcp_input+0x288>)
 8015fe2:	f008 febd 	bl	801ed60 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8015fe6:	2114      	movs	r1, #20
 8015fe8:	6878      	ldr	r0, [r7, #4]
 8015fea:	f7fd fdcb 	bl	8013b84 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	895a      	ldrh	r2, [r3, #10]
 8015ff2:	4b71      	ldr	r3, [pc, #452]	; (80161b8 <tcp_input+0x29c>)
 8015ff4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8015ff6:	4b6e      	ldr	r3, [pc, #440]	; (80161b0 <tcp_input+0x294>)
 8015ff8:	881a      	ldrh	r2, [r3, #0]
 8015ffa:	4b6f      	ldr	r3, [pc, #444]	; (80161b8 <tcp_input+0x29c>)
 8015ffc:	881b      	ldrh	r3, [r3, #0]
 8015ffe:	1ad3      	subs	r3, r2, r3
 8016000:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8016002:	4b6d      	ldr	r3, [pc, #436]	; (80161b8 <tcp_input+0x29c>)
 8016004:	881b      	ldrh	r3, [r3, #0]
 8016006:	4619      	mov	r1, r3
 8016008:	6878      	ldr	r0, [r7, #4]
 801600a:	f7fd fdbb 	bl	8013b84 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	895b      	ldrh	r3, [r3, #10]
 8016014:	8a3a      	ldrh	r2, [r7, #16]
 8016016:	429a      	cmp	r2, r3
 8016018:	f200 8361 	bhi.w	80166de <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	685b      	ldr	r3, [r3, #4]
 8016022:	4a64      	ldr	r2, [pc, #400]	; (80161b4 <tcp_input+0x298>)
 8016024:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	8a3a      	ldrh	r2, [r7, #16]
 801602c:	4611      	mov	r1, r2
 801602e:	4618      	mov	r0, r3
 8016030:	f7fd fda8 	bl	8013b84 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	891a      	ldrh	r2, [r3, #8]
 8016038:	8a3b      	ldrh	r3, [r7, #16]
 801603a:	1ad3      	subs	r3, r2, r3
 801603c:	b29a      	uxth	r2, r3
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	895b      	ldrh	r3, [r3, #10]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d005      	beq.n	8016056 <tcp_input+0x13a>
 801604a:	4b54      	ldr	r3, [pc, #336]	; (801619c <tcp_input+0x280>)
 801604c:	22df      	movs	r2, #223	; 0xdf
 801604e:	495c      	ldr	r1, [pc, #368]	; (80161c0 <tcp_input+0x2a4>)
 8016050:	4854      	ldr	r0, [pc, #336]	; (80161a4 <tcp_input+0x288>)
 8016052:	f008 fe85 	bl	801ed60 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	891a      	ldrh	r2, [r3, #8]
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	891b      	ldrh	r3, [r3, #8]
 8016060:	429a      	cmp	r2, r3
 8016062:	d005      	beq.n	8016070 <tcp_input+0x154>
 8016064:	4b4d      	ldr	r3, [pc, #308]	; (801619c <tcp_input+0x280>)
 8016066:	22e0      	movs	r2, #224	; 0xe0
 8016068:	4956      	ldr	r1, [pc, #344]	; (80161c4 <tcp_input+0x2a8>)
 801606a:	484e      	ldr	r0, [pc, #312]	; (80161a4 <tcp_input+0x288>)
 801606c:	f008 fe78 	bl	801ed60 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8016070:	4b4d      	ldr	r3, [pc, #308]	; (80161a8 <tcp_input+0x28c>)
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	881b      	ldrh	r3, [r3, #0]
 8016076:	b29b      	uxth	r3, r3
 8016078:	4a4b      	ldr	r2, [pc, #300]	; (80161a8 <tcp_input+0x28c>)
 801607a:	6814      	ldr	r4, [r2, #0]
 801607c:	4618      	mov	r0, r3
 801607e:	f7fc fa4b 	bl	8012518 <lwip_htons>
 8016082:	4603      	mov	r3, r0
 8016084:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8016086:	4b48      	ldr	r3, [pc, #288]	; (80161a8 <tcp_input+0x28c>)
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	885b      	ldrh	r3, [r3, #2]
 801608c:	b29b      	uxth	r3, r3
 801608e:	4a46      	ldr	r2, [pc, #280]	; (80161a8 <tcp_input+0x28c>)
 8016090:	6814      	ldr	r4, [r2, #0]
 8016092:	4618      	mov	r0, r3
 8016094:	f7fc fa40 	bl	8012518 <lwip_htons>
 8016098:	4603      	mov	r3, r0
 801609a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801609c:	4b42      	ldr	r3, [pc, #264]	; (80161a8 <tcp_input+0x28c>)
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	685b      	ldr	r3, [r3, #4]
 80160a2:	4a41      	ldr	r2, [pc, #260]	; (80161a8 <tcp_input+0x28c>)
 80160a4:	6814      	ldr	r4, [r2, #0]
 80160a6:	4618      	mov	r0, r3
 80160a8:	f7fc fa4b 	bl	8012542 <lwip_htonl>
 80160ac:	4603      	mov	r3, r0
 80160ae:	6063      	str	r3, [r4, #4]
 80160b0:	6863      	ldr	r3, [r4, #4]
 80160b2:	4a45      	ldr	r2, [pc, #276]	; (80161c8 <tcp_input+0x2ac>)
 80160b4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80160b6:	4b3c      	ldr	r3, [pc, #240]	; (80161a8 <tcp_input+0x28c>)
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	689b      	ldr	r3, [r3, #8]
 80160bc:	4a3a      	ldr	r2, [pc, #232]	; (80161a8 <tcp_input+0x28c>)
 80160be:	6814      	ldr	r4, [r2, #0]
 80160c0:	4618      	mov	r0, r3
 80160c2:	f7fc fa3e 	bl	8012542 <lwip_htonl>
 80160c6:	4603      	mov	r3, r0
 80160c8:	60a3      	str	r3, [r4, #8]
 80160ca:	68a3      	ldr	r3, [r4, #8]
 80160cc:	4a3f      	ldr	r2, [pc, #252]	; (80161cc <tcp_input+0x2b0>)
 80160ce:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80160d0:	4b35      	ldr	r3, [pc, #212]	; (80161a8 <tcp_input+0x28c>)
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	89db      	ldrh	r3, [r3, #14]
 80160d6:	b29b      	uxth	r3, r3
 80160d8:	4a33      	ldr	r2, [pc, #204]	; (80161a8 <tcp_input+0x28c>)
 80160da:	6814      	ldr	r4, [r2, #0]
 80160dc:	4618      	mov	r0, r3
 80160de:	f7fc fa1b 	bl	8012518 <lwip_htons>
 80160e2:	4603      	mov	r3, r0
 80160e4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80160e6:	4b30      	ldr	r3, [pc, #192]	; (80161a8 <tcp_input+0x28c>)
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	899b      	ldrh	r3, [r3, #12]
 80160ec:	b29b      	uxth	r3, r3
 80160ee:	4618      	mov	r0, r3
 80160f0:	f7fc fa12 	bl	8012518 <lwip_htons>
 80160f4:	4603      	mov	r3, r0
 80160f6:	b2db      	uxtb	r3, r3
 80160f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80160fc:	b2da      	uxtb	r2, r3
 80160fe:	4b34      	ldr	r3, [pc, #208]	; (80161d0 <tcp_input+0x2b4>)
 8016100:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	891a      	ldrh	r2, [r3, #8]
 8016106:	4b33      	ldr	r3, [pc, #204]	; (80161d4 <tcp_input+0x2b8>)
 8016108:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801610a:	4b31      	ldr	r3, [pc, #196]	; (80161d0 <tcp_input+0x2b4>)
 801610c:	781b      	ldrb	r3, [r3, #0]
 801610e:	f003 0303 	and.w	r3, r3, #3
 8016112:	2b00      	cmp	r3, #0
 8016114:	d00c      	beq.n	8016130 <tcp_input+0x214>
    tcplen++;
 8016116:	4b2f      	ldr	r3, [pc, #188]	; (80161d4 <tcp_input+0x2b8>)
 8016118:	881b      	ldrh	r3, [r3, #0]
 801611a:	3301      	adds	r3, #1
 801611c:	b29a      	uxth	r2, r3
 801611e:	4b2d      	ldr	r3, [pc, #180]	; (80161d4 <tcp_input+0x2b8>)
 8016120:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	891a      	ldrh	r2, [r3, #8]
 8016126:	4b2b      	ldr	r3, [pc, #172]	; (80161d4 <tcp_input+0x2b8>)
 8016128:	881b      	ldrh	r3, [r3, #0]
 801612a:	429a      	cmp	r2, r3
 801612c:	f200 82d9 	bhi.w	80166e2 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8016130:	2300      	movs	r3, #0
 8016132:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016134:	4b28      	ldr	r3, [pc, #160]	; (80161d8 <tcp_input+0x2bc>)
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	61fb      	str	r3, [r7, #28]
 801613a:	e09d      	b.n	8016278 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801613c:	69fb      	ldr	r3, [r7, #28]
 801613e:	7d1b      	ldrb	r3, [r3, #20]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d105      	bne.n	8016150 <tcp_input+0x234>
 8016144:	4b15      	ldr	r3, [pc, #84]	; (801619c <tcp_input+0x280>)
 8016146:	22fb      	movs	r2, #251	; 0xfb
 8016148:	4924      	ldr	r1, [pc, #144]	; (80161dc <tcp_input+0x2c0>)
 801614a:	4816      	ldr	r0, [pc, #88]	; (80161a4 <tcp_input+0x288>)
 801614c:	f008 fe08 	bl	801ed60 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8016150:	69fb      	ldr	r3, [r7, #28]
 8016152:	7d1b      	ldrb	r3, [r3, #20]
 8016154:	2b0a      	cmp	r3, #10
 8016156:	d105      	bne.n	8016164 <tcp_input+0x248>
 8016158:	4b10      	ldr	r3, [pc, #64]	; (801619c <tcp_input+0x280>)
 801615a:	22fc      	movs	r2, #252	; 0xfc
 801615c:	4920      	ldr	r1, [pc, #128]	; (80161e0 <tcp_input+0x2c4>)
 801615e:	4811      	ldr	r0, [pc, #68]	; (80161a4 <tcp_input+0x288>)
 8016160:	f008 fdfe 	bl	801ed60 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8016164:	69fb      	ldr	r3, [r7, #28]
 8016166:	7d1b      	ldrb	r3, [r3, #20]
 8016168:	2b01      	cmp	r3, #1
 801616a:	d105      	bne.n	8016178 <tcp_input+0x25c>
 801616c:	4b0b      	ldr	r3, [pc, #44]	; (801619c <tcp_input+0x280>)
 801616e:	22fd      	movs	r2, #253	; 0xfd
 8016170:	491c      	ldr	r1, [pc, #112]	; (80161e4 <tcp_input+0x2c8>)
 8016172:	480c      	ldr	r0, [pc, #48]	; (80161a4 <tcp_input+0x288>)
 8016174:	f008 fdf4 	bl	801ed60 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016178:	69fb      	ldr	r3, [r7, #28]
 801617a:	7a1b      	ldrb	r3, [r3, #8]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d033      	beq.n	80161e8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016180:	69fb      	ldr	r3, [r7, #28]
 8016182:	7a1a      	ldrb	r2, [r3, #8]
 8016184:	4b09      	ldr	r3, [pc, #36]	; (80161ac <tcp_input+0x290>)
 8016186:	685b      	ldr	r3, [r3, #4]
 8016188:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801618c:	3301      	adds	r3, #1
 801618e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016190:	429a      	cmp	r2, r3
 8016192:	d029      	beq.n	80161e8 <tcp_input+0x2cc>
      prev = pcb;
 8016194:	69fb      	ldr	r3, [r7, #28]
 8016196:	61bb      	str	r3, [r7, #24]
      continue;
 8016198:	e06b      	b.n	8016272 <tcp_input+0x356>
 801619a:	bf00      	nop
 801619c:	08024430 	.word	0x08024430
 80161a0:	08024464 	.word	0x08024464
 80161a4:	0802447c 	.word	0x0802447c
 80161a8:	2000476c 	.word	0x2000476c
 80161ac:	20008088 	.word	0x20008088
 80161b0:	20004770 	.word	0x20004770
 80161b4:	20004774 	.word	0x20004774
 80161b8:	20004772 	.word	0x20004772
 80161bc:	080244a4 	.word	0x080244a4
 80161c0:	080244b4 	.word	0x080244b4
 80161c4:	080244c0 	.word	0x080244c0
 80161c8:	2000477c 	.word	0x2000477c
 80161cc:	20004780 	.word	0x20004780
 80161d0:	20004788 	.word	0x20004788
 80161d4:	20004786 	.word	0x20004786
 80161d8:	2000b79c 	.word	0x2000b79c
 80161dc:	080244e0 	.word	0x080244e0
 80161e0:	08024508 	.word	0x08024508
 80161e4:	08024534 	.word	0x08024534
    }

    if (pcb->remote_port == tcphdr->src &&
 80161e8:	69fb      	ldr	r3, [r7, #28]
 80161ea:	8b1a      	ldrh	r2, [r3, #24]
 80161ec:	4b94      	ldr	r3, [pc, #592]	; (8016440 <tcp_input+0x524>)
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	881b      	ldrh	r3, [r3, #0]
 80161f2:	b29b      	uxth	r3, r3
 80161f4:	429a      	cmp	r2, r3
 80161f6:	d13a      	bne.n	801626e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80161f8:	69fb      	ldr	r3, [r7, #28]
 80161fa:	8ada      	ldrh	r2, [r3, #22]
 80161fc:	4b90      	ldr	r3, [pc, #576]	; (8016440 <tcp_input+0x524>)
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	885b      	ldrh	r3, [r3, #2]
 8016202:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8016204:	429a      	cmp	r2, r3
 8016206:	d132      	bne.n	801626e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016208:	69fb      	ldr	r3, [r7, #28]
 801620a:	685a      	ldr	r2, [r3, #4]
 801620c:	4b8d      	ldr	r3, [pc, #564]	; (8016444 <tcp_input+0x528>)
 801620e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8016210:	429a      	cmp	r2, r3
 8016212:	d12c      	bne.n	801626e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016214:	69fb      	ldr	r3, [r7, #28]
 8016216:	681a      	ldr	r2, [r3, #0]
 8016218:	4b8a      	ldr	r3, [pc, #552]	; (8016444 <tcp_input+0x528>)
 801621a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801621c:	429a      	cmp	r2, r3
 801621e:	d126      	bne.n	801626e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016220:	69fb      	ldr	r3, [r7, #28]
 8016222:	68db      	ldr	r3, [r3, #12]
 8016224:	69fa      	ldr	r2, [r7, #28]
 8016226:	429a      	cmp	r2, r3
 8016228:	d106      	bne.n	8016238 <tcp_input+0x31c>
 801622a:	4b87      	ldr	r3, [pc, #540]	; (8016448 <tcp_input+0x52c>)
 801622c:	f240 120d 	movw	r2, #269	; 0x10d
 8016230:	4986      	ldr	r1, [pc, #536]	; (801644c <tcp_input+0x530>)
 8016232:	4887      	ldr	r0, [pc, #540]	; (8016450 <tcp_input+0x534>)
 8016234:	f008 fd94 	bl	801ed60 <iprintf>
      if (prev != NULL) {
 8016238:	69bb      	ldr	r3, [r7, #24]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d00a      	beq.n	8016254 <tcp_input+0x338>
        prev->next = pcb->next;
 801623e:	69fb      	ldr	r3, [r7, #28]
 8016240:	68da      	ldr	r2, [r3, #12]
 8016242:	69bb      	ldr	r3, [r7, #24]
 8016244:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8016246:	4b83      	ldr	r3, [pc, #524]	; (8016454 <tcp_input+0x538>)
 8016248:	681a      	ldr	r2, [r3, #0]
 801624a:	69fb      	ldr	r3, [r7, #28]
 801624c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801624e:	4a81      	ldr	r2, [pc, #516]	; (8016454 <tcp_input+0x538>)
 8016250:	69fb      	ldr	r3, [r7, #28]
 8016252:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8016254:	69fb      	ldr	r3, [r7, #28]
 8016256:	68db      	ldr	r3, [r3, #12]
 8016258:	69fa      	ldr	r2, [r7, #28]
 801625a:	429a      	cmp	r2, r3
 801625c:	d111      	bne.n	8016282 <tcp_input+0x366>
 801625e:	4b7a      	ldr	r3, [pc, #488]	; (8016448 <tcp_input+0x52c>)
 8016260:	f240 1215 	movw	r2, #277	; 0x115
 8016264:	497c      	ldr	r1, [pc, #496]	; (8016458 <tcp_input+0x53c>)
 8016266:	487a      	ldr	r0, [pc, #488]	; (8016450 <tcp_input+0x534>)
 8016268:	f008 fd7a 	bl	801ed60 <iprintf>
      break;
 801626c:	e009      	b.n	8016282 <tcp_input+0x366>
    }
    prev = pcb;
 801626e:	69fb      	ldr	r3, [r7, #28]
 8016270:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016272:	69fb      	ldr	r3, [r7, #28]
 8016274:	68db      	ldr	r3, [r3, #12]
 8016276:	61fb      	str	r3, [r7, #28]
 8016278:	69fb      	ldr	r3, [r7, #28]
 801627a:	2b00      	cmp	r3, #0
 801627c:	f47f af5e 	bne.w	801613c <tcp_input+0x220>
 8016280:	e000      	b.n	8016284 <tcp_input+0x368>
      break;
 8016282:	bf00      	nop
  }

  if (pcb == NULL) {
 8016284:	69fb      	ldr	r3, [r7, #28]
 8016286:	2b00      	cmp	r3, #0
 8016288:	f040 8095 	bne.w	80163b6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801628c:	4b73      	ldr	r3, [pc, #460]	; (801645c <tcp_input+0x540>)
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	61fb      	str	r3, [r7, #28]
 8016292:	e03f      	b.n	8016314 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016294:	69fb      	ldr	r3, [r7, #28]
 8016296:	7d1b      	ldrb	r3, [r3, #20]
 8016298:	2b0a      	cmp	r3, #10
 801629a:	d006      	beq.n	80162aa <tcp_input+0x38e>
 801629c:	4b6a      	ldr	r3, [pc, #424]	; (8016448 <tcp_input+0x52c>)
 801629e:	f240 121f 	movw	r2, #287	; 0x11f
 80162a2:	496f      	ldr	r1, [pc, #444]	; (8016460 <tcp_input+0x544>)
 80162a4:	486a      	ldr	r0, [pc, #424]	; (8016450 <tcp_input+0x534>)
 80162a6:	f008 fd5b 	bl	801ed60 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80162aa:	69fb      	ldr	r3, [r7, #28]
 80162ac:	7a1b      	ldrb	r3, [r3, #8]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d009      	beq.n	80162c6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80162b2:	69fb      	ldr	r3, [r7, #28]
 80162b4:	7a1a      	ldrb	r2, [r3, #8]
 80162b6:	4b63      	ldr	r3, [pc, #396]	; (8016444 <tcp_input+0x528>)
 80162b8:	685b      	ldr	r3, [r3, #4]
 80162ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80162be:	3301      	adds	r3, #1
 80162c0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80162c2:	429a      	cmp	r2, r3
 80162c4:	d122      	bne.n	801630c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80162c6:	69fb      	ldr	r3, [r7, #28]
 80162c8:	8b1a      	ldrh	r2, [r3, #24]
 80162ca:	4b5d      	ldr	r3, [pc, #372]	; (8016440 <tcp_input+0x524>)
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	881b      	ldrh	r3, [r3, #0]
 80162d0:	b29b      	uxth	r3, r3
 80162d2:	429a      	cmp	r2, r3
 80162d4:	d11b      	bne.n	801630e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80162d6:	69fb      	ldr	r3, [r7, #28]
 80162d8:	8ada      	ldrh	r2, [r3, #22]
 80162da:	4b59      	ldr	r3, [pc, #356]	; (8016440 <tcp_input+0x524>)
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	885b      	ldrh	r3, [r3, #2]
 80162e0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80162e2:	429a      	cmp	r2, r3
 80162e4:	d113      	bne.n	801630e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80162e6:	69fb      	ldr	r3, [r7, #28]
 80162e8:	685a      	ldr	r2, [r3, #4]
 80162ea:	4b56      	ldr	r3, [pc, #344]	; (8016444 <tcp_input+0x528>)
 80162ec:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80162ee:	429a      	cmp	r2, r3
 80162f0:	d10d      	bne.n	801630e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80162f2:	69fb      	ldr	r3, [r7, #28]
 80162f4:	681a      	ldr	r2, [r3, #0]
 80162f6:	4b53      	ldr	r3, [pc, #332]	; (8016444 <tcp_input+0x528>)
 80162f8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80162fa:	429a      	cmp	r2, r3
 80162fc:	d107      	bne.n	801630e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80162fe:	69f8      	ldr	r0, [r7, #28]
 8016300:	f000 fb54 	bl	80169ac <tcp_timewait_input>
        }
        pbuf_free(p);
 8016304:	6878      	ldr	r0, [r7, #4]
 8016306:	f7fd fcc3 	bl	8013c90 <pbuf_free>
        return;
 801630a:	e1f0      	b.n	80166ee <tcp_input+0x7d2>
        continue;
 801630c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801630e:	69fb      	ldr	r3, [r7, #28]
 8016310:	68db      	ldr	r3, [r3, #12]
 8016312:	61fb      	str	r3, [r7, #28]
 8016314:	69fb      	ldr	r3, [r7, #28]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d1bc      	bne.n	8016294 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801631a:	2300      	movs	r3, #0
 801631c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801631e:	4b51      	ldr	r3, [pc, #324]	; (8016464 <tcp_input+0x548>)
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	617b      	str	r3, [r7, #20]
 8016324:	e02a      	b.n	801637c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016326:	697b      	ldr	r3, [r7, #20]
 8016328:	7a1b      	ldrb	r3, [r3, #8]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d00c      	beq.n	8016348 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801632e:	697b      	ldr	r3, [r7, #20]
 8016330:	7a1a      	ldrb	r2, [r3, #8]
 8016332:	4b44      	ldr	r3, [pc, #272]	; (8016444 <tcp_input+0x528>)
 8016334:	685b      	ldr	r3, [r3, #4]
 8016336:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801633a:	3301      	adds	r3, #1
 801633c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801633e:	429a      	cmp	r2, r3
 8016340:	d002      	beq.n	8016348 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8016342:	697b      	ldr	r3, [r7, #20]
 8016344:	61bb      	str	r3, [r7, #24]
        continue;
 8016346:	e016      	b.n	8016376 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016348:	697b      	ldr	r3, [r7, #20]
 801634a:	8ada      	ldrh	r2, [r3, #22]
 801634c:	4b3c      	ldr	r3, [pc, #240]	; (8016440 <tcp_input+0x524>)
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	885b      	ldrh	r3, [r3, #2]
 8016352:	b29b      	uxth	r3, r3
 8016354:	429a      	cmp	r2, r3
 8016356:	d10c      	bne.n	8016372 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016358:	697b      	ldr	r3, [r7, #20]
 801635a:	681a      	ldr	r2, [r3, #0]
 801635c:	4b39      	ldr	r3, [pc, #228]	; (8016444 <tcp_input+0x528>)
 801635e:	695b      	ldr	r3, [r3, #20]
 8016360:	429a      	cmp	r2, r3
 8016362:	d00f      	beq.n	8016384 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8016364:	697b      	ldr	r3, [r7, #20]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d00d      	beq.n	8016386 <tcp_input+0x46a>
 801636a:	697b      	ldr	r3, [r7, #20]
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d009      	beq.n	8016386 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8016372:	697b      	ldr	r3, [r7, #20]
 8016374:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016376:	697b      	ldr	r3, [r7, #20]
 8016378:	68db      	ldr	r3, [r3, #12]
 801637a:	617b      	str	r3, [r7, #20]
 801637c:	697b      	ldr	r3, [r7, #20]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d1d1      	bne.n	8016326 <tcp_input+0x40a>
 8016382:	e000      	b.n	8016386 <tcp_input+0x46a>
            break;
 8016384:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8016386:	697b      	ldr	r3, [r7, #20]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d014      	beq.n	80163b6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801638c:	69bb      	ldr	r3, [r7, #24]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d00a      	beq.n	80163a8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8016392:	697b      	ldr	r3, [r7, #20]
 8016394:	68da      	ldr	r2, [r3, #12]
 8016396:	69bb      	ldr	r3, [r7, #24]
 8016398:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801639a:	4b32      	ldr	r3, [pc, #200]	; (8016464 <tcp_input+0x548>)
 801639c:	681a      	ldr	r2, [r3, #0]
 801639e:	697b      	ldr	r3, [r7, #20]
 80163a0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80163a2:	4a30      	ldr	r2, [pc, #192]	; (8016464 <tcp_input+0x548>)
 80163a4:	697b      	ldr	r3, [r7, #20]
 80163a6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80163a8:	6978      	ldr	r0, [r7, #20]
 80163aa:	f000 fa01 	bl	80167b0 <tcp_listen_input>
      }
      pbuf_free(p);
 80163ae:	6878      	ldr	r0, [r7, #4]
 80163b0:	f7fd fc6e 	bl	8013c90 <pbuf_free>
      return;
 80163b4:	e19b      	b.n	80166ee <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80163b6:	69fb      	ldr	r3, [r7, #28]
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	f000 8160 	beq.w	801667e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80163be:	4b2a      	ldr	r3, [pc, #168]	; (8016468 <tcp_input+0x54c>)
 80163c0:	2200      	movs	r2, #0
 80163c2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	891a      	ldrh	r2, [r3, #8]
 80163c8:	4b27      	ldr	r3, [pc, #156]	; (8016468 <tcp_input+0x54c>)
 80163ca:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80163cc:	4a26      	ldr	r2, [pc, #152]	; (8016468 <tcp_input+0x54c>)
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80163d2:	4b1b      	ldr	r3, [pc, #108]	; (8016440 <tcp_input+0x524>)
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	4a24      	ldr	r2, [pc, #144]	; (8016468 <tcp_input+0x54c>)
 80163d8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80163da:	4b24      	ldr	r3, [pc, #144]	; (801646c <tcp_input+0x550>)
 80163dc:	2200      	movs	r2, #0
 80163de:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80163e0:	4b23      	ldr	r3, [pc, #140]	; (8016470 <tcp_input+0x554>)
 80163e2:	2200      	movs	r2, #0
 80163e4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80163e6:	4b23      	ldr	r3, [pc, #140]	; (8016474 <tcp_input+0x558>)
 80163e8:	2200      	movs	r2, #0
 80163ea:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80163ec:	4b22      	ldr	r3, [pc, #136]	; (8016478 <tcp_input+0x55c>)
 80163ee:	781b      	ldrb	r3, [r3, #0]
 80163f0:	f003 0308 	and.w	r3, r3, #8
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d006      	beq.n	8016406 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	7b5b      	ldrb	r3, [r3, #13]
 80163fc:	f043 0301 	orr.w	r3, r3, #1
 8016400:	b2da      	uxtb	r2, r3
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8016406:	69fb      	ldr	r3, [r7, #28]
 8016408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801640a:	2b00      	cmp	r3, #0
 801640c:	d038      	beq.n	8016480 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801640e:	69f8      	ldr	r0, [r7, #28]
 8016410:	f7ff f852 	bl	80154b8 <tcp_process_refused_data>
 8016414:	4603      	mov	r3, r0
 8016416:	f113 0f0d 	cmn.w	r3, #13
 801641a:	d007      	beq.n	801642c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801641c:	69fb      	ldr	r3, [r7, #28]
 801641e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016420:	2b00      	cmp	r3, #0
 8016422:	d02d      	beq.n	8016480 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016424:	4b15      	ldr	r3, [pc, #84]	; (801647c <tcp_input+0x560>)
 8016426:	881b      	ldrh	r3, [r3, #0]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d029      	beq.n	8016480 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801642c:	69fb      	ldr	r3, [r7, #28]
 801642e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016430:	2b00      	cmp	r3, #0
 8016432:	f040 8104 	bne.w	801663e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8016436:	69f8      	ldr	r0, [r7, #28]
 8016438:	f003 fe16 	bl	801a068 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801643c:	e0ff      	b.n	801663e <tcp_input+0x722>
 801643e:	bf00      	nop
 8016440:	2000476c 	.word	0x2000476c
 8016444:	20008088 	.word	0x20008088
 8016448:	08024430 	.word	0x08024430
 801644c:	0802455c 	.word	0x0802455c
 8016450:	0802447c 	.word	0x0802447c
 8016454:	2000b79c 	.word	0x2000b79c
 8016458:	08024588 	.word	0x08024588
 801645c:	2000b7ac 	.word	0x2000b7ac
 8016460:	080245b4 	.word	0x080245b4
 8016464:	2000b7a4 	.word	0x2000b7a4
 8016468:	2000475c 	.word	0x2000475c
 801646c:	2000478c 	.word	0x2000478c
 8016470:	20004789 	.word	0x20004789
 8016474:	20004784 	.word	0x20004784
 8016478:	20004788 	.word	0x20004788
 801647c:	20004786 	.word	0x20004786
      }
    }
    tcp_input_pcb = pcb;
 8016480:	4a9c      	ldr	r2, [pc, #624]	; (80166f4 <tcp_input+0x7d8>)
 8016482:	69fb      	ldr	r3, [r7, #28]
 8016484:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8016486:	69f8      	ldr	r0, [r7, #28]
 8016488:	f000 fb0a 	bl	8016aa0 <tcp_process>
 801648c:	4603      	mov	r3, r0
 801648e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8016490:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016494:	f113 0f0d 	cmn.w	r3, #13
 8016498:	f000 80d3 	beq.w	8016642 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801649c:	4b96      	ldr	r3, [pc, #600]	; (80166f8 <tcp_input+0x7dc>)
 801649e:	781b      	ldrb	r3, [r3, #0]
 80164a0:	f003 0308 	and.w	r3, r3, #8
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d015      	beq.n	80164d4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80164a8:	69fb      	ldr	r3, [r7, #28]
 80164aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d008      	beq.n	80164c4 <tcp_input+0x5a8>
 80164b2:	69fb      	ldr	r3, [r7, #28]
 80164b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80164b8:	69fa      	ldr	r2, [r7, #28]
 80164ba:	6912      	ldr	r2, [r2, #16]
 80164bc:	f06f 010d 	mvn.w	r1, #13
 80164c0:	4610      	mov	r0, r2
 80164c2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80164c4:	69f9      	ldr	r1, [r7, #28]
 80164c6:	488d      	ldr	r0, [pc, #564]	; (80166fc <tcp_input+0x7e0>)
 80164c8:	f7ff fbb0 	bl	8015c2c <tcp_pcb_remove>
        tcp_free(pcb);
 80164cc:	69f8      	ldr	r0, [r7, #28]
 80164ce:	f7fd fe9b 	bl	8014208 <tcp_free>
 80164d2:	e0c1      	b.n	8016658 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80164d4:	2300      	movs	r3, #0
 80164d6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80164d8:	4b89      	ldr	r3, [pc, #548]	; (8016700 <tcp_input+0x7e4>)
 80164da:	881b      	ldrh	r3, [r3, #0]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d01d      	beq.n	801651c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80164e0:	4b87      	ldr	r3, [pc, #540]	; (8016700 <tcp_input+0x7e4>)
 80164e2:	881b      	ldrh	r3, [r3, #0]
 80164e4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80164e6:	69fb      	ldr	r3, [r7, #28]
 80164e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d00a      	beq.n	8016506 <tcp_input+0x5ea>
 80164f0:	69fb      	ldr	r3, [r7, #28]
 80164f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80164f6:	69fa      	ldr	r2, [r7, #28]
 80164f8:	6910      	ldr	r0, [r2, #16]
 80164fa:	89fa      	ldrh	r2, [r7, #14]
 80164fc:	69f9      	ldr	r1, [r7, #28]
 80164fe:	4798      	blx	r3
 8016500:	4603      	mov	r3, r0
 8016502:	74fb      	strb	r3, [r7, #19]
 8016504:	e001      	b.n	801650a <tcp_input+0x5ee>
 8016506:	2300      	movs	r3, #0
 8016508:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801650a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801650e:	f113 0f0d 	cmn.w	r3, #13
 8016512:	f000 8098 	beq.w	8016646 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8016516:	4b7a      	ldr	r3, [pc, #488]	; (8016700 <tcp_input+0x7e4>)
 8016518:	2200      	movs	r2, #0
 801651a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801651c:	69f8      	ldr	r0, [r7, #28]
 801651e:	f000 f907 	bl	8016730 <tcp_input_delayed_close>
 8016522:	4603      	mov	r3, r0
 8016524:	2b00      	cmp	r3, #0
 8016526:	f040 8090 	bne.w	801664a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801652a:	4b76      	ldr	r3, [pc, #472]	; (8016704 <tcp_input+0x7e8>)
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	2b00      	cmp	r3, #0
 8016530:	d041      	beq.n	80165b6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016532:	69fb      	ldr	r3, [r7, #28]
 8016534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016536:	2b00      	cmp	r3, #0
 8016538:	d006      	beq.n	8016548 <tcp_input+0x62c>
 801653a:	4b73      	ldr	r3, [pc, #460]	; (8016708 <tcp_input+0x7ec>)
 801653c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016540:	4972      	ldr	r1, [pc, #456]	; (801670c <tcp_input+0x7f0>)
 8016542:	4873      	ldr	r0, [pc, #460]	; (8016710 <tcp_input+0x7f4>)
 8016544:	f008 fc0c 	bl	801ed60 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8016548:	69fb      	ldr	r3, [r7, #28]
 801654a:	8b5b      	ldrh	r3, [r3, #26]
 801654c:	f003 0310 	and.w	r3, r3, #16
 8016550:	2b00      	cmp	r3, #0
 8016552:	d008      	beq.n	8016566 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016554:	4b6b      	ldr	r3, [pc, #428]	; (8016704 <tcp_input+0x7e8>)
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	4618      	mov	r0, r3
 801655a:	f7fd fb99 	bl	8013c90 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801655e:	69f8      	ldr	r0, [r7, #28]
 8016560:	f7fe f996 	bl	8014890 <tcp_abort>
            goto aborted;
 8016564:	e078      	b.n	8016658 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8016566:	69fb      	ldr	r3, [r7, #28]
 8016568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801656c:	2b00      	cmp	r3, #0
 801656e:	d00c      	beq.n	801658a <tcp_input+0x66e>
 8016570:	69fb      	ldr	r3, [r7, #28]
 8016572:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016576:	69fb      	ldr	r3, [r7, #28]
 8016578:	6918      	ldr	r0, [r3, #16]
 801657a:	4b62      	ldr	r3, [pc, #392]	; (8016704 <tcp_input+0x7e8>)
 801657c:	681a      	ldr	r2, [r3, #0]
 801657e:	2300      	movs	r3, #0
 8016580:	69f9      	ldr	r1, [r7, #28]
 8016582:	47a0      	blx	r4
 8016584:	4603      	mov	r3, r0
 8016586:	74fb      	strb	r3, [r7, #19]
 8016588:	e008      	b.n	801659c <tcp_input+0x680>
 801658a:	4b5e      	ldr	r3, [pc, #376]	; (8016704 <tcp_input+0x7e8>)
 801658c:	681a      	ldr	r2, [r3, #0]
 801658e:	2300      	movs	r3, #0
 8016590:	69f9      	ldr	r1, [r7, #28]
 8016592:	2000      	movs	r0, #0
 8016594:	f7ff f884 	bl	80156a0 <tcp_recv_null>
 8016598:	4603      	mov	r3, r0
 801659a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801659c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80165a0:	f113 0f0d 	cmn.w	r3, #13
 80165a4:	d053      	beq.n	801664e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80165a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d003      	beq.n	80165b6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80165ae:	4b55      	ldr	r3, [pc, #340]	; (8016704 <tcp_input+0x7e8>)
 80165b0:	681a      	ldr	r2, [r3, #0]
 80165b2:	69fb      	ldr	r3, [r7, #28]
 80165b4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80165b6:	4b50      	ldr	r3, [pc, #320]	; (80166f8 <tcp_input+0x7dc>)
 80165b8:	781b      	ldrb	r3, [r3, #0]
 80165ba:	f003 0320 	and.w	r3, r3, #32
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d030      	beq.n	8016624 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80165c2:	69fb      	ldr	r3, [r7, #28]
 80165c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d009      	beq.n	80165de <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80165ca:	69fb      	ldr	r3, [r7, #28]
 80165cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80165ce:	7b5a      	ldrb	r2, [r3, #13]
 80165d0:	69fb      	ldr	r3, [r7, #28]
 80165d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80165d4:	f042 0220 	orr.w	r2, r2, #32
 80165d8:	b2d2      	uxtb	r2, r2
 80165da:	735a      	strb	r2, [r3, #13]
 80165dc:	e022      	b.n	8016624 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80165de:	69fb      	ldr	r3, [r7, #28]
 80165e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80165e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80165e6:	d005      	beq.n	80165f4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80165e8:	69fb      	ldr	r3, [r7, #28]
 80165ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80165ec:	3301      	adds	r3, #1
 80165ee:	b29a      	uxth	r2, r3
 80165f0:	69fb      	ldr	r3, [r7, #28]
 80165f2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80165f4:	69fb      	ldr	r3, [r7, #28]
 80165f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d00b      	beq.n	8016616 <tcp_input+0x6fa>
 80165fe:	69fb      	ldr	r3, [r7, #28]
 8016600:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016604:	69fb      	ldr	r3, [r7, #28]
 8016606:	6918      	ldr	r0, [r3, #16]
 8016608:	2300      	movs	r3, #0
 801660a:	2200      	movs	r2, #0
 801660c:	69f9      	ldr	r1, [r7, #28]
 801660e:	47a0      	blx	r4
 8016610:	4603      	mov	r3, r0
 8016612:	74fb      	strb	r3, [r7, #19]
 8016614:	e001      	b.n	801661a <tcp_input+0x6fe>
 8016616:	2300      	movs	r3, #0
 8016618:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801661a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801661e:	f113 0f0d 	cmn.w	r3, #13
 8016622:	d016      	beq.n	8016652 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016624:	4b33      	ldr	r3, [pc, #204]	; (80166f4 <tcp_input+0x7d8>)
 8016626:	2200      	movs	r2, #0
 8016628:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801662a:	69f8      	ldr	r0, [r7, #28]
 801662c:	f000 f880 	bl	8016730 <tcp_input_delayed_close>
 8016630:	4603      	mov	r3, r0
 8016632:	2b00      	cmp	r3, #0
 8016634:	d10f      	bne.n	8016656 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016636:	69f8      	ldr	r0, [r7, #28]
 8016638:	f002 ff10 	bl	801945c <tcp_output>
 801663c:	e00c      	b.n	8016658 <tcp_input+0x73c>
        goto aborted;
 801663e:	bf00      	nop
 8016640:	e00a      	b.n	8016658 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016642:	bf00      	nop
 8016644:	e008      	b.n	8016658 <tcp_input+0x73c>
              goto aborted;
 8016646:	bf00      	nop
 8016648:	e006      	b.n	8016658 <tcp_input+0x73c>
          goto aborted;
 801664a:	bf00      	nop
 801664c:	e004      	b.n	8016658 <tcp_input+0x73c>
            goto aborted;
 801664e:	bf00      	nop
 8016650:	e002      	b.n	8016658 <tcp_input+0x73c>
              goto aborted;
 8016652:	bf00      	nop
 8016654:	e000      	b.n	8016658 <tcp_input+0x73c>
          goto aborted;
 8016656:	bf00      	nop
    tcp_input_pcb = NULL;
 8016658:	4b26      	ldr	r3, [pc, #152]	; (80166f4 <tcp_input+0x7d8>)
 801665a:	2200      	movs	r2, #0
 801665c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801665e:	4b29      	ldr	r3, [pc, #164]	; (8016704 <tcp_input+0x7e8>)
 8016660:	2200      	movs	r2, #0
 8016662:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8016664:	4b2b      	ldr	r3, [pc, #172]	; (8016714 <tcp_input+0x7f8>)
 8016666:	685b      	ldr	r3, [r3, #4]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d03f      	beq.n	80166ec <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 801666c:	4b29      	ldr	r3, [pc, #164]	; (8016714 <tcp_input+0x7f8>)
 801666e:	685b      	ldr	r3, [r3, #4]
 8016670:	4618      	mov	r0, r3
 8016672:	f7fd fb0d 	bl	8013c90 <pbuf_free>
      inseg.p = NULL;
 8016676:	4b27      	ldr	r3, [pc, #156]	; (8016714 <tcp_input+0x7f8>)
 8016678:	2200      	movs	r2, #0
 801667a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801667c:	e036      	b.n	80166ec <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801667e:	4b26      	ldr	r3, [pc, #152]	; (8016718 <tcp_input+0x7fc>)
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	899b      	ldrh	r3, [r3, #12]
 8016684:	b29b      	uxth	r3, r3
 8016686:	4618      	mov	r0, r3
 8016688:	f7fb ff46 	bl	8012518 <lwip_htons>
 801668c:	4603      	mov	r3, r0
 801668e:	b2db      	uxtb	r3, r3
 8016690:	f003 0304 	and.w	r3, r3, #4
 8016694:	2b00      	cmp	r3, #0
 8016696:	d118      	bne.n	80166ca <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016698:	4b20      	ldr	r3, [pc, #128]	; (801671c <tcp_input+0x800>)
 801669a:	6819      	ldr	r1, [r3, #0]
 801669c:	4b20      	ldr	r3, [pc, #128]	; (8016720 <tcp_input+0x804>)
 801669e:	881b      	ldrh	r3, [r3, #0]
 80166a0:	461a      	mov	r2, r3
 80166a2:	4b20      	ldr	r3, [pc, #128]	; (8016724 <tcp_input+0x808>)
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80166a8:	4b1b      	ldr	r3, [pc, #108]	; (8016718 <tcp_input+0x7fc>)
 80166aa:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80166ac:	885b      	ldrh	r3, [r3, #2]
 80166ae:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80166b0:	4a19      	ldr	r2, [pc, #100]	; (8016718 <tcp_input+0x7fc>)
 80166b2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80166b4:	8812      	ldrh	r2, [r2, #0]
 80166b6:	b292      	uxth	r2, r2
 80166b8:	9202      	str	r2, [sp, #8]
 80166ba:	9301      	str	r3, [sp, #4]
 80166bc:	4b1a      	ldr	r3, [pc, #104]	; (8016728 <tcp_input+0x80c>)
 80166be:	9300      	str	r3, [sp, #0]
 80166c0:	4b1a      	ldr	r3, [pc, #104]	; (801672c <tcp_input+0x810>)
 80166c2:	4602      	mov	r2, r0
 80166c4:	2000      	movs	r0, #0
 80166c6:	f003 fc7d 	bl	8019fc4 <tcp_rst>
    pbuf_free(p);
 80166ca:	6878      	ldr	r0, [r7, #4]
 80166cc:	f7fd fae0 	bl	8013c90 <pbuf_free>
  return;
 80166d0:	e00c      	b.n	80166ec <tcp_input+0x7d0>
    goto dropped;
 80166d2:	bf00      	nop
 80166d4:	e006      	b.n	80166e4 <tcp_input+0x7c8>
    goto dropped;
 80166d6:	bf00      	nop
 80166d8:	e004      	b.n	80166e4 <tcp_input+0x7c8>
    goto dropped;
 80166da:	bf00      	nop
 80166dc:	e002      	b.n	80166e4 <tcp_input+0x7c8>
      goto dropped;
 80166de:	bf00      	nop
 80166e0:	e000      	b.n	80166e4 <tcp_input+0x7c8>
      goto dropped;
 80166e2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80166e4:	6878      	ldr	r0, [r7, #4]
 80166e6:	f7fd fad3 	bl	8013c90 <pbuf_free>
 80166ea:	e000      	b.n	80166ee <tcp_input+0x7d2>
  return;
 80166ec:	bf00      	nop
}
 80166ee:	3724      	adds	r7, #36	; 0x24
 80166f0:	46bd      	mov	sp, r7
 80166f2:	bd90      	pop	{r4, r7, pc}
 80166f4:	2000b7b0 	.word	0x2000b7b0
 80166f8:	20004789 	.word	0x20004789
 80166fc:	2000b79c 	.word	0x2000b79c
 8016700:	20004784 	.word	0x20004784
 8016704:	2000478c 	.word	0x2000478c
 8016708:	08024430 	.word	0x08024430
 801670c:	080245e4 	.word	0x080245e4
 8016710:	0802447c 	.word	0x0802447c
 8016714:	2000475c 	.word	0x2000475c
 8016718:	2000476c 	.word	0x2000476c
 801671c:	20004780 	.word	0x20004780
 8016720:	20004786 	.word	0x20004786
 8016724:	2000477c 	.word	0x2000477c
 8016728:	20008098 	.word	0x20008098
 801672c:	2000809c 	.word	0x2000809c

08016730 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8016730:	b580      	push	{r7, lr}
 8016732:	b082      	sub	sp, #8
 8016734:	af00      	add	r7, sp, #0
 8016736:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	2b00      	cmp	r3, #0
 801673c:	d106      	bne.n	801674c <tcp_input_delayed_close+0x1c>
 801673e:	4b17      	ldr	r3, [pc, #92]	; (801679c <tcp_input_delayed_close+0x6c>)
 8016740:	f240 225a 	movw	r2, #602	; 0x25a
 8016744:	4916      	ldr	r1, [pc, #88]	; (80167a0 <tcp_input_delayed_close+0x70>)
 8016746:	4817      	ldr	r0, [pc, #92]	; (80167a4 <tcp_input_delayed_close+0x74>)
 8016748:	f008 fb0a 	bl	801ed60 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801674c:	4b16      	ldr	r3, [pc, #88]	; (80167a8 <tcp_input_delayed_close+0x78>)
 801674e:	781b      	ldrb	r3, [r3, #0]
 8016750:	f003 0310 	and.w	r3, r3, #16
 8016754:	2b00      	cmp	r3, #0
 8016756:	d01c      	beq.n	8016792 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	8b5b      	ldrh	r3, [r3, #26]
 801675c:	f003 0310 	and.w	r3, r3, #16
 8016760:	2b00      	cmp	r3, #0
 8016762:	d10d      	bne.n	8016780 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801676a:	2b00      	cmp	r3, #0
 801676c:	d008      	beq.n	8016780 <tcp_input_delayed_close+0x50>
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016774:	687a      	ldr	r2, [r7, #4]
 8016776:	6912      	ldr	r2, [r2, #16]
 8016778:	f06f 010e 	mvn.w	r1, #14
 801677c:	4610      	mov	r0, r2
 801677e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016780:	6879      	ldr	r1, [r7, #4]
 8016782:	480a      	ldr	r0, [pc, #40]	; (80167ac <tcp_input_delayed_close+0x7c>)
 8016784:	f7ff fa52 	bl	8015c2c <tcp_pcb_remove>
    tcp_free(pcb);
 8016788:	6878      	ldr	r0, [r7, #4]
 801678a:	f7fd fd3d 	bl	8014208 <tcp_free>
    return 1;
 801678e:	2301      	movs	r3, #1
 8016790:	e000      	b.n	8016794 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8016792:	2300      	movs	r3, #0
}
 8016794:	4618      	mov	r0, r3
 8016796:	3708      	adds	r7, #8
 8016798:	46bd      	mov	sp, r7
 801679a:	bd80      	pop	{r7, pc}
 801679c:	08024430 	.word	0x08024430
 80167a0:	08024600 	.word	0x08024600
 80167a4:	0802447c 	.word	0x0802447c
 80167a8:	20004789 	.word	0x20004789
 80167ac:	2000b79c 	.word	0x2000b79c

080167b0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80167b0:	b590      	push	{r4, r7, lr}
 80167b2:	b08b      	sub	sp, #44	; 0x2c
 80167b4:	af04      	add	r7, sp, #16
 80167b6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80167b8:	4b6f      	ldr	r3, [pc, #444]	; (8016978 <tcp_listen_input+0x1c8>)
 80167ba:	781b      	ldrb	r3, [r3, #0]
 80167bc:	f003 0304 	and.w	r3, r3, #4
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	f040 80d2 	bne.w	801696a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d106      	bne.n	80167da <tcp_listen_input+0x2a>
 80167cc:	4b6b      	ldr	r3, [pc, #428]	; (801697c <tcp_listen_input+0x1cc>)
 80167ce:	f240 2281 	movw	r2, #641	; 0x281
 80167d2:	496b      	ldr	r1, [pc, #428]	; (8016980 <tcp_listen_input+0x1d0>)
 80167d4:	486b      	ldr	r0, [pc, #428]	; (8016984 <tcp_listen_input+0x1d4>)
 80167d6:	f008 fac3 	bl	801ed60 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80167da:	4b67      	ldr	r3, [pc, #412]	; (8016978 <tcp_listen_input+0x1c8>)
 80167dc:	781b      	ldrb	r3, [r3, #0]
 80167de:	f003 0310 	and.w	r3, r3, #16
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d019      	beq.n	801681a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80167e6:	4b68      	ldr	r3, [pc, #416]	; (8016988 <tcp_listen_input+0x1d8>)
 80167e8:	6819      	ldr	r1, [r3, #0]
 80167ea:	4b68      	ldr	r3, [pc, #416]	; (801698c <tcp_listen_input+0x1dc>)
 80167ec:	881b      	ldrh	r3, [r3, #0]
 80167ee:	461a      	mov	r2, r3
 80167f0:	4b67      	ldr	r3, [pc, #412]	; (8016990 <tcp_listen_input+0x1e0>)
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80167f6:	4b67      	ldr	r3, [pc, #412]	; (8016994 <tcp_listen_input+0x1e4>)
 80167f8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80167fa:	885b      	ldrh	r3, [r3, #2]
 80167fc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80167fe:	4a65      	ldr	r2, [pc, #404]	; (8016994 <tcp_listen_input+0x1e4>)
 8016800:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016802:	8812      	ldrh	r2, [r2, #0]
 8016804:	b292      	uxth	r2, r2
 8016806:	9202      	str	r2, [sp, #8]
 8016808:	9301      	str	r3, [sp, #4]
 801680a:	4b63      	ldr	r3, [pc, #396]	; (8016998 <tcp_listen_input+0x1e8>)
 801680c:	9300      	str	r3, [sp, #0]
 801680e:	4b63      	ldr	r3, [pc, #396]	; (801699c <tcp_listen_input+0x1ec>)
 8016810:	4602      	mov	r2, r0
 8016812:	6878      	ldr	r0, [r7, #4]
 8016814:	f003 fbd6 	bl	8019fc4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016818:	e0a9      	b.n	801696e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801681a:	4b57      	ldr	r3, [pc, #348]	; (8016978 <tcp_listen_input+0x1c8>)
 801681c:	781b      	ldrb	r3, [r3, #0]
 801681e:	f003 0302 	and.w	r3, r3, #2
 8016822:	2b00      	cmp	r3, #0
 8016824:	f000 80a3 	beq.w	801696e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	7d5b      	ldrb	r3, [r3, #21]
 801682c:	4618      	mov	r0, r3
 801682e:	f7ff f85b 	bl	80158e8 <tcp_alloc>
 8016832:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8016834:	697b      	ldr	r3, [r7, #20]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d111      	bne.n	801685e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	699b      	ldr	r3, [r3, #24]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d00a      	beq.n	8016858 <tcp_listen_input+0xa8>
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	699b      	ldr	r3, [r3, #24]
 8016846:	687a      	ldr	r2, [r7, #4]
 8016848:	6910      	ldr	r0, [r2, #16]
 801684a:	f04f 32ff 	mov.w	r2, #4294967295
 801684e:	2100      	movs	r1, #0
 8016850:	4798      	blx	r3
 8016852:	4603      	mov	r3, r0
 8016854:	73bb      	strb	r3, [r7, #14]
      return;
 8016856:	e08b      	b.n	8016970 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016858:	23f0      	movs	r3, #240	; 0xf0
 801685a:	73bb      	strb	r3, [r7, #14]
      return;
 801685c:	e088      	b.n	8016970 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801685e:	4b50      	ldr	r3, [pc, #320]	; (80169a0 <tcp_listen_input+0x1f0>)
 8016860:	695a      	ldr	r2, [r3, #20]
 8016862:	697b      	ldr	r3, [r7, #20]
 8016864:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8016866:	4b4e      	ldr	r3, [pc, #312]	; (80169a0 <tcp_listen_input+0x1f0>)
 8016868:	691a      	ldr	r2, [r3, #16]
 801686a:	697b      	ldr	r3, [r7, #20]
 801686c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	8ada      	ldrh	r2, [r3, #22]
 8016872:	697b      	ldr	r3, [r7, #20]
 8016874:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8016876:	4b47      	ldr	r3, [pc, #284]	; (8016994 <tcp_listen_input+0x1e4>)
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	881b      	ldrh	r3, [r3, #0]
 801687c:	b29a      	uxth	r2, r3
 801687e:	697b      	ldr	r3, [r7, #20]
 8016880:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8016882:	697b      	ldr	r3, [r7, #20]
 8016884:	2203      	movs	r2, #3
 8016886:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8016888:	4b41      	ldr	r3, [pc, #260]	; (8016990 <tcp_listen_input+0x1e0>)
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	1c5a      	adds	r2, r3, #1
 801688e:	697b      	ldr	r3, [r7, #20]
 8016890:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8016892:	697b      	ldr	r3, [r7, #20]
 8016894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016896:	697b      	ldr	r3, [r7, #20]
 8016898:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801689a:	6978      	ldr	r0, [r7, #20]
 801689c:	f7ff fa5a 	bl	8015d54 <tcp_next_iss>
 80168a0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80168a2:	697b      	ldr	r3, [r7, #20]
 80168a4:	693a      	ldr	r2, [r7, #16]
 80168a6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80168a8:	697b      	ldr	r3, [r7, #20]
 80168aa:	693a      	ldr	r2, [r7, #16]
 80168ac:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80168ae:	697b      	ldr	r3, [r7, #20]
 80168b0:	693a      	ldr	r2, [r7, #16]
 80168b2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80168b4:	697b      	ldr	r3, [r7, #20]
 80168b6:	693a      	ldr	r2, [r7, #16]
 80168b8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80168ba:	4b35      	ldr	r3, [pc, #212]	; (8016990 <tcp_listen_input+0x1e0>)
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	1e5a      	subs	r2, r3, #1
 80168c0:	697b      	ldr	r3, [r7, #20]
 80168c2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	691a      	ldr	r2, [r3, #16]
 80168c8:	697b      	ldr	r3, [r7, #20]
 80168ca:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80168cc:	697b      	ldr	r3, [r7, #20]
 80168ce:	687a      	ldr	r2, [r7, #4]
 80168d0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	7a5b      	ldrb	r3, [r3, #9]
 80168d6:	f003 030c 	and.w	r3, r3, #12
 80168da:	b2da      	uxtb	r2, r3
 80168dc:	697b      	ldr	r3, [r7, #20]
 80168de:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	7a1a      	ldrb	r2, [r3, #8]
 80168e4:	697b      	ldr	r3, [r7, #20]
 80168e6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80168e8:	4b2e      	ldr	r3, [pc, #184]	; (80169a4 <tcp_listen_input+0x1f4>)
 80168ea:	681a      	ldr	r2, [r3, #0]
 80168ec:	697b      	ldr	r3, [r7, #20]
 80168ee:	60da      	str	r2, [r3, #12]
 80168f0:	4a2c      	ldr	r2, [pc, #176]	; (80169a4 <tcp_listen_input+0x1f4>)
 80168f2:	697b      	ldr	r3, [r7, #20]
 80168f4:	6013      	str	r3, [r2, #0]
 80168f6:	f003 fd27 	bl	801a348 <tcp_timer_needed>
 80168fa:	4b2b      	ldr	r3, [pc, #172]	; (80169a8 <tcp_listen_input+0x1f8>)
 80168fc:	2201      	movs	r2, #1
 80168fe:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8016900:	6978      	ldr	r0, [r7, #20]
 8016902:	f001 fd8d 	bl	8018420 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8016906:	4b23      	ldr	r3, [pc, #140]	; (8016994 <tcp_listen_input+0x1e4>)
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	89db      	ldrh	r3, [r3, #14]
 801690c:	b29a      	uxth	r2, r3
 801690e:	697b      	ldr	r3, [r7, #20]
 8016910:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8016914:	697b      	ldr	r3, [r7, #20]
 8016916:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801691a:	697b      	ldr	r3, [r7, #20]
 801691c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8016920:	697b      	ldr	r3, [r7, #20]
 8016922:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8016924:	697b      	ldr	r3, [r7, #20]
 8016926:	3304      	adds	r3, #4
 8016928:	4618      	mov	r0, r3
 801692a:	f005 fc4b 	bl	801c1c4 <ip4_route>
 801692e:	4601      	mov	r1, r0
 8016930:	697b      	ldr	r3, [r7, #20]
 8016932:	3304      	adds	r3, #4
 8016934:	461a      	mov	r2, r3
 8016936:	4620      	mov	r0, r4
 8016938:	f7ff fa32 	bl	8015da0 <tcp_eff_send_mss_netif>
 801693c:	4603      	mov	r3, r0
 801693e:	461a      	mov	r2, r3
 8016940:	697b      	ldr	r3, [r7, #20]
 8016942:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8016944:	2112      	movs	r1, #18
 8016946:	6978      	ldr	r0, [r7, #20]
 8016948:	f002 fc9a 	bl	8019280 <tcp_enqueue_flags>
 801694c:	4603      	mov	r3, r0
 801694e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8016950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d004      	beq.n	8016962 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8016958:	2100      	movs	r1, #0
 801695a:	6978      	ldr	r0, [r7, #20]
 801695c:	f7fd feda 	bl	8014714 <tcp_abandon>
      return;
 8016960:	e006      	b.n	8016970 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8016962:	6978      	ldr	r0, [r7, #20]
 8016964:	f002 fd7a 	bl	801945c <tcp_output>
  return;
 8016968:	e001      	b.n	801696e <tcp_listen_input+0x1be>
    return;
 801696a:	bf00      	nop
 801696c:	e000      	b.n	8016970 <tcp_listen_input+0x1c0>
  return;
 801696e:	bf00      	nop
}
 8016970:	371c      	adds	r7, #28
 8016972:	46bd      	mov	sp, r7
 8016974:	bd90      	pop	{r4, r7, pc}
 8016976:	bf00      	nop
 8016978:	20004788 	.word	0x20004788
 801697c:	08024430 	.word	0x08024430
 8016980:	08024628 	.word	0x08024628
 8016984:	0802447c 	.word	0x0802447c
 8016988:	20004780 	.word	0x20004780
 801698c:	20004786 	.word	0x20004786
 8016990:	2000477c 	.word	0x2000477c
 8016994:	2000476c 	.word	0x2000476c
 8016998:	20008098 	.word	0x20008098
 801699c:	2000809c 	.word	0x2000809c
 80169a0:	20008088 	.word	0x20008088
 80169a4:	2000b79c 	.word	0x2000b79c
 80169a8:	2000b798 	.word	0x2000b798

080169ac <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b086      	sub	sp, #24
 80169b0:	af04      	add	r7, sp, #16
 80169b2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80169b4:	4b2f      	ldr	r3, [pc, #188]	; (8016a74 <tcp_timewait_input+0xc8>)
 80169b6:	781b      	ldrb	r3, [r3, #0]
 80169b8:	f003 0304 	and.w	r3, r3, #4
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d153      	bne.n	8016a68 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d106      	bne.n	80169d4 <tcp_timewait_input+0x28>
 80169c6:	4b2c      	ldr	r3, [pc, #176]	; (8016a78 <tcp_timewait_input+0xcc>)
 80169c8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80169cc:	492b      	ldr	r1, [pc, #172]	; (8016a7c <tcp_timewait_input+0xd0>)
 80169ce:	482c      	ldr	r0, [pc, #176]	; (8016a80 <tcp_timewait_input+0xd4>)
 80169d0:	f008 f9c6 	bl	801ed60 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80169d4:	4b27      	ldr	r3, [pc, #156]	; (8016a74 <tcp_timewait_input+0xc8>)
 80169d6:	781b      	ldrb	r3, [r3, #0]
 80169d8:	f003 0302 	and.w	r3, r3, #2
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d02a      	beq.n	8016a36 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80169e0:	4b28      	ldr	r3, [pc, #160]	; (8016a84 <tcp_timewait_input+0xd8>)
 80169e2:	681a      	ldr	r2, [r3, #0]
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169e8:	1ad3      	subs	r3, r2, r3
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	db2d      	blt.n	8016a4a <tcp_timewait_input+0x9e>
 80169ee:	4b25      	ldr	r3, [pc, #148]	; (8016a84 <tcp_timewait_input+0xd8>)
 80169f0:	681a      	ldr	r2, [r3, #0]
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169f6:	6879      	ldr	r1, [r7, #4]
 80169f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80169fa:	440b      	add	r3, r1
 80169fc:	1ad3      	subs	r3, r2, r3
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	dc23      	bgt.n	8016a4a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a02:	4b21      	ldr	r3, [pc, #132]	; (8016a88 <tcp_timewait_input+0xdc>)
 8016a04:	6819      	ldr	r1, [r3, #0]
 8016a06:	4b21      	ldr	r3, [pc, #132]	; (8016a8c <tcp_timewait_input+0xe0>)
 8016a08:	881b      	ldrh	r3, [r3, #0]
 8016a0a:	461a      	mov	r2, r3
 8016a0c:	4b1d      	ldr	r3, [pc, #116]	; (8016a84 <tcp_timewait_input+0xd8>)
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016a12:	4b1f      	ldr	r3, [pc, #124]	; (8016a90 <tcp_timewait_input+0xe4>)
 8016a14:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a16:	885b      	ldrh	r3, [r3, #2]
 8016a18:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016a1a:	4a1d      	ldr	r2, [pc, #116]	; (8016a90 <tcp_timewait_input+0xe4>)
 8016a1c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a1e:	8812      	ldrh	r2, [r2, #0]
 8016a20:	b292      	uxth	r2, r2
 8016a22:	9202      	str	r2, [sp, #8]
 8016a24:	9301      	str	r3, [sp, #4]
 8016a26:	4b1b      	ldr	r3, [pc, #108]	; (8016a94 <tcp_timewait_input+0xe8>)
 8016a28:	9300      	str	r3, [sp, #0]
 8016a2a:	4b1b      	ldr	r3, [pc, #108]	; (8016a98 <tcp_timewait_input+0xec>)
 8016a2c:	4602      	mov	r2, r0
 8016a2e:	6878      	ldr	r0, [r7, #4]
 8016a30:	f003 fac8 	bl	8019fc4 <tcp_rst>
      return;
 8016a34:	e01b      	b.n	8016a6e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8016a36:	4b0f      	ldr	r3, [pc, #60]	; (8016a74 <tcp_timewait_input+0xc8>)
 8016a38:	781b      	ldrb	r3, [r3, #0]
 8016a3a:	f003 0301 	and.w	r3, r3, #1
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d003      	beq.n	8016a4a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8016a42:	4b16      	ldr	r3, [pc, #88]	; (8016a9c <tcp_timewait_input+0xf0>)
 8016a44:	681a      	ldr	r2, [r3, #0]
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8016a4a:	4b10      	ldr	r3, [pc, #64]	; (8016a8c <tcp_timewait_input+0xe0>)
 8016a4c:	881b      	ldrh	r3, [r3, #0]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d00c      	beq.n	8016a6c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	8b5b      	ldrh	r3, [r3, #26]
 8016a56:	f043 0302 	orr.w	r3, r3, #2
 8016a5a:	b29a      	uxth	r2, r3
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016a60:	6878      	ldr	r0, [r7, #4]
 8016a62:	f002 fcfb 	bl	801945c <tcp_output>
  }
  return;
 8016a66:	e001      	b.n	8016a6c <tcp_timewait_input+0xc0>
    return;
 8016a68:	bf00      	nop
 8016a6a:	e000      	b.n	8016a6e <tcp_timewait_input+0xc2>
  return;
 8016a6c:	bf00      	nop
}
 8016a6e:	3708      	adds	r7, #8
 8016a70:	46bd      	mov	sp, r7
 8016a72:	bd80      	pop	{r7, pc}
 8016a74:	20004788 	.word	0x20004788
 8016a78:	08024430 	.word	0x08024430
 8016a7c:	08024648 	.word	0x08024648
 8016a80:	0802447c 	.word	0x0802447c
 8016a84:	2000477c 	.word	0x2000477c
 8016a88:	20004780 	.word	0x20004780
 8016a8c:	20004786 	.word	0x20004786
 8016a90:	2000476c 	.word	0x2000476c
 8016a94:	20008098 	.word	0x20008098
 8016a98:	2000809c 	.word	0x2000809c
 8016a9c:	2000b7a0 	.word	0x2000b7a0

08016aa0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8016aa0:	b590      	push	{r4, r7, lr}
 8016aa2:	b08d      	sub	sp, #52	; 0x34
 8016aa4:	af04      	add	r7, sp, #16
 8016aa6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8016aa8:	2300      	movs	r3, #0
 8016aaa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8016aac:	2300      	movs	r3, #0
 8016aae:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d106      	bne.n	8016ac4 <tcp_process+0x24>
 8016ab6:	4ba5      	ldr	r3, [pc, #660]	; (8016d4c <tcp_process+0x2ac>)
 8016ab8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8016abc:	49a4      	ldr	r1, [pc, #656]	; (8016d50 <tcp_process+0x2b0>)
 8016abe:	48a5      	ldr	r0, [pc, #660]	; (8016d54 <tcp_process+0x2b4>)
 8016ac0:	f008 f94e 	bl	801ed60 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8016ac4:	4ba4      	ldr	r3, [pc, #656]	; (8016d58 <tcp_process+0x2b8>)
 8016ac6:	781b      	ldrb	r3, [r3, #0]
 8016ac8:	f003 0304 	and.w	r3, r3, #4
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d04e      	beq.n	8016b6e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	7d1b      	ldrb	r3, [r3, #20]
 8016ad4:	2b02      	cmp	r3, #2
 8016ad6:	d108      	bne.n	8016aea <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016adc:	4b9f      	ldr	r3, [pc, #636]	; (8016d5c <tcp_process+0x2bc>)
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	429a      	cmp	r2, r3
 8016ae2:	d123      	bne.n	8016b2c <tcp_process+0x8c>
        acceptable = 1;
 8016ae4:	2301      	movs	r3, #1
 8016ae6:	76fb      	strb	r3, [r7, #27]
 8016ae8:	e020      	b.n	8016b2c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016aee:	4b9c      	ldr	r3, [pc, #624]	; (8016d60 <tcp_process+0x2c0>)
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	429a      	cmp	r2, r3
 8016af4:	d102      	bne.n	8016afc <tcp_process+0x5c>
        acceptable = 1;
 8016af6:	2301      	movs	r3, #1
 8016af8:	76fb      	strb	r3, [r7, #27]
 8016afa:	e017      	b.n	8016b2c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016afc:	4b98      	ldr	r3, [pc, #608]	; (8016d60 <tcp_process+0x2c0>)
 8016afe:	681a      	ldr	r2, [r3, #0]
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b04:	1ad3      	subs	r3, r2, r3
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	db10      	blt.n	8016b2c <tcp_process+0x8c>
 8016b0a:	4b95      	ldr	r3, [pc, #596]	; (8016d60 <tcp_process+0x2c0>)
 8016b0c:	681a      	ldr	r2, [r3, #0]
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b12:	6879      	ldr	r1, [r7, #4]
 8016b14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016b16:	440b      	add	r3, r1
 8016b18:	1ad3      	subs	r3, r2, r3
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	dc06      	bgt.n	8016b2c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	8b5b      	ldrh	r3, [r3, #26]
 8016b22:	f043 0302 	orr.w	r3, r3, #2
 8016b26:	b29a      	uxth	r2, r3
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8016b2c:	7efb      	ldrb	r3, [r7, #27]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d01b      	beq.n	8016b6a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	7d1b      	ldrb	r3, [r3, #20]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d106      	bne.n	8016b48 <tcp_process+0xa8>
 8016b3a:	4b84      	ldr	r3, [pc, #528]	; (8016d4c <tcp_process+0x2ac>)
 8016b3c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8016b40:	4988      	ldr	r1, [pc, #544]	; (8016d64 <tcp_process+0x2c4>)
 8016b42:	4884      	ldr	r0, [pc, #528]	; (8016d54 <tcp_process+0x2b4>)
 8016b44:	f008 f90c 	bl	801ed60 <iprintf>
      recv_flags |= TF_RESET;
 8016b48:	4b87      	ldr	r3, [pc, #540]	; (8016d68 <tcp_process+0x2c8>)
 8016b4a:	781b      	ldrb	r3, [r3, #0]
 8016b4c:	f043 0308 	orr.w	r3, r3, #8
 8016b50:	b2da      	uxtb	r2, r3
 8016b52:	4b85      	ldr	r3, [pc, #532]	; (8016d68 <tcp_process+0x2c8>)
 8016b54:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	8b5b      	ldrh	r3, [r3, #26]
 8016b5a:	f023 0301 	bic.w	r3, r3, #1
 8016b5e:	b29a      	uxth	r2, r3
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8016b64:	f06f 030d 	mvn.w	r3, #13
 8016b68:	e37a      	b.n	8017260 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	e378      	b.n	8017260 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8016b6e:	4b7a      	ldr	r3, [pc, #488]	; (8016d58 <tcp_process+0x2b8>)
 8016b70:	781b      	ldrb	r3, [r3, #0]
 8016b72:	f003 0302 	and.w	r3, r3, #2
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d010      	beq.n	8016b9c <tcp_process+0xfc>
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	7d1b      	ldrb	r3, [r3, #20]
 8016b7e:	2b02      	cmp	r3, #2
 8016b80:	d00c      	beq.n	8016b9c <tcp_process+0xfc>
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	7d1b      	ldrb	r3, [r3, #20]
 8016b86:	2b03      	cmp	r3, #3
 8016b88:	d008      	beq.n	8016b9c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	8b5b      	ldrh	r3, [r3, #26]
 8016b8e:	f043 0302 	orr.w	r3, r3, #2
 8016b92:	b29a      	uxth	r2, r3
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8016b98:	2300      	movs	r3, #0
 8016b9a:	e361      	b.n	8017260 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	8b5b      	ldrh	r3, [r3, #26]
 8016ba0:	f003 0310 	and.w	r3, r3, #16
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d103      	bne.n	8016bb0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8016ba8:	4b70      	ldr	r3, [pc, #448]	; (8016d6c <tcp_process+0x2cc>)
 8016baa:	681a      	ldr	r2, [r3, #0]
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	2200      	movs	r2, #0
 8016bbc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8016bc0:	6878      	ldr	r0, [r7, #4]
 8016bc2:	f001 fc2d 	bl	8018420 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	7d1b      	ldrb	r3, [r3, #20]
 8016bca:	3b02      	subs	r3, #2
 8016bcc:	2b07      	cmp	r3, #7
 8016bce:	f200 8337 	bhi.w	8017240 <tcp_process+0x7a0>
 8016bd2:	a201      	add	r2, pc, #4	; (adr r2, 8016bd8 <tcp_process+0x138>)
 8016bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016bd8:	08016bf9 	.word	0x08016bf9
 8016bdc:	08016e29 	.word	0x08016e29
 8016be0:	08016fa1 	.word	0x08016fa1
 8016be4:	08016fcb 	.word	0x08016fcb
 8016be8:	080170ef 	.word	0x080170ef
 8016bec:	08016fa1 	.word	0x08016fa1
 8016bf0:	0801717b 	.word	0x0801717b
 8016bf4:	0801720b 	.word	0x0801720b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8016bf8:	4b57      	ldr	r3, [pc, #348]	; (8016d58 <tcp_process+0x2b8>)
 8016bfa:	781b      	ldrb	r3, [r3, #0]
 8016bfc:	f003 0310 	and.w	r3, r3, #16
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	f000 80e4 	beq.w	8016dce <tcp_process+0x32e>
 8016c06:	4b54      	ldr	r3, [pc, #336]	; (8016d58 <tcp_process+0x2b8>)
 8016c08:	781b      	ldrb	r3, [r3, #0]
 8016c0a:	f003 0302 	and.w	r3, r3, #2
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	f000 80dd 	beq.w	8016dce <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016c18:	1c5a      	adds	r2, r3, #1
 8016c1a:	4b50      	ldr	r3, [pc, #320]	; (8016d5c <tcp_process+0x2bc>)
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	429a      	cmp	r2, r3
 8016c20:	f040 80d5 	bne.w	8016dce <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8016c24:	4b4e      	ldr	r3, [pc, #312]	; (8016d60 <tcp_process+0x2c0>)
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	1c5a      	adds	r2, r3, #1
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8016c36:	4b49      	ldr	r3, [pc, #292]	; (8016d5c <tcp_process+0x2bc>)
 8016c38:	681a      	ldr	r2, [r3, #0]
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8016c3e:	4b4c      	ldr	r3, [pc, #304]	; (8016d70 <tcp_process+0x2d0>)
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	89db      	ldrh	r3, [r3, #14]
 8016c44:	b29a      	uxth	r2, r3
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8016c58:	4b41      	ldr	r3, [pc, #260]	; (8016d60 <tcp_process+0x2c0>)
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	1e5a      	subs	r2, r3, #1
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	2204      	movs	r2, #4
 8016c66:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	3304      	adds	r3, #4
 8016c70:	4618      	mov	r0, r3
 8016c72:	f005 faa7 	bl	801c1c4 <ip4_route>
 8016c76:	4601      	mov	r1, r0
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	3304      	adds	r3, #4
 8016c7c:	461a      	mov	r2, r3
 8016c7e:	4620      	mov	r0, r4
 8016c80:	f7ff f88e 	bl	8015da0 <tcp_eff_send_mss_netif>
 8016c84:	4603      	mov	r3, r0
 8016c86:	461a      	mov	r2, r3
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016c90:	009a      	lsls	r2, r3, #2
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016c96:	005b      	lsls	r3, r3, #1
 8016c98:	f241 111c 	movw	r1, #4380	; 0x111c
 8016c9c:	428b      	cmp	r3, r1
 8016c9e:	bf38      	it	cc
 8016ca0:	460b      	movcc	r3, r1
 8016ca2:	429a      	cmp	r2, r3
 8016ca4:	d204      	bcs.n	8016cb0 <tcp_process+0x210>
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016caa:	009b      	lsls	r3, r3, #2
 8016cac:	b29b      	uxth	r3, r3
 8016cae:	e00d      	b.n	8016ccc <tcp_process+0x22c>
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016cb4:	005b      	lsls	r3, r3, #1
 8016cb6:	f241 121c 	movw	r2, #4380	; 0x111c
 8016cba:	4293      	cmp	r3, r2
 8016cbc:	d904      	bls.n	8016cc8 <tcp_process+0x228>
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016cc2:	005b      	lsls	r3, r3, #1
 8016cc4:	b29b      	uxth	r3, r3
 8016cc6:	e001      	b.n	8016ccc <tcp_process+0x22c>
 8016cc8:	f241 131c 	movw	r3, #4380	; 0x111c
 8016ccc:	687a      	ldr	r2, [r7, #4]
 8016cce:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d106      	bne.n	8016cea <tcp_process+0x24a>
 8016cdc:	4b1b      	ldr	r3, [pc, #108]	; (8016d4c <tcp_process+0x2ac>)
 8016cde:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8016ce2:	4924      	ldr	r1, [pc, #144]	; (8016d74 <tcp_process+0x2d4>)
 8016ce4:	481b      	ldr	r0, [pc, #108]	; (8016d54 <tcp_process+0x2b4>)
 8016ce6:	f008 f83b 	bl	801ed60 <iprintf>
        --pcb->snd_queuelen;
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016cf0:	3b01      	subs	r3, #1
 8016cf2:	b29a      	uxth	r2, r3
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016cfe:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8016d00:	69fb      	ldr	r3, [r7, #28]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d111      	bne.n	8016d2a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d0a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8016d0c:	69fb      	ldr	r3, [r7, #28]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d106      	bne.n	8016d20 <tcp_process+0x280>
 8016d12:	4b0e      	ldr	r3, [pc, #56]	; (8016d4c <tcp_process+0x2ac>)
 8016d14:	f44f 725d 	mov.w	r2, #884	; 0x374
 8016d18:	4917      	ldr	r1, [pc, #92]	; (8016d78 <tcp_process+0x2d8>)
 8016d1a:	480e      	ldr	r0, [pc, #56]	; (8016d54 <tcp_process+0x2b4>)
 8016d1c:	f008 f820 	bl	801ed60 <iprintf>
          pcb->unsent = rseg->next;
 8016d20:	69fb      	ldr	r3, [r7, #28]
 8016d22:	681a      	ldr	r2, [r3, #0]
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	66da      	str	r2, [r3, #108]	; 0x6c
 8016d28:	e003      	b.n	8016d32 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8016d2a:	69fb      	ldr	r3, [r7, #28]
 8016d2c:	681a      	ldr	r2, [r3, #0]
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8016d32:	69f8      	ldr	r0, [r7, #28]
 8016d34:	f7fe fc51 	bl	80155da <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d11d      	bne.n	8016d7c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016d46:	861a      	strh	r2, [r3, #48]	; 0x30
 8016d48:	e01f      	b.n	8016d8a <tcp_process+0x2ea>
 8016d4a:	bf00      	nop
 8016d4c:	08024430 	.word	0x08024430
 8016d50:	08024668 	.word	0x08024668
 8016d54:	0802447c 	.word	0x0802447c
 8016d58:	20004788 	.word	0x20004788
 8016d5c:	20004780 	.word	0x20004780
 8016d60:	2000477c 	.word	0x2000477c
 8016d64:	08024684 	.word	0x08024684
 8016d68:	20004789 	.word	0x20004789
 8016d6c:	2000b7a0 	.word	0x2000b7a0
 8016d70:	2000476c 	.word	0x2000476c
 8016d74:	080246a4 	.word	0x080246a4
 8016d78:	080246bc 	.word	0x080246bc
        } else {
          pcb->rtime = 0;
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	2200      	movs	r2, #0
 8016d80:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	2200      	movs	r2, #0
 8016d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d00a      	beq.n	8016daa <tcp_process+0x30a>
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016d9a:	687a      	ldr	r2, [r7, #4]
 8016d9c:	6910      	ldr	r0, [r2, #16]
 8016d9e:	2200      	movs	r2, #0
 8016da0:	6879      	ldr	r1, [r7, #4]
 8016da2:	4798      	blx	r3
 8016da4:	4603      	mov	r3, r0
 8016da6:	76bb      	strb	r3, [r7, #26]
 8016da8:	e001      	b.n	8016dae <tcp_process+0x30e>
 8016daa:	2300      	movs	r3, #0
 8016dac:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8016dae:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016db2:	f113 0f0d 	cmn.w	r3, #13
 8016db6:	d102      	bne.n	8016dbe <tcp_process+0x31e>
          return ERR_ABRT;
 8016db8:	f06f 030c 	mvn.w	r3, #12
 8016dbc:	e250      	b.n	8017260 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	8b5b      	ldrh	r3, [r3, #26]
 8016dc2:	f043 0302 	orr.w	r3, r3, #2
 8016dc6:	b29a      	uxth	r2, r3
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8016dcc:	e23a      	b.n	8017244 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8016dce:	4b9d      	ldr	r3, [pc, #628]	; (8017044 <tcp_process+0x5a4>)
 8016dd0:	781b      	ldrb	r3, [r3, #0]
 8016dd2:	f003 0310 	and.w	r3, r3, #16
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	f000 8234 	beq.w	8017244 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016ddc:	4b9a      	ldr	r3, [pc, #616]	; (8017048 <tcp_process+0x5a8>)
 8016dde:	6819      	ldr	r1, [r3, #0]
 8016de0:	4b9a      	ldr	r3, [pc, #616]	; (801704c <tcp_process+0x5ac>)
 8016de2:	881b      	ldrh	r3, [r3, #0]
 8016de4:	461a      	mov	r2, r3
 8016de6:	4b9a      	ldr	r3, [pc, #616]	; (8017050 <tcp_process+0x5b0>)
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016dec:	4b99      	ldr	r3, [pc, #612]	; (8017054 <tcp_process+0x5b4>)
 8016dee:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016df0:	885b      	ldrh	r3, [r3, #2]
 8016df2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016df4:	4a97      	ldr	r2, [pc, #604]	; (8017054 <tcp_process+0x5b4>)
 8016df6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016df8:	8812      	ldrh	r2, [r2, #0]
 8016dfa:	b292      	uxth	r2, r2
 8016dfc:	9202      	str	r2, [sp, #8]
 8016dfe:	9301      	str	r3, [sp, #4]
 8016e00:	4b95      	ldr	r3, [pc, #596]	; (8017058 <tcp_process+0x5b8>)
 8016e02:	9300      	str	r3, [sp, #0]
 8016e04:	4b95      	ldr	r3, [pc, #596]	; (801705c <tcp_process+0x5bc>)
 8016e06:	4602      	mov	r2, r0
 8016e08:	6878      	ldr	r0, [r7, #4]
 8016e0a:	f003 f8db 	bl	8019fc4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016e14:	2b05      	cmp	r3, #5
 8016e16:	f200 8215 	bhi.w	8017244 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	2200      	movs	r2, #0
 8016e1e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8016e20:	6878      	ldr	r0, [r7, #4]
 8016e22:	f002 fea5 	bl	8019b70 <tcp_rexmit_rto>
      break;
 8016e26:	e20d      	b.n	8017244 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8016e28:	4b86      	ldr	r3, [pc, #536]	; (8017044 <tcp_process+0x5a4>)
 8016e2a:	781b      	ldrb	r3, [r3, #0]
 8016e2c:	f003 0310 	and.w	r3, r3, #16
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	f000 80a1 	beq.w	8016f78 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016e36:	4b84      	ldr	r3, [pc, #528]	; (8017048 <tcp_process+0x5a8>)
 8016e38:	681a      	ldr	r2, [r3, #0]
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016e3e:	1ad3      	subs	r3, r2, r3
 8016e40:	3b01      	subs	r3, #1
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	db7e      	blt.n	8016f44 <tcp_process+0x4a4>
 8016e46:	4b80      	ldr	r3, [pc, #512]	; (8017048 <tcp_process+0x5a8>)
 8016e48:	681a      	ldr	r2, [r3, #0]
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016e4e:	1ad3      	subs	r3, r2, r3
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	dc77      	bgt.n	8016f44 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	2204      	movs	r2, #4
 8016e58:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d102      	bne.n	8016e68 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8016e62:	23fa      	movs	r3, #250	; 0xfa
 8016e64:	76bb      	strb	r3, [r7, #26]
 8016e66:	e01d      	b.n	8016ea4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016e6c:	699b      	ldr	r3, [r3, #24]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d106      	bne.n	8016e80 <tcp_process+0x3e0>
 8016e72:	4b7b      	ldr	r3, [pc, #492]	; (8017060 <tcp_process+0x5c0>)
 8016e74:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8016e78:	497a      	ldr	r1, [pc, #488]	; (8017064 <tcp_process+0x5c4>)
 8016e7a:	487b      	ldr	r0, [pc, #492]	; (8017068 <tcp_process+0x5c8>)
 8016e7c:	f007 ff70 	bl	801ed60 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016e84:	699b      	ldr	r3, [r3, #24]
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d00a      	beq.n	8016ea0 <tcp_process+0x400>
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016e8e:	699b      	ldr	r3, [r3, #24]
 8016e90:	687a      	ldr	r2, [r7, #4]
 8016e92:	6910      	ldr	r0, [r2, #16]
 8016e94:	2200      	movs	r2, #0
 8016e96:	6879      	ldr	r1, [r7, #4]
 8016e98:	4798      	blx	r3
 8016e9a:	4603      	mov	r3, r0
 8016e9c:	76bb      	strb	r3, [r7, #26]
 8016e9e:	e001      	b.n	8016ea4 <tcp_process+0x404>
 8016ea0:	23f0      	movs	r3, #240	; 0xf0
 8016ea2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8016ea4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d00a      	beq.n	8016ec2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8016eac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016eb0:	f113 0f0d 	cmn.w	r3, #13
 8016eb4:	d002      	beq.n	8016ebc <tcp_process+0x41c>
              tcp_abort(pcb);
 8016eb6:	6878      	ldr	r0, [r7, #4]
 8016eb8:	f7fd fcea 	bl	8014890 <tcp_abort>
            }
            return ERR_ABRT;
 8016ebc:	f06f 030c 	mvn.w	r3, #12
 8016ec0:	e1ce      	b.n	8017260 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8016ec2:	6878      	ldr	r0, [r7, #4]
 8016ec4:	f000 fae0 	bl	8017488 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8016ec8:	4b68      	ldr	r3, [pc, #416]	; (801706c <tcp_process+0x5cc>)
 8016eca:	881b      	ldrh	r3, [r3, #0]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d005      	beq.n	8016edc <tcp_process+0x43c>
            recv_acked--;
 8016ed0:	4b66      	ldr	r3, [pc, #408]	; (801706c <tcp_process+0x5cc>)
 8016ed2:	881b      	ldrh	r3, [r3, #0]
 8016ed4:	3b01      	subs	r3, #1
 8016ed6:	b29a      	uxth	r2, r3
 8016ed8:	4b64      	ldr	r3, [pc, #400]	; (801706c <tcp_process+0x5cc>)
 8016eda:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016ee0:	009a      	lsls	r2, r3, #2
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016ee6:	005b      	lsls	r3, r3, #1
 8016ee8:	f241 111c 	movw	r1, #4380	; 0x111c
 8016eec:	428b      	cmp	r3, r1
 8016eee:	bf38      	it	cc
 8016ef0:	460b      	movcc	r3, r1
 8016ef2:	429a      	cmp	r2, r3
 8016ef4:	d204      	bcs.n	8016f00 <tcp_process+0x460>
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016efa:	009b      	lsls	r3, r3, #2
 8016efc:	b29b      	uxth	r3, r3
 8016efe:	e00d      	b.n	8016f1c <tcp_process+0x47c>
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016f04:	005b      	lsls	r3, r3, #1
 8016f06:	f241 121c 	movw	r2, #4380	; 0x111c
 8016f0a:	4293      	cmp	r3, r2
 8016f0c:	d904      	bls.n	8016f18 <tcp_process+0x478>
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016f12:	005b      	lsls	r3, r3, #1
 8016f14:	b29b      	uxth	r3, r3
 8016f16:	e001      	b.n	8016f1c <tcp_process+0x47c>
 8016f18:	f241 131c 	movw	r3, #4380	; 0x111c
 8016f1c:	687a      	ldr	r2, [r7, #4]
 8016f1e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8016f22:	4b53      	ldr	r3, [pc, #332]	; (8017070 <tcp_process+0x5d0>)
 8016f24:	781b      	ldrb	r3, [r3, #0]
 8016f26:	f003 0320 	and.w	r3, r3, #32
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d037      	beq.n	8016f9e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	8b5b      	ldrh	r3, [r3, #26]
 8016f32:	f043 0302 	orr.w	r3, r3, #2
 8016f36:	b29a      	uxth	r2, r3
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	2207      	movs	r2, #7
 8016f40:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8016f42:	e02c      	b.n	8016f9e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f44:	4b40      	ldr	r3, [pc, #256]	; (8017048 <tcp_process+0x5a8>)
 8016f46:	6819      	ldr	r1, [r3, #0]
 8016f48:	4b40      	ldr	r3, [pc, #256]	; (801704c <tcp_process+0x5ac>)
 8016f4a:	881b      	ldrh	r3, [r3, #0]
 8016f4c:	461a      	mov	r2, r3
 8016f4e:	4b40      	ldr	r3, [pc, #256]	; (8017050 <tcp_process+0x5b0>)
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016f54:	4b3f      	ldr	r3, [pc, #252]	; (8017054 <tcp_process+0x5b4>)
 8016f56:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f58:	885b      	ldrh	r3, [r3, #2]
 8016f5a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016f5c:	4a3d      	ldr	r2, [pc, #244]	; (8017054 <tcp_process+0x5b4>)
 8016f5e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f60:	8812      	ldrh	r2, [r2, #0]
 8016f62:	b292      	uxth	r2, r2
 8016f64:	9202      	str	r2, [sp, #8]
 8016f66:	9301      	str	r3, [sp, #4]
 8016f68:	4b3b      	ldr	r3, [pc, #236]	; (8017058 <tcp_process+0x5b8>)
 8016f6a:	9300      	str	r3, [sp, #0]
 8016f6c:	4b3b      	ldr	r3, [pc, #236]	; (801705c <tcp_process+0x5bc>)
 8016f6e:	4602      	mov	r2, r0
 8016f70:	6878      	ldr	r0, [r7, #4]
 8016f72:	f003 f827 	bl	8019fc4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8016f76:	e167      	b.n	8017248 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8016f78:	4b32      	ldr	r3, [pc, #200]	; (8017044 <tcp_process+0x5a4>)
 8016f7a:	781b      	ldrb	r3, [r3, #0]
 8016f7c:	f003 0302 	and.w	r3, r3, #2
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	f000 8161 	beq.w	8017248 <tcp_process+0x7a8>
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f8a:	1e5a      	subs	r2, r3, #1
 8016f8c:	4b30      	ldr	r3, [pc, #192]	; (8017050 <tcp_process+0x5b0>)
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	429a      	cmp	r2, r3
 8016f92:	f040 8159 	bne.w	8017248 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8016f96:	6878      	ldr	r0, [r7, #4]
 8016f98:	f002 fe0c 	bl	8019bb4 <tcp_rexmit>
      break;
 8016f9c:	e154      	b.n	8017248 <tcp_process+0x7a8>
 8016f9e:	e153      	b.n	8017248 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8016fa0:	6878      	ldr	r0, [r7, #4]
 8016fa2:	f000 fa71 	bl	8017488 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8016fa6:	4b32      	ldr	r3, [pc, #200]	; (8017070 <tcp_process+0x5d0>)
 8016fa8:	781b      	ldrb	r3, [r3, #0]
 8016faa:	f003 0320 	and.w	r3, r3, #32
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	f000 814c 	beq.w	801724c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	8b5b      	ldrh	r3, [r3, #26]
 8016fb8:	f043 0302 	orr.w	r3, r3, #2
 8016fbc:	b29a      	uxth	r2, r3
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	2207      	movs	r2, #7
 8016fc6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016fc8:	e140      	b.n	801724c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8016fca:	6878      	ldr	r0, [r7, #4]
 8016fcc:	f000 fa5c 	bl	8017488 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016fd0:	4b27      	ldr	r3, [pc, #156]	; (8017070 <tcp_process+0x5d0>)
 8016fd2:	781b      	ldrb	r3, [r3, #0]
 8016fd4:	f003 0320 	and.w	r3, r3, #32
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d071      	beq.n	80170c0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016fdc:	4b19      	ldr	r3, [pc, #100]	; (8017044 <tcp_process+0x5a4>)
 8016fde:	781b      	ldrb	r3, [r3, #0]
 8016fe0:	f003 0310 	and.w	r3, r3, #16
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d060      	beq.n	80170aa <tcp_process+0x60a>
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016fec:	4b16      	ldr	r3, [pc, #88]	; (8017048 <tcp_process+0x5a8>)
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	429a      	cmp	r2, r3
 8016ff2:	d15a      	bne.n	80170aa <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d156      	bne.n	80170aa <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	8b5b      	ldrh	r3, [r3, #26]
 8017000:	f043 0302 	orr.w	r3, r3, #2
 8017004:	b29a      	uxth	r2, r3
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801700a:	6878      	ldr	r0, [r7, #4]
 801700c:	f7fe fdbe 	bl	8015b8c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8017010:	4b18      	ldr	r3, [pc, #96]	; (8017074 <tcp_process+0x5d4>)
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	687a      	ldr	r2, [r7, #4]
 8017016:	429a      	cmp	r2, r3
 8017018:	d105      	bne.n	8017026 <tcp_process+0x586>
 801701a:	4b16      	ldr	r3, [pc, #88]	; (8017074 <tcp_process+0x5d4>)
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	68db      	ldr	r3, [r3, #12]
 8017020:	4a14      	ldr	r2, [pc, #80]	; (8017074 <tcp_process+0x5d4>)
 8017022:	6013      	str	r3, [r2, #0]
 8017024:	e02e      	b.n	8017084 <tcp_process+0x5e4>
 8017026:	4b13      	ldr	r3, [pc, #76]	; (8017074 <tcp_process+0x5d4>)
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	617b      	str	r3, [r7, #20]
 801702c:	e027      	b.n	801707e <tcp_process+0x5de>
 801702e:	697b      	ldr	r3, [r7, #20]
 8017030:	68db      	ldr	r3, [r3, #12]
 8017032:	687a      	ldr	r2, [r7, #4]
 8017034:	429a      	cmp	r2, r3
 8017036:	d11f      	bne.n	8017078 <tcp_process+0x5d8>
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	68da      	ldr	r2, [r3, #12]
 801703c:	697b      	ldr	r3, [r7, #20]
 801703e:	60da      	str	r2, [r3, #12]
 8017040:	e020      	b.n	8017084 <tcp_process+0x5e4>
 8017042:	bf00      	nop
 8017044:	20004788 	.word	0x20004788
 8017048:	20004780 	.word	0x20004780
 801704c:	20004786 	.word	0x20004786
 8017050:	2000477c 	.word	0x2000477c
 8017054:	2000476c 	.word	0x2000476c
 8017058:	20008098 	.word	0x20008098
 801705c:	2000809c 	.word	0x2000809c
 8017060:	08024430 	.word	0x08024430
 8017064:	080246d0 	.word	0x080246d0
 8017068:	0802447c 	.word	0x0802447c
 801706c:	20004784 	.word	0x20004784
 8017070:	20004789 	.word	0x20004789
 8017074:	2000b79c 	.word	0x2000b79c
 8017078:	697b      	ldr	r3, [r7, #20]
 801707a:	68db      	ldr	r3, [r3, #12]
 801707c:	617b      	str	r3, [r7, #20]
 801707e:	697b      	ldr	r3, [r7, #20]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d1d4      	bne.n	801702e <tcp_process+0x58e>
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	2200      	movs	r2, #0
 8017088:	60da      	str	r2, [r3, #12]
 801708a:	4b77      	ldr	r3, [pc, #476]	; (8017268 <tcp_process+0x7c8>)
 801708c:	2201      	movs	r2, #1
 801708e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	220a      	movs	r2, #10
 8017094:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8017096:	4b75      	ldr	r3, [pc, #468]	; (801726c <tcp_process+0x7cc>)
 8017098:	681a      	ldr	r2, [r3, #0]
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	60da      	str	r2, [r3, #12]
 801709e:	4a73      	ldr	r2, [pc, #460]	; (801726c <tcp_process+0x7cc>)
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	6013      	str	r3, [r2, #0]
 80170a4:	f003 f950 	bl	801a348 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80170a8:	e0d2      	b.n	8017250 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	8b5b      	ldrh	r3, [r3, #26]
 80170ae:	f043 0302 	orr.w	r3, r3, #2
 80170b2:	b29a      	uxth	r2, r3
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	2208      	movs	r2, #8
 80170bc:	751a      	strb	r2, [r3, #20]
      break;
 80170be:	e0c7      	b.n	8017250 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80170c0:	4b6b      	ldr	r3, [pc, #428]	; (8017270 <tcp_process+0x7d0>)
 80170c2:	781b      	ldrb	r3, [r3, #0]
 80170c4:	f003 0310 	and.w	r3, r3, #16
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	f000 80c1 	beq.w	8017250 <tcp_process+0x7b0>
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80170d2:	4b68      	ldr	r3, [pc, #416]	; (8017274 <tcp_process+0x7d4>)
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	429a      	cmp	r2, r3
 80170d8:	f040 80ba 	bne.w	8017250 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	f040 80b5 	bne.w	8017250 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	2206      	movs	r2, #6
 80170ea:	751a      	strb	r2, [r3, #20]
      break;
 80170ec:	e0b0      	b.n	8017250 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80170ee:	6878      	ldr	r0, [r7, #4]
 80170f0:	f000 f9ca 	bl	8017488 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80170f4:	4b60      	ldr	r3, [pc, #384]	; (8017278 <tcp_process+0x7d8>)
 80170f6:	781b      	ldrb	r3, [r3, #0]
 80170f8:	f003 0320 	and.w	r3, r3, #32
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	f000 80a9 	beq.w	8017254 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	8b5b      	ldrh	r3, [r3, #26]
 8017106:	f043 0302 	orr.w	r3, r3, #2
 801710a:	b29a      	uxth	r2, r3
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8017110:	6878      	ldr	r0, [r7, #4]
 8017112:	f7fe fd3b 	bl	8015b8c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017116:	4b59      	ldr	r3, [pc, #356]	; (801727c <tcp_process+0x7dc>)
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	687a      	ldr	r2, [r7, #4]
 801711c:	429a      	cmp	r2, r3
 801711e:	d105      	bne.n	801712c <tcp_process+0x68c>
 8017120:	4b56      	ldr	r3, [pc, #344]	; (801727c <tcp_process+0x7dc>)
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	68db      	ldr	r3, [r3, #12]
 8017126:	4a55      	ldr	r2, [pc, #340]	; (801727c <tcp_process+0x7dc>)
 8017128:	6013      	str	r3, [r2, #0]
 801712a:	e013      	b.n	8017154 <tcp_process+0x6b4>
 801712c:	4b53      	ldr	r3, [pc, #332]	; (801727c <tcp_process+0x7dc>)
 801712e:	681b      	ldr	r3, [r3, #0]
 8017130:	613b      	str	r3, [r7, #16]
 8017132:	e00c      	b.n	801714e <tcp_process+0x6ae>
 8017134:	693b      	ldr	r3, [r7, #16]
 8017136:	68db      	ldr	r3, [r3, #12]
 8017138:	687a      	ldr	r2, [r7, #4]
 801713a:	429a      	cmp	r2, r3
 801713c:	d104      	bne.n	8017148 <tcp_process+0x6a8>
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	68da      	ldr	r2, [r3, #12]
 8017142:	693b      	ldr	r3, [r7, #16]
 8017144:	60da      	str	r2, [r3, #12]
 8017146:	e005      	b.n	8017154 <tcp_process+0x6b4>
 8017148:	693b      	ldr	r3, [r7, #16]
 801714a:	68db      	ldr	r3, [r3, #12]
 801714c:	613b      	str	r3, [r7, #16]
 801714e:	693b      	ldr	r3, [r7, #16]
 8017150:	2b00      	cmp	r3, #0
 8017152:	d1ef      	bne.n	8017134 <tcp_process+0x694>
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	2200      	movs	r2, #0
 8017158:	60da      	str	r2, [r3, #12]
 801715a:	4b43      	ldr	r3, [pc, #268]	; (8017268 <tcp_process+0x7c8>)
 801715c:	2201      	movs	r2, #1
 801715e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	220a      	movs	r2, #10
 8017164:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017166:	4b41      	ldr	r3, [pc, #260]	; (801726c <tcp_process+0x7cc>)
 8017168:	681a      	ldr	r2, [r3, #0]
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	60da      	str	r2, [r3, #12]
 801716e:	4a3f      	ldr	r2, [pc, #252]	; (801726c <tcp_process+0x7cc>)
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	6013      	str	r3, [r2, #0]
 8017174:	f003 f8e8 	bl	801a348 <tcp_timer_needed>
      }
      break;
 8017178:	e06c      	b.n	8017254 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801717a:	6878      	ldr	r0, [r7, #4]
 801717c:	f000 f984 	bl	8017488 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017180:	4b3b      	ldr	r3, [pc, #236]	; (8017270 <tcp_process+0x7d0>)
 8017182:	781b      	ldrb	r3, [r3, #0]
 8017184:	f003 0310 	and.w	r3, r3, #16
 8017188:	2b00      	cmp	r3, #0
 801718a:	d065      	beq.n	8017258 <tcp_process+0x7b8>
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017190:	4b38      	ldr	r3, [pc, #224]	; (8017274 <tcp_process+0x7d4>)
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	429a      	cmp	r2, r3
 8017196:	d15f      	bne.n	8017258 <tcp_process+0x7b8>
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801719c:	2b00      	cmp	r3, #0
 801719e:	d15b      	bne.n	8017258 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80171a0:	6878      	ldr	r0, [r7, #4]
 80171a2:	f7fe fcf3 	bl	8015b8c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80171a6:	4b35      	ldr	r3, [pc, #212]	; (801727c <tcp_process+0x7dc>)
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	687a      	ldr	r2, [r7, #4]
 80171ac:	429a      	cmp	r2, r3
 80171ae:	d105      	bne.n	80171bc <tcp_process+0x71c>
 80171b0:	4b32      	ldr	r3, [pc, #200]	; (801727c <tcp_process+0x7dc>)
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	68db      	ldr	r3, [r3, #12]
 80171b6:	4a31      	ldr	r2, [pc, #196]	; (801727c <tcp_process+0x7dc>)
 80171b8:	6013      	str	r3, [r2, #0]
 80171ba:	e013      	b.n	80171e4 <tcp_process+0x744>
 80171bc:	4b2f      	ldr	r3, [pc, #188]	; (801727c <tcp_process+0x7dc>)
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	60fb      	str	r3, [r7, #12]
 80171c2:	e00c      	b.n	80171de <tcp_process+0x73e>
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	68db      	ldr	r3, [r3, #12]
 80171c8:	687a      	ldr	r2, [r7, #4]
 80171ca:	429a      	cmp	r2, r3
 80171cc:	d104      	bne.n	80171d8 <tcp_process+0x738>
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	68da      	ldr	r2, [r3, #12]
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	60da      	str	r2, [r3, #12]
 80171d6:	e005      	b.n	80171e4 <tcp_process+0x744>
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	68db      	ldr	r3, [r3, #12]
 80171dc:	60fb      	str	r3, [r7, #12]
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d1ef      	bne.n	80171c4 <tcp_process+0x724>
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	2200      	movs	r2, #0
 80171e8:	60da      	str	r2, [r3, #12]
 80171ea:	4b1f      	ldr	r3, [pc, #124]	; (8017268 <tcp_process+0x7c8>)
 80171ec:	2201      	movs	r2, #1
 80171ee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	220a      	movs	r2, #10
 80171f4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80171f6:	4b1d      	ldr	r3, [pc, #116]	; (801726c <tcp_process+0x7cc>)
 80171f8:	681a      	ldr	r2, [r3, #0]
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	60da      	str	r2, [r3, #12]
 80171fe:	4a1b      	ldr	r2, [pc, #108]	; (801726c <tcp_process+0x7cc>)
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	6013      	str	r3, [r2, #0]
 8017204:	f003 f8a0 	bl	801a348 <tcp_timer_needed>
      }
      break;
 8017208:	e026      	b.n	8017258 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801720a:	6878      	ldr	r0, [r7, #4]
 801720c:	f000 f93c 	bl	8017488 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017210:	4b17      	ldr	r3, [pc, #92]	; (8017270 <tcp_process+0x7d0>)
 8017212:	781b      	ldrb	r3, [r3, #0]
 8017214:	f003 0310 	and.w	r3, r3, #16
 8017218:	2b00      	cmp	r3, #0
 801721a:	d01f      	beq.n	801725c <tcp_process+0x7bc>
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017220:	4b14      	ldr	r3, [pc, #80]	; (8017274 <tcp_process+0x7d4>)
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	429a      	cmp	r2, r3
 8017226:	d119      	bne.n	801725c <tcp_process+0x7bc>
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801722c:	2b00      	cmp	r3, #0
 801722e:	d115      	bne.n	801725c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8017230:	4b11      	ldr	r3, [pc, #68]	; (8017278 <tcp_process+0x7d8>)
 8017232:	781b      	ldrb	r3, [r3, #0]
 8017234:	f043 0310 	orr.w	r3, r3, #16
 8017238:	b2da      	uxtb	r2, r3
 801723a:	4b0f      	ldr	r3, [pc, #60]	; (8017278 <tcp_process+0x7d8>)
 801723c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801723e:	e00d      	b.n	801725c <tcp_process+0x7bc>
    default:
      break;
 8017240:	bf00      	nop
 8017242:	e00c      	b.n	801725e <tcp_process+0x7be>
      break;
 8017244:	bf00      	nop
 8017246:	e00a      	b.n	801725e <tcp_process+0x7be>
      break;
 8017248:	bf00      	nop
 801724a:	e008      	b.n	801725e <tcp_process+0x7be>
      break;
 801724c:	bf00      	nop
 801724e:	e006      	b.n	801725e <tcp_process+0x7be>
      break;
 8017250:	bf00      	nop
 8017252:	e004      	b.n	801725e <tcp_process+0x7be>
      break;
 8017254:	bf00      	nop
 8017256:	e002      	b.n	801725e <tcp_process+0x7be>
      break;
 8017258:	bf00      	nop
 801725a:	e000      	b.n	801725e <tcp_process+0x7be>
      break;
 801725c:	bf00      	nop
  }
  return ERR_OK;
 801725e:	2300      	movs	r3, #0
}
 8017260:	4618      	mov	r0, r3
 8017262:	3724      	adds	r7, #36	; 0x24
 8017264:	46bd      	mov	sp, r7
 8017266:	bd90      	pop	{r4, r7, pc}
 8017268:	2000b798 	.word	0x2000b798
 801726c:	2000b7ac 	.word	0x2000b7ac
 8017270:	20004788 	.word	0x20004788
 8017274:	20004780 	.word	0x20004780
 8017278:	20004789 	.word	0x20004789
 801727c:	2000b79c 	.word	0x2000b79c

08017280 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8017280:	b590      	push	{r4, r7, lr}
 8017282:	b085      	sub	sp, #20
 8017284:	af00      	add	r7, sp, #0
 8017286:	6078      	str	r0, [r7, #4]
 8017288:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	2b00      	cmp	r3, #0
 801728e:	d106      	bne.n	801729e <tcp_oos_insert_segment+0x1e>
 8017290:	4b3b      	ldr	r3, [pc, #236]	; (8017380 <tcp_oos_insert_segment+0x100>)
 8017292:	f240 421f 	movw	r2, #1055	; 0x41f
 8017296:	493b      	ldr	r1, [pc, #236]	; (8017384 <tcp_oos_insert_segment+0x104>)
 8017298:	483b      	ldr	r0, [pc, #236]	; (8017388 <tcp_oos_insert_segment+0x108>)
 801729a:	f007 fd61 	bl	801ed60 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	68db      	ldr	r3, [r3, #12]
 80172a2:	899b      	ldrh	r3, [r3, #12]
 80172a4:	b29b      	uxth	r3, r3
 80172a6:	4618      	mov	r0, r3
 80172a8:	f7fb f936 	bl	8012518 <lwip_htons>
 80172ac:	4603      	mov	r3, r0
 80172ae:	b2db      	uxtb	r3, r3
 80172b0:	f003 0301 	and.w	r3, r3, #1
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d028      	beq.n	801730a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80172b8:	6838      	ldr	r0, [r7, #0]
 80172ba:	f7fe f979 	bl	80155b0 <tcp_segs_free>
    next = NULL;
 80172be:	2300      	movs	r3, #0
 80172c0:	603b      	str	r3, [r7, #0]
 80172c2:	e056      	b.n	8017372 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80172c4:	683b      	ldr	r3, [r7, #0]
 80172c6:	68db      	ldr	r3, [r3, #12]
 80172c8:	899b      	ldrh	r3, [r3, #12]
 80172ca:	b29b      	uxth	r3, r3
 80172cc:	4618      	mov	r0, r3
 80172ce:	f7fb f923 	bl	8012518 <lwip_htons>
 80172d2:	4603      	mov	r3, r0
 80172d4:	b2db      	uxtb	r3, r3
 80172d6:	f003 0301 	and.w	r3, r3, #1
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d00d      	beq.n	80172fa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	68db      	ldr	r3, [r3, #12]
 80172e2:	899b      	ldrh	r3, [r3, #12]
 80172e4:	b29c      	uxth	r4, r3
 80172e6:	2001      	movs	r0, #1
 80172e8:	f7fb f916 	bl	8012518 <lwip_htons>
 80172ec:	4603      	mov	r3, r0
 80172ee:	461a      	mov	r2, r3
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	68db      	ldr	r3, [r3, #12]
 80172f4:	4322      	orrs	r2, r4
 80172f6:	b292      	uxth	r2, r2
 80172f8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80172fa:	683b      	ldr	r3, [r7, #0]
 80172fc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80172fe:	683b      	ldr	r3, [r7, #0]
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017304:	68f8      	ldr	r0, [r7, #12]
 8017306:	f7fe f968 	bl	80155da <tcp_seg_free>
    while (next &&
 801730a:	683b      	ldr	r3, [r7, #0]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d00e      	beq.n	801732e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	891b      	ldrh	r3, [r3, #8]
 8017314:	461a      	mov	r2, r3
 8017316:	4b1d      	ldr	r3, [pc, #116]	; (801738c <tcp_oos_insert_segment+0x10c>)
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	441a      	add	r2, r3
 801731c:	683b      	ldr	r3, [r7, #0]
 801731e:	68db      	ldr	r3, [r3, #12]
 8017320:	685b      	ldr	r3, [r3, #4]
 8017322:	6839      	ldr	r1, [r7, #0]
 8017324:	8909      	ldrh	r1, [r1, #8]
 8017326:	440b      	add	r3, r1
 8017328:	1ad3      	subs	r3, r2, r3
    while (next &&
 801732a:	2b00      	cmp	r3, #0
 801732c:	daca      	bge.n	80172c4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801732e:	683b      	ldr	r3, [r7, #0]
 8017330:	2b00      	cmp	r3, #0
 8017332:	d01e      	beq.n	8017372 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	891b      	ldrh	r3, [r3, #8]
 8017338:	461a      	mov	r2, r3
 801733a:	4b14      	ldr	r3, [pc, #80]	; (801738c <tcp_oos_insert_segment+0x10c>)
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	441a      	add	r2, r3
 8017340:	683b      	ldr	r3, [r7, #0]
 8017342:	68db      	ldr	r3, [r3, #12]
 8017344:	685b      	ldr	r3, [r3, #4]
 8017346:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017348:	2b00      	cmp	r3, #0
 801734a:	dd12      	ble.n	8017372 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801734c:	683b      	ldr	r3, [r7, #0]
 801734e:	68db      	ldr	r3, [r3, #12]
 8017350:	685b      	ldr	r3, [r3, #4]
 8017352:	b29a      	uxth	r2, r3
 8017354:	4b0d      	ldr	r3, [pc, #52]	; (801738c <tcp_oos_insert_segment+0x10c>)
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	b29b      	uxth	r3, r3
 801735a:	1ad3      	subs	r3, r2, r3
 801735c:	b29a      	uxth	r2, r3
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	685a      	ldr	r2, [r3, #4]
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	891b      	ldrh	r3, [r3, #8]
 801736a:	4619      	mov	r1, r3
 801736c:	4610      	mov	r0, r2
 801736e:	f7fc fb09 	bl	8013984 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	683a      	ldr	r2, [r7, #0]
 8017376:	601a      	str	r2, [r3, #0]
}
 8017378:	bf00      	nop
 801737a:	3714      	adds	r7, #20
 801737c:	46bd      	mov	sp, r7
 801737e:	bd90      	pop	{r4, r7, pc}
 8017380:	08024430 	.word	0x08024430
 8017384:	080246f0 	.word	0x080246f0
 8017388:	0802447c 	.word	0x0802447c
 801738c:	2000477c 	.word	0x2000477c

08017390 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8017390:	b5b0      	push	{r4, r5, r7, lr}
 8017392:	b086      	sub	sp, #24
 8017394:	af00      	add	r7, sp, #0
 8017396:	60f8      	str	r0, [r7, #12]
 8017398:	60b9      	str	r1, [r7, #8]
 801739a:	607a      	str	r2, [r7, #4]
 801739c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801739e:	e03e      	b.n	801741e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80173a0:	68bb      	ldr	r3, [r7, #8]
 80173a2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80173a4:	68bb      	ldr	r3, [r7, #8]
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80173aa:	697b      	ldr	r3, [r7, #20]
 80173ac:	685b      	ldr	r3, [r3, #4]
 80173ae:	4618      	mov	r0, r3
 80173b0:	f7fc fcfc 	bl	8013dac <pbuf_clen>
 80173b4:	4603      	mov	r3, r0
 80173b6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80173be:	8a7a      	ldrh	r2, [r7, #18]
 80173c0:	429a      	cmp	r2, r3
 80173c2:	d906      	bls.n	80173d2 <tcp_free_acked_segments+0x42>
 80173c4:	4b2a      	ldr	r3, [pc, #168]	; (8017470 <tcp_free_acked_segments+0xe0>)
 80173c6:	f240 4257 	movw	r2, #1111	; 0x457
 80173ca:	492a      	ldr	r1, [pc, #168]	; (8017474 <tcp_free_acked_segments+0xe4>)
 80173cc:	482a      	ldr	r0, [pc, #168]	; (8017478 <tcp_free_acked_segments+0xe8>)
 80173ce:	f007 fcc7 	bl	801ed60 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80173d8:	8a7b      	ldrh	r3, [r7, #18]
 80173da:	1ad3      	subs	r3, r2, r3
 80173dc:	b29a      	uxth	r2, r3
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80173e4:	697b      	ldr	r3, [r7, #20]
 80173e6:	891a      	ldrh	r2, [r3, #8]
 80173e8:	4b24      	ldr	r3, [pc, #144]	; (801747c <tcp_free_acked_segments+0xec>)
 80173ea:	881b      	ldrh	r3, [r3, #0]
 80173ec:	4413      	add	r3, r2
 80173ee:	b29a      	uxth	r2, r3
 80173f0:	4b22      	ldr	r3, [pc, #136]	; (801747c <tcp_free_acked_segments+0xec>)
 80173f2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80173f4:	6978      	ldr	r0, [r7, #20]
 80173f6:	f7fe f8f0 	bl	80155da <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017400:	2b00      	cmp	r3, #0
 8017402:	d00c      	beq.n	801741e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017404:	68bb      	ldr	r3, [r7, #8]
 8017406:	2b00      	cmp	r3, #0
 8017408:	d109      	bne.n	801741e <tcp_free_acked_segments+0x8e>
 801740a:	683b      	ldr	r3, [r7, #0]
 801740c:	2b00      	cmp	r3, #0
 801740e:	d106      	bne.n	801741e <tcp_free_acked_segments+0x8e>
 8017410:	4b17      	ldr	r3, [pc, #92]	; (8017470 <tcp_free_acked_segments+0xe0>)
 8017412:	f240 4261 	movw	r2, #1121	; 0x461
 8017416:	491a      	ldr	r1, [pc, #104]	; (8017480 <tcp_free_acked_segments+0xf0>)
 8017418:	4817      	ldr	r0, [pc, #92]	; (8017478 <tcp_free_acked_segments+0xe8>)
 801741a:	f007 fca1 	bl	801ed60 <iprintf>
  while (seg_list != NULL &&
 801741e:	68bb      	ldr	r3, [r7, #8]
 8017420:	2b00      	cmp	r3, #0
 8017422:	d020      	beq.n	8017466 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017424:	68bb      	ldr	r3, [r7, #8]
 8017426:	68db      	ldr	r3, [r3, #12]
 8017428:	685b      	ldr	r3, [r3, #4]
 801742a:	4618      	mov	r0, r3
 801742c:	f7fb f889 	bl	8012542 <lwip_htonl>
 8017430:	4604      	mov	r4, r0
 8017432:	68bb      	ldr	r3, [r7, #8]
 8017434:	891b      	ldrh	r3, [r3, #8]
 8017436:	461d      	mov	r5, r3
 8017438:	68bb      	ldr	r3, [r7, #8]
 801743a:	68db      	ldr	r3, [r3, #12]
 801743c:	899b      	ldrh	r3, [r3, #12]
 801743e:	b29b      	uxth	r3, r3
 8017440:	4618      	mov	r0, r3
 8017442:	f7fb f869 	bl	8012518 <lwip_htons>
 8017446:	4603      	mov	r3, r0
 8017448:	b2db      	uxtb	r3, r3
 801744a:	f003 0303 	and.w	r3, r3, #3
 801744e:	2b00      	cmp	r3, #0
 8017450:	d001      	beq.n	8017456 <tcp_free_acked_segments+0xc6>
 8017452:	2301      	movs	r3, #1
 8017454:	e000      	b.n	8017458 <tcp_free_acked_segments+0xc8>
 8017456:	2300      	movs	r3, #0
 8017458:	442b      	add	r3, r5
 801745a:	18e2      	adds	r2, r4, r3
 801745c:	4b09      	ldr	r3, [pc, #36]	; (8017484 <tcp_free_acked_segments+0xf4>)
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8017462:	2b00      	cmp	r3, #0
 8017464:	dd9c      	ble.n	80173a0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8017466:	68bb      	ldr	r3, [r7, #8]
}
 8017468:	4618      	mov	r0, r3
 801746a:	3718      	adds	r7, #24
 801746c:	46bd      	mov	sp, r7
 801746e:	bdb0      	pop	{r4, r5, r7, pc}
 8017470:	08024430 	.word	0x08024430
 8017474:	08024718 	.word	0x08024718
 8017478:	0802447c 	.word	0x0802447c
 801747c:	20004784 	.word	0x20004784
 8017480:	08024740 	.word	0x08024740
 8017484:	20004780 	.word	0x20004780

08017488 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8017488:	b5b0      	push	{r4, r5, r7, lr}
 801748a:	b094      	sub	sp, #80	; 0x50
 801748c:	af00      	add	r7, sp, #0
 801748e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8017490:	2300      	movs	r3, #0
 8017492:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d106      	bne.n	80174a8 <tcp_receive+0x20>
 801749a:	4ba6      	ldr	r3, [pc, #664]	; (8017734 <tcp_receive+0x2ac>)
 801749c:	f240 427b 	movw	r2, #1147	; 0x47b
 80174a0:	49a5      	ldr	r1, [pc, #660]	; (8017738 <tcp_receive+0x2b0>)
 80174a2:	48a6      	ldr	r0, [pc, #664]	; (801773c <tcp_receive+0x2b4>)
 80174a4:	f007 fc5c 	bl	801ed60 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	7d1b      	ldrb	r3, [r3, #20]
 80174ac:	2b03      	cmp	r3, #3
 80174ae:	d806      	bhi.n	80174be <tcp_receive+0x36>
 80174b0:	4ba0      	ldr	r3, [pc, #640]	; (8017734 <tcp_receive+0x2ac>)
 80174b2:	f240 427c 	movw	r2, #1148	; 0x47c
 80174b6:	49a2      	ldr	r1, [pc, #648]	; (8017740 <tcp_receive+0x2b8>)
 80174b8:	48a0      	ldr	r0, [pc, #640]	; (801773c <tcp_receive+0x2b4>)
 80174ba:	f007 fc51 	bl	801ed60 <iprintf>

  if (flags & TCP_ACK) {
 80174be:	4ba1      	ldr	r3, [pc, #644]	; (8017744 <tcp_receive+0x2bc>)
 80174c0:	781b      	ldrb	r3, [r3, #0]
 80174c2:	f003 0310 	and.w	r3, r3, #16
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	f000 8263 	beq.w	8017992 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80174d2:	461a      	mov	r2, r3
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80174d8:	4413      	add	r3, r2
 80174da:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80174e0:	4b99      	ldr	r3, [pc, #612]	; (8017748 <tcp_receive+0x2c0>)
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	1ad3      	subs	r3, r2, r3
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	db1b      	blt.n	8017522 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80174ee:	4b96      	ldr	r3, [pc, #600]	; (8017748 <tcp_receive+0x2c0>)
 80174f0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80174f2:	429a      	cmp	r2, r3
 80174f4:	d106      	bne.n	8017504 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80174fa:	4b94      	ldr	r3, [pc, #592]	; (801774c <tcp_receive+0x2c4>)
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	1ad3      	subs	r3, r2, r3
 8017500:	2b00      	cmp	r3, #0
 8017502:	db0e      	blt.n	8017522 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017508:	4b90      	ldr	r3, [pc, #576]	; (801774c <tcp_receive+0x2c4>)
 801750a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801750c:	429a      	cmp	r2, r3
 801750e:	d125      	bne.n	801755c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017510:	4b8f      	ldr	r3, [pc, #572]	; (8017750 <tcp_receive+0x2c8>)
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	89db      	ldrh	r3, [r3, #14]
 8017516:	b29a      	uxth	r2, r3
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801751e:	429a      	cmp	r2, r3
 8017520:	d91c      	bls.n	801755c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8017522:	4b8b      	ldr	r3, [pc, #556]	; (8017750 <tcp_receive+0x2c8>)
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	89db      	ldrh	r3, [r3, #14]
 8017528:	b29a      	uxth	r2, r3
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801753c:	429a      	cmp	r2, r3
 801753e:	d205      	bcs.n	801754c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801754c:	4b7e      	ldr	r3, [pc, #504]	; (8017748 <tcp_receive+0x2c0>)
 801754e:	681a      	ldr	r2, [r3, #0]
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8017554:	4b7d      	ldr	r3, [pc, #500]	; (801774c <tcp_receive+0x2c4>)
 8017556:	681a      	ldr	r2, [r3, #0]
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801755c:	4b7b      	ldr	r3, [pc, #492]	; (801774c <tcp_receive+0x2c4>)
 801755e:	681a      	ldr	r2, [r3, #0]
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017564:	1ad3      	subs	r3, r2, r3
 8017566:	2b00      	cmp	r3, #0
 8017568:	dc58      	bgt.n	801761c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801756a:	4b7a      	ldr	r3, [pc, #488]	; (8017754 <tcp_receive+0x2cc>)
 801756c:	881b      	ldrh	r3, [r3, #0]
 801756e:	2b00      	cmp	r3, #0
 8017570:	d14b      	bne.n	801760a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017576:	687a      	ldr	r2, [r7, #4]
 8017578:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801757c:	4413      	add	r3, r2
 801757e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017580:	429a      	cmp	r2, r3
 8017582:	d142      	bne.n	801760a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801758a:	2b00      	cmp	r3, #0
 801758c:	db3d      	blt.n	801760a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017592:	4b6e      	ldr	r3, [pc, #440]	; (801774c <tcp_receive+0x2c4>)
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	429a      	cmp	r2, r3
 8017598:	d137      	bne.n	801760a <tcp_receive+0x182>
              found_dupack = 1;
 801759a:	2301      	movs	r3, #1
 801759c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80175a4:	2bff      	cmp	r3, #255	; 0xff
 80175a6:	d007      	beq.n	80175b8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80175ae:	3301      	adds	r3, #1
 80175b0:	b2da      	uxtb	r2, r3
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80175be:	2b03      	cmp	r3, #3
 80175c0:	d91b      	bls.n	80175fa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80175cc:	4413      	add	r3, r2
 80175ce:	b29a      	uxth	r2, r3
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80175d6:	429a      	cmp	r2, r3
 80175d8:	d30a      	bcc.n	80175f0 <tcp_receive+0x168>
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80175e4:	4413      	add	r3, r2
 80175e6:	b29a      	uxth	r2, r3
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80175ee:	e004      	b.n	80175fa <tcp_receive+0x172>
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80175f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017600:	2b02      	cmp	r3, #2
 8017602:	d902      	bls.n	801760a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017604:	6878      	ldr	r0, [r7, #4]
 8017606:	f002 fb41 	bl	8019c8c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801760a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801760c:	2b00      	cmp	r3, #0
 801760e:	f040 8160 	bne.w	80178d2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	2200      	movs	r2, #0
 8017616:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801761a:	e15a      	b.n	80178d2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801761c:	4b4b      	ldr	r3, [pc, #300]	; (801774c <tcp_receive+0x2c4>)
 801761e:	681a      	ldr	r2, [r3, #0]
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017624:	1ad3      	subs	r3, r2, r3
 8017626:	3b01      	subs	r3, #1
 8017628:	2b00      	cmp	r3, #0
 801762a:	f2c0 814d 	blt.w	80178c8 <tcp_receive+0x440>
 801762e:	4b47      	ldr	r3, [pc, #284]	; (801774c <tcp_receive+0x2c4>)
 8017630:	681a      	ldr	r2, [r3, #0]
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017636:	1ad3      	subs	r3, r2, r3
 8017638:	2b00      	cmp	r3, #0
 801763a:	f300 8145 	bgt.w	80178c8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	8b5b      	ldrh	r3, [r3, #26]
 8017642:	f003 0304 	and.w	r3, r3, #4
 8017646:	2b00      	cmp	r3, #0
 8017648:	d010      	beq.n	801766c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	8b5b      	ldrh	r3, [r3, #26]
 801764e:	f023 0304 	bic.w	r3, r3, #4
 8017652:	b29a      	uxth	r2, r3
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	2200      	movs	r2, #0
 8017668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	2200      	movs	r2, #0
 8017670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801767a:	10db      	asrs	r3, r3, #3
 801767c:	b21b      	sxth	r3, r3
 801767e:	b29a      	uxth	r2, r3
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017686:	b29b      	uxth	r3, r3
 8017688:	4413      	add	r3, r2
 801768a:	b29b      	uxth	r3, r3
 801768c:	b21a      	sxth	r2, r3
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8017694:	4b2d      	ldr	r3, [pc, #180]	; (801774c <tcp_receive+0x2c4>)
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	b29a      	uxth	r2, r3
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801769e:	b29b      	uxth	r3, r3
 80176a0:	1ad3      	subs	r3, r2, r3
 80176a2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	2200      	movs	r2, #0
 80176a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80176ac:	4b27      	ldr	r3, [pc, #156]	; (801774c <tcp_receive+0x2c4>)
 80176ae:	681a      	ldr	r2, [r3, #0]
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	7d1b      	ldrb	r3, [r3, #20]
 80176b8:	2b03      	cmp	r3, #3
 80176ba:	f240 8096 	bls.w	80177ea <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80176ca:	429a      	cmp	r2, r3
 80176cc:	d244      	bcs.n	8017758 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	8b5b      	ldrh	r3, [r3, #26]
 80176d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d001      	beq.n	80176de <tcp_receive+0x256>
 80176da:	2301      	movs	r3, #1
 80176dc:	e000      	b.n	80176e0 <tcp_receive+0x258>
 80176de:	2302      	movs	r3, #2
 80176e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80176e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80176e8:	b29a      	uxth	r2, r3
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80176ee:	fb12 f303 	smulbb	r3, r2, r3
 80176f2:	b29b      	uxth	r3, r3
 80176f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80176f6:	4293      	cmp	r3, r2
 80176f8:	bf28      	it	cs
 80176fa:	4613      	movcs	r3, r2
 80176fc:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017704:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017706:	4413      	add	r3, r2
 8017708:	b29a      	uxth	r2, r3
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017710:	429a      	cmp	r2, r3
 8017712:	d309      	bcc.n	8017728 <tcp_receive+0x2a0>
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801771a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801771c:	4413      	add	r3, r2
 801771e:	b29a      	uxth	r2, r3
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017726:	e060      	b.n	80177ea <tcp_receive+0x362>
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801772e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017732:	e05a      	b.n	80177ea <tcp_receive+0x362>
 8017734:	08024430 	.word	0x08024430
 8017738:	08024760 	.word	0x08024760
 801773c:	0802447c 	.word	0x0802447c
 8017740:	0802477c 	.word	0x0802477c
 8017744:	20004788 	.word	0x20004788
 8017748:	2000477c 	.word	0x2000477c
 801774c:	20004780 	.word	0x20004780
 8017750:	2000476c 	.word	0x2000476c
 8017754:	20004786 	.word	0x20004786
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801775e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017760:	4413      	add	r3, r2
 8017762:	b29a      	uxth	r2, r3
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801776a:	429a      	cmp	r2, r3
 801776c:	d309      	bcc.n	8017782 <tcp_receive+0x2fa>
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017774:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017776:	4413      	add	r3, r2
 8017778:	b29a      	uxth	r2, r3
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8017780:	e004      	b.n	801778c <tcp_receive+0x304>
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017788:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017798:	429a      	cmp	r2, r3
 801779a:	d326      	bcc.n	80177ea <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80177a8:	1ad3      	subs	r3, r2, r3
 80177aa:	b29a      	uxth	r2, r3
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80177bc:	4413      	add	r3, r2
 80177be:	b29a      	uxth	r2, r3
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80177c6:	429a      	cmp	r2, r3
 80177c8:	d30a      	bcc.n	80177e0 <tcp_receive+0x358>
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80177d4:	4413      	add	r3, r2
 80177d6:	b29a      	uxth	r2, r3
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80177de:	e004      	b.n	80177ea <tcp_receive+0x362>
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80177e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80177f2:	4a98      	ldr	r2, [pc, #608]	; (8017a54 <tcp_receive+0x5cc>)
 80177f4:	6878      	ldr	r0, [r7, #4]
 80177f6:	f7ff fdcb 	bl	8017390 <tcp_free_acked_segments>
 80177fa:	4602      	mov	r2, r0
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017808:	4a93      	ldr	r2, [pc, #588]	; (8017a58 <tcp_receive+0x5d0>)
 801780a:	6878      	ldr	r0, [r7, #4]
 801780c:	f7ff fdc0 	bl	8017390 <tcp_free_acked_segments>
 8017810:	4602      	mov	r2, r0
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801781a:	2b00      	cmp	r3, #0
 801781c:	d104      	bne.n	8017828 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017824:	861a      	strh	r2, [r3, #48]	; 0x30
 8017826:	e002      	b.n	801782e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	2200      	movs	r2, #0
 801782c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	2200      	movs	r2, #0
 8017832:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017838:	2b00      	cmp	r3, #0
 801783a:	d103      	bne.n	8017844 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	2200      	movs	r2, #0
 8017840:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801784a:	4b84      	ldr	r3, [pc, #528]	; (8017a5c <tcp_receive+0x5d4>)
 801784c:	881b      	ldrh	r3, [r3, #0]
 801784e:	4413      	add	r3, r2
 8017850:	b29a      	uxth	r2, r3
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	8b5b      	ldrh	r3, [r3, #26]
 801785c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017860:	2b00      	cmp	r3, #0
 8017862:	d035      	beq.n	80178d0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017868:	2b00      	cmp	r3, #0
 801786a:	d118      	bne.n	801789e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017870:	2b00      	cmp	r3, #0
 8017872:	d00c      	beq.n	801788e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801787c:	68db      	ldr	r3, [r3, #12]
 801787e:	685b      	ldr	r3, [r3, #4]
 8017880:	4618      	mov	r0, r3
 8017882:	f7fa fe5e 	bl	8012542 <lwip_htonl>
 8017886:	4603      	mov	r3, r0
 8017888:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801788a:	2b00      	cmp	r3, #0
 801788c:	dc20      	bgt.n	80178d0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	8b5b      	ldrh	r3, [r3, #26]
 8017892:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017896:	b29a      	uxth	r2, r3
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801789c:	e018      	b.n	80178d0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80178a6:	68db      	ldr	r3, [r3, #12]
 80178a8:	685b      	ldr	r3, [r3, #4]
 80178aa:	4618      	mov	r0, r3
 80178ac:	f7fa fe49 	bl	8012542 <lwip_htonl>
 80178b0:	4603      	mov	r3, r0
 80178b2:	1ae3      	subs	r3, r4, r3
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	dc0b      	bgt.n	80178d0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	8b5b      	ldrh	r3, [r3, #26]
 80178bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80178c0:	b29a      	uxth	r2, r3
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80178c6:	e003      	b.n	80178d0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80178c8:	6878      	ldr	r0, [r7, #4]
 80178ca:	f002 fbcd 	bl	801a068 <tcp_send_empty_ack>
 80178ce:	e000      	b.n	80178d2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80178d0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d05b      	beq.n	8017992 <tcp_receive+0x50a>
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80178de:	4b60      	ldr	r3, [pc, #384]	; (8017a60 <tcp_receive+0x5d8>)
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	1ad3      	subs	r3, r2, r3
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	da54      	bge.n	8017992 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80178e8:	4b5e      	ldr	r3, [pc, #376]	; (8017a64 <tcp_receive+0x5dc>)
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	b29a      	uxth	r2, r3
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80178f2:	b29b      	uxth	r3, r3
 80178f4:	1ad3      	subs	r3, r2, r3
 80178f6:	b29b      	uxth	r3, r3
 80178f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80178fc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017906:	10db      	asrs	r3, r3, #3
 8017908:	b21b      	sxth	r3, r3
 801790a:	b29b      	uxth	r3, r3
 801790c:	1ad3      	subs	r3, r2, r3
 801790e:	b29b      	uxth	r3, r3
 8017910:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801791a:	b29a      	uxth	r2, r3
 801791c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8017920:	4413      	add	r3, r2
 8017922:	b29b      	uxth	r3, r3
 8017924:	b21a      	sxth	r2, r3
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801792a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801792e:	2b00      	cmp	r3, #0
 8017930:	da05      	bge.n	801793e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8017932:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8017936:	425b      	negs	r3, r3
 8017938:	b29b      	uxth	r3, r3
 801793a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801793e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017948:	109b      	asrs	r3, r3, #2
 801794a:	b21b      	sxth	r3, r3
 801794c:	b29b      	uxth	r3, r3
 801794e:	1ad3      	subs	r3, r2, r3
 8017950:	b29b      	uxth	r3, r3
 8017952:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801795c:	b29a      	uxth	r2, r3
 801795e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8017962:	4413      	add	r3, r2
 8017964:	b29b      	uxth	r3, r3
 8017966:	b21a      	sxth	r2, r3
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017972:	10db      	asrs	r3, r3, #3
 8017974:	b21b      	sxth	r3, r3
 8017976:	b29a      	uxth	r2, r3
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801797e:	b29b      	uxth	r3, r3
 8017980:	4413      	add	r3, r2
 8017982:	b29b      	uxth	r3, r3
 8017984:	b21a      	sxth	r2, r3
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	2200      	movs	r2, #0
 8017990:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8017992:	4b35      	ldr	r3, [pc, #212]	; (8017a68 <tcp_receive+0x5e0>)
 8017994:	881b      	ldrh	r3, [r3, #0]
 8017996:	2b00      	cmp	r3, #0
 8017998:	f000 84e1 	beq.w	801835e <tcp_receive+0xed6>
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	7d1b      	ldrb	r3, [r3, #20]
 80179a0:	2b06      	cmp	r3, #6
 80179a2:	f200 84dc 	bhi.w	801835e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80179aa:	4b30      	ldr	r3, [pc, #192]	; (8017a6c <tcp_receive+0x5e4>)
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	1ad3      	subs	r3, r2, r3
 80179b0:	3b01      	subs	r3, #1
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	f2c0 808e 	blt.w	8017ad4 <tcp_receive+0x64c>
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80179bc:	4b2a      	ldr	r3, [pc, #168]	; (8017a68 <tcp_receive+0x5e0>)
 80179be:	881b      	ldrh	r3, [r3, #0]
 80179c0:	4619      	mov	r1, r3
 80179c2:	4b2a      	ldr	r3, [pc, #168]	; (8017a6c <tcp_receive+0x5e4>)
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	440b      	add	r3, r1
 80179c8:	1ad3      	subs	r3, r2, r3
 80179ca:	3301      	adds	r3, #1
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	f300 8081 	bgt.w	8017ad4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80179d2:	4b27      	ldr	r3, [pc, #156]	; (8017a70 <tcp_receive+0x5e8>)
 80179d4:	685b      	ldr	r3, [r3, #4]
 80179d6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80179dc:	4b23      	ldr	r3, [pc, #140]	; (8017a6c <tcp_receive+0x5e4>)
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	1ad3      	subs	r3, r2, r3
 80179e2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80179e4:	4b22      	ldr	r3, [pc, #136]	; (8017a70 <tcp_receive+0x5e8>)
 80179e6:	685b      	ldr	r3, [r3, #4]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d106      	bne.n	80179fa <tcp_receive+0x572>
 80179ec:	4b21      	ldr	r3, [pc, #132]	; (8017a74 <tcp_receive+0x5ec>)
 80179ee:	f240 5294 	movw	r2, #1428	; 0x594
 80179f2:	4921      	ldr	r1, [pc, #132]	; (8017a78 <tcp_receive+0x5f0>)
 80179f4:	4821      	ldr	r0, [pc, #132]	; (8017a7c <tcp_receive+0x5f4>)
 80179f6:	f007 f9b3 	bl	801ed60 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80179fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017a00:	4293      	cmp	r3, r2
 8017a02:	d906      	bls.n	8017a12 <tcp_receive+0x58a>
 8017a04:	4b1b      	ldr	r3, [pc, #108]	; (8017a74 <tcp_receive+0x5ec>)
 8017a06:	f240 5295 	movw	r2, #1429	; 0x595
 8017a0a:	491d      	ldr	r1, [pc, #116]	; (8017a80 <tcp_receive+0x5f8>)
 8017a0c:	481b      	ldr	r0, [pc, #108]	; (8017a7c <tcp_receive+0x5f4>)
 8017a0e:	f007 f9a7 	bl	801ed60 <iprintf>
      off = (u16_t)off32;
 8017a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a14:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8017a18:	4b15      	ldr	r3, [pc, #84]	; (8017a70 <tcp_receive+0x5e8>)
 8017a1a:	685b      	ldr	r3, [r3, #4]
 8017a1c:	891b      	ldrh	r3, [r3, #8]
 8017a1e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017a22:	429a      	cmp	r2, r3
 8017a24:	d906      	bls.n	8017a34 <tcp_receive+0x5ac>
 8017a26:	4b13      	ldr	r3, [pc, #76]	; (8017a74 <tcp_receive+0x5ec>)
 8017a28:	f240 5297 	movw	r2, #1431	; 0x597
 8017a2c:	4915      	ldr	r1, [pc, #84]	; (8017a84 <tcp_receive+0x5fc>)
 8017a2e:	4813      	ldr	r0, [pc, #76]	; (8017a7c <tcp_receive+0x5f4>)
 8017a30:	f007 f996 	bl	801ed60 <iprintf>
      inseg.len -= off;
 8017a34:	4b0e      	ldr	r3, [pc, #56]	; (8017a70 <tcp_receive+0x5e8>)
 8017a36:	891a      	ldrh	r2, [r3, #8]
 8017a38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017a3c:	1ad3      	subs	r3, r2, r3
 8017a3e:	b29a      	uxth	r2, r3
 8017a40:	4b0b      	ldr	r3, [pc, #44]	; (8017a70 <tcp_receive+0x5e8>)
 8017a42:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8017a44:	4b0a      	ldr	r3, [pc, #40]	; (8017a70 <tcp_receive+0x5e8>)
 8017a46:	685b      	ldr	r3, [r3, #4]
 8017a48:	891a      	ldrh	r2, [r3, #8]
 8017a4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017a4e:	1ad3      	subs	r3, r2, r3
 8017a50:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8017a52:	e029      	b.n	8017aa8 <tcp_receive+0x620>
 8017a54:	08024798 	.word	0x08024798
 8017a58:	080247a0 	.word	0x080247a0
 8017a5c:	20004784 	.word	0x20004784
 8017a60:	20004780 	.word	0x20004780
 8017a64:	2000b7a0 	.word	0x2000b7a0
 8017a68:	20004786 	.word	0x20004786
 8017a6c:	2000477c 	.word	0x2000477c
 8017a70:	2000475c 	.word	0x2000475c
 8017a74:	08024430 	.word	0x08024430
 8017a78:	080247a8 	.word	0x080247a8
 8017a7c:	0802447c 	.word	0x0802447c
 8017a80:	080247b8 	.word	0x080247b8
 8017a84:	080247c8 	.word	0x080247c8
        off -= p->len;
 8017a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a8a:	895b      	ldrh	r3, [r3, #10]
 8017a8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017a90:	1ad3      	subs	r3, r2, r3
 8017a92:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8017a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a98:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017a9a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8017a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a9e:	2200      	movs	r2, #0
 8017aa0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8017aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8017aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017aaa:	895b      	ldrh	r3, [r3, #10]
 8017aac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017ab0:	429a      	cmp	r2, r3
 8017ab2:	d8e9      	bhi.n	8017a88 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8017ab4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017ab8:	4619      	mov	r1, r3
 8017aba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017abc:	f7fc f862 	bl	8013b84 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ac4:	4a91      	ldr	r2, [pc, #580]	; (8017d0c <tcp_receive+0x884>)
 8017ac6:	6013      	str	r3, [r2, #0]
 8017ac8:	4b91      	ldr	r3, [pc, #580]	; (8017d10 <tcp_receive+0x888>)
 8017aca:	68db      	ldr	r3, [r3, #12]
 8017acc:	4a8f      	ldr	r2, [pc, #572]	; (8017d0c <tcp_receive+0x884>)
 8017ace:	6812      	ldr	r2, [r2, #0]
 8017ad0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017ad2:	e00d      	b.n	8017af0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8017ad4:	4b8d      	ldr	r3, [pc, #564]	; (8017d0c <tcp_receive+0x884>)
 8017ad6:	681a      	ldr	r2, [r3, #0]
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017adc:	1ad3      	subs	r3, r2, r3
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	da06      	bge.n	8017af0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	8b5b      	ldrh	r3, [r3, #26]
 8017ae6:	f043 0302 	orr.w	r3, r3, #2
 8017aea:	b29a      	uxth	r2, r3
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017af0:	4b86      	ldr	r3, [pc, #536]	; (8017d0c <tcp_receive+0x884>)
 8017af2:	681a      	ldr	r2, [r3, #0]
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017af8:	1ad3      	subs	r3, r2, r3
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	f2c0 842a 	blt.w	8018354 <tcp_receive+0xecc>
 8017b00:	4b82      	ldr	r3, [pc, #520]	; (8017d0c <tcp_receive+0x884>)
 8017b02:	681a      	ldr	r2, [r3, #0]
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b08:	6879      	ldr	r1, [r7, #4]
 8017b0a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017b0c:	440b      	add	r3, r1
 8017b0e:	1ad3      	subs	r3, r2, r3
 8017b10:	3301      	adds	r3, #1
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	f300 841e 	bgt.w	8018354 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017b1c:	4b7b      	ldr	r3, [pc, #492]	; (8017d0c <tcp_receive+0x884>)
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	429a      	cmp	r2, r3
 8017b22:	f040 829a 	bne.w	801805a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8017b26:	4b7a      	ldr	r3, [pc, #488]	; (8017d10 <tcp_receive+0x888>)
 8017b28:	891c      	ldrh	r4, [r3, #8]
 8017b2a:	4b79      	ldr	r3, [pc, #484]	; (8017d10 <tcp_receive+0x888>)
 8017b2c:	68db      	ldr	r3, [r3, #12]
 8017b2e:	899b      	ldrh	r3, [r3, #12]
 8017b30:	b29b      	uxth	r3, r3
 8017b32:	4618      	mov	r0, r3
 8017b34:	f7fa fcf0 	bl	8012518 <lwip_htons>
 8017b38:	4603      	mov	r3, r0
 8017b3a:	b2db      	uxtb	r3, r3
 8017b3c:	f003 0303 	and.w	r3, r3, #3
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d001      	beq.n	8017b48 <tcp_receive+0x6c0>
 8017b44:	2301      	movs	r3, #1
 8017b46:	e000      	b.n	8017b4a <tcp_receive+0x6c2>
 8017b48:	2300      	movs	r3, #0
 8017b4a:	4423      	add	r3, r4
 8017b4c:	b29a      	uxth	r2, r3
 8017b4e:	4b71      	ldr	r3, [pc, #452]	; (8017d14 <tcp_receive+0x88c>)
 8017b50:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017b56:	4b6f      	ldr	r3, [pc, #444]	; (8017d14 <tcp_receive+0x88c>)
 8017b58:	881b      	ldrh	r3, [r3, #0]
 8017b5a:	429a      	cmp	r2, r3
 8017b5c:	d275      	bcs.n	8017c4a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017b5e:	4b6c      	ldr	r3, [pc, #432]	; (8017d10 <tcp_receive+0x888>)
 8017b60:	68db      	ldr	r3, [r3, #12]
 8017b62:	899b      	ldrh	r3, [r3, #12]
 8017b64:	b29b      	uxth	r3, r3
 8017b66:	4618      	mov	r0, r3
 8017b68:	f7fa fcd6 	bl	8012518 <lwip_htons>
 8017b6c:	4603      	mov	r3, r0
 8017b6e:	b2db      	uxtb	r3, r3
 8017b70:	f003 0301 	and.w	r3, r3, #1
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d01f      	beq.n	8017bb8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8017b78:	4b65      	ldr	r3, [pc, #404]	; (8017d10 <tcp_receive+0x888>)
 8017b7a:	68db      	ldr	r3, [r3, #12]
 8017b7c:	899b      	ldrh	r3, [r3, #12]
 8017b7e:	b29b      	uxth	r3, r3
 8017b80:	b21b      	sxth	r3, r3
 8017b82:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017b86:	b21c      	sxth	r4, r3
 8017b88:	4b61      	ldr	r3, [pc, #388]	; (8017d10 <tcp_receive+0x888>)
 8017b8a:	68db      	ldr	r3, [r3, #12]
 8017b8c:	899b      	ldrh	r3, [r3, #12]
 8017b8e:	b29b      	uxth	r3, r3
 8017b90:	4618      	mov	r0, r3
 8017b92:	f7fa fcc1 	bl	8012518 <lwip_htons>
 8017b96:	4603      	mov	r3, r0
 8017b98:	b2db      	uxtb	r3, r3
 8017b9a:	b29b      	uxth	r3, r3
 8017b9c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8017ba0:	b29b      	uxth	r3, r3
 8017ba2:	4618      	mov	r0, r3
 8017ba4:	f7fa fcb8 	bl	8012518 <lwip_htons>
 8017ba8:	4603      	mov	r3, r0
 8017baa:	b21b      	sxth	r3, r3
 8017bac:	4323      	orrs	r3, r4
 8017bae:	b21a      	sxth	r2, r3
 8017bb0:	4b57      	ldr	r3, [pc, #348]	; (8017d10 <tcp_receive+0x888>)
 8017bb2:	68db      	ldr	r3, [r3, #12]
 8017bb4:	b292      	uxth	r2, r2
 8017bb6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017bbc:	4b54      	ldr	r3, [pc, #336]	; (8017d10 <tcp_receive+0x888>)
 8017bbe:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017bc0:	4b53      	ldr	r3, [pc, #332]	; (8017d10 <tcp_receive+0x888>)
 8017bc2:	68db      	ldr	r3, [r3, #12]
 8017bc4:	899b      	ldrh	r3, [r3, #12]
 8017bc6:	b29b      	uxth	r3, r3
 8017bc8:	4618      	mov	r0, r3
 8017bca:	f7fa fca5 	bl	8012518 <lwip_htons>
 8017bce:	4603      	mov	r3, r0
 8017bd0:	b2db      	uxtb	r3, r3
 8017bd2:	f003 0302 	and.w	r3, r3, #2
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d005      	beq.n	8017be6 <tcp_receive+0x75e>
            inseg.len -= 1;
 8017bda:	4b4d      	ldr	r3, [pc, #308]	; (8017d10 <tcp_receive+0x888>)
 8017bdc:	891b      	ldrh	r3, [r3, #8]
 8017bde:	3b01      	subs	r3, #1
 8017be0:	b29a      	uxth	r2, r3
 8017be2:	4b4b      	ldr	r3, [pc, #300]	; (8017d10 <tcp_receive+0x888>)
 8017be4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8017be6:	4b4a      	ldr	r3, [pc, #296]	; (8017d10 <tcp_receive+0x888>)
 8017be8:	685b      	ldr	r3, [r3, #4]
 8017bea:	4a49      	ldr	r2, [pc, #292]	; (8017d10 <tcp_receive+0x888>)
 8017bec:	8912      	ldrh	r2, [r2, #8]
 8017bee:	4611      	mov	r1, r2
 8017bf0:	4618      	mov	r0, r3
 8017bf2:	f7fb fec7 	bl	8013984 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8017bf6:	4b46      	ldr	r3, [pc, #280]	; (8017d10 <tcp_receive+0x888>)
 8017bf8:	891c      	ldrh	r4, [r3, #8]
 8017bfa:	4b45      	ldr	r3, [pc, #276]	; (8017d10 <tcp_receive+0x888>)
 8017bfc:	68db      	ldr	r3, [r3, #12]
 8017bfe:	899b      	ldrh	r3, [r3, #12]
 8017c00:	b29b      	uxth	r3, r3
 8017c02:	4618      	mov	r0, r3
 8017c04:	f7fa fc88 	bl	8012518 <lwip_htons>
 8017c08:	4603      	mov	r3, r0
 8017c0a:	b2db      	uxtb	r3, r3
 8017c0c:	f003 0303 	and.w	r3, r3, #3
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d001      	beq.n	8017c18 <tcp_receive+0x790>
 8017c14:	2301      	movs	r3, #1
 8017c16:	e000      	b.n	8017c1a <tcp_receive+0x792>
 8017c18:	2300      	movs	r3, #0
 8017c1a:	4423      	add	r3, r4
 8017c1c:	b29a      	uxth	r2, r3
 8017c1e:	4b3d      	ldr	r3, [pc, #244]	; (8017d14 <tcp_receive+0x88c>)
 8017c20:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017c22:	4b3c      	ldr	r3, [pc, #240]	; (8017d14 <tcp_receive+0x88c>)
 8017c24:	881b      	ldrh	r3, [r3, #0]
 8017c26:	461a      	mov	r2, r3
 8017c28:	4b38      	ldr	r3, [pc, #224]	; (8017d0c <tcp_receive+0x884>)
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	441a      	add	r2, r3
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c32:	6879      	ldr	r1, [r7, #4]
 8017c34:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017c36:	440b      	add	r3, r1
 8017c38:	429a      	cmp	r2, r3
 8017c3a:	d006      	beq.n	8017c4a <tcp_receive+0x7c2>
 8017c3c:	4b36      	ldr	r3, [pc, #216]	; (8017d18 <tcp_receive+0x890>)
 8017c3e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8017c42:	4936      	ldr	r1, [pc, #216]	; (8017d1c <tcp_receive+0x894>)
 8017c44:	4836      	ldr	r0, [pc, #216]	; (8017d20 <tcp_receive+0x898>)
 8017c46:	f007 f88b 	bl	801ed60 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	f000 80e7 	beq.w	8017e22 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017c54:	4b2e      	ldr	r3, [pc, #184]	; (8017d10 <tcp_receive+0x888>)
 8017c56:	68db      	ldr	r3, [r3, #12]
 8017c58:	899b      	ldrh	r3, [r3, #12]
 8017c5a:	b29b      	uxth	r3, r3
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	f7fa fc5b 	bl	8012518 <lwip_htons>
 8017c62:	4603      	mov	r3, r0
 8017c64:	b2db      	uxtb	r3, r3
 8017c66:	f003 0301 	and.w	r3, r3, #1
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d010      	beq.n	8017c90 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8017c6e:	e00a      	b.n	8017c86 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017c74:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017c7a:	681a      	ldr	r2, [r3, #0]
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8017c80:	68f8      	ldr	r0, [r7, #12]
 8017c82:	f7fd fcaa 	bl	80155da <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d1f0      	bne.n	8017c70 <tcp_receive+0x7e8>
 8017c8e:	e0c8      	b.n	8017e22 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017c94:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8017c96:	e052      	b.n	8017d3e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c9a:	68db      	ldr	r3, [r3, #12]
 8017c9c:	899b      	ldrh	r3, [r3, #12]
 8017c9e:	b29b      	uxth	r3, r3
 8017ca0:	4618      	mov	r0, r3
 8017ca2:	f7fa fc39 	bl	8012518 <lwip_htons>
 8017ca6:	4603      	mov	r3, r0
 8017ca8:	b2db      	uxtb	r3, r3
 8017caa:	f003 0301 	and.w	r3, r3, #1
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d03d      	beq.n	8017d2e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8017cb2:	4b17      	ldr	r3, [pc, #92]	; (8017d10 <tcp_receive+0x888>)
 8017cb4:	68db      	ldr	r3, [r3, #12]
 8017cb6:	899b      	ldrh	r3, [r3, #12]
 8017cb8:	b29b      	uxth	r3, r3
 8017cba:	4618      	mov	r0, r3
 8017cbc:	f7fa fc2c 	bl	8012518 <lwip_htons>
 8017cc0:	4603      	mov	r3, r0
 8017cc2:	b2db      	uxtb	r3, r3
 8017cc4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d130      	bne.n	8017d2e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8017ccc:	4b10      	ldr	r3, [pc, #64]	; (8017d10 <tcp_receive+0x888>)
 8017cce:	68db      	ldr	r3, [r3, #12]
 8017cd0:	899b      	ldrh	r3, [r3, #12]
 8017cd2:	b29c      	uxth	r4, r3
 8017cd4:	2001      	movs	r0, #1
 8017cd6:	f7fa fc1f 	bl	8012518 <lwip_htons>
 8017cda:	4603      	mov	r3, r0
 8017cdc:	461a      	mov	r2, r3
 8017cde:	4b0c      	ldr	r3, [pc, #48]	; (8017d10 <tcp_receive+0x888>)
 8017ce0:	68db      	ldr	r3, [r3, #12]
 8017ce2:	4322      	orrs	r2, r4
 8017ce4:	b292      	uxth	r2, r2
 8017ce6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8017ce8:	4b09      	ldr	r3, [pc, #36]	; (8017d10 <tcp_receive+0x888>)
 8017cea:	891c      	ldrh	r4, [r3, #8]
 8017cec:	4b08      	ldr	r3, [pc, #32]	; (8017d10 <tcp_receive+0x888>)
 8017cee:	68db      	ldr	r3, [r3, #12]
 8017cf0:	899b      	ldrh	r3, [r3, #12]
 8017cf2:	b29b      	uxth	r3, r3
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	f7fa fc0f 	bl	8012518 <lwip_htons>
 8017cfa:	4603      	mov	r3, r0
 8017cfc:	b2db      	uxtb	r3, r3
 8017cfe:	f003 0303 	and.w	r3, r3, #3
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d00e      	beq.n	8017d24 <tcp_receive+0x89c>
 8017d06:	2301      	movs	r3, #1
 8017d08:	e00d      	b.n	8017d26 <tcp_receive+0x89e>
 8017d0a:	bf00      	nop
 8017d0c:	2000477c 	.word	0x2000477c
 8017d10:	2000475c 	.word	0x2000475c
 8017d14:	20004786 	.word	0x20004786
 8017d18:	08024430 	.word	0x08024430
 8017d1c:	080247d8 	.word	0x080247d8
 8017d20:	0802447c 	.word	0x0802447c
 8017d24:	2300      	movs	r3, #0
 8017d26:	4423      	add	r3, r4
 8017d28:	b29a      	uxth	r2, r3
 8017d2a:	4b98      	ldr	r3, [pc, #608]	; (8017f8c <tcp_receive+0xb04>)
 8017d2c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8017d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d30:	613b      	str	r3, [r7, #16]
              next = next->next;
 8017d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8017d38:	6938      	ldr	r0, [r7, #16]
 8017d3a:	f7fd fc4e 	bl	80155da <tcp_seg_free>
            while (next &&
 8017d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d00e      	beq.n	8017d62 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8017d44:	4b91      	ldr	r3, [pc, #580]	; (8017f8c <tcp_receive+0xb04>)
 8017d46:	881b      	ldrh	r3, [r3, #0]
 8017d48:	461a      	mov	r2, r3
 8017d4a:	4b91      	ldr	r3, [pc, #580]	; (8017f90 <tcp_receive+0xb08>)
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	441a      	add	r2, r3
 8017d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d52:	68db      	ldr	r3, [r3, #12]
 8017d54:	685b      	ldr	r3, [r3, #4]
 8017d56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017d58:	8909      	ldrh	r1, [r1, #8]
 8017d5a:	440b      	add	r3, r1
 8017d5c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	da9a      	bge.n	8017c98 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8017d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d059      	beq.n	8017e1c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8017d68:	4b88      	ldr	r3, [pc, #544]	; (8017f8c <tcp_receive+0xb04>)
 8017d6a:	881b      	ldrh	r3, [r3, #0]
 8017d6c:	461a      	mov	r2, r3
 8017d6e:	4b88      	ldr	r3, [pc, #544]	; (8017f90 <tcp_receive+0xb08>)
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	441a      	add	r2, r3
 8017d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d76:	68db      	ldr	r3, [r3, #12]
 8017d78:	685b      	ldr	r3, [r3, #4]
 8017d7a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	dd4d      	ble.n	8017e1c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8017d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d82:	68db      	ldr	r3, [r3, #12]
 8017d84:	685b      	ldr	r3, [r3, #4]
 8017d86:	b29a      	uxth	r2, r3
 8017d88:	4b81      	ldr	r3, [pc, #516]	; (8017f90 <tcp_receive+0xb08>)
 8017d8a:	681b      	ldr	r3, [r3, #0]
 8017d8c:	b29b      	uxth	r3, r3
 8017d8e:	1ad3      	subs	r3, r2, r3
 8017d90:	b29a      	uxth	r2, r3
 8017d92:	4b80      	ldr	r3, [pc, #512]	; (8017f94 <tcp_receive+0xb0c>)
 8017d94:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017d96:	4b7f      	ldr	r3, [pc, #508]	; (8017f94 <tcp_receive+0xb0c>)
 8017d98:	68db      	ldr	r3, [r3, #12]
 8017d9a:	899b      	ldrh	r3, [r3, #12]
 8017d9c:	b29b      	uxth	r3, r3
 8017d9e:	4618      	mov	r0, r3
 8017da0:	f7fa fbba 	bl	8012518 <lwip_htons>
 8017da4:	4603      	mov	r3, r0
 8017da6:	b2db      	uxtb	r3, r3
 8017da8:	f003 0302 	and.w	r3, r3, #2
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d005      	beq.n	8017dbc <tcp_receive+0x934>
                inseg.len -= 1;
 8017db0:	4b78      	ldr	r3, [pc, #480]	; (8017f94 <tcp_receive+0xb0c>)
 8017db2:	891b      	ldrh	r3, [r3, #8]
 8017db4:	3b01      	subs	r3, #1
 8017db6:	b29a      	uxth	r2, r3
 8017db8:	4b76      	ldr	r3, [pc, #472]	; (8017f94 <tcp_receive+0xb0c>)
 8017dba:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8017dbc:	4b75      	ldr	r3, [pc, #468]	; (8017f94 <tcp_receive+0xb0c>)
 8017dbe:	685b      	ldr	r3, [r3, #4]
 8017dc0:	4a74      	ldr	r2, [pc, #464]	; (8017f94 <tcp_receive+0xb0c>)
 8017dc2:	8912      	ldrh	r2, [r2, #8]
 8017dc4:	4611      	mov	r1, r2
 8017dc6:	4618      	mov	r0, r3
 8017dc8:	f7fb fddc 	bl	8013984 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8017dcc:	4b71      	ldr	r3, [pc, #452]	; (8017f94 <tcp_receive+0xb0c>)
 8017dce:	891c      	ldrh	r4, [r3, #8]
 8017dd0:	4b70      	ldr	r3, [pc, #448]	; (8017f94 <tcp_receive+0xb0c>)
 8017dd2:	68db      	ldr	r3, [r3, #12]
 8017dd4:	899b      	ldrh	r3, [r3, #12]
 8017dd6:	b29b      	uxth	r3, r3
 8017dd8:	4618      	mov	r0, r3
 8017dda:	f7fa fb9d 	bl	8012518 <lwip_htons>
 8017dde:	4603      	mov	r3, r0
 8017de0:	b2db      	uxtb	r3, r3
 8017de2:	f003 0303 	and.w	r3, r3, #3
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d001      	beq.n	8017dee <tcp_receive+0x966>
 8017dea:	2301      	movs	r3, #1
 8017dec:	e000      	b.n	8017df0 <tcp_receive+0x968>
 8017dee:	2300      	movs	r3, #0
 8017df0:	4423      	add	r3, r4
 8017df2:	b29a      	uxth	r2, r3
 8017df4:	4b65      	ldr	r3, [pc, #404]	; (8017f8c <tcp_receive+0xb04>)
 8017df6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8017df8:	4b64      	ldr	r3, [pc, #400]	; (8017f8c <tcp_receive+0xb04>)
 8017dfa:	881b      	ldrh	r3, [r3, #0]
 8017dfc:	461a      	mov	r2, r3
 8017dfe:	4b64      	ldr	r3, [pc, #400]	; (8017f90 <tcp_receive+0xb08>)
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	441a      	add	r2, r3
 8017e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e06:	68db      	ldr	r3, [r3, #12]
 8017e08:	685b      	ldr	r3, [r3, #4]
 8017e0a:	429a      	cmp	r2, r3
 8017e0c:	d006      	beq.n	8017e1c <tcp_receive+0x994>
 8017e0e:	4b62      	ldr	r3, [pc, #392]	; (8017f98 <tcp_receive+0xb10>)
 8017e10:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8017e14:	4961      	ldr	r1, [pc, #388]	; (8017f9c <tcp_receive+0xb14>)
 8017e16:	4862      	ldr	r0, [pc, #392]	; (8017fa0 <tcp_receive+0xb18>)
 8017e18:	f006 ffa2 	bl	801ed60 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017e20:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8017e22:	4b5a      	ldr	r3, [pc, #360]	; (8017f8c <tcp_receive+0xb04>)
 8017e24:	881b      	ldrh	r3, [r3, #0]
 8017e26:	461a      	mov	r2, r3
 8017e28:	4b59      	ldr	r3, [pc, #356]	; (8017f90 <tcp_receive+0xb08>)
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	441a      	add	r2, r3
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017e36:	4b55      	ldr	r3, [pc, #340]	; (8017f8c <tcp_receive+0xb04>)
 8017e38:	881b      	ldrh	r3, [r3, #0]
 8017e3a:	429a      	cmp	r2, r3
 8017e3c:	d206      	bcs.n	8017e4c <tcp_receive+0x9c4>
 8017e3e:	4b56      	ldr	r3, [pc, #344]	; (8017f98 <tcp_receive+0xb10>)
 8017e40:	f240 6207 	movw	r2, #1543	; 0x607
 8017e44:	4957      	ldr	r1, [pc, #348]	; (8017fa4 <tcp_receive+0xb1c>)
 8017e46:	4856      	ldr	r0, [pc, #344]	; (8017fa0 <tcp_receive+0xb18>)
 8017e48:	f006 ff8a 	bl	801ed60 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017e50:	4b4e      	ldr	r3, [pc, #312]	; (8017f8c <tcp_receive+0xb04>)
 8017e52:	881b      	ldrh	r3, [r3, #0]
 8017e54:	1ad3      	subs	r3, r2, r3
 8017e56:	b29a      	uxth	r2, r3
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8017e5c:	6878      	ldr	r0, [r7, #4]
 8017e5e:	f7fc fe97 	bl	8014b90 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8017e62:	4b4c      	ldr	r3, [pc, #304]	; (8017f94 <tcp_receive+0xb0c>)
 8017e64:	685b      	ldr	r3, [r3, #4]
 8017e66:	891b      	ldrh	r3, [r3, #8]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d006      	beq.n	8017e7a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8017e6c:	4b49      	ldr	r3, [pc, #292]	; (8017f94 <tcp_receive+0xb0c>)
 8017e6e:	685b      	ldr	r3, [r3, #4]
 8017e70:	4a4d      	ldr	r2, [pc, #308]	; (8017fa8 <tcp_receive+0xb20>)
 8017e72:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8017e74:	4b47      	ldr	r3, [pc, #284]	; (8017f94 <tcp_receive+0xb0c>)
 8017e76:	2200      	movs	r2, #0
 8017e78:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017e7a:	4b46      	ldr	r3, [pc, #280]	; (8017f94 <tcp_receive+0xb0c>)
 8017e7c:	68db      	ldr	r3, [r3, #12]
 8017e7e:	899b      	ldrh	r3, [r3, #12]
 8017e80:	b29b      	uxth	r3, r3
 8017e82:	4618      	mov	r0, r3
 8017e84:	f7fa fb48 	bl	8012518 <lwip_htons>
 8017e88:	4603      	mov	r3, r0
 8017e8a:	b2db      	uxtb	r3, r3
 8017e8c:	f003 0301 	and.w	r3, r3, #1
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	f000 80b8 	beq.w	8018006 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8017e96:	4b45      	ldr	r3, [pc, #276]	; (8017fac <tcp_receive+0xb24>)
 8017e98:	781b      	ldrb	r3, [r3, #0]
 8017e9a:	f043 0320 	orr.w	r3, r3, #32
 8017e9e:	b2da      	uxtb	r2, r3
 8017ea0:	4b42      	ldr	r3, [pc, #264]	; (8017fac <tcp_receive+0xb24>)
 8017ea2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8017ea4:	e0af      	b.n	8018006 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017eaa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017eb0:	68db      	ldr	r3, [r3, #12]
 8017eb2:	685b      	ldr	r3, [r3, #4]
 8017eb4:	4a36      	ldr	r2, [pc, #216]	; (8017f90 <tcp_receive+0xb08>)
 8017eb6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8017eb8:	68bb      	ldr	r3, [r7, #8]
 8017eba:	891b      	ldrh	r3, [r3, #8]
 8017ebc:	461c      	mov	r4, r3
 8017ebe:	68bb      	ldr	r3, [r7, #8]
 8017ec0:	68db      	ldr	r3, [r3, #12]
 8017ec2:	899b      	ldrh	r3, [r3, #12]
 8017ec4:	b29b      	uxth	r3, r3
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	f7fa fb26 	bl	8012518 <lwip_htons>
 8017ecc:	4603      	mov	r3, r0
 8017ece:	b2db      	uxtb	r3, r3
 8017ed0:	f003 0303 	and.w	r3, r3, #3
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d001      	beq.n	8017edc <tcp_receive+0xa54>
 8017ed8:	2301      	movs	r3, #1
 8017eda:	e000      	b.n	8017ede <tcp_receive+0xa56>
 8017edc:	2300      	movs	r3, #0
 8017ede:	191a      	adds	r2, r3, r4
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ee4:	441a      	add	r2, r3
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017eee:	461c      	mov	r4, r3
 8017ef0:	68bb      	ldr	r3, [r7, #8]
 8017ef2:	891b      	ldrh	r3, [r3, #8]
 8017ef4:	461d      	mov	r5, r3
 8017ef6:	68bb      	ldr	r3, [r7, #8]
 8017ef8:	68db      	ldr	r3, [r3, #12]
 8017efa:	899b      	ldrh	r3, [r3, #12]
 8017efc:	b29b      	uxth	r3, r3
 8017efe:	4618      	mov	r0, r3
 8017f00:	f7fa fb0a 	bl	8012518 <lwip_htons>
 8017f04:	4603      	mov	r3, r0
 8017f06:	b2db      	uxtb	r3, r3
 8017f08:	f003 0303 	and.w	r3, r3, #3
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d001      	beq.n	8017f14 <tcp_receive+0xa8c>
 8017f10:	2301      	movs	r3, #1
 8017f12:	e000      	b.n	8017f16 <tcp_receive+0xa8e>
 8017f14:	2300      	movs	r3, #0
 8017f16:	442b      	add	r3, r5
 8017f18:	429c      	cmp	r4, r3
 8017f1a:	d206      	bcs.n	8017f2a <tcp_receive+0xaa2>
 8017f1c:	4b1e      	ldr	r3, [pc, #120]	; (8017f98 <tcp_receive+0xb10>)
 8017f1e:	f240 622b 	movw	r2, #1579	; 0x62b
 8017f22:	4923      	ldr	r1, [pc, #140]	; (8017fb0 <tcp_receive+0xb28>)
 8017f24:	481e      	ldr	r0, [pc, #120]	; (8017fa0 <tcp_receive+0xb18>)
 8017f26:	f006 ff1b 	bl	801ed60 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8017f2a:	68bb      	ldr	r3, [r7, #8]
 8017f2c:	891b      	ldrh	r3, [r3, #8]
 8017f2e:	461c      	mov	r4, r3
 8017f30:	68bb      	ldr	r3, [r7, #8]
 8017f32:	68db      	ldr	r3, [r3, #12]
 8017f34:	899b      	ldrh	r3, [r3, #12]
 8017f36:	b29b      	uxth	r3, r3
 8017f38:	4618      	mov	r0, r3
 8017f3a:	f7fa faed 	bl	8012518 <lwip_htons>
 8017f3e:	4603      	mov	r3, r0
 8017f40:	b2db      	uxtb	r3, r3
 8017f42:	f003 0303 	and.w	r3, r3, #3
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d001      	beq.n	8017f4e <tcp_receive+0xac6>
 8017f4a:	2301      	movs	r3, #1
 8017f4c:	e000      	b.n	8017f50 <tcp_receive+0xac8>
 8017f4e:	2300      	movs	r3, #0
 8017f50:	1919      	adds	r1, r3, r4
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017f56:	b28b      	uxth	r3, r1
 8017f58:	1ad3      	subs	r3, r2, r3
 8017f5a:	b29a      	uxth	r2, r3
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8017f60:	6878      	ldr	r0, [r7, #4]
 8017f62:	f7fc fe15 	bl	8014b90 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8017f66:	68bb      	ldr	r3, [r7, #8]
 8017f68:	685b      	ldr	r3, [r3, #4]
 8017f6a:	891b      	ldrh	r3, [r3, #8]
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d028      	beq.n	8017fc2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8017f70:	4b0d      	ldr	r3, [pc, #52]	; (8017fa8 <tcp_receive+0xb20>)
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d01d      	beq.n	8017fb4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8017f78:	4b0b      	ldr	r3, [pc, #44]	; (8017fa8 <tcp_receive+0xb20>)
 8017f7a:	681a      	ldr	r2, [r3, #0]
 8017f7c:	68bb      	ldr	r3, [r7, #8]
 8017f7e:	685b      	ldr	r3, [r3, #4]
 8017f80:	4619      	mov	r1, r3
 8017f82:	4610      	mov	r0, r2
 8017f84:	f7fb ff52 	bl	8013e2c <pbuf_cat>
 8017f88:	e018      	b.n	8017fbc <tcp_receive+0xb34>
 8017f8a:	bf00      	nop
 8017f8c:	20004786 	.word	0x20004786
 8017f90:	2000477c 	.word	0x2000477c
 8017f94:	2000475c 	.word	0x2000475c
 8017f98:	08024430 	.word	0x08024430
 8017f9c:	08024810 	.word	0x08024810
 8017fa0:	0802447c 	.word	0x0802447c
 8017fa4:	0802484c 	.word	0x0802484c
 8017fa8:	2000478c 	.word	0x2000478c
 8017fac:	20004789 	.word	0x20004789
 8017fb0:	0802486c 	.word	0x0802486c
            } else {
              recv_data = cseg->p;
 8017fb4:	68bb      	ldr	r3, [r7, #8]
 8017fb6:	685b      	ldr	r3, [r3, #4]
 8017fb8:	4a70      	ldr	r2, [pc, #448]	; (801817c <tcp_receive+0xcf4>)
 8017fba:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8017fbc:	68bb      	ldr	r3, [r7, #8]
 8017fbe:	2200      	movs	r2, #0
 8017fc0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017fc2:	68bb      	ldr	r3, [r7, #8]
 8017fc4:	68db      	ldr	r3, [r3, #12]
 8017fc6:	899b      	ldrh	r3, [r3, #12]
 8017fc8:	b29b      	uxth	r3, r3
 8017fca:	4618      	mov	r0, r3
 8017fcc:	f7fa faa4 	bl	8012518 <lwip_htons>
 8017fd0:	4603      	mov	r3, r0
 8017fd2:	b2db      	uxtb	r3, r3
 8017fd4:	f003 0301 	and.w	r3, r3, #1
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d00d      	beq.n	8017ff8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8017fdc:	4b68      	ldr	r3, [pc, #416]	; (8018180 <tcp_receive+0xcf8>)
 8017fde:	781b      	ldrb	r3, [r3, #0]
 8017fe0:	f043 0320 	orr.w	r3, r3, #32
 8017fe4:	b2da      	uxtb	r2, r3
 8017fe6:	4b66      	ldr	r3, [pc, #408]	; (8018180 <tcp_receive+0xcf8>)
 8017fe8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	7d1b      	ldrb	r3, [r3, #20]
 8017fee:	2b04      	cmp	r3, #4
 8017ff0:	d102      	bne.n	8017ff8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	2207      	movs	r2, #7
 8017ff6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8017ff8:	68bb      	ldr	r3, [r7, #8]
 8017ffa:	681a      	ldr	r2, [r3, #0]
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8018000:	68b8      	ldr	r0, [r7, #8]
 8018002:	f7fd faea 	bl	80155da <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801800a:	2b00      	cmp	r3, #0
 801800c:	d008      	beq.n	8018020 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018012:	68db      	ldr	r3, [r3, #12]
 8018014:	685a      	ldr	r2, [r3, #4]
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801801a:	429a      	cmp	r2, r3
 801801c:	f43f af43 	beq.w	8017ea6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	8b5b      	ldrh	r3, [r3, #26]
 8018024:	f003 0301 	and.w	r3, r3, #1
 8018028:	2b00      	cmp	r3, #0
 801802a:	d00e      	beq.n	801804a <tcp_receive+0xbc2>
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	8b5b      	ldrh	r3, [r3, #26]
 8018030:	f023 0301 	bic.w	r3, r3, #1
 8018034:	b29a      	uxth	r2, r3
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	835a      	strh	r2, [r3, #26]
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	8b5b      	ldrh	r3, [r3, #26]
 801803e:	f043 0302 	orr.w	r3, r3, #2
 8018042:	b29a      	uxth	r2, r3
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018048:	e188      	b.n	801835c <tcp_receive+0xed4>
        tcp_ack(pcb);
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	8b5b      	ldrh	r3, [r3, #26]
 801804e:	f043 0301 	orr.w	r3, r3, #1
 8018052:	b29a      	uxth	r2, r3
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018058:	e180      	b.n	801835c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801805e:	2b00      	cmp	r3, #0
 8018060:	d106      	bne.n	8018070 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8018062:	4848      	ldr	r0, [pc, #288]	; (8018184 <tcp_receive+0xcfc>)
 8018064:	f7fd faf0 	bl	8015648 <tcp_seg_copy>
 8018068:	4602      	mov	r2, r0
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	675a      	str	r2, [r3, #116]	; 0x74
 801806e:	e16d      	b.n	801834c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8018070:	2300      	movs	r3, #0
 8018072:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018078:	63bb      	str	r3, [r7, #56]	; 0x38
 801807a:	e157      	b.n	801832c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801807c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801807e:	68db      	ldr	r3, [r3, #12]
 8018080:	685a      	ldr	r2, [r3, #4]
 8018082:	4b41      	ldr	r3, [pc, #260]	; (8018188 <tcp_receive+0xd00>)
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	429a      	cmp	r2, r3
 8018088:	d11d      	bne.n	80180c6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801808a:	4b3e      	ldr	r3, [pc, #248]	; (8018184 <tcp_receive+0xcfc>)
 801808c:	891a      	ldrh	r2, [r3, #8]
 801808e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018090:	891b      	ldrh	r3, [r3, #8]
 8018092:	429a      	cmp	r2, r3
 8018094:	f240 814f 	bls.w	8018336 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018098:	483a      	ldr	r0, [pc, #232]	; (8018184 <tcp_receive+0xcfc>)
 801809a:	f7fd fad5 	bl	8015648 <tcp_seg_copy>
 801809e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80180a0:	697b      	ldr	r3, [r7, #20]
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	f000 8149 	beq.w	801833a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80180a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d003      	beq.n	80180b6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80180ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180b0:	697a      	ldr	r2, [r7, #20]
 80180b2:	601a      	str	r2, [r3, #0]
 80180b4:	e002      	b.n	80180bc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	697a      	ldr	r2, [r7, #20]
 80180ba:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80180bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80180be:	6978      	ldr	r0, [r7, #20]
 80180c0:	f7ff f8de 	bl	8017280 <tcp_oos_insert_segment>
                }
                break;
 80180c4:	e139      	b.n	801833a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80180c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d117      	bne.n	80180fc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80180cc:	4b2e      	ldr	r3, [pc, #184]	; (8018188 <tcp_receive+0xd00>)
 80180ce:	681a      	ldr	r2, [r3, #0]
 80180d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180d2:	68db      	ldr	r3, [r3, #12]
 80180d4:	685b      	ldr	r3, [r3, #4]
 80180d6:	1ad3      	subs	r3, r2, r3
 80180d8:	2b00      	cmp	r3, #0
 80180da:	da57      	bge.n	801818c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80180dc:	4829      	ldr	r0, [pc, #164]	; (8018184 <tcp_receive+0xcfc>)
 80180de:	f7fd fab3 	bl	8015648 <tcp_seg_copy>
 80180e2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80180e4:	69bb      	ldr	r3, [r7, #24]
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	f000 8129 	beq.w	801833e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	69ba      	ldr	r2, [r7, #24]
 80180f0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80180f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80180f4:	69b8      	ldr	r0, [r7, #24]
 80180f6:	f7ff f8c3 	bl	8017280 <tcp_oos_insert_segment>
                  }
                  break;
 80180fa:	e120      	b.n	801833e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80180fc:	4b22      	ldr	r3, [pc, #136]	; (8018188 <tcp_receive+0xd00>)
 80180fe:	681a      	ldr	r2, [r3, #0]
 8018100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018102:	68db      	ldr	r3, [r3, #12]
 8018104:	685b      	ldr	r3, [r3, #4]
 8018106:	1ad3      	subs	r3, r2, r3
 8018108:	3b01      	subs	r3, #1
 801810a:	2b00      	cmp	r3, #0
 801810c:	db3e      	blt.n	801818c <tcp_receive+0xd04>
 801810e:	4b1e      	ldr	r3, [pc, #120]	; (8018188 <tcp_receive+0xd00>)
 8018110:	681a      	ldr	r2, [r3, #0]
 8018112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018114:	68db      	ldr	r3, [r3, #12]
 8018116:	685b      	ldr	r3, [r3, #4]
 8018118:	1ad3      	subs	r3, r2, r3
 801811a:	3301      	adds	r3, #1
 801811c:	2b00      	cmp	r3, #0
 801811e:	dc35      	bgt.n	801818c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018120:	4818      	ldr	r0, [pc, #96]	; (8018184 <tcp_receive+0xcfc>)
 8018122:	f7fd fa91 	bl	8015648 <tcp_seg_copy>
 8018126:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8018128:	69fb      	ldr	r3, [r7, #28]
 801812a:	2b00      	cmp	r3, #0
 801812c:	f000 8109 	beq.w	8018342 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018132:	68db      	ldr	r3, [r3, #12]
 8018134:	685b      	ldr	r3, [r3, #4]
 8018136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018138:	8912      	ldrh	r2, [r2, #8]
 801813a:	441a      	add	r2, r3
 801813c:	4b12      	ldr	r3, [pc, #72]	; (8018188 <tcp_receive+0xd00>)
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	1ad3      	subs	r3, r2, r3
 8018142:	2b00      	cmp	r3, #0
 8018144:	dd12      	ble.n	801816c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018146:	4b10      	ldr	r3, [pc, #64]	; (8018188 <tcp_receive+0xd00>)
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	b29a      	uxth	r2, r3
 801814c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801814e:	68db      	ldr	r3, [r3, #12]
 8018150:	685b      	ldr	r3, [r3, #4]
 8018152:	b29b      	uxth	r3, r3
 8018154:	1ad3      	subs	r3, r2, r3
 8018156:	b29a      	uxth	r2, r3
 8018158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801815a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801815c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801815e:	685a      	ldr	r2, [r3, #4]
 8018160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018162:	891b      	ldrh	r3, [r3, #8]
 8018164:	4619      	mov	r1, r3
 8018166:	4610      	mov	r0, r2
 8018168:	f7fb fc0c 	bl	8013984 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801816c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801816e:	69fa      	ldr	r2, [r7, #28]
 8018170:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8018172:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018174:	69f8      	ldr	r0, [r7, #28]
 8018176:	f7ff f883 	bl	8017280 <tcp_oos_insert_segment>
                  }
                  break;
 801817a:	e0e2      	b.n	8018342 <tcp_receive+0xeba>
 801817c:	2000478c 	.word	0x2000478c
 8018180:	20004789 	.word	0x20004789
 8018184:	2000475c 	.word	0x2000475c
 8018188:	2000477c 	.word	0x2000477c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801818c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801818e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8018190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	2b00      	cmp	r3, #0
 8018196:	f040 80c6 	bne.w	8018326 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801819a:	4b80      	ldr	r3, [pc, #512]	; (801839c <tcp_receive+0xf14>)
 801819c:	681a      	ldr	r2, [r3, #0]
 801819e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181a0:	68db      	ldr	r3, [r3, #12]
 80181a2:	685b      	ldr	r3, [r3, #4]
 80181a4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	f340 80bd 	ble.w	8018326 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80181ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181ae:	68db      	ldr	r3, [r3, #12]
 80181b0:	899b      	ldrh	r3, [r3, #12]
 80181b2:	b29b      	uxth	r3, r3
 80181b4:	4618      	mov	r0, r3
 80181b6:	f7fa f9af 	bl	8012518 <lwip_htons>
 80181ba:	4603      	mov	r3, r0
 80181bc:	b2db      	uxtb	r3, r3
 80181be:	f003 0301 	and.w	r3, r3, #1
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	f040 80bf 	bne.w	8018346 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80181c8:	4875      	ldr	r0, [pc, #468]	; (80183a0 <tcp_receive+0xf18>)
 80181ca:	f7fd fa3d 	bl	8015648 <tcp_seg_copy>
 80181ce:	4602      	mov	r2, r0
 80181d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181d2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80181d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	f000 80b6 	beq.w	801834a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80181de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181e0:	68db      	ldr	r3, [r3, #12]
 80181e2:	685b      	ldr	r3, [r3, #4]
 80181e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80181e6:	8912      	ldrh	r2, [r2, #8]
 80181e8:	441a      	add	r2, r3
 80181ea:	4b6c      	ldr	r3, [pc, #432]	; (801839c <tcp_receive+0xf14>)
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	1ad3      	subs	r3, r2, r3
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	dd12      	ble.n	801821a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80181f4:	4b69      	ldr	r3, [pc, #420]	; (801839c <tcp_receive+0xf14>)
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	b29a      	uxth	r2, r3
 80181fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181fc:	68db      	ldr	r3, [r3, #12]
 80181fe:	685b      	ldr	r3, [r3, #4]
 8018200:	b29b      	uxth	r3, r3
 8018202:	1ad3      	subs	r3, r2, r3
 8018204:	b29a      	uxth	r2, r3
 8018206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018208:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801820c:	685a      	ldr	r2, [r3, #4]
 801820e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018210:	891b      	ldrh	r3, [r3, #8]
 8018212:	4619      	mov	r1, r3
 8018214:	4610      	mov	r0, r2
 8018216:	f7fb fbb5 	bl	8013984 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801821a:	4b62      	ldr	r3, [pc, #392]	; (80183a4 <tcp_receive+0xf1c>)
 801821c:	881b      	ldrh	r3, [r3, #0]
 801821e:	461a      	mov	r2, r3
 8018220:	4b5e      	ldr	r3, [pc, #376]	; (801839c <tcp_receive+0xf14>)
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	441a      	add	r2, r3
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801822a:	6879      	ldr	r1, [r7, #4]
 801822c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801822e:	440b      	add	r3, r1
 8018230:	1ad3      	subs	r3, r2, r3
 8018232:	2b00      	cmp	r3, #0
 8018234:	f340 8089 	ble.w	801834a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801823a:	681b      	ldr	r3, [r3, #0]
 801823c:	68db      	ldr	r3, [r3, #12]
 801823e:	899b      	ldrh	r3, [r3, #12]
 8018240:	b29b      	uxth	r3, r3
 8018242:	4618      	mov	r0, r3
 8018244:	f7fa f968 	bl	8012518 <lwip_htons>
 8018248:	4603      	mov	r3, r0
 801824a:	b2db      	uxtb	r3, r3
 801824c:	f003 0301 	and.w	r3, r3, #1
 8018250:	2b00      	cmp	r3, #0
 8018252:	d022      	beq.n	801829a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8018254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	68db      	ldr	r3, [r3, #12]
 801825a:	899b      	ldrh	r3, [r3, #12]
 801825c:	b29b      	uxth	r3, r3
 801825e:	b21b      	sxth	r3, r3
 8018260:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018264:	b21c      	sxth	r4, r3
 8018266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	68db      	ldr	r3, [r3, #12]
 801826c:	899b      	ldrh	r3, [r3, #12]
 801826e:	b29b      	uxth	r3, r3
 8018270:	4618      	mov	r0, r3
 8018272:	f7fa f951 	bl	8012518 <lwip_htons>
 8018276:	4603      	mov	r3, r0
 8018278:	b2db      	uxtb	r3, r3
 801827a:	b29b      	uxth	r3, r3
 801827c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8018280:	b29b      	uxth	r3, r3
 8018282:	4618      	mov	r0, r3
 8018284:	f7fa f948 	bl	8012518 <lwip_htons>
 8018288:	4603      	mov	r3, r0
 801828a:	b21b      	sxth	r3, r3
 801828c:	4323      	orrs	r3, r4
 801828e:	b21a      	sxth	r2, r3
 8018290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018292:	681b      	ldr	r3, [r3, #0]
 8018294:	68db      	ldr	r3, [r3, #12]
 8018296:	b292      	uxth	r2, r2
 8018298:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801829e:	b29a      	uxth	r2, r3
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80182a4:	4413      	add	r3, r2
 80182a6:	b299      	uxth	r1, r3
 80182a8:	4b3c      	ldr	r3, [pc, #240]	; (801839c <tcp_receive+0xf14>)
 80182aa:	681b      	ldr	r3, [r3, #0]
 80182ac:	b29a      	uxth	r2, r3
 80182ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	1a8a      	subs	r2, r1, r2
 80182b4:	b292      	uxth	r2, r2
 80182b6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80182b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	685a      	ldr	r2, [r3, #4]
 80182be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	891b      	ldrh	r3, [r3, #8]
 80182c4:	4619      	mov	r1, r3
 80182c6:	4610      	mov	r0, r2
 80182c8:	f7fb fb5c 	bl	8013984 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80182cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	891c      	ldrh	r4, [r3, #8]
 80182d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	68db      	ldr	r3, [r3, #12]
 80182d8:	899b      	ldrh	r3, [r3, #12]
 80182da:	b29b      	uxth	r3, r3
 80182dc:	4618      	mov	r0, r3
 80182de:	f7fa f91b 	bl	8012518 <lwip_htons>
 80182e2:	4603      	mov	r3, r0
 80182e4:	b2db      	uxtb	r3, r3
 80182e6:	f003 0303 	and.w	r3, r3, #3
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d001      	beq.n	80182f2 <tcp_receive+0xe6a>
 80182ee:	2301      	movs	r3, #1
 80182f0:	e000      	b.n	80182f4 <tcp_receive+0xe6c>
 80182f2:	2300      	movs	r3, #0
 80182f4:	4423      	add	r3, r4
 80182f6:	b29a      	uxth	r2, r3
 80182f8:	4b2a      	ldr	r3, [pc, #168]	; (80183a4 <tcp_receive+0xf1c>)
 80182fa:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80182fc:	4b29      	ldr	r3, [pc, #164]	; (80183a4 <tcp_receive+0xf1c>)
 80182fe:	881b      	ldrh	r3, [r3, #0]
 8018300:	461a      	mov	r2, r3
 8018302:	4b26      	ldr	r3, [pc, #152]	; (801839c <tcp_receive+0xf14>)
 8018304:	681b      	ldr	r3, [r3, #0]
 8018306:	441a      	add	r2, r3
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801830c:	6879      	ldr	r1, [r7, #4]
 801830e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018310:	440b      	add	r3, r1
 8018312:	429a      	cmp	r2, r3
 8018314:	d019      	beq.n	801834a <tcp_receive+0xec2>
 8018316:	4b24      	ldr	r3, [pc, #144]	; (80183a8 <tcp_receive+0xf20>)
 8018318:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801831c:	4923      	ldr	r1, [pc, #140]	; (80183ac <tcp_receive+0xf24>)
 801831e:	4824      	ldr	r0, [pc, #144]	; (80183b0 <tcp_receive+0xf28>)
 8018320:	f006 fd1e 	bl	801ed60 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8018324:	e011      	b.n	801834a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	63bb      	str	r3, [r7, #56]	; 0x38
 801832c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801832e:	2b00      	cmp	r3, #0
 8018330:	f47f aea4 	bne.w	801807c <tcp_receive+0xbf4>
 8018334:	e00a      	b.n	801834c <tcp_receive+0xec4>
                break;
 8018336:	bf00      	nop
 8018338:	e008      	b.n	801834c <tcp_receive+0xec4>
                break;
 801833a:	bf00      	nop
 801833c:	e006      	b.n	801834c <tcp_receive+0xec4>
                  break;
 801833e:	bf00      	nop
 8018340:	e004      	b.n	801834c <tcp_receive+0xec4>
                  break;
 8018342:	bf00      	nop
 8018344:	e002      	b.n	801834c <tcp_receive+0xec4>
                  break;
 8018346:	bf00      	nop
 8018348:	e000      	b.n	801834c <tcp_receive+0xec4>
                break;
 801834a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801834c:	6878      	ldr	r0, [r7, #4]
 801834e:	f001 fe8b 	bl	801a068 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8018352:	e003      	b.n	801835c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8018354:	6878      	ldr	r0, [r7, #4]
 8018356:	f001 fe87 	bl	801a068 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801835a:	e01a      	b.n	8018392 <tcp_receive+0xf0a>
 801835c:	e019      	b.n	8018392 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801835e:	4b0f      	ldr	r3, [pc, #60]	; (801839c <tcp_receive+0xf14>)
 8018360:	681a      	ldr	r2, [r3, #0]
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018366:	1ad3      	subs	r3, r2, r3
 8018368:	2b00      	cmp	r3, #0
 801836a:	db0a      	blt.n	8018382 <tcp_receive+0xefa>
 801836c:	4b0b      	ldr	r3, [pc, #44]	; (801839c <tcp_receive+0xf14>)
 801836e:	681a      	ldr	r2, [r3, #0]
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018374:	6879      	ldr	r1, [r7, #4]
 8018376:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018378:	440b      	add	r3, r1
 801837a:	1ad3      	subs	r3, r2, r3
 801837c:	3301      	adds	r3, #1
 801837e:	2b00      	cmp	r3, #0
 8018380:	dd07      	ble.n	8018392 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	8b5b      	ldrh	r3, [r3, #26]
 8018386:	f043 0302 	orr.w	r3, r3, #2
 801838a:	b29a      	uxth	r2, r3
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8018390:	e7ff      	b.n	8018392 <tcp_receive+0xf0a>
 8018392:	bf00      	nop
 8018394:	3750      	adds	r7, #80	; 0x50
 8018396:	46bd      	mov	sp, r7
 8018398:	bdb0      	pop	{r4, r5, r7, pc}
 801839a:	bf00      	nop
 801839c:	2000477c 	.word	0x2000477c
 80183a0:	2000475c 	.word	0x2000475c
 80183a4:	20004786 	.word	0x20004786
 80183a8:	08024430 	.word	0x08024430
 80183ac:	080247d8 	.word	0x080247d8
 80183b0:	0802447c 	.word	0x0802447c

080183b4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80183b4:	b480      	push	{r7}
 80183b6:	b083      	sub	sp, #12
 80183b8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80183ba:	4b15      	ldr	r3, [pc, #84]	; (8018410 <tcp_get_next_optbyte+0x5c>)
 80183bc:	881b      	ldrh	r3, [r3, #0]
 80183be:	1c5a      	adds	r2, r3, #1
 80183c0:	b291      	uxth	r1, r2
 80183c2:	4a13      	ldr	r2, [pc, #76]	; (8018410 <tcp_get_next_optbyte+0x5c>)
 80183c4:	8011      	strh	r1, [r2, #0]
 80183c6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80183c8:	4b12      	ldr	r3, [pc, #72]	; (8018414 <tcp_get_next_optbyte+0x60>)
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d004      	beq.n	80183da <tcp_get_next_optbyte+0x26>
 80183d0:	4b11      	ldr	r3, [pc, #68]	; (8018418 <tcp_get_next_optbyte+0x64>)
 80183d2:	881b      	ldrh	r3, [r3, #0]
 80183d4:	88fa      	ldrh	r2, [r7, #6]
 80183d6:	429a      	cmp	r2, r3
 80183d8:	d208      	bcs.n	80183ec <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80183da:	4b10      	ldr	r3, [pc, #64]	; (801841c <tcp_get_next_optbyte+0x68>)
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	3314      	adds	r3, #20
 80183e0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80183e2:	88fb      	ldrh	r3, [r7, #6]
 80183e4:	683a      	ldr	r2, [r7, #0]
 80183e6:	4413      	add	r3, r2
 80183e8:	781b      	ldrb	r3, [r3, #0]
 80183ea:	e00b      	b.n	8018404 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80183ec:	88fb      	ldrh	r3, [r7, #6]
 80183ee:	b2da      	uxtb	r2, r3
 80183f0:	4b09      	ldr	r3, [pc, #36]	; (8018418 <tcp_get_next_optbyte+0x64>)
 80183f2:	881b      	ldrh	r3, [r3, #0]
 80183f4:	b2db      	uxtb	r3, r3
 80183f6:	1ad3      	subs	r3, r2, r3
 80183f8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80183fa:	4b06      	ldr	r3, [pc, #24]	; (8018414 <tcp_get_next_optbyte+0x60>)
 80183fc:	681a      	ldr	r2, [r3, #0]
 80183fe:	797b      	ldrb	r3, [r7, #5]
 8018400:	4413      	add	r3, r2
 8018402:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018404:	4618      	mov	r0, r3
 8018406:	370c      	adds	r7, #12
 8018408:	46bd      	mov	sp, r7
 801840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801840e:	4770      	bx	lr
 8018410:	20004778 	.word	0x20004778
 8018414:	20004774 	.word	0x20004774
 8018418:	20004772 	.word	0x20004772
 801841c:	2000476c 	.word	0x2000476c

08018420 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8018420:	b580      	push	{r7, lr}
 8018422:	b084      	sub	sp, #16
 8018424:	af00      	add	r7, sp, #0
 8018426:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d106      	bne.n	801843c <tcp_parseopt+0x1c>
 801842e:	4b32      	ldr	r3, [pc, #200]	; (80184f8 <tcp_parseopt+0xd8>)
 8018430:	f240 727d 	movw	r2, #1917	; 0x77d
 8018434:	4931      	ldr	r1, [pc, #196]	; (80184fc <tcp_parseopt+0xdc>)
 8018436:	4832      	ldr	r0, [pc, #200]	; (8018500 <tcp_parseopt+0xe0>)
 8018438:	f006 fc92 	bl	801ed60 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801843c:	4b31      	ldr	r3, [pc, #196]	; (8018504 <tcp_parseopt+0xe4>)
 801843e:	881b      	ldrh	r3, [r3, #0]
 8018440:	2b00      	cmp	r3, #0
 8018442:	d055      	beq.n	80184f0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018444:	4b30      	ldr	r3, [pc, #192]	; (8018508 <tcp_parseopt+0xe8>)
 8018446:	2200      	movs	r2, #0
 8018448:	801a      	strh	r2, [r3, #0]
 801844a:	e045      	b.n	80184d8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801844c:	f7ff ffb2 	bl	80183b4 <tcp_get_next_optbyte>
 8018450:	4603      	mov	r3, r0
 8018452:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8018454:	7bfb      	ldrb	r3, [r7, #15]
 8018456:	2b02      	cmp	r3, #2
 8018458:	d006      	beq.n	8018468 <tcp_parseopt+0x48>
 801845a:	2b02      	cmp	r3, #2
 801845c:	dc2b      	bgt.n	80184b6 <tcp_parseopt+0x96>
 801845e:	2b00      	cmp	r3, #0
 8018460:	d041      	beq.n	80184e6 <tcp_parseopt+0xc6>
 8018462:	2b01      	cmp	r3, #1
 8018464:	d127      	bne.n	80184b6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8018466:	e037      	b.n	80184d8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8018468:	f7ff ffa4 	bl	80183b4 <tcp_get_next_optbyte>
 801846c:	4603      	mov	r3, r0
 801846e:	2b04      	cmp	r3, #4
 8018470:	d13b      	bne.n	80184ea <tcp_parseopt+0xca>
 8018472:	4b25      	ldr	r3, [pc, #148]	; (8018508 <tcp_parseopt+0xe8>)
 8018474:	881b      	ldrh	r3, [r3, #0]
 8018476:	3301      	adds	r3, #1
 8018478:	4a22      	ldr	r2, [pc, #136]	; (8018504 <tcp_parseopt+0xe4>)
 801847a:	8812      	ldrh	r2, [r2, #0]
 801847c:	4293      	cmp	r3, r2
 801847e:	da34      	bge.n	80184ea <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018480:	f7ff ff98 	bl	80183b4 <tcp_get_next_optbyte>
 8018484:	4603      	mov	r3, r0
 8018486:	b29b      	uxth	r3, r3
 8018488:	021b      	lsls	r3, r3, #8
 801848a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801848c:	f7ff ff92 	bl	80183b4 <tcp_get_next_optbyte>
 8018490:	4603      	mov	r3, r0
 8018492:	b29a      	uxth	r2, r3
 8018494:	89bb      	ldrh	r3, [r7, #12]
 8018496:	4313      	orrs	r3, r2
 8018498:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801849a:	89bb      	ldrh	r3, [r7, #12]
 801849c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80184a0:	d804      	bhi.n	80184ac <tcp_parseopt+0x8c>
 80184a2:	89bb      	ldrh	r3, [r7, #12]
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d001      	beq.n	80184ac <tcp_parseopt+0x8c>
 80184a8:	89ba      	ldrh	r2, [r7, #12]
 80184aa:	e001      	b.n	80184b0 <tcp_parseopt+0x90>
 80184ac:	f44f 7206 	mov.w	r2, #536	; 0x218
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80184b4:	e010      	b.n	80184d8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80184b6:	f7ff ff7d 	bl	80183b4 <tcp_get_next_optbyte>
 80184ba:	4603      	mov	r3, r0
 80184bc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80184be:	7afb      	ldrb	r3, [r7, #11]
 80184c0:	2b01      	cmp	r3, #1
 80184c2:	d914      	bls.n	80184ee <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80184c4:	7afb      	ldrb	r3, [r7, #11]
 80184c6:	b29a      	uxth	r2, r3
 80184c8:	4b0f      	ldr	r3, [pc, #60]	; (8018508 <tcp_parseopt+0xe8>)
 80184ca:	881b      	ldrh	r3, [r3, #0]
 80184cc:	4413      	add	r3, r2
 80184ce:	b29b      	uxth	r3, r3
 80184d0:	3b02      	subs	r3, #2
 80184d2:	b29a      	uxth	r2, r3
 80184d4:	4b0c      	ldr	r3, [pc, #48]	; (8018508 <tcp_parseopt+0xe8>)
 80184d6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80184d8:	4b0b      	ldr	r3, [pc, #44]	; (8018508 <tcp_parseopt+0xe8>)
 80184da:	881a      	ldrh	r2, [r3, #0]
 80184dc:	4b09      	ldr	r3, [pc, #36]	; (8018504 <tcp_parseopt+0xe4>)
 80184de:	881b      	ldrh	r3, [r3, #0]
 80184e0:	429a      	cmp	r2, r3
 80184e2:	d3b3      	bcc.n	801844c <tcp_parseopt+0x2c>
 80184e4:	e004      	b.n	80184f0 <tcp_parseopt+0xd0>
          return;
 80184e6:	bf00      	nop
 80184e8:	e002      	b.n	80184f0 <tcp_parseopt+0xd0>
            return;
 80184ea:	bf00      	nop
 80184ec:	e000      	b.n	80184f0 <tcp_parseopt+0xd0>
            return;
 80184ee:	bf00      	nop
      }
    }
  }
}
 80184f0:	3710      	adds	r7, #16
 80184f2:	46bd      	mov	sp, r7
 80184f4:	bd80      	pop	{r7, pc}
 80184f6:	bf00      	nop
 80184f8:	08024430 	.word	0x08024430
 80184fc:	08024894 	.word	0x08024894
 8018500:	0802447c 	.word	0x0802447c
 8018504:	20004770 	.word	0x20004770
 8018508:	20004778 	.word	0x20004778

0801850c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801850c:	b480      	push	{r7}
 801850e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8018510:	4b05      	ldr	r3, [pc, #20]	; (8018528 <tcp_trigger_input_pcb_close+0x1c>)
 8018512:	781b      	ldrb	r3, [r3, #0]
 8018514:	f043 0310 	orr.w	r3, r3, #16
 8018518:	b2da      	uxtb	r2, r3
 801851a:	4b03      	ldr	r3, [pc, #12]	; (8018528 <tcp_trigger_input_pcb_close+0x1c>)
 801851c:	701a      	strb	r2, [r3, #0]
}
 801851e:	bf00      	nop
 8018520:	46bd      	mov	sp, r7
 8018522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018526:	4770      	bx	lr
 8018528:	20004789 	.word	0x20004789

0801852c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801852c:	b580      	push	{r7, lr}
 801852e:	b084      	sub	sp, #16
 8018530:	af00      	add	r7, sp, #0
 8018532:	60f8      	str	r0, [r7, #12]
 8018534:	60b9      	str	r1, [r7, #8]
 8018536:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	2b00      	cmp	r3, #0
 801853c:	d00a      	beq.n	8018554 <tcp_route+0x28>
 801853e:	68fb      	ldr	r3, [r7, #12]
 8018540:	7a1b      	ldrb	r3, [r3, #8]
 8018542:	2b00      	cmp	r3, #0
 8018544:	d006      	beq.n	8018554 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	7a1b      	ldrb	r3, [r3, #8]
 801854a:	4618      	mov	r0, r3
 801854c:	f7fb f812 	bl	8013574 <netif_get_by_index>
 8018550:	4603      	mov	r3, r0
 8018552:	e003      	b.n	801855c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8018554:	6878      	ldr	r0, [r7, #4]
 8018556:	f003 fe35 	bl	801c1c4 <ip4_route>
 801855a:	4603      	mov	r3, r0
  }
}
 801855c:	4618      	mov	r0, r3
 801855e:	3710      	adds	r7, #16
 8018560:	46bd      	mov	sp, r7
 8018562:	bd80      	pop	{r7, pc}

08018564 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8018564:	b590      	push	{r4, r7, lr}
 8018566:	b087      	sub	sp, #28
 8018568:	af00      	add	r7, sp, #0
 801856a:	60f8      	str	r0, [r7, #12]
 801856c:	60b9      	str	r1, [r7, #8]
 801856e:	603b      	str	r3, [r7, #0]
 8018570:	4613      	mov	r3, r2
 8018572:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8018574:	68fb      	ldr	r3, [r7, #12]
 8018576:	2b00      	cmp	r3, #0
 8018578:	d105      	bne.n	8018586 <tcp_create_segment+0x22>
 801857a:	4b44      	ldr	r3, [pc, #272]	; (801868c <tcp_create_segment+0x128>)
 801857c:	22a3      	movs	r2, #163	; 0xa3
 801857e:	4944      	ldr	r1, [pc, #272]	; (8018690 <tcp_create_segment+0x12c>)
 8018580:	4844      	ldr	r0, [pc, #272]	; (8018694 <tcp_create_segment+0x130>)
 8018582:	f006 fbed 	bl	801ed60 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8018586:	68bb      	ldr	r3, [r7, #8]
 8018588:	2b00      	cmp	r3, #0
 801858a:	d105      	bne.n	8018598 <tcp_create_segment+0x34>
 801858c:	4b3f      	ldr	r3, [pc, #252]	; (801868c <tcp_create_segment+0x128>)
 801858e:	22a4      	movs	r2, #164	; 0xa4
 8018590:	4941      	ldr	r1, [pc, #260]	; (8018698 <tcp_create_segment+0x134>)
 8018592:	4840      	ldr	r0, [pc, #256]	; (8018694 <tcp_create_segment+0x130>)
 8018594:	f006 fbe4 	bl	801ed60 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018598:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801859c:	009b      	lsls	r3, r3, #2
 801859e:	b2db      	uxtb	r3, r3
 80185a0:	f003 0304 	and.w	r3, r3, #4
 80185a4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80185a6:	2003      	movs	r0, #3
 80185a8:	f7fa fca2 	bl	8012ef0 <memp_malloc>
 80185ac:	6138      	str	r0, [r7, #16]
 80185ae:	693b      	ldr	r3, [r7, #16]
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d104      	bne.n	80185be <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80185b4:	68b8      	ldr	r0, [r7, #8]
 80185b6:	f7fb fb6b 	bl	8013c90 <pbuf_free>
    return NULL;
 80185ba:	2300      	movs	r3, #0
 80185bc:	e061      	b.n	8018682 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80185be:	693b      	ldr	r3, [r7, #16]
 80185c0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80185c4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80185c6:	693b      	ldr	r3, [r7, #16]
 80185c8:	2200      	movs	r2, #0
 80185ca:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80185cc:	693b      	ldr	r3, [r7, #16]
 80185ce:	68ba      	ldr	r2, [r7, #8]
 80185d0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80185d2:	68bb      	ldr	r3, [r7, #8]
 80185d4:	891a      	ldrh	r2, [r3, #8]
 80185d6:	7dfb      	ldrb	r3, [r7, #23]
 80185d8:	b29b      	uxth	r3, r3
 80185da:	429a      	cmp	r2, r3
 80185dc:	d205      	bcs.n	80185ea <tcp_create_segment+0x86>
 80185de:	4b2b      	ldr	r3, [pc, #172]	; (801868c <tcp_create_segment+0x128>)
 80185e0:	22b0      	movs	r2, #176	; 0xb0
 80185e2:	492e      	ldr	r1, [pc, #184]	; (801869c <tcp_create_segment+0x138>)
 80185e4:	482b      	ldr	r0, [pc, #172]	; (8018694 <tcp_create_segment+0x130>)
 80185e6:	f006 fbbb 	bl	801ed60 <iprintf>
  seg->len = p->tot_len - optlen;
 80185ea:	68bb      	ldr	r3, [r7, #8]
 80185ec:	891a      	ldrh	r2, [r3, #8]
 80185ee:	7dfb      	ldrb	r3, [r7, #23]
 80185f0:	b29b      	uxth	r3, r3
 80185f2:	1ad3      	subs	r3, r2, r3
 80185f4:	b29a      	uxth	r2, r3
 80185f6:	693b      	ldr	r3, [r7, #16]
 80185f8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80185fa:	2114      	movs	r1, #20
 80185fc:	68b8      	ldr	r0, [r7, #8]
 80185fe:	f7fb fab1 	bl	8013b64 <pbuf_add_header>
 8018602:	4603      	mov	r3, r0
 8018604:	2b00      	cmp	r3, #0
 8018606:	d004      	beq.n	8018612 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018608:	6938      	ldr	r0, [r7, #16]
 801860a:	f7fc ffe6 	bl	80155da <tcp_seg_free>
    return NULL;
 801860e:	2300      	movs	r3, #0
 8018610:	e037      	b.n	8018682 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8018612:	693b      	ldr	r3, [r7, #16]
 8018614:	685b      	ldr	r3, [r3, #4]
 8018616:	685a      	ldr	r2, [r3, #4]
 8018618:	693b      	ldr	r3, [r7, #16]
 801861a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	8ada      	ldrh	r2, [r3, #22]
 8018620:	693b      	ldr	r3, [r7, #16]
 8018622:	68dc      	ldr	r4, [r3, #12]
 8018624:	4610      	mov	r0, r2
 8018626:	f7f9 ff77 	bl	8012518 <lwip_htons>
 801862a:	4603      	mov	r3, r0
 801862c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	8b1a      	ldrh	r2, [r3, #24]
 8018632:	693b      	ldr	r3, [r7, #16]
 8018634:	68dc      	ldr	r4, [r3, #12]
 8018636:	4610      	mov	r0, r2
 8018638:	f7f9 ff6e 	bl	8012518 <lwip_htons>
 801863c:	4603      	mov	r3, r0
 801863e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8018640:	693b      	ldr	r3, [r7, #16]
 8018642:	68dc      	ldr	r4, [r3, #12]
 8018644:	6838      	ldr	r0, [r7, #0]
 8018646:	f7f9 ff7c 	bl	8012542 <lwip_htonl>
 801864a:	4603      	mov	r3, r0
 801864c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801864e:	7dfb      	ldrb	r3, [r7, #23]
 8018650:	089b      	lsrs	r3, r3, #2
 8018652:	b2db      	uxtb	r3, r3
 8018654:	b29b      	uxth	r3, r3
 8018656:	3305      	adds	r3, #5
 8018658:	b29b      	uxth	r3, r3
 801865a:	031b      	lsls	r3, r3, #12
 801865c:	b29a      	uxth	r2, r3
 801865e:	79fb      	ldrb	r3, [r7, #7]
 8018660:	b29b      	uxth	r3, r3
 8018662:	4313      	orrs	r3, r2
 8018664:	b29a      	uxth	r2, r3
 8018666:	693b      	ldr	r3, [r7, #16]
 8018668:	68dc      	ldr	r4, [r3, #12]
 801866a:	4610      	mov	r0, r2
 801866c:	f7f9 ff54 	bl	8012518 <lwip_htons>
 8018670:	4603      	mov	r3, r0
 8018672:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8018674:	693b      	ldr	r3, [r7, #16]
 8018676:	68db      	ldr	r3, [r3, #12]
 8018678:	2200      	movs	r2, #0
 801867a:	749a      	strb	r2, [r3, #18]
 801867c:	2200      	movs	r2, #0
 801867e:	74da      	strb	r2, [r3, #19]
  return seg;
 8018680:	693b      	ldr	r3, [r7, #16]
}
 8018682:	4618      	mov	r0, r3
 8018684:	371c      	adds	r7, #28
 8018686:	46bd      	mov	sp, r7
 8018688:	bd90      	pop	{r4, r7, pc}
 801868a:	bf00      	nop
 801868c:	080248b0 	.word	0x080248b0
 8018690:	080248e4 	.word	0x080248e4
 8018694:	08024904 	.word	0x08024904
 8018698:	0802492c 	.word	0x0802492c
 801869c:	08024950 	.word	0x08024950

080186a0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80186a0:	b580      	push	{r7, lr}
 80186a2:	b086      	sub	sp, #24
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	607b      	str	r3, [r7, #4]
 80186a8:	4603      	mov	r3, r0
 80186aa:	73fb      	strb	r3, [r7, #15]
 80186ac:	460b      	mov	r3, r1
 80186ae:	81bb      	strh	r3, [r7, #12]
 80186b0:	4613      	mov	r3, r2
 80186b2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80186b4:	89bb      	ldrh	r3, [r7, #12]
 80186b6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d105      	bne.n	80186ca <tcp_pbuf_prealloc+0x2a>
 80186be:	4b30      	ldr	r3, [pc, #192]	; (8018780 <tcp_pbuf_prealloc+0xe0>)
 80186c0:	22e8      	movs	r2, #232	; 0xe8
 80186c2:	4930      	ldr	r1, [pc, #192]	; (8018784 <tcp_pbuf_prealloc+0xe4>)
 80186c4:	4830      	ldr	r0, [pc, #192]	; (8018788 <tcp_pbuf_prealloc+0xe8>)
 80186c6:	f006 fb4b 	bl	801ed60 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80186ca:	6a3b      	ldr	r3, [r7, #32]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d105      	bne.n	80186dc <tcp_pbuf_prealloc+0x3c>
 80186d0:	4b2b      	ldr	r3, [pc, #172]	; (8018780 <tcp_pbuf_prealloc+0xe0>)
 80186d2:	22e9      	movs	r2, #233	; 0xe9
 80186d4:	492d      	ldr	r1, [pc, #180]	; (801878c <tcp_pbuf_prealloc+0xec>)
 80186d6:	482c      	ldr	r0, [pc, #176]	; (8018788 <tcp_pbuf_prealloc+0xe8>)
 80186d8:	f006 fb42 	bl	801ed60 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80186dc:	89ba      	ldrh	r2, [r7, #12]
 80186de:	897b      	ldrh	r3, [r7, #10]
 80186e0:	429a      	cmp	r2, r3
 80186e2:	d221      	bcs.n	8018728 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80186e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80186e8:	f003 0302 	and.w	r3, r3, #2
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d111      	bne.n	8018714 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80186f0:	6a3b      	ldr	r3, [r7, #32]
 80186f2:	8b5b      	ldrh	r3, [r3, #26]
 80186f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d115      	bne.n	8018728 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80186fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018700:	2b00      	cmp	r3, #0
 8018702:	d007      	beq.n	8018714 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8018704:	6a3b      	ldr	r3, [r7, #32]
 8018706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8018708:	2b00      	cmp	r3, #0
 801870a:	d103      	bne.n	8018714 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801870c:	6a3b      	ldr	r3, [r7, #32]
 801870e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8018710:	2b00      	cmp	r3, #0
 8018712:	d009      	beq.n	8018728 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8018714:	89bb      	ldrh	r3, [r7, #12]
 8018716:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801871a:	f023 0203 	bic.w	r2, r3, #3
 801871e:	897b      	ldrh	r3, [r7, #10]
 8018720:	4293      	cmp	r3, r2
 8018722:	bf28      	it	cs
 8018724:	4613      	movcs	r3, r2
 8018726:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8018728:	8af9      	ldrh	r1, [r7, #22]
 801872a:	7bfb      	ldrb	r3, [r7, #15]
 801872c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018730:	4618      	mov	r0, r3
 8018732:	f7fa ffc9 	bl	80136c8 <pbuf_alloc>
 8018736:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018738:	693b      	ldr	r3, [r7, #16]
 801873a:	2b00      	cmp	r3, #0
 801873c:	d101      	bne.n	8018742 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801873e:	2300      	movs	r3, #0
 8018740:	e019      	b.n	8018776 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8018742:	693b      	ldr	r3, [r7, #16]
 8018744:	681b      	ldr	r3, [r3, #0]
 8018746:	2b00      	cmp	r3, #0
 8018748:	d006      	beq.n	8018758 <tcp_pbuf_prealloc+0xb8>
 801874a:	4b0d      	ldr	r3, [pc, #52]	; (8018780 <tcp_pbuf_prealloc+0xe0>)
 801874c:	f240 120b 	movw	r2, #267	; 0x10b
 8018750:	490f      	ldr	r1, [pc, #60]	; (8018790 <tcp_pbuf_prealloc+0xf0>)
 8018752:	480d      	ldr	r0, [pc, #52]	; (8018788 <tcp_pbuf_prealloc+0xe8>)
 8018754:	f006 fb04 	bl	801ed60 <iprintf>
  *oversize = p->len - length;
 8018758:	693b      	ldr	r3, [r7, #16]
 801875a:	895a      	ldrh	r2, [r3, #10]
 801875c:	89bb      	ldrh	r3, [r7, #12]
 801875e:	1ad3      	subs	r3, r2, r3
 8018760:	b29a      	uxth	r2, r3
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8018766:	693b      	ldr	r3, [r7, #16]
 8018768:	89ba      	ldrh	r2, [r7, #12]
 801876a:	811a      	strh	r2, [r3, #8]
 801876c:	693b      	ldr	r3, [r7, #16]
 801876e:	891a      	ldrh	r2, [r3, #8]
 8018770:	693b      	ldr	r3, [r7, #16]
 8018772:	815a      	strh	r2, [r3, #10]
  return p;
 8018774:	693b      	ldr	r3, [r7, #16]
}
 8018776:	4618      	mov	r0, r3
 8018778:	3718      	adds	r7, #24
 801877a:	46bd      	mov	sp, r7
 801877c:	bd80      	pop	{r7, pc}
 801877e:	bf00      	nop
 8018780:	080248b0 	.word	0x080248b0
 8018784:	08024968 	.word	0x08024968
 8018788:	08024904 	.word	0x08024904
 801878c:	0802498c 	.word	0x0802498c
 8018790:	080249ac 	.word	0x080249ac

08018794 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8018794:	b580      	push	{r7, lr}
 8018796:	b082      	sub	sp, #8
 8018798:	af00      	add	r7, sp, #0
 801879a:	6078      	str	r0, [r7, #4]
 801879c:	460b      	mov	r3, r1
 801879e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	d106      	bne.n	80187b4 <tcp_write_checks+0x20>
 80187a6:	4b33      	ldr	r3, [pc, #204]	; (8018874 <tcp_write_checks+0xe0>)
 80187a8:	f240 1233 	movw	r2, #307	; 0x133
 80187ac:	4932      	ldr	r1, [pc, #200]	; (8018878 <tcp_write_checks+0xe4>)
 80187ae:	4833      	ldr	r0, [pc, #204]	; (801887c <tcp_write_checks+0xe8>)
 80187b0:	f006 fad6 	bl	801ed60 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	7d1b      	ldrb	r3, [r3, #20]
 80187b8:	2b04      	cmp	r3, #4
 80187ba:	d00e      	beq.n	80187da <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80187c0:	2b07      	cmp	r3, #7
 80187c2:	d00a      	beq.n	80187da <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80187c8:	2b02      	cmp	r3, #2
 80187ca:	d006      	beq.n	80187da <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80187d0:	2b03      	cmp	r3, #3
 80187d2:	d002      	beq.n	80187da <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80187d4:	f06f 030a 	mvn.w	r3, #10
 80187d8:	e048      	b.n	801886c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80187da:	887b      	ldrh	r3, [r7, #2]
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d101      	bne.n	80187e4 <tcp_write_checks+0x50>
    return ERR_OK;
 80187e0:	2300      	movs	r3, #0
 80187e2:	e043      	b.n	801886c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80187ea:	887a      	ldrh	r2, [r7, #2]
 80187ec:	429a      	cmp	r2, r3
 80187ee:	d909      	bls.n	8018804 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	8b5b      	ldrh	r3, [r3, #26]
 80187f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80187f8:	b29a      	uxth	r2, r3
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80187fe:	f04f 33ff 	mov.w	r3, #4294967295
 8018802:	e033      	b.n	801886c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801880a:	2b08      	cmp	r3, #8
 801880c:	d909      	bls.n	8018822 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	8b5b      	ldrh	r3, [r3, #26]
 8018812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018816:	b29a      	uxth	r2, r3
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801881c:	f04f 33ff 	mov.w	r3, #4294967295
 8018820:	e024      	b.n	801886c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018828:	2b00      	cmp	r3, #0
 801882a:	d00f      	beq.n	801884c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018830:	2b00      	cmp	r3, #0
 8018832:	d11a      	bne.n	801886a <tcp_write_checks+0xd6>
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018838:	2b00      	cmp	r3, #0
 801883a:	d116      	bne.n	801886a <tcp_write_checks+0xd6>
 801883c:	4b0d      	ldr	r3, [pc, #52]	; (8018874 <tcp_write_checks+0xe0>)
 801883e:	f240 1255 	movw	r2, #341	; 0x155
 8018842:	490f      	ldr	r1, [pc, #60]	; (8018880 <tcp_write_checks+0xec>)
 8018844:	480d      	ldr	r0, [pc, #52]	; (801887c <tcp_write_checks+0xe8>)
 8018846:	f006 fa8b 	bl	801ed60 <iprintf>
 801884a:	e00e      	b.n	801886a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018850:	2b00      	cmp	r3, #0
 8018852:	d103      	bne.n	801885c <tcp_write_checks+0xc8>
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018858:	2b00      	cmp	r3, #0
 801885a:	d006      	beq.n	801886a <tcp_write_checks+0xd6>
 801885c:	4b05      	ldr	r3, [pc, #20]	; (8018874 <tcp_write_checks+0xe0>)
 801885e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8018862:	4908      	ldr	r1, [pc, #32]	; (8018884 <tcp_write_checks+0xf0>)
 8018864:	4805      	ldr	r0, [pc, #20]	; (801887c <tcp_write_checks+0xe8>)
 8018866:	f006 fa7b 	bl	801ed60 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801886a:	2300      	movs	r3, #0
}
 801886c:	4618      	mov	r0, r3
 801886e:	3708      	adds	r7, #8
 8018870:	46bd      	mov	sp, r7
 8018872:	bd80      	pop	{r7, pc}
 8018874:	080248b0 	.word	0x080248b0
 8018878:	080249c0 	.word	0x080249c0
 801887c:	08024904 	.word	0x08024904
 8018880:	080249e0 	.word	0x080249e0
 8018884:	08024a1c 	.word	0x08024a1c

08018888 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8018888:	b590      	push	{r4, r7, lr}
 801888a:	b09b      	sub	sp, #108	; 0x6c
 801888c:	af04      	add	r7, sp, #16
 801888e:	60f8      	str	r0, [r7, #12]
 8018890:	60b9      	str	r1, [r7, #8]
 8018892:	4611      	mov	r1, r2
 8018894:	461a      	mov	r2, r3
 8018896:	460b      	mov	r3, r1
 8018898:	80fb      	strh	r3, [r7, #6]
 801889a:	4613      	mov	r3, r2
 801889c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801889e:	2300      	movs	r3, #0
 80188a0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80188a2:	2300      	movs	r3, #0
 80188a4:	653b      	str	r3, [r7, #80]	; 0x50
 80188a6:	2300      	movs	r3, #0
 80188a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80188aa:	2300      	movs	r3, #0
 80188ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80188ae:	2300      	movs	r3, #0
 80188b0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80188b2:	2300      	movs	r3, #0
 80188b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80188b8:	2300      	movs	r3, #0
 80188ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80188be:	2300      	movs	r3, #0
 80188c0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80188c2:	2300      	movs	r3, #0
 80188c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80188c6:	2300      	movs	r3, #0
 80188c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80188ca:	68fb      	ldr	r3, [r7, #12]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d109      	bne.n	80188e4 <tcp_write+0x5c>
 80188d0:	4ba4      	ldr	r3, [pc, #656]	; (8018b64 <tcp_write+0x2dc>)
 80188d2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80188d6:	49a4      	ldr	r1, [pc, #656]	; (8018b68 <tcp_write+0x2e0>)
 80188d8:	48a4      	ldr	r0, [pc, #656]	; (8018b6c <tcp_write+0x2e4>)
 80188da:	f006 fa41 	bl	801ed60 <iprintf>
 80188de:	f06f 030f 	mvn.w	r3, #15
 80188e2:	e32a      	b.n	8018f3a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80188e4:	68fb      	ldr	r3, [r7, #12]
 80188e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80188ea:	085b      	lsrs	r3, r3, #1
 80188ec:	b29a      	uxth	r2, r3
 80188ee:	68fb      	ldr	r3, [r7, #12]
 80188f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80188f2:	4293      	cmp	r3, r2
 80188f4:	bf28      	it	cs
 80188f6:	4613      	movcs	r3, r2
 80188f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80188fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d102      	bne.n	8018906 <tcp_write+0x7e>
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018904:	e000      	b.n	8018908 <tcp_write+0x80>
 8018906:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018908:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801890a:	68bb      	ldr	r3, [r7, #8]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d109      	bne.n	8018924 <tcp_write+0x9c>
 8018910:	4b94      	ldr	r3, [pc, #592]	; (8018b64 <tcp_write+0x2dc>)
 8018912:	f240 12ad 	movw	r2, #429	; 0x1ad
 8018916:	4996      	ldr	r1, [pc, #600]	; (8018b70 <tcp_write+0x2e8>)
 8018918:	4894      	ldr	r0, [pc, #592]	; (8018b6c <tcp_write+0x2e4>)
 801891a:	f006 fa21 	bl	801ed60 <iprintf>
 801891e:	f06f 030f 	mvn.w	r3, #15
 8018922:	e30a      	b.n	8018f3a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8018924:	88fb      	ldrh	r3, [r7, #6]
 8018926:	4619      	mov	r1, r3
 8018928:	68f8      	ldr	r0, [r7, #12]
 801892a:	f7ff ff33 	bl	8018794 <tcp_write_checks>
 801892e:	4603      	mov	r3, r0
 8018930:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8018934:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8018938:	2b00      	cmp	r3, #0
 801893a:	d002      	beq.n	8018942 <tcp_write+0xba>
    return err;
 801893c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8018940:	e2fb      	b.n	8018f3a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018948:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801894c:	2300      	movs	r3, #0
 801894e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8018952:	68fb      	ldr	r3, [r7, #12]
 8018954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018956:	2b00      	cmp	r3, #0
 8018958:	f000 80f6 	beq.w	8018b48 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801895c:	68fb      	ldr	r3, [r7, #12]
 801895e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018960:	653b      	str	r3, [r7, #80]	; 0x50
 8018962:	e002      	b.n	801896a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8018964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801896a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d1f8      	bne.n	8018964 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8018972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018974:	7a9b      	ldrb	r3, [r3, #10]
 8018976:	009b      	lsls	r3, r3, #2
 8018978:	b29b      	uxth	r3, r3
 801897a:	f003 0304 	and.w	r3, r3, #4
 801897e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8018980:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018984:	891b      	ldrh	r3, [r3, #8]
 8018986:	4619      	mov	r1, r3
 8018988:	8c3b      	ldrh	r3, [r7, #32]
 801898a:	440b      	add	r3, r1
 801898c:	429a      	cmp	r2, r3
 801898e:	da06      	bge.n	801899e <tcp_write+0x116>
 8018990:	4b74      	ldr	r3, [pc, #464]	; (8018b64 <tcp_write+0x2dc>)
 8018992:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8018996:	4977      	ldr	r1, [pc, #476]	; (8018b74 <tcp_write+0x2ec>)
 8018998:	4874      	ldr	r0, [pc, #464]	; (8018b6c <tcp_write+0x2e4>)
 801899a:	f006 f9e1 	bl	801ed60 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801899e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80189a0:	891a      	ldrh	r2, [r3, #8]
 80189a2:	8c3b      	ldrh	r3, [r7, #32]
 80189a4:	4413      	add	r3, r2
 80189a6:	b29b      	uxth	r3, r3
 80189a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80189aa:	1ad3      	subs	r3, r2, r3
 80189ac:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80189ae:	68fb      	ldr	r3, [r7, #12]
 80189b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80189b4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80189b6:	8a7b      	ldrh	r3, [r7, #18]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d026      	beq.n	8018a0a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80189bc:	8a7b      	ldrh	r3, [r7, #18]
 80189be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80189c0:	429a      	cmp	r2, r3
 80189c2:	d206      	bcs.n	80189d2 <tcp_write+0x14a>
 80189c4:	4b67      	ldr	r3, [pc, #412]	; (8018b64 <tcp_write+0x2dc>)
 80189c6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80189ca:	496b      	ldr	r1, [pc, #428]	; (8018b78 <tcp_write+0x2f0>)
 80189cc:	4867      	ldr	r0, [pc, #412]	; (8018b6c <tcp_write+0x2e4>)
 80189ce:	f006 f9c7 	bl	801ed60 <iprintf>
      seg = last_unsent;
 80189d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80189d4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80189d6:	8a7b      	ldrh	r3, [r7, #18]
 80189d8:	88fa      	ldrh	r2, [r7, #6]
 80189da:	4293      	cmp	r3, r2
 80189dc:	bf28      	it	cs
 80189de:	4613      	movcs	r3, r2
 80189e0:	b29b      	uxth	r3, r3
 80189e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80189e4:	4293      	cmp	r3, r2
 80189e6:	bf28      	it	cs
 80189e8:	4613      	movcs	r3, r2
 80189ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80189ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80189f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80189f2:	4413      	add	r3, r2
 80189f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80189f8:	8a7a      	ldrh	r2, [r7, #18]
 80189fa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80189fc:	1ad3      	subs	r3, r2, r3
 80189fe:	b29b      	uxth	r3, r3
 8018a00:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8018a02:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018a04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018a06:	1ad3      	subs	r3, r2, r3
 8018a08:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8018a0a:	8a7b      	ldrh	r3, [r7, #18]
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d00b      	beq.n	8018a28 <tcp_write+0x1a0>
 8018a10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018a14:	88fb      	ldrh	r3, [r7, #6]
 8018a16:	429a      	cmp	r2, r3
 8018a18:	d006      	beq.n	8018a28 <tcp_write+0x1a0>
 8018a1a:	4b52      	ldr	r3, [pc, #328]	; (8018b64 <tcp_write+0x2dc>)
 8018a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018a20:	4956      	ldr	r1, [pc, #344]	; (8018b7c <tcp_write+0x2f4>)
 8018a22:	4852      	ldr	r0, [pc, #328]	; (8018b6c <tcp_write+0x2e4>)
 8018a24:	f006 f99c 	bl	801ed60 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8018a28:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018a2c:	88fb      	ldrh	r3, [r7, #6]
 8018a2e:	429a      	cmp	r2, r3
 8018a30:	f080 8167 	bcs.w	8018d02 <tcp_write+0x47a>
 8018a34:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	f000 8163 	beq.w	8018d02 <tcp_write+0x47a>
 8018a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018a3e:	891b      	ldrh	r3, [r3, #8]
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	f000 815e 	beq.w	8018d02 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8018a46:	88fa      	ldrh	r2, [r7, #6]
 8018a48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018a4c:	1ad2      	subs	r2, r2, r3
 8018a4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018a50:	4293      	cmp	r3, r2
 8018a52:	bfa8      	it	ge
 8018a54:	4613      	movge	r3, r2
 8018a56:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8018a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018a5a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8018a5c:	797b      	ldrb	r3, [r7, #5]
 8018a5e:	f003 0301 	and.w	r3, r3, #1
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d027      	beq.n	8018ab6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8018a66:	f107 0012 	add.w	r0, r7, #18
 8018a6a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018a6c:	8bf9      	ldrh	r1, [r7, #30]
 8018a6e:	2301      	movs	r3, #1
 8018a70:	9302      	str	r3, [sp, #8]
 8018a72:	797b      	ldrb	r3, [r7, #5]
 8018a74:	9301      	str	r3, [sp, #4]
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	9300      	str	r3, [sp, #0]
 8018a7a:	4603      	mov	r3, r0
 8018a7c:	2000      	movs	r0, #0
 8018a7e:	f7ff fe0f 	bl	80186a0 <tcp_pbuf_prealloc>
 8018a82:	6578      	str	r0, [r7, #84]	; 0x54
 8018a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	f000 8225 	beq.w	8018ed6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8018a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018a8e:	6858      	ldr	r0, [r3, #4]
 8018a90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018a94:	68ba      	ldr	r2, [r7, #8]
 8018a96:	4413      	add	r3, r2
 8018a98:	8bfa      	ldrh	r2, [r7, #30]
 8018a9a:	4619      	mov	r1, r3
 8018a9c:	f005 feb2 	bl	801e804 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8018aa0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018aa2:	f7fb f983 	bl	8013dac <pbuf_clen>
 8018aa6:	4603      	mov	r3, r0
 8018aa8:	461a      	mov	r2, r3
 8018aaa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018aae:	4413      	add	r3, r2
 8018ab0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8018ab4:	e041      	b.n	8018b3a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8018ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018ab8:	685b      	ldr	r3, [r3, #4]
 8018aba:	637b      	str	r3, [r7, #52]	; 0x34
 8018abc:	e002      	b.n	8018ac4 <tcp_write+0x23c>
 8018abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8018ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d1f8      	bne.n	8018abe <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8018acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ace:	7b1b      	ldrb	r3, [r3, #12]
 8018ad0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d115      	bne.n	8018b04 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8018ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ada:	685b      	ldr	r3, [r3, #4]
 8018adc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018ade:	8952      	ldrh	r2, [r2, #10]
 8018ae0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8018ae2:	68ba      	ldr	r2, [r7, #8]
 8018ae4:	429a      	cmp	r2, r3
 8018ae6:	d10d      	bne.n	8018b04 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8018ae8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d006      	beq.n	8018afe <tcp_write+0x276>
 8018af0:	4b1c      	ldr	r3, [pc, #112]	; (8018b64 <tcp_write+0x2dc>)
 8018af2:	f240 2231 	movw	r2, #561	; 0x231
 8018af6:	4922      	ldr	r1, [pc, #136]	; (8018b80 <tcp_write+0x2f8>)
 8018af8:	481c      	ldr	r0, [pc, #112]	; (8018b6c <tcp_write+0x2e4>)
 8018afa:	f006 f931 	bl	801ed60 <iprintf>
          extendlen = seglen;
 8018afe:	8bfb      	ldrh	r3, [r7, #30]
 8018b00:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8018b02:	e01a      	b.n	8018b3a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8018b04:	8bfb      	ldrh	r3, [r7, #30]
 8018b06:	2201      	movs	r2, #1
 8018b08:	4619      	mov	r1, r3
 8018b0a:	2000      	movs	r0, #0
 8018b0c:	f7fa fddc 	bl	80136c8 <pbuf_alloc>
 8018b10:	6578      	str	r0, [r7, #84]	; 0x54
 8018b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	f000 81e0 	beq.w	8018eda <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8018b1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018b1e:	68ba      	ldr	r2, [r7, #8]
 8018b20:	441a      	add	r2, r3
 8018b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018b24:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8018b26:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018b28:	f7fb f940 	bl	8013dac <pbuf_clen>
 8018b2c:	4603      	mov	r3, r0
 8018b2e:	461a      	mov	r2, r3
 8018b30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018b34:	4413      	add	r3, r2
 8018b36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8018b3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018b3e:	8bfb      	ldrh	r3, [r7, #30]
 8018b40:	4413      	add	r3, r2
 8018b42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8018b46:	e0dc      	b.n	8018d02 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	f000 80d7 	beq.w	8018d02 <tcp_write+0x47a>
 8018b54:	4b03      	ldr	r3, [pc, #12]	; (8018b64 <tcp_write+0x2dc>)
 8018b56:	f240 224a 	movw	r2, #586	; 0x24a
 8018b5a:	490a      	ldr	r1, [pc, #40]	; (8018b84 <tcp_write+0x2fc>)
 8018b5c:	4803      	ldr	r0, [pc, #12]	; (8018b6c <tcp_write+0x2e4>)
 8018b5e:	f006 f8ff 	bl	801ed60 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8018b62:	e0ce      	b.n	8018d02 <tcp_write+0x47a>
 8018b64:	080248b0 	.word	0x080248b0
 8018b68:	08024a50 	.word	0x08024a50
 8018b6c:	08024904 	.word	0x08024904
 8018b70:	08024a68 	.word	0x08024a68
 8018b74:	08024a9c 	.word	0x08024a9c
 8018b78:	08024ab4 	.word	0x08024ab4
 8018b7c:	08024ad4 	.word	0x08024ad4
 8018b80:	08024af4 	.word	0x08024af4
 8018b84:	08024b20 	.word	0x08024b20
    struct pbuf *p;
    u16_t left = len - pos;
 8018b88:	88fa      	ldrh	r2, [r7, #6]
 8018b8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018b8e:	1ad3      	subs	r3, r2, r3
 8018b90:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8018b92:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018b96:	b29b      	uxth	r3, r3
 8018b98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018b9a:	1ad3      	subs	r3, r2, r3
 8018b9c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8018b9e:	8b7a      	ldrh	r2, [r7, #26]
 8018ba0:	8bbb      	ldrh	r3, [r7, #28]
 8018ba2:	4293      	cmp	r3, r2
 8018ba4:	bf28      	it	cs
 8018ba6:	4613      	movcs	r3, r2
 8018ba8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8018baa:	797b      	ldrb	r3, [r7, #5]
 8018bac:	f003 0301 	and.w	r3, r3, #1
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d036      	beq.n	8018c22 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8018bb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018bb8:	b29a      	uxth	r2, r3
 8018bba:	8b3b      	ldrh	r3, [r7, #24]
 8018bbc:	4413      	add	r3, r2
 8018bbe:	b299      	uxth	r1, r3
 8018bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	bf0c      	ite	eq
 8018bc6:	2301      	moveq	r3, #1
 8018bc8:	2300      	movne	r3, #0
 8018bca:	b2db      	uxtb	r3, r3
 8018bcc:	f107 0012 	add.w	r0, r7, #18
 8018bd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018bd2:	9302      	str	r3, [sp, #8]
 8018bd4:	797b      	ldrb	r3, [r7, #5]
 8018bd6:	9301      	str	r3, [sp, #4]
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	9300      	str	r3, [sp, #0]
 8018bdc:	4603      	mov	r3, r0
 8018bde:	2036      	movs	r0, #54	; 0x36
 8018be0:	f7ff fd5e 	bl	80186a0 <tcp_pbuf_prealloc>
 8018be4:	6338      	str	r0, [r7, #48]	; 0x30
 8018be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	f000 8178 	beq.w	8018ede <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8018bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bf0:	895b      	ldrh	r3, [r3, #10]
 8018bf2:	8b3a      	ldrh	r2, [r7, #24]
 8018bf4:	429a      	cmp	r2, r3
 8018bf6:	d906      	bls.n	8018c06 <tcp_write+0x37e>
 8018bf8:	4b8c      	ldr	r3, [pc, #560]	; (8018e2c <tcp_write+0x5a4>)
 8018bfa:	f240 2266 	movw	r2, #614	; 0x266
 8018bfe:	498c      	ldr	r1, [pc, #560]	; (8018e30 <tcp_write+0x5a8>)
 8018c00:	488c      	ldr	r0, [pc, #560]	; (8018e34 <tcp_write+0x5ac>)
 8018c02:	f006 f8ad 	bl	801ed60 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8018c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c08:	685a      	ldr	r2, [r3, #4]
 8018c0a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018c0e:	18d0      	adds	r0, r2, r3
 8018c10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018c14:	68ba      	ldr	r2, [r7, #8]
 8018c16:	4413      	add	r3, r2
 8018c18:	8b3a      	ldrh	r2, [r7, #24]
 8018c1a:	4619      	mov	r1, r3
 8018c1c:	f005 fdf2 	bl	801e804 <memcpy>
 8018c20:	e02f      	b.n	8018c82 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8018c22:	8a7b      	ldrh	r3, [r7, #18]
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d006      	beq.n	8018c36 <tcp_write+0x3ae>
 8018c28:	4b80      	ldr	r3, [pc, #512]	; (8018e2c <tcp_write+0x5a4>)
 8018c2a:	f240 2271 	movw	r2, #625	; 0x271
 8018c2e:	4982      	ldr	r1, [pc, #520]	; (8018e38 <tcp_write+0x5b0>)
 8018c30:	4880      	ldr	r0, [pc, #512]	; (8018e34 <tcp_write+0x5ac>)
 8018c32:	f006 f895 	bl	801ed60 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8018c36:	8b3b      	ldrh	r3, [r7, #24]
 8018c38:	2201      	movs	r2, #1
 8018c3a:	4619      	mov	r1, r3
 8018c3c:	2036      	movs	r0, #54	; 0x36
 8018c3e:	f7fa fd43 	bl	80136c8 <pbuf_alloc>
 8018c42:	6178      	str	r0, [r7, #20]
 8018c44:	697b      	ldr	r3, [r7, #20]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	f000 814b 	beq.w	8018ee2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8018c4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018c50:	68ba      	ldr	r2, [r7, #8]
 8018c52:	441a      	add	r2, r3
 8018c54:	697b      	ldr	r3, [r7, #20]
 8018c56:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018c58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018c5c:	b29b      	uxth	r3, r3
 8018c5e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018c62:	4619      	mov	r1, r3
 8018c64:	2036      	movs	r0, #54	; 0x36
 8018c66:	f7fa fd2f 	bl	80136c8 <pbuf_alloc>
 8018c6a:	6338      	str	r0, [r7, #48]	; 0x30
 8018c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d103      	bne.n	8018c7a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8018c72:	6978      	ldr	r0, [r7, #20]
 8018c74:	f7fb f80c 	bl	8013c90 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8018c78:	e136      	b.n	8018ee8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8018c7a:	6979      	ldr	r1, [r7, #20]
 8018c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018c7e:	f7fb f8d5 	bl	8013e2c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8018c82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018c84:	f7fb f892 	bl	8013dac <pbuf_clen>
 8018c88:	4603      	mov	r3, r0
 8018c8a:	461a      	mov	r2, r3
 8018c8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018c90:	4413      	add	r3, r2
 8018c92:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8018c96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018c9a:	2b09      	cmp	r3, #9
 8018c9c:	d903      	bls.n	8018ca6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8018c9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018ca0:	f7fa fff6 	bl	8013c90 <pbuf_free>
      goto memerr;
 8018ca4:	e120      	b.n	8018ee8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8018caa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018cae:	441a      	add	r2, r3
 8018cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018cb4:	9300      	str	r3, [sp, #0]
 8018cb6:	4613      	mov	r3, r2
 8018cb8:	2200      	movs	r2, #0
 8018cba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018cbc:	68f8      	ldr	r0, [r7, #12]
 8018cbe:	f7ff fc51 	bl	8018564 <tcp_create_segment>
 8018cc2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8018cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	f000 810d 	beq.w	8018ee6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8018ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d102      	bne.n	8018cd8 <tcp_write+0x450>
      queue = seg;
 8018cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018cd4:	647b      	str	r3, [r7, #68]	; 0x44
 8018cd6:	e00c      	b.n	8018cf2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8018cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d106      	bne.n	8018cec <tcp_write+0x464>
 8018cde:	4b53      	ldr	r3, [pc, #332]	; (8018e2c <tcp_write+0x5a4>)
 8018ce0:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018ce4:	4955      	ldr	r1, [pc, #340]	; (8018e3c <tcp_write+0x5b4>)
 8018ce6:	4853      	ldr	r0, [pc, #332]	; (8018e34 <tcp_write+0x5ac>)
 8018ce8:	f006 f83a 	bl	801ed60 <iprintf>
      prev_seg->next = seg;
 8018cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018cee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018cf0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8018cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018cf4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8018cf6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018cfa:	8b3b      	ldrh	r3, [r7, #24]
 8018cfc:	4413      	add	r3, r2
 8018cfe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8018d02:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018d06:	88fb      	ldrh	r3, [r7, #6]
 8018d08:	429a      	cmp	r2, r3
 8018d0a:	f4ff af3d 	bcc.w	8018b88 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8018d0e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d02c      	beq.n	8018d6e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8018d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d16:	685b      	ldr	r3, [r3, #4]
 8018d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018d1a:	e01e      	b.n	8018d5a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8018d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d1e:	891a      	ldrh	r2, [r3, #8]
 8018d20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018d22:	4413      	add	r3, r2
 8018d24:	b29a      	uxth	r2, r3
 8018d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d28:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8018d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d110      	bne.n	8018d54 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8018d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d34:	685b      	ldr	r3, [r3, #4]
 8018d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018d38:	8952      	ldrh	r2, [r2, #10]
 8018d3a:	4413      	add	r3, r2
 8018d3c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018d3e:	68b9      	ldr	r1, [r7, #8]
 8018d40:	4618      	mov	r0, r3
 8018d42:	f005 fd5f 	bl	801e804 <memcpy>
        p->len += oversize_used;
 8018d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d48:	895a      	ldrh	r2, [r3, #10]
 8018d4a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018d4c:	4413      	add	r3, r2
 8018d4e:	b29a      	uxth	r2, r3
 8018d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d52:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8018d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d1dd      	bne.n	8018d1c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8018d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d62:	891a      	ldrh	r2, [r3, #8]
 8018d64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018d66:	4413      	add	r3, r2
 8018d68:	b29a      	uxth	r2, r3
 8018d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d6c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8018d6e:	8a7a      	ldrh	r2, [r7, #18]
 8018d70:	68fb      	ldr	r3, [r7, #12]
 8018d72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8018d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d018      	beq.n	8018dae <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8018d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d106      	bne.n	8018d90 <tcp_write+0x508>
 8018d82:	4b2a      	ldr	r3, [pc, #168]	; (8018e2c <tcp_write+0x5a4>)
 8018d84:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8018d88:	492d      	ldr	r1, [pc, #180]	; (8018e40 <tcp_write+0x5b8>)
 8018d8a:	482a      	ldr	r0, [pc, #168]	; (8018e34 <tcp_write+0x5ac>)
 8018d8c:	f005 ffe8 	bl	801ed60 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8018d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d92:	685b      	ldr	r3, [r3, #4]
 8018d94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8018d96:	4618      	mov	r0, r3
 8018d98:	f7fb f848 	bl	8013e2c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8018d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d9e:	891a      	ldrh	r2, [r3, #8]
 8018da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018da2:	891b      	ldrh	r3, [r3, #8]
 8018da4:	4413      	add	r3, r2
 8018da6:	b29a      	uxth	r2, r3
 8018da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018daa:	811a      	strh	r2, [r3, #8]
 8018dac:	e037      	b.n	8018e1e <tcp_write+0x596>
  } else if (extendlen > 0) {
 8018dae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	d034      	beq.n	8018e1e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8018db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d003      	beq.n	8018dc2 <tcp_write+0x53a>
 8018dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018dbc:	685b      	ldr	r3, [r3, #4]
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d106      	bne.n	8018dd0 <tcp_write+0x548>
 8018dc2:	4b1a      	ldr	r3, [pc, #104]	; (8018e2c <tcp_write+0x5a4>)
 8018dc4:	f240 22e6 	movw	r2, #742	; 0x2e6
 8018dc8:	491e      	ldr	r1, [pc, #120]	; (8018e44 <tcp_write+0x5bc>)
 8018dca:	481a      	ldr	r0, [pc, #104]	; (8018e34 <tcp_write+0x5ac>)
 8018dcc:	f005 ffc8 	bl	801ed60 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8018dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018dd2:	685b      	ldr	r3, [r3, #4]
 8018dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8018dd6:	e009      	b.n	8018dec <tcp_write+0x564>
      p->tot_len += extendlen;
 8018dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dda:	891a      	ldrh	r2, [r3, #8]
 8018ddc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018dde:	4413      	add	r3, r2
 8018de0:	b29a      	uxth	r2, r3
 8018de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018de4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8018de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8018dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d1f1      	bne.n	8018dd8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8018df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018df6:	891a      	ldrh	r2, [r3, #8]
 8018df8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018dfa:	4413      	add	r3, r2
 8018dfc:	b29a      	uxth	r2, r3
 8018dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e00:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8018e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e04:	895a      	ldrh	r2, [r3, #10]
 8018e06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018e08:	4413      	add	r3, r2
 8018e0a:	b29a      	uxth	r2, r3
 8018e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e0e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8018e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e12:	891a      	ldrh	r2, [r3, #8]
 8018e14:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018e16:	4413      	add	r3, r2
 8018e18:	b29a      	uxth	r2, r3
 8018e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e1c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8018e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d111      	bne.n	8018e48 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018e28:	66da      	str	r2, [r3, #108]	; 0x6c
 8018e2a:	e010      	b.n	8018e4e <tcp_write+0x5c6>
 8018e2c:	080248b0 	.word	0x080248b0
 8018e30:	08024b50 	.word	0x08024b50
 8018e34:	08024904 	.word	0x08024904
 8018e38:	08024b90 	.word	0x08024b90
 8018e3c:	08024ba0 	.word	0x08024ba0
 8018e40:	08024bb4 	.word	0x08024bb4
 8018e44:	08024bec 	.word	0x08024bec
  } else {
    last_unsent->next = queue;
 8018e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018e4c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8018e52:	88fb      	ldrh	r3, [r7, #6]
 8018e54:	441a      	add	r2, r3
 8018e56:	68fb      	ldr	r3, [r7, #12]
 8018e58:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8018e60:	88fb      	ldrh	r3, [r7, #6]
 8018e62:	1ad3      	subs	r3, r2, r3
 8018e64:	b29a      	uxth	r2, r3
 8018e66:	68fb      	ldr	r3, [r7, #12]
 8018e68:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8018e6c:	68fb      	ldr	r3, [r7, #12]
 8018e6e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018e72:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018e76:	68fb      	ldr	r3, [r7, #12]
 8018e78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d00e      	beq.n	8018e9e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d10a      	bne.n	8018e9e <tcp_write+0x616>
 8018e88:	68fb      	ldr	r3, [r7, #12]
 8018e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d106      	bne.n	8018e9e <tcp_write+0x616>
 8018e90:	4b2c      	ldr	r3, [pc, #176]	; (8018f44 <tcp_write+0x6bc>)
 8018e92:	f240 3212 	movw	r2, #786	; 0x312
 8018e96:	492c      	ldr	r1, [pc, #176]	; (8018f48 <tcp_write+0x6c0>)
 8018e98:	482c      	ldr	r0, [pc, #176]	; (8018f4c <tcp_write+0x6c4>)
 8018e9a:	f005 ff61 	bl	801ed60 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8018e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d016      	beq.n	8018ed2 <tcp_write+0x64a>
 8018ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018ea6:	68db      	ldr	r3, [r3, #12]
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d012      	beq.n	8018ed2 <tcp_write+0x64a>
 8018eac:	797b      	ldrb	r3, [r7, #5]
 8018eae:	f003 0302 	and.w	r3, r3, #2
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d10d      	bne.n	8018ed2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8018eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018eb8:	68db      	ldr	r3, [r3, #12]
 8018eba:	899b      	ldrh	r3, [r3, #12]
 8018ebc:	b29c      	uxth	r4, r3
 8018ebe:	2008      	movs	r0, #8
 8018ec0:	f7f9 fb2a 	bl	8012518 <lwip_htons>
 8018ec4:	4603      	mov	r3, r0
 8018ec6:	461a      	mov	r2, r3
 8018ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018eca:	68db      	ldr	r3, [r3, #12]
 8018ecc:	4322      	orrs	r2, r4
 8018ece:	b292      	uxth	r2, r2
 8018ed0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8018ed2:	2300      	movs	r3, #0
 8018ed4:	e031      	b.n	8018f3a <tcp_write+0x6b2>
          goto memerr;
 8018ed6:	bf00      	nop
 8018ed8:	e006      	b.n	8018ee8 <tcp_write+0x660>
            goto memerr;
 8018eda:	bf00      	nop
 8018edc:	e004      	b.n	8018ee8 <tcp_write+0x660>
        goto memerr;
 8018ede:	bf00      	nop
 8018ee0:	e002      	b.n	8018ee8 <tcp_write+0x660>
        goto memerr;
 8018ee2:	bf00      	nop
 8018ee4:	e000      	b.n	8018ee8 <tcp_write+0x660>
      goto memerr;
 8018ee6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018ee8:	68fb      	ldr	r3, [r7, #12]
 8018eea:	8b5b      	ldrh	r3, [r3, #26]
 8018eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018ef0:	b29a      	uxth	r2, r3
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8018ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d002      	beq.n	8018f02 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8018efc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018efe:	f7fa fec7 	bl	8013c90 <pbuf_free>
  }
  if (queue != NULL) {
 8018f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d002      	beq.n	8018f0e <tcp_write+0x686>
    tcp_segs_free(queue);
 8018f08:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8018f0a:	f7fc fb51 	bl	80155b0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8018f0e:	68fb      	ldr	r3, [r7, #12]
 8018f10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d00e      	beq.n	8018f36 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8018f18:	68fb      	ldr	r3, [r7, #12]
 8018f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d10a      	bne.n	8018f36 <tcp_write+0x6ae>
 8018f20:	68fb      	ldr	r3, [r7, #12]
 8018f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d106      	bne.n	8018f36 <tcp_write+0x6ae>
 8018f28:	4b06      	ldr	r3, [pc, #24]	; (8018f44 <tcp_write+0x6bc>)
 8018f2a:	f240 3227 	movw	r2, #807	; 0x327
 8018f2e:	4906      	ldr	r1, [pc, #24]	; (8018f48 <tcp_write+0x6c0>)
 8018f30:	4806      	ldr	r0, [pc, #24]	; (8018f4c <tcp_write+0x6c4>)
 8018f32:	f005 ff15 	bl	801ed60 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8018f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018f3a:	4618      	mov	r0, r3
 8018f3c:	375c      	adds	r7, #92	; 0x5c
 8018f3e:	46bd      	mov	sp, r7
 8018f40:	bd90      	pop	{r4, r7, pc}
 8018f42:	bf00      	nop
 8018f44:	080248b0 	.word	0x080248b0
 8018f48:	08024c24 	.word	0x08024c24
 8018f4c:	08024904 	.word	0x08024904

08018f50 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8018f50:	b590      	push	{r4, r7, lr}
 8018f52:	b08b      	sub	sp, #44	; 0x2c
 8018f54:	af02      	add	r7, sp, #8
 8018f56:	6078      	str	r0, [r7, #4]
 8018f58:	460b      	mov	r3, r1
 8018f5a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8018f5c:	2300      	movs	r3, #0
 8018f5e:	61fb      	str	r3, [r7, #28]
 8018f60:	2300      	movs	r3, #0
 8018f62:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8018f64:	2300      	movs	r3, #0
 8018f66:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d106      	bne.n	8018f7c <tcp_split_unsent_seg+0x2c>
 8018f6e:	4b95      	ldr	r3, [pc, #596]	; (80191c4 <tcp_split_unsent_seg+0x274>)
 8018f70:	f240 324b 	movw	r2, #843	; 0x34b
 8018f74:	4994      	ldr	r1, [pc, #592]	; (80191c8 <tcp_split_unsent_seg+0x278>)
 8018f76:	4895      	ldr	r0, [pc, #596]	; (80191cc <tcp_split_unsent_seg+0x27c>)
 8018f78:	f005 fef2 	bl	801ed60 <iprintf>

  useg = pcb->unsent;
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018f80:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8018f82:	697b      	ldr	r3, [r7, #20]
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d102      	bne.n	8018f8e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8018f88:	f04f 33ff 	mov.w	r3, #4294967295
 8018f8c:	e116      	b.n	80191bc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8018f8e:	887b      	ldrh	r3, [r7, #2]
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d109      	bne.n	8018fa8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8018f94:	4b8b      	ldr	r3, [pc, #556]	; (80191c4 <tcp_split_unsent_seg+0x274>)
 8018f96:	f240 3253 	movw	r2, #851	; 0x353
 8018f9a:	498d      	ldr	r1, [pc, #564]	; (80191d0 <tcp_split_unsent_seg+0x280>)
 8018f9c:	488b      	ldr	r0, [pc, #556]	; (80191cc <tcp_split_unsent_seg+0x27c>)
 8018f9e:	f005 fedf 	bl	801ed60 <iprintf>
    return ERR_VAL;
 8018fa2:	f06f 0305 	mvn.w	r3, #5
 8018fa6:	e109      	b.n	80191bc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8018fa8:	697b      	ldr	r3, [r7, #20]
 8018faa:	891b      	ldrh	r3, [r3, #8]
 8018fac:	887a      	ldrh	r2, [r7, #2]
 8018fae:	429a      	cmp	r2, r3
 8018fb0:	d301      	bcc.n	8018fb6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8018fb2:	2300      	movs	r3, #0
 8018fb4:	e102      	b.n	80191bc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018fba:	887a      	ldrh	r2, [r7, #2]
 8018fbc:	429a      	cmp	r2, r3
 8018fbe:	d906      	bls.n	8018fce <tcp_split_unsent_seg+0x7e>
 8018fc0:	4b80      	ldr	r3, [pc, #512]	; (80191c4 <tcp_split_unsent_seg+0x274>)
 8018fc2:	f240 325b 	movw	r2, #859	; 0x35b
 8018fc6:	4983      	ldr	r1, [pc, #524]	; (80191d4 <tcp_split_unsent_seg+0x284>)
 8018fc8:	4880      	ldr	r0, [pc, #512]	; (80191cc <tcp_split_unsent_seg+0x27c>)
 8018fca:	f005 fec9 	bl	801ed60 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8018fce:	697b      	ldr	r3, [r7, #20]
 8018fd0:	891b      	ldrh	r3, [r3, #8]
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d106      	bne.n	8018fe4 <tcp_split_unsent_seg+0x94>
 8018fd6:	4b7b      	ldr	r3, [pc, #492]	; (80191c4 <tcp_split_unsent_seg+0x274>)
 8018fd8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8018fdc:	497e      	ldr	r1, [pc, #504]	; (80191d8 <tcp_split_unsent_seg+0x288>)
 8018fde:	487b      	ldr	r0, [pc, #492]	; (80191cc <tcp_split_unsent_seg+0x27c>)
 8018fe0:	f005 febe 	bl	801ed60 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8018fe4:	697b      	ldr	r3, [r7, #20]
 8018fe6:	7a9b      	ldrb	r3, [r3, #10]
 8018fe8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8018fea:	7bfb      	ldrb	r3, [r7, #15]
 8018fec:	009b      	lsls	r3, r3, #2
 8018fee:	b2db      	uxtb	r3, r3
 8018ff0:	f003 0304 	and.w	r3, r3, #4
 8018ff4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8018ff6:	697b      	ldr	r3, [r7, #20]
 8018ff8:	891a      	ldrh	r2, [r3, #8]
 8018ffa:	887b      	ldrh	r3, [r7, #2]
 8018ffc:	1ad3      	subs	r3, r2, r3
 8018ffe:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8019000:	7bbb      	ldrb	r3, [r7, #14]
 8019002:	b29a      	uxth	r2, r3
 8019004:	89bb      	ldrh	r3, [r7, #12]
 8019006:	4413      	add	r3, r2
 8019008:	b29b      	uxth	r3, r3
 801900a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801900e:	4619      	mov	r1, r3
 8019010:	2036      	movs	r0, #54	; 0x36
 8019012:	f7fa fb59 	bl	80136c8 <pbuf_alloc>
 8019016:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019018:	693b      	ldr	r3, [r7, #16]
 801901a:	2b00      	cmp	r3, #0
 801901c:	f000 80b7 	beq.w	801918e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8019020:	697b      	ldr	r3, [r7, #20]
 8019022:	685b      	ldr	r3, [r3, #4]
 8019024:	891a      	ldrh	r2, [r3, #8]
 8019026:	697b      	ldr	r3, [r7, #20]
 8019028:	891b      	ldrh	r3, [r3, #8]
 801902a:	1ad3      	subs	r3, r2, r3
 801902c:	b29a      	uxth	r2, r3
 801902e:	887b      	ldrh	r3, [r7, #2]
 8019030:	4413      	add	r3, r2
 8019032:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8019034:	697b      	ldr	r3, [r7, #20]
 8019036:	6858      	ldr	r0, [r3, #4]
 8019038:	693b      	ldr	r3, [r7, #16]
 801903a:	685a      	ldr	r2, [r3, #4]
 801903c:	7bbb      	ldrb	r3, [r7, #14]
 801903e:	18d1      	adds	r1, r2, r3
 8019040:	897b      	ldrh	r3, [r7, #10]
 8019042:	89ba      	ldrh	r2, [r7, #12]
 8019044:	f7fb f82a 	bl	801409c <pbuf_copy_partial>
 8019048:	4603      	mov	r3, r0
 801904a:	461a      	mov	r2, r3
 801904c:	89bb      	ldrh	r3, [r7, #12]
 801904e:	4293      	cmp	r3, r2
 8019050:	f040 809f 	bne.w	8019192 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8019054:	697b      	ldr	r3, [r7, #20]
 8019056:	68db      	ldr	r3, [r3, #12]
 8019058:	899b      	ldrh	r3, [r3, #12]
 801905a:	b29b      	uxth	r3, r3
 801905c:	4618      	mov	r0, r3
 801905e:	f7f9 fa5b 	bl	8012518 <lwip_htons>
 8019062:	4603      	mov	r3, r0
 8019064:	b2db      	uxtb	r3, r3
 8019066:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801906a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801906c:	2300      	movs	r3, #0
 801906e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8019070:	7efb      	ldrb	r3, [r7, #27]
 8019072:	f003 0308 	and.w	r3, r3, #8
 8019076:	2b00      	cmp	r3, #0
 8019078:	d007      	beq.n	801908a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801907a:	7efb      	ldrb	r3, [r7, #27]
 801907c:	f023 0308 	bic.w	r3, r3, #8
 8019080:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8019082:	7ebb      	ldrb	r3, [r7, #26]
 8019084:	f043 0308 	orr.w	r3, r3, #8
 8019088:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801908a:	7efb      	ldrb	r3, [r7, #27]
 801908c:	f003 0301 	and.w	r3, r3, #1
 8019090:	2b00      	cmp	r3, #0
 8019092:	d007      	beq.n	80190a4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8019094:	7efb      	ldrb	r3, [r7, #27]
 8019096:	f023 0301 	bic.w	r3, r3, #1
 801909a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801909c:	7ebb      	ldrb	r3, [r7, #26]
 801909e:	f043 0301 	orr.w	r3, r3, #1
 80190a2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80190a4:	697b      	ldr	r3, [r7, #20]
 80190a6:	68db      	ldr	r3, [r3, #12]
 80190a8:	685b      	ldr	r3, [r3, #4]
 80190aa:	4618      	mov	r0, r3
 80190ac:	f7f9 fa49 	bl	8012542 <lwip_htonl>
 80190b0:	4602      	mov	r2, r0
 80190b2:	887b      	ldrh	r3, [r7, #2]
 80190b4:	18d1      	adds	r1, r2, r3
 80190b6:	7eba      	ldrb	r2, [r7, #26]
 80190b8:	7bfb      	ldrb	r3, [r7, #15]
 80190ba:	9300      	str	r3, [sp, #0]
 80190bc:	460b      	mov	r3, r1
 80190be:	6939      	ldr	r1, [r7, #16]
 80190c0:	6878      	ldr	r0, [r7, #4]
 80190c2:	f7ff fa4f 	bl	8018564 <tcp_create_segment>
 80190c6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80190c8:	69fb      	ldr	r3, [r7, #28]
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d063      	beq.n	8019196 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80190ce:	697b      	ldr	r3, [r7, #20]
 80190d0:	685b      	ldr	r3, [r3, #4]
 80190d2:	4618      	mov	r0, r3
 80190d4:	f7fa fe6a 	bl	8013dac <pbuf_clen>
 80190d8:	4603      	mov	r3, r0
 80190da:	461a      	mov	r2, r3
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80190e2:	1a9b      	subs	r3, r3, r2
 80190e4:	b29a      	uxth	r2, r3
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80190ec:	697b      	ldr	r3, [r7, #20]
 80190ee:	6858      	ldr	r0, [r3, #4]
 80190f0:	697b      	ldr	r3, [r7, #20]
 80190f2:	685b      	ldr	r3, [r3, #4]
 80190f4:	891a      	ldrh	r2, [r3, #8]
 80190f6:	89bb      	ldrh	r3, [r7, #12]
 80190f8:	1ad3      	subs	r3, r2, r3
 80190fa:	b29b      	uxth	r3, r3
 80190fc:	4619      	mov	r1, r3
 80190fe:	f7fa fc41 	bl	8013984 <pbuf_realloc>
  useg->len -= remainder;
 8019102:	697b      	ldr	r3, [r7, #20]
 8019104:	891a      	ldrh	r2, [r3, #8]
 8019106:	89bb      	ldrh	r3, [r7, #12]
 8019108:	1ad3      	subs	r3, r2, r3
 801910a:	b29a      	uxth	r2, r3
 801910c:	697b      	ldr	r3, [r7, #20]
 801910e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8019110:	697b      	ldr	r3, [r7, #20]
 8019112:	68db      	ldr	r3, [r3, #12]
 8019114:	899b      	ldrh	r3, [r3, #12]
 8019116:	b29c      	uxth	r4, r3
 8019118:	7efb      	ldrb	r3, [r7, #27]
 801911a:	b29b      	uxth	r3, r3
 801911c:	4618      	mov	r0, r3
 801911e:	f7f9 f9fb 	bl	8012518 <lwip_htons>
 8019122:	4603      	mov	r3, r0
 8019124:	461a      	mov	r2, r3
 8019126:	697b      	ldr	r3, [r7, #20]
 8019128:	68db      	ldr	r3, [r3, #12]
 801912a:	4322      	orrs	r2, r4
 801912c:	b292      	uxth	r2, r2
 801912e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8019130:	697b      	ldr	r3, [r7, #20]
 8019132:	685b      	ldr	r3, [r3, #4]
 8019134:	4618      	mov	r0, r3
 8019136:	f7fa fe39 	bl	8013dac <pbuf_clen>
 801913a:	4603      	mov	r3, r0
 801913c:	461a      	mov	r2, r3
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019144:	4413      	add	r3, r2
 8019146:	b29a      	uxth	r2, r3
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801914e:	69fb      	ldr	r3, [r7, #28]
 8019150:	685b      	ldr	r3, [r3, #4]
 8019152:	4618      	mov	r0, r3
 8019154:	f7fa fe2a 	bl	8013dac <pbuf_clen>
 8019158:	4603      	mov	r3, r0
 801915a:	461a      	mov	r2, r3
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019162:	4413      	add	r3, r2
 8019164:	b29a      	uxth	r2, r3
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801916c:	697b      	ldr	r3, [r7, #20]
 801916e:	681a      	ldr	r2, [r3, #0]
 8019170:	69fb      	ldr	r3, [r7, #28]
 8019172:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8019174:	697b      	ldr	r3, [r7, #20]
 8019176:	69fa      	ldr	r2, [r7, #28]
 8019178:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801917a:	69fb      	ldr	r3, [r7, #28]
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	2b00      	cmp	r3, #0
 8019180:	d103      	bne.n	801918a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	2200      	movs	r2, #0
 8019186:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801918a:	2300      	movs	r3, #0
 801918c:	e016      	b.n	80191bc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801918e:	bf00      	nop
 8019190:	e002      	b.n	8019198 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8019192:	bf00      	nop
 8019194:	e000      	b.n	8019198 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8019196:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8019198:	69fb      	ldr	r3, [r7, #28]
 801919a:	2b00      	cmp	r3, #0
 801919c:	d006      	beq.n	80191ac <tcp_split_unsent_seg+0x25c>
 801919e:	4b09      	ldr	r3, [pc, #36]	; (80191c4 <tcp_split_unsent_seg+0x274>)
 80191a0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80191a4:	490d      	ldr	r1, [pc, #52]	; (80191dc <tcp_split_unsent_seg+0x28c>)
 80191a6:	4809      	ldr	r0, [pc, #36]	; (80191cc <tcp_split_unsent_seg+0x27c>)
 80191a8:	f005 fdda 	bl	801ed60 <iprintf>
  if (p != NULL) {
 80191ac:	693b      	ldr	r3, [r7, #16]
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d002      	beq.n	80191b8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80191b2:	6938      	ldr	r0, [r7, #16]
 80191b4:	f7fa fd6c 	bl	8013c90 <pbuf_free>
  }

  return ERR_MEM;
 80191b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80191bc:	4618      	mov	r0, r3
 80191be:	3724      	adds	r7, #36	; 0x24
 80191c0:	46bd      	mov	sp, r7
 80191c2:	bd90      	pop	{r4, r7, pc}
 80191c4:	080248b0 	.word	0x080248b0
 80191c8:	08024c44 	.word	0x08024c44
 80191cc:	08024904 	.word	0x08024904
 80191d0:	08024c68 	.word	0x08024c68
 80191d4:	08024c8c 	.word	0x08024c8c
 80191d8:	08024c9c 	.word	0x08024c9c
 80191dc:	08024cac 	.word	0x08024cac

080191e0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80191e0:	b590      	push	{r4, r7, lr}
 80191e2:	b085      	sub	sp, #20
 80191e4:	af00      	add	r7, sp, #0
 80191e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d106      	bne.n	80191fc <tcp_send_fin+0x1c>
 80191ee:	4b21      	ldr	r3, [pc, #132]	; (8019274 <tcp_send_fin+0x94>)
 80191f0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80191f4:	4920      	ldr	r1, [pc, #128]	; (8019278 <tcp_send_fin+0x98>)
 80191f6:	4821      	ldr	r0, [pc, #132]	; (801927c <tcp_send_fin+0x9c>)
 80191f8:	f005 fdb2 	bl	801ed60 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019200:	2b00      	cmp	r3, #0
 8019202:	d02e      	beq.n	8019262 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019208:	60fb      	str	r3, [r7, #12]
 801920a:	e002      	b.n	8019212 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801920c:	68fb      	ldr	r3, [r7, #12]
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019212:	68fb      	ldr	r3, [r7, #12]
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	2b00      	cmp	r3, #0
 8019218:	d1f8      	bne.n	801920c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	68db      	ldr	r3, [r3, #12]
 801921e:	899b      	ldrh	r3, [r3, #12]
 8019220:	b29b      	uxth	r3, r3
 8019222:	4618      	mov	r0, r3
 8019224:	f7f9 f978 	bl	8012518 <lwip_htons>
 8019228:	4603      	mov	r3, r0
 801922a:	b2db      	uxtb	r3, r3
 801922c:	f003 0307 	and.w	r3, r3, #7
 8019230:	2b00      	cmp	r3, #0
 8019232:	d116      	bne.n	8019262 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	68db      	ldr	r3, [r3, #12]
 8019238:	899b      	ldrh	r3, [r3, #12]
 801923a:	b29c      	uxth	r4, r3
 801923c:	2001      	movs	r0, #1
 801923e:	f7f9 f96b 	bl	8012518 <lwip_htons>
 8019242:	4603      	mov	r3, r0
 8019244:	461a      	mov	r2, r3
 8019246:	68fb      	ldr	r3, [r7, #12]
 8019248:	68db      	ldr	r3, [r3, #12]
 801924a:	4322      	orrs	r2, r4
 801924c:	b292      	uxth	r2, r2
 801924e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	8b5b      	ldrh	r3, [r3, #26]
 8019254:	f043 0320 	orr.w	r3, r3, #32
 8019258:	b29a      	uxth	r2, r3
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801925e:	2300      	movs	r3, #0
 8019260:	e004      	b.n	801926c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8019262:	2101      	movs	r1, #1
 8019264:	6878      	ldr	r0, [r7, #4]
 8019266:	f000 f80b 	bl	8019280 <tcp_enqueue_flags>
 801926a:	4603      	mov	r3, r0
}
 801926c:	4618      	mov	r0, r3
 801926e:	3714      	adds	r7, #20
 8019270:	46bd      	mov	sp, r7
 8019272:	bd90      	pop	{r4, r7, pc}
 8019274:	080248b0 	.word	0x080248b0
 8019278:	08024cb8 	.word	0x08024cb8
 801927c:	08024904 	.word	0x08024904

08019280 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8019280:	b580      	push	{r7, lr}
 8019282:	b08a      	sub	sp, #40	; 0x28
 8019284:	af02      	add	r7, sp, #8
 8019286:	6078      	str	r0, [r7, #4]
 8019288:	460b      	mov	r3, r1
 801928a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801928c:	2300      	movs	r3, #0
 801928e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8019290:	2300      	movs	r3, #0
 8019292:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8019294:	78fb      	ldrb	r3, [r7, #3]
 8019296:	f003 0303 	and.w	r3, r3, #3
 801929a:	2b00      	cmp	r3, #0
 801929c:	d106      	bne.n	80192ac <tcp_enqueue_flags+0x2c>
 801929e:	4b67      	ldr	r3, [pc, #412]	; (801943c <tcp_enqueue_flags+0x1bc>)
 80192a0:	f240 4211 	movw	r2, #1041	; 0x411
 80192a4:	4966      	ldr	r1, [pc, #408]	; (8019440 <tcp_enqueue_flags+0x1c0>)
 80192a6:	4867      	ldr	r0, [pc, #412]	; (8019444 <tcp_enqueue_flags+0x1c4>)
 80192a8:	f005 fd5a 	bl	801ed60 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d106      	bne.n	80192c0 <tcp_enqueue_flags+0x40>
 80192b2:	4b62      	ldr	r3, [pc, #392]	; (801943c <tcp_enqueue_flags+0x1bc>)
 80192b4:	f240 4213 	movw	r2, #1043	; 0x413
 80192b8:	4963      	ldr	r1, [pc, #396]	; (8019448 <tcp_enqueue_flags+0x1c8>)
 80192ba:	4862      	ldr	r0, [pc, #392]	; (8019444 <tcp_enqueue_flags+0x1c4>)
 80192bc:	f005 fd50 	bl	801ed60 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80192c0:	78fb      	ldrb	r3, [r7, #3]
 80192c2:	f003 0302 	and.w	r3, r3, #2
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d001      	beq.n	80192ce <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80192ca:	2301      	movs	r3, #1
 80192cc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80192ce:	7ffb      	ldrb	r3, [r7, #31]
 80192d0:	009b      	lsls	r3, r3, #2
 80192d2:	b2db      	uxtb	r3, r3
 80192d4:	f003 0304 	and.w	r3, r3, #4
 80192d8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80192da:	7dfb      	ldrb	r3, [r7, #23]
 80192dc:	b29b      	uxth	r3, r3
 80192de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80192e2:	4619      	mov	r1, r3
 80192e4:	2036      	movs	r0, #54	; 0x36
 80192e6:	f7fa f9ef 	bl	80136c8 <pbuf_alloc>
 80192ea:	6138      	str	r0, [r7, #16]
 80192ec:	693b      	ldr	r3, [r7, #16]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d109      	bne.n	8019306 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	8b5b      	ldrh	r3, [r3, #26]
 80192f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80192fa:	b29a      	uxth	r2, r3
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019300:	f04f 33ff 	mov.w	r3, #4294967295
 8019304:	e095      	b.n	8019432 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8019306:	693b      	ldr	r3, [r7, #16]
 8019308:	895a      	ldrh	r2, [r3, #10]
 801930a:	7dfb      	ldrb	r3, [r7, #23]
 801930c:	b29b      	uxth	r3, r3
 801930e:	429a      	cmp	r2, r3
 8019310:	d206      	bcs.n	8019320 <tcp_enqueue_flags+0xa0>
 8019312:	4b4a      	ldr	r3, [pc, #296]	; (801943c <tcp_enqueue_flags+0x1bc>)
 8019314:	f240 4239 	movw	r2, #1081	; 0x439
 8019318:	494c      	ldr	r1, [pc, #304]	; (801944c <tcp_enqueue_flags+0x1cc>)
 801931a:	484a      	ldr	r0, [pc, #296]	; (8019444 <tcp_enqueue_flags+0x1c4>)
 801931c:	f005 fd20 	bl	801ed60 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8019324:	78fa      	ldrb	r2, [r7, #3]
 8019326:	7ffb      	ldrb	r3, [r7, #31]
 8019328:	9300      	str	r3, [sp, #0]
 801932a:	460b      	mov	r3, r1
 801932c:	6939      	ldr	r1, [r7, #16]
 801932e:	6878      	ldr	r0, [r7, #4]
 8019330:	f7ff f918 	bl	8018564 <tcp_create_segment>
 8019334:	60f8      	str	r0, [r7, #12]
 8019336:	68fb      	ldr	r3, [r7, #12]
 8019338:	2b00      	cmp	r3, #0
 801933a:	d109      	bne.n	8019350 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	8b5b      	ldrh	r3, [r3, #26]
 8019340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019344:	b29a      	uxth	r2, r3
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801934a:	f04f 33ff 	mov.w	r3, #4294967295
 801934e:	e070      	b.n	8019432 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	68db      	ldr	r3, [r3, #12]
 8019354:	f003 0303 	and.w	r3, r3, #3
 8019358:	2b00      	cmp	r3, #0
 801935a:	d006      	beq.n	801936a <tcp_enqueue_flags+0xea>
 801935c:	4b37      	ldr	r3, [pc, #220]	; (801943c <tcp_enqueue_flags+0x1bc>)
 801935e:	f240 4242 	movw	r2, #1090	; 0x442
 8019362:	493b      	ldr	r1, [pc, #236]	; (8019450 <tcp_enqueue_flags+0x1d0>)
 8019364:	4837      	ldr	r0, [pc, #220]	; (8019444 <tcp_enqueue_flags+0x1c4>)
 8019366:	f005 fcfb 	bl	801ed60 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	891b      	ldrh	r3, [r3, #8]
 801936e:	2b00      	cmp	r3, #0
 8019370:	d006      	beq.n	8019380 <tcp_enqueue_flags+0x100>
 8019372:	4b32      	ldr	r3, [pc, #200]	; (801943c <tcp_enqueue_flags+0x1bc>)
 8019374:	f240 4243 	movw	r2, #1091	; 0x443
 8019378:	4936      	ldr	r1, [pc, #216]	; (8019454 <tcp_enqueue_flags+0x1d4>)
 801937a:	4832      	ldr	r0, [pc, #200]	; (8019444 <tcp_enqueue_flags+0x1c4>)
 801937c:	f005 fcf0 	bl	801ed60 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019384:	2b00      	cmp	r3, #0
 8019386:	d103      	bne.n	8019390 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	68fa      	ldr	r2, [r7, #12]
 801938c:	66da      	str	r2, [r3, #108]	; 0x6c
 801938e:	e00d      	b.n	80193ac <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019394:	61bb      	str	r3, [r7, #24]
 8019396:	e002      	b.n	801939e <tcp_enqueue_flags+0x11e>
 8019398:	69bb      	ldr	r3, [r7, #24]
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	61bb      	str	r3, [r7, #24]
 801939e:	69bb      	ldr	r3, [r7, #24]
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	d1f8      	bne.n	8019398 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80193a6:	69bb      	ldr	r3, [r7, #24]
 80193a8:	68fa      	ldr	r2, [r7, #12]
 80193aa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	2200      	movs	r2, #0
 80193b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80193b4:	78fb      	ldrb	r3, [r7, #3]
 80193b6:	f003 0302 	and.w	r3, r3, #2
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	d104      	bne.n	80193c8 <tcp_enqueue_flags+0x148>
 80193be:	78fb      	ldrb	r3, [r7, #3]
 80193c0:	f003 0301 	and.w	r3, r3, #1
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d004      	beq.n	80193d2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80193cc:	1c5a      	adds	r2, r3, #1
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80193d2:	78fb      	ldrb	r3, [r7, #3]
 80193d4:	f003 0301 	and.w	r3, r3, #1
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d006      	beq.n	80193ea <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	8b5b      	ldrh	r3, [r3, #26]
 80193e0:	f043 0320 	orr.w	r3, r3, #32
 80193e4:	b29a      	uxth	r2, r3
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80193ea:	68fb      	ldr	r3, [r7, #12]
 80193ec:	685b      	ldr	r3, [r3, #4]
 80193ee:	4618      	mov	r0, r3
 80193f0:	f7fa fcdc 	bl	8013dac <pbuf_clen>
 80193f4:	4603      	mov	r3, r0
 80193f6:	461a      	mov	r2, r3
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80193fe:	4413      	add	r3, r2
 8019400:	b29a      	uxth	r2, r3
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801940e:	2b00      	cmp	r3, #0
 8019410:	d00e      	beq.n	8019430 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019416:	2b00      	cmp	r3, #0
 8019418:	d10a      	bne.n	8019430 <tcp_enqueue_flags+0x1b0>
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801941e:	2b00      	cmp	r3, #0
 8019420:	d106      	bne.n	8019430 <tcp_enqueue_flags+0x1b0>
 8019422:	4b06      	ldr	r3, [pc, #24]	; (801943c <tcp_enqueue_flags+0x1bc>)
 8019424:	f240 4265 	movw	r2, #1125	; 0x465
 8019428:	490b      	ldr	r1, [pc, #44]	; (8019458 <tcp_enqueue_flags+0x1d8>)
 801942a:	4806      	ldr	r0, [pc, #24]	; (8019444 <tcp_enqueue_flags+0x1c4>)
 801942c:	f005 fc98 	bl	801ed60 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8019430:	2300      	movs	r3, #0
}
 8019432:	4618      	mov	r0, r3
 8019434:	3720      	adds	r7, #32
 8019436:	46bd      	mov	sp, r7
 8019438:	bd80      	pop	{r7, pc}
 801943a:	bf00      	nop
 801943c:	080248b0 	.word	0x080248b0
 8019440:	08024cd4 	.word	0x08024cd4
 8019444:	08024904 	.word	0x08024904
 8019448:	08024d2c 	.word	0x08024d2c
 801944c:	08024d4c 	.word	0x08024d4c
 8019450:	08024d88 	.word	0x08024d88
 8019454:	08024da0 	.word	0x08024da0
 8019458:	08024dcc 	.word	0x08024dcc

0801945c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801945c:	b5b0      	push	{r4, r5, r7, lr}
 801945e:	b08a      	sub	sp, #40	; 0x28
 8019460:	af00      	add	r7, sp, #0
 8019462:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	2b00      	cmp	r3, #0
 8019468:	d106      	bne.n	8019478 <tcp_output+0x1c>
 801946a:	4b9e      	ldr	r3, [pc, #632]	; (80196e4 <tcp_output+0x288>)
 801946c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8019470:	499d      	ldr	r1, [pc, #628]	; (80196e8 <tcp_output+0x28c>)
 8019472:	489e      	ldr	r0, [pc, #632]	; (80196ec <tcp_output+0x290>)
 8019474:	f005 fc74 	bl	801ed60 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	7d1b      	ldrb	r3, [r3, #20]
 801947c:	2b01      	cmp	r3, #1
 801947e:	d106      	bne.n	801948e <tcp_output+0x32>
 8019480:	4b98      	ldr	r3, [pc, #608]	; (80196e4 <tcp_output+0x288>)
 8019482:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8019486:	499a      	ldr	r1, [pc, #616]	; (80196f0 <tcp_output+0x294>)
 8019488:	4898      	ldr	r0, [pc, #608]	; (80196ec <tcp_output+0x290>)
 801948a:	f005 fc69 	bl	801ed60 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801948e:	4b99      	ldr	r3, [pc, #612]	; (80196f4 <tcp_output+0x298>)
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	687a      	ldr	r2, [r7, #4]
 8019494:	429a      	cmp	r2, r3
 8019496:	d101      	bne.n	801949c <tcp_output+0x40>
    return ERR_OK;
 8019498:	2300      	movs	r3, #0
 801949a:	e1ce      	b.n	801983a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80194a8:	4293      	cmp	r3, r2
 80194aa:	bf28      	it	cs
 80194ac:	4613      	movcs	r3, r2
 80194ae:	b29b      	uxth	r3, r3
 80194b0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80194b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80194b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d10b      	bne.n	80194d6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	8b5b      	ldrh	r3, [r3, #26]
 80194c2:	f003 0302 	and.w	r3, r3, #2
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	f000 81aa 	beq.w	8019820 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80194cc:	6878      	ldr	r0, [r7, #4]
 80194ce:	f000 fdcb 	bl	801a068 <tcp_send_empty_ack>
 80194d2:	4603      	mov	r3, r0
 80194d4:	e1b1      	b.n	801983a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80194d6:	6879      	ldr	r1, [r7, #4]
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	3304      	adds	r3, #4
 80194dc:	461a      	mov	r2, r3
 80194de:	6878      	ldr	r0, [r7, #4]
 80194e0:	f7ff f824 	bl	801852c <tcp_route>
 80194e4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80194e6:	697b      	ldr	r3, [r7, #20]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d102      	bne.n	80194f2 <tcp_output+0x96>
    return ERR_RTE;
 80194ec:	f06f 0303 	mvn.w	r3, #3
 80194f0:	e1a3      	b.n	801983a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d003      	beq.n	8019500 <tcp_output+0xa4>
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d111      	bne.n	8019524 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8019500:	697b      	ldr	r3, [r7, #20]
 8019502:	2b00      	cmp	r3, #0
 8019504:	d002      	beq.n	801950c <tcp_output+0xb0>
 8019506:	697b      	ldr	r3, [r7, #20]
 8019508:	3304      	adds	r3, #4
 801950a:	e000      	b.n	801950e <tcp_output+0xb2>
 801950c:	2300      	movs	r3, #0
 801950e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8019510:	693b      	ldr	r3, [r7, #16]
 8019512:	2b00      	cmp	r3, #0
 8019514:	d102      	bne.n	801951c <tcp_output+0xc0>
      return ERR_RTE;
 8019516:	f06f 0303 	mvn.w	r3, #3
 801951a:	e18e      	b.n	801983a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801951c:	693b      	ldr	r3, [r7, #16]
 801951e:	681a      	ldr	r2, [r3, #0]
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8019524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019526:	68db      	ldr	r3, [r3, #12]
 8019528:	685b      	ldr	r3, [r3, #4]
 801952a:	4618      	mov	r0, r3
 801952c:	f7f9 f809 	bl	8012542 <lwip_htonl>
 8019530:	4602      	mov	r2, r0
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019536:	1ad3      	subs	r3, r2, r3
 8019538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801953a:	8912      	ldrh	r2, [r2, #8]
 801953c:	4413      	add	r3, r2
 801953e:	69ba      	ldr	r2, [r7, #24]
 8019540:	429a      	cmp	r2, r3
 8019542:	d227      	bcs.n	8019594 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801954a:	461a      	mov	r2, r3
 801954c:	69bb      	ldr	r3, [r7, #24]
 801954e:	4293      	cmp	r3, r2
 8019550:	d114      	bne.n	801957c <tcp_output+0x120>
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019556:	2b00      	cmp	r3, #0
 8019558:	d110      	bne.n	801957c <tcp_output+0x120>
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019560:	2b00      	cmp	r3, #0
 8019562:	d10b      	bne.n	801957c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	2200      	movs	r2, #0
 8019568:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	2201      	movs	r2, #1
 8019570:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	2200      	movs	r2, #0
 8019578:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	8b5b      	ldrh	r3, [r3, #26]
 8019580:	f003 0302 	and.w	r3, r3, #2
 8019584:	2b00      	cmp	r3, #0
 8019586:	f000 814d 	beq.w	8019824 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801958a:	6878      	ldr	r0, [r7, #4]
 801958c:	f000 fd6c 	bl	801a068 <tcp_send_empty_ack>
 8019590:	4603      	mov	r3, r0
 8019592:	e152      	b.n	801983a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	2200      	movs	r2, #0
 8019598:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80195a0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80195a2:	6a3b      	ldr	r3, [r7, #32]
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	f000 811c 	beq.w	80197e2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80195aa:	e002      	b.n	80195b2 <tcp_output+0x156>
 80195ac:	6a3b      	ldr	r3, [r7, #32]
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	623b      	str	r3, [r7, #32]
 80195b2:	6a3b      	ldr	r3, [r7, #32]
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	d1f8      	bne.n	80195ac <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80195ba:	e112      	b.n	80197e2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80195bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195be:	68db      	ldr	r3, [r3, #12]
 80195c0:	899b      	ldrh	r3, [r3, #12]
 80195c2:	b29b      	uxth	r3, r3
 80195c4:	4618      	mov	r0, r3
 80195c6:	f7f8 ffa7 	bl	8012518 <lwip_htons>
 80195ca:	4603      	mov	r3, r0
 80195cc:	b2db      	uxtb	r3, r3
 80195ce:	f003 0304 	and.w	r3, r3, #4
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d006      	beq.n	80195e4 <tcp_output+0x188>
 80195d6:	4b43      	ldr	r3, [pc, #268]	; (80196e4 <tcp_output+0x288>)
 80195d8:	f240 5236 	movw	r2, #1334	; 0x536
 80195dc:	4946      	ldr	r1, [pc, #280]	; (80196f8 <tcp_output+0x29c>)
 80195de:	4843      	ldr	r0, [pc, #268]	; (80196ec <tcp_output+0x290>)
 80195e0:	f005 fbbe 	bl	801ed60 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d01f      	beq.n	801962c <tcp_output+0x1d0>
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	8b5b      	ldrh	r3, [r3, #26]
 80195f0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d119      	bne.n	801962c <tcp_output+0x1d0>
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d00b      	beq.n	8019618 <tcp_output+0x1bc>
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	2b00      	cmp	r3, #0
 8019608:	d110      	bne.n	801962c <tcp_output+0x1d0>
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801960e:	891a      	ldrh	r2, [r3, #8]
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019614:	429a      	cmp	r2, r3
 8019616:	d209      	bcs.n	801962c <tcp_output+0x1d0>
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801961e:	2b00      	cmp	r3, #0
 8019620:	d004      	beq.n	801962c <tcp_output+0x1d0>
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019628:	2b08      	cmp	r3, #8
 801962a:	d901      	bls.n	8019630 <tcp_output+0x1d4>
 801962c:	2301      	movs	r3, #1
 801962e:	e000      	b.n	8019632 <tcp_output+0x1d6>
 8019630:	2300      	movs	r3, #0
 8019632:	2b00      	cmp	r3, #0
 8019634:	d106      	bne.n	8019644 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	8b5b      	ldrh	r3, [r3, #26]
 801963a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801963e:	2b00      	cmp	r3, #0
 8019640:	f000 80e4 	beq.w	801980c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	7d1b      	ldrb	r3, [r3, #20]
 8019648:	2b02      	cmp	r3, #2
 801964a:	d00d      	beq.n	8019668 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801964e:	68db      	ldr	r3, [r3, #12]
 8019650:	899b      	ldrh	r3, [r3, #12]
 8019652:	b29c      	uxth	r4, r3
 8019654:	2010      	movs	r0, #16
 8019656:	f7f8 ff5f 	bl	8012518 <lwip_htons>
 801965a:	4603      	mov	r3, r0
 801965c:	461a      	mov	r2, r3
 801965e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019660:	68db      	ldr	r3, [r3, #12]
 8019662:	4322      	orrs	r2, r4
 8019664:	b292      	uxth	r2, r2
 8019666:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8019668:	697a      	ldr	r2, [r7, #20]
 801966a:	6879      	ldr	r1, [r7, #4]
 801966c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801966e:	f000 f909 	bl	8019884 <tcp_output_segment>
 8019672:	4603      	mov	r3, r0
 8019674:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8019676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801967a:	2b00      	cmp	r3, #0
 801967c:	d009      	beq.n	8019692 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	8b5b      	ldrh	r3, [r3, #26]
 8019682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019686:	b29a      	uxth	r2, r3
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	835a      	strh	r2, [r3, #26]
      return err;
 801968c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019690:	e0d3      	b.n	801983a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8019692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019694:	681a      	ldr	r2, [r3, #0]
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	7d1b      	ldrb	r3, [r3, #20]
 801969e:	2b02      	cmp	r3, #2
 80196a0:	d006      	beq.n	80196b0 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	8b5b      	ldrh	r3, [r3, #26]
 80196a6:	f023 0303 	bic.w	r3, r3, #3
 80196aa:	b29a      	uxth	r2, r3
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80196b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196b2:	68db      	ldr	r3, [r3, #12]
 80196b4:	685b      	ldr	r3, [r3, #4]
 80196b6:	4618      	mov	r0, r3
 80196b8:	f7f8 ff43 	bl	8012542 <lwip_htonl>
 80196bc:	4604      	mov	r4, r0
 80196be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196c0:	891b      	ldrh	r3, [r3, #8]
 80196c2:	461d      	mov	r5, r3
 80196c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196c6:	68db      	ldr	r3, [r3, #12]
 80196c8:	899b      	ldrh	r3, [r3, #12]
 80196ca:	b29b      	uxth	r3, r3
 80196cc:	4618      	mov	r0, r3
 80196ce:	f7f8 ff23 	bl	8012518 <lwip_htons>
 80196d2:	4603      	mov	r3, r0
 80196d4:	b2db      	uxtb	r3, r3
 80196d6:	f003 0303 	and.w	r3, r3, #3
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d00e      	beq.n	80196fc <tcp_output+0x2a0>
 80196de:	2301      	movs	r3, #1
 80196e0:	e00d      	b.n	80196fe <tcp_output+0x2a2>
 80196e2:	bf00      	nop
 80196e4:	080248b0 	.word	0x080248b0
 80196e8:	08024df4 	.word	0x08024df4
 80196ec:	08024904 	.word	0x08024904
 80196f0:	08024e0c 	.word	0x08024e0c
 80196f4:	2000b7b0 	.word	0x2000b7b0
 80196f8:	08024e34 	.word	0x08024e34
 80196fc:	2300      	movs	r3, #0
 80196fe:	442b      	add	r3, r5
 8019700:	4423      	add	r3, r4
 8019702:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019708:	68bb      	ldr	r3, [r7, #8]
 801970a:	1ad3      	subs	r3, r2, r3
 801970c:	2b00      	cmp	r3, #0
 801970e:	da02      	bge.n	8019716 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	68ba      	ldr	r2, [r7, #8]
 8019714:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8019716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019718:	891b      	ldrh	r3, [r3, #8]
 801971a:	461c      	mov	r4, r3
 801971c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801971e:	68db      	ldr	r3, [r3, #12]
 8019720:	899b      	ldrh	r3, [r3, #12]
 8019722:	b29b      	uxth	r3, r3
 8019724:	4618      	mov	r0, r3
 8019726:	f7f8 fef7 	bl	8012518 <lwip_htons>
 801972a:	4603      	mov	r3, r0
 801972c:	b2db      	uxtb	r3, r3
 801972e:	f003 0303 	and.w	r3, r3, #3
 8019732:	2b00      	cmp	r3, #0
 8019734:	d001      	beq.n	801973a <tcp_output+0x2de>
 8019736:	2301      	movs	r3, #1
 8019738:	e000      	b.n	801973c <tcp_output+0x2e0>
 801973a:	2300      	movs	r3, #0
 801973c:	4423      	add	r3, r4
 801973e:	2b00      	cmp	r3, #0
 8019740:	d049      	beq.n	80197d6 <tcp_output+0x37a>
      seg->next = NULL;
 8019742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019744:	2200      	movs	r2, #0
 8019746:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801974c:	2b00      	cmp	r3, #0
 801974e:	d105      	bne.n	801975c <tcp_output+0x300>
        pcb->unacked = seg;
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019754:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8019756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019758:	623b      	str	r3, [r7, #32]
 801975a:	e03f      	b.n	80197dc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801975e:	68db      	ldr	r3, [r3, #12]
 8019760:	685b      	ldr	r3, [r3, #4]
 8019762:	4618      	mov	r0, r3
 8019764:	f7f8 feed 	bl	8012542 <lwip_htonl>
 8019768:	4604      	mov	r4, r0
 801976a:	6a3b      	ldr	r3, [r7, #32]
 801976c:	68db      	ldr	r3, [r3, #12]
 801976e:	685b      	ldr	r3, [r3, #4]
 8019770:	4618      	mov	r0, r3
 8019772:	f7f8 fee6 	bl	8012542 <lwip_htonl>
 8019776:	4603      	mov	r3, r0
 8019778:	1ae3      	subs	r3, r4, r3
 801977a:	2b00      	cmp	r3, #0
 801977c:	da24      	bge.n	80197c8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	3370      	adds	r3, #112	; 0x70
 8019782:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019784:	e002      	b.n	801978c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8019786:	69fb      	ldr	r3, [r7, #28]
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801978c:	69fb      	ldr	r3, [r7, #28]
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	2b00      	cmp	r3, #0
 8019792:	d011      	beq.n	80197b8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019794:	69fb      	ldr	r3, [r7, #28]
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	68db      	ldr	r3, [r3, #12]
 801979a:	685b      	ldr	r3, [r3, #4]
 801979c:	4618      	mov	r0, r3
 801979e:	f7f8 fed0 	bl	8012542 <lwip_htonl>
 80197a2:	4604      	mov	r4, r0
 80197a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197a6:	68db      	ldr	r3, [r3, #12]
 80197a8:	685b      	ldr	r3, [r3, #4]
 80197aa:	4618      	mov	r0, r3
 80197ac:	f7f8 fec9 	bl	8012542 <lwip_htonl>
 80197b0:	4603      	mov	r3, r0
 80197b2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	dbe6      	blt.n	8019786 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80197b8:	69fb      	ldr	r3, [r7, #28]
 80197ba:	681a      	ldr	r2, [r3, #0]
 80197bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197be:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80197c0:	69fb      	ldr	r3, [r7, #28]
 80197c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80197c4:	601a      	str	r2, [r3, #0]
 80197c6:	e009      	b.n	80197dc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80197c8:	6a3b      	ldr	r3, [r7, #32]
 80197ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80197cc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80197ce:	6a3b      	ldr	r3, [r7, #32]
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	623b      	str	r3, [r7, #32]
 80197d4:	e002      	b.n	80197dc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80197d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80197d8:	f7fb feff 	bl	80155da <tcp_seg_free>
    }
    seg = pcb->unsent;
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80197e0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80197e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d012      	beq.n	801980e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80197e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197ea:	68db      	ldr	r3, [r3, #12]
 80197ec:	685b      	ldr	r3, [r3, #4]
 80197ee:	4618      	mov	r0, r3
 80197f0:	f7f8 fea7 	bl	8012542 <lwip_htonl>
 80197f4:	4602      	mov	r2, r0
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80197fa:	1ad3      	subs	r3, r2, r3
 80197fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80197fe:	8912      	ldrh	r2, [r2, #8]
 8019800:	4413      	add	r3, r2
  while (seg != NULL &&
 8019802:	69ba      	ldr	r2, [r7, #24]
 8019804:	429a      	cmp	r2, r3
 8019806:	f4bf aed9 	bcs.w	80195bc <tcp_output+0x160>
 801980a:	e000      	b.n	801980e <tcp_output+0x3b2>
      break;
 801980c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019812:	2b00      	cmp	r3, #0
 8019814:	d108      	bne.n	8019828 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	2200      	movs	r2, #0
 801981a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801981e:	e004      	b.n	801982a <tcp_output+0x3ce>
    goto output_done;
 8019820:	bf00      	nop
 8019822:	e002      	b.n	801982a <tcp_output+0x3ce>
    goto output_done;
 8019824:	bf00      	nop
 8019826:	e000      	b.n	801982a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8019828:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	8b5b      	ldrh	r3, [r3, #26]
 801982e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019832:	b29a      	uxth	r2, r3
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8019838:	2300      	movs	r3, #0
}
 801983a:	4618      	mov	r0, r3
 801983c:	3728      	adds	r7, #40	; 0x28
 801983e:	46bd      	mov	sp, r7
 8019840:	bdb0      	pop	{r4, r5, r7, pc}
 8019842:	bf00      	nop

08019844 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8019844:	b580      	push	{r7, lr}
 8019846:	b082      	sub	sp, #8
 8019848:	af00      	add	r7, sp, #0
 801984a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	2b00      	cmp	r3, #0
 8019850:	d106      	bne.n	8019860 <tcp_output_segment_busy+0x1c>
 8019852:	4b09      	ldr	r3, [pc, #36]	; (8019878 <tcp_output_segment_busy+0x34>)
 8019854:	f240 529a 	movw	r2, #1434	; 0x59a
 8019858:	4908      	ldr	r1, [pc, #32]	; (801987c <tcp_output_segment_busy+0x38>)
 801985a:	4809      	ldr	r0, [pc, #36]	; (8019880 <tcp_output_segment_busy+0x3c>)
 801985c:	f005 fa80 	bl	801ed60 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	685b      	ldr	r3, [r3, #4]
 8019864:	7b9b      	ldrb	r3, [r3, #14]
 8019866:	2b01      	cmp	r3, #1
 8019868:	d001      	beq.n	801986e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801986a:	2301      	movs	r3, #1
 801986c:	e000      	b.n	8019870 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801986e:	2300      	movs	r3, #0
}
 8019870:	4618      	mov	r0, r3
 8019872:	3708      	adds	r7, #8
 8019874:	46bd      	mov	sp, r7
 8019876:	bd80      	pop	{r7, pc}
 8019878:	080248b0 	.word	0x080248b0
 801987c:	08024e4c 	.word	0x08024e4c
 8019880:	08024904 	.word	0x08024904

08019884 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8019884:	b5b0      	push	{r4, r5, r7, lr}
 8019886:	b08c      	sub	sp, #48	; 0x30
 8019888:	af04      	add	r7, sp, #16
 801988a:	60f8      	str	r0, [r7, #12]
 801988c:	60b9      	str	r1, [r7, #8]
 801988e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8019890:	68fb      	ldr	r3, [r7, #12]
 8019892:	2b00      	cmp	r3, #0
 8019894:	d106      	bne.n	80198a4 <tcp_output_segment+0x20>
 8019896:	4b63      	ldr	r3, [pc, #396]	; (8019a24 <tcp_output_segment+0x1a0>)
 8019898:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801989c:	4962      	ldr	r1, [pc, #392]	; (8019a28 <tcp_output_segment+0x1a4>)
 801989e:	4863      	ldr	r0, [pc, #396]	; (8019a2c <tcp_output_segment+0x1a8>)
 80198a0:	f005 fa5e 	bl	801ed60 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80198a4:	68bb      	ldr	r3, [r7, #8]
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	d106      	bne.n	80198b8 <tcp_output_segment+0x34>
 80198aa:	4b5e      	ldr	r3, [pc, #376]	; (8019a24 <tcp_output_segment+0x1a0>)
 80198ac:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80198b0:	495f      	ldr	r1, [pc, #380]	; (8019a30 <tcp_output_segment+0x1ac>)
 80198b2:	485e      	ldr	r0, [pc, #376]	; (8019a2c <tcp_output_segment+0x1a8>)
 80198b4:	f005 fa54 	bl	801ed60 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d106      	bne.n	80198cc <tcp_output_segment+0x48>
 80198be:	4b59      	ldr	r3, [pc, #356]	; (8019a24 <tcp_output_segment+0x1a0>)
 80198c0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80198c4:	495b      	ldr	r1, [pc, #364]	; (8019a34 <tcp_output_segment+0x1b0>)
 80198c6:	4859      	ldr	r0, [pc, #356]	; (8019a2c <tcp_output_segment+0x1a8>)
 80198c8:	f005 fa4a 	bl	801ed60 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80198cc:	68f8      	ldr	r0, [r7, #12]
 80198ce:	f7ff ffb9 	bl	8019844 <tcp_output_segment_busy>
 80198d2:	4603      	mov	r3, r0
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	d001      	beq.n	80198dc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80198d8:	2300      	movs	r3, #0
 80198da:	e09f      	b.n	8019a1c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80198dc:	68bb      	ldr	r3, [r7, #8]
 80198de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80198e0:	68fb      	ldr	r3, [r7, #12]
 80198e2:	68dc      	ldr	r4, [r3, #12]
 80198e4:	4610      	mov	r0, r2
 80198e6:	f7f8 fe2c 	bl	8012542 <lwip_htonl>
 80198ea:	4603      	mov	r3, r0
 80198ec:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80198ee:	68bb      	ldr	r3, [r7, #8]
 80198f0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80198f2:	68fb      	ldr	r3, [r7, #12]
 80198f4:	68dc      	ldr	r4, [r3, #12]
 80198f6:	4610      	mov	r0, r2
 80198f8:	f7f8 fe0e 	bl	8012518 <lwip_htons>
 80198fc:	4603      	mov	r3, r0
 80198fe:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019900:	68bb      	ldr	r3, [r7, #8]
 8019902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019904:	68ba      	ldr	r2, [r7, #8]
 8019906:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8019908:	441a      	add	r2, r3
 801990a:	68bb      	ldr	r3, [r7, #8]
 801990c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	68db      	ldr	r3, [r3, #12]
 8019912:	3314      	adds	r3, #20
 8019914:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8019916:	68fb      	ldr	r3, [r7, #12]
 8019918:	7a9b      	ldrb	r3, [r3, #10]
 801991a:	f003 0301 	and.w	r3, r3, #1
 801991e:	2b00      	cmp	r3, #0
 8019920:	d015      	beq.n	801994e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8019922:	68bb      	ldr	r3, [r7, #8]
 8019924:	3304      	adds	r3, #4
 8019926:	461a      	mov	r2, r3
 8019928:	6879      	ldr	r1, [r7, #4]
 801992a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801992e:	f7fc fa37 	bl	8015da0 <tcp_eff_send_mss_netif>
 8019932:	4603      	mov	r3, r0
 8019934:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8019936:	8b7b      	ldrh	r3, [r7, #26]
 8019938:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801993c:	4618      	mov	r0, r3
 801993e:	f7f8 fe00 	bl	8012542 <lwip_htonl>
 8019942:	4602      	mov	r2, r0
 8019944:	69fb      	ldr	r3, [r7, #28]
 8019946:	601a      	str	r2, [r3, #0]
    opts += 1;
 8019948:	69fb      	ldr	r3, [r7, #28]
 801994a:	3304      	adds	r3, #4
 801994c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801994e:	68bb      	ldr	r3, [r7, #8]
 8019950:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019954:	2b00      	cmp	r3, #0
 8019956:	da02      	bge.n	801995e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8019958:	68bb      	ldr	r3, [r7, #8]
 801995a:	2200      	movs	r2, #0
 801995c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801995e:	68bb      	ldr	r3, [r7, #8]
 8019960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019962:	2b00      	cmp	r3, #0
 8019964:	d10c      	bne.n	8019980 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8019966:	4b34      	ldr	r3, [pc, #208]	; (8019a38 <tcp_output_segment+0x1b4>)
 8019968:	681a      	ldr	r2, [r3, #0]
 801996a:	68bb      	ldr	r3, [r7, #8]
 801996c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	68db      	ldr	r3, [r3, #12]
 8019972:	685b      	ldr	r3, [r3, #4]
 8019974:	4618      	mov	r0, r3
 8019976:	f7f8 fde4 	bl	8012542 <lwip_htonl>
 801997a:	4602      	mov	r2, r0
 801997c:	68bb      	ldr	r3, [r7, #8]
 801997e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8019980:	68fb      	ldr	r3, [r7, #12]
 8019982:	68da      	ldr	r2, [r3, #12]
 8019984:	68fb      	ldr	r3, [r7, #12]
 8019986:	685b      	ldr	r3, [r3, #4]
 8019988:	685b      	ldr	r3, [r3, #4]
 801998a:	1ad3      	subs	r3, r2, r3
 801998c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801998e:	68fb      	ldr	r3, [r7, #12]
 8019990:	685b      	ldr	r3, [r3, #4]
 8019992:	8959      	ldrh	r1, [r3, #10]
 8019994:	68fb      	ldr	r3, [r7, #12]
 8019996:	685b      	ldr	r3, [r3, #4]
 8019998:	8b3a      	ldrh	r2, [r7, #24]
 801999a:	1a8a      	subs	r2, r1, r2
 801999c:	b292      	uxth	r2, r2
 801999e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80199a0:	68fb      	ldr	r3, [r7, #12]
 80199a2:	685b      	ldr	r3, [r3, #4]
 80199a4:	8919      	ldrh	r1, [r3, #8]
 80199a6:	68fb      	ldr	r3, [r7, #12]
 80199a8:	685b      	ldr	r3, [r3, #4]
 80199aa:	8b3a      	ldrh	r2, [r7, #24]
 80199ac:	1a8a      	subs	r2, r1, r2
 80199ae:	b292      	uxth	r2, r2
 80199b0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	685b      	ldr	r3, [r3, #4]
 80199b6:	68fa      	ldr	r2, [r7, #12]
 80199b8:	68d2      	ldr	r2, [r2, #12]
 80199ba:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	68db      	ldr	r3, [r3, #12]
 80199c0:	2200      	movs	r2, #0
 80199c2:	741a      	strb	r2, [r3, #16]
 80199c4:	2200      	movs	r2, #0
 80199c6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80199c8:	68fb      	ldr	r3, [r7, #12]
 80199ca:	68db      	ldr	r3, [r3, #12]
 80199cc:	f103 0214 	add.w	r2, r3, #20
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	7a9b      	ldrb	r3, [r3, #10]
 80199d4:	009b      	lsls	r3, r3, #2
 80199d6:	f003 0304 	and.w	r3, r3, #4
 80199da:	4413      	add	r3, r2
 80199dc:	69fa      	ldr	r2, [r7, #28]
 80199de:	429a      	cmp	r2, r3
 80199e0:	d006      	beq.n	80199f0 <tcp_output_segment+0x16c>
 80199e2:	4b10      	ldr	r3, [pc, #64]	; (8019a24 <tcp_output_segment+0x1a0>)
 80199e4:	f240 621c 	movw	r2, #1564	; 0x61c
 80199e8:	4914      	ldr	r1, [pc, #80]	; (8019a3c <tcp_output_segment+0x1b8>)
 80199ea:	4810      	ldr	r0, [pc, #64]	; (8019a2c <tcp_output_segment+0x1a8>)
 80199ec:	f005 f9b8 	bl	801ed60 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80199f0:	68fb      	ldr	r3, [r7, #12]
 80199f2:	6858      	ldr	r0, [r3, #4]
 80199f4:	68b9      	ldr	r1, [r7, #8]
 80199f6:	68bb      	ldr	r3, [r7, #8]
 80199f8:	1d1c      	adds	r4, r3, #4
 80199fa:	68bb      	ldr	r3, [r7, #8]
 80199fc:	7add      	ldrb	r5, [r3, #11]
 80199fe:	68bb      	ldr	r3, [r7, #8]
 8019a00:	7a9b      	ldrb	r3, [r3, #10]
 8019a02:	687a      	ldr	r2, [r7, #4]
 8019a04:	9202      	str	r2, [sp, #8]
 8019a06:	2206      	movs	r2, #6
 8019a08:	9201      	str	r2, [sp, #4]
 8019a0a:	9300      	str	r3, [sp, #0]
 8019a0c:	462b      	mov	r3, r5
 8019a0e:	4622      	mov	r2, r4
 8019a10:	f002 fd96 	bl	801c540 <ip4_output_if>
 8019a14:	4603      	mov	r3, r0
 8019a16:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8019a18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019a1c:	4618      	mov	r0, r3
 8019a1e:	3720      	adds	r7, #32
 8019a20:	46bd      	mov	sp, r7
 8019a22:	bdb0      	pop	{r4, r5, r7, pc}
 8019a24:	080248b0 	.word	0x080248b0
 8019a28:	08024e74 	.word	0x08024e74
 8019a2c:	08024904 	.word	0x08024904
 8019a30:	08024e94 	.word	0x08024e94
 8019a34:	08024eb4 	.word	0x08024eb4
 8019a38:	2000b7a0 	.word	0x2000b7a0
 8019a3c:	08024ed8 	.word	0x08024ed8

08019a40 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8019a40:	b5b0      	push	{r4, r5, r7, lr}
 8019a42:	b084      	sub	sp, #16
 8019a44:	af00      	add	r7, sp, #0
 8019a46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d106      	bne.n	8019a5c <tcp_rexmit_rto_prepare+0x1c>
 8019a4e:	4b31      	ldr	r3, [pc, #196]	; (8019b14 <tcp_rexmit_rto_prepare+0xd4>)
 8019a50:	f240 6263 	movw	r2, #1635	; 0x663
 8019a54:	4930      	ldr	r1, [pc, #192]	; (8019b18 <tcp_rexmit_rto_prepare+0xd8>)
 8019a56:	4831      	ldr	r0, [pc, #196]	; (8019b1c <tcp_rexmit_rto_prepare+0xdc>)
 8019a58:	f005 f982 	bl	801ed60 <iprintf>

  if (pcb->unacked == NULL) {
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d102      	bne.n	8019a6a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8019a64:	f06f 0305 	mvn.w	r3, #5
 8019a68:	e050      	b.n	8019b0c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019a6e:	60fb      	str	r3, [r7, #12]
 8019a70:	e00b      	b.n	8019a8a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8019a72:	68f8      	ldr	r0, [r7, #12]
 8019a74:	f7ff fee6 	bl	8019844 <tcp_output_segment_busy>
 8019a78:	4603      	mov	r3, r0
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d002      	beq.n	8019a84 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8019a7e:	f06f 0305 	mvn.w	r3, #5
 8019a82:	e043      	b.n	8019b0c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	60fb      	str	r3, [r7, #12]
 8019a8a:	68fb      	ldr	r3, [r7, #12]
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d1ef      	bne.n	8019a72 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8019a92:	68f8      	ldr	r0, [r7, #12]
 8019a94:	f7ff fed6 	bl	8019844 <tcp_output_segment_busy>
 8019a98:	4603      	mov	r3, r0
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d002      	beq.n	8019aa4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8019a9e:	f06f 0305 	mvn.w	r3, #5
 8019aa2:	e033      	b.n	8019b0c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8019aa8:	68fb      	ldr	r3, [r7, #12]
 8019aaa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	2200      	movs	r2, #0
 8019ab8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	8b5b      	ldrh	r3, [r3, #26]
 8019abe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8019ac2:	b29a      	uxth	r2, r3
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019ac8:	68fb      	ldr	r3, [r7, #12]
 8019aca:	68db      	ldr	r3, [r3, #12]
 8019acc:	685b      	ldr	r3, [r3, #4]
 8019ace:	4618      	mov	r0, r3
 8019ad0:	f7f8 fd37 	bl	8012542 <lwip_htonl>
 8019ad4:	4604      	mov	r4, r0
 8019ad6:	68fb      	ldr	r3, [r7, #12]
 8019ad8:	891b      	ldrh	r3, [r3, #8]
 8019ada:	461d      	mov	r5, r3
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	68db      	ldr	r3, [r3, #12]
 8019ae0:	899b      	ldrh	r3, [r3, #12]
 8019ae2:	b29b      	uxth	r3, r3
 8019ae4:	4618      	mov	r0, r3
 8019ae6:	f7f8 fd17 	bl	8012518 <lwip_htons>
 8019aea:	4603      	mov	r3, r0
 8019aec:	b2db      	uxtb	r3, r3
 8019aee:	f003 0303 	and.w	r3, r3, #3
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d001      	beq.n	8019afa <tcp_rexmit_rto_prepare+0xba>
 8019af6:	2301      	movs	r3, #1
 8019af8:	e000      	b.n	8019afc <tcp_rexmit_rto_prepare+0xbc>
 8019afa:	2300      	movs	r3, #0
 8019afc:	442b      	add	r3, r5
 8019afe:	18e2      	adds	r2, r4, r3
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	2200      	movs	r2, #0
 8019b08:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8019b0a:	2300      	movs	r3, #0
}
 8019b0c:	4618      	mov	r0, r3
 8019b0e:	3710      	adds	r7, #16
 8019b10:	46bd      	mov	sp, r7
 8019b12:	bdb0      	pop	{r4, r5, r7, pc}
 8019b14:	080248b0 	.word	0x080248b0
 8019b18:	08024eec 	.word	0x08024eec
 8019b1c:	08024904 	.word	0x08024904

08019b20 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8019b20:	b580      	push	{r7, lr}
 8019b22:	b082      	sub	sp, #8
 8019b24:	af00      	add	r7, sp, #0
 8019b26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d106      	bne.n	8019b3c <tcp_rexmit_rto_commit+0x1c>
 8019b2e:	4b0d      	ldr	r3, [pc, #52]	; (8019b64 <tcp_rexmit_rto_commit+0x44>)
 8019b30:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8019b34:	490c      	ldr	r1, [pc, #48]	; (8019b68 <tcp_rexmit_rto_commit+0x48>)
 8019b36:	480d      	ldr	r0, [pc, #52]	; (8019b6c <tcp_rexmit_rto_commit+0x4c>)
 8019b38:	f005 f912 	bl	801ed60 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019b42:	2bff      	cmp	r3, #255	; 0xff
 8019b44:	d007      	beq.n	8019b56 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019b4c:	3301      	adds	r3, #1
 8019b4e:	b2da      	uxtb	r2, r3
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8019b56:	6878      	ldr	r0, [r7, #4]
 8019b58:	f7ff fc80 	bl	801945c <tcp_output>
}
 8019b5c:	bf00      	nop
 8019b5e:	3708      	adds	r7, #8
 8019b60:	46bd      	mov	sp, r7
 8019b62:	bd80      	pop	{r7, pc}
 8019b64:	080248b0 	.word	0x080248b0
 8019b68:	08024f10 	.word	0x08024f10
 8019b6c:	08024904 	.word	0x08024904

08019b70 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8019b70:	b580      	push	{r7, lr}
 8019b72:	b082      	sub	sp, #8
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	d106      	bne.n	8019b8c <tcp_rexmit_rto+0x1c>
 8019b7e:	4b0a      	ldr	r3, [pc, #40]	; (8019ba8 <tcp_rexmit_rto+0x38>)
 8019b80:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8019b84:	4909      	ldr	r1, [pc, #36]	; (8019bac <tcp_rexmit_rto+0x3c>)
 8019b86:	480a      	ldr	r0, [pc, #40]	; (8019bb0 <tcp_rexmit_rto+0x40>)
 8019b88:	f005 f8ea 	bl	801ed60 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8019b8c:	6878      	ldr	r0, [r7, #4]
 8019b8e:	f7ff ff57 	bl	8019a40 <tcp_rexmit_rto_prepare>
 8019b92:	4603      	mov	r3, r0
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d102      	bne.n	8019b9e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8019b98:	6878      	ldr	r0, [r7, #4]
 8019b9a:	f7ff ffc1 	bl	8019b20 <tcp_rexmit_rto_commit>
  }
}
 8019b9e:	bf00      	nop
 8019ba0:	3708      	adds	r7, #8
 8019ba2:	46bd      	mov	sp, r7
 8019ba4:	bd80      	pop	{r7, pc}
 8019ba6:	bf00      	nop
 8019ba8:	080248b0 	.word	0x080248b0
 8019bac:	08024f34 	.word	0x08024f34
 8019bb0:	08024904 	.word	0x08024904

08019bb4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8019bb4:	b590      	push	{r4, r7, lr}
 8019bb6:	b085      	sub	sp, #20
 8019bb8:	af00      	add	r7, sp, #0
 8019bba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d106      	bne.n	8019bd0 <tcp_rexmit+0x1c>
 8019bc2:	4b2f      	ldr	r3, [pc, #188]	; (8019c80 <tcp_rexmit+0xcc>)
 8019bc4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8019bc8:	492e      	ldr	r1, [pc, #184]	; (8019c84 <tcp_rexmit+0xd0>)
 8019bca:	482f      	ldr	r0, [pc, #188]	; (8019c88 <tcp_rexmit+0xd4>)
 8019bcc:	f005 f8c8 	bl	801ed60 <iprintf>

  if (pcb->unacked == NULL) {
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d102      	bne.n	8019bde <tcp_rexmit+0x2a>
    return ERR_VAL;
 8019bd8:	f06f 0305 	mvn.w	r3, #5
 8019bdc:	e04c      	b.n	8019c78 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019be2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8019be4:	68b8      	ldr	r0, [r7, #8]
 8019be6:	f7ff fe2d 	bl	8019844 <tcp_output_segment_busy>
 8019bea:	4603      	mov	r3, r0
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d002      	beq.n	8019bf6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8019bf0:	f06f 0305 	mvn.w	r3, #5
 8019bf4:	e040      	b.n	8019c78 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8019bf6:	68bb      	ldr	r3, [r7, #8]
 8019bf8:	681a      	ldr	r2, [r3, #0]
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	336c      	adds	r3, #108	; 0x6c
 8019c02:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019c04:	e002      	b.n	8019c0c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	681b      	ldr	r3, [r3, #0]
 8019c0a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019c0c:	68fb      	ldr	r3, [r7, #12]
 8019c0e:	681b      	ldr	r3, [r3, #0]
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d011      	beq.n	8019c38 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019c14:	68fb      	ldr	r3, [r7, #12]
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	68db      	ldr	r3, [r3, #12]
 8019c1a:	685b      	ldr	r3, [r3, #4]
 8019c1c:	4618      	mov	r0, r3
 8019c1e:	f7f8 fc90 	bl	8012542 <lwip_htonl>
 8019c22:	4604      	mov	r4, r0
 8019c24:	68bb      	ldr	r3, [r7, #8]
 8019c26:	68db      	ldr	r3, [r3, #12]
 8019c28:	685b      	ldr	r3, [r3, #4]
 8019c2a:	4618      	mov	r0, r3
 8019c2c:	f7f8 fc89 	bl	8012542 <lwip_htonl>
 8019c30:	4603      	mov	r3, r0
 8019c32:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	dbe6      	blt.n	8019c06 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8019c38:	68fb      	ldr	r3, [r7, #12]
 8019c3a:	681a      	ldr	r2, [r3, #0]
 8019c3c:	68bb      	ldr	r3, [r7, #8]
 8019c3e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8019c40:	68fb      	ldr	r3, [r7, #12]
 8019c42:	68ba      	ldr	r2, [r7, #8]
 8019c44:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8019c46:	68bb      	ldr	r3, [r7, #8]
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d103      	bne.n	8019c56 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	2200      	movs	r2, #0
 8019c52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019c5c:	2bff      	cmp	r3, #255	; 0xff
 8019c5e:	d007      	beq.n	8019c70 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019c66:	3301      	adds	r3, #1
 8019c68:	b2da      	uxtb	r2, r3
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	2200      	movs	r2, #0
 8019c74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8019c76:	2300      	movs	r3, #0
}
 8019c78:	4618      	mov	r0, r3
 8019c7a:	3714      	adds	r7, #20
 8019c7c:	46bd      	mov	sp, r7
 8019c7e:	bd90      	pop	{r4, r7, pc}
 8019c80:	080248b0 	.word	0x080248b0
 8019c84:	08024f50 	.word	0x08024f50
 8019c88:	08024904 	.word	0x08024904

08019c8c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8019c8c:	b580      	push	{r7, lr}
 8019c8e:	b082      	sub	sp, #8
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	2b00      	cmp	r3, #0
 8019c98:	d106      	bne.n	8019ca8 <tcp_rexmit_fast+0x1c>
 8019c9a:	4b2a      	ldr	r3, [pc, #168]	; (8019d44 <tcp_rexmit_fast+0xb8>)
 8019c9c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8019ca0:	4929      	ldr	r1, [pc, #164]	; (8019d48 <tcp_rexmit_fast+0xbc>)
 8019ca2:	482a      	ldr	r0, [pc, #168]	; (8019d4c <tcp_rexmit_fast+0xc0>)
 8019ca4:	f005 f85c 	bl	801ed60 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	d044      	beq.n	8019d3a <tcp_rexmit_fast+0xae>
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	8b5b      	ldrh	r3, [r3, #26]
 8019cb4:	f003 0304 	and.w	r3, r3, #4
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d13e      	bne.n	8019d3a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8019cbc:	6878      	ldr	r0, [r7, #4]
 8019cbe:	f7ff ff79 	bl	8019bb4 <tcp_rexmit>
 8019cc2:	4603      	mov	r3, r0
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	d138      	bne.n	8019d3a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019cd4:	4293      	cmp	r3, r2
 8019cd6:	bf28      	it	cs
 8019cd8:	4613      	movcs	r3, r2
 8019cda:	b29b      	uxth	r3, r3
 8019cdc:	0fda      	lsrs	r2, r3, #31
 8019cde:	4413      	add	r3, r2
 8019ce0:	105b      	asrs	r3, r3, #1
 8019ce2:	b29a      	uxth	r2, r3
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8019cf0:	461a      	mov	r2, r3
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019cf6:	005b      	lsls	r3, r3, #1
 8019cf8:	429a      	cmp	r2, r3
 8019cfa:	d206      	bcs.n	8019d0a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019d00:	005b      	lsls	r3, r3, #1
 8019d02:	b29a      	uxth	r2, r3
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019d14:	4619      	mov	r1, r3
 8019d16:	0049      	lsls	r1, r1, #1
 8019d18:	440b      	add	r3, r1
 8019d1a:	b29b      	uxth	r3, r3
 8019d1c:	4413      	add	r3, r2
 8019d1e:	b29a      	uxth	r2, r3
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	8b5b      	ldrh	r3, [r3, #26]
 8019d2a:	f043 0304 	orr.w	r3, r3, #4
 8019d2e:	b29a      	uxth	r2, r3
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	2200      	movs	r2, #0
 8019d38:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8019d3a:	bf00      	nop
 8019d3c:	3708      	adds	r7, #8
 8019d3e:	46bd      	mov	sp, r7
 8019d40:	bd80      	pop	{r7, pc}
 8019d42:	bf00      	nop
 8019d44:	080248b0 	.word	0x080248b0
 8019d48:	08024f68 	.word	0x08024f68
 8019d4c:	08024904 	.word	0x08024904

08019d50 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8019d50:	b580      	push	{r7, lr}
 8019d52:	b086      	sub	sp, #24
 8019d54:	af00      	add	r7, sp, #0
 8019d56:	60f8      	str	r0, [r7, #12]
 8019d58:	607b      	str	r3, [r7, #4]
 8019d5a:	460b      	mov	r3, r1
 8019d5c:	817b      	strh	r3, [r7, #10]
 8019d5e:	4613      	mov	r3, r2
 8019d60:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8019d62:	897a      	ldrh	r2, [r7, #10]
 8019d64:	893b      	ldrh	r3, [r7, #8]
 8019d66:	4413      	add	r3, r2
 8019d68:	b29b      	uxth	r3, r3
 8019d6a:	3314      	adds	r3, #20
 8019d6c:	b29b      	uxth	r3, r3
 8019d6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019d72:	4619      	mov	r1, r3
 8019d74:	2022      	movs	r0, #34	; 0x22
 8019d76:	f7f9 fca7 	bl	80136c8 <pbuf_alloc>
 8019d7a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8019d7c:	697b      	ldr	r3, [r7, #20]
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d04d      	beq.n	8019e1e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8019d82:	897b      	ldrh	r3, [r7, #10]
 8019d84:	3313      	adds	r3, #19
 8019d86:	697a      	ldr	r2, [r7, #20]
 8019d88:	8952      	ldrh	r2, [r2, #10]
 8019d8a:	4293      	cmp	r3, r2
 8019d8c:	db06      	blt.n	8019d9c <tcp_output_alloc_header_common+0x4c>
 8019d8e:	4b26      	ldr	r3, [pc, #152]	; (8019e28 <tcp_output_alloc_header_common+0xd8>)
 8019d90:	f240 7223 	movw	r2, #1827	; 0x723
 8019d94:	4925      	ldr	r1, [pc, #148]	; (8019e2c <tcp_output_alloc_header_common+0xdc>)
 8019d96:	4826      	ldr	r0, [pc, #152]	; (8019e30 <tcp_output_alloc_header_common+0xe0>)
 8019d98:	f004 ffe2 	bl	801ed60 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8019d9c:	697b      	ldr	r3, [r7, #20]
 8019d9e:	685b      	ldr	r3, [r3, #4]
 8019da0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8019da2:	8c3b      	ldrh	r3, [r7, #32]
 8019da4:	4618      	mov	r0, r3
 8019da6:	f7f8 fbb7 	bl	8012518 <lwip_htons>
 8019daa:	4603      	mov	r3, r0
 8019dac:	461a      	mov	r2, r3
 8019dae:	693b      	ldr	r3, [r7, #16]
 8019db0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8019db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019db4:	4618      	mov	r0, r3
 8019db6:	f7f8 fbaf 	bl	8012518 <lwip_htons>
 8019dba:	4603      	mov	r3, r0
 8019dbc:	461a      	mov	r2, r3
 8019dbe:	693b      	ldr	r3, [r7, #16]
 8019dc0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8019dc2:	693b      	ldr	r3, [r7, #16]
 8019dc4:	687a      	ldr	r2, [r7, #4]
 8019dc6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8019dc8:	68f8      	ldr	r0, [r7, #12]
 8019dca:	f7f8 fbba 	bl	8012542 <lwip_htonl>
 8019dce:	4602      	mov	r2, r0
 8019dd0:	693b      	ldr	r3, [r7, #16]
 8019dd2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8019dd4:	897b      	ldrh	r3, [r7, #10]
 8019dd6:	089b      	lsrs	r3, r3, #2
 8019dd8:	b29b      	uxth	r3, r3
 8019dda:	3305      	adds	r3, #5
 8019ddc:	b29b      	uxth	r3, r3
 8019dde:	031b      	lsls	r3, r3, #12
 8019de0:	b29a      	uxth	r2, r3
 8019de2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019de6:	b29b      	uxth	r3, r3
 8019de8:	4313      	orrs	r3, r2
 8019dea:	b29b      	uxth	r3, r3
 8019dec:	4618      	mov	r0, r3
 8019dee:	f7f8 fb93 	bl	8012518 <lwip_htons>
 8019df2:	4603      	mov	r3, r0
 8019df4:	461a      	mov	r2, r3
 8019df6:	693b      	ldr	r3, [r7, #16]
 8019df8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8019dfa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8019dfc:	4618      	mov	r0, r3
 8019dfe:	f7f8 fb8b 	bl	8012518 <lwip_htons>
 8019e02:	4603      	mov	r3, r0
 8019e04:	461a      	mov	r2, r3
 8019e06:	693b      	ldr	r3, [r7, #16]
 8019e08:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8019e0a:	693b      	ldr	r3, [r7, #16]
 8019e0c:	2200      	movs	r2, #0
 8019e0e:	741a      	strb	r2, [r3, #16]
 8019e10:	2200      	movs	r2, #0
 8019e12:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8019e14:	693b      	ldr	r3, [r7, #16]
 8019e16:	2200      	movs	r2, #0
 8019e18:	749a      	strb	r2, [r3, #18]
 8019e1a:	2200      	movs	r2, #0
 8019e1c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8019e1e:	697b      	ldr	r3, [r7, #20]
}
 8019e20:	4618      	mov	r0, r3
 8019e22:	3718      	adds	r7, #24
 8019e24:	46bd      	mov	sp, r7
 8019e26:	bd80      	pop	{r7, pc}
 8019e28:	080248b0 	.word	0x080248b0
 8019e2c:	08024f88 	.word	0x08024f88
 8019e30:	08024904 	.word	0x08024904

08019e34 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8019e34:	b5b0      	push	{r4, r5, r7, lr}
 8019e36:	b08a      	sub	sp, #40	; 0x28
 8019e38:	af04      	add	r7, sp, #16
 8019e3a:	60f8      	str	r0, [r7, #12]
 8019e3c:	607b      	str	r3, [r7, #4]
 8019e3e:	460b      	mov	r3, r1
 8019e40:	817b      	strh	r3, [r7, #10]
 8019e42:	4613      	mov	r3, r2
 8019e44:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d106      	bne.n	8019e5a <tcp_output_alloc_header+0x26>
 8019e4c:	4b15      	ldr	r3, [pc, #84]	; (8019ea4 <tcp_output_alloc_header+0x70>)
 8019e4e:	f240 7242 	movw	r2, #1858	; 0x742
 8019e52:	4915      	ldr	r1, [pc, #84]	; (8019ea8 <tcp_output_alloc_header+0x74>)
 8019e54:	4815      	ldr	r0, [pc, #84]	; (8019eac <tcp_output_alloc_header+0x78>)
 8019e56:	f004 ff83 	bl	801ed60 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8019e5a:	68fb      	ldr	r3, [r7, #12]
 8019e5c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8019e5e:	68fb      	ldr	r3, [r7, #12]
 8019e60:	8adb      	ldrh	r3, [r3, #22]
 8019e62:	68fa      	ldr	r2, [r7, #12]
 8019e64:	8b12      	ldrh	r2, [r2, #24]
 8019e66:	68f9      	ldr	r1, [r7, #12]
 8019e68:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8019e6a:	893d      	ldrh	r5, [r7, #8]
 8019e6c:	897c      	ldrh	r4, [r7, #10]
 8019e6e:	9103      	str	r1, [sp, #12]
 8019e70:	2110      	movs	r1, #16
 8019e72:	9102      	str	r1, [sp, #8]
 8019e74:	9201      	str	r2, [sp, #4]
 8019e76:	9300      	str	r3, [sp, #0]
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	462a      	mov	r2, r5
 8019e7c:	4621      	mov	r1, r4
 8019e7e:	f7ff ff67 	bl	8019d50 <tcp_output_alloc_header_common>
 8019e82:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8019e84:	697b      	ldr	r3, [r7, #20]
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	d006      	beq.n	8019e98 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019e8a:	68fb      	ldr	r3, [r7, #12]
 8019e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e8e:	68fa      	ldr	r2, [r7, #12]
 8019e90:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8019e92:	441a      	add	r2, r3
 8019e94:	68fb      	ldr	r3, [r7, #12]
 8019e96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8019e98:	697b      	ldr	r3, [r7, #20]
}
 8019e9a:	4618      	mov	r0, r3
 8019e9c:	3718      	adds	r7, #24
 8019e9e:	46bd      	mov	sp, r7
 8019ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8019ea2:	bf00      	nop
 8019ea4:	080248b0 	.word	0x080248b0
 8019ea8:	08024fb8 	.word	0x08024fb8
 8019eac:	08024904 	.word	0x08024904

08019eb0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8019eb0:	b580      	push	{r7, lr}
 8019eb2:	b088      	sub	sp, #32
 8019eb4:	af00      	add	r7, sp, #0
 8019eb6:	60f8      	str	r0, [r7, #12]
 8019eb8:	60b9      	str	r1, [r7, #8]
 8019eba:	4611      	mov	r1, r2
 8019ebc:	461a      	mov	r2, r3
 8019ebe:	460b      	mov	r3, r1
 8019ec0:	71fb      	strb	r3, [r7, #7]
 8019ec2:	4613      	mov	r3, r2
 8019ec4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8019ec6:	2300      	movs	r3, #0
 8019ec8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8019eca:	68bb      	ldr	r3, [r7, #8]
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d106      	bne.n	8019ede <tcp_output_fill_options+0x2e>
 8019ed0:	4b13      	ldr	r3, [pc, #76]	; (8019f20 <tcp_output_fill_options+0x70>)
 8019ed2:	f240 7256 	movw	r2, #1878	; 0x756
 8019ed6:	4913      	ldr	r1, [pc, #76]	; (8019f24 <tcp_output_fill_options+0x74>)
 8019ed8:	4813      	ldr	r0, [pc, #76]	; (8019f28 <tcp_output_fill_options+0x78>)
 8019eda:	f004 ff41 	bl	801ed60 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8019ede:	68bb      	ldr	r3, [r7, #8]
 8019ee0:	685b      	ldr	r3, [r3, #4]
 8019ee2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8019ee4:	69bb      	ldr	r3, [r7, #24]
 8019ee6:	3314      	adds	r3, #20
 8019ee8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8019eea:	69bb      	ldr	r3, [r7, #24]
 8019eec:	f103 0214 	add.w	r2, r3, #20
 8019ef0:	8bfb      	ldrh	r3, [r7, #30]
 8019ef2:	009b      	lsls	r3, r3, #2
 8019ef4:	4619      	mov	r1, r3
 8019ef6:	79fb      	ldrb	r3, [r7, #7]
 8019ef8:	009b      	lsls	r3, r3, #2
 8019efa:	f003 0304 	and.w	r3, r3, #4
 8019efe:	440b      	add	r3, r1
 8019f00:	4413      	add	r3, r2
 8019f02:	697a      	ldr	r2, [r7, #20]
 8019f04:	429a      	cmp	r2, r3
 8019f06:	d006      	beq.n	8019f16 <tcp_output_fill_options+0x66>
 8019f08:	4b05      	ldr	r3, [pc, #20]	; (8019f20 <tcp_output_fill_options+0x70>)
 8019f0a:	f240 7275 	movw	r2, #1909	; 0x775
 8019f0e:	4907      	ldr	r1, [pc, #28]	; (8019f2c <tcp_output_fill_options+0x7c>)
 8019f10:	4805      	ldr	r0, [pc, #20]	; (8019f28 <tcp_output_fill_options+0x78>)
 8019f12:	f004 ff25 	bl	801ed60 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8019f16:	bf00      	nop
 8019f18:	3720      	adds	r7, #32
 8019f1a:	46bd      	mov	sp, r7
 8019f1c:	bd80      	pop	{r7, pc}
 8019f1e:	bf00      	nop
 8019f20:	080248b0 	.word	0x080248b0
 8019f24:	08024fe0 	.word	0x08024fe0
 8019f28:	08024904 	.word	0x08024904
 8019f2c:	08024ed8 	.word	0x08024ed8

08019f30 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8019f30:	b580      	push	{r7, lr}
 8019f32:	b08a      	sub	sp, #40	; 0x28
 8019f34:	af04      	add	r7, sp, #16
 8019f36:	60f8      	str	r0, [r7, #12]
 8019f38:	60b9      	str	r1, [r7, #8]
 8019f3a:	607a      	str	r2, [r7, #4]
 8019f3c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8019f3e:	68bb      	ldr	r3, [r7, #8]
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d106      	bne.n	8019f52 <tcp_output_control_segment+0x22>
 8019f44:	4b1c      	ldr	r3, [pc, #112]	; (8019fb8 <tcp_output_control_segment+0x88>)
 8019f46:	f240 7287 	movw	r2, #1927	; 0x787
 8019f4a:	491c      	ldr	r1, [pc, #112]	; (8019fbc <tcp_output_control_segment+0x8c>)
 8019f4c:	481c      	ldr	r0, [pc, #112]	; (8019fc0 <tcp_output_control_segment+0x90>)
 8019f4e:	f004 ff07 	bl	801ed60 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8019f52:	683a      	ldr	r2, [r7, #0]
 8019f54:	6879      	ldr	r1, [r7, #4]
 8019f56:	68f8      	ldr	r0, [r7, #12]
 8019f58:	f7fe fae8 	bl	801852c <tcp_route>
 8019f5c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8019f5e:	693b      	ldr	r3, [r7, #16]
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d102      	bne.n	8019f6a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8019f64:	23fc      	movs	r3, #252	; 0xfc
 8019f66:	75fb      	strb	r3, [r7, #23]
 8019f68:	e01c      	b.n	8019fa4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d006      	beq.n	8019f7e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8019f70:	68fb      	ldr	r3, [r7, #12]
 8019f72:	7adb      	ldrb	r3, [r3, #11]
 8019f74:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8019f76:	68fb      	ldr	r3, [r7, #12]
 8019f78:	7a9b      	ldrb	r3, [r3, #10]
 8019f7a:	757b      	strb	r3, [r7, #21]
 8019f7c:	e003      	b.n	8019f86 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8019f7e:	23ff      	movs	r3, #255	; 0xff
 8019f80:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8019f82:	2300      	movs	r3, #0
 8019f84:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8019f86:	7dba      	ldrb	r2, [r7, #22]
 8019f88:	693b      	ldr	r3, [r7, #16]
 8019f8a:	9302      	str	r3, [sp, #8]
 8019f8c:	2306      	movs	r3, #6
 8019f8e:	9301      	str	r3, [sp, #4]
 8019f90:	7d7b      	ldrb	r3, [r7, #21]
 8019f92:	9300      	str	r3, [sp, #0]
 8019f94:	4613      	mov	r3, r2
 8019f96:	683a      	ldr	r2, [r7, #0]
 8019f98:	6879      	ldr	r1, [r7, #4]
 8019f9a:	68b8      	ldr	r0, [r7, #8]
 8019f9c:	f002 fad0 	bl	801c540 <ip4_output_if>
 8019fa0:	4603      	mov	r3, r0
 8019fa2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8019fa4:	68b8      	ldr	r0, [r7, #8]
 8019fa6:	f7f9 fe73 	bl	8013c90 <pbuf_free>
  return err;
 8019faa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019fae:	4618      	mov	r0, r3
 8019fb0:	3718      	adds	r7, #24
 8019fb2:	46bd      	mov	sp, r7
 8019fb4:	bd80      	pop	{r7, pc}
 8019fb6:	bf00      	nop
 8019fb8:	080248b0 	.word	0x080248b0
 8019fbc:	08025008 	.word	0x08025008
 8019fc0:	08024904 	.word	0x08024904

08019fc4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8019fc4:	b590      	push	{r4, r7, lr}
 8019fc6:	b08b      	sub	sp, #44	; 0x2c
 8019fc8:	af04      	add	r7, sp, #16
 8019fca:	60f8      	str	r0, [r7, #12]
 8019fcc:	60b9      	str	r1, [r7, #8]
 8019fce:	607a      	str	r2, [r7, #4]
 8019fd0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8019fd2:	683b      	ldr	r3, [r7, #0]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d106      	bne.n	8019fe6 <tcp_rst+0x22>
 8019fd8:	4b1f      	ldr	r3, [pc, #124]	; (801a058 <tcp_rst+0x94>)
 8019fda:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8019fde:	491f      	ldr	r1, [pc, #124]	; (801a05c <tcp_rst+0x98>)
 8019fe0:	481f      	ldr	r0, [pc, #124]	; (801a060 <tcp_rst+0x9c>)
 8019fe2:	f004 febd 	bl	801ed60 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8019fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	d106      	bne.n	8019ffa <tcp_rst+0x36>
 8019fec:	4b1a      	ldr	r3, [pc, #104]	; (801a058 <tcp_rst+0x94>)
 8019fee:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8019ff2:	491c      	ldr	r1, [pc, #112]	; (801a064 <tcp_rst+0xa0>)
 8019ff4:	481a      	ldr	r0, [pc, #104]	; (801a060 <tcp_rst+0x9c>)
 8019ff6:	f004 feb3 	bl	801ed60 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019ffa:	2300      	movs	r3, #0
 8019ffc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8019ffe:	f246 0308 	movw	r3, #24584	; 0x6008
 801a002:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801a004:	7dfb      	ldrb	r3, [r7, #23]
 801a006:	b29c      	uxth	r4, r3
 801a008:	68b8      	ldr	r0, [r7, #8]
 801a00a:	f7f8 fa9a 	bl	8012542 <lwip_htonl>
 801a00e:	4602      	mov	r2, r0
 801a010:	8abb      	ldrh	r3, [r7, #20]
 801a012:	9303      	str	r3, [sp, #12]
 801a014:	2314      	movs	r3, #20
 801a016:	9302      	str	r3, [sp, #8]
 801a018:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801a01a:	9301      	str	r3, [sp, #4]
 801a01c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a01e:	9300      	str	r3, [sp, #0]
 801a020:	4613      	mov	r3, r2
 801a022:	2200      	movs	r2, #0
 801a024:	4621      	mov	r1, r4
 801a026:	6878      	ldr	r0, [r7, #4]
 801a028:	f7ff fe92 	bl	8019d50 <tcp_output_alloc_header_common>
 801a02c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801a02e:	693b      	ldr	r3, [r7, #16]
 801a030:	2b00      	cmp	r3, #0
 801a032:	d00c      	beq.n	801a04e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a034:	7dfb      	ldrb	r3, [r7, #23]
 801a036:	2200      	movs	r2, #0
 801a038:	6939      	ldr	r1, [r7, #16]
 801a03a:	68f8      	ldr	r0, [r7, #12]
 801a03c:	f7ff ff38 	bl	8019eb0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a042:	683a      	ldr	r2, [r7, #0]
 801a044:	6939      	ldr	r1, [r7, #16]
 801a046:	68f8      	ldr	r0, [r7, #12]
 801a048:	f7ff ff72 	bl	8019f30 <tcp_output_control_segment>
 801a04c:	e000      	b.n	801a050 <tcp_rst+0x8c>
    return;
 801a04e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a050:	371c      	adds	r7, #28
 801a052:	46bd      	mov	sp, r7
 801a054:	bd90      	pop	{r4, r7, pc}
 801a056:	bf00      	nop
 801a058:	080248b0 	.word	0x080248b0
 801a05c:	08025034 	.word	0x08025034
 801a060:	08024904 	.word	0x08024904
 801a064:	08025050 	.word	0x08025050

0801a068 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801a068:	b590      	push	{r4, r7, lr}
 801a06a:	b087      	sub	sp, #28
 801a06c:	af00      	add	r7, sp, #0
 801a06e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801a070:	2300      	movs	r3, #0
 801a072:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801a074:	2300      	movs	r3, #0
 801a076:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	d106      	bne.n	801a08c <tcp_send_empty_ack+0x24>
 801a07e:	4b28      	ldr	r3, [pc, #160]	; (801a120 <tcp_send_empty_ack+0xb8>)
 801a080:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801a084:	4927      	ldr	r1, [pc, #156]	; (801a124 <tcp_send_empty_ack+0xbc>)
 801a086:	4828      	ldr	r0, [pc, #160]	; (801a128 <tcp_send_empty_ack+0xc0>)
 801a088:	f004 fe6a 	bl	801ed60 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a08c:	7dfb      	ldrb	r3, [r7, #23]
 801a08e:	009b      	lsls	r3, r3, #2
 801a090:	b2db      	uxtb	r3, r3
 801a092:	f003 0304 	and.w	r3, r3, #4
 801a096:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801a098:	7d7b      	ldrb	r3, [r7, #21]
 801a09a:	b29c      	uxth	r4, r3
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a0a0:	4618      	mov	r0, r3
 801a0a2:	f7f8 fa4e 	bl	8012542 <lwip_htonl>
 801a0a6:	4603      	mov	r3, r0
 801a0a8:	2200      	movs	r2, #0
 801a0aa:	4621      	mov	r1, r4
 801a0ac:	6878      	ldr	r0, [r7, #4]
 801a0ae:	f7ff fec1 	bl	8019e34 <tcp_output_alloc_header>
 801a0b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a0b4:	693b      	ldr	r3, [r7, #16]
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d109      	bne.n	801a0ce <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	8b5b      	ldrh	r3, [r3, #26]
 801a0be:	f043 0303 	orr.w	r3, r3, #3
 801a0c2:	b29a      	uxth	r2, r3
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801a0c8:	f06f 0301 	mvn.w	r3, #1
 801a0cc:	e023      	b.n	801a116 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801a0ce:	7dbb      	ldrb	r3, [r7, #22]
 801a0d0:	7dfa      	ldrb	r2, [r7, #23]
 801a0d2:	6939      	ldr	r1, [r7, #16]
 801a0d4:	6878      	ldr	r0, [r7, #4]
 801a0d6:	f7ff feeb 	bl	8019eb0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a0da:	687a      	ldr	r2, [r7, #4]
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	3304      	adds	r3, #4
 801a0e0:	6939      	ldr	r1, [r7, #16]
 801a0e2:	6878      	ldr	r0, [r7, #4]
 801a0e4:	f7ff ff24 	bl	8019f30 <tcp_output_control_segment>
 801a0e8:	4603      	mov	r3, r0
 801a0ea:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801a0ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d007      	beq.n	801a104 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	8b5b      	ldrh	r3, [r3, #26]
 801a0f8:	f043 0303 	orr.w	r3, r3, #3
 801a0fc:	b29a      	uxth	r2, r3
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	835a      	strh	r2, [r3, #26]
 801a102:	e006      	b.n	801a112 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	8b5b      	ldrh	r3, [r3, #26]
 801a108:	f023 0303 	bic.w	r3, r3, #3
 801a10c:	b29a      	uxth	r2, r3
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801a112:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a116:	4618      	mov	r0, r3
 801a118:	371c      	adds	r7, #28
 801a11a:	46bd      	mov	sp, r7
 801a11c:	bd90      	pop	{r4, r7, pc}
 801a11e:	bf00      	nop
 801a120:	080248b0 	.word	0x080248b0
 801a124:	0802506c 	.word	0x0802506c
 801a128:	08024904 	.word	0x08024904

0801a12c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801a12c:	b590      	push	{r4, r7, lr}
 801a12e:	b087      	sub	sp, #28
 801a130:	af00      	add	r7, sp, #0
 801a132:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a134:	2300      	movs	r3, #0
 801a136:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d106      	bne.n	801a14c <tcp_keepalive+0x20>
 801a13e:	4b18      	ldr	r3, [pc, #96]	; (801a1a0 <tcp_keepalive+0x74>)
 801a140:	f640 0224 	movw	r2, #2084	; 0x824
 801a144:	4917      	ldr	r1, [pc, #92]	; (801a1a4 <tcp_keepalive+0x78>)
 801a146:	4818      	ldr	r0, [pc, #96]	; (801a1a8 <tcp_keepalive+0x7c>)
 801a148:	f004 fe0a 	bl	801ed60 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801a14c:	7dfb      	ldrb	r3, [r7, #23]
 801a14e:	b29c      	uxth	r4, r3
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a154:	3b01      	subs	r3, #1
 801a156:	4618      	mov	r0, r3
 801a158:	f7f8 f9f3 	bl	8012542 <lwip_htonl>
 801a15c:	4603      	mov	r3, r0
 801a15e:	2200      	movs	r2, #0
 801a160:	4621      	mov	r1, r4
 801a162:	6878      	ldr	r0, [r7, #4]
 801a164:	f7ff fe66 	bl	8019e34 <tcp_output_alloc_header>
 801a168:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a16a:	693b      	ldr	r3, [r7, #16]
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d102      	bne.n	801a176 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801a170:	f04f 33ff 	mov.w	r3, #4294967295
 801a174:	e010      	b.n	801a198 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a176:	7dfb      	ldrb	r3, [r7, #23]
 801a178:	2200      	movs	r2, #0
 801a17a:	6939      	ldr	r1, [r7, #16]
 801a17c:	6878      	ldr	r0, [r7, #4]
 801a17e:	f7ff fe97 	bl	8019eb0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a182:	687a      	ldr	r2, [r7, #4]
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	3304      	adds	r3, #4
 801a188:	6939      	ldr	r1, [r7, #16]
 801a18a:	6878      	ldr	r0, [r7, #4]
 801a18c:	f7ff fed0 	bl	8019f30 <tcp_output_control_segment>
 801a190:	4603      	mov	r3, r0
 801a192:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a194:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a198:	4618      	mov	r0, r3
 801a19a:	371c      	adds	r7, #28
 801a19c:	46bd      	mov	sp, r7
 801a19e:	bd90      	pop	{r4, r7, pc}
 801a1a0:	080248b0 	.word	0x080248b0
 801a1a4:	0802508c 	.word	0x0802508c
 801a1a8:	08024904 	.word	0x08024904

0801a1ac <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801a1ac:	b590      	push	{r4, r7, lr}
 801a1ae:	b08b      	sub	sp, #44	; 0x2c
 801a1b0:	af00      	add	r7, sp, #0
 801a1b2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801a1ba:	687b      	ldr	r3, [r7, #4]
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	d106      	bne.n	801a1ce <tcp_zero_window_probe+0x22>
 801a1c0:	4b4c      	ldr	r3, [pc, #304]	; (801a2f4 <tcp_zero_window_probe+0x148>)
 801a1c2:	f640 024f 	movw	r2, #2127	; 0x84f
 801a1c6:	494c      	ldr	r1, [pc, #304]	; (801a2f8 <tcp_zero_window_probe+0x14c>)
 801a1c8:	484c      	ldr	r0, [pc, #304]	; (801a2fc <tcp_zero_window_probe+0x150>)
 801a1ca:	f004 fdc9 	bl	801ed60 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a1d2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801a1d4:	6a3b      	ldr	r3, [r7, #32]
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d101      	bne.n	801a1de <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801a1da:	2300      	movs	r3, #0
 801a1dc:	e086      	b.n	801a2ec <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a1e4:	2bff      	cmp	r3, #255	; 0xff
 801a1e6:	d007      	beq.n	801a1f8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a1ee:	3301      	adds	r3, #1
 801a1f0:	b2da      	uxtb	r2, r3
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801a1f8:	6a3b      	ldr	r3, [r7, #32]
 801a1fa:	68db      	ldr	r3, [r3, #12]
 801a1fc:	899b      	ldrh	r3, [r3, #12]
 801a1fe:	b29b      	uxth	r3, r3
 801a200:	4618      	mov	r0, r3
 801a202:	f7f8 f989 	bl	8012518 <lwip_htons>
 801a206:	4603      	mov	r3, r0
 801a208:	b2db      	uxtb	r3, r3
 801a20a:	f003 0301 	and.w	r3, r3, #1
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d005      	beq.n	801a21e <tcp_zero_window_probe+0x72>
 801a212:	6a3b      	ldr	r3, [r7, #32]
 801a214:	891b      	ldrh	r3, [r3, #8]
 801a216:	2b00      	cmp	r3, #0
 801a218:	d101      	bne.n	801a21e <tcp_zero_window_probe+0x72>
 801a21a:	2301      	movs	r3, #1
 801a21c:	e000      	b.n	801a220 <tcp_zero_window_probe+0x74>
 801a21e:	2300      	movs	r3, #0
 801a220:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801a222:	7ffb      	ldrb	r3, [r7, #31]
 801a224:	2b00      	cmp	r3, #0
 801a226:	bf0c      	ite	eq
 801a228:	2301      	moveq	r3, #1
 801a22a:	2300      	movne	r3, #0
 801a22c:	b2db      	uxtb	r3, r3
 801a22e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801a230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a234:	b299      	uxth	r1, r3
 801a236:	6a3b      	ldr	r3, [r7, #32]
 801a238:	68db      	ldr	r3, [r3, #12]
 801a23a:	685b      	ldr	r3, [r3, #4]
 801a23c:	8bba      	ldrh	r2, [r7, #28]
 801a23e:	6878      	ldr	r0, [r7, #4]
 801a240:	f7ff fdf8 	bl	8019e34 <tcp_output_alloc_header>
 801a244:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801a246:	69bb      	ldr	r3, [r7, #24]
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d102      	bne.n	801a252 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801a24c:	f04f 33ff 	mov.w	r3, #4294967295
 801a250:	e04c      	b.n	801a2ec <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801a252:	69bb      	ldr	r3, [r7, #24]
 801a254:	685b      	ldr	r3, [r3, #4]
 801a256:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801a258:	7ffb      	ldrb	r3, [r7, #31]
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d011      	beq.n	801a282 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801a25e:	697b      	ldr	r3, [r7, #20]
 801a260:	899b      	ldrh	r3, [r3, #12]
 801a262:	b29b      	uxth	r3, r3
 801a264:	b21b      	sxth	r3, r3
 801a266:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a26a:	b21c      	sxth	r4, r3
 801a26c:	2011      	movs	r0, #17
 801a26e:	f7f8 f953 	bl	8012518 <lwip_htons>
 801a272:	4603      	mov	r3, r0
 801a274:	b21b      	sxth	r3, r3
 801a276:	4323      	orrs	r3, r4
 801a278:	b21b      	sxth	r3, r3
 801a27a:	b29a      	uxth	r2, r3
 801a27c:	697b      	ldr	r3, [r7, #20]
 801a27e:	819a      	strh	r2, [r3, #12]
 801a280:	e010      	b.n	801a2a4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801a282:	69bb      	ldr	r3, [r7, #24]
 801a284:	685b      	ldr	r3, [r3, #4]
 801a286:	3314      	adds	r3, #20
 801a288:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801a28a:	6a3b      	ldr	r3, [r7, #32]
 801a28c:	6858      	ldr	r0, [r3, #4]
 801a28e:	6a3b      	ldr	r3, [r7, #32]
 801a290:	685b      	ldr	r3, [r3, #4]
 801a292:	891a      	ldrh	r2, [r3, #8]
 801a294:	6a3b      	ldr	r3, [r7, #32]
 801a296:	891b      	ldrh	r3, [r3, #8]
 801a298:	1ad3      	subs	r3, r2, r3
 801a29a:	b29b      	uxth	r3, r3
 801a29c:	2201      	movs	r2, #1
 801a29e:	6939      	ldr	r1, [r7, #16]
 801a2a0:	f7f9 fefc 	bl	801409c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801a2a4:	6a3b      	ldr	r3, [r7, #32]
 801a2a6:	68db      	ldr	r3, [r3, #12]
 801a2a8:	685b      	ldr	r3, [r3, #4]
 801a2aa:	4618      	mov	r0, r3
 801a2ac:	f7f8 f949 	bl	8012542 <lwip_htonl>
 801a2b0:	4603      	mov	r3, r0
 801a2b2:	3301      	adds	r3, #1
 801a2b4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a2ba:	68fb      	ldr	r3, [r7, #12]
 801a2bc:	1ad3      	subs	r3, r2, r3
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	da02      	bge.n	801a2c8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	68fa      	ldr	r2, [r7, #12]
 801a2c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a2c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2cc:	2200      	movs	r2, #0
 801a2ce:	69b9      	ldr	r1, [r7, #24]
 801a2d0:	6878      	ldr	r0, [r7, #4]
 801a2d2:	f7ff fded 	bl	8019eb0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a2d6:	687a      	ldr	r2, [r7, #4]
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	3304      	adds	r3, #4
 801a2dc:	69b9      	ldr	r1, [r7, #24]
 801a2de:	6878      	ldr	r0, [r7, #4]
 801a2e0:	f7ff fe26 	bl	8019f30 <tcp_output_control_segment>
 801a2e4:	4603      	mov	r3, r0
 801a2e6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a2e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801a2ec:	4618      	mov	r0, r3
 801a2ee:	372c      	adds	r7, #44	; 0x2c
 801a2f0:	46bd      	mov	sp, r7
 801a2f2:	bd90      	pop	{r4, r7, pc}
 801a2f4:	080248b0 	.word	0x080248b0
 801a2f8:	080250a8 	.word	0x080250a8
 801a2fc:	08024904 	.word	0x08024904

0801a300 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801a300:	b580      	push	{r7, lr}
 801a302:	b082      	sub	sp, #8
 801a304:	af00      	add	r7, sp, #0
 801a306:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801a308:	f7f9 ffb6 	bl	8014278 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801a30c:	4b0a      	ldr	r3, [pc, #40]	; (801a338 <tcpip_tcp_timer+0x38>)
 801a30e:	681b      	ldr	r3, [r3, #0]
 801a310:	2b00      	cmp	r3, #0
 801a312:	d103      	bne.n	801a31c <tcpip_tcp_timer+0x1c>
 801a314:	4b09      	ldr	r3, [pc, #36]	; (801a33c <tcpip_tcp_timer+0x3c>)
 801a316:	681b      	ldr	r3, [r3, #0]
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d005      	beq.n	801a328 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a31c:	2200      	movs	r2, #0
 801a31e:	4908      	ldr	r1, [pc, #32]	; (801a340 <tcpip_tcp_timer+0x40>)
 801a320:	20fa      	movs	r0, #250	; 0xfa
 801a322:	f000 f8f3 	bl	801a50c <sys_timeout>
 801a326:	e003      	b.n	801a330 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801a328:	4b06      	ldr	r3, [pc, #24]	; (801a344 <tcpip_tcp_timer+0x44>)
 801a32a:	2200      	movs	r2, #0
 801a32c:	601a      	str	r2, [r3, #0]
  }
}
 801a32e:	bf00      	nop
 801a330:	bf00      	nop
 801a332:	3708      	adds	r7, #8
 801a334:	46bd      	mov	sp, r7
 801a336:	bd80      	pop	{r7, pc}
 801a338:	2000b79c 	.word	0x2000b79c
 801a33c:	2000b7ac 	.word	0x2000b7ac
 801a340:	0801a301 	.word	0x0801a301
 801a344:	20004798 	.word	0x20004798

0801a348 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801a348:	b580      	push	{r7, lr}
 801a34a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801a34c:	4b0a      	ldr	r3, [pc, #40]	; (801a378 <tcp_timer_needed+0x30>)
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	2b00      	cmp	r3, #0
 801a352:	d10f      	bne.n	801a374 <tcp_timer_needed+0x2c>
 801a354:	4b09      	ldr	r3, [pc, #36]	; (801a37c <tcp_timer_needed+0x34>)
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	2b00      	cmp	r3, #0
 801a35a:	d103      	bne.n	801a364 <tcp_timer_needed+0x1c>
 801a35c:	4b08      	ldr	r3, [pc, #32]	; (801a380 <tcp_timer_needed+0x38>)
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	2b00      	cmp	r3, #0
 801a362:	d007      	beq.n	801a374 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801a364:	4b04      	ldr	r3, [pc, #16]	; (801a378 <tcp_timer_needed+0x30>)
 801a366:	2201      	movs	r2, #1
 801a368:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a36a:	2200      	movs	r2, #0
 801a36c:	4905      	ldr	r1, [pc, #20]	; (801a384 <tcp_timer_needed+0x3c>)
 801a36e:	20fa      	movs	r0, #250	; 0xfa
 801a370:	f000 f8cc 	bl	801a50c <sys_timeout>
  }
}
 801a374:	bf00      	nop
 801a376:	bd80      	pop	{r7, pc}
 801a378:	20004798 	.word	0x20004798
 801a37c:	2000b79c 	.word	0x2000b79c
 801a380:	2000b7ac 	.word	0x2000b7ac
 801a384:	0801a301 	.word	0x0801a301

0801a388 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801a388:	b580      	push	{r7, lr}
 801a38a:	b086      	sub	sp, #24
 801a38c:	af00      	add	r7, sp, #0
 801a38e:	60f8      	str	r0, [r7, #12]
 801a390:	60b9      	str	r1, [r7, #8]
 801a392:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801a394:	200a      	movs	r0, #10
 801a396:	f7f8 fdab 	bl	8012ef0 <memp_malloc>
 801a39a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801a39c:	693b      	ldr	r3, [r7, #16]
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d109      	bne.n	801a3b6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801a3a2:	693b      	ldr	r3, [r7, #16]
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d151      	bne.n	801a44c <sys_timeout_abs+0xc4>
 801a3a8:	4b2a      	ldr	r3, [pc, #168]	; (801a454 <sys_timeout_abs+0xcc>)
 801a3aa:	22be      	movs	r2, #190	; 0xbe
 801a3ac:	492a      	ldr	r1, [pc, #168]	; (801a458 <sys_timeout_abs+0xd0>)
 801a3ae:	482b      	ldr	r0, [pc, #172]	; (801a45c <sys_timeout_abs+0xd4>)
 801a3b0:	f004 fcd6 	bl	801ed60 <iprintf>
    return;
 801a3b4:	e04a      	b.n	801a44c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801a3b6:	693b      	ldr	r3, [r7, #16]
 801a3b8:	2200      	movs	r2, #0
 801a3ba:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801a3bc:	693b      	ldr	r3, [r7, #16]
 801a3be:	68ba      	ldr	r2, [r7, #8]
 801a3c0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801a3c2:	693b      	ldr	r3, [r7, #16]
 801a3c4:	687a      	ldr	r2, [r7, #4]
 801a3c6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801a3c8:	693b      	ldr	r3, [r7, #16]
 801a3ca:	68fa      	ldr	r2, [r7, #12]
 801a3cc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801a3ce:	4b24      	ldr	r3, [pc, #144]	; (801a460 <sys_timeout_abs+0xd8>)
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d103      	bne.n	801a3de <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801a3d6:	4a22      	ldr	r2, [pc, #136]	; (801a460 <sys_timeout_abs+0xd8>)
 801a3d8:	693b      	ldr	r3, [r7, #16]
 801a3da:	6013      	str	r3, [r2, #0]
    return;
 801a3dc:	e037      	b.n	801a44e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801a3de:	693b      	ldr	r3, [r7, #16]
 801a3e0:	685a      	ldr	r2, [r3, #4]
 801a3e2:	4b1f      	ldr	r3, [pc, #124]	; (801a460 <sys_timeout_abs+0xd8>)
 801a3e4:	681b      	ldr	r3, [r3, #0]
 801a3e6:	685b      	ldr	r3, [r3, #4]
 801a3e8:	1ad3      	subs	r3, r2, r3
 801a3ea:	0fdb      	lsrs	r3, r3, #31
 801a3ec:	f003 0301 	and.w	r3, r3, #1
 801a3f0:	b2db      	uxtb	r3, r3
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	d007      	beq.n	801a406 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801a3f6:	4b1a      	ldr	r3, [pc, #104]	; (801a460 <sys_timeout_abs+0xd8>)
 801a3f8:	681a      	ldr	r2, [r3, #0]
 801a3fa:	693b      	ldr	r3, [r7, #16]
 801a3fc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801a3fe:	4a18      	ldr	r2, [pc, #96]	; (801a460 <sys_timeout_abs+0xd8>)
 801a400:	693b      	ldr	r3, [r7, #16]
 801a402:	6013      	str	r3, [r2, #0]
 801a404:	e023      	b.n	801a44e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801a406:	4b16      	ldr	r3, [pc, #88]	; (801a460 <sys_timeout_abs+0xd8>)
 801a408:	681b      	ldr	r3, [r3, #0]
 801a40a:	617b      	str	r3, [r7, #20]
 801a40c:	e01a      	b.n	801a444 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801a40e:	697b      	ldr	r3, [r7, #20]
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	2b00      	cmp	r3, #0
 801a414:	d00b      	beq.n	801a42e <sys_timeout_abs+0xa6>
 801a416:	693b      	ldr	r3, [r7, #16]
 801a418:	685a      	ldr	r2, [r3, #4]
 801a41a:	697b      	ldr	r3, [r7, #20]
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	685b      	ldr	r3, [r3, #4]
 801a420:	1ad3      	subs	r3, r2, r3
 801a422:	0fdb      	lsrs	r3, r3, #31
 801a424:	f003 0301 	and.w	r3, r3, #1
 801a428:	b2db      	uxtb	r3, r3
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d007      	beq.n	801a43e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801a42e:	697b      	ldr	r3, [r7, #20]
 801a430:	681a      	ldr	r2, [r3, #0]
 801a432:	693b      	ldr	r3, [r7, #16]
 801a434:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801a436:	697b      	ldr	r3, [r7, #20]
 801a438:	693a      	ldr	r2, [r7, #16]
 801a43a:	601a      	str	r2, [r3, #0]
        break;
 801a43c:	e007      	b.n	801a44e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801a43e:	697b      	ldr	r3, [r7, #20]
 801a440:	681b      	ldr	r3, [r3, #0]
 801a442:	617b      	str	r3, [r7, #20]
 801a444:	697b      	ldr	r3, [r7, #20]
 801a446:	2b00      	cmp	r3, #0
 801a448:	d1e1      	bne.n	801a40e <sys_timeout_abs+0x86>
 801a44a:	e000      	b.n	801a44e <sys_timeout_abs+0xc6>
    return;
 801a44c:	bf00      	nop
      }
    }
  }
}
 801a44e:	3718      	adds	r7, #24
 801a450:	46bd      	mov	sp, r7
 801a452:	bd80      	pop	{r7, pc}
 801a454:	080250cc 	.word	0x080250cc
 801a458:	08025100 	.word	0x08025100
 801a45c:	08025140 	.word	0x08025140
 801a460:	20004790 	.word	0x20004790

0801a464 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801a464:	b580      	push	{r7, lr}
 801a466:	b086      	sub	sp, #24
 801a468:	af00      	add	r7, sp, #0
 801a46a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801a470:	697b      	ldr	r3, [r7, #20]
 801a472:	685b      	ldr	r3, [r3, #4]
 801a474:	4798      	blx	r3

  now = sys_now();
 801a476:	f7f0 fc75 	bl	800ad64 <sys_now>
 801a47a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801a47c:	697b      	ldr	r3, [r7, #20]
 801a47e:	681a      	ldr	r2, [r3, #0]
 801a480:	4b0f      	ldr	r3, [pc, #60]	; (801a4c0 <lwip_cyclic_timer+0x5c>)
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	4413      	add	r3, r2
 801a486:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801a488:	68fa      	ldr	r2, [r7, #12]
 801a48a:	693b      	ldr	r3, [r7, #16]
 801a48c:	1ad3      	subs	r3, r2, r3
 801a48e:	0fdb      	lsrs	r3, r3, #31
 801a490:	f003 0301 	and.w	r3, r3, #1
 801a494:	b2db      	uxtb	r3, r3
 801a496:	2b00      	cmp	r3, #0
 801a498:	d009      	beq.n	801a4ae <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801a49a:	697b      	ldr	r3, [r7, #20]
 801a49c:	681a      	ldr	r2, [r3, #0]
 801a49e:	693b      	ldr	r3, [r7, #16]
 801a4a0:	4413      	add	r3, r2
 801a4a2:	687a      	ldr	r2, [r7, #4]
 801a4a4:	4907      	ldr	r1, [pc, #28]	; (801a4c4 <lwip_cyclic_timer+0x60>)
 801a4a6:	4618      	mov	r0, r3
 801a4a8:	f7ff ff6e 	bl	801a388 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801a4ac:	e004      	b.n	801a4b8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801a4ae:	687a      	ldr	r2, [r7, #4]
 801a4b0:	4904      	ldr	r1, [pc, #16]	; (801a4c4 <lwip_cyclic_timer+0x60>)
 801a4b2:	68f8      	ldr	r0, [r7, #12]
 801a4b4:	f7ff ff68 	bl	801a388 <sys_timeout_abs>
}
 801a4b8:	bf00      	nop
 801a4ba:	3718      	adds	r7, #24
 801a4bc:	46bd      	mov	sp, r7
 801a4be:	bd80      	pop	{r7, pc}
 801a4c0:	20004794 	.word	0x20004794
 801a4c4:	0801a465 	.word	0x0801a465

0801a4c8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801a4c8:	b580      	push	{r7, lr}
 801a4ca:	b082      	sub	sp, #8
 801a4cc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a4ce:	2301      	movs	r3, #1
 801a4d0:	607b      	str	r3, [r7, #4]
 801a4d2:	e00e      	b.n	801a4f2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801a4d4:	4a0b      	ldr	r2, [pc, #44]	; (801a504 <sys_timeouts_init+0x3c>)
 801a4d6:	687b      	ldr	r3, [r7, #4]
 801a4d8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	00db      	lsls	r3, r3, #3
 801a4e0:	4a08      	ldr	r2, [pc, #32]	; (801a504 <sys_timeouts_init+0x3c>)
 801a4e2:	4413      	add	r3, r2
 801a4e4:	461a      	mov	r2, r3
 801a4e6:	4908      	ldr	r1, [pc, #32]	; (801a508 <sys_timeouts_init+0x40>)
 801a4e8:	f000 f810 	bl	801a50c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	3301      	adds	r3, #1
 801a4f0:	607b      	str	r3, [r7, #4]
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	2b02      	cmp	r3, #2
 801a4f6:	d9ed      	bls.n	801a4d4 <sys_timeouts_init+0xc>
  }
}
 801a4f8:	bf00      	nop
 801a4fa:	bf00      	nop
 801a4fc:	3708      	adds	r7, #8
 801a4fe:	46bd      	mov	sp, r7
 801a500:	bd80      	pop	{r7, pc}
 801a502:	bf00      	nop
 801a504:	08026c8c 	.word	0x08026c8c
 801a508:	0801a465 	.word	0x0801a465

0801a50c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801a50c:	b580      	push	{r7, lr}
 801a50e:	b086      	sub	sp, #24
 801a510:	af00      	add	r7, sp, #0
 801a512:	60f8      	str	r0, [r7, #12]
 801a514:	60b9      	str	r1, [r7, #8]
 801a516:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801a518:	68fb      	ldr	r3, [r7, #12]
 801a51a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a51e:	d306      	bcc.n	801a52e <sys_timeout+0x22>
 801a520:	4b0a      	ldr	r3, [pc, #40]	; (801a54c <sys_timeout+0x40>)
 801a522:	f240 1229 	movw	r2, #297	; 0x129
 801a526:	490a      	ldr	r1, [pc, #40]	; (801a550 <sys_timeout+0x44>)
 801a528:	480a      	ldr	r0, [pc, #40]	; (801a554 <sys_timeout+0x48>)
 801a52a:	f004 fc19 	bl	801ed60 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801a52e:	f7f0 fc19 	bl	800ad64 <sys_now>
 801a532:	4602      	mov	r2, r0
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	4413      	add	r3, r2
 801a538:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801a53a:	687a      	ldr	r2, [r7, #4]
 801a53c:	68b9      	ldr	r1, [r7, #8]
 801a53e:	6978      	ldr	r0, [r7, #20]
 801a540:	f7ff ff22 	bl	801a388 <sys_timeout_abs>
#endif
}
 801a544:	bf00      	nop
 801a546:	3718      	adds	r7, #24
 801a548:	46bd      	mov	sp, r7
 801a54a:	bd80      	pop	{r7, pc}
 801a54c:	080250cc 	.word	0x080250cc
 801a550:	08025168 	.word	0x08025168
 801a554:	08025140 	.word	0x08025140

0801a558 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801a558:	b580      	push	{r7, lr}
 801a55a:	b084      	sub	sp, #16
 801a55c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801a55e:	f7f0 fc01 	bl	800ad64 <sys_now>
 801a562:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801a564:	4b17      	ldr	r3, [pc, #92]	; (801a5c4 <sys_check_timeouts+0x6c>)
 801a566:	681b      	ldr	r3, [r3, #0]
 801a568:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801a56a:	68bb      	ldr	r3, [r7, #8]
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d022      	beq.n	801a5b6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801a570:	68bb      	ldr	r3, [r7, #8]
 801a572:	685b      	ldr	r3, [r3, #4]
 801a574:	68fa      	ldr	r2, [r7, #12]
 801a576:	1ad3      	subs	r3, r2, r3
 801a578:	0fdb      	lsrs	r3, r3, #31
 801a57a:	f003 0301 	and.w	r3, r3, #1
 801a57e:	b2db      	uxtb	r3, r3
 801a580:	2b00      	cmp	r3, #0
 801a582:	d11a      	bne.n	801a5ba <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801a584:	68bb      	ldr	r3, [r7, #8]
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	4a0e      	ldr	r2, [pc, #56]	; (801a5c4 <sys_check_timeouts+0x6c>)
 801a58a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801a58c:	68bb      	ldr	r3, [r7, #8]
 801a58e:	689b      	ldr	r3, [r3, #8]
 801a590:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801a592:	68bb      	ldr	r3, [r7, #8]
 801a594:	68db      	ldr	r3, [r3, #12]
 801a596:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801a598:	68bb      	ldr	r3, [r7, #8]
 801a59a:	685b      	ldr	r3, [r3, #4]
 801a59c:	4a0a      	ldr	r2, [pc, #40]	; (801a5c8 <sys_check_timeouts+0x70>)
 801a59e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801a5a0:	68b9      	ldr	r1, [r7, #8]
 801a5a2:	200a      	movs	r0, #10
 801a5a4:	f7f8 fcf6 	bl	8012f94 <memp_free>
    if (handler != NULL) {
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d0da      	beq.n	801a564 <sys_check_timeouts+0xc>
      handler(arg);
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	6838      	ldr	r0, [r7, #0]
 801a5b2:	4798      	blx	r3
  do {
 801a5b4:	e7d6      	b.n	801a564 <sys_check_timeouts+0xc>
      return;
 801a5b6:	bf00      	nop
 801a5b8:	e000      	b.n	801a5bc <sys_check_timeouts+0x64>
      return;
 801a5ba:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801a5bc:	3710      	adds	r7, #16
 801a5be:	46bd      	mov	sp, r7
 801a5c0:	bd80      	pop	{r7, pc}
 801a5c2:	bf00      	nop
 801a5c4:	20004790 	.word	0x20004790
 801a5c8:	20004794 	.word	0x20004794

0801a5cc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801a5cc:	b580      	push	{r7, lr}
 801a5ce:	b082      	sub	sp, #8
 801a5d0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801a5d2:	4b16      	ldr	r3, [pc, #88]	; (801a62c <sys_timeouts_sleeptime+0x60>)
 801a5d4:	681b      	ldr	r3, [r3, #0]
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d102      	bne.n	801a5e0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801a5da:	f04f 33ff 	mov.w	r3, #4294967295
 801a5de:	e020      	b.n	801a622 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801a5e0:	f7f0 fbc0 	bl	800ad64 <sys_now>
 801a5e4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801a5e6:	4b11      	ldr	r3, [pc, #68]	; (801a62c <sys_timeouts_sleeptime+0x60>)
 801a5e8:	681b      	ldr	r3, [r3, #0]
 801a5ea:	685a      	ldr	r2, [r3, #4]
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	1ad3      	subs	r3, r2, r3
 801a5f0:	0fdb      	lsrs	r3, r3, #31
 801a5f2:	f003 0301 	and.w	r3, r3, #1
 801a5f6:	b2db      	uxtb	r3, r3
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	d001      	beq.n	801a600 <sys_timeouts_sleeptime+0x34>
    return 0;
 801a5fc:	2300      	movs	r3, #0
 801a5fe:	e010      	b.n	801a622 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801a600:	4b0a      	ldr	r3, [pc, #40]	; (801a62c <sys_timeouts_sleeptime+0x60>)
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	685a      	ldr	r2, [r3, #4]
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	1ad3      	subs	r3, r2, r3
 801a60a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801a60c:	683b      	ldr	r3, [r7, #0]
 801a60e:	2b00      	cmp	r3, #0
 801a610:	da06      	bge.n	801a620 <sys_timeouts_sleeptime+0x54>
 801a612:	4b07      	ldr	r3, [pc, #28]	; (801a630 <sys_timeouts_sleeptime+0x64>)
 801a614:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801a618:	4906      	ldr	r1, [pc, #24]	; (801a634 <sys_timeouts_sleeptime+0x68>)
 801a61a:	4807      	ldr	r0, [pc, #28]	; (801a638 <sys_timeouts_sleeptime+0x6c>)
 801a61c:	f004 fba0 	bl	801ed60 <iprintf>
    return ret;
 801a620:	683b      	ldr	r3, [r7, #0]
  }
}
 801a622:	4618      	mov	r0, r3
 801a624:	3708      	adds	r7, #8
 801a626:	46bd      	mov	sp, r7
 801a628:	bd80      	pop	{r7, pc}
 801a62a:	bf00      	nop
 801a62c:	20004790 	.word	0x20004790
 801a630:	080250cc 	.word	0x080250cc
 801a634:	080251a0 	.word	0x080251a0
 801a638:	08025140 	.word	0x08025140

0801a63c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801a63c:	b580      	push	{r7, lr}
 801a63e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801a640:	f004 fba6 	bl	801ed90 <rand>
 801a644:	4603      	mov	r3, r0
 801a646:	b29b      	uxth	r3, r3
 801a648:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801a64c:	b29b      	uxth	r3, r3
 801a64e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801a652:	b29a      	uxth	r2, r3
 801a654:	4b01      	ldr	r3, [pc, #4]	; (801a65c <udp_init+0x20>)
 801a656:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801a658:	bf00      	nop
 801a65a:	bd80      	pop	{r7, pc}
 801a65c:	20000144 	.word	0x20000144

0801a660 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801a660:	b480      	push	{r7}
 801a662:	b083      	sub	sp, #12
 801a664:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801a666:	2300      	movs	r3, #0
 801a668:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801a66a:	4b17      	ldr	r3, [pc, #92]	; (801a6c8 <udp_new_port+0x68>)
 801a66c:	881b      	ldrh	r3, [r3, #0]
 801a66e:	1c5a      	adds	r2, r3, #1
 801a670:	b291      	uxth	r1, r2
 801a672:	4a15      	ldr	r2, [pc, #84]	; (801a6c8 <udp_new_port+0x68>)
 801a674:	8011      	strh	r1, [r2, #0]
 801a676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a67a:	4293      	cmp	r3, r2
 801a67c:	d103      	bne.n	801a686 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801a67e:	4b12      	ldr	r3, [pc, #72]	; (801a6c8 <udp_new_port+0x68>)
 801a680:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801a684:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a686:	4b11      	ldr	r3, [pc, #68]	; (801a6cc <udp_new_port+0x6c>)
 801a688:	681b      	ldr	r3, [r3, #0]
 801a68a:	603b      	str	r3, [r7, #0]
 801a68c:	e011      	b.n	801a6b2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801a68e:	683b      	ldr	r3, [r7, #0]
 801a690:	8a5a      	ldrh	r2, [r3, #18]
 801a692:	4b0d      	ldr	r3, [pc, #52]	; (801a6c8 <udp_new_port+0x68>)
 801a694:	881b      	ldrh	r3, [r3, #0]
 801a696:	429a      	cmp	r2, r3
 801a698:	d108      	bne.n	801a6ac <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801a69a:	88fb      	ldrh	r3, [r7, #6]
 801a69c:	3301      	adds	r3, #1
 801a69e:	80fb      	strh	r3, [r7, #6]
 801a6a0:	88fb      	ldrh	r3, [r7, #6]
 801a6a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801a6a6:	d3e0      	bcc.n	801a66a <udp_new_port+0xa>
        return 0;
 801a6a8:	2300      	movs	r3, #0
 801a6aa:	e007      	b.n	801a6bc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a6ac:	683b      	ldr	r3, [r7, #0]
 801a6ae:	68db      	ldr	r3, [r3, #12]
 801a6b0:	603b      	str	r3, [r7, #0]
 801a6b2:	683b      	ldr	r3, [r7, #0]
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	d1ea      	bne.n	801a68e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801a6b8:	4b03      	ldr	r3, [pc, #12]	; (801a6c8 <udp_new_port+0x68>)
 801a6ba:	881b      	ldrh	r3, [r3, #0]
}
 801a6bc:	4618      	mov	r0, r3
 801a6be:	370c      	adds	r7, #12
 801a6c0:	46bd      	mov	sp, r7
 801a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6c6:	4770      	bx	lr
 801a6c8:	20000144 	.word	0x20000144
 801a6cc:	2000b7b4 	.word	0x2000b7b4

0801a6d0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801a6d0:	b580      	push	{r7, lr}
 801a6d2:	b084      	sub	sp, #16
 801a6d4:	af00      	add	r7, sp, #0
 801a6d6:	60f8      	str	r0, [r7, #12]
 801a6d8:	60b9      	str	r1, [r7, #8]
 801a6da:	4613      	mov	r3, r2
 801a6dc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801a6de:	68fb      	ldr	r3, [r7, #12]
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	d105      	bne.n	801a6f0 <udp_input_local_match+0x20>
 801a6e4:	4b27      	ldr	r3, [pc, #156]	; (801a784 <udp_input_local_match+0xb4>)
 801a6e6:	2287      	movs	r2, #135	; 0x87
 801a6e8:	4927      	ldr	r1, [pc, #156]	; (801a788 <udp_input_local_match+0xb8>)
 801a6ea:	4828      	ldr	r0, [pc, #160]	; (801a78c <udp_input_local_match+0xbc>)
 801a6ec:	f004 fb38 	bl	801ed60 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801a6f0:	68bb      	ldr	r3, [r7, #8]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d105      	bne.n	801a702 <udp_input_local_match+0x32>
 801a6f6:	4b23      	ldr	r3, [pc, #140]	; (801a784 <udp_input_local_match+0xb4>)
 801a6f8:	2288      	movs	r2, #136	; 0x88
 801a6fa:	4925      	ldr	r1, [pc, #148]	; (801a790 <udp_input_local_match+0xc0>)
 801a6fc:	4823      	ldr	r0, [pc, #140]	; (801a78c <udp_input_local_match+0xbc>)
 801a6fe:	f004 fb2f 	bl	801ed60 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a702:	68fb      	ldr	r3, [r7, #12]
 801a704:	7a1b      	ldrb	r3, [r3, #8]
 801a706:	2b00      	cmp	r3, #0
 801a708:	d00b      	beq.n	801a722 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a70a:	68fb      	ldr	r3, [r7, #12]
 801a70c:	7a1a      	ldrb	r2, [r3, #8]
 801a70e:	4b21      	ldr	r3, [pc, #132]	; (801a794 <udp_input_local_match+0xc4>)
 801a710:	685b      	ldr	r3, [r3, #4]
 801a712:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a716:	3301      	adds	r3, #1
 801a718:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a71a:	429a      	cmp	r2, r3
 801a71c:	d001      	beq.n	801a722 <udp_input_local_match+0x52>
    return 0;
 801a71e:	2300      	movs	r3, #0
 801a720:	e02b      	b.n	801a77a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801a722:	79fb      	ldrb	r3, [r7, #7]
 801a724:	2b00      	cmp	r3, #0
 801a726:	d018      	beq.n	801a75a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a728:	68fb      	ldr	r3, [r7, #12]
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	d013      	beq.n	801a756 <udp_input_local_match+0x86>
 801a72e:	68fb      	ldr	r3, [r7, #12]
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	2b00      	cmp	r3, #0
 801a734:	d00f      	beq.n	801a756 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a736:	4b17      	ldr	r3, [pc, #92]	; (801a794 <udp_input_local_match+0xc4>)
 801a738:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a73e:	d00a      	beq.n	801a756 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801a740:	68fb      	ldr	r3, [r7, #12]
 801a742:	681a      	ldr	r2, [r3, #0]
 801a744:	4b13      	ldr	r3, [pc, #76]	; (801a794 <udp_input_local_match+0xc4>)
 801a746:	695b      	ldr	r3, [r3, #20]
 801a748:	405a      	eors	r2, r3
 801a74a:	68bb      	ldr	r3, [r7, #8]
 801a74c:	3308      	adds	r3, #8
 801a74e:	681b      	ldr	r3, [r3, #0]
 801a750:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a752:	2b00      	cmp	r3, #0
 801a754:	d110      	bne.n	801a778 <udp_input_local_match+0xa8>
          return 1;
 801a756:	2301      	movs	r3, #1
 801a758:	e00f      	b.n	801a77a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a75a:	68fb      	ldr	r3, [r7, #12]
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	d009      	beq.n	801a774 <udp_input_local_match+0xa4>
 801a760:	68fb      	ldr	r3, [r7, #12]
 801a762:	681b      	ldr	r3, [r3, #0]
 801a764:	2b00      	cmp	r3, #0
 801a766:	d005      	beq.n	801a774 <udp_input_local_match+0xa4>
 801a768:	68fb      	ldr	r3, [r7, #12]
 801a76a:	681a      	ldr	r2, [r3, #0]
 801a76c:	4b09      	ldr	r3, [pc, #36]	; (801a794 <udp_input_local_match+0xc4>)
 801a76e:	695b      	ldr	r3, [r3, #20]
 801a770:	429a      	cmp	r2, r3
 801a772:	d101      	bne.n	801a778 <udp_input_local_match+0xa8>
        return 1;
 801a774:	2301      	movs	r3, #1
 801a776:	e000      	b.n	801a77a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801a778:	2300      	movs	r3, #0
}
 801a77a:	4618      	mov	r0, r3
 801a77c:	3710      	adds	r7, #16
 801a77e:	46bd      	mov	sp, r7
 801a780:	bd80      	pop	{r7, pc}
 801a782:	bf00      	nop
 801a784:	080251b4 	.word	0x080251b4
 801a788:	080251e4 	.word	0x080251e4
 801a78c:	08025208 	.word	0x08025208
 801a790:	08025230 	.word	0x08025230
 801a794:	20008088 	.word	0x20008088

0801a798 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801a798:	b590      	push	{r4, r7, lr}
 801a79a:	b08d      	sub	sp, #52	; 0x34
 801a79c:	af02      	add	r7, sp, #8
 801a79e:	6078      	str	r0, [r7, #4]
 801a7a0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801a7a2:	2300      	movs	r3, #0
 801a7a4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	d105      	bne.n	801a7b8 <udp_input+0x20>
 801a7ac:	4b7c      	ldr	r3, [pc, #496]	; (801a9a0 <udp_input+0x208>)
 801a7ae:	22cf      	movs	r2, #207	; 0xcf
 801a7b0:	497c      	ldr	r1, [pc, #496]	; (801a9a4 <udp_input+0x20c>)
 801a7b2:	487d      	ldr	r0, [pc, #500]	; (801a9a8 <udp_input+0x210>)
 801a7b4:	f004 fad4 	bl	801ed60 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801a7b8:	683b      	ldr	r3, [r7, #0]
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d105      	bne.n	801a7ca <udp_input+0x32>
 801a7be:	4b78      	ldr	r3, [pc, #480]	; (801a9a0 <udp_input+0x208>)
 801a7c0:	22d0      	movs	r2, #208	; 0xd0
 801a7c2:	497a      	ldr	r1, [pc, #488]	; (801a9ac <udp_input+0x214>)
 801a7c4:	4878      	ldr	r0, [pc, #480]	; (801a9a8 <udp_input+0x210>)
 801a7c6:	f004 facb 	bl	801ed60 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	895b      	ldrh	r3, [r3, #10]
 801a7ce:	2b07      	cmp	r3, #7
 801a7d0:	d803      	bhi.n	801a7da <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801a7d2:	6878      	ldr	r0, [r7, #4]
 801a7d4:	f7f9 fa5c 	bl	8013c90 <pbuf_free>
    goto end;
 801a7d8:	e0de      	b.n	801a998 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	685b      	ldr	r3, [r3, #4]
 801a7de:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801a7e0:	4b73      	ldr	r3, [pc, #460]	; (801a9b0 <udp_input+0x218>)
 801a7e2:	695b      	ldr	r3, [r3, #20]
 801a7e4:	4a72      	ldr	r2, [pc, #456]	; (801a9b0 <udp_input+0x218>)
 801a7e6:	6812      	ldr	r2, [r2, #0]
 801a7e8:	4611      	mov	r1, r2
 801a7ea:	4618      	mov	r0, r3
 801a7ec:	f001 ff80 	bl	801c6f0 <ip4_addr_isbroadcast_u32>
 801a7f0:	4603      	mov	r3, r0
 801a7f2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801a7f4:	697b      	ldr	r3, [r7, #20]
 801a7f6:	881b      	ldrh	r3, [r3, #0]
 801a7f8:	b29b      	uxth	r3, r3
 801a7fa:	4618      	mov	r0, r3
 801a7fc:	f7f7 fe8c 	bl	8012518 <lwip_htons>
 801a800:	4603      	mov	r3, r0
 801a802:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801a804:	697b      	ldr	r3, [r7, #20]
 801a806:	885b      	ldrh	r3, [r3, #2]
 801a808:	b29b      	uxth	r3, r3
 801a80a:	4618      	mov	r0, r3
 801a80c:	f7f7 fe84 	bl	8012518 <lwip_htons>
 801a810:	4603      	mov	r3, r0
 801a812:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801a814:	2300      	movs	r3, #0
 801a816:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801a818:	2300      	movs	r3, #0
 801a81a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801a81c:	2300      	movs	r3, #0
 801a81e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a820:	4b64      	ldr	r3, [pc, #400]	; (801a9b4 <udp_input+0x21c>)
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	627b      	str	r3, [r7, #36]	; 0x24
 801a826:	e054      	b.n	801a8d2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801a828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a82a:	8a5b      	ldrh	r3, [r3, #18]
 801a82c:	89fa      	ldrh	r2, [r7, #14]
 801a82e:	429a      	cmp	r2, r3
 801a830:	d14a      	bne.n	801a8c8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801a832:	7cfb      	ldrb	r3, [r7, #19]
 801a834:	461a      	mov	r2, r3
 801a836:	6839      	ldr	r1, [r7, #0]
 801a838:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a83a:	f7ff ff49 	bl	801a6d0 <udp_input_local_match>
 801a83e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801a840:	2b00      	cmp	r3, #0
 801a842:	d041      	beq.n	801a8c8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801a844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a846:	7c1b      	ldrb	r3, [r3, #16]
 801a848:	f003 0304 	and.w	r3, r3, #4
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d11d      	bne.n	801a88c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801a850:	69fb      	ldr	r3, [r7, #28]
 801a852:	2b00      	cmp	r3, #0
 801a854:	d102      	bne.n	801a85c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801a856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a858:	61fb      	str	r3, [r7, #28]
 801a85a:	e017      	b.n	801a88c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801a85c:	7cfb      	ldrb	r3, [r7, #19]
 801a85e:	2b00      	cmp	r3, #0
 801a860:	d014      	beq.n	801a88c <udp_input+0xf4>
 801a862:	4b53      	ldr	r3, [pc, #332]	; (801a9b0 <udp_input+0x218>)
 801a864:	695b      	ldr	r3, [r3, #20]
 801a866:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a86a:	d10f      	bne.n	801a88c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801a86c:	69fb      	ldr	r3, [r7, #28]
 801a86e:	681a      	ldr	r2, [r3, #0]
 801a870:	683b      	ldr	r3, [r7, #0]
 801a872:	3304      	adds	r3, #4
 801a874:	681b      	ldr	r3, [r3, #0]
 801a876:	429a      	cmp	r2, r3
 801a878:	d008      	beq.n	801a88c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801a87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a87c:	681a      	ldr	r2, [r3, #0]
 801a87e:	683b      	ldr	r3, [r7, #0]
 801a880:	3304      	adds	r3, #4
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	429a      	cmp	r2, r3
 801a886:	d101      	bne.n	801a88c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801a888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a88a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801a88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a88e:	8a9b      	ldrh	r3, [r3, #20]
 801a890:	8a3a      	ldrh	r2, [r7, #16]
 801a892:	429a      	cmp	r2, r3
 801a894:	d118      	bne.n	801a8c8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a898:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d005      	beq.n	801a8aa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801a89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8a0:	685a      	ldr	r2, [r3, #4]
 801a8a2:	4b43      	ldr	r3, [pc, #268]	; (801a9b0 <udp_input+0x218>)
 801a8a4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a8a6:	429a      	cmp	r2, r3
 801a8a8:	d10e      	bne.n	801a8c8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801a8aa:	6a3b      	ldr	r3, [r7, #32]
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d014      	beq.n	801a8da <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801a8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8b2:	68da      	ldr	r2, [r3, #12]
 801a8b4:	6a3b      	ldr	r3, [r7, #32]
 801a8b6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801a8b8:	4b3e      	ldr	r3, [pc, #248]	; (801a9b4 <udp_input+0x21c>)
 801a8ba:	681a      	ldr	r2, [r3, #0]
 801a8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8be:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801a8c0:	4a3c      	ldr	r2, [pc, #240]	; (801a9b4 <udp_input+0x21c>)
 801a8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8c4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801a8c6:	e008      	b.n	801a8da <udp_input+0x142>
      }
    }

    prev = pcb;
 801a8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8ca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8ce:	68db      	ldr	r3, [r3, #12]
 801a8d0:	627b      	str	r3, [r7, #36]	; 0x24
 801a8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d1a7      	bne.n	801a828 <udp_input+0x90>
 801a8d8:	e000      	b.n	801a8dc <udp_input+0x144>
        break;
 801a8da:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d101      	bne.n	801a8e6 <udp_input+0x14e>
    pcb = uncon_pcb;
 801a8e2:	69fb      	ldr	r3, [r7, #28]
 801a8e4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801a8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8e8:	2b00      	cmp	r3, #0
 801a8ea:	d002      	beq.n	801a8f2 <udp_input+0x15a>
    for_us = 1;
 801a8ec:	2301      	movs	r3, #1
 801a8ee:	76fb      	strb	r3, [r7, #27]
 801a8f0:	e00a      	b.n	801a908 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801a8f2:	683b      	ldr	r3, [r7, #0]
 801a8f4:	3304      	adds	r3, #4
 801a8f6:	681a      	ldr	r2, [r3, #0]
 801a8f8:	4b2d      	ldr	r3, [pc, #180]	; (801a9b0 <udp_input+0x218>)
 801a8fa:	695b      	ldr	r3, [r3, #20]
 801a8fc:	429a      	cmp	r2, r3
 801a8fe:	bf0c      	ite	eq
 801a900:	2301      	moveq	r3, #1
 801a902:	2300      	movne	r3, #0
 801a904:	b2db      	uxtb	r3, r3
 801a906:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801a908:	7efb      	ldrb	r3, [r7, #27]
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d041      	beq.n	801a992 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801a90e:	2108      	movs	r1, #8
 801a910:	6878      	ldr	r0, [r7, #4]
 801a912:	f7f9 f937 	bl	8013b84 <pbuf_remove_header>
 801a916:	4603      	mov	r3, r0
 801a918:	2b00      	cmp	r3, #0
 801a91a:	d00a      	beq.n	801a932 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801a91c:	4b20      	ldr	r3, [pc, #128]	; (801a9a0 <udp_input+0x208>)
 801a91e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801a922:	4925      	ldr	r1, [pc, #148]	; (801a9b8 <udp_input+0x220>)
 801a924:	4820      	ldr	r0, [pc, #128]	; (801a9a8 <udp_input+0x210>)
 801a926:	f004 fa1b 	bl	801ed60 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801a92a:	6878      	ldr	r0, [r7, #4]
 801a92c:	f7f9 f9b0 	bl	8013c90 <pbuf_free>
      goto end;
 801a930:	e032      	b.n	801a998 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801a932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a934:	2b00      	cmp	r3, #0
 801a936:	d012      	beq.n	801a95e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801a938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a93a:	699b      	ldr	r3, [r3, #24]
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d00a      	beq.n	801a956 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801a940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a942:	699c      	ldr	r4, [r3, #24]
 801a944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a946:	69d8      	ldr	r0, [r3, #28]
 801a948:	8a3b      	ldrh	r3, [r7, #16]
 801a94a:	9300      	str	r3, [sp, #0]
 801a94c:	4b1b      	ldr	r3, [pc, #108]	; (801a9bc <udp_input+0x224>)
 801a94e:	687a      	ldr	r2, [r7, #4]
 801a950:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a952:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801a954:	e021      	b.n	801a99a <udp_input+0x202>
        pbuf_free(p);
 801a956:	6878      	ldr	r0, [r7, #4]
 801a958:	f7f9 f99a 	bl	8013c90 <pbuf_free>
        goto end;
 801a95c:	e01c      	b.n	801a998 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801a95e:	7cfb      	ldrb	r3, [r7, #19]
 801a960:	2b00      	cmp	r3, #0
 801a962:	d112      	bne.n	801a98a <udp_input+0x1f2>
 801a964:	4b12      	ldr	r3, [pc, #72]	; (801a9b0 <udp_input+0x218>)
 801a966:	695b      	ldr	r3, [r3, #20]
 801a968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a96c:	2be0      	cmp	r3, #224	; 0xe0
 801a96e:	d00c      	beq.n	801a98a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801a970:	4b0f      	ldr	r3, [pc, #60]	; (801a9b0 <udp_input+0x218>)
 801a972:	899b      	ldrh	r3, [r3, #12]
 801a974:	3308      	adds	r3, #8
 801a976:	b29b      	uxth	r3, r3
 801a978:	b21b      	sxth	r3, r3
 801a97a:	4619      	mov	r1, r3
 801a97c:	6878      	ldr	r0, [r7, #4]
 801a97e:	f7f9 f974 	bl	8013c6a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801a982:	2103      	movs	r1, #3
 801a984:	6878      	ldr	r0, [r7, #4]
 801a986:	f001 fb93 	bl	801c0b0 <icmp_dest_unreach>
      pbuf_free(p);
 801a98a:	6878      	ldr	r0, [r7, #4]
 801a98c:	f7f9 f980 	bl	8013c90 <pbuf_free>
  return;
 801a990:	e003      	b.n	801a99a <udp_input+0x202>
    pbuf_free(p);
 801a992:	6878      	ldr	r0, [r7, #4]
 801a994:	f7f9 f97c 	bl	8013c90 <pbuf_free>
  return;
 801a998:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801a99a:	372c      	adds	r7, #44	; 0x2c
 801a99c:	46bd      	mov	sp, r7
 801a99e:	bd90      	pop	{r4, r7, pc}
 801a9a0:	080251b4 	.word	0x080251b4
 801a9a4:	08025258 	.word	0x08025258
 801a9a8:	08025208 	.word	0x08025208
 801a9ac:	08025270 	.word	0x08025270
 801a9b0:	20008088 	.word	0x20008088
 801a9b4:	2000b7b4 	.word	0x2000b7b4
 801a9b8:	0802528c 	.word	0x0802528c
 801a9bc:	20008098 	.word	0x20008098

0801a9c0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801a9c0:	b580      	push	{r7, lr}
 801a9c2:	b082      	sub	sp, #8
 801a9c4:	af00      	add	r7, sp, #0
 801a9c6:	6078      	str	r0, [r7, #4]
 801a9c8:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	d109      	bne.n	801a9e4 <udp_send+0x24>
 801a9d0:	4b11      	ldr	r3, [pc, #68]	; (801aa18 <udp_send+0x58>)
 801a9d2:	f240 12d5 	movw	r2, #469	; 0x1d5
 801a9d6:	4911      	ldr	r1, [pc, #68]	; (801aa1c <udp_send+0x5c>)
 801a9d8:	4811      	ldr	r0, [pc, #68]	; (801aa20 <udp_send+0x60>)
 801a9da:	f004 f9c1 	bl	801ed60 <iprintf>
 801a9de:	f06f 030f 	mvn.w	r3, #15
 801a9e2:	e015      	b.n	801aa10 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801a9e4:	683b      	ldr	r3, [r7, #0]
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	d109      	bne.n	801a9fe <udp_send+0x3e>
 801a9ea:	4b0b      	ldr	r3, [pc, #44]	; (801aa18 <udp_send+0x58>)
 801a9ec:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801a9f0:	490c      	ldr	r1, [pc, #48]	; (801aa24 <udp_send+0x64>)
 801a9f2:	480b      	ldr	r0, [pc, #44]	; (801aa20 <udp_send+0x60>)
 801a9f4:	f004 f9b4 	bl	801ed60 <iprintf>
 801a9f8:	f06f 030f 	mvn.w	r3, #15
 801a9fc:	e008      	b.n	801aa10 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	1d1a      	adds	r2, r3, #4
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	8a9b      	ldrh	r3, [r3, #20]
 801aa06:	6839      	ldr	r1, [r7, #0]
 801aa08:	6878      	ldr	r0, [r7, #4]
 801aa0a:	f000 f80d 	bl	801aa28 <udp_sendto>
 801aa0e:	4603      	mov	r3, r0
}
 801aa10:	4618      	mov	r0, r3
 801aa12:	3708      	adds	r7, #8
 801aa14:	46bd      	mov	sp, r7
 801aa16:	bd80      	pop	{r7, pc}
 801aa18:	080251b4 	.word	0x080251b4
 801aa1c:	080252a8 	.word	0x080252a8
 801aa20:	08025208 	.word	0x08025208
 801aa24:	080252c0 	.word	0x080252c0

0801aa28 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801aa28:	b580      	push	{r7, lr}
 801aa2a:	b088      	sub	sp, #32
 801aa2c:	af02      	add	r7, sp, #8
 801aa2e:	60f8      	str	r0, [r7, #12]
 801aa30:	60b9      	str	r1, [r7, #8]
 801aa32:	607a      	str	r2, [r7, #4]
 801aa34:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801aa36:	68fb      	ldr	r3, [r7, #12]
 801aa38:	2b00      	cmp	r3, #0
 801aa3a:	d109      	bne.n	801aa50 <udp_sendto+0x28>
 801aa3c:	4b23      	ldr	r3, [pc, #140]	; (801aacc <udp_sendto+0xa4>)
 801aa3e:	f44f 7206 	mov.w	r2, #536	; 0x218
 801aa42:	4923      	ldr	r1, [pc, #140]	; (801aad0 <udp_sendto+0xa8>)
 801aa44:	4823      	ldr	r0, [pc, #140]	; (801aad4 <udp_sendto+0xac>)
 801aa46:	f004 f98b 	bl	801ed60 <iprintf>
 801aa4a:	f06f 030f 	mvn.w	r3, #15
 801aa4e:	e038      	b.n	801aac2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801aa50:	68bb      	ldr	r3, [r7, #8]
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d109      	bne.n	801aa6a <udp_sendto+0x42>
 801aa56:	4b1d      	ldr	r3, [pc, #116]	; (801aacc <udp_sendto+0xa4>)
 801aa58:	f240 2219 	movw	r2, #537	; 0x219
 801aa5c:	491e      	ldr	r1, [pc, #120]	; (801aad8 <udp_sendto+0xb0>)
 801aa5e:	481d      	ldr	r0, [pc, #116]	; (801aad4 <udp_sendto+0xac>)
 801aa60:	f004 f97e 	bl	801ed60 <iprintf>
 801aa64:	f06f 030f 	mvn.w	r3, #15
 801aa68:	e02b      	b.n	801aac2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	d109      	bne.n	801aa84 <udp_sendto+0x5c>
 801aa70:	4b16      	ldr	r3, [pc, #88]	; (801aacc <udp_sendto+0xa4>)
 801aa72:	f240 221a 	movw	r2, #538	; 0x21a
 801aa76:	4919      	ldr	r1, [pc, #100]	; (801aadc <udp_sendto+0xb4>)
 801aa78:	4816      	ldr	r0, [pc, #88]	; (801aad4 <udp_sendto+0xac>)
 801aa7a:	f004 f971 	bl	801ed60 <iprintf>
 801aa7e:	f06f 030f 	mvn.w	r3, #15
 801aa82:	e01e      	b.n	801aac2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801aa84:	68fb      	ldr	r3, [r7, #12]
 801aa86:	7a1b      	ldrb	r3, [r3, #8]
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	d006      	beq.n	801aa9a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	7a1b      	ldrb	r3, [r3, #8]
 801aa90:	4618      	mov	r0, r3
 801aa92:	f7f8 fd6f 	bl	8013574 <netif_get_by_index>
 801aa96:	6178      	str	r0, [r7, #20]
 801aa98:	e003      	b.n	801aaa2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801aa9a:	6878      	ldr	r0, [r7, #4]
 801aa9c:	f001 fb92 	bl	801c1c4 <ip4_route>
 801aaa0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801aaa2:	697b      	ldr	r3, [r7, #20]
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	d102      	bne.n	801aaae <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801aaa8:	f06f 0303 	mvn.w	r3, #3
 801aaac:	e009      	b.n	801aac2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801aaae:	887a      	ldrh	r2, [r7, #2]
 801aab0:	697b      	ldr	r3, [r7, #20]
 801aab2:	9300      	str	r3, [sp, #0]
 801aab4:	4613      	mov	r3, r2
 801aab6:	687a      	ldr	r2, [r7, #4]
 801aab8:	68b9      	ldr	r1, [r7, #8]
 801aaba:	68f8      	ldr	r0, [r7, #12]
 801aabc:	f000 f810 	bl	801aae0 <udp_sendto_if>
 801aac0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801aac2:	4618      	mov	r0, r3
 801aac4:	3718      	adds	r7, #24
 801aac6:	46bd      	mov	sp, r7
 801aac8:	bd80      	pop	{r7, pc}
 801aaca:	bf00      	nop
 801aacc:	080251b4 	.word	0x080251b4
 801aad0:	080252d8 	.word	0x080252d8
 801aad4:	08025208 	.word	0x08025208
 801aad8:	080252f0 	.word	0x080252f0
 801aadc:	0802530c 	.word	0x0802530c

0801aae0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801aae0:	b580      	push	{r7, lr}
 801aae2:	b088      	sub	sp, #32
 801aae4:	af02      	add	r7, sp, #8
 801aae6:	60f8      	str	r0, [r7, #12]
 801aae8:	60b9      	str	r1, [r7, #8]
 801aaea:	607a      	str	r2, [r7, #4]
 801aaec:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801aaee:	68fb      	ldr	r3, [r7, #12]
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d109      	bne.n	801ab08 <udp_sendto_if+0x28>
 801aaf4:	4b2e      	ldr	r3, [pc, #184]	; (801abb0 <udp_sendto_if+0xd0>)
 801aaf6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aafa:	492e      	ldr	r1, [pc, #184]	; (801abb4 <udp_sendto_if+0xd4>)
 801aafc:	482e      	ldr	r0, [pc, #184]	; (801abb8 <udp_sendto_if+0xd8>)
 801aafe:	f004 f92f 	bl	801ed60 <iprintf>
 801ab02:	f06f 030f 	mvn.w	r3, #15
 801ab06:	e04f      	b.n	801aba8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801ab08:	68bb      	ldr	r3, [r7, #8]
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d109      	bne.n	801ab22 <udp_sendto_if+0x42>
 801ab0e:	4b28      	ldr	r3, [pc, #160]	; (801abb0 <udp_sendto_if+0xd0>)
 801ab10:	f240 2281 	movw	r2, #641	; 0x281
 801ab14:	4929      	ldr	r1, [pc, #164]	; (801abbc <udp_sendto_if+0xdc>)
 801ab16:	4828      	ldr	r0, [pc, #160]	; (801abb8 <udp_sendto_if+0xd8>)
 801ab18:	f004 f922 	bl	801ed60 <iprintf>
 801ab1c:	f06f 030f 	mvn.w	r3, #15
 801ab20:	e042      	b.n	801aba8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	d109      	bne.n	801ab3c <udp_sendto_if+0x5c>
 801ab28:	4b21      	ldr	r3, [pc, #132]	; (801abb0 <udp_sendto_if+0xd0>)
 801ab2a:	f240 2282 	movw	r2, #642	; 0x282
 801ab2e:	4924      	ldr	r1, [pc, #144]	; (801abc0 <udp_sendto_if+0xe0>)
 801ab30:	4821      	ldr	r0, [pc, #132]	; (801abb8 <udp_sendto_if+0xd8>)
 801ab32:	f004 f915 	bl	801ed60 <iprintf>
 801ab36:	f06f 030f 	mvn.w	r3, #15
 801ab3a:	e035      	b.n	801aba8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801ab3c:	6a3b      	ldr	r3, [r7, #32]
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	d109      	bne.n	801ab56 <udp_sendto_if+0x76>
 801ab42:	4b1b      	ldr	r3, [pc, #108]	; (801abb0 <udp_sendto_if+0xd0>)
 801ab44:	f240 2283 	movw	r2, #643	; 0x283
 801ab48:	491e      	ldr	r1, [pc, #120]	; (801abc4 <udp_sendto_if+0xe4>)
 801ab4a:	481b      	ldr	r0, [pc, #108]	; (801abb8 <udp_sendto_if+0xd8>)
 801ab4c:	f004 f908 	bl	801ed60 <iprintf>
 801ab50:	f06f 030f 	mvn.w	r3, #15
 801ab54:	e028      	b.n	801aba8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ab56:	68fb      	ldr	r3, [r7, #12]
 801ab58:	2b00      	cmp	r3, #0
 801ab5a:	d009      	beq.n	801ab70 <udp_sendto_if+0x90>
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d005      	beq.n	801ab70 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801ab64:	68fb      	ldr	r3, [r7, #12]
 801ab66:	681b      	ldr	r3, [r3, #0]
 801ab68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ab6c:	2be0      	cmp	r3, #224	; 0xe0
 801ab6e:	d103      	bne.n	801ab78 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801ab70:	6a3b      	ldr	r3, [r7, #32]
 801ab72:	3304      	adds	r3, #4
 801ab74:	617b      	str	r3, [r7, #20]
 801ab76:	e00b      	b.n	801ab90 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801ab78:	68fb      	ldr	r3, [r7, #12]
 801ab7a:	681a      	ldr	r2, [r3, #0]
 801ab7c:	6a3b      	ldr	r3, [r7, #32]
 801ab7e:	3304      	adds	r3, #4
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	429a      	cmp	r2, r3
 801ab84:	d002      	beq.n	801ab8c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801ab86:	f06f 0303 	mvn.w	r3, #3
 801ab8a:	e00d      	b.n	801aba8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801ab8c:	68fb      	ldr	r3, [r7, #12]
 801ab8e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801ab90:	887a      	ldrh	r2, [r7, #2]
 801ab92:	697b      	ldr	r3, [r7, #20]
 801ab94:	9301      	str	r3, [sp, #4]
 801ab96:	6a3b      	ldr	r3, [r7, #32]
 801ab98:	9300      	str	r3, [sp, #0]
 801ab9a:	4613      	mov	r3, r2
 801ab9c:	687a      	ldr	r2, [r7, #4]
 801ab9e:	68b9      	ldr	r1, [r7, #8]
 801aba0:	68f8      	ldr	r0, [r7, #12]
 801aba2:	f000 f811 	bl	801abc8 <udp_sendto_if_src>
 801aba6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801aba8:	4618      	mov	r0, r3
 801abaa:	3718      	adds	r7, #24
 801abac:	46bd      	mov	sp, r7
 801abae:	bd80      	pop	{r7, pc}
 801abb0:	080251b4 	.word	0x080251b4
 801abb4:	08025328 	.word	0x08025328
 801abb8:	08025208 	.word	0x08025208
 801abbc:	08025344 	.word	0x08025344
 801abc0:	08025360 	.word	0x08025360
 801abc4:	08025380 	.word	0x08025380

0801abc8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801abc8:	b580      	push	{r7, lr}
 801abca:	b08c      	sub	sp, #48	; 0x30
 801abcc:	af04      	add	r7, sp, #16
 801abce:	60f8      	str	r0, [r7, #12]
 801abd0:	60b9      	str	r1, [r7, #8]
 801abd2:	607a      	str	r2, [r7, #4]
 801abd4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801abd6:	68fb      	ldr	r3, [r7, #12]
 801abd8:	2b00      	cmp	r3, #0
 801abda:	d109      	bne.n	801abf0 <udp_sendto_if_src+0x28>
 801abdc:	4b65      	ldr	r3, [pc, #404]	; (801ad74 <udp_sendto_if_src+0x1ac>)
 801abde:	f240 22d1 	movw	r2, #721	; 0x2d1
 801abe2:	4965      	ldr	r1, [pc, #404]	; (801ad78 <udp_sendto_if_src+0x1b0>)
 801abe4:	4865      	ldr	r0, [pc, #404]	; (801ad7c <udp_sendto_if_src+0x1b4>)
 801abe6:	f004 f8bb 	bl	801ed60 <iprintf>
 801abea:	f06f 030f 	mvn.w	r3, #15
 801abee:	e0bc      	b.n	801ad6a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801abf0:	68bb      	ldr	r3, [r7, #8]
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d109      	bne.n	801ac0a <udp_sendto_if_src+0x42>
 801abf6:	4b5f      	ldr	r3, [pc, #380]	; (801ad74 <udp_sendto_if_src+0x1ac>)
 801abf8:	f240 22d2 	movw	r2, #722	; 0x2d2
 801abfc:	4960      	ldr	r1, [pc, #384]	; (801ad80 <udp_sendto_if_src+0x1b8>)
 801abfe:	485f      	ldr	r0, [pc, #380]	; (801ad7c <udp_sendto_if_src+0x1b4>)
 801ac00:	f004 f8ae 	bl	801ed60 <iprintf>
 801ac04:	f06f 030f 	mvn.w	r3, #15
 801ac08:	e0af      	b.n	801ad6a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	d109      	bne.n	801ac24 <udp_sendto_if_src+0x5c>
 801ac10:	4b58      	ldr	r3, [pc, #352]	; (801ad74 <udp_sendto_if_src+0x1ac>)
 801ac12:	f240 22d3 	movw	r2, #723	; 0x2d3
 801ac16:	495b      	ldr	r1, [pc, #364]	; (801ad84 <udp_sendto_if_src+0x1bc>)
 801ac18:	4858      	ldr	r0, [pc, #352]	; (801ad7c <udp_sendto_if_src+0x1b4>)
 801ac1a:	f004 f8a1 	bl	801ed60 <iprintf>
 801ac1e:	f06f 030f 	mvn.w	r3, #15
 801ac22:	e0a2      	b.n	801ad6a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801ac24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	d109      	bne.n	801ac3e <udp_sendto_if_src+0x76>
 801ac2a:	4b52      	ldr	r3, [pc, #328]	; (801ad74 <udp_sendto_if_src+0x1ac>)
 801ac2c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801ac30:	4955      	ldr	r1, [pc, #340]	; (801ad88 <udp_sendto_if_src+0x1c0>)
 801ac32:	4852      	ldr	r0, [pc, #328]	; (801ad7c <udp_sendto_if_src+0x1b4>)
 801ac34:	f004 f894 	bl	801ed60 <iprintf>
 801ac38:	f06f 030f 	mvn.w	r3, #15
 801ac3c:	e095      	b.n	801ad6a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801ac3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	d109      	bne.n	801ac58 <udp_sendto_if_src+0x90>
 801ac44:	4b4b      	ldr	r3, [pc, #300]	; (801ad74 <udp_sendto_if_src+0x1ac>)
 801ac46:	f240 22d5 	movw	r2, #725	; 0x2d5
 801ac4a:	4950      	ldr	r1, [pc, #320]	; (801ad8c <udp_sendto_if_src+0x1c4>)
 801ac4c:	484b      	ldr	r0, [pc, #300]	; (801ad7c <udp_sendto_if_src+0x1b4>)
 801ac4e:	f004 f887 	bl	801ed60 <iprintf>
 801ac52:	f06f 030f 	mvn.w	r3, #15
 801ac56:	e088      	b.n	801ad6a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801ac58:	68fb      	ldr	r3, [r7, #12]
 801ac5a:	8a5b      	ldrh	r3, [r3, #18]
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d10f      	bne.n	801ac80 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801ac60:	68f9      	ldr	r1, [r7, #12]
 801ac62:	68fb      	ldr	r3, [r7, #12]
 801ac64:	8a5b      	ldrh	r3, [r3, #18]
 801ac66:	461a      	mov	r2, r3
 801ac68:	68f8      	ldr	r0, [r7, #12]
 801ac6a:	f000 f893 	bl	801ad94 <udp_bind>
 801ac6e:	4603      	mov	r3, r0
 801ac70:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801ac72:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ac76:	2b00      	cmp	r3, #0
 801ac78:	d002      	beq.n	801ac80 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801ac7a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ac7e:	e074      	b.n	801ad6a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801ac80:	68bb      	ldr	r3, [r7, #8]
 801ac82:	891b      	ldrh	r3, [r3, #8]
 801ac84:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801ac88:	4293      	cmp	r3, r2
 801ac8a:	d902      	bls.n	801ac92 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801ac8c:	f04f 33ff 	mov.w	r3, #4294967295
 801ac90:	e06b      	b.n	801ad6a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801ac92:	2108      	movs	r1, #8
 801ac94:	68b8      	ldr	r0, [r7, #8]
 801ac96:	f7f8 ff65 	bl	8013b64 <pbuf_add_header>
 801ac9a:	4603      	mov	r3, r0
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	d015      	beq.n	801accc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801aca0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aca4:	2108      	movs	r1, #8
 801aca6:	2022      	movs	r0, #34	; 0x22
 801aca8:	f7f8 fd0e 	bl	80136c8 <pbuf_alloc>
 801acac:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801acae:	69fb      	ldr	r3, [r7, #28]
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d102      	bne.n	801acba <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801acb4:	f04f 33ff 	mov.w	r3, #4294967295
 801acb8:	e057      	b.n	801ad6a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801acba:	68bb      	ldr	r3, [r7, #8]
 801acbc:	891b      	ldrh	r3, [r3, #8]
 801acbe:	2b00      	cmp	r3, #0
 801acc0:	d006      	beq.n	801acd0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801acc2:	68b9      	ldr	r1, [r7, #8]
 801acc4:	69f8      	ldr	r0, [r7, #28]
 801acc6:	f7f9 f907 	bl	8013ed8 <pbuf_chain>
 801acca:	e001      	b.n	801acd0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801accc:	68bb      	ldr	r3, [r7, #8]
 801acce:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801acd0:	69fb      	ldr	r3, [r7, #28]
 801acd2:	895b      	ldrh	r3, [r3, #10]
 801acd4:	2b07      	cmp	r3, #7
 801acd6:	d806      	bhi.n	801ace6 <udp_sendto_if_src+0x11e>
 801acd8:	4b26      	ldr	r3, [pc, #152]	; (801ad74 <udp_sendto_if_src+0x1ac>)
 801acda:	f240 320d 	movw	r2, #781	; 0x30d
 801acde:	492c      	ldr	r1, [pc, #176]	; (801ad90 <udp_sendto_if_src+0x1c8>)
 801ace0:	4826      	ldr	r0, [pc, #152]	; (801ad7c <udp_sendto_if_src+0x1b4>)
 801ace2:	f004 f83d 	bl	801ed60 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801ace6:	69fb      	ldr	r3, [r7, #28]
 801ace8:	685b      	ldr	r3, [r3, #4]
 801acea:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801acec:	68fb      	ldr	r3, [r7, #12]
 801acee:	8a5b      	ldrh	r3, [r3, #18]
 801acf0:	4618      	mov	r0, r3
 801acf2:	f7f7 fc11 	bl	8012518 <lwip_htons>
 801acf6:	4603      	mov	r3, r0
 801acf8:	461a      	mov	r2, r3
 801acfa:	697b      	ldr	r3, [r7, #20]
 801acfc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801acfe:	887b      	ldrh	r3, [r7, #2]
 801ad00:	4618      	mov	r0, r3
 801ad02:	f7f7 fc09 	bl	8012518 <lwip_htons>
 801ad06:	4603      	mov	r3, r0
 801ad08:	461a      	mov	r2, r3
 801ad0a:	697b      	ldr	r3, [r7, #20]
 801ad0c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801ad0e:	697b      	ldr	r3, [r7, #20]
 801ad10:	2200      	movs	r2, #0
 801ad12:	719a      	strb	r2, [r3, #6]
 801ad14:	2200      	movs	r2, #0
 801ad16:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801ad18:	69fb      	ldr	r3, [r7, #28]
 801ad1a:	891b      	ldrh	r3, [r3, #8]
 801ad1c:	4618      	mov	r0, r3
 801ad1e:	f7f7 fbfb 	bl	8012518 <lwip_htons>
 801ad22:	4603      	mov	r3, r0
 801ad24:	461a      	mov	r2, r3
 801ad26:	697b      	ldr	r3, [r7, #20]
 801ad28:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801ad2a:	2311      	movs	r3, #17
 801ad2c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801ad2e:	68fb      	ldr	r3, [r7, #12]
 801ad30:	7adb      	ldrb	r3, [r3, #11]
 801ad32:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801ad34:	68fb      	ldr	r3, [r7, #12]
 801ad36:	7a9b      	ldrb	r3, [r3, #10]
 801ad38:	7cb9      	ldrb	r1, [r7, #18]
 801ad3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ad3c:	9202      	str	r2, [sp, #8]
 801ad3e:	7cfa      	ldrb	r2, [r7, #19]
 801ad40:	9201      	str	r2, [sp, #4]
 801ad42:	9300      	str	r3, [sp, #0]
 801ad44:	460b      	mov	r3, r1
 801ad46:	687a      	ldr	r2, [r7, #4]
 801ad48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ad4a:	69f8      	ldr	r0, [r7, #28]
 801ad4c:	f001 fc22 	bl	801c594 <ip4_output_if_src>
 801ad50:	4603      	mov	r3, r0
 801ad52:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801ad54:	69fa      	ldr	r2, [r7, #28]
 801ad56:	68bb      	ldr	r3, [r7, #8]
 801ad58:	429a      	cmp	r2, r3
 801ad5a:	d004      	beq.n	801ad66 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801ad5c:	69f8      	ldr	r0, [r7, #28]
 801ad5e:	f7f8 ff97 	bl	8013c90 <pbuf_free>
    q = NULL;
 801ad62:	2300      	movs	r3, #0
 801ad64:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801ad66:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801ad6a:	4618      	mov	r0, r3
 801ad6c:	3720      	adds	r7, #32
 801ad6e:	46bd      	mov	sp, r7
 801ad70:	bd80      	pop	{r7, pc}
 801ad72:	bf00      	nop
 801ad74:	080251b4 	.word	0x080251b4
 801ad78:	080253a0 	.word	0x080253a0
 801ad7c:	08025208 	.word	0x08025208
 801ad80:	080253c0 	.word	0x080253c0
 801ad84:	080253e0 	.word	0x080253e0
 801ad88:	08025404 	.word	0x08025404
 801ad8c:	08025428 	.word	0x08025428
 801ad90:	0802544c 	.word	0x0802544c

0801ad94 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801ad94:	b580      	push	{r7, lr}
 801ad96:	b086      	sub	sp, #24
 801ad98:	af00      	add	r7, sp, #0
 801ad9a:	60f8      	str	r0, [r7, #12]
 801ad9c:	60b9      	str	r1, [r7, #8]
 801ad9e:	4613      	mov	r3, r2
 801ada0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801ada2:	68bb      	ldr	r3, [r7, #8]
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d101      	bne.n	801adac <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801ada8:	4b39      	ldr	r3, [pc, #228]	; (801ae90 <udp_bind+0xfc>)
 801adaa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801adac:	68fb      	ldr	r3, [r7, #12]
 801adae:	2b00      	cmp	r3, #0
 801adb0:	d109      	bne.n	801adc6 <udp_bind+0x32>
 801adb2:	4b38      	ldr	r3, [pc, #224]	; (801ae94 <udp_bind+0x100>)
 801adb4:	f240 32b7 	movw	r2, #951	; 0x3b7
 801adb8:	4937      	ldr	r1, [pc, #220]	; (801ae98 <udp_bind+0x104>)
 801adba:	4838      	ldr	r0, [pc, #224]	; (801ae9c <udp_bind+0x108>)
 801adbc:	f003 ffd0 	bl	801ed60 <iprintf>
 801adc0:	f06f 030f 	mvn.w	r3, #15
 801adc4:	e060      	b.n	801ae88 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801adc6:	2300      	movs	r3, #0
 801adc8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801adca:	4b35      	ldr	r3, [pc, #212]	; (801aea0 <udp_bind+0x10c>)
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	617b      	str	r3, [r7, #20]
 801add0:	e009      	b.n	801ade6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801add2:	68fa      	ldr	r2, [r7, #12]
 801add4:	697b      	ldr	r3, [r7, #20]
 801add6:	429a      	cmp	r2, r3
 801add8:	d102      	bne.n	801ade0 <udp_bind+0x4c>
      rebind = 1;
 801adda:	2301      	movs	r3, #1
 801addc:	74fb      	strb	r3, [r7, #19]
      break;
 801adde:	e005      	b.n	801adec <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ade0:	697b      	ldr	r3, [r7, #20]
 801ade2:	68db      	ldr	r3, [r3, #12]
 801ade4:	617b      	str	r3, [r7, #20]
 801ade6:	697b      	ldr	r3, [r7, #20]
 801ade8:	2b00      	cmp	r3, #0
 801adea:	d1f2      	bne.n	801add2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801adec:	88fb      	ldrh	r3, [r7, #6]
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d109      	bne.n	801ae06 <udp_bind+0x72>
    port = udp_new_port();
 801adf2:	f7ff fc35 	bl	801a660 <udp_new_port>
 801adf6:	4603      	mov	r3, r0
 801adf8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801adfa:	88fb      	ldrh	r3, [r7, #6]
 801adfc:	2b00      	cmp	r3, #0
 801adfe:	d12c      	bne.n	801ae5a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801ae00:	f06f 0307 	mvn.w	r3, #7
 801ae04:	e040      	b.n	801ae88 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ae06:	4b26      	ldr	r3, [pc, #152]	; (801aea0 <udp_bind+0x10c>)
 801ae08:	681b      	ldr	r3, [r3, #0]
 801ae0a:	617b      	str	r3, [r7, #20]
 801ae0c:	e022      	b.n	801ae54 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801ae0e:	68fa      	ldr	r2, [r7, #12]
 801ae10:	697b      	ldr	r3, [r7, #20]
 801ae12:	429a      	cmp	r2, r3
 801ae14:	d01b      	beq.n	801ae4e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801ae16:	697b      	ldr	r3, [r7, #20]
 801ae18:	8a5b      	ldrh	r3, [r3, #18]
 801ae1a:	88fa      	ldrh	r2, [r7, #6]
 801ae1c:	429a      	cmp	r2, r3
 801ae1e:	d116      	bne.n	801ae4e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ae20:	697b      	ldr	r3, [r7, #20]
 801ae22:	681a      	ldr	r2, [r3, #0]
 801ae24:	68bb      	ldr	r3, [r7, #8]
 801ae26:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801ae28:	429a      	cmp	r2, r3
 801ae2a:	d00d      	beq.n	801ae48 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ae2c:	68bb      	ldr	r3, [r7, #8]
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d00a      	beq.n	801ae48 <udp_bind+0xb4>
 801ae32:	68bb      	ldr	r3, [r7, #8]
 801ae34:	681b      	ldr	r3, [r3, #0]
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	d006      	beq.n	801ae48 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801ae3a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d003      	beq.n	801ae48 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801ae40:	697b      	ldr	r3, [r7, #20]
 801ae42:	681b      	ldr	r3, [r3, #0]
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	d102      	bne.n	801ae4e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801ae48:	f06f 0307 	mvn.w	r3, #7
 801ae4c:	e01c      	b.n	801ae88 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ae4e:	697b      	ldr	r3, [r7, #20]
 801ae50:	68db      	ldr	r3, [r3, #12]
 801ae52:	617b      	str	r3, [r7, #20]
 801ae54:	697b      	ldr	r3, [r7, #20]
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	d1d9      	bne.n	801ae0e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801ae5a:	68bb      	ldr	r3, [r7, #8]
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	d002      	beq.n	801ae66 <udp_bind+0xd2>
 801ae60:	68bb      	ldr	r3, [r7, #8]
 801ae62:	681b      	ldr	r3, [r3, #0]
 801ae64:	e000      	b.n	801ae68 <udp_bind+0xd4>
 801ae66:	2300      	movs	r3, #0
 801ae68:	68fa      	ldr	r2, [r7, #12]
 801ae6a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801ae6c:	68fb      	ldr	r3, [r7, #12]
 801ae6e:	88fa      	ldrh	r2, [r7, #6]
 801ae70:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801ae72:	7cfb      	ldrb	r3, [r7, #19]
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	d106      	bne.n	801ae86 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801ae78:	4b09      	ldr	r3, [pc, #36]	; (801aea0 <udp_bind+0x10c>)
 801ae7a:	681a      	ldr	r2, [r3, #0]
 801ae7c:	68fb      	ldr	r3, [r7, #12]
 801ae7e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801ae80:	4a07      	ldr	r2, [pc, #28]	; (801aea0 <udp_bind+0x10c>)
 801ae82:	68fb      	ldr	r3, [r7, #12]
 801ae84:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801ae86:	2300      	movs	r3, #0
}
 801ae88:	4618      	mov	r0, r3
 801ae8a:	3718      	adds	r7, #24
 801ae8c:	46bd      	mov	sp, r7
 801ae8e:	bd80      	pop	{r7, pc}
 801ae90:	08026ca4 	.word	0x08026ca4
 801ae94:	080251b4 	.word	0x080251b4
 801ae98:	0802547c 	.word	0x0802547c
 801ae9c:	08025208 	.word	0x08025208
 801aea0:	2000b7b4 	.word	0x2000b7b4

0801aea4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801aea4:	b580      	push	{r7, lr}
 801aea6:	b084      	sub	sp, #16
 801aea8:	af00      	add	r7, sp, #0
 801aeaa:	60f8      	str	r0, [r7, #12]
 801aeac:	60b9      	str	r1, [r7, #8]
 801aeae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801aeb0:	68fb      	ldr	r3, [r7, #12]
 801aeb2:	2b00      	cmp	r3, #0
 801aeb4:	d107      	bne.n	801aec6 <udp_recv+0x22>
 801aeb6:	4b08      	ldr	r3, [pc, #32]	; (801aed8 <udp_recv+0x34>)
 801aeb8:	f240 428a 	movw	r2, #1162	; 0x48a
 801aebc:	4907      	ldr	r1, [pc, #28]	; (801aedc <udp_recv+0x38>)
 801aebe:	4808      	ldr	r0, [pc, #32]	; (801aee0 <udp_recv+0x3c>)
 801aec0:	f003 ff4e 	bl	801ed60 <iprintf>
 801aec4:	e005      	b.n	801aed2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801aec6:	68fb      	ldr	r3, [r7, #12]
 801aec8:	68ba      	ldr	r2, [r7, #8]
 801aeca:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801aecc:	68fb      	ldr	r3, [r7, #12]
 801aece:	687a      	ldr	r2, [r7, #4]
 801aed0:	61da      	str	r2, [r3, #28]
}
 801aed2:	3710      	adds	r7, #16
 801aed4:	46bd      	mov	sp, r7
 801aed6:	bd80      	pop	{r7, pc}
 801aed8:	080251b4 	.word	0x080251b4
 801aedc:	080254e8 	.word	0x080254e8
 801aee0:	08025208 	.word	0x08025208

0801aee4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801aee4:	b580      	push	{r7, lr}
 801aee6:	b084      	sub	sp, #16
 801aee8:	af00      	add	r7, sp, #0
 801aeea:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	d107      	bne.n	801af02 <udp_remove+0x1e>
 801aef2:	4b19      	ldr	r3, [pc, #100]	; (801af58 <udp_remove+0x74>)
 801aef4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801aef8:	4918      	ldr	r1, [pc, #96]	; (801af5c <udp_remove+0x78>)
 801aefa:	4819      	ldr	r0, [pc, #100]	; (801af60 <udp_remove+0x7c>)
 801aefc:	f003 ff30 	bl	801ed60 <iprintf>
 801af00:	e026      	b.n	801af50 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801af02:	4b18      	ldr	r3, [pc, #96]	; (801af64 <udp_remove+0x80>)
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	687a      	ldr	r2, [r7, #4]
 801af08:	429a      	cmp	r2, r3
 801af0a:	d105      	bne.n	801af18 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801af0c:	4b15      	ldr	r3, [pc, #84]	; (801af64 <udp_remove+0x80>)
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	68db      	ldr	r3, [r3, #12]
 801af12:	4a14      	ldr	r2, [pc, #80]	; (801af64 <udp_remove+0x80>)
 801af14:	6013      	str	r3, [r2, #0]
 801af16:	e017      	b.n	801af48 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801af18:	4b12      	ldr	r3, [pc, #72]	; (801af64 <udp_remove+0x80>)
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	60fb      	str	r3, [r7, #12]
 801af1e:	e010      	b.n	801af42 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801af20:	68fb      	ldr	r3, [r7, #12]
 801af22:	68db      	ldr	r3, [r3, #12]
 801af24:	2b00      	cmp	r3, #0
 801af26:	d009      	beq.n	801af3c <udp_remove+0x58>
 801af28:	68fb      	ldr	r3, [r7, #12]
 801af2a:	68db      	ldr	r3, [r3, #12]
 801af2c:	687a      	ldr	r2, [r7, #4]
 801af2e:	429a      	cmp	r2, r3
 801af30:	d104      	bne.n	801af3c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	68da      	ldr	r2, [r3, #12]
 801af36:	68fb      	ldr	r3, [r7, #12]
 801af38:	60da      	str	r2, [r3, #12]
        break;
 801af3a:	e005      	b.n	801af48 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801af3c:	68fb      	ldr	r3, [r7, #12]
 801af3e:	68db      	ldr	r3, [r3, #12]
 801af40:	60fb      	str	r3, [r7, #12]
 801af42:	68fb      	ldr	r3, [r7, #12]
 801af44:	2b00      	cmp	r3, #0
 801af46:	d1eb      	bne.n	801af20 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801af48:	6879      	ldr	r1, [r7, #4]
 801af4a:	2000      	movs	r0, #0
 801af4c:	f7f8 f822 	bl	8012f94 <memp_free>
}
 801af50:	3710      	adds	r7, #16
 801af52:	46bd      	mov	sp, r7
 801af54:	bd80      	pop	{r7, pc}
 801af56:	bf00      	nop
 801af58:	080251b4 	.word	0x080251b4
 801af5c:	08025500 	.word	0x08025500
 801af60:	08025208 	.word	0x08025208
 801af64:	2000b7b4 	.word	0x2000b7b4

0801af68 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801af68:	b580      	push	{r7, lr}
 801af6a:	b082      	sub	sp, #8
 801af6c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801af6e:	2000      	movs	r0, #0
 801af70:	f7f7 ffbe 	bl	8012ef0 <memp_malloc>
 801af74:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	2b00      	cmp	r3, #0
 801af7a:	d007      	beq.n	801af8c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801af7c:	2220      	movs	r2, #32
 801af7e:	2100      	movs	r1, #0
 801af80:	6878      	ldr	r0, [r7, #4]
 801af82:	f003 fc67 	bl	801e854 <memset>
    pcb->ttl = UDP_TTL;
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	22ff      	movs	r2, #255	; 0xff
 801af8a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801af8c:	687b      	ldr	r3, [r7, #4]
}
 801af8e:	4618      	mov	r0, r3
 801af90:	3708      	adds	r7, #8
 801af92:	46bd      	mov	sp, r7
 801af94:	bd80      	pop	{r7, pc}

0801af96 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801af96:	b580      	push	{r7, lr}
 801af98:	b084      	sub	sp, #16
 801af9a:	af00      	add	r7, sp, #0
 801af9c:	4603      	mov	r3, r0
 801af9e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801afa0:	f7ff ffe2 	bl	801af68 <udp_new>
 801afa4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801afa6:	68fb      	ldr	r3, [r7, #12]
}
 801afa8:	4618      	mov	r0, r3
 801afaa:	3710      	adds	r7, #16
 801afac:	46bd      	mov	sp, r7
 801afae:	bd80      	pop	{r7, pc}

0801afb0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801afb0:	b480      	push	{r7}
 801afb2:	b085      	sub	sp, #20
 801afb4:	af00      	add	r7, sp, #0
 801afb6:	6078      	str	r0, [r7, #4]
 801afb8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d01e      	beq.n	801affe <udp_netif_ip_addr_changed+0x4e>
 801afc0:	687b      	ldr	r3, [r7, #4]
 801afc2:	681b      	ldr	r3, [r3, #0]
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	d01a      	beq.n	801affe <udp_netif_ip_addr_changed+0x4e>
 801afc8:	683b      	ldr	r3, [r7, #0]
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d017      	beq.n	801affe <udp_netif_ip_addr_changed+0x4e>
 801afce:	683b      	ldr	r3, [r7, #0]
 801afd0:	681b      	ldr	r3, [r3, #0]
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d013      	beq.n	801affe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801afd6:	4b0d      	ldr	r3, [pc, #52]	; (801b00c <udp_netif_ip_addr_changed+0x5c>)
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	60fb      	str	r3, [r7, #12]
 801afdc:	e00c      	b.n	801aff8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801afde:	68fb      	ldr	r3, [r7, #12]
 801afe0:	681a      	ldr	r2, [r3, #0]
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	429a      	cmp	r2, r3
 801afe8:	d103      	bne.n	801aff2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801afea:	683b      	ldr	r3, [r7, #0]
 801afec:	681a      	ldr	r2, [r3, #0]
 801afee:	68fb      	ldr	r3, [r7, #12]
 801aff0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801aff2:	68fb      	ldr	r3, [r7, #12]
 801aff4:	68db      	ldr	r3, [r3, #12]
 801aff6:	60fb      	str	r3, [r7, #12]
 801aff8:	68fb      	ldr	r3, [r7, #12]
 801affa:	2b00      	cmp	r3, #0
 801affc:	d1ef      	bne.n	801afde <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801affe:	bf00      	nop
 801b000:	3714      	adds	r7, #20
 801b002:	46bd      	mov	sp, r7
 801b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b008:	4770      	bx	lr
 801b00a:	bf00      	nop
 801b00c:	2000b7b4 	.word	0x2000b7b4

0801b010 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801b010:	b580      	push	{r7, lr}
 801b012:	b082      	sub	sp, #8
 801b014:	af00      	add	r7, sp, #0
 801b016:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801b018:	4915      	ldr	r1, [pc, #84]	; (801b070 <etharp_free_entry+0x60>)
 801b01a:	687a      	ldr	r2, [r7, #4]
 801b01c:	4613      	mov	r3, r2
 801b01e:	005b      	lsls	r3, r3, #1
 801b020:	4413      	add	r3, r2
 801b022:	00db      	lsls	r3, r3, #3
 801b024:	440b      	add	r3, r1
 801b026:	681b      	ldr	r3, [r3, #0]
 801b028:	2b00      	cmp	r3, #0
 801b02a:	d013      	beq.n	801b054 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801b02c:	4910      	ldr	r1, [pc, #64]	; (801b070 <etharp_free_entry+0x60>)
 801b02e:	687a      	ldr	r2, [r7, #4]
 801b030:	4613      	mov	r3, r2
 801b032:	005b      	lsls	r3, r3, #1
 801b034:	4413      	add	r3, r2
 801b036:	00db      	lsls	r3, r3, #3
 801b038:	440b      	add	r3, r1
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	4618      	mov	r0, r3
 801b03e:	f7f8 fe27 	bl	8013c90 <pbuf_free>
    arp_table[i].q = NULL;
 801b042:	490b      	ldr	r1, [pc, #44]	; (801b070 <etharp_free_entry+0x60>)
 801b044:	687a      	ldr	r2, [r7, #4]
 801b046:	4613      	mov	r3, r2
 801b048:	005b      	lsls	r3, r3, #1
 801b04a:	4413      	add	r3, r2
 801b04c:	00db      	lsls	r3, r3, #3
 801b04e:	440b      	add	r3, r1
 801b050:	2200      	movs	r2, #0
 801b052:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801b054:	4906      	ldr	r1, [pc, #24]	; (801b070 <etharp_free_entry+0x60>)
 801b056:	687a      	ldr	r2, [r7, #4]
 801b058:	4613      	mov	r3, r2
 801b05a:	005b      	lsls	r3, r3, #1
 801b05c:	4413      	add	r3, r2
 801b05e:	00db      	lsls	r3, r3, #3
 801b060:	440b      	add	r3, r1
 801b062:	3314      	adds	r3, #20
 801b064:	2200      	movs	r2, #0
 801b066:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801b068:	bf00      	nop
 801b06a:	3708      	adds	r7, #8
 801b06c:	46bd      	mov	sp, r7
 801b06e:	bd80      	pop	{r7, pc}
 801b070:	2000479c 	.word	0x2000479c

0801b074 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801b074:	b580      	push	{r7, lr}
 801b076:	b082      	sub	sp, #8
 801b078:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b07a:	2300      	movs	r3, #0
 801b07c:	607b      	str	r3, [r7, #4]
 801b07e:	e096      	b.n	801b1ae <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801b080:	494f      	ldr	r1, [pc, #316]	; (801b1c0 <etharp_tmr+0x14c>)
 801b082:	687a      	ldr	r2, [r7, #4]
 801b084:	4613      	mov	r3, r2
 801b086:	005b      	lsls	r3, r3, #1
 801b088:	4413      	add	r3, r2
 801b08a:	00db      	lsls	r3, r3, #3
 801b08c:	440b      	add	r3, r1
 801b08e:	3314      	adds	r3, #20
 801b090:	781b      	ldrb	r3, [r3, #0]
 801b092:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801b094:	78fb      	ldrb	r3, [r7, #3]
 801b096:	2b00      	cmp	r3, #0
 801b098:	f000 8086 	beq.w	801b1a8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801b09c:	4948      	ldr	r1, [pc, #288]	; (801b1c0 <etharp_tmr+0x14c>)
 801b09e:	687a      	ldr	r2, [r7, #4]
 801b0a0:	4613      	mov	r3, r2
 801b0a2:	005b      	lsls	r3, r3, #1
 801b0a4:	4413      	add	r3, r2
 801b0a6:	00db      	lsls	r3, r3, #3
 801b0a8:	440b      	add	r3, r1
 801b0aa:	3312      	adds	r3, #18
 801b0ac:	881b      	ldrh	r3, [r3, #0]
 801b0ae:	3301      	adds	r3, #1
 801b0b0:	b298      	uxth	r0, r3
 801b0b2:	4943      	ldr	r1, [pc, #268]	; (801b1c0 <etharp_tmr+0x14c>)
 801b0b4:	687a      	ldr	r2, [r7, #4]
 801b0b6:	4613      	mov	r3, r2
 801b0b8:	005b      	lsls	r3, r3, #1
 801b0ba:	4413      	add	r3, r2
 801b0bc:	00db      	lsls	r3, r3, #3
 801b0be:	440b      	add	r3, r1
 801b0c0:	3312      	adds	r3, #18
 801b0c2:	4602      	mov	r2, r0
 801b0c4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b0c6:	493e      	ldr	r1, [pc, #248]	; (801b1c0 <etharp_tmr+0x14c>)
 801b0c8:	687a      	ldr	r2, [r7, #4]
 801b0ca:	4613      	mov	r3, r2
 801b0cc:	005b      	lsls	r3, r3, #1
 801b0ce:	4413      	add	r3, r2
 801b0d0:	00db      	lsls	r3, r3, #3
 801b0d2:	440b      	add	r3, r1
 801b0d4:	3312      	adds	r3, #18
 801b0d6:	881b      	ldrh	r3, [r3, #0]
 801b0d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801b0dc:	d215      	bcs.n	801b10a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b0de:	4938      	ldr	r1, [pc, #224]	; (801b1c0 <etharp_tmr+0x14c>)
 801b0e0:	687a      	ldr	r2, [r7, #4]
 801b0e2:	4613      	mov	r3, r2
 801b0e4:	005b      	lsls	r3, r3, #1
 801b0e6:	4413      	add	r3, r2
 801b0e8:	00db      	lsls	r3, r3, #3
 801b0ea:	440b      	add	r3, r1
 801b0ec:	3314      	adds	r3, #20
 801b0ee:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b0f0:	2b01      	cmp	r3, #1
 801b0f2:	d10e      	bne.n	801b112 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801b0f4:	4932      	ldr	r1, [pc, #200]	; (801b1c0 <etharp_tmr+0x14c>)
 801b0f6:	687a      	ldr	r2, [r7, #4]
 801b0f8:	4613      	mov	r3, r2
 801b0fa:	005b      	lsls	r3, r3, #1
 801b0fc:	4413      	add	r3, r2
 801b0fe:	00db      	lsls	r3, r3, #3
 801b100:	440b      	add	r3, r1
 801b102:	3312      	adds	r3, #18
 801b104:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b106:	2b04      	cmp	r3, #4
 801b108:	d903      	bls.n	801b112 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801b10a:	6878      	ldr	r0, [r7, #4]
 801b10c:	f7ff ff80 	bl	801b010 <etharp_free_entry>
 801b110:	e04a      	b.n	801b1a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801b112:	492b      	ldr	r1, [pc, #172]	; (801b1c0 <etharp_tmr+0x14c>)
 801b114:	687a      	ldr	r2, [r7, #4]
 801b116:	4613      	mov	r3, r2
 801b118:	005b      	lsls	r3, r3, #1
 801b11a:	4413      	add	r3, r2
 801b11c:	00db      	lsls	r3, r3, #3
 801b11e:	440b      	add	r3, r1
 801b120:	3314      	adds	r3, #20
 801b122:	781b      	ldrb	r3, [r3, #0]
 801b124:	2b03      	cmp	r3, #3
 801b126:	d10a      	bne.n	801b13e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801b128:	4925      	ldr	r1, [pc, #148]	; (801b1c0 <etharp_tmr+0x14c>)
 801b12a:	687a      	ldr	r2, [r7, #4]
 801b12c:	4613      	mov	r3, r2
 801b12e:	005b      	lsls	r3, r3, #1
 801b130:	4413      	add	r3, r2
 801b132:	00db      	lsls	r3, r3, #3
 801b134:	440b      	add	r3, r1
 801b136:	3314      	adds	r3, #20
 801b138:	2204      	movs	r2, #4
 801b13a:	701a      	strb	r2, [r3, #0]
 801b13c:	e034      	b.n	801b1a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801b13e:	4920      	ldr	r1, [pc, #128]	; (801b1c0 <etharp_tmr+0x14c>)
 801b140:	687a      	ldr	r2, [r7, #4]
 801b142:	4613      	mov	r3, r2
 801b144:	005b      	lsls	r3, r3, #1
 801b146:	4413      	add	r3, r2
 801b148:	00db      	lsls	r3, r3, #3
 801b14a:	440b      	add	r3, r1
 801b14c:	3314      	adds	r3, #20
 801b14e:	781b      	ldrb	r3, [r3, #0]
 801b150:	2b04      	cmp	r3, #4
 801b152:	d10a      	bne.n	801b16a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801b154:	491a      	ldr	r1, [pc, #104]	; (801b1c0 <etharp_tmr+0x14c>)
 801b156:	687a      	ldr	r2, [r7, #4]
 801b158:	4613      	mov	r3, r2
 801b15a:	005b      	lsls	r3, r3, #1
 801b15c:	4413      	add	r3, r2
 801b15e:	00db      	lsls	r3, r3, #3
 801b160:	440b      	add	r3, r1
 801b162:	3314      	adds	r3, #20
 801b164:	2202      	movs	r2, #2
 801b166:	701a      	strb	r2, [r3, #0]
 801b168:	e01e      	b.n	801b1a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b16a:	4915      	ldr	r1, [pc, #84]	; (801b1c0 <etharp_tmr+0x14c>)
 801b16c:	687a      	ldr	r2, [r7, #4]
 801b16e:	4613      	mov	r3, r2
 801b170:	005b      	lsls	r3, r3, #1
 801b172:	4413      	add	r3, r2
 801b174:	00db      	lsls	r3, r3, #3
 801b176:	440b      	add	r3, r1
 801b178:	3314      	adds	r3, #20
 801b17a:	781b      	ldrb	r3, [r3, #0]
 801b17c:	2b01      	cmp	r3, #1
 801b17e:	d113      	bne.n	801b1a8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801b180:	490f      	ldr	r1, [pc, #60]	; (801b1c0 <etharp_tmr+0x14c>)
 801b182:	687a      	ldr	r2, [r7, #4]
 801b184:	4613      	mov	r3, r2
 801b186:	005b      	lsls	r3, r3, #1
 801b188:	4413      	add	r3, r2
 801b18a:	00db      	lsls	r3, r3, #3
 801b18c:	440b      	add	r3, r1
 801b18e:	3308      	adds	r3, #8
 801b190:	6818      	ldr	r0, [r3, #0]
 801b192:	687a      	ldr	r2, [r7, #4]
 801b194:	4613      	mov	r3, r2
 801b196:	005b      	lsls	r3, r3, #1
 801b198:	4413      	add	r3, r2
 801b19a:	00db      	lsls	r3, r3, #3
 801b19c:	4a08      	ldr	r2, [pc, #32]	; (801b1c0 <etharp_tmr+0x14c>)
 801b19e:	4413      	add	r3, r2
 801b1a0:	3304      	adds	r3, #4
 801b1a2:	4619      	mov	r1, r3
 801b1a4:	f000 fe6e 	bl	801be84 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	3301      	adds	r3, #1
 801b1ac:	607b      	str	r3, [r7, #4]
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	2b09      	cmp	r3, #9
 801b1b2:	f77f af65 	ble.w	801b080 <etharp_tmr+0xc>
      }
    }
  }
}
 801b1b6:	bf00      	nop
 801b1b8:	bf00      	nop
 801b1ba:	3708      	adds	r7, #8
 801b1bc:	46bd      	mov	sp, r7
 801b1be:	bd80      	pop	{r7, pc}
 801b1c0:	2000479c 	.word	0x2000479c

0801b1c4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801b1c4:	b580      	push	{r7, lr}
 801b1c6:	b08a      	sub	sp, #40	; 0x28
 801b1c8:	af00      	add	r7, sp, #0
 801b1ca:	60f8      	str	r0, [r7, #12]
 801b1cc:	460b      	mov	r3, r1
 801b1ce:	607a      	str	r2, [r7, #4]
 801b1d0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801b1d2:	230a      	movs	r3, #10
 801b1d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b1d6:	230a      	movs	r3, #10
 801b1d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801b1da:	230a      	movs	r3, #10
 801b1dc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801b1de:	2300      	movs	r3, #0
 801b1e0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801b1e2:	230a      	movs	r3, #10
 801b1e4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801b1e6:	2300      	movs	r3, #0
 801b1e8:	83bb      	strh	r3, [r7, #28]
 801b1ea:	2300      	movs	r3, #0
 801b1ec:	837b      	strh	r3, [r7, #26]
 801b1ee:	2300      	movs	r3, #0
 801b1f0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b1f2:	2300      	movs	r3, #0
 801b1f4:	843b      	strh	r3, [r7, #32]
 801b1f6:	e0ae      	b.n	801b356 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801b1f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b1fc:	49a6      	ldr	r1, [pc, #664]	; (801b498 <etharp_find_entry+0x2d4>)
 801b1fe:	4613      	mov	r3, r2
 801b200:	005b      	lsls	r3, r3, #1
 801b202:	4413      	add	r3, r2
 801b204:	00db      	lsls	r3, r3, #3
 801b206:	440b      	add	r3, r1
 801b208:	3314      	adds	r3, #20
 801b20a:	781b      	ldrb	r3, [r3, #0]
 801b20c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801b20e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b212:	2b0a      	cmp	r3, #10
 801b214:	d105      	bne.n	801b222 <etharp_find_entry+0x5e>
 801b216:	7dfb      	ldrb	r3, [r7, #23]
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d102      	bne.n	801b222 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801b21c:	8c3b      	ldrh	r3, [r7, #32]
 801b21e:	847b      	strh	r3, [r7, #34]	; 0x22
 801b220:	e095      	b.n	801b34e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801b222:	7dfb      	ldrb	r3, [r7, #23]
 801b224:	2b00      	cmp	r3, #0
 801b226:	f000 8092 	beq.w	801b34e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801b22a:	7dfb      	ldrb	r3, [r7, #23]
 801b22c:	2b01      	cmp	r3, #1
 801b22e:	d009      	beq.n	801b244 <etharp_find_entry+0x80>
 801b230:	7dfb      	ldrb	r3, [r7, #23]
 801b232:	2b01      	cmp	r3, #1
 801b234:	d806      	bhi.n	801b244 <etharp_find_entry+0x80>
 801b236:	4b99      	ldr	r3, [pc, #612]	; (801b49c <etharp_find_entry+0x2d8>)
 801b238:	f240 1223 	movw	r2, #291	; 0x123
 801b23c:	4998      	ldr	r1, [pc, #608]	; (801b4a0 <etharp_find_entry+0x2dc>)
 801b23e:	4899      	ldr	r0, [pc, #612]	; (801b4a4 <etharp_find_entry+0x2e0>)
 801b240:	f003 fd8e 	bl	801ed60 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801b244:	68fb      	ldr	r3, [r7, #12]
 801b246:	2b00      	cmp	r3, #0
 801b248:	d020      	beq.n	801b28c <etharp_find_entry+0xc8>
 801b24a:	68fb      	ldr	r3, [r7, #12]
 801b24c:	6819      	ldr	r1, [r3, #0]
 801b24e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b252:	4891      	ldr	r0, [pc, #580]	; (801b498 <etharp_find_entry+0x2d4>)
 801b254:	4613      	mov	r3, r2
 801b256:	005b      	lsls	r3, r3, #1
 801b258:	4413      	add	r3, r2
 801b25a:	00db      	lsls	r3, r3, #3
 801b25c:	4403      	add	r3, r0
 801b25e:	3304      	adds	r3, #4
 801b260:	681b      	ldr	r3, [r3, #0]
 801b262:	4299      	cmp	r1, r3
 801b264:	d112      	bne.n	801b28c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d00c      	beq.n	801b286 <etharp_find_entry+0xc2>
 801b26c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b270:	4989      	ldr	r1, [pc, #548]	; (801b498 <etharp_find_entry+0x2d4>)
 801b272:	4613      	mov	r3, r2
 801b274:	005b      	lsls	r3, r3, #1
 801b276:	4413      	add	r3, r2
 801b278:	00db      	lsls	r3, r3, #3
 801b27a:	440b      	add	r3, r1
 801b27c:	3308      	adds	r3, #8
 801b27e:	681b      	ldr	r3, [r3, #0]
 801b280:	687a      	ldr	r2, [r7, #4]
 801b282:	429a      	cmp	r2, r3
 801b284:	d102      	bne.n	801b28c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801b286:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b28a:	e100      	b.n	801b48e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801b28c:	7dfb      	ldrb	r3, [r7, #23]
 801b28e:	2b01      	cmp	r3, #1
 801b290:	d140      	bne.n	801b314 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801b292:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b296:	4980      	ldr	r1, [pc, #512]	; (801b498 <etharp_find_entry+0x2d4>)
 801b298:	4613      	mov	r3, r2
 801b29a:	005b      	lsls	r3, r3, #1
 801b29c:	4413      	add	r3, r2
 801b29e:	00db      	lsls	r3, r3, #3
 801b2a0:	440b      	add	r3, r1
 801b2a2:	681b      	ldr	r3, [r3, #0]
 801b2a4:	2b00      	cmp	r3, #0
 801b2a6:	d01a      	beq.n	801b2de <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801b2a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b2ac:	497a      	ldr	r1, [pc, #488]	; (801b498 <etharp_find_entry+0x2d4>)
 801b2ae:	4613      	mov	r3, r2
 801b2b0:	005b      	lsls	r3, r3, #1
 801b2b2:	4413      	add	r3, r2
 801b2b4:	00db      	lsls	r3, r3, #3
 801b2b6:	440b      	add	r3, r1
 801b2b8:	3312      	adds	r3, #18
 801b2ba:	881b      	ldrh	r3, [r3, #0]
 801b2bc:	8bba      	ldrh	r2, [r7, #28]
 801b2be:	429a      	cmp	r2, r3
 801b2c0:	d845      	bhi.n	801b34e <etharp_find_entry+0x18a>
            old_queue = i;
 801b2c2:	8c3b      	ldrh	r3, [r7, #32]
 801b2c4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801b2c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b2ca:	4973      	ldr	r1, [pc, #460]	; (801b498 <etharp_find_entry+0x2d4>)
 801b2cc:	4613      	mov	r3, r2
 801b2ce:	005b      	lsls	r3, r3, #1
 801b2d0:	4413      	add	r3, r2
 801b2d2:	00db      	lsls	r3, r3, #3
 801b2d4:	440b      	add	r3, r1
 801b2d6:	3312      	adds	r3, #18
 801b2d8:	881b      	ldrh	r3, [r3, #0]
 801b2da:	83bb      	strh	r3, [r7, #28]
 801b2dc:	e037      	b.n	801b34e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801b2de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b2e2:	496d      	ldr	r1, [pc, #436]	; (801b498 <etharp_find_entry+0x2d4>)
 801b2e4:	4613      	mov	r3, r2
 801b2e6:	005b      	lsls	r3, r3, #1
 801b2e8:	4413      	add	r3, r2
 801b2ea:	00db      	lsls	r3, r3, #3
 801b2ec:	440b      	add	r3, r1
 801b2ee:	3312      	adds	r3, #18
 801b2f0:	881b      	ldrh	r3, [r3, #0]
 801b2f2:	8b7a      	ldrh	r2, [r7, #26]
 801b2f4:	429a      	cmp	r2, r3
 801b2f6:	d82a      	bhi.n	801b34e <etharp_find_entry+0x18a>
            old_pending = i;
 801b2f8:	8c3b      	ldrh	r3, [r7, #32]
 801b2fa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801b2fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b300:	4965      	ldr	r1, [pc, #404]	; (801b498 <etharp_find_entry+0x2d4>)
 801b302:	4613      	mov	r3, r2
 801b304:	005b      	lsls	r3, r3, #1
 801b306:	4413      	add	r3, r2
 801b308:	00db      	lsls	r3, r3, #3
 801b30a:	440b      	add	r3, r1
 801b30c:	3312      	adds	r3, #18
 801b30e:	881b      	ldrh	r3, [r3, #0]
 801b310:	837b      	strh	r3, [r7, #26]
 801b312:	e01c      	b.n	801b34e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801b314:	7dfb      	ldrb	r3, [r7, #23]
 801b316:	2b01      	cmp	r3, #1
 801b318:	d919      	bls.n	801b34e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801b31a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b31e:	495e      	ldr	r1, [pc, #376]	; (801b498 <etharp_find_entry+0x2d4>)
 801b320:	4613      	mov	r3, r2
 801b322:	005b      	lsls	r3, r3, #1
 801b324:	4413      	add	r3, r2
 801b326:	00db      	lsls	r3, r3, #3
 801b328:	440b      	add	r3, r1
 801b32a:	3312      	adds	r3, #18
 801b32c:	881b      	ldrh	r3, [r3, #0]
 801b32e:	8b3a      	ldrh	r2, [r7, #24]
 801b330:	429a      	cmp	r2, r3
 801b332:	d80c      	bhi.n	801b34e <etharp_find_entry+0x18a>
            old_stable = i;
 801b334:	8c3b      	ldrh	r3, [r7, #32]
 801b336:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801b338:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b33c:	4956      	ldr	r1, [pc, #344]	; (801b498 <etharp_find_entry+0x2d4>)
 801b33e:	4613      	mov	r3, r2
 801b340:	005b      	lsls	r3, r3, #1
 801b342:	4413      	add	r3, r2
 801b344:	00db      	lsls	r3, r3, #3
 801b346:	440b      	add	r3, r1
 801b348:	3312      	adds	r3, #18
 801b34a:	881b      	ldrh	r3, [r3, #0]
 801b34c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b34e:	8c3b      	ldrh	r3, [r7, #32]
 801b350:	3301      	adds	r3, #1
 801b352:	b29b      	uxth	r3, r3
 801b354:	843b      	strh	r3, [r7, #32]
 801b356:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b35a:	2b09      	cmp	r3, #9
 801b35c:	f77f af4c 	ble.w	801b1f8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801b360:	7afb      	ldrb	r3, [r7, #11]
 801b362:	f003 0302 	and.w	r3, r3, #2
 801b366:	2b00      	cmp	r3, #0
 801b368:	d108      	bne.n	801b37c <etharp_find_entry+0x1b8>
 801b36a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b36e:	2b0a      	cmp	r3, #10
 801b370:	d107      	bne.n	801b382 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801b372:	7afb      	ldrb	r3, [r7, #11]
 801b374:	f003 0301 	and.w	r3, r3, #1
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d102      	bne.n	801b382 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801b37c:	f04f 33ff 	mov.w	r3, #4294967295
 801b380:	e085      	b.n	801b48e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801b382:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b386:	2b09      	cmp	r3, #9
 801b388:	dc02      	bgt.n	801b390 <etharp_find_entry+0x1cc>
    i = empty;
 801b38a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b38c:	843b      	strh	r3, [r7, #32]
 801b38e:	e039      	b.n	801b404 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801b390:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801b394:	2b09      	cmp	r3, #9
 801b396:	dc14      	bgt.n	801b3c2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801b398:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b39a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801b39c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b3a0:	493d      	ldr	r1, [pc, #244]	; (801b498 <etharp_find_entry+0x2d4>)
 801b3a2:	4613      	mov	r3, r2
 801b3a4:	005b      	lsls	r3, r3, #1
 801b3a6:	4413      	add	r3, r2
 801b3a8:	00db      	lsls	r3, r3, #3
 801b3aa:	440b      	add	r3, r1
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d018      	beq.n	801b3e4 <etharp_find_entry+0x220>
 801b3b2:	4b3a      	ldr	r3, [pc, #232]	; (801b49c <etharp_find_entry+0x2d8>)
 801b3b4:	f240 126d 	movw	r2, #365	; 0x16d
 801b3b8:	493b      	ldr	r1, [pc, #236]	; (801b4a8 <etharp_find_entry+0x2e4>)
 801b3ba:	483a      	ldr	r0, [pc, #232]	; (801b4a4 <etharp_find_entry+0x2e0>)
 801b3bc:	f003 fcd0 	bl	801ed60 <iprintf>
 801b3c0:	e010      	b.n	801b3e4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801b3c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b3c6:	2b09      	cmp	r3, #9
 801b3c8:	dc02      	bgt.n	801b3d0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801b3ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b3cc:	843b      	strh	r3, [r7, #32]
 801b3ce:	e009      	b.n	801b3e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801b3d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801b3d4:	2b09      	cmp	r3, #9
 801b3d6:	dc02      	bgt.n	801b3de <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801b3d8:	8bfb      	ldrh	r3, [r7, #30]
 801b3da:	843b      	strh	r3, [r7, #32]
 801b3dc:	e002      	b.n	801b3e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801b3de:	f04f 33ff 	mov.w	r3, #4294967295
 801b3e2:	e054      	b.n	801b48e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801b3e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b3e8:	2b09      	cmp	r3, #9
 801b3ea:	dd06      	ble.n	801b3fa <etharp_find_entry+0x236>
 801b3ec:	4b2b      	ldr	r3, [pc, #172]	; (801b49c <etharp_find_entry+0x2d8>)
 801b3ee:	f240 127f 	movw	r2, #383	; 0x17f
 801b3f2:	492e      	ldr	r1, [pc, #184]	; (801b4ac <etharp_find_entry+0x2e8>)
 801b3f4:	482b      	ldr	r0, [pc, #172]	; (801b4a4 <etharp_find_entry+0x2e0>)
 801b3f6:	f003 fcb3 	bl	801ed60 <iprintf>
    etharp_free_entry(i);
 801b3fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b3fe:	4618      	mov	r0, r3
 801b400:	f7ff fe06 	bl	801b010 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801b404:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b408:	2b09      	cmp	r3, #9
 801b40a:	dd06      	ble.n	801b41a <etharp_find_entry+0x256>
 801b40c:	4b23      	ldr	r3, [pc, #140]	; (801b49c <etharp_find_entry+0x2d8>)
 801b40e:	f240 1283 	movw	r2, #387	; 0x183
 801b412:	4926      	ldr	r1, [pc, #152]	; (801b4ac <etharp_find_entry+0x2e8>)
 801b414:	4823      	ldr	r0, [pc, #140]	; (801b4a4 <etharp_find_entry+0x2e0>)
 801b416:	f003 fca3 	bl	801ed60 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801b41a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b41e:	491e      	ldr	r1, [pc, #120]	; (801b498 <etharp_find_entry+0x2d4>)
 801b420:	4613      	mov	r3, r2
 801b422:	005b      	lsls	r3, r3, #1
 801b424:	4413      	add	r3, r2
 801b426:	00db      	lsls	r3, r3, #3
 801b428:	440b      	add	r3, r1
 801b42a:	3314      	adds	r3, #20
 801b42c:	781b      	ldrb	r3, [r3, #0]
 801b42e:	2b00      	cmp	r3, #0
 801b430:	d006      	beq.n	801b440 <etharp_find_entry+0x27c>
 801b432:	4b1a      	ldr	r3, [pc, #104]	; (801b49c <etharp_find_entry+0x2d8>)
 801b434:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801b438:	491d      	ldr	r1, [pc, #116]	; (801b4b0 <etharp_find_entry+0x2ec>)
 801b43a:	481a      	ldr	r0, [pc, #104]	; (801b4a4 <etharp_find_entry+0x2e0>)
 801b43c:	f003 fc90 	bl	801ed60 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801b440:	68fb      	ldr	r3, [r7, #12]
 801b442:	2b00      	cmp	r3, #0
 801b444:	d00b      	beq.n	801b45e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801b446:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b44a:	68fb      	ldr	r3, [r7, #12]
 801b44c:	6819      	ldr	r1, [r3, #0]
 801b44e:	4812      	ldr	r0, [pc, #72]	; (801b498 <etharp_find_entry+0x2d4>)
 801b450:	4613      	mov	r3, r2
 801b452:	005b      	lsls	r3, r3, #1
 801b454:	4413      	add	r3, r2
 801b456:	00db      	lsls	r3, r3, #3
 801b458:	4403      	add	r3, r0
 801b45a:	3304      	adds	r3, #4
 801b45c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801b45e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b462:	490d      	ldr	r1, [pc, #52]	; (801b498 <etharp_find_entry+0x2d4>)
 801b464:	4613      	mov	r3, r2
 801b466:	005b      	lsls	r3, r3, #1
 801b468:	4413      	add	r3, r2
 801b46a:	00db      	lsls	r3, r3, #3
 801b46c:	440b      	add	r3, r1
 801b46e:	3312      	adds	r3, #18
 801b470:	2200      	movs	r2, #0
 801b472:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801b474:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b478:	4907      	ldr	r1, [pc, #28]	; (801b498 <etharp_find_entry+0x2d4>)
 801b47a:	4613      	mov	r3, r2
 801b47c:	005b      	lsls	r3, r3, #1
 801b47e:	4413      	add	r3, r2
 801b480:	00db      	lsls	r3, r3, #3
 801b482:	440b      	add	r3, r1
 801b484:	3308      	adds	r3, #8
 801b486:	687a      	ldr	r2, [r7, #4]
 801b488:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801b48a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801b48e:	4618      	mov	r0, r3
 801b490:	3728      	adds	r7, #40	; 0x28
 801b492:	46bd      	mov	sp, r7
 801b494:	bd80      	pop	{r7, pc}
 801b496:	bf00      	nop
 801b498:	2000479c 	.word	0x2000479c
 801b49c:	08025518 	.word	0x08025518
 801b4a0:	08025550 	.word	0x08025550
 801b4a4:	08025590 	.word	0x08025590
 801b4a8:	080255b8 	.word	0x080255b8
 801b4ac:	080255d0 	.word	0x080255d0
 801b4b0:	080255e4 	.word	0x080255e4

0801b4b4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801b4b4:	b580      	push	{r7, lr}
 801b4b6:	b088      	sub	sp, #32
 801b4b8:	af02      	add	r7, sp, #8
 801b4ba:	60f8      	str	r0, [r7, #12]
 801b4bc:	60b9      	str	r1, [r7, #8]
 801b4be:	607a      	str	r2, [r7, #4]
 801b4c0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801b4c2:	68fb      	ldr	r3, [r7, #12]
 801b4c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b4c8:	2b06      	cmp	r3, #6
 801b4ca:	d006      	beq.n	801b4da <etharp_update_arp_entry+0x26>
 801b4cc:	4b48      	ldr	r3, [pc, #288]	; (801b5f0 <etharp_update_arp_entry+0x13c>)
 801b4ce:	f240 12a9 	movw	r2, #425	; 0x1a9
 801b4d2:	4948      	ldr	r1, [pc, #288]	; (801b5f4 <etharp_update_arp_entry+0x140>)
 801b4d4:	4848      	ldr	r0, [pc, #288]	; (801b5f8 <etharp_update_arp_entry+0x144>)
 801b4d6:	f003 fc43 	bl	801ed60 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801b4da:	68bb      	ldr	r3, [r7, #8]
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	d012      	beq.n	801b506 <etharp_update_arp_entry+0x52>
 801b4e0:	68bb      	ldr	r3, [r7, #8]
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	d00e      	beq.n	801b506 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b4e8:	68bb      	ldr	r3, [r7, #8]
 801b4ea:	681b      	ldr	r3, [r3, #0]
 801b4ec:	68f9      	ldr	r1, [r7, #12]
 801b4ee:	4618      	mov	r0, r3
 801b4f0:	f001 f8fe 	bl	801c6f0 <ip4_addr_isbroadcast_u32>
 801b4f4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801b4f6:	2b00      	cmp	r3, #0
 801b4f8:	d105      	bne.n	801b506 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801b4fa:	68bb      	ldr	r3, [r7, #8]
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b502:	2be0      	cmp	r3, #224	; 0xe0
 801b504:	d102      	bne.n	801b50c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b506:	f06f 030f 	mvn.w	r3, #15
 801b50a:	e06c      	b.n	801b5e6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801b50c:	78fb      	ldrb	r3, [r7, #3]
 801b50e:	68fa      	ldr	r2, [r7, #12]
 801b510:	4619      	mov	r1, r3
 801b512:	68b8      	ldr	r0, [r7, #8]
 801b514:	f7ff fe56 	bl	801b1c4 <etharp_find_entry>
 801b518:	4603      	mov	r3, r0
 801b51a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801b51c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b520:	2b00      	cmp	r3, #0
 801b522:	da02      	bge.n	801b52a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801b524:	8afb      	ldrh	r3, [r7, #22]
 801b526:	b25b      	sxtb	r3, r3
 801b528:	e05d      	b.n	801b5e6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801b52a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b52e:	4933      	ldr	r1, [pc, #204]	; (801b5fc <etharp_update_arp_entry+0x148>)
 801b530:	4613      	mov	r3, r2
 801b532:	005b      	lsls	r3, r3, #1
 801b534:	4413      	add	r3, r2
 801b536:	00db      	lsls	r3, r3, #3
 801b538:	440b      	add	r3, r1
 801b53a:	3314      	adds	r3, #20
 801b53c:	2202      	movs	r2, #2
 801b53e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801b540:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b544:	492d      	ldr	r1, [pc, #180]	; (801b5fc <etharp_update_arp_entry+0x148>)
 801b546:	4613      	mov	r3, r2
 801b548:	005b      	lsls	r3, r3, #1
 801b54a:	4413      	add	r3, r2
 801b54c:	00db      	lsls	r3, r3, #3
 801b54e:	440b      	add	r3, r1
 801b550:	3308      	adds	r3, #8
 801b552:	68fa      	ldr	r2, [r7, #12]
 801b554:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801b556:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b55a:	4613      	mov	r3, r2
 801b55c:	005b      	lsls	r3, r3, #1
 801b55e:	4413      	add	r3, r2
 801b560:	00db      	lsls	r3, r3, #3
 801b562:	3308      	adds	r3, #8
 801b564:	4a25      	ldr	r2, [pc, #148]	; (801b5fc <etharp_update_arp_entry+0x148>)
 801b566:	4413      	add	r3, r2
 801b568:	3304      	adds	r3, #4
 801b56a:	2206      	movs	r2, #6
 801b56c:	6879      	ldr	r1, [r7, #4]
 801b56e:	4618      	mov	r0, r3
 801b570:	f003 f948 	bl	801e804 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801b574:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b578:	4920      	ldr	r1, [pc, #128]	; (801b5fc <etharp_update_arp_entry+0x148>)
 801b57a:	4613      	mov	r3, r2
 801b57c:	005b      	lsls	r3, r3, #1
 801b57e:	4413      	add	r3, r2
 801b580:	00db      	lsls	r3, r3, #3
 801b582:	440b      	add	r3, r1
 801b584:	3312      	adds	r3, #18
 801b586:	2200      	movs	r2, #0
 801b588:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801b58a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b58e:	491b      	ldr	r1, [pc, #108]	; (801b5fc <etharp_update_arp_entry+0x148>)
 801b590:	4613      	mov	r3, r2
 801b592:	005b      	lsls	r3, r3, #1
 801b594:	4413      	add	r3, r2
 801b596:	00db      	lsls	r3, r3, #3
 801b598:	440b      	add	r3, r1
 801b59a:	681b      	ldr	r3, [r3, #0]
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d021      	beq.n	801b5e4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801b5a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b5a4:	4915      	ldr	r1, [pc, #84]	; (801b5fc <etharp_update_arp_entry+0x148>)
 801b5a6:	4613      	mov	r3, r2
 801b5a8:	005b      	lsls	r3, r3, #1
 801b5aa:	4413      	add	r3, r2
 801b5ac:	00db      	lsls	r3, r3, #3
 801b5ae:	440b      	add	r3, r1
 801b5b0:	681b      	ldr	r3, [r3, #0]
 801b5b2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801b5b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b5b8:	4910      	ldr	r1, [pc, #64]	; (801b5fc <etharp_update_arp_entry+0x148>)
 801b5ba:	4613      	mov	r3, r2
 801b5bc:	005b      	lsls	r3, r3, #1
 801b5be:	4413      	add	r3, r2
 801b5c0:	00db      	lsls	r3, r3, #3
 801b5c2:	440b      	add	r3, r1
 801b5c4:	2200      	movs	r2, #0
 801b5c6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801b5c8:	68fb      	ldr	r3, [r7, #12]
 801b5ca:	f103 0222 	add.w	r2, r3, #34	; 0x22
 801b5ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b5d2:	9300      	str	r3, [sp, #0]
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	6939      	ldr	r1, [r7, #16]
 801b5d8:	68f8      	ldr	r0, [r7, #12]
 801b5da:	f002 f8bb 	bl	801d754 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801b5de:	6938      	ldr	r0, [r7, #16]
 801b5e0:	f7f8 fb56 	bl	8013c90 <pbuf_free>
  }
  return ERR_OK;
 801b5e4:	2300      	movs	r3, #0
}
 801b5e6:	4618      	mov	r0, r3
 801b5e8:	3718      	adds	r7, #24
 801b5ea:	46bd      	mov	sp, r7
 801b5ec:	bd80      	pop	{r7, pc}
 801b5ee:	bf00      	nop
 801b5f0:	08025518 	.word	0x08025518
 801b5f4:	08025610 	.word	0x08025610
 801b5f8:	08025590 	.word	0x08025590
 801b5fc:	2000479c 	.word	0x2000479c

0801b600 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801b600:	b580      	push	{r7, lr}
 801b602:	b084      	sub	sp, #16
 801b604:	af00      	add	r7, sp, #0
 801b606:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b608:	2300      	movs	r3, #0
 801b60a:	60fb      	str	r3, [r7, #12]
 801b60c:	e01e      	b.n	801b64c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801b60e:	4913      	ldr	r1, [pc, #76]	; (801b65c <etharp_cleanup_netif+0x5c>)
 801b610:	68fa      	ldr	r2, [r7, #12]
 801b612:	4613      	mov	r3, r2
 801b614:	005b      	lsls	r3, r3, #1
 801b616:	4413      	add	r3, r2
 801b618:	00db      	lsls	r3, r3, #3
 801b61a:	440b      	add	r3, r1
 801b61c:	3314      	adds	r3, #20
 801b61e:	781b      	ldrb	r3, [r3, #0]
 801b620:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801b622:	7afb      	ldrb	r3, [r7, #11]
 801b624:	2b00      	cmp	r3, #0
 801b626:	d00e      	beq.n	801b646 <etharp_cleanup_netif+0x46>
 801b628:	490c      	ldr	r1, [pc, #48]	; (801b65c <etharp_cleanup_netif+0x5c>)
 801b62a:	68fa      	ldr	r2, [r7, #12]
 801b62c:	4613      	mov	r3, r2
 801b62e:	005b      	lsls	r3, r3, #1
 801b630:	4413      	add	r3, r2
 801b632:	00db      	lsls	r3, r3, #3
 801b634:	440b      	add	r3, r1
 801b636:	3308      	adds	r3, #8
 801b638:	681b      	ldr	r3, [r3, #0]
 801b63a:	687a      	ldr	r2, [r7, #4]
 801b63c:	429a      	cmp	r2, r3
 801b63e:	d102      	bne.n	801b646 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801b640:	68f8      	ldr	r0, [r7, #12]
 801b642:	f7ff fce5 	bl	801b010 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b646:	68fb      	ldr	r3, [r7, #12]
 801b648:	3301      	adds	r3, #1
 801b64a:	60fb      	str	r3, [r7, #12]
 801b64c:	68fb      	ldr	r3, [r7, #12]
 801b64e:	2b09      	cmp	r3, #9
 801b650:	dddd      	ble.n	801b60e <etharp_cleanup_netif+0xe>
    }
  }
}
 801b652:	bf00      	nop
 801b654:	bf00      	nop
 801b656:	3710      	adds	r7, #16
 801b658:	46bd      	mov	sp, r7
 801b65a:	bd80      	pop	{r7, pc}
 801b65c:	2000479c 	.word	0x2000479c

0801b660 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801b660:	b5b0      	push	{r4, r5, r7, lr}
 801b662:	b08a      	sub	sp, #40	; 0x28
 801b664:	af04      	add	r7, sp, #16
 801b666:	6078      	str	r0, [r7, #4]
 801b668:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801b66a:	683b      	ldr	r3, [r7, #0]
 801b66c:	2b00      	cmp	r3, #0
 801b66e:	d107      	bne.n	801b680 <etharp_input+0x20>
 801b670:	4b3d      	ldr	r3, [pc, #244]	; (801b768 <etharp_input+0x108>)
 801b672:	f240 228a 	movw	r2, #650	; 0x28a
 801b676:	493d      	ldr	r1, [pc, #244]	; (801b76c <etharp_input+0x10c>)
 801b678:	483d      	ldr	r0, [pc, #244]	; (801b770 <etharp_input+0x110>)
 801b67a:	f003 fb71 	bl	801ed60 <iprintf>
 801b67e:	e06f      	b.n	801b760 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	685b      	ldr	r3, [r3, #4]
 801b684:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b686:	693b      	ldr	r3, [r7, #16]
 801b688:	881b      	ldrh	r3, [r3, #0]
 801b68a:	b29b      	uxth	r3, r3
 801b68c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b690:	d10c      	bne.n	801b6ac <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b692:	693b      	ldr	r3, [r7, #16]
 801b694:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b696:	2b06      	cmp	r3, #6
 801b698:	d108      	bne.n	801b6ac <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b69a:	693b      	ldr	r3, [r7, #16]
 801b69c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b69e:	2b04      	cmp	r3, #4
 801b6a0:	d104      	bne.n	801b6ac <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801b6a2:	693b      	ldr	r3, [r7, #16]
 801b6a4:	885b      	ldrh	r3, [r3, #2]
 801b6a6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b6a8:	2b08      	cmp	r3, #8
 801b6aa:	d003      	beq.n	801b6b4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801b6ac:	6878      	ldr	r0, [r7, #4]
 801b6ae:	f7f8 faef 	bl	8013c90 <pbuf_free>
    return;
 801b6b2:	e055      	b.n	801b760 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801b6b4:	693b      	ldr	r3, [r7, #16]
 801b6b6:	330e      	adds	r3, #14
 801b6b8:	681b      	ldr	r3, [r3, #0]
 801b6ba:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801b6bc:	693b      	ldr	r3, [r7, #16]
 801b6be:	3318      	adds	r3, #24
 801b6c0:	681b      	ldr	r3, [r3, #0]
 801b6c2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b6c4:	683b      	ldr	r3, [r7, #0]
 801b6c6:	3304      	adds	r3, #4
 801b6c8:	681b      	ldr	r3, [r3, #0]
 801b6ca:	2b00      	cmp	r3, #0
 801b6cc:	d102      	bne.n	801b6d4 <etharp_input+0x74>
    for_us = 0;
 801b6ce:	2300      	movs	r3, #0
 801b6d0:	75fb      	strb	r3, [r7, #23]
 801b6d2:	e009      	b.n	801b6e8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801b6d4:	68ba      	ldr	r2, [r7, #8]
 801b6d6:	683b      	ldr	r3, [r7, #0]
 801b6d8:	3304      	adds	r3, #4
 801b6da:	681b      	ldr	r3, [r3, #0]
 801b6dc:	429a      	cmp	r2, r3
 801b6de:	bf0c      	ite	eq
 801b6e0:	2301      	moveq	r3, #1
 801b6e2:	2300      	movne	r3, #0
 801b6e4:	b2db      	uxtb	r3, r3
 801b6e6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801b6e8:	693b      	ldr	r3, [r7, #16]
 801b6ea:	f103 0208 	add.w	r2, r3, #8
 801b6ee:	7dfb      	ldrb	r3, [r7, #23]
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d001      	beq.n	801b6f8 <etharp_input+0x98>
 801b6f4:	2301      	movs	r3, #1
 801b6f6:	e000      	b.n	801b6fa <etharp_input+0x9a>
 801b6f8:	2302      	movs	r3, #2
 801b6fa:	f107 010c 	add.w	r1, r7, #12
 801b6fe:	6838      	ldr	r0, [r7, #0]
 801b700:	f7ff fed8 	bl	801b4b4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801b704:	693b      	ldr	r3, [r7, #16]
 801b706:	88db      	ldrh	r3, [r3, #6]
 801b708:	b29b      	uxth	r3, r3
 801b70a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b70e:	d003      	beq.n	801b718 <etharp_input+0xb8>
 801b710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b714:	d01e      	beq.n	801b754 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801b716:	e020      	b.n	801b75a <etharp_input+0xfa>
      if (for_us) {
 801b718:	7dfb      	ldrb	r3, [r7, #23]
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	d01c      	beq.n	801b758 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801b71e:	683b      	ldr	r3, [r7, #0]
 801b720:	f103 0022 	add.w	r0, r3, #34	; 0x22
 801b724:	693b      	ldr	r3, [r7, #16]
 801b726:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801b72a:	683b      	ldr	r3, [r7, #0]
 801b72c:	f103 0522 	add.w	r5, r3, #34	; 0x22
 801b730:	683b      	ldr	r3, [r7, #0]
 801b732:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801b734:	693a      	ldr	r2, [r7, #16]
 801b736:	3208      	adds	r2, #8
        etharp_raw(netif,
 801b738:	2102      	movs	r1, #2
 801b73a:	9103      	str	r1, [sp, #12]
 801b73c:	f107 010c 	add.w	r1, r7, #12
 801b740:	9102      	str	r1, [sp, #8]
 801b742:	9201      	str	r2, [sp, #4]
 801b744:	9300      	str	r3, [sp, #0]
 801b746:	462b      	mov	r3, r5
 801b748:	4622      	mov	r2, r4
 801b74a:	4601      	mov	r1, r0
 801b74c:	6838      	ldr	r0, [r7, #0]
 801b74e:	f000 faeb 	bl	801bd28 <etharp_raw>
      break;
 801b752:	e001      	b.n	801b758 <etharp_input+0xf8>
      break;
 801b754:	bf00      	nop
 801b756:	e000      	b.n	801b75a <etharp_input+0xfa>
      break;
 801b758:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801b75a:	6878      	ldr	r0, [r7, #4]
 801b75c:	f7f8 fa98 	bl	8013c90 <pbuf_free>
}
 801b760:	3718      	adds	r7, #24
 801b762:	46bd      	mov	sp, r7
 801b764:	bdb0      	pop	{r4, r5, r7, pc}
 801b766:	bf00      	nop
 801b768:	08025518 	.word	0x08025518
 801b76c:	08025668 	.word	0x08025668
 801b770:	08025590 	.word	0x08025590

0801b774 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801b774:	b580      	push	{r7, lr}
 801b776:	b086      	sub	sp, #24
 801b778:	af02      	add	r7, sp, #8
 801b77a:	60f8      	str	r0, [r7, #12]
 801b77c:	60b9      	str	r1, [r7, #8]
 801b77e:	4613      	mov	r3, r2
 801b780:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801b782:	79fa      	ldrb	r2, [r7, #7]
 801b784:	4944      	ldr	r1, [pc, #272]	; (801b898 <etharp_output_to_arp_index+0x124>)
 801b786:	4613      	mov	r3, r2
 801b788:	005b      	lsls	r3, r3, #1
 801b78a:	4413      	add	r3, r2
 801b78c:	00db      	lsls	r3, r3, #3
 801b78e:	440b      	add	r3, r1
 801b790:	3314      	adds	r3, #20
 801b792:	781b      	ldrb	r3, [r3, #0]
 801b794:	2b01      	cmp	r3, #1
 801b796:	d806      	bhi.n	801b7a6 <etharp_output_to_arp_index+0x32>
 801b798:	4b40      	ldr	r3, [pc, #256]	; (801b89c <etharp_output_to_arp_index+0x128>)
 801b79a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801b79e:	4940      	ldr	r1, [pc, #256]	; (801b8a0 <etharp_output_to_arp_index+0x12c>)
 801b7a0:	4840      	ldr	r0, [pc, #256]	; (801b8a4 <etharp_output_to_arp_index+0x130>)
 801b7a2:	f003 fadd 	bl	801ed60 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801b7a6:	79fa      	ldrb	r2, [r7, #7]
 801b7a8:	493b      	ldr	r1, [pc, #236]	; (801b898 <etharp_output_to_arp_index+0x124>)
 801b7aa:	4613      	mov	r3, r2
 801b7ac:	005b      	lsls	r3, r3, #1
 801b7ae:	4413      	add	r3, r2
 801b7b0:	00db      	lsls	r3, r3, #3
 801b7b2:	440b      	add	r3, r1
 801b7b4:	3314      	adds	r3, #20
 801b7b6:	781b      	ldrb	r3, [r3, #0]
 801b7b8:	2b02      	cmp	r3, #2
 801b7ba:	d153      	bne.n	801b864 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801b7bc:	79fa      	ldrb	r2, [r7, #7]
 801b7be:	4936      	ldr	r1, [pc, #216]	; (801b898 <etharp_output_to_arp_index+0x124>)
 801b7c0:	4613      	mov	r3, r2
 801b7c2:	005b      	lsls	r3, r3, #1
 801b7c4:	4413      	add	r3, r2
 801b7c6:	00db      	lsls	r3, r3, #3
 801b7c8:	440b      	add	r3, r1
 801b7ca:	3312      	adds	r3, #18
 801b7cc:	881b      	ldrh	r3, [r3, #0]
 801b7ce:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801b7d2:	d919      	bls.n	801b808 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801b7d4:	79fa      	ldrb	r2, [r7, #7]
 801b7d6:	4613      	mov	r3, r2
 801b7d8:	005b      	lsls	r3, r3, #1
 801b7da:	4413      	add	r3, r2
 801b7dc:	00db      	lsls	r3, r3, #3
 801b7de:	4a2e      	ldr	r2, [pc, #184]	; (801b898 <etharp_output_to_arp_index+0x124>)
 801b7e0:	4413      	add	r3, r2
 801b7e2:	3304      	adds	r3, #4
 801b7e4:	4619      	mov	r1, r3
 801b7e6:	68f8      	ldr	r0, [r7, #12]
 801b7e8:	f000 fb4c 	bl	801be84 <etharp_request>
 801b7ec:	4603      	mov	r3, r0
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	d138      	bne.n	801b864 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b7f2:	79fa      	ldrb	r2, [r7, #7]
 801b7f4:	4928      	ldr	r1, [pc, #160]	; (801b898 <etharp_output_to_arp_index+0x124>)
 801b7f6:	4613      	mov	r3, r2
 801b7f8:	005b      	lsls	r3, r3, #1
 801b7fa:	4413      	add	r3, r2
 801b7fc:	00db      	lsls	r3, r3, #3
 801b7fe:	440b      	add	r3, r1
 801b800:	3314      	adds	r3, #20
 801b802:	2203      	movs	r2, #3
 801b804:	701a      	strb	r2, [r3, #0]
 801b806:	e02d      	b.n	801b864 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801b808:	79fa      	ldrb	r2, [r7, #7]
 801b80a:	4923      	ldr	r1, [pc, #140]	; (801b898 <etharp_output_to_arp_index+0x124>)
 801b80c:	4613      	mov	r3, r2
 801b80e:	005b      	lsls	r3, r3, #1
 801b810:	4413      	add	r3, r2
 801b812:	00db      	lsls	r3, r3, #3
 801b814:	440b      	add	r3, r1
 801b816:	3312      	adds	r3, #18
 801b818:	881b      	ldrh	r3, [r3, #0]
 801b81a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801b81e:	d321      	bcc.n	801b864 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801b820:	79fa      	ldrb	r2, [r7, #7]
 801b822:	4613      	mov	r3, r2
 801b824:	005b      	lsls	r3, r3, #1
 801b826:	4413      	add	r3, r2
 801b828:	00db      	lsls	r3, r3, #3
 801b82a:	4a1b      	ldr	r2, [pc, #108]	; (801b898 <etharp_output_to_arp_index+0x124>)
 801b82c:	4413      	add	r3, r2
 801b82e:	1d19      	adds	r1, r3, #4
 801b830:	79fa      	ldrb	r2, [r7, #7]
 801b832:	4613      	mov	r3, r2
 801b834:	005b      	lsls	r3, r3, #1
 801b836:	4413      	add	r3, r2
 801b838:	00db      	lsls	r3, r3, #3
 801b83a:	3308      	adds	r3, #8
 801b83c:	4a16      	ldr	r2, [pc, #88]	; (801b898 <etharp_output_to_arp_index+0x124>)
 801b83e:	4413      	add	r3, r2
 801b840:	3304      	adds	r3, #4
 801b842:	461a      	mov	r2, r3
 801b844:	68f8      	ldr	r0, [r7, #12]
 801b846:	f000 fafb 	bl	801be40 <etharp_request_dst>
 801b84a:	4603      	mov	r3, r0
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d109      	bne.n	801b864 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b850:	79fa      	ldrb	r2, [r7, #7]
 801b852:	4911      	ldr	r1, [pc, #68]	; (801b898 <etharp_output_to_arp_index+0x124>)
 801b854:	4613      	mov	r3, r2
 801b856:	005b      	lsls	r3, r3, #1
 801b858:	4413      	add	r3, r2
 801b85a:	00db      	lsls	r3, r3, #3
 801b85c:	440b      	add	r3, r1
 801b85e:	3314      	adds	r3, #20
 801b860:	2203      	movs	r2, #3
 801b862:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801b864:	68fb      	ldr	r3, [r7, #12]
 801b866:	f103 0122 	add.w	r1, r3, #34	; 0x22
 801b86a:	79fa      	ldrb	r2, [r7, #7]
 801b86c:	4613      	mov	r3, r2
 801b86e:	005b      	lsls	r3, r3, #1
 801b870:	4413      	add	r3, r2
 801b872:	00db      	lsls	r3, r3, #3
 801b874:	3308      	adds	r3, #8
 801b876:	4a08      	ldr	r2, [pc, #32]	; (801b898 <etharp_output_to_arp_index+0x124>)
 801b878:	4413      	add	r3, r2
 801b87a:	3304      	adds	r3, #4
 801b87c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801b880:	9200      	str	r2, [sp, #0]
 801b882:	460a      	mov	r2, r1
 801b884:	68b9      	ldr	r1, [r7, #8]
 801b886:	68f8      	ldr	r0, [r7, #12]
 801b888:	f001 ff64 	bl	801d754 <ethernet_output>
 801b88c:	4603      	mov	r3, r0
}
 801b88e:	4618      	mov	r0, r3
 801b890:	3710      	adds	r7, #16
 801b892:	46bd      	mov	sp, r7
 801b894:	bd80      	pop	{r7, pc}
 801b896:	bf00      	nop
 801b898:	2000479c 	.word	0x2000479c
 801b89c:	08025518 	.word	0x08025518
 801b8a0:	08025688 	.word	0x08025688
 801b8a4:	08025590 	.word	0x08025590

0801b8a8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801b8a8:	b580      	push	{r7, lr}
 801b8aa:	b08a      	sub	sp, #40	; 0x28
 801b8ac:	af02      	add	r7, sp, #8
 801b8ae:	60f8      	str	r0, [r7, #12]
 801b8b0:	60b9      	str	r1, [r7, #8]
 801b8b2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b8b8:	68fb      	ldr	r3, [r7, #12]
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	d106      	bne.n	801b8cc <etharp_output+0x24>
 801b8be:	4b73      	ldr	r3, [pc, #460]	; (801ba8c <etharp_output+0x1e4>)
 801b8c0:	f240 321e 	movw	r2, #798	; 0x31e
 801b8c4:	4972      	ldr	r1, [pc, #456]	; (801ba90 <etharp_output+0x1e8>)
 801b8c6:	4873      	ldr	r0, [pc, #460]	; (801ba94 <etharp_output+0x1ec>)
 801b8c8:	f003 fa4a 	bl	801ed60 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801b8cc:	68bb      	ldr	r3, [r7, #8]
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d106      	bne.n	801b8e0 <etharp_output+0x38>
 801b8d2:	4b6e      	ldr	r3, [pc, #440]	; (801ba8c <etharp_output+0x1e4>)
 801b8d4:	f240 321f 	movw	r2, #799	; 0x31f
 801b8d8:	496f      	ldr	r1, [pc, #444]	; (801ba98 <etharp_output+0x1f0>)
 801b8da:	486e      	ldr	r0, [pc, #440]	; (801ba94 <etharp_output+0x1ec>)
 801b8dc:	f003 fa40 	bl	801ed60 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	d106      	bne.n	801b8f4 <etharp_output+0x4c>
 801b8e6:	4b69      	ldr	r3, [pc, #420]	; (801ba8c <etharp_output+0x1e4>)
 801b8e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 801b8ec:	496b      	ldr	r1, [pc, #428]	; (801ba9c <etharp_output+0x1f4>)
 801b8ee:	4869      	ldr	r0, [pc, #420]	; (801ba94 <etharp_output+0x1ec>)
 801b8f0:	f003 fa36 	bl	801ed60 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	68f9      	ldr	r1, [r7, #12]
 801b8fa:	4618      	mov	r0, r3
 801b8fc:	f000 fef8 	bl	801c6f0 <ip4_addr_isbroadcast_u32>
 801b900:	4603      	mov	r3, r0
 801b902:	2b00      	cmp	r3, #0
 801b904:	d002      	beq.n	801b90c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801b906:	4b66      	ldr	r3, [pc, #408]	; (801baa0 <etharp_output+0x1f8>)
 801b908:	61fb      	str	r3, [r7, #28]
 801b90a:	e0af      	b.n	801ba6c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	681b      	ldr	r3, [r3, #0]
 801b910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b914:	2be0      	cmp	r3, #224	; 0xe0
 801b916:	d118      	bne.n	801b94a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801b918:	2301      	movs	r3, #1
 801b91a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801b91c:	2300      	movs	r3, #0
 801b91e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801b920:	235e      	movs	r3, #94	; 0x5e
 801b922:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801b924:	687b      	ldr	r3, [r7, #4]
 801b926:	3301      	adds	r3, #1
 801b928:	781b      	ldrb	r3, [r3, #0]
 801b92a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b92e:	b2db      	uxtb	r3, r3
 801b930:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	3302      	adds	r3, #2
 801b936:	781b      	ldrb	r3, [r3, #0]
 801b938:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	3303      	adds	r3, #3
 801b93e:	781b      	ldrb	r3, [r3, #0]
 801b940:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801b942:	f107 0310 	add.w	r3, r7, #16
 801b946:	61fb      	str	r3, [r7, #28]
 801b948:	e090      	b.n	801ba6c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	681a      	ldr	r2, [r3, #0]
 801b94e:	68fb      	ldr	r3, [r7, #12]
 801b950:	3304      	adds	r3, #4
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	405a      	eors	r2, r3
 801b956:	68fb      	ldr	r3, [r7, #12]
 801b958:	3308      	adds	r3, #8
 801b95a:	681b      	ldr	r3, [r3, #0]
 801b95c:	4013      	ands	r3, r2
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d012      	beq.n	801b988 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	681b      	ldr	r3, [r3, #0]
 801b966:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b968:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801b96c:	4293      	cmp	r3, r2
 801b96e:	d00b      	beq.n	801b988 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801b970:	68fb      	ldr	r3, [r7, #12]
 801b972:	330c      	adds	r3, #12
 801b974:	681b      	ldr	r3, [r3, #0]
 801b976:	2b00      	cmp	r3, #0
 801b978:	d003      	beq.n	801b982 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801b97a:	68fb      	ldr	r3, [r7, #12]
 801b97c:	330c      	adds	r3, #12
 801b97e:	61bb      	str	r3, [r7, #24]
 801b980:	e002      	b.n	801b988 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801b982:	f06f 0303 	mvn.w	r3, #3
 801b986:	e07d      	b.n	801ba84 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b988:	4b46      	ldr	r3, [pc, #280]	; (801baa4 <etharp_output+0x1fc>)
 801b98a:	781b      	ldrb	r3, [r3, #0]
 801b98c:	4619      	mov	r1, r3
 801b98e:	4a46      	ldr	r2, [pc, #280]	; (801baa8 <etharp_output+0x200>)
 801b990:	460b      	mov	r3, r1
 801b992:	005b      	lsls	r3, r3, #1
 801b994:	440b      	add	r3, r1
 801b996:	00db      	lsls	r3, r3, #3
 801b998:	4413      	add	r3, r2
 801b99a:	3314      	adds	r3, #20
 801b99c:	781b      	ldrb	r3, [r3, #0]
 801b99e:	2b01      	cmp	r3, #1
 801b9a0:	d925      	bls.n	801b9ee <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b9a2:	4b40      	ldr	r3, [pc, #256]	; (801baa4 <etharp_output+0x1fc>)
 801b9a4:	781b      	ldrb	r3, [r3, #0]
 801b9a6:	4619      	mov	r1, r3
 801b9a8:	4a3f      	ldr	r2, [pc, #252]	; (801baa8 <etharp_output+0x200>)
 801b9aa:	460b      	mov	r3, r1
 801b9ac:	005b      	lsls	r3, r3, #1
 801b9ae:	440b      	add	r3, r1
 801b9b0:	00db      	lsls	r3, r3, #3
 801b9b2:	4413      	add	r3, r2
 801b9b4:	3308      	adds	r3, #8
 801b9b6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b9b8:	68fa      	ldr	r2, [r7, #12]
 801b9ba:	429a      	cmp	r2, r3
 801b9bc:	d117      	bne.n	801b9ee <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801b9be:	69bb      	ldr	r3, [r7, #24]
 801b9c0:	681a      	ldr	r2, [r3, #0]
 801b9c2:	4b38      	ldr	r3, [pc, #224]	; (801baa4 <etharp_output+0x1fc>)
 801b9c4:	781b      	ldrb	r3, [r3, #0]
 801b9c6:	4618      	mov	r0, r3
 801b9c8:	4937      	ldr	r1, [pc, #220]	; (801baa8 <etharp_output+0x200>)
 801b9ca:	4603      	mov	r3, r0
 801b9cc:	005b      	lsls	r3, r3, #1
 801b9ce:	4403      	add	r3, r0
 801b9d0:	00db      	lsls	r3, r3, #3
 801b9d2:	440b      	add	r3, r1
 801b9d4:	3304      	adds	r3, #4
 801b9d6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b9d8:	429a      	cmp	r2, r3
 801b9da:	d108      	bne.n	801b9ee <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801b9dc:	4b31      	ldr	r3, [pc, #196]	; (801baa4 <etharp_output+0x1fc>)
 801b9de:	781b      	ldrb	r3, [r3, #0]
 801b9e0:	461a      	mov	r2, r3
 801b9e2:	68b9      	ldr	r1, [r7, #8]
 801b9e4:	68f8      	ldr	r0, [r7, #12]
 801b9e6:	f7ff fec5 	bl	801b774 <etharp_output_to_arp_index>
 801b9ea:	4603      	mov	r3, r0
 801b9ec:	e04a      	b.n	801ba84 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b9ee:	2300      	movs	r3, #0
 801b9f0:	75fb      	strb	r3, [r7, #23]
 801b9f2:	e031      	b.n	801ba58 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b9f4:	7dfa      	ldrb	r2, [r7, #23]
 801b9f6:	492c      	ldr	r1, [pc, #176]	; (801baa8 <etharp_output+0x200>)
 801b9f8:	4613      	mov	r3, r2
 801b9fa:	005b      	lsls	r3, r3, #1
 801b9fc:	4413      	add	r3, r2
 801b9fe:	00db      	lsls	r3, r3, #3
 801ba00:	440b      	add	r3, r1
 801ba02:	3314      	adds	r3, #20
 801ba04:	781b      	ldrb	r3, [r3, #0]
 801ba06:	2b01      	cmp	r3, #1
 801ba08:	d923      	bls.n	801ba52 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801ba0a:	7dfa      	ldrb	r2, [r7, #23]
 801ba0c:	4926      	ldr	r1, [pc, #152]	; (801baa8 <etharp_output+0x200>)
 801ba0e:	4613      	mov	r3, r2
 801ba10:	005b      	lsls	r3, r3, #1
 801ba12:	4413      	add	r3, r2
 801ba14:	00db      	lsls	r3, r3, #3
 801ba16:	440b      	add	r3, r1
 801ba18:	3308      	adds	r3, #8
 801ba1a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ba1c:	68fa      	ldr	r2, [r7, #12]
 801ba1e:	429a      	cmp	r2, r3
 801ba20:	d117      	bne.n	801ba52 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801ba22:	69bb      	ldr	r3, [r7, #24]
 801ba24:	6819      	ldr	r1, [r3, #0]
 801ba26:	7dfa      	ldrb	r2, [r7, #23]
 801ba28:	481f      	ldr	r0, [pc, #124]	; (801baa8 <etharp_output+0x200>)
 801ba2a:	4613      	mov	r3, r2
 801ba2c:	005b      	lsls	r3, r3, #1
 801ba2e:	4413      	add	r3, r2
 801ba30:	00db      	lsls	r3, r3, #3
 801ba32:	4403      	add	r3, r0
 801ba34:	3304      	adds	r3, #4
 801ba36:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801ba38:	4299      	cmp	r1, r3
 801ba3a:	d10a      	bne.n	801ba52 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801ba3c:	4a19      	ldr	r2, [pc, #100]	; (801baa4 <etharp_output+0x1fc>)
 801ba3e:	7dfb      	ldrb	r3, [r7, #23]
 801ba40:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801ba42:	7dfb      	ldrb	r3, [r7, #23]
 801ba44:	461a      	mov	r2, r3
 801ba46:	68b9      	ldr	r1, [r7, #8]
 801ba48:	68f8      	ldr	r0, [r7, #12]
 801ba4a:	f7ff fe93 	bl	801b774 <etharp_output_to_arp_index>
 801ba4e:	4603      	mov	r3, r0
 801ba50:	e018      	b.n	801ba84 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ba52:	7dfb      	ldrb	r3, [r7, #23]
 801ba54:	3301      	adds	r3, #1
 801ba56:	75fb      	strb	r3, [r7, #23]
 801ba58:	7dfb      	ldrb	r3, [r7, #23]
 801ba5a:	2b09      	cmp	r3, #9
 801ba5c:	d9ca      	bls.n	801b9f4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801ba5e:	68ba      	ldr	r2, [r7, #8]
 801ba60:	69b9      	ldr	r1, [r7, #24]
 801ba62:	68f8      	ldr	r0, [r7, #12]
 801ba64:	f000 f822 	bl	801baac <etharp_query>
 801ba68:	4603      	mov	r3, r0
 801ba6a:	e00b      	b.n	801ba84 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801ba6c:	68fb      	ldr	r3, [r7, #12]
 801ba6e:	f103 0222 	add.w	r2, r3, #34	; 0x22
 801ba72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ba76:	9300      	str	r3, [sp, #0]
 801ba78:	69fb      	ldr	r3, [r7, #28]
 801ba7a:	68b9      	ldr	r1, [r7, #8]
 801ba7c:	68f8      	ldr	r0, [r7, #12]
 801ba7e:	f001 fe69 	bl	801d754 <ethernet_output>
 801ba82:	4603      	mov	r3, r0
}
 801ba84:	4618      	mov	r0, r3
 801ba86:	3720      	adds	r7, #32
 801ba88:	46bd      	mov	sp, r7
 801ba8a:	bd80      	pop	{r7, pc}
 801ba8c:	08025518 	.word	0x08025518
 801ba90:	08025668 	.word	0x08025668
 801ba94:	08025590 	.word	0x08025590
 801ba98:	080256b8 	.word	0x080256b8
 801ba9c:	08025658 	.word	0x08025658
 801baa0:	08026ca8 	.word	0x08026ca8
 801baa4:	2000488c 	.word	0x2000488c
 801baa8:	2000479c 	.word	0x2000479c

0801baac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801baac:	b580      	push	{r7, lr}
 801baae:	b08c      	sub	sp, #48	; 0x30
 801bab0:	af02      	add	r7, sp, #8
 801bab2:	60f8      	str	r0, [r7, #12]
 801bab4:	60b9      	str	r1, [r7, #8]
 801bab6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801bab8:	68fb      	ldr	r3, [r7, #12]
 801baba:	3322      	adds	r3, #34	; 0x22
 801babc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801babe:	23ff      	movs	r3, #255	; 0xff
 801bac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801bac4:	2300      	movs	r3, #0
 801bac6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801bac8:	68bb      	ldr	r3, [r7, #8]
 801baca:	681b      	ldr	r3, [r3, #0]
 801bacc:	68f9      	ldr	r1, [r7, #12]
 801bace:	4618      	mov	r0, r3
 801bad0:	f000 fe0e 	bl	801c6f0 <ip4_addr_isbroadcast_u32>
 801bad4:	4603      	mov	r3, r0
 801bad6:	2b00      	cmp	r3, #0
 801bad8:	d10c      	bne.n	801baf4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801bada:	68bb      	ldr	r3, [r7, #8]
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801bae2:	2be0      	cmp	r3, #224	; 0xe0
 801bae4:	d006      	beq.n	801baf4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801bae6:	68bb      	ldr	r3, [r7, #8]
 801bae8:	2b00      	cmp	r3, #0
 801baea:	d003      	beq.n	801baf4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801baec:	68bb      	ldr	r3, [r7, #8]
 801baee:	681b      	ldr	r3, [r3, #0]
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	d102      	bne.n	801bafa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801baf4:	f06f 030f 	mvn.w	r3, #15
 801baf8:	e101      	b.n	801bcfe <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801bafa:	68fa      	ldr	r2, [r7, #12]
 801bafc:	2101      	movs	r1, #1
 801bafe:	68b8      	ldr	r0, [r7, #8]
 801bb00:	f7ff fb60 	bl	801b1c4 <etharp_find_entry>
 801bb04:	4603      	mov	r3, r0
 801bb06:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801bb08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801bb0c:	2b00      	cmp	r3, #0
 801bb0e:	da02      	bge.n	801bb16 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801bb10:	8a7b      	ldrh	r3, [r7, #18]
 801bb12:	b25b      	sxtb	r3, r3
 801bb14:	e0f3      	b.n	801bcfe <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801bb16:	8a7b      	ldrh	r3, [r7, #18]
 801bb18:	2b7e      	cmp	r3, #126	; 0x7e
 801bb1a:	d906      	bls.n	801bb2a <etharp_query+0x7e>
 801bb1c:	4b7a      	ldr	r3, [pc, #488]	; (801bd08 <etharp_query+0x25c>)
 801bb1e:	f240 32c1 	movw	r2, #961	; 0x3c1
 801bb22:	497a      	ldr	r1, [pc, #488]	; (801bd0c <etharp_query+0x260>)
 801bb24:	487a      	ldr	r0, [pc, #488]	; (801bd10 <etharp_query+0x264>)
 801bb26:	f003 f91b 	bl	801ed60 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801bb2a:	8a7b      	ldrh	r3, [r7, #18]
 801bb2c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801bb2e:	7c7a      	ldrb	r2, [r7, #17]
 801bb30:	4978      	ldr	r1, [pc, #480]	; (801bd14 <etharp_query+0x268>)
 801bb32:	4613      	mov	r3, r2
 801bb34:	005b      	lsls	r3, r3, #1
 801bb36:	4413      	add	r3, r2
 801bb38:	00db      	lsls	r3, r3, #3
 801bb3a:	440b      	add	r3, r1
 801bb3c:	3314      	adds	r3, #20
 801bb3e:	781b      	ldrb	r3, [r3, #0]
 801bb40:	2b00      	cmp	r3, #0
 801bb42:	d115      	bne.n	801bb70 <etharp_query+0xc4>
    is_new_entry = 1;
 801bb44:	2301      	movs	r3, #1
 801bb46:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801bb48:	7c7a      	ldrb	r2, [r7, #17]
 801bb4a:	4972      	ldr	r1, [pc, #456]	; (801bd14 <etharp_query+0x268>)
 801bb4c:	4613      	mov	r3, r2
 801bb4e:	005b      	lsls	r3, r3, #1
 801bb50:	4413      	add	r3, r2
 801bb52:	00db      	lsls	r3, r3, #3
 801bb54:	440b      	add	r3, r1
 801bb56:	3314      	adds	r3, #20
 801bb58:	2201      	movs	r2, #1
 801bb5a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801bb5c:	7c7a      	ldrb	r2, [r7, #17]
 801bb5e:	496d      	ldr	r1, [pc, #436]	; (801bd14 <etharp_query+0x268>)
 801bb60:	4613      	mov	r3, r2
 801bb62:	005b      	lsls	r3, r3, #1
 801bb64:	4413      	add	r3, r2
 801bb66:	00db      	lsls	r3, r3, #3
 801bb68:	440b      	add	r3, r1
 801bb6a:	3308      	adds	r3, #8
 801bb6c:	68fa      	ldr	r2, [r7, #12]
 801bb6e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801bb70:	7c7a      	ldrb	r2, [r7, #17]
 801bb72:	4968      	ldr	r1, [pc, #416]	; (801bd14 <etharp_query+0x268>)
 801bb74:	4613      	mov	r3, r2
 801bb76:	005b      	lsls	r3, r3, #1
 801bb78:	4413      	add	r3, r2
 801bb7a:	00db      	lsls	r3, r3, #3
 801bb7c:	440b      	add	r3, r1
 801bb7e:	3314      	adds	r3, #20
 801bb80:	781b      	ldrb	r3, [r3, #0]
 801bb82:	2b01      	cmp	r3, #1
 801bb84:	d011      	beq.n	801bbaa <etharp_query+0xfe>
 801bb86:	7c7a      	ldrb	r2, [r7, #17]
 801bb88:	4962      	ldr	r1, [pc, #392]	; (801bd14 <etharp_query+0x268>)
 801bb8a:	4613      	mov	r3, r2
 801bb8c:	005b      	lsls	r3, r3, #1
 801bb8e:	4413      	add	r3, r2
 801bb90:	00db      	lsls	r3, r3, #3
 801bb92:	440b      	add	r3, r1
 801bb94:	3314      	adds	r3, #20
 801bb96:	781b      	ldrb	r3, [r3, #0]
 801bb98:	2b01      	cmp	r3, #1
 801bb9a:	d806      	bhi.n	801bbaa <etharp_query+0xfe>
 801bb9c:	4b5a      	ldr	r3, [pc, #360]	; (801bd08 <etharp_query+0x25c>)
 801bb9e:	f240 32cd 	movw	r2, #973	; 0x3cd
 801bba2:	495d      	ldr	r1, [pc, #372]	; (801bd18 <etharp_query+0x26c>)
 801bba4:	485a      	ldr	r0, [pc, #360]	; (801bd10 <etharp_query+0x264>)
 801bba6:	f003 f8db 	bl	801ed60 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801bbaa:	6a3b      	ldr	r3, [r7, #32]
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	d102      	bne.n	801bbb6 <etharp_query+0x10a>
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	2b00      	cmp	r3, #0
 801bbb4:	d10c      	bne.n	801bbd0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801bbb6:	68b9      	ldr	r1, [r7, #8]
 801bbb8:	68f8      	ldr	r0, [r7, #12]
 801bbba:	f000 f963 	bl	801be84 <etharp_request>
 801bbbe:	4603      	mov	r3, r0
 801bbc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d102      	bne.n	801bbd0 <etharp_query+0x124>
      return result;
 801bbca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801bbce:	e096      	b.n	801bcfe <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	d106      	bne.n	801bbe4 <etharp_query+0x138>
 801bbd6:	4b4c      	ldr	r3, [pc, #304]	; (801bd08 <etharp_query+0x25c>)
 801bbd8:	f240 32e1 	movw	r2, #993	; 0x3e1
 801bbdc:	494f      	ldr	r1, [pc, #316]	; (801bd1c <etharp_query+0x270>)
 801bbde:	484c      	ldr	r0, [pc, #304]	; (801bd10 <etharp_query+0x264>)
 801bbe0:	f003 f8be 	bl	801ed60 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801bbe4:	7c7a      	ldrb	r2, [r7, #17]
 801bbe6:	494b      	ldr	r1, [pc, #300]	; (801bd14 <etharp_query+0x268>)
 801bbe8:	4613      	mov	r3, r2
 801bbea:	005b      	lsls	r3, r3, #1
 801bbec:	4413      	add	r3, r2
 801bbee:	00db      	lsls	r3, r3, #3
 801bbf0:	440b      	add	r3, r1
 801bbf2:	3314      	adds	r3, #20
 801bbf4:	781b      	ldrb	r3, [r3, #0]
 801bbf6:	2b01      	cmp	r3, #1
 801bbf8:	d917      	bls.n	801bc2a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801bbfa:	4a49      	ldr	r2, [pc, #292]	; (801bd20 <etharp_query+0x274>)
 801bbfc:	7c7b      	ldrb	r3, [r7, #17]
 801bbfe:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801bc00:	7c7a      	ldrb	r2, [r7, #17]
 801bc02:	4613      	mov	r3, r2
 801bc04:	005b      	lsls	r3, r3, #1
 801bc06:	4413      	add	r3, r2
 801bc08:	00db      	lsls	r3, r3, #3
 801bc0a:	3308      	adds	r3, #8
 801bc0c:	4a41      	ldr	r2, [pc, #260]	; (801bd14 <etharp_query+0x268>)
 801bc0e:	4413      	add	r3, r2
 801bc10:	3304      	adds	r3, #4
 801bc12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801bc16:	9200      	str	r2, [sp, #0]
 801bc18:	697a      	ldr	r2, [r7, #20]
 801bc1a:	6879      	ldr	r1, [r7, #4]
 801bc1c:	68f8      	ldr	r0, [r7, #12]
 801bc1e:	f001 fd99 	bl	801d754 <ethernet_output>
 801bc22:	4603      	mov	r3, r0
 801bc24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bc28:	e067      	b.n	801bcfa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801bc2a:	7c7a      	ldrb	r2, [r7, #17]
 801bc2c:	4939      	ldr	r1, [pc, #228]	; (801bd14 <etharp_query+0x268>)
 801bc2e:	4613      	mov	r3, r2
 801bc30:	005b      	lsls	r3, r3, #1
 801bc32:	4413      	add	r3, r2
 801bc34:	00db      	lsls	r3, r3, #3
 801bc36:	440b      	add	r3, r1
 801bc38:	3314      	adds	r3, #20
 801bc3a:	781b      	ldrb	r3, [r3, #0]
 801bc3c:	2b01      	cmp	r3, #1
 801bc3e:	d15c      	bne.n	801bcfa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801bc40:	2300      	movs	r3, #0
 801bc42:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	61fb      	str	r3, [r7, #28]
    while (p) {
 801bc48:	e01c      	b.n	801bc84 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801bc4a:	69fb      	ldr	r3, [r7, #28]
 801bc4c:	895a      	ldrh	r2, [r3, #10]
 801bc4e:	69fb      	ldr	r3, [r7, #28]
 801bc50:	891b      	ldrh	r3, [r3, #8]
 801bc52:	429a      	cmp	r2, r3
 801bc54:	d10a      	bne.n	801bc6c <etharp_query+0x1c0>
 801bc56:	69fb      	ldr	r3, [r7, #28]
 801bc58:	681b      	ldr	r3, [r3, #0]
 801bc5a:	2b00      	cmp	r3, #0
 801bc5c:	d006      	beq.n	801bc6c <etharp_query+0x1c0>
 801bc5e:	4b2a      	ldr	r3, [pc, #168]	; (801bd08 <etharp_query+0x25c>)
 801bc60:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801bc64:	492f      	ldr	r1, [pc, #188]	; (801bd24 <etharp_query+0x278>)
 801bc66:	482a      	ldr	r0, [pc, #168]	; (801bd10 <etharp_query+0x264>)
 801bc68:	f003 f87a 	bl	801ed60 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801bc6c:	69fb      	ldr	r3, [r7, #28]
 801bc6e:	7b1b      	ldrb	r3, [r3, #12]
 801bc70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	d002      	beq.n	801bc7e <etharp_query+0x1d2>
        copy_needed = 1;
 801bc78:	2301      	movs	r3, #1
 801bc7a:	61bb      	str	r3, [r7, #24]
        break;
 801bc7c:	e005      	b.n	801bc8a <etharp_query+0x1de>
      }
      p = p->next;
 801bc7e:	69fb      	ldr	r3, [r7, #28]
 801bc80:	681b      	ldr	r3, [r3, #0]
 801bc82:	61fb      	str	r3, [r7, #28]
    while (p) {
 801bc84:	69fb      	ldr	r3, [r7, #28]
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d1df      	bne.n	801bc4a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801bc8a:	69bb      	ldr	r3, [r7, #24]
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d007      	beq.n	801bca0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801bc90:	687a      	ldr	r2, [r7, #4]
 801bc92:	f44f 7120 	mov.w	r1, #640	; 0x280
 801bc96:	200e      	movs	r0, #14
 801bc98:	f7f8 fa72 	bl	8014180 <pbuf_clone>
 801bc9c:	61f8      	str	r0, [r7, #28]
 801bc9e:	e004      	b.n	801bcaa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801bca4:	69f8      	ldr	r0, [r7, #28]
 801bca6:	f7f8 f899 	bl	8013ddc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801bcaa:	69fb      	ldr	r3, [r7, #28]
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d021      	beq.n	801bcf4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801bcb0:	7c7a      	ldrb	r2, [r7, #17]
 801bcb2:	4918      	ldr	r1, [pc, #96]	; (801bd14 <etharp_query+0x268>)
 801bcb4:	4613      	mov	r3, r2
 801bcb6:	005b      	lsls	r3, r3, #1
 801bcb8:	4413      	add	r3, r2
 801bcba:	00db      	lsls	r3, r3, #3
 801bcbc:	440b      	add	r3, r1
 801bcbe:	681b      	ldr	r3, [r3, #0]
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	d00a      	beq.n	801bcda <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801bcc4:	7c7a      	ldrb	r2, [r7, #17]
 801bcc6:	4913      	ldr	r1, [pc, #76]	; (801bd14 <etharp_query+0x268>)
 801bcc8:	4613      	mov	r3, r2
 801bcca:	005b      	lsls	r3, r3, #1
 801bccc:	4413      	add	r3, r2
 801bcce:	00db      	lsls	r3, r3, #3
 801bcd0:	440b      	add	r3, r1
 801bcd2:	681b      	ldr	r3, [r3, #0]
 801bcd4:	4618      	mov	r0, r3
 801bcd6:	f7f7 ffdb 	bl	8013c90 <pbuf_free>
      }
      arp_table[i].q = p;
 801bcda:	7c7a      	ldrb	r2, [r7, #17]
 801bcdc:	490d      	ldr	r1, [pc, #52]	; (801bd14 <etharp_query+0x268>)
 801bcde:	4613      	mov	r3, r2
 801bce0:	005b      	lsls	r3, r3, #1
 801bce2:	4413      	add	r3, r2
 801bce4:	00db      	lsls	r3, r3, #3
 801bce6:	440b      	add	r3, r1
 801bce8:	69fa      	ldr	r2, [r7, #28]
 801bcea:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801bcec:	2300      	movs	r3, #0
 801bcee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bcf2:	e002      	b.n	801bcfa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801bcf4:	23ff      	movs	r3, #255	; 0xff
 801bcf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801bcfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801bcfe:	4618      	mov	r0, r3
 801bd00:	3728      	adds	r7, #40	; 0x28
 801bd02:	46bd      	mov	sp, r7
 801bd04:	bd80      	pop	{r7, pc}
 801bd06:	bf00      	nop
 801bd08:	08025518 	.word	0x08025518
 801bd0c:	080256c4 	.word	0x080256c4
 801bd10:	08025590 	.word	0x08025590
 801bd14:	2000479c 	.word	0x2000479c
 801bd18:	080256d4 	.word	0x080256d4
 801bd1c:	080256b8 	.word	0x080256b8
 801bd20:	2000488c 	.word	0x2000488c
 801bd24:	080256fc 	.word	0x080256fc

0801bd28 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801bd28:	b580      	push	{r7, lr}
 801bd2a:	b08a      	sub	sp, #40	; 0x28
 801bd2c:	af02      	add	r7, sp, #8
 801bd2e:	60f8      	str	r0, [r7, #12]
 801bd30:	60b9      	str	r1, [r7, #8]
 801bd32:	607a      	str	r2, [r7, #4]
 801bd34:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801bd36:	2300      	movs	r3, #0
 801bd38:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801bd3a:	68fb      	ldr	r3, [r7, #12]
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	d106      	bne.n	801bd4e <etharp_raw+0x26>
 801bd40:	4b3a      	ldr	r3, [pc, #232]	; (801be2c <etharp_raw+0x104>)
 801bd42:	f240 4257 	movw	r2, #1111	; 0x457
 801bd46:	493a      	ldr	r1, [pc, #232]	; (801be30 <etharp_raw+0x108>)
 801bd48:	483a      	ldr	r0, [pc, #232]	; (801be34 <etharp_raw+0x10c>)
 801bd4a:	f003 f809 	bl	801ed60 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801bd4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bd52:	211c      	movs	r1, #28
 801bd54:	200e      	movs	r0, #14
 801bd56:	f7f7 fcb7 	bl	80136c8 <pbuf_alloc>
 801bd5a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801bd5c:	69bb      	ldr	r3, [r7, #24]
 801bd5e:	2b00      	cmp	r3, #0
 801bd60:	d102      	bne.n	801bd68 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801bd62:	f04f 33ff 	mov.w	r3, #4294967295
 801bd66:	e05d      	b.n	801be24 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801bd68:	69bb      	ldr	r3, [r7, #24]
 801bd6a:	895b      	ldrh	r3, [r3, #10]
 801bd6c:	2b1b      	cmp	r3, #27
 801bd6e:	d806      	bhi.n	801bd7e <etharp_raw+0x56>
 801bd70:	4b2e      	ldr	r3, [pc, #184]	; (801be2c <etharp_raw+0x104>)
 801bd72:	f240 4262 	movw	r2, #1122	; 0x462
 801bd76:	4930      	ldr	r1, [pc, #192]	; (801be38 <etharp_raw+0x110>)
 801bd78:	482e      	ldr	r0, [pc, #184]	; (801be34 <etharp_raw+0x10c>)
 801bd7a:	f002 fff1 	bl	801ed60 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801bd7e:	69bb      	ldr	r3, [r7, #24]
 801bd80:	685b      	ldr	r3, [r3, #4]
 801bd82:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801bd84:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bd86:	4618      	mov	r0, r3
 801bd88:	f7f6 fbc6 	bl	8012518 <lwip_htons>
 801bd8c:	4603      	mov	r3, r0
 801bd8e:	461a      	mov	r2, r3
 801bd90:	697b      	ldr	r3, [r7, #20]
 801bd92:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801bd94:	68fb      	ldr	r3, [r7, #12]
 801bd96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bd9a:	2b06      	cmp	r3, #6
 801bd9c:	d006      	beq.n	801bdac <etharp_raw+0x84>
 801bd9e:	4b23      	ldr	r3, [pc, #140]	; (801be2c <etharp_raw+0x104>)
 801bda0:	f240 4269 	movw	r2, #1129	; 0x469
 801bda4:	4925      	ldr	r1, [pc, #148]	; (801be3c <etharp_raw+0x114>)
 801bda6:	4823      	ldr	r0, [pc, #140]	; (801be34 <etharp_raw+0x10c>)
 801bda8:	f002 ffda 	bl	801ed60 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801bdac:	697b      	ldr	r3, [r7, #20]
 801bdae:	3308      	adds	r3, #8
 801bdb0:	2206      	movs	r2, #6
 801bdb2:	6839      	ldr	r1, [r7, #0]
 801bdb4:	4618      	mov	r0, r3
 801bdb6:	f002 fd25 	bl	801e804 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801bdba:	697b      	ldr	r3, [r7, #20]
 801bdbc:	3312      	adds	r3, #18
 801bdbe:	2206      	movs	r2, #6
 801bdc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bdc2:	4618      	mov	r0, r3
 801bdc4:	f002 fd1e 	bl	801e804 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801bdc8:	697b      	ldr	r3, [r7, #20]
 801bdca:	330e      	adds	r3, #14
 801bdcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bdce:	6812      	ldr	r2, [r2, #0]
 801bdd0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801bdd2:	697b      	ldr	r3, [r7, #20]
 801bdd4:	3318      	adds	r3, #24
 801bdd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bdd8:	6812      	ldr	r2, [r2, #0]
 801bdda:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801bddc:	697b      	ldr	r3, [r7, #20]
 801bdde:	2200      	movs	r2, #0
 801bde0:	701a      	strb	r2, [r3, #0]
 801bde2:	2200      	movs	r2, #0
 801bde4:	f042 0201 	orr.w	r2, r2, #1
 801bde8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801bdea:	697b      	ldr	r3, [r7, #20]
 801bdec:	2200      	movs	r2, #0
 801bdee:	f042 0208 	orr.w	r2, r2, #8
 801bdf2:	709a      	strb	r2, [r3, #2]
 801bdf4:	2200      	movs	r2, #0
 801bdf6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801bdf8:	697b      	ldr	r3, [r7, #20]
 801bdfa:	2206      	movs	r2, #6
 801bdfc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801bdfe:	697b      	ldr	r3, [r7, #20]
 801be00:	2204      	movs	r2, #4
 801be02:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801be04:	f640 0306 	movw	r3, #2054	; 0x806
 801be08:	9300      	str	r3, [sp, #0]
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	68ba      	ldr	r2, [r7, #8]
 801be0e:	69b9      	ldr	r1, [r7, #24]
 801be10:	68f8      	ldr	r0, [r7, #12]
 801be12:	f001 fc9f 	bl	801d754 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801be16:	69b8      	ldr	r0, [r7, #24]
 801be18:	f7f7 ff3a 	bl	8013c90 <pbuf_free>
  p = NULL;
 801be1c:	2300      	movs	r3, #0
 801be1e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801be20:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801be24:	4618      	mov	r0, r3
 801be26:	3720      	adds	r7, #32
 801be28:	46bd      	mov	sp, r7
 801be2a:	bd80      	pop	{r7, pc}
 801be2c:	08025518 	.word	0x08025518
 801be30:	08025668 	.word	0x08025668
 801be34:	08025590 	.word	0x08025590
 801be38:	08025718 	.word	0x08025718
 801be3c:	0802574c 	.word	0x0802574c

0801be40 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801be40:	b580      	push	{r7, lr}
 801be42:	b088      	sub	sp, #32
 801be44:	af04      	add	r7, sp, #16
 801be46:	60f8      	str	r0, [r7, #12]
 801be48:	60b9      	str	r1, [r7, #8]
 801be4a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801be4c:	68fb      	ldr	r3, [r7, #12]
 801be4e:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801be52:	68fb      	ldr	r3, [r7, #12]
 801be54:	f103 0022 	add.w	r0, r3, #34	; 0x22
 801be58:	68fb      	ldr	r3, [r7, #12]
 801be5a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801be5c:	2201      	movs	r2, #1
 801be5e:	9203      	str	r2, [sp, #12]
 801be60:	68ba      	ldr	r2, [r7, #8]
 801be62:	9202      	str	r2, [sp, #8]
 801be64:	4a06      	ldr	r2, [pc, #24]	; (801be80 <etharp_request_dst+0x40>)
 801be66:	9201      	str	r2, [sp, #4]
 801be68:	9300      	str	r3, [sp, #0]
 801be6a:	4603      	mov	r3, r0
 801be6c:	687a      	ldr	r2, [r7, #4]
 801be6e:	68f8      	ldr	r0, [r7, #12]
 801be70:	f7ff ff5a 	bl	801bd28 <etharp_raw>
 801be74:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801be76:	4618      	mov	r0, r3
 801be78:	3710      	adds	r7, #16
 801be7a:	46bd      	mov	sp, r7
 801be7c:	bd80      	pop	{r7, pc}
 801be7e:	bf00      	nop
 801be80:	08026cb0 	.word	0x08026cb0

0801be84 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801be84:	b580      	push	{r7, lr}
 801be86:	b082      	sub	sp, #8
 801be88:	af00      	add	r7, sp, #0
 801be8a:	6078      	str	r0, [r7, #4]
 801be8c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801be8e:	4a05      	ldr	r2, [pc, #20]	; (801bea4 <etharp_request+0x20>)
 801be90:	6839      	ldr	r1, [r7, #0]
 801be92:	6878      	ldr	r0, [r7, #4]
 801be94:	f7ff ffd4 	bl	801be40 <etharp_request_dst>
 801be98:	4603      	mov	r3, r0
}
 801be9a:	4618      	mov	r0, r3
 801be9c:	3708      	adds	r7, #8
 801be9e:	46bd      	mov	sp, r7
 801bea0:	bd80      	pop	{r7, pc}
 801bea2:	bf00      	nop
 801bea4:	08026ca8 	.word	0x08026ca8

0801bea8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801bea8:	b580      	push	{r7, lr}
 801beaa:	b08e      	sub	sp, #56	; 0x38
 801beac:	af04      	add	r7, sp, #16
 801beae:	6078      	str	r0, [r7, #4]
 801beb0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801beb2:	4b79      	ldr	r3, [pc, #484]	; (801c098 <icmp_input+0x1f0>)
 801beb4:	689b      	ldr	r3, [r3, #8]
 801beb6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801beb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801beba:	781b      	ldrb	r3, [r3, #0]
 801bebc:	f003 030f 	and.w	r3, r3, #15
 801bec0:	b2db      	uxtb	r3, r3
 801bec2:	009b      	lsls	r3, r3, #2
 801bec4:	b2db      	uxtb	r3, r3
 801bec6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801bec8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801beca:	2b13      	cmp	r3, #19
 801becc:	f240 80cd 	bls.w	801c06a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	895b      	ldrh	r3, [r3, #10]
 801bed4:	2b03      	cmp	r3, #3
 801bed6:	f240 80ca 	bls.w	801c06e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	685b      	ldr	r3, [r3, #4]
 801bede:	781b      	ldrb	r3, [r3, #0]
 801bee0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801bee4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801bee8:	2b00      	cmp	r3, #0
 801beea:	f000 80b7 	beq.w	801c05c <icmp_input+0x1b4>
 801beee:	2b08      	cmp	r3, #8
 801bef0:	f040 80b7 	bne.w	801c062 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801bef4:	4b69      	ldr	r3, [pc, #420]	; (801c09c <icmp_input+0x1f4>)
 801bef6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bef8:	4b67      	ldr	r3, [pc, #412]	; (801c098 <icmp_input+0x1f0>)
 801befa:	695b      	ldr	r3, [r3, #20]
 801befc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801bf00:	2be0      	cmp	r3, #224	; 0xe0
 801bf02:	f000 80bb 	beq.w	801c07c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801bf06:	4b64      	ldr	r3, [pc, #400]	; (801c098 <icmp_input+0x1f0>)
 801bf08:	695b      	ldr	r3, [r3, #20]
 801bf0a:	4a63      	ldr	r2, [pc, #396]	; (801c098 <icmp_input+0x1f0>)
 801bf0c:	6812      	ldr	r2, [r2, #0]
 801bf0e:	4611      	mov	r1, r2
 801bf10:	4618      	mov	r0, r3
 801bf12:	f000 fbed 	bl	801c6f0 <ip4_addr_isbroadcast_u32>
 801bf16:	4603      	mov	r3, r0
 801bf18:	2b00      	cmp	r3, #0
 801bf1a:	f040 80b1 	bne.w	801c080 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	891b      	ldrh	r3, [r3, #8]
 801bf22:	2b07      	cmp	r3, #7
 801bf24:	f240 80a5 	bls.w	801c072 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801bf28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801bf2a:	330e      	adds	r3, #14
 801bf2c:	4619      	mov	r1, r3
 801bf2e:	6878      	ldr	r0, [r7, #4]
 801bf30:	f7f7 fe18 	bl	8013b64 <pbuf_add_header>
 801bf34:	4603      	mov	r3, r0
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	d04b      	beq.n	801bfd2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	891a      	ldrh	r2, [r3, #8]
 801bf3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801bf40:	4413      	add	r3, r2
 801bf42:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	891b      	ldrh	r3, [r3, #8]
 801bf48:	8b7a      	ldrh	r2, [r7, #26]
 801bf4a:	429a      	cmp	r2, r3
 801bf4c:	f0c0 809a 	bcc.w	801c084 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801bf50:	8b7b      	ldrh	r3, [r7, #26]
 801bf52:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bf56:	4619      	mov	r1, r3
 801bf58:	200e      	movs	r0, #14
 801bf5a:	f7f7 fbb5 	bl	80136c8 <pbuf_alloc>
 801bf5e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801bf60:	697b      	ldr	r3, [r7, #20]
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	f000 8090 	beq.w	801c088 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801bf68:	697b      	ldr	r3, [r7, #20]
 801bf6a:	895b      	ldrh	r3, [r3, #10]
 801bf6c:	461a      	mov	r2, r3
 801bf6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801bf70:	3308      	adds	r3, #8
 801bf72:	429a      	cmp	r2, r3
 801bf74:	d203      	bcs.n	801bf7e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801bf76:	6978      	ldr	r0, [r7, #20]
 801bf78:	f7f7 fe8a 	bl	8013c90 <pbuf_free>
          goto icmperr;
 801bf7c:	e085      	b.n	801c08a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801bf7e:	697b      	ldr	r3, [r7, #20]
 801bf80:	685b      	ldr	r3, [r3, #4]
 801bf82:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801bf84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801bf86:	4618      	mov	r0, r3
 801bf88:	f002 fc3c 	bl	801e804 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801bf8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801bf8e:	4619      	mov	r1, r3
 801bf90:	6978      	ldr	r0, [r7, #20]
 801bf92:	f7f7 fdf7 	bl	8013b84 <pbuf_remove_header>
 801bf96:	4603      	mov	r3, r0
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	d009      	beq.n	801bfb0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801bf9c:	4b40      	ldr	r3, [pc, #256]	; (801c0a0 <icmp_input+0x1f8>)
 801bf9e:	22b6      	movs	r2, #182	; 0xb6
 801bfa0:	4940      	ldr	r1, [pc, #256]	; (801c0a4 <icmp_input+0x1fc>)
 801bfa2:	4841      	ldr	r0, [pc, #260]	; (801c0a8 <icmp_input+0x200>)
 801bfa4:	f002 fedc 	bl	801ed60 <iprintf>
          pbuf_free(r);
 801bfa8:	6978      	ldr	r0, [r7, #20]
 801bfaa:	f7f7 fe71 	bl	8013c90 <pbuf_free>
          goto icmperr;
 801bfae:	e06c      	b.n	801c08a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801bfb0:	6879      	ldr	r1, [r7, #4]
 801bfb2:	6978      	ldr	r0, [r7, #20]
 801bfb4:	f7f7 ffa0 	bl	8013ef8 <pbuf_copy>
 801bfb8:	4603      	mov	r3, r0
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	d003      	beq.n	801bfc6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801bfbe:	6978      	ldr	r0, [r7, #20]
 801bfc0:	f7f7 fe66 	bl	8013c90 <pbuf_free>
          goto icmperr;
 801bfc4:	e061      	b.n	801c08a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801bfc6:	6878      	ldr	r0, [r7, #4]
 801bfc8:	f7f7 fe62 	bl	8013c90 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801bfcc:	697b      	ldr	r3, [r7, #20]
 801bfce:	607b      	str	r3, [r7, #4]
 801bfd0:	e00f      	b.n	801bff2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801bfd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801bfd4:	330e      	adds	r3, #14
 801bfd6:	4619      	mov	r1, r3
 801bfd8:	6878      	ldr	r0, [r7, #4]
 801bfda:	f7f7 fdd3 	bl	8013b84 <pbuf_remove_header>
 801bfde:	4603      	mov	r3, r0
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d006      	beq.n	801bff2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801bfe4:	4b2e      	ldr	r3, [pc, #184]	; (801c0a0 <icmp_input+0x1f8>)
 801bfe6:	22c7      	movs	r2, #199	; 0xc7
 801bfe8:	4930      	ldr	r1, [pc, #192]	; (801c0ac <icmp_input+0x204>)
 801bfea:	482f      	ldr	r0, [pc, #188]	; (801c0a8 <icmp_input+0x200>)
 801bfec:	f002 feb8 	bl	801ed60 <iprintf>
          goto icmperr;
 801bff0:	e04b      	b.n	801c08a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	685b      	ldr	r3, [r3, #4]
 801bff6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801bff8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801bffa:	4619      	mov	r1, r3
 801bffc:	6878      	ldr	r0, [r7, #4]
 801bffe:	f7f7 fdb1 	bl	8013b64 <pbuf_add_header>
 801c002:	4603      	mov	r3, r0
 801c004:	2b00      	cmp	r3, #0
 801c006:	d12b      	bne.n	801c060 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	685b      	ldr	r3, [r3, #4]
 801c00c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801c00e:	69fb      	ldr	r3, [r7, #28]
 801c010:	681a      	ldr	r2, [r3, #0]
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801c016:	4b20      	ldr	r3, [pc, #128]	; (801c098 <icmp_input+0x1f0>)
 801c018:	691a      	ldr	r2, [r3, #16]
 801c01a:	68fb      	ldr	r3, [r7, #12]
 801c01c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801c01e:	693b      	ldr	r3, [r7, #16]
 801c020:	2200      	movs	r2, #0
 801c022:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801c024:	693b      	ldr	r3, [r7, #16]
 801c026:	2200      	movs	r2, #0
 801c028:	709a      	strb	r2, [r3, #2]
 801c02a:	2200      	movs	r2, #0
 801c02c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801c02e:	68fb      	ldr	r3, [r7, #12]
 801c030:	22ff      	movs	r2, #255	; 0xff
 801c032:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801c034:	68fb      	ldr	r3, [r7, #12]
 801c036:	2200      	movs	r2, #0
 801c038:	729a      	strb	r2, [r3, #10]
 801c03a:	2200      	movs	r2, #0
 801c03c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801c03e:	683b      	ldr	r3, [r7, #0]
 801c040:	9302      	str	r3, [sp, #8]
 801c042:	2301      	movs	r3, #1
 801c044:	9301      	str	r3, [sp, #4]
 801c046:	2300      	movs	r3, #0
 801c048:	9300      	str	r3, [sp, #0]
 801c04a:	23ff      	movs	r3, #255	; 0xff
 801c04c:	2200      	movs	r2, #0
 801c04e:	69f9      	ldr	r1, [r7, #28]
 801c050:	6878      	ldr	r0, [r7, #4]
 801c052:	f000 fa75 	bl	801c540 <ip4_output_if>
 801c056:	4603      	mov	r3, r0
 801c058:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801c05a:	e001      	b.n	801c060 <icmp_input+0x1b8>
      break;
 801c05c:	bf00      	nop
 801c05e:	e000      	b.n	801c062 <icmp_input+0x1ba>
      break;
 801c060:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801c062:	6878      	ldr	r0, [r7, #4]
 801c064:	f7f7 fe14 	bl	8013c90 <pbuf_free>
  return;
 801c068:	e013      	b.n	801c092 <icmp_input+0x1ea>
    goto lenerr;
 801c06a:	bf00      	nop
 801c06c:	e002      	b.n	801c074 <icmp_input+0x1cc>
    goto lenerr;
 801c06e:	bf00      	nop
 801c070:	e000      	b.n	801c074 <icmp_input+0x1cc>
        goto lenerr;
 801c072:	bf00      	nop
lenerr:
  pbuf_free(p);
 801c074:	6878      	ldr	r0, [r7, #4]
 801c076:	f7f7 fe0b 	bl	8013c90 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c07a:	e00a      	b.n	801c092 <icmp_input+0x1ea>
        goto icmperr;
 801c07c:	bf00      	nop
 801c07e:	e004      	b.n	801c08a <icmp_input+0x1e2>
        goto icmperr;
 801c080:	bf00      	nop
 801c082:	e002      	b.n	801c08a <icmp_input+0x1e2>
          goto icmperr;
 801c084:	bf00      	nop
 801c086:	e000      	b.n	801c08a <icmp_input+0x1e2>
          goto icmperr;
 801c088:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801c08a:	6878      	ldr	r0, [r7, #4]
 801c08c:	f7f7 fe00 	bl	8013c90 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c090:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801c092:	3728      	adds	r7, #40	; 0x28
 801c094:	46bd      	mov	sp, r7
 801c096:	bd80      	pop	{r7, pc}
 801c098:	20008088 	.word	0x20008088
 801c09c:	2000809c 	.word	0x2000809c
 801c0a0:	08025790 	.word	0x08025790
 801c0a4:	080257c8 	.word	0x080257c8
 801c0a8:	08025800 	.word	0x08025800
 801c0ac:	08025828 	.word	0x08025828

0801c0b0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801c0b0:	b580      	push	{r7, lr}
 801c0b2:	b082      	sub	sp, #8
 801c0b4:	af00      	add	r7, sp, #0
 801c0b6:	6078      	str	r0, [r7, #4]
 801c0b8:	460b      	mov	r3, r1
 801c0ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801c0bc:	78fb      	ldrb	r3, [r7, #3]
 801c0be:	461a      	mov	r2, r3
 801c0c0:	2103      	movs	r1, #3
 801c0c2:	6878      	ldr	r0, [r7, #4]
 801c0c4:	f000 f814 	bl	801c0f0 <icmp_send_response>
}
 801c0c8:	bf00      	nop
 801c0ca:	3708      	adds	r7, #8
 801c0cc:	46bd      	mov	sp, r7
 801c0ce:	bd80      	pop	{r7, pc}

0801c0d0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801c0d0:	b580      	push	{r7, lr}
 801c0d2:	b082      	sub	sp, #8
 801c0d4:	af00      	add	r7, sp, #0
 801c0d6:	6078      	str	r0, [r7, #4]
 801c0d8:	460b      	mov	r3, r1
 801c0da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801c0dc:	78fb      	ldrb	r3, [r7, #3]
 801c0de:	461a      	mov	r2, r3
 801c0e0:	210b      	movs	r1, #11
 801c0e2:	6878      	ldr	r0, [r7, #4]
 801c0e4:	f000 f804 	bl	801c0f0 <icmp_send_response>
}
 801c0e8:	bf00      	nop
 801c0ea:	3708      	adds	r7, #8
 801c0ec:	46bd      	mov	sp, r7
 801c0ee:	bd80      	pop	{r7, pc}

0801c0f0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801c0f0:	b580      	push	{r7, lr}
 801c0f2:	b08c      	sub	sp, #48	; 0x30
 801c0f4:	af04      	add	r7, sp, #16
 801c0f6:	6078      	str	r0, [r7, #4]
 801c0f8:	460b      	mov	r3, r1
 801c0fa:	70fb      	strb	r3, [r7, #3]
 801c0fc:	4613      	mov	r3, r2
 801c0fe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801c100:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c104:	2124      	movs	r1, #36	; 0x24
 801c106:	2022      	movs	r0, #34	; 0x22
 801c108:	f7f7 fade 	bl	80136c8 <pbuf_alloc>
 801c10c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801c10e:	69fb      	ldr	r3, [r7, #28]
 801c110:	2b00      	cmp	r3, #0
 801c112:	d04c      	beq.n	801c1ae <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801c114:	69fb      	ldr	r3, [r7, #28]
 801c116:	895b      	ldrh	r3, [r3, #10]
 801c118:	2b23      	cmp	r3, #35	; 0x23
 801c11a:	d806      	bhi.n	801c12a <icmp_send_response+0x3a>
 801c11c:	4b26      	ldr	r3, [pc, #152]	; (801c1b8 <icmp_send_response+0xc8>)
 801c11e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801c122:	4926      	ldr	r1, [pc, #152]	; (801c1bc <icmp_send_response+0xcc>)
 801c124:	4826      	ldr	r0, [pc, #152]	; (801c1c0 <icmp_send_response+0xd0>)
 801c126:	f002 fe1b 	bl	801ed60 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801c12a:	687b      	ldr	r3, [r7, #4]
 801c12c:	685b      	ldr	r3, [r3, #4]
 801c12e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801c130:	69fb      	ldr	r3, [r7, #28]
 801c132:	685b      	ldr	r3, [r3, #4]
 801c134:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801c136:	697b      	ldr	r3, [r7, #20]
 801c138:	78fa      	ldrb	r2, [r7, #3]
 801c13a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801c13c:	697b      	ldr	r3, [r7, #20]
 801c13e:	78ba      	ldrb	r2, [r7, #2]
 801c140:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801c142:	697b      	ldr	r3, [r7, #20]
 801c144:	2200      	movs	r2, #0
 801c146:	711a      	strb	r2, [r3, #4]
 801c148:	2200      	movs	r2, #0
 801c14a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801c14c:	697b      	ldr	r3, [r7, #20]
 801c14e:	2200      	movs	r2, #0
 801c150:	719a      	strb	r2, [r3, #6]
 801c152:	2200      	movs	r2, #0
 801c154:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801c156:	69fb      	ldr	r3, [r7, #28]
 801c158:	685b      	ldr	r3, [r3, #4]
 801c15a:	f103 0008 	add.w	r0, r3, #8
 801c15e:	687b      	ldr	r3, [r7, #4]
 801c160:	685b      	ldr	r3, [r3, #4]
 801c162:	221c      	movs	r2, #28
 801c164:	4619      	mov	r1, r3
 801c166:	f002 fb4d 	bl	801e804 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801c16a:	69bb      	ldr	r3, [r7, #24]
 801c16c:	68db      	ldr	r3, [r3, #12]
 801c16e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801c170:	f107 030c 	add.w	r3, r7, #12
 801c174:	4618      	mov	r0, r3
 801c176:	f000 f825 	bl	801c1c4 <ip4_route>
 801c17a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801c17c:	693b      	ldr	r3, [r7, #16]
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d011      	beq.n	801c1a6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801c182:	697b      	ldr	r3, [r7, #20]
 801c184:	2200      	movs	r2, #0
 801c186:	709a      	strb	r2, [r3, #2]
 801c188:	2200      	movs	r2, #0
 801c18a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801c18c:	f107 020c 	add.w	r2, r7, #12
 801c190:	693b      	ldr	r3, [r7, #16]
 801c192:	9302      	str	r3, [sp, #8]
 801c194:	2301      	movs	r3, #1
 801c196:	9301      	str	r3, [sp, #4]
 801c198:	2300      	movs	r3, #0
 801c19a:	9300      	str	r3, [sp, #0]
 801c19c:	23ff      	movs	r3, #255	; 0xff
 801c19e:	2100      	movs	r1, #0
 801c1a0:	69f8      	ldr	r0, [r7, #28]
 801c1a2:	f000 f9cd 	bl	801c540 <ip4_output_if>
  }
  pbuf_free(q);
 801c1a6:	69f8      	ldr	r0, [r7, #28]
 801c1a8:	f7f7 fd72 	bl	8013c90 <pbuf_free>
 801c1ac:	e000      	b.n	801c1b0 <icmp_send_response+0xc0>
    return;
 801c1ae:	bf00      	nop
}
 801c1b0:	3720      	adds	r7, #32
 801c1b2:	46bd      	mov	sp, r7
 801c1b4:	bd80      	pop	{r7, pc}
 801c1b6:	bf00      	nop
 801c1b8:	08025790 	.word	0x08025790
 801c1bc:	0802585c 	.word	0x0802585c
 801c1c0:	08025800 	.word	0x08025800

0801c1c4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801c1c4:	b480      	push	{r7}
 801c1c6:	b085      	sub	sp, #20
 801c1c8:	af00      	add	r7, sp, #0
 801c1ca:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801c1cc:	4b33      	ldr	r3, [pc, #204]	; (801c29c <ip4_route+0xd8>)
 801c1ce:	681b      	ldr	r3, [r3, #0]
 801c1d0:	60fb      	str	r3, [r7, #12]
 801c1d2:	e036      	b.n	801c242 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c1d4:	68fb      	ldr	r3, [r7, #12]
 801c1d6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801c1da:	f003 0301 	and.w	r3, r3, #1
 801c1de:	b2db      	uxtb	r3, r3
 801c1e0:	2b00      	cmp	r3, #0
 801c1e2:	d02b      	beq.n	801c23c <ip4_route+0x78>
 801c1e4:	68fb      	ldr	r3, [r7, #12]
 801c1e6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801c1ea:	089b      	lsrs	r3, r3, #2
 801c1ec:	f003 0301 	and.w	r3, r3, #1
 801c1f0:	b2db      	uxtb	r3, r3
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	d022      	beq.n	801c23c <ip4_route+0x78>
 801c1f6:	68fb      	ldr	r3, [r7, #12]
 801c1f8:	3304      	adds	r3, #4
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	d01d      	beq.n	801c23c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	681a      	ldr	r2, [r3, #0]
 801c204:	68fb      	ldr	r3, [r7, #12]
 801c206:	3304      	adds	r3, #4
 801c208:	681b      	ldr	r3, [r3, #0]
 801c20a:	405a      	eors	r2, r3
 801c20c:	68fb      	ldr	r3, [r7, #12]
 801c20e:	3308      	adds	r3, #8
 801c210:	681b      	ldr	r3, [r3, #0]
 801c212:	4013      	ands	r3, r2
 801c214:	2b00      	cmp	r3, #0
 801c216:	d101      	bne.n	801c21c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801c218:	68fb      	ldr	r3, [r7, #12]
 801c21a:	e038      	b.n	801c28e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801c21c:	68fb      	ldr	r3, [r7, #12]
 801c21e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801c222:	f003 0302 	and.w	r3, r3, #2
 801c226:	2b00      	cmp	r3, #0
 801c228:	d108      	bne.n	801c23c <ip4_route+0x78>
 801c22a:	687b      	ldr	r3, [r7, #4]
 801c22c:	681a      	ldr	r2, [r3, #0]
 801c22e:	68fb      	ldr	r3, [r7, #12]
 801c230:	330c      	adds	r3, #12
 801c232:	681b      	ldr	r3, [r3, #0]
 801c234:	429a      	cmp	r2, r3
 801c236:	d101      	bne.n	801c23c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801c238:	68fb      	ldr	r3, [r7, #12]
 801c23a:	e028      	b.n	801c28e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801c23c:	68fb      	ldr	r3, [r7, #12]
 801c23e:	681b      	ldr	r3, [r3, #0]
 801c240:	60fb      	str	r3, [r7, #12]
 801c242:	68fb      	ldr	r3, [r7, #12]
 801c244:	2b00      	cmp	r3, #0
 801c246:	d1c5      	bne.n	801c1d4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c248:	4b15      	ldr	r3, [pc, #84]	; (801c2a0 <ip4_route+0xdc>)
 801c24a:	681b      	ldr	r3, [r3, #0]
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	d01a      	beq.n	801c286 <ip4_route+0xc2>
 801c250:	4b13      	ldr	r3, [pc, #76]	; (801c2a0 <ip4_route+0xdc>)
 801c252:	681b      	ldr	r3, [r3, #0]
 801c254:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801c258:	f003 0301 	and.w	r3, r3, #1
 801c25c:	2b00      	cmp	r3, #0
 801c25e:	d012      	beq.n	801c286 <ip4_route+0xc2>
 801c260:	4b0f      	ldr	r3, [pc, #60]	; (801c2a0 <ip4_route+0xdc>)
 801c262:	681b      	ldr	r3, [r3, #0]
 801c264:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801c268:	f003 0304 	and.w	r3, r3, #4
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d00a      	beq.n	801c286 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c270:	4b0b      	ldr	r3, [pc, #44]	; (801c2a0 <ip4_route+0xdc>)
 801c272:	681b      	ldr	r3, [r3, #0]
 801c274:	3304      	adds	r3, #4
 801c276:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c278:	2b00      	cmp	r3, #0
 801c27a:	d004      	beq.n	801c286 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	681b      	ldr	r3, [r3, #0]
 801c280:	b2db      	uxtb	r3, r3
 801c282:	2b7f      	cmp	r3, #127	; 0x7f
 801c284:	d101      	bne.n	801c28a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801c286:	2300      	movs	r3, #0
 801c288:	e001      	b.n	801c28e <ip4_route+0xca>
  }

  return netif_default;
 801c28a:	4b05      	ldr	r3, [pc, #20]	; (801c2a0 <ip4_route+0xdc>)
 801c28c:	681b      	ldr	r3, [r3, #0]
}
 801c28e:	4618      	mov	r0, r3
 801c290:	3714      	adds	r7, #20
 801c292:	46bd      	mov	sp, r7
 801c294:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c298:	4770      	bx	lr
 801c29a:	bf00      	nop
 801c29c:	2000b78c 	.word	0x2000b78c
 801c2a0:	2000b790 	.word	0x2000b790

0801c2a4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801c2a4:	b580      	push	{r7, lr}
 801c2a6:	b082      	sub	sp, #8
 801c2a8:	af00      	add	r7, sp, #0
 801c2aa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801c2b2:	f003 0301 	and.w	r3, r3, #1
 801c2b6:	b2db      	uxtb	r3, r3
 801c2b8:	2b00      	cmp	r3, #0
 801c2ba:	d016      	beq.n	801c2ea <ip4_input_accept+0x46>
 801c2bc:	687b      	ldr	r3, [r7, #4]
 801c2be:	3304      	adds	r3, #4
 801c2c0:	681b      	ldr	r3, [r3, #0]
 801c2c2:	2b00      	cmp	r3, #0
 801c2c4:	d011      	beq.n	801c2ea <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801c2c6:	4b0b      	ldr	r3, [pc, #44]	; (801c2f4 <ip4_input_accept+0x50>)
 801c2c8:	695a      	ldr	r2, [r3, #20]
 801c2ca:	687b      	ldr	r3, [r7, #4]
 801c2cc:	3304      	adds	r3, #4
 801c2ce:	681b      	ldr	r3, [r3, #0]
 801c2d0:	429a      	cmp	r2, r3
 801c2d2:	d008      	beq.n	801c2e6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801c2d4:	4b07      	ldr	r3, [pc, #28]	; (801c2f4 <ip4_input_accept+0x50>)
 801c2d6:	695b      	ldr	r3, [r3, #20]
 801c2d8:	6879      	ldr	r1, [r7, #4]
 801c2da:	4618      	mov	r0, r3
 801c2dc:	f000 fa08 	bl	801c6f0 <ip4_addr_isbroadcast_u32>
 801c2e0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d001      	beq.n	801c2ea <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801c2e6:	2301      	movs	r3, #1
 801c2e8:	e000      	b.n	801c2ec <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801c2ea:	2300      	movs	r3, #0
}
 801c2ec:	4618      	mov	r0, r3
 801c2ee:	3708      	adds	r7, #8
 801c2f0:	46bd      	mov	sp, r7
 801c2f2:	bd80      	pop	{r7, pc}
 801c2f4:	20008088 	.word	0x20008088

0801c2f8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801c2f8:	b580      	push	{r7, lr}
 801c2fa:	b086      	sub	sp, #24
 801c2fc:	af00      	add	r7, sp, #0
 801c2fe:	6078      	str	r0, [r7, #4]
 801c300:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	685b      	ldr	r3, [r3, #4]
 801c306:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801c308:	697b      	ldr	r3, [r7, #20]
 801c30a:	781b      	ldrb	r3, [r3, #0]
 801c30c:	091b      	lsrs	r3, r3, #4
 801c30e:	b2db      	uxtb	r3, r3
 801c310:	2b04      	cmp	r3, #4
 801c312:	d004      	beq.n	801c31e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801c314:	6878      	ldr	r0, [r7, #4]
 801c316:	f7f7 fcbb 	bl	8013c90 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801c31a:	2300      	movs	r3, #0
 801c31c:	e107      	b.n	801c52e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801c31e:	697b      	ldr	r3, [r7, #20]
 801c320:	781b      	ldrb	r3, [r3, #0]
 801c322:	f003 030f 	and.w	r3, r3, #15
 801c326:	b2db      	uxtb	r3, r3
 801c328:	009b      	lsls	r3, r3, #2
 801c32a:	b2db      	uxtb	r3, r3
 801c32c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801c32e:	697b      	ldr	r3, [r7, #20]
 801c330:	885b      	ldrh	r3, [r3, #2]
 801c332:	b29b      	uxth	r3, r3
 801c334:	4618      	mov	r0, r3
 801c336:	f7f6 f8ef 	bl	8012518 <lwip_htons>
 801c33a:	4603      	mov	r3, r0
 801c33c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801c33e:	687b      	ldr	r3, [r7, #4]
 801c340:	891b      	ldrh	r3, [r3, #8]
 801c342:	89ba      	ldrh	r2, [r7, #12]
 801c344:	429a      	cmp	r2, r3
 801c346:	d204      	bcs.n	801c352 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801c348:	89bb      	ldrh	r3, [r7, #12]
 801c34a:	4619      	mov	r1, r3
 801c34c:	6878      	ldr	r0, [r7, #4]
 801c34e:	f7f7 fb19 	bl	8013984 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	895b      	ldrh	r3, [r3, #10]
 801c356:	89fa      	ldrh	r2, [r7, #14]
 801c358:	429a      	cmp	r2, r3
 801c35a:	d807      	bhi.n	801c36c <ip4_input+0x74>
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	891b      	ldrh	r3, [r3, #8]
 801c360:	89ba      	ldrh	r2, [r7, #12]
 801c362:	429a      	cmp	r2, r3
 801c364:	d802      	bhi.n	801c36c <ip4_input+0x74>
 801c366:	89fb      	ldrh	r3, [r7, #14]
 801c368:	2b13      	cmp	r3, #19
 801c36a:	d804      	bhi.n	801c376 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801c36c:	6878      	ldr	r0, [r7, #4]
 801c36e:	f7f7 fc8f 	bl	8013c90 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801c372:	2300      	movs	r3, #0
 801c374:	e0db      	b.n	801c52e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801c376:	697b      	ldr	r3, [r7, #20]
 801c378:	691b      	ldr	r3, [r3, #16]
 801c37a:	4a6f      	ldr	r2, [pc, #444]	; (801c538 <ip4_input+0x240>)
 801c37c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801c37e:	697b      	ldr	r3, [r7, #20]
 801c380:	68db      	ldr	r3, [r3, #12]
 801c382:	4a6d      	ldr	r2, [pc, #436]	; (801c538 <ip4_input+0x240>)
 801c384:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c386:	4b6c      	ldr	r3, [pc, #432]	; (801c538 <ip4_input+0x240>)
 801c388:	695b      	ldr	r3, [r3, #20]
 801c38a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c38e:	2be0      	cmp	r3, #224	; 0xe0
 801c390:	d112      	bne.n	801c3b8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801c392:	683b      	ldr	r3, [r7, #0]
 801c394:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801c398:	f003 0301 	and.w	r3, r3, #1
 801c39c:	b2db      	uxtb	r3, r3
 801c39e:	2b00      	cmp	r3, #0
 801c3a0:	d007      	beq.n	801c3b2 <ip4_input+0xba>
 801c3a2:	683b      	ldr	r3, [r7, #0]
 801c3a4:	3304      	adds	r3, #4
 801c3a6:	681b      	ldr	r3, [r3, #0]
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	d002      	beq.n	801c3b2 <ip4_input+0xba>
      netif = inp;
 801c3ac:	683b      	ldr	r3, [r7, #0]
 801c3ae:	613b      	str	r3, [r7, #16]
 801c3b0:	e02a      	b.n	801c408 <ip4_input+0x110>
    } else {
      netif = NULL;
 801c3b2:	2300      	movs	r3, #0
 801c3b4:	613b      	str	r3, [r7, #16]
 801c3b6:	e027      	b.n	801c408 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801c3b8:	6838      	ldr	r0, [r7, #0]
 801c3ba:	f7ff ff73 	bl	801c2a4 <ip4_input_accept>
 801c3be:	4603      	mov	r3, r0
 801c3c0:	2b00      	cmp	r3, #0
 801c3c2:	d002      	beq.n	801c3ca <ip4_input+0xd2>
      netif = inp;
 801c3c4:	683b      	ldr	r3, [r7, #0]
 801c3c6:	613b      	str	r3, [r7, #16]
 801c3c8:	e01e      	b.n	801c408 <ip4_input+0x110>
    } else {
      netif = NULL;
 801c3ca:	2300      	movs	r3, #0
 801c3cc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801c3ce:	4b5a      	ldr	r3, [pc, #360]	; (801c538 <ip4_input+0x240>)
 801c3d0:	695b      	ldr	r3, [r3, #20]
 801c3d2:	b2db      	uxtb	r3, r3
 801c3d4:	2b7f      	cmp	r3, #127	; 0x7f
 801c3d6:	d017      	beq.n	801c408 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801c3d8:	4b58      	ldr	r3, [pc, #352]	; (801c53c <ip4_input+0x244>)
 801c3da:	681b      	ldr	r3, [r3, #0]
 801c3dc:	613b      	str	r3, [r7, #16]
 801c3de:	e00e      	b.n	801c3fe <ip4_input+0x106>
          if (netif == inp) {
 801c3e0:	693a      	ldr	r2, [r7, #16]
 801c3e2:	683b      	ldr	r3, [r7, #0]
 801c3e4:	429a      	cmp	r2, r3
 801c3e6:	d006      	beq.n	801c3f6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801c3e8:	6938      	ldr	r0, [r7, #16]
 801c3ea:	f7ff ff5b 	bl	801c2a4 <ip4_input_accept>
 801c3ee:	4603      	mov	r3, r0
 801c3f0:	2b00      	cmp	r3, #0
 801c3f2:	d108      	bne.n	801c406 <ip4_input+0x10e>
 801c3f4:	e000      	b.n	801c3f8 <ip4_input+0x100>
            continue;
 801c3f6:	bf00      	nop
        NETIF_FOREACH(netif) {
 801c3f8:	693b      	ldr	r3, [r7, #16]
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	613b      	str	r3, [r7, #16]
 801c3fe:	693b      	ldr	r3, [r7, #16]
 801c400:	2b00      	cmp	r3, #0
 801c402:	d1ed      	bne.n	801c3e0 <ip4_input+0xe8>
 801c404:	e000      	b.n	801c408 <ip4_input+0x110>
            break;
 801c406:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c408:	4b4b      	ldr	r3, [pc, #300]	; (801c538 <ip4_input+0x240>)
 801c40a:	691b      	ldr	r3, [r3, #16]
 801c40c:	6839      	ldr	r1, [r7, #0]
 801c40e:	4618      	mov	r0, r3
 801c410:	f000 f96e 	bl	801c6f0 <ip4_addr_isbroadcast_u32>
 801c414:	4603      	mov	r3, r0
 801c416:	2b00      	cmp	r3, #0
 801c418:	d105      	bne.n	801c426 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801c41a:	4b47      	ldr	r3, [pc, #284]	; (801c538 <ip4_input+0x240>)
 801c41c:	691b      	ldr	r3, [r3, #16]
 801c41e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c422:	2be0      	cmp	r3, #224	; 0xe0
 801c424:	d104      	bne.n	801c430 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801c426:	6878      	ldr	r0, [r7, #4]
 801c428:	f7f7 fc32 	bl	8013c90 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801c42c:	2300      	movs	r3, #0
 801c42e:	e07e      	b.n	801c52e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801c430:	693b      	ldr	r3, [r7, #16]
 801c432:	2b00      	cmp	r3, #0
 801c434:	d104      	bne.n	801c440 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801c436:	6878      	ldr	r0, [r7, #4]
 801c438:	f7f7 fc2a 	bl	8013c90 <pbuf_free>
    return ERR_OK;
 801c43c:	2300      	movs	r3, #0
 801c43e:	e076      	b.n	801c52e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801c440:	697b      	ldr	r3, [r7, #20]
 801c442:	88db      	ldrh	r3, [r3, #6]
 801c444:	b29b      	uxth	r3, r3
 801c446:	461a      	mov	r2, r3
 801c448:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801c44c:	4013      	ands	r3, r2
 801c44e:	2b00      	cmp	r3, #0
 801c450:	d00b      	beq.n	801c46a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801c452:	6878      	ldr	r0, [r7, #4]
 801c454:	f000 fdbc 	bl	801cfd0 <ip4_reass>
 801c458:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	d101      	bne.n	801c464 <ip4_input+0x16c>
      return ERR_OK;
 801c460:	2300      	movs	r3, #0
 801c462:	e064      	b.n	801c52e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	685b      	ldr	r3, [r3, #4]
 801c468:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801c46a:	4a33      	ldr	r2, [pc, #204]	; (801c538 <ip4_input+0x240>)
 801c46c:	693b      	ldr	r3, [r7, #16]
 801c46e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801c470:	4a31      	ldr	r2, [pc, #196]	; (801c538 <ip4_input+0x240>)
 801c472:	683b      	ldr	r3, [r7, #0]
 801c474:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801c476:	4a30      	ldr	r2, [pc, #192]	; (801c538 <ip4_input+0x240>)
 801c478:	697b      	ldr	r3, [r7, #20]
 801c47a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801c47c:	697b      	ldr	r3, [r7, #20]
 801c47e:	781b      	ldrb	r3, [r3, #0]
 801c480:	f003 030f 	and.w	r3, r3, #15
 801c484:	b2db      	uxtb	r3, r3
 801c486:	009b      	lsls	r3, r3, #2
 801c488:	b2db      	uxtb	r3, r3
 801c48a:	b29a      	uxth	r2, r3
 801c48c:	4b2a      	ldr	r3, [pc, #168]	; (801c538 <ip4_input+0x240>)
 801c48e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801c490:	89fb      	ldrh	r3, [r7, #14]
 801c492:	4619      	mov	r1, r3
 801c494:	6878      	ldr	r0, [r7, #4]
 801c496:	f7f7 fb75 	bl	8013b84 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801c49a:	697b      	ldr	r3, [r7, #20]
 801c49c:	7a5b      	ldrb	r3, [r3, #9]
 801c49e:	2b11      	cmp	r3, #17
 801c4a0:	d006      	beq.n	801c4b0 <ip4_input+0x1b8>
 801c4a2:	2b11      	cmp	r3, #17
 801c4a4:	dc13      	bgt.n	801c4ce <ip4_input+0x1d6>
 801c4a6:	2b01      	cmp	r3, #1
 801c4a8:	d00c      	beq.n	801c4c4 <ip4_input+0x1cc>
 801c4aa:	2b06      	cmp	r3, #6
 801c4ac:	d005      	beq.n	801c4ba <ip4_input+0x1c2>
 801c4ae:	e00e      	b.n	801c4ce <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801c4b0:	6839      	ldr	r1, [r7, #0]
 801c4b2:	6878      	ldr	r0, [r7, #4]
 801c4b4:	f7fe f970 	bl	801a798 <udp_input>
        break;
 801c4b8:	e026      	b.n	801c508 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801c4ba:	6839      	ldr	r1, [r7, #0]
 801c4bc:	6878      	ldr	r0, [r7, #4]
 801c4be:	f7f9 fd2d 	bl	8015f1c <tcp_input>
        break;
 801c4c2:	e021      	b.n	801c508 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801c4c4:	6839      	ldr	r1, [r7, #0]
 801c4c6:	6878      	ldr	r0, [r7, #4]
 801c4c8:	f7ff fcee 	bl	801bea8 <icmp_input>
        break;
 801c4cc:	e01c      	b.n	801c508 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c4ce:	4b1a      	ldr	r3, [pc, #104]	; (801c538 <ip4_input+0x240>)
 801c4d0:	695b      	ldr	r3, [r3, #20]
 801c4d2:	6939      	ldr	r1, [r7, #16]
 801c4d4:	4618      	mov	r0, r3
 801c4d6:	f000 f90b 	bl	801c6f0 <ip4_addr_isbroadcast_u32>
 801c4da:	4603      	mov	r3, r0
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	d10f      	bne.n	801c500 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c4e0:	4b15      	ldr	r3, [pc, #84]	; (801c538 <ip4_input+0x240>)
 801c4e2:	695b      	ldr	r3, [r3, #20]
 801c4e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c4e8:	2be0      	cmp	r3, #224	; 0xe0
 801c4ea:	d009      	beq.n	801c500 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801c4ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801c4f0:	4619      	mov	r1, r3
 801c4f2:	6878      	ldr	r0, [r7, #4]
 801c4f4:	f7f7 fbb9 	bl	8013c6a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801c4f8:	2102      	movs	r1, #2
 801c4fa:	6878      	ldr	r0, [r7, #4]
 801c4fc:	f7ff fdd8 	bl	801c0b0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801c500:	6878      	ldr	r0, [r7, #4]
 801c502:	f7f7 fbc5 	bl	8013c90 <pbuf_free>
        break;
 801c506:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801c508:	4b0b      	ldr	r3, [pc, #44]	; (801c538 <ip4_input+0x240>)
 801c50a:	2200      	movs	r2, #0
 801c50c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801c50e:	4b0a      	ldr	r3, [pc, #40]	; (801c538 <ip4_input+0x240>)
 801c510:	2200      	movs	r2, #0
 801c512:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801c514:	4b08      	ldr	r3, [pc, #32]	; (801c538 <ip4_input+0x240>)
 801c516:	2200      	movs	r2, #0
 801c518:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801c51a:	4b07      	ldr	r3, [pc, #28]	; (801c538 <ip4_input+0x240>)
 801c51c:	2200      	movs	r2, #0
 801c51e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801c520:	4b05      	ldr	r3, [pc, #20]	; (801c538 <ip4_input+0x240>)
 801c522:	2200      	movs	r2, #0
 801c524:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801c526:	4b04      	ldr	r3, [pc, #16]	; (801c538 <ip4_input+0x240>)
 801c528:	2200      	movs	r2, #0
 801c52a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801c52c:	2300      	movs	r3, #0
}
 801c52e:	4618      	mov	r0, r3
 801c530:	3718      	adds	r7, #24
 801c532:	46bd      	mov	sp, r7
 801c534:	bd80      	pop	{r7, pc}
 801c536:	bf00      	nop
 801c538:	20008088 	.word	0x20008088
 801c53c:	2000b78c 	.word	0x2000b78c

0801c540 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801c540:	b580      	push	{r7, lr}
 801c542:	b08a      	sub	sp, #40	; 0x28
 801c544:	af04      	add	r7, sp, #16
 801c546:	60f8      	str	r0, [r7, #12]
 801c548:	60b9      	str	r1, [r7, #8]
 801c54a:	607a      	str	r2, [r7, #4]
 801c54c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801c54e:	68bb      	ldr	r3, [r7, #8]
 801c550:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	2b00      	cmp	r3, #0
 801c556:	d009      	beq.n	801c56c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801c558:	68bb      	ldr	r3, [r7, #8]
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	d003      	beq.n	801c566 <ip4_output_if+0x26>
 801c55e:	68bb      	ldr	r3, [r7, #8]
 801c560:	681b      	ldr	r3, [r3, #0]
 801c562:	2b00      	cmp	r3, #0
 801c564:	d102      	bne.n	801c56c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801c566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c568:	3304      	adds	r3, #4
 801c56a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801c56c:	78fa      	ldrb	r2, [r7, #3]
 801c56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c570:	9302      	str	r3, [sp, #8]
 801c572:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c576:	9301      	str	r3, [sp, #4]
 801c578:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c57c:	9300      	str	r3, [sp, #0]
 801c57e:	4613      	mov	r3, r2
 801c580:	687a      	ldr	r2, [r7, #4]
 801c582:	6979      	ldr	r1, [r7, #20]
 801c584:	68f8      	ldr	r0, [r7, #12]
 801c586:	f000 f805 	bl	801c594 <ip4_output_if_src>
 801c58a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801c58c:	4618      	mov	r0, r3
 801c58e:	3718      	adds	r7, #24
 801c590:	46bd      	mov	sp, r7
 801c592:	bd80      	pop	{r7, pc}

0801c594 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801c594:	b580      	push	{r7, lr}
 801c596:	b088      	sub	sp, #32
 801c598:	af00      	add	r7, sp, #0
 801c59a:	60f8      	str	r0, [r7, #12]
 801c59c:	60b9      	str	r1, [r7, #8]
 801c59e:	607a      	str	r2, [r7, #4]
 801c5a0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801c5a2:	68fb      	ldr	r3, [r7, #12]
 801c5a4:	7b9b      	ldrb	r3, [r3, #14]
 801c5a6:	2b01      	cmp	r3, #1
 801c5a8:	d006      	beq.n	801c5b8 <ip4_output_if_src+0x24>
 801c5aa:	4b4b      	ldr	r3, [pc, #300]	; (801c6d8 <ip4_output_if_src+0x144>)
 801c5ac:	f44f 7255 	mov.w	r2, #852	; 0x354
 801c5b0:	494a      	ldr	r1, [pc, #296]	; (801c6dc <ip4_output_if_src+0x148>)
 801c5b2:	484b      	ldr	r0, [pc, #300]	; (801c6e0 <ip4_output_if_src+0x14c>)
 801c5b4:	f002 fbd4 	bl	801ed60 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d060      	beq.n	801c680 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801c5be:	2314      	movs	r3, #20
 801c5c0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801c5c2:	2114      	movs	r1, #20
 801c5c4:	68f8      	ldr	r0, [r7, #12]
 801c5c6:	f7f7 facd 	bl	8013b64 <pbuf_add_header>
 801c5ca:	4603      	mov	r3, r0
 801c5cc:	2b00      	cmp	r3, #0
 801c5ce:	d002      	beq.n	801c5d6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c5d0:	f06f 0301 	mvn.w	r3, #1
 801c5d4:	e07c      	b.n	801c6d0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801c5d6:	68fb      	ldr	r3, [r7, #12]
 801c5d8:	685b      	ldr	r3, [r3, #4]
 801c5da:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801c5dc:	68fb      	ldr	r3, [r7, #12]
 801c5de:	895b      	ldrh	r3, [r3, #10]
 801c5e0:	2b13      	cmp	r3, #19
 801c5e2:	d806      	bhi.n	801c5f2 <ip4_output_if_src+0x5e>
 801c5e4:	4b3c      	ldr	r3, [pc, #240]	; (801c6d8 <ip4_output_if_src+0x144>)
 801c5e6:	f44f 7262 	mov.w	r2, #904	; 0x388
 801c5ea:	493e      	ldr	r1, [pc, #248]	; (801c6e4 <ip4_output_if_src+0x150>)
 801c5ec:	483c      	ldr	r0, [pc, #240]	; (801c6e0 <ip4_output_if_src+0x14c>)
 801c5ee:	f002 fbb7 	bl	801ed60 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801c5f2:	69fb      	ldr	r3, [r7, #28]
 801c5f4:	78fa      	ldrb	r2, [r7, #3]
 801c5f6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801c5f8:	69fb      	ldr	r3, [r7, #28]
 801c5fa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801c5fe:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801c600:	687b      	ldr	r3, [r7, #4]
 801c602:	681a      	ldr	r2, [r3, #0]
 801c604:	69fb      	ldr	r3, [r7, #28]
 801c606:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801c608:	8b7b      	ldrh	r3, [r7, #26]
 801c60a:	089b      	lsrs	r3, r3, #2
 801c60c:	b29b      	uxth	r3, r3
 801c60e:	b2db      	uxtb	r3, r3
 801c610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c614:	b2da      	uxtb	r2, r3
 801c616:	69fb      	ldr	r3, [r7, #28]
 801c618:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801c61a:	69fb      	ldr	r3, [r7, #28]
 801c61c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801c620:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	891b      	ldrh	r3, [r3, #8]
 801c626:	4618      	mov	r0, r3
 801c628:	f7f5 ff76 	bl	8012518 <lwip_htons>
 801c62c:	4603      	mov	r3, r0
 801c62e:	461a      	mov	r2, r3
 801c630:	69fb      	ldr	r3, [r7, #28]
 801c632:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801c634:	69fb      	ldr	r3, [r7, #28]
 801c636:	2200      	movs	r2, #0
 801c638:	719a      	strb	r2, [r3, #6]
 801c63a:	2200      	movs	r2, #0
 801c63c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801c63e:	4b2a      	ldr	r3, [pc, #168]	; (801c6e8 <ip4_output_if_src+0x154>)
 801c640:	881b      	ldrh	r3, [r3, #0]
 801c642:	4618      	mov	r0, r3
 801c644:	f7f5 ff68 	bl	8012518 <lwip_htons>
 801c648:	4603      	mov	r3, r0
 801c64a:	461a      	mov	r2, r3
 801c64c:	69fb      	ldr	r3, [r7, #28]
 801c64e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801c650:	4b25      	ldr	r3, [pc, #148]	; (801c6e8 <ip4_output_if_src+0x154>)
 801c652:	881b      	ldrh	r3, [r3, #0]
 801c654:	3301      	adds	r3, #1
 801c656:	b29a      	uxth	r2, r3
 801c658:	4b23      	ldr	r3, [pc, #140]	; (801c6e8 <ip4_output_if_src+0x154>)
 801c65a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801c65c:	68bb      	ldr	r3, [r7, #8]
 801c65e:	2b00      	cmp	r3, #0
 801c660:	d104      	bne.n	801c66c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801c662:	4b22      	ldr	r3, [pc, #136]	; (801c6ec <ip4_output_if_src+0x158>)
 801c664:	681a      	ldr	r2, [r3, #0]
 801c666:	69fb      	ldr	r3, [r7, #28]
 801c668:	60da      	str	r2, [r3, #12]
 801c66a:	e003      	b.n	801c674 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801c66c:	68bb      	ldr	r3, [r7, #8]
 801c66e:	681a      	ldr	r2, [r3, #0]
 801c670:	69fb      	ldr	r3, [r7, #28]
 801c672:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801c674:	69fb      	ldr	r3, [r7, #28]
 801c676:	2200      	movs	r2, #0
 801c678:	729a      	strb	r2, [r3, #10]
 801c67a:	2200      	movs	r2, #0
 801c67c:	72da      	strb	r2, [r3, #11]
 801c67e:	e00f      	b.n	801c6a0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801c680:	68fb      	ldr	r3, [r7, #12]
 801c682:	895b      	ldrh	r3, [r3, #10]
 801c684:	2b13      	cmp	r3, #19
 801c686:	d802      	bhi.n	801c68e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c688:	f06f 0301 	mvn.w	r3, #1
 801c68c:	e020      	b.n	801c6d0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801c68e:	68fb      	ldr	r3, [r7, #12]
 801c690:	685b      	ldr	r3, [r3, #4]
 801c692:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801c694:	69fb      	ldr	r3, [r7, #28]
 801c696:	691b      	ldr	r3, [r3, #16]
 801c698:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801c69a:	f107 0314 	add.w	r3, r7, #20
 801c69e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801c6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c6a2:	8c1b      	ldrh	r3, [r3, #32]
 801c6a4:	2b00      	cmp	r3, #0
 801c6a6:	d00c      	beq.n	801c6c2 <ip4_output_if_src+0x12e>
 801c6a8:	68fb      	ldr	r3, [r7, #12]
 801c6aa:	891a      	ldrh	r2, [r3, #8]
 801c6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c6ae:	8c1b      	ldrh	r3, [r3, #32]
 801c6b0:	429a      	cmp	r2, r3
 801c6b2:	d906      	bls.n	801c6c2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801c6b4:	687a      	ldr	r2, [r7, #4]
 801c6b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c6b8:	68f8      	ldr	r0, [r7, #12]
 801c6ba:	f000 fe77 	bl	801d3ac <ip4_frag>
 801c6be:	4603      	mov	r3, r0
 801c6c0:	e006      	b.n	801c6d0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801c6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c6c4:	695b      	ldr	r3, [r3, #20]
 801c6c6:	687a      	ldr	r2, [r7, #4]
 801c6c8:	68f9      	ldr	r1, [r7, #12]
 801c6ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c6cc:	4798      	blx	r3
 801c6ce:	4603      	mov	r3, r0
}
 801c6d0:	4618      	mov	r0, r3
 801c6d2:	3720      	adds	r7, #32
 801c6d4:	46bd      	mov	sp, r7
 801c6d6:	bd80      	pop	{r7, pc}
 801c6d8:	08025888 	.word	0x08025888
 801c6dc:	080258bc 	.word	0x080258bc
 801c6e0:	080258c8 	.word	0x080258c8
 801c6e4:	080258f0 	.word	0x080258f0
 801c6e8:	2000488e 	.word	0x2000488e
 801c6ec:	08026ca4 	.word	0x08026ca4

0801c6f0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801c6f0:	b480      	push	{r7}
 801c6f2:	b085      	sub	sp, #20
 801c6f4:	af00      	add	r7, sp, #0
 801c6f6:	6078      	str	r0, [r7, #4]
 801c6f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801c6fa:	687b      	ldr	r3, [r7, #4]
 801c6fc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c704:	d002      	beq.n	801c70c <ip4_addr_isbroadcast_u32+0x1c>
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	2b00      	cmp	r3, #0
 801c70a:	d101      	bne.n	801c710 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801c70c:	2301      	movs	r3, #1
 801c70e:	e02a      	b.n	801c766 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801c710:	683b      	ldr	r3, [r7, #0]
 801c712:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801c716:	f003 0302 	and.w	r3, r3, #2
 801c71a:	2b00      	cmp	r3, #0
 801c71c:	d101      	bne.n	801c722 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801c71e:	2300      	movs	r3, #0
 801c720:	e021      	b.n	801c766 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801c722:	683b      	ldr	r3, [r7, #0]
 801c724:	3304      	adds	r3, #4
 801c726:	681b      	ldr	r3, [r3, #0]
 801c728:	687a      	ldr	r2, [r7, #4]
 801c72a:	429a      	cmp	r2, r3
 801c72c:	d101      	bne.n	801c732 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801c72e:	2300      	movs	r3, #0
 801c730:	e019      	b.n	801c766 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801c732:	68fa      	ldr	r2, [r7, #12]
 801c734:	683b      	ldr	r3, [r7, #0]
 801c736:	3304      	adds	r3, #4
 801c738:	681b      	ldr	r3, [r3, #0]
 801c73a:	405a      	eors	r2, r3
 801c73c:	683b      	ldr	r3, [r7, #0]
 801c73e:	3308      	adds	r3, #8
 801c740:	681b      	ldr	r3, [r3, #0]
 801c742:	4013      	ands	r3, r2
 801c744:	2b00      	cmp	r3, #0
 801c746:	d10d      	bne.n	801c764 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c748:	683b      	ldr	r3, [r7, #0]
 801c74a:	3308      	adds	r3, #8
 801c74c:	681b      	ldr	r3, [r3, #0]
 801c74e:	43da      	mvns	r2, r3
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801c754:	683b      	ldr	r3, [r7, #0]
 801c756:	3308      	adds	r3, #8
 801c758:	681b      	ldr	r3, [r3, #0]
 801c75a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c75c:	429a      	cmp	r2, r3
 801c75e:	d101      	bne.n	801c764 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801c760:	2301      	movs	r3, #1
 801c762:	e000      	b.n	801c766 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801c764:	2300      	movs	r3, #0
  }
}
 801c766:	4618      	mov	r0, r3
 801c768:	3714      	adds	r7, #20
 801c76a:	46bd      	mov	sp, r7
 801c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c770:	4770      	bx	lr
	...

0801c774 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801c774:	b580      	push	{r7, lr}
 801c776:	b08a      	sub	sp, #40	; 0x28
 801c778:	af00      	add	r7, sp, #0
 801c77a:	6078      	str	r0, [r7, #4]
 801c77c:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801c77e:	f107 030c 	add.w	r3, r7, #12
 801c782:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801c784:	687b      	ldr	r3, [r7, #4]
 801c786:	781b      	ldrb	r3, [r3, #0]
 801c788:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801c78c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c790:	3301      	adds	r3, #1
 801c792:	4a89      	ldr	r2, [pc, #548]	; (801c9b8 <ip4addr_aton+0x244>)
 801c794:	4413      	add	r3, r2
 801c796:	781b      	ldrb	r3, [r3, #0]
 801c798:	f003 0304 	and.w	r3, r3, #4
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	d101      	bne.n	801c7a4 <ip4addr_aton+0x30>
      return 0;
 801c7a0:	2300      	movs	r3, #0
 801c7a2:	e105      	b.n	801c9b0 <ip4addr_aton+0x23c>
    }
    val = 0;
 801c7a4:	2300      	movs	r3, #0
 801c7a6:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801c7a8:	230a      	movs	r3, #10
 801c7aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801c7ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c7b2:	2b30      	cmp	r3, #48	; 0x30
 801c7b4:	d11c      	bne.n	801c7f0 <ip4addr_aton+0x7c>
      c = *++cp;
 801c7b6:	687b      	ldr	r3, [r7, #4]
 801c7b8:	3301      	adds	r3, #1
 801c7ba:	607b      	str	r3, [r7, #4]
 801c7bc:	687b      	ldr	r3, [r7, #4]
 801c7be:	781b      	ldrb	r3, [r3, #0]
 801c7c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801c7c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c7c8:	2b78      	cmp	r3, #120	; 0x78
 801c7ca:	d003      	beq.n	801c7d4 <ip4addr_aton+0x60>
 801c7cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c7d0:	2b58      	cmp	r3, #88	; 0x58
 801c7d2:	d10a      	bne.n	801c7ea <ip4addr_aton+0x76>
        base = 16;
 801c7d4:	2310      	movs	r3, #16
 801c7d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801c7da:	687b      	ldr	r3, [r7, #4]
 801c7dc:	3301      	adds	r3, #1
 801c7de:	607b      	str	r3, [r7, #4]
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	781b      	ldrb	r3, [r3, #0]
 801c7e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801c7e8:	e002      	b.n	801c7f0 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801c7ea:	2308      	movs	r3, #8
 801c7ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801c7f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c7f4:	3301      	adds	r3, #1
 801c7f6:	4a70      	ldr	r2, [pc, #448]	; (801c9b8 <ip4addr_aton+0x244>)
 801c7f8:	4413      	add	r3, r2
 801c7fa:	781b      	ldrb	r3, [r3, #0]
 801c7fc:	f003 0304 	and.w	r3, r3, #4
 801c800:	2b00      	cmp	r3, #0
 801c802:	d011      	beq.n	801c828 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801c804:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c80a:	fb02 f203 	mul.w	r2, r2, r3
 801c80e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c812:	4413      	add	r3, r2
 801c814:	3b30      	subs	r3, #48	; 0x30
 801c816:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	3301      	adds	r3, #1
 801c81c:	607b      	str	r3, [r7, #4]
 801c81e:	687b      	ldr	r3, [r7, #4]
 801c820:	781b      	ldrb	r3, [r3, #0]
 801c822:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801c826:	e7e3      	b.n	801c7f0 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801c828:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c82c:	2b10      	cmp	r3, #16
 801c82e:	d127      	bne.n	801c880 <ip4addr_aton+0x10c>
 801c830:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c834:	3301      	adds	r3, #1
 801c836:	4a60      	ldr	r2, [pc, #384]	; (801c9b8 <ip4addr_aton+0x244>)
 801c838:	4413      	add	r3, r2
 801c83a:	781b      	ldrb	r3, [r3, #0]
 801c83c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801c840:	2b00      	cmp	r3, #0
 801c842:	d01d      	beq.n	801c880 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801c844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c846:	011b      	lsls	r3, r3, #4
 801c848:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801c84c:	f102 010a 	add.w	r1, r2, #10
 801c850:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801c854:	3201      	adds	r2, #1
 801c856:	4858      	ldr	r0, [pc, #352]	; (801c9b8 <ip4addr_aton+0x244>)
 801c858:	4402      	add	r2, r0
 801c85a:	7812      	ldrb	r2, [r2, #0]
 801c85c:	f002 0203 	and.w	r2, r2, #3
 801c860:	2a02      	cmp	r2, #2
 801c862:	d101      	bne.n	801c868 <ip4addr_aton+0xf4>
 801c864:	2261      	movs	r2, #97	; 0x61
 801c866:	e000      	b.n	801c86a <ip4addr_aton+0xf6>
 801c868:	2241      	movs	r2, #65	; 0x41
 801c86a:	1a8a      	subs	r2, r1, r2
 801c86c:	4313      	orrs	r3, r2
 801c86e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	3301      	adds	r3, #1
 801c874:	607b      	str	r3, [r7, #4]
 801c876:	687b      	ldr	r3, [r7, #4]
 801c878:	781b      	ldrb	r3, [r3, #0]
 801c87a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 801c87e:	e7b7      	b.n	801c7f0 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801c880:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c884:	2b2e      	cmp	r3, #46	; 0x2e
 801c886:	d114      	bne.n	801c8b2 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801c888:	f107 030c 	add.w	r3, r7, #12
 801c88c:	330c      	adds	r3, #12
 801c88e:	69fa      	ldr	r2, [r7, #28]
 801c890:	429a      	cmp	r2, r3
 801c892:	d301      	bcc.n	801c898 <ip4addr_aton+0x124>
        return 0;
 801c894:	2300      	movs	r3, #0
 801c896:	e08b      	b.n	801c9b0 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801c898:	69fb      	ldr	r3, [r7, #28]
 801c89a:	1d1a      	adds	r2, r3, #4
 801c89c:	61fa      	str	r2, [r7, #28]
 801c89e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c8a0:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801c8a2:	687b      	ldr	r3, [r7, #4]
 801c8a4:	3301      	adds	r3, #1
 801c8a6:	607b      	str	r3, [r7, #4]
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	781b      	ldrb	r3, [r3, #0]
 801c8ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 801c8b0:	e76c      	b.n	801c78c <ip4addr_aton+0x18>
    } else {
      break;
 801c8b2:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801c8b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c8b8:	2b00      	cmp	r3, #0
 801c8ba:	d00b      	beq.n	801c8d4 <ip4addr_aton+0x160>
 801c8bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c8c0:	3301      	adds	r3, #1
 801c8c2:	4a3d      	ldr	r2, [pc, #244]	; (801c9b8 <ip4addr_aton+0x244>)
 801c8c4:	4413      	add	r3, r2
 801c8c6:	781b      	ldrb	r3, [r3, #0]
 801c8c8:	f003 0308 	and.w	r3, r3, #8
 801c8cc:	2b00      	cmp	r3, #0
 801c8ce:	d101      	bne.n	801c8d4 <ip4addr_aton+0x160>
    return 0;
 801c8d0:	2300      	movs	r3, #0
 801c8d2:	e06d      	b.n	801c9b0 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801c8d4:	f107 030c 	add.w	r3, r7, #12
 801c8d8:	69fa      	ldr	r2, [r7, #28]
 801c8da:	1ad3      	subs	r3, r2, r3
 801c8dc:	109b      	asrs	r3, r3, #2
 801c8de:	3301      	adds	r3, #1
 801c8e0:	2b04      	cmp	r3, #4
 801c8e2:	d853      	bhi.n	801c98c <ip4addr_aton+0x218>
 801c8e4:	a201      	add	r2, pc, #4	; (adr r2, 801c8ec <ip4addr_aton+0x178>)
 801c8e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c8ea:	bf00      	nop
 801c8ec:	0801c901 	.word	0x0801c901
 801c8f0:	0801c99b 	.word	0x0801c99b
 801c8f4:	0801c905 	.word	0x0801c905
 801c8f8:	0801c927 	.word	0x0801c927
 801c8fc:	0801c955 	.word	0x0801c955

    case 0:
      return 0;       /* initial nondigit */
 801c900:	2300      	movs	r3, #0
 801c902:	e055      	b.n	801c9b0 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801c904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c906:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801c90a:	d301      	bcc.n	801c910 <ip4addr_aton+0x19c>
        return 0;
 801c90c:	2300      	movs	r3, #0
 801c90e:	e04f      	b.n	801c9b0 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801c910:	68fb      	ldr	r3, [r7, #12]
 801c912:	2bff      	cmp	r3, #255	; 0xff
 801c914:	d901      	bls.n	801c91a <ip4addr_aton+0x1a6>
        return 0;
 801c916:	2300      	movs	r3, #0
 801c918:	e04a      	b.n	801c9b0 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801c91a:	68fb      	ldr	r3, [r7, #12]
 801c91c:	061b      	lsls	r3, r3, #24
 801c91e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c920:	4313      	orrs	r3, r2
 801c922:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801c924:	e03a      	b.n	801c99c <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801c926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c92c:	d301      	bcc.n	801c932 <ip4addr_aton+0x1be>
        return 0;
 801c92e:	2300      	movs	r3, #0
 801c930:	e03e      	b.n	801c9b0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801c932:	68fb      	ldr	r3, [r7, #12]
 801c934:	2bff      	cmp	r3, #255	; 0xff
 801c936:	d802      	bhi.n	801c93e <ip4addr_aton+0x1ca>
 801c938:	693b      	ldr	r3, [r7, #16]
 801c93a:	2bff      	cmp	r3, #255	; 0xff
 801c93c:	d901      	bls.n	801c942 <ip4addr_aton+0x1ce>
        return 0;
 801c93e:	2300      	movs	r3, #0
 801c940:	e036      	b.n	801c9b0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	061a      	lsls	r2, r3, #24
 801c946:	693b      	ldr	r3, [r7, #16]
 801c948:	041b      	lsls	r3, r3, #16
 801c94a:	4313      	orrs	r3, r2
 801c94c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c94e:	4313      	orrs	r3, r2
 801c950:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801c952:	e023      	b.n	801c99c <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c956:	2bff      	cmp	r3, #255	; 0xff
 801c958:	d901      	bls.n	801c95e <ip4addr_aton+0x1ea>
        return 0;
 801c95a:	2300      	movs	r3, #0
 801c95c:	e028      	b.n	801c9b0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801c95e:	68fb      	ldr	r3, [r7, #12]
 801c960:	2bff      	cmp	r3, #255	; 0xff
 801c962:	d805      	bhi.n	801c970 <ip4addr_aton+0x1fc>
 801c964:	693b      	ldr	r3, [r7, #16]
 801c966:	2bff      	cmp	r3, #255	; 0xff
 801c968:	d802      	bhi.n	801c970 <ip4addr_aton+0x1fc>
 801c96a:	697b      	ldr	r3, [r7, #20]
 801c96c:	2bff      	cmp	r3, #255	; 0xff
 801c96e:	d901      	bls.n	801c974 <ip4addr_aton+0x200>
        return 0;
 801c970:	2300      	movs	r3, #0
 801c972:	e01d      	b.n	801c9b0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801c974:	68fb      	ldr	r3, [r7, #12]
 801c976:	061a      	lsls	r2, r3, #24
 801c978:	693b      	ldr	r3, [r7, #16]
 801c97a:	041b      	lsls	r3, r3, #16
 801c97c:	431a      	orrs	r2, r3
 801c97e:	697b      	ldr	r3, [r7, #20]
 801c980:	021b      	lsls	r3, r3, #8
 801c982:	4313      	orrs	r3, r2
 801c984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c986:	4313      	orrs	r3, r2
 801c988:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801c98a:	e007      	b.n	801c99c <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801c98c:	4b0b      	ldr	r3, [pc, #44]	; (801c9bc <ip4addr_aton+0x248>)
 801c98e:	22f9      	movs	r2, #249	; 0xf9
 801c990:	490b      	ldr	r1, [pc, #44]	; (801c9c0 <ip4addr_aton+0x24c>)
 801c992:	480c      	ldr	r0, [pc, #48]	; (801c9c4 <ip4addr_aton+0x250>)
 801c994:	f002 f9e4 	bl	801ed60 <iprintf>
      break;
 801c998:	e000      	b.n	801c99c <ip4addr_aton+0x228>
      break;
 801c99a:	bf00      	nop
  }
  if (addr) {
 801c99c:	683b      	ldr	r3, [r7, #0]
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d005      	beq.n	801c9ae <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801c9a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c9a4:	f7f5 fdcd 	bl	8012542 <lwip_htonl>
 801c9a8:	4602      	mov	r2, r0
 801c9aa:	683b      	ldr	r3, [r7, #0]
 801c9ac:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801c9ae:	2301      	movs	r3, #1
}
 801c9b0:	4618      	mov	r0, r3
 801c9b2:	3728      	adds	r7, #40	; 0x28
 801c9b4:	46bd      	mov	sp, r7
 801c9b6:	bd80      	pop	{r7, pc}
 801c9b8:	08026cc0 	.word	0x08026cc0
 801c9bc:	08025920 	.word	0x08025920
 801c9c0:	0802595c 	.word	0x0802595c
 801c9c4:	08025968 	.word	0x08025968

0801c9c8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801c9c8:	b580      	push	{r7, lr}
 801c9ca:	b084      	sub	sp, #16
 801c9cc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801c9ce:	2300      	movs	r3, #0
 801c9d0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801c9d2:	4b12      	ldr	r3, [pc, #72]	; (801ca1c <ip_reass_tmr+0x54>)
 801c9d4:	681b      	ldr	r3, [r3, #0]
 801c9d6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801c9d8:	e018      	b.n	801ca0c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801c9da:	68fb      	ldr	r3, [r7, #12]
 801c9dc:	7fdb      	ldrb	r3, [r3, #31]
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	d00b      	beq.n	801c9fa <ip_reass_tmr+0x32>
      r->timer--;
 801c9e2:	68fb      	ldr	r3, [r7, #12]
 801c9e4:	7fdb      	ldrb	r3, [r3, #31]
 801c9e6:	3b01      	subs	r3, #1
 801c9e8:	b2da      	uxtb	r2, r3
 801c9ea:	68fb      	ldr	r3, [r7, #12]
 801c9ec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801c9ee:	68fb      	ldr	r3, [r7, #12]
 801c9f0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801c9f2:	68fb      	ldr	r3, [r7, #12]
 801c9f4:	681b      	ldr	r3, [r3, #0]
 801c9f6:	60fb      	str	r3, [r7, #12]
 801c9f8:	e008      	b.n	801ca0c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801c9fa:	68fb      	ldr	r3, [r7, #12]
 801c9fc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801ca04:	68b9      	ldr	r1, [r7, #8]
 801ca06:	6878      	ldr	r0, [r7, #4]
 801ca08:	f000 f80a 	bl	801ca20 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801ca0c:	68fb      	ldr	r3, [r7, #12]
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	d1e3      	bne.n	801c9da <ip_reass_tmr+0x12>
    }
  }
}
 801ca12:	bf00      	nop
 801ca14:	bf00      	nop
 801ca16:	3710      	adds	r7, #16
 801ca18:	46bd      	mov	sp, r7
 801ca1a:	bd80      	pop	{r7, pc}
 801ca1c:	20004890 	.word	0x20004890

0801ca20 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ca20:	b580      	push	{r7, lr}
 801ca22:	b088      	sub	sp, #32
 801ca24:	af00      	add	r7, sp, #0
 801ca26:	6078      	str	r0, [r7, #4]
 801ca28:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801ca2a:	2300      	movs	r3, #0
 801ca2c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801ca2e:	683a      	ldr	r2, [r7, #0]
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	429a      	cmp	r2, r3
 801ca34:	d105      	bne.n	801ca42 <ip_reass_free_complete_datagram+0x22>
 801ca36:	4b45      	ldr	r3, [pc, #276]	; (801cb4c <ip_reass_free_complete_datagram+0x12c>)
 801ca38:	22ab      	movs	r2, #171	; 0xab
 801ca3a:	4945      	ldr	r1, [pc, #276]	; (801cb50 <ip_reass_free_complete_datagram+0x130>)
 801ca3c:	4845      	ldr	r0, [pc, #276]	; (801cb54 <ip_reass_free_complete_datagram+0x134>)
 801ca3e:	f002 f98f 	bl	801ed60 <iprintf>
  if (prev != NULL) {
 801ca42:	683b      	ldr	r3, [r7, #0]
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	d00a      	beq.n	801ca5e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801ca48:	683b      	ldr	r3, [r7, #0]
 801ca4a:	681b      	ldr	r3, [r3, #0]
 801ca4c:	687a      	ldr	r2, [r7, #4]
 801ca4e:	429a      	cmp	r2, r3
 801ca50:	d005      	beq.n	801ca5e <ip_reass_free_complete_datagram+0x3e>
 801ca52:	4b3e      	ldr	r3, [pc, #248]	; (801cb4c <ip_reass_free_complete_datagram+0x12c>)
 801ca54:	22ad      	movs	r2, #173	; 0xad
 801ca56:	4940      	ldr	r1, [pc, #256]	; (801cb58 <ip_reass_free_complete_datagram+0x138>)
 801ca58:	483e      	ldr	r0, [pc, #248]	; (801cb54 <ip_reass_free_complete_datagram+0x134>)
 801ca5a:	f002 f981 	bl	801ed60 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	685b      	ldr	r3, [r3, #4]
 801ca62:	685b      	ldr	r3, [r3, #4]
 801ca64:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801ca66:	697b      	ldr	r3, [r7, #20]
 801ca68:	889b      	ldrh	r3, [r3, #4]
 801ca6a:	b29b      	uxth	r3, r3
 801ca6c:	2b00      	cmp	r3, #0
 801ca6e:	d12a      	bne.n	801cac6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	685b      	ldr	r3, [r3, #4]
 801ca74:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801ca76:	697b      	ldr	r3, [r7, #20]
 801ca78:	681a      	ldr	r2, [r3, #0]
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801ca7e:	69bb      	ldr	r3, [r7, #24]
 801ca80:	6858      	ldr	r0, [r3, #4]
 801ca82:	687b      	ldr	r3, [r7, #4]
 801ca84:	3308      	adds	r3, #8
 801ca86:	2214      	movs	r2, #20
 801ca88:	4619      	mov	r1, r3
 801ca8a:	f001 febb 	bl	801e804 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801ca8e:	2101      	movs	r1, #1
 801ca90:	69b8      	ldr	r0, [r7, #24]
 801ca92:	f7ff fb1d 	bl	801c0d0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801ca96:	69b8      	ldr	r0, [r7, #24]
 801ca98:	f7f7 f988 	bl	8013dac <pbuf_clen>
 801ca9c:	4603      	mov	r3, r0
 801ca9e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801caa0:	8bfa      	ldrh	r2, [r7, #30]
 801caa2:	8a7b      	ldrh	r3, [r7, #18]
 801caa4:	4413      	add	r3, r2
 801caa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801caaa:	db05      	blt.n	801cab8 <ip_reass_free_complete_datagram+0x98>
 801caac:	4b27      	ldr	r3, [pc, #156]	; (801cb4c <ip_reass_free_complete_datagram+0x12c>)
 801caae:	22bc      	movs	r2, #188	; 0xbc
 801cab0:	492a      	ldr	r1, [pc, #168]	; (801cb5c <ip_reass_free_complete_datagram+0x13c>)
 801cab2:	4828      	ldr	r0, [pc, #160]	; (801cb54 <ip_reass_free_complete_datagram+0x134>)
 801cab4:	f002 f954 	bl	801ed60 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801cab8:	8bfa      	ldrh	r2, [r7, #30]
 801caba:	8a7b      	ldrh	r3, [r7, #18]
 801cabc:	4413      	add	r3, r2
 801cabe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801cac0:	69b8      	ldr	r0, [r7, #24]
 801cac2:	f7f7 f8e5 	bl	8013c90 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801cac6:	687b      	ldr	r3, [r7, #4]
 801cac8:	685b      	ldr	r3, [r3, #4]
 801caca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801cacc:	e01f      	b.n	801cb0e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801cace:	69bb      	ldr	r3, [r7, #24]
 801cad0:	685b      	ldr	r3, [r3, #4]
 801cad2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801cad4:	69bb      	ldr	r3, [r7, #24]
 801cad6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801cad8:	697b      	ldr	r3, [r7, #20]
 801cada:	681b      	ldr	r3, [r3, #0]
 801cadc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801cade:	68f8      	ldr	r0, [r7, #12]
 801cae0:	f7f7 f964 	bl	8013dac <pbuf_clen>
 801cae4:	4603      	mov	r3, r0
 801cae6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801cae8:	8bfa      	ldrh	r2, [r7, #30]
 801caea:	8a7b      	ldrh	r3, [r7, #18]
 801caec:	4413      	add	r3, r2
 801caee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801caf2:	db05      	blt.n	801cb00 <ip_reass_free_complete_datagram+0xe0>
 801caf4:	4b15      	ldr	r3, [pc, #84]	; (801cb4c <ip_reass_free_complete_datagram+0x12c>)
 801caf6:	22cc      	movs	r2, #204	; 0xcc
 801caf8:	4918      	ldr	r1, [pc, #96]	; (801cb5c <ip_reass_free_complete_datagram+0x13c>)
 801cafa:	4816      	ldr	r0, [pc, #88]	; (801cb54 <ip_reass_free_complete_datagram+0x134>)
 801cafc:	f002 f930 	bl	801ed60 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801cb00:	8bfa      	ldrh	r2, [r7, #30]
 801cb02:	8a7b      	ldrh	r3, [r7, #18]
 801cb04:	4413      	add	r3, r2
 801cb06:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801cb08:	68f8      	ldr	r0, [r7, #12]
 801cb0a:	f7f7 f8c1 	bl	8013c90 <pbuf_free>
  while (p != NULL) {
 801cb0e:	69bb      	ldr	r3, [r7, #24]
 801cb10:	2b00      	cmp	r3, #0
 801cb12:	d1dc      	bne.n	801cace <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801cb14:	6839      	ldr	r1, [r7, #0]
 801cb16:	6878      	ldr	r0, [r7, #4]
 801cb18:	f000 f8c2 	bl	801cca0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801cb1c:	4b10      	ldr	r3, [pc, #64]	; (801cb60 <ip_reass_free_complete_datagram+0x140>)
 801cb1e:	881b      	ldrh	r3, [r3, #0]
 801cb20:	8bfa      	ldrh	r2, [r7, #30]
 801cb22:	429a      	cmp	r2, r3
 801cb24:	d905      	bls.n	801cb32 <ip_reass_free_complete_datagram+0x112>
 801cb26:	4b09      	ldr	r3, [pc, #36]	; (801cb4c <ip_reass_free_complete_datagram+0x12c>)
 801cb28:	22d2      	movs	r2, #210	; 0xd2
 801cb2a:	490e      	ldr	r1, [pc, #56]	; (801cb64 <ip_reass_free_complete_datagram+0x144>)
 801cb2c:	4809      	ldr	r0, [pc, #36]	; (801cb54 <ip_reass_free_complete_datagram+0x134>)
 801cb2e:	f002 f917 	bl	801ed60 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801cb32:	4b0b      	ldr	r3, [pc, #44]	; (801cb60 <ip_reass_free_complete_datagram+0x140>)
 801cb34:	881a      	ldrh	r2, [r3, #0]
 801cb36:	8bfb      	ldrh	r3, [r7, #30]
 801cb38:	1ad3      	subs	r3, r2, r3
 801cb3a:	b29a      	uxth	r2, r3
 801cb3c:	4b08      	ldr	r3, [pc, #32]	; (801cb60 <ip_reass_free_complete_datagram+0x140>)
 801cb3e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801cb40:	8bfb      	ldrh	r3, [r7, #30]
}
 801cb42:	4618      	mov	r0, r3
 801cb44:	3720      	adds	r7, #32
 801cb46:	46bd      	mov	sp, r7
 801cb48:	bd80      	pop	{r7, pc}
 801cb4a:	bf00      	nop
 801cb4c:	08025990 	.word	0x08025990
 801cb50:	080259cc 	.word	0x080259cc
 801cb54:	080259d8 	.word	0x080259d8
 801cb58:	08025a00 	.word	0x08025a00
 801cb5c:	08025a14 	.word	0x08025a14
 801cb60:	20004894 	.word	0x20004894
 801cb64:	08025a34 	.word	0x08025a34

0801cb68 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801cb68:	b580      	push	{r7, lr}
 801cb6a:	b08a      	sub	sp, #40	; 0x28
 801cb6c:	af00      	add	r7, sp, #0
 801cb6e:	6078      	str	r0, [r7, #4]
 801cb70:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801cb72:	2300      	movs	r3, #0
 801cb74:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801cb76:	2300      	movs	r3, #0
 801cb78:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801cb7a:	2300      	movs	r3, #0
 801cb7c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801cb7e:	2300      	movs	r3, #0
 801cb80:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801cb82:	2300      	movs	r3, #0
 801cb84:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801cb86:	4b28      	ldr	r3, [pc, #160]	; (801cc28 <ip_reass_remove_oldest_datagram+0xc0>)
 801cb88:	681b      	ldr	r3, [r3, #0]
 801cb8a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801cb8c:	e030      	b.n	801cbf0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801cb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb90:	695a      	ldr	r2, [r3, #20]
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	68db      	ldr	r3, [r3, #12]
 801cb96:	429a      	cmp	r2, r3
 801cb98:	d10c      	bne.n	801cbb4 <ip_reass_remove_oldest_datagram+0x4c>
 801cb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb9c:	699a      	ldr	r2, [r3, #24]
 801cb9e:	687b      	ldr	r3, [r7, #4]
 801cba0:	691b      	ldr	r3, [r3, #16]
 801cba2:	429a      	cmp	r2, r3
 801cba4:	d106      	bne.n	801cbb4 <ip_reass_remove_oldest_datagram+0x4c>
 801cba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cba8:	899a      	ldrh	r2, [r3, #12]
 801cbaa:	687b      	ldr	r3, [r7, #4]
 801cbac:	889b      	ldrh	r3, [r3, #4]
 801cbae:	b29b      	uxth	r3, r3
 801cbb0:	429a      	cmp	r2, r3
 801cbb2:	d014      	beq.n	801cbde <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801cbb4:	693b      	ldr	r3, [r7, #16]
 801cbb6:	3301      	adds	r3, #1
 801cbb8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801cbba:	6a3b      	ldr	r3, [r7, #32]
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	d104      	bne.n	801cbca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801cbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbc2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801cbc4:	69fb      	ldr	r3, [r7, #28]
 801cbc6:	61bb      	str	r3, [r7, #24]
 801cbc8:	e009      	b.n	801cbde <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801cbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbcc:	7fda      	ldrb	r2, [r3, #31]
 801cbce:	6a3b      	ldr	r3, [r7, #32]
 801cbd0:	7fdb      	ldrb	r3, [r3, #31]
 801cbd2:	429a      	cmp	r2, r3
 801cbd4:	d803      	bhi.n	801cbde <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801cbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbd8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801cbda:	69fb      	ldr	r3, [r7, #28]
 801cbdc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801cbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbe0:	681b      	ldr	r3, [r3, #0]
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	d001      	beq.n	801cbea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801cbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbe8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801cbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbec:	681b      	ldr	r3, [r3, #0]
 801cbee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801cbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbf2:	2b00      	cmp	r3, #0
 801cbf4:	d1cb      	bne.n	801cb8e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801cbf6:	6a3b      	ldr	r3, [r7, #32]
 801cbf8:	2b00      	cmp	r3, #0
 801cbfa:	d008      	beq.n	801cc0e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801cbfc:	69b9      	ldr	r1, [r7, #24]
 801cbfe:	6a38      	ldr	r0, [r7, #32]
 801cc00:	f7ff ff0e 	bl	801ca20 <ip_reass_free_complete_datagram>
 801cc04:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801cc06:	697a      	ldr	r2, [r7, #20]
 801cc08:	68fb      	ldr	r3, [r7, #12]
 801cc0a:	4413      	add	r3, r2
 801cc0c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801cc0e:	697a      	ldr	r2, [r7, #20]
 801cc10:	683b      	ldr	r3, [r7, #0]
 801cc12:	429a      	cmp	r2, r3
 801cc14:	da02      	bge.n	801cc1c <ip_reass_remove_oldest_datagram+0xb4>
 801cc16:	693b      	ldr	r3, [r7, #16]
 801cc18:	2b01      	cmp	r3, #1
 801cc1a:	dcac      	bgt.n	801cb76 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801cc1c:	697b      	ldr	r3, [r7, #20]
}
 801cc1e:	4618      	mov	r0, r3
 801cc20:	3728      	adds	r7, #40	; 0x28
 801cc22:	46bd      	mov	sp, r7
 801cc24:	bd80      	pop	{r7, pc}
 801cc26:	bf00      	nop
 801cc28:	20004890 	.word	0x20004890

0801cc2c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801cc2c:	b580      	push	{r7, lr}
 801cc2e:	b084      	sub	sp, #16
 801cc30:	af00      	add	r7, sp, #0
 801cc32:	6078      	str	r0, [r7, #4]
 801cc34:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801cc36:	2004      	movs	r0, #4
 801cc38:	f7f6 f95a 	bl	8012ef0 <memp_malloc>
 801cc3c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801cc3e:	68fb      	ldr	r3, [r7, #12]
 801cc40:	2b00      	cmp	r3, #0
 801cc42:	d110      	bne.n	801cc66 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801cc44:	6839      	ldr	r1, [r7, #0]
 801cc46:	6878      	ldr	r0, [r7, #4]
 801cc48:	f7ff ff8e 	bl	801cb68 <ip_reass_remove_oldest_datagram>
 801cc4c:	4602      	mov	r2, r0
 801cc4e:	683b      	ldr	r3, [r7, #0]
 801cc50:	4293      	cmp	r3, r2
 801cc52:	dc03      	bgt.n	801cc5c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801cc54:	2004      	movs	r0, #4
 801cc56:	f7f6 f94b 	bl	8012ef0 <memp_malloc>
 801cc5a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801cc5c:	68fb      	ldr	r3, [r7, #12]
 801cc5e:	2b00      	cmp	r3, #0
 801cc60:	d101      	bne.n	801cc66 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801cc62:	2300      	movs	r3, #0
 801cc64:	e016      	b.n	801cc94 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801cc66:	2220      	movs	r2, #32
 801cc68:	2100      	movs	r1, #0
 801cc6a:	68f8      	ldr	r0, [r7, #12]
 801cc6c:	f001 fdf2 	bl	801e854 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801cc70:	68fb      	ldr	r3, [r7, #12]
 801cc72:	220f      	movs	r2, #15
 801cc74:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801cc76:	4b09      	ldr	r3, [pc, #36]	; (801cc9c <ip_reass_enqueue_new_datagram+0x70>)
 801cc78:	681a      	ldr	r2, [r3, #0]
 801cc7a:	68fb      	ldr	r3, [r7, #12]
 801cc7c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801cc7e:	4a07      	ldr	r2, [pc, #28]	; (801cc9c <ip_reass_enqueue_new_datagram+0x70>)
 801cc80:	68fb      	ldr	r3, [r7, #12]
 801cc82:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801cc84:	68fb      	ldr	r3, [r7, #12]
 801cc86:	3308      	adds	r3, #8
 801cc88:	2214      	movs	r2, #20
 801cc8a:	6879      	ldr	r1, [r7, #4]
 801cc8c:	4618      	mov	r0, r3
 801cc8e:	f001 fdb9 	bl	801e804 <memcpy>
  return ipr;
 801cc92:	68fb      	ldr	r3, [r7, #12]
}
 801cc94:	4618      	mov	r0, r3
 801cc96:	3710      	adds	r7, #16
 801cc98:	46bd      	mov	sp, r7
 801cc9a:	bd80      	pop	{r7, pc}
 801cc9c:	20004890 	.word	0x20004890

0801cca0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801cca0:	b580      	push	{r7, lr}
 801cca2:	b082      	sub	sp, #8
 801cca4:	af00      	add	r7, sp, #0
 801cca6:	6078      	str	r0, [r7, #4]
 801cca8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801ccaa:	4b10      	ldr	r3, [pc, #64]	; (801ccec <ip_reass_dequeue_datagram+0x4c>)
 801ccac:	681b      	ldr	r3, [r3, #0]
 801ccae:	687a      	ldr	r2, [r7, #4]
 801ccb0:	429a      	cmp	r2, r3
 801ccb2:	d104      	bne.n	801ccbe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	681b      	ldr	r3, [r3, #0]
 801ccb8:	4a0c      	ldr	r2, [pc, #48]	; (801ccec <ip_reass_dequeue_datagram+0x4c>)
 801ccba:	6013      	str	r3, [r2, #0]
 801ccbc:	e00d      	b.n	801ccda <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801ccbe:	683b      	ldr	r3, [r7, #0]
 801ccc0:	2b00      	cmp	r3, #0
 801ccc2:	d106      	bne.n	801ccd2 <ip_reass_dequeue_datagram+0x32>
 801ccc4:	4b0a      	ldr	r3, [pc, #40]	; (801ccf0 <ip_reass_dequeue_datagram+0x50>)
 801ccc6:	f240 1245 	movw	r2, #325	; 0x145
 801ccca:	490a      	ldr	r1, [pc, #40]	; (801ccf4 <ip_reass_dequeue_datagram+0x54>)
 801cccc:	480a      	ldr	r0, [pc, #40]	; (801ccf8 <ip_reass_dequeue_datagram+0x58>)
 801ccce:	f002 f847 	bl	801ed60 <iprintf>
    prev->next = ipr->next;
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	681a      	ldr	r2, [r3, #0]
 801ccd6:	683b      	ldr	r3, [r7, #0]
 801ccd8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801ccda:	6879      	ldr	r1, [r7, #4]
 801ccdc:	2004      	movs	r0, #4
 801ccde:	f7f6 f959 	bl	8012f94 <memp_free>
}
 801cce2:	bf00      	nop
 801cce4:	3708      	adds	r7, #8
 801cce6:	46bd      	mov	sp, r7
 801cce8:	bd80      	pop	{r7, pc}
 801ccea:	bf00      	nop
 801ccec:	20004890 	.word	0x20004890
 801ccf0:	08025990 	.word	0x08025990
 801ccf4:	08025a58 	.word	0x08025a58
 801ccf8:	080259d8 	.word	0x080259d8

0801ccfc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801ccfc:	b580      	push	{r7, lr}
 801ccfe:	b08c      	sub	sp, #48	; 0x30
 801cd00:	af00      	add	r7, sp, #0
 801cd02:	60f8      	str	r0, [r7, #12]
 801cd04:	60b9      	str	r1, [r7, #8]
 801cd06:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801cd08:	2300      	movs	r3, #0
 801cd0a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801cd0c:	2301      	movs	r3, #1
 801cd0e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801cd10:	68bb      	ldr	r3, [r7, #8]
 801cd12:	685b      	ldr	r3, [r3, #4]
 801cd14:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801cd16:	69fb      	ldr	r3, [r7, #28]
 801cd18:	885b      	ldrh	r3, [r3, #2]
 801cd1a:	b29b      	uxth	r3, r3
 801cd1c:	4618      	mov	r0, r3
 801cd1e:	f7f5 fbfb 	bl	8012518 <lwip_htons>
 801cd22:	4603      	mov	r3, r0
 801cd24:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801cd26:	69fb      	ldr	r3, [r7, #28]
 801cd28:	781b      	ldrb	r3, [r3, #0]
 801cd2a:	f003 030f 	and.w	r3, r3, #15
 801cd2e:	b2db      	uxtb	r3, r3
 801cd30:	009b      	lsls	r3, r3, #2
 801cd32:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801cd34:	7e7b      	ldrb	r3, [r7, #25]
 801cd36:	b29b      	uxth	r3, r3
 801cd38:	8b7a      	ldrh	r2, [r7, #26]
 801cd3a:	429a      	cmp	r2, r3
 801cd3c:	d202      	bcs.n	801cd44 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cd3e:	f04f 33ff 	mov.w	r3, #4294967295
 801cd42:	e135      	b.n	801cfb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801cd44:	7e7b      	ldrb	r3, [r7, #25]
 801cd46:	b29b      	uxth	r3, r3
 801cd48:	8b7a      	ldrh	r2, [r7, #26]
 801cd4a:	1ad3      	subs	r3, r2, r3
 801cd4c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801cd4e:	69fb      	ldr	r3, [r7, #28]
 801cd50:	88db      	ldrh	r3, [r3, #6]
 801cd52:	b29b      	uxth	r3, r3
 801cd54:	4618      	mov	r0, r3
 801cd56:	f7f5 fbdf 	bl	8012518 <lwip_htons>
 801cd5a:	4603      	mov	r3, r0
 801cd5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cd60:	b29b      	uxth	r3, r3
 801cd62:	00db      	lsls	r3, r3, #3
 801cd64:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801cd66:	68bb      	ldr	r3, [r7, #8]
 801cd68:	685b      	ldr	r3, [r3, #4]
 801cd6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801cd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd6e:	2200      	movs	r2, #0
 801cd70:	701a      	strb	r2, [r3, #0]
 801cd72:	2200      	movs	r2, #0
 801cd74:	705a      	strb	r2, [r3, #1]
 801cd76:	2200      	movs	r2, #0
 801cd78:	709a      	strb	r2, [r3, #2]
 801cd7a:	2200      	movs	r2, #0
 801cd7c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801cd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd80:	8afa      	ldrh	r2, [r7, #22]
 801cd82:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801cd84:	8afa      	ldrh	r2, [r7, #22]
 801cd86:	8b7b      	ldrh	r3, [r7, #26]
 801cd88:	4413      	add	r3, r2
 801cd8a:	b29a      	uxth	r2, r3
 801cd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd8e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801cd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd92:	88db      	ldrh	r3, [r3, #6]
 801cd94:	b29b      	uxth	r3, r3
 801cd96:	8afa      	ldrh	r2, [r7, #22]
 801cd98:	429a      	cmp	r2, r3
 801cd9a:	d902      	bls.n	801cda2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cd9c:	f04f 33ff 	mov.w	r3, #4294967295
 801cda0:	e106      	b.n	801cfb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801cda2:	68fb      	ldr	r3, [r7, #12]
 801cda4:	685b      	ldr	r3, [r3, #4]
 801cda6:	627b      	str	r3, [r7, #36]	; 0x24
 801cda8:	e068      	b.n	801ce7c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801cdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdac:	685b      	ldr	r3, [r3, #4]
 801cdae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801cdb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdb2:	889b      	ldrh	r3, [r3, #4]
 801cdb4:	b29a      	uxth	r2, r3
 801cdb6:	693b      	ldr	r3, [r7, #16]
 801cdb8:	889b      	ldrh	r3, [r3, #4]
 801cdba:	b29b      	uxth	r3, r3
 801cdbc:	429a      	cmp	r2, r3
 801cdbe:	d235      	bcs.n	801ce2c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801cdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cdc4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801cdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	d020      	beq.n	801ce0e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801cdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdce:	889b      	ldrh	r3, [r3, #4]
 801cdd0:	b29a      	uxth	r2, r3
 801cdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdd4:	88db      	ldrh	r3, [r3, #6]
 801cdd6:	b29b      	uxth	r3, r3
 801cdd8:	429a      	cmp	r2, r3
 801cdda:	d307      	bcc.n	801cdec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801cddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdde:	88db      	ldrh	r3, [r3, #6]
 801cde0:	b29a      	uxth	r2, r3
 801cde2:	693b      	ldr	r3, [r7, #16]
 801cde4:	889b      	ldrh	r3, [r3, #4]
 801cde6:	b29b      	uxth	r3, r3
 801cde8:	429a      	cmp	r2, r3
 801cdea:	d902      	bls.n	801cdf2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cdec:	f04f 33ff 	mov.w	r3, #4294967295
 801cdf0:	e0de      	b.n	801cfb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801cdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdf4:	68ba      	ldr	r2, [r7, #8]
 801cdf6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801cdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdfa:	88db      	ldrh	r3, [r3, #6]
 801cdfc:	b29a      	uxth	r2, r3
 801cdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce00:	889b      	ldrh	r3, [r3, #4]
 801ce02:	b29b      	uxth	r3, r3
 801ce04:	429a      	cmp	r2, r3
 801ce06:	d03d      	beq.n	801ce84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ce08:	2300      	movs	r3, #0
 801ce0a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801ce0c:	e03a      	b.n	801ce84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801ce0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce10:	88db      	ldrh	r3, [r3, #6]
 801ce12:	b29a      	uxth	r2, r3
 801ce14:	693b      	ldr	r3, [r7, #16]
 801ce16:	889b      	ldrh	r3, [r3, #4]
 801ce18:	b29b      	uxth	r3, r3
 801ce1a:	429a      	cmp	r2, r3
 801ce1c:	d902      	bls.n	801ce24 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ce1e:	f04f 33ff 	mov.w	r3, #4294967295
 801ce22:	e0c5      	b.n	801cfb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801ce24:	68fb      	ldr	r3, [r7, #12]
 801ce26:	68ba      	ldr	r2, [r7, #8]
 801ce28:	605a      	str	r2, [r3, #4]
      break;
 801ce2a:	e02b      	b.n	801ce84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801ce2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce2e:	889b      	ldrh	r3, [r3, #4]
 801ce30:	b29a      	uxth	r2, r3
 801ce32:	693b      	ldr	r3, [r7, #16]
 801ce34:	889b      	ldrh	r3, [r3, #4]
 801ce36:	b29b      	uxth	r3, r3
 801ce38:	429a      	cmp	r2, r3
 801ce3a:	d102      	bne.n	801ce42 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ce3c:	f04f 33ff 	mov.w	r3, #4294967295
 801ce40:	e0b6      	b.n	801cfb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801ce42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce44:	889b      	ldrh	r3, [r3, #4]
 801ce46:	b29a      	uxth	r2, r3
 801ce48:	693b      	ldr	r3, [r7, #16]
 801ce4a:	88db      	ldrh	r3, [r3, #6]
 801ce4c:	b29b      	uxth	r3, r3
 801ce4e:	429a      	cmp	r2, r3
 801ce50:	d202      	bcs.n	801ce58 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ce52:	f04f 33ff 	mov.w	r3, #4294967295
 801ce56:	e0ab      	b.n	801cfb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801ce58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce5a:	2b00      	cmp	r3, #0
 801ce5c:	d009      	beq.n	801ce72 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801ce5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce60:	88db      	ldrh	r3, [r3, #6]
 801ce62:	b29a      	uxth	r2, r3
 801ce64:	693b      	ldr	r3, [r7, #16]
 801ce66:	889b      	ldrh	r3, [r3, #4]
 801ce68:	b29b      	uxth	r3, r3
 801ce6a:	429a      	cmp	r2, r3
 801ce6c:	d001      	beq.n	801ce72 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ce6e:	2300      	movs	r3, #0
 801ce70:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801ce72:	693b      	ldr	r3, [r7, #16]
 801ce74:	681b      	ldr	r3, [r3, #0]
 801ce76:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801ce78:	693b      	ldr	r3, [r7, #16]
 801ce7a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801ce7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce7e:	2b00      	cmp	r3, #0
 801ce80:	d193      	bne.n	801cdaa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801ce82:	e000      	b.n	801ce86 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801ce84:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801ce86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce88:	2b00      	cmp	r3, #0
 801ce8a:	d12d      	bne.n	801cee8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801ce8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	d01c      	beq.n	801cecc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801ce92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce94:	88db      	ldrh	r3, [r3, #6]
 801ce96:	b29a      	uxth	r2, r3
 801ce98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce9a:	889b      	ldrh	r3, [r3, #4]
 801ce9c:	b29b      	uxth	r3, r3
 801ce9e:	429a      	cmp	r2, r3
 801cea0:	d906      	bls.n	801ceb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801cea2:	4b45      	ldr	r3, [pc, #276]	; (801cfb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801cea4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801cea8:	4944      	ldr	r1, [pc, #272]	; (801cfbc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801ceaa:	4845      	ldr	r0, [pc, #276]	; (801cfc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ceac:	f001 ff58 	bl	801ed60 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801ceb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ceb2:	68ba      	ldr	r2, [r7, #8]
 801ceb4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801ceb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ceb8:	88db      	ldrh	r3, [r3, #6]
 801ceba:	b29a      	uxth	r2, r3
 801cebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cebe:	889b      	ldrh	r3, [r3, #4]
 801cec0:	b29b      	uxth	r3, r3
 801cec2:	429a      	cmp	r2, r3
 801cec4:	d010      	beq.n	801cee8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801cec6:	2300      	movs	r3, #0
 801cec8:	623b      	str	r3, [r7, #32]
 801ceca:	e00d      	b.n	801cee8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801cecc:	68fb      	ldr	r3, [r7, #12]
 801cece:	685b      	ldr	r3, [r3, #4]
 801ced0:	2b00      	cmp	r3, #0
 801ced2:	d006      	beq.n	801cee2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801ced4:	4b38      	ldr	r3, [pc, #224]	; (801cfb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ced6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801ceda:	493a      	ldr	r1, [pc, #232]	; (801cfc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801cedc:	4838      	ldr	r0, [pc, #224]	; (801cfc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801cede:	f001 ff3f 	bl	801ed60 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801cee2:	68fb      	ldr	r3, [r7, #12]
 801cee4:	68ba      	ldr	r2, [r7, #8]
 801cee6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	d105      	bne.n	801cefa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801ceee:	68fb      	ldr	r3, [r7, #12]
 801cef0:	7f9b      	ldrb	r3, [r3, #30]
 801cef2:	f003 0301 	and.w	r3, r3, #1
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	d059      	beq.n	801cfae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801cefa:	6a3b      	ldr	r3, [r7, #32]
 801cefc:	2b00      	cmp	r3, #0
 801cefe:	d04f      	beq.n	801cfa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801cf00:	68fb      	ldr	r3, [r7, #12]
 801cf02:	685b      	ldr	r3, [r3, #4]
 801cf04:	2b00      	cmp	r3, #0
 801cf06:	d006      	beq.n	801cf16 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801cf08:	68fb      	ldr	r3, [r7, #12]
 801cf0a:	685b      	ldr	r3, [r3, #4]
 801cf0c:	685b      	ldr	r3, [r3, #4]
 801cf0e:	889b      	ldrh	r3, [r3, #4]
 801cf10:	b29b      	uxth	r3, r3
 801cf12:	2b00      	cmp	r3, #0
 801cf14:	d002      	beq.n	801cf1c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801cf16:	2300      	movs	r3, #0
 801cf18:	623b      	str	r3, [r7, #32]
 801cf1a:	e041      	b.n	801cfa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801cf1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf1e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801cf20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf22:	681b      	ldr	r3, [r3, #0]
 801cf24:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801cf26:	e012      	b.n	801cf4e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801cf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf2a:	685b      	ldr	r3, [r3, #4]
 801cf2c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801cf2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cf30:	88db      	ldrh	r3, [r3, #6]
 801cf32:	b29a      	uxth	r2, r3
 801cf34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf36:	889b      	ldrh	r3, [r3, #4]
 801cf38:	b29b      	uxth	r3, r3
 801cf3a:	429a      	cmp	r2, r3
 801cf3c:	d002      	beq.n	801cf44 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801cf3e:	2300      	movs	r3, #0
 801cf40:	623b      	str	r3, [r7, #32]
            break;
 801cf42:	e007      	b.n	801cf54 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801cf44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf46:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801cf48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf4a:	681b      	ldr	r3, [r3, #0]
 801cf4c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801cf4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d1e9      	bne.n	801cf28 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801cf54:	6a3b      	ldr	r3, [r7, #32]
 801cf56:	2b00      	cmp	r3, #0
 801cf58:	d022      	beq.n	801cfa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801cf5a:	68fb      	ldr	r3, [r7, #12]
 801cf5c:	685b      	ldr	r3, [r3, #4]
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	d106      	bne.n	801cf70 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801cf62:	4b15      	ldr	r3, [pc, #84]	; (801cfb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801cf64:	f240 12df 	movw	r2, #479	; 0x1df
 801cf68:	4917      	ldr	r1, [pc, #92]	; (801cfc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801cf6a:	4815      	ldr	r0, [pc, #84]	; (801cfc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801cf6c:	f001 fef8 	bl	801ed60 <iprintf>
          LWIP_ASSERT("sanity check",
 801cf70:	68fb      	ldr	r3, [r7, #12]
 801cf72:	685b      	ldr	r3, [r3, #4]
 801cf74:	685b      	ldr	r3, [r3, #4]
 801cf76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cf78:	429a      	cmp	r2, r3
 801cf7a:	d106      	bne.n	801cf8a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801cf7c:	4b0e      	ldr	r3, [pc, #56]	; (801cfb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801cf7e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801cf82:	4911      	ldr	r1, [pc, #68]	; (801cfc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801cf84:	480e      	ldr	r0, [pc, #56]	; (801cfc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801cf86:	f001 feeb 	bl	801ed60 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801cf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf8c:	681b      	ldr	r3, [r3, #0]
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	d006      	beq.n	801cfa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801cf92:	4b09      	ldr	r3, [pc, #36]	; (801cfb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801cf94:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801cf98:	490c      	ldr	r1, [pc, #48]	; (801cfcc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801cf9a:	4809      	ldr	r0, [pc, #36]	; (801cfc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801cf9c:	f001 fee0 	bl	801ed60 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801cfa0:	6a3b      	ldr	r3, [r7, #32]
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	bf14      	ite	ne
 801cfa6:	2301      	movne	r3, #1
 801cfa8:	2300      	moveq	r3, #0
 801cfaa:	b2db      	uxtb	r3, r3
 801cfac:	e000      	b.n	801cfb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801cfae:	2300      	movs	r3, #0
}
 801cfb0:	4618      	mov	r0, r3
 801cfb2:	3730      	adds	r7, #48	; 0x30
 801cfb4:	46bd      	mov	sp, r7
 801cfb6:	bd80      	pop	{r7, pc}
 801cfb8:	08025990 	.word	0x08025990
 801cfbc:	08025a74 	.word	0x08025a74
 801cfc0:	080259d8 	.word	0x080259d8
 801cfc4:	08025a94 	.word	0x08025a94
 801cfc8:	08025acc 	.word	0x08025acc
 801cfcc:	08025adc 	.word	0x08025adc

0801cfd0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801cfd0:	b580      	push	{r7, lr}
 801cfd2:	b08e      	sub	sp, #56	; 0x38
 801cfd4:	af00      	add	r7, sp, #0
 801cfd6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	685b      	ldr	r3, [r3, #4]
 801cfdc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801cfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cfe0:	781b      	ldrb	r3, [r3, #0]
 801cfe2:	f003 030f 	and.w	r3, r3, #15
 801cfe6:	b2db      	uxtb	r3, r3
 801cfe8:	009b      	lsls	r3, r3, #2
 801cfea:	b2db      	uxtb	r3, r3
 801cfec:	2b14      	cmp	r3, #20
 801cfee:	f040 8167 	bne.w	801d2c0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801cff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cff4:	88db      	ldrh	r3, [r3, #6]
 801cff6:	b29b      	uxth	r3, r3
 801cff8:	4618      	mov	r0, r3
 801cffa:	f7f5 fa8d 	bl	8012518 <lwip_htons>
 801cffe:	4603      	mov	r3, r0
 801d000:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d004:	b29b      	uxth	r3, r3
 801d006:	00db      	lsls	r3, r3, #3
 801d008:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d00c:	885b      	ldrh	r3, [r3, #2]
 801d00e:	b29b      	uxth	r3, r3
 801d010:	4618      	mov	r0, r3
 801d012:	f7f5 fa81 	bl	8012518 <lwip_htons>
 801d016:	4603      	mov	r3, r0
 801d018:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801d01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d01c:	781b      	ldrb	r3, [r3, #0]
 801d01e:	f003 030f 	and.w	r3, r3, #15
 801d022:	b2db      	uxtb	r3, r3
 801d024:	009b      	lsls	r3, r3, #2
 801d026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801d02a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d02e:	b29b      	uxth	r3, r3
 801d030:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d032:	429a      	cmp	r2, r3
 801d034:	f0c0 8146 	bcc.w	801d2c4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801d038:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d03c:	b29b      	uxth	r3, r3
 801d03e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d040:	1ad3      	subs	r3, r2, r3
 801d042:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801d044:	6878      	ldr	r0, [r7, #4]
 801d046:	f7f6 feb1 	bl	8013dac <pbuf_clen>
 801d04a:	4603      	mov	r3, r0
 801d04c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801d04e:	4b9f      	ldr	r3, [pc, #636]	; (801d2cc <ip4_reass+0x2fc>)
 801d050:	881b      	ldrh	r3, [r3, #0]
 801d052:	461a      	mov	r2, r3
 801d054:	8c3b      	ldrh	r3, [r7, #32]
 801d056:	4413      	add	r3, r2
 801d058:	2b0a      	cmp	r3, #10
 801d05a:	dd10      	ble.n	801d07e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d05c:	8c3b      	ldrh	r3, [r7, #32]
 801d05e:	4619      	mov	r1, r3
 801d060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d062:	f7ff fd81 	bl	801cb68 <ip_reass_remove_oldest_datagram>
 801d066:	4603      	mov	r3, r0
 801d068:	2b00      	cmp	r3, #0
 801d06a:	f000 812d 	beq.w	801d2c8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801d06e:	4b97      	ldr	r3, [pc, #604]	; (801d2cc <ip4_reass+0x2fc>)
 801d070:	881b      	ldrh	r3, [r3, #0]
 801d072:	461a      	mov	r2, r3
 801d074:	8c3b      	ldrh	r3, [r7, #32]
 801d076:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d078:	2b0a      	cmp	r3, #10
 801d07a:	f300 8125 	bgt.w	801d2c8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d07e:	4b94      	ldr	r3, [pc, #592]	; (801d2d0 <ip4_reass+0x300>)
 801d080:	681b      	ldr	r3, [r3, #0]
 801d082:	633b      	str	r3, [r7, #48]	; 0x30
 801d084:	e015      	b.n	801d0b2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801d086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d088:	695a      	ldr	r2, [r3, #20]
 801d08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d08c:	68db      	ldr	r3, [r3, #12]
 801d08e:	429a      	cmp	r2, r3
 801d090:	d10c      	bne.n	801d0ac <ip4_reass+0xdc>
 801d092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d094:	699a      	ldr	r2, [r3, #24]
 801d096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d098:	691b      	ldr	r3, [r3, #16]
 801d09a:	429a      	cmp	r2, r3
 801d09c:	d106      	bne.n	801d0ac <ip4_reass+0xdc>
 801d09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0a0:	899a      	ldrh	r2, [r3, #12]
 801d0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d0a4:	889b      	ldrh	r3, [r3, #4]
 801d0a6:	b29b      	uxth	r3, r3
 801d0a8:	429a      	cmp	r2, r3
 801d0aa:	d006      	beq.n	801d0ba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0ae:	681b      	ldr	r3, [r3, #0]
 801d0b0:	633b      	str	r3, [r7, #48]	; 0x30
 801d0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	d1e6      	bne.n	801d086 <ip4_reass+0xb6>
 801d0b8:	e000      	b.n	801d0bc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801d0ba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801d0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d109      	bne.n	801d0d6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801d0c2:	8c3b      	ldrh	r3, [r7, #32]
 801d0c4:	4619      	mov	r1, r3
 801d0c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d0c8:	f7ff fdb0 	bl	801cc2c <ip_reass_enqueue_new_datagram>
 801d0cc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801d0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0d0:	2b00      	cmp	r3, #0
 801d0d2:	d11c      	bne.n	801d10e <ip4_reass+0x13e>
      goto nullreturn;
 801d0d4:	e109      	b.n	801d2ea <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d0d8:	88db      	ldrh	r3, [r3, #6]
 801d0da:	b29b      	uxth	r3, r3
 801d0dc:	4618      	mov	r0, r3
 801d0de:	f7f5 fa1b 	bl	8012518 <lwip_htons>
 801d0e2:	4603      	mov	r3, r0
 801d0e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d0e8:	2b00      	cmp	r3, #0
 801d0ea:	d110      	bne.n	801d10e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801d0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0ee:	89db      	ldrh	r3, [r3, #14]
 801d0f0:	4618      	mov	r0, r3
 801d0f2:	f7f5 fa11 	bl	8012518 <lwip_htons>
 801d0f6:	4603      	mov	r3, r0
 801d0f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d0fc:	2b00      	cmp	r3, #0
 801d0fe:	d006      	beq.n	801d10e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801d100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d102:	3308      	adds	r3, #8
 801d104:	2214      	movs	r2, #20
 801d106:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d108:	4618      	mov	r0, r3
 801d10a:	f001 fb7b 	bl	801e804 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801d10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d110:	88db      	ldrh	r3, [r3, #6]
 801d112:	b29b      	uxth	r3, r3
 801d114:	f003 0320 	and.w	r3, r3, #32
 801d118:	2b00      	cmp	r3, #0
 801d11a:	bf0c      	ite	eq
 801d11c:	2301      	moveq	r3, #1
 801d11e:	2300      	movne	r3, #0
 801d120:	b2db      	uxtb	r3, r3
 801d122:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801d124:	69fb      	ldr	r3, [r7, #28]
 801d126:	2b00      	cmp	r3, #0
 801d128:	d00e      	beq.n	801d148 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801d12a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d12c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d12e:	4413      	add	r3, r2
 801d130:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801d132:	8b7a      	ldrh	r2, [r7, #26]
 801d134:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801d136:	429a      	cmp	r2, r3
 801d138:	f0c0 80a0 	bcc.w	801d27c <ip4_reass+0x2ac>
 801d13c:	8b7b      	ldrh	r3, [r7, #26]
 801d13e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801d142:	4293      	cmp	r3, r2
 801d144:	f200 809a 	bhi.w	801d27c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801d148:	69fa      	ldr	r2, [r7, #28]
 801d14a:	6879      	ldr	r1, [r7, #4]
 801d14c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d14e:	f7ff fdd5 	bl	801ccfc <ip_reass_chain_frag_into_datagram_and_validate>
 801d152:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801d154:	697b      	ldr	r3, [r7, #20]
 801d156:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d15a:	f000 8091 	beq.w	801d280 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801d15e:	4b5b      	ldr	r3, [pc, #364]	; (801d2cc <ip4_reass+0x2fc>)
 801d160:	881a      	ldrh	r2, [r3, #0]
 801d162:	8c3b      	ldrh	r3, [r7, #32]
 801d164:	4413      	add	r3, r2
 801d166:	b29a      	uxth	r2, r3
 801d168:	4b58      	ldr	r3, [pc, #352]	; (801d2cc <ip4_reass+0x2fc>)
 801d16a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801d16c:	69fb      	ldr	r3, [r7, #28]
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d00d      	beq.n	801d18e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801d172:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d174:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d176:	4413      	add	r3, r2
 801d178:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801d17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d17c:	8a7a      	ldrh	r2, [r7, #18]
 801d17e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801d180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d182:	7f9b      	ldrb	r3, [r3, #30]
 801d184:	f043 0301 	orr.w	r3, r3, #1
 801d188:	b2da      	uxtb	r2, r3
 801d18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d18c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801d18e:	697b      	ldr	r3, [r7, #20]
 801d190:	2b01      	cmp	r3, #1
 801d192:	d171      	bne.n	801d278 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801d194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d196:	8b9b      	ldrh	r3, [r3, #28]
 801d198:	3314      	adds	r3, #20
 801d19a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801d19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d19e:	685b      	ldr	r3, [r3, #4]
 801d1a0:	685b      	ldr	r3, [r3, #4]
 801d1a2:	681b      	ldr	r3, [r3, #0]
 801d1a4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801d1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d1a8:	685b      	ldr	r3, [r3, #4]
 801d1aa:	685b      	ldr	r3, [r3, #4]
 801d1ac:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801d1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d1b0:	3308      	adds	r3, #8
 801d1b2:	2214      	movs	r2, #20
 801d1b4:	4619      	mov	r1, r3
 801d1b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d1b8:	f001 fb24 	bl	801e804 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801d1bc:	8a3b      	ldrh	r3, [r7, #16]
 801d1be:	4618      	mov	r0, r3
 801d1c0:	f7f5 f9aa 	bl	8012518 <lwip_htons>
 801d1c4:	4603      	mov	r3, r0
 801d1c6:	461a      	mov	r2, r3
 801d1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1ca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801d1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1ce:	2200      	movs	r2, #0
 801d1d0:	719a      	strb	r2, [r3, #6]
 801d1d2:	2200      	movs	r2, #0
 801d1d4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801d1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1d8:	2200      	movs	r2, #0
 801d1da:	729a      	strb	r2, [r3, #10]
 801d1dc:	2200      	movs	r2, #0
 801d1de:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801d1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d1e2:	685b      	ldr	r3, [r3, #4]
 801d1e4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801d1e6:	e00d      	b.n	801d204 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801d1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d1ea:	685b      	ldr	r3, [r3, #4]
 801d1ec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801d1ee:	2114      	movs	r1, #20
 801d1f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801d1f2:	f7f6 fcc7 	bl	8013b84 <pbuf_remove_header>
      pbuf_cat(p, r);
 801d1f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d1f8:	6878      	ldr	r0, [r7, #4]
 801d1fa:	f7f6 fe17 	bl	8013e2c <pbuf_cat>
      r = iprh->next_pbuf;
 801d1fe:	68fb      	ldr	r3, [r7, #12]
 801d200:	681b      	ldr	r3, [r3, #0]
 801d202:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801d204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d206:	2b00      	cmp	r3, #0
 801d208:	d1ee      	bne.n	801d1e8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801d20a:	4b31      	ldr	r3, [pc, #196]	; (801d2d0 <ip4_reass+0x300>)
 801d20c:	681b      	ldr	r3, [r3, #0]
 801d20e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d210:	429a      	cmp	r2, r3
 801d212:	d102      	bne.n	801d21a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801d214:	2300      	movs	r3, #0
 801d216:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d218:	e010      	b.n	801d23c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d21a:	4b2d      	ldr	r3, [pc, #180]	; (801d2d0 <ip4_reass+0x300>)
 801d21c:	681b      	ldr	r3, [r3, #0]
 801d21e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d220:	e007      	b.n	801d232 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801d222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d224:	681b      	ldr	r3, [r3, #0]
 801d226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d228:	429a      	cmp	r2, r3
 801d22a:	d006      	beq.n	801d23a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d22e:	681b      	ldr	r3, [r3, #0]
 801d230:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d234:	2b00      	cmp	r3, #0
 801d236:	d1f4      	bne.n	801d222 <ip4_reass+0x252>
 801d238:	e000      	b.n	801d23c <ip4_reass+0x26c>
          break;
 801d23a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801d23c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d23e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d240:	f7ff fd2e 	bl	801cca0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801d244:	6878      	ldr	r0, [r7, #4]
 801d246:	f7f6 fdb1 	bl	8013dac <pbuf_clen>
 801d24a:	4603      	mov	r3, r0
 801d24c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801d24e:	4b1f      	ldr	r3, [pc, #124]	; (801d2cc <ip4_reass+0x2fc>)
 801d250:	881b      	ldrh	r3, [r3, #0]
 801d252:	8c3a      	ldrh	r2, [r7, #32]
 801d254:	429a      	cmp	r2, r3
 801d256:	d906      	bls.n	801d266 <ip4_reass+0x296>
 801d258:	4b1e      	ldr	r3, [pc, #120]	; (801d2d4 <ip4_reass+0x304>)
 801d25a:	f240 229b 	movw	r2, #667	; 0x29b
 801d25e:	491e      	ldr	r1, [pc, #120]	; (801d2d8 <ip4_reass+0x308>)
 801d260:	481e      	ldr	r0, [pc, #120]	; (801d2dc <ip4_reass+0x30c>)
 801d262:	f001 fd7d 	bl	801ed60 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801d266:	4b19      	ldr	r3, [pc, #100]	; (801d2cc <ip4_reass+0x2fc>)
 801d268:	881a      	ldrh	r2, [r3, #0]
 801d26a:	8c3b      	ldrh	r3, [r7, #32]
 801d26c:	1ad3      	subs	r3, r2, r3
 801d26e:	b29a      	uxth	r2, r3
 801d270:	4b16      	ldr	r3, [pc, #88]	; (801d2cc <ip4_reass+0x2fc>)
 801d272:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	e03c      	b.n	801d2f2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801d278:	2300      	movs	r3, #0
 801d27a:	e03a      	b.n	801d2f2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801d27c:	bf00      	nop
 801d27e:	e000      	b.n	801d282 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801d280:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801d282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d284:	2b00      	cmp	r3, #0
 801d286:	d106      	bne.n	801d296 <ip4_reass+0x2c6>
 801d288:	4b12      	ldr	r3, [pc, #72]	; (801d2d4 <ip4_reass+0x304>)
 801d28a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801d28e:	4914      	ldr	r1, [pc, #80]	; (801d2e0 <ip4_reass+0x310>)
 801d290:	4812      	ldr	r0, [pc, #72]	; (801d2dc <ip4_reass+0x30c>)
 801d292:	f001 fd65 	bl	801ed60 <iprintf>
  if (ipr->p == NULL) {
 801d296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d298:	685b      	ldr	r3, [r3, #4]
 801d29a:	2b00      	cmp	r3, #0
 801d29c:	d124      	bne.n	801d2e8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801d29e:	4b0c      	ldr	r3, [pc, #48]	; (801d2d0 <ip4_reass+0x300>)
 801d2a0:	681b      	ldr	r3, [r3, #0]
 801d2a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d2a4:	429a      	cmp	r2, r3
 801d2a6:	d006      	beq.n	801d2b6 <ip4_reass+0x2e6>
 801d2a8:	4b0a      	ldr	r3, [pc, #40]	; (801d2d4 <ip4_reass+0x304>)
 801d2aa:	f240 22ab 	movw	r2, #683	; 0x2ab
 801d2ae:	490d      	ldr	r1, [pc, #52]	; (801d2e4 <ip4_reass+0x314>)
 801d2b0:	480a      	ldr	r0, [pc, #40]	; (801d2dc <ip4_reass+0x30c>)
 801d2b2:	f001 fd55 	bl	801ed60 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801d2b6:	2100      	movs	r1, #0
 801d2b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d2ba:	f7ff fcf1 	bl	801cca0 <ip_reass_dequeue_datagram>
 801d2be:	e014      	b.n	801d2ea <ip4_reass+0x31a>
    goto nullreturn;
 801d2c0:	bf00      	nop
 801d2c2:	e012      	b.n	801d2ea <ip4_reass+0x31a>
    goto nullreturn;
 801d2c4:	bf00      	nop
 801d2c6:	e010      	b.n	801d2ea <ip4_reass+0x31a>
      goto nullreturn;
 801d2c8:	bf00      	nop
 801d2ca:	e00e      	b.n	801d2ea <ip4_reass+0x31a>
 801d2cc:	20004894 	.word	0x20004894
 801d2d0:	20004890 	.word	0x20004890
 801d2d4:	08025990 	.word	0x08025990
 801d2d8:	08025b00 	.word	0x08025b00
 801d2dc:	080259d8 	.word	0x080259d8
 801d2e0:	08025b1c 	.word	0x08025b1c
 801d2e4:	08025b28 	.word	0x08025b28
  }

nullreturn:
 801d2e8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801d2ea:	6878      	ldr	r0, [r7, #4]
 801d2ec:	f7f6 fcd0 	bl	8013c90 <pbuf_free>
  return NULL;
 801d2f0:	2300      	movs	r3, #0
}
 801d2f2:	4618      	mov	r0, r3
 801d2f4:	3738      	adds	r7, #56	; 0x38
 801d2f6:	46bd      	mov	sp, r7
 801d2f8:	bd80      	pop	{r7, pc}
 801d2fa:	bf00      	nop

0801d2fc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801d2fc:	b580      	push	{r7, lr}
 801d2fe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801d300:	2005      	movs	r0, #5
 801d302:	f7f5 fdf5 	bl	8012ef0 <memp_malloc>
 801d306:	4603      	mov	r3, r0
}
 801d308:	4618      	mov	r0, r3
 801d30a:	bd80      	pop	{r7, pc}

0801d30c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801d30c:	b580      	push	{r7, lr}
 801d30e:	b082      	sub	sp, #8
 801d310:	af00      	add	r7, sp, #0
 801d312:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	2b00      	cmp	r3, #0
 801d318:	d106      	bne.n	801d328 <ip_frag_free_pbuf_custom_ref+0x1c>
 801d31a:	4b07      	ldr	r3, [pc, #28]	; (801d338 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801d31c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801d320:	4906      	ldr	r1, [pc, #24]	; (801d33c <ip_frag_free_pbuf_custom_ref+0x30>)
 801d322:	4807      	ldr	r0, [pc, #28]	; (801d340 <ip_frag_free_pbuf_custom_ref+0x34>)
 801d324:	f001 fd1c 	bl	801ed60 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801d328:	6879      	ldr	r1, [r7, #4]
 801d32a:	2005      	movs	r0, #5
 801d32c:	f7f5 fe32 	bl	8012f94 <memp_free>
}
 801d330:	bf00      	nop
 801d332:	3708      	adds	r7, #8
 801d334:	46bd      	mov	sp, r7
 801d336:	bd80      	pop	{r7, pc}
 801d338:	08025990 	.word	0x08025990
 801d33c:	08025b48 	.word	0x08025b48
 801d340:	080259d8 	.word	0x080259d8

0801d344 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801d344:	b580      	push	{r7, lr}
 801d346:	b084      	sub	sp, #16
 801d348:	af00      	add	r7, sp, #0
 801d34a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801d34c:	687b      	ldr	r3, [r7, #4]
 801d34e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801d350:	68fb      	ldr	r3, [r7, #12]
 801d352:	2b00      	cmp	r3, #0
 801d354:	d106      	bne.n	801d364 <ipfrag_free_pbuf_custom+0x20>
 801d356:	4b11      	ldr	r3, [pc, #68]	; (801d39c <ipfrag_free_pbuf_custom+0x58>)
 801d358:	f240 22ce 	movw	r2, #718	; 0x2ce
 801d35c:	4910      	ldr	r1, [pc, #64]	; (801d3a0 <ipfrag_free_pbuf_custom+0x5c>)
 801d35e:	4811      	ldr	r0, [pc, #68]	; (801d3a4 <ipfrag_free_pbuf_custom+0x60>)
 801d360:	f001 fcfe 	bl	801ed60 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801d364:	68fa      	ldr	r2, [r7, #12]
 801d366:	687b      	ldr	r3, [r7, #4]
 801d368:	429a      	cmp	r2, r3
 801d36a:	d006      	beq.n	801d37a <ipfrag_free_pbuf_custom+0x36>
 801d36c:	4b0b      	ldr	r3, [pc, #44]	; (801d39c <ipfrag_free_pbuf_custom+0x58>)
 801d36e:	f240 22cf 	movw	r2, #719	; 0x2cf
 801d372:	490d      	ldr	r1, [pc, #52]	; (801d3a8 <ipfrag_free_pbuf_custom+0x64>)
 801d374:	480b      	ldr	r0, [pc, #44]	; (801d3a4 <ipfrag_free_pbuf_custom+0x60>)
 801d376:	f001 fcf3 	bl	801ed60 <iprintf>
  if (pcr->original != NULL) {
 801d37a:	68fb      	ldr	r3, [r7, #12]
 801d37c:	695b      	ldr	r3, [r3, #20]
 801d37e:	2b00      	cmp	r3, #0
 801d380:	d004      	beq.n	801d38c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801d382:	68fb      	ldr	r3, [r7, #12]
 801d384:	695b      	ldr	r3, [r3, #20]
 801d386:	4618      	mov	r0, r3
 801d388:	f7f6 fc82 	bl	8013c90 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801d38c:	68f8      	ldr	r0, [r7, #12]
 801d38e:	f7ff ffbd 	bl	801d30c <ip_frag_free_pbuf_custom_ref>
}
 801d392:	bf00      	nop
 801d394:	3710      	adds	r7, #16
 801d396:	46bd      	mov	sp, r7
 801d398:	bd80      	pop	{r7, pc}
 801d39a:	bf00      	nop
 801d39c:	08025990 	.word	0x08025990
 801d3a0:	08025b54 	.word	0x08025b54
 801d3a4:	080259d8 	.word	0x080259d8
 801d3a8:	08025b60 	.word	0x08025b60

0801d3ac <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801d3ac:	b580      	push	{r7, lr}
 801d3ae:	b094      	sub	sp, #80	; 0x50
 801d3b0:	af02      	add	r7, sp, #8
 801d3b2:	60f8      	str	r0, [r7, #12]
 801d3b4:	60b9      	str	r1, [r7, #8]
 801d3b6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801d3b8:	2300      	movs	r3, #0
 801d3ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801d3be:	68bb      	ldr	r3, [r7, #8]
 801d3c0:	8c1b      	ldrh	r3, [r3, #32]
 801d3c2:	3b14      	subs	r3, #20
 801d3c4:	2b00      	cmp	r3, #0
 801d3c6:	da00      	bge.n	801d3ca <ip4_frag+0x1e>
 801d3c8:	3307      	adds	r3, #7
 801d3ca:	10db      	asrs	r3, r3, #3
 801d3cc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801d3ce:	2314      	movs	r3, #20
 801d3d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801d3d2:	68fb      	ldr	r3, [r7, #12]
 801d3d4:	685b      	ldr	r3, [r3, #4]
 801d3d6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801d3d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d3da:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801d3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3de:	781b      	ldrb	r3, [r3, #0]
 801d3e0:	f003 030f 	and.w	r3, r3, #15
 801d3e4:	b2db      	uxtb	r3, r3
 801d3e6:	009b      	lsls	r3, r3, #2
 801d3e8:	b2db      	uxtb	r3, r3
 801d3ea:	2b14      	cmp	r3, #20
 801d3ec:	d002      	beq.n	801d3f4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801d3ee:	f06f 0305 	mvn.w	r3, #5
 801d3f2:	e110      	b.n	801d616 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801d3f4:	68fb      	ldr	r3, [r7, #12]
 801d3f6:	895b      	ldrh	r3, [r3, #10]
 801d3f8:	2b13      	cmp	r3, #19
 801d3fa:	d809      	bhi.n	801d410 <ip4_frag+0x64>
 801d3fc:	4b88      	ldr	r3, [pc, #544]	; (801d620 <ip4_frag+0x274>)
 801d3fe:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801d402:	4988      	ldr	r1, [pc, #544]	; (801d624 <ip4_frag+0x278>)
 801d404:	4888      	ldr	r0, [pc, #544]	; (801d628 <ip4_frag+0x27c>)
 801d406:	f001 fcab 	bl	801ed60 <iprintf>
 801d40a:	f06f 0305 	mvn.w	r3, #5
 801d40e:	e102      	b.n	801d616 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801d410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d412:	88db      	ldrh	r3, [r3, #6]
 801d414:	b29b      	uxth	r3, r3
 801d416:	4618      	mov	r0, r3
 801d418:	f7f5 f87e 	bl	8012518 <lwip_htons>
 801d41c:	4603      	mov	r3, r0
 801d41e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801d420:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d422:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d426:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801d42a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d42c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d430:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801d432:	68fb      	ldr	r3, [r7, #12]
 801d434:	891b      	ldrh	r3, [r3, #8]
 801d436:	3b14      	subs	r3, #20
 801d438:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801d43c:	e0e1      	b.n	801d602 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801d43e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d440:	00db      	lsls	r3, r3, #3
 801d442:	b29b      	uxth	r3, r3
 801d444:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d448:	4293      	cmp	r3, r2
 801d44a:	bf28      	it	cs
 801d44c:	4613      	movcs	r3, r2
 801d44e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801d450:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d454:	2114      	movs	r1, #20
 801d456:	200e      	movs	r0, #14
 801d458:	f7f6 f936 	bl	80136c8 <pbuf_alloc>
 801d45c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801d45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d460:	2b00      	cmp	r3, #0
 801d462:	f000 80d5 	beq.w	801d610 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801d466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d468:	895b      	ldrh	r3, [r3, #10]
 801d46a:	2b13      	cmp	r3, #19
 801d46c:	d806      	bhi.n	801d47c <ip4_frag+0xd0>
 801d46e:	4b6c      	ldr	r3, [pc, #432]	; (801d620 <ip4_frag+0x274>)
 801d470:	f44f 7249 	mov.w	r2, #804	; 0x324
 801d474:	496d      	ldr	r1, [pc, #436]	; (801d62c <ip4_frag+0x280>)
 801d476:	486c      	ldr	r0, [pc, #432]	; (801d628 <ip4_frag+0x27c>)
 801d478:	f001 fc72 	bl	801ed60 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801d47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d47e:	685b      	ldr	r3, [r3, #4]
 801d480:	2214      	movs	r2, #20
 801d482:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d484:	4618      	mov	r0, r3
 801d486:	f001 f9bd 	bl	801e804 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801d48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d48c:	685b      	ldr	r3, [r3, #4]
 801d48e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801d490:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d492:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801d496:	e064      	b.n	801d562 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801d498:	68fb      	ldr	r3, [r7, #12]
 801d49a:	895a      	ldrh	r2, [r3, #10]
 801d49c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d49e:	1ad3      	subs	r3, r2, r3
 801d4a0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801d4a2:	68fb      	ldr	r3, [r7, #12]
 801d4a4:	895b      	ldrh	r3, [r3, #10]
 801d4a6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801d4a8:	429a      	cmp	r2, r3
 801d4aa:	d906      	bls.n	801d4ba <ip4_frag+0x10e>
 801d4ac:	4b5c      	ldr	r3, [pc, #368]	; (801d620 <ip4_frag+0x274>)
 801d4ae:	f240 322d 	movw	r2, #813	; 0x32d
 801d4b2:	495f      	ldr	r1, [pc, #380]	; (801d630 <ip4_frag+0x284>)
 801d4b4:	485c      	ldr	r0, [pc, #368]	; (801d628 <ip4_frag+0x27c>)
 801d4b6:	f001 fc53 	bl	801ed60 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801d4ba:	8bfa      	ldrh	r2, [r7, #30]
 801d4bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d4c0:	4293      	cmp	r3, r2
 801d4c2:	bf28      	it	cs
 801d4c4:	4613      	movcs	r3, r2
 801d4c6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801d4ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d4ce:	2b00      	cmp	r3, #0
 801d4d0:	d105      	bne.n	801d4de <ip4_frag+0x132>
        poff = 0;
 801d4d2:	2300      	movs	r3, #0
 801d4d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801d4d6:	68fb      	ldr	r3, [r7, #12]
 801d4d8:	681b      	ldr	r3, [r3, #0]
 801d4da:	60fb      	str	r3, [r7, #12]
        continue;
 801d4dc:	e041      	b.n	801d562 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801d4de:	f7ff ff0d 	bl	801d2fc <ip_frag_alloc_pbuf_custom_ref>
 801d4e2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801d4e4:	69bb      	ldr	r3, [r7, #24]
 801d4e6:	2b00      	cmp	r3, #0
 801d4e8:	d103      	bne.n	801d4f2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801d4ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d4ec:	f7f6 fbd0 	bl	8013c90 <pbuf_free>
        goto memerr;
 801d4f0:	e08f      	b.n	801d612 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d4f2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801d4f4:	68fb      	ldr	r3, [r7, #12]
 801d4f6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d4f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d4fa:	4413      	add	r3, r2
 801d4fc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801d500:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801d504:	9201      	str	r2, [sp, #4]
 801d506:	9300      	str	r3, [sp, #0]
 801d508:	4603      	mov	r3, r0
 801d50a:	2241      	movs	r2, #65	; 0x41
 801d50c:	2000      	movs	r0, #0
 801d50e:	f7f6 fa05 	bl	801391c <pbuf_alloced_custom>
 801d512:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801d514:	697b      	ldr	r3, [r7, #20]
 801d516:	2b00      	cmp	r3, #0
 801d518:	d106      	bne.n	801d528 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801d51a:	69b8      	ldr	r0, [r7, #24]
 801d51c:	f7ff fef6 	bl	801d30c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801d520:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d522:	f7f6 fbb5 	bl	8013c90 <pbuf_free>
        goto memerr;
 801d526:	e074      	b.n	801d612 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801d528:	68f8      	ldr	r0, [r7, #12]
 801d52a:	f7f6 fc57 	bl	8013ddc <pbuf_ref>
      pcr->original = p;
 801d52e:	69bb      	ldr	r3, [r7, #24]
 801d530:	68fa      	ldr	r2, [r7, #12]
 801d532:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801d534:	69bb      	ldr	r3, [r7, #24]
 801d536:	4a3f      	ldr	r2, [pc, #252]	; (801d634 <ip4_frag+0x288>)
 801d538:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801d53a:	6979      	ldr	r1, [r7, #20]
 801d53c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d53e:	f7f6 fc75 	bl	8013e2c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801d542:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801d546:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d54a:	1ad3      	subs	r3, r2, r3
 801d54c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801d550:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d554:	2b00      	cmp	r3, #0
 801d556:	d004      	beq.n	801d562 <ip4_frag+0x1b6>
        poff = 0;
 801d558:	2300      	movs	r3, #0
 801d55a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801d55c:	68fb      	ldr	r3, [r7, #12]
 801d55e:	681b      	ldr	r3, [r3, #0]
 801d560:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801d562:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d566:	2b00      	cmp	r3, #0
 801d568:	d196      	bne.n	801d498 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801d56a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801d56c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d570:	4413      	add	r3, r2
 801d572:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801d574:	68bb      	ldr	r3, [r7, #8]
 801d576:	8c1b      	ldrh	r3, [r3, #32]
 801d578:	f1a3 0213 	sub.w	r2, r3, #19
 801d57c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d580:	429a      	cmp	r2, r3
 801d582:	bfcc      	ite	gt
 801d584:	2301      	movgt	r3, #1
 801d586:	2300      	movle	r3, #0
 801d588:	b2db      	uxtb	r3, r3
 801d58a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801d58c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d590:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d594:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801d596:	6a3b      	ldr	r3, [r7, #32]
 801d598:	2b00      	cmp	r3, #0
 801d59a:	d002      	beq.n	801d5a2 <ip4_frag+0x1f6>
 801d59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d59e:	2b00      	cmp	r3, #0
 801d5a0:	d003      	beq.n	801d5aa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801d5a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d5a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801d5a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801d5aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d5ac:	4618      	mov	r0, r3
 801d5ae:	f7f4 ffb3 	bl	8012518 <lwip_htons>
 801d5b2:	4603      	mov	r3, r0
 801d5b4:	461a      	mov	r2, r3
 801d5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5b8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801d5ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d5bc:	3314      	adds	r3, #20
 801d5be:	b29b      	uxth	r3, r3
 801d5c0:	4618      	mov	r0, r3
 801d5c2:	f7f4 ffa9 	bl	8012518 <lwip_htons>
 801d5c6:	4603      	mov	r3, r0
 801d5c8:	461a      	mov	r2, r3
 801d5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5cc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801d5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5d0:	2200      	movs	r2, #0
 801d5d2:	729a      	strb	r2, [r3, #10]
 801d5d4:	2200      	movs	r2, #0
 801d5d6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801d5d8:	68bb      	ldr	r3, [r7, #8]
 801d5da:	695b      	ldr	r3, [r3, #20]
 801d5dc:	687a      	ldr	r2, [r7, #4]
 801d5de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d5e0:	68b8      	ldr	r0, [r7, #8]
 801d5e2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801d5e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d5e6:	f7f6 fb53 	bl	8013c90 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801d5ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d5ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d5f0:	1ad3      	subs	r3, r2, r3
 801d5f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801d5f6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801d5fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d5fc:	4413      	add	r3, r2
 801d5fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801d602:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d606:	2b00      	cmp	r3, #0
 801d608:	f47f af19 	bne.w	801d43e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801d60c:	2300      	movs	r3, #0
 801d60e:	e002      	b.n	801d616 <ip4_frag+0x26a>
      goto memerr;
 801d610:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801d612:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d616:	4618      	mov	r0, r3
 801d618:	3748      	adds	r7, #72	; 0x48
 801d61a:	46bd      	mov	sp, r7
 801d61c:	bd80      	pop	{r7, pc}
 801d61e:	bf00      	nop
 801d620:	08025990 	.word	0x08025990
 801d624:	08025b6c 	.word	0x08025b6c
 801d628:	080259d8 	.word	0x080259d8
 801d62c:	08025b88 	.word	0x08025b88
 801d630:	08025ba8 	.word	0x08025ba8
 801d634:	0801d345 	.word	0x0801d345

0801d638 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801d638:	b580      	push	{r7, lr}
 801d63a:	b086      	sub	sp, #24
 801d63c:	af00      	add	r7, sp, #0
 801d63e:	6078      	str	r0, [r7, #4]
 801d640:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801d642:	230e      	movs	r3, #14
 801d644:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801d646:	687b      	ldr	r3, [r7, #4]
 801d648:	895b      	ldrh	r3, [r3, #10]
 801d64a:	2b0e      	cmp	r3, #14
 801d64c:	d96e      	bls.n	801d72c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801d64e:	687b      	ldr	r3, [r7, #4]
 801d650:	7bdb      	ldrb	r3, [r3, #15]
 801d652:	2b00      	cmp	r3, #0
 801d654:	d106      	bne.n	801d664 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801d656:	683b      	ldr	r3, [r7, #0]
 801d658:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801d65c:	3301      	adds	r3, #1
 801d65e:	b2da      	uxtb	r2, r3
 801d660:	687b      	ldr	r3, [r7, #4]
 801d662:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801d664:	687b      	ldr	r3, [r7, #4]
 801d666:	685b      	ldr	r3, [r3, #4]
 801d668:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801d66a:	693b      	ldr	r3, [r7, #16]
 801d66c:	7b1a      	ldrb	r2, [r3, #12]
 801d66e:	7b5b      	ldrb	r3, [r3, #13]
 801d670:	021b      	lsls	r3, r3, #8
 801d672:	4313      	orrs	r3, r2
 801d674:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801d676:	693b      	ldr	r3, [r7, #16]
 801d678:	781b      	ldrb	r3, [r3, #0]
 801d67a:	f003 0301 	and.w	r3, r3, #1
 801d67e:	2b00      	cmp	r3, #0
 801d680:	d023      	beq.n	801d6ca <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801d682:	693b      	ldr	r3, [r7, #16]
 801d684:	781b      	ldrb	r3, [r3, #0]
 801d686:	2b01      	cmp	r3, #1
 801d688:	d10f      	bne.n	801d6aa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d68a:	693b      	ldr	r3, [r7, #16]
 801d68c:	785b      	ldrb	r3, [r3, #1]
 801d68e:	2b00      	cmp	r3, #0
 801d690:	d11b      	bne.n	801d6ca <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801d692:	693b      	ldr	r3, [r7, #16]
 801d694:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d696:	2b5e      	cmp	r3, #94	; 0x5e
 801d698:	d117      	bne.n	801d6ca <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801d69a:	687b      	ldr	r3, [r7, #4]
 801d69c:	7b5b      	ldrb	r3, [r3, #13]
 801d69e:	f043 0310 	orr.w	r3, r3, #16
 801d6a2:	b2da      	uxtb	r2, r3
 801d6a4:	687b      	ldr	r3, [r7, #4]
 801d6a6:	735a      	strb	r2, [r3, #13]
 801d6a8:	e00f      	b.n	801d6ca <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801d6aa:	693b      	ldr	r3, [r7, #16]
 801d6ac:	2206      	movs	r2, #6
 801d6ae:	4928      	ldr	r1, [pc, #160]	; (801d750 <ethernet_input+0x118>)
 801d6b0:	4618      	mov	r0, r3
 801d6b2:	f001 f899 	bl	801e7e8 <memcmp>
 801d6b6:	4603      	mov	r3, r0
 801d6b8:	2b00      	cmp	r3, #0
 801d6ba:	d106      	bne.n	801d6ca <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	7b5b      	ldrb	r3, [r3, #13]
 801d6c0:	f043 0308 	orr.w	r3, r3, #8
 801d6c4:	b2da      	uxtb	r2, r3
 801d6c6:	687b      	ldr	r3, [r7, #4]
 801d6c8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801d6ca:	89fb      	ldrh	r3, [r7, #14]
 801d6cc:	2b08      	cmp	r3, #8
 801d6ce:	d003      	beq.n	801d6d8 <ethernet_input+0xa0>
 801d6d0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801d6d4:	d014      	beq.n	801d700 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801d6d6:	e032      	b.n	801d73e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d6d8:	683b      	ldr	r3, [r7, #0]
 801d6da:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801d6de:	f003 0308 	and.w	r3, r3, #8
 801d6e2:	2b00      	cmp	r3, #0
 801d6e4:	d024      	beq.n	801d730 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d6e6:	8afb      	ldrh	r3, [r7, #22]
 801d6e8:	4619      	mov	r1, r3
 801d6ea:	6878      	ldr	r0, [r7, #4]
 801d6ec:	f7f6 fa4a 	bl	8013b84 <pbuf_remove_header>
 801d6f0:	4603      	mov	r3, r0
 801d6f2:	2b00      	cmp	r3, #0
 801d6f4:	d11e      	bne.n	801d734 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801d6f6:	6839      	ldr	r1, [r7, #0]
 801d6f8:	6878      	ldr	r0, [r7, #4]
 801d6fa:	f7fe fdfd 	bl	801c2f8 <ip4_input>
      break;
 801d6fe:	e013      	b.n	801d728 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d700:	683b      	ldr	r3, [r7, #0]
 801d702:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801d706:	f003 0308 	and.w	r3, r3, #8
 801d70a:	2b00      	cmp	r3, #0
 801d70c:	d014      	beq.n	801d738 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d70e:	8afb      	ldrh	r3, [r7, #22]
 801d710:	4619      	mov	r1, r3
 801d712:	6878      	ldr	r0, [r7, #4]
 801d714:	f7f6 fa36 	bl	8013b84 <pbuf_remove_header>
 801d718:	4603      	mov	r3, r0
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	d10e      	bne.n	801d73c <ethernet_input+0x104>
        etharp_input(p, netif);
 801d71e:	6839      	ldr	r1, [r7, #0]
 801d720:	6878      	ldr	r0, [r7, #4]
 801d722:	f7fd ff9d 	bl	801b660 <etharp_input>
      break;
 801d726:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801d728:	2300      	movs	r3, #0
 801d72a:	e00c      	b.n	801d746 <ethernet_input+0x10e>
    goto free_and_return;
 801d72c:	bf00      	nop
 801d72e:	e006      	b.n	801d73e <ethernet_input+0x106>
        goto free_and_return;
 801d730:	bf00      	nop
 801d732:	e004      	b.n	801d73e <ethernet_input+0x106>
        goto free_and_return;
 801d734:	bf00      	nop
 801d736:	e002      	b.n	801d73e <ethernet_input+0x106>
        goto free_and_return;
 801d738:	bf00      	nop
 801d73a:	e000      	b.n	801d73e <ethernet_input+0x106>
        goto free_and_return;
 801d73c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801d73e:	6878      	ldr	r0, [r7, #4]
 801d740:	f7f6 faa6 	bl	8013c90 <pbuf_free>
  return ERR_OK;
 801d744:	2300      	movs	r3, #0
}
 801d746:	4618      	mov	r0, r3
 801d748:	3718      	adds	r7, #24
 801d74a:	46bd      	mov	sp, r7
 801d74c:	bd80      	pop	{r7, pc}
 801d74e:	bf00      	nop
 801d750:	08026ca8 	.word	0x08026ca8

0801d754 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801d754:	b580      	push	{r7, lr}
 801d756:	b086      	sub	sp, #24
 801d758:	af00      	add	r7, sp, #0
 801d75a:	60f8      	str	r0, [r7, #12]
 801d75c:	60b9      	str	r1, [r7, #8]
 801d75e:	607a      	str	r2, [r7, #4]
 801d760:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801d762:	8c3b      	ldrh	r3, [r7, #32]
 801d764:	4618      	mov	r0, r3
 801d766:	f7f4 fed7 	bl	8012518 <lwip_htons>
 801d76a:	4603      	mov	r3, r0
 801d76c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801d76e:	210e      	movs	r1, #14
 801d770:	68b8      	ldr	r0, [r7, #8]
 801d772:	f7f6 f9f7 	bl	8013b64 <pbuf_add_header>
 801d776:	4603      	mov	r3, r0
 801d778:	2b00      	cmp	r3, #0
 801d77a:	d125      	bne.n	801d7c8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801d77c:	68bb      	ldr	r3, [r7, #8]
 801d77e:	685b      	ldr	r3, [r3, #4]
 801d780:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801d782:	693b      	ldr	r3, [r7, #16]
 801d784:	8afa      	ldrh	r2, [r7, #22]
 801d786:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801d788:	693b      	ldr	r3, [r7, #16]
 801d78a:	2206      	movs	r2, #6
 801d78c:	6839      	ldr	r1, [r7, #0]
 801d78e:	4618      	mov	r0, r3
 801d790:	f001 f838 	bl	801e804 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801d794:	693b      	ldr	r3, [r7, #16]
 801d796:	3306      	adds	r3, #6
 801d798:	2206      	movs	r2, #6
 801d79a:	6879      	ldr	r1, [r7, #4]
 801d79c:	4618      	mov	r0, r3
 801d79e:	f001 f831 	bl	801e804 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801d7a2:	68fb      	ldr	r3, [r7, #12]
 801d7a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801d7a8:	2b06      	cmp	r3, #6
 801d7aa:	d006      	beq.n	801d7ba <ethernet_output+0x66>
 801d7ac:	4b0a      	ldr	r3, [pc, #40]	; (801d7d8 <ethernet_output+0x84>)
 801d7ae:	f44f 7299 	mov.w	r2, #306	; 0x132
 801d7b2:	490a      	ldr	r1, [pc, #40]	; (801d7dc <ethernet_output+0x88>)
 801d7b4:	480a      	ldr	r0, [pc, #40]	; (801d7e0 <ethernet_output+0x8c>)
 801d7b6:	f001 fad3 	bl	801ed60 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801d7ba:	68fb      	ldr	r3, [r7, #12]
 801d7bc:	699b      	ldr	r3, [r3, #24]
 801d7be:	68b9      	ldr	r1, [r7, #8]
 801d7c0:	68f8      	ldr	r0, [r7, #12]
 801d7c2:	4798      	blx	r3
 801d7c4:	4603      	mov	r3, r0
 801d7c6:	e002      	b.n	801d7ce <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801d7c8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801d7ca:	f06f 0301 	mvn.w	r3, #1
}
 801d7ce:	4618      	mov	r0, r3
 801d7d0:	3718      	adds	r7, #24
 801d7d2:	46bd      	mov	sp, r7
 801d7d4:	bd80      	pop	{r7, pc}
 801d7d6:	bf00      	nop
 801d7d8:	08025bb8 	.word	0x08025bb8
 801d7dc:	08025bf0 	.word	0x08025bf0
 801d7e0:	08025c24 	.word	0x08025c24

0801d7e4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801d7e4:	b580      	push	{r7, lr}
 801d7e6:	b086      	sub	sp, #24
 801d7e8:	af00      	add	r7, sp, #0
 801d7ea:	6078      	str	r0, [r7, #4]
 801d7ec:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801d7ee:	683b      	ldr	r3, [r7, #0]
 801d7f0:	60bb      	str	r3, [r7, #8]
 801d7f2:	2304      	movs	r3, #4
 801d7f4:	60fb      	str	r3, [r7, #12]
 801d7f6:	2300      	movs	r3, #0
 801d7f8:	613b      	str	r3, [r7, #16]
 801d7fa:	2300      	movs	r3, #0
 801d7fc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801d7fe:	f107 0308 	add.w	r3, r7, #8
 801d802:	2100      	movs	r1, #0
 801d804:	4618      	mov	r0, r3
 801d806:	f7ef f904 	bl	800ca12 <osMessageCreate>
 801d80a:	4602      	mov	r2, r0
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	681b      	ldr	r3, [r3, #0]
 801d814:	2b00      	cmp	r3, #0
 801d816:	d102      	bne.n	801d81e <sys_mbox_new+0x3a>
    return ERR_MEM;
 801d818:	f04f 33ff 	mov.w	r3, #4294967295
 801d81c:	e000      	b.n	801d820 <sys_mbox_new+0x3c>

  return ERR_OK;
 801d81e:	2300      	movs	r3, #0
}
 801d820:	4618      	mov	r0, r3
 801d822:	3718      	adds	r7, #24
 801d824:	46bd      	mov	sp, r7
 801d826:	bd80      	pop	{r7, pc}

0801d828 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801d828:	b580      	push	{r7, lr}
 801d82a:	b082      	sub	sp, #8
 801d82c:	af00      	add	r7, sp, #0
 801d82e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801d830:	687b      	ldr	r3, [r7, #4]
 801d832:	681b      	ldr	r3, [r3, #0]
 801d834:	4618      	mov	r0, r3
 801d836:	f7ef f9c9 	bl	800cbcc <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801d83a:	687b      	ldr	r3, [r7, #4]
 801d83c:	681b      	ldr	r3, [r3, #0]
 801d83e:	4618      	mov	r0, r3
 801d840:	f7ef f9da 	bl	800cbf8 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801d844:	bf00      	nop
 801d846:	3708      	adds	r7, #8
 801d848:	46bd      	mov	sp, r7
 801d84a:	bd80      	pop	{r7, pc}

0801d84c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801d84c:	b580      	push	{r7, lr}
 801d84e:	b084      	sub	sp, #16
 801d850:	af00      	add	r7, sp, #0
 801d852:	6078      	str	r0, [r7, #4]
 801d854:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801d856:	687b      	ldr	r3, [r7, #4]
 801d858:	681b      	ldr	r3, [r3, #0]
 801d85a:	6839      	ldr	r1, [r7, #0]
 801d85c:	2200      	movs	r2, #0
 801d85e:	4618      	mov	r0, r3
 801d860:	f7ef f900 	bl	800ca64 <osMessagePut>
 801d864:	4603      	mov	r3, r0
 801d866:	2b00      	cmp	r3, #0
 801d868:	d102      	bne.n	801d870 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801d86a:	2300      	movs	r3, #0
 801d86c:	73fb      	strb	r3, [r7, #15]
 801d86e:	e001      	b.n	801d874 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801d870:	23ff      	movs	r3, #255	; 0xff
 801d872:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801d874:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d878:	4618      	mov	r0, r3
 801d87a:	3710      	adds	r7, #16
 801d87c:	46bd      	mov	sp, r7
 801d87e:	bd80      	pop	{r7, pc}

0801d880 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801d880:	b580      	push	{r7, lr}
 801d882:	b08c      	sub	sp, #48	; 0x30
 801d884:	af00      	add	r7, sp, #0
 801d886:	61f8      	str	r0, [r7, #28]
 801d888:	61b9      	str	r1, [r7, #24]
 801d88a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801d88c:	f7ee ff00 	bl	800c690 <osKernelSysTick>
 801d890:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801d892:	697b      	ldr	r3, [r7, #20]
 801d894:	2b00      	cmp	r3, #0
 801d896:	d017      	beq.n	801d8c8 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801d898:	69fb      	ldr	r3, [r7, #28]
 801d89a:	6819      	ldr	r1, [r3, #0]
 801d89c:	f107 0320 	add.w	r3, r7, #32
 801d8a0:	697a      	ldr	r2, [r7, #20]
 801d8a2:	4618      	mov	r0, r3
 801d8a4:	f7ef f91e 	bl	800cae4 <osMessageGet>

    if(event.status == osEventMessage)
 801d8a8:	6a3b      	ldr	r3, [r7, #32]
 801d8aa:	2b10      	cmp	r3, #16
 801d8ac:	d109      	bne.n	801d8c2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801d8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8b0:	461a      	mov	r2, r3
 801d8b2:	69bb      	ldr	r3, [r7, #24]
 801d8b4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801d8b6:	f7ee feeb 	bl	800c690 <osKernelSysTick>
 801d8ba:	4602      	mov	r2, r0
 801d8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8be:	1ad3      	subs	r3, r2, r3
 801d8c0:	e019      	b.n	801d8f6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801d8c2:	f04f 33ff 	mov.w	r3, #4294967295
 801d8c6:	e016      	b.n	801d8f6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801d8c8:	69fb      	ldr	r3, [r7, #28]
 801d8ca:	6819      	ldr	r1, [r3, #0]
 801d8cc:	463b      	mov	r3, r7
 801d8ce:	f04f 32ff 	mov.w	r2, #4294967295
 801d8d2:	4618      	mov	r0, r3
 801d8d4:	f7ef f906 	bl	800cae4 <osMessageGet>
 801d8d8:	f107 0320 	add.w	r3, r7, #32
 801d8dc:	463a      	mov	r2, r7
 801d8de:	ca07      	ldmia	r2, {r0, r1, r2}
 801d8e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801d8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8e6:	461a      	mov	r2, r3
 801d8e8:	69bb      	ldr	r3, [r7, #24]
 801d8ea:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801d8ec:	f7ee fed0 	bl	800c690 <osKernelSysTick>
 801d8f0:	4602      	mov	r2, r0
 801d8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8f4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801d8f6:	4618      	mov	r0, r3
 801d8f8:	3730      	adds	r7, #48	; 0x30
 801d8fa:	46bd      	mov	sp, r7
 801d8fc:	bd80      	pop	{r7, pc}

0801d8fe <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801d8fe:	b580      	push	{r7, lr}
 801d900:	b086      	sub	sp, #24
 801d902:	af00      	add	r7, sp, #0
 801d904:	6078      	str	r0, [r7, #4]
 801d906:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801d908:	687b      	ldr	r3, [r7, #4]
 801d90a:	6819      	ldr	r1, [r3, #0]
 801d90c:	f107 030c 	add.w	r3, r7, #12
 801d910:	2200      	movs	r2, #0
 801d912:	4618      	mov	r0, r3
 801d914:	f7ef f8e6 	bl	800cae4 <osMessageGet>

  if(event.status == osEventMessage)
 801d918:	68fb      	ldr	r3, [r7, #12]
 801d91a:	2b10      	cmp	r3, #16
 801d91c:	d105      	bne.n	801d92a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801d91e:	693b      	ldr	r3, [r7, #16]
 801d920:	461a      	mov	r2, r3
 801d922:	683b      	ldr	r3, [r7, #0]
 801d924:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801d926:	2300      	movs	r3, #0
 801d928:	e001      	b.n	801d92e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801d92a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801d92e:	4618      	mov	r0, r3
 801d930:	3718      	adds	r7, #24
 801d932:	46bd      	mov	sp, r7
 801d934:	bd80      	pop	{r7, pc}

0801d936 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801d936:	b480      	push	{r7}
 801d938:	b083      	sub	sp, #12
 801d93a:	af00      	add	r7, sp, #0
 801d93c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801d93e:	687b      	ldr	r3, [r7, #4]
 801d940:	681b      	ldr	r3, [r3, #0]
 801d942:	2b00      	cmp	r3, #0
 801d944:	d101      	bne.n	801d94a <sys_mbox_valid+0x14>
    return 0;
 801d946:	2300      	movs	r3, #0
 801d948:	e000      	b.n	801d94c <sys_mbox_valid+0x16>
  else
    return 1;
 801d94a:	2301      	movs	r3, #1
}
 801d94c:	4618      	mov	r0, r3
 801d94e:	370c      	adds	r7, #12
 801d950:	46bd      	mov	sp, r7
 801d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d956:	4770      	bx	lr

0801d958 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801d958:	b480      	push	{r7}
 801d95a:	b083      	sub	sp, #12
 801d95c:	af00      	add	r7, sp, #0
 801d95e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801d960:	687b      	ldr	r3, [r7, #4]
 801d962:	2200      	movs	r2, #0
 801d964:	601a      	str	r2, [r3, #0]
}
 801d966:	bf00      	nop
 801d968:	370c      	adds	r7, #12
 801d96a:	46bd      	mov	sp, r7
 801d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d970:	4770      	bx	lr

0801d972 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801d972:	b580      	push	{r7, lr}
 801d974:	b084      	sub	sp, #16
 801d976:	af00      	add	r7, sp, #0
 801d978:	6078      	str	r0, [r7, #4]
 801d97a:	460b      	mov	r3, r1
 801d97c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801d97e:	2300      	movs	r3, #0
 801d980:	60bb      	str	r3, [r7, #8]
 801d982:	2300      	movs	r3, #0
 801d984:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801d986:	f107 0308 	add.w	r3, r7, #8
 801d98a:	2101      	movs	r1, #1
 801d98c:	4618      	mov	r0, r3
 801d98e:	f7ee ff77 	bl	800c880 <osSemaphoreCreate>
 801d992:	4602      	mov	r2, r0
 801d994:	687b      	ldr	r3, [r7, #4]
 801d996:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801d998:	687b      	ldr	r3, [r7, #4]
 801d99a:	681b      	ldr	r3, [r3, #0]
 801d99c:	2b00      	cmp	r3, #0
 801d99e:	d102      	bne.n	801d9a6 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801d9a0:	f04f 33ff 	mov.w	r3, #4294967295
 801d9a4:	e009      	b.n	801d9ba <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801d9a6:	78fb      	ldrb	r3, [r7, #3]
 801d9a8:	2b00      	cmp	r3, #0
 801d9aa:	d105      	bne.n	801d9b8 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	681b      	ldr	r3, [r3, #0]
 801d9b0:	2100      	movs	r1, #0
 801d9b2:	4618      	mov	r0, r3
 801d9b4:	f7ee ff96 	bl	800c8e4 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801d9b8:	2300      	movs	r3, #0
}
 801d9ba:	4618      	mov	r0, r3
 801d9bc:	3710      	adds	r7, #16
 801d9be:	46bd      	mov	sp, r7
 801d9c0:	bd80      	pop	{r7, pc}

0801d9c2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801d9c2:	b580      	push	{r7, lr}
 801d9c4:	b084      	sub	sp, #16
 801d9c6:	af00      	add	r7, sp, #0
 801d9c8:	6078      	str	r0, [r7, #4]
 801d9ca:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801d9cc:	f7ee fe60 	bl	800c690 <osKernelSysTick>
 801d9d0:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801d9d2:	683b      	ldr	r3, [r7, #0]
 801d9d4:	2b00      	cmp	r3, #0
 801d9d6:	d011      	beq.n	801d9fc <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801d9d8:	687b      	ldr	r3, [r7, #4]
 801d9da:	681b      	ldr	r3, [r3, #0]
 801d9dc:	6839      	ldr	r1, [r7, #0]
 801d9de:	4618      	mov	r0, r3
 801d9e0:	f7ee ff80 	bl	800c8e4 <osSemaphoreWait>
 801d9e4:	4603      	mov	r3, r0
 801d9e6:	2b00      	cmp	r3, #0
 801d9e8:	d105      	bne.n	801d9f6 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801d9ea:	f7ee fe51 	bl	800c690 <osKernelSysTick>
 801d9ee:	4602      	mov	r2, r0
 801d9f0:	68fb      	ldr	r3, [r7, #12]
 801d9f2:	1ad3      	subs	r3, r2, r3
 801d9f4:	e012      	b.n	801da1c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801d9f6:	f04f 33ff 	mov.w	r3, #4294967295
 801d9fa:	e00f      	b.n	801da1c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801d9fc:	bf00      	nop
 801d9fe:	687b      	ldr	r3, [r7, #4]
 801da00:	681b      	ldr	r3, [r3, #0]
 801da02:	f04f 31ff 	mov.w	r1, #4294967295
 801da06:	4618      	mov	r0, r3
 801da08:	f7ee ff6c 	bl	800c8e4 <osSemaphoreWait>
 801da0c:	4603      	mov	r3, r0
 801da0e:	2b00      	cmp	r3, #0
 801da10:	d1f5      	bne.n	801d9fe <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801da12:	f7ee fe3d 	bl	800c690 <osKernelSysTick>
 801da16:	4602      	mov	r2, r0
 801da18:	68fb      	ldr	r3, [r7, #12]
 801da1a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801da1c:	4618      	mov	r0, r3
 801da1e:	3710      	adds	r7, #16
 801da20:	46bd      	mov	sp, r7
 801da22:	bd80      	pop	{r7, pc}

0801da24 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801da24:	b580      	push	{r7, lr}
 801da26:	b082      	sub	sp, #8
 801da28:	af00      	add	r7, sp, #0
 801da2a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801da2c:	687b      	ldr	r3, [r7, #4]
 801da2e:	681b      	ldr	r3, [r3, #0]
 801da30:	4618      	mov	r0, r3
 801da32:	f7ee ffa5 	bl	800c980 <osSemaphoreRelease>
}
 801da36:	bf00      	nop
 801da38:	3708      	adds	r7, #8
 801da3a:	46bd      	mov	sp, r7
 801da3c:	bd80      	pop	{r7, pc}

0801da3e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801da3e:	b580      	push	{r7, lr}
 801da40:	b082      	sub	sp, #8
 801da42:	af00      	add	r7, sp, #0
 801da44:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801da46:	687b      	ldr	r3, [r7, #4]
 801da48:	681b      	ldr	r3, [r3, #0]
 801da4a:	4618      	mov	r0, r3
 801da4c:	f7ee ffce 	bl	800c9ec <osSemaphoreDelete>
}
 801da50:	bf00      	nop
 801da52:	3708      	adds	r7, #8
 801da54:	46bd      	mov	sp, r7
 801da56:	bd80      	pop	{r7, pc}

0801da58 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801da58:	b480      	push	{r7}
 801da5a:	b083      	sub	sp, #12
 801da5c:	af00      	add	r7, sp, #0
 801da5e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	681b      	ldr	r3, [r3, #0]
 801da64:	2b00      	cmp	r3, #0
 801da66:	d101      	bne.n	801da6c <sys_sem_valid+0x14>
    return 0;
 801da68:	2300      	movs	r3, #0
 801da6a:	e000      	b.n	801da6e <sys_sem_valid+0x16>
  else
    return 1;
 801da6c:	2301      	movs	r3, #1
}
 801da6e:	4618      	mov	r0, r3
 801da70:	370c      	adds	r7, #12
 801da72:	46bd      	mov	sp, r7
 801da74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da78:	4770      	bx	lr

0801da7a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801da7a:	b480      	push	{r7}
 801da7c:	b083      	sub	sp, #12
 801da7e:	af00      	add	r7, sp, #0
 801da80:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801da82:	687b      	ldr	r3, [r7, #4]
 801da84:	2200      	movs	r2, #0
 801da86:	601a      	str	r2, [r3, #0]
}
 801da88:	bf00      	nop
 801da8a:	370c      	adds	r7, #12
 801da8c:	46bd      	mov	sp, r7
 801da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da92:	4770      	bx	lr

0801da94 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801da94:	b580      	push	{r7, lr}
 801da96:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801da98:	4803      	ldr	r0, [pc, #12]	; (801daa8 <sys_init+0x14>)
 801da9a:	f7ee fe55 	bl	800c748 <osMutexCreate>
 801da9e:	4603      	mov	r3, r0
 801daa0:	4a02      	ldr	r2, [pc, #8]	; (801daac <sys_init+0x18>)
 801daa2:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801daa4:	bf00      	nop
 801daa6:	bd80      	pop	{r7, pc}
 801daa8:	08026cb8 	.word	0x08026cb8
 801daac:	2000b7bc 	.word	0x2000b7bc

0801dab0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801dab0:	b580      	push	{r7, lr}
 801dab2:	b084      	sub	sp, #16
 801dab4:	af00      	add	r7, sp, #0
 801dab6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801dab8:	2300      	movs	r3, #0
 801daba:	60bb      	str	r3, [r7, #8]
 801dabc:	2300      	movs	r3, #0
 801dabe:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801dac0:	f107 0308 	add.w	r3, r7, #8
 801dac4:	4618      	mov	r0, r3
 801dac6:	f7ee fe3f 	bl	800c748 <osMutexCreate>
 801daca:	4602      	mov	r2, r0
 801dacc:	687b      	ldr	r3, [r7, #4]
 801dace:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801dad0:	687b      	ldr	r3, [r7, #4]
 801dad2:	681b      	ldr	r3, [r3, #0]
 801dad4:	2b00      	cmp	r3, #0
 801dad6:	d102      	bne.n	801dade <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801dad8:	f04f 33ff 	mov.w	r3, #4294967295
 801dadc:	e000      	b.n	801dae0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801dade:	2300      	movs	r3, #0
}
 801dae0:	4618      	mov	r0, r3
 801dae2:	3710      	adds	r7, #16
 801dae4:	46bd      	mov	sp, r7
 801dae6:	bd80      	pop	{r7, pc}

0801dae8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801dae8:	b580      	push	{r7, lr}
 801daea:	b082      	sub	sp, #8
 801daec:	af00      	add	r7, sp, #0
 801daee:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	681b      	ldr	r3, [r3, #0]
 801daf4:	f04f 31ff 	mov.w	r1, #4294967295
 801daf8:	4618      	mov	r0, r3
 801dafa:	f7ee fe3d 	bl	800c778 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801dafe:	bf00      	nop
 801db00:	3708      	adds	r7, #8
 801db02:	46bd      	mov	sp, r7
 801db04:	bd80      	pop	{r7, pc}

0801db06 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801db06:	b580      	push	{r7, lr}
 801db08:	b082      	sub	sp, #8
 801db0a:	af00      	add	r7, sp, #0
 801db0c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801db0e:	687b      	ldr	r3, [r7, #4]
 801db10:	681b      	ldr	r3, [r3, #0]
 801db12:	4618      	mov	r0, r3
 801db14:	f7ee fe7e 	bl	800c814 <osMutexRelease>
}
 801db18:	bf00      	nop
 801db1a:	3708      	adds	r7, #8
 801db1c:	46bd      	mov	sp, r7
 801db1e:	bd80      	pop	{r7, pc}

0801db20 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801db20:	b580      	push	{r7, lr}
 801db22:	b08c      	sub	sp, #48	; 0x30
 801db24:	af00      	add	r7, sp, #0
 801db26:	60f8      	str	r0, [r7, #12]
 801db28:	60b9      	str	r1, [r7, #8]
 801db2a:	607a      	str	r2, [r7, #4]
 801db2c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801db2e:	f107 0314 	add.w	r3, r7, #20
 801db32:	2200      	movs	r2, #0
 801db34:	601a      	str	r2, [r3, #0]
 801db36:	605a      	str	r2, [r3, #4]
 801db38:	609a      	str	r2, [r3, #8]
 801db3a:	60da      	str	r2, [r3, #12]
 801db3c:	611a      	str	r2, [r3, #16]
 801db3e:	615a      	str	r2, [r3, #20]
 801db40:	619a      	str	r2, [r3, #24]
 801db42:	68fb      	ldr	r3, [r7, #12]
 801db44:	617b      	str	r3, [r7, #20]
 801db46:	68bb      	ldr	r3, [r7, #8]
 801db48:	61bb      	str	r3, [r7, #24]
 801db4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db4c:	b21b      	sxth	r3, r3
 801db4e:	83bb      	strh	r3, [r7, #28]
 801db50:	683b      	ldr	r3, [r7, #0]
 801db52:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801db54:	f107 0314 	add.w	r3, r7, #20
 801db58:	6879      	ldr	r1, [r7, #4]
 801db5a:	4618      	mov	r0, r3
 801db5c:	f7ee fda8 	bl	800c6b0 <osThreadCreate>
 801db60:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801db62:	4618      	mov	r0, r3
 801db64:	3730      	adds	r7, #48	; 0x30
 801db66:	46bd      	mov	sp, r7
 801db68:	bd80      	pop	{r7, pc}
	...

0801db6c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801db6c:	b580      	push	{r7, lr}
 801db6e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801db70:	4b04      	ldr	r3, [pc, #16]	; (801db84 <sys_arch_protect+0x18>)
 801db72:	681b      	ldr	r3, [r3, #0]
 801db74:	f04f 31ff 	mov.w	r1, #4294967295
 801db78:	4618      	mov	r0, r3
 801db7a:	f7ee fdfd 	bl	800c778 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801db7e:	2301      	movs	r3, #1
}
 801db80:	4618      	mov	r0, r3
 801db82:	bd80      	pop	{r7, pc}
 801db84:	2000b7bc 	.word	0x2000b7bc

0801db88 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801db88:	b580      	push	{r7, lr}
 801db8a:	b082      	sub	sp, #8
 801db8c:	af00      	add	r7, sp, #0
 801db8e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801db90:	4b04      	ldr	r3, [pc, #16]	; (801dba4 <sys_arch_unprotect+0x1c>)
 801db92:	681b      	ldr	r3, [r3, #0]
 801db94:	4618      	mov	r0, r3
 801db96:	f7ee fe3d 	bl	800c814 <osMutexRelease>
}
 801db9a:	bf00      	nop
 801db9c:	3708      	adds	r7, #8
 801db9e:	46bd      	mov	sp, r7
 801dba0:	bd80      	pop	{r7, pc}
 801dba2:	bf00      	nop
 801dba4:	2000b7bc 	.word	0x2000b7bc

0801dba8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801dba8:	b580      	push	{r7, lr}
 801dbaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801dbac:	2200      	movs	r2, #0
 801dbae:	4912      	ldr	r1, [pc, #72]	; (801dbf8 <MX_USB_DEVICE_Init+0x50>)
 801dbb0:	4812      	ldr	r0, [pc, #72]	; (801dbfc <MX_USB_DEVICE_Init+0x54>)
 801dbb2:	f7ed fbd3 	bl	800b35c <USBD_Init>
 801dbb6:	4603      	mov	r3, r0
 801dbb8:	2b00      	cmp	r3, #0
 801dbba:	d001      	beq.n	801dbc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801dbbc:	f7e4 fc28 	bl	8002410 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801dbc0:	490f      	ldr	r1, [pc, #60]	; (801dc00 <MX_USB_DEVICE_Init+0x58>)
 801dbc2:	480e      	ldr	r0, [pc, #56]	; (801dbfc <MX_USB_DEVICE_Init+0x54>)
 801dbc4:	f7ed fbfa 	bl	800b3bc <USBD_RegisterClass>
 801dbc8:	4603      	mov	r3, r0
 801dbca:	2b00      	cmp	r3, #0
 801dbcc:	d001      	beq.n	801dbd2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801dbce:	f7e4 fc1f 	bl	8002410 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801dbd2:	490c      	ldr	r1, [pc, #48]	; (801dc04 <MX_USB_DEVICE_Init+0x5c>)
 801dbd4:	4809      	ldr	r0, [pc, #36]	; (801dbfc <MX_USB_DEVICE_Init+0x54>)
 801dbd6:	f7ed fb4b 	bl	800b270 <USBD_CDC_RegisterInterface>
 801dbda:	4603      	mov	r3, r0
 801dbdc:	2b00      	cmp	r3, #0
 801dbde:	d001      	beq.n	801dbe4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801dbe0:	f7e4 fc16 	bl	8002410 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801dbe4:	4805      	ldr	r0, [pc, #20]	; (801dbfc <MX_USB_DEVICE_Init+0x54>)
 801dbe6:	f7ed fc10 	bl	800b40a <USBD_Start>
 801dbea:	4603      	mov	r3, r0
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	d001      	beq.n	801dbf4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801dbf0:	f7e4 fc0e 	bl	8002410 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801dbf4:	bf00      	nop
 801dbf6:	bd80      	pop	{r7, pc}
 801dbf8:	2000015c 	.word	0x2000015c
 801dbfc:	2000b7c0 	.word	0x2000b7c0
 801dc00:	20000034 	.word	0x20000034
 801dc04:	20000148 	.word	0x20000148

0801dc08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801dc08:	b580      	push	{r7, lr}
 801dc0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801dc0c:	2200      	movs	r2, #0
 801dc0e:	4905      	ldr	r1, [pc, #20]	; (801dc24 <CDC_Init_FS+0x1c>)
 801dc10:	4805      	ldr	r0, [pc, #20]	; (801dc28 <CDC_Init_FS+0x20>)
 801dc12:	f7ed fb42 	bl	800b29a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801dc16:	4905      	ldr	r1, [pc, #20]	; (801dc2c <CDC_Init_FS+0x24>)
 801dc18:	4803      	ldr	r0, [pc, #12]	; (801dc28 <CDC_Init_FS+0x20>)
 801dc1a:	f7ed fb5c 	bl	800b2d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801dc1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801dc20:	4618      	mov	r0, r3
 801dc22:	bd80      	pop	{r7, pc}
 801dc24:	2000c290 	.word	0x2000c290
 801dc28:	2000b7c0 	.word	0x2000b7c0
 801dc2c:	2000ba90 	.word	0x2000ba90

0801dc30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801dc30:	b480      	push	{r7}
 801dc32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801dc34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801dc36:	4618      	mov	r0, r3
 801dc38:	46bd      	mov	sp, r7
 801dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc3e:	4770      	bx	lr

0801dc40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801dc40:	b480      	push	{r7}
 801dc42:	b083      	sub	sp, #12
 801dc44:	af00      	add	r7, sp, #0
 801dc46:	4603      	mov	r3, r0
 801dc48:	6039      	str	r1, [r7, #0]
 801dc4a:	71fb      	strb	r3, [r7, #7]
 801dc4c:	4613      	mov	r3, r2
 801dc4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801dc50:	79fb      	ldrb	r3, [r7, #7]
 801dc52:	2b23      	cmp	r3, #35	; 0x23
 801dc54:	d84a      	bhi.n	801dcec <CDC_Control_FS+0xac>
 801dc56:	a201      	add	r2, pc, #4	; (adr r2, 801dc5c <CDC_Control_FS+0x1c>)
 801dc58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dc5c:	0801dced 	.word	0x0801dced
 801dc60:	0801dced 	.word	0x0801dced
 801dc64:	0801dced 	.word	0x0801dced
 801dc68:	0801dced 	.word	0x0801dced
 801dc6c:	0801dced 	.word	0x0801dced
 801dc70:	0801dced 	.word	0x0801dced
 801dc74:	0801dced 	.word	0x0801dced
 801dc78:	0801dced 	.word	0x0801dced
 801dc7c:	0801dced 	.word	0x0801dced
 801dc80:	0801dced 	.word	0x0801dced
 801dc84:	0801dced 	.word	0x0801dced
 801dc88:	0801dced 	.word	0x0801dced
 801dc8c:	0801dced 	.word	0x0801dced
 801dc90:	0801dced 	.word	0x0801dced
 801dc94:	0801dced 	.word	0x0801dced
 801dc98:	0801dced 	.word	0x0801dced
 801dc9c:	0801dced 	.word	0x0801dced
 801dca0:	0801dced 	.word	0x0801dced
 801dca4:	0801dced 	.word	0x0801dced
 801dca8:	0801dced 	.word	0x0801dced
 801dcac:	0801dced 	.word	0x0801dced
 801dcb0:	0801dced 	.word	0x0801dced
 801dcb4:	0801dced 	.word	0x0801dced
 801dcb8:	0801dced 	.word	0x0801dced
 801dcbc:	0801dced 	.word	0x0801dced
 801dcc0:	0801dced 	.word	0x0801dced
 801dcc4:	0801dced 	.word	0x0801dced
 801dcc8:	0801dced 	.word	0x0801dced
 801dccc:	0801dced 	.word	0x0801dced
 801dcd0:	0801dced 	.word	0x0801dced
 801dcd4:	0801dced 	.word	0x0801dced
 801dcd8:	0801dced 	.word	0x0801dced
 801dcdc:	0801dced 	.word	0x0801dced
 801dce0:	0801dced 	.word	0x0801dced
 801dce4:	0801dced 	.word	0x0801dced
 801dce8:	0801dced 	.word	0x0801dced
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801dcec:	bf00      	nop
  }

  return (USBD_OK);
 801dcee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801dcf0:	4618      	mov	r0, r3
 801dcf2:	370c      	adds	r7, #12
 801dcf4:	46bd      	mov	sp, r7
 801dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcfa:	4770      	bx	lr

0801dcfc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801dcfc:	b580      	push	{r7, lr}
 801dcfe:	b082      	sub	sp, #8
 801dd00:	af00      	add	r7, sp, #0
 801dd02:	6078      	str	r0, [r7, #4]
 801dd04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801dd06:	6879      	ldr	r1, [r7, #4]
 801dd08:	4805      	ldr	r0, [pc, #20]	; (801dd20 <CDC_Receive_FS+0x24>)
 801dd0a:	f7ed fae4 	bl	800b2d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801dd0e:	4804      	ldr	r0, [pc, #16]	; (801dd20 <CDC_Receive_FS+0x24>)
 801dd10:	f7ed fafa 	bl	800b308 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801dd14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801dd16:	4618      	mov	r0, r3
 801dd18:	3708      	adds	r7, #8
 801dd1a:	46bd      	mov	sp, r7
 801dd1c:	bd80      	pop	{r7, pc}
 801dd1e:	bf00      	nop
 801dd20:	2000b7c0 	.word	0x2000b7c0

0801dd24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801dd24:	b480      	push	{r7}
 801dd26:	b087      	sub	sp, #28
 801dd28:	af00      	add	r7, sp, #0
 801dd2a:	60f8      	str	r0, [r7, #12]
 801dd2c:	60b9      	str	r1, [r7, #8]
 801dd2e:	4613      	mov	r3, r2
 801dd30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801dd32:	2300      	movs	r3, #0
 801dd34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801dd36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801dd3a:	4618      	mov	r0, r3
 801dd3c:	371c      	adds	r7, #28
 801dd3e:	46bd      	mov	sp, r7
 801dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd44:	4770      	bx	lr
	...

0801dd48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801dd48:	b480      	push	{r7}
 801dd4a:	b083      	sub	sp, #12
 801dd4c:	af00      	add	r7, sp, #0
 801dd4e:	4603      	mov	r3, r0
 801dd50:	6039      	str	r1, [r7, #0]
 801dd52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801dd54:	683b      	ldr	r3, [r7, #0]
 801dd56:	2212      	movs	r2, #18
 801dd58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801dd5a:	4b03      	ldr	r3, [pc, #12]	; (801dd68 <USBD_FS_DeviceDescriptor+0x20>)
}
 801dd5c:	4618      	mov	r0, r3
 801dd5e:	370c      	adds	r7, #12
 801dd60:	46bd      	mov	sp, r7
 801dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd66:	4770      	bx	lr
 801dd68:	20000178 	.word	0x20000178

0801dd6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801dd6c:	b480      	push	{r7}
 801dd6e:	b083      	sub	sp, #12
 801dd70:	af00      	add	r7, sp, #0
 801dd72:	4603      	mov	r3, r0
 801dd74:	6039      	str	r1, [r7, #0]
 801dd76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801dd78:	683b      	ldr	r3, [r7, #0]
 801dd7a:	2204      	movs	r2, #4
 801dd7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801dd7e:	4b03      	ldr	r3, [pc, #12]	; (801dd8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801dd80:	4618      	mov	r0, r3
 801dd82:	370c      	adds	r7, #12
 801dd84:	46bd      	mov	sp, r7
 801dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd8a:	4770      	bx	lr
 801dd8c:	2000018c 	.word	0x2000018c

0801dd90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801dd90:	b580      	push	{r7, lr}
 801dd92:	b082      	sub	sp, #8
 801dd94:	af00      	add	r7, sp, #0
 801dd96:	4603      	mov	r3, r0
 801dd98:	6039      	str	r1, [r7, #0]
 801dd9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801dd9c:	79fb      	ldrb	r3, [r7, #7]
 801dd9e:	2b00      	cmp	r3, #0
 801dda0:	d105      	bne.n	801ddae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801dda2:	683a      	ldr	r2, [r7, #0]
 801dda4:	4907      	ldr	r1, [pc, #28]	; (801ddc4 <USBD_FS_ProductStrDescriptor+0x34>)
 801dda6:	4808      	ldr	r0, [pc, #32]	; (801ddc8 <USBD_FS_ProductStrDescriptor+0x38>)
 801dda8:	f7ee fb61 	bl	800c46e <USBD_GetString>
 801ddac:	e004      	b.n	801ddb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ddae:	683a      	ldr	r2, [r7, #0]
 801ddb0:	4904      	ldr	r1, [pc, #16]	; (801ddc4 <USBD_FS_ProductStrDescriptor+0x34>)
 801ddb2:	4805      	ldr	r0, [pc, #20]	; (801ddc8 <USBD_FS_ProductStrDescriptor+0x38>)
 801ddb4:	f7ee fb5b 	bl	800c46e <USBD_GetString>
  }
  return USBD_StrDesc;
 801ddb8:	4b02      	ldr	r3, [pc, #8]	; (801ddc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801ddba:	4618      	mov	r0, r3
 801ddbc:	3708      	adds	r7, #8
 801ddbe:	46bd      	mov	sp, r7
 801ddc0:	bd80      	pop	{r7, pc}
 801ddc2:	bf00      	nop
 801ddc4:	2000ca90 	.word	0x2000ca90
 801ddc8:	08025c4c 	.word	0x08025c4c

0801ddcc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ddcc:	b580      	push	{r7, lr}
 801ddce:	b082      	sub	sp, #8
 801ddd0:	af00      	add	r7, sp, #0
 801ddd2:	4603      	mov	r3, r0
 801ddd4:	6039      	str	r1, [r7, #0]
 801ddd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801ddd8:	683a      	ldr	r2, [r7, #0]
 801ddda:	4904      	ldr	r1, [pc, #16]	; (801ddec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801dddc:	4804      	ldr	r0, [pc, #16]	; (801ddf0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801ddde:	f7ee fb46 	bl	800c46e <USBD_GetString>
  return USBD_StrDesc;
 801dde2:	4b02      	ldr	r3, [pc, #8]	; (801ddec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801dde4:	4618      	mov	r0, r3
 801dde6:	3708      	adds	r7, #8
 801dde8:	46bd      	mov	sp, r7
 801ddea:	bd80      	pop	{r7, pc}
 801ddec:	2000ca90 	.word	0x2000ca90
 801ddf0:	08025c64 	.word	0x08025c64

0801ddf4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ddf4:	b580      	push	{r7, lr}
 801ddf6:	b082      	sub	sp, #8
 801ddf8:	af00      	add	r7, sp, #0
 801ddfa:	4603      	mov	r3, r0
 801ddfc:	6039      	str	r1, [r7, #0]
 801ddfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801de00:	683b      	ldr	r3, [r7, #0]
 801de02:	221a      	movs	r2, #26
 801de04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801de06:	f000 f843 	bl	801de90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801de0a:	4b02      	ldr	r3, [pc, #8]	; (801de14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801de0c:	4618      	mov	r0, r3
 801de0e:	3708      	adds	r7, #8
 801de10:	46bd      	mov	sp, r7
 801de12:	bd80      	pop	{r7, pc}
 801de14:	20000190 	.word	0x20000190

0801de18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801de18:	b580      	push	{r7, lr}
 801de1a:	b082      	sub	sp, #8
 801de1c:	af00      	add	r7, sp, #0
 801de1e:	4603      	mov	r3, r0
 801de20:	6039      	str	r1, [r7, #0]
 801de22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801de24:	79fb      	ldrb	r3, [r7, #7]
 801de26:	2b00      	cmp	r3, #0
 801de28:	d105      	bne.n	801de36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801de2a:	683a      	ldr	r2, [r7, #0]
 801de2c:	4907      	ldr	r1, [pc, #28]	; (801de4c <USBD_FS_ConfigStrDescriptor+0x34>)
 801de2e:	4808      	ldr	r0, [pc, #32]	; (801de50 <USBD_FS_ConfigStrDescriptor+0x38>)
 801de30:	f7ee fb1d 	bl	800c46e <USBD_GetString>
 801de34:	e004      	b.n	801de40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801de36:	683a      	ldr	r2, [r7, #0]
 801de38:	4904      	ldr	r1, [pc, #16]	; (801de4c <USBD_FS_ConfigStrDescriptor+0x34>)
 801de3a:	4805      	ldr	r0, [pc, #20]	; (801de50 <USBD_FS_ConfigStrDescriptor+0x38>)
 801de3c:	f7ee fb17 	bl	800c46e <USBD_GetString>
  }
  return USBD_StrDesc;
 801de40:	4b02      	ldr	r3, [pc, #8]	; (801de4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801de42:	4618      	mov	r0, r3
 801de44:	3708      	adds	r7, #8
 801de46:	46bd      	mov	sp, r7
 801de48:	bd80      	pop	{r7, pc}
 801de4a:	bf00      	nop
 801de4c:	2000ca90 	.word	0x2000ca90
 801de50:	08025c78 	.word	0x08025c78

0801de54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801de54:	b580      	push	{r7, lr}
 801de56:	b082      	sub	sp, #8
 801de58:	af00      	add	r7, sp, #0
 801de5a:	4603      	mov	r3, r0
 801de5c:	6039      	str	r1, [r7, #0]
 801de5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801de60:	79fb      	ldrb	r3, [r7, #7]
 801de62:	2b00      	cmp	r3, #0
 801de64:	d105      	bne.n	801de72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801de66:	683a      	ldr	r2, [r7, #0]
 801de68:	4907      	ldr	r1, [pc, #28]	; (801de88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801de6a:	4808      	ldr	r0, [pc, #32]	; (801de8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801de6c:	f7ee faff 	bl	800c46e <USBD_GetString>
 801de70:	e004      	b.n	801de7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801de72:	683a      	ldr	r2, [r7, #0]
 801de74:	4904      	ldr	r1, [pc, #16]	; (801de88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801de76:	4805      	ldr	r0, [pc, #20]	; (801de8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801de78:	f7ee faf9 	bl	800c46e <USBD_GetString>
  }
  return USBD_StrDesc;
 801de7c:	4b02      	ldr	r3, [pc, #8]	; (801de88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801de7e:	4618      	mov	r0, r3
 801de80:	3708      	adds	r7, #8
 801de82:	46bd      	mov	sp, r7
 801de84:	bd80      	pop	{r7, pc}
 801de86:	bf00      	nop
 801de88:	2000ca90 	.word	0x2000ca90
 801de8c:	08025c84 	.word	0x08025c84

0801de90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801de90:	b580      	push	{r7, lr}
 801de92:	b084      	sub	sp, #16
 801de94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801de96:	4b0f      	ldr	r3, [pc, #60]	; (801ded4 <Get_SerialNum+0x44>)
 801de98:	681b      	ldr	r3, [r3, #0]
 801de9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801de9c:	4b0e      	ldr	r3, [pc, #56]	; (801ded8 <Get_SerialNum+0x48>)
 801de9e:	681b      	ldr	r3, [r3, #0]
 801dea0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801dea2:	4b0e      	ldr	r3, [pc, #56]	; (801dedc <Get_SerialNum+0x4c>)
 801dea4:	681b      	ldr	r3, [r3, #0]
 801dea6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801dea8:	68fa      	ldr	r2, [r7, #12]
 801deaa:	687b      	ldr	r3, [r7, #4]
 801deac:	4413      	add	r3, r2
 801deae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801deb0:	68fb      	ldr	r3, [r7, #12]
 801deb2:	2b00      	cmp	r3, #0
 801deb4:	d009      	beq.n	801deca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801deb6:	2208      	movs	r2, #8
 801deb8:	4909      	ldr	r1, [pc, #36]	; (801dee0 <Get_SerialNum+0x50>)
 801deba:	68f8      	ldr	r0, [r7, #12]
 801debc:	f000 f814 	bl	801dee8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801dec0:	2204      	movs	r2, #4
 801dec2:	4908      	ldr	r1, [pc, #32]	; (801dee4 <Get_SerialNum+0x54>)
 801dec4:	68b8      	ldr	r0, [r7, #8]
 801dec6:	f000 f80f 	bl	801dee8 <IntToUnicode>
  }
}
 801deca:	bf00      	nop
 801decc:	3710      	adds	r7, #16
 801dece:	46bd      	mov	sp, r7
 801ded0:	bd80      	pop	{r7, pc}
 801ded2:	bf00      	nop
 801ded4:	1fff7a10 	.word	0x1fff7a10
 801ded8:	1fff7a14 	.word	0x1fff7a14
 801dedc:	1fff7a18 	.word	0x1fff7a18
 801dee0:	20000192 	.word	0x20000192
 801dee4:	200001a2 	.word	0x200001a2

0801dee8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801dee8:	b480      	push	{r7}
 801deea:	b087      	sub	sp, #28
 801deec:	af00      	add	r7, sp, #0
 801deee:	60f8      	str	r0, [r7, #12]
 801def0:	60b9      	str	r1, [r7, #8]
 801def2:	4613      	mov	r3, r2
 801def4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801def6:	2300      	movs	r3, #0
 801def8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801defa:	2300      	movs	r3, #0
 801defc:	75fb      	strb	r3, [r7, #23]
 801defe:	e027      	b.n	801df50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801df00:	68fb      	ldr	r3, [r7, #12]
 801df02:	0f1b      	lsrs	r3, r3, #28
 801df04:	2b09      	cmp	r3, #9
 801df06:	d80b      	bhi.n	801df20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801df08:	68fb      	ldr	r3, [r7, #12]
 801df0a:	0f1b      	lsrs	r3, r3, #28
 801df0c:	b2da      	uxtb	r2, r3
 801df0e:	7dfb      	ldrb	r3, [r7, #23]
 801df10:	005b      	lsls	r3, r3, #1
 801df12:	4619      	mov	r1, r3
 801df14:	68bb      	ldr	r3, [r7, #8]
 801df16:	440b      	add	r3, r1
 801df18:	3230      	adds	r2, #48	; 0x30
 801df1a:	b2d2      	uxtb	r2, r2
 801df1c:	701a      	strb	r2, [r3, #0]
 801df1e:	e00a      	b.n	801df36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801df20:	68fb      	ldr	r3, [r7, #12]
 801df22:	0f1b      	lsrs	r3, r3, #28
 801df24:	b2da      	uxtb	r2, r3
 801df26:	7dfb      	ldrb	r3, [r7, #23]
 801df28:	005b      	lsls	r3, r3, #1
 801df2a:	4619      	mov	r1, r3
 801df2c:	68bb      	ldr	r3, [r7, #8]
 801df2e:	440b      	add	r3, r1
 801df30:	3237      	adds	r2, #55	; 0x37
 801df32:	b2d2      	uxtb	r2, r2
 801df34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801df36:	68fb      	ldr	r3, [r7, #12]
 801df38:	011b      	lsls	r3, r3, #4
 801df3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801df3c:	7dfb      	ldrb	r3, [r7, #23]
 801df3e:	005b      	lsls	r3, r3, #1
 801df40:	3301      	adds	r3, #1
 801df42:	68ba      	ldr	r2, [r7, #8]
 801df44:	4413      	add	r3, r2
 801df46:	2200      	movs	r2, #0
 801df48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801df4a:	7dfb      	ldrb	r3, [r7, #23]
 801df4c:	3301      	adds	r3, #1
 801df4e:	75fb      	strb	r3, [r7, #23]
 801df50:	7dfa      	ldrb	r2, [r7, #23]
 801df52:	79fb      	ldrb	r3, [r7, #7]
 801df54:	429a      	cmp	r2, r3
 801df56:	d3d3      	bcc.n	801df00 <IntToUnicode+0x18>
  }
}
 801df58:	bf00      	nop
 801df5a:	bf00      	nop
 801df5c:	371c      	adds	r7, #28
 801df5e:	46bd      	mov	sp, r7
 801df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df64:	4770      	bx	lr
	...

0801df68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801df68:	b580      	push	{r7, lr}
 801df6a:	b08a      	sub	sp, #40	; 0x28
 801df6c:	af00      	add	r7, sp, #0
 801df6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801df70:	f107 0314 	add.w	r3, r7, #20
 801df74:	2200      	movs	r2, #0
 801df76:	601a      	str	r2, [r3, #0]
 801df78:	605a      	str	r2, [r3, #4]
 801df7a:	609a      	str	r2, [r3, #8]
 801df7c:	60da      	str	r2, [r3, #12]
 801df7e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801df80:	687b      	ldr	r3, [r7, #4]
 801df82:	681b      	ldr	r3, [r3, #0]
 801df84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801df88:	d147      	bne.n	801e01a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801df8a:	2300      	movs	r3, #0
 801df8c:	613b      	str	r3, [r7, #16]
 801df8e:	4b25      	ldr	r3, [pc, #148]	; (801e024 <HAL_PCD_MspInit+0xbc>)
 801df90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801df92:	4a24      	ldr	r2, [pc, #144]	; (801e024 <HAL_PCD_MspInit+0xbc>)
 801df94:	f043 0301 	orr.w	r3, r3, #1
 801df98:	6313      	str	r3, [r2, #48]	; 0x30
 801df9a:	4b22      	ldr	r3, [pc, #136]	; (801e024 <HAL_PCD_MspInit+0xbc>)
 801df9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801df9e:	f003 0301 	and.w	r3, r3, #1
 801dfa2:	613b      	str	r3, [r7, #16]
 801dfa4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801dfa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 801dfaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801dfac:	2300      	movs	r3, #0
 801dfae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dfb0:	2300      	movs	r3, #0
 801dfb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801dfb4:	f107 0314 	add.w	r3, r7, #20
 801dfb8:	4619      	mov	r1, r3
 801dfba:	481b      	ldr	r0, [pc, #108]	; (801e028 <HAL_PCD_MspInit+0xc0>)
 801dfbc:	f7e6 fdda 	bl	8004b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801dfc0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801dfc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801dfc6:	2302      	movs	r3, #2
 801dfc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dfca:	2300      	movs	r3, #0
 801dfcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801dfce:	2303      	movs	r3, #3
 801dfd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801dfd2:	230a      	movs	r3, #10
 801dfd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801dfd6:	f107 0314 	add.w	r3, r7, #20
 801dfda:	4619      	mov	r1, r3
 801dfdc:	4812      	ldr	r0, [pc, #72]	; (801e028 <HAL_PCD_MspInit+0xc0>)
 801dfde:	f7e6 fdc9 	bl	8004b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801dfe2:	4b10      	ldr	r3, [pc, #64]	; (801e024 <HAL_PCD_MspInit+0xbc>)
 801dfe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dfe6:	4a0f      	ldr	r2, [pc, #60]	; (801e024 <HAL_PCD_MspInit+0xbc>)
 801dfe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dfec:	6353      	str	r3, [r2, #52]	; 0x34
 801dfee:	2300      	movs	r3, #0
 801dff0:	60fb      	str	r3, [r7, #12]
 801dff2:	4b0c      	ldr	r3, [pc, #48]	; (801e024 <HAL_PCD_MspInit+0xbc>)
 801dff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dff6:	4a0b      	ldr	r2, [pc, #44]	; (801e024 <HAL_PCD_MspInit+0xbc>)
 801dff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801dffc:	6453      	str	r3, [r2, #68]	; 0x44
 801dffe:	4b09      	ldr	r3, [pc, #36]	; (801e024 <HAL_PCD_MspInit+0xbc>)
 801e000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801e006:	60fb      	str	r3, [r7, #12]
 801e008:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801e00a:	2200      	movs	r2, #0
 801e00c:	2105      	movs	r1, #5
 801e00e:	2043      	movs	r0, #67	; 0x43
 801e010:	f7e5 fce2 	bl	80039d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801e014:	2043      	movs	r0, #67	; 0x43
 801e016:	f7e5 fcfb 	bl	8003a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801e01a:	bf00      	nop
 801e01c:	3728      	adds	r7, #40	; 0x28
 801e01e:	46bd      	mov	sp, r7
 801e020:	bd80      	pop	{r7, pc}
 801e022:	bf00      	nop
 801e024:	40023800 	.word	0x40023800
 801e028:	40020000 	.word	0x40020000

0801e02c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e02c:	b580      	push	{r7, lr}
 801e02e:	b082      	sub	sp, #8
 801e030:	af00      	add	r7, sp, #0
 801e032:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801e034:	687b      	ldr	r3, [r7, #4]
 801e036:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801e03a:	687b      	ldr	r3, [r7, #4]
 801e03c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801e040:	4619      	mov	r1, r3
 801e042:	4610      	mov	r0, r2
 801e044:	f7ed fa2c 	bl	800b4a0 <USBD_LL_SetupStage>
}
 801e048:	bf00      	nop
 801e04a:	3708      	adds	r7, #8
 801e04c:	46bd      	mov	sp, r7
 801e04e:	bd80      	pop	{r7, pc}

0801e050 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e050:	b580      	push	{r7, lr}
 801e052:	b082      	sub	sp, #8
 801e054:	af00      	add	r7, sp, #0
 801e056:	6078      	str	r0, [r7, #4]
 801e058:	460b      	mov	r3, r1
 801e05a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801e062:	78fa      	ldrb	r2, [r7, #3]
 801e064:	6879      	ldr	r1, [r7, #4]
 801e066:	4613      	mov	r3, r2
 801e068:	00db      	lsls	r3, r3, #3
 801e06a:	1a9b      	subs	r3, r3, r2
 801e06c:	009b      	lsls	r3, r3, #2
 801e06e:	440b      	add	r3, r1
 801e070:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801e074:	681a      	ldr	r2, [r3, #0]
 801e076:	78fb      	ldrb	r3, [r7, #3]
 801e078:	4619      	mov	r1, r3
 801e07a:	f7ed fa66 	bl	800b54a <USBD_LL_DataOutStage>
}
 801e07e:	bf00      	nop
 801e080:	3708      	adds	r7, #8
 801e082:	46bd      	mov	sp, r7
 801e084:	bd80      	pop	{r7, pc}

0801e086 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e086:	b580      	push	{r7, lr}
 801e088:	b082      	sub	sp, #8
 801e08a:	af00      	add	r7, sp, #0
 801e08c:	6078      	str	r0, [r7, #4]
 801e08e:	460b      	mov	r3, r1
 801e090:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801e092:	687b      	ldr	r3, [r7, #4]
 801e094:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801e098:	78fa      	ldrb	r2, [r7, #3]
 801e09a:	6879      	ldr	r1, [r7, #4]
 801e09c:	4613      	mov	r3, r2
 801e09e:	00db      	lsls	r3, r3, #3
 801e0a0:	1a9b      	subs	r3, r3, r2
 801e0a2:	009b      	lsls	r3, r3, #2
 801e0a4:	440b      	add	r3, r1
 801e0a6:	3348      	adds	r3, #72	; 0x48
 801e0a8:	681a      	ldr	r2, [r3, #0]
 801e0aa:	78fb      	ldrb	r3, [r7, #3]
 801e0ac:	4619      	mov	r1, r3
 801e0ae:	f7ed faaf 	bl	800b610 <USBD_LL_DataInStage>
}
 801e0b2:	bf00      	nop
 801e0b4:	3708      	adds	r7, #8
 801e0b6:	46bd      	mov	sp, r7
 801e0b8:	bd80      	pop	{r7, pc}

0801e0ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e0ba:	b580      	push	{r7, lr}
 801e0bc:	b082      	sub	sp, #8
 801e0be:	af00      	add	r7, sp, #0
 801e0c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801e0c2:	687b      	ldr	r3, [r7, #4]
 801e0c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e0c8:	4618      	mov	r0, r3
 801e0ca:	f7ed fbc3 	bl	800b854 <USBD_LL_SOF>
}
 801e0ce:	bf00      	nop
 801e0d0:	3708      	adds	r7, #8
 801e0d2:	46bd      	mov	sp, r7
 801e0d4:	bd80      	pop	{r7, pc}

0801e0d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e0d6:	b580      	push	{r7, lr}
 801e0d8:	b084      	sub	sp, #16
 801e0da:	af00      	add	r7, sp, #0
 801e0dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801e0de:	2301      	movs	r3, #1
 801e0e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801e0e2:	687b      	ldr	r3, [r7, #4]
 801e0e4:	68db      	ldr	r3, [r3, #12]
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	d102      	bne.n	801e0f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801e0ea:	2300      	movs	r3, #0
 801e0ec:	73fb      	strb	r3, [r7, #15]
 801e0ee:	e008      	b.n	801e102 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801e0f0:	687b      	ldr	r3, [r7, #4]
 801e0f2:	68db      	ldr	r3, [r3, #12]
 801e0f4:	2b02      	cmp	r3, #2
 801e0f6:	d102      	bne.n	801e0fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801e0f8:	2301      	movs	r3, #1
 801e0fa:	73fb      	strb	r3, [r7, #15]
 801e0fc:	e001      	b.n	801e102 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801e0fe:	f7e4 f987 	bl	8002410 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801e102:	687b      	ldr	r3, [r7, #4]
 801e104:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e108:	7bfa      	ldrb	r2, [r7, #15]
 801e10a:	4611      	mov	r1, r2
 801e10c:	4618      	mov	r0, r3
 801e10e:	f7ed fb63 	bl	800b7d8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801e112:	687b      	ldr	r3, [r7, #4]
 801e114:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e118:	4618      	mov	r0, r3
 801e11a:	f7ed fb0f 	bl	800b73c <USBD_LL_Reset>
}
 801e11e:	bf00      	nop
 801e120:	3710      	adds	r7, #16
 801e122:	46bd      	mov	sp, r7
 801e124:	bd80      	pop	{r7, pc}
	...

0801e128 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e128:	b580      	push	{r7, lr}
 801e12a:	b082      	sub	sp, #8
 801e12c:	af00      	add	r7, sp, #0
 801e12e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e136:	4618      	mov	r0, r3
 801e138:	f7ed fb5e 	bl	800b7f8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801e13c:	687b      	ldr	r3, [r7, #4]
 801e13e:	681b      	ldr	r3, [r3, #0]
 801e140:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801e144:	681b      	ldr	r3, [r3, #0]
 801e146:	687a      	ldr	r2, [r7, #4]
 801e148:	6812      	ldr	r2, [r2, #0]
 801e14a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801e14e:	f043 0301 	orr.w	r3, r3, #1
 801e152:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801e154:	687b      	ldr	r3, [r7, #4]
 801e156:	6a1b      	ldr	r3, [r3, #32]
 801e158:	2b00      	cmp	r3, #0
 801e15a:	d005      	beq.n	801e168 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801e15c:	4b04      	ldr	r3, [pc, #16]	; (801e170 <HAL_PCD_SuspendCallback+0x48>)
 801e15e:	691b      	ldr	r3, [r3, #16]
 801e160:	4a03      	ldr	r2, [pc, #12]	; (801e170 <HAL_PCD_SuspendCallback+0x48>)
 801e162:	f043 0306 	orr.w	r3, r3, #6
 801e166:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801e168:	bf00      	nop
 801e16a:	3708      	adds	r7, #8
 801e16c:	46bd      	mov	sp, r7
 801e16e:	bd80      	pop	{r7, pc}
 801e170:	e000ed00 	.word	0xe000ed00

0801e174 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e174:	b580      	push	{r7, lr}
 801e176:	b082      	sub	sp, #8
 801e178:	af00      	add	r7, sp, #0
 801e17a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e182:	4618      	mov	r0, r3
 801e184:	f7ed fb4e 	bl	800b824 <USBD_LL_Resume>
}
 801e188:	bf00      	nop
 801e18a:	3708      	adds	r7, #8
 801e18c:	46bd      	mov	sp, r7
 801e18e:	bd80      	pop	{r7, pc}

0801e190 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e190:	b580      	push	{r7, lr}
 801e192:	b082      	sub	sp, #8
 801e194:	af00      	add	r7, sp, #0
 801e196:	6078      	str	r0, [r7, #4]
 801e198:	460b      	mov	r3, r1
 801e19a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801e19c:	687b      	ldr	r3, [r7, #4]
 801e19e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e1a2:	78fa      	ldrb	r2, [r7, #3]
 801e1a4:	4611      	mov	r1, r2
 801e1a6:	4618      	mov	r0, r3
 801e1a8:	f7ed fb9c 	bl	800b8e4 <USBD_LL_IsoOUTIncomplete>
}
 801e1ac:	bf00      	nop
 801e1ae:	3708      	adds	r7, #8
 801e1b0:	46bd      	mov	sp, r7
 801e1b2:	bd80      	pop	{r7, pc}

0801e1b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e1b4:	b580      	push	{r7, lr}
 801e1b6:	b082      	sub	sp, #8
 801e1b8:	af00      	add	r7, sp, #0
 801e1ba:	6078      	str	r0, [r7, #4]
 801e1bc:	460b      	mov	r3, r1
 801e1be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e1c6:	78fa      	ldrb	r2, [r7, #3]
 801e1c8:	4611      	mov	r1, r2
 801e1ca:	4618      	mov	r0, r3
 801e1cc:	f7ed fb64 	bl	800b898 <USBD_LL_IsoINIncomplete>
}
 801e1d0:	bf00      	nop
 801e1d2:	3708      	adds	r7, #8
 801e1d4:	46bd      	mov	sp, r7
 801e1d6:	bd80      	pop	{r7, pc}

0801e1d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e1d8:	b580      	push	{r7, lr}
 801e1da:	b082      	sub	sp, #8
 801e1dc:	af00      	add	r7, sp, #0
 801e1de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801e1e0:	687b      	ldr	r3, [r7, #4]
 801e1e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e1e6:	4618      	mov	r0, r3
 801e1e8:	f7ed fba2 	bl	800b930 <USBD_LL_DevConnected>
}
 801e1ec:	bf00      	nop
 801e1ee:	3708      	adds	r7, #8
 801e1f0:	46bd      	mov	sp, r7
 801e1f2:	bd80      	pop	{r7, pc}

0801e1f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e1f4:	b580      	push	{r7, lr}
 801e1f6:	b082      	sub	sp, #8
 801e1f8:	af00      	add	r7, sp, #0
 801e1fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801e1fc:	687b      	ldr	r3, [r7, #4]
 801e1fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e202:	4618      	mov	r0, r3
 801e204:	f7ed fb9f 	bl	800b946 <USBD_LL_DevDisconnected>
}
 801e208:	bf00      	nop
 801e20a:	3708      	adds	r7, #8
 801e20c:	46bd      	mov	sp, r7
 801e20e:	bd80      	pop	{r7, pc}

0801e210 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801e210:	b580      	push	{r7, lr}
 801e212:	b082      	sub	sp, #8
 801e214:	af00      	add	r7, sp, #0
 801e216:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801e218:	687b      	ldr	r3, [r7, #4]
 801e21a:	781b      	ldrb	r3, [r3, #0]
 801e21c:	2b00      	cmp	r3, #0
 801e21e:	d13c      	bne.n	801e29a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801e220:	4a20      	ldr	r2, [pc, #128]	; (801e2a4 <USBD_LL_Init+0x94>)
 801e222:	687b      	ldr	r3, [r7, #4]
 801e224:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801e228:	687b      	ldr	r3, [r7, #4]
 801e22a:	4a1e      	ldr	r2, [pc, #120]	; (801e2a4 <USBD_LL_Init+0x94>)
 801e22c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801e230:	4b1c      	ldr	r3, [pc, #112]	; (801e2a4 <USBD_LL_Init+0x94>)
 801e232:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801e236:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801e238:	4b1a      	ldr	r3, [pc, #104]	; (801e2a4 <USBD_LL_Init+0x94>)
 801e23a:	2204      	movs	r2, #4
 801e23c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801e23e:	4b19      	ldr	r3, [pc, #100]	; (801e2a4 <USBD_LL_Init+0x94>)
 801e240:	2202      	movs	r2, #2
 801e242:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801e244:	4b17      	ldr	r3, [pc, #92]	; (801e2a4 <USBD_LL_Init+0x94>)
 801e246:	2200      	movs	r2, #0
 801e248:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801e24a:	4b16      	ldr	r3, [pc, #88]	; (801e2a4 <USBD_LL_Init+0x94>)
 801e24c:	2202      	movs	r2, #2
 801e24e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801e250:	4b14      	ldr	r3, [pc, #80]	; (801e2a4 <USBD_LL_Init+0x94>)
 801e252:	2200      	movs	r2, #0
 801e254:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801e256:	4b13      	ldr	r3, [pc, #76]	; (801e2a4 <USBD_LL_Init+0x94>)
 801e258:	2200      	movs	r2, #0
 801e25a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801e25c:	4b11      	ldr	r3, [pc, #68]	; (801e2a4 <USBD_LL_Init+0x94>)
 801e25e:	2200      	movs	r2, #0
 801e260:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801e262:	4b10      	ldr	r3, [pc, #64]	; (801e2a4 <USBD_LL_Init+0x94>)
 801e264:	2201      	movs	r2, #1
 801e266:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801e268:	4b0e      	ldr	r3, [pc, #56]	; (801e2a4 <USBD_LL_Init+0x94>)
 801e26a:	2200      	movs	r2, #0
 801e26c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801e26e:	480d      	ldr	r0, [pc, #52]	; (801e2a4 <USBD_LL_Init+0x94>)
 801e270:	f7e6 fe4e 	bl	8004f10 <HAL_PCD_Init>
 801e274:	4603      	mov	r3, r0
 801e276:	2b00      	cmp	r3, #0
 801e278:	d001      	beq.n	801e27e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801e27a:	f7e4 f8c9 	bl	8002410 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801e27e:	2180      	movs	r1, #128	; 0x80
 801e280:	4808      	ldr	r0, [pc, #32]	; (801e2a4 <USBD_LL_Init+0x94>)
 801e282:	f7e7 ffac 	bl	80061de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801e286:	2240      	movs	r2, #64	; 0x40
 801e288:	2100      	movs	r1, #0
 801e28a:	4806      	ldr	r0, [pc, #24]	; (801e2a4 <USBD_LL_Init+0x94>)
 801e28c:	f7e7 ff60 	bl	8006150 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801e290:	2280      	movs	r2, #128	; 0x80
 801e292:	2101      	movs	r1, #1
 801e294:	4803      	ldr	r0, [pc, #12]	; (801e2a4 <USBD_LL_Init+0x94>)
 801e296:	f7e7 ff5b 	bl	8006150 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801e29a:	2300      	movs	r3, #0
}
 801e29c:	4618      	mov	r0, r3
 801e29e:	3708      	adds	r7, #8
 801e2a0:	46bd      	mov	sp, r7
 801e2a2:	bd80      	pop	{r7, pc}
 801e2a4:	2000cc90 	.word	0x2000cc90

0801e2a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801e2a8:	b580      	push	{r7, lr}
 801e2aa:	b084      	sub	sp, #16
 801e2ac:	af00      	add	r7, sp, #0
 801e2ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e2b0:	2300      	movs	r3, #0
 801e2b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e2b4:	2300      	movs	r3, #0
 801e2b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801e2b8:	687b      	ldr	r3, [r7, #4]
 801e2ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801e2be:	4618      	mov	r0, r3
 801e2c0:	f7e6 ff43 	bl	800514a <HAL_PCD_Start>
 801e2c4:	4603      	mov	r3, r0
 801e2c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e2c8:	7bfb      	ldrb	r3, [r7, #15]
 801e2ca:	4618      	mov	r0, r3
 801e2cc:	f000 f942 	bl	801e554 <USBD_Get_USB_Status>
 801e2d0:	4603      	mov	r3, r0
 801e2d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e2d4:	7bbb      	ldrb	r3, [r7, #14]
}
 801e2d6:	4618      	mov	r0, r3
 801e2d8:	3710      	adds	r7, #16
 801e2da:	46bd      	mov	sp, r7
 801e2dc:	bd80      	pop	{r7, pc}

0801e2de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801e2de:	b580      	push	{r7, lr}
 801e2e0:	b084      	sub	sp, #16
 801e2e2:	af00      	add	r7, sp, #0
 801e2e4:	6078      	str	r0, [r7, #4]
 801e2e6:	4608      	mov	r0, r1
 801e2e8:	4611      	mov	r1, r2
 801e2ea:	461a      	mov	r2, r3
 801e2ec:	4603      	mov	r3, r0
 801e2ee:	70fb      	strb	r3, [r7, #3]
 801e2f0:	460b      	mov	r3, r1
 801e2f2:	70bb      	strb	r3, [r7, #2]
 801e2f4:	4613      	mov	r3, r2
 801e2f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e2f8:	2300      	movs	r3, #0
 801e2fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e2fc:	2300      	movs	r3, #0
 801e2fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801e300:	687b      	ldr	r3, [r7, #4]
 801e302:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801e306:	78bb      	ldrb	r3, [r7, #2]
 801e308:	883a      	ldrh	r2, [r7, #0]
 801e30a:	78f9      	ldrb	r1, [r7, #3]
 801e30c:	f7e7 fb27 	bl	800595e <HAL_PCD_EP_Open>
 801e310:	4603      	mov	r3, r0
 801e312:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e314:	7bfb      	ldrb	r3, [r7, #15]
 801e316:	4618      	mov	r0, r3
 801e318:	f000 f91c 	bl	801e554 <USBD_Get_USB_Status>
 801e31c:	4603      	mov	r3, r0
 801e31e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e320:	7bbb      	ldrb	r3, [r7, #14]
}
 801e322:	4618      	mov	r0, r3
 801e324:	3710      	adds	r7, #16
 801e326:	46bd      	mov	sp, r7
 801e328:	bd80      	pop	{r7, pc}

0801e32a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e32a:	b580      	push	{r7, lr}
 801e32c:	b084      	sub	sp, #16
 801e32e:	af00      	add	r7, sp, #0
 801e330:	6078      	str	r0, [r7, #4]
 801e332:	460b      	mov	r3, r1
 801e334:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e336:	2300      	movs	r3, #0
 801e338:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e33a:	2300      	movs	r3, #0
 801e33c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801e33e:	687b      	ldr	r3, [r7, #4]
 801e340:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801e344:	78fa      	ldrb	r2, [r7, #3]
 801e346:	4611      	mov	r1, r2
 801e348:	4618      	mov	r0, r3
 801e34a:	f7e7 fb70 	bl	8005a2e <HAL_PCD_EP_Close>
 801e34e:	4603      	mov	r3, r0
 801e350:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e352:	7bfb      	ldrb	r3, [r7, #15]
 801e354:	4618      	mov	r0, r3
 801e356:	f000 f8fd 	bl	801e554 <USBD_Get_USB_Status>
 801e35a:	4603      	mov	r3, r0
 801e35c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e35e:	7bbb      	ldrb	r3, [r7, #14]
}
 801e360:	4618      	mov	r0, r3
 801e362:	3710      	adds	r7, #16
 801e364:	46bd      	mov	sp, r7
 801e366:	bd80      	pop	{r7, pc}

0801e368 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e368:	b580      	push	{r7, lr}
 801e36a:	b084      	sub	sp, #16
 801e36c:	af00      	add	r7, sp, #0
 801e36e:	6078      	str	r0, [r7, #4]
 801e370:	460b      	mov	r3, r1
 801e372:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e374:	2300      	movs	r3, #0
 801e376:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e378:	2300      	movs	r3, #0
 801e37a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801e37c:	687b      	ldr	r3, [r7, #4]
 801e37e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801e382:	78fa      	ldrb	r2, [r7, #3]
 801e384:	4611      	mov	r1, r2
 801e386:	4618      	mov	r0, r3
 801e388:	f7e7 fc48 	bl	8005c1c <HAL_PCD_EP_SetStall>
 801e38c:	4603      	mov	r3, r0
 801e38e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e390:	7bfb      	ldrb	r3, [r7, #15]
 801e392:	4618      	mov	r0, r3
 801e394:	f000 f8de 	bl	801e554 <USBD_Get_USB_Status>
 801e398:	4603      	mov	r3, r0
 801e39a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e39c:	7bbb      	ldrb	r3, [r7, #14]
}
 801e39e:	4618      	mov	r0, r3
 801e3a0:	3710      	adds	r7, #16
 801e3a2:	46bd      	mov	sp, r7
 801e3a4:	bd80      	pop	{r7, pc}

0801e3a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e3a6:	b580      	push	{r7, lr}
 801e3a8:	b084      	sub	sp, #16
 801e3aa:	af00      	add	r7, sp, #0
 801e3ac:	6078      	str	r0, [r7, #4]
 801e3ae:	460b      	mov	r3, r1
 801e3b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e3b2:	2300      	movs	r3, #0
 801e3b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e3b6:	2300      	movs	r3, #0
 801e3b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801e3ba:	687b      	ldr	r3, [r7, #4]
 801e3bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801e3c0:	78fa      	ldrb	r2, [r7, #3]
 801e3c2:	4611      	mov	r1, r2
 801e3c4:	4618      	mov	r0, r3
 801e3c6:	f7e7 fc8d 	bl	8005ce4 <HAL_PCD_EP_ClrStall>
 801e3ca:	4603      	mov	r3, r0
 801e3cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e3ce:	7bfb      	ldrb	r3, [r7, #15]
 801e3d0:	4618      	mov	r0, r3
 801e3d2:	f000 f8bf 	bl	801e554 <USBD_Get_USB_Status>
 801e3d6:	4603      	mov	r3, r0
 801e3d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e3da:	7bbb      	ldrb	r3, [r7, #14]
}
 801e3dc:	4618      	mov	r0, r3
 801e3de:	3710      	adds	r7, #16
 801e3e0:	46bd      	mov	sp, r7
 801e3e2:	bd80      	pop	{r7, pc}

0801e3e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e3e4:	b480      	push	{r7}
 801e3e6:	b085      	sub	sp, #20
 801e3e8:	af00      	add	r7, sp, #0
 801e3ea:	6078      	str	r0, [r7, #4]
 801e3ec:	460b      	mov	r3, r1
 801e3ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801e3f0:	687b      	ldr	r3, [r7, #4]
 801e3f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801e3f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801e3f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e3fc:	2b00      	cmp	r3, #0
 801e3fe:	da0b      	bge.n	801e418 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801e400:	78fb      	ldrb	r3, [r7, #3]
 801e402:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801e406:	68f9      	ldr	r1, [r7, #12]
 801e408:	4613      	mov	r3, r2
 801e40a:	00db      	lsls	r3, r3, #3
 801e40c:	1a9b      	subs	r3, r3, r2
 801e40e:	009b      	lsls	r3, r3, #2
 801e410:	440b      	add	r3, r1
 801e412:	333e      	adds	r3, #62	; 0x3e
 801e414:	781b      	ldrb	r3, [r3, #0]
 801e416:	e00b      	b.n	801e430 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801e418:	78fb      	ldrb	r3, [r7, #3]
 801e41a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801e41e:	68f9      	ldr	r1, [r7, #12]
 801e420:	4613      	mov	r3, r2
 801e422:	00db      	lsls	r3, r3, #3
 801e424:	1a9b      	subs	r3, r3, r2
 801e426:	009b      	lsls	r3, r3, #2
 801e428:	440b      	add	r3, r1
 801e42a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801e42e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801e430:	4618      	mov	r0, r3
 801e432:	3714      	adds	r7, #20
 801e434:	46bd      	mov	sp, r7
 801e436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e43a:	4770      	bx	lr

0801e43c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801e43c:	b580      	push	{r7, lr}
 801e43e:	b084      	sub	sp, #16
 801e440:	af00      	add	r7, sp, #0
 801e442:	6078      	str	r0, [r7, #4]
 801e444:	460b      	mov	r3, r1
 801e446:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e448:	2300      	movs	r3, #0
 801e44a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e44c:	2300      	movs	r3, #0
 801e44e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801e456:	78fa      	ldrb	r2, [r7, #3]
 801e458:	4611      	mov	r1, r2
 801e45a:	4618      	mov	r0, r3
 801e45c:	f7e7 fa5a 	bl	8005914 <HAL_PCD_SetAddress>
 801e460:	4603      	mov	r3, r0
 801e462:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e464:	7bfb      	ldrb	r3, [r7, #15]
 801e466:	4618      	mov	r0, r3
 801e468:	f000 f874 	bl	801e554 <USBD_Get_USB_Status>
 801e46c:	4603      	mov	r3, r0
 801e46e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e470:	7bbb      	ldrb	r3, [r7, #14]
}
 801e472:	4618      	mov	r0, r3
 801e474:	3710      	adds	r7, #16
 801e476:	46bd      	mov	sp, r7
 801e478:	bd80      	pop	{r7, pc}

0801e47a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801e47a:	b580      	push	{r7, lr}
 801e47c:	b086      	sub	sp, #24
 801e47e:	af00      	add	r7, sp, #0
 801e480:	60f8      	str	r0, [r7, #12]
 801e482:	607a      	str	r2, [r7, #4]
 801e484:	603b      	str	r3, [r7, #0]
 801e486:	460b      	mov	r3, r1
 801e488:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e48a:	2300      	movs	r3, #0
 801e48c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e48e:	2300      	movs	r3, #0
 801e490:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801e492:	68fb      	ldr	r3, [r7, #12]
 801e494:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801e498:	7af9      	ldrb	r1, [r7, #11]
 801e49a:	683b      	ldr	r3, [r7, #0]
 801e49c:	687a      	ldr	r2, [r7, #4]
 801e49e:	f7e7 fb73 	bl	8005b88 <HAL_PCD_EP_Transmit>
 801e4a2:	4603      	mov	r3, r0
 801e4a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e4a6:	7dfb      	ldrb	r3, [r7, #23]
 801e4a8:	4618      	mov	r0, r3
 801e4aa:	f000 f853 	bl	801e554 <USBD_Get_USB_Status>
 801e4ae:	4603      	mov	r3, r0
 801e4b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801e4b2:	7dbb      	ldrb	r3, [r7, #22]
}
 801e4b4:	4618      	mov	r0, r3
 801e4b6:	3718      	adds	r7, #24
 801e4b8:	46bd      	mov	sp, r7
 801e4ba:	bd80      	pop	{r7, pc}

0801e4bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801e4bc:	b580      	push	{r7, lr}
 801e4be:	b086      	sub	sp, #24
 801e4c0:	af00      	add	r7, sp, #0
 801e4c2:	60f8      	str	r0, [r7, #12]
 801e4c4:	607a      	str	r2, [r7, #4]
 801e4c6:	603b      	str	r3, [r7, #0]
 801e4c8:	460b      	mov	r3, r1
 801e4ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e4cc:	2300      	movs	r3, #0
 801e4ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e4d0:	2300      	movs	r3, #0
 801e4d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801e4d4:	68fb      	ldr	r3, [r7, #12]
 801e4d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801e4da:	7af9      	ldrb	r1, [r7, #11]
 801e4dc:	683b      	ldr	r3, [r7, #0]
 801e4de:	687a      	ldr	r2, [r7, #4]
 801e4e0:	f7e7 faef 	bl	8005ac2 <HAL_PCD_EP_Receive>
 801e4e4:	4603      	mov	r3, r0
 801e4e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e4e8:	7dfb      	ldrb	r3, [r7, #23]
 801e4ea:	4618      	mov	r0, r3
 801e4ec:	f000 f832 	bl	801e554 <USBD_Get_USB_Status>
 801e4f0:	4603      	mov	r3, r0
 801e4f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801e4f4:	7dbb      	ldrb	r3, [r7, #22]
}
 801e4f6:	4618      	mov	r0, r3
 801e4f8:	3718      	adds	r7, #24
 801e4fa:	46bd      	mov	sp, r7
 801e4fc:	bd80      	pop	{r7, pc}

0801e4fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e4fe:	b580      	push	{r7, lr}
 801e500:	b082      	sub	sp, #8
 801e502:	af00      	add	r7, sp, #0
 801e504:	6078      	str	r0, [r7, #4]
 801e506:	460b      	mov	r3, r1
 801e508:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801e50a:	687b      	ldr	r3, [r7, #4]
 801e50c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801e510:	78fa      	ldrb	r2, [r7, #3]
 801e512:	4611      	mov	r1, r2
 801e514:	4618      	mov	r0, r3
 801e516:	f7e7 fb1f 	bl	8005b58 <HAL_PCD_EP_GetRxCount>
 801e51a:	4603      	mov	r3, r0
}
 801e51c:	4618      	mov	r0, r3
 801e51e:	3708      	adds	r7, #8
 801e520:	46bd      	mov	sp, r7
 801e522:	bd80      	pop	{r7, pc}

0801e524 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801e524:	b480      	push	{r7}
 801e526:	b083      	sub	sp, #12
 801e528:	af00      	add	r7, sp, #0
 801e52a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801e52c:	4b03      	ldr	r3, [pc, #12]	; (801e53c <USBD_static_malloc+0x18>)
}
 801e52e:	4618      	mov	r0, r3
 801e530:	370c      	adds	r7, #12
 801e532:	46bd      	mov	sp, r7
 801e534:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e538:	4770      	bx	lr
 801e53a:	bf00      	nop
 801e53c:	20004898 	.word	0x20004898

0801e540 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801e540:	b480      	push	{r7}
 801e542:	b083      	sub	sp, #12
 801e544:	af00      	add	r7, sp, #0
 801e546:	6078      	str	r0, [r7, #4]

}
 801e548:	bf00      	nop
 801e54a:	370c      	adds	r7, #12
 801e54c:	46bd      	mov	sp, r7
 801e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e552:	4770      	bx	lr

0801e554 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801e554:	b480      	push	{r7}
 801e556:	b085      	sub	sp, #20
 801e558:	af00      	add	r7, sp, #0
 801e55a:	4603      	mov	r3, r0
 801e55c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e55e:	2300      	movs	r3, #0
 801e560:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801e562:	79fb      	ldrb	r3, [r7, #7]
 801e564:	2b03      	cmp	r3, #3
 801e566:	d817      	bhi.n	801e598 <USBD_Get_USB_Status+0x44>
 801e568:	a201      	add	r2, pc, #4	; (adr r2, 801e570 <USBD_Get_USB_Status+0x1c>)
 801e56a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e56e:	bf00      	nop
 801e570:	0801e581 	.word	0x0801e581
 801e574:	0801e587 	.word	0x0801e587
 801e578:	0801e58d 	.word	0x0801e58d
 801e57c:	0801e593 	.word	0x0801e593
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801e580:	2300      	movs	r3, #0
 801e582:	73fb      	strb	r3, [r7, #15]
    break;
 801e584:	e00b      	b.n	801e59e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801e586:	2303      	movs	r3, #3
 801e588:	73fb      	strb	r3, [r7, #15]
    break;
 801e58a:	e008      	b.n	801e59e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801e58c:	2301      	movs	r3, #1
 801e58e:	73fb      	strb	r3, [r7, #15]
    break;
 801e590:	e005      	b.n	801e59e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801e592:	2303      	movs	r3, #3
 801e594:	73fb      	strb	r3, [r7, #15]
    break;
 801e596:	e002      	b.n	801e59e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801e598:	2303      	movs	r3, #3
 801e59a:	73fb      	strb	r3, [r7, #15]
    break;
 801e59c:	bf00      	nop
  }
  return usb_status;
 801e59e:	7bfb      	ldrb	r3, [r7, #15]
}
 801e5a0:	4618      	mov	r0, r3
 801e5a2:	3714      	adds	r7, #20
 801e5a4:	46bd      	mov	sp, r7
 801e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5aa:	4770      	bx	lr

0801e5ac <atoi>:
 801e5ac:	220a      	movs	r2, #10
 801e5ae:	2100      	movs	r1, #0
 801e5b0:	f000 bd3a 	b.w	801f028 <strtol>

0801e5b4 <__libc_init_array>:
 801e5b4:	b570      	push	{r4, r5, r6, lr}
 801e5b6:	4d0d      	ldr	r5, [pc, #52]	; (801e5ec <__libc_init_array+0x38>)
 801e5b8:	4c0d      	ldr	r4, [pc, #52]	; (801e5f0 <__libc_init_array+0x3c>)
 801e5ba:	1b64      	subs	r4, r4, r5
 801e5bc:	10a4      	asrs	r4, r4, #2
 801e5be:	2600      	movs	r6, #0
 801e5c0:	42a6      	cmp	r6, r4
 801e5c2:	d109      	bne.n	801e5d8 <__libc_init_array+0x24>
 801e5c4:	4d0b      	ldr	r5, [pc, #44]	; (801e5f4 <__libc_init_array+0x40>)
 801e5c6:	4c0c      	ldr	r4, [pc, #48]	; (801e5f8 <__libc_init_array+0x44>)
 801e5c8:	f003 fde8 	bl	802219c <_init>
 801e5cc:	1b64      	subs	r4, r4, r5
 801e5ce:	10a4      	asrs	r4, r4, #2
 801e5d0:	2600      	movs	r6, #0
 801e5d2:	42a6      	cmp	r6, r4
 801e5d4:	d105      	bne.n	801e5e2 <__libc_init_array+0x2e>
 801e5d6:	bd70      	pop	{r4, r5, r6, pc}
 801e5d8:	f855 3b04 	ldr.w	r3, [r5], #4
 801e5dc:	4798      	blx	r3
 801e5de:	3601      	adds	r6, #1
 801e5e0:	e7ee      	b.n	801e5c0 <__libc_init_array+0xc>
 801e5e2:	f855 3b04 	ldr.w	r3, [r5], #4
 801e5e6:	4798      	blx	r3
 801e5e8:	3601      	adds	r6, #1
 801e5ea:	e7f2      	b.n	801e5d2 <__libc_init_array+0x1e>
 801e5ec:	08027070 	.word	0x08027070
 801e5f0:	08027070 	.word	0x08027070
 801e5f4:	08027070 	.word	0x08027070
 801e5f8:	08027074 	.word	0x08027074

0801e5fc <localtime_r>:
 801e5fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801e600:	4607      	mov	r7, r0
 801e602:	9101      	str	r1, [sp, #4]
 801e604:	f001 f8d2 	bl	801f7ac <__gettzinfo>
 801e608:	9901      	ldr	r1, [sp, #4]
 801e60a:	4680      	mov	r8, r0
 801e60c:	4638      	mov	r0, r7
 801e60e:	f001 f8d1 	bl	801f7b4 <gmtime_r>
 801e612:	6943      	ldr	r3, [r0, #20]
 801e614:	079a      	lsls	r2, r3, #30
 801e616:	4604      	mov	r4, r0
 801e618:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801e61c:	d105      	bne.n	801e62a <localtime_r+0x2e>
 801e61e:	2264      	movs	r2, #100	; 0x64
 801e620:	fb96 f3f2 	sdiv	r3, r6, r2
 801e624:	fb02 6313 	mls	r3, r2, r3, r6
 801e628:	bb7b      	cbnz	r3, 801e68a <localtime_r+0x8e>
 801e62a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801e62e:	fb96 f5f3 	sdiv	r5, r6, r3
 801e632:	fb03 6515 	mls	r5, r3, r5, r6
 801e636:	fab5 f585 	clz	r5, r5
 801e63a:	096d      	lsrs	r5, r5, #5
 801e63c:	4b68      	ldr	r3, [pc, #416]	; (801e7e0 <localtime_r+0x1e4>)
 801e63e:	2230      	movs	r2, #48	; 0x30
 801e640:	fb02 3505 	mla	r5, r2, r5, r3
 801e644:	f000 fda2 	bl	801f18c <__tz_lock>
 801e648:	f000 fdac 	bl	801f1a4 <_tzset_unlocked>
 801e64c:	4b65      	ldr	r3, [pc, #404]	; (801e7e4 <localtime_r+0x1e8>)
 801e64e:	681b      	ldr	r3, [r3, #0]
 801e650:	b353      	cbz	r3, 801e6a8 <localtime_r+0xac>
 801e652:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e656:	42b3      	cmp	r3, r6
 801e658:	d119      	bne.n	801e68e <localtime_r+0x92>
 801e65a:	f8d8 1000 	ldr.w	r1, [r8]
 801e65e:	e9d7 6700 	ldrd	r6, r7, [r7]
 801e662:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801e666:	b9d1      	cbnz	r1, 801e69e <localtime_r+0xa2>
 801e668:	4296      	cmp	r6, r2
 801e66a:	eb77 0303 	sbcs.w	r3, r7, r3
 801e66e:	da23      	bge.n	801e6b8 <localtime_r+0xbc>
 801e670:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801e674:	4296      	cmp	r6, r2
 801e676:	eb77 0303 	sbcs.w	r3, r7, r3
 801e67a:	bfb4      	ite	lt
 801e67c:	2301      	movlt	r3, #1
 801e67e:	2300      	movge	r3, #0
 801e680:	6223      	str	r3, [r4, #32]
 801e682:	db1b      	blt.n	801e6bc <localtime_r+0xc0>
 801e684:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801e688:	e01a      	b.n	801e6c0 <localtime_r+0xc4>
 801e68a:	2501      	movs	r5, #1
 801e68c:	e7d6      	b.n	801e63c <localtime_r+0x40>
 801e68e:	4630      	mov	r0, r6
 801e690:	f000 fcd4 	bl	801f03c <__tzcalc_limits>
 801e694:	2800      	cmp	r0, #0
 801e696:	d1e0      	bne.n	801e65a <localtime_r+0x5e>
 801e698:	f04f 33ff 	mov.w	r3, #4294967295
 801e69c:	e004      	b.n	801e6a8 <localtime_r+0xac>
 801e69e:	4296      	cmp	r6, r2
 801e6a0:	eb77 0303 	sbcs.w	r3, r7, r3
 801e6a4:	da02      	bge.n	801e6ac <localtime_r+0xb0>
 801e6a6:	2300      	movs	r3, #0
 801e6a8:	6223      	str	r3, [r4, #32]
 801e6aa:	e7eb      	b.n	801e684 <localtime_r+0x88>
 801e6ac:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801e6b0:	4296      	cmp	r6, r2
 801e6b2:	eb77 0303 	sbcs.w	r3, r7, r3
 801e6b6:	daf6      	bge.n	801e6a6 <localtime_r+0xaa>
 801e6b8:	2301      	movs	r3, #1
 801e6ba:	6223      	str	r3, [r4, #32]
 801e6bc:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801e6c0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801e6c4:	203c      	movs	r0, #60	; 0x3c
 801e6c6:	fb91 f6f3 	sdiv	r6, r1, r3
 801e6ca:	fb03 1316 	mls	r3, r3, r6, r1
 801e6ce:	6861      	ldr	r1, [r4, #4]
 801e6d0:	fb93 f2f0 	sdiv	r2, r3, r0
 801e6d4:	fb00 3012 	mls	r0, r0, r2, r3
 801e6d8:	6823      	ldr	r3, [r4, #0]
 801e6da:	1a89      	subs	r1, r1, r2
 801e6dc:	68a2      	ldr	r2, [r4, #8]
 801e6de:	6061      	str	r1, [r4, #4]
 801e6e0:	1a1b      	subs	r3, r3, r0
 801e6e2:	1b92      	subs	r2, r2, r6
 801e6e4:	2b3b      	cmp	r3, #59	; 0x3b
 801e6e6:	6023      	str	r3, [r4, #0]
 801e6e8:	60a2      	str	r2, [r4, #8]
 801e6ea:	dd35      	ble.n	801e758 <localtime_r+0x15c>
 801e6ec:	3101      	adds	r1, #1
 801e6ee:	6061      	str	r1, [r4, #4]
 801e6f0:	3b3c      	subs	r3, #60	; 0x3c
 801e6f2:	6023      	str	r3, [r4, #0]
 801e6f4:	6863      	ldr	r3, [r4, #4]
 801e6f6:	2b3b      	cmp	r3, #59	; 0x3b
 801e6f8:	dd34      	ble.n	801e764 <localtime_r+0x168>
 801e6fa:	3201      	adds	r2, #1
 801e6fc:	60a2      	str	r2, [r4, #8]
 801e6fe:	3b3c      	subs	r3, #60	; 0x3c
 801e700:	6063      	str	r3, [r4, #4]
 801e702:	68a3      	ldr	r3, [r4, #8]
 801e704:	2b17      	cmp	r3, #23
 801e706:	dd33      	ble.n	801e770 <localtime_r+0x174>
 801e708:	69e2      	ldr	r2, [r4, #28]
 801e70a:	3201      	adds	r2, #1
 801e70c:	61e2      	str	r2, [r4, #28]
 801e70e:	69a2      	ldr	r2, [r4, #24]
 801e710:	3201      	adds	r2, #1
 801e712:	2a06      	cmp	r2, #6
 801e714:	bfc8      	it	gt
 801e716:	2200      	movgt	r2, #0
 801e718:	61a2      	str	r2, [r4, #24]
 801e71a:	68e2      	ldr	r2, [r4, #12]
 801e71c:	3b18      	subs	r3, #24
 801e71e:	3201      	adds	r2, #1
 801e720:	60a3      	str	r3, [r4, #8]
 801e722:	6923      	ldr	r3, [r4, #16]
 801e724:	60e2      	str	r2, [r4, #12]
 801e726:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801e72a:	428a      	cmp	r2, r1
 801e72c:	dd0e      	ble.n	801e74c <localtime_r+0x150>
 801e72e:	2b0b      	cmp	r3, #11
 801e730:	eba2 0201 	sub.w	r2, r2, r1
 801e734:	60e2      	str	r2, [r4, #12]
 801e736:	f103 0201 	add.w	r2, r3, #1
 801e73a:	bf09      	itett	eq
 801e73c:	6963      	ldreq	r3, [r4, #20]
 801e73e:	6122      	strne	r2, [r4, #16]
 801e740:	2200      	moveq	r2, #0
 801e742:	3301      	addeq	r3, #1
 801e744:	bf02      	ittt	eq
 801e746:	6122      	streq	r2, [r4, #16]
 801e748:	6163      	streq	r3, [r4, #20]
 801e74a:	61e2      	streq	r2, [r4, #28]
 801e74c:	f000 fd24 	bl	801f198 <__tz_unlock>
 801e750:	4620      	mov	r0, r4
 801e752:	b002      	add	sp, #8
 801e754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e758:	2b00      	cmp	r3, #0
 801e75a:	dacb      	bge.n	801e6f4 <localtime_r+0xf8>
 801e75c:	3901      	subs	r1, #1
 801e75e:	6061      	str	r1, [r4, #4]
 801e760:	333c      	adds	r3, #60	; 0x3c
 801e762:	e7c6      	b.n	801e6f2 <localtime_r+0xf6>
 801e764:	2b00      	cmp	r3, #0
 801e766:	dacc      	bge.n	801e702 <localtime_r+0x106>
 801e768:	3a01      	subs	r2, #1
 801e76a:	60a2      	str	r2, [r4, #8]
 801e76c:	333c      	adds	r3, #60	; 0x3c
 801e76e:	e7c7      	b.n	801e700 <localtime_r+0x104>
 801e770:	2b00      	cmp	r3, #0
 801e772:	daeb      	bge.n	801e74c <localtime_r+0x150>
 801e774:	69e2      	ldr	r2, [r4, #28]
 801e776:	3a01      	subs	r2, #1
 801e778:	61e2      	str	r2, [r4, #28]
 801e77a:	69a2      	ldr	r2, [r4, #24]
 801e77c:	3a01      	subs	r2, #1
 801e77e:	bf48      	it	mi
 801e780:	2206      	movmi	r2, #6
 801e782:	61a2      	str	r2, [r4, #24]
 801e784:	68e2      	ldr	r2, [r4, #12]
 801e786:	3318      	adds	r3, #24
 801e788:	3a01      	subs	r2, #1
 801e78a:	60e2      	str	r2, [r4, #12]
 801e78c:	60a3      	str	r3, [r4, #8]
 801e78e:	2a00      	cmp	r2, #0
 801e790:	d1dc      	bne.n	801e74c <localtime_r+0x150>
 801e792:	6923      	ldr	r3, [r4, #16]
 801e794:	3b01      	subs	r3, #1
 801e796:	d405      	bmi.n	801e7a4 <localtime_r+0x1a8>
 801e798:	6123      	str	r3, [r4, #16]
 801e79a:	6923      	ldr	r3, [r4, #16]
 801e79c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801e7a0:	60e3      	str	r3, [r4, #12]
 801e7a2:	e7d3      	b.n	801e74c <localtime_r+0x150>
 801e7a4:	230b      	movs	r3, #11
 801e7a6:	6123      	str	r3, [r4, #16]
 801e7a8:	6963      	ldr	r3, [r4, #20]
 801e7aa:	1e5a      	subs	r2, r3, #1
 801e7ac:	6162      	str	r2, [r4, #20]
 801e7ae:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801e7b2:	0793      	lsls	r3, r2, #30
 801e7b4:	d105      	bne.n	801e7c2 <localtime_r+0x1c6>
 801e7b6:	2164      	movs	r1, #100	; 0x64
 801e7b8:	fb92 f3f1 	sdiv	r3, r2, r1
 801e7bc:	fb01 2313 	mls	r3, r1, r3, r2
 801e7c0:	b963      	cbnz	r3, 801e7dc <localtime_r+0x1e0>
 801e7c2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801e7c6:	fb92 f3f1 	sdiv	r3, r2, r1
 801e7ca:	fb01 2313 	mls	r3, r1, r3, r2
 801e7ce:	fab3 f383 	clz	r3, r3
 801e7d2:	095b      	lsrs	r3, r3, #5
 801e7d4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801e7d8:	61e3      	str	r3, [r4, #28]
 801e7da:	e7de      	b.n	801e79a <localtime_r+0x19e>
 801e7dc:	2301      	movs	r3, #1
 801e7de:	e7f9      	b.n	801e7d4 <localtime_r+0x1d8>
 801e7e0:	08026e28 	.word	0x08026e28
 801e7e4:	20004ad4 	.word	0x20004ad4

0801e7e8 <memcmp>:
 801e7e8:	b530      	push	{r4, r5, lr}
 801e7ea:	3901      	subs	r1, #1
 801e7ec:	2400      	movs	r4, #0
 801e7ee:	42a2      	cmp	r2, r4
 801e7f0:	d101      	bne.n	801e7f6 <memcmp+0xe>
 801e7f2:	2000      	movs	r0, #0
 801e7f4:	e005      	b.n	801e802 <memcmp+0x1a>
 801e7f6:	5d03      	ldrb	r3, [r0, r4]
 801e7f8:	3401      	adds	r4, #1
 801e7fa:	5d0d      	ldrb	r5, [r1, r4]
 801e7fc:	42ab      	cmp	r3, r5
 801e7fe:	d0f6      	beq.n	801e7ee <memcmp+0x6>
 801e800:	1b58      	subs	r0, r3, r5
 801e802:	bd30      	pop	{r4, r5, pc}

0801e804 <memcpy>:
 801e804:	440a      	add	r2, r1
 801e806:	4291      	cmp	r1, r2
 801e808:	f100 33ff 	add.w	r3, r0, #4294967295
 801e80c:	d100      	bne.n	801e810 <memcpy+0xc>
 801e80e:	4770      	bx	lr
 801e810:	b510      	push	{r4, lr}
 801e812:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e816:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e81a:	4291      	cmp	r1, r2
 801e81c:	d1f9      	bne.n	801e812 <memcpy+0xe>
 801e81e:	bd10      	pop	{r4, pc}

0801e820 <memmove>:
 801e820:	4288      	cmp	r0, r1
 801e822:	b510      	push	{r4, lr}
 801e824:	eb01 0402 	add.w	r4, r1, r2
 801e828:	d902      	bls.n	801e830 <memmove+0x10>
 801e82a:	4284      	cmp	r4, r0
 801e82c:	4623      	mov	r3, r4
 801e82e:	d807      	bhi.n	801e840 <memmove+0x20>
 801e830:	1e43      	subs	r3, r0, #1
 801e832:	42a1      	cmp	r1, r4
 801e834:	d008      	beq.n	801e848 <memmove+0x28>
 801e836:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e83a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e83e:	e7f8      	b.n	801e832 <memmove+0x12>
 801e840:	4402      	add	r2, r0
 801e842:	4601      	mov	r1, r0
 801e844:	428a      	cmp	r2, r1
 801e846:	d100      	bne.n	801e84a <memmove+0x2a>
 801e848:	bd10      	pop	{r4, pc}
 801e84a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e84e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e852:	e7f7      	b.n	801e844 <memmove+0x24>

0801e854 <memset>:
 801e854:	4402      	add	r2, r0
 801e856:	4603      	mov	r3, r0
 801e858:	4293      	cmp	r3, r2
 801e85a:	d100      	bne.n	801e85e <memset+0xa>
 801e85c:	4770      	bx	lr
 801e85e:	f803 1b01 	strb.w	r1, [r3], #1
 801e862:	e7f9      	b.n	801e858 <memset+0x4>

0801e864 <validate_structure>:
 801e864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e866:	6801      	ldr	r1, [r0, #0]
 801e868:	293b      	cmp	r1, #59	; 0x3b
 801e86a:	4604      	mov	r4, r0
 801e86c:	d911      	bls.n	801e892 <validate_structure+0x2e>
 801e86e:	223c      	movs	r2, #60	; 0x3c
 801e870:	4668      	mov	r0, sp
 801e872:	f000 fe37 	bl	801f4e4 <div>
 801e876:	9a01      	ldr	r2, [sp, #4]
 801e878:	6863      	ldr	r3, [r4, #4]
 801e87a:	9900      	ldr	r1, [sp, #0]
 801e87c:	2a00      	cmp	r2, #0
 801e87e:	440b      	add	r3, r1
 801e880:	6063      	str	r3, [r4, #4]
 801e882:	bfbb      	ittet	lt
 801e884:	323c      	addlt	r2, #60	; 0x3c
 801e886:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801e88a:	6022      	strge	r2, [r4, #0]
 801e88c:	6022      	strlt	r2, [r4, #0]
 801e88e:	bfb8      	it	lt
 801e890:	6063      	strlt	r3, [r4, #4]
 801e892:	6861      	ldr	r1, [r4, #4]
 801e894:	293b      	cmp	r1, #59	; 0x3b
 801e896:	d911      	bls.n	801e8bc <validate_structure+0x58>
 801e898:	223c      	movs	r2, #60	; 0x3c
 801e89a:	4668      	mov	r0, sp
 801e89c:	f000 fe22 	bl	801f4e4 <div>
 801e8a0:	9a01      	ldr	r2, [sp, #4]
 801e8a2:	68a3      	ldr	r3, [r4, #8]
 801e8a4:	9900      	ldr	r1, [sp, #0]
 801e8a6:	2a00      	cmp	r2, #0
 801e8a8:	440b      	add	r3, r1
 801e8aa:	60a3      	str	r3, [r4, #8]
 801e8ac:	bfbb      	ittet	lt
 801e8ae:	323c      	addlt	r2, #60	; 0x3c
 801e8b0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801e8b4:	6062      	strge	r2, [r4, #4]
 801e8b6:	6062      	strlt	r2, [r4, #4]
 801e8b8:	bfb8      	it	lt
 801e8ba:	60a3      	strlt	r3, [r4, #8]
 801e8bc:	68a1      	ldr	r1, [r4, #8]
 801e8be:	2917      	cmp	r1, #23
 801e8c0:	d911      	bls.n	801e8e6 <validate_structure+0x82>
 801e8c2:	2218      	movs	r2, #24
 801e8c4:	4668      	mov	r0, sp
 801e8c6:	f000 fe0d 	bl	801f4e4 <div>
 801e8ca:	9a01      	ldr	r2, [sp, #4]
 801e8cc:	68e3      	ldr	r3, [r4, #12]
 801e8ce:	9900      	ldr	r1, [sp, #0]
 801e8d0:	2a00      	cmp	r2, #0
 801e8d2:	440b      	add	r3, r1
 801e8d4:	60e3      	str	r3, [r4, #12]
 801e8d6:	bfbb      	ittet	lt
 801e8d8:	3218      	addlt	r2, #24
 801e8da:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801e8de:	60a2      	strge	r2, [r4, #8]
 801e8e0:	60a2      	strlt	r2, [r4, #8]
 801e8e2:	bfb8      	it	lt
 801e8e4:	60e3      	strlt	r3, [r4, #12]
 801e8e6:	6921      	ldr	r1, [r4, #16]
 801e8e8:	290b      	cmp	r1, #11
 801e8ea:	d911      	bls.n	801e910 <validate_structure+0xac>
 801e8ec:	220c      	movs	r2, #12
 801e8ee:	4668      	mov	r0, sp
 801e8f0:	f000 fdf8 	bl	801f4e4 <div>
 801e8f4:	9a01      	ldr	r2, [sp, #4]
 801e8f6:	6963      	ldr	r3, [r4, #20]
 801e8f8:	9900      	ldr	r1, [sp, #0]
 801e8fa:	2a00      	cmp	r2, #0
 801e8fc:	440b      	add	r3, r1
 801e8fe:	6163      	str	r3, [r4, #20]
 801e900:	bfbb      	ittet	lt
 801e902:	320c      	addlt	r2, #12
 801e904:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801e908:	6122      	strge	r2, [r4, #16]
 801e90a:	6122      	strlt	r2, [r4, #16]
 801e90c:	bfb8      	it	lt
 801e90e:	6163      	strlt	r3, [r4, #20]
 801e910:	6963      	ldr	r3, [r4, #20]
 801e912:	0799      	lsls	r1, r3, #30
 801e914:	d120      	bne.n	801e958 <validate_structure+0xf4>
 801e916:	2164      	movs	r1, #100	; 0x64
 801e918:	fb93 f2f1 	sdiv	r2, r3, r1
 801e91c:	fb01 3212 	mls	r2, r1, r2, r3
 801e920:	b9e2      	cbnz	r2, 801e95c <validate_structure+0xf8>
 801e922:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801e926:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801e92a:	fb93 f2f1 	sdiv	r2, r3, r1
 801e92e:	fb01 3312 	mls	r3, r1, r2, r3
 801e932:	2b00      	cmp	r3, #0
 801e934:	bf14      	ite	ne
 801e936:	231c      	movne	r3, #28
 801e938:	231d      	moveq	r3, #29
 801e93a:	68e2      	ldr	r2, [r4, #12]
 801e93c:	2a00      	cmp	r2, #0
 801e93e:	dc0f      	bgt.n	801e960 <validate_structure+0xfc>
 801e940:	4f33      	ldr	r7, [pc, #204]	; (801ea10 <validate_structure+0x1ac>)
 801e942:	260b      	movs	r6, #11
 801e944:	2064      	movs	r0, #100	; 0x64
 801e946:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801e94a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801e94e:	f1bc 0f00 	cmp.w	ip, #0
 801e952:	dd31      	ble.n	801e9b8 <validate_structure+0x154>
 801e954:	b003      	add	sp, #12
 801e956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e958:	231c      	movs	r3, #28
 801e95a:	e7ee      	b.n	801e93a <validate_structure+0xd6>
 801e95c:	231d      	movs	r3, #29
 801e95e:	e7ec      	b.n	801e93a <validate_structure+0xd6>
 801e960:	4f2b      	ldr	r7, [pc, #172]	; (801ea10 <validate_structure+0x1ac>)
 801e962:	f04f 0c00 	mov.w	ip, #0
 801e966:	2564      	movs	r5, #100	; 0x64
 801e968:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801e96c:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801e970:	2a01      	cmp	r2, #1
 801e972:	bf14      	ite	ne
 801e974:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 801e978:	4618      	moveq	r0, r3
 801e97a:	4281      	cmp	r1, r0
 801e97c:	ddea      	ble.n	801e954 <validate_structure+0xf0>
 801e97e:	3201      	adds	r2, #1
 801e980:	1a09      	subs	r1, r1, r0
 801e982:	2a0c      	cmp	r2, #12
 801e984:	60e1      	str	r1, [r4, #12]
 801e986:	6122      	str	r2, [r4, #16]
 801e988:	d1f0      	bne.n	801e96c <validate_structure+0x108>
 801e98a:	6963      	ldr	r3, [r4, #20]
 801e98c:	1c5a      	adds	r2, r3, #1
 801e98e:	0791      	lsls	r1, r2, #30
 801e990:	e9c4 c204 	strd	ip, r2, [r4, #16]
 801e994:	d137      	bne.n	801ea06 <validate_structure+0x1a2>
 801e996:	fb92 f1f5 	sdiv	r1, r2, r5
 801e99a:	fb05 2211 	mls	r2, r5, r1, r2
 801e99e:	2a00      	cmp	r2, #0
 801e9a0:	d133      	bne.n	801ea0a <validate_structure+0x1a6>
 801e9a2:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801e9a6:	fb93 f2f6 	sdiv	r2, r3, r6
 801e9aa:	fb06 3312 	mls	r3, r6, r2, r3
 801e9ae:	2b00      	cmp	r3, #0
 801e9b0:	bf14      	ite	ne
 801e9b2:	231c      	movne	r3, #28
 801e9b4:	231d      	moveq	r3, #29
 801e9b6:	e7d9      	b.n	801e96c <validate_structure+0x108>
 801e9b8:	6921      	ldr	r1, [r4, #16]
 801e9ba:	3901      	subs	r1, #1
 801e9bc:	6121      	str	r1, [r4, #16]
 801e9be:	3101      	adds	r1, #1
 801e9c0:	d114      	bne.n	801e9ec <validate_structure+0x188>
 801e9c2:	6963      	ldr	r3, [r4, #20]
 801e9c4:	1e59      	subs	r1, r3, #1
 801e9c6:	078a      	lsls	r2, r1, #30
 801e9c8:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801e9cc:	d117      	bne.n	801e9fe <validate_structure+0x19a>
 801e9ce:	fb91 f2f0 	sdiv	r2, r1, r0
 801e9d2:	fb00 1112 	mls	r1, r0, r2, r1
 801e9d6:	b9a1      	cbnz	r1, 801ea02 <validate_structure+0x19e>
 801e9d8:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801e9dc:	fb93 f2f5 	sdiv	r2, r3, r5
 801e9e0:	fb05 3312 	mls	r3, r5, r2, r3
 801e9e4:	2b00      	cmp	r3, #0
 801e9e6:	bf14      	ite	ne
 801e9e8:	231c      	movne	r3, #28
 801e9ea:	231d      	moveq	r3, #29
 801e9ec:	6922      	ldr	r2, [r4, #16]
 801e9ee:	2a01      	cmp	r2, #1
 801e9f0:	bf14      	ite	ne
 801e9f2:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801e9f6:	461a      	moveq	r2, r3
 801e9f8:	4462      	add	r2, ip
 801e9fa:	60e2      	str	r2, [r4, #12]
 801e9fc:	e7a5      	b.n	801e94a <validate_structure+0xe6>
 801e9fe:	231c      	movs	r3, #28
 801ea00:	e7f4      	b.n	801e9ec <validate_structure+0x188>
 801ea02:	231d      	movs	r3, #29
 801ea04:	e7f2      	b.n	801e9ec <validate_structure+0x188>
 801ea06:	231c      	movs	r3, #28
 801ea08:	e7b0      	b.n	801e96c <validate_structure+0x108>
 801ea0a:	231d      	movs	r3, #29
 801ea0c:	e7ae      	b.n	801e96c <validate_structure+0x108>
 801ea0e:	bf00      	nop
 801ea10:	08026dc8 	.word	0x08026dc8

0801ea14 <mktime>:
 801ea14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea18:	b08b      	sub	sp, #44	; 0x2c
 801ea1a:	4605      	mov	r5, r0
 801ea1c:	f000 fec6 	bl	801f7ac <__gettzinfo>
 801ea20:	4607      	mov	r7, r0
 801ea22:	4628      	mov	r0, r5
 801ea24:	f7ff ff1e 	bl	801e864 <validate_structure>
 801ea28:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ea2c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 801ea30:	68a8      	ldr	r0, [r5, #8]
 801ea32:	696e      	ldr	r6, [r5, #20]
 801ea34:	fb0a 2303 	mla	r3, sl, r3, r2
 801ea38:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 801ea3c:	fb0a 3a00 	mla	sl, sl, r0, r3
 801ea40:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 801ea44:	4ac3      	ldr	r2, [pc, #780]	; (801ed54 <mktime+0x340>)
 801ea46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801ea4a:	3c01      	subs	r4, #1
 801ea4c:	2b01      	cmp	r3, #1
 801ea4e:	4414      	add	r4, r2
 801ea50:	dd11      	ble.n	801ea76 <mktime+0x62>
 801ea52:	07b1      	lsls	r1, r6, #30
 801ea54:	d10f      	bne.n	801ea76 <mktime+0x62>
 801ea56:	2264      	movs	r2, #100	; 0x64
 801ea58:	fb96 f3f2 	sdiv	r3, r6, r2
 801ea5c:	fb02 6313 	mls	r3, r2, r3, r6
 801ea60:	b943      	cbnz	r3, 801ea74 <mktime+0x60>
 801ea62:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801ea66:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801ea6a:	fb91 f3f2 	sdiv	r3, r1, r2
 801ea6e:	fb02 1313 	mls	r3, r2, r3, r1
 801ea72:	b903      	cbnz	r3, 801ea76 <mktime+0x62>
 801ea74:	3401      	adds	r4, #1
 801ea76:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801ea7a:	3310      	adds	r3, #16
 801ea7c:	f644 6220 	movw	r2, #20000	; 0x4e20
 801ea80:	4293      	cmp	r3, r2
 801ea82:	61ec      	str	r4, [r5, #28]
 801ea84:	f200 8161 	bhi.w	801ed4a <mktime+0x336>
 801ea88:	2e46      	cmp	r6, #70	; 0x46
 801ea8a:	dd77      	ble.n	801eb7c <mktime+0x168>
 801ea8c:	2346      	movs	r3, #70	; 0x46
 801ea8e:	f240 1e6d 	movw	lr, #365	; 0x16d
 801ea92:	2164      	movs	r1, #100	; 0x64
 801ea94:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801ea98:	079a      	lsls	r2, r3, #30
 801ea9a:	d169      	bne.n	801eb70 <mktime+0x15c>
 801ea9c:	fb93 f2f1 	sdiv	r2, r3, r1
 801eaa0:	fb01 3212 	mls	r2, r1, r2, r3
 801eaa4:	2a00      	cmp	r2, #0
 801eaa6:	d166      	bne.n	801eb76 <mktime+0x162>
 801eaa8:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801eaac:	fb9c f2f0 	sdiv	r2, ip, r0
 801eab0:	fb00 c212 	mls	r2, r0, r2, ip
 801eab4:	2a00      	cmp	r2, #0
 801eab6:	bf14      	ite	ne
 801eab8:	4672      	movne	r2, lr
 801eaba:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801eabe:	3301      	adds	r3, #1
 801eac0:	429e      	cmp	r6, r3
 801eac2:	4414      	add	r4, r2
 801eac4:	d1e8      	bne.n	801ea98 <mktime+0x84>
 801eac6:	4ba4      	ldr	r3, [pc, #656]	; (801ed58 <mktime+0x344>)
 801eac8:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801eacc:	fbc3 ab04 	smlal	sl, fp, r3, r4
 801ead0:	f000 fb5c 	bl	801f18c <__tz_lock>
 801ead4:	f000 fb66 	bl	801f1a4 <_tzset_unlocked>
 801ead8:	4ba0      	ldr	r3, [pc, #640]	; (801ed5c <mktime+0x348>)
 801eada:	f8d3 9000 	ldr.w	r9, [r3]
 801eade:	f1b9 0f00 	cmp.w	r9, #0
 801eae2:	d03f      	beq.n	801eb64 <mktime+0x150>
 801eae4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801eae8:	6968      	ldr	r0, [r5, #20]
 801eaea:	687b      	ldr	r3, [r7, #4]
 801eaec:	f1b9 0f01 	cmp.w	r9, #1
 801eaf0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801eaf4:	46c8      	mov	r8, r9
 801eaf6:	bfa8      	it	ge
 801eaf8:	f04f 0801 	movge.w	r8, #1
 801eafc:	4283      	cmp	r3, r0
 801eafe:	d17f      	bne.n	801ec00 <mktime+0x1ec>
 801eb00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801eb02:	4619      	mov	r1, r3
 801eb04:	17da      	asrs	r2, r3, #31
 801eb06:	e9cd 1200 	strd	r1, r2, [sp]
 801eb0a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801eb0e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801eb12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eb16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801eb18:	1a80      	subs	r0, r0, r2
 801eb1a:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 801eb1e:	4582      	cmp	sl, r0
 801eb20:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801eb24:	eb7b 0101 	sbcs.w	r1, fp, r1
 801eb28:	da71      	bge.n	801ec0e <mktime+0x1fa>
 801eb2a:	9800      	ldr	r0, [sp, #0]
 801eb2c:	6a39      	ldr	r1, [r7, #32]
 801eb2e:	1a09      	subs	r1, r1, r0
 801eb30:	9104      	str	r1, [sp, #16]
 801eb32:	9801      	ldr	r0, [sp, #4]
 801eb34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801eb36:	eb61 0100 	sbc.w	r1, r1, r0
 801eb3a:	9105      	str	r1, [sp, #20]
 801eb3c:	6839      	ldr	r1, [r7, #0]
 801eb3e:	2900      	cmp	r1, #0
 801eb40:	d075      	beq.n	801ec2e <mktime+0x21a>
 801eb42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801eb46:	4582      	cmp	sl, r0
 801eb48:	eb7b 0101 	sbcs.w	r1, fp, r1
 801eb4c:	db05      	blt.n	801eb5a <mktime+0x146>
 801eb4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801eb52:	4582      	cmp	sl, r0
 801eb54:	eb7b 0101 	sbcs.w	r1, fp, r1
 801eb58:	db6f      	blt.n	801ec3a <mktime+0x226>
 801eb5a:	f1b9 0f00 	cmp.w	r9, #0
 801eb5e:	f04f 0900 	mov.w	r9, #0
 801eb62:	da6f      	bge.n	801ec44 <mktime+0x230>
 801eb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eb66:	eb1a 0a03 	adds.w	sl, sl, r3
 801eb6a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801eb6e:	e0ae      	b.n	801ecce <mktime+0x2ba>
 801eb70:	f240 126d 	movw	r2, #365	; 0x16d
 801eb74:	e7a3      	b.n	801eabe <mktime+0xaa>
 801eb76:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801eb7a:	e7a0      	b.n	801eabe <mktime+0xaa>
 801eb7c:	d0a3      	beq.n	801eac6 <mktime+0xb2>
 801eb7e:	2345      	movs	r3, #69	; 0x45
 801eb80:	f240 1e6d 	movw	lr, #365	; 0x16d
 801eb84:	2164      	movs	r1, #100	; 0x64
 801eb86:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801eb8a:	e012      	b.n	801ebb2 <mktime+0x19e>
 801eb8c:	bb62      	cbnz	r2, 801ebe8 <mktime+0x1d4>
 801eb8e:	fb93 f2f1 	sdiv	r2, r3, r1
 801eb92:	fb01 3212 	mls	r2, r1, r2, r3
 801eb96:	bb52      	cbnz	r2, 801ebee <mktime+0x1da>
 801eb98:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801eb9c:	fb9c f2f0 	sdiv	r2, ip, r0
 801eba0:	fb00 c212 	mls	r2, r0, r2, ip
 801eba4:	2a00      	cmp	r2, #0
 801eba6:	bf14      	ite	ne
 801eba8:	4672      	movne	r2, lr
 801ebaa:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801ebae:	1aa4      	subs	r4, r4, r2
 801ebb0:	3b01      	subs	r3, #1
 801ebb2:	429e      	cmp	r6, r3
 801ebb4:	f003 0203 	and.w	r2, r3, #3
 801ebb8:	dbe8      	blt.n	801eb8c <mktime+0x178>
 801ebba:	b9da      	cbnz	r2, 801ebf4 <mktime+0x1e0>
 801ebbc:	2264      	movs	r2, #100	; 0x64
 801ebbe:	fb96 f3f2 	sdiv	r3, r6, r2
 801ebc2:	fb02 6313 	mls	r3, r2, r3, r6
 801ebc6:	b9c3      	cbnz	r3, 801ebfa <mktime+0x1e6>
 801ebc8:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801ebcc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801ebd0:	fb91 f3f2 	sdiv	r3, r1, r2
 801ebd4:	fb02 1313 	mls	r3, r2, r3, r1
 801ebd8:	2b00      	cmp	r3, #0
 801ebda:	f240 136d 	movw	r3, #365	; 0x16d
 801ebde:	bf08      	it	eq
 801ebe0:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801ebe4:	1ae4      	subs	r4, r4, r3
 801ebe6:	e76e      	b.n	801eac6 <mktime+0xb2>
 801ebe8:	f240 126d 	movw	r2, #365	; 0x16d
 801ebec:	e7df      	b.n	801ebae <mktime+0x19a>
 801ebee:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801ebf2:	e7dc      	b.n	801ebae <mktime+0x19a>
 801ebf4:	f240 136d 	movw	r3, #365	; 0x16d
 801ebf8:	e7f4      	b.n	801ebe4 <mktime+0x1d0>
 801ebfa:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801ebfe:	e7f1      	b.n	801ebe4 <mktime+0x1d0>
 801ec00:	f000 fa1c 	bl	801f03c <__tzcalc_limits>
 801ec04:	2800      	cmp	r0, #0
 801ec06:	f47f af7b 	bne.w	801eb00 <mktime+0xec>
 801ec0a:	46c1      	mov	r9, r8
 801ec0c:	e054      	b.n	801ecb8 <mktime+0x2a4>
 801ec0e:	9800      	ldr	r0, [sp, #0]
 801ec10:	9902      	ldr	r1, [sp, #8]
 801ec12:	1a09      	subs	r1, r1, r0
 801ec14:	9108      	str	r1, [sp, #32]
 801ec16:	9801      	ldr	r0, [sp, #4]
 801ec18:	9903      	ldr	r1, [sp, #12]
 801ec1a:	eb61 0100 	sbc.w	r1, r1, r0
 801ec1e:	9109      	str	r1, [sp, #36]	; 0x24
 801ec20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ec24:	4582      	cmp	sl, r0
 801ec26:	eb7b 0101 	sbcs.w	r1, fp, r1
 801ec2a:	dbee      	blt.n	801ec0a <mktime+0x1f6>
 801ec2c:	e77d      	b.n	801eb2a <mktime+0x116>
 801ec2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ec32:	4582      	cmp	sl, r0
 801ec34:	eb7b 0101 	sbcs.w	r1, fp, r1
 801ec38:	db89      	blt.n	801eb4e <mktime+0x13a>
 801ec3a:	f1b9 0f00 	cmp.w	r9, #0
 801ec3e:	db3f      	blt.n	801ecc0 <mktime+0x2ac>
 801ec40:	f04f 0901 	mov.w	r9, #1
 801ec44:	ea88 0809 	eor.w	r8, r8, r9
 801ec48:	f1b8 0f01 	cmp.w	r8, #1
 801ec4c:	d134      	bne.n	801ecb8 <mktime+0x2a4>
 801ec4e:	f1b9 0f00 	cmp.w	r9, #0
 801ec52:	d04f      	beq.n	801ecf4 <mktime+0x2e0>
 801ec54:	1ad3      	subs	r3, r2, r3
 801ec56:	682a      	ldr	r2, [r5, #0]
 801ec58:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801ec5c:	441a      	add	r2, r3
 801ec5e:	eb1a 0a03 	adds.w	sl, sl, r3
 801ec62:	602a      	str	r2, [r5, #0]
 801ec64:	4628      	mov	r0, r5
 801ec66:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801ec6a:	f7ff fdfb 	bl	801e864 <validate_structure>
 801ec6e:	68ea      	ldr	r2, [r5, #12]
 801ec70:	ebb2 0208 	subs.w	r2, r2, r8
 801ec74:	d020      	beq.n	801ecb8 <mktime+0x2a4>
 801ec76:	2a01      	cmp	r2, #1
 801ec78:	dc3e      	bgt.n	801ecf8 <mktime+0x2e4>
 801ec7a:	1c90      	adds	r0, r2, #2
 801ec7c:	bfd8      	it	le
 801ec7e:	2201      	movle	r2, #1
 801ec80:	69eb      	ldr	r3, [r5, #28]
 801ec82:	18d3      	adds	r3, r2, r3
 801ec84:	4414      	add	r4, r2
 801ec86:	d540      	bpl.n	801ed0a <mktime+0x2f6>
 801ec88:	1e72      	subs	r2, r6, #1
 801ec8a:	0791      	lsls	r1, r2, #30
 801ec8c:	d137      	bne.n	801ecfe <mktime+0x2ea>
 801ec8e:	2164      	movs	r1, #100	; 0x64
 801ec90:	fb92 f3f1 	sdiv	r3, r2, r1
 801ec94:	fb01 2313 	mls	r3, r1, r3, r2
 801ec98:	bba3      	cbnz	r3, 801ed04 <mktime+0x2f0>
 801ec9a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801ec9e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801eca2:	fb96 f3f2 	sdiv	r3, r6, r2
 801eca6:	fb02 6613 	mls	r6, r2, r3, r6
 801ecaa:	2e00      	cmp	r6, #0
 801ecac:	f240 136d 	movw	r3, #365	; 0x16d
 801ecb0:	bf18      	it	ne
 801ecb2:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801ecb6:	61eb      	str	r3, [r5, #28]
 801ecb8:	f1b9 0f01 	cmp.w	r9, #1
 801ecbc:	f47f af52 	bne.w	801eb64 <mktime+0x150>
 801ecc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ecc2:	eb1a 0a03 	adds.w	sl, sl, r3
 801ecc6:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801ecca:	f04f 0901 	mov.w	r9, #1
 801ecce:	f000 fa63 	bl	801f198 <__tz_unlock>
 801ecd2:	3404      	adds	r4, #4
 801ecd4:	2307      	movs	r3, #7
 801ecd6:	fb94 f3f3 	sdiv	r3, r4, r3
 801ecda:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801ecde:	1ae4      	subs	r4, r4, r3
 801ece0:	bf48      	it	mi
 801ece2:	3407      	addmi	r4, #7
 801ece4:	f8c5 9020 	str.w	r9, [r5, #32]
 801ece8:	61ac      	str	r4, [r5, #24]
 801ecea:	4650      	mov	r0, sl
 801ecec:	4659      	mov	r1, fp
 801ecee:	b00b      	add	sp, #44	; 0x2c
 801ecf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecf4:	1a9b      	subs	r3, r3, r2
 801ecf6:	e7ae      	b.n	801ec56 <mktime+0x242>
 801ecf8:	f04f 32ff 	mov.w	r2, #4294967295
 801ecfc:	e7c0      	b.n	801ec80 <mktime+0x26c>
 801ecfe:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801ed02:	e7d8      	b.n	801ecb6 <mktime+0x2a2>
 801ed04:	f240 136d 	movw	r3, #365	; 0x16d
 801ed08:	e7d5      	b.n	801ecb6 <mktime+0x2a2>
 801ed0a:	07b2      	lsls	r2, r6, #30
 801ed0c:	d117      	bne.n	801ed3e <mktime+0x32a>
 801ed0e:	2164      	movs	r1, #100	; 0x64
 801ed10:	fb96 f2f1 	sdiv	r2, r6, r1
 801ed14:	fb01 6212 	mls	r2, r1, r2, r6
 801ed18:	b9a2      	cbnz	r2, 801ed44 <mktime+0x330>
 801ed1a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801ed1e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801ed22:	fb96 f2f1 	sdiv	r2, r6, r1
 801ed26:	fb01 6612 	mls	r6, r1, r2, r6
 801ed2a:	2e00      	cmp	r6, #0
 801ed2c:	f240 126d 	movw	r2, #365	; 0x16d
 801ed30:	bf08      	it	eq
 801ed32:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801ed36:	4293      	cmp	r3, r2
 801ed38:	bfa8      	it	ge
 801ed3a:	1a9b      	subge	r3, r3, r2
 801ed3c:	e7bb      	b.n	801ecb6 <mktime+0x2a2>
 801ed3e:	f240 126d 	movw	r2, #365	; 0x16d
 801ed42:	e7f8      	b.n	801ed36 <mktime+0x322>
 801ed44:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801ed48:	e7f5      	b.n	801ed36 <mktime+0x322>
 801ed4a:	f04f 3aff 	mov.w	sl, #4294967295
 801ed4e:	f04f 3bff 	mov.w	fp, #4294967295
 801ed52:	e7ca      	b.n	801ecea <mktime+0x2d6>
 801ed54:	08026df8 	.word	0x08026df8
 801ed58:	00015180 	.word	0x00015180
 801ed5c:	20004ad4 	.word	0x20004ad4

0801ed60 <iprintf>:
 801ed60:	b40f      	push	{r0, r1, r2, r3}
 801ed62:	4b0a      	ldr	r3, [pc, #40]	; (801ed8c <iprintf+0x2c>)
 801ed64:	b513      	push	{r0, r1, r4, lr}
 801ed66:	681c      	ldr	r4, [r3, #0]
 801ed68:	b124      	cbz	r4, 801ed74 <iprintf+0x14>
 801ed6a:	69a3      	ldr	r3, [r4, #24]
 801ed6c:	b913      	cbnz	r3, 801ed74 <iprintf+0x14>
 801ed6e:	4620      	mov	r0, r4
 801ed70:	f000 fc2a 	bl	801f5c8 <__sinit>
 801ed74:	ab05      	add	r3, sp, #20
 801ed76:	9a04      	ldr	r2, [sp, #16]
 801ed78:	68a1      	ldr	r1, [r4, #8]
 801ed7a:	9301      	str	r3, [sp, #4]
 801ed7c:	4620      	mov	r0, r4
 801ed7e:	f001 f80f 	bl	801fda0 <_vfiprintf_r>
 801ed82:	b002      	add	sp, #8
 801ed84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ed88:	b004      	add	sp, #16
 801ed8a:	4770      	bx	lr
 801ed8c:	200001ac 	.word	0x200001ac

0801ed90 <rand>:
 801ed90:	4b17      	ldr	r3, [pc, #92]	; (801edf0 <rand+0x60>)
 801ed92:	b510      	push	{r4, lr}
 801ed94:	681c      	ldr	r4, [r3, #0]
 801ed96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ed98:	b9b3      	cbnz	r3, 801edc8 <rand+0x38>
 801ed9a:	2018      	movs	r0, #24
 801ed9c:	f000 fdc0 	bl	801f920 <malloc>
 801eda0:	63a0      	str	r0, [r4, #56]	; 0x38
 801eda2:	b928      	cbnz	r0, 801edb0 <rand+0x20>
 801eda4:	4602      	mov	r2, r0
 801eda6:	4b13      	ldr	r3, [pc, #76]	; (801edf4 <rand+0x64>)
 801eda8:	4813      	ldr	r0, [pc, #76]	; (801edf8 <rand+0x68>)
 801edaa:	214e      	movs	r1, #78	; 0x4e
 801edac:	f000 fb7c 	bl	801f4a8 <__assert_func>
 801edb0:	4a12      	ldr	r2, [pc, #72]	; (801edfc <rand+0x6c>)
 801edb2:	4b13      	ldr	r3, [pc, #76]	; (801ee00 <rand+0x70>)
 801edb4:	e9c0 2300 	strd	r2, r3, [r0]
 801edb8:	4b12      	ldr	r3, [pc, #72]	; (801ee04 <rand+0x74>)
 801edba:	6083      	str	r3, [r0, #8]
 801edbc:	230b      	movs	r3, #11
 801edbe:	8183      	strh	r3, [r0, #12]
 801edc0:	2201      	movs	r2, #1
 801edc2:	2300      	movs	r3, #0
 801edc4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801edc8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801edca:	480f      	ldr	r0, [pc, #60]	; (801ee08 <rand+0x78>)
 801edcc:	690a      	ldr	r2, [r1, #16]
 801edce:	694b      	ldr	r3, [r1, #20]
 801edd0:	4c0e      	ldr	r4, [pc, #56]	; (801ee0c <rand+0x7c>)
 801edd2:	4350      	muls	r0, r2
 801edd4:	fb04 0003 	mla	r0, r4, r3, r0
 801edd8:	fba2 3404 	umull	r3, r4, r2, r4
 801eddc:	1c5a      	adds	r2, r3, #1
 801edde:	4404      	add	r4, r0
 801ede0:	f144 0000 	adc.w	r0, r4, #0
 801ede4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801ede8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801edec:	bd10      	pop	{r4, pc}
 801edee:	bf00      	nop
 801edf0:	200001ac 	.word	0x200001ac
 801edf4:	08026e88 	.word	0x08026e88
 801edf8:	08026e9f 	.word	0x08026e9f
 801edfc:	abcd330e 	.word	0xabcd330e
 801ee00:	e66d1234 	.word	0xe66d1234
 801ee04:	0005deec 	.word	0x0005deec
 801ee08:	5851f42d 	.word	0x5851f42d
 801ee0c:	4c957f2d 	.word	0x4c957f2d

0801ee10 <sniprintf>:
 801ee10:	b40c      	push	{r2, r3}
 801ee12:	b530      	push	{r4, r5, lr}
 801ee14:	4b17      	ldr	r3, [pc, #92]	; (801ee74 <sniprintf+0x64>)
 801ee16:	1e0c      	subs	r4, r1, #0
 801ee18:	681d      	ldr	r5, [r3, #0]
 801ee1a:	b09d      	sub	sp, #116	; 0x74
 801ee1c:	da08      	bge.n	801ee30 <sniprintf+0x20>
 801ee1e:	238b      	movs	r3, #139	; 0x8b
 801ee20:	602b      	str	r3, [r5, #0]
 801ee22:	f04f 30ff 	mov.w	r0, #4294967295
 801ee26:	b01d      	add	sp, #116	; 0x74
 801ee28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ee2c:	b002      	add	sp, #8
 801ee2e:	4770      	bx	lr
 801ee30:	f44f 7302 	mov.w	r3, #520	; 0x208
 801ee34:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ee38:	bf14      	ite	ne
 801ee3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801ee3e:	4623      	moveq	r3, r4
 801ee40:	9304      	str	r3, [sp, #16]
 801ee42:	9307      	str	r3, [sp, #28]
 801ee44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ee48:	9002      	str	r0, [sp, #8]
 801ee4a:	9006      	str	r0, [sp, #24]
 801ee4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ee50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ee52:	ab21      	add	r3, sp, #132	; 0x84
 801ee54:	a902      	add	r1, sp, #8
 801ee56:	4628      	mov	r0, r5
 801ee58:	9301      	str	r3, [sp, #4]
 801ee5a:	f000 fe77 	bl	801fb4c <_svfiprintf_r>
 801ee5e:	1c43      	adds	r3, r0, #1
 801ee60:	bfbc      	itt	lt
 801ee62:	238b      	movlt	r3, #139	; 0x8b
 801ee64:	602b      	strlt	r3, [r5, #0]
 801ee66:	2c00      	cmp	r4, #0
 801ee68:	d0dd      	beq.n	801ee26 <sniprintf+0x16>
 801ee6a:	9b02      	ldr	r3, [sp, #8]
 801ee6c:	2200      	movs	r2, #0
 801ee6e:	701a      	strb	r2, [r3, #0]
 801ee70:	e7d9      	b.n	801ee26 <sniprintf+0x16>
 801ee72:	bf00      	nop
 801ee74:	200001ac 	.word	0x200001ac

0801ee78 <siprintf>:
 801ee78:	b40e      	push	{r1, r2, r3}
 801ee7a:	b500      	push	{lr}
 801ee7c:	b09c      	sub	sp, #112	; 0x70
 801ee7e:	ab1d      	add	r3, sp, #116	; 0x74
 801ee80:	9002      	str	r0, [sp, #8]
 801ee82:	9006      	str	r0, [sp, #24]
 801ee84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ee88:	4809      	ldr	r0, [pc, #36]	; (801eeb0 <siprintf+0x38>)
 801ee8a:	9107      	str	r1, [sp, #28]
 801ee8c:	9104      	str	r1, [sp, #16]
 801ee8e:	4909      	ldr	r1, [pc, #36]	; (801eeb4 <siprintf+0x3c>)
 801ee90:	f853 2b04 	ldr.w	r2, [r3], #4
 801ee94:	9105      	str	r1, [sp, #20]
 801ee96:	6800      	ldr	r0, [r0, #0]
 801ee98:	9301      	str	r3, [sp, #4]
 801ee9a:	a902      	add	r1, sp, #8
 801ee9c:	f000 fe56 	bl	801fb4c <_svfiprintf_r>
 801eea0:	9b02      	ldr	r3, [sp, #8]
 801eea2:	2200      	movs	r2, #0
 801eea4:	701a      	strb	r2, [r3, #0]
 801eea6:	b01c      	add	sp, #112	; 0x70
 801eea8:	f85d eb04 	ldr.w	lr, [sp], #4
 801eeac:	b003      	add	sp, #12
 801eeae:	4770      	bx	lr
 801eeb0:	200001ac 	.word	0x200001ac
 801eeb4:	ffff0208 	.word	0xffff0208

0801eeb8 <strchr>:
 801eeb8:	b2c9      	uxtb	r1, r1
 801eeba:	4603      	mov	r3, r0
 801eebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801eec0:	b11a      	cbz	r2, 801eeca <strchr+0x12>
 801eec2:	428a      	cmp	r2, r1
 801eec4:	d1f9      	bne.n	801eeba <strchr+0x2>
 801eec6:	4618      	mov	r0, r3
 801eec8:	4770      	bx	lr
 801eeca:	2900      	cmp	r1, #0
 801eecc:	bf18      	it	ne
 801eece:	2300      	movne	r3, #0
 801eed0:	e7f9      	b.n	801eec6 <strchr+0xe>

0801eed2 <strncmp>:
 801eed2:	b510      	push	{r4, lr}
 801eed4:	b16a      	cbz	r2, 801eef2 <strncmp+0x20>
 801eed6:	3901      	subs	r1, #1
 801eed8:	1884      	adds	r4, r0, r2
 801eeda:	f810 3b01 	ldrb.w	r3, [r0], #1
 801eede:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801eee2:	4293      	cmp	r3, r2
 801eee4:	d103      	bne.n	801eeee <strncmp+0x1c>
 801eee6:	42a0      	cmp	r0, r4
 801eee8:	d001      	beq.n	801eeee <strncmp+0x1c>
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	d1f5      	bne.n	801eeda <strncmp+0x8>
 801eeee:	1a98      	subs	r0, r3, r2
 801eef0:	bd10      	pop	{r4, pc}
 801eef2:	4610      	mov	r0, r2
 801eef4:	e7fc      	b.n	801eef0 <strncmp+0x1e>

0801eef6 <strncpy>:
 801eef6:	b510      	push	{r4, lr}
 801eef8:	3901      	subs	r1, #1
 801eefa:	4603      	mov	r3, r0
 801eefc:	b132      	cbz	r2, 801ef0c <strncpy+0x16>
 801eefe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ef02:	f803 4b01 	strb.w	r4, [r3], #1
 801ef06:	3a01      	subs	r2, #1
 801ef08:	2c00      	cmp	r4, #0
 801ef0a:	d1f7      	bne.n	801eefc <strncpy+0x6>
 801ef0c:	441a      	add	r2, r3
 801ef0e:	2100      	movs	r1, #0
 801ef10:	4293      	cmp	r3, r2
 801ef12:	d100      	bne.n	801ef16 <strncpy+0x20>
 801ef14:	bd10      	pop	{r4, pc}
 801ef16:	f803 1b01 	strb.w	r1, [r3], #1
 801ef1a:	e7f9      	b.n	801ef10 <strncpy+0x1a>

0801ef1c <_strtol_l.isra.0>:
 801ef1c:	2b01      	cmp	r3, #1
 801ef1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ef22:	d001      	beq.n	801ef28 <_strtol_l.isra.0+0xc>
 801ef24:	2b24      	cmp	r3, #36	; 0x24
 801ef26:	d906      	bls.n	801ef36 <_strtol_l.isra.0+0x1a>
 801ef28:	f000 faf0 	bl	801f50c <__errno>
 801ef2c:	2316      	movs	r3, #22
 801ef2e:	6003      	str	r3, [r0, #0]
 801ef30:	2000      	movs	r0, #0
 801ef32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ef36:	4f3a      	ldr	r7, [pc, #232]	; (801f020 <_strtol_l.isra.0+0x104>)
 801ef38:	468e      	mov	lr, r1
 801ef3a:	4676      	mov	r6, lr
 801ef3c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801ef40:	5de5      	ldrb	r5, [r4, r7]
 801ef42:	f015 0508 	ands.w	r5, r5, #8
 801ef46:	d1f8      	bne.n	801ef3a <_strtol_l.isra.0+0x1e>
 801ef48:	2c2d      	cmp	r4, #45	; 0x2d
 801ef4a:	d134      	bne.n	801efb6 <_strtol_l.isra.0+0x9a>
 801ef4c:	f89e 4000 	ldrb.w	r4, [lr]
 801ef50:	f04f 0801 	mov.w	r8, #1
 801ef54:	f106 0e02 	add.w	lr, r6, #2
 801ef58:	2b00      	cmp	r3, #0
 801ef5a:	d05c      	beq.n	801f016 <_strtol_l.isra.0+0xfa>
 801ef5c:	2b10      	cmp	r3, #16
 801ef5e:	d10c      	bne.n	801ef7a <_strtol_l.isra.0+0x5e>
 801ef60:	2c30      	cmp	r4, #48	; 0x30
 801ef62:	d10a      	bne.n	801ef7a <_strtol_l.isra.0+0x5e>
 801ef64:	f89e 4000 	ldrb.w	r4, [lr]
 801ef68:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801ef6c:	2c58      	cmp	r4, #88	; 0x58
 801ef6e:	d14d      	bne.n	801f00c <_strtol_l.isra.0+0xf0>
 801ef70:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801ef74:	2310      	movs	r3, #16
 801ef76:	f10e 0e02 	add.w	lr, lr, #2
 801ef7a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801ef7e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ef82:	2600      	movs	r6, #0
 801ef84:	fbbc f9f3 	udiv	r9, ip, r3
 801ef88:	4635      	mov	r5, r6
 801ef8a:	fb03 ca19 	mls	sl, r3, r9, ip
 801ef8e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801ef92:	2f09      	cmp	r7, #9
 801ef94:	d818      	bhi.n	801efc8 <_strtol_l.isra.0+0xac>
 801ef96:	463c      	mov	r4, r7
 801ef98:	42a3      	cmp	r3, r4
 801ef9a:	dd24      	ble.n	801efe6 <_strtol_l.isra.0+0xca>
 801ef9c:	2e00      	cmp	r6, #0
 801ef9e:	db1f      	blt.n	801efe0 <_strtol_l.isra.0+0xc4>
 801efa0:	45a9      	cmp	r9, r5
 801efa2:	d31d      	bcc.n	801efe0 <_strtol_l.isra.0+0xc4>
 801efa4:	d101      	bne.n	801efaa <_strtol_l.isra.0+0x8e>
 801efa6:	45a2      	cmp	sl, r4
 801efa8:	db1a      	blt.n	801efe0 <_strtol_l.isra.0+0xc4>
 801efaa:	fb05 4503 	mla	r5, r5, r3, r4
 801efae:	2601      	movs	r6, #1
 801efb0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801efb4:	e7eb      	b.n	801ef8e <_strtol_l.isra.0+0x72>
 801efb6:	2c2b      	cmp	r4, #43	; 0x2b
 801efb8:	bf08      	it	eq
 801efba:	f89e 4000 	ldrbeq.w	r4, [lr]
 801efbe:	46a8      	mov	r8, r5
 801efc0:	bf08      	it	eq
 801efc2:	f106 0e02 	addeq.w	lr, r6, #2
 801efc6:	e7c7      	b.n	801ef58 <_strtol_l.isra.0+0x3c>
 801efc8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801efcc:	2f19      	cmp	r7, #25
 801efce:	d801      	bhi.n	801efd4 <_strtol_l.isra.0+0xb8>
 801efd0:	3c37      	subs	r4, #55	; 0x37
 801efd2:	e7e1      	b.n	801ef98 <_strtol_l.isra.0+0x7c>
 801efd4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801efd8:	2f19      	cmp	r7, #25
 801efda:	d804      	bhi.n	801efe6 <_strtol_l.isra.0+0xca>
 801efdc:	3c57      	subs	r4, #87	; 0x57
 801efde:	e7db      	b.n	801ef98 <_strtol_l.isra.0+0x7c>
 801efe0:	f04f 36ff 	mov.w	r6, #4294967295
 801efe4:	e7e4      	b.n	801efb0 <_strtol_l.isra.0+0x94>
 801efe6:	2e00      	cmp	r6, #0
 801efe8:	da05      	bge.n	801eff6 <_strtol_l.isra.0+0xda>
 801efea:	2322      	movs	r3, #34	; 0x22
 801efec:	6003      	str	r3, [r0, #0]
 801efee:	4665      	mov	r5, ip
 801eff0:	b942      	cbnz	r2, 801f004 <_strtol_l.isra.0+0xe8>
 801eff2:	4628      	mov	r0, r5
 801eff4:	e79d      	b.n	801ef32 <_strtol_l.isra.0+0x16>
 801eff6:	f1b8 0f00 	cmp.w	r8, #0
 801effa:	d000      	beq.n	801effe <_strtol_l.isra.0+0xe2>
 801effc:	426d      	negs	r5, r5
 801effe:	2a00      	cmp	r2, #0
 801f000:	d0f7      	beq.n	801eff2 <_strtol_l.isra.0+0xd6>
 801f002:	b10e      	cbz	r6, 801f008 <_strtol_l.isra.0+0xec>
 801f004:	f10e 31ff 	add.w	r1, lr, #4294967295
 801f008:	6011      	str	r1, [r2, #0]
 801f00a:	e7f2      	b.n	801eff2 <_strtol_l.isra.0+0xd6>
 801f00c:	2430      	movs	r4, #48	; 0x30
 801f00e:	2b00      	cmp	r3, #0
 801f010:	d1b3      	bne.n	801ef7a <_strtol_l.isra.0+0x5e>
 801f012:	2308      	movs	r3, #8
 801f014:	e7b1      	b.n	801ef7a <_strtol_l.isra.0+0x5e>
 801f016:	2c30      	cmp	r4, #48	; 0x30
 801f018:	d0a4      	beq.n	801ef64 <_strtol_l.isra.0+0x48>
 801f01a:	230a      	movs	r3, #10
 801f01c:	e7ad      	b.n	801ef7a <_strtol_l.isra.0+0x5e>
 801f01e:	bf00      	nop
 801f020:	08026cc1 	.word	0x08026cc1

0801f024 <_strtol_r>:
 801f024:	f7ff bf7a 	b.w	801ef1c <_strtol_l.isra.0>

0801f028 <strtol>:
 801f028:	4613      	mov	r3, r2
 801f02a:	460a      	mov	r2, r1
 801f02c:	4601      	mov	r1, r0
 801f02e:	4802      	ldr	r0, [pc, #8]	; (801f038 <strtol+0x10>)
 801f030:	6800      	ldr	r0, [r0, #0]
 801f032:	f7ff bf73 	b.w	801ef1c <_strtol_l.isra.0>
 801f036:	bf00      	nop
 801f038:	200001ac 	.word	0x200001ac

0801f03c <__tzcalc_limits>:
 801f03c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f040:	4680      	mov	r8, r0
 801f042:	f000 fbb3 	bl	801f7ac <__gettzinfo>
 801f046:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801f04a:	4598      	cmp	r8, r3
 801f04c:	f340 8098 	ble.w	801f180 <__tzcalc_limits+0x144>
 801f050:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801f054:	4443      	add	r3, r8
 801f056:	109b      	asrs	r3, r3, #2
 801f058:	f240 126d 	movw	r2, #365	; 0x16d
 801f05c:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801f060:	fb02 3505 	mla	r5, r2, r5, r3
 801f064:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801f068:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801f06c:	fb93 f3f2 	sdiv	r3, r3, r2
 801f070:	441d      	add	r5, r3
 801f072:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f076:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801f07a:	fb98 f7f3 	sdiv	r7, r8, r3
 801f07e:	fb03 8717 	mls	r7, r3, r7, r8
 801f082:	4442      	add	r2, r8
 801f084:	fab7 fc87 	clz	ip, r7
 801f088:	fbb2 f2f3 	udiv	r2, r2, r3
 801f08c:	f008 0303 	and.w	r3, r8, #3
 801f090:	4415      	add	r5, r2
 801f092:	2264      	movs	r2, #100	; 0x64
 801f094:	f8c0 8004 	str.w	r8, [r0, #4]
 801f098:	fb98 f6f2 	sdiv	r6, r8, r2
 801f09c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801f0a0:	fb02 8616 	mls	r6, r2, r6, r8
 801f0a4:	4604      	mov	r4, r0
 801f0a6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801f0aa:	9300      	str	r3, [sp, #0]
 801f0ac:	f04f 0e07 	mov.w	lr, #7
 801f0b0:	7a22      	ldrb	r2, [r4, #8]
 801f0b2:	6963      	ldr	r3, [r4, #20]
 801f0b4:	2a4a      	cmp	r2, #74	; 0x4a
 801f0b6:	d128      	bne.n	801f10a <__tzcalc_limits+0xce>
 801f0b8:	9900      	ldr	r1, [sp, #0]
 801f0ba:	18ea      	adds	r2, r5, r3
 801f0bc:	b901      	cbnz	r1, 801f0c0 <__tzcalc_limits+0x84>
 801f0be:	b906      	cbnz	r6, 801f0c2 <__tzcalc_limits+0x86>
 801f0c0:	bb0f      	cbnz	r7, 801f106 <__tzcalc_limits+0xca>
 801f0c2:	2b3b      	cmp	r3, #59	; 0x3b
 801f0c4:	bfd4      	ite	le
 801f0c6:	2300      	movle	r3, #0
 801f0c8:	2301      	movgt	r3, #1
 801f0ca:	4413      	add	r3, r2
 801f0cc:	1e5a      	subs	r2, r3, #1
 801f0ce:	69a3      	ldr	r3, [r4, #24]
 801f0d0:	492c      	ldr	r1, [pc, #176]	; (801f184 <__tzcalc_limits+0x148>)
 801f0d2:	fb01 3202 	mla	r2, r1, r2, r3
 801f0d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f0d8:	4413      	add	r3, r2
 801f0da:	461a      	mov	r2, r3
 801f0dc:	17db      	asrs	r3, r3, #31
 801f0de:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801f0e2:	3428      	adds	r4, #40	; 0x28
 801f0e4:	45a3      	cmp	fp, r4
 801f0e6:	d1e3      	bne.n	801f0b0 <__tzcalc_limits+0x74>
 801f0e8:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801f0ec:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801f0f0:	4294      	cmp	r4, r2
 801f0f2:	eb75 0303 	sbcs.w	r3, r5, r3
 801f0f6:	bfb4      	ite	lt
 801f0f8:	2301      	movlt	r3, #1
 801f0fa:	2300      	movge	r3, #0
 801f0fc:	6003      	str	r3, [r0, #0]
 801f0fe:	2001      	movs	r0, #1
 801f100:	b003      	add	sp, #12
 801f102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f106:	2300      	movs	r3, #0
 801f108:	e7df      	b.n	801f0ca <__tzcalc_limits+0x8e>
 801f10a:	2a44      	cmp	r2, #68	; 0x44
 801f10c:	d101      	bne.n	801f112 <__tzcalc_limits+0xd6>
 801f10e:	18ea      	adds	r2, r5, r3
 801f110:	e7dd      	b.n	801f0ce <__tzcalc_limits+0x92>
 801f112:	9a00      	ldr	r2, [sp, #0]
 801f114:	bb72      	cbnz	r2, 801f174 <__tzcalc_limits+0x138>
 801f116:	2e00      	cmp	r6, #0
 801f118:	bf0c      	ite	eq
 801f11a:	46e0      	moveq	r8, ip
 801f11c:	f04f 0801 	movne.w	r8, #1
 801f120:	4919      	ldr	r1, [pc, #100]	; (801f188 <__tzcalc_limits+0x14c>)
 801f122:	68e2      	ldr	r2, [r4, #12]
 801f124:	9201      	str	r2, [sp, #4]
 801f126:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801f12a:	fb0a 1808 	mla	r8, sl, r8, r1
 801f12e:	462a      	mov	r2, r5
 801f130:	f04f 0900 	mov.w	r9, #0
 801f134:	f1a8 0804 	sub.w	r8, r8, #4
 801f138:	9901      	ldr	r1, [sp, #4]
 801f13a:	f109 0901 	add.w	r9, r9, #1
 801f13e:	4549      	cmp	r1, r9
 801f140:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801f144:	dc18      	bgt.n	801f178 <__tzcalc_limits+0x13c>
 801f146:	f102 0804 	add.w	r8, r2, #4
 801f14a:	fb98 f9fe 	sdiv	r9, r8, lr
 801f14e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801f152:	eba8 0909 	sub.w	r9, r8, r9
 801f156:	ebb3 0909 	subs.w	r9, r3, r9
 801f15a:	6923      	ldr	r3, [r4, #16]
 801f15c:	f103 33ff 	add.w	r3, r3, #4294967295
 801f160:	bf48      	it	mi
 801f162:	f109 0907 	addmi.w	r9, r9, #7
 801f166:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801f16a:	444b      	add	r3, r9
 801f16c:	4553      	cmp	r3, sl
 801f16e:	da05      	bge.n	801f17c <__tzcalc_limits+0x140>
 801f170:	441a      	add	r2, r3
 801f172:	e7ac      	b.n	801f0ce <__tzcalc_limits+0x92>
 801f174:	46e0      	mov	r8, ip
 801f176:	e7d3      	b.n	801f120 <__tzcalc_limits+0xe4>
 801f178:	4452      	add	r2, sl
 801f17a:	e7dd      	b.n	801f138 <__tzcalc_limits+0xfc>
 801f17c:	3b07      	subs	r3, #7
 801f17e:	e7f5      	b.n	801f16c <__tzcalc_limits+0x130>
 801f180:	2000      	movs	r0, #0
 801f182:	e7bd      	b.n	801f100 <__tzcalc_limits+0xc4>
 801f184:	00015180 	.word	0x00015180
 801f188:	08026e28 	.word	0x08026e28

0801f18c <__tz_lock>:
 801f18c:	4801      	ldr	r0, [pc, #4]	; (801f194 <__tz_lock+0x8>)
 801f18e:	f000 bbc2 	b.w	801f916 <__retarget_lock_acquire>
 801f192:	bf00      	nop
 801f194:	2000d09f 	.word	0x2000d09f

0801f198 <__tz_unlock>:
 801f198:	4801      	ldr	r0, [pc, #4]	; (801f1a0 <__tz_unlock+0x8>)
 801f19a:	f000 bbbe 	b.w	801f91a <__retarget_lock_release>
 801f19e:	bf00      	nop
 801f1a0:	2000d09f 	.word	0x2000d09f

0801f1a4 <_tzset_unlocked>:
 801f1a4:	4b01      	ldr	r3, [pc, #4]	; (801f1ac <_tzset_unlocked+0x8>)
 801f1a6:	6818      	ldr	r0, [r3, #0]
 801f1a8:	f000 b802 	b.w	801f1b0 <_tzset_unlocked_r>
 801f1ac:	200001ac 	.word	0x200001ac

0801f1b0 <_tzset_unlocked_r>:
 801f1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1b4:	b08d      	sub	sp, #52	; 0x34
 801f1b6:	4607      	mov	r7, r0
 801f1b8:	f000 faf8 	bl	801f7ac <__gettzinfo>
 801f1bc:	49ae      	ldr	r1, [pc, #696]	; (801f478 <_tzset_unlocked_r+0x2c8>)
 801f1be:	4eaf      	ldr	r6, [pc, #700]	; (801f47c <_tzset_unlocked_r+0x2cc>)
 801f1c0:	4605      	mov	r5, r0
 801f1c2:	4638      	mov	r0, r7
 801f1c4:	f000 faea 	bl	801f79c <_getenv_r>
 801f1c8:	4604      	mov	r4, r0
 801f1ca:	b970      	cbnz	r0, 801f1ea <_tzset_unlocked_r+0x3a>
 801f1cc:	4bac      	ldr	r3, [pc, #688]	; (801f480 <_tzset_unlocked_r+0x2d0>)
 801f1ce:	4aad      	ldr	r2, [pc, #692]	; (801f484 <_tzset_unlocked_r+0x2d4>)
 801f1d0:	6018      	str	r0, [r3, #0]
 801f1d2:	4bad      	ldr	r3, [pc, #692]	; (801f488 <_tzset_unlocked_r+0x2d8>)
 801f1d4:	6018      	str	r0, [r3, #0]
 801f1d6:	4bad      	ldr	r3, [pc, #692]	; (801f48c <_tzset_unlocked_r+0x2dc>)
 801f1d8:	6830      	ldr	r0, [r6, #0]
 801f1da:	e9c3 2200 	strd	r2, r2, [r3]
 801f1de:	f000 fba7 	bl	801f930 <free>
 801f1e2:	6034      	str	r4, [r6, #0]
 801f1e4:	b00d      	add	sp, #52	; 0x34
 801f1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1ea:	6831      	ldr	r1, [r6, #0]
 801f1ec:	2900      	cmp	r1, #0
 801f1ee:	d15f      	bne.n	801f2b0 <_tzset_unlocked_r+0x100>
 801f1f0:	6830      	ldr	r0, [r6, #0]
 801f1f2:	f000 fb9d 	bl	801f930 <free>
 801f1f6:	4620      	mov	r0, r4
 801f1f8:	f7e0 fff4 	bl	80001e4 <strlen>
 801f1fc:	1c41      	adds	r1, r0, #1
 801f1fe:	4638      	mov	r0, r7
 801f200:	f000 fbee 	bl	801f9e0 <_malloc_r>
 801f204:	6030      	str	r0, [r6, #0]
 801f206:	2800      	cmp	r0, #0
 801f208:	d157      	bne.n	801f2ba <_tzset_unlocked_r+0x10a>
 801f20a:	7823      	ldrb	r3, [r4, #0]
 801f20c:	4aa0      	ldr	r2, [pc, #640]	; (801f490 <_tzset_unlocked_r+0x2e0>)
 801f20e:	49a1      	ldr	r1, [pc, #644]	; (801f494 <_tzset_unlocked_r+0x2e4>)
 801f210:	2b3a      	cmp	r3, #58	; 0x3a
 801f212:	bf08      	it	eq
 801f214:	3401      	addeq	r4, #1
 801f216:	ae0a      	add	r6, sp, #40	; 0x28
 801f218:	4633      	mov	r3, r6
 801f21a:	4620      	mov	r0, r4
 801f21c:	f001 f894 	bl	8020348 <siscanf>
 801f220:	2800      	cmp	r0, #0
 801f222:	dddf      	ble.n	801f1e4 <_tzset_unlocked_r+0x34>
 801f224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f226:	18e7      	adds	r7, r4, r3
 801f228:	5ce3      	ldrb	r3, [r4, r3]
 801f22a:	2b2d      	cmp	r3, #45	; 0x2d
 801f22c:	d149      	bne.n	801f2c2 <_tzset_unlocked_r+0x112>
 801f22e:	3701      	adds	r7, #1
 801f230:	f04f 34ff 	mov.w	r4, #4294967295
 801f234:	f10d 0a20 	add.w	sl, sp, #32
 801f238:	f10d 0b1e 	add.w	fp, sp, #30
 801f23c:	f04f 0800 	mov.w	r8, #0
 801f240:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801f244:	4994      	ldr	r1, [pc, #592]	; (801f498 <_tzset_unlocked_r+0x2e8>)
 801f246:	9603      	str	r6, [sp, #12]
 801f248:	f8cd b000 	str.w	fp, [sp]
 801f24c:	4633      	mov	r3, r6
 801f24e:	aa07      	add	r2, sp, #28
 801f250:	4638      	mov	r0, r7
 801f252:	f8ad 801e 	strh.w	r8, [sp, #30]
 801f256:	f8ad 8020 	strh.w	r8, [sp, #32]
 801f25a:	f001 f875 	bl	8020348 <siscanf>
 801f25e:	4540      	cmp	r0, r8
 801f260:	ddc0      	ble.n	801f1e4 <_tzset_unlocked_r+0x34>
 801f262:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801f266:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f26a:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801f4a4 <_tzset_unlocked_r+0x2f4>
 801f26e:	213c      	movs	r1, #60	; 0x3c
 801f270:	fb01 2203 	mla	r2, r1, r3, r2
 801f274:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801f278:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801f27c:	fb01 2303 	mla	r3, r1, r3, r2
 801f280:	435c      	muls	r4, r3
 801f282:	62ac      	str	r4, [r5, #40]	; 0x28
 801f284:	4c81      	ldr	r4, [pc, #516]	; (801f48c <_tzset_unlocked_r+0x2dc>)
 801f286:	4b82      	ldr	r3, [pc, #520]	; (801f490 <_tzset_unlocked_r+0x2e0>)
 801f288:	6023      	str	r3, [r4, #0]
 801f28a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f28c:	4981      	ldr	r1, [pc, #516]	; (801f494 <_tzset_unlocked_r+0x2e4>)
 801f28e:	441f      	add	r7, r3
 801f290:	464a      	mov	r2, r9
 801f292:	4633      	mov	r3, r6
 801f294:	4638      	mov	r0, r7
 801f296:	f001 f857 	bl	8020348 <siscanf>
 801f29a:	4540      	cmp	r0, r8
 801f29c:	dc16      	bgt.n	801f2cc <_tzset_unlocked_r+0x11c>
 801f29e:	6823      	ldr	r3, [r4, #0]
 801f2a0:	6063      	str	r3, [r4, #4]
 801f2a2:	4b77      	ldr	r3, [pc, #476]	; (801f480 <_tzset_unlocked_r+0x2d0>)
 801f2a4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801f2a6:	601a      	str	r2, [r3, #0]
 801f2a8:	4b77      	ldr	r3, [pc, #476]	; (801f488 <_tzset_unlocked_r+0x2d8>)
 801f2aa:	f8c3 8000 	str.w	r8, [r3]
 801f2ae:	e799      	b.n	801f1e4 <_tzset_unlocked_r+0x34>
 801f2b0:	f7e0 ff8e 	bl	80001d0 <strcmp>
 801f2b4:	2800      	cmp	r0, #0
 801f2b6:	d19b      	bne.n	801f1f0 <_tzset_unlocked_r+0x40>
 801f2b8:	e794      	b.n	801f1e4 <_tzset_unlocked_r+0x34>
 801f2ba:	4621      	mov	r1, r4
 801f2bc:	f001 f8b5 	bl	802042a <strcpy>
 801f2c0:	e7a3      	b.n	801f20a <_tzset_unlocked_r+0x5a>
 801f2c2:	2b2b      	cmp	r3, #43	; 0x2b
 801f2c4:	bf08      	it	eq
 801f2c6:	3701      	addeq	r7, #1
 801f2c8:	2401      	movs	r4, #1
 801f2ca:	e7b3      	b.n	801f234 <_tzset_unlocked_r+0x84>
 801f2cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2ce:	f8c4 9004 	str.w	r9, [r4, #4]
 801f2d2:	18fc      	adds	r4, r7, r3
 801f2d4:	5cfb      	ldrb	r3, [r7, r3]
 801f2d6:	2b2d      	cmp	r3, #45	; 0x2d
 801f2d8:	f040 808b 	bne.w	801f3f2 <_tzset_unlocked_r+0x242>
 801f2dc:	3401      	adds	r4, #1
 801f2de:	f04f 37ff 	mov.w	r7, #4294967295
 801f2e2:	2300      	movs	r3, #0
 801f2e4:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f2e8:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f2ec:	f8ad 3020 	strh.w	r3, [sp, #32]
 801f2f0:	930a      	str	r3, [sp, #40]	; 0x28
 801f2f2:	e9cd a602 	strd	sl, r6, [sp, #8]
 801f2f6:	e9cd b600 	strd	fp, r6, [sp]
 801f2fa:	4967      	ldr	r1, [pc, #412]	; (801f498 <_tzset_unlocked_r+0x2e8>)
 801f2fc:	4633      	mov	r3, r6
 801f2fe:	aa07      	add	r2, sp, #28
 801f300:	4620      	mov	r0, r4
 801f302:	f001 f821 	bl	8020348 <siscanf>
 801f306:	2800      	cmp	r0, #0
 801f308:	dc78      	bgt.n	801f3fc <_tzset_unlocked_r+0x24c>
 801f30a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801f30c:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801f310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f312:	652f      	str	r7, [r5, #80]	; 0x50
 801f314:	441c      	add	r4, r3
 801f316:	462f      	mov	r7, r5
 801f318:	f04f 0900 	mov.w	r9, #0
 801f31c:	7823      	ldrb	r3, [r4, #0]
 801f31e:	2b2c      	cmp	r3, #44	; 0x2c
 801f320:	bf08      	it	eq
 801f322:	3401      	addeq	r4, #1
 801f324:	f894 8000 	ldrb.w	r8, [r4]
 801f328:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801f32c:	d178      	bne.n	801f420 <_tzset_unlocked_r+0x270>
 801f32e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801f332:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801f336:	ab09      	add	r3, sp, #36	; 0x24
 801f338:	9300      	str	r3, [sp, #0]
 801f33a:	4958      	ldr	r1, [pc, #352]	; (801f49c <_tzset_unlocked_r+0x2ec>)
 801f33c:	9603      	str	r6, [sp, #12]
 801f33e:	4633      	mov	r3, r6
 801f340:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801f344:	4620      	mov	r0, r4
 801f346:	f000 ffff 	bl	8020348 <siscanf>
 801f34a:	2803      	cmp	r0, #3
 801f34c:	f47f af4a 	bne.w	801f1e4 <_tzset_unlocked_r+0x34>
 801f350:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801f354:	1e4b      	subs	r3, r1, #1
 801f356:	2b0b      	cmp	r3, #11
 801f358:	f63f af44 	bhi.w	801f1e4 <_tzset_unlocked_r+0x34>
 801f35c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801f360:	1e53      	subs	r3, r2, #1
 801f362:	2b04      	cmp	r3, #4
 801f364:	f63f af3e 	bhi.w	801f1e4 <_tzset_unlocked_r+0x34>
 801f368:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801f36c:	2b06      	cmp	r3, #6
 801f36e:	f63f af39 	bhi.w	801f1e4 <_tzset_unlocked_r+0x34>
 801f372:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801f376:	f887 8008 	strb.w	r8, [r7, #8]
 801f37a:	617b      	str	r3, [r7, #20]
 801f37c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f37e:	eb04 0803 	add.w	r8, r4, r3
 801f382:	2302      	movs	r3, #2
 801f384:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f388:	2300      	movs	r3, #0
 801f38a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f38e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801f392:	930a      	str	r3, [sp, #40]	; 0x28
 801f394:	f898 3000 	ldrb.w	r3, [r8]
 801f398:	2b2f      	cmp	r3, #47	; 0x2f
 801f39a:	d109      	bne.n	801f3b0 <_tzset_unlocked_r+0x200>
 801f39c:	e9cd a602 	strd	sl, r6, [sp, #8]
 801f3a0:	e9cd b600 	strd	fp, r6, [sp]
 801f3a4:	493e      	ldr	r1, [pc, #248]	; (801f4a0 <_tzset_unlocked_r+0x2f0>)
 801f3a6:	4633      	mov	r3, r6
 801f3a8:	aa07      	add	r2, sp, #28
 801f3aa:	4640      	mov	r0, r8
 801f3ac:	f000 ffcc 	bl	8020348 <siscanf>
 801f3b0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801f3b4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f3b8:	213c      	movs	r1, #60	; 0x3c
 801f3ba:	fb01 2203 	mla	r2, r1, r3, r2
 801f3be:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801f3c2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801f3c6:	fb01 2303 	mla	r3, r1, r3, r2
 801f3ca:	61bb      	str	r3, [r7, #24]
 801f3cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f3ce:	3728      	adds	r7, #40	; 0x28
 801f3d0:	4444      	add	r4, r8
 801f3d2:	f1b9 0f00 	cmp.w	r9, #0
 801f3d6:	d020      	beq.n	801f41a <_tzset_unlocked_r+0x26a>
 801f3d8:	6868      	ldr	r0, [r5, #4]
 801f3da:	f7ff fe2f 	bl	801f03c <__tzcalc_limits>
 801f3de:	4b28      	ldr	r3, [pc, #160]	; (801f480 <_tzset_unlocked_r+0x2d0>)
 801f3e0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801f3e2:	601a      	str	r2, [r3, #0]
 801f3e4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801f3e6:	1a9b      	subs	r3, r3, r2
 801f3e8:	4a27      	ldr	r2, [pc, #156]	; (801f488 <_tzset_unlocked_r+0x2d8>)
 801f3ea:	bf18      	it	ne
 801f3ec:	2301      	movne	r3, #1
 801f3ee:	6013      	str	r3, [r2, #0]
 801f3f0:	e6f8      	b.n	801f1e4 <_tzset_unlocked_r+0x34>
 801f3f2:	2b2b      	cmp	r3, #43	; 0x2b
 801f3f4:	bf08      	it	eq
 801f3f6:	3401      	addeq	r4, #1
 801f3f8:	2701      	movs	r7, #1
 801f3fa:	e772      	b.n	801f2e2 <_tzset_unlocked_r+0x132>
 801f3fc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801f400:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f404:	213c      	movs	r1, #60	; 0x3c
 801f406:	fb01 2203 	mla	r2, r1, r3, r2
 801f40a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801f40e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801f412:	fb01 2303 	mla	r3, r1, r3, r2
 801f416:	435f      	muls	r7, r3
 801f418:	e77a      	b.n	801f310 <_tzset_unlocked_r+0x160>
 801f41a:	f04f 0901 	mov.w	r9, #1
 801f41e:	e77d      	b.n	801f31c <_tzset_unlocked_r+0x16c>
 801f420:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801f424:	bf06      	itte	eq
 801f426:	3401      	addeq	r4, #1
 801f428:	4643      	moveq	r3, r8
 801f42a:	2344      	movne	r3, #68	; 0x44
 801f42c:	220a      	movs	r2, #10
 801f42e:	a90b      	add	r1, sp, #44	; 0x2c
 801f430:	4620      	mov	r0, r4
 801f432:	9305      	str	r3, [sp, #20]
 801f434:	f001 f880 	bl	8020538 <strtoul>
 801f438:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801f43c:	9b05      	ldr	r3, [sp, #20]
 801f43e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801f442:	45a0      	cmp	r8, r4
 801f444:	d114      	bne.n	801f470 <_tzset_unlocked_r+0x2c0>
 801f446:	234d      	movs	r3, #77	; 0x4d
 801f448:	f1b9 0f00 	cmp.w	r9, #0
 801f44c:	d107      	bne.n	801f45e <_tzset_unlocked_r+0x2ae>
 801f44e:	722b      	strb	r3, [r5, #8]
 801f450:	2103      	movs	r1, #3
 801f452:	2302      	movs	r3, #2
 801f454:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801f458:	f8c5 9014 	str.w	r9, [r5, #20]
 801f45c:	e791      	b.n	801f382 <_tzset_unlocked_r+0x1d2>
 801f45e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801f462:	220b      	movs	r2, #11
 801f464:	2301      	movs	r3, #1
 801f466:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801f46a:	2300      	movs	r3, #0
 801f46c:	63eb      	str	r3, [r5, #60]	; 0x3c
 801f46e:	e788      	b.n	801f382 <_tzset_unlocked_r+0x1d2>
 801f470:	b280      	uxth	r0, r0
 801f472:	723b      	strb	r3, [r7, #8]
 801f474:	6178      	str	r0, [r7, #20]
 801f476:	e784      	b.n	801f382 <_tzset_unlocked_r+0x1d2>
 801f478:	08026efe 	.word	0x08026efe
 801f47c:	20004ad0 	.word	0x20004ad0
 801f480:	20004ad8 	.word	0x20004ad8
 801f484:	08026f01 	.word	0x08026f01
 801f488:	20004ad4 	.word	0x20004ad4
 801f48c:	20000210 	.word	0x20000210
 801f490:	20004ac3 	.word	0x20004ac3
 801f494:	08026f05 	.word	0x08026f05
 801f498:	08026f28 	.word	0x08026f28
 801f49c:	08026f14 	.word	0x08026f14
 801f4a0:	08026f27 	.word	0x08026f27
 801f4a4:	20004ab8 	.word	0x20004ab8

0801f4a8 <__assert_func>:
 801f4a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f4aa:	4614      	mov	r4, r2
 801f4ac:	461a      	mov	r2, r3
 801f4ae:	4b09      	ldr	r3, [pc, #36]	; (801f4d4 <__assert_func+0x2c>)
 801f4b0:	681b      	ldr	r3, [r3, #0]
 801f4b2:	4605      	mov	r5, r0
 801f4b4:	68d8      	ldr	r0, [r3, #12]
 801f4b6:	b14c      	cbz	r4, 801f4cc <__assert_func+0x24>
 801f4b8:	4b07      	ldr	r3, [pc, #28]	; (801f4d8 <__assert_func+0x30>)
 801f4ba:	9100      	str	r1, [sp, #0]
 801f4bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f4c0:	4906      	ldr	r1, [pc, #24]	; (801f4dc <__assert_func+0x34>)
 801f4c2:	462b      	mov	r3, r5
 801f4c4:	f000 f8fe 	bl	801f6c4 <fiprintf>
 801f4c8:	f001 f912 	bl	80206f0 <abort>
 801f4cc:	4b04      	ldr	r3, [pc, #16]	; (801f4e0 <__assert_func+0x38>)
 801f4ce:	461c      	mov	r4, r3
 801f4d0:	e7f3      	b.n	801f4ba <__assert_func+0x12>
 801f4d2:	bf00      	nop
 801f4d4:	200001ac 	.word	0x200001ac
 801f4d8:	08026f3a 	.word	0x08026f3a
 801f4dc:	08026f47 	.word	0x08026f47
 801f4e0:	08026f75 	.word	0x08026f75

0801f4e4 <div>:
 801f4e4:	2900      	cmp	r1, #0
 801f4e6:	b510      	push	{r4, lr}
 801f4e8:	fb91 f4f2 	sdiv	r4, r1, r2
 801f4ec:	fb02 1314 	mls	r3, r2, r4, r1
 801f4f0:	db06      	blt.n	801f500 <div+0x1c>
 801f4f2:	2b00      	cmp	r3, #0
 801f4f4:	da01      	bge.n	801f4fa <div+0x16>
 801f4f6:	3401      	adds	r4, #1
 801f4f8:	1a9b      	subs	r3, r3, r2
 801f4fa:	e9c0 4300 	strd	r4, r3, [r0]
 801f4fe:	bd10      	pop	{r4, pc}
 801f500:	2b00      	cmp	r3, #0
 801f502:	bfc4      	itt	gt
 801f504:	f104 34ff 	addgt.w	r4, r4, #4294967295
 801f508:	189b      	addgt	r3, r3, r2
 801f50a:	e7f6      	b.n	801f4fa <div+0x16>

0801f50c <__errno>:
 801f50c:	4b01      	ldr	r3, [pc, #4]	; (801f514 <__errno+0x8>)
 801f50e:	6818      	ldr	r0, [r3, #0]
 801f510:	4770      	bx	lr
 801f512:	bf00      	nop
 801f514:	200001ac 	.word	0x200001ac

0801f518 <std>:
 801f518:	2300      	movs	r3, #0
 801f51a:	b510      	push	{r4, lr}
 801f51c:	4604      	mov	r4, r0
 801f51e:	e9c0 3300 	strd	r3, r3, [r0]
 801f522:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f526:	6083      	str	r3, [r0, #8]
 801f528:	8181      	strh	r1, [r0, #12]
 801f52a:	6643      	str	r3, [r0, #100]	; 0x64
 801f52c:	81c2      	strh	r2, [r0, #14]
 801f52e:	6183      	str	r3, [r0, #24]
 801f530:	4619      	mov	r1, r3
 801f532:	2208      	movs	r2, #8
 801f534:	305c      	adds	r0, #92	; 0x5c
 801f536:	f7ff f98d 	bl	801e854 <memset>
 801f53a:	4b05      	ldr	r3, [pc, #20]	; (801f550 <std+0x38>)
 801f53c:	6263      	str	r3, [r4, #36]	; 0x24
 801f53e:	4b05      	ldr	r3, [pc, #20]	; (801f554 <std+0x3c>)
 801f540:	62a3      	str	r3, [r4, #40]	; 0x28
 801f542:	4b05      	ldr	r3, [pc, #20]	; (801f558 <std+0x40>)
 801f544:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f546:	4b05      	ldr	r3, [pc, #20]	; (801f55c <std+0x44>)
 801f548:	6224      	str	r4, [r4, #32]
 801f54a:	6323      	str	r3, [r4, #48]	; 0x30
 801f54c:	bd10      	pop	{r4, pc}
 801f54e:	bf00      	nop
 801f550:	080203a1 	.word	0x080203a1
 801f554:	080203c7 	.word	0x080203c7
 801f558:	080203ff 	.word	0x080203ff
 801f55c:	08020423 	.word	0x08020423

0801f560 <_cleanup_r>:
 801f560:	4901      	ldr	r1, [pc, #4]	; (801f568 <_cleanup_r+0x8>)
 801f562:	f000 b8c1 	b.w	801f6e8 <_fwalk_reent>
 801f566:	bf00      	nop
 801f568:	08020845 	.word	0x08020845

0801f56c <__sfmoreglue>:
 801f56c:	b570      	push	{r4, r5, r6, lr}
 801f56e:	1e4a      	subs	r2, r1, #1
 801f570:	2568      	movs	r5, #104	; 0x68
 801f572:	4355      	muls	r5, r2
 801f574:	460e      	mov	r6, r1
 801f576:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f57a:	f000 fa31 	bl	801f9e0 <_malloc_r>
 801f57e:	4604      	mov	r4, r0
 801f580:	b140      	cbz	r0, 801f594 <__sfmoreglue+0x28>
 801f582:	2100      	movs	r1, #0
 801f584:	e9c0 1600 	strd	r1, r6, [r0]
 801f588:	300c      	adds	r0, #12
 801f58a:	60a0      	str	r0, [r4, #8]
 801f58c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f590:	f7ff f960 	bl	801e854 <memset>
 801f594:	4620      	mov	r0, r4
 801f596:	bd70      	pop	{r4, r5, r6, pc}

0801f598 <__sfp_lock_acquire>:
 801f598:	4801      	ldr	r0, [pc, #4]	; (801f5a0 <__sfp_lock_acquire+0x8>)
 801f59a:	f000 b9bd 	b.w	801f918 <__retarget_lock_acquire_recursive>
 801f59e:	bf00      	nop
 801f5a0:	2000d0a0 	.word	0x2000d0a0

0801f5a4 <__sfp_lock_release>:
 801f5a4:	4801      	ldr	r0, [pc, #4]	; (801f5ac <__sfp_lock_release+0x8>)
 801f5a6:	f000 b9b9 	b.w	801f91c <__retarget_lock_release_recursive>
 801f5aa:	bf00      	nop
 801f5ac:	2000d0a0 	.word	0x2000d0a0

0801f5b0 <__sinit_lock_acquire>:
 801f5b0:	4801      	ldr	r0, [pc, #4]	; (801f5b8 <__sinit_lock_acquire+0x8>)
 801f5b2:	f000 b9b1 	b.w	801f918 <__retarget_lock_acquire_recursive>
 801f5b6:	bf00      	nop
 801f5b8:	2000d09b 	.word	0x2000d09b

0801f5bc <__sinit_lock_release>:
 801f5bc:	4801      	ldr	r0, [pc, #4]	; (801f5c4 <__sinit_lock_release+0x8>)
 801f5be:	f000 b9ad 	b.w	801f91c <__retarget_lock_release_recursive>
 801f5c2:	bf00      	nop
 801f5c4:	2000d09b 	.word	0x2000d09b

0801f5c8 <__sinit>:
 801f5c8:	b510      	push	{r4, lr}
 801f5ca:	4604      	mov	r4, r0
 801f5cc:	f7ff fff0 	bl	801f5b0 <__sinit_lock_acquire>
 801f5d0:	69a3      	ldr	r3, [r4, #24]
 801f5d2:	b11b      	cbz	r3, 801f5dc <__sinit+0x14>
 801f5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f5d8:	f7ff bff0 	b.w	801f5bc <__sinit_lock_release>
 801f5dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f5e0:	6523      	str	r3, [r4, #80]	; 0x50
 801f5e2:	4b13      	ldr	r3, [pc, #76]	; (801f630 <__sinit+0x68>)
 801f5e4:	4a13      	ldr	r2, [pc, #76]	; (801f634 <__sinit+0x6c>)
 801f5e6:	681b      	ldr	r3, [r3, #0]
 801f5e8:	62a2      	str	r2, [r4, #40]	; 0x28
 801f5ea:	42a3      	cmp	r3, r4
 801f5ec:	bf04      	itt	eq
 801f5ee:	2301      	moveq	r3, #1
 801f5f0:	61a3      	streq	r3, [r4, #24]
 801f5f2:	4620      	mov	r0, r4
 801f5f4:	f000 f820 	bl	801f638 <__sfp>
 801f5f8:	6060      	str	r0, [r4, #4]
 801f5fa:	4620      	mov	r0, r4
 801f5fc:	f000 f81c 	bl	801f638 <__sfp>
 801f600:	60a0      	str	r0, [r4, #8]
 801f602:	4620      	mov	r0, r4
 801f604:	f000 f818 	bl	801f638 <__sfp>
 801f608:	2200      	movs	r2, #0
 801f60a:	60e0      	str	r0, [r4, #12]
 801f60c:	2104      	movs	r1, #4
 801f60e:	6860      	ldr	r0, [r4, #4]
 801f610:	f7ff ff82 	bl	801f518 <std>
 801f614:	68a0      	ldr	r0, [r4, #8]
 801f616:	2201      	movs	r2, #1
 801f618:	2109      	movs	r1, #9
 801f61a:	f7ff ff7d 	bl	801f518 <std>
 801f61e:	68e0      	ldr	r0, [r4, #12]
 801f620:	2202      	movs	r2, #2
 801f622:	2112      	movs	r1, #18
 801f624:	f7ff ff78 	bl	801f518 <std>
 801f628:	2301      	movs	r3, #1
 801f62a:	61a3      	str	r3, [r4, #24]
 801f62c:	e7d2      	b.n	801f5d4 <__sinit+0xc>
 801f62e:	bf00      	nop
 801f630:	08026dc4 	.word	0x08026dc4
 801f634:	0801f561 	.word	0x0801f561

0801f638 <__sfp>:
 801f638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f63a:	4607      	mov	r7, r0
 801f63c:	f7ff ffac 	bl	801f598 <__sfp_lock_acquire>
 801f640:	4b1e      	ldr	r3, [pc, #120]	; (801f6bc <__sfp+0x84>)
 801f642:	681e      	ldr	r6, [r3, #0]
 801f644:	69b3      	ldr	r3, [r6, #24]
 801f646:	b913      	cbnz	r3, 801f64e <__sfp+0x16>
 801f648:	4630      	mov	r0, r6
 801f64a:	f7ff ffbd 	bl	801f5c8 <__sinit>
 801f64e:	3648      	adds	r6, #72	; 0x48
 801f650:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f654:	3b01      	subs	r3, #1
 801f656:	d503      	bpl.n	801f660 <__sfp+0x28>
 801f658:	6833      	ldr	r3, [r6, #0]
 801f65a:	b30b      	cbz	r3, 801f6a0 <__sfp+0x68>
 801f65c:	6836      	ldr	r6, [r6, #0]
 801f65e:	e7f7      	b.n	801f650 <__sfp+0x18>
 801f660:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f664:	b9d5      	cbnz	r5, 801f69c <__sfp+0x64>
 801f666:	4b16      	ldr	r3, [pc, #88]	; (801f6c0 <__sfp+0x88>)
 801f668:	60e3      	str	r3, [r4, #12]
 801f66a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f66e:	6665      	str	r5, [r4, #100]	; 0x64
 801f670:	f000 f950 	bl	801f914 <__retarget_lock_init_recursive>
 801f674:	f7ff ff96 	bl	801f5a4 <__sfp_lock_release>
 801f678:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f67c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f680:	6025      	str	r5, [r4, #0]
 801f682:	61a5      	str	r5, [r4, #24]
 801f684:	2208      	movs	r2, #8
 801f686:	4629      	mov	r1, r5
 801f688:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f68c:	f7ff f8e2 	bl	801e854 <memset>
 801f690:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f694:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f698:	4620      	mov	r0, r4
 801f69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f69c:	3468      	adds	r4, #104	; 0x68
 801f69e:	e7d9      	b.n	801f654 <__sfp+0x1c>
 801f6a0:	2104      	movs	r1, #4
 801f6a2:	4638      	mov	r0, r7
 801f6a4:	f7ff ff62 	bl	801f56c <__sfmoreglue>
 801f6a8:	4604      	mov	r4, r0
 801f6aa:	6030      	str	r0, [r6, #0]
 801f6ac:	2800      	cmp	r0, #0
 801f6ae:	d1d5      	bne.n	801f65c <__sfp+0x24>
 801f6b0:	f7ff ff78 	bl	801f5a4 <__sfp_lock_release>
 801f6b4:	230c      	movs	r3, #12
 801f6b6:	603b      	str	r3, [r7, #0]
 801f6b8:	e7ee      	b.n	801f698 <__sfp+0x60>
 801f6ba:	bf00      	nop
 801f6bc:	08026dc4 	.word	0x08026dc4
 801f6c0:	ffff0001 	.word	0xffff0001

0801f6c4 <fiprintf>:
 801f6c4:	b40e      	push	{r1, r2, r3}
 801f6c6:	b503      	push	{r0, r1, lr}
 801f6c8:	4601      	mov	r1, r0
 801f6ca:	ab03      	add	r3, sp, #12
 801f6cc:	4805      	ldr	r0, [pc, #20]	; (801f6e4 <fiprintf+0x20>)
 801f6ce:	f853 2b04 	ldr.w	r2, [r3], #4
 801f6d2:	6800      	ldr	r0, [r0, #0]
 801f6d4:	9301      	str	r3, [sp, #4]
 801f6d6:	f000 fb63 	bl	801fda0 <_vfiprintf_r>
 801f6da:	b002      	add	sp, #8
 801f6dc:	f85d eb04 	ldr.w	lr, [sp], #4
 801f6e0:	b003      	add	sp, #12
 801f6e2:	4770      	bx	lr
 801f6e4:	200001ac 	.word	0x200001ac

0801f6e8 <_fwalk_reent>:
 801f6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f6ec:	4606      	mov	r6, r0
 801f6ee:	4688      	mov	r8, r1
 801f6f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f6f4:	2700      	movs	r7, #0
 801f6f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f6fa:	f1b9 0901 	subs.w	r9, r9, #1
 801f6fe:	d505      	bpl.n	801f70c <_fwalk_reent+0x24>
 801f700:	6824      	ldr	r4, [r4, #0]
 801f702:	2c00      	cmp	r4, #0
 801f704:	d1f7      	bne.n	801f6f6 <_fwalk_reent+0xe>
 801f706:	4638      	mov	r0, r7
 801f708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f70c:	89ab      	ldrh	r3, [r5, #12]
 801f70e:	2b01      	cmp	r3, #1
 801f710:	d907      	bls.n	801f722 <_fwalk_reent+0x3a>
 801f712:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f716:	3301      	adds	r3, #1
 801f718:	d003      	beq.n	801f722 <_fwalk_reent+0x3a>
 801f71a:	4629      	mov	r1, r5
 801f71c:	4630      	mov	r0, r6
 801f71e:	47c0      	blx	r8
 801f720:	4307      	orrs	r7, r0
 801f722:	3568      	adds	r5, #104	; 0x68
 801f724:	e7e9      	b.n	801f6fa <_fwalk_reent+0x12>
	...

0801f728 <_findenv_r>:
 801f728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f72c:	4607      	mov	r7, r0
 801f72e:	4689      	mov	r9, r1
 801f730:	4616      	mov	r6, r2
 801f732:	f000 fff5 	bl	8020720 <__env_lock>
 801f736:	4b18      	ldr	r3, [pc, #96]	; (801f798 <_findenv_r+0x70>)
 801f738:	681c      	ldr	r4, [r3, #0]
 801f73a:	469a      	mov	sl, r3
 801f73c:	b134      	cbz	r4, 801f74c <_findenv_r+0x24>
 801f73e:	464b      	mov	r3, r9
 801f740:	4698      	mov	r8, r3
 801f742:	f813 1b01 	ldrb.w	r1, [r3], #1
 801f746:	b139      	cbz	r1, 801f758 <_findenv_r+0x30>
 801f748:	293d      	cmp	r1, #61	; 0x3d
 801f74a:	d1f9      	bne.n	801f740 <_findenv_r+0x18>
 801f74c:	4638      	mov	r0, r7
 801f74e:	f000 ffed 	bl	802072c <__env_unlock>
 801f752:	2000      	movs	r0, #0
 801f754:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f758:	eba8 0809 	sub.w	r8, r8, r9
 801f75c:	46a3      	mov	fp, r4
 801f75e:	f854 0b04 	ldr.w	r0, [r4], #4
 801f762:	2800      	cmp	r0, #0
 801f764:	d0f2      	beq.n	801f74c <_findenv_r+0x24>
 801f766:	4642      	mov	r2, r8
 801f768:	4649      	mov	r1, r9
 801f76a:	f7ff fbb2 	bl	801eed2 <strncmp>
 801f76e:	2800      	cmp	r0, #0
 801f770:	d1f4      	bne.n	801f75c <_findenv_r+0x34>
 801f772:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801f776:	eb03 0508 	add.w	r5, r3, r8
 801f77a:	f813 3008 	ldrb.w	r3, [r3, r8]
 801f77e:	2b3d      	cmp	r3, #61	; 0x3d
 801f780:	d1ec      	bne.n	801f75c <_findenv_r+0x34>
 801f782:	f8da 3000 	ldr.w	r3, [sl]
 801f786:	ebab 0303 	sub.w	r3, fp, r3
 801f78a:	109b      	asrs	r3, r3, #2
 801f78c:	4638      	mov	r0, r7
 801f78e:	6033      	str	r3, [r6, #0]
 801f790:	f000 ffcc 	bl	802072c <__env_unlock>
 801f794:	1c68      	adds	r0, r5, #1
 801f796:	e7dd      	b.n	801f754 <_findenv_r+0x2c>
 801f798:	20000018 	.word	0x20000018

0801f79c <_getenv_r>:
 801f79c:	b507      	push	{r0, r1, r2, lr}
 801f79e:	aa01      	add	r2, sp, #4
 801f7a0:	f7ff ffc2 	bl	801f728 <_findenv_r>
 801f7a4:	b003      	add	sp, #12
 801f7a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801f7ac <__gettzinfo>:
 801f7ac:	4800      	ldr	r0, [pc, #0]	; (801f7b0 <__gettzinfo+0x4>)
 801f7ae:	4770      	bx	lr
 801f7b0:	20000218 	.word	0x20000218

0801f7b4 <gmtime_r>:
 801f7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7b8:	e9d0 6700 	ldrd	r6, r7, [r0]
 801f7bc:	460c      	mov	r4, r1
 801f7be:	4a51      	ldr	r2, [pc, #324]	; (801f904 <gmtime_r+0x150>)
 801f7c0:	2300      	movs	r3, #0
 801f7c2:	4630      	mov	r0, r6
 801f7c4:	4639      	mov	r1, r7
 801f7c6:	f7e1 f9ff 	bl	8000bc8 <__aeabi_ldivmod>
 801f7ca:	4639      	mov	r1, r7
 801f7cc:	4605      	mov	r5, r0
 801f7ce:	4a4d      	ldr	r2, [pc, #308]	; (801f904 <gmtime_r+0x150>)
 801f7d0:	4630      	mov	r0, r6
 801f7d2:	2300      	movs	r3, #0
 801f7d4:	f7e1 f9f8 	bl	8000bc8 <__aeabi_ldivmod>
 801f7d8:	2a00      	cmp	r2, #0
 801f7da:	bfbc      	itt	lt
 801f7dc:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801f7e0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801f7e4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801f7e8:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801f7ec:	fbb2 f3f1 	udiv	r3, r2, r1
 801f7f0:	fb01 2213 	mls	r2, r1, r3, r2
 801f7f4:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801f7f8:	bfac      	ite	ge
 801f7fa:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801f7fe:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801f802:	60a3      	str	r3, [r4, #8]
 801f804:	fbb2 f3f1 	udiv	r3, r2, r1
 801f808:	fb01 2213 	mls	r2, r1, r3, r2
 801f80c:	6063      	str	r3, [r4, #4]
 801f80e:	6022      	str	r2, [r4, #0]
 801f810:	1cc3      	adds	r3, r0, #3
 801f812:	2207      	movs	r2, #7
 801f814:	fb93 f2f2 	sdiv	r2, r3, r2
 801f818:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801f81c:	1a9b      	subs	r3, r3, r2
 801f81e:	bf48      	it	mi
 801f820:	3307      	addmi	r3, #7
 801f822:	2800      	cmp	r0, #0
 801f824:	61a3      	str	r3, [r4, #24]
 801f826:	bfb8      	it	lt
 801f828:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801f82c:	4936      	ldr	r1, [pc, #216]	; (801f908 <gmtime_r+0x154>)
 801f82e:	bfae      	itee	ge
 801f830:	fb90 f1f1 	sdivge	r1, r0, r1
 801f834:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801f838:	fb93 f1f1 	sdivlt	r1, r3, r1
 801f83c:	4b33      	ldr	r3, [pc, #204]	; (801f90c <gmtime_r+0x158>)
 801f83e:	fb03 0001 	mla	r0, r3, r1, r0
 801f842:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801f846:	fbb0 f2f2 	udiv	r2, r0, r2
 801f84a:	4402      	add	r2, r0
 801f84c:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801f850:	fbb0 f3fc 	udiv	r3, r0, ip
 801f854:	1ad2      	subs	r2, r2, r3
 801f856:	f240 176d 	movw	r7, #365	; 0x16d
 801f85a:	4b2d      	ldr	r3, [pc, #180]	; (801f910 <gmtime_r+0x15c>)
 801f85c:	fbb0 f3f3 	udiv	r3, r0, r3
 801f860:	2664      	movs	r6, #100	; 0x64
 801f862:	1ad3      	subs	r3, r2, r3
 801f864:	fbb3 f5f7 	udiv	r5, r3, r7
 801f868:	fbb3 f3fc 	udiv	r3, r3, ip
 801f86c:	fbb5 f2f6 	udiv	r2, r5, r6
 801f870:	1ad3      	subs	r3, r2, r3
 801f872:	4403      	add	r3, r0
 801f874:	fb07 3315 	mls	r3, r7, r5, r3
 801f878:	2099      	movs	r0, #153	; 0x99
 801f87a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801f87e:	f10c 0c02 	add.w	ip, ip, #2
 801f882:	f103 0e01 	add.w	lr, r3, #1
 801f886:	fbbc f7f0 	udiv	r7, ip, r0
 801f88a:	4378      	muls	r0, r7
 801f88c:	3002      	adds	r0, #2
 801f88e:	f04f 0805 	mov.w	r8, #5
 801f892:	fbb0 f0f8 	udiv	r0, r0, r8
 801f896:	ebae 0000 	sub.w	r0, lr, r0
 801f89a:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 801f89e:	45f4      	cmp	ip, lr
 801f8a0:	bf94      	ite	ls
 801f8a2:	f04f 0c02 	movls.w	ip, #2
 801f8a6:	f06f 0c09 	mvnhi.w	ip, #9
 801f8aa:	4467      	add	r7, ip
 801f8ac:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 801f8b0:	fb0c 5101 	mla	r1, ip, r1, r5
 801f8b4:	2f01      	cmp	r7, #1
 801f8b6:	bf98      	it	ls
 801f8b8:	3101      	addls	r1, #1
 801f8ba:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801f8be:	d30c      	bcc.n	801f8da <gmtime_r+0x126>
 801f8c0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801f8c4:	61e3      	str	r3, [r4, #28]
 801f8c6:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801f8ca:	2300      	movs	r3, #0
 801f8cc:	60e0      	str	r0, [r4, #12]
 801f8ce:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801f8d2:	6223      	str	r3, [r4, #32]
 801f8d4:	4620      	mov	r0, r4
 801f8d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f8da:	f015 0f03 	tst.w	r5, #3
 801f8de:	d102      	bne.n	801f8e6 <gmtime_r+0x132>
 801f8e0:	fb06 5212 	mls	r2, r6, r2, r5
 801f8e4:	b95a      	cbnz	r2, 801f8fe <gmtime_r+0x14a>
 801f8e6:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801f8ea:	fbb5 f2f6 	udiv	r2, r5, r6
 801f8ee:	fb06 5212 	mls	r2, r6, r2, r5
 801f8f2:	fab2 f282 	clz	r2, r2
 801f8f6:	0952      	lsrs	r2, r2, #5
 801f8f8:	333b      	adds	r3, #59	; 0x3b
 801f8fa:	4413      	add	r3, r2
 801f8fc:	e7e2      	b.n	801f8c4 <gmtime_r+0x110>
 801f8fe:	2201      	movs	r2, #1
 801f900:	e7fa      	b.n	801f8f8 <gmtime_r+0x144>
 801f902:	bf00      	nop
 801f904:	00015180 	.word	0x00015180
 801f908:	00023ab1 	.word	0x00023ab1
 801f90c:	fffdc54f 	.word	0xfffdc54f
 801f910:	00023ab0 	.word	0x00023ab0

0801f914 <__retarget_lock_init_recursive>:
 801f914:	4770      	bx	lr

0801f916 <__retarget_lock_acquire>:
 801f916:	4770      	bx	lr

0801f918 <__retarget_lock_acquire_recursive>:
 801f918:	4770      	bx	lr

0801f91a <__retarget_lock_release>:
 801f91a:	4770      	bx	lr

0801f91c <__retarget_lock_release_recursive>:
 801f91c:	4770      	bx	lr
	...

0801f920 <malloc>:
 801f920:	4b02      	ldr	r3, [pc, #8]	; (801f92c <malloc+0xc>)
 801f922:	4601      	mov	r1, r0
 801f924:	6818      	ldr	r0, [r3, #0]
 801f926:	f000 b85b 	b.w	801f9e0 <_malloc_r>
 801f92a:	bf00      	nop
 801f92c:	200001ac 	.word	0x200001ac

0801f930 <free>:
 801f930:	4b02      	ldr	r3, [pc, #8]	; (801f93c <free+0xc>)
 801f932:	4601      	mov	r1, r0
 801f934:	6818      	ldr	r0, [r3, #0]
 801f936:	f000 b803 	b.w	801f940 <_free_r>
 801f93a:	bf00      	nop
 801f93c:	200001ac 	.word	0x200001ac

0801f940 <_free_r>:
 801f940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f942:	2900      	cmp	r1, #0
 801f944:	d048      	beq.n	801f9d8 <_free_r+0x98>
 801f946:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f94a:	9001      	str	r0, [sp, #4]
 801f94c:	2b00      	cmp	r3, #0
 801f94e:	f1a1 0404 	sub.w	r4, r1, #4
 801f952:	bfb8      	it	lt
 801f954:	18e4      	addlt	r4, r4, r3
 801f956:	f001 f827 	bl	80209a8 <__malloc_lock>
 801f95a:	4a20      	ldr	r2, [pc, #128]	; (801f9dc <_free_r+0x9c>)
 801f95c:	9801      	ldr	r0, [sp, #4]
 801f95e:	6813      	ldr	r3, [r2, #0]
 801f960:	4615      	mov	r5, r2
 801f962:	b933      	cbnz	r3, 801f972 <_free_r+0x32>
 801f964:	6063      	str	r3, [r4, #4]
 801f966:	6014      	str	r4, [r2, #0]
 801f968:	b003      	add	sp, #12
 801f96a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f96e:	f001 b821 	b.w	80209b4 <__malloc_unlock>
 801f972:	42a3      	cmp	r3, r4
 801f974:	d90b      	bls.n	801f98e <_free_r+0x4e>
 801f976:	6821      	ldr	r1, [r4, #0]
 801f978:	1862      	adds	r2, r4, r1
 801f97a:	4293      	cmp	r3, r2
 801f97c:	bf04      	itt	eq
 801f97e:	681a      	ldreq	r2, [r3, #0]
 801f980:	685b      	ldreq	r3, [r3, #4]
 801f982:	6063      	str	r3, [r4, #4]
 801f984:	bf04      	itt	eq
 801f986:	1852      	addeq	r2, r2, r1
 801f988:	6022      	streq	r2, [r4, #0]
 801f98a:	602c      	str	r4, [r5, #0]
 801f98c:	e7ec      	b.n	801f968 <_free_r+0x28>
 801f98e:	461a      	mov	r2, r3
 801f990:	685b      	ldr	r3, [r3, #4]
 801f992:	b10b      	cbz	r3, 801f998 <_free_r+0x58>
 801f994:	42a3      	cmp	r3, r4
 801f996:	d9fa      	bls.n	801f98e <_free_r+0x4e>
 801f998:	6811      	ldr	r1, [r2, #0]
 801f99a:	1855      	adds	r5, r2, r1
 801f99c:	42a5      	cmp	r5, r4
 801f99e:	d10b      	bne.n	801f9b8 <_free_r+0x78>
 801f9a0:	6824      	ldr	r4, [r4, #0]
 801f9a2:	4421      	add	r1, r4
 801f9a4:	1854      	adds	r4, r2, r1
 801f9a6:	42a3      	cmp	r3, r4
 801f9a8:	6011      	str	r1, [r2, #0]
 801f9aa:	d1dd      	bne.n	801f968 <_free_r+0x28>
 801f9ac:	681c      	ldr	r4, [r3, #0]
 801f9ae:	685b      	ldr	r3, [r3, #4]
 801f9b0:	6053      	str	r3, [r2, #4]
 801f9b2:	4421      	add	r1, r4
 801f9b4:	6011      	str	r1, [r2, #0]
 801f9b6:	e7d7      	b.n	801f968 <_free_r+0x28>
 801f9b8:	d902      	bls.n	801f9c0 <_free_r+0x80>
 801f9ba:	230c      	movs	r3, #12
 801f9bc:	6003      	str	r3, [r0, #0]
 801f9be:	e7d3      	b.n	801f968 <_free_r+0x28>
 801f9c0:	6825      	ldr	r5, [r4, #0]
 801f9c2:	1961      	adds	r1, r4, r5
 801f9c4:	428b      	cmp	r3, r1
 801f9c6:	bf04      	itt	eq
 801f9c8:	6819      	ldreq	r1, [r3, #0]
 801f9ca:	685b      	ldreq	r3, [r3, #4]
 801f9cc:	6063      	str	r3, [r4, #4]
 801f9ce:	bf04      	itt	eq
 801f9d0:	1949      	addeq	r1, r1, r5
 801f9d2:	6021      	streq	r1, [r4, #0]
 801f9d4:	6054      	str	r4, [r2, #4]
 801f9d6:	e7c7      	b.n	801f968 <_free_r+0x28>
 801f9d8:	b003      	add	sp, #12
 801f9da:	bd30      	pop	{r4, r5, pc}
 801f9dc:	20004adc 	.word	0x20004adc

0801f9e0 <_malloc_r>:
 801f9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f9e2:	1ccd      	adds	r5, r1, #3
 801f9e4:	f025 0503 	bic.w	r5, r5, #3
 801f9e8:	3508      	adds	r5, #8
 801f9ea:	2d0c      	cmp	r5, #12
 801f9ec:	bf38      	it	cc
 801f9ee:	250c      	movcc	r5, #12
 801f9f0:	2d00      	cmp	r5, #0
 801f9f2:	4606      	mov	r6, r0
 801f9f4:	db01      	blt.n	801f9fa <_malloc_r+0x1a>
 801f9f6:	42a9      	cmp	r1, r5
 801f9f8:	d903      	bls.n	801fa02 <_malloc_r+0x22>
 801f9fa:	230c      	movs	r3, #12
 801f9fc:	6033      	str	r3, [r6, #0]
 801f9fe:	2000      	movs	r0, #0
 801fa00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fa02:	f000 ffd1 	bl	80209a8 <__malloc_lock>
 801fa06:	4921      	ldr	r1, [pc, #132]	; (801fa8c <_malloc_r+0xac>)
 801fa08:	680a      	ldr	r2, [r1, #0]
 801fa0a:	4614      	mov	r4, r2
 801fa0c:	b99c      	cbnz	r4, 801fa36 <_malloc_r+0x56>
 801fa0e:	4f20      	ldr	r7, [pc, #128]	; (801fa90 <_malloc_r+0xb0>)
 801fa10:	683b      	ldr	r3, [r7, #0]
 801fa12:	b923      	cbnz	r3, 801fa1e <_malloc_r+0x3e>
 801fa14:	4621      	mov	r1, r4
 801fa16:	4630      	mov	r0, r6
 801fa18:	f000 fc86 	bl	8020328 <_sbrk_r>
 801fa1c:	6038      	str	r0, [r7, #0]
 801fa1e:	4629      	mov	r1, r5
 801fa20:	4630      	mov	r0, r6
 801fa22:	f000 fc81 	bl	8020328 <_sbrk_r>
 801fa26:	1c43      	adds	r3, r0, #1
 801fa28:	d123      	bne.n	801fa72 <_malloc_r+0x92>
 801fa2a:	230c      	movs	r3, #12
 801fa2c:	6033      	str	r3, [r6, #0]
 801fa2e:	4630      	mov	r0, r6
 801fa30:	f000 ffc0 	bl	80209b4 <__malloc_unlock>
 801fa34:	e7e3      	b.n	801f9fe <_malloc_r+0x1e>
 801fa36:	6823      	ldr	r3, [r4, #0]
 801fa38:	1b5b      	subs	r3, r3, r5
 801fa3a:	d417      	bmi.n	801fa6c <_malloc_r+0x8c>
 801fa3c:	2b0b      	cmp	r3, #11
 801fa3e:	d903      	bls.n	801fa48 <_malloc_r+0x68>
 801fa40:	6023      	str	r3, [r4, #0]
 801fa42:	441c      	add	r4, r3
 801fa44:	6025      	str	r5, [r4, #0]
 801fa46:	e004      	b.n	801fa52 <_malloc_r+0x72>
 801fa48:	6863      	ldr	r3, [r4, #4]
 801fa4a:	42a2      	cmp	r2, r4
 801fa4c:	bf0c      	ite	eq
 801fa4e:	600b      	streq	r3, [r1, #0]
 801fa50:	6053      	strne	r3, [r2, #4]
 801fa52:	4630      	mov	r0, r6
 801fa54:	f000 ffae 	bl	80209b4 <__malloc_unlock>
 801fa58:	f104 000b 	add.w	r0, r4, #11
 801fa5c:	1d23      	adds	r3, r4, #4
 801fa5e:	f020 0007 	bic.w	r0, r0, #7
 801fa62:	1ac2      	subs	r2, r0, r3
 801fa64:	d0cc      	beq.n	801fa00 <_malloc_r+0x20>
 801fa66:	1a1b      	subs	r3, r3, r0
 801fa68:	50a3      	str	r3, [r4, r2]
 801fa6a:	e7c9      	b.n	801fa00 <_malloc_r+0x20>
 801fa6c:	4622      	mov	r2, r4
 801fa6e:	6864      	ldr	r4, [r4, #4]
 801fa70:	e7cc      	b.n	801fa0c <_malloc_r+0x2c>
 801fa72:	1cc4      	adds	r4, r0, #3
 801fa74:	f024 0403 	bic.w	r4, r4, #3
 801fa78:	42a0      	cmp	r0, r4
 801fa7a:	d0e3      	beq.n	801fa44 <_malloc_r+0x64>
 801fa7c:	1a21      	subs	r1, r4, r0
 801fa7e:	4630      	mov	r0, r6
 801fa80:	f000 fc52 	bl	8020328 <_sbrk_r>
 801fa84:	3001      	adds	r0, #1
 801fa86:	d1dd      	bne.n	801fa44 <_malloc_r+0x64>
 801fa88:	e7cf      	b.n	801fa2a <_malloc_r+0x4a>
 801fa8a:	bf00      	nop
 801fa8c:	20004adc 	.word	0x20004adc
 801fa90:	20004ae0 	.word	0x20004ae0

0801fa94 <__ssputs_r>:
 801fa94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fa98:	688e      	ldr	r6, [r1, #8]
 801fa9a:	429e      	cmp	r6, r3
 801fa9c:	4682      	mov	sl, r0
 801fa9e:	460c      	mov	r4, r1
 801faa0:	4690      	mov	r8, r2
 801faa2:	461f      	mov	r7, r3
 801faa4:	d838      	bhi.n	801fb18 <__ssputs_r+0x84>
 801faa6:	898a      	ldrh	r2, [r1, #12]
 801faa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801faac:	d032      	beq.n	801fb14 <__ssputs_r+0x80>
 801faae:	6825      	ldr	r5, [r4, #0]
 801fab0:	6909      	ldr	r1, [r1, #16]
 801fab2:	eba5 0901 	sub.w	r9, r5, r1
 801fab6:	6965      	ldr	r5, [r4, #20]
 801fab8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fabc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801fac0:	3301      	adds	r3, #1
 801fac2:	444b      	add	r3, r9
 801fac4:	106d      	asrs	r5, r5, #1
 801fac6:	429d      	cmp	r5, r3
 801fac8:	bf38      	it	cc
 801faca:	461d      	movcc	r5, r3
 801facc:	0553      	lsls	r3, r2, #21
 801face:	d531      	bpl.n	801fb34 <__ssputs_r+0xa0>
 801fad0:	4629      	mov	r1, r5
 801fad2:	f7ff ff85 	bl	801f9e0 <_malloc_r>
 801fad6:	4606      	mov	r6, r0
 801fad8:	b950      	cbnz	r0, 801faf0 <__ssputs_r+0x5c>
 801fada:	230c      	movs	r3, #12
 801fadc:	f8ca 3000 	str.w	r3, [sl]
 801fae0:	89a3      	ldrh	r3, [r4, #12]
 801fae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fae6:	81a3      	strh	r3, [r4, #12]
 801fae8:	f04f 30ff 	mov.w	r0, #4294967295
 801faec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801faf0:	6921      	ldr	r1, [r4, #16]
 801faf2:	464a      	mov	r2, r9
 801faf4:	f7fe fe86 	bl	801e804 <memcpy>
 801faf8:	89a3      	ldrh	r3, [r4, #12]
 801fafa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801fafe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fb02:	81a3      	strh	r3, [r4, #12]
 801fb04:	6126      	str	r6, [r4, #16]
 801fb06:	6165      	str	r5, [r4, #20]
 801fb08:	444e      	add	r6, r9
 801fb0a:	eba5 0509 	sub.w	r5, r5, r9
 801fb0e:	6026      	str	r6, [r4, #0]
 801fb10:	60a5      	str	r5, [r4, #8]
 801fb12:	463e      	mov	r6, r7
 801fb14:	42be      	cmp	r6, r7
 801fb16:	d900      	bls.n	801fb1a <__ssputs_r+0x86>
 801fb18:	463e      	mov	r6, r7
 801fb1a:	4632      	mov	r2, r6
 801fb1c:	6820      	ldr	r0, [r4, #0]
 801fb1e:	4641      	mov	r1, r8
 801fb20:	f7fe fe7e 	bl	801e820 <memmove>
 801fb24:	68a3      	ldr	r3, [r4, #8]
 801fb26:	6822      	ldr	r2, [r4, #0]
 801fb28:	1b9b      	subs	r3, r3, r6
 801fb2a:	4432      	add	r2, r6
 801fb2c:	60a3      	str	r3, [r4, #8]
 801fb2e:	6022      	str	r2, [r4, #0]
 801fb30:	2000      	movs	r0, #0
 801fb32:	e7db      	b.n	801faec <__ssputs_r+0x58>
 801fb34:	462a      	mov	r2, r5
 801fb36:	f000 ff43 	bl	80209c0 <_realloc_r>
 801fb3a:	4606      	mov	r6, r0
 801fb3c:	2800      	cmp	r0, #0
 801fb3e:	d1e1      	bne.n	801fb04 <__ssputs_r+0x70>
 801fb40:	6921      	ldr	r1, [r4, #16]
 801fb42:	4650      	mov	r0, sl
 801fb44:	f7ff fefc 	bl	801f940 <_free_r>
 801fb48:	e7c7      	b.n	801fada <__ssputs_r+0x46>
	...

0801fb4c <_svfiprintf_r>:
 801fb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb50:	4698      	mov	r8, r3
 801fb52:	898b      	ldrh	r3, [r1, #12]
 801fb54:	061b      	lsls	r3, r3, #24
 801fb56:	b09d      	sub	sp, #116	; 0x74
 801fb58:	4607      	mov	r7, r0
 801fb5a:	460d      	mov	r5, r1
 801fb5c:	4614      	mov	r4, r2
 801fb5e:	d50e      	bpl.n	801fb7e <_svfiprintf_r+0x32>
 801fb60:	690b      	ldr	r3, [r1, #16]
 801fb62:	b963      	cbnz	r3, 801fb7e <_svfiprintf_r+0x32>
 801fb64:	2140      	movs	r1, #64	; 0x40
 801fb66:	f7ff ff3b 	bl	801f9e0 <_malloc_r>
 801fb6a:	6028      	str	r0, [r5, #0]
 801fb6c:	6128      	str	r0, [r5, #16]
 801fb6e:	b920      	cbnz	r0, 801fb7a <_svfiprintf_r+0x2e>
 801fb70:	230c      	movs	r3, #12
 801fb72:	603b      	str	r3, [r7, #0]
 801fb74:	f04f 30ff 	mov.w	r0, #4294967295
 801fb78:	e0d1      	b.n	801fd1e <_svfiprintf_r+0x1d2>
 801fb7a:	2340      	movs	r3, #64	; 0x40
 801fb7c:	616b      	str	r3, [r5, #20]
 801fb7e:	2300      	movs	r3, #0
 801fb80:	9309      	str	r3, [sp, #36]	; 0x24
 801fb82:	2320      	movs	r3, #32
 801fb84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fb88:	f8cd 800c 	str.w	r8, [sp, #12]
 801fb8c:	2330      	movs	r3, #48	; 0x30
 801fb8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801fd38 <_svfiprintf_r+0x1ec>
 801fb92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fb96:	f04f 0901 	mov.w	r9, #1
 801fb9a:	4623      	mov	r3, r4
 801fb9c:	469a      	mov	sl, r3
 801fb9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fba2:	b10a      	cbz	r2, 801fba8 <_svfiprintf_r+0x5c>
 801fba4:	2a25      	cmp	r2, #37	; 0x25
 801fba6:	d1f9      	bne.n	801fb9c <_svfiprintf_r+0x50>
 801fba8:	ebba 0b04 	subs.w	fp, sl, r4
 801fbac:	d00b      	beq.n	801fbc6 <_svfiprintf_r+0x7a>
 801fbae:	465b      	mov	r3, fp
 801fbb0:	4622      	mov	r2, r4
 801fbb2:	4629      	mov	r1, r5
 801fbb4:	4638      	mov	r0, r7
 801fbb6:	f7ff ff6d 	bl	801fa94 <__ssputs_r>
 801fbba:	3001      	adds	r0, #1
 801fbbc:	f000 80aa 	beq.w	801fd14 <_svfiprintf_r+0x1c8>
 801fbc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fbc2:	445a      	add	r2, fp
 801fbc4:	9209      	str	r2, [sp, #36]	; 0x24
 801fbc6:	f89a 3000 	ldrb.w	r3, [sl]
 801fbca:	2b00      	cmp	r3, #0
 801fbcc:	f000 80a2 	beq.w	801fd14 <_svfiprintf_r+0x1c8>
 801fbd0:	2300      	movs	r3, #0
 801fbd2:	f04f 32ff 	mov.w	r2, #4294967295
 801fbd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fbda:	f10a 0a01 	add.w	sl, sl, #1
 801fbde:	9304      	str	r3, [sp, #16]
 801fbe0:	9307      	str	r3, [sp, #28]
 801fbe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fbe6:	931a      	str	r3, [sp, #104]	; 0x68
 801fbe8:	4654      	mov	r4, sl
 801fbea:	2205      	movs	r2, #5
 801fbec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fbf0:	4851      	ldr	r0, [pc, #324]	; (801fd38 <_svfiprintf_r+0x1ec>)
 801fbf2:	f7e0 fb05 	bl	8000200 <memchr>
 801fbf6:	9a04      	ldr	r2, [sp, #16]
 801fbf8:	b9d8      	cbnz	r0, 801fc32 <_svfiprintf_r+0xe6>
 801fbfa:	06d0      	lsls	r0, r2, #27
 801fbfc:	bf44      	itt	mi
 801fbfe:	2320      	movmi	r3, #32
 801fc00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fc04:	0711      	lsls	r1, r2, #28
 801fc06:	bf44      	itt	mi
 801fc08:	232b      	movmi	r3, #43	; 0x2b
 801fc0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fc0e:	f89a 3000 	ldrb.w	r3, [sl]
 801fc12:	2b2a      	cmp	r3, #42	; 0x2a
 801fc14:	d015      	beq.n	801fc42 <_svfiprintf_r+0xf6>
 801fc16:	9a07      	ldr	r2, [sp, #28]
 801fc18:	4654      	mov	r4, sl
 801fc1a:	2000      	movs	r0, #0
 801fc1c:	f04f 0c0a 	mov.w	ip, #10
 801fc20:	4621      	mov	r1, r4
 801fc22:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fc26:	3b30      	subs	r3, #48	; 0x30
 801fc28:	2b09      	cmp	r3, #9
 801fc2a:	d94e      	bls.n	801fcca <_svfiprintf_r+0x17e>
 801fc2c:	b1b0      	cbz	r0, 801fc5c <_svfiprintf_r+0x110>
 801fc2e:	9207      	str	r2, [sp, #28]
 801fc30:	e014      	b.n	801fc5c <_svfiprintf_r+0x110>
 801fc32:	eba0 0308 	sub.w	r3, r0, r8
 801fc36:	fa09 f303 	lsl.w	r3, r9, r3
 801fc3a:	4313      	orrs	r3, r2
 801fc3c:	9304      	str	r3, [sp, #16]
 801fc3e:	46a2      	mov	sl, r4
 801fc40:	e7d2      	b.n	801fbe8 <_svfiprintf_r+0x9c>
 801fc42:	9b03      	ldr	r3, [sp, #12]
 801fc44:	1d19      	adds	r1, r3, #4
 801fc46:	681b      	ldr	r3, [r3, #0]
 801fc48:	9103      	str	r1, [sp, #12]
 801fc4a:	2b00      	cmp	r3, #0
 801fc4c:	bfbb      	ittet	lt
 801fc4e:	425b      	neglt	r3, r3
 801fc50:	f042 0202 	orrlt.w	r2, r2, #2
 801fc54:	9307      	strge	r3, [sp, #28]
 801fc56:	9307      	strlt	r3, [sp, #28]
 801fc58:	bfb8      	it	lt
 801fc5a:	9204      	strlt	r2, [sp, #16]
 801fc5c:	7823      	ldrb	r3, [r4, #0]
 801fc5e:	2b2e      	cmp	r3, #46	; 0x2e
 801fc60:	d10c      	bne.n	801fc7c <_svfiprintf_r+0x130>
 801fc62:	7863      	ldrb	r3, [r4, #1]
 801fc64:	2b2a      	cmp	r3, #42	; 0x2a
 801fc66:	d135      	bne.n	801fcd4 <_svfiprintf_r+0x188>
 801fc68:	9b03      	ldr	r3, [sp, #12]
 801fc6a:	1d1a      	adds	r2, r3, #4
 801fc6c:	681b      	ldr	r3, [r3, #0]
 801fc6e:	9203      	str	r2, [sp, #12]
 801fc70:	2b00      	cmp	r3, #0
 801fc72:	bfb8      	it	lt
 801fc74:	f04f 33ff 	movlt.w	r3, #4294967295
 801fc78:	3402      	adds	r4, #2
 801fc7a:	9305      	str	r3, [sp, #20]
 801fc7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801fd48 <_svfiprintf_r+0x1fc>
 801fc80:	7821      	ldrb	r1, [r4, #0]
 801fc82:	2203      	movs	r2, #3
 801fc84:	4650      	mov	r0, sl
 801fc86:	f7e0 fabb 	bl	8000200 <memchr>
 801fc8a:	b140      	cbz	r0, 801fc9e <_svfiprintf_r+0x152>
 801fc8c:	2340      	movs	r3, #64	; 0x40
 801fc8e:	eba0 000a 	sub.w	r0, r0, sl
 801fc92:	fa03 f000 	lsl.w	r0, r3, r0
 801fc96:	9b04      	ldr	r3, [sp, #16]
 801fc98:	4303      	orrs	r3, r0
 801fc9a:	3401      	adds	r4, #1
 801fc9c:	9304      	str	r3, [sp, #16]
 801fc9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fca2:	4826      	ldr	r0, [pc, #152]	; (801fd3c <_svfiprintf_r+0x1f0>)
 801fca4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fca8:	2206      	movs	r2, #6
 801fcaa:	f7e0 faa9 	bl	8000200 <memchr>
 801fcae:	2800      	cmp	r0, #0
 801fcb0:	d038      	beq.n	801fd24 <_svfiprintf_r+0x1d8>
 801fcb2:	4b23      	ldr	r3, [pc, #140]	; (801fd40 <_svfiprintf_r+0x1f4>)
 801fcb4:	bb1b      	cbnz	r3, 801fcfe <_svfiprintf_r+0x1b2>
 801fcb6:	9b03      	ldr	r3, [sp, #12]
 801fcb8:	3307      	adds	r3, #7
 801fcba:	f023 0307 	bic.w	r3, r3, #7
 801fcbe:	3308      	adds	r3, #8
 801fcc0:	9303      	str	r3, [sp, #12]
 801fcc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fcc4:	4433      	add	r3, r6
 801fcc6:	9309      	str	r3, [sp, #36]	; 0x24
 801fcc8:	e767      	b.n	801fb9a <_svfiprintf_r+0x4e>
 801fcca:	fb0c 3202 	mla	r2, ip, r2, r3
 801fcce:	460c      	mov	r4, r1
 801fcd0:	2001      	movs	r0, #1
 801fcd2:	e7a5      	b.n	801fc20 <_svfiprintf_r+0xd4>
 801fcd4:	2300      	movs	r3, #0
 801fcd6:	3401      	adds	r4, #1
 801fcd8:	9305      	str	r3, [sp, #20]
 801fcda:	4619      	mov	r1, r3
 801fcdc:	f04f 0c0a 	mov.w	ip, #10
 801fce0:	4620      	mov	r0, r4
 801fce2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fce6:	3a30      	subs	r2, #48	; 0x30
 801fce8:	2a09      	cmp	r2, #9
 801fcea:	d903      	bls.n	801fcf4 <_svfiprintf_r+0x1a8>
 801fcec:	2b00      	cmp	r3, #0
 801fcee:	d0c5      	beq.n	801fc7c <_svfiprintf_r+0x130>
 801fcf0:	9105      	str	r1, [sp, #20]
 801fcf2:	e7c3      	b.n	801fc7c <_svfiprintf_r+0x130>
 801fcf4:	fb0c 2101 	mla	r1, ip, r1, r2
 801fcf8:	4604      	mov	r4, r0
 801fcfa:	2301      	movs	r3, #1
 801fcfc:	e7f0      	b.n	801fce0 <_svfiprintf_r+0x194>
 801fcfe:	ab03      	add	r3, sp, #12
 801fd00:	9300      	str	r3, [sp, #0]
 801fd02:	462a      	mov	r2, r5
 801fd04:	4b0f      	ldr	r3, [pc, #60]	; (801fd44 <_svfiprintf_r+0x1f8>)
 801fd06:	a904      	add	r1, sp, #16
 801fd08:	4638      	mov	r0, r7
 801fd0a:	f3af 8000 	nop.w
 801fd0e:	1c42      	adds	r2, r0, #1
 801fd10:	4606      	mov	r6, r0
 801fd12:	d1d6      	bne.n	801fcc2 <_svfiprintf_r+0x176>
 801fd14:	89ab      	ldrh	r3, [r5, #12]
 801fd16:	065b      	lsls	r3, r3, #25
 801fd18:	f53f af2c 	bmi.w	801fb74 <_svfiprintf_r+0x28>
 801fd1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fd1e:	b01d      	add	sp, #116	; 0x74
 801fd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd24:	ab03      	add	r3, sp, #12
 801fd26:	9300      	str	r3, [sp, #0]
 801fd28:	462a      	mov	r2, r5
 801fd2a:	4b06      	ldr	r3, [pc, #24]	; (801fd44 <_svfiprintf_r+0x1f8>)
 801fd2c:	a904      	add	r1, sp, #16
 801fd2e:	4638      	mov	r0, r7
 801fd30:	f000 f9d4 	bl	80200dc <_printf_i>
 801fd34:	e7eb      	b.n	801fd0e <_svfiprintf_r+0x1c2>
 801fd36:	bf00      	nop
 801fd38:	08026fd8 	.word	0x08026fd8
 801fd3c:	08026fe2 	.word	0x08026fe2
 801fd40:	00000000 	.word	0x00000000
 801fd44:	0801fa95 	.word	0x0801fa95
 801fd48:	08026fde 	.word	0x08026fde

0801fd4c <__sfputc_r>:
 801fd4c:	6893      	ldr	r3, [r2, #8]
 801fd4e:	3b01      	subs	r3, #1
 801fd50:	2b00      	cmp	r3, #0
 801fd52:	b410      	push	{r4}
 801fd54:	6093      	str	r3, [r2, #8]
 801fd56:	da08      	bge.n	801fd6a <__sfputc_r+0x1e>
 801fd58:	6994      	ldr	r4, [r2, #24]
 801fd5a:	42a3      	cmp	r3, r4
 801fd5c:	db01      	blt.n	801fd62 <__sfputc_r+0x16>
 801fd5e:	290a      	cmp	r1, #10
 801fd60:	d103      	bne.n	801fd6a <__sfputc_r+0x1e>
 801fd62:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fd66:	f000 bbf1 	b.w	802054c <__swbuf_r>
 801fd6a:	6813      	ldr	r3, [r2, #0]
 801fd6c:	1c58      	adds	r0, r3, #1
 801fd6e:	6010      	str	r0, [r2, #0]
 801fd70:	7019      	strb	r1, [r3, #0]
 801fd72:	4608      	mov	r0, r1
 801fd74:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fd78:	4770      	bx	lr

0801fd7a <__sfputs_r>:
 801fd7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd7c:	4606      	mov	r6, r0
 801fd7e:	460f      	mov	r7, r1
 801fd80:	4614      	mov	r4, r2
 801fd82:	18d5      	adds	r5, r2, r3
 801fd84:	42ac      	cmp	r4, r5
 801fd86:	d101      	bne.n	801fd8c <__sfputs_r+0x12>
 801fd88:	2000      	movs	r0, #0
 801fd8a:	e007      	b.n	801fd9c <__sfputs_r+0x22>
 801fd8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fd90:	463a      	mov	r2, r7
 801fd92:	4630      	mov	r0, r6
 801fd94:	f7ff ffda 	bl	801fd4c <__sfputc_r>
 801fd98:	1c43      	adds	r3, r0, #1
 801fd9a:	d1f3      	bne.n	801fd84 <__sfputs_r+0xa>
 801fd9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fda0 <_vfiprintf_r>:
 801fda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fda4:	460d      	mov	r5, r1
 801fda6:	b09d      	sub	sp, #116	; 0x74
 801fda8:	4614      	mov	r4, r2
 801fdaa:	4698      	mov	r8, r3
 801fdac:	4606      	mov	r6, r0
 801fdae:	b118      	cbz	r0, 801fdb8 <_vfiprintf_r+0x18>
 801fdb0:	6983      	ldr	r3, [r0, #24]
 801fdb2:	b90b      	cbnz	r3, 801fdb8 <_vfiprintf_r+0x18>
 801fdb4:	f7ff fc08 	bl	801f5c8 <__sinit>
 801fdb8:	4b89      	ldr	r3, [pc, #548]	; (801ffe0 <_vfiprintf_r+0x240>)
 801fdba:	429d      	cmp	r5, r3
 801fdbc:	d11b      	bne.n	801fdf6 <_vfiprintf_r+0x56>
 801fdbe:	6875      	ldr	r5, [r6, #4]
 801fdc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fdc2:	07d9      	lsls	r1, r3, #31
 801fdc4:	d405      	bmi.n	801fdd2 <_vfiprintf_r+0x32>
 801fdc6:	89ab      	ldrh	r3, [r5, #12]
 801fdc8:	059a      	lsls	r2, r3, #22
 801fdca:	d402      	bmi.n	801fdd2 <_vfiprintf_r+0x32>
 801fdcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fdce:	f7ff fda3 	bl	801f918 <__retarget_lock_acquire_recursive>
 801fdd2:	89ab      	ldrh	r3, [r5, #12]
 801fdd4:	071b      	lsls	r3, r3, #28
 801fdd6:	d501      	bpl.n	801fddc <_vfiprintf_r+0x3c>
 801fdd8:	692b      	ldr	r3, [r5, #16]
 801fdda:	b9eb      	cbnz	r3, 801fe18 <_vfiprintf_r+0x78>
 801fddc:	4629      	mov	r1, r5
 801fdde:	4630      	mov	r0, r6
 801fde0:	f000 fc18 	bl	8020614 <__swsetup_r>
 801fde4:	b1c0      	cbz	r0, 801fe18 <_vfiprintf_r+0x78>
 801fde6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fde8:	07dc      	lsls	r4, r3, #31
 801fdea:	d50e      	bpl.n	801fe0a <_vfiprintf_r+0x6a>
 801fdec:	f04f 30ff 	mov.w	r0, #4294967295
 801fdf0:	b01d      	add	sp, #116	; 0x74
 801fdf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdf6:	4b7b      	ldr	r3, [pc, #492]	; (801ffe4 <_vfiprintf_r+0x244>)
 801fdf8:	429d      	cmp	r5, r3
 801fdfa:	d101      	bne.n	801fe00 <_vfiprintf_r+0x60>
 801fdfc:	68b5      	ldr	r5, [r6, #8]
 801fdfe:	e7df      	b.n	801fdc0 <_vfiprintf_r+0x20>
 801fe00:	4b79      	ldr	r3, [pc, #484]	; (801ffe8 <_vfiprintf_r+0x248>)
 801fe02:	429d      	cmp	r5, r3
 801fe04:	bf08      	it	eq
 801fe06:	68f5      	ldreq	r5, [r6, #12]
 801fe08:	e7da      	b.n	801fdc0 <_vfiprintf_r+0x20>
 801fe0a:	89ab      	ldrh	r3, [r5, #12]
 801fe0c:	0598      	lsls	r0, r3, #22
 801fe0e:	d4ed      	bmi.n	801fdec <_vfiprintf_r+0x4c>
 801fe10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fe12:	f7ff fd83 	bl	801f91c <__retarget_lock_release_recursive>
 801fe16:	e7e9      	b.n	801fdec <_vfiprintf_r+0x4c>
 801fe18:	2300      	movs	r3, #0
 801fe1a:	9309      	str	r3, [sp, #36]	; 0x24
 801fe1c:	2320      	movs	r3, #32
 801fe1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fe22:	f8cd 800c 	str.w	r8, [sp, #12]
 801fe26:	2330      	movs	r3, #48	; 0x30
 801fe28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ffec <_vfiprintf_r+0x24c>
 801fe2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fe30:	f04f 0901 	mov.w	r9, #1
 801fe34:	4623      	mov	r3, r4
 801fe36:	469a      	mov	sl, r3
 801fe38:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fe3c:	b10a      	cbz	r2, 801fe42 <_vfiprintf_r+0xa2>
 801fe3e:	2a25      	cmp	r2, #37	; 0x25
 801fe40:	d1f9      	bne.n	801fe36 <_vfiprintf_r+0x96>
 801fe42:	ebba 0b04 	subs.w	fp, sl, r4
 801fe46:	d00b      	beq.n	801fe60 <_vfiprintf_r+0xc0>
 801fe48:	465b      	mov	r3, fp
 801fe4a:	4622      	mov	r2, r4
 801fe4c:	4629      	mov	r1, r5
 801fe4e:	4630      	mov	r0, r6
 801fe50:	f7ff ff93 	bl	801fd7a <__sfputs_r>
 801fe54:	3001      	adds	r0, #1
 801fe56:	f000 80aa 	beq.w	801ffae <_vfiprintf_r+0x20e>
 801fe5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fe5c:	445a      	add	r2, fp
 801fe5e:	9209      	str	r2, [sp, #36]	; 0x24
 801fe60:	f89a 3000 	ldrb.w	r3, [sl]
 801fe64:	2b00      	cmp	r3, #0
 801fe66:	f000 80a2 	beq.w	801ffae <_vfiprintf_r+0x20e>
 801fe6a:	2300      	movs	r3, #0
 801fe6c:	f04f 32ff 	mov.w	r2, #4294967295
 801fe70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fe74:	f10a 0a01 	add.w	sl, sl, #1
 801fe78:	9304      	str	r3, [sp, #16]
 801fe7a:	9307      	str	r3, [sp, #28]
 801fe7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fe80:	931a      	str	r3, [sp, #104]	; 0x68
 801fe82:	4654      	mov	r4, sl
 801fe84:	2205      	movs	r2, #5
 801fe86:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fe8a:	4858      	ldr	r0, [pc, #352]	; (801ffec <_vfiprintf_r+0x24c>)
 801fe8c:	f7e0 f9b8 	bl	8000200 <memchr>
 801fe90:	9a04      	ldr	r2, [sp, #16]
 801fe92:	b9d8      	cbnz	r0, 801fecc <_vfiprintf_r+0x12c>
 801fe94:	06d1      	lsls	r1, r2, #27
 801fe96:	bf44      	itt	mi
 801fe98:	2320      	movmi	r3, #32
 801fe9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fe9e:	0713      	lsls	r3, r2, #28
 801fea0:	bf44      	itt	mi
 801fea2:	232b      	movmi	r3, #43	; 0x2b
 801fea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fea8:	f89a 3000 	ldrb.w	r3, [sl]
 801feac:	2b2a      	cmp	r3, #42	; 0x2a
 801feae:	d015      	beq.n	801fedc <_vfiprintf_r+0x13c>
 801feb0:	9a07      	ldr	r2, [sp, #28]
 801feb2:	4654      	mov	r4, sl
 801feb4:	2000      	movs	r0, #0
 801feb6:	f04f 0c0a 	mov.w	ip, #10
 801feba:	4621      	mov	r1, r4
 801febc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fec0:	3b30      	subs	r3, #48	; 0x30
 801fec2:	2b09      	cmp	r3, #9
 801fec4:	d94e      	bls.n	801ff64 <_vfiprintf_r+0x1c4>
 801fec6:	b1b0      	cbz	r0, 801fef6 <_vfiprintf_r+0x156>
 801fec8:	9207      	str	r2, [sp, #28]
 801feca:	e014      	b.n	801fef6 <_vfiprintf_r+0x156>
 801fecc:	eba0 0308 	sub.w	r3, r0, r8
 801fed0:	fa09 f303 	lsl.w	r3, r9, r3
 801fed4:	4313      	orrs	r3, r2
 801fed6:	9304      	str	r3, [sp, #16]
 801fed8:	46a2      	mov	sl, r4
 801feda:	e7d2      	b.n	801fe82 <_vfiprintf_r+0xe2>
 801fedc:	9b03      	ldr	r3, [sp, #12]
 801fede:	1d19      	adds	r1, r3, #4
 801fee0:	681b      	ldr	r3, [r3, #0]
 801fee2:	9103      	str	r1, [sp, #12]
 801fee4:	2b00      	cmp	r3, #0
 801fee6:	bfbb      	ittet	lt
 801fee8:	425b      	neglt	r3, r3
 801feea:	f042 0202 	orrlt.w	r2, r2, #2
 801feee:	9307      	strge	r3, [sp, #28]
 801fef0:	9307      	strlt	r3, [sp, #28]
 801fef2:	bfb8      	it	lt
 801fef4:	9204      	strlt	r2, [sp, #16]
 801fef6:	7823      	ldrb	r3, [r4, #0]
 801fef8:	2b2e      	cmp	r3, #46	; 0x2e
 801fefa:	d10c      	bne.n	801ff16 <_vfiprintf_r+0x176>
 801fefc:	7863      	ldrb	r3, [r4, #1]
 801fefe:	2b2a      	cmp	r3, #42	; 0x2a
 801ff00:	d135      	bne.n	801ff6e <_vfiprintf_r+0x1ce>
 801ff02:	9b03      	ldr	r3, [sp, #12]
 801ff04:	1d1a      	adds	r2, r3, #4
 801ff06:	681b      	ldr	r3, [r3, #0]
 801ff08:	9203      	str	r2, [sp, #12]
 801ff0a:	2b00      	cmp	r3, #0
 801ff0c:	bfb8      	it	lt
 801ff0e:	f04f 33ff 	movlt.w	r3, #4294967295
 801ff12:	3402      	adds	r4, #2
 801ff14:	9305      	str	r3, [sp, #20]
 801ff16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801fffc <_vfiprintf_r+0x25c>
 801ff1a:	7821      	ldrb	r1, [r4, #0]
 801ff1c:	2203      	movs	r2, #3
 801ff1e:	4650      	mov	r0, sl
 801ff20:	f7e0 f96e 	bl	8000200 <memchr>
 801ff24:	b140      	cbz	r0, 801ff38 <_vfiprintf_r+0x198>
 801ff26:	2340      	movs	r3, #64	; 0x40
 801ff28:	eba0 000a 	sub.w	r0, r0, sl
 801ff2c:	fa03 f000 	lsl.w	r0, r3, r0
 801ff30:	9b04      	ldr	r3, [sp, #16]
 801ff32:	4303      	orrs	r3, r0
 801ff34:	3401      	adds	r4, #1
 801ff36:	9304      	str	r3, [sp, #16]
 801ff38:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ff3c:	482c      	ldr	r0, [pc, #176]	; (801fff0 <_vfiprintf_r+0x250>)
 801ff3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ff42:	2206      	movs	r2, #6
 801ff44:	f7e0 f95c 	bl	8000200 <memchr>
 801ff48:	2800      	cmp	r0, #0
 801ff4a:	d03f      	beq.n	801ffcc <_vfiprintf_r+0x22c>
 801ff4c:	4b29      	ldr	r3, [pc, #164]	; (801fff4 <_vfiprintf_r+0x254>)
 801ff4e:	bb1b      	cbnz	r3, 801ff98 <_vfiprintf_r+0x1f8>
 801ff50:	9b03      	ldr	r3, [sp, #12]
 801ff52:	3307      	adds	r3, #7
 801ff54:	f023 0307 	bic.w	r3, r3, #7
 801ff58:	3308      	adds	r3, #8
 801ff5a:	9303      	str	r3, [sp, #12]
 801ff5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff5e:	443b      	add	r3, r7
 801ff60:	9309      	str	r3, [sp, #36]	; 0x24
 801ff62:	e767      	b.n	801fe34 <_vfiprintf_r+0x94>
 801ff64:	fb0c 3202 	mla	r2, ip, r2, r3
 801ff68:	460c      	mov	r4, r1
 801ff6a:	2001      	movs	r0, #1
 801ff6c:	e7a5      	b.n	801feba <_vfiprintf_r+0x11a>
 801ff6e:	2300      	movs	r3, #0
 801ff70:	3401      	adds	r4, #1
 801ff72:	9305      	str	r3, [sp, #20]
 801ff74:	4619      	mov	r1, r3
 801ff76:	f04f 0c0a 	mov.w	ip, #10
 801ff7a:	4620      	mov	r0, r4
 801ff7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ff80:	3a30      	subs	r2, #48	; 0x30
 801ff82:	2a09      	cmp	r2, #9
 801ff84:	d903      	bls.n	801ff8e <_vfiprintf_r+0x1ee>
 801ff86:	2b00      	cmp	r3, #0
 801ff88:	d0c5      	beq.n	801ff16 <_vfiprintf_r+0x176>
 801ff8a:	9105      	str	r1, [sp, #20]
 801ff8c:	e7c3      	b.n	801ff16 <_vfiprintf_r+0x176>
 801ff8e:	fb0c 2101 	mla	r1, ip, r1, r2
 801ff92:	4604      	mov	r4, r0
 801ff94:	2301      	movs	r3, #1
 801ff96:	e7f0      	b.n	801ff7a <_vfiprintf_r+0x1da>
 801ff98:	ab03      	add	r3, sp, #12
 801ff9a:	9300      	str	r3, [sp, #0]
 801ff9c:	462a      	mov	r2, r5
 801ff9e:	4b16      	ldr	r3, [pc, #88]	; (801fff8 <_vfiprintf_r+0x258>)
 801ffa0:	a904      	add	r1, sp, #16
 801ffa2:	4630      	mov	r0, r6
 801ffa4:	f3af 8000 	nop.w
 801ffa8:	4607      	mov	r7, r0
 801ffaa:	1c78      	adds	r0, r7, #1
 801ffac:	d1d6      	bne.n	801ff5c <_vfiprintf_r+0x1bc>
 801ffae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ffb0:	07d9      	lsls	r1, r3, #31
 801ffb2:	d405      	bmi.n	801ffc0 <_vfiprintf_r+0x220>
 801ffb4:	89ab      	ldrh	r3, [r5, #12]
 801ffb6:	059a      	lsls	r2, r3, #22
 801ffb8:	d402      	bmi.n	801ffc0 <_vfiprintf_r+0x220>
 801ffba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ffbc:	f7ff fcae 	bl	801f91c <__retarget_lock_release_recursive>
 801ffc0:	89ab      	ldrh	r3, [r5, #12]
 801ffc2:	065b      	lsls	r3, r3, #25
 801ffc4:	f53f af12 	bmi.w	801fdec <_vfiprintf_r+0x4c>
 801ffc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ffca:	e711      	b.n	801fdf0 <_vfiprintf_r+0x50>
 801ffcc:	ab03      	add	r3, sp, #12
 801ffce:	9300      	str	r3, [sp, #0]
 801ffd0:	462a      	mov	r2, r5
 801ffd2:	4b09      	ldr	r3, [pc, #36]	; (801fff8 <_vfiprintf_r+0x258>)
 801ffd4:	a904      	add	r1, sp, #16
 801ffd6:	4630      	mov	r0, r6
 801ffd8:	f000 f880 	bl	80200dc <_printf_i>
 801ffdc:	e7e4      	b.n	801ffa8 <_vfiprintf_r+0x208>
 801ffde:	bf00      	nop
 801ffe0:	08026f98 	.word	0x08026f98
 801ffe4:	08026fb8 	.word	0x08026fb8
 801ffe8:	08026f78 	.word	0x08026f78
 801ffec:	08026fd8 	.word	0x08026fd8
 801fff0:	08026fe2 	.word	0x08026fe2
 801fff4:	00000000 	.word	0x00000000
 801fff8:	0801fd7b 	.word	0x0801fd7b
 801fffc:	08026fde 	.word	0x08026fde

08020000 <_printf_common>:
 8020000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020004:	4616      	mov	r6, r2
 8020006:	4699      	mov	r9, r3
 8020008:	688a      	ldr	r2, [r1, #8]
 802000a:	690b      	ldr	r3, [r1, #16]
 802000c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020010:	4293      	cmp	r3, r2
 8020012:	bfb8      	it	lt
 8020014:	4613      	movlt	r3, r2
 8020016:	6033      	str	r3, [r6, #0]
 8020018:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802001c:	4607      	mov	r7, r0
 802001e:	460c      	mov	r4, r1
 8020020:	b10a      	cbz	r2, 8020026 <_printf_common+0x26>
 8020022:	3301      	adds	r3, #1
 8020024:	6033      	str	r3, [r6, #0]
 8020026:	6823      	ldr	r3, [r4, #0]
 8020028:	0699      	lsls	r1, r3, #26
 802002a:	bf42      	ittt	mi
 802002c:	6833      	ldrmi	r3, [r6, #0]
 802002e:	3302      	addmi	r3, #2
 8020030:	6033      	strmi	r3, [r6, #0]
 8020032:	6825      	ldr	r5, [r4, #0]
 8020034:	f015 0506 	ands.w	r5, r5, #6
 8020038:	d106      	bne.n	8020048 <_printf_common+0x48>
 802003a:	f104 0a19 	add.w	sl, r4, #25
 802003e:	68e3      	ldr	r3, [r4, #12]
 8020040:	6832      	ldr	r2, [r6, #0]
 8020042:	1a9b      	subs	r3, r3, r2
 8020044:	42ab      	cmp	r3, r5
 8020046:	dc26      	bgt.n	8020096 <_printf_common+0x96>
 8020048:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802004c:	1e13      	subs	r3, r2, #0
 802004e:	6822      	ldr	r2, [r4, #0]
 8020050:	bf18      	it	ne
 8020052:	2301      	movne	r3, #1
 8020054:	0692      	lsls	r2, r2, #26
 8020056:	d42b      	bmi.n	80200b0 <_printf_common+0xb0>
 8020058:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802005c:	4649      	mov	r1, r9
 802005e:	4638      	mov	r0, r7
 8020060:	47c0      	blx	r8
 8020062:	3001      	adds	r0, #1
 8020064:	d01e      	beq.n	80200a4 <_printf_common+0xa4>
 8020066:	6823      	ldr	r3, [r4, #0]
 8020068:	68e5      	ldr	r5, [r4, #12]
 802006a:	6832      	ldr	r2, [r6, #0]
 802006c:	f003 0306 	and.w	r3, r3, #6
 8020070:	2b04      	cmp	r3, #4
 8020072:	bf08      	it	eq
 8020074:	1aad      	subeq	r5, r5, r2
 8020076:	68a3      	ldr	r3, [r4, #8]
 8020078:	6922      	ldr	r2, [r4, #16]
 802007a:	bf0c      	ite	eq
 802007c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020080:	2500      	movne	r5, #0
 8020082:	4293      	cmp	r3, r2
 8020084:	bfc4      	itt	gt
 8020086:	1a9b      	subgt	r3, r3, r2
 8020088:	18ed      	addgt	r5, r5, r3
 802008a:	2600      	movs	r6, #0
 802008c:	341a      	adds	r4, #26
 802008e:	42b5      	cmp	r5, r6
 8020090:	d11a      	bne.n	80200c8 <_printf_common+0xc8>
 8020092:	2000      	movs	r0, #0
 8020094:	e008      	b.n	80200a8 <_printf_common+0xa8>
 8020096:	2301      	movs	r3, #1
 8020098:	4652      	mov	r2, sl
 802009a:	4649      	mov	r1, r9
 802009c:	4638      	mov	r0, r7
 802009e:	47c0      	blx	r8
 80200a0:	3001      	adds	r0, #1
 80200a2:	d103      	bne.n	80200ac <_printf_common+0xac>
 80200a4:	f04f 30ff 	mov.w	r0, #4294967295
 80200a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80200ac:	3501      	adds	r5, #1
 80200ae:	e7c6      	b.n	802003e <_printf_common+0x3e>
 80200b0:	18e1      	adds	r1, r4, r3
 80200b2:	1c5a      	adds	r2, r3, #1
 80200b4:	2030      	movs	r0, #48	; 0x30
 80200b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80200ba:	4422      	add	r2, r4
 80200bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80200c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80200c4:	3302      	adds	r3, #2
 80200c6:	e7c7      	b.n	8020058 <_printf_common+0x58>
 80200c8:	2301      	movs	r3, #1
 80200ca:	4622      	mov	r2, r4
 80200cc:	4649      	mov	r1, r9
 80200ce:	4638      	mov	r0, r7
 80200d0:	47c0      	blx	r8
 80200d2:	3001      	adds	r0, #1
 80200d4:	d0e6      	beq.n	80200a4 <_printf_common+0xa4>
 80200d6:	3601      	adds	r6, #1
 80200d8:	e7d9      	b.n	802008e <_printf_common+0x8e>
	...

080200dc <_printf_i>:
 80200dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80200e0:	460c      	mov	r4, r1
 80200e2:	4691      	mov	r9, r2
 80200e4:	7e27      	ldrb	r7, [r4, #24]
 80200e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80200e8:	2f78      	cmp	r7, #120	; 0x78
 80200ea:	4680      	mov	r8, r0
 80200ec:	469a      	mov	sl, r3
 80200ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80200f2:	d807      	bhi.n	8020104 <_printf_i+0x28>
 80200f4:	2f62      	cmp	r7, #98	; 0x62
 80200f6:	d80a      	bhi.n	802010e <_printf_i+0x32>
 80200f8:	2f00      	cmp	r7, #0
 80200fa:	f000 80d8 	beq.w	80202ae <_printf_i+0x1d2>
 80200fe:	2f58      	cmp	r7, #88	; 0x58
 8020100:	f000 80a3 	beq.w	802024a <_printf_i+0x16e>
 8020104:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020108:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802010c:	e03a      	b.n	8020184 <_printf_i+0xa8>
 802010e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8020112:	2b15      	cmp	r3, #21
 8020114:	d8f6      	bhi.n	8020104 <_printf_i+0x28>
 8020116:	a001      	add	r0, pc, #4	; (adr r0, 802011c <_printf_i+0x40>)
 8020118:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802011c:	08020175 	.word	0x08020175
 8020120:	08020189 	.word	0x08020189
 8020124:	08020105 	.word	0x08020105
 8020128:	08020105 	.word	0x08020105
 802012c:	08020105 	.word	0x08020105
 8020130:	08020105 	.word	0x08020105
 8020134:	08020189 	.word	0x08020189
 8020138:	08020105 	.word	0x08020105
 802013c:	08020105 	.word	0x08020105
 8020140:	08020105 	.word	0x08020105
 8020144:	08020105 	.word	0x08020105
 8020148:	08020295 	.word	0x08020295
 802014c:	080201b9 	.word	0x080201b9
 8020150:	08020277 	.word	0x08020277
 8020154:	08020105 	.word	0x08020105
 8020158:	08020105 	.word	0x08020105
 802015c:	080202b7 	.word	0x080202b7
 8020160:	08020105 	.word	0x08020105
 8020164:	080201b9 	.word	0x080201b9
 8020168:	08020105 	.word	0x08020105
 802016c:	08020105 	.word	0x08020105
 8020170:	0802027f 	.word	0x0802027f
 8020174:	680b      	ldr	r3, [r1, #0]
 8020176:	1d1a      	adds	r2, r3, #4
 8020178:	681b      	ldr	r3, [r3, #0]
 802017a:	600a      	str	r2, [r1, #0]
 802017c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020184:	2301      	movs	r3, #1
 8020186:	e0a3      	b.n	80202d0 <_printf_i+0x1f4>
 8020188:	6825      	ldr	r5, [r4, #0]
 802018a:	6808      	ldr	r0, [r1, #0]
 802018c:	062e      	lsls	r6, r5, #24
 802018e:	f100 0304 	add.w	r3, r0, #4
 8020192:	d50a      	bpl.n	80201aa <_printf_i+0xce>
 8020194:	6805      	ldr	r5, [r0, #0]
 8020196:	600b      	str	r3, [r1, #0]
 8020198:	2d00      	cmp	r5, #0
 802019a:	da03      	bge.n	80201a4 <_printf_i+0xc8>
 802019c:	232d      	movs	r3, #45	; 0x2d
 802019e:	426d      	negs	r5, r5
 80201a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80201a4:	485e      	ldr	r0, [pc, #376]	; (8020320 <_printf_i+0x244>)
 80201a6:	230a      	movs	r3, #10
 80201a8:	e019      	b.n	80201de <_printf_i+0x102>
 80201aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80201ae:	6805      	ldr	r5, [r0, #0]
 80201b0:	600b      	str	r3, [r1, #0]
 80201b2:	bf18      	it	ne
 80201b4:	b22d      	sxthne	r5, r5
 80201b6:	e7ef      	b.n	8020198 <_printf_i+0xbc>
 80201b8:	680b      	ldr	r3, [r1, #0]
 80201ba:	6825      	ldr	r5, [r4, #0]
 80201bc:	1d18      	adds	r0, r3, #4
 80201be:	6008      	str	r0, [r1, #0]
 80201c0:	0628      	lsls	r0, r5, #24
 80201c2:	d501      	bpl.n	80201c8 <_printf_i+0xec>
 80201c4:	681d      	ldr	r5, [r3, #0]
 80201c6:	e002      	b.n	80201ce <_printf_i+0xf2>
 80201c8:	0669      	lsls	r1, r5, #25
 80201ca:	d5fb      	bpl.n	80201c4 <_printf_i+0xe8>
 80201cc:	881d      	ldrh	r5, [r3, #0]
 80201ce:	4854      	ldr	r0, [pc, #336]	; (8020320 <_printf_i+0x244>)
 80201d0:	2f6f      	cmp	r7, #111	; 0x6f
 80201d2:	bf0c      	ite	eq
 80201d4:	2308      	moveq	r3, #8
 80201d6:	230a      	movne	r3, #10
 80201d8:	2100      	movs	r1, #0
 80201da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80201de:	6866      	ldr	r6, [r4, #4]
 80201e0:	60a6      	str	r6, [r4, #8]
 80201e2:	2e00      	cmp	r6, #0
 80201e4:	bfa2      	ittt	ge
 80201e6:	6821      	ldrge	r1, [r4, #0]
 80201e8:	f021 0104 	bicge.w	r1, r1, #4
 80201ec:	6021      	strge	r1, [r4, #0]
 80201ee:	b90d      	cbnz	r5, 80201f4 <_printf_i+0x118>
 80201f0:	2e00      	cmp	r6, #0
 80201f2:	d04d      	beq.n	8020290 <_printf_i+0x1b4>
 80201f4:	4616      	mov	r6, r2
 80201f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80201fa:	fb03 5711 	mls	r7, r3, r1, r5
 80201fe:	5dc7      	ldrb	r7, [r0, r7]
 8020200:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020204:	462f      	mov	r7, r5
 8020206:	42bb      	cmp	r3, r7
 8020208:	460d      	mov	r5, r1
 802020a:	d9f4      	bls.n	80201f6 <_printf_i+0x11a>
 802020c:	2b08      	cmp	r3, #8
 802020e:	d10b      	bne.n	8020228 <_printf_i+0x14c>
 8020210:	6823      	ldr	r3, [r4, #0]
 8020212:	07df      	lsls	r7, r3, #31
 8020214:	d508      	bpl.n	8020228 <_printf_i+0x14c>
 8020216:	6923      	ldr	r3, [r4, #16]
 8020218:	6861      	ldr	r1, [r4, #4]
 802021a:	4299      	cmp	r1, r3
 802021c:	bfde      	ittt	le
 802021e:	2330      	movle	r3, #48	; 0x30
 8020220:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020224:	f106 36ff 	addle.w	r6, r6, #4294967295
 8020228:	1b92      	subs	r2, r2, r6
 802022a:	6122      	str	r2, [r4, #16]
 802022c:	f8cd a000 	str.w	sl, [sp]
 8020230:	464b      	mov	r3, r9
 8020232:	aa03      	add	r2, sp, #12
 8020234:	4621      	mov	r1, r4
 8020236:	4640      	mov	r0, r8
 8020238:	f7ff fee2 	bl	8020000 <_printf_common>
 802023c:	3001      	adds	r0, #1
 802023e:	d14c      	bne.n	80202da <_printf_i+0x1fe>
 8020240:	f04f 30ff 	mov.w	r0, #4294967295
 8020244:	b004      	add	sp, #16
 8020246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802024a:	4835      	ldr	r0, [pc, #212]	; (8020320 <_printf_i+0x244>)
 802024c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8020250:	6823      	ldr	r3, [r4, #0]
 8020252:	680e      	ldr	r6, [r1, #0]
 8020254:	061f      	lsls	r7, r3, #24
 8020256:	f856 5b04 	ldr.w	r5, [r6], #4
 802025a:	600e      	str	r6, [r1, #0]
 802025c:	d514      	bpl.n	8020288 <_printf_i+0x1ac>
 802025e:	07d9      	lsls	r1, r3, #31
 8020260:	bf44      	itt	mi
 8020262:	f043 0320 	orrmi.w	r3, r3, #32
 8020266:	6023      	strmi	r3, [r4, #0]
 8020268:	b91d      	cbnz	r5, 8020272 <_printf_i+0x196>
 802026a:	6823      	ldr	r3, [r4, #0]
 802026c:	f023 0320 	bic.w	r3, r3, #32
 8020270:	6023      	str	r3, [r4, #0]
 8020272:	2310      	movs	r3, #16
 8020274:	e7b0      	b.n	80201d8 <_printf_i+0xfc>
 8020276:	6823      	ldr	r3, [r4, #0]
 8020278:	f043 0320 	orr.w	r3, r3, #32
 802027c:	6023      	str	r3, [r4, #0]
 802027e:	2378      	movs	r3, #120	; 0x78
 8020280:	4828      	ldr	r0, [pc, #160]	; (8020324 <_printf_i+0x248>)
 8020282:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020286:	e7e3      	b.n	8020250 <_printf_i+0x174>
 8020288:	065e      	lsls	r6, r3, #25
 802028a:	bf48      	it	mi
 802028c:	b2ad      	uxthmi	r5, r5
 802028e:	e7e6      	b.n	802025e <_printf_i+0x182>
 8020290:	4616      	mov	r6, r2
 8020292:	e7bb      	b.n	802020c <_printf_i+0x130>
 8020294:	680b      	ldr	r3, [r1, #0]
 8020296:	6826      	ldr	r6, [r4, #0]
 8020298:	6960      	ldr	r0, [r4, #20]
 802029a:	1d1d      	adds	r5, r3, #4
 802029c:	600d      	str	r5, [r1, #0]
 802029e:	0635      	lsls	r5, r6, #24
 80202a0:	681b      	ldr	r3, [r3, #0]
 80202a2:	d501      	bpl.n	80202a8 <_printf_i+0x1cc>
 80202a4:	6018      	str	r0, [r3, #0]
 80202a6:	e002      	b.n	80202ae <_printf_i+0x1d2>
 80202a8:	0671      	lsls	r1, r6, #25
 80202aa:	d5fb      	bpl.n	80202a4 <_printf_i+0x1c8>
 80202ac:	8018      	strh	r0, [r3, #0]
 80202ae:	2300      	movs	r3, #0
 80202b0:	6123      	str	r3, [r4, #16]
 80202b2:	4616      	mov	r6, r2
 80202b4:	e7ba      	b.n	802022c <_printf_i+0x150>
 80202b6:	680b      	ldr	r3, [r1, #0]
 80202b8:	1d1a      	adds	r2, r3, #4
 80202ba:	600a      	str	r2, [r1, #0]
 80202bc:	681e      	ldr	r6, [r3, #0]
 80202be:	6862      	ldr	r2, [r4, #4]
 80202c0:	2100      	movs	r1, #0
 80202c2:	4630      	mov	r0, r6
 80202c4:	f7df ff9c 	bl	8000200 <memchr>
 80202c8:	b108      	cbz	r0, 80202ce <_printf_i+0x1f2>
 80202ca:	1b80      	subs	r0, r0, r6
 80202cc:	6060      	str	r0, [r4, #4]
 80202ce:	6863      	ldr	r3, [r4, #4]
 80202d0:	6123      	str	r3, [r4, #16]
 80202d2:	2300      	movs	r3, #0
 80202d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80202d8:	e7a8      	b.n	802022c <_printf_i+0x150>
 80202da:	6923      	ldr	r3, [r4, #16]
 80202dc:	4632      	mov	r2, r6
 80202de:	4649      	mov	r1, r9
 80202e0:	4640      	mov	r0, r8
 80202e2:	47d0      	blx	sl
 80202e4:	3001      	adds	r0, #1
 80202e6:	d0ab      	beq.n	8020240 <_printf_i+0x164>
 80202e8:	6823      	ldr	r3, [r4, #0]
 80202ea:	079b      	lsls	r3, r3, #30
 80202ec:	d413      	bmi.n	8020316 <_printf_i+0x23a>
 80202ee:	68e0      	ldr	r0, [r4, #12]
 80202f0:	9b03      	ldr	r3, [sp, #12]
 80202f2:	4298      	cmp	r0, r3
 80202f4:	bfb8      	it	lt
 80202f6:	4618      	movlt	r0, r3
 80202f8:	e7a4      	b.n	8020244 <_printf_i+0x168>
 80202fa:	2301      	movs	r3, #1
 80202fc:	4632      	mov	r2, r6
 80202fe:	4649      	mov	r1, r9
 8020300:	4640      	mov	r0, r8
 8020302:	47d0      	blx	sl
 8020304:	3001      	adds	r0, #1
 8020306:	d09b      	beq.n	8020240 <_printf_i+0x164>
 8020308:	3501      	adds	r5, #1
 802030a:	68e3      	ldr	r3, [r4, #12]
 802030c:	9903      	ldr	r1, [sp, #12]
 802030e:	1a5b      	subs	r3, r3, r1
 8020310:	42ab      	cmp	r3, r5
 8020312:	dcf2      	bgt.n	80202fa <_printf_i+0x21e>
 8020314:	e7eb      	b.n	80202ee <_printf_i+0x212>
 8020316:	2500      	movs	r5, #0
 8020318:	f104 0619 	add.w	r6, r4, #25
 802031c:	e7f5      	b.n	802030a <_printf_i+0x22e>
 802031e:	bf00      	nop
 8020320:	08026fe9 	.word	0x08026fe9
 8020324:	08026ffa 	.word	0x08026ffa

08020328 <_sbrk_r>:
 8020328:	b538      	push	{r3, r4, r5, lr}
 802032a:	4d06      	ldr	r5, [pc, #24]	; (8020344 <_sbrk_r+0x1c>)
 802032c:	2300      	movs	r3, #0
 802032e:	4604      	mov	r4, r0
 8020330:	4608      	mov	r0, r1
 8020332:	602b      	str	r3, [r5, #0]
 8020334:	f7e3 f9be 	bl	80036b4 <_sbrk>
 8020338:	1c43      	adds	r3, r0, #1
 802033a:	d102      	bne.n	8020342 <_sbrk_r+0x1a>
 802033c:	682b      	ldr	r3, [r5, #0]
 802033e:	b103      	cbz	r3, 8020342 <_sbrk_r+0x1a>
 8020340:	6023      	str	r3, [r4, #0]
 8020342:	bd38      	pop	{r3, r4, r5, pc}
 8020344:	2000b7b8 	.word	0x2000b7b8

08020348 <siscanf>:
 8020348:	b40e      	push	{r1, r2, r3}
 802034a:	b510      	push	{r4, lr}
 802034c:	b09f      	sub	sp, #124	; 0x7c
 802034e:	ac21      	add	r4, sp, #132	; 0x84
 8020350:	f44f 7101 	mov.w	r1, #516	; 0x204
 8020354:	f854 2b04 	ldr.w	r2, [r4], #4
 8020358:	9201      	str	r2, [sp, #4]
 802035a:	f8ad 101c 	strh.w	r1, [sp, #28]
 802035e:	9004      	str	r0, [sp, #16]
 8020360:	9008      	str	r0, [sp, #32]
 8020362:	f7df ff3f 	bl	80001e4 <strlen>
 8020366:	4b0c      	ldr	r3, [pc, #48]	; (8020398 <siscanf+0x50>)
 8020368:	9005      	str	r0, [sp, #20]
 802036a:	9009      	str	r0, [sp, #36]	; 0x24
 802036c:	930d      	str	r3, [sp, #52]	; 0x34
 802036e:	480b      	ldr	r0, [pc, #44]	; (802039c <siscanf+0x54>)
 8020370:	9a01      	ldr	r2, [sp, #4]
 8020372:	6800      	ldr	r0, [r0, #0]
 8020374:	9403      	str	r4, [sp, #12]
 8020376:	2300      	movs	r3, #0
 8020378:	9311      	str	r3, [sp, #68]	; 0x44
 802037a:	9316      	str	r3, [sp, #88]	; 0x58
 802037c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020380:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020384:	a904      	add	r1, sp, #16
 8020386:	4623      	mov	r3, r4
 8020388:	f000 fb9a 	bl	8020ac0 <__ssvfiscanf_r>
 802038c:	b01f      	add	sp, #124	; 0x7c
 802038e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020392:	b003      	add	sp, #12
 8020394:	4770      	bx	lr
 8020396:	bf00      	nop
 8020398:	080203c3 	.word	0x080203c3
 802039c:	200001ac 	.word	0x200001ac

080203a0 <__sread>:
 80203a0:	b510      	push	{r4, lr}
 80203a2:	460c      	mov	r4, r1
 80203a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80203a8:	f000 fe4e 	bl	8021048 <_read_r>
 80203ac:	2800      	cmp	r0, #0
 80203ae:	bfab      	itete	ge
 80203b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80203b2:	89a3      	ldrhlt	r3, [r4, #12]
 80203b4:	181b      	addge	r3, r3, r0
 80203b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80203ba:	bfac      	ite	ge
 80203bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80203be:	81a3      	strhlt	r3, [r4, #12]
 80203c0:	bd10      	pop	{r4, pc}

080203c2 <__seofread>:
 80203c2:	2000      	movs	r0, #0
 80203c4:	4770      	bx	lr

080203c6 <__swrite>:
 80203c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80203ca:	461f      	mov	r7, r3
 80203cc:	898b      	ldrh	r3, [r1, #12]
 80203ce:	05db      	lsls	r3, r3, #23
 80203d0:	4605      	mov	r5, r0
 80203d2:	460c      	mov	r4, r1
 80203d4:	4616      	mov	r6, r2
 80203d6:	d505      	bpl.n	80203e4 <__swrite+0x1e>
 80203d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80203dc:	2302      	movs	r3, #2
 80203de:	2200      	movs	r2, #0
 80203e0:	f000 fa6c 	bl	80208bc <_lseek_r>
 80203e4:	89a3      	ldrh	r3, [r4, #12]
 80203e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80203ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80203ee:	81a3      	strh	r3, [r4, #12]
 80203f0:	4632      	mov	r2, r6
 80203f2:	463b      	mov	r3, r7
 80203f4:	4628      	mov	r0, r5
 80203f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80203fa:	f000 b8f9 	b.w	80205f0 <_write_r>

080203fe <__sseek>:
 80203fe:	b510      	push	{r4, lr}
 8020400:	460c      	mov	r4, r1
 8020402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020406:	f000 fa59 	bl	80208bc <_lseek_r>
 802040a:	1c43      	adds	r3, r0, #1
 802040c:	89a3      	ldrh	r3, [r4, #12]
 802040e:	bf15      	itete	ne
 8020410:	6560      	strne	r0, [r4, #84]	; 0x54
 8020412:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020416:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802041a:	81a3      	strheq	r3, [r4, #12]
 802041c:	bf18      	it	ne
 802041e:	81a3      	strhne	r3, [r4, #12]
 8020420:	bd10      	pop	{r4, pc}

08020422 <__sclose>:
 8020422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020426:	f000 b96b 	b.w	8020700 <_close_r>

0802042a <strcpy>:
 802042a:	4603      	mov	r3, r0
 802042c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020430:	f803 2b01 	strb.w	r2, [r3], #1
 8020434:	2a00      	cmp	r2, #0
 8020436:	d1f9      	bne.n	802042c <strcpy+0x2>
 8020438:	4770      	bx	lr
	...

0802043c <_strtoul_l.isra.0>:
 802043c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020440:	4e3b      	ldr	r6, [pc, #236]	; (8020530 <_strtoul_l.isra.0+0xf4>)
 8020442:	4686      	mov	lr, r0
 8020444:	468c      	mov	ip, r1
 8020446:	4660      	mov	r0, ip
 8020448:	f81c 4b01 	ldrb.w	r4, [ip], #1
 802044c:	5da5      	ldrb	r5, [r4, r6]
 802044e:	f015 0508 	ands.w	r5, r5, #8
 8020452:	d1f8      	bne.n	8020446 <_strtoul_l.isra.0+0xa>
 8020454:	2c2d      	cmp	r4, #45	; 0x2d
 8020456:	d134      	bne.n	80204c2 <_strtoul_l.isra.0+0x86>
 8020458:	f89c 4000 	ldrb.w	r4, [ip]
 802045c:	f04f 0801 	mov.w	r8, #1
 8020460:	f100 0c02 	add.w	ip, r0, #2
 8020464:	2b00      	cmp	r3, #0
 8020466:	d05e      	beq.n	8020526 <_strtoul_l.isra.0+0xea>
 8020468:	2b10      	cmp	r3, #16
 802046a:	d10c      	bne.n	8020486 <_strtoul_l.isra.0+0x4a>
 802046c:	2c30      	cmp	r4, #48	; 0x30
 802046e:	d10a      	bne.n	8020486 <_strtoul_l.isra.0+0x4a>
 8020470:	f89c 0000 	ldrb.w	r0, [ip]
 8020474:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8020478:	2858      	cmp	r0, #88	; 0x58
 802047a:	d14f      	bne.n	802051c <_strtoul_l.isra.0+0xe0>
 802047c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8020480:	2310      	movs	r3, #16
 8020482:	f10c 0c02 	add.w	ip, ip, #2
 8020486:	f04f 37ff 	mov.w	r7, #4294967295
 802048a:	2500      	movs	r5, #0
 802048c:	fbb7 f7f3 	udiv	r7, r7, r3
 8020490:	fb03 f907 	mul.w	r9, r3, r7
 8020494:	ea6f 0909 	mvn.w	r9, r9
 8020498:	4628      	mov	r0, r5
 802049a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 802049e:	2e09      	cmp	r6, #9
 80204a0:	d818      	bhi.n	80204d4 <_strtoul_l.isra.0+0x98>
 80204a2:	4634      	mov	r4, r6
 80204a4:	42a3      	cmp	r3, r4
 80204a6:	dd24      	ble.n	80204f2 <_strtoul_l.isra.0+0xb6>
 80204a8:	2d00      	cmp	r5, #0
 80204aa:	db1f      	blt.n	80204ec <_strtoul_l.isra.0+0xb0>
 80204ac:	4287      	cmp	r7, r0
 80204ae:	d31d      	bcc.n	80204ec <_strtoul_l.isra.0+0xb0>
 80204b0:	d101      	bne.n	80204b6 <_strtoul_l.isra.0+0x7a>
 80204b2:	45a1      	cmp	r9, r4
 80204b4:	db1a      	blt.n	80204ec <_strtoul_l.isra.0+0xb0>
 80204b6:	fb00 4003 	mla	r0, r0, r3, r4
 80204ba:	2501      	movs	r5, #1
 80204bc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80204c0:	e7eb      	b.n	802049a <_strtoul_l.isra.0+0x5e>
 80204c2:	2c2b      	cmp	r4, #43	; 0x2b
 80204c4:	bf08      	it	eq
 80204c6:	f89c 4000 	ldrbeq.w	r4, [ip]
 80204ca:	46a8      	mov	r8, r5
 80204cc:	bf08      	it	eq
 80204ce:	f100 0c02 	addeq.w	ip, r0, #2
 80204d2:	e7c7      	b.n	8020464 <_strtoul_l.isra.0+0x28>
 80204d4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80204d8:	2e19      	cmp	r6, #25
 80204da:	d801      	bhi.n	80204e0 <_strtoul_l.isra.0+0xa4>
 80204dc:	3c37      	subs	r4, #55	; 0x37
 80204de:	e7e1      	b.n	80204a4 <_strtoul_l.isra.0+0x68>
 80204e0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80204e4:	2e19      	cmp	r6, #25
 80204e6:	d804      	bhi.n	80204f2 <_strtoul_l.isra.0+0xb6>
 80204e8:	3c57      	subs	r4, #87	; 0x57
 80204ea:	e7db      	b.n	80204a4 <_strtoul_l.isra.0+0x68>
 80204ec:	f04f 35ff 	mov.w	r5, #4294967295
 80204f0:	e7e4      	b.n	80204bc <_strtoul_l.isra.0+0x80>
 80204f2:	2d00      	cmp	r5, #0
 80204f4:	da07      	bge.n	8020506 <_strtoul_l.isra.0+0xca>
 80204f6:	2322      	movs	r3, #34	; 0x22
 80204f8:	f8ce 3000 	str.w	r3, [lr]
 80204fc:	f04f 30ff 	mov.w	r0, #4294967295
 8020500:	b942      	cbnz	r2, 8020514 <_strtoul_l.isra.0+0xd8>
 8020502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020506:	f1b8 0f00 	cmp.w	r8, #0
 802050a:	d000      	beq.n	802050e <_strtoul_l.isra.0+0xd2>
 802050c:	4240      	negs	r0, r0
 802050e:	2a00      	cmp	r2, #0
 8020510:	d0f7      	beq.n	8020502 <_strtoul_l.isra.0+0xc6>
 8020512:	b10d      	cbz	r5, 8020518 <_strtoul_l.isra.0+0xdc>
 8020514:	f10c 31ff 	add.w	r1, ip, #4294967295
 8020518:	6011      	str	r1, [r2, #0]
 802051a:	e7f2      	b.n	8020502 <_strtoul_l.isra.0+0xc6>
 802051c:	2430      	movs	r4, #48	; 0x30
 802051e:	2b00      	cmp	r3, #0
 8020520:	d1b1      	bne.n	8020486 <_strtoul_l.isra.0+0x4a>
 8020522:	2308      	movs	r3, #8
 8020524:	e7af      	b.n	8020486 <_strtoul_l.isra.0+0x4a>
 8020526:	2c30      	cmp	r4, #48	; 0x30
 8020528:	d0a2      	beq.n	8020470 <_strtoul_l.isra.0+0x34>
 802052a:	230a      	movs	r3, #10
 802052c:	e7ab      	b.n	8020486 <_strtoul_l.isra.0+0x4a>
 802052e:	bf00      	nop
 8020530:	08026cc1 	.word	0x08026cc1

08020534 <_strtoul_r>:
 8020534:	f7ff bf82 	b.w	802043c <_strtoul_l.isra.0>

08020538 <strtoul>:
 8020538:	4613      	mov	r3, r2
 802053a:	460a      	mov	r2, r1
 802053c:	4601      	mov	r1, r0
 802053e:	4802      	ldr	r0, [pc, #8]	; (8020548 <strtoul+0x10>)
 8020540:	6800      	ldr	r0, [r0, #0]
 8020542:	f7ff bf7b 	b.w	802043c <_strtoul_l.isra.0>
 8020546:	bf00      	nop
 8020548:	200001ac 	.word	0x200001ac

0802054c <__swbuf_r>:
 802054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802054e:	460e      	mov	r6, r1
 8020550:	4614      	mov	r4, r2
 8020552:	4605      	mov	r5, r0
 8020554:	b118      	cbz	r0, 802055e <__swbuf_r+0x12>
 8020556:	6983      	ldr	r3, [r0, #24]
 8020558:	b90b      	cbnz	r3, 802055e <__swbuf_r+0x12>
 802055a:	f7ff f835 	bl	801f5c8 <__sinit>
 802055e:	4b21      	ldr	r3, [pc, #132]	; (80205e4 <__swbuf_r+0x98>)
 8020560:	429c      	cmp	r4, r3
 8020562:	d12b      	bne.n	80205bc <__swbuf_r+0x70>
 8020564:	686c      	ldr	r4, [r5, #4]
 8020566:	69a3      	ldr	r3, [r4, #24]
 8020568:	60a3      	str	r3, [r4, #8]
 802056a:	89a3      	ldrh	r3, [r4, #12]
 802056c:	071a      	lsls	r2, r3, #28
 802056e:	d52f      	bpl.n	80205d0 <__swbuf_r+0x84>
 8020570:	6923      	ldr	r3, [r4, #16]
 8020572:	b36b      	cbz	r3, 80205d0 <__swbuf_r+0x84>
 8020574:	6923      	ldr	r3, [r4, #16]
 8020576:	6820      	ldr	r0, [r4, #0]
 8020578:	1ac0      	subs	r0, r0, r3
 802057a:	6963      	ldr	r3, [r4, #20]
 802057c:	b2f6      	uxtb	r6, r6
 802057e:	4283      	cmp	r3, r0
 8020580:	4637      	mov	r7, r6
 8020582:	dc04      	bgt.n	802058e <__swbuf_r+0x42>
 8020584:	4621      	mov	r1, r4
 8020586:	4628      	mov	r0, r5
 8020588:	f000 f95c 	bl	8020844 <_fflush_r>
 802058c:	bb30      	cbnz	r0, 80205dc <__swbuf_r+0x90>
 802058e:	68a3      	ldr	r3, [r4, #8]
 8020590:	3b01      	subs	r3, #1
 8020592:	60a3      	str	r3, [r4, #8]
 8020594:	6823      	ldr	r3, [r4, #0]
 8020596:	1c5a      	adds	r2, r3, #1
 8020598:	6022      	str	r2, [r4, #0]
 802059a:	701e      	strb	r6, [r3, #0]
 802059c:	6963      	ldr	r3, [r4, #20]
 802059e:	3001      	adds	r0, #1
 80205a0:	4283      	cmp	r3, r0
 80205a2:	d004      	beq.n	80205ae <__swbuf_r+0x62>
 80205a4:	89a3      	ldrh	r3, [r4, #12]
 80205a6:	07db      	lsls	r3, r3, #31
 80205a8:	d506      	bpl.n	80205b8 <__swbuf_r+0x6c>
 80205aa:	2e0a      	cmp	r6, #10
 80205ac:	d104      	bne.n	80205b8 <__swbuf_r+0x6c>
 80205ae:	4621      	mov	r1, r4
 80205b0:	4628      	mov	r0, r5
 80205b2:	f000 f947 	bl	8020844 <_fflush_r>
 80205b6:	b988      	cbnz	r0, 80205dc <__swbuf_r+0x90>
 80205b8:	4638      	mov	r0, r7
 80205ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80205bc:	4b0a      	ldr	r3, [pc, #40]	; (80205e8 <__swbuf_r+0x9c>)
 80205be:	429c      	cmp	r4, r3
 80205c0:	d101      	bne.n	80205c6 <__swbuf_r+0x7a>
 80205c2:	68ac      	ldr	r4, [r5, #8]
 80205c4:	e7cf      	b.n	8020566 <__swbuf_r+0x1a>
 80205c6:	4b09      	ldr	r3, [pc, #36]	; (80205ec <__swbuf_r+0xa0>)
 80205c8:	429c      	cmp	r4, r3
 80205ca:	bf08      	it	eq
 80205cc:	68ec      	ldreq	r4, [r5, #12]
 80205ce:	e7ca      	b.n	8020566 <__swbuf_r+0x1a>
 80205d0:	4621      	mov	r1, r4
 80205d2:	4628      	mov	r0, r5
 80205d4:	f000 f81e 	bl	8020614 <__swsetup_r>
 80205d8:	2800      	cmp	r0, #0
 80205da:	d0cb      	beq.n	8020574 <__swbuf_r+0x28>
 80205dc:	f04f 37ff 	mov.w	r7, #4294967295
 80205e0:	e7ea      	b.n	80205b8 <__swbuf_r+0x6c>
 80205e2:	bf00      	nop
 80205e4:	08026f98 	.word	0x08026f98
 80205e8:	08026fb8 	.word	0x08026fb8
 80205ec:	08026f78 	.word	0x08026f78

080205f0 <_write_r>:
 80205f0:	b538      	push	{r3, r4, r5, lr}
 80205f2:	4d07      	ldr	r5, [pc, #28]	; (8020610 <_write_r+0x20>)
 80205f4:	4604      	mov	r4, r0
 80205f6:	4608      	mov	r0, r1
 80205f8:	4611      	mov	r1, r2
 80205fa:	2200      	movs	r2, #0
 80205fc:	602a      	str	r2, [r5, #0]
 80205fe:	461a      	mov	r2, r3
 8020600:	f7e3 f807 	bl	8003612 <_write>
 8020604:	1c43      	adds	r3, r0, #1
 8020606:	d102      	bne.n	802060e <_write_r+0x1e>
 8020608:	682b      	ldr	r3, [r5, #0]
 802060a:	b103      	cbz	r3, 802060e <_write_r+0x1e>
 802060c:	6023      	str	r3, [r4, #0]
 802060e:	bd38      	pop	{r3, r4, r5, pc}
 8020610:	2000b7b8 	.word	0x2000b7b8

08020614 <__swsetup_r>:
 8020614:	4b32      	ldr	r3, [pc, #200]	; (80206e0 <__swsetup_r+0xcc>)
 8020616:	b570      	push	{r4, r5, r6, lr}
 8020618:	681d      	ldr	r5, [r3, #0]
 802061a:	4606      	mov	r6, r0
 802061c:	460c      	mov	r4, r1
 802061e:	b125      	cbz	r5, 802062a <__swsetup_r+0x16>
 8020620:	69ab      	ldr	r3, [r5, #24]
 8020622:	b913      	cbnz	r3, 802062a <__swsetup_r+0x16>
 8020624:	4628      	mov	r0, r5
 8020626:	f7fe ffcf 	bl	801f5c8 <__sinit>
 802062a:	4b2e      	ldr	r3, [pc, #184]	; (80206e4 <__swsetup_r+0xd0>)
 802062c:	429c      	cmp	r4, r3
 802062e:	d10f      	bne.n	8020650 <__swsetup_r+0x3c>
 8020630:	686c      	ldr	r4, [r5, #4]
 8020632:	89a3      	ldrh	r3, [r4, #12]
 8020634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020638:	0719      	lsls	r1, r3, #28
 802063a:	d42c      	bmi.n	8020696 <__swsetup_r+0x82>
 802063c:	06dd      	lsls	r5, r3, #27
 802063e:	d411      	bmi.n	8020664 <__swsetup_r+0x50>
 8020640:	2309      	movs	r3, #9
 8020642:	6033      	str	r3, [r6, #0]
 8020644:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020648:	81a3      	strh	r3, [r4, #12]
 802064a:	f04f 30ff 	mov.w	r0, #4294967295
 802064e:	e03e      	b.n	80206ce <__swsetup_r+0xba>
 8020650:	4b25      	ldr	r3, [pc, #148]	; (80206e8 <__swsetup_r+0xd4>)
 8020652:	429c      	cmp	r4, r3
 8020654:	d101      	bne.n	802065a <__swsetup_r+0x46>
 8020656:	68ac      	ldr	r4, [r5, #8]
 8020658:	e7eb      	b.n	8020632 <__swsetup_r+0x1e>
 802065a:	4b24      	ldr	r3, [pc, #144]	; (80206ec <__swsetup_r+0xd8>)
 802065c:	429c      	cmp	r4, r3
 802065e:	bf08      	it	eq
 8020660:	68ec      	ldreq	r4, [r5, #12]
 8020662:	e7e6      	b.n	8020632 <__swsetup_r+0x1e>
 8020664:	0758      	lsls	r0, r3, #29
 8020666:	d512      	bpl.n	802068e <__swsetup_r+0x7a>
 8020668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802066a:	b141      	cbz	r1, 802067e <__swsetup_r+0x6a>
 802066c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020670:	4299      	cmp	r1, r3
 8020672:	d002      	beq.n	802067a <__swsetup_r+0x66>
 8020674:	4630      	mov	r0, r6
 8020676:	f7ff f963 	bl	801f940 <_free_r>
 802067a:	2300      	movs	r3, #0
 802067c:	6363      	str	r3, [r4, #52]	; 0x34
 802067e:	89a3      	ldrh	r3, [r4, #12]
 8020680:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020684:	81a3      	strh	r3, [r4, #12]
 8020686:	2300      	movs	r3, #0
 8020688:	6063      	str	r3, [r4, #4]
 802068a:	6923      	ldr	r3, [r4, #16]
 802068c:	6023      	str	r3, [r4, #0]
 802068e:	89a3      	ldrh	r3, [r4, #12]
 8020690:	f043 0308 	orr.w	r3, r3, #8
 8020694:	81a3      	strh	r3, [r4, #12]
 8020696:	6923      	ldr	r3, [r4, #16]
 8020698:	b94b      	cbnz	r3, 80206ae <__swsetup_r+0x9a>
 802069a:	89a3      	ldrh	r3, [r4, #12]
 802069c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80206a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80206a4:	d003      	beq.n	80206ae <__swsetup_r+0x9a>
 80206a6:	4621      	mov	r1, r4
 80206a8:	4630      	mov	r0, r6
 80206aa:	f000 f93d 	bl	8020928 <__smakebuf_r>
 80206ae:	89a0      	ldrh	r0, [r4, #12]
 80206b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80206b4:	f010 0301 	ands.w	r3, r0, #1
 80206b8:	d00a      	beq.n	80206d0 <__swsetup_r+0xbc>
 80206ba:	2300      	movs	r3, #0
 80206bc:	60a3      	str	r3, [r4, #8]
 80206be:	6963      	ldr	r3, [r4, #20]
 80206c0:	425b      	negs	r3, r3
 80206c2:	61a3      	str	r3, [r4, #24]
 80206c4:	6923      	ldr	r3, [r4, #16]
 80206c6:	b943      	cbnz	r3, 80206da <__swsetup_r+0xc6>
 80206c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80206cc:	d1ba      	bne.n	8020644 <__swsetup_r+0x30>
 80206ce:	bd70      	pop	{r4, r5, r6, pc}
 80206d0:	0781      	lsls	r1, r0, #30
 80206d2:	bf58      	it	pl
 80206d4:	6963      	ldrpl	r3, [r4, #20]
 80206d6:	60a3      	str	r3, [r4, #8]
 80206d8:	e7f4      	b.n	80206c4 <__swsetup_r+0xb0>
 80206da:	2000      	movs	r0, #0
 80206dc:	e7f7      	b.n	80206ce <__swsetup_r+0xba>
 80206de:	bf00      	nop
 80206e0:	200001ac 	.word	0x200001ac
 80206e4:	08026f98 	.word	0x08026f98
 80206e8:	08026fb8 	.word	0x08026fb8
 80206ec:	08026f78 	.word	0x08026f78

080206f0 <abort>:
 80206f0:	b508      	push	{r3, lr}
 80206f2:	2006      	movs	r0, #6
 80206f4:	f000 fd1c 	bl	8021130 <raise>
 80206f8:	2001      	movs	r0, #1
 80206fa:	f7e2 ff63 	bl	80035c4 <_exit>
	...

08020700 <_close_r>:
 8020700:	b538      	push	{r3, r4, r5, lr}
 8020702:	4d06      	ldr	r5, [pc, #24]	; (802071c <_close_r+0x1c>)
 8020704:	2300      	movs	r3, #0
 8020706:	4604      	mov	r4, r0
 8020708:	4608      	mov	r0, r1
 802070a:	602b      	str	r3, [r5, #0]
 802070c:	f7e2 ff9d 	bl	800364a <_close>
 8020710:	1c43      	adds	r3, r0, #1
 8020712:	d102      	bne.n	802071a <_close_r+0x1a>
 8020714:	682b      	ldr	r3, [r5, #0]
 8020716:	b103      	cbz	r3, 802071a <_close_r+0x1a>
 8020718:	6023      	str	r3, [r4, #0]
 802071a:	bd38      	pop	{r3, r4, r5, pc}
 802071c:	2000b7b8 	.word	0x2000b7b8

08020720 <__env_lock>:
 8020720:	4801      	ldr	r0, [pc, #4]	; (8020728 <__env_lock+0x8>)
 8020722:	f7ff b8f9 	b.w	801f918 <__retarget_lock_acquire_recursive>
 8020726:	bf00      	nop
 8020728:	2000d09a 	.word	0x2000d09a

0802072c <__env_unlock>:
 802072c:	4801      	ldr	r0, [pc, #4]	; (8020734 <__env_unlock+0x8>)
 802072e:	f7ff b8f5 	b.w	801f91c <__retarget_lock_release_recursive>
 8020732:	bf00      	nop
 8020734:	2000d09a 	.word	0x2000d09a

08020738 <__sflush_r>:
 8020738:	898a      	ldrh	r2, [r1, #12]
 802073a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802073e:	4605      	mov	r5, r0
 8020740:	0710      	lsls	r0, r2, #28
 8020742:	460c      	mov	r4, r1
 8020744:	d458      	bmi.n	80207f8 <__sflush_r+0xc0>
 8020746:	684b      	ldr	r3, [r1, #4]
 8020748:	2b00      	cmp	r3, #0
 802074a:	dc05      	bgt.n	8020758 <__sflush_r+0x20>
 802074c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802074e:	2b00      	cmp	r3, #0
 8020750:	dc02      	bgt.n	8020758 <__sflush_r+0x20>
 8020752:	2000      	movs	r0, #0
 8020754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802075a:	2e00      	cmp	r6, #0
 802075c:	d0f9      	beq.n	8020752 <__sflush_r+0x1a>
 802075e:	2300      	movs	r3, #0
 8020760:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020764:	682f      	ldr	r7, [r5, #0]
 8020766:	602b      	str	r3, [r5, #0]
 8020768:	d032      	beq.n	80207d0 <__sflush_r+0x98>
 802076a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802076c:	89a3      	ldrh	r3, [r4, #12]
 802076e:	075a      	lsls	r2, r3, #29
 8020770:	d505      	bpl.n	802077e <__sflush_r+0x46>
 8020772:	6863      	ldr	r3, [r4, #4]
 8020774:	1ac0      	subs	r0, r0, r3
 8020776:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020778:	b10b      	cbz	r3, 802077e <__sflush_r+0x46>
 802077a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802077c:	1ac0      	subs	r0, r0, r3
 802077e:	2300      	movs	r3, #0
 8020780:	4602      	mov	r2, r0
 8020782:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020784:	6a21      	ldr	r1, [r4, #32]
 8020786:	4628      	mov	r0, r5
 8020788:	47b0      	blx	r6
 802078a:	1c43      	adds	r3, r0, #1
 802078c:	89a3      	ldrh	r3, [r4, #12]
 802078e:	d106      	bne.n	802079e <__sflush_r+0x66>
 8020790:	6829      	ldr	r1, [r5, #0]
 8020792:	291d      	cmp	r1, #29
 8020794:	d82c      	bhi.n	80207f0 <__sflush_r+0xb8>
 8020796:	4a2a      	ldr	r2, [pc, #168]	; (8020840 <__sflush_r+0x108>)
 8020798:	40ca      	lsrs	r2, r1
 802079a:	07d6      	lsls	r6, r2, #31
 802079c:	d528      	bpl.n	80207f0 <__sflush_r+0xb8>
 802079e:	2200      	movs	r2, #0
 80207a0:	6062      	str	r2, [r4, #4]
 80207a2:	04d9      	lsls	r1, r3, #19
 80207a4:	6922      	ldr	r2, [r4, #16]
 80207a6:	6022      	str	r2, [r4, #0]
 80207a8:	d504      	bpl.n	80207b4 <__sflush_r+0x7c>
 80207aa:	1c42      	adds	r2, r0, #1
 80207ac:	d101      	bne.n	80207b2 <__sflush_r+0x7a>
 80207ae:	682b      	ldr	r3, [r5, #0]
 80207b0:	b903      	cbnz	r3, 80207b4 <__sflush_r+0x7c>
 80207b2:	6560      	str	r0, [r4, #84]	; 0x54
 80207b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80207b6:	602f      	str	r7, [r5, #0]
 80207b8:	2900      	cmp	r1, #0
 80207ba:	d0ca      	beq.n	8020752 <__sflush_r+0x1a>
 80207bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80207c0:	4299      	cmp	r1, r3
 80207c2:	d002      	beq.n	80207ca <__sflush_r+0x92>
 80207c4:	4628      	mov	r0, r5
 80207c6:	f7ff f8bb 	bl	801f940 <_free_r>
 80207ca:	2000      	movs	r0, #0
 80207cc:	6360      	str	r0, [r4, #52]	; 0x34
 80207ce:	e7c1      	b.n	8020754 <__sflush_r+0x1c>
 80207d0:	6a21      	ldr	r1, [r4, #32]
 80207d2:	2301      	movs	r3, #1
 80207d4:	4628      	mov	r0, r5
 80207d6:	47b0      	blx	r6
 80207d8:	1c41      	adds	r1, r0, #1
 80207da:	d1c7      	bne.n	802076c <__sflush_r+0x34>
 80207dc:	682b      	ldr	r3, [r5, #0]
 80207de:	2b00      	cmp	r3, #0
 80207e0:	d0c4      	beq.n	802076c <__sflush_r+0x34>
 80207e2:	2b1d      	cmp	r3, #29
 80207e4:	d001      	beq.n	80207ea <__sflush_r+0xb2>
 80207e6:	2b16      	cmp	r3, #22
 80207e8:	d101      	bne.n	80207ee <__sflush_r+0xb6>
 80207ea:	602f      	str	r7, [r5, #0]
 80207ec:	e7b1      	b.n	8020752 <__sflush_r+0x1a>
 80207ee:	89a3      	ldrh	r3, [r4, #12]
 80207f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80207f4:	81a3      	strh	r3, [r4, #12]
 80207f6:	e7ad      	b.n	8020754 <__sflush_r+0x1c>
 80207f8:	690f      	ldr	r7, [r1, #16]
 80207fa:	2f00      	cmp	r7, #0
 80207fc:	d0a9      	beq.n	8020752 <__sflush_r+0x1a>
 80207fe:	0793      	lsls	r3, r2, #30
 8020800:	680e      	ldr	r6, [r1, #0]
 8020802:	bf08      	it	eq
 8020804:	694b      	ldreq	r3, [r1, #20]
 8020806:	600f      	str	r7, [r1, #0]
 8020808:	bf18      	it	ne
 802080a:	2300      	movne	r3, #0
 802080c:	eba6 0807 	sub.w	r8, r6, r7
 8020810:	608b      	str	r3, [r1, #8]
 8020812:	f1b8 0f00 	cmp.w	r8, #0
 8020816:	dd9c      	ble.n	8020752 <__sflush_r+0x1a>
 8020818:	6a21      	ldr	r1, [r4, #32]
 802081a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802081c:	4643      	mov	r3, r8
 802081e:	463a      	mov	r2, r7
 8020820:	4628      	mov	r0, r5
 8020822:	47b0      	blx	r6
 8020824:	2800      	cmp	r0, #0
 8020826:	dc06      	bgt.n	8020836 <__sflush_r+0xfe>
 8020828:	89a3      	ldrh	r3, [r4, #12]
 802082a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802082e:	81a3      	strh	r3, [r4, #12]
 8020830:	f04f 30ff 	mov.w	r0, #4294967295
 8020834:	e78e      	b.n	8020754 <__sflush_r+0x1c>
 8020836:	4407      	add	r7, r0
 8020838:	eba8 0800 	sub.w	r8, r8, r0
 802083c:	e7e9      	b.n	8020812 <__sflush_r+0xda>
 802083e:	bf00      	nop
 8020840:	20400001 	.word	0x20400001

08020844 <_fflush_r>:
 8020844:	b538      	push	{r3, r4, r5, lr}
 8020846:	690b      	ldr	r3, [r1, #16]
 8020848:	4605      	mov	r5, r0
 802084a:	460c      	mov	r4, r1
 802084c:	b913      	cbnz	r3, 8020854 <_fflush_r+0x10>
 802084e:	2500      	movs	r5, #0
 8020850:	4628      	mov	r0, r5
 8020852:	bd38      	pop	{r3, r4, r5, pc}
 8020854:	b118      	cbz	r0, 802085e <_fflush_r+0x1a>
 8020856:	6983      	ldr	r3, [r0, #24]
 8020858:	b90b      	cbnz	r3, 802085e <_fflush_r+0x1a>
 802085a:	f7fe feb5 	bl	801f5c8 <__sinit>
 802085e:	4b14      	ldr	r3, [pc, #80]	; (80208b0 <_fflush_r+0x6c>)
 8020860:	429c      	cmp	r4, r3
 8020862:	d11b      	bne.n	802089c <_fflush_r+0x58>
 8020864:	686c      	ldr	r4, [r5, #4]
 8020866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802086a:	2b00      	cmp	r3, #0
 802086c:	d0ef      	beq.n	802084e <_fflush_r+0xa>
 802086e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020870:	07d0      	lsls	r0, r2, #31
 8020872:	d404      	bmi.n	802087e <_fflush_r+0x3a>
 8020874:	0599      	lsls	r1, r3, #22
 8020876:	d402      	bmi.n	802087e <_fflush_r+0x3a>
 8020878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802087a:	f7ff f84d 	bl	801f918 <__retarget_lock_acquire_recursive>
 802087e:	4628      	mov	r0, r5
 8020880:	4621      	mov	r1, r4
 8020882:	f7ff ff59 	bl	8020738 <__sflush_r>
 8020886:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020888:	07da      	lsls	r2, r3, #31
 802088a:	4605      	mov	r5, r0
 802088c:	d4e0      	bmi.n	8020850 <_fflush_r+0xc>
 802088e:	89a3      	ldrh	r3, [r4, #12]
 8020890:	059b      	lsls	r3, r3, #22
 8020892:	d4dd      	bmi.n	8020850 <_fflush_r+0xc>
 8020894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020896:	f7ff f841 	bl	801f91c <__retarget_lock_release_recursive>
 802089a:	e7d9      	b.n	8020850 <_fflush_r+0xc>
 802089c:	4b05      	ldr	r3, [pc, #20]	; (80208b4 <_fflush_r+0x70>)
 802089e:	429c      	cmp	r4, r3
 80208a0:	d101      	bne.n	80208a6 <_fflush_r+0x62>
 80208a2:	68ac      	ldr	r4, [r5, #8]
 80208a4:	e7df      	b.n	8020866 <_fflush_r+0x22>
 80208a6:	4b04      	ldr	r3, [pc, #16]	; (80208b8 <_fflush_r+0x74>)
 80208a8:	429c      	cmp	r4, r3
 80208aa:	bf08      	it	eq
 80208ac:	68ec      	ldreq	r4, [r5, #12]
 80208ae:	e7da      	b.n	8020866 <_fflush_r+0x22>
 80208b0:	08026f98 	.word	0x08026f98
 80208b4:	08026fb8 	.word	0x08026fb8
 80208b8:	08026f78 	.word	0x08026f78

080208bc <_lseek_r>:
 80208bc:	b538      	push	{r3, r4, r5, lr}
 80208be:	4d07      	ldr	r5, [pc, #28]	; (80208dc <_lseek_r+0x20>)
 80208c0:	4604      	mov	r4, r0
 80208c2:	4608      	mov	r0, r1
 80208c4:	4611      	mov	r1, r2
 80208c6:	2200      	movs	r2, #0
 80208c8:	602a      	str	r2, [r5, #0]
 80208ca:	461a      	mov	r2, r3
 80208cc:	f7e2 fee4 	bl	8003698 <_lseek>
 80208d0:	1c43      	adds	r3, r0, #1
 80208d2:	d102      	bne.n	80208da <_lseek_r+0x1e>
 80208d4:	682b      	ldr	r3, [r5, #0]
 80208d6:	b103      	cbz	r3, 80208da <_lseek_r+0x1e>
 80208d8:	6023      	str	r3, [r4, #0]
 80208da:	bd38      	pop	{r3, r4, r5, pc}
 80208dc:	2000b7b8 	.word	0x2000b7b8

080208e0 <__swhatbuf_r>:
 80208e0:	b570      	push	{r4, r5, r6, lr}
 80208e2:	460e      	mov	r6, r1
 80208e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80208e8:	2900      	cmp	r1, #0
 80208ea:	b096      	sub	sp, #88	; 0x58
 80208ec:	4614      	mov	r4, r2
 80208ee:	461d      	mov	r5, r3
 80208f0:	da07      	bge.n	8020902 <__swhatbuf_r+0x22>
 80208f2:	2300      	movs	r3, #0
 80208f4:	602b      	str	r3, [r5, #0]
 80208f6:	89b3      	ldrh	r3, [r6, #12]
 80208f8:	061a      	lsls	r2, r3, #24
 80208fa:	d410      	bmi.n	802091e <__swhatbuf_r+0x3e>
 80208fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020900:	e00e      	b.n	8020920 <__swhatbuf_r+0x40>
 8020902:	466a      	mov	r2, sp
 8020904:	f000 fc6a 	bl	80211dc <_fstat_r>
 8020908:	2800      	cmp	r0, #0
 802090a:	dbf2      	blt.n	80208f2 <__swhatbuf_r+0x12>
 802090c:	9a01      	ldr	r2, [sp, #4]
 802090e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020912:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020916:	425a      	negs	r2, r3
 8020918:	415a      	adcs	r2, r3
 802091a:	602a      	str	r2, [r5, #0]
 802091c:	e7ee      	b.n	80208fc <__swhatbuf_r+0x1c>
 802091e:	2340      	movs	r3, #64	; 0x40
 8020920:	2000      	movs	r0, #0
 8020922:	6023      	str	r3, [r4, #0]
 8020924:	b016      	add	sp, #88	; 0x58
 8020926:	bd70      	pop	{r4, r5, r6, pc}

08020928 <__smakebuf_r>:
 8020928:	898b      	ldrh	r3, [r1, #12]
 802092a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802092c:	079d      	lsls	r5, r3, #30
 802092e:	4606      	mov	r6, r0
 8020930:	460c      	mov	r4, r1
 8020932:	d507      	bpl.n	8020944 <__smakebuf_r+0x1c>
 8020934:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020938:	6023      	str	r3, [r4, #0]
 802093a:	6123      	str	r3, [r4, #16]
 802093c:	2301      	movs	r3, #1
 802093e:	6163      	str	r3, [r4, #20]
 8020940:	b002      	add	sp, #8
 8020942:	bd70      	pop	{r4, r5, r6, pc}
 8020944:	ab01      	add	r3, sp, #4
 8020946:	466a      	mov	r2, sp
 8020948:	f7ff ffca 	bl	80208e0 <__swhatbuf_r>
 802094c:	9900      	ldr	r1, [sp, #0]
 802094e:	4605      	mov	r5, r0
 8020950:	4630      	mov	r0, r6
 8020952:	f7ff f845 	bl	801f9e0 <_malloc_r>
 8020956:	b948      	cbnz	r0, 802096c <__smakebuf_r+0x44>
 8020958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802095c:	059a      	lsls	r2, r3, #22
 802095e:	d4ef      	bmi.n	8020940 <__smakebuf_r+0x18>
 8020960:	f023 0303 	bic.w	r3, r3, #3
 8020964:	f043 0302 	orr.w	r3, r3, #2
 8020968:	81a3      	strh	r3, [r4, #12]
 802096a:	e7e3      	b.n	8020934 <__smakebuf_r+0xc>
 802096c:	4b0d      	ldr	r3, [pc, #52]	; (80209a4 <__smakebuf_r+0x7c>)
 802096e:	62b3      	str	r3, [r6, #40]	; 0x28
 8020970:	89a3      	ldrh	r3, [r4, #12]
 8020972:	6020      	str	r0, [r4, #0]
 8020974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020978:	81a3      	strh	r3, [r4, #12]
 802097a:	9b00      	ldr	r3, [sp, #0]
 802097c:	6163      	str	r3, [r4, #20]
 802097e:	9b01      	ldr	r3, [sp, #4]
 8020980:	6120      	str	r0, [r4, #16]
 8020982:	b15b      	cbz	r3, 802099c <__smakebuf_r+0x74>
 8020984:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020988:	4630      	mov	r0, r6
 802098a:	f000 fc39 	bl	8021200 <_isatty_r>
 802098e:	b128      	cbz	r0, 802099c <__smakebuf_r+0x74>
 8020990:	89a3      	ldrh	r3, [r4, #12]
 8020992:	f023 0303 	bic.w	r3, r3, #3
 8020996:	f043 0301 	orr.w	r3, r3, #1
 802099a:	81a3      	strh	r3, [r4, #12]
 802099c:	89a0      	ldrh	r0, [r4, #12]
 802099e:	4305      	orrs	r5, r0
 80209a0:	81a5      	strh	r5, [r4, #12]
 80209a2:	e7cd      	b.n	8020940 <__smakebuf_r+0x18>
 80209a4:	0801f561 	.word	0x0801f561

080209a8 <__malloc_lock>:
 80209a8:	4801      	ldr	r0, [pc, #4]	; (80209b0 <__malloc_lock+0x8>)
 80209aa:	f7fe bfb5 	b.w	801f918 <__retarget_lock_acquire_recursive>
 80209ae:	bf00      	nop
 80209b0:	2000d09c 	.word	0x2000d09c

080209b4 <__malloc_unlock>:
 80209b4:	4801      	ldr	r0, [pc, #4]	; (80209bc <__malloc_unlock+0x8>)
 80209b6:	f7fe bfb1 	b.w	801f91c <__retarget_lock_release_recursive>
 80209ba:	bf00      	nop
 80209bc:	2000d09c 	.word	0x2000d09c

080209c0 <_realloc_r>:
 80209c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80209c2:	4607      	mov	r7, r0
 80209c4:	4614      	mov	r4, r2
 80209c6:	460e      	mov	r6, r1
 80209c8:	b921      	cbnz	r1, 80209d4 <_realloc_r+0x14>
 80209ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80209ce:	4611      	mov	r1, r2
 80209d0:	f7ff b806 	b.w	801f9e0 <_malloc_r>
 80209d4:	b922      	cbnz	r2, 80209e0 <_realloc_r+0x20>
 80209d6:	f7fe ffb3 	bl	801f940 <_free_r>
 80209da:	4625      	mov	r5, r4
 80209dc:	4628      	mov	r0, r5
 80209de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80209e0:	f000 fc1e 	bl	8021220 <_malloc_usable_size_r>
 80209e4:	42a0      	cmp	r0, r4
 80209e6:	d20f      	bcs.n	8020a08 <_realloc_r+0x48>
 80209e8:	4621      	mov	r1, r4
 80209ea:	4638      	mov	r0, r7
 80209ec:	f7fe fff8 	bl	801f9e0 <_malloc_r>
 80209f0:	4605      	mov	r5, r0
 80209f2:	2800      	cmp	r0, #0
 80209f4:	d0f2      	beq.n	80209dc <_realloc_r+0x1c>
 80209f6:	4631      	mov	r1, r6
 80209f8:	4622      	mov	r2, r4
 80209fa:	f7fd ff03 	bl	801e804 <memcpy>
 80209fe:	4631      	mov	r1, r6
 8020a00:	4638      	mov	r0, r7
 8020a02:	f7fe ff9d 	bl	801f940 <_free_r>
 8020a06:	e7e9      	b.n	80209dc <_realloc_r+0x1c>
 8020a08:	4635      	mov	r5, r6
 8020a0a:	e7e7      	b.n	80209dc <_realloc_r+0x1c>

08020a0c <_sungetc_r>:
 8020a0c:	b538      	push	{r3, r4, r5, lr}
 8020a0e:	1c4b      	adds	r3, r1, #1
 8020a10:	4614      	mov	r4, r2
 8020a12:	d103      	bne.n	8020a1c <_sungetc_r+0x10>
 8020a14:	f04f 35ff 	mov.w	r5, #4294967295
 8020a18:	4628      	mov	r0, r5
 8020a1a:	bd38      	pop	{r3, r4, r5, pc}
 8020a1c:	8993      	ldrh	r3, [r2, #12]
 8020a1e:	f023 0320 	bic.w	r3, r3, #32
 8020a22:	8193      	strh	r3, [r2, #12]
 8020a24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020a26:	6852      	ldr	r2, [r2, #4]
 8020a28:	b2cd      	uxtb	r5, r1
 8020a2a:	b18b      	cbz	r3, 8020a50 <_sungetc_r+0x44>
 8020a2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020a2e:	4293      	cmp	r3, r2
 8020a30:	dd08      	ble.n	8020a44 <_sungetc_r+0x38>
 8020a32:	6823      	ldr	r3, [r4, #0]
 8020a34:	1e5a      	subs	r2, r3, #1
 8020a36:	6022      	str	r2, [r4, #0]
 8020a38:	f803 5c01 	strb.w	r5, [r3, #-1]
 8020a3c:	6863      	ldr	r3, [r4, #4]
 8020a3e:	3301      	adds	r3, #1
 8020a40:	6063      	str	r3, [r4, #4]
 8020a42:	e7e9      	b.n	8020a18 <_sungetc_r+0xc>
 8020a44:	4621      	mov	r1, r4
 8020a46:	f000 fb8f 	bl	8021168 <__submore>
 8020a4a:	2800      	cmp	r0, #0
 8020a4c:	d0f1      	beq.n	8020a32 <_sungetc_r+0x26>
 8020a4e:	e7e1      	b.n	8020a14 <_sungetc_r+0x8>
 8020a50:	6921      	ldr	r1, [r4, #16]
 8020a52:	6823      	ldr	r3, [r4, #0]
 8020a54:	b151      	cbz	r1, 8020a6c <_sungetc_r+0x60>
 8020a56:	4299      	cmp	r1, r3
 8020a58:	d208      	bcs.n	8020a6c <_sungetc_r+0x60>
 8020a5a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8020a5e:	42a9      	cmp	r1, r5
 8020a60:	d104      	bne.n	8020a6c <_sungetc_r+0x60>
 8020a62:	3b01      	subs	r3, #1
 8020a64:	3201      	adds	r2, #1
 8020a66:	6023      	str	r3, [r4, #0]
 8020a68:	6062      	str	r2, [r4, #4]
 8020a6a:	e7d5      	b.n	8020a18 <_sungetc_r+0xc>
 8020a6c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8020a70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020a74:	6363      	str	r3, [r4, #52]	; 0x34
 8020a76:	2303      	movs	r3, #3
 8020a78:	63a3      	str	r3, [r4, #56]	; 0x38
 8020a7a:	4623      	mov	r3, r4
 8020a7c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8020a80:	6023      	str	r3, [r4, #0]
 8020a82:	2301      	movs	r3, #1
 8020a84:	e7dc      	b.n	8020a40 <_sungetc_r+0x34>

08020a86 <__ssrefill_r>:
 8020a86:	b510      	push	{r4, lr}
 8020a88:	460c      	mov	r4, r1
 8020a8a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8020a8c:	b169      	cbz	r1, 8020aaa <__ssrefill_r+0x24>
 8020a8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020a92:	4299      	cmp	r1, r3
 8020a94:	d001      	beq.n	8020a9a <__ssrefill_r+0x14>
 8020a96:	f7fe ff53 	bl	801f940 <_free_r>
 8020a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020a9c:	6063      	str	r3, [r4, #4]
 8020a9e:	2000      	movs	r0, #0
 8020aa0:	6360      	str	r0, [r4, #52]	; 0x34
 8020aa2:	b113      	cbz	r3, 8020aaa <__ssrefill_r+0x24>
 8020aa4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8020aa6:	6023      	str	r3, [r4, #0]
 8020aa8:	bd10      	pop	{r4, pc}
 8020aaa:	6923      	ldr	r3, [r4, #16]
 8020aac:	6023      	str	r3, [r4, #0]
 8020aae:	2300      	movs	r3, #0
 8020ab0:	6063      	str	r3, [r4, #4]
 8020ab2:	89a3      	ldrh	r3, [r4, #12]
 8020ab4:	f043 0320 	orr.w	r3, r3, #32
 8020ab8:	81a3      	strh	r3, [r4, #12]
 8020aba:	f04f 30ff 	mov.w	r0, #4294967295
 8020abe:	e7f3      	b.n	8020aa8 <__ssrefill_r+0x22>

08020ac0 <__ssvfiscanf_r>:
 8020ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ac4:	460c      	mov	r4, r1
 8020ac6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8020aca:	2100      	movs	r1, #0
 8020acc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8020ad0:	49b2      	ldr	r1, [pc, #712]	; (8020d9c <__ssvfiscanf_r+0x2dc>)
 8020ad2:	91a0      	str	r1, [sp, #640]	; 0x280
 8020ad4:	f10d 0804 	add.w	r8, sp, #4
 8020ad8:	49b1      	ldr	r1, [pc, #708]	; (8020da0 <__ssvfiscanf_r+0x2e0>)
 8020ada:	4fb2      	ldr	r7, [pc, #712]	; (8020da4 <__ssvfiscanf_r+0x2e4>)
 8020adc:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8020da8 <__ssvfiscanf_r+0x2e8>
 8020ae0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8020ae4:	4606      	mov	r6, r0
 8020ae6:	91a1      	str	r1, [sp, #644]	; 0x284
 8020ae8:	9300      	str	r3, [sp, #0]
 8020aea:	f892 a000 	ldrb.w	sl, [r2]
 8020aee:	f1ba 0f00 	cmp.w	sl, #0
 8020af2:	f000 8151 	beq.w	8020d98 <__ssvfiscanf_r+0x2d8>
 8020af6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8020afa:	f013 0308 	ands.w	r3, r3, #8
 8020afe:	f102 0501 	add.w	r5, r2, #1
 8020b02:	d019      	beq.n	8020b38 <__ssvfiscanf_r+0x78>
 8020b04:	6863      	ldr	r3, [r4, #4]
 8020b06:	2b00      	cmp	r3, #0
 8020b08:	dd0f      	ble.n	8020b2a <__ssvfiscanf_r+0x6a>
 8020b0a:	6823      	ldr	r3, [r4, #0]
 8020b0c:	781a      	ldrb	r2, [r3, #0]
 8020b0e:	5cba      	ldrb	r2, [r7, r2]
 8020b10:	0712      	lsls	r2, r2, #28
 8020b12:	d401      	bmi.n	8020b18 <__ssvfiscanf_r+0x58>
 8020b14:	462a      	mov	r2, r5
 8020b16:	e7e8      	b.n	8020aea <__ssvfiscanf_r+0x2a>
 8020b18:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020b1a:	3201      	adds	r2, #1
 8020b1c:	9245      	str	r2, [sp, #276]	; 0x114
 8020b1e:	6862      	ldr	r2, [r4, #4]
 8020b20:	3301      	adds	r3, #1
 8020b22:	3a01      	subs	r2, #1
 8020b24:	6062      	str	r2, [r4, #4]
 8020b26:	6023      	str	r3, [r4, #0]
 8020b28:	e7ec      	b.n	8020b04 <__ssvfiscanf_r+0x44>
 8020b2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020b2c:	4621      	mov	r1, r4
 8020b2e:	4630      	mov	r0, r6
 8020b30:	4798      	blx	r3
 8020b32:	2800      	cmp	r0, #0
 8020b34:	d0e9      	beq.n	8020b0a <__ssvfiscanf_r+0x4a>
 8020b36:	e7ed      	b.n	8020b14 <__ssvfiscanf_r+0x54>
 8020b38:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8020b3c:	f040 8083 	bne.w	8020c46 <__ssvfiscanf_r+0x186>
 8020b40:	9341      	str	r3, [sp, #260]	; 0x104
 8020b42:	9343      	str	r3, [sp, #268]	; 0x10c
 8020b44:	7853      	ldrb	r3, [r2, #1]
 8020b46:	2b2a      	cmp	r3, #42	; 0x2a
 8020b48:	bf02      	ittt	eq
 8020b4a:	2310      	moveq	r3, #16
 8020b4c:	1c95      	addeq	r5, r2, #2
 8020b4e:	9341      	streq	r3, [sp, #260]	; 0x104
 8020b50:	220a      	movs	r2, #10
 8020b52:	46ab      	mov	fp, r5
 8020b54:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8020b58:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8020b5c:	2b09      	cmp	r3, #9
 8020b5e:	d91d      	bls.n	8020b9c <__ssvfiscanf_r+0xdc>
 8020b60:	4891      	ldr	r0, [pc, #580]	; (8020da8 <__ssvfiscanf_r+0x2e8>)
 8020b62:	2203      	movs	r2, #3
 8020b64:	f7df fb4c 	bl	8000200 <memchr>
 8020b68:	b140      	cbz	r0, 8020b7c <__ssvfiscanf_r+0xbc>
 8020b6a:	2301      	movs	r3, #1
 8020b6c:	eba0 0009 	sub.w	r0, r0, r9
 8020b70:	fa03 f000 	lsl.w	r0, r3, r0
 8020b74:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020b76:	4318      	orrs	r0, r3
 8020b78:	9041      	str	r0, [sp, #260]	; 0x104
 8020b7a:	465d      	mov	r5, fp
 8020b7c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8020b80:	2b78      	cmp	r3, #120	; 0x78
 8020b82:	d806      	bhi.n	8020b92 <__ssvfiscanf_r+0xd2>
 8020b84:	2b57      	cmp	r3, #87	; 0x57
 8020b86:	d810      	bhi.n	8020baa <__ssvfiscanf_r+0xea>
 8020b88:	2b25      	cmp	r3, #37	; 0x25
 8020b8a:	d05c      	beq.n	8020c46 <__ssvfiscanf_r+0x186>
 8020b8c:	d856      	bhi.n	8020c3c <__ssvfiscanf_r+0x17c>
 8020b8e:	2b00      	cmp	r3, #0
 8020b90:	d074      	beq.n	8020c7c <__ssvfiscanf_r+0x1bc>
 8020b92:	2303      	movs	r3, #3
 8020b94:	9347      	str	r3, [sp, #284]	; 0x11c
 8020b96:	230a      	movs	r3, #10
 8020b98:	9342      	str	r3, [sp, #264]	; 0x108
 8020b9a:	e081      	b.n	8020ca0 <__ssvfiscanf_r+0x1e0>
 8020b9c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8020b9e:	fb02 1303 	mla	r3, r2, r3, r1
 8020ba2:	3b30      	subs	r3, #48	; 0x30
 8020ba4:	9343      	str	r3, [sp, #268]	; 0x10c
 8020ba6:	465d      	mov	r5, fp
 8020ba8:	e7d3      	b.n	8020b52 <__ssvfiscanf_r+0x92>
 8020baa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8020bae:	2a20      	cmp	r2, #32
 8020bb0:	d8ef      	bhi.n	8020b92 <__ssvfiscanf_r+0xd2>
 8020bb2:	a101      	add	r1, pc, #4	; (adr r1, 8020bb8 <__ssvfiscanf_r+0xf8>)
 8020bb4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8020bb8:	08020c8b 	.word	0x08020c8b
 8020bbc:	08020b93 	.word	0x08020b93
 8020bc0:	08020b93 	.word	0x08020b93
 8020bc4:	08020ce9 	.word	0x08020ce9
 8020bc8:	08020b93 	.word	0x08020b93
 8020bcc:	08020b93 	.word	0x08020b93
 8020bd0:	08020b93 	.word	0x08020b93
 8020bd4:	08020b93 	.word	0x08020b93
 8020bd8:	08020b93 	.word	0x08020b93
 8020bdc:	08020b93 	.word	0x08020b93
 8020be0:	08020b93 	.word	0x08020b93
 8020be4:	08020cff 	.word	0x08020cff
 8020be8:	08020cd5 	.word	0x08020cd5
 8020bec:	08020c43 	.word	0x08020c43
 8020bf0:	08020c43 	.word	0x08020c43
 8020bf4:	08020c43 	.word	0x08020c43
 8020bf8:	08020b93 	.word	0x08020b93
 8020bfc:	08020cd9 	.word	0x08020cd9
 8020c00:	08020b93 	.word	0x08020b93
 8020c04:	08020b93 	.word	0x08020b93
 8020c08:	08020b93 	.word	0x08020b93
 8020c0c:	08020b93 	.word	0x08020b93
 8020c10:	08020d0f 	.word	0x08020d0f
 8020c14:	08020ce1 	.word	0x08020ce1
 8020c18:	08020c83 	.word	0x08020c83
 8020c1c:	08020b93 	.word	0x08020b93
 8020c20:	08020b93 	.word	0x08020b93
 8020c24:	08020d0b 	.word	0x08020d0b
 8020c28:	08020b93 	.word	0x08020b93
 8020c2c:	08020cd5 	.word	0x08020cd5
 8020c30:	08020b93 	.word	0x08020b93
 8020c34:	08020b93 	.word	0x08020b93
 8020c38:	08020c8b 	.word	0x08020c8b
 8020c3c:	3b45      	subs	r3, #69	; 0x45
 8020c3e:	2b02      	cmp	r3, #2
 8020c40:	d8a7      	bhi.n	8020b92 <__ssvfiscanf_r+0xd2>
 8020c42:	2305      	movs	r3, #5
 8020c44:	e02b      	b.n	8020c9e <__ssvfiscanf_r+0x1de>
 8020c46:	6863      	ldr	r3, [r4, #4]
 8020c48:	2b00      	cmp	r3, #0
 8020c4a:	dd0d      	ble.n	8020c68 <__ssvfiscanf_r+0x1a8>
 8020c4c:	6823      	ldr	r3, [r4, #0]
 8020c4e:	781a      	ldrb	r2, [r3, #0]
 8020c50:	4552      	cmp	r2, sl
 8020c52:	f040 80a1 	bne.w	8020d98 <__ssvfiscanf_r+0x2d8>
 8020c56:	3301      	adds	r3, #1
 8020c58:	6862      	ldr	r2, [r4, #4]
 8020c5a:	6023      	str	r3, [r4, #0]
 8020c5c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8020c5e:	3a01      	subs	r2, #1
 8020c60:	3301      	adds	r3, #1
 8020c62:	6062      	str	r2, [r4, #4]
 8020c64:	9345      	str	r3, [sp, #276]	; 0x114
 8020c66:	e755      	b.n	8020b14 <__ssvfiscanf_r+0x54>
 8020c68:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020c6a:	4621      	mov	r1, r4
 8020c6c:	4630      	mov	r0, r6
 8020c6e:	4798      	blx	r3
 8020c70:	2800      	cmp	r0, #0
 8020c72:	d0eb      	beq.n	8020c4c <__ssvfiscanf_r+0x18c>
 8020c74:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020c76:	2800      	cmp	r0, #0
 8020c78:	f040 8084 	bne.w	8020d84 <__ssvfiscanf_r+0x2c4>
 8020c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8020c80:	e086      	b.n	8020d90 <__ssvfiscanf_r+0x2d0>
 8020c82:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020c84:	f042 0220 	orr.w	r2, r2, #32
 8020c88:	9241      	str	r2, [sp, #260]	; 0x104
 8020c8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020c90:	9241      	str	r2, [sp, #260]	; 0x104
 8020c92:	2210      	movs	r2, #16
 8020c94:	2b6f      	cmp	r3, #111	; 0x6f
 8020c96:	9242      	str	r2, [sp, #264]	; 0x108
 8020c98:	bf34      	ite	cc
 8020c9a:	2303      	movcc	r3, #3
 8020c9c:	2304      	movcs	r3, #4
 8020c9e:	9347      	str	r3, [sp, #284]	; 0x11c
 8020ca0:	6863      	ldr	r3, [r4, #4]
 8020ca2:	2b00      	cmp	r3, #0
 8020ca4:	dd41      	ble.n	8020d2a <__ssvfiscanf_r+0x26a>
 8020ca6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020ca8:	0659      	lsls	r1, r3, #25
 8020caa:	d404      	bmi.n	8020cb6 <__ssvfiscanf_r+0x1f6>
 8020cac:	6823      	ldr	r3, [r4, #0]
 8020cae:	781a      	ldrb	r2, [r3, #0]
 8020cb0:	5cba      	ldrb	r2, [r7, r2]
 8020cb2:	0712      	lsls	r2, r2, #28
 8020cb4:	d440      	bmi.n	8020d38 <__ssvfiscanf_r+0x278>
 8020cb6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8020cb8:	2b02      	cmp	r3, #2
 8020cba:	dc4f      	bgt.n	8020d5c <__ssvfiscanf_r+0x29c>
 8020cbc:	466b      	mov	r3, sp
 8020cbe:	4622      	mov	r2, r4
 8020cc0:	a941      	add	r1, sp, #260	; 0x104
 8020cc2:	4630      	mov	r0, r6
 8020cc4:	f000 f874 	bl	8020db0 <_scanf_chars>
 8020cc8:	2801      	cmp	r0, #1
 8020cca:	d065      	beq.n	8020d98 <__ssvfiscanf_r+0x2d8>
 8020ccc:	2802      	cmp	r0, #2
 8020cce:	f47f af21 	bne.w	8020b14 <__ssvfiscanf_r+0x54>
 8020cd2:	e7cf      	b.n	8020c74 <__ssvfiscanf_r+0x1b4>
 8020cd4:	220a      	movs	r2, #10
 8020cd6:	e7dd      	b.n	8020c94 <__ssvfiscanf_r+0x1d4>
 8020cd8:	2300      	movs	r3, #0
 8020cda:	9342      	str	r3, [sp, #264]	; 0x108
 8020cdc:	2303      	movs	r3, #3
 8020cde:	e7de      	b.n	8020c9e <__ssvfiscanf_r+0x1de>
 8020ce0:	2308      	movs	r3, #8
 8020ce2:	9342      	str	r3, [sp, #264]	; 0x108
 8020ce4:	2304      	movs	r3, #4
 8020ce6:	e7da      	b.n	8020c9e <__ssvfiscanf_r+0x1de>
 8020ce8:	4629      	mov	r1, r5
 8020cea:	4640      	mov	r0, r8
 8020cec:	f000 f9be 	bl	802106c <__sccl>
 8020cf0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020cf6:	9341      	str	r3, [sp, #260]	; 0x104
 8020cf8:	4605      	mov	r5, r0
 8020cfa:	2301      	movs	r3, #1
 8020cfc:	e7cf      	b.n	8020c9e <__ssvfiscanf_r+0x1de>
 8020cfe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020d04:	9341      	str	r3, [sp, #260]	; 0x104
 8020d06:	2300      	movs	r3, #0
 8020d08:	e7c9      	b.n	8020c9e <__ssvfiscanf_r+0x1de>
 8020d0a:	2302      	movs	r3, #2
 8020d0c:	e7c7      	b.n	8020c9e <__ssvfiscanf_r+0x1de>
 8020d0e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8020d10:	06c3      	lsls	r3, r0, #27
 8020d12:	f53f aeff 	bmi.w	8020b14 <__ssvfiscanf_r+0x54>
 8020d16:	9b00      	ldr	r3, [sp, #0]
 8020d18:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020d1a:	1d19      	adds	r1, r3, #4
 8020d1c:	9100      	str	r1, [sp, #0]
 8020d1e:	681b      	ldr	r3, [r3, #0]
 8020d20:	07c0      	lsls	r0, r0, #31
 8020d22:	bf4c      	ite	mi
 8020d24:	801a      	strhmi	r2, [r3, #0]
 8020d26:	601a      	strpl	r2, [r3, #0]
 8020d28:	e6f4      	b.n	8020b14 <__ssvfiscanf_r+0x54>
 8020d2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020d2c:	4621      	mov	r1, r4
 8020d2e:	4630      	mov	r0, r6
 8020d30:	4798      	blx	r3
 8020d32:	2800      	cmp	r0, #0
 8020d34:	d0b7      	beq.n	8020ca6 <__ssvfiscanf_r+0x1e6>
 8020d36:	e79d      	b.n	8020c74 <__ssvfiscanf_r+0x1b4>
 8020d38:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020d3a:	3201      	adds	r2, #1
 8020d3c:	9245      	str	r2, [sp, #276]	; 0x114
 8020d3e:	6862      	ldr	r2, [r4, #4]
 8020d40:	3a01      	subs	r2, #1
 8020d42:	2a00      	cmp	r2, #0
 8020d44:	6062      	str	r2, [r4, #4]
 8020d46:	dd02      	ble.n	8020d4e <__ssvfiscanf_r+0x28e>
 8020d48:	3301      	adds	r3, #1
 8020d4a:	6023      	str	r3, [r4, #0]
 8020d4c:	e7ae      	b.n	8020cac <__ssvfiscanf_r+0x1ec>
 8020d4e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020d50:	4621      	mov	r1, r4
 8020d52:	4630      	mov	r0, r6
 8020d54:	4798      	blx	r3
 8020d56:	2800      	cmp	r0, #0
 8020d58:	d0a8      	beq.n	8020cac <__ssvfiscanf_r+0x1ec>
 8020d5a:	e78b      	b.n	8020c74 <__ssvfiscanf_r+0x1b4>
 8020d5c:	2b04      	cmp	r3, #4
 8020d5e:	dc06      	bgt.n	8020d6e <__ssvfiscanf_r+0x2ae>
 8020d60:	466b      	mov	r3, sp
 8020d62:	4622      	mov	r2, r4
 8020d64:	a941      	add	r1, sp, #260	; 0x104
 8020d66:	4630      	mov	r0, r6
 8020d68:	f000 f87a 	bl	8020e60 <_scanf_i>
 8020d6c:	e7ac      	b.n	8020cc8 <__ssvfiscanf_r+0x208>
 8020d6e:	4b0f      	ldr	r3, [pc, #60]	; (8020dac <__ssvfiscanf_r+0x2ec>)
 8020d70:	2b00      	cmp	r3, #0
 8020d72:	f43f aecf 	beq.w	8020b14 <__ssvfiscanf_r+0x54>
 8020d76:	466b      	mov	r3, sp
 8020d78:	4622      	mov	r2, r4
 8020d7a:	a941      	add	r1, sp, #260	; 0x104
 8020d7c:	4630      	mov	r0, r6
 8020d7e:	f3af 8000 	nop.w
 8020d82:	e7a1      	b.n	8020cc8 <__ssvfiscanf_r+0x208>
 8020d84:	89a3      	ldrh	r3, [r4, #12]
 8020d86:	f013 0f40 	tst.w	r3, #64	; 0x40
 8020d8a:	bf18      	it	ne
 8020d8c:	f04f 30ff 	movne.w	r0, #4294967295
 8020d90:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8020d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d98:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020d9a:	e7f9      	b.n	8020d90 <__ssvfiscanf_r+0x2d0>
 8020d9c:	08020a0d 	.word	0x08020a0d
 8020da0:	08020a87 	.word	0x08020a87
 8020da4:	08026cc1 	.word	0x08026cc1
 8020da8:	08026fde 	.word	0x08026fde
 8020dac:	00000000 	.word	0x00000000

08020db0 <_scanf_chars>:
 8020db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020db4:	4615      	mov	r5, r2
 8020db6:	688a      	ldr	r2, [r1, #8]
 8020db8:	4680      	mov	r8, r0
 8020dba:	460c      	mov	r4, r1
 8020dbc:	b932      	cbnz	r2, 8020dcc <_scanf_chars+0x1c>
 8020dbe:	698a      	ldr	r2, [r1, #24]
 8020dc0:	2a00      	cmp	r2, #0
 8020dc2:	bf0c      	ite	eq
 8020dc4:	2201      	moveq	r2, #1
 8020dc6:	f04f 32ff 	movne.w	r2, #4294967295
 8020dca:	608a      	str	r2, [r1, #8]
 8020dcc:	6822      	ldr	r2, [r4, #0]
 8020dce:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8020e5c <_scanf_chars+0xac>
 8020dd2:	06d1      	lsls	r1, r2, #27
 8020dd4:	bf5f      	itttt	pl
 8020dd6:	681a      	ldrpl	r2, [r3, #0]
 8020dd8:	1d11      	addpl	r1, r2, #4
 8020dda:	6019      	strpl	r1, [r3, #0]
 8020ddc:	6816      	ldrpl	r6, [r2, #0]
 8020dde:	2700      	movs	r7, #0
 8020de0:	69a0      	ldr	r0, [r4, #24]
 8020de2:	b188      	cbz	r0, 8020e08 <_scanf_chars+0x58>
 8020de4:	2801      	cmp	r0, #1
 8020de6:	d107      	bne.n	8020df8 <_scanf_chars+0x48>
 8020de8:	682b      	ldr	r3, [r5, #0]
 8020dea:	781a      	ldrb	r2, [r3, #0]
 8020dec:	6963      	ldr	r3, [r4, #20]
 8020dee:	5c9b      	ldrb	r3, [r3, r2]
 8020df0:	b953      	cbnz	r3, 8020e08 <_scanf_chars+0x58>
 8020df2:	bb27      	cbnz	r7, 8020e3e <_scanf_chars+0x8e>
 8020df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020df8:	2802      	cmp	r0, #2
 8020dfa:	d120      	bne.n	8020e3e <_scanf_chars+0x8e>
 8020dfc:	682b      	ldr	r3, [r5, #0]
 8020dfe:	781b      	ldrb	r3, [r3, #0]
 8020e00:	f813 3009 	ldrb.w	r3, [r3, r9]
 8020e04:	071b      	lsls	r3, r3, #28
 8020e06:	d41a      	bmi.n	8020e3e <_scanf_chars+0x8e>
 8020e08:	6823      	ldr	r3, [r4, #0]
 8020e0a:	06da      	lsls	r2, r3, #27
 8020e0c:	bf5e      	ittt	pl
 8020e0e:	682b      	ldrpl	r3, [r5, #0]
 8020e10:	781b      	ldrbpl	r3, [r3, #0]
 8020e12:	f806 3b01 	strbpl.w	r3, [r6], #1
 8020e16:	682a      	ldr	r2, [r5, #0]
 8020e18:	686b      	ldr	r3, [r5, #4]
 8020e1a:	3201      	adds	r2, #1
 8020e1c:	602a      	str	r2, [r5, #0]
 8020e1e:	68a2      	ldr	r2, [r4, #8]
 8020e20:	3b01      	subs	r3, #1
 8020e22:	3a01      	subs	r2, #1
 8020e24:	606b      	str	r3, [r5, #4]
 8020e26:	3701      	adds	r7, #1
 8020e28:	60a2      	str	r2, [r4, #8]
 8020e2a:	b142      	cbz	r2, 8020e3e <_scanf_chars+0x8e>
 8020e2c:	2b00      	cmp	r3, #0
 8020e2e:	dcd7      	bgt.n	8020de0 <_scanf_chars+0x30>
 8020e30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020e34:	4629      	mov	r1, r5
 8020e36:	4640      	mov	r0, r8
 8020e38:	4798      	blx	r3
 8020e3a:	2800      	cmp	r0, #0
 8020e3c:	d0d0      	beq.n	8020de0 <_scanf_chars+0x30>
 8020e3e:	6823      	ldr	r3, [r4, #0]
 8020e40:	f013 0310 	ands.w	r3, r3, #16
 8020e44:	d105      	bne.n	8020e52 <_scanf_chars+0xa2>
 8020e46:	68e2      	ldr	r2, [r4, #12]
 8020e48:	3201      	adds	r2, #1
 8020e4a:	60e2      	str	r2, [r4, #12]
 8020e4c:	69a2      	ldr	r2, [r4, #24]
 8020e4e:	b102      	cbz	r2, 8020e52 <_scanf_chars+0xa2>
 8020e50:	7033      	strb	r3, [r6, #0]
 8020e52:	6923      	ldr	r3, [r4, #16]
 8020e54:	441f      	add	r7, r3
 8020e56:	6127      	str	r7, [r4, #16]
 8020e58:	2000      	movs	r0, #0
 8020e5a:	e7cb      	b.n	8020df4 <_scanf_chars+0x44>
 8020e5c:	08026cc1 	.word	0x08026cc1

08020e60 <_scanf_i>:
 8020e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e64:	4698      	mov	r8, r3
 8020e66:	4b74      	ldr	r3, [pc, #464]	; (8021038 <_scanf_i+0x1d8>)
 8020e68:	460c      	mov	r4, r1
 8020e6a:	4682      	mov	sl, r0
 8020e6c:	4616      	mov	r6, r2
 8020e6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8020e72:	b087      	sub	sp, #28
 8020e74:	ab03      	add	r3, sp, #12
 8020e76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8020e7a:	4b70      	ldr	r3, [pc, #448]	; (802103c <_scanf_i+0x1dc>)
 8020e7c:	69a1      	ldr	r1, [r4, #24]
 8020e7e:	4a70      	ldr	r2, [pc, #448]	; (8021040 <_scanf_i+0x1e0>)
 8020e80:	2903      	cmp	r1, #3
 8020e82:	bf18      	it	ne
 8020e84:	461a      	movne	r2, r3
 8020e86:	68a3      	ldr	r3, [r4, #8]
 8020e88:	9201      	str	r2, [sp, #4]
 8020e8a:	1e5a      	subs	r2, r3, #1
 8020e8c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8020e90:	bf88      	it	hi
 8020e92:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8020e96:	4627      	mov	r7, r4
 8020e98:	bf82      	ittt	hi
 8020e9a:	eb03 0905 	addhi.w	r9, r3, r5
 8020e9e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8020ea2:	60a3      	strhi	r3, [r4, #8]
 8020ea4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8020ea8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8020eac:	bf98      	it	ls
 8020eae:	f04f 0900 	movls.w	r9, #0
 8020eb2:	6023      	str	r3, [r4, #0]
 8020eb4:	463d      	mov	r5, r7
 8020eb6:	f04f 0b00 	mov.w	fp, #0
 8020eba:	6831      	ldr	r1, [r6, #0]
 8020ebc:	ab03      	add	r3, sp, #12
 8020ebe:	7809      	ldrb	r1, [r1, #0]
 8020ec0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8020ec4:	2202      	movs	r2, #2
 8020ec6:	f7df f99b 	bl	8000200 <memchr>
 8020eca:	b328      	cbz	r0, 8020f18 <_scanf_i+0xb8>
 8020ecc:	f1bb 0f01 	cmp.w	fp, #1
 8020ed0:	d159      	bne.n	8020f86 <_scanf_i+0x126>
 8020ed2:	6862      	ldr	r2, [r4, #4]
 8020ed4:	b92a      	cbnz	r2, 8020ee2 <_scanf_i+0x82>
 8020ed6:	6822      	ldr	r2, [r4, #0]
 8020ed8:	2308      	movs	r3, #8
 8020eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020ede:	6063      	str	r3, [r4, #4]
 8020ee0:	6022      	str	r2, [r4, #0]
 8020ee2:	6822      	ldr	r2, [r4, #0]
 8020ee4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8020ee8:	6022      	str	r2, [r4, #0]
 8020eea:	68a2      	ldr	r2, [r4, #8]
 8020eec:	1e51      	subs	r1, r2, #1
 8020eee:	60a1      	str	r1, [r4, #8]
 8020ef0:	b192      	cbz	r2, 8020f18 <_scanf_i+0xb8>
 8020ef2:	6832      	ldr	r2, [r6, #0]
 8020ef4:	1c51      	adds	r1, r2, #1
 8020ef6:	6031      	str	r1, [r6, #0]
 8020ef8:	7812      	ldrb	r2, [r2, #0]
 8020efa:	f805 2b01 	strb.w	r2, [r5], #1
 8020efe:	6872      	ldr	r2, [r6, #4]
 8020f00:	3a01      	subs	r2, #1
 8020f02:	2a00      	cmp	r2, #0
 8020f04:	6072      	str	r2, [r6, #4]
 8020f06:	dc07      	bgt.n	8020f18 <_scanf_i+0xb8>
 8020f08:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8020f0c:	4631      	mov	r1, r6
 8020f0e:	4650      	mov	r0, sl
 8020f10:	4790      	blx	r2
 8020f12:	2800      	cmp	r0, #0
 8020f14:	f040 8085 	bne.w	8021022 <_scanf_i+0x1c2>
 8020f18:	f10b 0b01 	add.w	fp, fp, #1
 8020f1c:	f1bb 0f03 	cmp.w	fp, #3
 8020f20:	d1cb      	bne.n	8020eba <_scanf_i+0x5a>
 8020f22:	6863      	ldr	r3, [r4, #4]
 8020f24:	b90b      	cbnz	r3, 8020f2a <_scanf_i+0xca>
 8020f26:	230a      	movs	r3, #10
 8020f28:	6063      	str	r3, [r4, #4]
 8020f2a:	6863      	ldr	r3, [r4, #4]
 8020f2c:	4945      	ldr	r1, [pc, #276]	; (8021044 <_scanf_i+0x1e4>)
 8020f2e:	6960      	ldr	r0, [r4, #20]
 8020f30:	1ac9      	subs	r1, r1, r3
 8020f32:	f000 f89b 	bl	802106c <__sccl>
 8020f36:	f04f 0b00 	mov.w	fp, #0
 8020f3a:	68a3      	ldr	r3, [r4, #8]
 8020f3c:	6822      	ldr	r2, [r4, #0]
 8020f3e:	2b00      	cmp	r3, #0
 8020f40:	d03d      	beq.n	8020fbe <_scanf_i+0x15e>
 8020f42:	6831      	ldr	r1, [r6, #0]
 8020f44:	6960      	ldr	r0, [r4, #20]
 8020f46:	f891 c000 	ldrb.w	ip, [r1]
 8020f4a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8020f4e:	2800      	cmp	r0, #0
 8020f50:	d035      	beq.n	8020fbe <_scanf_i+0x15e>
 8020f52:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8020f56:	d124      	bne.n	8020fa2 <_scanf_i+0x142>
 8020f58:	0510      	lsls	r0, r2, #20
 8020f5a:	d522      	bpl.n	8020fa2 <_scanf_i+0x142>
 8020f5c:	f10b 0b01 	add.w	fp, fp, #1
 8020f60:	f1b9 0f00 	cmp.w	r9, #0
 8020f64:	d003      	beq.n	8020f6e <_scanf_i+0x10e>
 8020f66:	3301      	adds	r3, #1
 8020f68:	f109 39ff 	add.w	r9, r9, #4294967295
 8020f6c:	60a3      	str	r3, [r4, #8]
 8020f6e:	6873      	ldr	r3, [r6, #4]
 8020f70:	3b01      	subs	r3, #1
 8020f72:	2b00      	cmp	r3, #0
 8020f74:	6073      	str	r3, [r6, #4]
 8020f76:	dd1b      	ble.n	8020fb0 <_scanf_i+0x150>
 8020f78:	6833      	ldr	r3, [r6, #0]
 8020f7a:	3301      	adds	r3, #1
 8020f7c:	6033      	str	r3, [r6, #0]
 8020f7e:	68a3      	ldr	r3, [r4, #8]
 8020f80:	3b01      	subs	r3, #1
 8020f82:	60a3      	str	r3, [r4, #8]
 8020f84:	e7d9      	b.n	8020f3a <_scanf_i+0xda>
 8020f86:	f1bb 0f02 	cmp.w	fp, #2
 8020f8a:	d1ae      	bne.n	8020eea <_scanf_i+0x8a>
 8020f8c:	6822      	ldr	r2, [r4, #0]
 8020f8e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8020f92:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8020f96:	d1bf      	bne.n	8020f18 <_scanf_i+0xb8>
 8020f98:	2310      	movs	r3, #16
 8020f9a:	6063      	str	r3, [r4, #4]
 8020f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8020fa0:	e7a2      	b.n	8020ee8 <_scanf_i+0x88>
 8020fa2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8020fa6:	6022      	str	r2, [r4, #0]
 8020fa8:	780b      	ldrb	r3, [r1, #0]
 8020faa:	f805 3b01 	strb.w	r3, [r5], #1
 8020fae:	e7de      	b.n	8020f6e <_scanf_i+0x10e>
 8020fb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020fb4:	4631      	mov	r1, r6
 8020fb6:	4650      	mov	r0, sl
 8020fb8:	4798      	blx	r3
 8020fba:	2800      	cmp	r0, #0
 8020fbc:	d0df      	beq.n	8020f7e <_scanf_i+0x11e>
 8020fbe:	6823      	ldr	r3, [r4, #0]
 8020fc0:	05d9      	lsls	r1, r3, #23
 8020fc2:	d50d      	bpl.n	8020fe0 <_scanf_i+0x180>
 8020fc4:	42bd      	cmp	r5, r7
 8020fc6:	d909      	bls.n	8020fdc <_scanf_i+0x17c>
 8020fc8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8020fcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020fd0:	4632      	mov	r2, r6
 8020fd2:	4650      	mov	r0, sl
 8020fd4:	4798      	blx	r3
 8020fd6:	f105 39ff 	add.w	r9, r5, #4294967295
 8020fda:	464d      	mov	r5, r9
 8020fdc:	42bd      	cmp	r5, r7
 8020fde:	d028      	beq.n	8021032 <_scanf_i+0x1d2>
 8020fe0:	6822      	ldr	r2, [r4, #0]
 8020fe2:	f012 0210 	ands.w	r2, r2, #16
 8020fe6:	d113      	bne.n	8021010 <_scanf_i+0x1b0>
 8020fe8:	702a      	strb	r2, [r5, #0]
 8020fea:	6863      	ldr	r3, [r4, #4]
 8020fec:	9e01      	ldr	r6, [sp, #4]
 8020fee:	4639      	mov	r1, r7
 8020ff0:	4650      	mov	r0, sl
 8020ff2:	47b0      	blx	r6
 8020ff4:	f8d8 3000 	ldr.w	r3, [r8]
 8020ff8:	6821      	ldr	r1, [r4, #0]
 8020ffa:	1d1a      	adds	r2, r3, #4
 8020ffc:	f8c8 2000 	str.w	r2, [r8]
 8021000:	f011 0f20 	tst.w	r1, #32
 8021004:	681b      	ldr	r3, [r3, #0]
 8021006:	d00f      	beq.n	8021028 <_scanf_i+0x1c8>
 8021008:	6018      	str	r0, [r3, #0]
 802100a:	68e3      	ldr	r3, [r4, #12]
 802100c:	3301      	adds	r3, #1
 802100e:	60e3      	str	r3, [r4, #12]
 8021010:	1bed      	subs	r5, r5, r7
 8021012:	44ab      	add	fp, r5
 8021014:	6925      	ldr	r5, [r4, #16]
 8021016:	445d      	add	r5, fp
 8021018:	6125      	str	r5, [r4, #16]
 802101a:	2000      	movs	r0, #0
 802101c:	b007      	add	sp, #28
 802101e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021022:	f04f 0b00 	mov.w	fp, #0
 8021026:	e7ca      	b.n	8020fbe <_scanf_i+0x15e>
 8021028:	07ca      	lsls	r2, r1, #31
 802102a:	bf4c      	ite	mi
 802102c:	8018      	strhmi	r0, [r3, #0]
 802102e:	6018      	strpl	r0, [r3, #0]
 8021030:	e7eb      	b.n	802100a <_scanf_i+0x1aa>
 8021032:	2001      	movs	r0, #1
 8021034:	e7f2      	b.n	802101c <_scanf_i+0x1bc>
 8021036:	bf00      	nop
 8021038:	08025c94 	.word	0x08025c94
 802103c:	08020535 	.word	0x08020535
 8021040:	0801f025 	.word	0x0801f025
 8021044:	08027024 	.word	0x08027024

08021048 <_read_r>:
 8021048:	b538      	push	{r3, r4, r5, lr}
 802104a:	4d07      	ldr	r5, [pc, #28]	; (8021068 <_read_r+0x20>)
 802104c:	4604      	mov	r4, r0
 802104e:	4608      	mov	r0, r1
 8021050:	4611      	mov	r1, r2
 8021052:	2200      	movs	r2, #0
 8021054:	602a      	str	r2, [r5, #0]
 8021056:	461a      	mov	r2, r3
 8021058:	f7e2 fabe 	bl	80035d8 <_read>
 802105c:	1c43      	adds	r3, r0, #1
 802105e:	d102      	bne.n	8021066 <_read_r+0x1e>
 8021060:	682b      	ldr	r3, [r5, #0]
 8021062:	b103      	cbz	r3, 8021066 <_read_r+0x1e>
 8021064:	6023      	str	r3, [r4, #0]
 8021066:	bd38      	pop	{r3, r4, r5, pc}
 8021068:	2000b7b8 	.word	0x2000b7b8

0802106c <__sccl>:
 802106c:	b570      	push	{r4, r5, r6, lr}
 802106e:	780b      	ldrb	r3, [r1, #0]
 8021070:	4604      	mov	r4, r0
 8021072:	2b5e      	cmp	r3, #94	; 0x5e
 8021074:	bf0b      	itete	eq
 8021076:	784b      	ldrbeq	r3, [r1, #1]
 8021078:	1c48      	addne	r0, r1, #1
 802107a:	1c88      	addeq	r0, r1, #2
 802107c:	2200      	movne	r2, #0
 802107e:	bf08      	it	eq
 8021080:	2201      	moveq	r2, #1
 8021082:	1e61      	subs	r1, r4, #1
 8021084:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8021088:	f801 2f01 	strb.w	r2, [r1, #1]!
 802108c:	42a9      	cmp	r1, r5
 802108e:	d1fb      	bne.n	8021088 <__sccl+0x1c>
 8021090:	b90b      	cbnz	r3, 8021096 <__sccl+0x2a>
 8021092:	3801      	subs	r0, #1
 8021094:	bd70      	pop	{r4, r5, r6, pc}
 8021096:	f082 0101 	eor.w	r1, r2, #1
 802109a:	54e1      	strb	r1, [r4, r3]
 802109c:	1c42      	adds	r2, r0, #1
 802109e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80210a2:	2d2d      	cmp	r5, #45	; 0x2d
 80210a4:	f102 36ff 	add.w	r6, r2, #4294967295
 80210a8:	4610      	mov	r0, r2
 80210aa:	d006      	beq.n	80210ba <__sccl+0x4e>
 80210ac:	2d5d      	cmp	r5, #93	; 0x5d
 80210ae:	d0f1      	beq.n	8021094 <__sccl+0x28>
 80210b0:	b90d      	cbnz	r5, 80210b6 <__sccl+0x4a>
 80210b2:	4630      	mov	r0, r6
 80210b4:	e7ee      	b.n	8021094 <__sccl+0x28>
 80210b6:	462b      	mov	r3, r5
 80210b8:	e7ef      	b.n	802109a <__sccl+0x2e>
 80210ba:	7816      	ldrb	r6, [r2, #0]
 80210bc:	2e5d      	cmp	r6, #93	; 0x5d
 80210be:	d0fa      	beq.n	80210b6 <__sccl+0x4a>
 80210c0:	42b3      	cmp	r3, r6
 80210c2:	dcf8      	bgt.n	80210b6 <__sccl+0x4a>
 80210c4:	4618      	mov	r0, r3
 80210c6:	3001      	adds	r0, #1
 80210c8:	4286      	cmp	r6, r0
 80210ca:	5421      	strb	r1, [r4, r0]
 80210cc:	dcfb      	bgt.n	80210c6 <__sccl+0x5a>
 80210ce:	43d8      	mvns	r0, r3
 80210d0:	4430      	add	r0, r6
 80210d2:	1c5d      	adds	r5, r3, #1
 80210d4:	42b3      	cmp	r3, r6
 80210d6:	bfa8      	it	ge
 80210d8:	2000      	movge	r0, #0
 80210da:	182b      	adds	r3, r5, r0
 80210dc:	3202      	adds	r2, #2
 80210de:	e7de      	b.n	802109e <__sccl+0x32>

080210e0 <_raise_r>:
 80210e0:	291f      	cmp	r1, #31
 80210e2:	b538      	push	{r3, r4, r5, lr}
 80210e4:	4604      	mov	r4, r0
 80210e6:	460d      	mov	r5, r1
 80210e8:	d904      	bls.n	80210f4 <_raise_r+0x14>
 80210ea:	2316      	movs	r3, #22
 80210ec:	6003      	str	r3, [r0, #0]
 80210ee:	f04f 30ff 	mov.w	r0, #4294967295
 80210f2:	bd38      	pop	{r3, r4, r5, pc}
 80210f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80210f6:	b112      	cbz	r2, 80210fe <_raise_r+0x1e>
 80210f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80210fc:	b94b      	cbnz	r3, 8021112 <_raise_r+0x32>
 80210fe:	4620      	mov	r0, r4
 8021100:	f000 f830 	bl	8021164 <_getpid_r>
 8021104:	462a      	mov	r2, r5
 8021106:	4601      	mov	r1, r0
 8021108:	4620      	mov	r0, r4
 802110a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802110e:	f000 b817 	b.w	8021140 <_kill_r>
 8021112:	2b01      	cmp	r3, #1
 8021114:	d00a      	beq.n	802112c <_raise_r+0x4c>
 8021116:	1c59      	adds	r1, r3, #1
 8021118:	d103      	bne.n	8021122 <_raise_r+0x42>
 802111a:	2316      	movs	r3, #22
 802111c:	6003      	str	r3, [r0, #0]
 802111e:	2001      	movs	r0, #1
 8021120:	e7e7      	b.n	80210f2 <_raise_r+0x12>
 8021122:	2400      	movs	r4, #0
 8021124:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021128:	4628      	mov	r0, r5
 802112a:	4798      	blx	r3
 802112c:	2000      	movs	r0, #0
 802112e:	e7e0      	b.n	80210f2 <_raise_r+0x12>

08021130 <raise>:
 8021130:	4b02      	ldr	r3, [pc, #8]	; (802113c <raise+0xc>)
 8021132:	4601      	mov	r1, r0
 8021134:	6818      	ldr	r0, [r3, #0]
 8021136:	f7ff bfd3 	b.w	80210e0 <_raise_r>
 802113a:	bf00      	nop
 802113c:	200001ac 	.word	0x200001ac

08021140 <_kill_r>:
 8021140:	b538      	push	{r3, r4, r5, lr}
 8021142:	4d07      	ldr	r5, [pc, #28]	; (8021160 <_kill_r+0x20>)
 8021144:	2300      	movs	r3, #0
 8021146:	4604      	mov	r4, r0
 8021148:	4608      	mov	r0, r1
 802114a:	4611      	mov	r1, r2
 802114c:	602b      	str	r3, [r5, #0]
 802114e:	f7e2 fa27 	bl	80035a0 <_kill>
 8021152:	1c43      	adds	r3, r0, #1
 8021154:	d102      	bne.n	802115c <_kill_r+0x1c>
 8021156:	682b      	ldr	r3, [r5, #0]
 8021158:	b103      	cbz	r3, 802115c <_kill_r+0x1c>
 802115a:	6023      	str	r3, [r4, #0]
 802115c:	bd38      	pop	{r3, r4, r5, pc}
 802115e:	bf00      	nop
 8021160:	2000b7b8 	.word	0x2000b7b8

08021164 <_getpid_r>:
 8021164:	f7e2 ba14 	b.w	8003590 <_getpid>

08021168 <__submore>:
 8021168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802116c:	460c      	mov	r4, r1
 802116e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8021170:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021174:	4299      	cmp	r1, r3
 8021176:	d11d      	bne.n	80211b4 <__submore+0x4c>
 8021178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802117c:	f7fe fc30 	bl	801f9e0 <_malloc_r>
 8021180:	b918      	cbnz	r0, 802118a <__submore+0x22>
 8021182:	f04f 30ff 	mov.w	r0, #4294967295
 8021186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802118a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802118e:	63a3      	str	r3, [r4, #56]	; 0x38
 8021190:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8021194:	6360      	str	r0, [r4, #52]	; 0x34
 8021196:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802119a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802119e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80211a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80211a6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80211aa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80211ae:	6020      	str	r0, [r4, #0]
 80211b0:	2000      	movs	r0, #0
 80211b2:	e7e8      	b.n	8021186 <__submore+0x1e>
 80211b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80211b6:	0077      	lsls	r7, r6, #1
 80211b8:	463a      	mov	r2, r7
 80211ba:	f7ff fc01 	bl	80209c0 <_realloc_r>
 80211be:	4605      	mov	r5, r0
 80211c0:	2800      	cmp	r0, #0
 80211c2:	d0de      	beq.n	8021182 <__submore+0x1a>
 80211c4:	eb00 0806 	add.w	r8, r0, r6
 80211c8:	4601      	mov	r1, r0
 80211ca:	4632      	mov	r2, r6
 80211cc:	4640      	mov	r0, r8
 80211ce:	f7fd fb19 	bl	801e804 <memcpy>
 80211d2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80211d6:	f8c4 8000 	str.w	r8, [r4]
 80211da:	e7e9      	b.n	80211b0 <__submore+0x48>

080211dc <_fstat_r>:
 80211dc:	b538      	push	{r3, r4, r5, lr}
 80211de:	4d07      	ldr	r5, [pc, #28]	; (80211fc <_fstat_r+0x20>)
 80211e0:	2300      	movs	r3, #0
 80211e2:	4604      	mov	r4, r0
 80211e4:	4608      	mov	r0, r1
 80211e6:	4611      	mov	r1, r2
 80211e8:	602b      	str	r3, [r5, #0]
 80211ea:	f7e2 fa3a 	bl	8003662 <_fstat>
 80211ee:	1c43      	adds	r3, r0, #1
 80211f0:	d102      	bne.n	80211f8 <_fstat_r+0x1c>
 80211f2:	682b      	ldr	r3, [r5, #0]
 80211f4:	b103      	cbz	r3, 80211f8 <_fstat_r+0x1c>
 80211f6:	6023      	str	r3, [r4, #0]
 80211f8:	bd38      	pop	{r3, r4, r5, pc}
 80211fa:	bf00      	nop
 80211fc:	2000b7b8 	.word	0x2000b7b8

08021200 <_isatty_r>:
 8021200:	b538      	push	{r3, r4, r5, lr}
 8021202:	4d06      	ldr	r5, [pc, #24]	; (802121c <_isatty_r+0x1c>)
 8021204:	2300      	movs	r3, #0
 8021206:	4604      	mov	r4, r0
 8021208:	4608      	mov	r0, r1
 802120a:	602b      	str	r3, [r5, #0]
 802120c:	f7e2 fa39 	bl	8003682 <_isatty>
 8021210:	1c43      	adds	r3, r0, #1
 8021212:	d102      	bne.n	802121a <_isatty_r+0x1a>
 8021214:	682b      	ldr	r3, [r5, #0]
 8021216:	b103      	cbz	r3, 802121a <_isatty_r+0x1a>
 8021218:	6023      	str	r3, [r4, #0]
 802121a:	bd38      	pop	{r3, r4, r5, pc}
 802121c:	2000b7b8 	.word	0x2000b7b8

08021220 <_malloc_usable_size_r>:
 8021220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021224:	1f18      	subs	r0, r3, #4
 8021226:	2b00      	cmp	r3, #0
 8021228:	bfbc      	itt	lt
 802122a:	580b      	ldrlt	r3, [r1, r0]
 802122c:	18c0      	addlt	r0, r0, r3
 802122e:	4770      	bx	lr

08021230 <pow>:
 8021230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021234:	ec59 8b10 	vmov	r8, r9, d0
 8021238:	ec57 6b11 	vmov	r6, r7, d1
 802123c:	f000 f8a8 	bl	8021390 <__ieee754_pow>
 8021240:	4b4e      	ldr	r3, [pc, #312]	; (802137c <pow+0x14c>)
 8021242:	f993 3000 	ldrsb.w	r3, [r3]
 8021246:	3301      	adds	r3, #1
 8021248:	ec55 4b10 	vmov	r4, r5, d0
 802124c:	d015      	beq.n	802127a <pow+0x4a>
 802124e:	4632      	mov	r2, r6
 8021250:	463b      	mov	r3, r7
 8021252:	4630      	mov	r0, r6
 8021254:	4639      	mov	r1, r7
 8021256:	f7df fc79 	bl	8000b4c <__aeabi_dcmpun>
 802125a:	b970      	cbnz	r0, 802127a <pow+0x4a>
 802125c:	4642      	mov	r2, r8
 802125e:	464b      	mov	r3, r9
 8021260:	4640      	mov	r0, r8
 8021262:	4649      	mov	r1, r9
 8021264:	f7df fc72 	bl	8000b4c <__aeabi_dcmpun>
 8021268:	2200      	movs	r2, #0
 802126a:	2300      	movs	r3, #0
 802126c:	b148      	cbz	r0, 8021282 <pow+0x52>
 802126e:	4630      	mov	r0, r6
 8021270:	4639      	mov	r1, r7
 8021272:	f7df fc39 	bl	8000ae8 <__aeabi_dcmpeq>
 8021276:	2800      	cmp	r0, #0
 8021278:	d17d      	bne.n	8021376 <pow+0x146>
 802127a:	ec45 4b10 	vmov	d0, r4, r5
 802127e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021282:	4640      	mov	r0, r8
 8021284:	4649      	mov	r1, r9
 8021286:	f7df fc2f 	bl	8000ae8 <__aeabi_dcmpeq>
 802128a:	b1e0      	cbz	r0, 80212c6 <pow+0x96>
 802128c:	2200      	movs	r2, #0
 802128e:	2300      	movs	r3, #0
 8021290:	4630      	mov	r0, r6
 8021292:	4639      	mov	r1, r7
 8021294:	f7df fc28 	bl	8000ae8 <__aeabi_dcmpeq>
 8021298:	2800      	cmp	r0, #0
 802129a:	d16c      	bne.n	8021376 <pow+0x146>
 802129c:	ec47 6b10 	vmov	d0, r6, r7
 80212a0:	f000 fe55 	bl	8021f4e <finite>
 80212a4:	2800      	cmp	r0, #0
 80212a6:	d0e8      	beq.n	802127a <pow+0x4a>
 80212a8:	2200      	movs	r2, #0
 80212aa:	2300      	movs	r3, #0
 80212ac:	4630      	mov	r0, r6
 80212ae:	4639      	mov	r1, r7
 80212b0:	f7df fc24 	bl	8000afc <__aeabi_dcmplt>
 80212b4:	2800      	cmp	r0, #0
 80212b6:	d0e0      	beq.n	802127a <pow+0x4a>
 80212b8:	f7fe f928 	bl	801f50c <__errno>
 80212bc:	2321      	movs	r3, #33	; 0x21
 80212be:	6003      	str	r3, [r0, #0]
 80212c0:	2400      	movs	r4, #0
 80212c2:	4d2f      	ldr	r5, [pc, #188]	; (8021380 <pow+0x150>)
 80212c4:	e7d9      	b.n	802127a <pow+0x4a>
 80212c6:	ec45 4b10 	vmov	d0, r4, r5
 80212ca:	f000 fe40 	bl	8021f4e <finite>
 80212ce:	bbb8      	cbnz	r0, 8021340 <pow+0x110>
 80212d0:	ec49 8b10 	vmov	d0, r8, r9
 80212d4:	f000 fe3b 	bl	8021f4e <finite>
 80212d8:	b390      	cbz	r0, 8021340 <pow+0x110>
 80212da:	ec47 6b10 	vmov	d0, r6, r7
 80212de:	f000 fe36 	bl	8021f4e <finite>
 80212e2:	b368      	cbz	r0, 8021340 <pow+0x110>
 80212e4:	4622      	mov	r2, r4
 80212e6:	462b      	mov	r3, r5
 80212e8:	4620      	mov	r0, r4
 80212ea:	4629      	mov	r1, r5
 80212ec:	f7df fc2e 	bl	8000b4c <__aeabi_dcmpun>
 80212f0:	b160      	cbz	r0, 802130c <pow+0xdc>
 80212f2:	f7fe f90b 	bl	801f50c <__errno>
 80212f6:	2321      	movs	r3, #33	; 0x21
 80212f8:	6003      	str	r3, [r0, #0]
 80212fa:	2200      	movs	r2, #0
 80212fc:	2300      	movs	r3, #0
 80212fe:	4610      	mov	r0, r2
 8021300:	4619      	mov	r1, r3
 8021302:	f7df fab3 	bl	800086c <__aeabi_ddiv>
 8021306:	4604      	mov	r4, r0
 8021308:	460d      	mov	r5, r1
 802130a:	e7b6      	b.n	802127a <pow+0x4a>
 802130c:	f7fe f8fe 	bl	801f50c <__errno>
 8021310:	2322      	movs	r3, #34	; 0x22
 8021312:	6003      	str	r3, [r0, #0]
 8021314:	2200      	movs	r2, #0
 8021316:	2300      	movs	r3, #0
 8021318:	4640      	mov	r0, r8
 802131a:	4649      	mov	r1, r9
 802131c:	f7df fbee 	bl	8000afc <__aeabi_dcmplt>
 8021320:	2400      	movs	r4, #0
 8021322:	b158      	cbz	r0, 802133c <pow+0x10c>
 8021324:	ec47 6b10 	vmov	d0, r6, r7
 8021328:	f000 fe26 	bl	8021f78 <rint>
 802132c:	4632      	mov	r2, r6
 802132e:	ec51 0b10 	vmov	r0, r1, d0
 8021332:	463b      	mov	r3, r7
 8021334:	f7df fbd8 	bl	8000ae8 <__aeabi_dcmpeq>
 8021338:	2800      	cmp	r0, #0
 802133a:	d0c2      	beq.n	80212c2 <pow+0x92>
 802133c:	4d11      	ldr	r5, [pc, #68]	; (8021384 <pow+0x154>)
 802133e:	e79c      	b.n	802127a <pow+0x4a>
 8021340:	2200      	movs	r2, #0
 8021342:	2300      	movs	r3, #0
 8021344:	4620      	mov	r0, r4
 8021346:	4629      	mov	r1, r5
 8021348:	f7df fbce 	bl	8000ae8 <__aeabi_dcmpeq>
 802134c:	2800      	cmp	r0, #0
 802134e:	d094      	beq.n	802127a <pow+0x4a>
 8021350:	ec49 8b10 	vmov	d0, r8, r9
 8021354:	f000 fdfb 	bl	8021f4e <finite>
 8021358:	2800      	cmp	r0, #0
 802135a:	d08e      	beq.n	802127a <pow+0x4a>
 802135c:	ec47 6b10 	vmov	d0, r6, r7
 8021360:	f000 fdf5 	bl	8021f4e <finite>
 8021364:	2800      	cmp	r0, #0
 8021366:	d088      	beq.n	802127a <pow+0x4a>
 8021368:	f7fe f8d0 	bl	801f50c <__errno>
 802136c:	2322      	movs	r3, #34	; 0x22
 802136e:	6003      	str	r3, [r0, #0]
 8021370:	2400      	movs	r4, #0
 8021372:	2500      	movs	r5, #0
 8021374:	e781      	b.n	802127a <pow+0x4a>
 8021376:	4d04      	ldr	r5, [pc, #16]	; (8021388 <pow+0x158>)
 8021378:	2400      	movs	r4, #0
 802137a:	e77e      	b.n	802127a <pow+0x4a>
 802137c:	20000270 	.word	0x20000270
 8021380:	fff00000 	.word	0xfff00000
 8021384:	7ff00000 	.word	0x7ff00000
 8021388:	3ff00000 	.word	0x3ff00000
 802138c:	00000000 	.word	0x00000000

08021390 <__ieee754_pow>:
 8021390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021394:	ed2d 8b06 	vpush	{d8-d10}
 8021398:	b08d      	sub	sp, #52	; 0x34
 802139a:	ed8d 1b02 	vstr	d1, [sp, #8]
 802139e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80213a2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80213a6:	ea56 0100 	orrs.w	r1, r6, r0
 80213aa:	ec53 2b10 	vmov	r2, r3, d0
 80213ae:	f000 84d1 	beq.w	8021d54 <__ieee754_pow+0x9c4>
 80213b2:	497f      	ldr	r1, [pc, #508]	; (80215b0 <__ieee754_pow+0x220>)
 80213b4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80213b8:	428c      	cmp	r4, r1
 80213ba:	ee10 8a10 	vmov	r8, s0
 80213be:	4699      	mov	r9, r3
 80213c0:	dc09      	bgt.n	80213d6 <__ieee754_pow+0x46>
 80213c2:	d103      	bne.n	80213cc <__ieee754_pow+0x3c>
 80213c4:	b97a      	cbnz	r2, 80213e6 <__ieee754_pow+0x56>
 80213c6:	42a6      	cmp	r6, r4
 80213c8:	dd02      	ble.n	80213d0 <__ieee754_pow+0x40>
 80213ca:	e00c      	b.n	80213e6 <__ieee754_pow+0x56>
 80213cc:	428e      	cmp	r6, r1
 80213ce:	dc02      	bgt.n	80213d6 <__ieee754_pow+0x46>
 80213d0:	428e      	cmp	r6, r1
 80213d2:	d110      	bne.n	80213f6 <__ieee754_pow+0x66>
 80213d4:	b178      	cbz	r0, 80213f6 <__ieee754_pow+0x66>
 80213d6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80213da:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80213de:	ea54 0308 	orrs.w	r3, r4, r8
 80213e2:	f000 84b7 	beq.w	8021d54 <__ieee754_pow+0x9c4>
 80213e6:	4873      	ldr	r0, [pc, #460]	; (80215b4 <__ieee754_pow+0x224>)
 80213e8:	b00d      	add	sp, #52	; 0x34
 80213ea:	ecbd 8b06 	vpop	{d8-d10}
 80213ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213f2:	f000 bdb9 	b.w	8021f68 <nan>
 80213f6:	f1b9 0f00 	cmp.w	r9, #0
 80213fa:	da36      	bge.n	802146a <__ieee754_pow+0xda>
 80213fc:	496e      	ldr	r1, [pc, #440]	; (80215b8 <__ieee754_pow+0x228>)
 80213fe:	428e      	cmp	r6, r1
 8021400:	dc51      	bgt.n	80214a6 <__ieee754_pow+0x116>
 8021402:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8021406:	428e      	cmp	r6, r1
 8021408:	f340 84af 	ble.w	8021d6a <__ieee754_pow+0x9da>
 802140c:	1531      	asrs	r1, r6, #20
 802140e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8021412:	2914      	cmp	r1, #20
 8021414:	dd0f      	ble.n	8021436 <__ieee754_pow+0xa6>
 8021416:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 802141a:	fa20 fc01 	lsr.w	ip, r0, r1
 802141e:	fa0c f101 	lsl.w	r1, ip, r1
 8021422:	4281      	cmp	r1, r0
 8021424:	f040 84a1 	bne.w	8021d6a <__ieee754_pow+0x9da>
 8021428:	f00c 0c01 	and.w	ip, ip, #1
 802142c:	f1cc 0102 	rsb	r1, ip, #2
 8021430:	9100      	str	r1, [sp, #0]
 8021432:	b180      	cbz	r0, 8021456 <__ieee754_pow+0xc6>
 8021434:	e059      	b.n	80214ea <__ieee754_pow+0x15a>
 8021436:	2800      	cmp	r0, #0
 8021438:	d155      	bne.n	80214e6 <__ieee754_pow+0x156>
 802143a:	f1c1 0114 	rsb	r1, r1, #20
 802143e:	fa46 fc01 	asr.w	ip, r6, r1
 8021442:	fa0c f101 	lsl.w	r1, ip, r1
 8021446:	42b1      	cmp	r1, r6
 8021448:	f040 848c 	bne.w	8021d64 <__ieee754_pow+0x9d4>
 802144c:	f00c 0c01 	and.w	ip, ip, #1
 8021450:	f1cc 0102 	rsb	r1, ip, #2
 8021454:	9100      	str	r1, [sp, #0]
 8021456:	4959      	ldr	r1, [pc, #356]	; (80215bc <__ieee754_pow+0x22c>)
 8021458:	428e      	cmp	r6, r1
 802145a:	d12d      	bne.n	80214b8 <__ieee754_pow+0x128>
 802145c:	2f00      	cmp	r7, #0
 802145e:	da79      	bge.n	8021554 <__ieee754_pow+0x1c4>
 8021460:	4956      	ldr	r1, [pc, #344]	; (80215bc <__ieee754_pow+0x22c>)
 8021462:	2000      	movs	r0, #0
 8021464:	f7df fa02 	bl	800086c <__aeabi_ddiv>
 8021468:	e016      	b.n	8021498 <__ieee754_pow+0x108>
 802146a:	2100      	movs	r1, #0
 802146c:	9100      	str	r1, [sp, #0]
 802146e:	2800      	cmp	r0, #0
 8021470:	d13b      	bne.n	80214ea <__ieee754_pow+0x15a>
 8021472:	494f      	ldr	r1, [pc, #316]	; (80215b0 <__ieee754_pow+0x220>)
 8021474:	428e      	cmp	r6, r1
 8021476:	d1ee      	bne.n	8021456 <__ieee754_pow+0xc6>
 8021478:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802147c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8021480:	ea53 0308 	orrs.w	r3, r3, r8
 8021484:	f000 8466 	beq.w	8021d54 <__ieee754_pow+0x9c4>
 8021488:	4b4d      	ldr	r3, [pc, #308]	; (80215c0 <__ieee754_pow+0x230>)
 802148a:	429c      	cmp	r4, r3
 802148c:	dd0d      	ble.n	80214aa <__ieee754_pow+0x11a>
 802148e:	2f00      	cmp	r7, #0
 8021490:	f280 8464 	bge.w	8021d5c <__ieee754_pow+0x9cc>
 8021494:	2000      	movs	r0, #0
 8021496:	2100      	movs	r1, #0
 8021498:	ec41 0b10 	vmov	d0, r0, r1
 802149c:	b00d      	add	sp, #52	; 0x34
 802149e:	ecbd 8b06 	vpop	{d8-d10}
 80214a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214a6:	2102      	movs	r1, #2
 80214a8:	e7e0      	b.n	802146c <__ieee754_pow+0xdc>
 80214aa:	2f00      	cmp	r7, #0
 80214ac:	daf2      	bge.n	8021494 <__ieee754_pow+0x104>
 80214ae:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80214b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80214b6:	e7ef      	b.n	8021498 <__ieee754_pow+0x108>
 80214b8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80214bc:	d104      	bne.n	80214c8 <__ieee754_pow+0x138>
 80214be:	4610      	mov	r0, r2
 80214c0:	4619      	mov	r1, r3
 80214c2:	f7df f8a9 	bl	8000618 <__aeabi_dmul>
 80214c6:	e7e7      	b.n	8021498 <__ieee754_pow+0x108>
 80214c8:	493e      	ldr	r1, [pc, #248]	; (80215c4 <__ieee754_pow+0x234>)
 80214ca:	428f      	cmp	r7, r1
 80214cc:	d10d      	bne.n	80214ea <__ieee754_pow+0x15a>
 80214ce:	f1b9 0f00 	cmp.w	r9, #0
 80214d2:	db0a      	blt.n	80214ea <__ieee754_pow+0x15a>
 80214d4:	ec43 2b10 	vmov	d0, r2, r3
 80214d8:	b00d      	add	sp, #52	; 0x34
 80214da:	ecbd 8b06 	vpop	{d8-d10}
 80214de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214e2:	f000 bc77 	b.w	8021dd4 <__ieee754_sqrt>
 80214e6:	2100      	movs	r1, #0
 80214e8:	9100      	str	r1, [sp, #0]
 80214ea:	ec43 2b10 	vmov	d0, r2, r3
 80214ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80214f2:	f000 fd23 	bl	8021f3c <fabs>
 80214f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80214fa:	ec51 0b10 	vmov	r0, r1, d0
 80214fe:	f1b8 0f00 	cmp.w	r8, #0
 8021502:	d12a      	bne.n	802155a <__ieee754_pow+0x1ca>
 8021504:	b12c      	cbz	r4, 8021512 <__ieee754_pow+0x182>
 8021506:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80215bc <__ieee754_pow+0x22c>
 802150a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 802150e:	45e6      	cmp	lr, ip
 8021510:	d123      	bne.n	802155a <__ieee754_pow+0x1ca>
 8021512:	2f00      	cmp	r7, #0
 8021514:	da05      	bge.n	8021522 <__ieee754_pow+0x192>
 8021516:	4602      	mov	r2, r0
 8021518:	460b      	mov	r3, r1
 802151a:	2000      	movs	r0, #0
 802151c:	4927      	ldr	r1, [pc, #156]	; (80215bc <__ieee754_pow+0x22c>)
 802151e:	f7df f9a5 	bl	800086c <__aeabi_ddiv>
 8021522:	f1b9 0f00 	cmp.w	r9, #0
 8021526:	dab7      	bge.n	8021498 <__ieee754_pow+0x108>
 8021528:	9b00      	ldr	r3, [sp, #0]
 802152a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802152e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8021532:	4323      	orrs	r3, r4
 8021534:	d108      	bne.n	8021548 <__ieee754_pow+0x1b8>
 8021536:	4602      	mov	r2, r0
 8021538:	460b      	mov	r3, r1
 802153a:	4610      	mov	r0, r2
 802153c:	4619      	mov	r1, r3
 802153e:	f7de feb3 	bl	80002a8 <__aeabi_dsub>
 8021542:	4602      	mov	r2, r0
 8021544:	460b      	mov	r3, r1
 8021546:	e78d      	b.n	8021464 <__ieee754_pow+0xd4>
 8021548:	9b00      	ldr	r3, [sp, #0]
 802154a:	2b01      	cmp	r3, #1
 802154c:	d1a4      	bne.n	8021498 <__ieee754_pow+0x108>
 802154e:	4602      	mov	r2, r0
 8021550:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021554:	4610      	mov	r0, r2
 8021556:	4619      	mov	r1, r3
 8021558:	e79e      	b.n	8021498 <__ieee754_pow+0x108>
 802155a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 802155e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8021562:	950a      	str	r5, [sp, #40]	; 0x28
 8021564:	9d00      	ldr	r5, [sp, #0]
 8021566:	46ac      	mov	ip, r5
 8021568:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802156a:	ea5c 0505 	orrs.w	r5, ip, r5
 802156e:	d0e4      	beq.n	802153a <__ieee754_pow+0x1aa>
 8021570:	4b15      	ldr	r3, [pc, #84]	; (80215c8 <__ieee754_pow+0x238>)
 8021572:	429e      	cmp	r6, r3
 8021574:	f340 80fc 	ble.w	8021770 <__ieee754_pow+0x3e0>
 8021578:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 802157c:	429e      	cmp	r6, r3
 802157e:	4b10      	ldr	r3, [pc, #64]	; (80215c0 <__ieee754_pow+0x230>)
 8021580:	dd07      	ble.n	8021592 <__ieee754_pow+0x202>
 8021582:	429c      	cmp	r4, r3
 8021584:	dc0a      	bgt.n	802159c <__ieee754_pow+0x20c>
 8021586:	2f00      	cmp	r7, #0
 8021588:	da84      	bge.n	8021494 <__ieee754_pow+0x104>
 802158a:	a307      	add	r3, pc, #28	; (adr r3, 80215a8 <__ieee754_pow+0x218>)
 802158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021590:	e795      	b.n	80214be <__ieee754_pow+0x12e>
 8021592:	429c      	cmp	r4, r3
 8021594:	dbf7      	blt.n	8021586 <__ieee754_pow+0x1f6>
 8021596:	4b09      	ldr	r3, [pc, #36]	; (80215bc <__ieee754_pow+0x22c>)
 8021598:	429c      	cmp	r4, r3
 802159a:	dd17      	ble.n	80215cc <__ieee754_pow+0x23c>
 802159c:	2f00      	cmp	r7, #0
 802159e:	dcf4      	bgt.n	802158a <__ieee754_pow+0x1fa>
 80215a0:	e778      	b.n	8021494 <__ieee754_pow+0x104>
 80215a2:	bf00      	nop
 80215a4:	f3af 8000 	nop.w
 80215a8:	8800759c 	.word	0x8800759c
 80215ac:	7e37e43c 	.word	0x7e37e43c
 80215b0:	7ff00000 	.word	0x7ff00000
 80215b4:	08026f75 	.word	0x08026f75
 80215b8:	433fffff 	.word	0x433fffff
 80215bc:	3ff00000 	.word	0x3ff00000
 80215c0:	3fefffff 	.word	0x3fefffff
 80215c4:	3fe00000 	.word	0x3fe00000
 80215c8:	41e00000 	.word	0x41e00000
 80215cc:	4b64      	ldr	r3, [pc, #400]	; (8021760 <__ieee754_pow+0x3d0>)
 80215ce:	2200      	movs	r2, #0
 80215d0:	f7de fe6a 	bl	80002a8 <__aeabi_dsub>
 80215d4:	a356      	add	r3, pc, #344	; (adr r3, 8021730 <__ieee754_pow+0x3a0>)
 80215d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215da:	4604      	mov	r4, r0
 80215dc:	460d      	mov	r5, r1
 80215de:	f7df f81b 	bl	8000618 <__aeabi_dmul>
 80215e2:	a355      	add	r3, pc, #340	; (adr r3, 8021738 <__ieee754_pow+0x3a8>)
 80215e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215e8:	4606      	mov	r6, r0
 80215ea:	460f      	mov	r7, r1
 80215ec:	4620      	mov	r0, r4
 80215ee:	4629      	mov	r1, r5
 80215f0:	f7df f812 	bl	8000618 <__aeabi_dmul>
 80215f4:	4b5b      	ldr	r3, [pc, #364]	; (8021764 <__ieee754_pow+0x3d4>)
 80215f6:	4682      	mov	sl, r0
 80215f8:	468b      	mov	fp, r1
 80215fa:	2200      	movs	r2, #0
 80215fc:	4620      	mov	r0, r4
 80215fe:	4629      	mov	r1, r5
 8021600:	f7df f80a 	bl	8000618 <__aeabi_dmul>
 8021604:	4602      	mov	r2, r0
 8021606:	460b      	mov	r3, r1
 8021608:	a14d      	add	r1, pc, #308	; (adr r1, 8021740 <__ieee754_pow+0x3b0>)
 802160a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802160e:	f7de fe4b 	bl	80002a8 <__aeabi_dsub>
 8021612:	4622      	mov	r2, r4
 8021614:	462b      	mov	r3, r5
 8021616:	f7de ffff 	bl	8000618 <__aeabi_dmul>
 802161a:	4602      	mov	r2, r0
 802161c:	460b      	mov	r3, r1
 802161e:	2000      	movs	r0, #0
 8021620:	4951      	ldr	r1, [pc, #324]	; (8021768 <__ieee754_pow+0x3d8>)
 8021622:	f7de fe41 	bl	80002a8 <__aeabi_dsub>
 8021626:	4622      	mov	r2, r4
 8021628:	4680      	mov	r8, r0
 802162a:	4689      	mov	r9, r1
 802162c:	462b      	mov	r3, r5
 802162e:	4620      	mov	r0, r4
 8021630:	4629      	mov	r1, r5
 8021632:	f7de fff1 	bl	8000618 <__aeabi_dmul>
 8021636:	4602      	mov	r2, r0
 8021638:	460b      	mov	r3, r1
 802163a:	4640      	mov	r0, r8
 802163c:	4649      	mov	r1, r9
 802163e:	f7de ffeb 	bl	8000618 <__aeabi_dmul>
 8021642:	a341      	add	r3, pc, #260	; (adr r3, 8021748 <__ieee754_pow+0x3b8>)
 8021644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021648:	f7de ffe6 	bl	8000618 <__aeabi_dmul>
 802164c:	4602      	mov	r2, r0
 802164e:	460b      	mov	r3, r1
 8021650:	4650      	mov	r0, sl
 8021652:	4659      	mov	r1, fp
 8021654:	f7de fe28 	bl	80002a8 <__aeabi_dsub>
 8021658:	4602      	mov	r2, r0
 802165a:	460b      	mov	r3, r1
 802165c:	4680      	mov	r8, r0
 802165e:	4689      	mov	r9, r1
 8021660:	4630      	mov	r0, r6
 8021662:	4639      	mov	r1, r7
 8021664:	f7de fe22 	bl	80002ac <__adddf3>
 8021668:	2400      	movs	r4, #0
 802166a:	4632      	mov	r2, r6
 802166c:	463b      	mov	r3, r7
 802166e:	4620      	mov	r0, r4
 8021670:	460d      	mov	r5, r1
 8021672:	f7de fe19 	bl	80002a8 <__aeabi_dsub>
 8021676:	4602      	mov	r2, r0
 8021678:	460b      	mov	r3, r1
 802167a:	4640      	mov	r0, r8
 802167c:	4649      	mov	r1, r9
 802167e:	f7de fe13 	bl	80002a8 <__aeabi_dsub>
 8021682:	9b00      	ldr	r3, [sp, #0]
 8021684:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021686:	3b01      	subs	r3, #1
 8021688:	4313      	orrs	r3, r2
 802168a:	4682      	mov	sl, r0
 802168c:	468b      	mov	fp, r1
 802168e:	f040 81f1 	bne.w	8021a74 <__ieee754_pow+0x6e4>
 8021692:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8021750 <__ieee754_pow+0x3c0>
 8021696:	eeb0 8a47 	vmov.f32	s16, s14
 802169a:	eef0 8a67 	vmov.f32	s17, s15
 802169e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80216a2:	2600      	movs	r6, #0
 80216a4:	4632      	mov	r2, r6
 80216a6:	463b      	mov	r3, r7
 80216a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80216ac:	f7de fdfc 	bl	80002a8 <__aeabi_dsub>
 80216b0:	4622      	mov	r2, r4
 80216b2:	462b      	mov	r3, r5
 80216b4:	f7de ffb0 	bl	8000618 <__aeabi_dmul>
 80216b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80216bc:	4680      	mov	r8, r0
 80216be:	4689      	mov	r9, r1
 80216c0:	4650      	mov	r0, sl
 80216c2:	4659      	mov	r1, fp
 80216c4:	f7de ffa8 	bl	8000618 <__aeabi_dmul>
 80216c8:	4602      	mov	r2, r0
 80216ca:	460b      	mov	r3, r1
 80216cc:	4640      	mov	r0, r8
 80216ce:	4649      	mov	r1, r9
 80216d0:	f7de fdec 	bl	80002ac <__adddf3>
 80216d4:	4632      	mov	r2, r6
 80216d6:	463b      	mov	r3, r7
 80216d8:	4680      	mov	r8, r0
 80216da:	4689      	mov	r9, r1
 80216dc:	4620      	mov	r0, r4
 80216de:	4629      	mov	r1, r5
 80216e0:	f7de ff9a 	bl	8000618 <__aeabi_dmul>
 80216e4:	460b      	mov	r3, r1
 80216e6:	4604      	mov	r4, r0
 80216e8:	460d      	mov	r5, r1
 80216ea:	4602      	mov	r2, r0
 80216ec:	4649      	mov	r1, r9
 80216ee:	4640      	mov	r0, r8
 80216f0:	f7de fddc 	bl	80002ac <__adddf3>
 80216f4:	4b1d      	ldr	r3, [pc, #116]	; (802176c <__ieee754_pow+0x3dc>)
 80216f6:	4299      	cmp	r1, r3
 80216f8:	ec45 4b19 	vmov	d9, r4, r5
 80216fc:	4606      	mov	r6, r0
 80216fe:	460f      	mov	r7, r1
 8021700:	468b      	mov	fp, r1
 8021702:	f340 82fe 	ble.w	8021d02 <__ieee754_pow+0x972>
 8021706:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 802170a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 802170e:	4303      	orrs	r3, r0
 8021710:	f000 81f0 	beq.w	8021af4 <__ieee754_pow+0x764>
 8021714:	a310      	add	r3, pc, #64	; (adr r3, 8021758 <__ieee754_pow+0x3c8>)
 8021716:	e9d3 2300 	ldrd	r2, r3, [r3]
 802171a:	ec51 0b18 	vmov	r0, r1, d8
 802171e:	f7de ff7b 	bl	8000618 <__aeabi_dmul>
 8021722:	a30d      	add	r3, pc, #52	; (adr r3, 8021758 <__ieee754_pow+0x3c8>)
 8021724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021728:	e6cb      	b.n	80214c2 <__ieee754_pow+0x132>
 802172a:	bf00      	nop
 802172c:	f3af 8000 	nop.w
 8021730:	60000000 	.word	0x60000000
 8021734:	3ff71547 	.word	0x3ff71547
 8021738:	f85ddf44 	.word	0xf85ddf44
 802173c:	3e54ae0b 	.word	0x3e54ae0b
 8021740:	55555555 	.word	0x55555555
 8021744:	3fd55555 	.word	0x3fd55555
 8021748:	652b82fe 	.word	0x652b82fe
 802174c:	3ff71547 	.word	0x3ff71547
 8021750:	00000000 	.word	0x00000000
 8021754:	bff00000 	.word	0xbff00000
 8021758:	8800759c 	.word	0x8800759c
 802175c:	7e37e43c 	.word	0x7e37e43c
 8021760:	3ff00000 	.word	0x3ff00000
 8021764:	3fd00000 	.word	0x3fd00000
 8021768:	3fe00000 	.word	0x3fe00000
 802176c:	408fffff 	.word	0x408fffff
 8021770:	4bd7      	ldr	r3, [pc, #860]	; (8021ad0 <__ieee754_pow+0x740>)
 8021772:	ea03 0309 	and.w	r3, r3, r9
 8021776:	2200      	movs	r2, #0
 8021778:	b92b      	cbnz	r3, 8021786 <__ieee754_pow+0x3f6>
 802177a:	4bd6      	ldr	r3, [pc, #856]	; (8021ad4 <__ieee754_pow+0x744>)
 802177c:	f7de ff4c 	bl	8000618 <__aeabi_dmul>
 8021780:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8021784:	460c      	mov	r4, r1
 8021786:	1523      	asrs	r3, r4, #20
 8021788:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802178c:	4413      	add	r3, r2
 802178e:	9309      	str	r3, [sp, #36]	; 0x24
 8021790:	4bd1      	ldr	r3, [pc, #836]	; (8021ad8 <__ieee754_pow+0x748>)
 8021792:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8021796:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 802179a:	429c      	cmp	r4, r3
 802179c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80217a0:	dd08      	ble.n	80217b4 <__ieee754_pow+0x424>
 80217a2:	4bce      	ldr	r3, [pc, #824]	; (8021adc <__ieee754_pow+0x74c>)
 80217a4:	429c      	cmp	r4, r3
 80217a6:	f340 8163 	ble.w	8021a70 <__ieee754_pow+0x6e0>
 80217aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80217ac:	3301      	adds	r3, #1
 80217ae:	9309      	str	r3, [sp, #36]	; 0x24
 80217b0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80217b4:	2400      	movs	r4, #0
 80217b6:	00e3      	lsls	r3, r4, #3
 80217b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80217ba:	4bc9      	ldr	r3, [pc, #804]	; (8021ae0 <__ieee754_pow+0x750>)
 80217bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80217c0:	ed93 7b00 	vldr	d7, [r3]
 80217c4:	4629      	mov	r1, r5
 80217c6:	ec53 2b17 	vmov	r2, r3, d7
 80217ca:	eeb0 8a47 	vmov.f32	s16, s14
 80217ce:	eef0 8a67 	vmov.f32	s17, s15
 80217d2:	4682      	mov	sl, r0
 80217d4:	f7de fd68 	bl	80002a8 <__aeabi_dsub>
 80217d8:	4652      	mov	r2, sl
 80217da:	4606      	mov	r6, r0
 80217dc:	460f      	mov	r7, r1
 80217de:	462b      	mov	r3, r5
 80217e0:	ec51 0b18 	vmov	r0, r1, d8
 80217e4:	f7de fd62 	bl	80002ac <__adddf3>
 80217e8:	4602      	mov	r2, r0
 80217ea:	460b      	mov	r3, r1
 80217ec:	2000      	movs	r0, #0
 80217ee:	49bd      	ldr	r1, [pc, #756]	; (8021ae4 <__ieee754_pow+0x754>)
 80217f0:	f7df f83c 	bl	800086c <__aeabi_ddiv>
 80217f4:	ec41 0b19 	vmov	d9, r0, r1
 80217f8:	4602      	mov	r2, r0
 80217fa:	460b      	mov	r3, r1
 80217fc:	4630      	mov	r0, r6
 80217fe:	4639      	mov	r1, r7
 8021800:	f7de ff0a 	bl	8000618 <__aeabi_dmul>
 8021804:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8021808:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802180c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8021810:	2300      	movs	r3, #0
 8021812:	9304      	str	r3, [sp, #16]
 8021814:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8021818:	46ab      	mov	fp, r5
 802181a:	106d      	asrs	r5, r5, #1
 802181c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8021820:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8021824:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8021828:	2200      	movs	r2, #0
 802182a:	4640      	mov	r0, r8
 802182c:	4649      	mov	r1, r9
 802182e:	4614      	mov	r4, r2
 8021830:	461d      	mov	r5, r3
 8021832:	f7de fef1 	bl	8000618 <__aeabi_dmul>
 8021836:	4602      	mov	r2, r0
 8021838:	460b      	mov	r3, r1
 802183a:	4630      	mov	r0, r6
 802183c:	4639      	mov	r1, r7
 802183e:	f7de fd33 	bl	80002a8 <__aeabi_dsub>
 8021842:	ec53 2b18 	vmov	r2, r3, d8
 8021846:	4606      	mov	r6, r0
 8021848:	460f      	mov	r7, r1
 802184a:	4620      	mov	r0, r4
 802184c:	4629      	mov	r1, r5
 802184e:	f7de fd2b 	bl	80002a8 <__aeabi_dsub>
 8021852:	4602      	mov	r2, r0
 8021854:	460b      	mov	r3, r1
 8021856:	4650      	mov	r0, sl
 8021858:	4659      	mov	r1, fp
 802185a:	f7de fd25 	bl	80002a8 <__aeabi_dsub>
 802185e:	4642      	mov	r2, r8
 8021860:	464b      	mov	r3, r9
 8021862:	f7de fed9 	bl	8000618 <__aeabi_dmul>
 8021866:	4602      	mov	r2, r0
 8021868:	460b      	mov	r3, r1
 802186a:	4630      	mov	r0, r6
 802186c:	4639      	mov	r1, r7
 802186e:	f7de fd1b 	bl	80002a8 <__aeabi_dsub>
 8021872:	ec53 2b19 	vmov	r2, r3, d9
 8021876:	f7de fecf 	bl	8000618 <__aeabi_dmul>
 802187a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802187e:	ec41 0b18 	vmov	d8, r0, r1
 8021882:	4610      	mov	r0, r2
 8021884:	4619      	mov	r1, r3
 8021886:	f7de fec7 	bl	8000618 <__aeabi_dmul>
 802188a:	a37d      	add	r3, pc, #500	; (adr r3, 8021a80 <__ieee754_pow+0x6f0>)
 802188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021890:	4604      	mov	r4, r0
 8021892:	460d      	mov	r5, r1
 8021894:	f7de fec0 	bl	8000618 <__aeabi_dmul>
 8021898:	a37b      	add	r3, pc, #492	; (adr r3, 8021a88 <__ieee754_pow+0x6f8>)
 802189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802189e:	f7de fd05 	bl	80002ac <__adddf3>
 80218a2:	4622      	mov	r2, r4
 80218a4:	462b      	mov	r3, r5
 80218a6:	f7de feb7 	bl	8000618 <__aeabi_dmul>
 80218aa:	a379      	add	r3, pc, #484	; (adr r3, 8021a90 <__ieee754_pow+0x700>)
 80218ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218b0:	f7de fcfc 	bl	80002ac <__adddf3>
 80218b4:	4622      	mov	r2, r4
 80218b6:	462b      	mov	r3, r5
 80218b8:	f7de feae 	bl	8000618 <__aeabi_dmul>
 80218bc:	a376      	add	r3, pc, #472	; (adr r3, 8021a98 <__ieee754_pow+0x708>)
 80218be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218c2:	f7de fcf3 	bl	80002ac <__adddf3>
 80218c6:	4622      	mov	r2, r4
 80218c8:	462b      	mov	r3, r5
 80218ca:	f7de fea5 	bl	8000618 <__aeabi_dmul>
 80218ce:	a374      	add	r3, pc, #464	; (adr r3, 8021aa0 <__ieee754_pow+0x710>)
 80218d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218d4:	f7de fcea 	bl	80002ac <__adddf3>
 80218d8:	4622      	mov	r2, r4
 80218da:	462b      	mov	r3, r5
 80218dc:	f7de fe9c 	bl	8000618 <__aeabi_dmul>
 80218e0:	a371      	add	r3, pc, #452	; (adr r3, 8021aa8 <__ieee754_pow+0x718>)
 80218e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218e6:	f7de fce1 	bl	80002ac <__adddf3>
 80218ea:	4622      	mov	r2, r4
 80218ec:	4606      	mov	r6, r0
 80218ee:	460f      	mov	r7, r1
 80218f0:	462b      	mov	r3, r5
 80218f2:	4620      	mov	r0, r4
 80218f4:	4629      	mov	r1, r5
 80218f6:	f7de fe8f 	bl	8000618 <__aeabi_dmul>
 80218fa:	4602      	mov	r2, r0
 80218fc:	460b      	mov	r3, r1
 80218fe:	4630      	mov	r0, r6
 8021900:	4639      	mov	r1, r7
 8021902:	f7de fe89 	bl	8000618 <__aeabi_dmul>
 8021906:	4642      	mov	r2, r8
 8021908:	4604      	mov	r4, r0
 802190a:	460d      	mov	r5, r1
 802190c:	464b      	mov	r3, r9
 802190e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8021912:	f7de fccb 	bl	80002ac <__adddf3>
 8021916:	ec53 2b18 	vmov	r2, r3, d8
 802191a:	f7de fe7d 	bl	8000618 <__aeabi_dmul>
 802191e:	4622      	mov	r2, r4
 8021920:	462b      	mov	r3, r5
 8021922:	f7de fcc3 	bl	80002ac <__adddf3>
 8021926:	4642      	mov	r2, r8
 8021928:	4682      	mov	sl, r0
 802192a:	468b      	mov	fp, r1
 802192c:	464b      	mov	r3, r9
 802192e:	4640      	mov	r0, r8
 8021930:	4649      	mov	r1, r9
 8021932:	f7de fe71 	bl	8000618 <__aeabi_dmul>
 8021936:	4b6c      	ldr	r3, [pc, #432]	; (8021ae8 <__ieee754_pow+0x758>)
 8021938:	2200      	movs	r2, #0
 802193a:	4606      	mov	r6, r0
 802193c:	460f      	mov	r7, r1
 802193e:	f7de fcb5 	bl	80002ac <__adddf3>
 8021942:	4652      	mov	r2, sl
 8021944:	465b      	mov	r3, fp
 8021946:	f7de fcb1 	bl	80002ac <__adddf3>
 802194a:	9c04      	ldr	r4, [sp, #16]
 802194c:	460d      	mov	r5, r1
 802194e:	4622      	mov	r2, r4
 8021950:	460b      	mov	r3, r1
 8021952:	4640      	mov	r0, r8
 8021954:	4649      	mov	r1, r9
 8021956:	f7de fe5f 	bl	8000618 <__aeabi_dmul>
 802195a:	4b63      	ldr	r3, [pc, #396]	; (8021ae8 <__ieee754_pow+0x758>)
 802195c:	4680      	mov	r8, r0
 802195e:	4689      	mov	r9, r1
 8021960:	2200      	movs	r2, #0
 8021962:	4620      	mov	r0, r4
 8021964:	4629      	mov	r1, r5
 8021966:	f7de fc9f 	bl	80002a8 <__aeabi_dsub>
 802196a:	4632      	mov	r2, r6
 802196c:	463b      	mov	r3, r7
 802196e:	f7de fc9b 	bl	80002a8 <__aeabi_dsub>
 8021972:	4602      	mov	r2, r0
 8021974:	460b      	mov	r3, r1
 8021976:	4650      	mov	r0, sl
 8021978:	4659      	mov	r1, fp
 802197a:	f7de fc95 	bl	80002a8 <__aeabi_dsub>
 802197e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8021982:	f7de fe49 	bl	8000618 <__aeabi_dmul>
 8021986:	4622      	mov	r2, r4
 8021988:	4606      	mov	r6, r0
 802198a:	460f      	mov	r7, r1
 802198c:	462b      	mov	r3, r5
 802198e:	ec51 0b18 	vmov	r0, r1, d8
 8021992:	f7de fe41 	bl	8000618 <__aeabi_dmul>
 8021996:	4602      	mov	r2, r0
 8021998:	460b      	mov	r3, r1
 802199a:	4630      	mov	r0, r6
 802199c:	4639      	mov	r1, r7
 802199e:	f7de fc85 	bl	80002ac <__adddf3>
 80219a2:	4606      	mov	r6, r0
 80219a4:	460f      	mov	r7, r1
 80219a6:	4602      	mov	r2, r0
 80219a8:	460b      	mov	r3, r1
 80219aa:	4640      	mov	r0, r8
 80219ac:	4649      	mov	r1, r9
 80219ae:	f7de fc7d 	bl	80002ac <__adddf3>
 80219b2:	9c04      	ldr	r4, [sp, #16]
 80219b4:	a33e      	add	r3, pc, #248	; (adr r3, 8021ab0 <__ieee754_pow+0x720>)
 80219b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219ba:	4620      	mov	r0, r4
 80219bc:	460d      	mov	r5, r1
 80219be:	f7de fe2b 	bl	8000618 <__aeabi_dmul>
 80219c2:	4642      	mov	r2, r8
 80219c4:	ec41 0b18 	vmov	d8, r0, r1
 80219c8:	464b      	mov	r3, r9
 80219ca:	4620      	mov	r0, r4
 80219cc:	4629      	mov	r1, r5
 80219ce:	f7de fc6b 	bl	80002a8 <__aeabi_dsub>
 80219d2:	4602      	mov	r2, r0
 80219d4:	460b      	mov	r3, r1
 80219d6:	4630      	mov	r0, r6
 80219d8:	4639      	mov	r1, r7
 80219da:	f7de fc65 	bl	80002a8 <__aeabi_dsub>
 80219de:	a336      	add	r3, pc, #216	; (adr r3, 8021ab8 <__ieee754_pow+0x728>)
 80219e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219e4:	f7de fe18 	bl	8000618 <__aeabi_dmul>
 80219e8:	a335      	add	r3, pc, #212	; (adr r3, 8021ac0 <__ieee754_pow+0x730>)
 80219ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219ee:	4606      	mov	r6, r0
 80219f0:	460f      	mov	r7, r1
 80219f2:	4620      	mov	r0, r4
 80219f4:	4629      	mov	r1, r5
 80219f6:	f7de fe0f 	bl	8000618 <__aeabi_dmul>
 80219fa:	4602      	mov	r2, r0
 80219fc:	460b      	mov	r3, r1
 80219fe:	4630      	mov	r0, r6
 8021a00:	4639      	mov	r1, r7
 8021a02:	f7de fc53 	bl	80002ac <__adddf3>
 8021a06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021a08:	4b38      	ldr	r3, [pc, #224]	; (8021aec <__ieee754_pow+0x75c>)
 8021a0a:	4413      	add	r3, r2
 8021a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a10:	f7de fc4c 	bl	80002ac <__adddf3>
 8021a14:	4682      	mov	sl, r0
 8021a16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021a18:	468b      	mov	fp, r1
 8021a1a:	f7de fd93 	bl	8000544 <__aeabi_i2d>
 8021a1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021a20:	4b33      	ldr	r3, [pc, #204]	; (8021af0 <__ieee754_pow+0x760>)
 8021a22:	4413      	add	r3, r2
 8021a24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021a28:	4606      	mov	r6, r0
 8021a2a:	460f      	mov	r7, r1
 8021a2c:	4652      	mov	r2, sl
 8021a2e:	465b      	mov	r3, fp
 8021a30:	ec51 0b18 	vmov	r0, r1, d8
 8021a34:	f7de fc3a 	bl	80002ac <__adddf3>
 8021a38:	4642      	mov	r2, r8
 8021a3a:	464b      	mov	r3, r9
 8021a3c:	f7de fc36 	bl	80002ac <__adddf3>
 8021a40:	4632      	mov	r2, r6
 8021a42:	463b      	mov	r3, r7
 8021a44:	f7de fc32 	bl	80002ac <__adddf3>
 8021a48:	9c04      	ldr	r4, [sp, #16]
 8021a4a:	4632      	mov	r2, r6
 8021a4c:	463b      	mov	r3, r7
 8021a4e:	4620      	mov	r0, r4
 8021a50:	460d      	mov	r5, r1
 8021a52:	f7de fc29 	bl	80002a8 <__aeabi_dsub>
 8021a56:	4642      	mov	r2, r8
 8021a58:	464b      	mov	r3, r9
 8021a5a:	f7de fc25 	bl	80002a8 <__aeabi_dsub>
 8021a5e:	ec53 2b18 	vmov	r2, r3, d8
 8021a62:	f7de fc21 	bl	80002a8 <__aeabi_dsub>
 8021a66:	4602      	mov	r2, r0
 8021a68:	460b      	mov	r3, r1
 8021a6a:	4650      	mov	r0, sl
 8021a6c:	4659      	mov	r1, fp
 8021a6e:	e606      	b.n	802167e <__ieee754_pow+0x2ee>
 8021a70:	2401      	movs	r4, #1
 8021a72:	e6a0      	b.n	80217b6 <__ieee754_pow+0x426>
 8021a74:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8021ac8 <__ieee754_pow+0x738>
 8021a78:	e60d      	b.n	8021696 <__ieee754_pow+0x306>
 8021a7a:	bf00      	nop
 8021a7c:	f3af 8000 	nop.w
 8021a80:	4a454eef 	.word	0x4a454eef
 8021a84:	3fca7e28 	.word	0x3fca7e28
 8021a88:	93c9db65 	.word	0x93c9db65
 8021a8c:	3fcd864a 	.word	0x3fcd864a
 8021a90:	a91d4101 	.word	0xa91d4101
 8021a94:	3fd17460 	.word	0x3fd17460
 8021a98:	518f264d 	.word	0x518f264d
 8021a9c:	3fd55555 	.word	0x3fd55555
 8021aa0:	db6fabff 	.word	0xdb6fabff
 8021aa4:	3fdb6db6 	.word	0x3fdb6db6
 8021aa8:	33333303 	.word	0x33333303
 8021aac:	3fe33333 	.word	0x3fe33333
 8021ab0:	e0000000 	.word	0xe0000000
 8021ab4:	3feec709 	.word	0x3feec709
 8021ab8:	dc3a03fd 	.word	0xdc3a03fd
 8021abc:	3feec709 	.word	0x3feec709
 8021ac0:	145b01f5 	.word	0x145b01f5
 8021ac4:	be3e2fe0 	.word	0xbe3e2fe0
 8021ac8:	00000000 	.word	0x00000000
 8021acc:	3ff00000 	.word	0x3ff00000
 8021ad0:	7ff00000 	.word	0x7ff00000
 8021ad4:	43400000 	.word	0x43400000
 8021ad8:	0003988e 	.word	0x0003988e
 8021adc:	000bb679 	.word	0x000bb679
 8021ae0:	08027028 	.word	0x08027028
 8021ae4:	3ff00000 	.word	0x3ff00000
 8021ae8:	40080000 	.word	0x40080000
 8021aec:	08027048 	.word	0x08027048
 8021af0:	08027038 	.word	0x08027038
 8021af4:	a3b5      	add	r3, pc, #724	; (adr r3, 8021dcc <__ieee754_pow+0xa3c>)
 8021af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021afa:	4640      	mov	r0, r8
 8021afc:	4649      	mov	r1, r9
 8021afe:	f7de fbd5 	bl	80002ac <__adddf3>
 8021b02:	4622      	mov	r2, r4
 8021b04:	ec41 0b1a 	vmov	d10, r0, r1
 8021b08:	462b      	mov	r3, r5
 8021b0a:	4630      	mov	r0, r6
 8021b0c:	4639      	mov	r1, r7
 8021b0e:	f7de fbcb 	bl	80002a8 <__aeabi_dsub>
 8021b12:	4602      	mov	r2, r0
 8021b14:	460b      	mov	r3, r1
 8021b16:	ec51 0b1a 	vmov	r0, r1, d10
 8021b1a:	f7df f80d 	bl	8000b38 <__aeabi_dcmpgt>
 8021b1e:	2800      	cmp	r0, #0
 8021b20:	f47f adf8 	bne.w	8021714 <__ieee754_pow+0x384>
 8021b24:	4aa4      	ldr	r2, [pc, #656]	; (8021db8 <__ieee754_pow+0xa28>)
 8021b26:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8021b2a:	4293      	cmp	r3, r2
 8021b2c:	f340 810b 	ble.w	8021d46 <__ieee754_pow+0x9b6>
 8021b30:	151b      	asrs	r3, r3, #20
 8021b32:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8021b36:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8021b3a:	fa4a f303 	asr.w	r3, sl, r3
 8021b3e:	445b      	add	r3, fp
 8021b40:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8021b44:	4e9d      	ldr	r6, [pc, #628]	; (8021dbc <__ieee754_pow+0xa2c>)
 8021b46:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8021b4a:	4116      	asrs	r6, r2
 8021b4c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8021b50:	2000      	movs	r0, #0
 8021b52:	ea23 0106 	bic.w	r1, r3, r6
 8021b56:	f1c2 0214 	rsb	r2, r2, #20
 8021b5a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8021b5e:	fa4a fa02 	asr.w	sl, sl, r2
 8021b62:	f1bb 0f00 	cmp.w	fp, #0
 8021b66:	4602      	mov	r2, r0
 8021b68:	460b      	mov	r3, r1
 8021b6a:	4620      	mov	r0, r4
 8021b6c:	4629      	mov	r1, r5
 8021b6e:	bfb8      	it	lt
 8021b70:	f1ca 0a00 	rsblt	sl, sl, #0
 8021b74:	f7de fb98 	bl	80002a8 <__aeabi_dsub>
 8021b78:	ec41 0b19 	vmov	d9, r0, r1
 8021b7c:	4642      	mov	r2, r8
 8021b7e:	464b      	mov	r3, r9
 8021b80:	ec51 0b19 	vmov	r0, r1, d9
 8021b84:	f7de fb92 	bl	80002ac <__adddf3>
 8021b88:	2400      	movs	r4, #0
 8021b8a:	a379      	add	r3, pc, #484	; (adr r3, 8021d70 <__ieee754_pow+0x9e0>)
 8021b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b90:	4620      	mov	r0, r4
 8021b92:	460d      	mov	r5, r1
 8021b94:	f7de fd40 	bl	8000618 <__aeabi_dmul>
 8021b98:	ec53 2b19 	vmov	r2, r3, d9
 8021b9c:	4606      	mov	r6, r0
 8021b9e:	460f      	mov	r7, r1
 8021ba0:	4620      	mov	r0, r4
 8021ba2:	4629      	mov	r1, r5
 8021ba4:	f7de fb80 	bl	80002a8 <__aeabi_dsub>
 8021ba8:	4602      	mov	r2, r0
 8021baa:	460b      	mov	r3, r1
 8021bac:	4640      	mov	r0, r8
 8021bae:	4649      	mov	r1, r9
 8021bb0:	f7de fb7a 	bl	80002a8 <__aeabi_dsub>
 8021bb4:	a370      	add	r3, pc, #448	; (adr r3, 8021d78 <__ieee754_pow+0x9e8>)
 8021bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bba:	f7de fd2d 	bl	8000618 <__aeabi_dmul>
 8021bbe:	a370      	add	r3, pc, #448	; (adr r3, 8021d80 <__ieee754_pow+0x9f0>)
 8021bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bc4:	4680      	mov	r8, r0
 8021bc6:	4689      	mov	r9, r1
 8021bc8:	4620      	mov	r0, r4
 8021bca:	4629      	mov	r1, r5
 8021bcc:	f7de fd24 	bl	8000618 <__aeabi_dmul>
 8021bd0:	4602      	mov	r2, r0
 8021bd2:	460b      	mov	r3, r1
 8021bd4:	4640      	mov	r0, r8
 8021bd6:	4649      	mov	r1, r9
 8021bd8:	f7de fb68 	bl	80002ac <__adddf3>
 8021bdc:	4604      	mov	r4, r0
 8021bde:	460d      	mov	r5, r1
 8021be0:	4602      	mov	r2, r0
 8021be2:	460b      	mov	r3, r1
 8021be4:	4630      	mov	r0, r6
 8021be6:	4639      	mov	r1, r7
 8021be8:	f7de fb60 	bl	80002ac <__adddf3>
 8021bec:	4632      	mov	r2, r6
 8021bee:	463b      	mov	r3, r7
 8021bf0:	4680      	mov	r8, r0
 8021bf2:	4689      	mov	r9, r1
 8021bf4:	f7de fb58 	bl	80002a8 <__aeabi_dsub>
 8021bf8:	4602      	mov	r2, r0
 8021bfa:	460b      	mov	r3, r1
 8021bfc:	4620      	mov	r0, r4
 8021bfe:	4629      	mov	r1, r5
 8021c00:	f7de fb52 	bl	80002a8 <__aeabi_dsub>
 8021c04:	4642      	mov	r2, r8
 8021c06:	4606      	mov	r6, r0
 8021c08:	460f      	mov	r7, r1
 8021c0a:	464b      	mov	r3, r9
 8021c0c:	4640      	mov	r0, r8
 8021c0e:	4649      	mov	r1, r9
 8021c10:	f7de fd02 	bl	8000618 <__aeabi_dmul>
 8021c14:	a35c      	add	r3, pc, #368	; (adr r3, 8021d88 <__ieee754_pow+0x9f8>)
 8021c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c1a:	4604      	mov	r4, r0
 8021c1c:	460d      	mov	r5, r1
 8021c1e:	f7de fcfb 	bl	8000618 <__aeabi_dmul>
 8021c22:	a35b      	add	r3, pc, #364	; (adr r3, 8021d90 <__ieee754_pow+0xa00>)
 8021c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c28:	f7de fb3e 	bl	80002a8 <__aeabi_dsub>
 8021c2c:	4622      	mov	r2, r4
 8021c2e:	462b      	mov	r3, r5
 8021c30:	f7de fcf2 	bl	8000618 <__aeabi_dmul>
 8021c34:	a358      	add	r3, pc, #352	; (adr r3, 8021d98 <__ieee754_pow+0xa08>)
 8021c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c3a:	f7de fb37 	bl	80002ac <__adddf3>
 8021c3e:	4622      	mov	r2, r4
 8021c40:	462b      	mov	r3, r5
 8021c42:	f7de fce9 	bl	8000618 <__aeabi_dmul>
 8021c46:	a356      	add	r3, pc, #344	; (adr r3, 8021da0 <__ieee754_pow+0xa10>)
 8021c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c4c:	f7de fb2c 	bl	80002a8 <__aeabi_dsub>
 8021c50:	4622      	mov	r2, r4
 8021c52:	462b      	mov	r3, r5
 8021c54:	f7de fce0 	bl	8000618 <__aeabi_dmul>
 8021c58:	a353      	add	r3, pc, #332	; (adr r3, 8021da8 <__ieee754_pow+0xa18>)
 8021c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c5e:	f7de fb25 	bl	80002ac <__adddf3>
 8021c62:	4622      	mov	r2, r4
 8021c64:	462b      	mov	r3, r5
 8021c66:	f7de fcd7 	bl	8000618 <__aeabi_dmul>
 8021c6a:	4602      	mov	r2, r0
 8021c6c:	460b      	mov	r3, r1
 8021c6e:	4640      	mov	r0, r8
 8021c70:	4649      	mov	r1, r9
 8021c72:	f7de fb19 	bl	80002a8 <__aeabi_dsub>
 8021c76:	4604      	mov	r4, r0
 8021c78:	460d      	mov	r5, r1
 8021c7a:	4602      	mov	r2, r0
 8021c7c:	460b      	mov	r3, r1
 8021c7e:	4640      	mov	r0, r8
 8021c80:	4649      	mov	r1, r9
 8021c82:	f7de fcc9 	bl	8000618 <__aeabi_dmul>
 8021c86:	2200      	movs	r2, #0
 8021c88:	ec41 0b19 	vmov	d9, r0, r1
 8021c8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021c90:	4620      	mov	r0, r4
 8021c92:	4629      	mov	r1, r5
 8021c94:	f7de fb08 	bl	80002a8 <__aeabi_dsub>
 8021c98:	4602      	mov	r2, r0
 8021c9a:	460b      	mov	r3, r1
 8021c9c:	ec51 0b19 	vmov	r0, r1, d9
 8021ca0:	f7de fde4 	bl	800086c <__aeabi_ddiv>
 8021ca4:	4632      	mov	r2, r6
 8021ca6:	4604      	mov	r4, r0
 8021ca8:	460d      	mov	r5, r1
 8021caa:	463b      	mov	r3, r7
 8021cac:	4640      	mov	r0, r8
 8021cae:	4649      	mov	r1, r9
 8021cb0:	f7de fcb2 	bl	8000618 <__aeabi_dmul>
 8021cb4:	4632      	mov	r2, r6
 8021cb6:	463b      	mov	r3, r7
 8021cb8:	f7de faf8 	bl	80002ac <__adddf3>
 8021cbc:	4602      	mov	r2, r0
 8021cbe:	460b      	mov	r3, r1
 8021cc0:	4620      	mov	r0, r4
 8021cc2:	4629      	mov	r1, r5
 8021cc4:	f7de faf0 	bl	80002a8 <__aeabi_dsub>
 8021cc8:	4642      	mov	r2, r8
 8021cca:	464b      	mov	r3, r9
 8021ccc:	f7de faec 	bl	80002a8 <__aeabi_dsub>
 8021cd0:	460b      	mov	r3, r1
 8021cd2:	4602      	mov	r2, r0
 8021cd4:	493a      	ldr	r1, [pc, #232]	; (8021dc0 <__ieee754_pow+0xa30>)
 8021cd6:	2000      	movs	r0, #0
 8021cd8:	f7de fae6 	bl	80002a8 <__aeabi_dsub>
 8021cdc:	e9cd 0100 	strd	r0, r1, [sp]
 8021ce0:	9b01      	ldr	r3, [sp, #4]
 8021ce2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8021ce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8021cea:	da2f      	bge.n	8021d4c <__ieee754_pow+0x9bc>
 8021cec:	4650      	mov	r0, sl
 8021cee:	ed9d 0b00 	vldr	d0, [sp]
 8021cf2:	f000 f9cd 	bl	8022090 <scalbn>
 8021cf6:	ec51 0b10 	vmov	r0, r1, d0
 8021cfa:	ec53 2b18 	vmov	r2, r3, d8
 8021cfe:	f7ff bbe0 	b.w	80214c2 <__ieee754_pow+0x132>
 8021d02:	4b30      	ldr	r3, [pc, #192]	; (8021dc4 <__ieee754_pow+0xa34>)
 8021d04:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8021d08:	429e      	cmp	r6, r3
 8021d0a:	f77f af0b 	ble.w	8021b24 <__ieee754_pow+0x794>
 8021d0e:	4b2e      	ldr	r3, [pc, #184]	; (8021dc8 <__ieee754_pow+0xa38>)
 8021d10:	440b      	add	r3, r1
 8021d12:	4303      	orrs	r3, r0
 8021d14:	d00b      	beq.n	8021d2e <__ieee754_pow+0x99e>
 8021d16:	a326      	add	r3, pc, #152	; (adr r3, 8021db0 <__ieee754_pow+0xa20>)
 8021d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d1c:	ec51 0b18 	vmov	r0, r1, d8
 8021d20:	f7de fc7a 	bl	8000618 <__aeabi_dmul>
 8021d24:	a322      	add	r3, pc, #136	; (adr r3, 8021db0 <__ieee754_pow+0xa20>)
 8021d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d2a:	f7ff bbca 	b.w	80214c2 <__ieee754_pow+0x132>
 8021d2e:	4622      	mov	r2, r4
 8021d30:	462b      	mov	r3, r5
 8021d32:	f7de fab9 	bl	80002a8 <__aeabi_dsub>
 8021d36:	4642      	mov	r2, r8
 8021d38:	464b      	mov	r3, r9
 8021d3a:	f7de fef3 	bl	8000b24 <__aeabi_dcmpge>
 8021d3e:	2800      	cmp	r0, #0
 8021d40:	f43f aef0 	beq.w	8021b24 <__ieee754_pow+0x794>
 8021d44:	e7e7      	b.n	8021d16 <__ieee754_pow+0x986>
 8021d46:	f04f 0a00 	mov.w	sl, #0
 8021d4a:	e717      	b.n	8021b7c <__ieee754_pow+0x7ec>
 8021d4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021d50:	4619      	mov	r1, r3
 8021d52:	e7d2      	b.n	8021cfa <__ieee754_pow+0x96a>
 8021d54:	491a      	ldr	r1, [pc, #104]	; (8021dc0 <__ieee754_pow+0xa30>)
 8021d56:	2000      	movs	r0, #0
 8021d58:	f7ff bb9e 	b.w	8021498 <__ieee754_pow+0x108>
 8021d5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021d60:	f7ff bb9a 	b.w	8021498 <__ieee754_pow+0x108>
 8021d64:	9000      	str	r0, [sp, #0]
 8021d66:	f7ff bb76 	b.w	8021456 <__ieee754_pow+0xc6>
 8021d6a:	2100      	movs	r1, #0
 8021d6c:	f7ff bb60 	b.w	8021430 <__ieee754_pow+0xa0>
 8021d70:	00000000 	.word	0x00000000
 8021d74:	3fe62e43 	.word	0x3fe62e43
 8021d78:	fefa39ef 	.word	0xfefa39ef
 8021d7c:	3fe62e42 	.word	0x3fe62e42
 8021d80:	0ca86c39 	.word	0x0ca86c39
 8021d84:	be205c61 	.word	0xbe205c61
 8021d88:	72bea4d0 	.word	0x72bea4d0
 8021d8c:	3e663769 	.word	0x3e663769
 8021d90:	c5d26bf1 	.word	0xc5d26bf1
 8021d94:	3ebbbd41 	.word	0x3ebbbd41
 8021d98:	af25de2c 	.word	0xaf25de2c
 8021d9c:	3f11566a 	.word	0x3f11566a
 8021da0:	16bebd93 	.word	0x16bebd93
 8021da4:	3f66c16c 	.word	0x3f66c16c
 8021da8:	5555553e 	.word	0x5555553e
 8021dac:	3fc55555 	.word	0x3fc55555
 8021db0:	c2f8f359 	.word	0xc2f8f359
 8021db4:	01a56e1f 	.word	0x01a56e1f
 8021db8:	3fe00000 	.word	0x3fe00000
 8021dbc:	000fffff 	.word	0x000fffff
 8021dc0:	3ff00000 	.word	0x3ff00000
 8021dc4:	4090cbff 	.word	0x4090cbff
 8021dc8:	3f6f3400 	.word	0x3f6f3400
 8021dcc:	652b82fe 	.word	0x652b82fe
 8021dd0:	3c971547 	.word	0x3c971547

08021dd4 <__ieee754_sqrt>:
 8021dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021dd8:	ec55 4b10 	vmov	r4, r5, d0
 8021ddc:	4e56      	ldr	r6, [pc, #344]	; (8021f38 <__ieee754_sqrt+0x164>)
 8021dde:	43ae      	bics	r6, r5
 8021de0:	ee10 0a10 	vmov	r0, s0
 8021de4:	ee10 3a10 	vmov	r3, s0
 8021de8:	4629      	mov	r1, r5
 8021dea:	462a      	mov	r2, r5
 8021dec:	d110      	bne.n	8021e10 <__ieee754_sqrt+0x3c>
 8021dee:	ee10 2a10 	vmov	r2, s0
 8021df2:	462b      	mov	r3, r5
 8021df4:	f7de fc10 	bl	8000618 <__aeabi_dmul>
 8021df8:	4602      	mov	r2, r0
 8021dfa:	460b      	mov	r3, r1
 8021dfc:	4620      	mov	r0, r4
 8021dfe:	4629      	mov	r1, r5
 8021e00:	f7de fa54 	bl	80002ac <__adddf3>
 8021e04:	4604      	mov	r4, r0
 8021e06:	460d      	mov	r5, r1
 8021e08:	ec45 4b10 	vmov	d0, r4, r5
 8021e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021e10:	2d00      	cmp	r5, #0
 8021e12:	dc10      	bgt.n	8021e36 <__ieee754_sqrt+0x62>
 8021e14:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8021e18:	4330      	orrs	r0, r6
 8021e1a:	d0f5      	beq.n	8021e08 <__ieee754_sqrt+0x34>
 8021e1c:	b15d      	cbz	r5, 8021e36 <__ieee754_sqrt+0x62>
 8021e1e:	ee10 2a10 	vmov	r2, s0
 8021e22:	462b      	mov	r3, r5
 8021e24:	ee10 0a10 	vmov	r0, s0
 8021e28:	f7de fa3e 	bl	80002a8 <__aeabi_dsub>
 8021e2c:	4602      	mov	r2, r0
 8021e2e:	460b      	mov	r3, r1
 8021e30:	f7de fd1c 	bl	800086c <__aeabi_ddiv>
 8021e34:	e7e6      	b.n	8021e04 <__ieee754_sqrt+0x30>
 8021e36:	1509      	asrs	r1, r1, #20
 8021e38:	d076      	beq.n	8021f28 <__ieee754_sqrt+0x154>
 8021e3a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8021e3e:	07ce      	lsls	r6, r1, #31
 8021e40:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8021e44:	bf5e      	ittt	pl
 8021e46:	0fda      	lsrpl	r2, r3, #31
 8021e48:	005b      	lslpl	r3, r3, #1
 8021e4a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8021e4e:	0fda      	lsrs	r2, r3, #31
 8021e50:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8021e54:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8021e58:	2000      	movs	r0, #0
 8021e5a:	106d      	asrs	r5, r5, #1
 8021e5c:	005b      	lsls	r3, r3, #1
 8021e5e:	f04f 0e16 	mov.w	lr, #22
 8021e62:	4684      	mov	ip, r0
 8021e64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8021e68:	eb0c 0401 	add.w	r4, ip, r1
 8021e6c:	4294      	cmp	r4, r2
 8021e6e:	bfde      	ittt	le
 8021e70:	1b12      	suble	r2, r2, r4
 8021e72:	eb04 0c01 	addle.w	ip, r4, r1
 8021e76:	1840      	addle	r0, r0, r1
 8021e78:	0052      	lsls	r2, r2, #1
 8021e7a:	f1be 0e01 	subs.w	lr, lr, #1
 8021e7e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8021e82:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8021e86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021e8a:	d1ed      	bne.n	8021e68 <__ieee754_sqrt+0x94>
 8021e8c:	4671      	mov	r1, lr
 8021e8e:	2720      	movs	r7, #32
 8021e90:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8021e94:	4562      	cmp	r2, ip
 8021e96:	eb04 060e 	add.w	r6, r4, lr
 8021e9a:	dc02      	bgt.n	8021ea2 <__ieee754_sqrt+0xce>
 8021e9c:	d113      	bne.n	8021ec6 <__ieee754_sqrt+0xf2>
 8021e9e:	429e      	cmp	r6, r3
 8021ea0:	d811      	bhi.n	8021ec6 <__ieee754_sqrt+0xf2>
 8021ea2:	2e00      	cmp	r6, #0
 8021ea4:	eb06 0e04 	add.w	lr, r6, r4
 8021ea8:	da43      	bge.n	8021f32 <__ieee754_sqrt+0x15e>
 8021eaa:	f1be 0f00 	cmp.w	lr, #0
 8021eae:	db40      	blt.n	8021f32 <__ieee754_sqrt+0x15e>
 8021eb0:	f10c 0801 	add.w	r8, ip, #1
 8021eb4:	eba2 020c 	sub.w	r2, r2, ip
 8021eb8:	429e      	cmp	r6, r3
 8021eba:	bf88      	it	hi
 8021ebc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8021ec0:	1b9b      	subs	r3, r3, r6
 8021ec2:	4421      	add	r1, r4
 8021ec4:	46c4      	mov	ip, r8
 8021ec6:	0052      	lsls	r2, r2, #1
 8021ec8:	3f01      	subs	r7, #1
 8021eca:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8021ece:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8021ed2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021ed6:	d1dd      	bne.n	8021e94 <__ieee754_sqrt+0xc0>
 8021ed8:	4313      	orrs	r3, r2
 8021eda:	d006      	beq.n	8021eea <__ieee754_sqrt+0x116>
 8021edc:	1c4c      	adds	r4, r1, #1
 8021ede:	bf13      	iteet	ne
 8021ee0:	3101      	addne	r1, #1
 8021ee2:	3001      	addeq	r0, #1
 8021ee4:	4639      	moveq	r1, r7
 8021ee6:	f021 0101 	bicne.w	r1, r1, #1
 8021eea:	1043      	asrs	r3, r0, #1
 8021eec:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8021ef0:	0849      	lsrs	r1, r1, #1
 8021ef2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8021ef6:	07c2      	lsls	r2, r0, #31
 8021ef8:	bf48      	it	mi
 8021efa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8021efe:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8021f02:	460c      	mov	r4, r1
 8021f04:	463d      	mov	r5, r7
 8021f06:	e77f      	b.n	8021e08 <__ieee754_sqrt+0x34>
 8021f08:	0ada      	lsrs	r2, r3, #11
 8021f0a:	3815      	subs	r0, #21
 8021f0c:	055b      	lsls	r3, r3, #21
 8021f0e:	2a00      	cmp	r2, #0
 8021f10:	d0fa      	beq.n	8021f08 <__ieee754_sqrt+0x134>
 8021f12:	02d7      	lsls	r7, r2, #11
 8021f14:	d50a      	bpl.n	8021f2c <__ieee754_sqrt+0x158>
 8021f16:	f1c1 0420 	rsb	r4, r1, #32
 8021f1a:	fa23 f404 	lsr.w	r4, r3, r4
 8021f1e:	1e4d      	subs	r5, r1, #1
 8021f20:	408b      	lsls	r3, r1
 8021f22:	4322      	orrs	r2, r4
 8021f24:	1b41      	subs	r1, r0, r5
 8021f26:	e788      	b.n	8021e3a <__ieee754_sqrt+0x66>
 8021f28:	4608      	mov	r0, r1
 8021f2a:	e7f0      	b.n	8021f0e <__ieee754_sqrt+0x13a>
 8021f2c:	0052      	lsls	r2, r2, #1
 8021f2e:	3101      	adds	r1, #1
 8021f30:	e7ef      	b.n	8021f12 <__ieee754_sqrt+0x13e>
 8021f32:	46e0      	mov	r8, ip
 8021f34:	e7be      	b.n	8021eb4 <__ieee754_sqrt+0xe0>
 8021f36:	bf00      	nop
 8021f38:	7ff00000 	.word	0x7ff00000

08021f3c <fabs>:
 8021f3c:	ec51 0b10 	vmov	r0, r1, d0
 8021f40:	ee10 2a10 	vmov	r2, s0
 8021f44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8021f48:	ec43 2b10 	vmov	d0, r2, r3
 8021f4c:	4770      	bx	lr

08021f4e <finite>:
 8021f4e:	b082      	sub	sp, #8
 8021f50:	ed8d 0b00 	vstr	d0, [sp]
 8021f54:	9801      	ldr	r0, [sp, #4]
 8021f56:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8021f5a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8021f5e:	0fc0      	lsrs	r0, r0, #31
 8021f60:	b002      	add	sp, #8
 8021f62:	4770      	bx	lr
 8021f64:	0000      	movs	r0, r0
	...

08021f68 <nan>:
 8021f68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8021f70 <nan+0x8>
 8021f6c:	4770      	bx	lr
 8021f6e:	bf00      	nop
 8021f70:	00000000 	.word	0x00000000
 8021f74:	7ff80000 	.word	0x7ff80000

08021f78 <rint>:
 8021f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021f7a:	ec51 0b10 	vmov	r0, r1, d0
 8021f7e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8021f82:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8021f86:	2e13      	cmp	r6, #19
 8021f88:	ee10 4a10 	vmov	r4, s0
 8021f8c:	460b      	mov	r3, r1
 8021f8e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8021f92:	dc58      	bgt.n	8022046 <rint+0xce>
 8021f94:	2e00      	cmp	r6, #0
 8021f96:	da2b      	bge.n	8021ff0 <rint+0x78>
 8021f98:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8021f9c:	4302      	orrs	r2, r0
 8021f9e:	d023      	beq.n	8021fe8 <rint+0x70>
 8021fa0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8021fa4:	4302      	orrs	r2, r0
 8021fa6:	4254      	negs	r4, r2
 8021fa8:	4314      	orrs	r4, r2
 8021faa:	0c4b      	lsrs	r3, r1, #17
 8021fac:	0b24      	lsrs	r4, r4, #12
 8021fae:	045b      	lsls	r3, r3, #17
 8021fb0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8021fb4:	ea44 0103 	orr.w	r1, r4, r3
 8021fb8:	4b32      	ldr	r3, [pc, #200]	; (8022084 <rint+0x10c>)
 8021fba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8021fbe:	e9d3 6700 	ldrd	r6, r7, [r3]
 8021fc2:	4602      	mov	r2, r0
 8021fc4:	460b      	mov	r3, r1
 8021fc6:	4630      	mov	r0, r6
 8021fc8:	4639      	mov	r1, r7
 8021fca:	f7de f96f 	bl	80002ac <__adddf3>
 8021fce:	e9cd 0100 	strd	r0, r1, [sp]
 8021fd2:	463b      	mov	r3, r7
 8021fd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021fd8:	4632      	mov	r2, r6
 8021fda:	f7de f965 	bl	80002a8 <__aeabi_dsub>
 8021fde:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8021fe2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8021fe6:	4639      	mov	r1, r7
 8021fe8:	ec41 0b10 	vmov	d0, r0, r1
 8021fec:	b003      	add	sp, #12
 8021fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021ff0:	4a25      	ldr	r2, [pc, #148]	; (8022088 <rint+0x110>)
 8021ff2:	4132      	asrs	r2, r6
 8021ff4:	ea01 0702 	and.w	r7, r1, r2
 8021ff8:	4307      	orrs	r7, r0
 8021ffa:	d0f5      	beq.n	8021fe8 <rint+0x70>
 8021ffc:	0851      	lsrs	r1, r2, #1
 8021ffe:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8022002:	4314      	orrs	r4, r2
 8022004:	d00c      	beq.n	8022020 <rint+0xa8>
 8022006:	ea23 0201 	bic.w	r2, r3, r1
 802200a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802200e:	2e13      	cmp	r6, #19
 8022010:	fa43 f606 	asr.w	r6, r3, r6
 8022014:	bf0c      	ite	eq
 8022016:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 802201a:	2400      	movne	r4, #0
 802201c:	ea42 0306 	orr.w	r3, r2, r6
 8022020:	4918      	ldr	r1, [pc, #96]	; (8022084 <rint+0x10c>)
 8022022:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8022026:	4622      	mov	r2, r4
 8022028:	e9d5 4500 	ldrd	r4, r5, [r5]
 802202c:	4620      	mov	r0, r4
 802202e:	4629      	mov	r1, r5
 8022030:	f7de f93c 	bl	80002ac <__adddf3>
 8022034:	e9cd 0100 	strd	r0, r1, [sp]
 8022038:	e9dd 0100 	ldrd	r0, r1, [sp]
 802203c:	4622      	mov	r2, r4
 802203e:	462b      	mov	r3, r5
 8022040:	f7de f932 	bl	80002a8 <__aeabi_dsub>
 8022044:	e7d0      	b.n	8021fe8 <rint+0x70>
 8022046:	2e33      	cmp	r6, #51	; 0x33
 8022048:	dd07      	ble.n	802205a <rint+0xe2>
 802204a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802204e:	d1cb      	bne.n	8021fe8 <rint+0x70>
 8022050:	ee10 2a10 	vmov	r2, s0
 8022054:	f7de f92a 	bl	80002ac <__adddf3>
 8022058:	e7c6      	b.n	8021fe8 <rint+0x70>
 802205a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 802205e:	f04f 36ff 	mov.w	r6, #4294967295
 8022062:	40d6      	lsrs	r6, r2
 8022064:	4230      	tst	r0, r6
 8022066:	d0bf      	beq.n	8021fe8 <rint+0x70>
 8022068:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 802206c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8022070:	bf1f      	itttt	ne
 8022072:	ea24 0101 	bicne.w	r1, r4, r1
 8022076:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 802207a:	fa44 f202 	asrne.w	r2, r4, r2
 802207e:	ea41 0402 	orrne.w	r4, r1, r2
 8022082:	e7cd      	b.n	8022020 <rint+0xa8>
 8022084:	08027058 	.word	0x08027058
 8022088:	000fffff 	.word	0x000fffff
 802208c:	00000000 	.word	0x00000000

08022090 <scalbn>:
 8022090:	b570      	push	{r4, r5, r6, lr}
 8022092:	ec55 4b10 	vmov	r4, r5, d0
 8022096:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802209a:	4606      	mov	r6, r0
 802209c:	462b      	mov	r3, r5
 802209e:	b99a      	cbnz	r2, 80220c8 <scalbn+0x38>
 80220a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80220a4:	4323      	orrs	r3, r4
 80220a6:	d036      	beq.n	8022116 <scalbn+0x86>
 80220a8:	4b39      	ldr	r3, [pc, #228]	; (8022190 <scalbn+0x100>)
 80220aa:	4629      	mov	r1, r5
 80220ac:	ee10 0a10 	vmov	r0, s0
 80220b0:	2200      	movs	r2, #0
 80220b2:	f7de fab1 	bl	8000618 <__aeabi_dmul>
 80220b6:	4b37      	ldr	r3, [pc, #220]	; (8022194 <scalbn+0x104>)
 80220b8:	429e      	cmp	r6, r3
 80220ba:	4604      	mov	r4, r0
 80220bc:	460d      	mov	r5, r1
 80220be:	da10      	bge.n	80220e2 <scalbn+0x52>
 80220c0:	a32b      	add	r3, pc, #172	; (adr r3, 8022170 <scalbn+0xe0>)
 80220c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220c6:	e03a      	b.n	802213e <scalbn+0xae>
 80220c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80220cc:	428a      	cmp	r2, r1
 80220ce:	d10c      	bne.n	80220ea <scalbn+0x5a>
 80220d0:	ee10 2a10 	vmov	r2, s0
 80220d4:	4620      	mov	r0, r4
 80220d6:	4629      	mov	r1, r5
 80220d8:	f7de f8e8 	bl	80002ac <__adddf3>
 80220dc:	4604      	mov	r4, r0
 80220de:	460d      	mov	r5, r1
 80220e0:	e019      	b.n	8022116 <scalbn+0x86>
 80220e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80220e6:	460b      	mov	r3, r1
 80220e8:	3a36      	subs	r2, #54	; 0x36
 80220ea:	4432      	add	r2, r6
 80220ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80220f0:	428a      	cmp	r2, r1
 80220f2:	dd08      	ble.n	8022106 <scalbn+0x76>
 80220f4:	2d00      	cmp	r5, #0
 80220f6:	a120      	add	r1, pc, #128	; (adr r1, 8022178 <scalbn+0xe8>)
 80220f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80220fc:	da1c      	bge.n	8022138 <scalbn+0xa8>
 80220fe:	a120      	add	r1, pc, #128	; (adr r1, 8022180 <scalbn+0xf0>)
 8022100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022104:	e018      	b.n	8022138 <scalbn+0xa8>
 8022106:	2a00      	cmp	r2, #0
 8022108:	dd08      	ble.n	802211c <scalbn+0x8c>
 802210a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802210e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8022112:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8022116:	ec45 4b10 	vmov	d0, r4, r5
 802211a:	bd70      	pop	{r4, r5, r6, pc}
 802211c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8022120:	da19      	bge.n	8022156 <scalbn+0xc6>
 8022122:	f24c 3350 	movw	r3, #50000	; 0xc350
 8022126:	429e      	cmp	r6, r3
 8022128:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 802212c:	dd0a      	ble.n	8022144 <scalbn+0xb4>
 802212e:	a112      	add	r1, pc, #72	; (adr r1, 8022178 <scalbn+0xe8>)
 8022130:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022134:	2b00      	cmp	r3, #0
 8022136:	d1e2      	bne.n	80220fe <scalbn+0x6e>
 8022138:	a30f      	add	r3, pc, #60	; (adr r3, 8022178 <scalbn+0xe8>)
 802213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802213e:	f7de fa6b 	bl	8000618 <__aeabi_dmul>
 8022142:	e7cb      	b.n	80220dc <scalbn+0x4c>
 8022144:	a10a      	add	r1, pc, #40	; (adr r1, 8022170 <scalbn+0xe0>)
 8022146:	e9d1 0100 	ldrd	r0, r1, [r1]
 802214a:	2b00      	cmp	r3, #0
 802214c:	d0b8      	beq.n	80220c0 <scalbn+0x30>
 802214e:	a10e      	add	r1, pc, #56	; (adr r1, 8022188 <scalbn+0xf8>)
 8022150:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022154:	e7b4      	b.n	80220c0 <scalbn+0x30>
 8022156:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802215a:	3236      	adds	r2, #54	; 0x36
 802215c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8022160:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8022164:	4620      	mov	r0, r4
 8022166:	4b0c      	ldr	r3, [pc, #48]	; (8022198 <scalbn+0x108>)
 8022168:	2200      	movs	r2, #0
 802216a:	e7e8      	b.n	802213e <scalbn+0xae>
 802216c:	f3af 8000 	nop.w
 8022170:	c2f8f359 	.word	0xc2f8f359
 8022174:	01a56e1f 	.word	0x01a56e1f
 8022178:	8800759c 	.word	0x8800759c
 802217c:	7e37e43c 	.word	0x7e37e43c
 8022180:	8800759c 	.word	0x8800759c
 8022184:	fe37e43c 	.word	0xfe37e43c
 8022188:	c2f8f359 	.word	0xc2f8f359
 802218c:	81a56e1f 	.word	0x81a56e1f
 8022190:	43500000 	.word	0x43500000
 8022194:	ffff3cb0 	.word	0xffff3cb0
 8022198:	3c900000 	.word	0x3c900000

0802219c <_init>:
 802219c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802219e:	bf00      	nop
 80221a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80221a2:	bc08      	pop	{r3}
 80221a4:	469e      	mov	lr, r3
 80221a6:	4770      	bx	lr

080221a8 <_fini>:
 80221a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80221aa:	bf00      	nop
 80221ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80221ae:	bc08      	pop	{r3}
 80221b0:	469e      	mov	lr, r3
 80221b2:	4770      	bx	lr
